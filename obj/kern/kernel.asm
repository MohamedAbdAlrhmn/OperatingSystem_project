
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 10 19 00 	lgdtl  0x191018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc 0f 19 f0       	mov    $0xf0190fbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 5c 7b 65 f0 01 	movl   $0x1,0xf0657b5c
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 30 7b 65 f0 01 	movl   $0x1,0xf0657b30
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
void print_welcome_message();
//=======================================

//First ever function called in FOS kernel
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 18             	sub    $0x18,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba bc 7c 65 f0       	mov    $0xf0657cbc,%edx
f010006a:	b8 b0 6f 65 f0       	mov    $0xf0656fb0,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 b0 6f 65 f0       	push   $0xf0656fb0
f010007e:	e8 f5 0d 03 00       	call   f0130e78 <memset>
f0100083:	83 c4 10             	add    $0x10,%esp

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100086:	e8 43 0b 00 00       	call   f0100bce <console_initialize>

	//print welcome message
	print_welcome_message();
f010008b:	e8 f2 00 00 00       	call   f0100182 <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f0100090:	e8 a0 60 00 00       	call   f0106135 <detect_memory>
	initialize_kernel_VM();
f0100095:	e8 2c 5c 00 00       	call   f0105cc6 <initialize_kernel_VM>
	initialize_paging();
f010009a:	e8 ad 63 00 00       	call   f010644c <initialize_paging>
	//	page_check();

	//Project initializations

	setPageReplacmentAlgorithmCLOCK();
f010009f:	e8 05 da 00 00       	call   f010daa9 <setPageReplacmentAlgorithmCLOCK>
	setUHeapPlacementStrategyFIRSTFIT();
f01000a4:	e8 a6 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
	setKHeapPlacementStrategyFIRSTFIT();
f01000a9:	e8 91 ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>

#if USE_KHEAP
	//2022:
	{
		int freeFrames_before = sys_calculate_free_frames() ;
f01000ae:	e8 a8 c8 00 00       	call   f010c95b <sys_calculate_free_frames>
f01000b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		int freeDiskFrames_before = pf_calculate_free_frames() ;
f01000b6:	e8 81 3c 00 00       	call   f0103d3c <pf_calculate_free_frames>
f01000bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		initialize_dyn_block_system();
f01000be:	e8 7f 75 00 00       	call   f0107642 <initialize_dyn_block_system>
		int freeFrames_after = sys_calculate_free_frames() ;
f01000c3:	e8 93 c8 00 00       	call   f010c95b <sys_calculate_free_frames>
f01000c8:	89 45 ec             	mov    %eax,-0x14(%ebp)
		int freeDiskFrames_after = pf_calculate_free_frames() ;
f01000cb:	e8 6c 3c 00 00       	call   f0103d3c <pf_calculate_free_frames>
f01000d0:	89 45 e8             	mov    %eax,-0x18(%ebp)
		test_initialize_dyn_block_system(freeFrames_before, freeDiskFrames_before, freeFrames_after, freeDiskFrames_after);
f01000d3:	ff 75 e8             	pushl  -0x18(%ebp)
f01000d6:	ff 75 ec             	pushl  -0x14(%ebp)
f01000d9:	ff 75 f0             	pushl  -0x10(%ebp)
f01000dc:	ff 75 f4             	pushl  -0xc(%ebp)
f01000df:	e8 f7 f6 02 00       	call   f012f7db <test_initialize_dyn_block_system>
f01000e4:	83 c4 10             	add    $0x10,%esp
	}
	MAX_SHARES = (KERNEL_SHARES_ARR_INIT_SIZE) / sizeof(struct Share);
f01000e7:	c7 05 28 7b 65 f0 61 	movl   $0x61,0xf0657b28
f01000ee:	00 00 00 
	MAX_SEMAPHORES = (KERNEL_SEMAPHORES_ARR_INIT_SIZE) / sizeof(struct Semaphore);
f01000f1:	c7 05 b4 7a 65 f0 59 	movl   $0x59,0xf0657ab4
f01000f8:	00 00 00 
#endif
	create_shares_array(MAX_SHARES);
f01000fb:	a1 28 7b 65 f0       	mov    0xf0657b28,%eax
f0100100:	83 ec 0c             	sub    $0xc,%esp
f0100103:	50                   	push   %eax
f0100104:	e8 1d 6f 00 00       	call   f0107026 <create_shares_array>
f0100109:	83 c4 10             	add    $0x10,%esp
	create_semaphores_array(MAX_SEMAPHORES);
f010010c:	a1 b4 7a 65 f0       	mov    0xf0657ab4,%eax
f0100111:	83 ec 0c             	sub    $0xc,%esp
f0100114:	50                   	push   %eax
f0100115:	e8 21 db 00 00       	call   f010dc3b <create_semaphores_array>
f010011a:	83 c4 10             	add    $0x10,%esp

	// Lab 3 user environment initialization functions
	env_init();
f010011d:	e8 6c 99 00 00       	call   f0109a8e <env_init>
	idt_init();
f0100122:	e8 db ae 00 00       	call   f010b002 <idt_init>

	enableBuffering(0);
f0100127:	83 ec 0c             	sub    $0xc,%esp
f010012a:	6a 00                	push   $0x0
f010012c:	e8 85 da 00 00       	call   f010dbb6 <enableBuffering>
f0100131:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0) ;
f0100134:	83 ec 0c             	sub    $0xc,%esp
f0100137:	6a 00                	push   $0x0
f0100139:	e8 60 da 00 00       	call   f010db9e <enableModifiedBuffer>
f010013e:	83 c4 10             	add    $0x10,%esp
	setModifiedBufferLength(1000);
f0100141:	83 ec 0c             	sub    $0xc,%esp
f0100144:	68 e8 03 00 00       	push   $0x3e8
f0100149:	e8 80 da 00 00       	call   f010dbce <setModifiedBufferLength>
f010014e:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f0100151:	e8 ea 59 00 00       	call   f0105b40 <pic_init>
	sched_init() ;
f0100156:	e8 9d 46 00 00       	call   f01047f8 <sched_init>
	//Project initializations

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f010015b:	83 ec 0c             	sub    $0xc,%esp
f010015e:	68 20 2f 13 f0       	push   $0xf0132f20
f0100163:	e8 1a 0b 00 00       	call   f0100c82 <cprintf>
f0100168:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f010016b:	83 ec 0c             	sub    $0xc,%esp
f010016e:	68 4c 2f 13 f0       	push   $0xf0132f4c
f0100173:	e8 0a 0b 00 00       	call   f0100c82 <cprintf>
f0100178:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f010017b:	e8 28 0b 00 00       	call   f0100ca8 <run_command_prompt>
	}
f0100180:	eb d9                	jmp    f010015b <FOS_initialize+0xfc>

f0100182 <print_welcome_message>:
}


void print_welcome_message()
{
f0100182:	55                   	push   %ebp
f0100183:	89 e5                	mov    %esp,%ebp
f0100185:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f0100188:	83 ec 0c             	sub    $0xc,%esp
f010018b:	68 71 2f 13 f0       	push   $0xf0132f71
f0100190:	e8 ed 0a 00 00       	call   f0100c82 <cprintf>
f0100195:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f0100198:	83 ec 0c             	sub    $0xc,%esp
f010019b:	68 78 2f 13 f0       	push   $0xf0132f78
f01001a0:	e8 dd 0a 00 00       	call   f0100c82 <cprintf>
f01001a5:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01001a8:	83 ec 0c             	sub    $0xc,%esp
f01001ab:	68 c0 2f 13 f0       	push   $0xf0132fc0
f01001b0:	e8 cd 0a 00 00       	call   f0100c82 <cprintf>
f01001b5:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f01001b8:	83 ec 0c             	sub    $0xc,%esp
f01001bb:	68 08 30 13 f0       	push   $0xf0133008
f01001c0:	e8 bd 0a 00 00       	call   f0100c82 <cprintf>
f01001c5:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01001c8:	83 ec 0c             	sub    $0xc,%esp
f01001cb:	68 c0 2f 13 f0       	push   $0xf0132fc0
f01001d0:	e8 ad 0a 00 00       	call   f0100c82 <cprintf>
f01001d5:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01001d8:	83 ec 0c             	sub    $0xc,%esp
f01001db:	68 78 2f 13 f0       	push   $0xf0132f78
f01001e0:	e8 9d 0a 00 00       	call   f0100c82 <cprintf>
f01001e5:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f01001e8:	83 ec 0c             	sub    $0xc,%esp
f01001eb:	68 4d 30 13 f0       	push   $0xf013304d
f01001f0:	e8 8d 0a 00 00       	call   f0100c82 <cprintf>
f01001f5:	83 c4 10             	add    $0x10,%esp
}
f01001f8:	90                   	nop
f01001f9:	c9                   	leave  
f01001fa:	c3                   	ret    

f01001fb <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f01001fb:	55                   	push   %ebp
f01001fc:	89 e5                	mov    %esp,%ebp
f01001fe:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100201:	8b 45 10             	mov    0x10(%ebp),%eax
f0100204:	a3 c0 6f 65 f0       	mov    %eax,0xf0656fc0

	va_start(ap, fmt);
f0100209:	8d 45 10             	lea    0x10(%ebp),%eax
f010020c:	83 c0 04             	add    $0x4,%eax
f010020f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f0100212:	83 ec 04             	sub    $0x4,%esp
f0100215:	ff 75 0c             	pushl  0xc(%ebp)
f0100218:	ff 75 08             	pushl  0x8(%ebp)
f010021b:	68 52 30 13 f0       	push   $0xf0133052
f0100220:	e8 5d 0a 00 00       	call   f0100c82 <cprintf>
f0100225:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100228:	8b 45 10             	mov    0x10(%ebp),%eax
f010022b:	83 ec 08             	sub    $0x8,%esp
f010022e:	ff 75 f4             	pushl  -0xc(%ebp)
f0100231:	50                   	push   %eax
f0100232:	e8 22 0a 00 00       	call   f0100c59 <vcprintf>
f0100237:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010023a:	83 ec 0c             	sub    $0xc,%esp
f010023d:	68 6b 30 13 f0       	push   $0xf013306b
f0100242:	e8 3b 0a 00 00       	call   f0100c82 <cprintf>
f0100247:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f010024a:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010024f:	85 c0                	test   %eax,%eax
f0100251:	74 12                	je     f0100265 <_panic+0x6a>
f0100253:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f0100258:	8b 40 54             	mov    0x54(%eax),%eax
f010025b:	83 f8 02             	cmp    $0x2,%eax
f010025e:	75 05                	jne    f0100265 <_panic+0x6a>
	{
		//2015
		env_exit();
f0100260:	e8 1e 97 00 00       	call   f0109983 <env_exit>
		//env_run_cmd_prmpt() ;
	}

	//2015
	fos_scheduler();
f0100265:	e8 db 43 00 00       	call   f0104645 <fos_scheduler>

f010026a <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f010026a:	55                   	push   %ebp
f010026b:	89 e5                	mov    %esp,%ebp
f010026d:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100270:	8b 45 10             	mov    0x10(%ebp),%eax
f0100273:	a3 c0 6f 65 f0       	mov    %eax,0xf0656fc0

	va_start(ap, fmt);
f0100278:	8d 45 10             	lea    0x10(%ebp),%eax
f010027b:	83 c0 04             	add    $0x4,%eax
f010027e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f0100281:	83 ec 04             	sub    $0x4,%esp
f0100284:	ff 75 0c             	pushl  0xc(%ebp)
f0100287:	ff 75 08             	pushl  0x8(%ebp)
f010028a:	68 52 30 13 f0       	push   $0xf0133052
f010028f:	e8 ee 09 00 00       	call   f0100c82 <cprintf>
f0100294:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100297:	8b 45 10             	mov    0x10(%ebp),%eax
f010029a:	83 ec 08             	sub    $0x8,%esp
f010029d:	ff 75 f4             	pushl  -0xc(%ebp)
f01002a0:	50                   	push   %eax
f01002a1:	e8 b3 09 00 00       	call   f0100c59 <vcprintf>
f01002a6:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01002a9:	83 ec 0c             	sub    $0xc,%esp
f01002ac:	68 6b 30 13 f0       	push   $0xf013306b
f01002b1:	e8 cc 09 00 00       	call   f0100c82 <cprintf>
f01002b6:	83 c4 10             	add    $0x10,%esp

	dead:
	/* break into the fos scheduler */

	//exit all ready env's
	sched_exit_all_ready_envs();
f01002b9:	e8 46 51 00 00       	call   f0105404 <sched_exit_all_ready_envs>
	if (curenv != NULL)
f01002be:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f01002c3:	85 c0                	test   %eax,%eax
f01002c5:	74 14                	je     f01002db <_panic_all+0x71>
	{
		//cprintf("exit curenv...........\n");
		sched_exit_env(curenv->env_id);
f01002c7:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f01002cc:	8b 40 4c             	mov    0x4c(%eax),%eax
f01002cf:	83 ec 0c             	sub    $0xc,%esp
f01002d2:	50                   	push   %eax
f01002d3:	e8 f3 4e 00 00       	call   f01051cb <sched_exit_env>
f01002d8:	83 c4 10             	add    $0x10,%esp
		//env_run_cmd_prmpt() ;
	}

	fos_scheduler();
f01002db:	e8 65 43 00 00       	call   f0104645 <fos_scheduler>

f01002e0 <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f01002e0:	55                   	push   %ebp
f01002e1:	89 e5                	mov    %esp,%ebp
f01002e3:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01002e6:	8b 45 10             	mov    0x10(%ebp),%eax
f01002e9:	a3 c0 6f 65 f0       	mov    %eax,0xf0656fc0

	va_start(ap, fmt);
f01002ee:	8d 45 10             	lea    0x10(%ebp),%eax
f01002f1:	83 c0 04             	add    $0x4,%eax
f01002f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01002f7:	83 ec 04             	sub    $0x4,%esp
f01002fa:	ff 75 0c             	pushl  0xc(%ebp)
f01002fd:	ff 75 08             	pushl  0x8(%ebp)
f0100300:	68 52 30 13 f0       	push   $0xf0133052
f0100305:	e8 78 09 00 00       	call   f0100c82 <cprintf>
f010030a:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f010030d:	8b 45 10             	mov    0x10(%ebp),%eax
f0100310:	83 ec 08             	sub    $0x8,%esp
f0100313:	ff 75 f4             	pushl  -0xc(%ebp)
f0100316:	50                   	push   %eax
f0100317:	e8 3d 09 00 00       	call   f0100c59 <vcprintf>
f010031c:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010031f:	83 ec 0c             	sub    $0xc,%esp
f0100322:	68 6b 30 13 f0       	push   $0xf013306b
f0100327:	e8 56 09 00 00       	call   f0100c82 <cprintf>
f010032c:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f010032f:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f0100334:	85 c0                	test   %eax,%eax
f0100336:	74 28                	je     f0100360 <_panic_into_prompt+0x80>
f0100338:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010033d:	8b 40 54             	mov    0x54(%eax),%eax
f0100340:	83 f8 02             	cmp    $0x2,%eax
f0100343:	75 1b                	jne    f0100360 <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f0100345:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010034a:	83 ec 0c             	sub    $0xc,%esp
f010034d:	50                   	push   %eax
f010034e:	e8 30 47 00 00       	call   f0104a83 <sched_insert_exit>
f0100353:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f0100356:	c7 05 14 72 65 f0 00 	movl   $0x0,0xf0657214
f010035d:	00 00 00 
	}

	lcr3(phys_page_directory);
f0100360:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f0100365:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0100368:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010036b:	0f 22 d8             	mov    %eax,%cr3

	scheduler_status = SCH_STOPPED;
f010036e:	c7 05 58 7b 65 f0 00 	movl   $0x0,0xf0657b58
f0100375:	00 00 00 
	while (1)
		run_command_prompt(NULL);
f0100378:	83 ec 0c             	sub    $0xc,%esp
f010037b:	6a 00                	push   $0x0
f010037d:	e8 26 09 00 00       	call   f0100ca8 <run_command_prompt>
f0100382:	83 c4 10             	add    $0x10,%esp
f0100385:	eb f1                	jmp    f0100378 <_panic_into_prompt+0x98>

f0100387 <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f0100387:	55                   	push   %ebp
f0100388:	89 e5                	mov    %esp,%ebp
f010038a:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f010038d:	8d 45 10             	lea    0x10(%ebp),%eax
f0100390:	83 c0 04             	add    $0x4,%eax
f0100393:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f0100396:	83 ec 04             	sub    $0x4,%esp
f0100399:	ff 75 0c             	pushl  0xc(%ebp)
f010039c:	ff 75 08             	pushl  0x8(%ebp)
f010039f:	68 6d 30 13 f0       	push   $0xf013306d
f01003a4:	e8 d9 08 00 00       	call   f0100c82 <cprintf>
f01003a9:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01003ac:	8b 45 10             	mov    0x10(%ebp),%eax
f01003af:	83 ec 08             	sub    $0x8,%esp
f01003b2:	ff 75 f4             	pushl  -0xc(%ebp)
f01003b5:	50                   	push   %eax
f01003b6:	e8 9e 08 00 00       	call   f0100c59 <vcprintf>
f01003bb:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01003be:	83 ec 0c             	sub    $0xc,%esp
f01003c1:	68 6b 30 13 f0       	push   $0xf013306b
f01003c6:	e8 b7 08 00 00       	call   f0100c82 <cprintf>
f01003cb:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f01003ce:	90                   	nop
f01003cf:	c9                   	leave  
f01003d0:	c3                   	ret    

f01003d1 <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f01003d1:	55                   	push   %ebp
f01003d2:	89 e5                	mov    %esp,%ebp
f01003d4:	83 ec 10             	sub    $0x10,%esp
f01003d7:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01003de:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01003e1:	89 c2                	mov    %eax,%edx
f01003e3:	ec                   	in     (%dx),%al
f01003e4:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f01003e7:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f01003ea:	0f b6 c0             	movzbl %al,%eax
f01003ed:	83 e0 01             	and    $0x1,%eax
f01003f0:	85 c0                	test   %eax,%eax
f01003f2:	75 07                	jne    f01003fb <serial_proc_data+0x2a>
		return -1;
f01003f4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01003f9:	eb 16                	jmp    f0100411 <serial_proc_data+0x40>
f01003fb:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100402:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100405:	89 c2                	mov    %eax,%edx
f0100407:	ec                   	in     (%dx),%al
f0100408:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f010040b:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f010040e:	0f b6 c0             	movzbl %al,%eax
}
f0100411:	c9                   	leave  
f0100412:	c3                   	ret    

f0100413 <serial_intr>:

void
serial_intr(void)
{
f0100413:	55                   	push   %ebp
f0100414:	89 e5                	mov    %esp,%ebp
f0100416:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f0100419:	a1 e0 6f 65 f0       	mov    0xf0656fe0,%eax
f010041e:	85 c0                	test   %eax,%eax
f0100420:	74 10                	je     f0100432 <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f0100422:	83 ec 0c             	sub    $0xc,%esp
f0100425:	68 d1 03 10 f0       	push   $0xf01003d1
f010042a:	e8 e4 05 00 00       	call   f0100a13 <cons_intr>
f010042f:	83 c4 10             	add    $0x10,%esp
}
f0100432:	90                   	nop
f0100433:	c9                   	leave  
f0100434:	c3                   	ret    

f0100435 <serial_init>:

void
serial_init(void)
{
f0100435:	55                   	push   %ebp
f0100436:	89 e5                	mov    %esp,%ebp
f0100438:	83 ec 40             	sub    $0x40,%esp
f010043b:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f0100442:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100446:	8a 45 ce             	mov    -0x32(%ebp),%al
f0100449:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010044c:	ee                   	out    %al,(%dx)
f010044d:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f0100454:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f0100458:	8a 45 cf             	mov    -0x31(%ebp),%al
f010045b:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010045e:	ee                   	out    %al,(%dx)
f010045f:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f0100466:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f010046a:	8a 45 d0             	mov    -0x30(%ebp),%al
f010046d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100470:	ee                   	out    %al,(%dx)
f0100471:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f0100478:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f010047c:	8a 45 d1             	mov    -0x2f(%ebp),%al
f010047f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100482:	ee                   	out    %al,(%dx)
f0100483:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f010048a:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f010048e:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0100491:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0100494:	ee                   	out    %al,(%dx)
f0100495:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f010049c:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f01004a0:	8a 45 d3             	mov    -0x2d(%ebp),%al
f01004a3:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01004a6:	ee                   	out    %al,(%dx)
f01004a7:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f01004ae:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f01004b2:	8a 45 d4             	mov    -0x2c(%ebp),%al
f01004b5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01004b8:	ee                   	out    %al,(%dx)
f01004b9:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01004c0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01004c3:	89 c2                	mov    %eax,%edx
f01004c5:	ec                   	in     (%dx),%al
f01004c6:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f01004c9:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f01004cc:	3c ff                	cmp    $0xff,%al
f01004ce:	0f 95 c0             	setne  %al
f01004d1:	0f b6 c0             	movzbl %al,%eax
f01004d4:	a3 e0 6f 65 f0       	mov    %eax,0xf0656fe0
f01004d9:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01004e0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01004e3:	89 c2                	mov    %eax,%edx
f01004e5:	ec                   	in     (%dx),%al
f01004e6:	88 45 d6             	mov    %al,-0x2a(%ebp)
f01004e9:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f01004f0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01004f3:	89 c2                	mov    %eax,%edx
f01004f5:	ec                   	in     (%dx),%al
f01004f6:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f01004f9:	90                   	nop
f01004fa:	c9                   	leave  
f01004fb:	c3                   	ret    

f01004fc <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f01004fc:	55                   	push   %ebp
f01004fd:	89 e5                	mov    %esp,%ebp
f01004ff:	83 ec 20             	sub    $0x20,%esp
f0100502:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f0100509:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010050c:	89 c2                	mov    %eax,%edx
f010050e:	ec                   	in     (%dx),%al
f010050f:	88 45 ec             	mov    %al,-0x14(%ebp)
f0100512:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f0100519:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010051c:	89 c2                	mov    %eax,%edx
f010051e:	ec                   	in     (%dx),%al
f010051f:	88 45 ed             	mov    %al,-0x13(%ebp)
f0100522:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f0100529:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010052c:	89 c2                	mov    %eax,%edx
f010052e:	ec                   	in     (%dx),%al
f010052f:	88 45 ee             	mov    %al,-0x12(%ebp)
f0100532:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f0100539:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010053c:	89 c2                	mov    %eax,%edx
f010053e:	ec                   	in     (%dx),%al
f010053f:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f0100542:	90                   	nop
f0100543:	c9                   	leave  
f0100544:	c3                   	ret    

f0100545 <lpt_putc>:

static void
lpt_putc(int c)
{
f0100545:	55                   	push   %ebp
f0100546:	89 e5                	mov    %esp,%ebp
f0100548:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f010054b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0100552:	eb 08                	jmp    f010055c <lpt_putc+0x17>
		delay();
f0100554:	e8 a3 ff ff ff       	call   f01004fc <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f0100559:	ff 45 fc             	incl   -0x4(%ebp)
f010055c:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f0100563:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100566:	89 c2                	mov    %eax,%edx
f0100568:	ec                   	in     (%dx),%al
f0100569:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f010056c:	8a 45 eb             	mov    -0x15(%ebp),%al
f010056f:	84 c0                	test   %al,%al
f0100571:	78 09                	js     f010057c <lpt_putc+0x37>
f0100573:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f010057a:	7e d8                	jle    f0100554 <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f010057c:	8b 45 08             	mov    0x8(%ebp),%eax
f010057f:	0f b6 c0             	movzbl %al,%eax
f0100582:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f0100589:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010058c:	8a 45 e8             	mov    -0x18(%ebp),%al
f010058f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100592:	ee                   	out    %al,(%dx)
f0100593:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f010059a:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f010059e:	8a 45 e9             	mov    -0x17(%ebp),%al
f01005a1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01005a4:	ee                   	out    %al,(%dx)
f01005a5:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f01005ac:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f01005b0:	8a 45 ea             	mov    -0x16(%ebp),%al
f01005b3:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01005b6:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f01005b7:	90                   	nop
f01005b8:	c9                   	leave  
f01005b9:	c3                   	ret    

f01005ba <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f01005ba:	55                   	push   %ebp
f01005bb:	89 e5                	mov    %esp,%ebp
f01005bd:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f01005c0:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f01005c7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01005ca:	66 8b 00             	mov    (%eax),%ax
f01005cd:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f01005d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01005d4:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f01005d9:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01005dc:	66 8b 00             	mov    (%eax),%ax
f01005df:	66 3d 5a a5          	cmp    $0xa55a,%ax
f01005e3:	74 13                	je     f01005f8 <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f01005e5:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f01005ec:	c7 05 e4 6f 65 f0 b4 	movl   $0x3b4,0xf0656fe4
f01005f3:	03 00 00 
f01005f6:	eb 14                	jmp    f010060c <cga_init+0x52>
	} else {
		*cp = was;
f01005f8:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01005fb:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f01005ff:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f0100602:	c7 05 e4 6f 65 f0 d4 	movl   $0x3d4,0xf0656fe4
f0100609:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f010060c:	a1 e4 6f 65 f0       	mov    0xf0656fe4,%eax
f0100611:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100614:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f0100618:	8a 45 e0             	mov    -0x20(%ebp),%al
f010061b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010061e:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f010061f:	a1 e4 6f 65 f0       	mov    0xf0656fe4,%eax
f0100624:	40                   	inc    %eax
f0100625:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100628:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010062b:	89 c2                	mov    %eax,%edx
f010062d:	ec                   	in     (%dx),%al
f010062e:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f0100631:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100634:	0f b6 c0             	movzbl %al,%eax
f0100637:	c1 e0 08             	shl    $0x8,%eax
f010063a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f010063d:	a1 e4 6f 65 f0       	mov    0xf0656fe4,%eax
f0100642:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100645:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100649:	8a 45 e2             	mov    -0x1e(%ebp),%al
f010064c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010064f:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f0100650:	a1 e4 6f 65 f0       	mov    0xf0656fe4,%eax
f0100655:	40                   	inc    %eax
f0100656:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100659:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010065c:	89 c2                	mov    %eax,%edx
f010065e:	ec                   	in     (%dx),%al
f010065f:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100662:	8a 45 e3             	mov    -0x1d(%ebp),%al
f0100665:	0f b6 c0             	movzbl %al,%eax
f0100668:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f010066b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010066e:	a3 e8 6f 65 f0       	mov    %eax,0xf0656fe8
	crt_pos = pos;
f0100673:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100676:	66 a3 ec 6f 65 f0    	mov    %ax,0xf0656fec
}
f010067c:	90                   	nop
f010067d:	c9                   	leave  
f010067e:	c3                   	ret    

f010067f <cga_putc>:



void
cga_putc(int c)
{
f010067f:	55                   	push   %ebp
f0100680:	89 e5                	mov    %esp,%ebp
f0100682:	53                   	push   %ebx
f0100683:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f0100686:	8b 45 08             	mov    0x8(%ebp),%eax
f0100689:	b0 00                	mov    $0x0,%al
f010068b:	85 c0                	test   %eax,%eax
f010068d:	75 07                	jne    f0100696 <cga_putc+0x17>
		c |= 0x0700;
f010068f:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f0100696:	8b 45 08             	mov    0x8(%ebp),%eax
f0100699:	0f b6 c0             	movzbl %al,%eax
f010069c:	83 f8 09             	cmp    $0x9,%eax
f010069f:	0f 84 94 00 00 00    	je     f0100739 <cga_putc+0xba>
f01006a5:	83 f8 09             	cmp    $0x9,%eax
f01006a8:	7f 0a                	jg     f01006b4 <cga_putc+0x35>
f01006aa:	83 f8 08             	cmp    $0x8,%eax
f01006ad:	74 14                	je     f01006c3 <cga_putc+0x44>
f01006af:	e9 c8 00 00 00       	jmp    f010077c <cga_putc+0xfd>
f01006b4:	83 f8 0a             	cmp    $0xa,%eax
f01006b7:	74 49                	je     f0100702 <cga_putc+0x83>
f01006b9:	83 f8 0d             	cmp    $0xd,%eax
f01006bc:	74 53                	je     f0100711 <cga_putc+0x92>
f01006be:	e9 b9 00 00 00       	jmp    f010077c <cga_putc+0xfd>
	case '\b':
		if (crt_pos > 0) {
f01006c3:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f01006c9:	66 85 c0             	test   %ax,%ax
f01006cc:	0f 84 d0 00 00 00    	je     f01007a2 <cga_putc+0x123>
			crt_pos--;
f01006d2:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f01006d8:	48                   	dec    %eax
f01006d9:	66 a3 ec 6f 65 f0    	mov    %ax,0xf0656fec
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f01006df:	8b 15 e8 6f 65 f0    	mov    0xf0656fe8,%edx
f01006e5:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f01006eb:	0f b7 c0             	movzwl %ax,%eax
f01006ee:	01 c0                	add    %eax,%eax
f01006f0:	01 c2                	add    %eax,%edx
f01006f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01006f5:	b0 00                	mov    $0x0,%al
f01006f7:	83 c8 20             	or     $0x20,%eax
f01006fa:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f01006fd:	e9 a0 00 00 00       	jmp    f01007a2 <cga_putc+0x123>
	case '\n':
		crt_pos += CRT_COLS;
f0100702:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f0100708:	83 c0 50             	add    $0x50,%eax
f010070b:	66 a3 ec 6f 65 f0    	mov    %ax,0xf0656fec
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f0100711:	66 8b 0d ec 6f 65 f0 	mov    0xf0656fec,%cx
f0100718:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f010071e:	bb 50 00 00 00       	mov    $0x50,%ebx
f0100723:	ba 00 00 00 00       	mov    $0x0,%edx
f0100728:	66 f7 f3             	div    %bx
f010072b:	89 d0                	mov    %edx,%eax
f010072d:	29 c1                	sub    %eax,%ecx
f010072f:	89 c8                	mov    %ecx,%eax
f0100731:	66 a3 ec 6f 65 f0    	mov    %ax,0xf0656fec
		break;
f0100737:	eb 6a                	jmp    f01007a3 <cga_putc+0x124>
	case '\t':
		cons_putc(' ');
f0100739:	83 ec 0c             	sub    $0xc,%esp
f010073c:	6a 20                	push   $0x20
f010073e:	e8 69 04 00 00       	call   f0100bac <cons_putc>
f0100743:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f0100746:	83 ec 0c             	sub    $0xc,%esp
f0100749:	6a 20                	push   $0x20
f010074b:	e8 5c 04 00 00       	call   f0100bac <cons_putc>
f0100750:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f0100753:	83 ec 0c             	sub    $0xc,%esp
f0100756:	6a 20                	push   $0x20
f0100758:	e8 4f 04 00 00       	call   f0100bac <cons_putc>
f010075d:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f0100760:	83 ec 0c             	sub    $0xc,%esp
f0100763:	6a 20                	push   $0x20
f0100765:	e8 42 04 00 00       	call   f0100bac <cons_putc>
f010076a:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f010076d:	83 ec 0c             	sub    $0xc,%esp
f0100770:	6a 20                	push   $0x20
f0100772:	e8 35 04 00 00       	call   f0100bac <cons_putc>
f0100777:	83 c4 10             	add    $0x10,%esp
		break;
f010077a:	eb 27                	jmp    f01007a3 <cga_putc+0x124>
	default:
		crt_buf[crt_pos++] = c;		/* write the character */
f010077c:	8b 0d e8 6f 65 f0    	mov    0xf0656fe8,%ecx
f0100782:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f0100788:	8d 50 01             	lea    0x1(%eax),%edx
f010078b:	66 89 15 ec 6f 65 f0 	mov    %dx,0xf0656fec
f0100792:	0f b7 c0             	movzwl %ax,%eax
f0100795:	01 c0                	add    %eax,%eax
f0100797:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010079a:	8b 45 08             	mov    0x8(%ebp),%eax
f010079d:	66 89 02             	mov    %ax,(%edx)
		break;
f01007a0:	eb 01                	jmp    f01007a3 <cga_putc+0x124>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f01007a2:	90                   	nop
		crt_buf[crt_pos++] = c;		/* write the character */
		break;
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f01007a3:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f01007a9:	66 3d cf 07          	cmp    $0x7cf,%ax
f01007ad:	76 58                	jbe    f0100807 <cga_putc+0x188>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f01007af:	a1 e8 6f 65 f0       	mov    0xf0656fe8,%eax
f01007b4:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f01007ba:	a1 e8 6f 65 f0       	mov    0xf0656fe8,%eax
f01007bf:	83 ec 04             	sub    $0x4,%esp
f01007c2:	68 00 0f 00 00       	push   $0xf00
f01007c7:	52                   	push   %edx
f01007c8:	50                   	push   %eax
f01007c9:	e8 da 06 03 00       	call   f0130ea8 <memcpy>
f01007ce:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f01007d1:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f01007d8:	eb 15                	jmp    f01007ef <cga_putc+0x170>
			crt_buf[i] = 0x0700 | ' ';
f01007da:	8b 15 e8 6f 65 f0    	mov    0xf0656fe8,%edx
f01007e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01007e3:	01 c0                	add    %eax,%eax
f01007e5:	01 d0                	add    %edx,%eax
f01007e7:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f01007ec:	ff 45 f4             	incl   -0xc(%ebp)
f01007ef:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f01007f6:	7e e2                	jle    f01007da <cga_putc+0x15b>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f01007f8:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f01007fe:	83 e8 50             	sub    $0x50,%eax
f0100801:	66 a3 ec 6f 65 f0    	mov    %ax,0xf0656fec
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f0100807:	a1 e4 6f 65 f0       	mov    0xf0656fe4,%eax
f010080c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010080f:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100813:	8a 45 e0             	mov    -0x20(%ebp),%al
f0100816:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100819:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f010081a:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f0100820:	66 c1 e8 08          	shr    $0x8,%ax
f0100824:	0f b6 c0             	movzbl %al,%eax
f0100827:	8b 15 e4 6f 65 f0    	mov    0xf0656fe4,%edx
f010082d:	42                   	inc    %edx
f010082e:	89 55 ec             	mov    %edx,-0x14(%ebp)
f0100831:	88 45 e1             	mov    %al,-0x1f(%ebp)
f0100834:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100837:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010083a:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f010083b:	a1 e4 6f 65 f0       	mov    0xf0656fe4,%eax
f0100840:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100843:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f0100847:	8a 45 e2             	mov    -0x1e(%ebp),%al
f010084a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010084d:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f010084e:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f0100854:	0f b6 c0             	movzbl %al,%eax
f0100857:	8b 15 e4 6f 65 f0    	mov    0xf0656fe4,%edx
f010085d:	42                   	inc    %edx
f010085e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f0100861:	88 45 e3             	mov    %al,-0x1d(%ebp)
f0100864:	8a 45 e3             	mov    -0x1d(%ebp),%al
f0100867:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010086a:	ee                   	out    %al,(%dx)
}
f010086b:	90                   	nop
f010086c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010086f:	c9                   	leave  
f0100870:	c3                   	ret    

f0100871 <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f0100871:	55                   	push   %ebp
f0100872:	89 e5                	mov    %esp,%ebp
f0100874:	83 ec 28             	sub    $0x28,%esp
f0100877:	c7 45 e4 64 00 00 00 	movl   $0x64,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010087e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100881:	89 c2                	mov    %eax,%edx
f0100883:	ec                   	in     (%dx),%al
f0100884:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100887:	8a 45 e3             	mov    -0x1d(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f010088a:	0f b6 c0             	movzbl %al,%eax
f010088d:	83 e0 01             	and    $0x1,%eax
f0100890:	85 c0                	test   %eax,%eax
f0100892:	75 0a                	jne    f010089e <kbd_proc_data+0x2d>
		return -1;
f0100894:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100899:	e9 54 01 00 00       	jmp    f01009f2 <kbd_proc_data+0x181>
f010089e:	c7 45 ec 60 00 00 00 	movl   $0x60,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01008a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01008a8:	89 c2                	mov    %eax,%edx
f01008aa:	ec                   	in     (%dx),%al
f01008ab:	88 45 e2             	mov    %al,-0x1e(%ebp)
	return data;
f01008ae:	8a 45 e2             	mov    -0x1e(%ebp),%al

	data = inb(KBDATAP);
f01008b1:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f01008b4:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f01008b8:	75 17                	jne    f01008d1 <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f01008ba:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f01008bf:	83 c8 40             	or     $0x40,%eax
f01008c2:	a3 08 72 65 f0       	mov    %eax,0xf0657208
		return 0;
f01008c7:	b8 00 00 00 00       	mov    $0x0,%eax
f01008cc:	e9 21 01 00 00       	jmp    f01009f2 <kbd_proc_data+0x181>
	} else if (data & 0x80) {
f01008d1:	8a 45 f3             	mov    -0xd(%ebp),%al
f01008d4:	84 c0                	test   %al,%al
f01008d6:	79 44                	jns    f010091c <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f01008d8:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f01008dd:	83 e0 40             	and    $0x40,%eax
f01008e0:	85 c0                	test   %eax,%eax
f01008e2:	75 08                	jne    f01008ec <kbd_proc_data+0x7b>
f01008e4:	8a 45 f3             	mov    -0xd(%ebp),%al
f01008e7:	83 e0 7f             	and    $0x7f,%eax
f01008ea:	eb 03                	jmp    f01008ef <kbd_proc_data+0x7e>
f01008ec:	8a 45 f3             	mov    -0xd(%ebp),%al
f01008ef:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f01008f2:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01008f6:	8a 80 20 10 19 f0    	mov    -0xfe6efe0(%eax),%al
f01008fc:	83 c8 40             	or     $0x40,%eax
f01008ff:	0f b6 c0             	movzbl %al,%eax
f0100902:	f7 d0                	not    %eax
f0100904:	89 c2                	mov    %eax,%edx
f0100906:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f010090b:	21 d0                	and    %edx,%eax
f010090d:	a3 08 72 65 f0       	mov    %eax,0xf0657208
		return 0;
f0100912:	b8 00 00 00 00       	mov    $0x0,%eax
f0100917:	e9 d6 00 00 00       	jmp    f01009f2 <kbd_proc_data+0x181>
	} else if (shift & E0ESC) {
f010091c:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f0100921:	83 e0 40             	and    $0x40,%eax
f0100924:	85 c0                	test   %eax,%eax
f0100926:	74 11                	je     f0100939 <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f0100928:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f010092c:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f0100931:	83 e0 bf             	and    $0xffffffbf,%eax
f0100934:	a3 08 72 65 f0       	mov    %eax,0xf0657208
	}

	shift |= shiftcode[data];
f0100939:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f010093d:	8a 80 20 10 19 f0    	mov    -0xfe6efe0(%eax),%al
f0100943:	0f b6 d0             	movzbl %al,%edx
f0100946:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f010094b:	09 d0                	or     %edx,%eax
f010094d:	a3 08 72 65 f0       	mov    %eax,0xf0657208
	shift ^= togglecode[data];
f0100952:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100956:	8a 80 20 11 19 f0    	mov    -0xfe6eee0(%eax),%al
f010095c:	0f b6 d0             	movzbl %al,%edx
f010095f:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f0100964:	31 d0                	xor    %edx,%eax
f0100966:	a3 08 72 65 f0       	mov    %eax,0xf0657208

	c = charcode[shift & (CTL | SHIFT)][data];
f010096b:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f0100970:	83 e0 03             	and    $0x3,%eax
f0100973:	8b 14 85 20 15 19 f0 	mov    -0xfe6eae0(,%eax,4),%edx
f010097a:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f010097e:	01 d0                	add    %edx,%eax
f0100980:	8a 00                	mov    (%eax),%al
f0100982:	0f b6 c0             	movzbl %al,%eax
f0100985:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shift & CAPSLOCK) {
f0100988:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f010098d:	83 e0 08             	and    $0x8,%eax
f0100990:	85 c0                	test   %eax,%eax
f0100992:	74 22                	je     f01009b6 <kbd_proc_data+0x145>
		if ('a' <= c && c <= 'z')
f0100994:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100998:	7e 0c                	jle    f01009a6 <kbd_proc_data+0x135>
f010099a:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f010099e:	7f 06                	jg     f01009a6 <kbd_proc_data+0x135>
			c += 'A' - 'a';
f01009a0:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f01009a4:	eb 10                	jmp    f01009b6 <kbd_proc_data+0x145>
		else if ('A' <= c && c <= 'Z')
f01009a6:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f01009aa:	7e 0a                	jle    f01009b6 <kbd_proc_data+0x145>
f01009ac:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f01009b0:	7f 04                	jg     f01009b6 <kbd_proc_data+0x145>
			c += 'a' - 'A';
f01009b2:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f01009b6:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f01009bb:	f7 d0                	not    %eax
f01009bd:	83 e0 06             	and    $0x6,%eax
f01009c0:	85 c0                	test   %eax,%eax
f01009c2:	75 2b                	jne    f01009ef <kbd_proc_data+0x17e>
f01009c4:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f01009cb:	75 22                	jne    f01009ef <kbd_proc_data+0x17e>
		cprintf("Rebooting!\n");
f01009cd:	83 ec 0c             	sub    $0xc,%esp
f01009d0:	68 88 30 13 f0       	push   $0xf0133088
f01009d5:	e8 a8 02 00 00       	call   f0100c82 <cprintf>
f01009da:	83 c4 10             	add    $0x10,%esp
f01009dd:	c7 45 e8 92 00 00 00 	movl   $0x92,-0x18(%ebp)
f01009e4:	c6 45 e1 03          	movb   $0x3,-0x1f(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01009e8:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01009eb:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01009ee:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f01009ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01009f2:	c9                   	leave  
f01009f3:	c3                   	ret    

f01009f4 <kbd_intr>:

void
kbd_intr(void)
{
f01009f4:	55                   	push   %ebp
f01009f5:	89 e5                	mov    %esp,%ebp
f01009f7:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f01009fa:	83 ec 0c             	sub    $0xc,%esp
f01009fd:	68 71 08 10 f0       	push   $0xf0100871
f0100a02:	e8 0c 00 00 00       	call   f0100a13 <cons_intr>
f0100a07:	83 c4 10             	add    $0x10,%esp
}
f0100a0a:	90                   	nop
f0100a0b:	c9                   	leave  
f0100a0c:	c3                   	ret    

f0100a0d <kbd_init>:

void
kbd_init(void)
{
f0100a0d:	55                   	push   %ebp
f0100a0e:	89 e5                	mov    %esp,%ebp
}
f0100a10:	90                   	nop
f0100a11:	5d                   	pop    %ebp
f0100a12:	c3                   	ret    

f0100a13 <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f0100a13:	55                   	push   %ebp
f0100a14:	89 e5                	mov    %esp,%ebp
f0100a16:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f0100a19:	eb 35                	jmp    f0100a50 <cons_intr+0x3d>
		if (c == 0)
f0100a1b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100a1f:	75 02                	jne    f0100a23 <cons_intr+0x10>
			continue;
f0100a21:	eb 2d                	jmp    f0100a50 <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f0100a23:	a1 04 72 65 f0       	mov    0xf0657204,%eax
f0100a28:	8d 50 01             	lea    0x1(%eax),%edx
f0100a2b:	89 15 04 72 65 f0    	mov    %edx,0xf0657204
f0100a31:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100a34:	88 90 00 70 65 f0    	mov    %dl,-0xf9a9000(%eax)
		if (cons.wpos == CONSBUFSIZE)
f0100a3a:	a1 04 72 65 f0       	mov    0xf0657204,%eax
f0100a3f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100a44:	75 0a                	jne    f0100a50 <cons_intr+0x3d>
			cons.wpos = 0;
f0100a46:	c7 05 04 72 65 f0 00 	movl   $0x0,0xf0657204
f0100a4d:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f0100a50:	8b 45 08             	mov    0x8(%ebp),%eax
f0100a53:	ff d0                	call   *%eax
f0100a55:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100a58:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100a5c:	75 bd                	jne    f0100a1b <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100a5e:	90                   	nop
f0100a5f:	c9                   	leave  
f0100a60:	c3                   	ret    

f0100a61 <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100a61:	55                   	push   %ebp
f0100a62:	89 e5                	mov    %esp,%ebp
f0100a64:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100a67:	e8 a7 f9 ff ff       	call   f0100413 <serial_intr>
	kbd_intr();
f0100a6c:	e8 83 ff ff ff       	call   f01009f4 <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100a71:	8b 15 00 72 65 f0    	mov    0xf0657200,%edx
f0100a77:	a1 04 72 65 f0       	mov    0xf0657204,%eax
f0100a7c:	39 c2                	cmp    %eax,%edx
f0100a7e:	74 35                	je     f0100ab5 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100a80:	a1 00 72 65 f0       	mov    0xf0657200,%eax
f0100a85:	8d 50 01             	lea    0x1(%eax),%edx
f0100a88:	89 15 00 72 65 f0    	mov    %edx,0xf0657200
f0100a8e:	8a 80 00 70 65 f0    	mov    -0xf9a9000(%eax),%al
f0100a94:	0f b6 c0             	movzbl %al,%eax
f0100a97:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100a9a:	a1 00 72 65 f0       	mov    0xf0657200,%eax
f0100a9f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100aa4:	75 0a                	jne    f0100ab0 <cons_getc+0x4f>
			cons.rpos = 0;
f0100aa6:	c7 05 00 72 65 f0 00 	movl   $0x0,0xf0657200
f0100aad:	00 00 00 
		return c;
f0100ab0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100ab3:	eb 05                	jmp    f0100aba <cons_getc+0x59>
	}
	return 0;
f0100ab5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100aba:	c9                   	leave  
f0100abb:	c3                   	ret    

f0100abc <cons_getc2>:
// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100abc:	55                   	push   %ebp
f0100abd:	89 e5                	mov    %esp,%ebp
f0100abf:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100ac2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100ac9:	a1 e0 6f 65 f0       	mov    0xf0656fe0,%eax
f0100ace:	85 c0                	test   %eax,%eax
f0100ad0:	74 41                	je     f0100b13 <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100ad2:	e8 fa f8 ff ff       	call   f01003d1 <serial_proc_data>
f0100ad7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100ada:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100ade:	74 33                	je     f0100b13 <cons_getc2+0x57>
				if (c1 == 0)
f0100ae0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100ae4:	74 2d                	je     f0100b13 <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100ae6:	a1 04 72 65 f0       	mov    0xf0657204,%eax
f0100aeb:	8d 50 01             	lea    0x1(%eax),%edx
f0100aee:	89 15 04 72 65 f0    	mov    %edx,0xf0657204
f0100af4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100af7:	88 90 00 70 65 f0    	mov    %dl,-0xf9a9000(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100afd:	a1 04 72 65 f0       	mov    0xf0657204,%eax
f0100b02:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b07:	75 0a                	jne    f0100b13 <cons_getc2+0x57>
						cons.wpos = 0;
f0100b09:	c7 05 04 72 65 f0 00 	movl   $0x0,0xf0657204
f0100b10:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100b13:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100b1a:	e8 52 fd ff ff       	call   f0100871 <kbd_proc_data>
f0100b1f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100b22:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100b26:	74 33                	je     f0100b5b <cons_getc2+0x9f>
			if (c2 == 0)
f0100b28:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100b2c:	74 2d                	je     f0100b5b <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100b2e:	a1 04 72 65 f0       	mov    0xf0657204,%eax
f0100b33:	8d 50 01             	lea    0x1(%eax),%edx
f0100b36:	89 15 04 72 65 f0    	mov    %edx,0xf0657204
f0100b3c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100b3f:	88 90 00 70 65 f0    	mov    %dl,-0xf9a9000(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100b45:	a1 04 72 65 f0       	mov    0xf0657204,%eax
f0100b4a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b4f:	75 0a                	jne    f0100b5b <cons_getc2+0x9f>
					cons.wpos = 0;
f0100b51:	c7 05 04 72 65 f0 00 	movl   $0x0,0xf0657204
f0100b58:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100b5b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100b5f:	7e 44                	jle    f0100ba5 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100b61:	8b 15 00 72 65 f0    	mov    0xf0657200,%edx
f0100b67:	a1 04 72 65 f0       	mov    0xf0657204,%eax
f0100b6c:	39 c2                	cmp    %eax,%edx
f0100b6e:	74 35                	je     f0100ba5 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100b70:	a1 00 72 65 f0       	mov    0xf0657200,%eax
f0100b75:	8d 50 01             	lea    0x1(%eax),%edx
f0100b78:	89 15 00 72 65 f0    	mov    %edx,0xf0657200
f0100b7e:	8a 80 00 70 65 f0    	mov    -0xf9a9000(%eax),%al
f0100b84:	0f b6 c0             	movzbl %al,%eax
f0100b87:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100b8a:	a1 00 72 65 f0       	mov    0xf0657200,%eax
f0100b8f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b94:	75 0a                	jne    f0100ba0 <cons_getc2+0xe4>
				cons.rpos = 0;
f0100b96:	c7 05 00 72 65 f0 00 	movl   $0x0,0xf0657200
f0100b9d:	00 00 00 
			return c;
f0100ba0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100ba3:	eb 05                	jmp    f0100baa <cons_getc2+0xee>
		}
	}
	return 0;
f0100ba5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100baa:	c9                   	leave  
f0100bab:	c3                   	ret    

f0100bac <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100bac:	55                   	push   %ebp
f0100bad:	89 e5                	mov    %esp,%ebp
f0100baf:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100bb2:	ff 75 08             	pushl  0x8(%ebp)
f0100bb5:	e8 8b f9 ff ff       	call   f0100545 <lpt_putc>
f0100bba:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100bbd:	83 ec 0c             	sub    $0xc,%esp
f0100bc0:	ff 75 08             	pushl  0x8(%ebp)
f0100bc3:	e8 b7 fa ff ff       	call   f010067f <cga_putc>
f0100bc8:	83 c4 10             	add    $0x10,%esp
}
f0100bcb:	90                   	nop
f0100bcc:	c9                   	leave  
f0100bcd:	c3                   	ret    

f0100bce <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100bce:	55                   	push   %ebp
f0100bcf:	89 e5                	mov    %esp,%ebp
f0100bd1:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100bd4:	e8 e1 f9 ff ff       	call   f01005ba <cga_init>
	kbd_init();
f0100bd9:	e8 2f fe ff ff       	call   f0100a0d <kbd_init>
	serial_init();
f0100bde:	e8 52 f8 ff ff       	call   f0100435 <serial_init>

	if (!serial_exists)
f0100be3:	a1 e0 6f 65 f0       	mov    0xf0656fe0,%eax
f0100be8:	85 c0                	test   %eax,%eax
f0100bea:	75 10                	jne    f0100bfc <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100bec:	83 ec 0c             	sub    $0xc,%esp
f0100bef:	68 94 30 13 f0       	push   $0xf0133094
f0100bf4:	e8 89 00 00 00       	call   f0100c82 <cprintf>
f0100bf9:	83 c4 10             	add    $0x10,%esp
}
f0100bfc:	90                   	nop
f0100bfd:	c9                   	leave  
f0100bfe:	c3                   	ret    

f0100bff <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100bff:	55                   	push   %ebp
f0100c00:	89 e5                	mov    %esp,%ebp
f0100c02:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100c05:	83 ec 0c             	sub    $0xc,%esp
f0100c08:	ff 75 08             	pushl  0x8(%ebp)
f0100c0b:	e8 9c ff ff ff       	call   f0100bac <cons_putc>
f0100c10:	83 c4 10             	add    $0x10,%esp
}
f0100c13:	90                   	nop
f0100c14:	c9                   	leave  
f0100c15:	c3                   	ret    

f0100c16 <getchar>:

int
getchar(void)
{
f0100c16:	55                   	push   %ebp
f0100c17:	89 e5                	mov    %esp,%ebp
f0100c19:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100c1c:	e8 40 fe ff ff       	call   f0100a61 <cons_getc>
f0100c21:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100c24:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100c28:	74 f2                	je     f0100c1c <getchar+0x6>
		/* do nothing */;
	return c;
f0100c2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100c2d:	c9                   	leave  
f0100c2e:	c3                   	ret    

f0100c2f <iscons>:

int
iscons(int fdnum)
{
f0100c2f:	55                   	push   %ebp
f0100c30:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100c32:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100c37:	5d                   	pop    %ebp
f0100c38:	c3                   	ret    

f0100c39 <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f0100c39:	55                   	push   %ebp
f0100c3a:	89 e5                	mov    %esp,%ebp
f0100c3c:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100c3f:	83 ec 0c             	sub    $0xc,%esp
f0100c42:	ff 75 08             	pushl  0x8(%ebp)
f0100c45:	e8 b5 ff ff ff       	call   f0100bff <cputchar>
f0100c4a:	83 c4 10             	add    $0x10,%esp
	*cnt++;
f0100c4d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100c50:	83 c0 04             	add    $0x4,%eax
f0100c53:	89 45 0c             	mov    %eax,0xc(%ebp)
}
f0100c56:	90                   	nop
f0100c57:	c9                   	leave  
f0100c58:	c3                   	ret    

f0100c59 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100c59:	55                   	push   %ebp
f0100c5a:	89 e5                	mov    %esp,%ebp
f0100c5c:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100c5f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100c66:	ff 75 0c             	pushl  0xc(%ebp)
f0100c69:	ff 75 08             	pushl  0x8(%ebp)
f0100c6c:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100c6f:	50                   	push   %eax
f0100c70:	68 39 0c 10 f0       	push   $0xf0100c39
f0100c75:	e8 62 f9 02 00       	call   f01305dc <vprintfmt>
f0100c7a:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100c7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100c80:	c9                   	leave  
f0100c81:	c3                   	ret    

f0100c82 <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100c82:	55                   	push   %ebp
f0100c83:	89 e5                	mov    %esp,%ebp
f0100c85:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0100c88:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100c8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0100c8e:	8b 45 08             	mov    0x8(%ebp),%eax
f0100c91:	83 ec 08             	sub    $0x8,%esp
f0100c94:	ff 75 f4             	pushl  -0xc(%ebp)
f0100c97:	50                   	push   %eax
f0100c98:	e8 bc ff ff ff       	call   f0100c59 <vcprintf>
f0100c9d:	83 c4 10             	add    $0x10,%esp
f0100ca0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0100ca3:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100ca6:	c9                   	leave  
f0100ca7:	c3                   	ret    

f0100ca8 <run_command_prompt>:

//TODO: [PROJECT MS1] [COMMAND PROMPT] auto-complete

//invoke the command prompt
void run_command_prompt()
{
f0100ca8:	55                   	push   %ebp
f0100ca9:	89 e5                	mov    %esp,%ebp
f0100cab:	81 ec 08 04 00 00    	sub    $0x408,%esp
	char command_line[1024];

	while (1==1)
	{
		//get command line
		readline("FOS> ", command_line);
f0100cb1:	83 ec 08             	sub    $0x8,%esp
f0100cb4:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100cba:	50                   	push   %eax
f0100cbb:	68 b1 30 13 f0       	push   $0xf01330b1
f0100cc0:	e8 bf fd 02 00       	call   f0130a84 <readline>
f0100cc5:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0100cc8:	83 ec 0c             	sub    $0xc,%esp
f0100ccb:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100cd1:	50                   	push   %eax
f0100cd2:	e8 0d 00 00 00       	call   f0100ce4 <execute_command>
f0100cd7:	83 c4 10             	add    $0x10,%esp
f0100cda:	85 c0                	test   %eax,%eax
f0100cdc:	78 02                	js     f0100ce0 <run_command_prompt+0x38>
				break;
	}
f0100cde:	eb d1                	jmp    f0100cb1 <run_command_prompt+0x9>
		readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0100ce0:	90                   	nop
	}
}
f0100ce1:	90                   	nop
f0100ce2:	c9                   	leave  
f0100ce3:	c3                   	ret    

f0100ce4 <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0100ce4:	55                   	push   %ebp
f0100ce5:	89 e5                	mov    %esp,%ebp
f0100ce7:	81 ec a8 00 00 00    	sub    $0xa8,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];
	char *auto_fun[MAX_ARGUMENTS];

	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0100ced:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0100cf0:	50                   	push   %eax
f0100cf1:	8d 45 a0             	lea    -0x60(%ebp),%eax
f0100cf4:	50                   	push   %eax
f0100cf5:	68 b7 30 13 f0       	push   $0xf01330b7
f0100cfa:	ff 75 08             	pushl  0x8(%ebp)
f0100cfd:	e8 bc 05 03 00       	call   f01312be <strsplit>
f0100d02:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0100d05:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0100d08:	85 c0                	test   %eax,%eax
f0100d0a:	75 0a                	jne    f0100d16 <execute_command+0x32>
		return 0;
f0100d0c:	b8 00 00 00 00       	mov    $0x0,%eax
f0100d11:	e9 37 01 00 00       	jmp    f0100e4d <execute_command+0x169>

	// Lookup in the commands array and execute the command
	int command_found = 0;
f0100d16:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int i ;
	int count = 0;
f0100d1d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100d24:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0100d2b:	e9 8c 00 00 00       	jmp    f0100dbc <execute_command+0xd8>
	{
		if (strcmp(arguments[0], commands[i].name) == 0)
f0100d30:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100d33:	89 d0                	mov    %edx,%eax
f0100d35:	01 c0                	add    %eax,%eax
f0100d37:	01 d0                	add    %edx,%eax
f0100d39:	c1 e0 02             	shl    $0x2,%eax
f0100d3c:	05 40 15 19 f0       	add    $0xf0191540,%eax
f0100d41:	8b 10                	mov    (%eax),%edx
f0100d43:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100d46:	83 ec 08             	sub    $0x8,%esp
f0100d49:	52                   	push   %edx
f0100d4a:	50                   	push   %eax
f0100d4b:	e8 46 00 03 00       	call   f0130d96 <strcmp>
f0100d50:	83 c4 10             	add    $0x10,%esp
f0100d53:	85 c0                	test   %eax,%eax
f0100d55:	75 09                	jne    f0100d60 <execute_command+0x7c>
		{
			command_found = 1;
f0100d57:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
			break;
f0100d5e:	eb 6c                	jmp    f0100dcc <execute_command+0xe8>
		}
		else if (strncmp(arguments[0], commands[i].name,strlen(arguments[0])) == 0)
f0100d60:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100d63:	83 ec 0c             	sub    $0xc,%esp
f0100d66:	50                   	push   %eax
f0100d67:	e8 1e ff 02 00       	call   f0130c8a <strlen>
f0100d6c:	83 c4 10             	add    $0x10,%esp
f0100d6f:	89 c1                	mov    %eax,%ecx
f0100d71:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100d74:	89 d0                	mov    %edx,%eax
f0100d76:	01 c0                	add    %eax,%eax
f0100d78:	01 d0                	add    %edx,%eax
f0100d7a:	c1 e0 02             	shl    $0x2,%eax
f0100d7d:	05 40 15 19 f0       	add    $0xf0191540,%eax
f0100d82:	8b 10                	mov    (%eax),%edx
f0100d84:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100d87:	83 ec 04             	sub    $0x4,%esp
f0100d8a:	51                   	push   %ecx
f0100d8b:	52                   	push   %edx
f0100d8c:	50                   	push   %eax
f0100d8d:	e8 3c 00 03 00       	call   f0130dce <strncmp>
f0100d92:	83 c4 10             	add    $0x10,%esp
f0100d95:	85 c0                	test   %eax,%eax
f0100d97:	75 20                	jne    f0100db9 <execute_command+0xd5>
		{
			auto_fun[count] = commands[i].name;
f0100d99:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100d9c:	89 d0                	mov    %edx,%eax
f0100d9e:	01 c0                	add    %eax,%eax
f0100da0:	01 d0                	add    %edx,%eax
f0100da2:	c1 e0 02             	shl    $0x2,%eax
f0100da5:	05 40 15 19 f0       	add    $0xf0191540,%eax
f0100daa:	8b 10                	mov    (%eax),%edx
f0100dac:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100daf:	89 94 85 60 ff ff ff 	mov    %edx,-0xa0(%ebp,%eax,4)
			count++;
f0100db6:	ff 45 ec             	incl   -0x14(%ebp)

	// Lookup in the commands array and execute the command
	int command_found = 0;
	int i ;
	int count = 0;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100db9:	ff 45 f0             	incl   -0x10(%ebp)
f0100dbc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100dbf:	a1 ac 18 19 f0       	mov    0xf01918ac,%eax
f0100dc4:	39 c2                	cmp    %eax,%edx
f0100dc6:	0f 82 64 ff ff ff    	jb     f0100d30 <execute_command+0x4c>
			auto_fun[count] = commands[i].name;
			count++;
		}
	}

	if(command_found)
f0100dcc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100dd0:	74 2b                	je     f0100dfd <execute_command+0x119>
	{
		int return_value;
		return_value = commands[i].function_to_execute(number_of_arguments, arguments);
f0100dd2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100dd5:	89 d0                	mov    %edx,%eax
f0100dd7:	01 c0                	add    %eax,%eax
f0100dd9:	01 d0                	add    %edx,%eax
f0100ddb:	c1 e0 02             	shl    $0x2,%eax
f0100dde:	05 48 15 19 f0       	add    $0xf0191548,%eax
f0100de3:	8b 00                	mov    (%eax),%eax
f0100de5:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0100de8:	83 ec 08             	sub    $0x8,%esp
f0100deb:	8d 4d a0             	lea    -0x60(%ebp),%ecx
f0100dee:	51                   	push   %ecx
f0100def:	52                   	push   %edx
f0100df0:	ff d0                	call   *%eax
f0100df2:	83 c4 10             	add    $0x10,%esp
f0100df5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		return return_value;
f0100df8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100dfb:	eb 50                	jmp    f0100e4d <execute_command+0x169>
	}
	else if (count == 0)
f0100dfd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0100e01:	75 16                	jne    f0100e19 <execute_command+0x135>
	{
		//if not found, then it's unknown command
		cprintf("Unknown command '%s'\n", arguments[0]);
f0100e03:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100e06:	83 ec 08             	sub    $0x8,%esp
f0100e09:	50                   	push   %eax
f0100e0a:	68 bc 30 13 f0       	push   $0xf01330bc
f0100e0f:	e8 6e fe ff ff       	call   f0100c82 <cprintf>
f0100e14:	83 c4 10             	add    $0x10,%esp
f0100e17:	eb 2f                	jmp    f0100e48 <execute_command+0x164>
	}
	else
	{
		int loop;
		for(loop = 0; loop < count; loop++)
f0100e19:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0100e20:	eb 1e                	jmp    f0100e40 <execute_command+0x15c>
			cprintf("%s\n", auto_fun[loop]);
f0100e22:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100e25:	8b 84 85 60 ff ff ff 	mov    -0xa0(%ebp,%eax,4),%eax
f0100e2c:	83 ec 08             	sub    $0x8,%esp
f0100e2f:	50                   	push   %eax
f0100e30:	68 d2 30 13 f0       	push   $0xf01330d2
f0100e35:	e8 48 fe ff ff       	call   f0100c82 <cprintf>
f0100e3a:	83 c4 10             	add    $0x10,%esp
		cprintf("Unknown command '%s'\n", arguments[0]);
	}
	else
	{
		int loop;
		for(loop = 0; loop < count; loop++)
f0100e3d:	ff 45 e8             	incl   -0x18(%ebp)
f0100e40:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100e43:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0100e46:	7c da                	jl     f0100e22 <execute_command+0x13e>
			cprintf("%s\n", auto_fun[loop]);
	}
	return 0;
f0100e48:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100e4d:	c9                   	leave  
f0100e4e:	c3                   	ret    

f0100e4f <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0100e4f:	55                   	push   %ebp
f0100e50:	89 e5                	mov    %esp,%ebp
f0100e52:	c7 05 5c 7b 65 f0 00 	movl   $0x0,0xf0657b5c
f0100e59:	00 00 00 
f0100e5c:	90                   	nop
f0100e5d:	5d                   	pop    %ebp
f0100e5e:	c3                   	ret    

f0100e5f <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0100e5f:	55                   	push   %ebp
f0100e60:	89 e5                	mov    %esp,%ebp
f0100e62:	c7 05 5c 7b 65 f0 01 	movl   $0x1,0xf0657b5c
f0100e69:	00 00 00 
f0100e6c:	90                   	nop
f0100e6d:	5d                   	pop    %ebp
f0100e6e:	c3                   	ret    

f0100e6f <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0100e6f:	55                   	push   %ebp
f0100e70:	89 e5                	mov    %esp,%ebp
f0100e72:	c7 05 5c 7b 65 f0 02 	movl   $0x2,0xf0657b5c
f0100e79:	00 00 00 
f0100e7c:	90                   	nop
f0100e7d:	5d                   	pop    %ebp
f0100e7e:	c3                   	ret    

f0100e7f <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0100e7f:	55                   	push   %ebp
f0100e80:	89 e5                	mov    %esp,%ebp
f0100e82:	c7 05 5c 7b 65 f0 03 	movl   $0x3,0xf0657b5c
f0100e89:	00 00 00 
f0100e8c:	90                   	nop
f0100e8d:	5d                   	pop    %ebp
f0100e8e:	c3                   	ret    

f0100e8f <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0100e8f:	55                   	push   %ebp
f0100e90:	89 e5                	mov    %esp,%ebp
f0100e92:	c7 05 5c 7b 65 f0 04 	movl   $0x4,0xf0657b5c
f0100e99:	00 00 00 
f0100e9c:	90                   	nop
f0100e9d:	5d                   	pop    %ebp
f0100e9e:	c3                   	ret    

f0100e9f <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0100e9f:	55                   	push   %ebp
f0100ea0:	89 e5                	mov    %esp,%ebp
f0100ea2:	a1 5c 7b 65 f0       	mov    0xf0657b5c,%eax
f0100ea7:	85 c0                	test   %eax,%eax
f0100ea9:	75 04                	jne    f0100eaf <isKHeapPlacementStrategyCONTALLOC+0x10>
f0100eab:	b0 01                	mov    $0x1,%al
f0100ead:	eb 02                	jmp    f0100eb1 <isKHeapPlacementStrategyCONTALLOC+0x12>
f0100eaf:	b0 00                	mov    $0x0,%al
f0100eb1:	5d                   	pop    %ebp
f0100eb2:	c3                   	ret    

f0100eb3 <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100eb3:	55                   	push   %ebp
f0100eb4:	89 e5                	mov    %esp,%ebp
f0100eb6:	a1 5c 7b 65 f0       	mov    0xf0657b5c,%eax
f0100ebb:	83 f8 01             	cmp    $0x1,%eax
f0100ebe:	75 04                	jne    f0100ec4 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0100ec0:	b0 01                	mov    $0x1,%al
f0100ec2:	eb 02                	jmp    f0100ec6 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0100ec4:	b0 00                	mov    $0x0,%al
f0100ec6:	5d                   	pop    %ebp
f0100ec7:	c3                   	ret    

f0100ec8 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0100ec8:	55                   	push   %ebp
f0100ec9:	89 e5                	mov    %esp,%ebp
f0100ecb:	a1 5c 7b 65 f0       	mov    0xf0657b5c,%eax
f0100ed0:	83 f8 02             	cmp    $0x2,%eax
f0100ed3:	75 04                	jne    f0100ed9 <isKHeapPlacementStrategyBESTFIT+0x11>
f0100ed5:	b0 01                	mov    $0x1,%al
f0100ed7:	eb 02                	jmp    f0100edb <isKHeapPlacementStrategyBESTFIT+0x13>
f0100ed9:	b0 00                	mov    $0x0,%al
f0100edb:	5d                   	pop    %ebp
f0100edc:	c3                   	ret    

f0100edd <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0100edd:	55                   	push   %ebp
f0100ede:	89 e5                	mov    %esp,%ebp
f0100ee0:	a1 5c 7b 65 f0       	mov    0xf0657b5c,%eax
f0100ee5:	83 f8 03             	cmp    $0x3,%eax
f0100ee8:	75 04                	jne    f0100eee <isKHeapPlacementStrategyNEXTFIT+0x11>
f0100eea:	b0 01                	mov    $0x1,%al
f0100eec:	eb 02                	jmp    f0100ef0 <isKHeapPlacementStrategyNEXTFIT+0x13>
f0100eee:	b0 00                	mov    $0x0,%al
f0100ef0:	5d                   	pop    %ebp
f0100ef1:	c3                   	ret    

f0100ef2 <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f0100ef2:	55                   	push   %ebp
f0100ef3:	89 e5                	mov    %esp,%ebp
f0100ef5:	a1 5c 7b 65 f0       	mov    0xf0657b5c,%eax
f0100efa:	83 f8 04             	cmp    $0x4,%eax
f0100efd:	75 04                	jne    f0100f03 <isKHeapPlacementStrategyWORSTFIT+0x11>
f0100eff:	b0 01                	mov    $0x1,%al
f0100f01:	eb 02                	jmp    f0100f05 <isKHeapPlacementStrategyWORSTFIT+0x13>
f0100f03:	b0 00                	mov    $0x0,%al
f0100f05:	5d                   	pop    %ebp
f0100f06:	c3                   	ret    

f0100f07 <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f0100f07:	55                   	push   %ebp
f0100f08:	89 e5                	mov    %esp,%ebp
f0100f0a:	c7 05 30 7b 65 f0 01 	movl   $0x1,0xf0657b30
f0100f11:	00 00 00 
f0100f14:	90                   	nop
f0100f15:	5d                   	pop    %ebp
f0100f16:	c3                   	ret    

f0100f17 <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f0100f17:	55                   	push   %ebp
f0100f18:	89 e5                	mov    %esp,%ebp
f0100f1a:	c7 05 30 7b 65 f0 02 	movl   $0x2,0xf0657b30
f0100f21:	00 00 00 
f0100f24:	90                   	nop
f0100f25:	5d                   	pop    %ebp
f0100f26:	c3                   	ret    

f0100f27 <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f0100f27:	55                   	push   %ebp
f0100f28:	89 e5                	mov    %esp,%ebp
f0100f2a:	c7 05 30 7b 65 f0 03 	movl   $0x3,0xf0657b30
f0100f31:	00 00 00 
f0100f34:	90                   	nop
f0100f35:	5d                   	pop    %ebp
f0100f36:	c3                   	ret    

f0100f37 <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f0100f37:	55                   	push   %ebp
f0100f38:	89 e5                	mov    %esp,%ebp
f0100f3a:	c7 05 30 7b 65 f0 04 	movl   $0x4,0xf0657b30
f0100f41:	00 00 00 
f0100f44:	90                   	nop
f0100f45:	5d                   	pop    %ebp
f0100f46:	c3                   	ret    

f0100f47 <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100f47:	55                   	push   %ebp
f0100f48:	89 e5                	mov    %esp,%ebp
f0100f4a:	a1 30 7b 65 f0       	mov    0xf0657b30,%eax
f0100f4f:	83 f8 01             	cmp    $0x1,%eax
f0100f52:	75 04                	jne    f0100f58 <isUHeapPlacementStrategyFIRSTFIT+0x11>
f0100f54:	b0 01                	mov    $0x1,%al
f0100f56:	eb 02                	jmp    f0100f5a <isUHeapPlacementStrategyFIRSTFIT+0x13>
f0100f58:	b0 00                	mov    $0x0,%al
f0100f5a:	5d                   	pop    %ebp
f0100f5b:	c3                   	ret    

f0100f5c <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f0100f5c:	55                   	push   %ebp
f0100f5d:	89 e5                	mov    %esp,%ebp
f0100f5f:	a1 30 7b 65 f0       	mov    0xf0657b30,%eax
f0100f64:	83 f8 02             	cmp    $0x2,%eax
f0100f67:	75 04                	jne    f0100f6d <isUHeapPlacementStrategyBESTFIT+0x11>
f0100f69:	b0 01                	mov    $0x1,%al
f0100f6b:	eb 02                	jmp    f0100f6f <isUHeapPlacementStrategyBESTFIT+0x13>
f0100f6d:	b0 00                	mov    $0x0,%al
f0100f6f:	5d                   	pop    %ebp
f0100f70:	c3                   	ret    

f0100f71 <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0100f71:	55                   	push   %ebp
f0100f72:	89 e5                	mov    %esp,%ebp
f0100f74:	a1 30 7b 65 f0       	mov    0xf0657b30,%eax
f0100f79:	83 f8 03             	cmp    $0x3,%eax
f0100f7c:	75 04                	jne    f0100f82 <isUHeapPlacementStrategyNEXTFIT+0x11>
f0100f7e:	b0 01                	mov    $0x1,%al
f0100f80:	eb 02                	jmp    f0100f84 <isUHeapPlacementStrategyNEXTFIT+0x13>
f0100f82:	b0 00                	mov    $0x0,%al
f0100f84:	5d                   	pop    %ebp
f0100f85:	c3                   	ret    

f0100f86 <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f0100f86:	55                   	push   %ebp
f0100f87:	89 e5                	mov    %esp,%ebp
f0100f89:	a1 30 7b 65 f0       	mov    0xf0657b30,%eax
f0100f8e:	83 f8 04             	cmp    $0x4,%eax
f0100f91:	75 04                	jne    f0100f97 <isUHeapPlacementStrategyWORSTFIT+0x11>
f0100f93:	b0 01                	mov    $0x1,%al
f0100f95:	eb 02                	jmp    f0100f99 <isUHeapPlacementStrategyWORSTFIT+0x13>
f0100f97:	b0 00                	mov    $0x0,%al
f0100f99:	5d                   	pop    %ebp
f0100f9a:	c3                   	ret    

f0100f9b <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0100f9b:	55                   	push   %ebp
f0100f9c:	89 e5                	mov    %esp,%ebp
f0100f9e:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0100fa1:	8b 45 08             	mov    0x8(%ebp),%eax
f0100fa4:	c1 e8 0c             	shr    $0xc,%eax
f0100fa7:	89 c2                	mov    %eax,%edx
f0100fa9:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f0100fae:	39 c2                	cmp    %eax,%edx
f0100fb0:	72 14                	jb     f0100fc6 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0100fb2:	83 ec 04             	sub    $0x4,%esp
f0100fb5:	68 d8 30 13 f0       	push   $0xf01330d8
f0100fba:	6a 55                	push   $0x55
f0100fbc:	68 00 31 13 f0       	push   $0xf0133100
f0100fc1:	e8 35 f2 ff ff       	call   f01001fb <_panic>
	return &frames_info[PPN(physical_address)];
f0100fc6:	8b 15 54 7b 65 f0    	mov    0xf0657b54,%edx
f0100fcc:	8b 45 08             	mov    0x8(%ebp),%eax
f0100fcf:	c1 e8 0c             	shr    $0xc,%eax
f0100fd2:	89 c1                	mov    %eax,%ecx
f0100fd4:	89 c8                	mov    %ecx,%eax
f0100fd6:	01 c0                	add    %eax,%eax
f0100fd8:	01 c8                	add    %ecx,%eax
f0100fda:	c1 e0 03             	shl    $0x3,%eax
f0100fdd:	01 d0                	add    %edx,%eax
}
f0100fdf:	c9                   	leave  
f0100fe0:	c3                   	ret    

f0100fe1 <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f0100fe1:	55                   	push   %ebp
f0100fe2:	89 e5                	mov    %esp,%ebp
f0100fe4:	53                   	push   %ebx
f0100fe5:	83 ec 14             	sub    $0x14,%esp
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100fe8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100fef:	eb 3b                	jmp    f010102c <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f0100ff1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100ff4:	89 d0                	mov    %edx,%eax
f0100ff6:	01 c0                	add    %eax,%eax
f0100ff8:	01 d0                	add    %edx,%eax
f0100ffa:	c1 e0 02             	shl    $0x2,%eax
f0100ffd:	05 44 15 19 f0       	add    $0xf0191544,%eax
f0101002:	8b 10                	mov    (%eax),%edx
f0101004:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101007:	89 c8                	mov    %ecx,%eax
f0101009:	01 c0                	add    %eax,%eax
f010100b:	01 c8                	add    %ecx,%eax
f010100d:	c1 e0 02             	shl    $0x2,%eax
f0101010:	05 40 15 19 f0       	add    $0xf0191540,%eax
f0101015:	8b 00                	mov    (%eax),%eax
f0101017:	83 ec 04             	sub    $0x4,%esp
f010101a:	52                   	push   %edx
f010101b:	50                   	push   %eax
f010101c:	68 7a 3f 13 f0       	push   $0xf0133f7a
f0101021:	e8 5c fc ff ff       	call   f0100c82 <cprintf>
f0101026:	83 c4 10             	add    $0x10,%esp

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0101029:	ff 45 f4             	incl   -0xc(%ebp)
f010102c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010102f:	a1 ac 18 19 f0       	mov    0xf01918ac,%eax
f0101034:	39 c2                	cmp    %eax,%edx
f0101036:	72 b9                	jb     f0100ff1 <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f0101038:	83 ec 0c             	sub    $0xc,%esp
f010103b:	68 83 3f 13 f0       	push   $0xf0133f83
f0101040:	e8 3d fc ff ff       	call   f0100c82 <cprintf>
f0101045:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f0101048:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010104f:	eb 42                	jmp    f0101093 <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f0101051:	8b 0d c0 1c 19 f0    	mov    0xf0191cc0,%ecx
f0101057:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010105a:	89 d0                	mov    %edx,%eax
f010105c:	01 c0                	add    %eax,%eax
f010105e:	01 d0                	add    %edx,%eax
f0101060:	c1 e0 02             	shl    $0x2,%eax
f0101063:	01 c8                	add    %ecx,%eax
f0101065:	8b 50 04             	mov    0x4(%eax),%edx
f0101068:	8b 1d c0 1c 19 f0    	mov    0xf0191cc0,%ebx
f010106e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101071:	89 c8                	mov    %ecx,%eax
f0101073:	01 c0                	add    %eax,%eax
f0101075:	01 c8                	add    %ecx,%eax
f0101077:	c1 e0 02             	shl    $0x2,%eax
f010107a:	01 d8                	add    %ebx,%eax
f010107c:	8b 00                	mov    (%eax),%eax
f010107e:	83 ec 04             	sub    $0x4,%esp
f0101081:	52                   	push   %edx
f0101082:	50                   	push   %eax
f0101083:	68 98 3f 13 f0       	push   $0xf0133f98
f0101088:	e8 f5 fb ff ff       	call   f0100c82 <cprintf>
f010108d:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f0101090:	ff 45 f4             	incl   -0xc(%ebp)
f0101093:	a1 c4 1c 19 f0       	mov    0xf0191cc4,%eax
f0101098:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010109b:	7c b4                	jl     f0101051 <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f010109d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01010a2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01010a5:	c9                   	leave  
f01010a6:	c3                   	ret    

f01010a7 <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f01010a7:	55                   	push   %ebp
f01010a8:	89 e5                	mov    %esp,%ebp
f01010aa:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f01010ad:	83 ec 0c             	sub    $0xc,%esp
f01010b0:	68 b4 3f 13 f0       	push   $0xf0133fb4
f01010b5:	e8 c8 fb ff ff       	call   f0100c82 <cprintf>
f01010ba:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f01010bd:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f01010c2:	83 ec 04             	sub    $0x4,%esp
f01010c5:	50                   	push   %eax
f01010c6:	68 0c 00 10 f0       	push   $0xf010000c
f01010cb:	68 d0 3f 13 f0       	push   $0xf0133fd0
f01010d0:	e8 ad fb ff ff       	call   f0100c82 <cprintf>
f01010d5:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f01010d8:	b8 11 2f 13 00       	mov    $0x132f11,%eax
f01010dd:	83 ec 04             	sub    $0x4,%esp
f01010e0:	50                   	push   %eax
f01010e1:	68 11 2f 13 f0       	push   $0xf0132f11
f01010e6:	68 0c 40 13 f0       	push   $0xf013400c
f01010eb:	e8 92 fb ff ff       	call   f0100c82 <cprintf>
f01010f0:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f01010f3:	b8 b0 6f 65 00       	mov    $0x656fb0,%eax
f01010f8:	83 ec 04             	sub    $0x4,%esp
f01010fb:	50                   	push   %eax
f01010fc:	68 b0 6f 65 f0       	push   $0xf0656fb0
f0101101:	68 48 40 13 f0       	push   $0xf0134048
f0101106:	e8 77 fb ff ff       	call   f0100c82 <cprintf>
f010110b:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f010110e:	b8 bc 7c 65 00       	mov    $0x657cbc,%eax
f0101113:	83 ec 04             	sub    $0x4,%esp
f0101116:	50                   	push   %eax
f0101117:	68 bc 7c 65 f0       	push   $0xf0657cbc
f010111c:	68 90 40 13 f0       	push   $0xf0134090
f0101121:	e8 5c fb ff ff       	call   f0100c82 <cprintf>
f0101126:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f0101129:	b8 bc 7c 65 f0       	mov    $0xf0657cbc,%eax
f010112e:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f0101134:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f0101139:	29 c2                	sub    %eax,%edx
f010113b:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f010113d:	85 c0                	test   %eax,%eax
f010113f:	79 05                	jns    f0101146 <command_kernel_info+0x9f>
f0101141:	05 ff 03 00 00       	add    $0x3ff,%eax
f0101146:	c1 f8 0a             	sar    $0xa,%eax
f0101149:	83 ec 08             	sub    $0x8,%esp
f010114c:	50                   	push   %eax
f010114d:	68 cc 40 13 f0       	push   $0xf01340cc
f0101152:	e8 2b fb ff ff       	call   f0100c82 <cprintf>
f0101157:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f010115a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010115f:	c9                   	leave  
f0101160:	c3                   	ret    

f0101161 <command_kernel_base_info>:

//===========================================================================
//Lab3.Examples
//=============
int command_kernel_base_info(int number_of_arguments, char **arguments)
{
f0101161:	55                   	push   %ebp
f0101162:	89 e5                	mov    %esp,%ebp
f0101164:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "ikb"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101167:	83 ec 04             	sub    $0x4,%esp
f010116a:	68 f8 40 13 f0       	push   $0xf01340f8
f010116f:	68 b0 00 00 00       	push   $0xb0
f0101174:	68 19 41 13 f0       	push   $0xf0134119
f0101179:	e8 7d f0 ff ff       	call   f01001fb <_panic>

f010117e <command_del_kernel_base>:
	return 0;
}


int command_del_kernel_base(int number_of_arguments, char **arguments)
{
f010117e:	55                   	push   %ebp
f010117f:	89 e5                	mov    %esp,%ebp
f0101181:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "dkb"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101184:	83 ec 04             	sub    $0x4,%esp
f0101187:	68 f8 40 13 f0       	push   $0xf01340f8
f010118c:	68 ba 00 00 00       	push   $0xba
f0101191:	68 19 41 13 f0       	push   $0xf0134119
f0101196:	e8 60 f0 ff ff       	call   f01001fb <_panic>

f010119b <command_share_page>:

	return 0;
}

int command_share_page(int number_of_arguments, char **arguments)
{
f010119b:	55                   	push   %ebp
f010119c:	89 e5                	mov    %esp,%ebp
f010119e:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "shr"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011a1:	83 ec 04             	sub    $0x4,%esp
f01011a4:	68 f8 40 13 f0       	push   $0xf01340f8
f01011a9:	68 c3 00 00 00       	push   $0xc3
f01011ae:	68 19 41 13 f0       	push   $0xf0134119
f01011b3:	e8 43 f0 ff ff       	call   f01001fb <_panic>

f01011b8 <command_show_mapping>:

//===========================================================================
//Lab4.Hands.On
//=============
int command_show_mapping(int number_of_arguments, char **arguments)
{
f01011b8:	55                   	push   %ebp
f01011b9:	89 e5                	mov    %esp,%ebp
f01011bb:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sm"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011be:	83 ec 04             	sub    $0x4,%esp
f01011c1:	68 f8 40 13 f0       	push   $0xf01340f8
f01011c6:	68 cf 00 00 00       	push   $0xcf
f01011cb:	68 19 41 13 f0       	push   $0xf0134119
f01011d0:	e8 26 f0 ff ff       	call   f01001fb <_panic>

f01011d5 <command_set_permission>:

	return 0 ;
}

int command_set_permission(int number_of_arguments, char **arguments)
{
f01011d5:	55                   	push   %ebp
f01011d6:	89 e5                	mov    %esp,%ebp
f01011d8:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sp"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011db:	83 ec 04             	sub    $0x4,%esp
f01011de:	68 f8 40 13 f0       	push   $0xf01340f8
f01011e3:	68 d8 00 00 00       	push   $0xd8
f01011e8:	68 19 41 13 f0       	push   $0xf0134119
f01011ed:	e8 09 f0 ff ff       	call   f01001fb <_panic>

f01011f2 <command_share_range>:

	return 0 ;
}

int command_share_range(int number_of_arguments, char **arguments)
{
f01011f2:	55                   	push   %ebp
f01011f3:	89 e5                	mov    %esp,%ebp
f01011f5:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sr"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011f8:	83 ec 04             	sub    $0x4,%esp
f01011fb:	68 f8 40 13 f0       	push   $0xf01340f8
f0101200:	68 e1 00 00 00       	push   $0xe1
f0101205:	68 19 41 13 f0       	push   $0xf0134119
f010120a:	e8 ec ef ff ff       	call   f01001fb <_panic>

f010120f <command_nr>:
//===========================================================================
//Lab5.Examples
//==============
//[1] Number of references on the given physical address
int command_nr(int number_of_arguments, char **arguments)
{
f010120f:	55                   	push   %ebp
f0101210:	89 e5                	mov    %esp,%ebp
f0101212:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "nr"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101215:	83 ec 04             	sub    $0x4,%esp
f0101218:	68 f8 40 13 f0       	push   $0xf01340f8
f010121d:	68 ee 00 00 00       	push   $0xee
f0101222:	68 19 41 13 f0       	push   $0xf0134119
f0101227:	e8 cf ef ff ff       	call   f01001fb <_panic>

f010122c <command_ap>:
	return 0;
}

//[2] Allocate Page: If the given user virtual address is mapped, do nothing. Else, allocate a single frame and map it to a given virtual address in the user space
int command_ap(int number_of_arguments, char **arguments)
{
f010122c:	55                   	push   %ebp
f010122d:	89 e5                	mov    %esp,%ebp
f010122f:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "ap"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f0101232:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101235:	83 c0 04             	add    $0x4,%eax
f0101238:	8b 00                	mov    (%eax),%eax
f010123a:	83 ec 04             	sub    $0x4,%esp
f010123d:	6a 10                	push   $0x10
f010123f:	6a 00                	push   $0x0
f0101241:	50                   	push   %eax
f0101242:	e8 a3 fd 02 00       	call   f0130fea <strtol>
f0101247:	83 c4 10             	add    $0x10,%esp
f010124a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct FrameInfo* ptr_frame_info;
	int ret = allocate_frame(&ptr_frame_info) ;
f010124d:	83 ec 0c             	sub    $0xc,%esp
f0101250:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0101253:	50                   	push   %eax
f0101254:	e8 c2 55 00 00       	call   f010681b <allocate_frame>
f0101259:	83 c4 10             	add    $0x10,%esp
f010125c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	map_frame(ptr_page_directory, ptr_frame_info, va, PERM_USER | PERM_WRITEABLE);
f010125f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0101262:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0101267:	6a 06                	push   $0x6
f0101269:	ff 75 f4             	pushl  -0xc(%ebp)
f010126c:	52                   	push   %edx
f010126d:	50                   	push   %eax
f010126e:	e8 f7 59 00 00       	call   f0106c6a <map_frame>
f0101273:	83 c4 10             	add    $0x10,%esp

	return 0 ;
f0101276:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010127b:	c9                   	leave  
f010127c:	c3                   	ret    

f010127d <command_fp>:

//[3] Free Page: Un-map a single page at the given virtual address in the user space
int command_fp(int number_of_arguments, char **arguments)
{
f010127d:	55                   	push   %ebp
f010127e:	89 e5                	mov    %esp,%ebp
f0101280:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "fp"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f0101283:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101286:	83 c0 04             	add    $0x4,%eax
f0101289:	8b 00                	mov    (%eax),%eax
f010128b:	83 ec 04             	sub    $0x4,%esp
f010128e:	6a 10                	push   $0x10
f0101290:	6a 00                	push   $0x0
f0101292:	50                   	push   %eax
f0101293:	e8 52 fd 02 00       	call   f0130fea <strtol>
f0101298:	83 c4 10             	add    $0x10,%esp
f010129b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// Un-map the page at this address
	unmap_frame(ptr_page_directory, va);
f010129e:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01012a3:	83 ec 08             	sub    $0x8,%esp
f01012a6:	ff 75 f4             	pushl  -0xc(%ebp)
f01012a9:	50                   	push   %eax
f01012aa:	e8 f0 5a 00 00       	call   f0106d9f <unmap_frame>
f01012af:	83 c4 10             	add    $0x10,%esp

	return 0;
f01012b2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01012b7:	c9                   	leave  
f01012b8:	c3                   	ret    

f01012b9 <command_asp>:
//===========================================================================
//Lab5.Hands-on
//==============
//[1] Allocate Shared Pages
int command_asp(int number_of_arguments, char **arguments)
{
f01012b9:	55                   	push   %ebp
f01012ba:	89 e5                	mov    %esp,%ebp
f01012bc:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "asp"
	//Comment the following line
	panic("Function is not implemented yet!");
f01012bf:	83 ec 04             	sub    $0x4,%esp
f01012c2:	68 f8 40 13 f0       	push   $0xf01340f8
f01012c7:	68 18 01 00 00       	push   $0x118
f01012cc:	68 19 41 13 f0       	push   $0xf0134119
f01012d1:	e8 25 ef ff ff       	call   f01001fb <_panic>

f01012d6 <command_cfp>:
}


//[2] Count Free Pages in Range
int command_cfp(int number_of_arguments, char **arguments)
{
f01012d6:	55                   	push   %ebp
f01012d7:	89 e5                	mov    %esp,%ebp
f01012d9:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "cfp"
	//Comment the following line
	panic("Function is not implemented yet!");
f01012dc:	83 ec 04             	sub    $0x4,%esp
f01012df:	68 f8 40 13 f0       	push   $0xf01340f8
f01012e4:	68 23 01 00 00       	push   $0x123
f01012e9:	68 19 41 13 f0       	push   $0xf0134119
f01012ee:	e8 08 ef ff ff       	call   f01001fb <_panic>

f01012f3 <command_ft>:

//===========================================================================
//Lab6.Examples
//=============
int command_ft(int number_of_arguments, char **arguments)
{
f01012f3:	55                   	push   %ebp
f01012f4:	89 e5                	mov    %esp,%ebp
	//TODO: LAB6 Example: fill this function. corresponding command name is "ft"
	//Comment the following line

	return 0;
f01012f6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01012fb:	5d                   	pop    %ebp
f01012fc:	c3                   	ret    

f01012fd <command_writeusermem>:

//*****************************************************************************************//
//***************************** PROJECT HELPERS COMMAND ***********************************//
//*****************************************************************************************//
int command_writeusermem(int number_of_arguments, char **arguments)
{
f01012fd:	55                   	push   %ebp
f01012fe:	89 e5                	mov    %esp,%ebp
f0101300:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 3)
f0101303:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0101307:	75 37                	jne    f0101340 <command_writeusermem+0x43>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f0101309:	8b 45 0c             	mov    0xc(%ebp),%eax
f010130c:	83 c0 04             	add    $0x4,%eax
f010130f:	8b 00                	mov    (%eax),%eax
f0101311:	83 ec 04             	sub    $0x4,%esp
f0101314:	6a 10                	push   $0x10
f0101316:	6a 00                	push   $0x0
f0101318:	50                   	push   %eax
f0101319:	e8 cc fc 02 00       	call   f0130fea <strtol>
f010131e:	83 c4 10             	add    $0x10,%esp
f0101321:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address) ;
f0101324:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101327:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*ptr = arguments[2][0];
f010132a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010132d:	83 c0 08             	add    $0x8,%eax
f0101330:	8b 00                	mov    (%eax),%eax
f0101332:	8a 00                	mov    (%eax),%al
f0101334:	88 c2                	mov    %al,%dl
f0101336:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101339:	88 10                	mov    %dl,(%eax)
f010133b:	e9 b9 00 00 00       	jmp    f01013f9 <command_writeusermem+0xfc>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 4)
f0101340:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0101344:	0f 85 9f 00 00 00    	jne    f01013e9 <command_writeusermem+0xec>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f010134a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010134d:	83 c0 04             	add    $0x4,%eax
f0101350:	8b 00                	mov    (%eax),%eax
f0101352:	83 ec 04             	sub    $0x4,%esp
f0101355:	6a 0a                	push   $0xa
f0101357:	6a 00                	push   $0x0
f0101359:	50                   	push   %eax
f010135a:	e8 8b fc 02 00       	call   f0130fea <strtol>
f010135f:	83 c4 10             	add    $0x10,%esp
f0101362:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f0101365:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f010136c:	83 ec 04             	sub    $0x4,%esp
f010136f:	6a 00                	push   $0x0
f0101371:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101374:	50                   	push   %eax
f0101375:	ff 75 f4             	pushl  -0xc(%ebp)
f0101378:	e8 25 86 00 00       	call   f01099a2 <envid2env>
f010137d:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f0101380:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101383:	83 c0 08             	add    $0x8,%eax
f0101386:	8b 00                	mov    (%eax),%eax
f0101388:	83 ec 04             	sub    $0x4,%esp
f010138b:	6a 10                	push   $0x10
f010138d:	6a 00                	push   $0x0
f010138f:	50                   	push   %eax
f0101390:	e8 55 fc 02 00       	call   f0130fea <strtol>
f0101395:	83 c4 10             	add    $0x10,%esp
f0101398:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f010139b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010139e:	85 c0                	test   %eax,%eax
f01013a0:	75 07                	jne    f01013a9 <command_writeusermem+0xac>
f01013a2:	b8 00 00 00 00       	mov    $0x0,%eax
f01013a7:	eb 55                	jmp    f01013fe <command_writeusermem+0x101>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01013a9:	0f 20 d8             	mov    %cr3,%eax
f01013ac:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f01013af:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f01013b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32) (env->env_cr3));
f01013b5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01013b8:	8b 40 60             	mov    0x60(%eax),%eax
f01013bb:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01013be:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01013c1:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f01013c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01013c7:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		*ptr = arguments[3][0];
f01013ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013cd:	83 c0 0c             	add    $0xc,%eax
f01013d0:	8b 00                	mov    (%eax),%eax
f01013d2:	8a 00                	mov    (%eax),%al
f01013d4:	88 c2                	mov    %al,%dl
f01013d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01013d9:	88 10                	mov    %dl,(%eax)
f01013db:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01013de:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01013e1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01013e4:	0f 22 d8             	mov    %eax,%cr3
f01013e7:	eb 10                	jmp    f01013f9 <command_writeusermem+0xfc>
		lcr3(oldDir);
	}
	else
	{
		cprintf("wum command: invalid number of arguments\n") ;
f01013e9:	83 ec 0c             	sub    $0xc,%esp
f01013ec:	68 30 41 13 f0       	push   $0xf0134130
f01013f1:	e8 8c f8 ff ff       	call   f0100c82 <cprintf>
f01013f6:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01013f9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01013fe:	c9                   	leave  
f01013ff:	c3                   	ret    

f0101400 <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f0101400:	55                   	push   %ebp
f0101401:	89 e5                	mov    %esp,%ebp
f0101403:	83 ec 28             	sub    $0x28,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101406:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101409:	83 c0 04             	add    $0x4,%eax
f010140c:	8b 00                	mov    (%eax),%eax
f010140e:	83 ec 04             	sub    $0x4,%esp
f0101411:	6a 10                	push   $0x10
f0101413:	6a 00                	push   $0x0
f0101415:	50                   	push   %eax
f0101416:	e8 cf fb 02 00       	call   f0130fea <strtol>
f010141b:	83 c4 10             	add    $0x10,%esp
f010141e:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0101423:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f0101426:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101429:	83 c0 08             	add    $0x8,%eax
f010142c:	8b 00                	mov    (%eax),%eax
f010142e:	83 ec 04             	sub    $0x4,%esp
f0101431:	6a 0a                	push   $0xa
f0101433:	6a 00                	push   $0x0
f0101435:	50                   	push   %eax
f0101436:	e8 af fb 02 00       	call   f0130fea <strtol>
f010143b:	83 c4 10             	add    $0x10,%esp
f010143e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int c, i=0;
f0101441:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int stringLen = strlen(arguments[3]);
f0101448:	8b 45 0c             	mov    0xc(%ebp),%eax
f010144b:	83 c0 0c             	add    $0xc,%eax
f010144e:	8b 00                	mov    (%eax),%eax
f0101450:	83 ec 0c             	sub    $0xc,%esp
f0101453:	50                   	push   %eax
f0101454:	e8 31 f8 02 00       	call   f0130c8a <strlen>
f0101459:	83 c4 10             	add    $0x10,%esp
f010145c:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	for(c=0; c<size; c++)
f010145f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101466:	eb 30                	jmp    f0101498 <command_writemem_k+0x98>
	{
		for(i=0;i < stringLen; i++)
f0101468:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010146f:	eb 1c                	jmp    f010148d <command_writemem_k+0x8d>
		{
			*address = arguments[3][i];
f0101471:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101474:	83 c0 0c             	add    $0xc,%eax
f0101477:	8b 10                	mov    (%eax),%edx
f0101479:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010147c:	01 d0                	add    %edx,%eax
f010147e:	8a 00                	mov    (%eax),%al
f0101480:	88 c2                	mov    %al,%dl
f0101482:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101485:	88 10                	mov    %dl,(%eax)
			address++;
f0101487:	ff 45 f4             	incl   -0xc(%ebp)
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
	{
		for(i=0;i < stringLen; i++)
f010148a:	ff 45 ec             	incl   -0x14(%ebp)
f010148d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101490:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0101493:	7c dc                	jl     f0101471 <command_writemem_k+0x71>
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
f0101495:	ff 45 f0             	incl   -0x10(%ebp)
f0101498:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010149b:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010149e:	7c c8                	jl     f0101468 <command_writemem_k+0x68>
		{
			*address = arguments[3][i];
			address++;
		}
	}
	return 0;
f01014a0:	b8 00 00 00 00       	mov    $0x0,%eax


}
f01014a5:	c9                   	leave  
f01014a6:	c3                   	ret    

f01014a7 <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f01014a7:	55                   	push   %ebp
f01014a8:	89 e5                	mov    %esp,%ebp
f01014aa:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 2)
f01014ad:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f01014b1:	75 42                	jne    f01014f5 <command_readusermem+0x4e>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f01014b3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014b6:	83 c0 04             	add    $0x4,%eax
f01014b9:	8b 00                	mov    (%eax),%eax
f01014bb:	83 ec 04             	sub    $0x4,%esp
f01014be:	6a 10                	push   $0x10
f01014c0:	6a 00                	push   $0x0
f01014c2:	50                   	push   %eax
f01014c3:	e8 22 fb 02 00       	call   f0130fea <strtol>
f01014c8:	83 c4 10             	add    $0x10,%esp
f01014cb:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address ) ;
f01014ce:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01014d1:	89 45 d8             	mov    %eax,-0x28(%ebp)

		cprintf("value at address %x = %c\n", ptr, *ptr);
f01014d4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01014d7:	8a 00                	mov    (%eax),%al
f01014d9:	0f b6 c0             	movzbl %al,%eax
f01014dc:	83 ec 04             	sub    $0x4,%esp
f01014df:	50                   	push   %eax
f01014e0:	ff 75 d8             	pushl  -0x28(%ebp)
f01014e3:	68 5a 41 13 f0       	push   $0xf013415a
f01014e8:	e8 95 f7 ff ff       	call   f0100c82 <cprintf>
f01014ed:	83 c4 10             	add    $0x10,%esp
f01014f0:	e9 c4 00 00 00       	jmp    f01015b9 <command_readusermem+0x112>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 3)
f01014f5:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f01014f9:	0f 85 aa 00 00 00    	jne    f01015a9 <command_readusermem+0x102>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01014ff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101502:	83 c0 04             	add    $0x4,%eax
f0101505:	8b 00                	mov    (%eax),%eax
f0101507:	83 ec 04             	sub    $0x4,%esp
f010150a:	6a 0a                	push   $0xa
f010150c:	6a 00                	push   $0x0
f010150e:	50                   	push   %eax
f010150f:	e8 d6 fa 02 00       	call   f0130fea <strtol>
f0101514:	83 c4 10             	add    $0x10,%esp
f0101517:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f010151a:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f0101521:	83 ec 04             	sub    $0x4,%esp
f0101524:	6a 00                	push   $0x0
f0101526:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101529:	50                   	push   %eax
f010152a:	ff 75 f4             	pushl  -0xc(%ebp)
f010152d:	e8 70 84 00 00       	call   f01099a2 <envid2env>
f0101532:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f0101535:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101538:	83 c0 08             	add    $0x8,%eax
f010153b:	8b 00                	mov    (%eax),%eax
f010153d:	83 ec 04             	sub    $0x4,%esp
f0101540:	6a 10                	push   $0x10
f0101542:	6a 00                	push   $0x0
f0101544:	50                   	push   %eax
f0101545:	e8 a0 fa 02 00       	call   f0130fea <strtol>
f010154a:	83 c4 10             	add    $0x10,%esp
f010154d:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f0101550:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101553:	85 c0                	test   %eax,%eax
f0101555:	75 07                	jne    f010155e <command_readusermem+0xb7>
f0101557:	b8 00 00 00 00       	mov    $0x0,%eax
f010155c:	eb 60                	jmp    f01015be <command_readusermem+0x117>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f010155e:	0f 20 d8             	mov    %cr3,%eax
f0101561:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f0101564:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f0101567:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32)( env->env_cr3));
f010156a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010156d:	8b 40 60             	mov    0x60(%eax),%eax
f0101570:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101573:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101576:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0101579:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010157c:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		cprintf("value at address %x = %c\n", address, *ptr);
f010157f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101582:	8a 00                	mov    (%eax),%al
f0101584:	0f b6 c0             	movzbl %al,%eax
f0101587:	83 ec 04             	sub    $0x4,%esp
f010158a:	50                   	push   %eax
f010158b:	ff 75 f0             	pushl  -0x10(%ebp)
f010158e:	68 5a 41 13 f0       	push   $0xf013415a
f0101593:	e8 ea f6 ff ff       	call   f0100c82 <cprintf>
f0101598:	83 c4 10             	add    $0x10,%esp
f010159b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010159e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01015a1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01015a4:	0f 22 d8             	mov    %eax,%cr3
f01015a7:	eb 10                	jmp    f01015b9 <command_readusermem+0x112>

		lcr3(oldDir);
	}
	else
	{
		cprintf("rum command: invalid number of arguments\n") ;
f01015a9:	83 ec 0c             	sub    $0xc,%esp
f01015ac:	68 74 41 13 f0       	push   $0xf0134174
f01015b1:	e8 cc f6 ff ff       	call   f0100c82 <cprintf>
f01015b6:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01015b9:	b8 00 00 00 00       	mov    $0x0,%eax

}
f01015be:	c9                   	leave  
f01015bf:	c3                   	ret    

f01015c0 <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f01015c0:	55                   	push   %ebp
f01015c1:	89 e5                	mov    %esp,%ebp
f01015c3:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f01015c6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01015c9:	83 c0 04             	add    $0x4,%eax
f01015cc:	8b 00                	mov    (%eax),%eax
f01015ce:	83 ec 04             	sub    $0x4,%esp
f01015d1:	6a 10                	push   $0x10
f01015d3:	6a 00                	push   $0x0
f01015d5:	50                   	push   %eax
f01015d6:	e8 0f fa 02 00       	call   f0130fea <strtol>
f01015db:	83 c4 10             	add    $0x10,%esp
f01015de:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01015e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f01015e6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01015e9:	83 c0 08             	add    $0x8,%eax
f01015ec:	8b 00                	mov    (%eax),%eax
f01015ee:	83 ec 04             	sub    $0x4,%esp
f01015f1:	6a 0a                	push   $0xa
f01015f3:	6a 00                	push   $0x0
f01015f5:	50                   	push   %eax
f01015f6:	e8 ef f9 02 00       	call   f0130fea <strtol>
f01015fb:	83 c4 10             	add    $0x10,%esp
f01015fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int i=0;
f0101601:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for(;i < size; i++)
f0101608:	eb 22                	jmp    f010162c <command_readmem_k+0x6c>
	{
		cprintf("%c",*address++);
f010160a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010160d:	8d 50 01             	lea    0x1(%eax),%edx
f0101610:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0101613:	8a 00                	mov    (%eax),%al
f0101615:	0f b6 c0             	movzbl %al,%eax
f0101618:	83 ec 08             	sub    $0x8,%esp
f010161b:	50                   	push   %eax
f010161c:	68 9e 41 13 f0       	push   $0xf013419e
f0101621:	e8 5c f6 ff ff       	call   f0100c82 <cprintf>
f0101626:	83 c4 10             	add    $0x10,%esp
int command_readmem_k(int number_of_arguments, char **arguments)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int i=0;
	for(;i < size; i++)
f0101629:	ff 45 f0             	incl   -0x10(%ebp)
f010162c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010162f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0101632:	7c d6                	jl     f010160a <command_readmem_k+0x4a>
	{
		cprintf("%c",*address++);
	}
	cprintf("\n");
f0101634:	83 ec 0c             	sub    $0xc,%esp
f0101637:	68 a1 41 13 f0       	push   $0xf01341a1
f010163c:	e8 41 f6 ff ff       	call   f0100c82 <cprintf>
f0101641:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101644:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101649:	c9                   	leave  
f010164a:	c3                   	ret    

f010164b <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f010164b:	55                   	push   %ebp
f010164c:	89 e5                	mov    %esp,%ebp
f010164e:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101651:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101654:	83 c0 04             	add    $0x4,%eax
f0101657:	8b 00                	mov    (%eax),%eax
f0101659:	83 ec 04             	sub    $0x4,%esp
f010165c:	6a 0a                	push   $0xa
f010165e:	6a 00                	push   $0x0
f0101660:	50                   	push   %eax
f0101661:	e8 84 f9 02 00       	call   f0130fea <strtol>
f0101666:	83 c4 10             	add    $0x10,%esp
f0101669:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f010166c:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f0101673:	83 ec 04             	sub    $0x4,%esp
f0101676:	6a 00                	push   $0x0
f0101678:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010167b:	50                   	push   %eax
f010167c:	ff 75 ec             	pushl  -0x14(%ebp)
f010167f:	e8 1e 83 00 00       	call   f01099a2 <envid2env>
f0101684:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0101687:	8b 45 0c             	mov    0xc(%ebp),%eax
f010168a:	83 c0 08             	add    $0x8,%eax
f010168d:	8b 00                	mov    (%eax),%eax
f010168f:	83 ec 04             	sub    $0x4,%esp
f0101692:	6a 10                	push   $0x10
f0101694:	6a 00                	push   $0x0
f0101696:	50                   	push   %eax
f0101697:	e8 4e f9 02 00       	call   f0130fea <strtol>
f010169c:	83 c4 10             	add    $0x10,%esp
f010169f:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f01016a2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016a5:	83 c0 0c             	add    $0xc,%eax
f01016a8:	8b 00                	mov    (%eax),%eax
f01016aa:	83 ec 04             	sub    $0x4,%esp
f01016ad:	6a 0a                	push   $0xa
f01016af:	6a 00                	push   $0x0
f01016b1:	50                   	push   %eax
f01016b2:	e8 33 f9 02 00       	call   f0130fea <strtol>
f01016b7:	83 c4 10             	add    $0x10,%esp
f01016ba:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f01016bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01016c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f01016c3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01016c6:	85 c0                	test   %eax,%eax
f01016c8:	75 07                	jne    f01016d1 <command_readuserblock+0x86>
f01016ca:	b8 00 00 00 00       	mov    $0x0,%eax
f01016cf:	eb 65                	jmp    f0101736 <command_readuserblock+0xeb>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01016d1:	0f 20 d8             	mov    %cr3,%eax
f01016d4:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f01016d7:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f01016da:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f01016dd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01016e0:	8b 40 60             	mov    0x60(%eax),%eax
f01016e3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01016e6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01016e9:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f01016ec:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01016f3:	eb 28                	jmp    f010171d <command_readuserblock+0xd2>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f01016f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01016f8:	8a 00                	mov    (%eax),%al
f01016fa:	0f b6 d0             	movzbl %al,%edx
f01016fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101700:	8a 00                	mov    (%eax),%al
f0101702:	0f b6 c0             	movzbl %al,%eax
f0101705:	52                   	push   %edx
f0101706:	50                   	push   %eax
f0101707:	ff 75 f4             	pushl  -0xc(%ebp)
f010170a:	68 a3 41 13 f0       	push   $0xf01341a3
f010170f:	e8 6e f5 ff ff       	call   f0100c82 <cprintf>
f0101714:	83 c4 10             	add    $0x10,%esp
		ptr++;
f0101717:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f010171a:	ff 45 f0             	incl   -0x10(%ebp)
f010171d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101720:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0101723:	7c d0                	jl     f01016f5 <command_readuserblock+0xaa>
f0101725:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101728:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010172b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010172e:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f0101731:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101736:	c9                   	leave  
f0101737:	c3                   	ret    

f0101738 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f0101738:	55                   	push   %ebp
f0101739:	89 e5                	mov    %esp,%ebp
f010173b:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f010173e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101741:	83 c0 04             	add    $0x4,%eax
f0101744:	8b 00                	mov    (%eax),%eax
f0101746:	83 ec 04             	sub    $0x4,%esp
f0101749:	6a 0a                	push   $0xa
f010174b:	6a 00                	push   $0x0
f010174d:	50                   	push   %eax
f010174e:	e8 97 f8 02 00       	call   f0130fea <strtol>
f0101753:	83 c4 10             	add    $0x10,%esp
f0101756:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0101759:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f0101760:	83 ec 04             	sub    $0x4,%esp
f0101763:	6a 00                	push   $0x0
f0101765:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0101768:	50                   	push   %eax
f0101769:	ff 75 f4             	pushl  -0xc(%ebp)
f010176c:	e8 31 82 00 00       	call   f01099a2 <envid2env>
f0101771:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0101774:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101777:	85 c0                	test   %eax,%eax
f0101779:	75 0a                	jne    f0101785 <command_remove_table+0x4d>
f010177b:	b8 00 00 00 00       	mov    $0x0,%eax
f0101780:	e9 c7 00 00 00       	jmp    f010184c <command_remove_table+0x114>

	uint32 address = strtol(arguments[2], NULL, 16);
f0101785:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101788:	83 c0 08             	add    $0x8,%eax
f010178b:	8b 00                	mov    (%eax),%eax
f010178d:	83 ec 04             	sub    $0x4,%esp
f0101790:	6a 10                	push   $0x10
f0101792:	6a 00                	push   $0x0
f0101794:	50                   	push   %eax
f0101795:	e8 50 f8 02 00       	call   f0130fea <strtol>
f010179a:	83 c4 10             	add    $0x10,%esp
f010179d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f01017a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01017a3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f01017a6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01017a9:	8b 40 5c             	mov    0x5c(%eax),%eax
f01017ac:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01017af:	c1 ea 16             	shr    $0x16,%edx
f01017b2:	c1 e2 02             	shl    $0x2,%edx
f01017b5:	01 d0                	add    %edx,%eax
f01017b7:	8b 00                	mov    (%eax),%eax
f01017b9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01017be:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//remove the table
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(va))
f01017c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01017c4:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f01017c9:	77 1c                	ja     f01017e7 <command_remove_table+0xaf>
	{
		kfree((void*)kheap_virtual_address(table_pa));
f01017cb:	83 ec 0c             	sub    $0xc,%esp
f01017ce:	ff 75 e8             	pushl  -0x18(%ebp)
f01017d1:	e8 11 62 00 00       	call   f01079e7 <kheap_virtual_address>
f01017d6:	83 c4 10             	add    $0x10,%esp
f01017d9:	83 ec 0c             	sub    $0xc,%esp
f01017dc:	50                   	push   %eax
f01017dd:	e8 de 60 00 00       	call   f01078c0 <kfree>
f01017e2:	83 c4 10             	add    $0x10,%esp
f01017e5:	eb 28                	jmp    f010180f <command_remove_table+0xd7>
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f01017e7:	83 ec 0c             	sub    $0xc,%esp
f01017ea:	ff 75 e8             	pushl  -0x18(%ebp)
f01017ed:	e8 a9 f7 ff ff       	call   f0100f9b <to_frame_info>
f01017f2:	83 c4 10             	add    $0x10,%esp
f01017f5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f01017f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01017fb:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f0101801:	83 ec 0c             	sub    $0xc,%esp
f0101804:	ff 75 e4             	pushl  -0x1c(%ebp)
f0101807:	e8 24 51 00 00       	call   f0106930 <free_frame>
f010180c:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f010180f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101812:	c1 e8 16             	shr    $0x16,%eax
f0101815:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f0101818:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010181b:	8b 40 5c             	mov    0x5c(%eax),%eax
f010181e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101821:	c1 e2 02             	shl    $0x2,%edx
f0101824:	01 c2                	add    %eax,%edx
f0101826:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101829:	8b 40 5c             	mov    0x5c(%eax),%eax
f010182c:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f010182f:	c1 e1 02             	shl    $0x2,%ecx
f0101832:	01 c8                	add    %ecx,%eax
f0101834:	8b 00                	mov    (%eax),%eax
f0101836:	83 e0 fe             	and    $0xfffffffe,%eax
f0101839:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010183b:	0f 20 d8             	mov    %cr3,%eax
f010183e:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0101841:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101844:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f0101847:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010184c:	c9                   	leave  
f010184d:	c3                   	ret    

f010184e <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f010184e:	55                   	push   %ebp
f010184f:	89 e5                	mov    %esp,%ebp
f0101851:	83 ec 28             	sub    $0x28,%esp
	if (number_of_arguments < 3 || number_of_arguments > 4)
f0101854:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0101858:	7e 06                	jle    f0101860 <command_allocuserpage+0x12>
f010185a:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f010185e:	7e 1a                	jle    f010187a <command_allocuserpage+0x2c>
	{
		cprintf("aup command: invalid number of arguments\n") ;
f0101860:	83 ec 0c             	sub    $0xc,%esp
f0101863:	68 b4 41 13 f0       	push   $0xf01341b4
f0101868:	e8 15 f4 ff ff       	call   f0100c82 <cprintf>
f010186d:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101870:	b8 00 00 00 00       	mov    $0x0,%eax
f0101875:	e9 46 01 00 00       	jmp    f01019c0 <command_allocuserpage+0x172>
	}
	int32 envId = strtol(arguments[1],NULL, 10);
f010187a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010187d:	83 c0 04             	add    $0x4,%eax
f0101880:	8b 00                	mov    (%eax),%eax
f0101882:	83 ec 04             	sub    $0x4,%esp
f0101885:	6a 0a                	push   $0xa
f0101887:	6a 00                	push   $0x0
f0101889:	50                   	push   %eax
f010188a:	e8 5b f7 02 00       	call   f0130fea <strtol>
f010188f:	83 c4 10             	add    $0x10,%esp
f0101892:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct Env* env = NULL;
f0101895:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	envid2env(envId, &env, 0 );
f010189c:	83 ec 04             	sub    $0x4,%esp
f010189f:	6a 00                	push   $0x0
f01018a1:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f01018a4:	50                   	push   %eax
f01018a5:	ff 75 f0             	pushl  -0x10(%ebp)
f01018a8:	e8 f5 80 00 00       	call   f01099a2 <envid2env>
f01018ad:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f01018b0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01018b3:	85 c0                	test   %eax,%eax
f01018b5:	75 0a                	jne    f01018c1 <command_allocuserpage+0x73>
f01018b7:	b8 00 00 00 00       	mov    $0x0,%eax
f01018bc:	e9 ff 00 00 00       	jmp    f01019c0 <command_allocuserpage+0x172>

	uint32 va = strtol(arguments[2], NULL, 16);
f01018c1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01018c4:	83 c0 08             	add    $0x8,%eax
f01018c7:	8b 00                	mov    (%eax),%eax
f01018c9:	83 ec 04             	sub    $0x4,%esp
f01018cc:	6a 10                	push   $0x10
f01018ce:	6a 00                	push   $0x0
f01018d0:	50                   	push   %eax
f01018d1:	e8 14 f7 02 00       	call   f0130fea <strtol>
f01018d6:	83 c4 10             	add    $0x10,%esp
f01018d9:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f01018dc:	83 ec 0c             	sub    $0xc,%esp
f01018df:	8d 45 e0             	lea    -0x20(%ebp),%eax
f01018e2:	50                   	push   %eax
f01018e3:	e8 33 4f 00 00       	call   f010681b <allocate_frame>
f01018e8:	83 c4 10             	add    $0x10,%esp
f01018eb:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f01018ee:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f01018f2:	75 1a                	jne    f010190e <command_allocuserpage+0xc0>
	{
		cprintf("ERROR: no enough memory\n");
f01018f4:	83 ec 0c             	sub    $0xc,%esp
f01018f7:	68 de 41 13 f0       	push   $0xf01341de
f01018fc:	e8 81 f3 ff ff       	call   f0100c82 <cprintf>
f0101901:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101904:	b8 00 00 00 00       	mov    $0x0,%eax
f0101909:	e9 b2 00 00 00       	jmp    f01019c0 <command_allocuserpage+0x172>
	}

	if (number_of_arguments == 3)
f010190e:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0101912:	75 1d                	jne    f0101931 <command_allocuserpage+0xe3>
	{
		// Map this frame to the given user virtual address with PERM_WRITEABLE
		map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f0101914:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101917:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010191a:	8b 40 5c             	mov    0x5c(%eax),%eax
f010191d:	6a 06                	push   $0x6
f010191f:	ff 75 ec             	pushl  -0x14(%ebp)
f0101922:	52                   	push   %edx
f0101923:	50                   	push   %eax
f0101924:	e8 41 53 00 00       	call   f0106c6a <map_frame>
f0101929:	83 c4 10             	add    $0x10,%esp
f010192c:	e9 8a 00 00 00       	jmp    f01019bb <command_allocuserpage+0x16d>
	}
	else if (number_of_arguments == 4)
f0101931:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0101935:	0f 85 80 00 00 00    	jne    f01019bb <command_allocuserpage+0x16d>
	{
		// Map this frame to the given user virtual address with the given permission
		uint32 rw ;
		if (arguments[3][0] == 'r' || arguments[3][0] == 'R')
f010193b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010193e:	83 c0 0c             	add    $0xc,%eax
f0101941:	8b 00                	mov    (%eax),%eax
f0101943:	8a 00                	mov    (%eax),%al
f0101945:	3c 72                	cmp    $0x72,%al
f0101947:	74 0e                	je     f0101957 <command_allocuserpage+0x109>
f0101949:	8b 45 0c             	mov    0xc(%ebp),%eax
f010194c:	83 c0 0c             	add    $0xc,%eax
f010194f:	8b 00                	mov    (%eax),%eax
f0101951:	8a 00                	mov    (%eax),%al
f0101953:	3c 52                	cmp    $0x52,%al
f0101955:	75 09                	jne    f0101960 <command_allocuserpage+0x112>
			rw = 0 ;
f0101957:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010195e:	eb 3c                	jmp    f010199c <command_allocuserpage+0x14e>
		else if (arguments[3][0] == 'w' || arguments[3][0] == 'W')
f0101960:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101963:	83 c0 0c             	add    $0xc,%eax
f0101966:	8b 00                	mov    (%eax),%eax
f0101968:	8a 00                	mov    (%eax),%al
f010196a:	3c 77                	cmp    $0x77,%al
f010196c:	74 0e                	je     f010197c <command_allocuserpage+0x12e>
f010196e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101971:	83 c0 0c             	add    $0xc,%eax
f0101974:	8b 00                	mov    (%eax),%eax
f0101976:	8a 00                	mov    (%eax),%al
f0101978:	3c 57                	cmp    $0x57,%al
f010197a:	75 09                	jne    f0101985 <command_allocuserpage+0x137>
			rw = PERM_WRITEABLE ;
f010197c:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101983:	eb 17                	jmp    f010199c <command_allocuserpage+0x14e>
		else
		{
			cprintf("aup command: wrong permission (r/w)... will continue as writable\n") ;
f0101985:	83 ec 0c             	sub    $0xc,%esp
f0101988:	68 f8 41 13 f0       	push   $0xf01341f8
f010198d:	e8 f0 f2 ff ff       	call   f0100c82 <cprintf>
f0101992:	83 c4 10             	add    $0x10,%esp
			rw = PERM_WRITEABLE ;
f0101995:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
		}

		map_frame(env->env_page_directory, ptr_FrameInfo, va, rw | PERM_USER);
f010199c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010199f:	83 c8 04             	or     $0x4,%eax
f01019a2:	89 c1                	mov    %eax,%ecx
f01019a4:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01019a7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01019aa:	8b 40 5c             	mov    0x5c(%eax),%eax
f01019ad:	51                   	push   %ecx
f01019ae:	ff 75 ec             	pushl  -0x14(%ebp)
f01019b1:	52                   	push   %edx
f01019b2:	50                   	push   %eax
f01019b3:	e8 b2 52 00 00       	call   f0106c6a <map_frame>
f01019b8:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01019bb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01019c0:	c9                   	leave  
f01019c1:	c3                   	ret    

f01019c2 <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f01019c2:	55                   	push   %ebp
f01019c3:	89 e5                	mov    %esp,%ebp
f01019c5:	56                   	push   %esi
f01019c6:	53                   	push   %ebx
f01019c7:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f01019ca:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01019cd:	83 ec 0c             	sub    $0xc,%esp
f01019d0:	50                   	push   %eax
f01019d1:	e8 2e 55 00 00       	call   f0106f04 <calculate_available_frames>
f01019d6:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f01019d9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01019dc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01019df:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f01019e2:	8b 75 ec             	mov    -0x14(%ebp),%esi
f01019e5:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01019e8:	01 de                	add    %ebx,%esi
f01019ea:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f01019ed:	01 f3                	add    %esi,%ebx
f01019ef:	83 ec 0c             	sub    $0xc,%esp
f01019f2:	51                   	push   %ecx
f01019f3:	52                   	push   %edx
f01019f4:	50                   	push   %eax
f01019f5:	53                   	push   %ebx
f01019f6:	68 3c 42 13 f0       	push   $0xf013423c
f01019fb:	e8 82 f2 ff ff       	call   f0100c82 <cprintf>
f0101a00:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0101a03:	a1 74 7b 65 f0       	mov    0xf0657b74,%eax
f0101a08:	83 ec 08             	sub    $0x8,%esp
f0101a0b:	50                   	push   %eax
f0101a0c:	68 94 42 13 f0       	push   $0xf0134294
f0101a11:	e8 6c f2 ff ff       	call   f0100c82 <cprintf>
f0101a16:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101a19:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101a1e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0101a21:	5b                   	pop    %ebx
f0101a22:	5e                   	pop    %esi
f0101a23:	5d                   	pop    %ebp
f0101a24:	c3                   	ret    

f0101a25 <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f0101a25:	55                   	push   %ebp
f0101a26:	89 e5                	mov    %esp,%ebp
f0101a28:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f0101a2b:	c7 45 f4 88 13 00 00 	movl   $0x1388,-0xc(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f0101a32:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f0101a39:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
#if USE_KHEAP
	{
		switch (number_of_arguments)
f0101a40:	8b 45 08             	mov    0x8(%ebp),%eax
f0101a43:	83 f8 04             	cmp    $0x4,%eax
f0101a46:	0f 84 94 00 00 00    	je     f0101ae0 <CreateEnv+0xbb>
f0101a4c:	83 f8 05             	cmp    $0x5,%eax
f0101a4f:	74 0e                	je     f0101a5f <CreateEnv+0x3a>
f0101a51:	83 f8 03             	cmp    $0x3,%eax
f0101a54:	0f 84 ec 00 00 00    	je     f0101b46 <CreateEnv+0x121>
f0101a5a:	e9 2f 01 00 00       	jmp    f0101b8e <CreateEnv+0x169>
		{
		case 5:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101a5f:	83 ec 0c             	sub    $0xc,%esp
f0101a62:	6a 02                	push   $0x2
f0101a64:	e8 98 c0 00 00       	call   f010db01 <isPageReplacmentAlgorithmLRU>
f0101a69:	83 c4 10             	add    $0x10,%esp
f0101a6c:	85 c0                	test   %eax,%eax
f0101a6e:	75 1a                	jne    f0101a8a <CreateEnv+0x65>
			{
				cprintf("ERROR: Current Replacement is NOT LRU LISTS, invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0101a70:	83 ec 0c             	sub    $0xc,%esp
f0101a73:	68 d0 42 13 f0       	push   $0xf01342d0
f0101a78:	e8 05 f2 ff ff       	call   f0100c82 <cprintf>
f0101a7d:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101a80:	b8 00 00 00 00       	mov    $0x0,%eax
f0101a85:	e9 d5 01 00 00       	jmp    f0101c5f <CreateEnv+0x23a>
			}
			percent_WS_pages_to_remove = strtol(arguments[4], NULL, 10);
f0101a8a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a8d:	83 c0 10             	add    $0x10,%eax
f0101a90:	8b 00                	mov    (%eax),%eax
f0101a92:	83 ec 04             	sub    $0x4,%esp
f0101a95:	6a 0a                	push   $0xa
f0101a97:	6a 00                	push   $0x0
f0101a99:	50                   	push   %eax
f0101a9a:	e8 4b f5 02 00       	call   f0130fea <strtol>
f0101a9f:	83 c4 10             	add    $0x10,%esp
f0101aa2:	89 45 ec             	mov    %eax,-0x14(%ebp)
			LRUSecondListSize = strtol(arguments[3], NULL, 10);
f0101aa5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101aa8:	83 c0 0c             	add    $0xc,%eax
f0101aab:	8b 00                	mov    (%eax),%eax
f0101aad:	83 ec 04             	sub    $0x4,%esp
f0101ab0:	6a 0a                	push   $0xa
f0101ab2:	6a 00                	push   $0x0
f0101ab4:	50                   	push   %eax
f0101ab5:	e8 30 f5 02 00       	call   f0130fea <strtol>
f0101aba:	83 c4 10             	add    $0x10,%esp
f0101abd:	89 45 f0             	mov    %eax,-0x10(%ebp)
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101ac0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101ac3:	83 c0 08             	add    $0x8,%eax
f0101ac6:	8b 00                	mov    (%eax),%eax
f0101ac8:	83 ec 04             	sub    $0x4,%esp
f0101acb:	6a 0a                	push   $0xa
f0101acd:	6a 00                	push   $0x0
f0101acf:	50                   	push   %eax
f0101ad0:	e8 15 f5 02 00       	call   f0130fea <strtol>
f0101ad5:	83 c4 10             	add    $0x10,%esp
f0101ad8:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101adb:	e9 c8 00 00 00       	jmp    f0101ba8 <CreateEnv+0x183>
		case 4:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101ae0:	83 ec 0c             	sub    $0xc,%esp
f0101ae3:	6a 02                	push   $0x2
f0101ae5:	e8 17 c0 00 00       	call   f010db01 <isPageReplacmentAlgorithmLRU>
f0101aea:	83 c4 10             	add    $0x10,%esp
f0101aed:	85 c0                	test   %eax,%eax
f0101aef:	75 1d                	jne    f0101b0e <CreateEnv+0xe9>
			{
				percent_WS_pages_to_remove = strtol(arguments[3], NULL, 10);
f0101af1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101af4:	83 c0 0c             	add    $0xc,%eax
f0101af7:	8b 00                	mov    (%eax),%eax
f0101af9:	83 ec 04             	sub    $0x4,%esp
f0101afc:	6a 0a                	push   $0xa
f0101afe:	6a 00                	push   $0x0
f0101b00:	50                   	push   %eax
f0101b01:	e8 e4 f4 02 00       	call   f0130fea <strtol>
f0101b06:	83 c4 10             	add    $0x10,%esp
f0101b09:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0101b0c:	eb 1b                	jmp    f0101b29 <CreateEnv+0x104>
			}
			else
			{
				LRUSecondListSize = strtol(arguments[3], NULL, 10);
f0101b0e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b11:	83 c0 0c             	add    $0xc,%eax
f0101b14:	8b 00                	mov    (%eax),%eax
f0101b16:	83 ec 04             	sub    $0x4,%esp
f0101b19:	6a 0a                	push   $0xa
f0101b1b:	6a 00                	push   $0x0
f0101b1d:	50                   	push   %eax
f0101b1e:	e8 c7 f4 02 00       	call   f0130fea <strtol>
f0101b23:	83 c4 10             	add    $0x10,%esp
f0101b26:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101b29:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b2c:	83 c0 08             	add    $0x8,%eax
f0101b2f:	8b 00                	mov    (%eax),%eax
f0101b31:	83 ec 04             	sub    $0x4,%esp
f0101b34:	6a 0a                	push   $0xa
f0101b36:	6a 00                	push   $0x0
f0101b38:	50                   	push   %eax
f0101b39:	e8 ac f4 02 00       	call   f0130fea <strtol>
f0101b3e:	83 c4 10             	add    $0x10,%esp
f0101b41:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101b44:	eb 62                	jmp    f0101ba8 <CreateEnv+0x183>
		case 3:
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101b46:	83 ec 0c             	sub    $0xc,%esp
f0101b49:	6a 02                	push   $0x2
f0101b4b:	e8 b1 bf 00 00       	call   f010db01 <isPageReplacmentAlgorithmLRU>
f0101b50:	83 c4 10             	add    $0x10,%esp
f0101b53:	85 c0                	test   %eax,%eax
f0101b55:	74 1a                	je     f0101b71 <CreateEnv+0x14c>
			{
				cprintf("ERROR: Current Replacement is LRU LISTS, Please specify a working set size in the 3rd arg and LRU second list size in the 4th arg, aborting.\n");
f0101b57:	83 ec 0c             	sub    $0xc,%esp
f0101b5a:	68 90 43 13 f0       	push   $0xf0134390
f0101b5f:	e8 1e f1 ff ff       	call   f0100c82 <cprintf>
f0101b64:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101b67:	b8 00 00 00 00       	mov    $0x0,%eax
f0101b6c:	e9 ee 00 00 00       	jmp    f0101c5f <CreateEnv+0x23a>
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101b71:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b74:	83 c0 08             	add    $0x8,%eax
f0101b77:	8b 00                	mov    (%eax),%eax
f0101b79:	83 ec 04             	sub    $0x4,%esp
f0101b7c:	6a 0a                	push   $0xa
f0101b7e:	6a 00                	push   $0x0
f0101b80:	50                   	push   %eax
f0101b81:	e8 64 f4 02 00       	call   f0130fea <strtol>
f0101b86:	83 c4 10             	add    $0x10,%esp
f0101b89:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101b8c:	eb 1a                	jmp    f0101ba8 <CreateEnv+0x183>
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0101b8e:	83 ec 0c             	sub    $0xc,%esp
f0101b91:	68 20 44 13 f0       	push   $0xf0134420
f0101b96:	e8 e7 f0 ff ff       	call   f0100c82 <cprintf>
f0101b9b:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101b9e:	b8 00 00 00 00       	mov    $0x0,%eax
f0101ba3:	e9 b7 00 00 00       	jmp    f0101c5f <CreateEnv+0x23a>

			break;
		}
		if(pageWSSize > __PWS_MAX_SIZE)
f0101ba8:	81 7d f4 88 13 00 00 	cmpl   $0x1388,-0xc(%ebp)
f0101baf:	76 1f                	jbe    f0101bd0 <CreateEnv+0x1ab>
		{
			cprintf("ERROR: size of WS must be less than or equal to %d... aborting", __PWS_MAX_SIZE);
f0101bb1:	83 ec 08             	sub    $0x8,%esp
f0101bb4:	68 88 13 00 00       	push   $0x1388
f0101bb9:	68 b8 44 13 f0       	push   $0xf01344b8
f0101bbe:	e8 bf f0 ff ff       	call   f0100c82 <cprintf>
f0101bc3:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101bc6:	b8 00 00 00 00       	mov    $0x0,%eax
f0101bcb:	e9 8f 00 00 00       	jmp    f0101c5f <CreateEnv+0x23a>
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101bd0:	83 ec 0c             	sub    $0xc,%esp
f0101bd3:	6a 02                	push   $0x2
f0101bd5:	e8 27 bf 00 00       	call   f010db01 <isPageReplacmentAlgorithmLRU>
f0101bda:	83 c4 10             	add    $0x10,%esp
f0101bdd:	85 c0                	test   %eax,%eax
f0101bdf:	74 20                	je     f0101c01 <CreateEnv+0x1dc>
		{
			if (LRUSecondListSize > pageWSSize - 1)
f0101be1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101be4:	48                   	dec    %eax
f0101be5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0101be8:	73 17                	jae    f0101c01 <CreateEnv+0x1dc>
			{
				cprintf("ERROR: size of LRU second list can't equal/exceed the size of the page WS... aborting\n");
f0101bea:	83 ec 0c             	sub    $0xc,%esp
f0101bed:	68 f8 44 13 f0       	push   $0xf01344f8
f0101bf2:	e8 8b f0 ff ff       	call   f0100c82 <cprintf>
f0101bf7:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101bfa:	b8 00 00 00 00       	mov    $0x0,%eax
f0101bff:	eb 5e                	jmp    f0101c5f <CreateEnv+0x23a>
			}
		}
		assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101c01:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f0101c05:	76 19                	jbe    f0101c20 <CreateEnv+0x1fb>
f0101c07:	68 50 45 13 f0       	push   $0xf0134550
f0101c0c:	68 95 45 13 f0       	push   $0xf0134595
f0101c11:	68 5a 02 00 00       	push   $0x25a
f0101c16:	68 19 41 13 f0       	push   $0xf0134119
f0101c1b:	e8 db e5 ff ff       	call   f01001fb <_panic>
		{
			LRUSecondListSize = __LRU_SNDLST_SIZE;
		}
	}
#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101c20:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f0101c24:	76 19                	jbe    f0101c3f <CreateEnv+0x21a>
f0101c26:	68 50 45 13 f0       	push   $0xf0134550
f0101c2b:	68 95 45 13 f0       	push   $0xf0134595
f0101c30:	68 71 02 00 00       	push   $0x271
f0101c35:	68 19 41 13 f0       	push   $0xf0134119
f0101c3a:	e8 bc e5 ff ff       	call   f01001fb <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0101c3f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101c42:	83 c0 04             	add    $0x4,%eax
f0101c45:	8b 00                	mov    (%eax),%eax
f0101c47:	ff 75 ec             	pushl  -0x14(%ebp)
f0101c4a:	ff 75 f0             	pushl  -0x10(%ebp)
f0101c4d:	ff 75 f4             	pushl  -0xc(%ebp)
f0101c50:	50                   	push   %eax
f0101c51:	e8 a5 70 00 00       	call   f0108cfb <env_create>
f0101c56:	83 c4 10             	add    $0x10,%esp
f0101c59:	89 45 e8             	mov    %eax,-0x18(%ebp)

	return env;
f0101c5c:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0101c5f:	c9                   	leave  
f0101c60:	c3                   	ret    

f0101c61 <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f0101c61:	55                   	push   %ebp
f0101c62:	89 e5                	mov    %esp,%ebp
f0101c64:	83 ec 18             	sub    $0x18,%esp
	//[1] Create and initialize a new environment for the program to be run
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101c67:	83 ec 08             	sub    $0x8,%esp
f0101c6a:	ff 75 0c             	pushl  0xc(%ebp)
f0101c6d:	ff 75 08             	pushl  0x8(%ebp)
f0101c70:	e8 b0 fd ff ff       	call   f0101a25 <CreateEnv>
f0101c75:	83 c4 10             	add    $0x10,%esp
f0101c78:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0101c7b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101c7f:	75 07                	jne    f0101c88 <command_run_program+0x27>
f0101c81:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c86:	eb 46                	jmp    f0101cce <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101c88:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101c8b:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101c8e:	83 ec 08             	sub    $0x8,%esp
f0101c91:	50                   	push   %eax
f0101c92:	68 aa 45 13 f0       	push   $0xf01345aa
f0101c97:	e8 e6 ef ff ff       	call   f0100c82 <cprintf>
f0101c9c:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0101c9f:	c7 05 74 7b 65 f0 00 	movl   $0x0,0xf0657b74
f0101ca6:	00 00 00 

	//[2] Run the created environment by adding it to the "ready" queue then invoke the scheduler to execute it
	sched_new_env(env);
f0101ca9:	83 ec 0c             	sub    $0xc,%esp
f0101cac:	ff 75 f4             	pushl  -0xc(%ebp)
f0101caf:	e8 79 34 00 00       	call   f010512d <sched_new_env>
f0101cb4:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f0101cb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101cba:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101cbd:	83 ec 0c             	sub    $0xc,%esp
f0101cc0:	50                   	push   %eax
f0101cc1:	e8 84 34 00 00       	call   f010514a <sched_run_env>
f0101cc6:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101cc9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101cce:	c9                   	leave  
f0101ccf:	c3                   	ret    

f0101cd0 <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f0101cd0:	55                   	push   %ebp
f0101cd1:	89 e5                	mov    %esp,%ebp
f0101cd3:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101cd6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101cd9:	83 c0 04             	add    $0x4,%eax
f0101cdc:	8b 00                	mov    (%eax),%eax
f0101cde:	83 ec 04             	sub    $0x4,%esp
f0101ce1:	6a 0a                	push   $0xa
f0101ce3:	6a 00                	push   $0x0
f0101ce5:	50                   	push   %eax
f0101ce6:	e8 ff f2 02 00       	call   f0130fea <strtol>
f0101ceb:	83 c4 10             	add    $0x10,%esp
f0101cee:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f0101cf1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101cf4:	83 ec 0c             	sub    $0xc,%esp
f0101cf7:	50                   	push   %eax
f0101cf8:	e8 6b 38 00 00       	call   f0105568 <sched_kill_env>
f0101cfd:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101d00:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d05:	c9                   	leave  
f0101d06:	c3                   	ret    

f0101d07 <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f0101d07:	55                   	push   %ebp
f0101d08:	89 e5                	mov    %esp,%ebp
f0101d0a:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101d0d:	83 ec 08             	sub    $0x8,%esp
f0101d10:	ff 75 0c             	pushl  0xc(%ebp)
f0101d13:	ff 75 08             	pushl  0x8(%ebp)
f0101d16:	e8 0a fd ff ff       	call   f0101a25 <CreateEnv>
f0101d1b:	83 c4 10             	add    $0x10,%esp
f0101d1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f0101d21:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101d25:	75 07                	jne    f0101d2e <commnad_load_env+0x27>
		return 0 ;
f0101d27:	b8 00 00 00 00       	mov    $0x0,%eax
f0101d2c:	eb 2a                	jmp    f0101d58 <commnad_load_env+0x51>

	sched_new_env(env) ;
f0101d2e:	83 ec 0c             	sub    $0xc,%esp
f0101d31:	ff 75 f4             	pushl  -0xc(%ebp)
f0101d34:	e8 f4 33 00 00       	call   f010512d <sched_new_env>
f0101d39:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101d3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d3f:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101d42:	83 ec 08             	sub    $0x8,%esp
f0101d45:	50                   	push   %eax
f0101d46:	68 aa 45 13 f0       	push   $0xf01345aa
f0101d4b:	e8 32 ef ff ff       	call   f0100c82 <cprintf>
f0101d50:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101d53:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d58:	c9                   	leave  
f0101d59:	c3                   	ret    

f0101d5a <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f0101d5a:	55                   	push   %ebp
f0101d5b:	89 e5                	mov    %esp,%ebp
f0101d5d:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f0101d60:	c7 05 74 7b 65 f0 00 	movl   $0x0,0xf0657b74
f0101d67:	00 00 00 
	sched_run_all();
f0101d6a:	e8 06 30 00 00       	call   f0104d75 <sched_run_all>

	return 0 ;
f0101d6f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d74:	c9                   	leave  
f0101d75:	c3                   	ret    

f0101d76 <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0101d76:	55                   	push   %ebp
f0101d77:	89 e5                	mov    %esp,%ebp
f0101d79:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f0101d7c:	e8 ea 2d 00 00       	call   f0104b6b <sched_print_all>

	return 0 ;
f0101d81:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d86:	c9                   	leave  
f0101d87:	c3                   	ret    

f0101d88 <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0101d88:	55                   	push   %ebp
f0101d89:	89 e5                	mov    %esp,%ebp
f0101d8b:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f0101d8e:	e8 55 30 00 00       	call   f0104de8 <sched_kill_all>

	return 0 ;
f0101d93:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d98:	c9                   	leave  
f0101d99:	c3                   	ret    

f0101d9a <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0101d9a:	55                   	push   %ebp
f0101d9b:	89 e5                	mov    %esp,%ebp
f0101d9d:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f0101da0:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0101da4:	7f 1a                	jg     f0101dc0 <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101da6:	83 ec 0c             	sub    $0xc,%esp
f0101da9:	68 c0 45 13 f0       	push   $0xf01345c0
f0101dae:	e8 cf ee ff ff       	call   f0100c82 <cprintf>
f0101db3:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101db6:	b8 00 00 00 00       	mov    $0x0,%eax
f0101dbb:	e9 83 00 00 00       	jmp    f0101e43 <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f0101dc0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101dc3:	83 c0 04             	add    $0x4,%eax
f0101dc6:	8b 00                	mov    (%eax),%eax
f0101dc8:	83 ec 04             	sub    $0x4,%esp
f0101dcb:	6a 0a                	push   $0xa
f0101dcd:	6a 00                	push   $0x0
f0101dcf:	50                   	push   %eax
f0101dd0:	e8 15 f2 02 00       	call   f0130fea <strtol>
f0101dd5:	83 c4 10             	add    $0x10,%esp
f0101dd8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f0101ddb:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0101ddf:	75 20                	jne    f0101e01 <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101de1:	83 ec 0c             	sub    $0xc,%esp
f0101de4:	ff 75 f4             	pushl  -0xc(%ebp)
f0101de7:	e8 8a bc 00 00       	call   f010da76 <setPageReplacmentAlgorithmLRU>
f0101dec:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f0101def:	83 ec 0c             	sub    $0xc,%esp
f0101df2:	68 20 46 13 f0       	push   $0xf0134620
f0101df7:	e8 86 ee ff ff       	call   f0100c82 <cprintf>
f0101dfc:	83 c4 10             	add    $0x10,%esp
f0101dff:	eb 3d                	jmp    f0101e3e <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f0101e01:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0101e05:	75 20                	jne    f0101e27 <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101e07:	83 ec 0c             	sub    $0xc,%esp
f0101e0a:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e0d:	e8 64 bc 00 00       	call   f010da76 <setPageReplacmentAlgorithmLRU>
f0101e12:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f0101e15:	83 ec 0c             	sub    $0xc,%esp
f0101e18:	68 64 46 13 f0       	push   $0xf0134664
f0101e1d:	e8 60 ee ff ff       	call   f0100c82 <cprintf>
f0101e22:	83 c4 10             	add    $0x10,%esp
f0101e25:	eb 17                	jmp    f0101e3e <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101e27:	83 ec 0c             	sub    $0xc,%esp
f0101e2a:	68 a4 46 13 f0       	push   $0xf01346a4
f0101e2f:	e8 4e ee ff ff       	call   f0100c82 <cprintf>
f0101e34:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101e37:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e3c:	eb 05                	jmp    f0101e43 <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f0101e3e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e43:	c9                   	leave  
f0101e44:	c3                   	ret    

f0101e45 <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f0101e45:	55                   	push   %ebp
f0101e46:	89 e5                	mov    %esp,%ebp
f0101e48:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f0101e4b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101e4e:	83 c0 04             	add    $0x4,%eax
f0101e51:	8b 00                	mov    (%eax),%eax
f0101e53:	83 ec 04             	sub    $0x4,%esp
f0101e56:	6a 0a                	push   $0xa
f0101e58:	6a 00                	push   $0x0
f0101e5a:	50                   	push   %eax
f0101e5b:	e8 8a f1 02 00       	call   f0130fea <strtol>
f0101e60:	83 c4 10             	add    $0x10,%esp
f0101e63:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f0101e66:	83 ec 0c             	sub    $0xc,%esp
f0101e69:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e6c:	e8 78 bc 00 00       	call   f010dae9 <setPageReplacmentAlgorithmNchanceCLOCK>
f0101e71:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f0101e74:	83 ec 0c             	sub    $0xc,%esp
f0101e77:	68 f8 46 13 f0       	push   $0xf01346f8
f0101e7c:	e8 01 ee ff ff       	call   f0100c82 <cprintf>
f0101e81:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101e84:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e89:	c9                   	leave  
f0101e8a:	c3                   	ret    

f0101e8b <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f0101e8b:	55                   	push   %ebp
f0101e8c:	89 e5                	mov    %esp,%ebp
f0101e8e:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0101e91:	e8 13 bc 00 00       	call   f010daa9 <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f0101e96:	83 ec 0c             	sub    $0xc,%esp
f0101e99:	68 2c 47 13 f0       	push   $0xf013472c
f0101e9e:	e8 df ed ff ff       	call   f0100c82 <cprintf>
f0101ea3:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ea6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101eab:	c9                   	leave  
f0101eac:	c3                   	ret    

f0101ead <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0101ead:	55                   	push   %ebp
f0101eae:	89 e5                	mov    %esp,%ebp
f0101eb0:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f0101eb3:	e8 01 bc 00 00       	call   f010dab9 <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0101eb8:	83 ec 0c             	sub    $0xc,%esp
f0101ebb:	68 58 47 13 f0       	push   $0xf0134758
f0101ec0:	e8 bd ed ff ff       	call   f0100c82 <cprintf>
f0101ec5:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ec8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101ecd:	c9                   	leave  
f0101ece:	c3                   	ret    

f0101ecf <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0101ecf:	55                   	push   %ebp
f0101ed0:	89 e5                	mov    %esp,%ebp
f0101ed2:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f0101ed5:	e8 ef bb 00 00       	call   f010dac9 <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0101eda:	83 ec 0c             	sub    $0xc,%esp
f0101edd:	68 80 47 13 f0       	push   $0xf0134780
f0101ee2:	e8 9b ed ff ff       	call   f0100c82 <cprintf>
f0101ee7:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101eea:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101eef:	c9                   	leave  
f0101ef0:	c3                   	ret    

f0101ef1 <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0101ef1:	55                   	push   %ebp
f0101ef2:	89 e5                	mov    %esp,%ebp
f0101ef4:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f0101ef7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101efa:	83 c0 04             	add    $0x4,%eax
f0101efd:	8b 00                	mov    (%eax),%eax
f0101eff:	83 ec 04             	sub    $0x4,%esp
f0101f02:	6a 0a                	push   $0xa
f0101f04:	6a 00                	push   $0x0
f0101f06:	50                   	push   %eax
f0101f07:	e8 de f0 02 00       	call   f0130fea <strtol>
f0101f0c:	83 c4 10             	add    $0x10,%esp
f0101f0f:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f0101f12:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0101f16:	83 ec 0c             	sub    $0xc,%esp
f0101f19:	50                   	push   %eax
f0101f1a:	e8 12 28 00 00       	call   f0104731 <sched_init_RR>
f0101f1f:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f0101f22:	a1 2c 7b 65 f0       	mov    0xf0657b2c,%eax
f0101f27:	8a 00                	mov    (%eax),%al
f0101f29:	0f b6 c0             	movzbl %al,%eax
f0101f2c:	83 ec 08             	sub    $0x8,%esp
f0101f2f:	50                   	push   %eax
f0101f30:	68 b4 47 13 f0       	push   $0xf01347b4
f0101f35:	e8 48 ed ff ff       	call   f0100c82 <cprintf>
f0101f3a:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f3d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f42:	c9                   	leave  
f0101f43:	c3                   	ret    

f0101f44 <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f0101f44:	55                   	push   %ebp
f0101f45:	89 e5                	mov    %esp,%ebp
f0101f47:	53                   	push   %ebx
f0101f48:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0101f4b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101f4e:	83 c0 04             	add    $0x4,%eax
f0101f51:	8b 00                	mov    (%eax),%eax
f0101f53:	83 ec 04             	sub    $0x4,%esp
f0101f56:	6a 0a                	push   $0xa
f0101f58:	6a 00                	push   $0x0
f0101f5a:	50                   	push   %eax
f0101f5b:	e8 8a f0 02 00       	call   f0130fea <strtol>
f0101f60:	83 c4 10             	add    $0x10,%esp
f0101f63:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0101f66:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101f6d:	eb 2e                	jmp    f0101f9d <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f0101f6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f72:	8d 58 fe             	lea    -0x2(%eax),%ebx
f0101f75:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f78:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0101f7f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101f82:	01 d0                	add    %edx,%eax
f0101f84:	8b 00                	mov    (%eax),%eax
f0101f86:	83 ec 04             	sub    $0x4,%esp
f0101f89:	6a 0a                	push   $0xa
f0101f8b:	6a 00                	push   $0x0
f0101f8d:	50                   	push   %eax
f0101f8e:	e8 57 f0 02 00       	call   f0130fea <strtol>
f0101f93:	83 c4 10             	add    $0x10,%esp
f0101f96:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0101f9a:	ff 45 f4             	incl   -0xc(%ebp)
f0101f9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101fa0:	3b 45 08             	cmp    0x8(%ebp),%eax
f0101fa3:	7c ca                	jl     f0101f6f <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f0101fa5:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f0101fa9:	83 ec 08             	sub    $0x8,%esp
f0101fac:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f0101faf:	52                   	push   %edx
f0101fb0:	50                   	push   %eax
f0101fb1:	e8 06 28 00 00       	call   f01047bc <sched_init_MLFQ>
f0101fb6:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f0101fb9:	83 ec 0c             	sub    $0xc,%esp
f0101fbc:	68 ec 47 13 f0       	push   $0xf01347ec
f0101fc1:	e8 bc ec ff ff       	call   f0100c82 <cprintf>
f0101fc6:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0101fc9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101fd0:	eb 24                	jmp    f0101ff6 <command_sch_MLFQ+0xb2>
	{
		cprintf("%d   ", quantums[i]) ;
f0101fd2:	8b 15 2c 7b 65 f0    	mov    0xf0657b2c,%edx
f0101fd8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101fdb:	01 d0                	add    %edx,%eax
f0101fdd:	8a 00                	mov    (%eax),%al
f0101fdf:	0f b6 c0             	movzbl %al,%eax
f0101fe2:	83 ec 08             	sub    $0x8,%esp
f0101fe5:	50                   	push   %eax
f0101fe6:	68 19 48 13 f0       	push   $0xf0134819
f0101feb:	e8 92 ec ff ff       	call   f0100c82 <cprintf>
f0101ff0:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0101ff3:	ff 45 f0             	incl   -0x10(%ebp)
f0101ff6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0101ffb:	0f b6 c0             	movzbl %al,%eax
f0101ffe:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0102001:	7f cf                	jg     f0101fd2 <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f0102003:	83 ec 0c             	sub    $0xc,%esp
f0102006:	68 a1 41 13 f0       	push   $0xf01341a1
f010200b:	e8 72 ec ff ff       	call   f0100c82 <cprintf>
f0102010:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102013:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102018:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010201b:	c9                   	leave  
f010201c:	c3                   	ret    

f010201d <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f010201d:	55                   	push   %ebp
f010201e:	89 e5                	mov    %esp,%ebp
f0102020:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f0102023:	e8 8d 23 00 00       	call   f01043b5 <isSchedMethodMLFQ>
f0102028:	85 c0                	test   %eax,%eax
f010202a:	74 5c                	je     f0102088 <command_print_sch_method+0x6b>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f010202c:	83 ec 0c             	sub    $0xc,%esp
f010202f:	68 20 48 13 f0       	push   $0xf0134820
f0102034:	e8 49 ec ff ff       	call   f0100c82 <cprintf>
f0102039:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f010203c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102043:	eb 24                	jmp    f0102069 <command_print_sch_method+0x4c>
		{
			cprintf("%d   ", quantums[i]) ;
f0102045:	8b 15 2c 7b 65 f0    	mov    0xf0657b2c,%edx
f010204b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010204e:	01 d0                	add    %edx,%eax
f0102050:	8a 00                	mov    (%eax),%al
f0102052:	0f b6 c0             	movzbl %al,%eax
f0102055:	83 ec 08             	sub    $0x8,%esp
f0102058:	50                   	push   %eax
f0102059:	68 19 48 13 f0       	push   $0xf0134819
f010205e:	e8 1f ec ff ff       	call   f0100c82 <cprintf>
f0102063:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0102066:	ff 45 f4             	incl   -0xc(%ebp)
f0102069:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f010206e:	0f b6 c0             	movzbl %al,%eax
f0102071:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0102074:	7f cf                	jg     f0102045 <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f0102076:	83 ec 0c             	sub    $0xc,%esp
f0102079:	68 a1 41 13 f0       	push   $0xf01341a1
f010207e:	e8 ff eb ff ff       	call   f0100c82 <cprintf>
f0102083:	83 c4 10             	add    $0x10,%esp
f0102086:	eb 36                	jmp    f01020be <command_print_sch_method+0xa1>
	}
	else if (isSchedMethodRR())
f0102088:	e8 0e 23 00 00       	call   f010439b <isSchedMethodRR>
f010208d:	85 c0                	test   %eax,%eax
f010208f:	74 1d                	je     f01020ae <command_print_sch_method+0x91>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f0102091:	a1 2c 7b 65 f0       	mov    0xf0657b2c,%eax
f0102096:	8a 00                	mov    (%eax),%al
f0102098:	0f b6 c0             	movzbl %al,%eax
f010209b:	83 ec 08             	sub    $0x8,%esp
f010209e:	50                   	push   %eax
f010209f:	68 54 48 13 f0       	push   $0xf0134854
f01020a4:	e8 d9 eb ff ff       	call   f0100c82 <cprintf>
f01020a9:	83 c4 10             	add    $0x10,%esp
f01020ac:	eb 10                	jmp    f01020be <command_print_sch_method+0xa1>
	}

	else
		cprintf("Current scheduler method is UNDEFINED\n");
f01020ae:	83 ec 0c             	sub    $0xc,%esp
f01020b1:	68 90 48 13 f0       	push   $0xf0134890
f01020b6:	e8 c7 eb ff ff       	call   f0100c82 <cprintf>
f01020bb:	83 c4 10             	add    $0x10,%esp

	return 0;
f01020be:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01020c3:	c9                   	leave  
f01020c4:	c3                   	ret    

f01020c5 <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f01020c5:	55                   	push   %ebp
f01020c6:	89 e5                	mov    %esp,%ebp
f01020c8:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f01020cb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01020ce:	83 c0 04             	add    $0x4,%eax
f01020d1:	8b 00                	mov    (%eax),%eax
f01020d3:	83 ec 04             	sub    $0x4,%esp
f01020d6:	6a 0a                	push   $0xa
f01020d8:	6a 00                	push   $0x0
f01020da:	50                   	push   %eax
f01020db:	e8 0a ef 02 00       	call   f0130fea <strtol>
f01020e0:	83 c4 10             	add    $0x10,%esp
f01020e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f01020e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01020e9:	0f b6 c0             	movzbl %al,%eax
f01020ec:	83 ec 0c             	sub    $0xc,%esp
f01020ef:	50                   	push   %eax
f01020f0:	e8 1b de 02 00       	call   f012ff10 <chksch>
f01020f5:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f01020f8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01020fc:	75 12                	jne    f0102110 <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f01020fe:	83 ec 0c             	sub    $0xc,%esp
f0102101:	68 b8 48 13 f0       	push   $0xf01348b8
f0102106:	e8 77 eb ff ff       	call   f0100c82 <cprintf>
f010210b:	83 c4 10             	add    $0x10,%esp
f010210e:	eb 16                	jmp    f0102126 <command_sch_test+0x61>
	else if (status == 1)
f0102110:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102114:	75 10                	jne    f0102126 <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f0102116:	83 ec 0c             	sub    $0xc,%esp
f0102119:	68 e0 48 13 f0       	push   $0xf01348e0
f010211e:	e8 5f eb ff ff       	call   f0100c82 <cprintf>
f0102123:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102126:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010212b:	c9                   	leave  
f010212c:	c3                   	ret    

f010212d <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f010212d:	55                   	push   %ebp
f010212e:	89 e5                	mov    %esp,%ebp
f0102130:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f0102133:	e8 df b9 00 00       	call   f010db17 <isPageReplacmentAlgorithmCLOCK>
f0102138:	85 c0                	test   %eax,%eax
f010213a:	74 15                	je     f0102151 <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f010213c:	83 ec 0c             	sub    $0xc,%esp
f010213f:	68 04 49 13 f0       	push   $0xf0134904
f0102144:	e8 39 eb ff ff       	call   f0100c82 <cprintf>
f0102149:	83 c4 10             	add    $0x10,%esp
f010214c:	e9 8c 00 00 00       	jmp    f01021dd <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f0102151:	83 ec 0c             	sub    $0xc,%esp
f0102154:	6a 01                	push   $0x1
f0102156:	e8 a6 b9 00 00       	call   f010db01 <isPageReplacmentAlgorithmLRU>
f010215b:	83 c4 10             	add    $0x10,%esp
f010215e:	85 c0                	test   %eax,%eax
f0102160:	74 12                	je     f0102174 <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f0102162:	83 ec 0c             	sub    $0xc,%esp
f0102165:	68 2c 49 13 f0       	push   $0xf013492c
f010216a:	e8 13 eb ff ff       	call   f0100c82 <cprintf>
f010216f:	83 c4 10             	add    $0x10,%esp
f0102172:	eb 69                	jmp    f01021dd <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0102174:	83 ec 0c             	sub    $0xc,%esp
f0102177:	6a 02                	push   $0x2
f0102179:	e8 83 b9 00 00       	call   f010db01 <isPageReplacmentAlgorithmLRU>
f010217e:	83 c4 10             	add    $0x10,%esp
f0102181:	85 c0                	test   %eax,%eax
f0102183:	74 12                	je     f0102197 <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f0102185:	83 ec 0c             	sub    $0xc,%esp
f0102188:	68 6c 49 13 f0       	push   $0xf013496c
f010218d:	e8 f0 ea ff ff       	call   f0100c82 <cprintf>
f0102192:	83 c4 10             	add    $0x10,%esp
f0102195:	eb 46                	jmp    f01021dd <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f0102197:	e8 96 b9 00 00       	call   f010db32 <isPageReplacmentAlgorithmFIFO>
f010219c:	85 c0                	test   %eax,%eax
f010219e:	74 12                	je     f01021b2 <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f01021a0:	83 ec 0c             	sub    $0xc,%esp
f01021a3:	68 a8 49 13 f0       	push   $0xf01349a8
f01021a8:	e8 d5 ea ff ff       	call   f0100c82 <cprintf>
f01021ad:	83 c4 10             	add    $0x10,%esp
f01021b0:	eb 2b                	jmp    f01021dd <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f01021b2:	e8 96 b9 00 00       	call   f010db4d <isPageReplacmentAlgorithmModifiedCLOCK>
f01021b7:	85 c0                	test   %eax,%eax
f01021b9:	74 12                	je     f01021cd <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f01021bb:	83 ec 0c             	sub    $0xc,%esp
f01021be:	68 cc 49 13 f0       	push   $0xf01349cc
f01021c3:	e8 ba ea ff ff       	call   f0100c82 <cprintf>
f01021c8:	83 c4 10             	add    $0x10,%esp
f01021cb:	eb 10                	jmp    f01021dd <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f01021cd:	83 ec 0c             	sub    $0xc,%esp
f01021d0:	68 fc 49 13 f0       	push   $0xf01349fc
f01021d5:	e8 a8 ea ff ff       	call   f0100c82 <cprintf>
f01021da:	83 c4 10             	add    $0x10,%esp

	return 0;
f01021dd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01021e2:	c9                   	leave  
f01021e3:	c3                   	ret    

f01021e4 <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f01021e4:	55                   	push   %ebp
f01021e5:	89 e5                	mov    %esp,%ebp
f01021e7:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f01021ea:	e8 18 ed ff ff       	call   f0100f07 <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f01021ef:	83 ec 0c             	sub    $0xc,%esp
f01021f2:	68 28 4a 13 f0       	push   $0xf0134a28
f01021f7:	e8 86 ea ff ff       	call   f0100c82 <cprintf>
f01021fc:	83 c4 10             	add    $0x10,%esp
	return 0;
f01021ff:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102204:	c9                   	leave  
f0102205:	c3                   	ret    

f0102206 <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0102206:	55                   	push   %ebp
f0102207:	89 e5                	mov    %esp,%ebp
f0102209:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f010220c:	e8 06 ed ff ff       	call   f0100f17 <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f0102211:	83 ec 0c             	sub    $0xc,%esp
f0102214:	68 58 4a 13 f0       	push   $0xf0134a58
f0102219:	e8 64 ea ff ff       	call   f0100c82 <cprintf>
f010221e:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102221:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102226:	c9                   	leave  
f0102227:	c3                   	ret    

f0102228 <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f0102228:	55                   	push   %ebp
f0102229:	89 e5                	mov    %esp,%ebp
f010222b:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f010222e:	e8 f4 ec ff ff       	call   f0100f27 <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f0102233:	83 ec 0c             	sub    $0xc,%esp
f0102236:	68 88 4a 13 f0       	push   $0xf0134a88
f010223b:	e8 42 ea ff ff       	call   f0100c82 <cprintf>
f0102240:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102243:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102248:	c9                   	leave  
f0102249:	c3                   	ret    

f010224a <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f010224a:	55                   	push   %ebp
f010224b:	89 e5                	mov    %esp,%ebp
f010224d:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f0102250:	e8 e2 ec ff ff       	call   f0100f37 <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f0102255:	83 ec 0c             	sub    $0xc,%esp
f0102258:	68 b8 4a 13 f0       	push   $0xf0134ab8
f010225d:	e8 20 ea ff ff       	call   f0100c82 <cprintf>
f0102262:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102265:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010226a:	c9                   	leave  
f010226b:	c3                   	ret    

f010226c <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f010226c:	55                   	push   %ebp
f010226d:	89 e5                	mov    %esp,%ebp
f010226f:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f0102272:	e8 d0 ec ff ff       	call   f0100f47 <isUHeapPlacementStrategyFIRSTFIT>
f0102277:	84 c0                	test   %al,%al
f0102279:	74 12                	je     f010228d <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f010227b:	83 ec 0c             	sub    $0xc,%esp
f010227e:	68 e8 4a 13 f0       	push   $0xf0134ae8
f0102283:	e8 fa e9 ff ff       	call   f0100c82 <cprintf>
f0102288:	83 c4 10             	add    $0x10,%esp
f010228b:	eb 61                	jmp    f01022ee <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f010228d:	e8 ca ec ff ff       	call   f0100f5c <isUHeapPlacementStrategyBESTFIT>
f0102292:	84 c0                	test   %al,%al
f0102294:	74 12                	je     f01022a8 <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f0102296:	83 ec 0c             	sub    $0xc,%esp
f0102299:	68 14 4b 13 f0       	push   $0xf0134b14
f010229e:	e8 df e9 ff ff       	call   f0100c82 <cprintf>
f01022a3:	83 c4 10             	add    $0x10,%esp
f01022a6:	eb 46                	jmp    f01022ee <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f01022a8:	e8 c4 ec ff ff       	call   f0100f71 <isUHeapPlacementStrategyNEXTFIT>
f01022ad:	84 c0                	test   %al,%al
f01022af:	74 12                	je     f01022c3 <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f01022b1:	83 ec 0c             	sub    $0xc,%esp
f01022b4:	68 40 4b 13 f0       	push   $0xf0134b40
f01022b9:	e8 c4 e9 ff ff       	call   f0100c82 <cprintf>
f01022be:	83 c4 10             	add    $0x10,%esp
f01022c1:	eb 2b                	jmp    f01022ee <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f01022c3:	e8 be ec ff ff       	call   f0100f86 <isUHeapPlacementStrategyWORSTFIT>
f01022c8:	84 c0                	test   %al,%al
f01022ca:	74 12                	je     f01022de <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f01022cc:	83 ec 0c             	sub    $0xc,%esp
f01022cf:	68 6c 4b 13 f0       	push   $0xf0134b6c
f01022d4:	e8 a9 e9 ff ff       	call   f0100c82 <cprintf>
f01022d9:	83 c4 10             	add    $0x10,%esp
f01022dc:	eb 10                	jmp    f01022ee <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f01022de:	83 ec 0c             	sub    $0xc,%esp
f01022e1:	68 98 4b 13 f0       	push   $0xf0134b98
f01022e6:	e8 97 e9 ff ff       	call   f0100c82 <cprintf>
f01022eb:	83 c4 10             	add    $0x10,%esp

	return 0;
f01022ee:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022f3:	c9                   	leave  
f01022f4:	c3                   	ret    

f01022f5 <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f01022f5:	55                   	push   %ebp
f01022f6:	89 e5                	mov    %esp,%ebp
f01022f8:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f01022fb:	e8 4f eb ff ff       	call   f0100e4f <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f0102300:	83 ec 0c             	sub    $0xc,%esp
f0102303:	68 c4 4b 13 f0       	push   $0xf0134bc4
f0102308:	e8 75 e9 ff ff       	call   f0100c82 <cprintf>
f010230d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102310:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102315:	c9                   	leave  
f0102316:	c3                   	ret    

f0102317 <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f0102317:	55                   	push   %ebp
f0102318:	89 e5                	mov    %esp,%ebp
f010231a:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f010231d:	e8 3d eb ff ff       	call   f0100e5f <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f0102322:	83 ec 0c             	sub    $0xc,%esp
f0102325:	68 c4 4b 13 f0       	push   $0xf0134bc4
f010232a:	e8 53 e9 ff ff       	call   f0100c82 <cprintf>
f010232f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102332:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102337:	c9                   	leave  
f0102338:	c3                   	ret    

f0102339 <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0102339:	55                   	push   %ebp
f010233a:	89 e5                	mov    %esp,%ebp
f010233c:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f010233f:	e8 2b eb ff ff       	call   f0100e6f <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f0102344:	83 ec 0c             	sub    $0xc,%esp
f0102347:	68 f8 4b 13 f0       	push   $0xf0134bf8
f010234c:	e8 31 e9 ff ff       	call   f0100c82 <cprintf>
f0102351:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102354:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102359:	c9                   	leave  
f010235a:	c3                   	ret    

f010235b <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f010235b:	55                   	push   %ebp
f010235c:	89 e5                	mov    %esp,%ebp
f010235e:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f0102361:	e8 19 eb ff ff       	call   f0100e7f <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f0102366:	83 ec 0c             	sub    $0xc,%esp
f0102369:	68 28 4c 13 f0       	push   $0xf0134c28
f010236e:	e8 0f e9 ff ff       	call   f0100c82 <cprintf>
f0102373:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102376:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010237b:	c9                   	leave  
f010237c:	c3                   	ret    

f010237d <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f010237d:	55                   	push   %ebp
f010237e:	89 e5                	mov    %esp,%ebp
f0102380:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f0102383:	e8 07 eb ff ff       	call   f0100e8f <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f0102388:	83 ec 0c             	sub    $0xc,%esp
f010238b:	68 58 4c 13 f0       	push   $0xf0134c58
f0102390:	e8 ed e8 ff ff       	call   f0100c82 <cprintf>
f0102395:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102398:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010239d:	c9                   	leave  
f010239e:	c3                   	ret    

f010239f <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f010239f:	55                   	push   %ebp
f01023a0:	89 e5                	mov    %esp,%ebp
f01023a2:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f01023a5:	e8 f5 ea ff ff       	call   f0100e9f <isKHeapPlacementStrategyCONTALLOC>
f01023aa:	84 c0                	test   %al,%al
f01023ac:	74 12                	je     f01023c0 <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f01023ae:	83 ec 0c             	sub    $0xc,%esp
f01023b1:	68 8c 4c 13 f0       	push   $0xf0134c8c
f01023b6:	e8 c7 e8 ff ff       	call   f0100c82 <cprintf>
f01023bb:	83 c4 10             	add    $0x10,%esp
f01023be:	eb 7c                	jmp    f010243c <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f01023c0:	e8 ee ea ff ff       	call   f0100eb3 <isKHeapPlacementStrategyFIRSTFIT>
f01023c5:	84 c0                	test   %al,%al
f01023c7:	74 12                	je     f01023db <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f01023c9:	83 ec 0c             	sub    $0xc,%esp
f01023cc:	68 c8 4c 13 f0       	push   $0xf0134cc8
f01023d1:	e8 ac e8 ff ff       	call   f0100c82 <cprintf>
f01023d6:	83 c4 10             	add    $0x10,%esp
f01023d9:	eb 61                	jmp    f010243c <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f01023db:	e8 e8 ea ff ff       	call   f0100ec8 <isKHeapPlacementStrategyBESTFIT>
f01023e0:	84 c0                	test   %al,%al
f01023e2:	74 12                	je     f01023f6 <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f01023e4:	83 ec 0c             	sub    $0xc,%esp
f01023e7:	68 f8 4c 13 f0       	push   $0xf0134cf8
f01023ec:	e8 91 e8 ff ff       	call   f0100c82 <cprintf>
f01023f1:	83 c4 10             	add    $0x10,%esp
f01023f4:	eb 46                	jmp    f010243c <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f01023f6:	e8 e2 ea ff ff       	call   f0100edd <isKHeapPlacementStrategyNEXTFIT>
f01023fb:	84 c0                	test   %al,%al
f01023fd:	74 12                	je     f0102411 <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f01023ff:	83 ec 0c             	sub    $0xc,%esp
f0102402:	68 24 4d 13 f0       	push   $0xf0134d24
f0102407:	e8 76 e8 ff ff       	call   f0100c82 <cprintf>
f010240c:	83 c4 10             	add    $0x10,%esp
f010240f:	eb 2b                	jmp    f010243c <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f0102411:	e8 dc ea ff ff       	call   f0100ef2 <isKHeapPlacementStrategyWORSTFIT>
f0102416:	84 c0                	test   %al,%al
f0102418:	74 12                	je     f010242c <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f010241a:	83 ec 0c             	sub    $0xc,%esp
f010241d:	68 50 4d 13 f0       	push   $0xf0134d50
f0102422:	e8 5b e8 ff ff       	call   f0100c82 <cprintf>
f0102427:	83 c4 10             	add    $0x10,%esp
f010242a:	eb 10                	jmp    f010243c <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f010242c:	83 ec 0c             	sub    $0xc,%esp
f010242f:	68 80 4d 13 f0       	push   $0xf0134d80
f0102434:	e8 49 e8 ff ff       	call   f0100c82 <cprintf>
f0102439:	83 c4 10             	add    $0x10,%esp

	return 0;
f010243c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102441:	c9                   	leave  
f0102442:	c3                   	ret    

f0102443 <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f0102443:	55                   	push   %ebp
f0102444:	89 e5                	mov    %esp,%ebp
f0102446:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102449:	e8 76 b7 00 00       	call   f010dbc4 <isBufferingEnabled>
f010244e:	84 c0                	test   %al,%al
f0102450:	75 12                	jne    f0102464 <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f0102452:	83 ec 0c             	sub    $0xc,%esp
f0102455:	68 b0 4d 13 f0       	push   $0xf0134db0
f010245a:	e8 23 e8 ff ff       	call   f0100c82 <cprintf>
f010245f:	83 c4 10             	add    $0x10,%esp
f0102462:	eb 1d                	jmp    f0102481 <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f0102464:	83 ec 0c             	sub    $0xc,%esp
f0102467:	6a 00                	push   $0x0
f0102469:	e8 30 b7 00 00       	call   f010db9e <enableModifiedBuffer>
f010246e:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f0102471:	83 ec 0c             	sub    $0xc,%esp
f0102474:	68 ec 4d 13 f0       	push   $0xf0134dec
f0102479:	e8 04 e8 ff ff       	call   f0100c82 <cprintf>
f010247e:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102481:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102486:	c9                   	leave  
f0102487:	c3                   	ret    

f0102488 <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f0102488:	55                   	push   %ebp
f0102489:	89 e5                	mov    %esp,%ebp
f010248b:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010248e:	e8 31 b7 00 00       	call   f010dbc4 <isBufferingEnabled>
f0102493:	84 c0                	test   %al,%al
f0102495:	75 12                	jne    f01024a9 <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f0102497:	83 ec 0c             	sub    $0xc,%esp
f010249a:	68 b0 4d 13 f0       	push   $0xf0134db0
f010249f:	e8 de e7 ff ff       	call   f0100c82 <cprintf>
f01024a4:	83 c4 10             	add    $0x10,%esp
f01024a7:	eb 1d                	jmp    f01024c6 <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f01024a9:	83 ec 0c             	sub    $0xc,%esp
f01024ac:	6a 01                	push   $0x1
f01024ae:	e8 eb b6 00 00       	call   f010db9e <enableModifiedBuffer>
f01024b3:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f01024b6:	83 ec 0c             	sub    $0xc,%esp
f01024b9:	68 10 4e 13 f0       	push   $0xf0134e10
f01024be:	e8 bf e7 ff ff       	call   f0100c82 <cprintf>
f01024c3:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01024c6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024cb:	c9                   	leave  
f01024cc:	c3                   	ret    

f01024cd <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f01024cd:	55                   	push   %ebp
f01024ce:	89 e5                	mov    %esp,%ebp
f01024d0:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f01024d3:	83 ec 0c             	sub    $0xc,%esp
f01024d6:	6a 00                	push   $0x0
f01024d8:	e8 d9 b6 00 00       	call   f010dbb6 <enableBuffering>
f01024dd:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f01024e0:	83 ec 0c             	sub    $0xc,%esp
f01024e3:	6a 00                	push   $0x0
f01024e5:	e8 b4 b6 00 00       	call   f010db9e <enableModifiedBuffer>
f01024ea:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f01024ed:	83 ec 0c             	sub    $0xc,%esp
f01024f0:	68 30 4e 13 f0       	push   $0xf0134e30
f01024f5:	e8 88 e7 ff ff       	call   f0100c82 <cprintf>
f01024fa:	83 c4 10             	add    $0x10,%esp
	return 0;
f01024fd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102502:	c9                   	leave  
f0102503:	c3                   	ret    

f0102504 <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f0102504:	55                   	push   %ebp
f0102505:	89 e5                	mov    %esp,%ebp
f0102507:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f010250a:	83 ec 0c             	sub    $0xc,%esp
f010250d:	6a 01                	push   $0x1
f010250f:	e8 a2 b6 00 00       	call   f010dbb6 <enableBuffering>
f0102514:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f0102517:	83 ec 0c             	sub    $0xc,%esp
f010251a:	6a 01                	push   $0x1
f010251c:	e8 7d b6 00 00       	call   f010db9e <enableModifiedBuffer>
f0102521:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f0102524:	e8 b3 b6 00 00       	call   f010dbdc <getModifiedBufferLength>
f0102529:	85 c0                	test   %eax,%eax
f010252b:	75 59                	jne    f0102586 <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f010252d:	83 ec 0c             	sub    $0xc,%esp
f0102530:	68 4c 4e 13 f0       	push   $0xf0134e4c
f0102535:	e8 48 e7 ff ff       	call   f0100c82 <cprintf>
f010253a:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f010253d:	83 ec 08             	sub    $0x8,%esp
f0102540:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0102543:	50                   	push   %eax
f0102544:	68 7c 4e 13 f0       	push   $0xf0134e7c
f0102549:	e8 36 e5 02 00       	call   f0130a84 <readline>
f010254e:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f0102551:	83 ec 04             	sub    $0x4,%esp
f0102554:	6a 0a                	push   $0xa
f0102556:	6a 00                	push   $0x0
f0102558:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010255b:	50                   	push   %eax
f010255c:	e8 89 ea 02 00       	call   f0130fea <strtol>
f0102561:	83 c4 10             	add    $0x10,%esp
f0102564:	83 ec 0c             	sub    $0xc,%esp
f0102567:	50                   	push   %eax
f0102568:	e8 61 b6 00 00       	call   f010dbce <setModifiedBufferLength>
f010256d:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0102570:	e8 67 b6 00 00       	call   f010dbdc <getModifiedBufferLength>
f0102575:	83 ec 08             	sub    $0x8,%esp
f0102578:	50                   	push   %eax
f0102579:	68 a8 4e 13 f0       	push   $0xf0134ea8
f010257e:	e8 ff e6 ff ff       	call   f0100c82 <cprintf>
f0102583:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f0102586:	83 ec 0c             	sub    $0xc,%esp
f0102589:	68 cd 4e 13 f0       	push   $0xf0134ecd
f010258e:	e8 ef e6 ff ff       	call   f0100c82 <cprintf>
f0102593:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102596:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010259b:	c9                   	leave  
f010259c:	c3                   	ret    

f010259d <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f010259d:	55                   	push   %ebp
f010259e:	89 e5                	mov    %esp,%ebp
f01025a0:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01025a3:	e8 1c b6 00 00       	call   f010dbc4 <isBufferingEnabled>
f01025a8:	84 c0                	test   %al,%al
f01025aa:	75 12                	jne    f01025be <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f01025ac:	83 ec 0c             	sub    $0xc,%esp
f01025af:	68 e8 4e 13 f0       	push   $0xf0134ee8
f01025b4:	e8 c9 e6 ff ff       	call   f0100c82 <cprintf>
f01025b9:	83 c4 10             	add    $0x10,%esp
f01025bc:	eb 19                	jmp    f01025d7 <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f01025be:	e8 e9 b5 00 00       	call   f010dbac <isModifiedBufferEnabled>
f01025c3:	84 c0                	test   %al,%al
f01025c5:	75 10                	jne    f01025d7 <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f01025c7:	83 ec 0c             	sub    $0xc,%esp
f01025ca:	68 38 4f 13 f0       	push   $0xf0134f38
f01025cf:	e8 ae e6 ff ff       	call   f0100c82 <cprintf>
f01025d4:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f01025d7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01025da:	83 c0 04             	add    $0x4,%eax
f01025dd:	8b 00                	mov    (%eax),%eax
f01025df:	83 ec 04             	sub    $0x4,%esp
f01025e2:	6a 0a                	push   $0xa
f01025e4:	6a 00                	push   $0x0
f01025e6:	50                   	push   %eax
f01025e7:	e8 fe e9 02 00       	call   f0130fea <strtol>
f01025ec:	83 c4 10             	add    $0x10,%esp
f01025ef:	83 ec 0c             	sub    $0xc,%esp
f01025f2:	50                   	push   %eax
f01025f3:	e8 d6 b5 00 00       	call   f010dbce <setModifiedBufferLength>
f01025f8:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01025fb:	e8 dc b5 00 00       	call   f010dbdc <getModifiedBufferLength>
f0102600:	83 ec 08             	sub    $0x8,%esp
f0102603:	50                   	push   %eax
f0102604:	68 a8 4e 13 f0       	push   $0xf0134ea8
f0102609:	e8 74 e6 ff ff       	call   f0100c82 <cprintf>
f010260e:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102611:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102616:	c9                   	leave  
f0102617:	c3                   	ret    

f0102618 <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0102618:	55                   	push   %ebp
f0102619:	89 e5                	mov    %esp,%ebp
f010261b:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010261e:	e8 a1 b5 00 00       	call   f010dbc4 <isBufferingEnabled>
f0102623:	84 c0                	test   %al,%al
f0102625:	75 12                	jne    f0102639 <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f0102627:	83 ec 0c             	sub    $0xc,%esp
f010262a:	68 e8 4e 13 f0       	push   $0xf0134ee8
f010262f:	e8 4e e6 ff ff       	call   f0100c82 <cprintf>
f0102634:	83 c4 10             	add    $0x10,%esp
f0102637:	eb 19                	jmp    f0102652 <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f0102639:	e8 6e b5 00 00       	call   f010dbac <isModifiedBufferEnabled>
f010263e:	84 c0                	test   %al,%al
f0102640:	75 10                	jne    f0102652 <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f0102642:	83 ec 0c             	sub    $0xc,%esp
f0102645:	68 38 4f 13 f0       	push   $0xf0134f38
f010264a:	e8 33 e6 ff ff       	call   f0100c82 <cprintf>
f010264f:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f0102652:	e8 85 b5 00 00       	call   f010dbdc <getModifiedBufferLength>
f0102657:	83 ec 08             	sub    $0x8,%esp
f010265a:	50                   	push   %eax
f010265b:	68 7e 4f 13 f0       	push   $0xf0134f7e
f0102660:	e8 1d e6 ff ff       	call   f0100c82 <cprintf>
f0102665:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102668:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010266d:	c9                   	leave  
f010266e:	c3                   	ret    

f010266f <command_test_kmalloc>:

/*TESTING Commands*/
int command_test_kmalloc(int number_of_arguments, char **arguments)
{
f010266f:	55                   	push   %ebp
f0102670:	89 e5                	mov    %esp,%ebp
f0102672:	83 ec 18             	sub    $0x18,%esp
	int testNum = 0 ;
f0102675:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (number_of_arguments==2)
f010267c:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102680:	75 1b                	jne    f010269d <command_test_kmalloc+0x2e>
		testNum = strtol(arguments[1], NULL, 10);
f0102682:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102685:	83 c0 04             	add    $0x4,%eax
f0102688:	8b 00                	mov    (%eax),%eax
f010268a:	83 ec 04             	sub    $0x4,%esp
f010268d:	6a 0a                	push   $0xa
f010268f:	6a 00                	push   $0x0
f0102691:	50                   	push   %eax
f0102692:	e8 53 e9 02 00       	call   f0130fea <strtol>
f0102697:	83 c4 10             	add    $0x10,%esp
f010269a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (isKHeapPlacementStrategyCONTALLOC())
f010269d:	e8 fd e7 ff ff       	call   f0100e9f <isKHeapPlacementStrategyCONTALLOC>
f01026a2:	84 c0                	test   %al,%al
f01026a4:	74 0a                	je     f01026b0 <command_test_kmalloc+0x41>
		test_kmalloc();
f01026a6:	e8 ce 4a 01 00       	call   f0117179 <test_kmalloc>
f01026ab:	e9 e8 00 00 00       	jmp    f0102798 <command_test_kmalloc+0x129>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f01026b0:	e8 fe e7 ff ff       	call   f0100eb3 <isKHeapPlacementStrategyFIRSTFIT>
f01026b5:	84 c0                	test   %al,%al
f01026b7:	74 44                	je     f01026fd <command_test_kmalloc+0x8e>
	{
		if (testNum == 0)
f01026b9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01026bd:	75 1a                	jne    f01026d9 <command_test_kmalloc+0x6a>
		{
			cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f01026bf:	83 ec 0c             	sub    $0xc,%esp
f01026c2:	68 9c 4f 13 f0       	push   $0xf0134f9c
f01026c7:	e8 b6 e5 ff ff       	call   f0100c82 <cprintf>
f01026cc:	83 c4 10             	add    $0x10,%esp
			return 0;
f01026cf:	b8 00 00 00 00       	mov    $0x0,%eax
f01026d4:	e9 c4 00 00 00       	jmp    f010279d <command_test_kmalloc+0x12e>
		}
		//Test FIRST FIT allocation
		if (testNum == 1)
f01026d9:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01026dd:	75 0a                	jne    f01026e9 <command_test_kmalloc+0x7a>
			test_kmalloc_firstfit1();
f01026df:	e8 1e 99 01 00       	call   f011c002 <test_kmalloc_firstfit1>
f01026e4:	e9 af 00 00 00       	jmp    f0102798 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f01026e9:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f01026ed:	0f 85 a5 00 00 00    	jne    f0102798 <command_test_kmalloc+0x129>
			test_kmalloc_firstfit2();
f01026f3:	e8 ac ac 01 00       	call   f011d3a4 <test_kmalloc_firstfit2>
f01026f8:	e9 9b 00 00 00       	jmp    f0102798 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyBESTFIT())
f01026fd:	e8 c6 e7 ff ff       	call   f0100ec8 <isKHeapPlacementStrategyBESTFIT>
f0102702:	84 c0                	test   %al,%al
f0102704:	74 44                	je     f010274a <command_test_kmalloc+0xdb>
	{
		if (testNum == 0)
f0102706:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010270a:	75 17                	jne    f0102723 <command_test_kmalloc+0xb4>
		{
			cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f010270c:	83 ec 0c             	sub    $0xc,%esp
f010270f:	68 ec 4f 13 f0       	push   $0xf0134fec
f0102714:	e8 69 e5 ff ff       	call   f0100c82 <cprintf>
f0102719:	83 c4 10             	add    $0x10,%esp
			return 0;
f010271c:	b8 00 00 00 00       	mov    $0x0,%eax
f0102721:	eb 7a                	jmp    f010279d <command_test_kmalloc+0x12e>
		}
		if (testNum == 1)
f0102723:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102727:	75 07                	jne    f0102730 <command_test_kmalloc+0xc1>
			test_kmalloc();
f0102729:	e8 4b 4a 01 00       	call   f0117179 <test_kmalloc>
f010272e:	eb 68                	jmp    f0102798 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f0102730:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102734:	75 07                	jne    f010273d <command_test_kmalloc+0xce>
			test_kmalloc_bestfit1();
f0102736:	e8 91 73 01 00       	call   f0119acc <test_kmalloc_bestfit1>
f010273b:	eb 5b                	jmp    f0102798 <command_test_kmalloc+0x129>
		else if (testNum == 3)
f010273d:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102741:	75 55                	jne    f0102798 <command_test_kmalloc+0x129>
			test_kmalloc_bestfit2();
f0102743:	e8 da 85 01 00       	call   f011ad22 <test_kmalloc_bestfit2>
f0102748:	eb 4e                	jmp    f0102798 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyNEXTFIT())
f010274a:	e8 8e e7 ff ff       	call   f0100edd <isKHeapPlacementStrategyNEXTFIT>
f010274f:	84 c0                	test   %al,%al
f0102751:	74 37                	je     f010278a <command_test_kmalloc+0x11b>
	{
		if (testNum == 0)
f0102753:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102757:	75 17                	jne    f0102770 <command_test_kmalloc+0x101>
		{
			cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0102759:	83 ec 0c             	sub    $0xc,%esp
f010275c:	68 3c 50 13 f0       	push   $0xf013503c
f0102761:	e8 1c e5 ff ff       	call   f0100c82 <cprintf>
f0102766:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102769:	b8 00 00 00 00       	mov    $0x0,%eax
f010276e:	eb 2d                	jmp    f010279d <command_test_kmalloc+0x12e>
		}
		//Test cont. allocation
		if (testNum == 1)
f0102770:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102774:	75 07                	jne    f010277d <command_test_kmalloc+0x10e>
			test_kmalloc();
f0102776:	e8 fe 49 01 00       	call   f0117179 <test_kmalloc>
f010277b:	eb 1b                	jmp    f0102798 <command_test_kmalloc+0x129>
		//Test nextfit strategy
		else if (testNum == 2)
f010277d:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102781:	75 15                	jne    f0102798 <command_test_kmalloc+0x129>
			test_kmalloc_nextfit();
f0102783:	e8 4f 5c 01 00       	call   f01183d7 <test_kmalloc_nextfit>
f0102788:	eb 0e                	jmp    f0102798 <command_test_kmalloc+0x129>

	}
	else if (isKHeapPlacementStrategyWORSTFIT())
f010278a:	e8 63 e7 ff ff       	call   f0100ef2 <isKHeapPlacementStrategyWORSTFIT>
f010278f:	84 c0                	test   %al,%al
f0102791:	74 05                	je     f0102798 <command_test_kmalloc+0x129>
		test_kmalloc_worstfit();
f0102793:	e8 a1 ba 01 00       	call   f011e239 <test_kmalloc_worstfit>
	return 0;
f0102798:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010279d:	c9                   	leave  
f010279e:	c3                   	ret    

f010279f <command_test_kfree>:
int command_test_kfree(int number_of_arguments, char **arguments)
{
f010279f:	55                   	push   %ebp
f01027a0:	89 e5                	mov    %esp,%ebp
f01027a2:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f01027a5:	e8 1e e7 ff ff       	call   f0100ec8 <isKHeapPlacementStrategyBESTFIT>
f01027aa:	84 c0                	test   %al,%al
f01027ac:	75 09                	jne    f01027b7 <command_test_kfree+0x18>
f01027ae:	e8 00 e7 ff ff       	call   f0100eb3 <isKHeapPlacementStrategyFIRSTFIT>
f01027b3:	84 c0                	test   %al,%al
f01027b5:	74 07                	je     f01027be <command_test_kfree+0x1f>
	{
		test_kfree_bestfirstfit();
f01027b7:	e8 1f f2 01 00       	call   f01219db <test_kfree_bestfirstfit>
f01027bc:	eb 05                	jmp    f01027c3 <command_test_kfree+0x24>
	}
	else //NEXT & CONT
	{
		test_kfree();
f01027be:	e8 c6 d0 01 00       	call   f011f889 <test_kfree>
	}
	return 0;
f01027c3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01027c8:	c9                   	leave  
f01027c9:	c3                   	ret    

f01027ca <command_test_kheap_phys_addr>:
int command_test_kheap_phys_addr(int number_of_arguments, char **arguments)
{
f01027ca:	55                   	push   %ebp
f01027cb:	89 e5                	mov    %esp,%ebp
f01027cd:	83 ec 08             	sub    $0x8,%esp
	test_kheap_phys_addr();
f01027d0:	e8 02 0c 02 00       	call   f01233d7 <test_kheap_phys_addr>
	return 0;
f01027d5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01027da:	c9                   	leave  
f01027db:	c3                   	ret    

f01027dc <command_test_kheap_virt_addr>:
int command_test_kheap_virt_addr(int number_of_arguments, char **arguments)
{
f01027dc:	55                   	push   %ebp
f01027dd:	89 e5                	mov    %esp,%ebp
f01027df:	83 ec 08             	sub    $0x8,%esp
	test_kheap_virt_addr();
f01027e2:	e8 c0 20 02 00       	call   f01248a7 <test_kheap_virt_addr>
	return 0;
f01027e7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01027ec:	c9                   	leave  
f01027ed:	c3                   	ret    

f01027ee <command_test_three_creation_functions>:
int command_test_three_creation_functions(int number_of_arguments, char **arguments)
{
f01027ee:	55                   	push   %ebp
f01027ef:	89 e5                	mov    %esp,%ebp
f01027f1:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f01027f4:	e8 8b 35 02 00       	call   f0125d84 <test_three_creation_functions>
	return 0;
f01027f9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01027fe:	c9                   	leave  
f01027ff:	c3                   	ret    

f0102800 <command_test_krealloc>:

int command_test_krealloc(int number_of_arguments, char **arguments) {
f0102800:	55                   	push   %ebp
f0102801:	89 e5                	mov    %esp,%ebp
f0102803:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyNEXTFIT())
f0102806:	e8 d2 e6 ff ff       	call   f0100edd <isKHeapPlacementStrategyNEXTFIT>
f010280b:	84 c0                	test   %al,%al
f010280d:	74 07                	je     f0102816 <command_test_krealloc+0x16>
		test_krealloc();
f010280f:	e8 87 8f 02 00       	call   f012b79b <test_krealloc>
f0102814:	eb 0e                	jmp    f0102824 <command_test_krealloc+0x24>
	else if (isKHeapPlacementStrategyBESTFIT())
f0102816:	e8 ad e6 ff ff       	call   f0100ec8 <isKHeapPlacementStrategyBESTFIT>
f010281b:	84 c0                	test   %al,%al
f010281d:	74 05                	je     f0102824 <command_test_krealloc+0x24>
		test_krealloc_BF();
f010281f:	e8 27 af 02 00       	call   f012d74b <test_krealloc_BF>
	return 0;
f0102824:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102829:	c9                   	leave  
f010282a:	c3                   	ret    

f010282b <command_test_priority1>:

int command_test_priority1(int number_of_arguments, char **arguments)
{
f010282b:	55                   	push   %ebp
f010282c:	89 e5                	mov    %esp,%ebp
f010282e:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f0102831:	e8 58 35 01 00       	call   f0115d8e <test_priority_normal_and_higher>
	return 0;
f0102836:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010283b:	c9                   	leave  
f010283c:	c3                   	ret    

f010283d <command_test_priority2>:

int command_test_priority2(int number_of_arguments, char **arguments)
{
f010283d:	55                   	push   %ebp
f010283e:	89 e5                	mov    %esp,%ebp
f0102840:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f0102843:	e8 2c 3f 01 00       	call   f0116774 <test_priority_normal_and_lower>
	return 0;
f0102848:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010284d:	c9                   	leave  
f010284e:	c3                   	ret    

f010284f <command_test_kfreeall>:

int command_test_kfreeall(int number_of_arguments, char **arguments)
{
f010284f:	55                   	push   %ebp
f0102850:	89 e5                	mov    %esp,%ebp
f0102852:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f0102855:	e8 64 37 02 00       	call   f0125fbe <test_kfreeall>
	return 0;
f010285a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010285f:	c9                   	leave  
f0102860:	c3                   	ret    

f0102861 <command_test_kexpand>:

int command_test_kexpand(int number_of_arguments, char **arguments)
{
f0102861:	55                   	push   %ebp
f0102862:	89 e5                	mov    %esp,%ebp
f0102864:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f0102867:	e8 3e 4e 02 00       	call   f01276aa <test_kexpand>
	return 0;
f010286c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102871:	c9                   	leave  
f0102872:	c3                   	ret    

f0102873 <command_test_kshrink>:

int command_test_kshrink(int number_of_arguments, char **arguments)
{
f0102873:	55                   	push   %ebp
f0102874:	89 e5                	mov    %esp,%ebp
f0102876:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f0102879:	e8 ad 5b 02 00       	call   f012842b <test_kshrink>
	return 0;
f010287e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102883:	c9                   	leave  
f0102884:	c3                   	ret    

f0102885 <command_test_kfreelast>:

int command_test_kfreelast(int number_of_arguments, char **arguments)
{
f0102885:	55                   	push   %ebp
f0102886:	89 e5                	mov    %esp,%ebp
f0102888:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f010288b:	e8 88 6a 02 00       	call   f0129318 <test_kfreelast>
	return 0;
f0102890:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102895:	c9                   	leave  
f0102896:	c3                   	ret    

f0102897 <command_test_sc_MLFQ>:

int command_test_sc_MLFQ(int number_of_arguments, char **arguments)
{
f0102897:	55                   	push   %ebp
f0102898:	89 e5                	mov    %esp,%ebp
f010289a:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f010289d:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028a0:	83 c0 04             	add    $0x4,%eax
f01028a3:	8b 00                	mov    (%eax),%eax
f01028a5:	83 ec 04             	sub    $0x4,%esp
f01028a8:	6a 0a                	push   $0xa
f01028aa:	6a 00                	push   $0x0
f01028ac:	50                   	push   %eax
f01028ad:	e8 38 e7 02 00       	call   f0130fea <strtol>
f01028b2:	83 c4 10             	add    $0x10,%esp
f01028b5:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f01028b8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f01028bf:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f01028c6:	a1 f4 7a 65 f0       	mov    0xf0657af4,%eax
f01028cb:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01028ce:	eb 3d                	jmp    f010290d <command_test_sc_MLFQ+0x76>
	{
		if (strcmp(e->prog_name, "tmlfq_2") == 0)
f01028d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01028d3:	05 5c 05 00 00       	add    $0x55c,%eax
f01028d8:	83 ec 08             	sub    $0x8,%esp
f01028db:	68 8a 50 13 f0       	push   $0xf013508a
f01028e0:	50                   	push   %eax
f01028e1:	e8 b0 e4 02 00       	call   f0130d96 <strcmp>
f01028e6:	83 c4 10             	add    $0x10,%esp
f01028e9:	85 c0                	test   %eax,%eax
f01028eb:	75 12                	jne    f01028ff <command_test_sc_MLFQ+0x68>
		{
			if (firstTime)
f01028ed:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01028f1:	74 07                	je     f01028fa <command_test_sc_MLFQ+0x63>
				firstTime = 0;
f01028f3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cnt++ ;
f01028fa:	ff 45 f4             	incl   -0xc(%ebp)
f01028fd:	eb 06                	jmp    f0102905 <command_test_sc_MLFQ+0x6e>
		}
		else if (!firstTime)
f01028ff:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0102903:	74 31                	je     f0102936 <command_test_sc_MLFQ+0x9f>
{
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f0102905:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f010290a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010290d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0102911:	74 08                	je     f010291b <command_test_sc_MLFQ+0x84>
f0102913:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102916:	8b 40 44             	mov    0x44(%eax),%eax
f0102919:	eb 05                	jmp    f0102920 <command_test_sc_MLFQ+0x89>
f010291b:	b8 00 00 00 00       	mov    $0x0,%eax
f0102920:	a3 fc 7a 65 f0       	mov    %eax,0xf0657afc
f0102925:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f010292a:	85 c0                	test   %eax,%eax
f010292c:	75 a2                	jne    f01028d0 <command_test_sc_MLFQ+0x39>
f010292e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0102932:	75 9c                	jne    f01028d0 <command_test_sc_MLFQ+0x39>
f0102934:	eb 01                	jmp    f0102937 <command_test_sc_MLFQ+0xa0>
			if (firstTime)
				firstTime = 0;
			cnt++ ;
		}
		else if (!firstTime)
			break;
f0102936:	90                   	nop
	}
	if(cnt == numOfSlave2)
f0102937:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010293a:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010293d:	75 12                	jne    f0102951 <command_test_sc_MLFQ+0xba>
	{
		cprintf("Congratulations... MLFQScenario# completed successfully\n");
f010293f:	83 ec 0c             	sub    $0xc,%esp
f0102942:	68 94 50 13 f0       	push   $0xf0135094
f0102947:	e8 36 e3 ff ff       	call   f0100c82 <cprintf>
f010294c:	83 c4 10             	add    $0x10,%esp
f010294f:	eb 17                	jmp    f0102968 <command_test_sc_MLFQ+0xd1>
	}
	else
	{
		panic("MLFQScenario# failed\n");
f0102951:	83 ec 04             	sub    $0x4,%esp
f0102954:	68 cd 50 13 f0       	push   $0xf01350cd
f0102959:	68 8b 04 00 00       	push   $0x48b
f010295e:	68 19 41 13 f0       	push   $0xf0134119
f0102963:	e8 93 d8 ff ff       	call   f01001fb <_panic>
	}
	return 0;
f0102968:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010296d:	c9                   	leave  
f010296e:	c3                   	ret    

f010296f <command_test_autocomplete>:


/*2022*/
int command_test_autocomplete(int number_of_arguments, char **arguments)
{
f010296f:	55                   	push   %ebp
f0102970:	89 e5                	mov    %esp,%ebp
f0102972:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f0102975:	e8 10 e1 00 00       	call   f0110a8a <TestAutoCompleteCommand>
f010297a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f010297d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102982:	c9                   	leave  
f0102983:	c3                   	ret    

f0102984 <command_test_lists>:
int command_test_lists(int number_of_arguments, char **arguments)
{
f0102984:	55                   	push   %ebp
f0102985:	89 e5                	mov    %esp,%ebp
f0102987:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010298a:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010298e:	74 1a                	je     f01029aa <command_test_lists+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstlsts <testname>\n") ;
f0102990:	83 ec 0c             	sub    $0xc,%esp
f0102993:	68 e4 50 13 f0       	push   $0xf01350e4
f0102998:	e8 e5 e2 ff ff       	call   f0100c82 <cprintf>
f010299d:	83 c4 10             	add    $0x10,%esp
		return 0;
f01029a0:	b8 00 00 00 00       	mov    $0x0,%eax
f01029a5:	e9 82 01 00 00       	jmp    f0102b2c <command_test_lists+0x1a8>
	}
	// Test 1 Example for initialize_MemBlocksList: tstlsts init 5
	if(strcmp(arguments[1], "init") == 0)
f01029aa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029ad:	83 c0 04             	add    $0x4,%eax
f01029b0:	8b 00                	mov    (%eax),%eax
f01029b2:	83 ec 08             	sub    $0x8,%esp
f01029b5:	68 1c 51 13 f0       	push   $0xf013511c
f01029ba:	50                   	push   %eax
f01029bb:	e8 d6 e3 02 00       	call   f0130d96 <strcmp>
f01029c0:	83 c4 10             	add    $0x10,%esp
f01029c3:	85 c0                	test   %eax,%eax
f01029c5:	75 0a                	jne    f01029d1 <command_test_lists+0x4d>
	{
		test_initialize_MemBlocksList();
f01029c7:	e8 68 b6 00 00       	call   f010e034 <test_initialize_MemBlocksList>
f01029cc:	e9 56 01 00 00       	jmp    f0102b27 <command_test_lists+0x1a3>
	}
	// Test 2 Example for insert_sorted: tstlsts insrt
	else if(strcmp(arguments[1], "insrt") == 0)
f01029d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029d4:	83 c0 04             	add    $0x4,%eax
f01029d7:	8b 00                	mov    (%eax),%eax
f01029d9:	83 ec 08             	sub    $0x8,%esp
f01029dc:	68 21 51 13 f0       	push   $0xf0135121
f01029e1:	50                   	push   %eax
f01029e2:	e8 af e3 02 00       	call   f0130d96 <strcmp>
f01029e7:	83 c4 10             	add    $0x10,%esp
f01029ea:	85 c0                	test   %eax,%eax
f01029ec:	75 0a                	jne    f01029f8 <command_test_lists+0x74>
	{
		test_insert_sorted_allocList();
f01029ee:	e8 55 b7 00 00       	call   f010e148 <test_insert_sorted_allocList>
f01029f3:	e9 2f 01 00 00       	jmp    f0102b27 <command_test_lists+0x1a3>
	}
	// Test 3 Example for find_block: tstlsts find
	else if(strcmp(arguments[1], "find") == 0)
f01029f8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029fb:	83 c0 04             	add    $0x4,%eax
f01029fe:	8b 00                	mov    (%eax),%eax
f0102a00:	83 ec 08             	sub    $0x8,%esp
f0102a03:	68 27 51 13 f0       	push   $0xf0135127
f0102a08:	50                   	push   %eax
f0102a09:	e8 88 e3 02 00       	call   f0130d96 <strcmp>
f0102a0e:	83 c4 10             	add    $0x10,%esp
f0102a11:	85 c0                	test   %eax,%eax
f0102a13:	75 0a                	jne    f0102a1f <command_test_lists+0x9b>
	{
		test_find_block();
f0102a15:	e8 ec bb 00 00       	call   f010e606 <test_find_block>
f0102a1a:	e9 08 01 00 00       	jmp    f0102b27 <command_test_lists+0x1a3>
	}
	// Test 4 Example for alloc_block_FF: tstlsts FF
	else if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102a1f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a22:	83 c0 04             	add    $0x4,%eax
f0102a25:	8b 00                	mov    (%eax),%eax
f0102a27:	83 ec 08             	sub    $0x8,%esp
f0102a2a:	68 2c 51 13 f0       	push   $0xf013512c
f0102a2f:	50                   	push   %eax
f0102a30:	e8 61 e3 02 00       	call   f0130d96 <strcmp>
f0102a35:	83 c4 10             	add    $0x10,%esp
f0102a38:	85 c0                	test   %eax,%eax
f0102a3a:	74 1d                	je     f0102a59 <command_test_lists+0xd5>
f0102a3c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a3f:	83 c0 04             	add    $0x4,%eax
f0102a42:	8b 00                	mov    (%eax),%eax
f0102a44:	83 ec 08             	sub    $0x8,%esp
f0102a47:	68 2f 51 13 f0       	push   $0xf013512f
f0102a4c:	50                   	push   %eax
f0102a4d:	e8 44 e3 02 00       	call   f0130d96 <strcmp>
f0102a52:	83 c4 10             	add    $0x10,%esp
f0102a55:	85 c0                	test   %eax,%eax
f0102a57:	75 0a                	jne    f0102a63 <command_test_lists+0xdf>
	{
		test_alloc_block_FF();
f0102a59:	e8 03 bf 00 00       	call   f010e961 <test_alloc_block_FF>
f0102a5e:	e9 c4 00 00 00       	jmp    f0102b27 <command_test_lists+0x1a3>
	}
	// Test 5 Example for alloc_block_BF: tstlsts BF
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102a63:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a66:	83 c0 04             	add    $0x4,%eax
f0102a69:	8b 00                	mov    (%eax),%eax
f0102a6b:	83 ec 08             	sub    $0x8,%esp
f0102a6e:	68 32 51 13 f0       	push   $0xf0135132
f0102a73:	50                   	push   %eax
f0102a74:	e8 1d e3 02 00       	call   f0130d96 <strcmp>
f0102a79:	83 c4 10             	add    $0x10,%esp
f0102a7c:	85 c0                	test   %eax,%eax
f0102a7e:	74 1d                	je     f0102a9d <command_test_lists+0x119>
f0102a80:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a83:	83 c0 04             	add    $0x4,%eax
f0102a86:	8b 00                	mov    (%eax),%eax
f0102a88:	83 ec 08             	sub    $0x8,%esp
f0102a8b:	68 35 51 13 f0       	push   $0xf0135135
f0102a90:	50                   	push   %eax
f0102a91:	e8 00 e3 02 00       	call   f0130d96 <strcmp>
f0102a96:	83 c4 10             	add    $0x10,%esp
f0102a99:	85 c0                	test   %eax,%eax
f0102a9b:	75 0a                	jne    f0102aa7 <command_test_lists+0x123>
	{
		test_alloc_block_BF();
f0102a9d:	e8 3d c3 00 00       	call   f010eddf <test_alloc_block_BF>
f0102aa2:	e9 80 00 00 00       	jmp    f0102b27 <command_test_lists+0x1a3>
	}
	// Test 6 Example for alloc_block_NF: tstlsts NF
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102aa7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102aaa:	83 c0 04             	add    $0x4,%eax
f0102aad:	8b 00                	mov    (%eax),%eax
f0102aaf:	83 ec 08             	sub    $0x8,%esp
f0102ab2:	68 38 51 13 f0       	push   $0xf0135138
f0102ab7:	50                   	push   %eax
f0102ab8:	e8 d9 e2 02 00       	call   f0130d96 <strcmp>
f0102abd:	83 c4 10             	add    $0x10,%esp
f0102ac0:	85 c0                	test   %eax,%eax
f0102ac2:	74 1d                	je     f0102ae1 <command_test_lists+0x15d>
f0102ac4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ac7:	83 c0 04             	add    $0x4,%eax
f0102aca:	8b 00                	mov    (%eax),%eax
f0102acc:	83 ec 08             	sub    $0x8,%esp
f0102acf:	68 3b 51 13 f0       	push   $0xf013513b
f0102ad4:	50                   	push   %eax
f0102ad5:	e8 bc e2 02 00       	call   f0130d96 <strcmp>
f0102ada:	83 c4 10             	add    $0x10,%esp
f0102add:	85 c0                	test   %eax,%eax
f0102adf:	75 07                	jne    f0102ae8 <command_test_lists+0x164>
	{
		test_alloc_block_NF();
f0102ae1:	e8 80 c9 00 00       	call   f010f466 <test_alloc_block_NF>
f0102ae6:	eb 3f                	jmp    f0102b27 <command_test_lists+0x1a3>
	}
	// Test 7 Example for alloc_block_NF: tstlsts merge
	else if(strcmp(arguments[1], "MERGE") == 0 || strcmp(arguments[1], "merge") == 0)
f0102ae8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102aeb:	83 c0 04             	add    $0x4,%eax
f0102aee:	8b 00                	mov    (%eax),%eax
f0102af0:	83 ec 08             	sub    $0x8,%esp
f0102af3:	68 3e 51 13 f0       	push   $0xf013513e
f0102af8:	50                   	push   %eax
f0102af9:	e8 98 e2 02 00       	call   f0130d96 <strcmp>
f0102afe:	83 c4 10             	add    $0x10,%esp
f0102b01:	85 c0                	test   %eax,%eax
f0102b03:	74 1d                	je     f0102b22 <command_test_lists+0x19e>
f0102b05:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b08:	83 c0 04             	add    $0x4,%eax
f0102b0b:	8b 00                	mov    (%eax),%eax
f0102b0d:	83 ec 08             	sub    $0x8,%esp
f0102b10:	68 44 51 13 f0       	push   $0xf0135144
f0102b15:	50                   	push   %eax
f0102b16:	e8 7b e2 02 00       	call   f0130d96 <strcmp>
f0102b1b:	83 c4 10             	add    $0x10,%esp
f0102b1e:	85 c0                	test   %eax,%eax
f0102b20:	75 05                	jne    f0102b27 <command_test_lists+0x1a3>
	{
		test_insert_sorted_with_merge_freeList();
f0102b22:	e8 cd d1 00 00       	call   f010fcf4 <test_insert_sorted_with_merge_freeList>
	}
	return 0;
f0102b27:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b2c:	c9                   	leave  
f0102b2d:	c3                   	ret    

f0102b2e <command_test_chunks>:

int command_test_chunks(int number_of_arguments, char **arguments)
{
f0102b2e:	55                   	push   %ebp
f0102b2f:	89 e5                	mov    %esp,%ebp
f0102b31:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102b34:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102b38:	74 1a                	je     f0102b54 <command_test_chunks+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstchunk <testname>\n") ;
f0102b3a:	83 ec 0c             	sub    $0xc,%esp
f0102b3d:	68 4c 51 13 f0       	push   $0xf013514c
f0102b42:	e8 3b e1 ff ff       	call   f0100c82 <cprintf>
f0102b47:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102b4a:	b8 00 00 00 00       	mov    $0x0,%eax
f0102b4f:	e9 e1 00 00 00       	jmp    f0102c35 <command_test_chunks+0x107>
	}
	// CUT-PASTE Test
	if(strcmp(arguments[1], "cutpaste") == 0)
f0102b54:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b57:	83 c0 04             	add    $0x4,%eax
f0102b5a:	8b 00                	mov    (%eax),%eax
f0102b5c:	83 ec 08             	sub    $0x8,%esp
f0102b5f:	68 85 51 13 f0       	push   $0xf0135185
f0102b64:	50                   	push   %eax
f0102b65:	e8 2c e2 02 00       	call   f0130d96 <strcmp>
f0102b6a:	83 c4 10             	add    $0x10,%esp
f0102b6d:	85 c0                	test   %eax,%eax
f0102b6f:	75 0a                	jne    f0102b7b <command_test_chunks+0x4d>
	{
		test_cut_paste_pages();
f0102b71:	e8 a8 e9 00 00       	call   f011151e <test_cut_paste_pages>
f0102b76:	e9 b5 00 00 00       	jmp    f0102c30 <command_test_chunks+0x102>
	}
	// COPY-PASTE Test
	else if(strcmp(arguments[1], "copypaste") == 0)
f0102b7b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b7e:	83 c0 04             	add    $0x4,%eax
f0102b81:	8b 00                	mov    (%eax),%eax
f0102b83:	83 ec 08             	sub    $0x8,%esp
f0102b86:	68 8e 51 13 f0       	push   $0xf013518e
f0102b8b:	50                   	push   %eax
f0102b8c:	e8 05 e2 02 00       	call   f0130d96 <strcmp>
f0102b91:	83 c4 10             	add    $0x10,%esp
f0102b94:	85 c0                	test   %eax,%eax
f0102b96:	75 0a                	jne    f0102ba2 <command_test_chunks+0x74>
	{
		test_copy_paste_chunk();
f0102b98:	e8 cc f3 00 00       	call   f0111f69 <test_copy_paste_chunk>
f0102b9d:	e9 8e 00 00 00       	jmp    f0102c30 <command_test_chunks+0x102>
	}
	// SHARE Test
	else if(strcmp(arguments[1], "share") == 0)
f0102ba2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ba5:	83 c0 04             	add    $0x4,%eax
f0102ba8:	8b 00                	mov    (%eax),%eax
f0102baa:	83 ec 08             	sub    $0x8,%esp
f0102bad:	68 98 51 13 f0       	push   $0xf0135198
f0102bb2:	50                   	push   %eax
f0102bb3:	e8 de e1 02 00       	call   f0130d96 <strcmp>
f0102bb8:	83 c4 10             	add    $0x10,%esp
f0102bbb:	85 c0                	test   %eax,%eax
f0102bbd:	75 07                	jne    f0102bc6 <command_test_chunks+0x98>
	{
		test_share_chunk();
f0102bbf:	e8 a3 04 01 00       	call   f0113067 <test_share_chunk>
f0102bc4:	eb 6a                	jmp    f0102c30 <command_test_chunks+0x102>
	}
	// ALLOCATE Test
	else if(strcmp(arguments[1], "allocate") == 0)
f0102bc6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102bc9:	83 c0 04             	add    $0x4,%eax
f0102bcc:	8b 00                	mov    (%eax),%eax
f0102bce:	83 ec 08             	sub    $0x8,%esp
f0102bd1:	68 9e 51 13 f0       	push   $0xf013519e
f0102bd6:	50                   	push   %eax
f0102bd7:	e8 ba e1 02 00       	call   f0130d96 <strcmp>
f0102bdc:	83 c4 10             	add    $0x10,%esp
f0102bdf:	85 c0                	test   %eax,%eax
f0102be1:	75 07                	jne    f0102bea <command_test_chunks+0xbc>
	{
		test_allocate_chunk();
f0102be3:	e8 a7 0e 01 00       	call   f0113a8f <test_allocate_chunk>
f0102be8:	eb 46                	jmp    f0102c30 <command_test_chunks+0x102>
	}
	// REQUIRED SPACE Test
	else if(strcmp(arguments[1], "required_space") == 0)
f0102bea:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102bed:	83 c0 04             	add    $0x4,%eax
f0102bf0:	8b 00                	mov    (%eax),%eax
f0102bf2:	83 ec 08             	sub    $0x8,%esp
f0102bf5:	68 a7 51 13 f0       	push   $0xf01351a7
f0102bfa:	50                   	push   %eax
f0102bfb:	e8 96 e1 02 00       	call   f0130d96 <strcmp>
f0102c00:	83 c4 10             	add    $0x10,%esp
f0102c03:	85 c0                	test   %eax,%eax
f0102c05:	75 07                	jne    f0102c0e <command_test_chunks+0xe0>
	{
		test_calculate_required_frames();
f0102c07:	e8 32 17 01 00       	call   f011433e <test_calculate_required_frames>
f0102c0c:	eb 22                	jmp    f0102c30 <command_test_chunks+0x102>
	}
	// ALLOCATED SPACE Test
	else if(strcmp(arguments[1], "allocated_space") == 0)
f0102c0e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c11:	83 c0 04             	add    $0x4,%eax
f0102c14:	8b 00                	mov    (%eax),%eax
f0102c16:	83 ec 08             	sub    $0x8,%esp
f0102c19:	68 b6 51 13 f0       	push   $0xf01351b6
f0102c1e:	50                   	push   %eax
f0102c1f:	e8 72 e1 02 00       	call   f0130d96 <strcmp>
f0102c24:	83 c4 10             	add    $0x10,%esp
f0102c27:	85 c0                	test   %eax,%eax
f0102c29:	75 05                	jne    f0102c30 <command_test_chunks+0x102>
	{
		test_calculate_allocated_space();
f0102c2b:	e8 82 1f 01 00       	call   f0114bb2 <test_calculate_allocated_space>
	}
	return 0;
f0102c30:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102c35:	c9                   	leave  
f0102c36:	c3                   	ret    

f0102c37 <command_test_paging_manipulation>:

int command_test_paging_manipulation(int number_of_arguments, char **arguments)
{
f0102c37:	55                   	push   %ebp
f0102c38:	89 e5                	mov    %esp,%ebp
f0102c3a:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102c3d:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102c41:	74 1a                	je     f0102c5d <command_test_paging_manipulation+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstpg <testname>\n") ;
f0102c43:	83 ec 0c             	sub    $0xc,%esp
f0102c46:	68 c8 51 13 f0       	push   $0xf01351c8
f0102c4b:	e8 32 e0 ff ff       	call   f0100c82 <cprintf>
f0102c50:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102c53:	b8 00 00 00 00       	mov    $0x0,%eax
f0102c58:	e9 e1 00 00 00       	jmp    f0102d3e <command_test_paging_manipulation+0x107>
	}
	// Test 1.1-Set/Clear permissions: tstpg scperm1
	if(strcmp(arguments[1], "scperm1") == 0)
f0102c5d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c60:	83 c0 04             	add    $0x4,%eax
f0102c63:	8b 00                	mov    (%eax),%eax
f0102c65:	83 ec 08             	sub    $0x8,%esp
f0102c68:	68 fe 51 13 f0       	push   $0xf01351fe
f0102c6d:	50                   	push   %eax
f0102c6e:	e8 23 e1 02 00       	call   f0130d96 <strcmp>
f0102c73:	83 c4 10             	add    $0x10,%esp
f0102c76:	85 c0                	test   %eax,%eax
f0102c78:	75 0a                	jne    f0102c84 <command_test_paging_manipulation+0x4d>
	{
		test_pt_set_page_permissions();
f0102c7a:	e8 90 df 00 00       	call   f0110c0f <test_pt_set_page_permissions>
f0102c7f:	e9 b5 00 00 00       	jmp    f0102d39 <command_test_paging_manipulation+0x102>
	}
	// Test 1.2-Set/Clear permissions: tstpg scperm2
	else if(strcmp(arguments[1], "scperm2") == 0)
f0102c84:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c87:	83 c0 04             	add    $0x4,%eax
f0102c8a:	8b 00                	mov    (%eax),%eax
f0102c8c:	83 ec 08             	sub    $0x8,%esp
f0102c8f:	68 06 52 13 f0       	push   $0xf0135206
f0102c94:	50                   	push   %eax
f0102c95:	e8 fc e0 02 00       	call   f0130d96 <strcmp>
f0102c9a:	83 c4 10             	add    $0x10,%esp
f0102c9d:	85 c0                	test   %eax,%eax
f0102c9f:	75 0a                	jne    f0102cab <command_test_paging_manipulation+0x74>
	{
		test_pt_set_page_permissions_invalid_va();
f0102ca1:	e8 cc e1 00 00       	call   f0110e72 <test_pt_set_page_permissions_invalid_va>
f0102ca6:	e9 8e 00 00 00       	jmp    f0102d39 <command_test_paging_manipulation+0x102>
	}
	// Test 2-Get permissions: tstpg getperm
	else if(strcmp(arguments[1], "getperm") == 0)
f0102cab:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cae:	83 c0 04             	add    $0x4,%eax
f0102cb1:	8b 00                	mov    (%eax),%eax
f0102cb3:	83 ec 08             	sub    $0x8,%esp
f0102cb6:	68 0e 52 13 f0       	push   $0xf013520e
f0102cbb:	50                   	push   %eax
f0102cbc:	e8 d5 e0 02 00       	call   f0130d96 <strcmp>
f0102cc1:	83 c4 10             	add    $0x10,%esp
f0102cc4:	85 c0                	test   %eax,%eax
f0102cc6:	75 07                	jne    f0102ccf <command_test_paging_manipulation+0x98>
	{
		test_pt_get_page_permissions();
f0102cc8:	e8 ee e1 00 00       	call   f0110ebb <test_pt_get_page_permissions>
f0102ccd:	eb 6a                	jmp    f0102d39 <command_test_paging_manipulation+0x102>
	}
	// Test 3.1-Clear entry: tstpg clear1
	else if(strcmp(arguments[1], "clear1") == 0)
f0102ccf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cd2:	83 c0 04             	add    $0x4,%eax
f0102cd5:	8b 00                	mov    (%eax),%eax
f0102cd7:	83 ec 08             	sub    $0x8,%esp
f0102cda:	68 16 52 13 f0       	push   $0xf0135216
f0102cdf:	50                   	push   %eax
f0102ce0:	e8 b1 e0 02 00       	call   f0130d96 <strcmp>
f0102ce5:	83 c4 10             	add    $0x10,%esp
f0102ce8:	85 c0                	test   %eax,%eax
f0102cea:	75 07                	jne    f0102cf3 <command_test_paging_manipulation+0xbc>
	{
		test_pt_clear_page_table_entry();
f0102cec:	e8 0e e3 00 00       	call   f0110fff <test_pt_clear_page_table_entry>
f0102cf1:	eb 46                	jmp    f0102d39 <command_test_paging_manipulation+0x102>
	}
	// Test 3.2-Clear entry: tstpg clear2
	else if(strcmp(arguments[1], "clear2") == 0)
f0102cf3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cf6:	83 c0 04             	add    $0x4,%eax
f0102cf9:	8b 00                	mov    (%eax),%eax
f0102cfb:	83 ec 08             	sub    $0x8,%esp
f0102cfe:	68 1d 52 13 f0       	push   $0xf013521d
f0102d03:	50                   	push   %eax
f0102d04:	e8 8d e0 02 00       	call   f0130d96 <strcmp>
f0102d09:	83 c4 10             	add    $0x10,%esp
f0102d0c:	85 c0                	test   %eax,%eax
f0102d0e:	75 07                	jne    f0102d17 <command_test_paging_manipulation+0xe0>
	{
		test_pt_clear_page_table_entry_invalid_va();
f0102d10:	e8 43 e4 00 00       	call   f0111158 <test_pt_clear_page_table_entry_invalid_va>
f0102d15:	eb 22                	jmp    f0102d39 <command_test_paging_manipulation+0x102>
	}
	// Test 4-Convert virtual to physical: tstpg v2p
	else if(strcmp(arguments[1], "v2p") == 0)
f0102d17:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d1a:	83 c0 04             	add    $0x4,%eax
f0102d1d:	8b 00                	mov    (%eax),%eax
f0102d1f:	83 ec 08             	sub    $0x8,%esp
f0102d22:	68 24 52 13 f0       	push   $0xf0135224
f0102d27:	50                   	push   %eax
f0102d28:	e8 69 e0 02 00       	call   f0130d96 <strcmp>
f0102d2d:	83 c4 10             	add    $0x10,%esp
f0102d30:	85 c0                	test   %eax,%eax
f0102d32:	75 05                	jne    f0102d39 <command_test_paging_manipulation+0x102>
	{
		test_virtual_to_physical();
f0102d34:	e8 57 e4 00 00       	call   f0111190 <test_virtual_to_physical>
	}
	return 0;
f0102d39:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102d3e:	c9                   	leave  
f0102d3f:	c3                   	ret    

f0102d40 <command_test_kheap>:

int command_test_kheap(int number_of_arguments, char **arguments)
{
f0102d40:	55                   	push   %ebp
f0102d41:	89 e5                	mov    %esp,%ebp
f0102d43:	83 ec 18             	sub    $0x18,%esp
	// Parameters Validation Checking
	if (strcmp(arguments[2], "kmalloc") == 0 && number_of_arguments != 4)
f0102d46:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d49:	83 c0 08             	add    $0x8,%eax
f0102d4c:	8b 00                	mov    (%eax),%eax
f0102d4e:	83 ec 08             	sub    $0x8,%esp
f0102d51:	68 28 52 13 f0       	push   $0xf0135228
f0102d56:	50                   	push   %eax
f0102d57:	e8 3a e0 02 00       	call   f0130d96 <strcmp>
f0102d5c:	83 c4 10             	add    $0x10,%esp
f0102d5f:	85 c0                	test   %eax,%eax
f0102d61:	75 20                	jne    f0102d83 <command_test_kheap+0x43>
f0102d63:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102d67:	74 1a                	je     f0102d83 <command_test_kheap+0x43>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> kmalloc <1 or 2 or 3>\n") ;
f0102d69:	83 ec 0c             	sub    $0xc,%esp
f0102d6c:	68 30 52 13 f0       	push   $0xf0135230
f0102d71:	e8 0c df ff ff       	call   f0100c82 <cprintf>
f0102d76:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102d79:	b8 00 00 00 00       	mov    $0x0,%eax
f0102d7e:	e9 33 03 00 00       	jmp    f01030b6 <command_test_kheap+0x376>
	}
	if (strcmp(arguments[2], "kmalloc") != 0 && number_of_arguments != 3)
f0102d83:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d86:	83 c0 08             	add    $0x8,%eax
f0102d89:	8b 00                	mov    (%eax),%eax
f0102d8b:	83 ec 08             	sub    $0x8,%esp
f0102d8e:	68 28 52 13 f0       	push   $0xf0135228
f0102d93:	50                   	push   %eax
f0102d94:	e8 fd df 02 00       	call   f0130d96 <strcmp>
f0102d99:	83 c4 10             	add    $0x10,%esp
f0102d9c:	85 c0                	test   %eax,%eax
f0102d9e:	74 20                	je     f0102dc0 <command_test_kheap+0x80>
f0102da0:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102da4:	74 1a                	je     f0102dc0 <command_test_kheap+0x80>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> <testname>\n") ;
f0102da6:	83 ec 0c             	sub    $0xc,%esp
f0102da9:	68 80 52 13 f0       	push   $0xf0135280
f0102dae:	e8 cf de ff ff       	call   f0100c82 <cprintf>
f0102db3:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102db6:	b8 00 00 00 00       	mov    $0x0,%eax
f0102dbb:	e9 f6 02 00 00       	jmp    f01030b6 <command_test_kheap+0x376>
	}

	// Setting Strategy
	if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102dc0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102dc3:	83 c0 04             	add    $0x4,%eax
f0102dc6:	8b 00                	mov    (%eax),%eax
f0102dc8:	83 ec 08             	sub    $0x8,%esp
f0102dcb:	68 2c 51 13 f0       	push   $0xf013512c
f0102dd0:	50                   	push   %eax
f0102dd1:	e8 c0 df 02 00       	call   f0130d96 <strcmp>
f0102dd6:	83 c4 10             	add    $0x10,%esp
f0102dd9:	85 c0                	test   %eax,%eax
f0102ddb:	74 1d                	je     f0102dfa <command_test_kheap+0xba>
f0102ddd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102de0:	83 c0 04             	add    $0x4,%eax
f0102de3:	8b 00                	mov    (%eax),%eax
f0102de5:	83 ec 08             	sub    $0x8,%esp
f0102de8:	68 2f 51 13 f0       	push   $0xf013512f
f0102ded:	50                   	push   %eax
f0102dee:	e8 a3 df 02 00       	call   f0130d96 <strcmp>
f0102df3:	83 c4 10             	add    $0x10,%esp
f0102df6:	85 c0                	test   %eax,%eax
f0102df8:	75 1a                	jne    f0102e14 <command_test_kheap+0xd4>
	{
		setKHeapPlacementStrategyFIRSTFIT();
f0102dfa:	e8 60 e0 ff ff       	call   f0100e5f <setKHeapPlacementStrategyFIRSTFIT>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0102dff:	83 ec 0c             	sub    $0xc,%esp
f0102e02:	68 c8 4c 13 f0       	push   $0xf0134cc8
f0102e07:	e8 76 de ff ff       	call   f0100c82 <cprintf>
f0102e0c:	83 c4 10             	add    $0x10,%esp
f0102e0f:	e9 a0 00 00 00       	jmp    f0102eb4 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102e14:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e17:	83 c0 04             	add    $0x4,%eax
f0102e1a:	8b 00                	mov    (%eax),%eax
f0102e1c:	83 ec 08             	sub    $0x8,%esp
f0102e1f:	68 32 51 13 f0       	push   $0xf0135132
f0102e24:	50                   	push   %eax
f0102e25:	e8 6c df 02 00       	call   f0130d96 <strcmp>
f0102e2a:	83 c4 10             	add    $0x10,%esp
f0102e2d:	85 c0                	test   %eax,%eax
f0102e2f:	74 1d                	je     f0102e4e <command_test_kheap+0x10e>
f0102e31:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e34:	83 c0 04             	add    $0x4,%eax
f0102e37:	8b 00                	mov    (%eax),%eax
f0102e39:	83 ec 08             	sub    $0x8,%esp
f0102e3c:	68 35 51 13 f0       	push   $0xf0135135
f0102e41:	50                   	push   %eax
f0102e42:	e8 4f df 02 00       	call   f0130d96 <strcmp>
f0102e47:	83 c4 10             	add    $0x10,%esp
f0102e4a:	85 c0                	test   %eax,%eax
f0102e4c:	75 17                	jne    f0102e65 <command_test_kheap+0x125>
	{
		setKHeapPlacementStrategyBESTFIT();
f0102e4e:	e8 1c e0 ff ff       	call   f0100e6f <setKHeapPlacementStrategyBESTFIT>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f0102e53:	83 ec 0c             	sub    $0xc,%esp
f0102e56:	68 f8 4c 13 f0       	push   $0xf0134cf8
f0102e5b:	e8 22 de ff ff       	call   f0100c82 <cprintf>
f0102e60:	83 c4 10             	add    $0x10,%esp
f0102e63:	eb 4f                	jmp    f0102eb4 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102e65:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e68:	83 c0 04             	add    $0x4,%eax
f0102e6b:	8b 00                	mov    (%eax),%eax
f0102e6d:	83 ec 08             	sub    $0x8,%esp
f0102e70:	68 38 51 13 f0       	push   $0xf0135138
f0102e75:	50                   	push   %eax
f0102e76:	e8 1b df 02 00       	call   f0130d96 <strcmp>
f0102e7b:	83 c4 10             	add    $0x10,%esp
f0102e7e:	85 c0                	test   %eax,%eax
f0102e80:	74 1d                	je     f0102e9f <command_test_kheap+0x15f>
f0102e82:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e85:	83 c0 04             	add    $0x4,%eax
f0102e88:	8b 00                	mov    (%eax),%eax
f0102e8a:	83 ec 08             	sub    $0x8,%esp
f0102e8d:	68 3b 51 13 f0       	push   $0xf013513b
f0102e92:	50                   	push   %eax
f0102e93:	e8 fe de 02 00       	call   f0130d96 <strcmp>
f0102e98:	83 c4 10             	add    $0x10,%esp
f0102e9b:	85 c0                	test   %eax,%eax
f0102e9d:	75 15                	jne    f0102eb4 <command_test_kheap+0x174>
	{
		setKHeapPlacementStrategyNEXTFIT();
f0102e9f:	e8 db df ff ff       	call   f0100e7f <setKHeapPlacementStrategyNEXTFIT>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f0102ea4:	83 ec 0c             	sub    $0xc,%esp
f0102ea7:	68 24 4d 13 f0       	push   $0xf0134d24
f0102eac:	e8 d1 dd ff ff       	call   f0100c82 <cprintf>
f0102eb1:	83 c4 10             	add    $0x10,%esp
	}

	// Test 1-kmalloc: tstkheap FF kmalloc 1
	if(strcmp(arguments[2], "kmalloc") == 0)
f0102eb4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102eb7:	83 c0 08             	add    $0x8,%eax
f0102eba:	8b 00                	mov    (%eax),%eax
f0102ebc:	83 ec 08             	sub    $0x8,%esp
f0102ebf:	68 28 52 13 f0       	push   $0xf0135228
f0102ec4:	50                   	push   %eax
f0102ec5:	e8 cc de 02 00       	call   f0130d96 <strcmp>
f0102eca:	83 c4 10             	add    $0x10,%esp
f0102ecd:	85 c0                	test   %eax,%eax
f0102ecf:	0f 85 13 01 00 00    	jne    f0102fe8 <command_test_kheap+0x2a8>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f0102ed5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ed8:	83 c0 0c             	add    $0xc,%eax
f0102edb:	8b 00                	mov    (%eax),%eax
f0102edd:	83 ec 04             	sub    $0x4,%esp
f0102ee0:	6a 0a                	push   $0xa
f0102ee2:	6a 00                	push   $0x0
f0102ee4:	50                   	push   %eax
f0102ee5:	e8 00 e1 02 00       	call   f0130fea <strtol>
f0102eea:	83 c4 10             	add    $0x10,%esp
f0102eed:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f0102ef0:	e8 be df ff ff       	call   f0100eb3 <isKHeapPlacementStrategyFIRSTFIT>
f0102ef5:	84 c0                	test   %al,%al
f0102ef7:	74 54                	je     f0102f4d <command_test_kheap+0x20d>
		{
			if (testNum == 0)
f0102ef9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102efd:	75 1a                	jne    f0102f19 <command_test_kheap+0x1d9>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f0102eff:	83 ec 0c             	sub    $0xc,%esp
f0102f02:	68 9c 4f 13 f0       	push   $0xf0134f9c
f0102f07:	e8 76 dd ff ff       	call   f0100c82 <cprintf>
f0102f0c:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102f0f:	b8 00 00 00 00       	mov    $0x0,%eax
f0102f14:	e9 9d 01 00 00       	jmp    f01030b6 <command_test_kheap+0x376>
			}
			//Test FIRST FIT allocation
			if (testNum == 1)
f0102f19:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102f1d:	75 0a                	jne    f0102f29 <command_test_kheap+0x1e9>
				test_kmalloc();
f0102f1f:	e8 55 42 01 00       	call   f0117179 <test_kmalloc>
f0102f24:	e9 b5 00 00 00       	jmp    f0102fde <command_test_kheap+0x29e>
			else if (testNum == 2)
f0102f29:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102f2d:	75 0a                	jne    f0102f39 <command_test_kheap+0x1f9>
				test_kmalloc_firstfit1();
f0102f2f:	e8 ce 90 01 00       	call   f011c002 <test_kmalloc_firstfit1>
f0102f34:	e9 a5 00 00 00       	jmp    f0102fde <command_test_kheap+0x29e>
			else if (testNum == 3)
f0102f39:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102f3d:	0f 85 9b 00 00 00    	jne    f0102fde <command_test_kheap+0x29e>
				test_kmalloc_firstfit2();
f0102f43:	e8 5c a4 01 00       	call   f011d3a4 <test_kmalloc_firstfit2>
f0102f48:	e9 91 00 00 00       	jmp    f0102fde <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyBESTFIT())
f0102f4d:	e8 76 df ff ff       	call   f0100ec8 <isKHeapPlacementStrategyBESTFIT>
f0102f52:	84 c0                	test   %al,%al
f0102f54:	74 47                	je     f0102f9d <command_test_kheap+0x25d>
		{
			if (testNum == 0)
f0102f56:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102f5a:	75 1a                	jne    f0102f76 <command_test_kheap+0x236>
			{
				cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0102f5c:	83 ec 0c             	sub    $0xc,%esp
f0102f5f:	68 ec 4f 13 f0       	push   $0xf0134fec
f0102f64:	e8 19 dd ff ff       	call   f0100c82 <cprintf>
f0102f69:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102f6c:	b8 00 00 00 00       	mov    $0x0,%eax
f0102f71:	e9 40 01 00 00       	jmp    f01030b6 <command_test_kheap+0x376>
			}
			if (testNum == 1)
f0102f76:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102f7a:	75 07                	jne    f0102f83 <command_test_kheap+0x243>
				test_kmalloc();
f0102f7c:	e8 f8 41 01 00       	call   f0117179 <test_kmalloc>
f0102f81:	eb 5b                	jmp    f0102fde <command_test_kheap+0x29e>
			else if (testNum == 2)
f0102f83:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102f87:	75 07                	jne    f0102f90 <command_test_kheap+0x250>
				test_kmalloc_bestfit1();
f0102f89:	e8 3e 6b 01 00       	call   f0119acc <test_kmalloc_bestfit1>
f0102f8e:	eb 4e                	jmp    f0102fde <command_test_kheap+0x29e>
			else if (testNum == 3)
f0102f90:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102f94:	75 48                	jne    f0102fde <command_test_kheap+0x29e>
				test_kmalloc_bestfit2();
f0102f96:	e8 87 7d 01 00       	call   f011ad22 <test_kmalloc_bestfit2>
f0102f9b:	eb 41                	jmp    f0102fde <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyNEXTFIT())
f0102f9d:	e8 3b df ff ff       	call   f0100edd <isKHeapPlacementStrategyNEXTFIT>
f0102fa2:	84 c0                	test   %al,%al
f0102fa4:	74 38                	je     f0102fde <command_test_kheap+0x29e>
		{
			if (testNum == 0)
f0102fa6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102faa:	75 1a                	jne    f0102fc6 <command_test_kheap+0x286>
			{
				cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0102fac:	83 ec 0c             	sub    $0xc,%esp
f0102faf:	68 3c 50 13 f0       	push   $0xf013503c
f0102fb4:	e8 c9 dc ff ff       	call   f0100c82 <cprintf>
f0102fb9:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102fbc:	b8 00 00 00 00       	mov    $0x0,%eax
f0102fc1:	e9 f0 00 00 00       	jmp    f01030b6 <command_test_kheap+0x376>
			}
			//Test cont. allocation
			if (testNum == 1)
f0102fc6:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102fca:	75 07                	jne    f0102fd3 <command_test_kheap+0x293>
				test_kmalloc();
f0102fcc:	e8 a8 41 01 00       	call   f0117179 <test_kmalloc>
f0102fd1:	eb 0b                	jmp    f0102fde <command_test_kheap+0x29e>
			//Test nextfit strategy
			else if (testNum == 2)
f0102fd3:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102fd7:	75 05                	jne    f0102fde <command_test_kheap+0x29e>
				test_kmalloc_nextfit();
f0102fd9:	e8 f9 53 01 00       	call   f01183d7 <test_kmalloc_nextfit>
		}
		return 0;
f0102fde:	b8 00 00 00 00       	mov    $0x0,%eax
f0102fe3:	e9 ce 00 00 00       	jmp    f01030b6 <command_test_kheap+0x376>
	}
	// Test 2-kfree: tstkheap FF kfree
	else if(strcmp(arguments[2], "kfree") == 0)
f0102fe8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102feb:	83 c0 08             	add    $0x8,%eax
f0102fee:	8b 00                	mov    (%eax),%eax
f0102ff0:	83 ec 08             	sub    $0x8,%esp
f0102ff3:	68 c4 52 13 f0       	push   $0xf01352c4
f0102ff8:	50                   	push   %eax
f0102ff9:	e8 98 dd 02 00       	call   f0130d96 <strcmp>
f0102ffe:	83 c4 10             	add    $0x10,%esp
f0103001:	85 c0                	test   %eax,%eax
f0103003:	75 28                	jne    f010302d <command_test_kheap+0x2ed>
	{
		if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f0103005:	e8 be de ff ff       	call   f0100ec8 <isKHeapPlacementStrategyBESTFIT>
f010300a:	84 c0                	test   %al,%al
f010300c:	75 09                	jne    f0103017 <command_test_kheap+0x2d7>
f010300e:	e8 a0 de ff ff       	call   f0100eb3 <isKHeapPlacementStrategyFIRSTFIT>
f0103013:	84 c0                	test   %al,%al
f0103015:	74 07                	je     f010301e <command_test_kheap+0x2de>
		{
			test_kfree_bestfirstfit();
f0103017:	e8 bf e9 01 00       	call   f01219db <test_kfree_bestfirstfit>
f010301c:	eb 05                	jmp    f0103023 <command_test_kheap+0x2e3>
		}
		else //NEXT & CONT
		{
			test_kfree();
f010301e:	e8 66 c8 01 00       	call   f011f889 <test_kfree>
		}
		return 0;
f0103023:	b8 00 00 00 00       	mov    $0x0,%eax
f0103028:	e9 89 00 00 00       	jmp    f01030b6 <command_test_kheap+0x376>
	}
	// Test 3-kphysaddr: tstkheap FF kphysaddr
	else if(strcmp(arguments[2], "kphysaddr") == 0)
f010302d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103030:	83 c0 08             	add    $0x8,%eax
f0103033:	8b 00                	mov    (%eax),%eax
f0103035:	83 ec 08             	sub    $0x8,%esp
f0103038:	68 ca 52 13 f0       	push   $0xf01352ca
f010303d:	50                   	push   %eax
f010303e:	e8 53 dd 02 00       	call   f0130d96 <strcmp>
f0103043:	83 c4 10             	add    $0x10,%esp
f0103046:	85 c0                	test   %eax,%eax
f0103048:	75 0c                	jne    f0103056 <command_test_kheap+0x316>
	{
		test_kheap_phys_addr();
f010304a:	e8 88 03 02 00       	call   f01233d7 <test_kheap_phys_addr>
		return 0;
f010304f:	b8 00 00 00 00       	mov    $0x0,%eax
f0103054:	eb 60                	jmp    f01030b6 <command_test_kheap+0x376>
	}
	// Test 4-kvirtaddr: tstkheap FF kvirtaddr
	else if(strcmp(arguments[2], "kvirtaddr") == 0)
f0103056:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103059:	83 c0 08             	add    $0x8,%eax
f010305c:	8b 00                	mov    (%eax),%eax
f010305e:	83 ec 08             	sub    $0x8,%esp
f0103061:	68 d4 52 13 f0       	push   $0xf01352d4
f0103066:	50                   	push   %eax
f0103067:	e8 2a dd 02 00       	call   f0130d96 <strcmp>
f010306c:	83 c4 10             	add    $0x10,%esp
f010306f:	85 c0                	test   %eax,%eax
f0103071:	75 0c                	jne    f010307f <command_test_kheap+0x33f>
	{
		test_kheap_virt_addr();
f0103073:	e8 2f 18 02 00       	call   f01248a7 <test_kheap_virt_addr>
		return 0;
f0103078:	b8 00 00 00 00       	mov    $0x0,%eax
f010307d:	eb 37                	jmp    f01030b6 <command_test_kheap+0x376>
	}
	// Test 5-krealloc: tstkheap BF krealloc
	else if(strcmp(arguments[2], "krealloc") == 0)
f010307f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103082:	83 c0 08             	add    $0x8,%eax
f0103085:	8b 00                	mov    (%eax),%eax
f0103087:	83 ec 08             	sub    $0x8,%esp
f010308a:	68 de 52 13 f0       	push   $0xf01352de
f010308f:	50                   	push   %eax
f0103090:	e8 01 dd 02 00       	call   f0130d96 <strcmp>
f0103095:	83 c4 10             	add    $0x10,%esp
f0103098:	85 c0                	test   %eax,%eax
f010309a:	75 15                	jne    f01030b1 <command_test_kheap+0x371>
	{
		if (isKHeapPlacementStrategyBESTFIT())
f010309c:	e8 27 de ff ff       	call   f0100ec8 <isKHeapPlacementStrategyBESTFIT>
f01030a1:	84 c0                	test   %al,%al
f01030a3:	74 05                	je     f01030aa <command_test_kheap+0x36a>
		{
			test_krealloc_BF();
f01030a5:	e8 a1 a6 02 00       	call   f012d74b <test_krealloc_BF>
		}
		return 0;
f01030aa:	b8 00 00 00 00       	mov    $0x0,%eax
f01030af:	eb 05                	jmp    f01030b6 <command_test_kheap+0x376>
	}
	return 0;
f01030b1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01030b6:	c9                   	leave  
f01030b7:	c3                   	ret    

f01030b8 <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f01030b8:	55                   	push   %ebp
f01030b9:	89 e5                	mov    %esp,%ebp
f01030bb:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f01030be:	8b 45 08             	mov    0x8(%ebp),%eax
f01030c1:	05 00 14 00 00       	add    $0x1400,%eax
f01030c6:	c1 e0 03             	shl    $0x3,%eax
f01030c9:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f01030cc:	83 ec 04             	sub    $0x4,%esp
f01030cf:	6a 08                	push   $0x8
f01030d1:	ff 75 0c             	pushl  0xc(%ebp)
f01030d4:	ff 75 f4             	pushl  -0xc(%ebp)
f01030d7:	e8 01 e3 02 00       	call   f01313dd <ide_read>
f01030dc:	83 c4 10             	add    $0x10,%esp
f01030df:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f01030e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01030e5:	c9                   	leave  
f01030e6:	c3                   	ret    

f01030e7 <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f01030e7:	55                   	push   %ebp
f01030e8:	89 e5                	mov    %esp,%ebp
f01030ea:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f01030ed:	8b 45 08             	mov    0x8(%ebp),%eax
f01030f0:	05 00 14 00 00       	add    $0x1400,%eax
f01030f5:	c1 e0 03             	shl    $0x3,%eax
f01030f8:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f01030fb:	83 ec 04             	sub    $0x4,%esp
f01030fe:	6a 08                	push   $0x8
f0103100:	ff 75 0c             	pushl  0xc(%ebp)
f0103103:	ff 75 f4             	pushl  -0xc(%ebp)
f0103106:	e8 12 e4 02 00       	call   f013151d <ide_write>
f010310b:	83 c4 10             	add    $0x10,%esp
f010310e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f0103111:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103115:	74 14                	je     f010312b <write_disk_page+0x44>
		panic("Error writing on disk\n");
f0103117:	83 ec 04             	sub    $0x4,%esp
f010311a:	68 e8 52 13 f0       	push   $0xf01352e8
f010311f:	6a 2e                	push   $0x2e
f0103121:	68 ff 52 13 f0       	push   $0xf01352ff
f0103126:	e8 d0 d0 ff ff       	call   f01001fb <_panic>
	return success;
f010312b:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010312e:	c9                   	leave  
f010312f:	c3                   	ret    

f0103130 <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f0103130:	55                   	push   %ebp
f0103131:	89 e5                	mov    %esp,%ebp
f0103133:	53                   	push   %ebx
f0103134:	83 ec 14             	sub    $0x14,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f0103137:	c7 05 b8 7b 65 f0 00 	movl   $0x0,0xf0657bb8
f010313e:	00 00 00 
f0103141:	c7 05 bc 7b 65 f0 00 	movl   $0x0,0xf0657bbc
f0103148:	00 00 00 
f010314b:	c7 05 c4 7b 65 f0 00 	movl   $0x0,0xf0657bc4
f0103152:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f0103155:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f010315c:	e9 e8 00 00 00       	jmp    f0103249 <initialize_disk_page_file+0x119>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f0103161:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f0103167:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010316a:	89 d0                	mov    %edx,%eax
f010316c:	01 c0                	add    %eax,%eax
f010316e:	01 d0                	add    %edx,%eax
f0103170:	c1 e0 03             	shl    $0x3,%eax
f0103173:	01 c8                	add    %ecx,%eax
f0103175:	83 ec 0c             	sub    $0xc,%esp
f0103178:	50                   	push   %eax
f0103179:	e8 82 36 00 00       	call   f0106800 <initialize_frame_info>
f010317e:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f0103181:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f0103187:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010318a:	89 d0                	mov    %edx,%eax
f010318c:	01 c0                	add    %eax,%eax
f010318e:	01 d0                	add    %edx,%eax
f0103190:	c1 e0 03             	shl    $0x3,%eax
f0103193:	01 c8                	add    %ecx,%eax
f0103195:	85 c0                	test   %eax,%eax
f0103197:	75 14                	jne    f01031ad <initialize_disk_page_file+0x7d>
f0103199:	83 ec 04             	sub    $0x4,%esp
f010319c:	68 1c 53 13 f0       	push   $0xf013531c
f01031a1:	6a 59                	push   $0x59
f01031a3:	68 ff 52 13 f0       	push   $0xf01352ff
f01031a8:	e8 4e d0 ff ff       	call   f01001fb <_panic>
f01031ad:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f01031b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01031b6:	89 d0                	mov    %edx,%eax
f01031b8:	01 c0                	add    %eax,%eax
f01031ba:	01 d0                	add    %edx,%eax
f01031bc:	c1 e0 03             	shl    $0x3,%eax
f01031bf:	01 c8                	add    %ecx,%eax
f01031c1:	8b 15 b8 7b 65 f0    	mov    0xf0657bb8,%edx
f01031c7:	89 10                	mov    %edx,(%eax)
f01031c9:	8b 00                	mov    (%eax),%eax
f01031cb:	85 c0                	test   %eax,%eax
f01031cd:	74 1f                	je     f01031ee <initialize_disk_page_file+0xbe>
f01031cf:	8b 15 b8 7b 65 f0    	mov    0xf0657bb8,%edx
f01031d5:	8b 1d dc 7a 65 f0    	mov    0xf0657adc,%ebx
f01031db:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01031de:	89 c8                	mov    %ecx,%eax
f01031e0:	01 c0                	add    %eax,%eax
f01031e2:	01 c8                	add    %ecx,%eax
f01031e4:	c1 e0 03             	shl    $0x3,%eax
f01031e7:	01 d8                	add    %ebx,%eax
f01031e9:	89 42 04             	mov    %eax,0x4(%edx)
f01031ec:	eb 19                	jmp    f0103207 <initialize_disk_page_file+0xd7>
f01031ee:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f01031f4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01031f7:	89 d0                	mov    %edx,%eax
f01031f9:	01 c0                	add    %eax,%eax
f01031fb:	01 d0                	add    %edx,%eax
f01031fd:	c1 e0 03             	shl    $0x3,%eax
f0103200:	01 c8                	add    %ecx,%eax
f0103202:	a3 bc 7b 65 f0       	mov    %eax,0xf0657bbc
f0103207:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f010320d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103210:	89 d0                	mov    %edx,%eax
f0103212:	01 c0                	add    %eax,%eax
f0103214:	01 d0                	add    %edx,%eax
f0103216:	c1 e0 03             	shl    $0x3,%eax
f0103219:	01 c8                	add    %ecx,%eax
f010321b:	a3 b8 7b 65 f0       	mov    %eax,0xf0657bb8
f0103220:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f0103226:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103229:	89 d0                	mov    %edx,%eax
f010322b:	01 c0                	add    %eax,%eax
f010322d:	01 d0                	add    %edx,%eax
f010322f:	c1 e0 03             	shl    $0x3,%eax
f0103232:	01 c8                	add    %ecx,%eax
f0103234:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010323b:	a1 c4 7b 65 f0       	mov    0xf0657bc4,%eax
f0103240:	40                   	inc    %eax
f0103241:	a3 c4 7b 65 f0       	mov    %eax,0xf0657bc4
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f0103246:	ff 45 f4             	incl   -0xc(%ebp)
f0103249:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f0103250:	0f 8e 0b ff ff ff    	jle    f0103161 <initialize_disk_page_file+0x31>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f0103256:	90                   	nop
f0103257:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010325a:	c9                   	leave  
f010325b:	c3                   	ret    

f010325c <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f010325c:	55                   	push   %ebp
f010325d:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f010325f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103262:	8b 15 dc 7a 65 f0    	mov    0xf0657adc,%edx
f0103268:	29 d0                	sub    %edx,%eax
f010326a:	c1 f8 03             	sar    $0x3,%eax
f010326d:	89 c2                	mov    %eax,%edx
f010326f:	89 d0                	mov    %edx,%eax
f0103271:	c1 e0 02             	shl    $0x2,%eax
f0103274:	01 d0                	add    %edx,%eax
f0103276:	c1 e0 02             	shl    $0x2,%eax
f0103279:	01 d0                	add    %edx,%eax
f010327b:	c1 e0 02             	shl    $0x2,%eax
f010327e:	01 d0                	add    %edx,%eax
f0103280:	89 c1                	mov    %eax,%ecx
f0103282:	c1 e1 08             	shl    $0x8,%ecx
f0103285:	01 c8                	add    %ecx,%eax
f0103287:	89 c1                	mov    %eax,%ecx
f0103289:	c1 e1 10             	shl    $0x10,%ecx
f010328c:	01 c8                	add    %ecx,%eax
f010328e:	01 c0                	add    %eax,%eax
f0103290:	01 d0                	add    %edx,%eax
}
f0103292:	5d                   	pop    %ebp
f0103293:	c3                   	ret    

f0103294 <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f0103294:	55                   	push   %ebp
f0103295:	89 e5                	mov    %esp,%ebp
f0103297:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct FrameInfo *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f010329a:	a1 b8 7b 65 f0       	mov    0xf0657bb8,%eax
f010329f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f01032a2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01032a6:	75 0a                	jne    f01032b2 <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f01032a8:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01032ad:	e9 a7 00 00 00       	jmp    f0103359 <allocate_disk_frame+0xc5>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f01032b2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01032b6:	75 14                	jne    f01032cc <allocate_disk_frame+0x38>
f01032b8:	83 ec 04             	sub    $0x4,%esp
f01032bb:	68 3f 53 13 f0       	push   $0xf013533f
f01032c0:	6a 78                	push   $0x78
f01032c2:	68 ff 52 13 f0       	push   $0xf01352ff
f01032c7:	e8 2f cf ff ff       	call   f01001fb <_panic>
f01032cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032cf:	8b 00                	mov    (%eax),%eax
f01032d1:	85 c0                	test   %eax,%eax
f01032d3:	74 10                	je     f01032e5 <allocate_disk_frame+0x51>
f01032d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032d8:	8b 00                	mov    (%eax),%eax
f01032da:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01032dd:	8b 52 04             	mov    0x4(%edx),%edx
f01032e0:	89 50 04             	mov    %edx,0x4(%eax)
f01032e3:	eb 0b                	jmp    f01032f0 <allocate_disk_frame+0x5c>
f01032e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032e8:	8b 40 04             	mov    0x4(%eax),%eax
f01032eb:	a3 bc 7b 65 f0       	mov    %eax,0xf0657bbc
f01032f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032f3:	8b 40 04             	mov    0x4(%eax),%eax
f01032f6:	85 c0                	test   %eax,%eax
f01032f8:	74 0f                	je     f0103309 <allocate_disk_frame+0x75>
f01032fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032fd:	8b 40 04             	mov    0x4(%eax),%eax
f0103300:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103303:	8b 12                	mov    (%edx),%edx
f0103305:	89 10                	mov    %edx,(%eax)
f0103307:	eb 0a                	jmp    f0103313 <allocate_disk_frame+0x7f>
f0103309:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010330c:	8b 00                	mov    (%eax),%eax
f010330e:	a3 b8 7b 65 f0       	mov    %eax,0xf0657bb8
f0103313:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103316:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010331c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010331f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103326:	a1 c4 7b 65 f0       	mov    0xf0657bc4,%eax
f010332b:	48                   	dec    %eax
f010332c:	a3 c4 7b 65 f0       	mov    %eax,0xf0657bc4
	initialize_frame_info(ptr_frame_info);
f0103331:	83 ec 0c             	sub    $0xc,%esp
f0103334:	ff 75 f4             	pushl  -0xc(%ebp)
f0103337:	e8 c4 34 00 00       	call   f0106800 <initialize_frame_info>
f010333c:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f010333f:	83 ec 0c             	sub    $0xc,%esp
f0103342:	ff 75 f4             	pushl  -0xc(%ebp)
f0103345:	e8 12 ff ff ff       	call   f010325c <to_disk_frame_number>
f010334a:	83 c4 10             	add    $0x10,%esp
f010334d:	89 c2                	mov    %eax,%edx
f010334f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103352:	89 10                	mov    %edx,(%eax)
	return 0;
f0103354:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103359:	c9                   	leave  
f010335a:	c3                   	ret    

f010335b <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f010335b:	55                   	push   %ebp
f010335c:	89 e5                	mov    %esp,%ebp
f010335e:	53                   	push   %ebx
f010335f:	83 ec 04             	sub    $0x4,%esp
	// Fill this function in
	if(dfn == 0) return;
f0103362:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0103366:	0f 84 ca 00 00 00    	je     f0103436 <free_disk_frame+0xdb>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f010336c:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f0103372:	8b 55 08             	mov    0x8(%ebp),%edx
f0103375:	89 d0                	mov    %edx,%eax
f0103377:	01 c0                	add    %eax,%eax
f0103379:	01 d0                	add    %edx,%eax
f010337b:	c1 e0 03             	shl    $0x3,%eax
f010337e:	01 c8                	add    %ecx,%eax
f0103380:	85 c0                	test   %eax,%eax
f0103382:	75 17                	jne    f010339b <free_disk_frame+0x40>
f0103384:	83 ec 04             	sub    $0x4,%esp
f0103387:	68 1c 53 13 f0       	push   $0xf013531c
f010338c:	68 85 00 00 00       	push   $0x85
f0103391:	68 ff 52 13 f0       	push   $0xf01352ff
f0103396:	e8 60 ce ff ff       	call   f01001fb <_panic>
f010339b:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f01033a1:	8b 55 08             	mov    0x8(%ebp),%edx
f01033a4:	89 d0                	mov    %edx,%eax
f01033a6:	01 c0                	add    %eax,%eax
f01033a8:	01 d0                	add    %edx,%eax
f01033aa:	c1 e0 03             	shl    $0x3,%eax
f01033ad:	01 c8                	add    %ecx,%eax
f01033af:	8b 15 b8 7b 65 f0    	mov    0xf0657bb8,%edx
f01033b5:	89 10                	mov    %edx,(%eax)
f01033b7:	8b 00                	mov    (%eax),%eax
f01033b9:	85 c0                	test   %eax,%eax
f01033bb:	74 1f                	je     f01033dc <free_disk_frame+0x81>
f01033bd:	8b 15 b8 7b 65 f0    	mov    0xf0657bb8,%edx
f01033c3:	8b 1d dc 7a 65 f0    	mov    0xf0657adc,%ebx
f01033c9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01033cc:	89 c8                	mov    %ecx,%eax
f01033ce:	01 c0                	add    %eax,%eax
f01033d0:	01 c8                	add    %ecx,%eax
f01033d2:	c1 e0 03             	shl    $0x3,%eax
f01033d5:	01 d8                	add    %ebx,%eax
f01033d7:	89 42 04             	mov    %eax,0x4(%edx)
f01033da:	eb 19                	jmp    f01033f5 <free_disk_frame+0x9a>
f01033dc:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f01033e2:	8b 55 08             	mov    0x8(%ebp),%edx
f01033e5:	89 d0                	mov    %edx,%eax
f01033e7:	01 c0                	add    %eax,%eax
f01033e9:	01 d0                	add    %edx,%eax
f01033eb:	c1 e0 03             	shl    $0x3,%eax
f01033ee:	01 c8                	add    %ecx,%eax
f01033f0:	a3 bc 7b 65 f0       	mov    %eax,0xf0657bbc
f01033f5:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f01033fb:	8b 55 08             	mov    0x8(%ebp),%edx
f01033fe:	89 d0                	mov    %edx,%eax
f0103400:	01 c0                	add    %eax,%eax
f0103402:	01 d0                	add    %edx,%eax
f0103404:	c1 e0 03             	shl    $0x3,%eax
f0103407:	01 c8                	add    %ecx,%eax
f0103409:	a3 b8 7b 65 f0       	mov    %eax,0xf0657bb8
f010340e:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f0103414:	8b 55 08             	mov    0x8(%ebp),%edx
f0103417:	89 d0                	mov    %edx,%eax
f0103419:	01 c0                	add    %eax,%eax
f010341b:	01 d0                	add    %edx,%eax
f010341d:	c1 e0 03             	shl    $0x3,%eax
f0103420:	01 c8                	add    %ecx,%eax
f0103422:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103429:	a1 c4 7b 65 f0       	mov    0xf0657bc4,%eax
f010342e:	40                   	inc    %eax
f010342f:	a3 c4 7b 65 f0       	mov    %eax,0xf0657bc4
f0103434:	eb 01                	jmp    f0103437 <free_disk_frame+0xdc>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f0103436:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f0103437:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010343a:	c9                   	leave  
f010343b:	c3                   	ret    

f010343c <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f010343c:	55                   	push   %ebp
f010343d:	89 e5                	mov    %esp,%ebp
f010343f:	53                   	push   %ebx
f0103440:	83 ec 14             	sub    $0x14,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f0103443:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103446:	c1 e8 16             	shr    $0x16,%eax
f0103449:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103450:	8b 45 08             	mov    0x8(%ebp),%eax
f0103453:	01 d0                	add    %edx,%eax
f0103455:	8b 00                	mov    (%eax),%eax
f0103457:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f010345a:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0103461:	77 1d                	ja     f0103480 <get_disk_page_table+0x44>
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
f0103463:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103466:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010346b:	83 ec 0c             	sub    $0xc,%esp
f010346e:	50                   	push   %eax
f010346f:	e8 73 45 00 00       	call   f01079e7 <kheap_virtual_address>
f0103474:	83 c4 10             	add    $0x10,%esp
f0103477:	89 c2                	mov    %eax,%edx
f0103479:	8b 45 14             	mov    0x14(%ebp),%eax
f010347c:	89 10                	mov    %edx,(%eax)
f010347e:	eb 44                	jmp    f01034c4 <get_disk_page_table+0x88>
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f0103480:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103483:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103488:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010348b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010348e:	c1 e8 0c             	shr    $0xc,%eax
f0103491:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103494:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f0103499:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f010349c:	72 17                	jb     f01034b5 <get_disk_page_table+0x79>
f010349e:	ff 75 f0             	pushl  -0x10(%ebp)
f01034a1:	68 60 53 13 f0       	push   $0xf0135360
f01034a6:	68 92 00 00 00       	push   $0x92
f01034ab:	68 ff 52 13 f0       	push   $0xf01352ff
f01034b0:	e8 46 cd ff ff       	call   f01001fb <_panic>
f01034b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01034b8:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01034bd:	89 c2                	mov    %eax,%edx
f01034bf:	8b 45 14             	mov    0x14(%ebp),%eax
f01034c2:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f01034c4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01034c8:	0f 85 80 00 00 00    	jne    f010354e <get_disk_page_table+0x112>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f01034ce:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01034d2:	74 6a                	je     f010353e <get_disk_page_table+0x102>
		{

#if USE_KHEAP
			{
				*ptr_disk_page_table = (uint32*)kmalloc(PAGE_SIZE);
f01034d4:	83 ec 0c             	sub    $0xc,%esp
f01034d7:	68 00 10 00 00       	push   $0x1000
f01034dc:	e8 1d 43 00 00       	call   f01077fe <kmalloc>
f01034e1:	83 c4 10             	add    $0x10,%esp
f01034e4:	89 c2                	mov    %eax,%edx
f01034e6:	8b 45 14             	mov    0x14(%ebp),%eax
f01034e9:	89 10                	mov    %edx,(%eax)
				if(*ptr_disk_page_table == NULL)
f01034eb:	8b 45 14             	mov    0x14(%ebp),%eax
f01034ee:	8b 00                	mov    (%eax),%eax
f01034f0:	85 c0                	test   %eax,%eax
f01034f2:	75 07                	jne    f01034fb <get_disk_page_table+0xbf>
				{
					return E_NO_VM;
f01034f4:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f01034f9:	eb 58                	jmp    f0103553 <get_disk_page_table+0x117>
				}
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f01034fb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01034fe:	c1 e8 16             	shr    $0x16,%eax
f0103501:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103508:	8b 45 08             	mov    0x8(%ebp),%eax
f010350b:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f010350e:	8b 45 14             	mov    0x14(%ebp),%eax
f0103511:	8b 00                	mov    (%eax),%eax
f0103513:	83 ec 0c             	sub    $0xc,%esp
f0103516:	50                   	push   %eax
f0103517:	e8 f7 44 00 00       	call   f0107a13 <kheap_physical_address>
f010351c:	83 c4 10             	add    $0x10,%esp
f010351f:	83 c8 01             	or     $0x1,%eax
f0103522:	89 03                	mov    %eax,(%ebx)
				ptr_frame_info->references = 1;
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f0103524:	8b 45 14             	mov    0x14(%ebp),%eax
f0103527:	8b 00                	mov    (%eax),%eax
f0103529:	83 ec 04             	sub    $0x4,%esp
f010352c:	68 00 10 00 00       	push   $0x1000
f0103531:	6a 00                	push   $0x0
f0103533:	50                   	push   %eax
f0103534:	e8 3f d9 02 00       	call   f0130e78 <memset>
f0103539:	83 c4 10             	add    $0x10,%esp
f010353c:	eb 10                	jmp    f010354e <get_disk_page_table+0x112>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f010353e:	8b 45 14             	mov    0x14(%ebp),%eax
f0103541:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f0103547:	b8 00 00 00 00       	mov    $0x0,%eax
f010354c:	eb 05                	jmp    f0103553 <get_disk_page_table+0x117>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f010354e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103553:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0103556:	c9                   	leave  
f0103557:	c3                   	ret    

f0103558 <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f0103558:	55                   	push   %ebp
f0103559:	89 e5                	mov    %esp,%ebp
f010355b:	83 ec 28             	sub    $0x28,%esp
f010355e:	8b 45 10             	mov    0x10(%ebp),%eax
f0103561:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f0103564:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f0103568:	74 75                	je     f01035df <pf_add_empty_env_page+0x87>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f010356a:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f0103571:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103574:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103579:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010357c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010357f:	ba 00 00 00 00       	mov    $0x0,%edx
f0103584:	f7 75 f4             	divl   -0xc(%ebp)
f0103587:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010358a:	29 d0                	sub    %edx,%eax
f010358c:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010358f:	73 32                	jae    f01035c3 <pf_add_empty_env_page+0x6b>
f0103591:	8b 45 08             	mov    0x8(%ebp),%eax
f0103594:	8b 90 58 05 00 00    	mov    0x558(%eax),%edx
f010359a:	b8 00 00 00 00       	mov    $0x0,%eax
f010359f:	29 d0                	sub    %edx,%eax
f01035a1:	c1 e0 0c             	shl    $0xc,%eax
f01035a4:	2d 00 20 40 11       	sub    $0x11402000,%eax
f01035a9:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01035ac:	76 15                	jbe    f01035c3 <pf_add_empty_env_page+0x6b>
			ptr_env->nNewPageAdded++ ;
f01035ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01035b1:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f01035b7:	8d 50 01             	lea    0x1(%eax),%edx
f01035ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01035bd:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f01035c3:	a1 60 7b 65 f0       	mov    0xf0657b60,%eax
f01035c8:	83 ec 04             	sub    $0x4,%esp
f01035cb:	50                   	push   %eax
f01035cc:	ff 75 0c             	pushl  0xc(%ebp)
f01035cf:	ff 75 08             	pushl  0x8(%ebp)
f01035d2:	e8 b2 00 00 00       	call   f0103689 <pf_add_env_page>
f01035d7:	83 c4 10             	add    $0x10,%esp
f01035da:	e9 a8 00 00 00       	jmp    f0103687 <pf_add_empty_env_page+0x12f>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f01035df:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f01035e6:	76 19                	jbe    f0103601 <pf_add_empty_env_page+0xa9>
f01035e8:	68 90 53 13 f0       	push   $0xf0135390
f01035ed:	68 b6 53 13 f0       	push   $0xf01353b6
f01035f2:	68 d1 00 00 00       	push   $0xd1
f01035f7:	68 ff 52 13 f0       	push   $0xf01352ff
f01035fc:	e8 fa cb ff ff       	call   f01001fb <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103601:	8b 45 08             	mov    0x8(%ebp),%eax
f0103604:	83 c0 64             	add    $0x64,%eax
f0103607:	83 ec 08             	sub    $0x8,%esp
f010360a:	50                   	push   %eax
f010360b:	ff 75 08             	pushl  0x8(%ebp)
f010360e:	e8 10 06 00 00       	call   f0103c23 <get_disk_page_directory>
f0103613:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103616:	8b 45 08             	mov    0x8(%ebp),%eax
f0103619:	8b 40 64             	mov    0x64(%eax),%eax
f010361c:	8d 55 ec             	lea    -0x14(%ebp),%edx
f010361f:	52                   	push   %edx
f0103620:	6a 01                	push   $0x1
f0103622:	ff 75 0c             	pushl  0xc(%ebp)
f0103625:	50                   	push   %eax
f0103626:	e8 11 fe ff ff       	call   f010343c <get_disk_page_table>
f010362b:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010362e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103631:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103634:	c1 ea 0c             	shr    $0xc,%edx
f0103637:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010363d:	c1 e2 02             	shl    $0x2,%edx
f0103640:	01 d0                	add    %edx,%eax
f0103642:	8b 00                	mov    (%eax),%eax
f0103644:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f0103647:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010364a:	85 c0                	test   %eax,%eax
f010364c:	75 34                	jne    f0103682 <pf_add_empty_env_page+0x12a>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010364e:	83 ec 0c             	sub    $0xc,%esp
f0103651:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0103654:	50                   	push   %eax
f0103655:	e8 3a fc ff ff       	call   f0103294 <allocate_disk_frame>
f010365a:	83 c4 10             	add    $0x10,%esp
f010365d:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103660:	75 07                	jne    f0103669 <pf_add_empty_env_page+0x111>
f0103662:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103667:	eb 1e                	jmp    f0103687 <pf_add_empty_env_page+0x12f>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f0103669:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010366c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010366f:	c1 ea 0c             	shr    $0xc,%edx
f0103672:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103678:	c1 e2 02             	shl    $0x2,%edx
f010367b:	01 c2                	add    %eax,%edx
f010367d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103680:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f0103682:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0103687:	c9                   	leave  
f0103688:	c3                   	ret    

f0103689 <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f0103689:	55                   	push   %ebp
f010368a:	89 e5                	mov    %esp,%ebp
f010368c:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010368f:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103696:	76 19                	jbe    f01036b1 <pf_add_env_page+0x28>
f0103698:	68 90 53 13 f0       	push   $0xf0135390
f010369d:	68 b6 53 13 f0       	push   $0xf01353b6
f01036a2:	68 e6 00 00 00       	push   $0xe6
f01036a7:	68 ff 52 13 f0       	push   $0xf01352ff
f01036ac:	e8 4a cb ff ff       	call   f01001fb <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f01036b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01036b4:	83 c0 64             	add    $0x64,%eax
f01036b7:	83 ec 08             	sub    $0x8,%esp
f01036ba:	50                   	push   %eax
f01036bb:	ff 75 08             	pushl  0x8(%ebp)
f01036be:	e8 60 05 00 00       	call   f0103c23 <get_disk_page_directory>
f01036c3:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f01036c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01036c9:	8b 40 64             	mov    0x64(%eax),%eax
f01036cc:	8d 55 f0             	lea    -0x10(%ebp),%edx
f01036cf:	52                   	push   %edx
f01036d0:	6a 01                	push   $0x1
f01036d2:	ff 75 0c             	pushl  0xc(%ebp)
f01036d5:	50                   	push   %eax
f01036d6:	e8 61 fd ff ff       	call   f010343c <get_disk_page_table>
f01036db:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01036de:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01036e1:	8b 55 0c             	mov    0xc(%ebp),%edx
f01036e4:	c1 ea 0c             	shr    $0xc,%edx
f01036e7:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01036ed:	c1 e2 02             	shl    $0x2,%edx
f01036f0:	01 d0                	add    %edx,%eax
f01036f2:	8b 00                	mov    (%eax),%eax
f01036f4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f01036f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01036fa:	85 c0                	test   %eax,%eax
f01036fc:	75 34                	jne    f0103732 <pf_add_env_page+0xa9>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f01036fe:	83 ec 0c             	sub    $0xc,%esp
f0103701:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0103704:	50                   	push   %eax
f0103705:	e8 8a fb ff ff       	call   f0103294 <allocate_disk_frame>
f010370a:	83 c4 10             	add    $0x10,%esp
f010370d:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103710:	75 07                	jne    f0103719 <pf_add_env_page+0x90>
f0103712:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103717:	eb 31                	jmp    f010374a <pf_add_env_page+0xc1>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f0103719:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010371c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010371f:	c1 ea 0c             	shr    $0xc,%edx
f0103722:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103728:	c1 e2 02             	shl    $0x2,%edx
f010372b:	01 c2                	add    %eax,%edx
f010372d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103730:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f0103732:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103735:	83 ec 08             	sub    $0x8,%esp
f0103738:	ff 75 10             	pushl  0x10(%ebp)
f010373b:	50                   	push   %eax
f010373c:	e8 a6 f9 ff ff       	call   f01030e7 <write_disk_page>
f0103741:	83 c4 10             	add    $0x10,%esp
f0103744:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f0103747:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010374a:	c9                   	leave  
f010374b:	c3                   	ret    

f010374c <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f010374c:	55                   	push   %ebp
f010374d:	89 e5                	mov    %esp,%ebp
f010374f:	83 ec 38             	sub    $0x38,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f0103752:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103759:	76 19                	jbe    f0103774 <pf_update_env_page+0x28>
f010375b:	68 90 53 13 f0       	push   $0xf0135390
f0103760:	68 b6 53 13 f0       	push   $0xf01353b6
f0103765:	68 08 01 00 00       	push   $0x108
f010376a:	68 ff 52 13 f0       	push   $0xf01352ff
f010376f:	e8 87 ca ff ff       	call   f01001fb <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103774:	8b 45 08             	mov    0x8(%ebp),%eax
f0103777:	83 c0 64             	add    $0x64,%eax
f010377a:	83 ec 08             	sub    $0x8,%esp
f010377d:	50                   	push   %eax
f010377e:	ff 75 08             	pushl  0x8(%ebp)
f0103781:	e8 9d 04 00 00       	call   f0103c23 <get_disk_page_directory>
f0103786:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103789:	8b 45 08             	mov    0x8(%ebp),%eax
f010378c:	8b 40 64             	mov    0x64(%eax),%eax
f010378f:	8d 55 d8             	lea    -0x28(%ebp),%edx
f0103792:	52                   	push   %edx
f0103793:	6a 00                	push   $0x0
f0103795:	ff 75 0c             	pushl  0xc(%ebp)
f0103798:	50                   	push   %eax
f0103799:	e8 9e fc ff ff       	call   f010343c <get_disk_page_table>
f010379e:	83 c4 10             	add    $0x10,%esp

	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f01037a1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01037a4:	85 c0                	test   %eax,%eax
f01037a6:	74 29                	je     f01037d1 <pf_update_env_page+0x85>
f01037a8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01037ab:	85 c0                	test   %eax,%eax
f01037ad:	0f 84 43 01 00 00    	je     f01038f6 <pf_update_env_page+0x1aa>
f01037b3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01037b6:	8b 55 0c             	mov    0xc(%ebp),%edx
f01037b9:	c1 ea 0c             	shr    $0xc,%edx
f01037bc:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01037c2:	c1 e2 02             	shl    $0x2,%edx
f01037c5:	01 d0                	add    %edx,%eax
f01037c7:	8b 00                	mov    (%eax),%eax
f01037c9:	85 c0                	test   %eax,%eax
f01037cb:	0f 85 25 01 00 00    	jne    f01038f6 <pf_update_env_page+0x1aa>
	{
		uint32 VA = (uint32)virtual_address ;
f01037d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01037d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f01037d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01037da:	85 c0                	test   %eax,%eax
f01037dc:	79 09                	jns    f01037e7 <pf_update_env_page+0x9b>
f01037de:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f01037e5:	76 38                	jbe    f010381f <pf_update_env_page+0xd3>
f01037e7:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f01037ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01037f1:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f01037f6:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01037f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01037fc:	ba 00 00 00 00       	mov    $0x0,%edx
f0103801:	f7 75 f0             	divl   -0x10(%ebp)
f0103804:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103807:	29 d0                	sub    %edx,%eax
f0103809:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010380c:	0f 87 cd 00 00 00    	ja     f01038df <pf_update_env_page+0x193>
f0103812:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f0103819:	0f 87 c0 00 00 00    	ja     f01038df <pf_update_env_page+0x193>
		{
			uint32 *ptr_table ;
			struct FrameInfo* ptr_fi = get_frame_info(ptr_env->env_page_directory, virtual_address, &ptr_table);
f010381f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103822:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103825:	83 ec 04             	sub    $0x4,%esp
f0103828:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f010382b:	52                   	push   %edx
f010382c:	ff 75 0c             	pushl  0xc(%ebp)
f010382f:	50                   	push   %eax
f0103830:	e8 fa 34 00 00       	call   f0106d2f <get_frame_info>
f0103835:	83 c4 10             	add    $0x10,%esp
f0103838:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//if VA already mapped on the same modified_page_frame_info, then write it directly from the VA
			if (ptr_fi == modified_page_frame_info)
f010383b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010383e:	3b 45 10             	cmp    0x10(%ebp),%eax
f0103841:	75 52                	jne    f0103895 <pf_update_env_page+0x149>
			{
				ret = pf_add_env_page(ptr_env, VA, (void*)virtual_address) ;
f0103843:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103846:	83 ec 04             	sub    $0x4,%esp
f0103849:	50                   	push   %eax
f010384a:	ff 75 f4             	pushl  -0xc(%ebp)
f010384d:	ff 75 08             	pushl  0x8(%ebp)
f0103850:	e8 34 fe ff ff       	call   f0103689 <pf_add_env_page>
f0103855:	83 c4 10             	add    $0x10,%esp
f0103858:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f010385b:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f010385f:	75 17                	jne    f0103878 <pf_update_env_page+0x12c>
				{
					panic("pf_update_env_page: page file out of space!") ;
f0103861:	83 ec 04             	sub    $0x4,%esp
f0103864:	68 cc 53 13 f0       	push   $0xf01353cc
f0103869:	68 1d 01 00 00       	push   $0x11d
f010386e:	68 ff 52 13 f0       	push   $0xf01352ff
f0103873:	e8 83 c9 ff ff       	call   f01001fb <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0103878:	8b 45 08             	mov    0x8(%ebp),%eax
f010387b:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f0103881:	8d 50 01             	lea    0x1(%eax),%edx
f0103884:	8b 45 08             	mov    0x8(%ebp),%eax
f0103887:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
				return ret ;
f010388d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103890:	e9 17 01 00 00       	jmp    f01039ac <pf_update_env_page+0x260>
			}
			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f0103895:	83 ec 04             	sub    $0x4,%esp
f0103898:	6a 00                	push   $0x0
f010389a:	ff 75 f4             	pushl  -0xc(%ebp)
f010389d:	ff 75 08             	pushl  0x8(%ebp)
f01038a0:	e8 b3 fc ff ff       	call   f0103558 <pf_add_empty_env_page>
f01038a5:	83 c4 10             	add    $0x10,%esp
f01038a8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f01038ab:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f01038af:	75 17                	jne    f01038c8 <pf_update_env_page+0x17c>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f01038b1:	83 ec 04             	sub    $0x4,%esp
f01038b4:	68 f8 53 13 f0       	push   $0xf01353f8
f01038b9:	68 28 01 00 00       	push   $0x128
f01038be:	68 ff 52 13 f0       	push   $0xf01352ff
f01038c3:	e8 33 c9 ff ff       	call   f01001fb <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f01038c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01038cb:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f01038d1:	8d 50 01             	lea    0x1(%eax),%edx
f01038d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01038d7:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
	{
		uint32 VA = (uint32)virtual_address ;
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
		{
f01038dd:	eb 17                	jmp    f01038f6 <pf_update_env_page+0x1aa>
				ptr_env->nNewPageAdded++ ;
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f01038df:	83 ec 04             	sub    $0x4,%esp
f01038e2:	68 44 54 13 f0       	push   $0xf0135444
f01038e7:	68 2f 01 00 00       	push   $0x12f
f01038ec:	68 ff 52 13 f0       	push   $0xf01352ff
f01038f1:	e8 05 c9 ff ff       	call   f01001fb <_panic>
		}
	}
	//2022 END========================================

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f01038f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01038f9:	8b 40 64             	mov    0x64(%eax),%eax
f01038fc:	8d 55 d8             	lea    -0x28(%ebp),%edx
f01038ff:	52                   	push   %edx
f0103900:	6a 00                	push   $0x0
f0103902:	ff 75 0c             	pushl  0xc(%ebp)
f0103905:	50                   	push   %eax
f0103906:	e8 31 fb ff ff       	call   f010343c <get_disk_page_table>
f010390b:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010390e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103911:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103914:	c1 ea 0c             	shr    $0xc,%edx
f0103917:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010391d:	c1 e2 02             	shl    $0x2,%edx
f0103920:	01 d0                	add    %edx,%eax
f0103922:	8b 00                	mov    (%eax),%eax
f0103924:	89 45 e0             	mov    %eax,-0x20(%ebp)
#if USE_KHEAP
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unused VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(ptr_env->env_page_directory, modified_page_frame_info, USER_LIMIT, 0);
f0103927:	8b 45 08             	mov    0x8(%ebp),%eax
f010392a:	8b 40 5c             	mov    0x5c(%eax),%eax
f010392d:	6a 00                	push   $0x0
f010392f:	68 00 00 80 ef       	push   $0xef800000
f0103934:	ff 75 10             	pushl  0x10(%ebp)
f0103937:	50                   	push   %eax
f0103938:	e8 2d 33 00 00       	call   f0106c6a <map_frame>
f010393d:	83 c4 10             	add    $0x10,%esp
		ret = write_disk_page(dfn, (void*)ROUNDDOWN(USER_LIMIT, PAGE_SIZE));
f0103940:	c7 45 dc 00 00 80 ef 	movl   $0xef800000,-0x24(%ebp)
f0103947:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010394a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010394f:	83 ec 08             	sub    $0x8,%esp
f0103952:	50                   	push   %eax
f0103953:	ff 75 e0             	pushl  -0x20(%ebp)
f0103956:	e8 8c f7 ff ff       	call   f01030e7 <write_disk_page>
f010395b:	83 c4 10             	add    $0x10,%esp
f010395e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// TEMPORARILY increase the references to prevent unmap_frame from removing the frame
		modified_page_frame_info->references += 1;
f0103961:	8b 45 10             	mov    0x10(%ebp),%eax
f0103964:	8b 40 08             	mov    0x8(%eax),%eax
f0103967:	40                   	inc    %eax
f0103968:	8b 55 10             	mov    0x10(%ebp),%edx
f010396b:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(ptr_env->env_page_directory, USER_LIMIT);
f010396f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103972:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103975:	83 ec 08             	sub    $0x8,%esp
f0103978:	68 00 00 80 ef       	push   $0xef800000
f010397d:	50                   	push   %eax
f010397e:	e8 1c 34 00 00       	call   f0106d9f <unmap_frame>
f0103983:	83 c4 10             	add    $0x10,%esp
		// Return it to its original status
		modified_page_frame_info->references -= 1;
f0103986:	8b 45 10             	mov    0x10(%ebp),%eax
f0103989:	8b 40 08             	mov    0x8(%eax),%eax
f010398c:	48                   	dec    %eax
f010398d:	8b 55 10             	mov    0x10(%ebp),%edx
f0103990:	66 89 42 08          	mov    %ax,0x8(%edx)
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f0103994:	8b 45 08             	mov    0x8(%ebp),%eax
f0103997:	8b 80 50 05 00 00    	mov    0x550(%eax),%eax
f010399d:	8d 50 01             	lea    0x1(%eax),%edx
f01039a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01039a3:	89 90 50 05 00 00    	mov    %edx,0x550(%eax)
	//======================

	return ret;
f01039a9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f01039ac:	c9                   	leave  
f01039ad:	c3                   	ret    

f01039ae <pf_read_env_page>:

int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f01039ae:	55                   	push   %ebp
f01039af:	89 e5                	mov    %esp,%ebp
f01039b1:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f01039b4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01039b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01039ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01039bd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01039c2:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f01039c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01039c8:	8b 40 64             	mov    0x64(%eax),%eax
f01039cb:	85 c0                	test   %eax,%eax
f01039cd:	75 0a                	jne    f01039d9 <pf_read_env_page+0x2b>
f01039cf:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f01039d4:	e9 90 00 00 00       	jmp    f0103a69 <pf_read_env_page+0xbb>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f01039d9:	8b 55 0c             	mov    0xc(%ebp),%edx
f01039dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01039df:	8b 40 64             	mov    0x64(%eax),%eax
f01039e2:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f01039e5:	51                   	push   %ecx
f01039e6:	6a 00                	push   $0x0
f01039e8:	52                   	push   %edx
f01039e9:	50                   	push   %eax
f01039ea:	e8 4d fa ff ff       	call   f010343c <get_disk_page_table>
f01039ef:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f01039f2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01039f5:	85 c0                	test   %eax,%eax
f01039f7:	75 07                	jne    f0103a00 <pf_read_env_page+0x52>
f01039f9:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f01039fe:	eb 69                	jmp    f0103a69 <pf_read_env_page+0xbb>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103a00:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103a03:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103a06:	c1 ea 0c             	shr    $0xc,%edx
f0103a09:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103a0f:	c1 e2 02             	shl    $0x2,%edx
f0103a12:	01 d0                	add    %edx,%eax
f0103a14:	8b 00                	mov    (%eax),%eax
f0103a16:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103a19:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103a1d:	75 07                	jne    f0103a26 <pf_read_env_page+0x78>
f0103a1f:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103a24:	eb 43                	jmp    f0103a69 <pf_read_env_page+0xbb>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f0103a26:	83 ec 08             	sub    $0x8,%esp
f0103a29:	ff 75 0c             	pushl  0xc(%ebp)
f0103a2c:	ff 75 f0             	pushl  -0x10(%ebp)
f0103a2f:	e8 84 f6 ff ff       	call   f01030b8 <read_disk_page>
f0103a34:	83 c4 10             	add    $0x10,%esp
f0103a37:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f0103a3a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103a3d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a40:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103a43:	6a 40                	push   $0x40
f0103a45:	6a 00                	push   $0x0
f0103a47:	52                   	push   %edx
f0103a48:	50                   	push   %eax
f0103a49:	e8 cf 40 00 00       	call   f0107b1d <pt_set_page_permissions>
f0103a4e:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f0103a51:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a54:	8b 80 4c 05 00 00    	mov    0x54c(%eax),%eax
f0103a5a:	8d 50 01             	lea    0x1(%eax),%edx
f0103a5d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a60:	89 90 4c 05 00 00    	mov    %edx,0x54c(%eax)
	//======================

	return disk_read_error;
f0103a66:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f0103a69:	c9                   	leave  
f0103a6a:	c3                   	ret    

f0103a6b <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f0103a6b:	55                   	push   %ebp
f0103a6c:	89 e5                	mov    %esp,%ebp
f0103a6e:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103a71:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a74:	8b 40 64             	mov    0x64(%eax),%eax
f0103a77:	85 c0                	test   %eax,%eax
f0103a79:	74 62                	je     f0103add <pf_remove_env_page+0x72>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103a7b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a7e:	8b 40 64             	mov    0x64(%eax),%eax
f0103a81:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103a84:	52                   	push   %edx
f0103a85:	6a 00                	push   $0x0
f0103a87:	ff 75 0c             	pushl  0xc(%ebp)
f0103a8a:	50                   	push   %eax
f0103a8b:	e8 ac f9 ff ff       	call   f010343c <get_disk_page_table>
f0103a90:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f0103a93:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103a96:	85 c0                	test   %eax,%eax
f0103a98:	74 46                	je     f0103ae0 <pf_remove_env_page+0x75>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103a9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103a9d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103aa0:	c1 ea 0c             	shr    $0xc,%edx
f0103aa3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103aa9:	c1 e2 02             	shl    $0x2,%edx
f0103aac:	01 d0                	add    %edx,%eax
f0103aae:	8b 00                	mov    (%eax),%eax
f0103ab0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f0103ab3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103ab6:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103ab9:	c1 ea 0c             	shr    $0xc,%edx
f0103abc:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103ac2:	c1 e2 02             	shl    $0x2,%edx
f0103ac5:	01 d0                	add    %edx,%eax
f0103ac7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0103acd:	83 ec 0c             	sub    $0xc,%esp
f0103ad0:	ff 75 f4             	pushl  -0xc(%ebp)
f0103ad3:	e8 83 f8 ff ff       	call   f010335b <free_disk_frame>
f0103ad8:	83 c4 10             	add    $0x10,%esp
f0103adb:	eb 04                	jmp    f0103ae1 <pf_remove_env_page+0x76>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103add:	90                   	nop
f0103ade:	eb 01                	jmp    f0103ae1 <pf_remove_env_page+0x76>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f0103ae0:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103ae1:	c9                   	leave  
f0103ae2:	c3                   	ret    

f0103ae3 <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f0103ae3:	55                   	push   %ebp
f0103ae4:	89 e5                	mov    %esp,%ebp
f0103ae6:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103ae9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103af0:	e9 b8 00 00 00       	jmp    f0103bad <pf_free_env+0xca>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f0103af5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103af8:	8b 40 64             	mov    0x64(%eax),%eax
f0103afb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103afe:	c1 e2 02             	shl    $0x2,%edx
f0103b01:	01 d0                	add    %edx,%eax
f0103b03:	8b 00                	mov    (%eax),%eax
f0103b05:	83 e0 01             	and    $0x1,%eax
f0103b08:	85 c0                	test   %eax,%eax
f0103b0a:	0f 84 99 00 00 00    	je     f0103ba9 <pf_free_env+0xc6>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f0103b10:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b13:	8b 40 64             	mov    0x64(%eax),%eax
f0103b16:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103b19:	c1 e2 02             	shl    $0x2,%edx
f0103b1c:	01 d0                	add    %edx,%eax
f0103b1e:	8b 00                	mov    (%eax),%eax
f0103b20:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103b25:	89 45 ec             	mov    %eax,-0x14(%ebp)
		uint32 *pt;
#if USE_KHEAP
		{
			pt = (uint32*) kheap_virtual_address(pa);
f0103b28:	83 ec 0c             	sub    $0xc,%esp
f0103b2b:	ff 75 ec             	pushl  -0x14(%ebp)
f0103b2e:	e8 b4 3e 00 00       	call   f01079e7 <kheap_virtual_address>
f0103b33:	83 c4 10             	add    $0x10,%esp
f0103b36:	89 45 e8             	mov    %eax,-0x18(%ebp)
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103b39:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0103b40:	eb 3a                	jmp    f0103b7c <pf_free_env+0x99>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f0103b42:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b45:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103b4c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103b4f:	01 d0                	add    %edx,%eax
f0103b51:	8b 00                	mov    (%eax),%eax
f0103b53:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			pt[pteno] = 0;
f0103b56:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b59:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103b60:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103b63:	01 d0                	add    %edx,%eax
f0103b65:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f0103b6b:	83 ec 0c             	sub    $0xc,%esp
f0103b6e:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103b71:	e8 e5 f7 ff ff       	call   f010335b <free_disk_frame>
f0103b76:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103b79:	ff 45 f0             	incl   -0x10(%ebp)
f0103b7c:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f0103b83:	76 bd                	jbe    f0103b42 <pf_free_env+0x5f>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f0103b85:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b88:	8b 40 64             	mov    0x64(%eax),%eax
f0103b8b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103b8e:	c1 e2 02             	shl    $0x2,%edx
f0103b91:	01 d0                	add    %edx,%eax
f0103b93:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
#if USE_KHEAP
		{
			kfree(pt);
f0103b99:	83 ec 0c             	sub    $0xc,%esp
f0103b9c:	ff 75 e8             	pushl  -0x18(%ebp)
f0103b9f:	e8 1c 3d 00 00       	call   f01078c0 <kfree>
f0103ba4:	83 c4 10             	add    $0x10,%esp
f0103ba7:	eb 01                	jmp    f0103baa <pf_free_env+0xc7>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f0103ba9:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103baa:	ff 45 f4             	incl   -0xc(%ebp)
f0103bad:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103bb4:	0f 86 3b ff ff ff    	jbe    f0103af5 <pf_free_env+0x12>
	}

	// free the disk page directory of the environment
#if USE_KHEAP
	{
		kfree(ptr_env->disk_env_pgdir);
f0103bba:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bbd:	8b 40 64             	mov    0x64(%eax),%eax
f0103bc0:	83 ec 0c             	sub    $0xc,%esp
f0103bc3:	50                   	push   %eax
f0103bc4:	e8 f7 3c 00 00       	call   f01078c0 <kfree>
f0103bc9:	83 c4 10             	add    $0x10,%esp
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f0103bcc:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bcf:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	ptr_env->disk_env_pgdir_PA = 0;
f0103bd6:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bd9:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f0103be0:	8b 45 08             	mov    0x8(%ebp),%eax
f0103be3:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103be6:	85 c0                	test   %eax,%eax
f0103be8:	74 36                	je     f0103c20 <pf_free_env+0x13d>
		return;
	__pf_remove_env_all_tables(ptr_env);
f0103bea:	83 ec 0c             	sub    $0xc,%esp
f0103bed:	ff 75 08             	pushl  0x8(%ebp)
f0103bf0:	e8 05 03 00 00       	call   f0103efa <__pf_remove_env_all_tables>
f0103bf5:	83 c4 10             	add    $0x10,%esp


#if USE_KHEAP
	{
		kfree(ptr_env->disk_env_tabledir);
f0103bf8:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bfb:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103bfe:	83 ec 0c             	sub    $0xc,%esp
f0103c01:	50                   	push   %eax
f0103c02:	e8 b9 3c 00 00       	call   f01078c0 <kfree>
f0103c07:	83 c4 10             	add    $0x10,%esp
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f0103c0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c0d:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	ptr_env->disk_env_tabledir_PA = 0;
f0103c14:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c17:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
f0103c1e:	eb 01                	jmp    f0103c21 <pf_free_env+0x13e>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f0103c20:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f0103c21:	c9                   	leave  
f0103c22:	c3                   	ret    

f0103c23 <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f0103c23:	55                   	push   %ebp
f0103c24:	89 e5                	mov    %esp,%ebp
f0103c26:	83 ec 08             	sub    $0x8,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f0103c29:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c2c:	8b 50 64             	mov    0x64(%eax),%edx
f0103c2f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c32:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f0103c34:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c37:	8b 00                	mov    (%eax),%eax
f0103c39:	85 c0                	test   %eax,%eax
f0103c3b:	75 58                	jne    f0103c95 <get_disk_page_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
#if USE_KHEAP
		{
			*ptr_disk_page_directory = kmalloc(PAGE_SIZE);
f0103c3d:	83 ec 0c             	sub    $0xc,%esp
f0103c40:	68 00 10 00 00       	push   $0x1000
f0103c45:	e8 b4 3b 00 00       	call   f01077fe <kmalloc>
f0103c4a:	83 c4 10             	add    $0x10,%esp
f0103c4d:	89 c2                	mov    %eax,%edx
f0103c4f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c52:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_page_directory == NULL)
f0103c54:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c57:	8b 00                	mov    (%eax),%eax
f0103c59:	85 c0                	test   %eax,%eax
f0103c5b:	75 07                	jne    f0103c64 <get_disk_page_directory+0x41>
			{
				return E_NO_VM;
f0103c5d:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103c62:	eb 36                	jmp    f0103c9a <get_disk_page_directory+0x77>
			}
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
f0103c64:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c67:	8b 00                	mov    (%eax),%eax
f0103c69:	83 ec 0c             	sub    $0xc,%esp
f0103c6c:	50                   	push   %eax
f0103c6d:	e8 a1 3d 00 00       	call   f0107a13 <kheap_physical_address>
f0103c72:	83 c4 10             	add    $0x10,%esp
f0103c75:	89 c2                	mov    %eax,%edx
f0103c77:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c7a:	89 50 68             	mov    %edx,0x68(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f0103c7d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c80:	8b 00                	mov    (%eax),%eax
f0103c82:	83 ec 04             	sub    $0x4,%esp
f0103c85:	68 00 10 00 00       	push   $0x1000
f0103c8a:	6a 00                	push   $0x0
f0103c8c:	50                   	push   %eax
f0103c8d:	e8 e6 d1 02 00       	call   f0130e78 <memset>
f0103c92:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103c95:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103c9a:	c9                   	leave  
f0103c9b:	c3                   	ret    

f0103c9c <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f0103c9c:	55                   	push   %ebp
f0103c9d:	89 e5                	mov    %esp,%ebp
f0103c9f:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f0103ca2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103ca9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103cb0:	eb 78                	jmp    f0103d2a <pf_calculate_allocated_pages+0x8e>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f0103cb2:	8b 45 08             	mov    0x8(%ebp),%eax
f0103cb5:	8b 40 64             	mov    0x64(%eax),%eax
f0103cb8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103cbb:	c1 e2 02             	shl    $0x2,%edx
f0103cbe:	01 d0                	add    %edx,%eax
f0103cc0:	8b 00                	mov    (%eax),%eax
f0103cc2:	83 e0 01             	and    $0x1,%eax
f0103cc5:	85 c0                	test   %eax,%eax
f0103cc7:	74 5d                	je     f0103d26 <pf_calculate_allocated_pages+0x8a>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f0103cc9:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ccc:	8b 40 64             	mov    0x64(%eax),%eax
f0103ccf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103cd2:	c1 e2 02             	shl    $0x2,%edx
f0103cd5:	01 d0                	add    %edx,%eax
f0103cd7:	8b 00                	mov    (%eax),%eax
f0103cd9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103cde:	89 45 e8             	mov    %eax,-0x18(%ebp)
#if USE_KHEAP
		{
			pt = (uint32*) kheap_virtual_address(pa);
f0103ce1:	83 ec 0c             	sub    $0xc,%esp
f0103ce4:	ff 75 e8             	pushl  -0x18(%ebp)
f0103ce7:	e8 fb 3c 00 00       	call   f01079e7 <kheap_virtual_address>
f0103cec:	83 c4 10             	add    $0x10,%esp
f0103cef:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103cf2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0103cf9:	eb 20                	jmp    f0103d1b <pf_calculate_allocated_pages+0x7f>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f0103cfb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103cfe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103d05:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103d08:	01 d0                	add    %edx,%eax
f0103d0a:	8b 00                	mov    (%eax),%eax
f0103d0c:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if(dfn != 0)
f0103d0f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0103d13:	74 03                	je     f0103d18 <pf_calculate_allocated_pages+0x7c>
				counter ++;
f0103d15:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103d18:	ff 45 ec             	incl   -0x14(%ebp)
f0103d1b:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f0103d22:	76 d7                	jbe    f0103cfb <pf_calculate_allocated_pages+0x5f>
f0103d24:	eb 01                	jmp    f0103d27 <pf_calculate_allocated_pages+0x8b>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f0103d26:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103d27:	ff 45 f4             	incl   -0xc(%ebp)
f0103d2a:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103d31:	0f 86 7b ff ff ff    	jbe    f0103cb2 <pf_calculate_allocated_pages+0x16>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f0103d37:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103d3a:	c9                   	leave  
f0103d3b:	c3                   	ret    

f0103d3c <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f0103d3c:	55                   	push   %ebp
f0103d3d:	89 e5                	mov    %esp,%ebp
f0103d3f:	83 ec 10             	sub    $0x10,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f0103d42:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103d49:	a1 b8 7b 65 f0       	mov    0xf0657bb8,%eax
f0103d4e:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103d51:	eb 0b                	jmp    f0103d5e <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f0103d53:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103d56:	a1 c0 7b 65 f0       	mov    0xf0657bc0,%eax
f0103d5b:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103d5e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103d62:	74 07                	je     f0103d6b <pf_calculate_free_frames+0x2f>
f0103d64:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0103d67:	8b 00                	mov    (%eax),%eax
f0103d69:	eb 05                	jmp    f0103d70 <pf_calculate_free_frames+0x34>
f0103d6b:	b8 00 00 00 00       	mov    $0x0,%eax
f0103d70:	a3 c0 7b 65 f0       	mov    %eax,0xf0657bc0
f0103d75:	a1 c0 7b 65 f0       	mov    0xf0657bc0,%eax
f0103d7a:	85 c0                	test   %eax,%eax
f0103d7c:	75 d5                	jne    f0103d53 <pf_calculate_free_frames+0x17>
f0103d7e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103d82:	75 cf                	jne    f0103d53 <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f0103d84:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0103d87:	c9                   	leave  
f0103d88:	c3                   	ret    

f0103d89 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f0103d89:	55                   	push   %ebp
f0103d8a:	89 e5                	mov    %esp,%ebp
f0103d8c:	83 ec 08             	sub    $0x8,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f0103d8f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d92:	8b 50 6c             	mov    0x6c(%eax),%edx
f0103d95:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d98:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f0103d9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d9d:	8b 00                	mov    (%eax),%eax
f0103d9f:	85 c0                	test   %eax,%eax
f0103da1:	75 58                	jne    f0103dfb <get_disk_table_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
#if USE_KHEAP
		{
			*ptr_disk_table_directory = kmalloc(PAGE_SIZE);
f0103da3:	83 ec 0c             	sub    $0xc,%esp
f0103da6:	68 00 10 00 00       	push   $0x1000
f0103dab:	e8 4e 3a 00 00       	call   f01077fe <kmalloc>
f0103db0:	83 c4 10             	add    $0x10,%esp
f0103db3:	89 c2                	mov    %eax,%edx
f0103db5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103db8:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_table_directory == NULL)
f0103dba:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103dbd:	8b 00                	mov    (%eax),%eax
f0103dbf:	85 c0                	test   %eax,%eax
f0103dc1:	75 07                	jne    f0103dca <get_disk_table_directory+0x41>
			{
				return E_NO_VM;
f0103dc3:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103dc8:	eb 36                	jmp    f0103e00 <get_disk_table_directory+0x77>
			}
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
f0103dca:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103dcd:	8b 00                	mov    (%eax),%eax
f0103dcf:	83 ec 0c             	sub    $0xc,%esp
f0103dd2:	50                   	push   %eax
f0103dd3:	e8 3b 3c 00 00       	call   f0107a13 <kheap_physical_address>
f0103dd8:	83 c4 10             	add    $0x10,%esp
f0103ddb:	89 c2                	mov    %eax,%edx
f0103ddd:	8b 45 08             	mov    0x8(%ebp),%eax
f0103de0:	89 50 70             	mov    %edx,0x70(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f0103de3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103de6:	8b 00                	mov    (%eax),%eax
f0103de8:	83 ec 04             	sub    $0x4,%esp
f0103deb:	68 00 10 00 00       	push   $0x1000
f0103df0:	6a 00                	push   $0x0
f0103df2:	50                   	push   %eax
f0103df3:	e8 80 d0 02 00       	call   f0130e78 <memset>
f0103df8:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103dfb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103e00:	c9                   	leave  
f0103e01:	c3                   	ret    

f0103e02 <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103e02:	55                   	push   %ebp
f0103e03:	89 e5                	mov    %esp,%ebp
f0103e05:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f0103e08:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103e0f:	76 19                	jbe    f0103e2a <__pf_write_env_table+0x28>
f0103e11:	68 90 53 13 f0       	push   $0xf0135390
f0103e16:	68 b6 53 13 f0       	push   $0xf01353b6
f0103e1b:	68 5a 02 00 00       	push   $0x25a
f0103e20:	68 ff 52 13 f0       	push   $0xf01352ff
f0103e25:	e8 d1 c3 ff ff       	call   f01001fb <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f0103e2a:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e2d:	83 c0 6c             	add    $0x6c,%eax
f0103e30:	83 ec 08             	sub    $0x8,%esp
f0103e33:	50                   	push   %eax
f0103e34:	ff 75 08             	pushl  0x8(%ebp)
f0103e37:	e8 4d ff ff ff       	call   f0103d89 <get_disk_table_directory>
f0103e3c:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103e3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e42:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103e45:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e48:	c1 ea 16             	shr    $0x16,%edx
f0103e4b:	c1 e2 02             	shl    $0x2,%edx
f0103e4e:	01 d0                	add    %edx,%eax
f0103e50:	8b 00                	mov    (%eax),%eax
f0103e52:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f0103e55:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103e58:	85 c0                	test   %eax,%eax
f0103e5a:	75 31                	jne    f0103e8d <__pf_write_env_table+0x8b>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103e5c:	83 ec 0c             	sub    $0xc,%esp
f0103e5f:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0103e62:	50                   	push   %eax
f0103e63:	e8 2c f4 ff ff       	call   f0103294 <allocate_disk_frame>
f0103e68:	83 c4 10             	add    $0x10,%esp
f0103e6b:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103e6e:	75 07                	jne    f0103e77 <__pf_write_env_table+0x75>
f0103e70:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103e75:	eb 2e                	jmp    f0103ea5 <__pf_write_env_table+0xa3>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f0103e77:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e7a:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103e7d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e80:	c1 ea 16             	shr    $0x16,%edx
f0103e83:	c1 e2 02             	shl    $0x2,%edx
f0103e86:	01 c2                	add    %eax,%edx
f0103e88:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103e8b:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f0103e8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103e90:	83 ec 08             	sub    $0x8,%esp
f0103e93:	ff 75 10             	pushl  0x10(%ebp)
f0103e96:	50                   	push   %eax
f0103e97:	e8 4b f2 ff ff       	call   f01030e7 <write_disk_page>
f0103e9c:	83 c4 10             	add    $0x10,%esp
f0103e9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f0103ea2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103ea5:	c9                   	leave  
f0103ea6:	c3                   	ret    

f0103ea7 <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103ea7:	55                   	push   %ebp
f0103ea8:	89 e5                	mov    %esp,%ebp
f0103eaa:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103ead:	8b 45 08             	mov    0x8(%ebp),%eax
f0103eb0:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103eb3:	85 c0                	test   %eax,%eax
f0103eb5:	75 07                	jne    f0103ebe <__pf_read_env_table+0x17>
f0103eb7:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103ebc:	eb 3a                	jmp    f0103ef8 <__pf_read_env_table+0x51>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103ebe:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ec1:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103ec4:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103ec7:	c1 ea 16             	shr    $0x16,%edx
f0103eca:	c1 e2 02             	shl    $0x2,%edx
f0103ecd:	01 d0                	add    %edx,%eax
f0103ecf:	8b 00                	mov    (%eax),%eax
f0103ed1:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103ed4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103ed8:	75 07                	jne    f0103ee1 <__pf_read_env_table+0x3a>
f0103eda:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103edf:	eb 17                	jmp    f0103ef8 <__pf_read_env_table+0x51>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f0103ee1:	83 ec 08             	sub    $0x8,%esp
f0103ee4:	ff 75 10             	pushl  0x10(%ebp)
f0103ee7:	ff 75 f4             	pushl  -0xc(%ebp)
f0103eea:	e8 c9 f1 ff ff       	call   f01030b8 <read_disk_page>
f0103eef:	83 c4 10             	add    $0x10,%esp
f0103ef2:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f0103ef5:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103ef8:	c9                   	leave  
f0103ef9:	c3                   	ret    

f0103efa <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f0103efa:	55                   	push   %ebp
f0103efb:	89 e5                	mov    %esp,%ebp
f0103efd:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103f00:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f03:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f06:	85 c0                	test   %eax,%eax
f0103f08:	74 4c                	je     f0103f56 <__pf_remove_env_all_tables+0x5c>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103f0a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103f11:	eb 38                	jmp    f0103f4b <__pf_remove_env_all_tables+0x51>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f0103f13:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f16:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f19:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103f1c:	c1 e2 02             	shl    $0x2,%edx
f0103f1f:	01 d0                	add    %edx,%eax
f0103f21:	8b 00                	mov    (%eax),%eax
f0103f23:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f0103f26:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f29:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f2c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103f2f:	c1 e2 02             	shl    $0x2,%edx
f0103f32:	01 d0                	add    %edx,%eax
f0103f34:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f0103f3a:	83 ec 0c             	sub    $0xc,%esp
f0103f3d:	ff 75 f0             	pushl  -0x10(%ebp)
f0103f40:	e8 16 f4 ff ff       	call   f010335b <free_disk_frame>
f0103f45:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103f48:	ff 45 f4             	incl   -0xc(%ebp)
f0103f4b:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103f52:	76 bf                	jbe    f0103f13 <__pf_remove_env_all_tables+0x19>
f0103f54:	eb 01                	jmp    f0103f57 <__pf_remove_env_all_tables+0x5d>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103f56:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103f57:	c9                   	leave  
f0103f58:	c3                   	ret    

f0103f59 <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f0103f59:	55                   	push   %ebp
f0103f5a:	89 e5                	mov    %esp,%ebp
f0103f5c:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f0103f5f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0103f63:	75 10                	jne    f0103f75 <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f0103f65:	83 ec 0c             	sub    $0xc,%esp
f0103f68:	68 c0 54 13 f0       	push   $0xf01354c0
f0103f6d:	e8 10 cd ff ff       	call   f0100c82 <cprintf>
f0103f72:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f0103f75:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f78:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f7b:	85 c0                	test   %eax,%eax
f0103f7d:	74 3d                	je     f0103fbc <__pf_remove_env_table+0x63>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103f7f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f82:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f85:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f88:	c1 ea 16             	shr    $0x16,%edx
f0103f8b:	c1 e2 02             	shl    $0x2,%edx
f0103f8e:	01 d0                	add    %edx,%eax
f0103f90:	8b 00                	mov    (%eax),%eax
f0103f92:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f0103f95:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f98:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f9b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f9e:	c1 ea 16             	shr    $0x16,%edx
f0103fa1:	c1 e2 02             	shl    $0x2,%edx
f0103fa4:	01 d0                	add    %edx,%eax
f0103fa6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0103fac:	83 ec 0c             	sub    $0xc,%esp
f0103faf:	ff 75 f4             	pushl  -0xc(%ebp)
f0103fb2:	e8 a4 f3 ff ff       	call   f010335b <free_disk_frame>
f0103fb7:	83 c4 10             	add    $0x10,%esp
f0103fba:	eb 01                	jmp    f0103fbd <__pf_remove_env_table+0x64>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f0103fbc:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f0103fbd:	c9                   	leave  
f0103fbe:	c3                   	ret    

f0103fbf <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f0103fbf:	55                   	push   %ebp
f0103fc0:	89 e5                	mov    %esp,%ebp
f0103fc2:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f0103fc5:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f0103fcc:	eb 1f                	jmp    f0103fed <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f0103fce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103fd1:	83 ec 04             	sub    $0x4,%esp
f0103fd4:	6a 08                	push   $0x8
f0103fd6:	ff 75 08             	pushl  0x8(%ebp)
f0103fd9:	50                   	push   %eax
f0103fda:	e8 3e d5 02 00       	call   f013151d <ide_write>
f0103fdf:	83 c4 10             	add    $0x10,%esp
f0103fe2:	85 c0                	test   %eax,%eax
f0103fe4:	75 12                	jne    f0103ff8 <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f0103fe6:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f0103fed:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f0103ff4:	7e d8                	jle    f0103fce <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0103ff6:	eb 01                	jmp    f0103ff9 <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f0103ff8:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0103ff9:	90                   	nop
f0103ffa:	c9                   	leave  
f0103ffb:	c3                   	ret    

f0103ffc <mc146818_read>:
#include <kern/cpu/picirq.h>


unsigned
mc146818_read(unsigned reg)
{
f0103ffc:	55                   	push   %ebp
f0103ffd:	89 e5                	mov    %esp,%ebp
f0103fff:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0104002:	8b 45 08             	mov    0x8(%ebp),%eax
f0104005:	0f b6 c0             	movzbl %al,%eax
f0104008:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f010400f:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104012:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104015:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104018:	ee                   	out    %al,(%dx)
f0104019:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104020:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104023:	89 c2                	mov    %eax,%edx
f0104025:	ec                   	in     (%dx),%al
f0104026:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0104029:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f010402c:	0f b6 c0             	movzbl %al,%eax
}
f010402f:	c9                   	leave  
f0104030:	c3                   	ret    

f0104031 <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f0104031:	55                   	push   %ebp
f0104032:	89 e5                	mov    %esp,%ebp
f0104034:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0104037:	8b 45 08             	mov    0x8(%ebp),%eax
f010403a:	0f b6 c0             	movzbl %al,%eax
f010403d:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0104044:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104047:	8a 45 f6             	mov    -0xa(%ebp),%al
f010404a:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010404d:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f010404e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104051:	0f b6 c0             	movzbl %al,%eax
f0104054:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f010405b:	88 45 f7             	mov    %al,-0x9(%ebp)
f010405e:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104061:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0104064:	ee                   	out    %al,(%dx)
}
f0104065:	90                   	nop
f0104066:	c9                   	leave  
f0104067:	c3                   	ret    

f0104068 <kclock_start>:


void
kclock_start(uint8 quantum_in_ms)
{
f0104068:	55                   	push   %ebp
f0104069:	89 e5                	mov    %esp,%ebp
f010406b:	53                   	push   %ebx
f010406c:	83 ec 24             	sub    $0x24,%esp
f010406f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104072:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104075:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f010407c:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104080:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104083:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104086:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104087:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f010408b:	77 48                	ja     f01040d5 <kclock_start+0x6d>
f010408d:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104094:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f0104098:	8a 45 ee             	mov    -0x12(%ebp),%al
f010409b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010409e:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f010409f:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01040a3:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f01040a8:	99                   	cltd   
f01040a9:	f7 fb                	idiv   %ebx
f01040ab:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f01040b1:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01040b5:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f01040ba:	99                   	cltd   
f01040bb:	f7 fb                	idiv   %ebx
f01040bd:	89 c3                	mov    %eax,%ebx
f01040bf:	89 c8                	mov    %ecx,%eax
f01040c1:	99                   	cltd   
f01040c2:	f7 fb                	idiv   %ebx
f01040c4:	0f b7 c0             	movzwl %ax,%eax
f01040c7:	83 ec 0c             	sub    $0xc,%esp
f01040ca:	50                   	push   %eax
f01040cb:	e8 b8 01 00 00       	call   f0104288 <kclock_write_cnt0_LSB_first>
f01040d0:	83 c4 10             	add    $0x10,%esp
f01040d3:	eb 13                	jmp    f01040e8 <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f01040d5:	6a 35                	push   $0x35
f01040d7:	68 e4 54 13 f0       	push   $0xf01354e4
f01040dc:	6a 33                	push   $0x33
f01040de:	68 40 55 13 f0       	push   $0xf0135540
f01040e3:	e8 13 c1 ff ff       	call   f01001fb <_panic>
//	cprintf("c = %d\n", c) ;

//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f01040e8:	66 a1 b0 18 19 f0    	mov    0xf01918b0,%ax
f01040ee:	0f b7 c0             	movzwl %ax,%eax
f01040f1:	25 fe ff 00 00       	and    $0xfffe,%eax
f01040f6:	83 ec 0c             	sub    $0xc,%esp
f01040f9:	50                   	push   %eax
f01040fa:	e8 71 1b 00 00       	call   f0105c70 <irq_setmask_8259A>
f01040ff:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f0104102:	90                   	nop
f0104103:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104106:	c9                   	leave  
f0104107:	c3                   	ret    

f0104108 <kclock_stop>:

void
kclock_stop(void)
{
f0104108:	55                   	push   %ebp
f0104109:	89 e5                	mov    %esp,%ebp
f010410b:	83 ec 18             	sub    $0x18,%esp
f010410e:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104115:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104119:	8a 45 f3             	mov    -0xd(%ebp),%al
f010411c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010411f:	ee                   	out    %al,(%dx)
//	for (int i = 0 ; i <20; i++)
//	{
//		cnt0 = kclock_read_cnt0();
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}
	irq_setmask_8259A(0xFFFF);
f0104120:	83 ec 0c             	sub    $0xc,%esp
f0104123:	68 ff ff 00 00       	push   $0xffff
f0104128:	e8 43 1b 00 00       	call   f0105c70 <irq_setmask_8259A>
f010412d:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f0104130:	90                   	nop
f0104131:	c9                   	leave  
f0104132:	c3                   	ret    

f0104133 <kclock_resume>:

void
kclock_resume(void)
{
f0104133:	55                   	push   %ebp
f0104134:	89 e5                	mov    %esp,%ebp
f0104136:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f0104139:	e8 8c 01 00 00       	call   f01042ca <kclock_read_cnt0>
f010413e:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f0104142:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f0104147:	77 06                	ja     f010414f <kclock_resume+0x1c>
	{
		cnt0 = 20;
f0104149:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f010414f:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0104153:	83 e0 01             	and    $0x1,%eax
f0104156:	66 85 c0             	test   %ax,%ax
f0104159:	74 09                	je     f0104164 <kclock_resume+0x31>
		cnt0++;
f010415b:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f010415f:	40                   	inc    %eax
f0104160:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f0104164:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f010416b:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f010416f:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104172:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104175:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104176:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f010417a:	83 ec 0c             	sub    $0xc,%esp
f010417d:	50                   	push   %eax
f010417e:	e8 05 01 00 00       	call   f0104288 <kclock_write_cnt0_LSB_first>
f0104183:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104186:	66 a1 b0 18 19 f0    	mov    0xf01918b0,%ax
f010418c:	0f b7 c0             	movzwl %ax,%eax
f010418f:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104194:	83 ec 0c             	sub    $0xc,%esp
f0104197:	50                   	push   %eax
f0104198:	e8 d3 1a 00 00       	call   f0105c70 <irq_setmask_8259A>
f010419d:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f01041a0:	90                   	nop
f01041a1:	c9                   	leave  
f01041a2:	c3                   	ret    

f01041a3 <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f01041a3:	55                   	push   %ebp
f01041a4:	89 e5                	mov    %esp,%ebp
f01041a6:	83 ec 28             	sub    $0x28,%esp
f01041a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01041ac:	88 45 e4             	mov    %al,-0x1c(%ebp)
f01041af:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01041b6:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f01041ba:	8a 45 f3             	mov    -0xd(%ebp),%al
f01041bd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01041c0:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f01041c1:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f01041c5:	83 ec 0c             	sub    $0xc,%esp
f01041c8:	50                   	push   %eax
f01041c9:	e8 ba 00 00 00       	call   f0104288 <kclock_write_cnt0_LSB_first>
f01041ce:	83 c4 10             	add    $0x10,%esp
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f01041d1:	66 a1 b0 18 19 f0    	mov    0xf01918b0,%ax
f01041d7:	0f b7 c0             	movzwl %ax,%eax
f01041da:	25 fe ff 00 00       	and    $0xfffe,%eax
f01041df:	83 ec 0c             	sub    $0xc,%esp
f01041e2:	50                   	push   %eax
f01041e3:	e8 88 1a 00 00       	call   f0105c70 <irq_setmask_8259A>
f01041e8:	83 c4 10             	add    $0x10,%esp

}
f01041eb:	90                   	nop
f01041ec:	c9                   	leave  
f01041ed:	c3                   	ret    

f01041ee <kclock_set_quantum>:
//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f01041ee:	55                   	push   %ebp
f01041ef:	89 e5                	mov    %esp,%ebp
f01041f1:	53                   	push   %ebx
f01041f2:	83 ec 24             	sub    $0x24,%esp
f01041f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01041f8:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f01041fb:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f01041ff:	77 6c                	ja     f010426d <kclock_set_quantum+0x7f>
	{
		int cnt = TIMER_DIV((1000/quantum_in_ms));
f0104201:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104205:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f010420a:	99                   	cltd   
f010420b:	f7 fb                	idiv   %ebx
f010420d:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104213:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104217:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f010421c:	99                   	cltd   
f010421d:	f7 fb                	idiv   %ebx
f010421f:	89 c3                	mov    %eax,%ebx
f0104221:	89 c8                	mov    %ecx,%eax
f0104223:	99                   	cltd   
f0104224:	f7 fb                	idiv   %ebx
f0104226:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cnt%2 == 1)
f0104229:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010422c:	25 01 00 00 80       	and    $0x80000001,%eax
f0104231:	85 c0                	test   %eax,%eax
f0104233:	79 05                	jns    f010423a <kclock_set_quantum+0x4c>
f0104235:	48                   	dec    %eax
f0104236:	83 c8 fe             	or     $0xfffffffe,%eax
f0104239:	40                   	inc    %eax
f010423a:	83 f8 01             	cmp    $0x1,%eax
f010423d:	75 03                	jne    f0104242 <kclock_set_quantum+0x54>
			cnt++;
f010423f:	ff 45 f4             	incl   -0xc(%ebp)
f0104242:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104249:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f010424d:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104250:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104253:	ee                   	out    %al,(%dx)

		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f0104254:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104257:	0f b7 c0             	movzwl %ax,%eax
f010425a:	83 ec 0c             	sub    $0xc,%esp
f010425d:	50                   	push   %eax
f010425e:	e8 25 00 00 00       	call   f0104288 <kclock_write_cnt0_LSB_first>
f0104263:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f0104266:	e8 9d fe ff ff       	call   f0104108 <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f010426b:	eb 16                	jmp    f0104283 <kclock_set_quantum+0x95>
		kclock_stop();
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f010426d:	6a 35                	push   $0x35
f010426f:	68 e4 54 13 f0       	push   $0xf01354e4
f0104274:	68 c9 00 00 00       	push   $0xc9
f0104279:	68 40 55 13 f0       	push   $0xf0135540
f010427e:	e8 78 bf ff ff       	call   f01001fb <_panic>
	}
}
f0104283:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104286:	c9                   	leave  
f0104287:	c3                   	ret    

f0104288 <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f0104288:	55                   	push   %ebp
f0104289:	89 e5                	mov    %esp,%ebp
f010428b:	83 ec 14             	sub    $0x14,%esp
f010428e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104291:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f0104295:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104298:	0f b6 c0             	movzbl %al,%eax
f010429b:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f01042a2:	88 45 f6             	mov    %al,-0xa(%ebp)
f01042a5:	8a 45 f6             	mov    -0xa(%ebp),%al
f01042a8:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01042ab:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f01042ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01042af:	66 c1 e8 08          	shr    $0x8,%ax
f01042b3:	0f b6 c0             	movzbl %al,%eax
f01042b6:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f01042bd:	88 45 f7             	mov    %al,-0x9(%ebp)
f01042c0:	8a 45 f7             	mov    -0x9(%ebp),%al
f01042c3:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01042c6:	ee                   	out    %al,(%dx)
}
f01042c7:	90                   	nop
f01042c8:	c9                   	leave  
f01042c9:	c3                   	ret    

f01042ca <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f01042ca:	55                   	push   %ebp
f01042cb:	89 e5                	mov    %esp,%ebp
f01042cd:	83 ec 20             	sub    $0x20,%esp
f01042d0:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01042d7:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01042da:	89 c2                	mov    %eax,%edx
f01042dc:	ec                   	in     (%dx),%al
f01042dd:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f01042e0:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f01042e3:	88 45 ff             	mov    %al,-0x1(%ebp)
f01042e6:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01042ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01042f0:	89 c2                	mov    %eax,%edx
f01042f2:	ec                   	in     (%dx),%al
f01042f3:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f01042f6:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f01042f9:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f01042fc:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0104300:	c1 e0 08             	shl    $0x8,%eax
f0104303:	89 c2                	mov    %eax,%edx
f0104305:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104309:	09 d0                	or     %edx,%eax
f010430b:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f010430f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104312:	c9                   	leave  
f0104313:	c3                   	ret    

f0104314 <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f0104314:	55                   	push   %ebp
f0104315:	89 e5                	mov    %esp,%ebp
f0104317:	83 ec 30             	sub    $0x30,%esp
f010431a:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104321:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104324:	89 c2                	mov    %eax,%edx
f0104326:	ec                   	in     (%dx),%al
f0104327:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f010432a:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f010432d:	88 45 ff             	mov    %al,-0x1(%ebp)
f0104330:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104337:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010433b:	8a 45 dc             	mov    -0x24(%ebp),%al
f010433e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104341:	ee                   	out    %al,(%dx)
f0104342:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104349:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010434c:	89 c2                	mov    %eax,%edx
f010434e:	ec                   	in     (%dx),%al
f010434f:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f0104352:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104355:	88 45 f3             	mov    %al,-0xd(%ebp)
f0104358:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010435f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104362:	89 c2                	mov    %eax,%edx
f0104364:	ec                   	in     (%dx),%al
f0104365:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f0104368:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f010436b:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f010436e:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f0104372:	c1 e0 08             	shl    $0x8,%eax
f0104375:	89 c2                	mov    %eax,%edx
f0104377:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f010437b:	09 d0                	or     %edx,%eax
f010437d:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f0104381:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104385:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f010438c:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010438f:	8a 45 df             	mov    -0x21(%ebp),%al
f0104392:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0104395:	ee                   	out    %al,(%dx)

	return cnt0 ;
f0104396:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0104399:	c9                   	leave  
f010439a:	c3                   	ret    

f010439b <isSchedMethodRR>:
//void on_clock_update_WS_time_stamps();
extern void cleanup_buffers(struct Env* e);
//================

void sched_delete_ready_queues() ;
uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f010439b:	55                   	push   %ebp
f010439c:	89 e5                	mov    %esp,%ebp
f010439e:	a1 4c 7b 65 f0       	mov    0xf0657b4c,%eax
f01043a3:	85 c0                	test   %eax,%eax
f01043a5:	75 07                	jne    f01043ae <isSchedMethodRR+0x13>
f01043a7:	b8 01 00 00 00       	mov    $0x1,%eax
f01043ac:	eb 05                	jmp    f01043b3 <isSchedMethodRR+0x18>
f01043ae:	b8 00 00 00 00       	mov    $0x0,%eax
f01043b3:	5d                   	pop    %ebp
f01043b4:	c3                   	ret    

f01043b5 <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f01043b5:	55                   	push   %ebp
f01043b6:	89 e5                	mov    %esp,%ebp
f01043b8:	a1 4c 7b 65 f0       	mov    0xf0657b4c,%eax
f01043bd:	83 f8 01             	cmp    $0x1,%eax
f01043c0:	75 07                	jne    f01043c9 <isSchedMethodMLFQ+0x14>
f01043c2:	b8 01 00 00 00       	mov    $0x1,%eax
f01043c7:	eb 05                	jmp    f01043ce <isSchedMethodMLFQ+0x19>
f01043c9:	b8 00 00 00 00       	mov    $0x0,%eax
f01043ce:	5d                   	pop    %ebp
f01043cf:	c3                   	ret    

f01043d0 <init_queue>:

//==================================================================================//
//============================== HELPER FUNCTIONS ==================================//
//==================================================================================//
void init_queue(struct Env_Queue* queue)
{
f01043d0:	55                   	push   %ebp
f01043d1:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f01043d3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01043d7:	74 1d                	je     f01043f6 <init_queue+0x26>
	{
		LIST_INIT(queue);
f01043d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01043dc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01043e2:	8b 45 08             	mov    0x8(%ebp),%eax
f01043e5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01043ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01043ef:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f01043f6:	90                   	nop
f01043f7:	5d                   	pop    %ebp
f01043f8:	c3                   	ret    

f01043f9 <queue_size>:

int queue_size(struct Env_Queue* queue)
{
f01043f9:	55                   	push   %ebp
f01043fa:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f01043fc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104400:	74 08                	je     f010440a <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f0104402:	8b 45 08             	mov    0x8(%ebp),%eax
f0104405:	8b 40 0c             	mov    0xc(%eax),%eax
f0104408:	eb 05                	jmp    f010440f <queue_size+0x16>
	}
	else
	{
		return 0;
f010440a:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f010440f:	5d                   	pop    %ebp
f0104410:	c3                   	ret    

f0104411 <enqueue>:

void enqueue(struct Env_Queue* queue, struct Env* env)
{
f0104411:	55                   	push   %ebp
f0104412:	89 e5                	mov    %esp,%ebp
f0104414:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104417:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010441b:	74 66                	je     f0104483 <enqueue+0x72>
	{
		LIST_INSERT_HEAD(queue, env);
f010441d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104421:	75 14                	jne    f0104437 <enqueue+0x26>
f0104423:	83 ec 04             	sub    $0x4,%esp
f0104426:	68 54 55 13 f0       	push   $0xf0135554
f010442b:	6a 2f                	push   $0x2f
f010442d:	68 77 55 13 f0       	push   $0xf0135577
f0104432:	e8 c4 bd ff ff       	call   f01001fb <_panic>
f0104437:	8b 45 08             	mov    0x8(%ebp),%eax
f010443a:	8b 10                	mov    (%eax),%edx
f010443c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010443f:	89 50 44             	mov    %edx,0x44(%eax)
f0104442:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104445:	8b 40 44             	mov    0x44(%eax),%eax
f0104448:	85 c0                	test   %eax,%eax
f010444a:	74 0d                	je     f0104459 <enqueue+0x48>
f010444c:	8b 45 08             	mov    0x8(%ebp),%eax
f010444f:	8b 00                	mov    (%eax),%eax
f0104451:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104454:	89 50 48             	mov    %edx,0x48(%eax)
f0104457:	eb 09                	jmp    f0104462 <enqueue+0x51>
f0104459:	8b 45 08             	mov    0x8(%ebp),%eax
f010445c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010445f:	89 50 04             	mov    %edx,0x4(%eax)
f0104462:	8b 45 08             	mov    0x8(%ebp),%eax
f0104465:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104468:	89 10                	mov    %edx,(%eax)
f010446a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010446d:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104474:	8b 45 08             	mov    0x8(%ebp),%eax
f0104477:	8b 40 0c             	mov    0xc(%eax),%eax
f010447a:	8d 50 01             	lea    0x1(%eax),%edx
f010447d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104480:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0104483:	90                   	nop
f0104484:	c9                   	leave  
f0104485:	c3                   	ret    

f0104486 <dequeue>:

struct Env* dequeue(struct Env_Queue* queue)
{
f0104486:	55                   	push   %ebp
f0104487:	89 e5                	mov    %esp,%ebp
f0104489:	83 ec 18             	sub    $0x18,%esp
	struct Env* envItem = LIST_LAST(queue);
f010448c:	8b 45 08             	mov    0x8(%ebp),%eax
f010448f:	8b 40 04             	mov    0x4(%eax),%eax
f0104492:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f0104495:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104499:	0f 84 8a 00 00 00    	je     f0104529 <dequeue+0xa3>
	{
		LIST_REMOVE(queue, envItem);
f010449f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01044a3:	75 14                	jne    f01044b9 <dequeue+0x33>
f01044a5:	83 ec 04             	sub    $0x4,%esp
f01044a8:	68 88 55 13 f0       	push   $0xf0135588
f01044ad:	6a 38                	push   $0x38
f01044af:	68 77 55 13 f0       	push   $0xf0135577
f01044b4:	e8 42 bd ff ff       	call   f01001fb <_panic>
f01044b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044bc:	8b 40 44             	mov    0x44(%eax),%eax
f01044bf:	85 c0                	test   %eax,%eax
f01044c1:	74 11                	je     f01044d4 <dequeue+0x4e>
f01044c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044c6:	8b 40 44             	mov    0x44(%eax),%eax
f01044c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01044cc:	8b 52 48             	mov    0x48(%edx),%edx
f01044cf:	89 50 48             	mov    %edx,0x48(%eax)
f01044d2:	eb 0c                	jmp    f01044e0 <dequeue+0x5a>
f01044d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044d7:	8b 50 48             	mov    0x48(%eax),%edx
f01044da:	8b 45 08             	mov    0x8(%ebp),%eax
f01044dd:	89 50 04             	mov    %edx,0x4(%eax)
f01044e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044e3:	8b 40 48             	mov    0x48(%eax),%eax
f01044e6:	85 c0                	test   %eax,%eax
f01044e8:	74 11                	je     f01044fb <dequeue+0x75>
f01044ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044ed:	8b 40 48             	mov    0x48(%eax),%eax
f01044f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01044f3:	8b 52 44             	mov    0x44(%edx),%edx
f01044f6:	89 50 44             	mov    %edx,0x44(%eax)
f01044f9:	eb 0b                	jmp    f0104506 <dequeue+0x80>
f01044fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044fe:	8b 50 44             	mov    0x44(%eax),%edx
f0104501:	8b 45 08             	mov    0x8(%ebp),%eax
f0104504:	89 10                	mov    %edx,(%eax)
f0104506:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104509:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104510:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104513:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010451a:	8b 45 08             	mov    0x8(%ebp),%eax
f010451d:	8b 40 0c             	mov    0xc(%eax),%eax
f0104520:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104523:	8b 45 08             	mov    0x8(%ebp),%eax
f0104526:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f0104529:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010452c:	c9                   	leave  
f010452d:	c3                   	ret    

f010452e <remove_from_queue>:

void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f010452e:	55                   	push   %ebp
f010452f:	89 e5                	mov    %esp,%ebp
f0104531:	83 ec 08             	sub    $0x8,%esp
	if (e != NULL)
f0104534:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104538:	0f 84 8a 00 00 00    	je     f01045c8 <remove_from_queue+0x9a>
	{
		LIST_REMOVE(queue, e);
f010453e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104542:	75 14                	jne    f0104558 <remove_from_queue+0x2a>
f0104544:	83 ec 04             	sub    $0x4,%esp
f0104547:	68 88 55 13 f0       	push   $0xf0135588
f010454c:	6a 41                	push   $0x41
f010454e:	68 77 55 13 f0       	push   $0xf0135577
f0104553:	e8 a3 bc ff ff       	call   f01001fb <_panic>
f0104558:	8b 45 0c             	mov    0xc(%ebp),%eax
f010455b:	8b 40 44             	mov    0x44(%eax),%eax
f010455e:	85 c0                	test   %eax,%eax
f0104560:	74 11                	je     f0104573 <remove_from_queue+0x45>
f0104562:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104565:	8b 40 44             	mov    0x44(%eax),%eax
f0104568:	8b 55 0c             	mov    0xc(%ebp),%edx
f010456b:	8b 52 48             	mov    0x48(%edx),%edx
f010456e:	89 50 48             	mov    %edx,0x48(%eax)
f0104571:	eb 0c                	jmp    f010457f <remove_from_queue+0x51>
f0104573:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104576:	8b 50 48             	mov    0x48(%eax),%edx
f0104579:	8b 45 08             	mov    0x8(%ebp),%eax
f010457c:	89 50 04             	mov    %edx,0x4(%eax)
f010457f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104582:	8b 40 48             	mov    0x48(%eax),%eax
f0104585:	85 c0                	test   %eax,%eax
f0104587:	74 11                	je     f010459a <remove_from_queue+0x6c>
f0104589:	8b 45 0c             	mov    0xc(%ebp),%eax
f010458c:	8b 40 48             	mov    0x48(%eax),%eax
f010458f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104592:	8b 52 44             	mov    0x44(%edx),%edx
f0104595:	89 50 44             	mov    %edx,0x44(%eax)
f0104598:	eb 0b                	jmp    f01045a5 <remove_from_queue+0x77>
f010459a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010459d:	8b 50 44             	mov    0x44(%eax),%edx
f01045a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01045a3:	89 10                	mov    %edx,(%eax)
f01045a5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01045a8:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01045af:	8b 45 0c             	mov    0xc(%ebp),%eax
f01045b2:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01045b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01045bc:	8b 40 0c             	mov    0xc(%eax),%eax
f01045bf:	8d 50 ff             	lea    -0x1(%eax),%edx
f01045c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01045c5:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f01045c8:	90                   	nop
f01045c9:	c9                   	leave  
f01045ca:	c3                   	ret    

f01045cb <find_env_in_queue>:

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f01045cb:	55                   	push   %ebp
f01045cc:	89 e5                	mov    %esp,%ebp
f01045ce:	83 ec 10             	sub    $0x10,%esp
	struct Env * ptr_env=NULL;
f01045d1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f01045d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01045db:	8b 00                	mov    (%eax),%eax
f01045dd:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01045e0:	eb 19                	jmp    f01045fb <find_env_in_queue+0x30>
	{
		if(ptr_env->env_id == envID)
f01045e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01045e5:	8b 40 4c             	mov    0x4c(%eax),%eax
f01045e8:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01045eb:	75 05                	jne    f01045f2 <find_env_in_queue+0x27>
		{
			return ptr_env;
f01045ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01045f0:	eb 37                	jmp    f0104629 <find_env_in_queue+0x5e>
}

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f01045f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01045f5:	8b 40 08             	mov    0x8(%eax),%eax
f01045f8:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01045fb:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01045ff:	74 08                	je     f0104609 <find_env_in_queue+0x3e>
f0104601:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104604:	8b 40 44             	mov    0x44(%eax),%eax
f0104607:	eb 05                	jmp    f010460e <find_env_in_queue+0x43>
f0104609:	b8 00 00 00 00       	mov    $0x0,%eax
f010460e:	8b 55 08             	mov    0x8(%ebp),%edx
f0104611:	89 42 08             	mov    %eax,0x8(%edx)
f0104614:	8b 45 08             	mov    0x8(%ebp),%eax
f0104617:	8b 40 08             	mov    0x8(%eax),%eax
f010461a:	85 c0                	test   %eax,%eax
f010461c:	75 c4                	jne    f01045e2 <find_env_in_queue+0x17>
f010461e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0104622:	75 be                	jne    f01045e2 <find_env_in_queue+0x17>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f0104624:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0104629:	c9                   	leave  
f010462a:	c3                   	ret    

f010462b <fos_scheduler_MLFQ>:
//==================================================================================//

struct Env* fos_scheduler_MLFQ()
{
f010462b:	55                   	push   %ebp
f010462c:	89 e5                	mov    %esp,%ebp
f010462e:	83 ec 08             	sub    $0x8,%esp
	//Apply the MLFQ with the specified levels to pick up the next environment
	//Note: the "curenv" (if exist) should be placed in its correct queue
	// your code is here, remove the panic and write your code
	panic("fos_scheduler_MLFQ() is not implemented yet...!!");
f0104631:	83 ec 04             	sub    $0x4,%esp
f0104634:	68 a8 55 13 f0       	push   $0xf01355a8
f0104639:	6a 58                	push   $0x58
f010463b:	68 77 55 13 f0       	push   $0xf0135577
f0104640:	e8 b6 bb ff ff       	call   f01001fb <_panic>

f0104645 <fos_scheduler>:

}

void
fos_scheduler(void)
{
f0104645:	55                   	push   %ebp
f0104646:	89 e5                	mov    %esp,%ebp
f0104648:	83 ec 18             	sub    $0x18,%esp
	chk1();
f010464b:	e8 f9 b8 02 00       	call   f012ff49 <chk1>
	scheduler_status = SCH_STARTED;
f0104650:	c7 05 58 7b 65 f0 01 	movl   $0x1,0xf0657b58
f0104657:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f010465a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f0104661:	a1 4c 7b 65 f0       	mov    0xf0657b4c,%eax
f0104666:	85 c0                	test   %eax,%eax
f0104668:	75 4d                	jne    f01046b7 <fos_scheduler+0x72>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f010466a:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010466f:	85 c0                	test   %eax,%eax
f0104671:	74 18                	je     f010468b <fos_scheduler+0x46>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f0104673:	8b 15 14 72 65 f0    	mov    0xf0657214,%edx
f0104679:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010467e:	83 ec 08             	sub    $0x8,%esp
f0104681:	52                   	push   %edx
f0104682:	50                   	push   %eax
f0104683:	e8 89 fd ff ff       	call   f0104411 <enqueue>
f0104688:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f010468b:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104690:	83 ec 0c             	sub    $0xc,%esp
f0104693:	50                   	push   %eax
f0104694:	e8 ed fd ff ff       	call   f0104486 <dequeue>
f0104699:	83 c4 10             	add    $0x10,%esp
f010469c:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//2017: Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f010469f:	a1 2c 7b 65 f0       	mov    0xf0657b2c,%eax
f01046a4:	8a 00                	mov    (%eax),%al
f01046a6:	0f b6 c0             	movzbl %al,%eax
f01046a9:	83 ec 0c             	sub    $0xc,%esp
f01046ac:	50                   	push   %eax
f01046ad:	e8 3c fb ff ff       	call   f01041ee <kclock_set_quantum>
f01046b2:	83 c4 10             	add    $0x10,%esp
f01046b5:	eb 12                	jmp    f01046c9 <fos_scheduler+0x84>
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	}
	else if (scheduler_method == SCH_MLFQ)
f01046b7:	a1 4c 7b 65 f0       	mov    0xf0657b4c,%eax
f01046bc:	83 f8 01             	cmp    $0x1,%eax
f01046bf:	75 08                	jne    f01046c9 <fos_scheduler+0x84>
	{
		next_env = fos_scheduler_MLFQ();
f01046c1:	e8 65 ff ff ff       	call   f010462b <fos_scheduler_MLFQ>
f01046c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}


	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f01046c9:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f01046ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f01046d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01046d4:	a3 14 72 65 f0       	mov    %eax,0xf0657214
	chk2(next_env) ;
f01046d9:	83 ec 0c             	sub    $0xc,%esp
f01046dc:	ff 75 f4             	pushl  -0xc(%ebp)
f01046df:	e8 a2 b8 02 00       	call   f012ff86 <chk2>
f01046e4:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f01046e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01046ea:	a3 14 72 65 f0       	mov    %eax,0xf0657214

	//sched_print_all();

	if(next_env != NULL)
f01046ef:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01046f3:	74 0b                	je     f0104700 <fos_scheduler+0xbb>
	{
//		cprintf("\nScheduler select program '%s' [%d]... counter = %d\n", next_env->prog_name, next_env->env_id, kclock_read_cnt0());
//		cprintf("Q0 = %d, Q1 = %d, Q2 = %d, Q3 = %d\n", queue_size(&(env_ready_queues[0])), queue_size(&(env_ready_queues[1])), queue_size(&(env_ready_queues[2])), queue_size(&(env_ready_queues[3])));
		env_run(next_env);
f01046f5:	83 ec 0c             	sub    $0xc,%esp
f01046f8:	ff 75 f4             	pushl  -0xc(%ebp)
f01046fb:	e8 04 52 00 00       	call   f0109904 <env_run>
	}
	else
	{
		/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
		curenv = NULL;
f0104700:	c7 05 14 72 65 f0 00 	movl   $0x0,0xf0657214
f0104707:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f010470a:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f010470f:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0104712:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104715:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f0104718:	c7 05 58 7b 65 f0 00 	movl   $0x0,0xf0657b58
f010471f:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f0104722:	83 ec 0c             	sub    $0xc,%esp
f0104725:	6a 00                	push   $0x0
f0104727:	e8 7c c5 ff ff       	call   f0100ca8 <run_command_prompt>
f010472c:	83 c4 10             	add    $0x10,%esp
f010472f:	eb f1                	jmp    f0104722 <fos_scheduler+0xdd>

f0104731 <sched_init_RR>:

	}
}

void sched_init_RR(uint8 quantum)
{
f0104731:	55                   	push   %ebp
f0104732:	89 e5                	mov    %esp,%ebp
f0104734:	83 ec 18             	sub    $0x18,%esp
f0104737:	8b 45 08             	mov    0x8(%ebp),%eax
f010473a:	88 45 f4             	mov    %al,-0xc(%ebp)
	scheduler_status = SCH_STOPPED;
f010473d:	c7 05 58 7b 65 f0 00 	movl   $0x0,0xf0657b58
f0104744:	00 00 00 
	scheduler_method = SCH_RR;
f0104747:	c7 05 4c 7b 65 f0 00 	movl   $0x0,0xf0657b4c
f010474e:	00 00 00 

	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f0104751:	c6 05 80 7b 65 f0 01 	movb   $0x1,0xf0657b80
#if USE_KHEAP
	sched_delete_ready_queues();
f0104758:	e8 db 00 00 00       	call   f0104838 <sched_delete_ready_queues>
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
f010475d:	83 ec 0c             	sub    $0xc,%esp
f0104760:	6a 10                	push   $0x10
f0104762:	e8 97 30 00 00       	call   f01077fe <kmalloc>
f0104767:	83 c4 10             	add    $0x10,%esp
f010476a:	a3 e8 7a 65 f0       	mov    %eax,0xf0657ae8
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
f010476f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0104774:	0f b6 c0             	movzbl %al,%eax
f0104777:	83 ec 0c             	sub    $0xc,%esp
f010477a:	50                   	push   %eax
f010477b:	e8 7e 30 00 00       	call   f01077fe <kmalloc>
f0104780:	83 c4 10             	add    $0x10,%esp
f0104783:	a3 2c 7b 65 f0       	mov    %eax,0xf0657b2c
#endif
	quantums[0] = quantum;
f0104788:	a1 2c 7b 65 f0       	mov    0xf0657b2c,%eax
f010478d:	8a 55 f4             	mov    -0xc(%ebp),%dl
f0104790:	88 10                	mov    %dl,(%eax)
	kclock_set_quantum(quantums[0]);
f0104792:	a1 2c 7b 65 f0       	mov    0xf0657b2c,%eax
f0104797:	8a 00                	mov    (%eax),%al
f0104799:	0f b6 c0             	movzbl %al,%eax
f010479c:	83 ec 0c             	sub    $0xc,%esp
f010479f:	50                   	push   %eax
f01047a0:	e8 49 fa ff ff       	call   f01041ee <kclock_set_quantum>
f01047a5:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f01047a8:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f01047ad:	83 ec 0c             	sub    $0xc,%esp
f01047b0:	50                   	push   %eax
f01047b1:	e8 1a fc ff ff       	call   f01043d0 <init_queue>
f01047b6:	83 c4 10             	add    $0x10,%esp
}
f01047b9:	90                   	nop
f01047ba:	c9                   	leave  
f01047bb:	c3                   	ret    

f01047bc <sched_init_MLFQ>:

void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f01047bc:	55                   	push   %ebp
f01047bd:	89 e5                	mov    %esp,%ebp
f01047bf:	83 ec 18             	sub    $0x18,%esp
f01047c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01047c5:	88 45 f4             	mov    %al,-0xc(%ebp)
#if USE_KHEAP
	//=========================================
	//DON'T CHANGE THESE LINES=================
	sched_delete_ready_queues();
f01047c8:	e8 6b 00 00 00       	call   f0104838 <sched_delete_ready_queues>
	scheduler_status = SCH_STOPPED;
f01047cd:	c7 05 58 7b 65 f0 00 	movl   $0x0,0xf0657b58
f01047d4:	00 00 00 
	scheduler_method = SCH_MLFQ;
f01047d7:	c7 05 4c 7b 65 f0 01 	movl   $0x1,0xf0657b4c
f01047de:	00 00 00 
	//=========================================
	//=========================================
	// your code is here, remove the panic and write your code
	panic("sched_init_MLFQ() is not implemented yet...!!");
f01047e1:	83 ec 04             	sub    $0x4,%esp
f01047e4:	68 dc 55 13 f0       	push   $0xf01355dc
f01047e9:	68 c6 00 00 00       	push   $0xc6
f01047ee:	68 77 55 13 f0       	push   $0xf0135577
f01047f3:	e8 03 ba ff ff       	call   f01001fb <_panic>

f01047f8 <sched_init>:
#endif
}


void sched_init()
{
f01047f8:	55                   	push   %ebp
f01047f9:	89 e5                	mov    %esp,%ebp
f01047fb:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f01047fe:	c7 05 08 7b 65 f0 00 	movl   $0x0,0xf0657b08
f0104805:	00 00 00 

	sched_init_RR(CLOCK_INTERVAL_IN_MS);
f0104808:	83 ec 0c             	sub    $0xc,%esp
f010480b:	6a 0a                	push   $0xa
f010480d:	e8 1f ff ff ff       	call   f0104731 <sched_init_RR>
f0104812:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f0104815:	83 ec 0c             	sub    $0xc,%esp
f0104818:	68 3c 7b 65 f0       	push   $0xf0657b3c
f010481d:	e8 ae fb ff ff       	call   f01043d0 <init_queue>
f0104822:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f0104825:	83 ec 0c             	sub    $0xc,%esp
f0104828:	68 f4 7a 65 f0       	push   $0xf0657af4
f010482d:	e8 9e fb ff ff       	call   f01043d0 <init_queue>
f0104832:	83 c4 10             	add    $0x10,%esp
}
f0104835:	90                   	nop
f0104836:	c9                   	leave  
f0104837:	c3                   	ret    

f0104838 <sched_delete_ready_queues>:

void sched_delete_ready_queues()
{
f0104838:	55                   	push   %ebp
f0104839:	89 e5                	mov    %esp,%ebp
f010483b:	83 ec 08             	sub    $0x8,%esp
	if (env_ready_queues != NULL)
f010483e:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104843:	85 c0                	test   %eax,%eax
f0104845:	74 11                	je     f0104858 <sched_delete_ready_queues+0x20>
		kfree(env_ready_queues);
f0104847:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010484c:	83 ec 0c             	sub    $0xc,%esp
f010484f:	50                   	push   %eax
f0104850:	e8 6b 30 00 00       	call   f01078c0 <kfree>
f0104855:	83 c4 10             	add    $0x10,%esp
	if (quantums != NULL)
f0104858:	a1 2c 7b 65 f0       	mov    0xf0657b2c,%eax
f010485d:	85 c0                	test   %eax,%eax
f010485f:	74 11                	je     f0104872 <sched_delete_ready_queues+0x3a>
	kfree(quantums);
f0104861:	a1 2c 7b 65 f0       	mov    0xf0657b2c,%eax
f0104866:	83 ec 0c             	sub    $0xc,%esp
f0104869:	50                   	push   %eax
f010486a:	e8 51 30 00 00       	call   f01078c0 <kfree>
f010486f:	83 c4 10             	add    $0x10,%esp
}
f0104872:	90                   	nop
f0104873:	c9                   	leave  
f0104874:	c3                   	ret    

f0104875 <sched_insert_ready>:
void sched_insert_ready(struct Env* env)
{
f0104875:	55                   	push   %ebp
f0104876:	89 e5                	mov    %esp,%ebp
f0104878:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f010487b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010487f:	74 1e                	je     f010489f <sched_insert_ready+0x2a>
	{
		env->env_status = ENV_READY ;
f0104881:	8b 45 08             	mov    0x8(%ebp),%eax
f0104884:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f010488b:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104890:	83 ec 08             	sub    $0x8,%esp
f0104893:	ff 75 08             	pushl  0x8(%ebp)
f0104896:	50                   	push   %eax
f0104897:	e8 75 fb ff ff       	call   f0104411 <enqueue>
f010489c:	83 c4 10             	add    $0x10,%esp
	}
}
f010489f:	90                   	nop
f01048a0:	c9                   	leave  
f01048a1:	c3                   	ret    

f01048a2 <sched_remove_ready>:


void sched_remove_ready(struct Env* env)
{
f01048a2:	55                   	push   %ebp
f01048a3:	89 e5                	mov    %esp,%ebp
f01048a5:	83 ec 18             	sub    $0x18,%esp
	if(env != NULL)
f01048a8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01048ac:	0f 84 fe 00 00 00    	je     f01049b0 <sched_remove_ready+0x10e>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01048b2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01048b9:	e9 e1 00 00 00       	jmp    f010499f <sched_remove_ready+0xfd>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f01048be:	8b 45 08             	mov    0x8(%ebp),%eax
f01048c1:	8b 40 4c             	mov    0x4c(%eax),%eax
f01048c4:	89 c2                	mov    %eax,%edx
f01048c6:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f01048cb:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01048ce:	c1 e1 04             	shl    $0x4,%ecx
f01048d1:	01 c8                	add    %ecx,%eax
f01048d3:	52                   	push   %edx
f01048d4:	50                   	push   %eax
f01048d5:	e8 f1 fc ff ff       	call   f01045cb <find_env_in_queue>
f01048da:	83 c4 08             	add    $0x8,%esp
f01048dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f01048e0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01048e4:	0f 84 b2 00 00 00    	je     f010499c <sched_remove_ready+0xfa>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f01048ea:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01048ee:	75 17                	jne    f0104907 <sched_remove_ready+0x65>
f01048f0:	83 ec 04             	sub    $0x4,%esp
f01048f3:	68 88 55 13 f0       	push   $0xf0135588
f01048f8:	68 f5 00 00 00       	push   $0xf5
f01048fd:	68 77 55 13 f0       	push   $0xf0135577
f0104902:	e8 f4 b8 ff ff       	call   f01001fb <_panic>
f0104907:	8b 45 08             	mov    0x8(%ebp),%eax
f010490a:	8b 40 44             	mov    0x44(%eax),%eax
f010490d:	85 c0                	test   %eax,%eax
f010490f:	74 11                	je     f0104922 <sched_remove_ready+0x80>
f0104911:	8b 45 08             	mov    0x8(%ebp),%eax
f0104914:	8b 40 44             	mov    0x44(%eax),%eax
f0104917:	8b 55 08             	mov    0x8(%ebp),%edx
f010491a:	8b 52 48             	mov    0x48(%edx),%edx
f010491d:	89 50 48             	mov    %edx,0x48(%eax)
f0104920:	eb 16                	jmp    f0104938 <sched_remove_ready+0x96>
f0104922:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104927:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010492a:	c1 e2 04             	shl    $0x4,%edx
f010492d:	01 c2                	add    %eax,%edx
f010492f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104932:	8b 40 48             	mov    0x48(%eax),%eax
f0104935:	89 42 04             	mov    %eax,0x4(%edx)
f0104938:	8b 45 08             	mov    0x8(%ebp),%eax
f010493b:	8b 40 48             	mov    0x48(%eax),%eax
f010493e:	85 c0                	test   %eax,%eax
f0104940:	74 11                	je     f0104953 <sched_remove_ready+0xb1>
f0104942:	8b 45 08             	mov    0x8(%ebp),%eax
f0104945:	8b 40 48             	mov    0x48(%eax),%eax
f0104948:	8b 55 08             	mov    0x8(%ebp),%edx
f010494b:	8b 52 44             	mov    0x44(%edx),%edx
f010494e:	89 50 44             	mov    %edx,0x44(%eax)
f0104951:	eb 15                	jmp    f0104968 <sched_remove_ready+0xc6>
f0104953:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104958:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010495b:	c1 e2 04             	shl    $0x4,%edx
f010495e:	01 c2                	add    %eax,%edx
f0104960:	8b 45 08             	mov    0x8(%ebp),%eax
f0104963:	8b 40 44             	mov    0x44(%eax),%eax
f0104966:	89 02                	mov    %eax,(%edx)
f0104968:	8b 45 08             	mov    0x8(%ebp),%eax
f010496b:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104972:	8b 45 08             	mov    0x8(%ebp),%eax
f0104975:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010497c:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104981:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104984:	c1 e2 04             	shl    $0x4,%edx
f0104987:	01 d0                	add    %edx,%eax
f0104989:	8b 50 0c             	mov    0xc(%eax),%edx
f010498c:	4a                   	dec    %edx
f010498d:	89 50 0c             	mov    %edx,0xc(%eax)
				env->env_status = ENV_UNKNOWN;
f0104990:	8b 45 08             	mov    0x8(%ebp),%eax
f0104993:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f010499a:	eb 14                	jmp    f01049b0 <sched_remove_ready+0x10e>

void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010499c:	ff 45 f4             	incl   -0xc(%ebp)
f010499f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01049a4:	0f b6 c0             	movzbl %al,%eax
f01049a7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01049aa:	0f 8f 0e ff ff ff    	jg     f01048be <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f01049b0:	c9                   	leave  
f01049b1:	c3                   	ret    

f01049b2 <sched_insert_new>:

void sched_insert_new(struct Env* env)
{
f01049b2:	55                   	push   %ebp
f01049b3:	89 e5                	mov    %esp,%ebp
f01049b5:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01049b8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01049bc:	74 1d                	je     f01049db <sched_insert_new+0x29>
	{
		env->env_status = ENV_NEW ;
f01049be:	8b 45 08             	mov    0x8(%ebp),%eax
f01049c1:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f01049c8:	83 ec 08             	sub    $0x8,%esp
f01049cb:	ff 75 08             	pushl  0x8(%ebp)
f01049ce:	68 3c 7b 65 f0       	push   $0xf0657b3c
f01049d3:	e8 39 fa ff ff       	call   f0104411 <enqueue>
f01049d8:	83 c4 10             	add    $0x10,%esp
	}
}
f01049db:	90                   	nop
f01049dc:	c9                   	leave  
f01049dd:	c3                   	ret    

f01049de <sched_remove_new>:
void sched_remove_new(struct Env* env)
{
f01049de:	55                   	push   %ebp
f01049df:	89 e5                	mov    %esp,%ebp
f01049e1:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01049e4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01049e8:	0f 84 92 00 00 00    	je     f0104a80 <sched_remove_new+0xa2>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f01049ee:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01049f2:	75 17                	jne    f0104a0b <sched_remove_new+0x2d>
f01049f4:	83 ec 04             	sub    $0x4,%esp
f01049f7:	68 88 55 13 f0       	push   $0xf0135588
f01049fc:	68 09 01 00 00       	push   $0x109
f0104a01:	68 77 55 13 f0       	push   $0xf0135577
f0104a06:	e8 f0 b7 ff ff       	call   f01001fb <_panic>
f0104a0b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a0e:	8b 40 44             	mov    0x44(%eax),%eax
f0104a11:	85 c0                	test   %eax,%eax
f0104a13:	74 11                	je     f0104a26 <sched_remove_new+0x48>
f0104a15:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a18:	8b 40 44             	mov    0x44(%eax),%eax
f0104a1b:	8b 55 08             	mov    0x8(%ebp),%edx
f0104a1e:	8b 52 48             	mov    0x48(%edx),%edx
f0104a21:	89 50 48             	mov    %edx,0x48(%eax)
f0104a24:	eb 0b                	jmp    f0104a31 <sched_remove_new+0x53>
f0104a26:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a29:	8b 40 48             	mov    0x48(%eax),%eax
f0104a2c:	a3 40 7b 65 f0       	mov    %eax,0xf0657b40
f0104a31:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a34:	8b 40 48             	mov    0x48(%eax),%eax
f0104a37:	85 c0                	test   %eax,%eax
f0104a39:	74 11                	je     f0104a4c <sched_remove_new+0x6e>
f0104a3b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a3e:	8b 40 48             	mov    0x48(%eax),%eax
f0104a41:	8b 55 08             	mov    0x8(%ebp),%edx
f0104a44:	8b 52 44             	mov    0x44(%edx),%edx
f0104a47:	89 50 44             	mov    %edx,0x44(%eax)
f0104a4a:	eb 0b                	jmp    f0104a57 <sched_remove_new+0x79>
f0104a4c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a4f:	8b 40 44             	mov    0x44(%eax),%eax
f0104a52:	a3 3c 7b 65 f0       	mov    %eax,0xf0657b3c
f0104a57:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a5a:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104a61:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a64:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104a6b:	a1 48 7b 65 f0       	mov    0xf0657b48,%eax
f0104a70:	48                   	dec    %eax
f0104a71:	a3 48 7b 65 f0       	mov    %eax,0xf0657b48
		env->env_status = ENV_UNKNOWN;
f0104a76:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a79:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104a80:	90                   	nop
f0104a81:	c9                   	leave  
f0104a82:	c3                   	ret    

f0104a83 <sched_insert_exit>:

void sched_insert_exit(struct Env* env)
{
f0104a83:	55                   	push   %ebp
f0104a84:	89 e5                	mov    %esp,%ebp
f0104a86:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104a89:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104a8d:	74 34                	je     f0104ac3 <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f0104a8f:	e8 30 91 00 00       	call   f010dbc4 <isBufferingEnabled>
f0104a94:	84 c0                	test   %al,%al
f0104a96:	74 0e                	je     f0104aa6 <sched_insert_exit+0x23>
f0104a98:	83 ec 0c             	sub    $0xc,%esp
f0104a9b:	ff 75 08             	pushl  0x8(%ebp)
f0104a9e:	e8 86 62 00 00       	call   f010ad29 <cleanup_buffers>
f0104aa3:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f0104aa6:	8b 45 08             	mov    0x8(%ebp),%eax
f0104aa9:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f0104ab0:	83 ec 08             	sub    $0x8,%esp
f0104ab3:	ff 75 08             	pushl  0x8(%ebp)
f0104ab6:	68 f4 7a 65 f0       	push   $0xf0657af4
f0104abb:	e8 51 f9 ff ff       	call   f0104411 <enqueue>
f0104ac0:	83 c4 10             	add    $0x10,%esp
	}
}
f0104ac3:	90                   	nop
f0104ac4:	c9                   	leave  
f0104ac5:	c3                   	ret    

f0104ac6 <sched_remove_exit>:
void sched_remove_exit(struct Env* env)
{
f0104ac6:	55                   	push   %ebp
f0104ac7:	89 e5                	mov    %esp,%ebp
f0104ac9:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104acc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ad0:	0f 84 92 00 00 00    	je     f0104b68 <sched_remove_exit+0xa2>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f0104ad6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ada:	75 17                	jne    f0104af3 <sched_remove_exit+0x2d>
f0104adc:	83 ec 04             	sub    $0x4,%esp
f0104adf:	68 88 55 13 f0       	push   $0xf0135588
f0104ae4:	68 1b 01 00 00       	push   $0x11b
f0104ae9:	68 77 55 13 f0       	push   $0xf0135577
f0104aee:	e8 08 b7 ff ff       	call   f01001fb <_panic>
f0104af3:	8b 45 08             	mov    0x8(%ebp),%eax
f0104af6:	8b 40 44             	mov    0x44(%eax),%eax
f0104af9:	85 c0                	test   %eax,%eax
f0104afb:	74 11                	je     f0104b0e <sched_remove_exit+0x48>
f0104afd:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b00:	8b 40 44             	mov    0x44(%eax),%eax
f0104b03:	8b 55 08             	mov    0x8(%ebp),%edx
f0104b06:	8b 52 48             	mov    0x48(%edx),%edx
f0104b09:	89 50 48             	mov    %edx,0x48(%eax)
f0104b0c:	eb 0b                	jmp    f0104b19 <sched_remove_exit+0x53>
f0104b0e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b11:	8b 40 48             	mov    0x48(%eax),%eax
f0104b14:	a3 f8 7a 65 f0       	mov    %eax,0xf0657af8
f0104b19:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b1c:	8b 40 48             	mov    0x48(%eax),%eax
f0104b1f:	85 c0                	test   %eax,%eax
f0104b21:	74 11                	je     f0104b34 <sched_remove_exit+0x6e>
f0104b23:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b26:	8b 40 48             	mov    0x48(%eax),%eax
f0104b29:	8b 55 08             	mov    0x8(%ebp),%edx
f0104b2c:	8b 52 44             	mov    0x44(%edx),%edx
f0104b2f:	89 50 44             	mov    %edx,0x44(%eax)
f0104b32:	eb 0b                	jmp    f0104b3f <sched_remove_exit+0x79>
f0104b34:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b37:	8b 40 44             	mov    0x44(%eax),%eax
f0104b3a:	a3 f4 7a 65 f0       	mov    %eax,0xf0657af4
f0104b3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b42:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104b49:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b4c:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104b53:	a1 00 7b 65 f0       	mov    0xf0657b00,%eax
f0104b58:	48                   	dec    %eax
f0104b59:	a3 00 7b 65 f0       	mov    %eax,0xf0657b00
		env->env_status = ENV_UNKNOWN;
f0104b5e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b61:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104b68:	90                   	nop
f0104b69:	c9                   	leave  
f0104b6a:	c3                   	ret    

f0104b6b <sched_print_all>:

void sched_print_all()
{
f0104b6b:	55                   	push   %ebp
f0104b6c:	89 e5                	mov    %esp,%ebp
f0104b6e:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104b71:	a1 3c 7b 65 f0       	mov    0xf0657b3c,%eax
f0104b76:	85 c0                	test   %eax,%eax
f0104b78:	74 6c                	je     f0104be6 <sched_print_all+0x7b>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f0104b7a:	83 ec 0c             	sub    $0xc,%esp
f0104b7d:	68 0c 56 13 f0       	push   $0xf013560c
f0104b82:	e8 fb c0 ff ff       	call   f0100c82 <cprintf>
f0104b87:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104b8a:	a1 3c 7b 65 f0       	mov    0xf0657b3c,%eax
f0104b8f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104b92:	eb 29                	jmp    f0104bbd <sched_print_all+0x52>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104b94:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104b97:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104b9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ba0:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104ba3:	83 ec 04             	sub    $0x4,%esp
f0104ba6:	52                   	push   %edx
f0104ba7:	50                   	push   %eax
f0104ba8:	68 2e 56 13 f0       	push   $0xf013562e
f0104bad:	e8 d0 c0 ff ff       	call   f0100c82 <cprintf>
f0104bb2:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104bb5:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f0104bba:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104bbd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104bc1:	74 08                	je     f0104bcb <sched_print_all+0x60>
f0104bc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104bc6:	8b 40 44             	mov    0x44(%eax),%eax
f0104bc9:	eb 05                	jmp    f0104bd0 <sched_print_all+0x65>
f0104bcb:	b8 00 00 00 00       	mov    $0x0,%eax
f0104bd0:	a3 44 7b 65 f0       	mov    %eax,0xf0657b44
f0104bd5:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f0104bda:	85 c0                	test   %eax,%eax
f0104bdc:	75 b6                	jne    f0104b94 <sched_print_all+0x29>
f0104bde:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104be2:	75 b0                	jne    f0104b94 <sched_print_all+0x29>
f0104be4:	eb 10                	jmp    f0104bf6 <sched_print_all+0x8b>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0104be6:	83 ec 0c             	sub    $0xc,%esp
f0104be9:	68 38 56 13 f0       	push   $0xf0135638
f0104bee:	e8 8f c0 ff ff       	call   f0100c82 <cprintf>
f0104bf3:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104bf6:	83 ec 0c             	sub    $0xc,%esp
f0104bf9:	68 54 56 13 f0       	push   $0xf0135654
f0104bfe:	e8 7f c0 ff ff       	call   f0100c82 <cprintf>
f0104c03:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104c06:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104c0d:	e9 ca 00 00 00       	jmp    f0104cdc <sched_print_all+0x171>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104c12:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104c17:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104c1a:	c1 e2 04             	shl    $0x4,%edx
f0104c1d:	01 d0                	add    %edx,%eax
f0104c1f:	8b 00                	mov    (%eax),%eax
f0104c21:	85 c0                	test   %eax,%eax
f0104c23:	0f 84 8d 00 00 00    	je     f0104cb6 <sched_print_all+0x14b>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0104c29:	83 ec 08             	sub    $0x8,%esp
f0104c2c:	ff 75 f0             	pushl  -0x10(%ebp)
f0104c2f:	68 88 56 13 f0       	push   $0xf0135688
f0104c34:	e8 49 c0 ff ff       	call   f0100c82 <cprintf>
f0104c39:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104c3c:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104c41:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104c44:	c1 e2 04             	shl    $0x4,%edx
f0104c47:	01 d0                	add    %edx,%eax
f0104c49:	8b 00                	mov    (%eax),%eax
f0104c4b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c4e:	eb 34                	jmp    f0104c84 <sched_print_all+0x119>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104c50:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c53:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104c59:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c5c:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104c5f:	83 ec 04             	sub    $0x4,%esp
f0104c62:	52                   	push   %edx
f0104c63:	50                   	push   %eax
f0104c64:	68 2e 56 13 f0       	push   $0xf013562e
f0104c69:	e8 14 c0 ff ff       	call   f0100c82 <cprintf>
f0104c6e:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104c71:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104c76:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104c79:	c1 e2 04             	shl    $0x4,%edx
f0104c7c:	01 d0                	add    %edx,%eax
f0104c7e:	8b 40 08             	mov    0x8(%eax),%eax
f0104c81:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c84:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104c89:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104c8c:	c1 e2 04             	shl    $0x4,%edx
f0104c8f:	01 d0                	add    %edx,%eax
f0104c91:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104c95:	74 08                	je     f0104c9f <sched_print_all+0x134>
f0104c97:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104c9a:	8b 52 44             	mov    0x44(%edx),%edx
f0104c9d:	eb 05                	jmp    f0104ca4 <sched_print_all+0x139>
f0104c9f:	ba 00 00 00 00       	mov    $0x0,%edx
f0104ca4:	89 50 08             	mov    %edx,0x8(%eax)
f0104ca7:	8b 40 08             	mov    0x8(%eax),%eax
f0104caa:	85 c0                	test   %eax,%eax
f0104cac:	75 a2                	jne    f0104c50 <sched_print_all+0xe5>
f0104cae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104cb2:	75 9c                	jne    f0104c50 <sched_print_all+0xe5>
f0104cb4:	eb 13                	jmp    f0104cc9 <sched_print_all+0x15e>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0104cb6:	83 ec 08             	sub    $0x8,%esp
f0104cb9:	ff 75 f0             	pushl  -0x10(%ebp)
f0104cbc:	68 b0 56 13 f0       	push   $0xf01356b0
f0104cc1:	e8 bc bf ff ff       	call   f0100c82 <cprintf>
f0104cc6:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0104cc9:	83 ec 0c             	sub    $0xc,%esp
f0104ccc:	68 54 56 13 f0       	push   $0xf0135654
f0104cd1:	e8 ac bf ff ff       	call   f0100c82 <cprintf>
f0104cd6:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104cd9:	ff 45 f0             	incl   -0x10(%ebp)
f0104cdc:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0104ce1:	0f b6 c0             	movzbl %al,%eax
f0104ce4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0104ce7:	0f 8f 25 ff ff ff    	jg     f0104c12 <sched_print_all+0xa7>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f0104ced:	a1 f4 7a 65 f0       	mov    0xf0657af4,%eax
f0104cf2:	85 c0                	test   %eax,%eax
f0104cf4:	74 6c                	je     f0104d62 <sched_print_all+0x1f7>
	{
		cprintf("The processes in EXIT queue are:\n");
f0104cf6:	83 ec 0c             	sub    $0xc,%esp
f0104cf9:	68 d4 56 13 f0       	push   $0xf01356d4
f0104cfe:	e8 7f bf ff ff       	call   f0100c82 <cprintf>
f0104d03:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104d06:	a1 f4 7a 65 f0       	mov    0xf0657af4,%eax
f0104d0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d0e:	eb 29                	jmp    f0104d39 <sched_print_all+0x1ce>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104d10:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d13:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104d19:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d1c:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104d1f:	83 ec 04             	sub    $0x4,%esp
f0104d22:	52                   	push   %edx
f0104d23:	50                   	push   %eax
f0104d24:	68 2e 56 13 f0       	push   $0xf013562e
f0104d29:	e8 54 bf ff ff       	call   f0100c82 <cprintf>
f0104d2e:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104d31:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f0104d36:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d39:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d3d:	74 08                	je     f0104d47 <sched_print_all+0x1dc>
f0104d3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d42:	8b 40 44             	mov    0x44(%eax),%eax
f0104d45:	eb 05                	jmp    f0104d4c <sched_print_all+0x1e1>
f0104d47:	b8 00 00 00 00       	mov    $0x0,%eax
f0104d4c:	a3 fc 7a 65 f0       	mov    %eax,0xf0657afc
f0104d51:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f0104d56:	85 c0                	test   %eax,%eax
f0104d58:	75 b6                	jne    f0104d10 <sched_print_all+0x1a5>
f0104d5a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d5e:	75 b0                	jne    f0104d10 <sched_print_all+0x1a5>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f0104d60:	eb 10                	jmp    f0104d72 <sched_print_all+0x207>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0104d62:	83 ec 0c             	sub    $0xc,%esp
f0104d65:	68 f6 56 13 f0       	push   $0xf01356f6
f0104d6a:	e8 13 bf ff ff       	call   f0100c82 <cprintf>
f0104d6f:	83 c4 10             	add    $0x10,%esp
	}
}
f0104d72:	90                   	nop
f0104d73:	c9                   	leave  
f0104d74:	c3                   	ret    

f0104d75 <sched_run_all>:

void sched_run_all()
{
f0104d75:	55                   	push   %ebp
f0104d76:	89 e5                	mov    %esp,%ebp
f0104d78:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0104d7b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104d82:	a1 3c 7b 65 f0       	mov    0xf0657b3c,%eax
f0104d87:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d8a:	eb 24                	jmp    f0104db0 <sched_run_all+0x3b>
	{
		sched_remove_new(ptr_env);
f0104d8c:	83 ec 0c             	sub    $0xc,%esp
f0104d8f:	ff 75 f4             	pushl  -0xc(%ebp)
f0104d92:	e8 47 fc ff ff       	call   f01049de <sched_remove_new>
f0104d97:	83 c4 10             	add    $0x10,%esp
		sched_insert_ready(ptr_env);
f0104d9a:	83 ec 0c             	sub    $0xc,%esp
f0104d9d:	ff 75 f4             	pushl  -0xc(%ebp)
f0104da0:	e8 d0 fa ff ff       	call   f0104875 <sched_insert_ready>
f0104da5:	83 c4 10             	add    $0x10,%esp
}

void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104da8:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f0104dad:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104db0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104db4:	74 08                	je     f0104dbe <sched_run_all+0x49>
f0104db6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104db9:	8b 40 44             	mov    0x44(%eax),%eax
f0104dbc:	eb 05                	jmp    f0104dc3 <sched_run_all+0x4e>
f0104dbe:	b8 00 00 00 00       	mov    $0x0,%eax
f0104dc3:	a3 44 7b 65 f0       	mov    %eax,0xf0657b44
f0104dc8:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f0104dcd:	85 c0                	test   %eax,%eax
f0104dcf:	75 bb                	jne    f0104d8c <sched_run_all+0x17>
f0104dd1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104dd5:	75 b5                	jne    f0104d8c <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f0104dd7:	a1 58 7b 65 f0       	mov    0xf0657b58,%eax
f0104ddc:	85 c0                	test   %eax,%eax
f0104dde:	75 05                	jne    f0104de5 <sched_run_all+0x70>
		fos_scheduler();
f0104de0:	e8 60 f8 ff ff       	call   f0104645 <fos_scheduler>
}
f0104de5:	90                   	nop
f0104de6:	c9                   	leave  
f0104de7:	c3                   	ret    

f0104de8 <sched_kill_all>:

void sched_kill_all()
{
f0104de8:	55                   	push   %ebp
f0104de9:	89 e5                	mov    %esp,%ebp
f0104deb:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104dee:	a1 3c 7b 65 f0       	mov    0xf0657b3c,%eax
f0104df3:	85 c0                	test   %eax,%eax
f0104df5:	0f 84 98 00 00 00    	je     f0104e93 <sched_kill_all+0xab>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f0104dfb:	83 ec 0c             	sub    $0xc,%esp
f0104dfe:	68 14 57 13 f0       	push   $0xf0135714
f0104e03:	e8 7a be ff ff       	call   f0100c82 <cprintf>
f0104e08:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104e0b:	a1 3c 7b 65 f0       	mov    0xf0657b3c,%eax
f0104e10:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e13:	eb 55                	jmp    f0104e6a <sched_kill_all+0x82>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104e15:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e18:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104e1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e21:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104e24:	83 ec 04             	sub    $0x4,%esp
f0104e27:	52                   	push   %edx
f0104e28:	50                   	push   %eax
f0104e29:	68 40 57 13 f0       	push   $0xf0135740
f0104e2e:	e8 4f be ff ff       	call   f0100c82 <cprintf>
f0104e33:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0104e36:	83 ec 0c             	sub    $0xc,%esp
f0104e39:	ff 75 f4             	pushl  -0xc(%ebp)
f0104e3c:	e8 9d fb ff ff       	call   f01049de <sched_remove_new>
f0104e41:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0104e44:	83 ec 0c             	sub    $0xc,%esp
f0104e47:	ff 75 f4             	pushl  -0xc(%ebp)
f0104e4a:	e8 09 4b 00 00       	call   f0109958 <env_free>
f0104e4f:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0104e52:	83 ec 0c             	sub    $0xc,%esp
f0104e55:	68 53 57 13 f0       	push   $0xf0135753
f0104e5a:	e8 23 be ff ff       	call   f0100c82 <cprintf>
f0104e5f:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104e62:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f0104e67:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e6a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e6e:	74 08                	je     f0104e78 <sched_kill_all+0x90>
f0104e70:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e73:	8b 40 44             	mov    0x44(%eax),%eax
f0104e76:	eb 05                	jmp    f0104e7d <sched_kill_all+0x95>
f0104e78:	b8 00 00 00 00       	mov    $0x0,%eax
f0104e7d:	a3 44 7b 65 f0       	mov    %eax,0xf0657b44
f0104e82:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f0104e87:	85 c0                	test   %eax,%eax
f0104e89:	75 8a                	jne    f0104e15 <sched_kill_all+0x2d>
f0104e8b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e8f:	75 84                	jne    f0104e15 <sched_kill_all+0x2d>
f0104e91:	eb 10                	jmp    f0104ea3 <sched_kill_all+0xbb>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f0104e93:	83 ec 0c             	sub    $0xc,%esp
f0104e96:	68 59 57 13 f0       	push   $0xf0135759
f0104e9b:	e8 e2 bd ff ff       	call   f0100c82 <cprintf>
f0104ea0:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104ea3:	83 ec 0c             	sub    $0xc,%esp
f0104ea6:	68 54 56 13 f0       	push   $0xf0135654
f0104eab:	e8 d2 bd ff ff       	call   f0100c82 <cprintf>
f0104eb0:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104eb3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104eba:	e9 99 01 00 00       	jmp    f0105058 <sched_kill_all+0x270>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104ebf:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104ec4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104ec7:	c1 e2 04             	shl    $0x4,%edx
f0104eca:	01 d0                	add    %edx,%eax
f0104ecc:	8b 00                	mov    (%eax),%eax
f0104ece:	85 c0                	test   %eax,%eax
f0104ed0:	0f 84 5c 01 00 00    	je     f0105032 <sched_kill_all+0x24a>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f0104ed6:	83 ec 08             	sub    $0x8,%esp
f0104ed9:	ff 75 f0             	pushl  -0x10(%ebp)
f0104edc:	68 74 57 13 f0       	push   $0xf0135774
f0104ee1:	e8 9c bd ff ff       	call   f0100c82 <cprintf>
f0104ee6:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104ee9:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104eee:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104ef1:	c1 e2 04             	shl    $0x4,%edx
f0104ef4:	01 d0                	add    %edx,%eax
f0104ef6:	8b 00                	mov    (%eax),%eax
f0104ef8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104efb:	e9 f8 00 00 00       	jmp    f0104ff8 <sched_kill_all+0x210>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104f00:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f03:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104f09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f0c:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104f0f:	83 ec 04             	sub    $0x4,%esp
f0104f12:	52                   	push   %edx
f0104f13:	50                   	push   %eax
f0104f14:	68 40 57 13 f0       	push   $0xf0135740
f0104f19:	e8 64 bd ff ff       	call   f0100c82 <cprintf>
f0104f1e:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0104f21:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f25:	75 17                	jne    f0104f3e <sched_kill_all+0x156>
f0104f27:	83 ec 04             	sub    $0x4,%esp
f0104f2a:	68 88 55 13 f0       	push   $0xf0135588
f0104f2f:	68 76 01 00 00       	push   $0x176
f0104f34:	68 77 55 13 f0       	push   $0xf0135577
f0104f39:	e8 bd b2 ff ff       	call   f01001fb <_panic>
f0104f3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f41:	8b 40 44             	mov    0x44(%eax),%eax
f0104f44:	85 c0                	test   %eax,%eax
f0104f46:	74 11                	je     f0104f59 <sched_kill_all+0x171>
f0104f48:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f4b:	8b 40 44             	mov    0x44(%eax),%eax
f0104f4e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104f51:	8b 52 48             	mov    0x48(%edx),%edx
f0104f54:	89 50 48             	mov    %edx,0x48(%eax)
f0104f57:	eb 16                	jmp    f0104f6f <sched_kill_all+0x187>
f0104f59:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104f5e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104f61:	c1 e2 04             	shl    $0x4,%edx
f0104f64:	01 c2                	add    %eax,%edx
f0104f66:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f69:	8b 40 48             	mov    0x48(%eax),%eax
f0104f6c:	89 42 04             	mov    %eax,0x4(%edx)
f0104f6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f72:	8b 40 48             	mov    0x48(%eax),%eax
f0104f75:	85 c0                	test   %eax,%eax
f0104f77:	74 11                	je     f0104f8a <sched_kill_all+0x1a2>
f0104f79:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f7c:	8b 40 48             	mov    0x48(%eax),%eax
f0104f7f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104f82:	8b 52 44             	mov    0x44(%edx),%edx
f0104f85:	89 50 44             	mov    %edx,0x44(%eax)
f0104f88:	eb 15                	jmp    f0104f9f <sched_kill_all+0x1b7>
f0104f8a:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104f8f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104f92:	c1 e2 04             	shl    $0x4,%edx
f0104f95:	01 c2                	add    %eax,%edx
f0104f97:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f9a:	8b 40 44             	mov    0x44(%eax),%eax
f0104f9d:	89 02                	mov    %eax,(%edx)
f0104f9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fa2:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104fa9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fac:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104fb3:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104fb8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104fbb:	c1 e2 04             	shl    $0x4,%edx
f0104fbe:	01 d0                	add    %edx,%eax
f0104fc0:	8b 50 0c             	mov    0xc(%eax),%edx
f0104fc3:	4a                   	dec    %edx
f0104fc4:	89 50 0c             	mov    %edx,0xc(%eax)
				env_free(ptr_env);
f0104fc7:	83 ec 0c             	sub    $0xc,%esp
f0104fca:	ff 75 f4             	pushl  -0xc(%ebp)
f0104fcd:	e8 86 49 00 00       	call   f0109958 <env_free>
f0104fd2:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0104fd5:	83 ec 0c             	sub    $0xc,%esp
f0104fd8:	68 53 57 13 f0       	push   $0xf0135753
f0104fdd:	e8 a0 bc ff ff       	call   f0100c82 <cprintf>
f0104fe2:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104fe5:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104fea:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104fed:	c1 e2 04             	shl    $0x4,%edx
f0104ff0:	01 d0                	add    %edx,%eax
f0104ff2:	8b 40 08             	mov    0x8(%eax),%eax
f0104ff5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104ff8:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104ffd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105000:	c1 e2 04             	shl    $0x4,%edx
f0105003:	01 d0                	add    %edx,%eax
f0105005:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105009:	74 08                	je     f0105013 <sched_kill_all+0x22b>
f010500b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010500e:	8b 52 44             	mov    0x44(%edx),%edx
f0105011:	eb 05                	jmp    f0105018 <sched_kill_all+0x230>
f0105013:	ba 00 00 00 00       	mov    $0x0,%edx
f0105018:	89 50 08             	mov    %edx,0x8(%eax)
f010501b:	8b 40 08             	mov    0x8(%eax),%eax
f010501e:	85 c0                	test   %eax,%eax
f0105020:	0f 85 da fe ff ff    	jne    f0104f00 <sched_kill_all+0x118>
f0105026:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010502a:	0f 85 d0 fe ff ff    	jne    f0104f00 <sched_kill_all+0x118>
f0105030:	eb 13                	jmp    f0105045 <sched_kill_all+0x25d>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f0105032:	83 ec 08             	sub    $0x8,%esp
f0105035:	ff 75 f0             	pushl  -0x10(%ebp)
f0105038:	68 b0 56 13 f0       	push   $0xf01356b0
f010503d:	e8 40 bc ff ff       	call   f0100c82 <cprintf>
f0105042:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0105045:	83 ec 0c             	sub    $0xc,%esp
f0105048:	68 54 56 13 f0       	push   $0xf0135654
f010504d:	e8 30 bc ff ff       	call   f0100c82 <cprintf>
f0105052:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105055:	ff 45 f0             	incl   -0x10(%ebp)
f0105058:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f010505d:	0f b6 c0             	movzbl %al,%eax
f0105060:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105063:	0f 8f 56 fe ff ff    	jg     f0104ebf <sched_kill_all+0xd7>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f0105069:	a1 f4 7a 65 f0       	mov    0xf0657af4,%eax
f010506e:	85 c0                	test   %eax,%eax
f0105070:	0f 84 98 00 00 00    	je     f010510e <sched_kill_all+0x326>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f0105076:	83 ec 0c             	sub    $0xc,%esp
f0105079:	68 a8 57 13 f0       	push   $0xf01357a8
f010507e:	e8 ff bb ff ff       	call   f0100c82 <cprintf>
f0105083:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105086:	a1 f4 7a 65 f0       	mov    0xf0657af4,%eax
f010508b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010508e:	eb 55                	jmp    f01050e5 <sched_kill_all+0x2fd>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105090:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105093:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0105099:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010509c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010509f:	83 ec 04             	sub    $0x4,%esp
f01050a2:	52                   	push   %edx
f01050a3:	50                   	push   %eax
f01050a4:	68 40 57 13 f0       	push   $0xf0135740
f01050a9:	e8 d4 bb ff ff       	call   f0100c82 <cprintf>
f01050ae:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f01050b1:	83 ec 0c             	sub    $0xc,%esp
f01050b4:	ff 75 f4             	pushl  -0xc(%ebp)
f01050b7:	e8 0a fa ff ff       	call   f0104ac6 <sched_remove_exit>
f01050bc:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f01050bf:	83 ec 0c             	sub    $0xc,%esp
f01050c2:	ff 75 f4             	pushl  -0xc(%ebp)
f01050c5:	e8 8e 48 00 00       	call   f0109958 <env_free>
f01050ca:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01050cd:	83 ec 0c             	sub    $0xc,%esp
f01050d0:	68 53 57 13 f0       	push   $0xf0135753
f01050d5:	e8 a8 bb ff ff       	call   f0100c82 <cprintf>
f01050da:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01050dd:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f01050e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01050e5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01050e9:	74 08                	je     f01050f3 <sched_kill_all+0x30b>
f01050eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01050ee:	8b 40 44             	mov    0x44(%eax),%eax
f01050f1:	eb 05                	jmp    f01050f8 <sched_kill_all+0x310>
f01050f3:	b8 00 00 00 00       	mov    $0x0,%eax
f01050f8:	a3 fc 7a 65 f0       	mov    %eax,0xf0657afc
f01050fd:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f0105102:	85 c0                	test   %eax,%eax
f0105104:	75 8a                	jne    f0105090 <sched_kill_all+0x2a8>
f0105106:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010510a:	75 84                	jne    f0105090 <sched_kill_all+0x2a8>
f010510c:	eb 10                	jmp    f010511e <sched_kill_all+0x336>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f010510e:	83 ec 0c             	sub    $0xc,%esp
f0105111:	68 f6 56 13 f0       	push   $0xf01356f6
f0105116:	e8 67 bb ff ff       	call   f0100c82 <cprintf>
f010511b:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f010511e:	c7 05 14 72 65 f0 00 	movl   $0x0,0xf0657214
f0105125:	00 00 00 
	fos_scheduler();
f0105128:	e8 18 f5 ff ff       	call   f0104645 <fos_scheduler>

f010512d <sched_new_env>:
}


void sched_new_env(struct Env* e)
{
f010512d:	55                   	push   %ebp
f010512e:	89 e5                	mov    %esp,%ebp
f0105130:	83 ec 08             	sub    $0x8,%esp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f0105133:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105137:	74 0e                	je     f0105147 <sched_new_env+0x1a>
	{
		sched_insert_new(e);
f0105139:	83 ec 0c             	sub    $0xc,%esp
f010513c:	ff 75 08             	pushl  0x8(%ebp)
f010513f:	e8 6e f8 ff ff       	call   f01049b2 <sched_insert_new>
f0105144:	83 c4 10             	add    $0x10,%esp
	}
}
f0105147:	90                   	nop
f0105148:	c9                   	leave  
f0105149:	c3                   	ret    

f010514a <sched_run_env>:
	sched_insert_new(e);
}
 */

void sched_run_env(uint32 envId)
{
f010514a:	55                   	push   %ebp
f010514b:	89 e5                	mov    %esp,%ebp
f010514d:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105150:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0105157:	a1 3c 7b 65 f0       	mov    0xf0657b3c,%eax
f010515c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010515f:	eb 3d                	jmp    f010519e <sched_run_env+0x54>
	{
		if(ptr_env->env_id == envId)
f0105161:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105164:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105167:	3b 45 08             	cmp    0x8(%ebp),%eax
f010516a:	75 2a                	jne    f0105196 <sched_run_env+0x4c>
		{
			sched_remove_new(ptr_env);
f010516c:	83 ec 0c             	sub    $0xc,%esp
f010516f:	ff 75 f4             	pushl  -0xc(%ebp)
f0105172:	e8 67 f8 ff ff       	call   f01049de <sched_remove_new>
f0105177:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready(ptr_env);
f010517a:	83 ec 0c             	sub    $0xc,%esp
f010517d:	ff 75 f4             	pushl  -0xc(%ebp)
f0105180:	e8 f0 f6 ff ff       	call   f0104875 <sched_insert_ready>
f0105185:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f0105188:	a1 58 7b 65 f0       	mov    0xf0657b58,%eax
f010518d:	85 c0                	test   %eax,%eax
f010518f:	75 36                	jne    f01051c7 <sched_run_env+0x7d>
			{
				fos_scheduler();
f0105191:	e8 af f4 ff ff       	call   f0104645 <fos_scheduler>
 */

void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0105196:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f010519b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010519e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051a2:	74 08                	je     f01051ac <sched_run_env+0x62>
f01051a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01051a7:	8b 40 44             	mov    0x44(%eax),%eax
f01051aa:	eb 05                	jmp    f01051b1 <sched_run_env+0x67>
f01051ac:	b8 00 00 00 00       	mov    $0x0,%eax
f01051b1:	a3 44 7b 65 f0       	mov    %eax,0xf0657b44
f01051b6:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f01051bb:	85 c0                	test   %eax,%eax
f01051bd:	75 a2                	jne    f0105161 <sched_run_env+0x17>
f01051bf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051c3:	75 9c                	jne    f0105161 <sched_run_env+0x17>
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f01051c5:	eb 01                	jmp    f01051c8 <sched_run_env+0x7e>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f01051c7:	90                   	nop
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f01051c8:	90                   	nop
f01051c9:	c9                   	leave  
f01051ca:	c3                   	ret    

f01051cb <sched_exit_env>:

void sched_exit_env(uint32 envId)
{
f01051cb:	55                   	push   %ebp
f01051cc:	89 e5                	mov    %esp,%ebp
f01051ce:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01051d1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f01051d8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f01051df:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01051e3:	75 59                	jne    f010523e <sched_exit_env+0x73>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01051e5:	a1 3c 7b 65 f0       	mov    0xf0657b3c,%eax
f01051ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01051ed:	eb 28                	jmp    f0105217 <sched_exit_env+0x4c>
				{
			if(ptr_env->env_id == envId)
f01051ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01051f2:	8b 40 4c             	mov    0x4c(%eax),%eax
f01051f5:	3b 45 08             	cmp    0x8(%ebp),%eax
f01051f8:	75 15                	jne    f010520f <sched_exit_env+0x44>
			{
				sched_remove_new(ptr_env);
f01051fa:	83 ec 0c             	sub    $0xc,%esp
f01051fd:	ff 75 f4             	pushl  -0xc(%ebp)
f0105200:	e8 d9 f7 ff ff       	call   f01049de <sched_remove_new>
f0105205:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105208:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010520f:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f0105214:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105217:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010521b:	74 08                	je     f0105225 <sched_exit_env+0x5a>
f010521d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105220:	8b 40 44             	mov    0x44(%eax),%eax
f0105223:	eb 05                	jmp    f010522a <sched_exit_env+0x5f>
f0105225:	b8 00 00 00 00       	mov    $0x0,%eax
f010522a:	a3 44 7b 65 f0       	mov    %eax,0xf0657b44
f010522f:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f0105234:	85 c0                	test   %eax,%eax
f0105236:	75 b7                	jne    f01051ef <sched_exit_env+0x24>
f0105238:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010523c:	75 b1                	jne    f01051ef <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
				}
	}
	if (!found)
f010523e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105242:	0f 85 67 01 00 00    	jne    f01053af <sched_exit_env+0x1e4>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105248:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010524f:	e9 47 01 00 00       	jmp    f010539b <sched_exit_env+0x1d0>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105254:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0105259:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010525c:	c1 e2 04             	shl    $0x4,%edx
f010525f:	01 d0                	add    %edx,%eax
f0105261:	8b 00                	mov    (%eax),%eax
f0105263:	85 c0                	test   %eax,%eax
f0105265:	0f 84 27 01 00 00    	je     f0105392 <sched_exit_env+0x1c7>
			{
				ptr_env=NULL;
f010526b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105272:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0105277:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010527a:	c1 e2 04             	shl    $0x4,%edx
f010527d:	01 d0                	add    %edx,%eax
f010527f:	8b 00                	mov    (%eax),%eax
f0105281:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105284:	e9 d1 00 00 00       	jmp    f010535a <sched_exit_env+0x18f>
				{
					if(ptr_env->env_id == envId)
f0105289:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010528c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010528f:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105292:	0f 85 af 00 00 00    	jne    f0105347 <sched_exit_env+0x17c>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105298:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010529c:	75 17                	jne    f01052b5 <sched_exit_env+0xea>
f010529e:	83 ec 04             	sub    $0x4,%esp
f01052a1:	68 88 55 13 f0       	push   $0xf0135588
f01052a6:	68 e1 01 00 00       	push   $0x1e1
f01052ab:	68 77 55 13 f0       	push   $0xf0135577
f01052b0:	e8 46 af ff ff       	call   f01001fb <_panic>
f01052b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052b8:	8b 40 44             	mov    0x44(%eax),%eax
f01052bb:	85 c0                	test   %eax,%eax
f01052bd:	74 11                	je     f01052d0 <sched_exit_env+0x105>
f01052bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052c2:	8b 40 44             	mov    0x44(%eax),%eax
f01052c5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01052c8:	8b 52 48             	mov    0x48(%edx),%edx
f01052cb:	89 50 48             	mov    %edx,0x48(%eax)
f01052ce:	eb 16                	jmp    f01052e6 <sched_exit_env+0x11b>
f01052d0:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f01052d5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01052d8:	c1 e2 04             	shl    $0x4,%edx
f01052db:	01 c2                	add    %eax,%edx
f01052dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052e0:	8b 40 48             	mov    0x48(%eax),%eax
f01052e3:	89 42 04             	mov    %eax,0x4(%edx)
f01052e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052e9:	8b 40 48             	mov    0x48(%eax),%eax
f01052ec:	85 c0                	test   %eax,%eax
f01052ee:	74 11                	je     f0105301 <sched_exit_env+0x136>
f01052f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052f3:	8b 40 48             	mov    0x48(%eax),%eax
f01052f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01052f9:	8b 52 44             	mov    0x44(%edx),%edx
f01052fc:	89 50 44             	mov    %edx,0x44(%eax)
f01052ff:	eb 15                	jmp    f0105316 <sched_exit_env+0x14b>
f0105301:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0105306:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105309:	c1 e2 04             	shl    $0x4,%edx
f010530c:	01 c2                	add    %eax,%edx
f010530e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105311:	8b 40 44             	mov    0x44(%eax),%eax
f0105314:	89 02                	mov    %eax,(%edx)
f0105316:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105319:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105320:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105323:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010532a:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010532f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105332:	c1 e2 04             	shl    $0x4,%edx
f0105335:	01 d0                	add    %edx,%eax
f0105337:	8b 50 0c             	mov    0xc(%eax),%edx
f010533a:	4a                   	dec    %edx
f010533b:	89 50 0c             	mov    %edx,0xc(%eax)
						found = 1;
f010533e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105345:	eb 4b                	jmp    f0105392 <sched_exit_env+0x1c7>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105347:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010534c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010534f:	c1 e2 04             	shl    $0x4,%edx
f0105352:	01 d0                	add    %edx,%eax
f0105354:	8b 40 08             	mov    0x8(%eax),%eax
f0105357:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010535a:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010535f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105362:	c1 e2 04             	shl    $0x4,%edx
f0105365:	01 d0                	add    %edx,%eax
f0105367:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010536b:	74 08                	je     f0105375 <sched_exit_env+0x1aa>
f010536d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105370:	8b 52 44             	mov    0x44(%edx),%edx
f0105373:	eb 05                	jmp    f010537a <sched_exit_env+0x1af>
f0105375:	ba 00 00 00 00       	mov    $0x0,%edx
f010537a:	89 50 08             	mov    %edx,0x8(%eax)
f010537d:	8b 40 08             	mov    0x8(%eax),%eax
f0105380:	85 c0                	test   %eax,%eax
f0105382:	0f 85 01 ff ff ff    	jne    f0105289 <sched_exit_env+0xbe>
f0105388:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010538c:	0f 85 f7 fe ff ff    	jne    f0105289 <sched_exit_env+0xbe>
						found = 1;
						break;
					}
				}
			}
			if (found)
f0105392:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105396:	75 16                	jne    f01053ae <sched_exit_env+0x1e3>
			}
				}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105398:	ff 45 ec             	incl   -0x14(%ebp)
f010539b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01053a0:	0f b6 c0             	movzbl %al,%eax
f01053a3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01053a6:	0f 8f a8 fe ff ff    	jg     f0105254 <sched_exit_env+0x89>
f01053ac:	eb 01                	jmp    f01053af <sched_exit_env+0x1e4>
						break;
					}
				}
			}
			if (found)
				break;
f01053ae:	90                   	nop
		}
	}
	if (!found)
f01053af:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01053b3:	75 1c                	jne    f01053d1 <sched_exit_env+0x206>
	{
		if (curenv->env_id == envId)
f01053b5:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f01053ba:	8b 40 4c             	mov    0x4c(%eax),%eax
f01053bd:	3b 45 08             	cmp    0x8(%ebp),%eax
f01053c0:	75 0f                	jne    f01053d1 <sched_exit_env+0x206>
		{
			ptr_env = curenv;
f01053c2:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f01053c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f01053ca:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f01053d1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01053d5:	74 2a                	je     f0105401 <sched_exit_env+0x236>
	{
		sched_insert_exit(ptr_env);
f01053d7:	83 ec 0c             	sub    $0xc,%esp
f01053da:	ff 75 f4             	pushl  -0xc(%ebp)
f01053dd:	e8 a1 f6 ff ff       	call   f0104a83 <sched_insert_exit>
f01053e2:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f01053e5:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f01053ea:	8b 40 4c             	mov    0x4c(%eax),%eax
f01053ed:	3b 45 08             	cmp    0x8(%ebp),%eax
f01053f0:	75 0f                	jne    f0105401 <sched_exit_env+0x236>
		{
			curenv = NULL;
f01053f2:	c7 05 14 72 65 f0 00 	movl   $0x0,0xf0657214
f01053f9:	00 00 00 
			fos_scheduler();
f01053fc:	e8 44 f2 ff ff       	call   f0104645 <fos_scheduler>
		}
	}
}
f0105401:	90                   	nop
f0105402:	c9                   	leave  
f0105403:	c3                   	ret    

f0105404 <sched_exit_all_ready_envs>:

/*2018*/
void sched_exit_all_ready_envs()
{
f0105404:	55                   	push   %ebp
f0105405:	89 e5                	mov    %esp,%ebp
f0105407:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010540a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105411:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105418:	e9 37 01 00 00       	jmp    f0105554 <sched_exit_all_ready_envs+0x150>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f010541d:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0105422:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105425:	c1 e2 04             	shl    $0x4,%edx
f0105428:	01 d0                	add    %edx,%eax
f010542a:	8b 00                	mov    (%eax),%eax
f010542c:	85 c0                	test   %eax,%eax
f010542e:	0f 84 1d 01 00 00    	je     f0105551 <sched_exit_all_ready_envs+0x14d>
		{
			ptr_env=NULL;
f0105434:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010543b:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0105440:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105443:	c1 e2 04             	shl    $0x4,%edx
f0105446:	01 d0                	add    %edx,%eax
f0105448:	8b 00                	mov    (%eax),%eax
f010544a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010544d:	e9 c7 00 00 00       	jmp    f0105519 <sched_exit_all_ready_envs+0x115>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105452:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105456:	75 17                	jne    f010546f <sched_exit_all_ready_envs+0x6b>
f0105458:	83 ec 04             	sub    $0x4,%esp
f010545b:	68 88 55 13 f0       	push   $0xf0135588
f0105460:	68 0c 02 00 00       	push   $0x20c
f0105465:	68 77 55 13 f0       	push   $0xf0135577
f010546a:	e8 8c ad ff ff       	call   f01001fb <_panic>
f010546f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105472:	8b 40 44             	mov    0x44(%eax),%eax
f0105475:	85 c0                	test   %eax,%eax
f0105477:	74 11                	je     f010548a <sched_exit_all_ready_envs+0x86>
f0105479:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010547c:	8b 40 44             	mov    0x44(%eax),%eax
f010547f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105482:	8b 52 48             	mov    0x48(%edx),%edx
f0105485:	89 50 48             	mov    %edx,0x48(%eax)
f0105488:	eb 16                	jmp    f01054a0 <sched_exit_all_ready_envs+0x9c>
f010548a:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010548f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105492:	c1 e2 04             	shl    $0x4,%edx
f0105495:	01 c2                	add    %eax,%edx
f0105497:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010549a:	8b 40 48             	mov    0x48(%eax),%eax
f010549d:	89 42 04             	mov    %eax,0x4(%edx)
f01054a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054a3:	8b 40 48             	mov    0x48(%eax),%eax
f01054a6:	85 c0                	test   %eax,%eax
f01054a8:	74 11                	je     f01054bb <sched_exit_all_ready_envs+0xb7>
f01054aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054ad:	8b 40 48             	mov    0x48(%eax),%eax
f01054b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01054b3:	8b 52 44             	mov    0x44(%edx),%edx
f01054b6:	89 50 44             	mov    %edx,0x44(%eax)
f01054b9:	eb 15                	jmp    f01054d0 <sched_exit_all_ready_envs+0xcc>
f01054bb:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f01054c0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01054c3:	c1 e2 04             	shl    $0x4,%edx
f01054c6:	01 c2                	add    %eax,%edx
f01054c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054cb:	8b 40 44             	mov    0x44(%eax),%eax
f01054ce:	89 02                	mov    %eax,(%edx)
f01054d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054d3:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01054da:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054dd:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01054e4:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f01054e9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01054ec:	c1 e2 04             	shl    $0x4,%edx
f01054ef:	01 d0                	add    %edx,%eax
f01054f1:	8b 50 0c             	mov    0xc(%eax),%edx
f01054f4:	4a                   	dec    %edx
f01054f5:	89 50 0c             	mov    %edx,0xc(%eax)
				sched_insert_exit(ptr_env);
f01054f8:	83 ec 0c             	sub    $0xc,%esp
f01054fb:	ff 75 f4             	pushl  -0xc(%ebp)
f01054fe:	e8 80 f5 ff ff       	call   f0104a83 <sched_insert_exit>
f0105503:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105506:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010550b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010550e:	c1 e2 04             	shl    $0x4,%edx
f0105511:	01 d0                	add    %edx,%eax
f0105513:	8b 40 08             	mov    0x8(%eax),%eax
f0105516:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105519:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010551e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105521:	c1 e2 04             	shl    $0x4,%edx
f0105524:	01 d0                	add    %edx,%eax
f0105526:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010552a:	74 08                	je     f0105534 <sched_exit_all_ready_envs+0x130>
f010552c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010552f:	8b 52 44             	mov    0x44(%edx),%edx
f0105532:	eb 05                	jmp    f0105539 <sched_exit_all_ready_envs+0x135>
f0105534:	ba 00 00 00 00       	mov    $0x0,%edx
f0105539:	89 50 08             	mov    %edx,0x8(%eax)
f010553c:	8b 40 08             	mov    0x8(%eax),%eax
f010553f:	85 c0                	test   %eax,%eax
f0105541:	0f 85 0b ff ff ff    	jne    f0105452 <sched_exit_all_ready_envs+0x4e>
f0105547:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010554b:	0f 85 01 ff ff ff    	jne    f0105452 <sched_exit_all_ready_envs+0x4e>

/*2018*/
void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105551:	ff 45 f0             	incl   -0x10(%ebp)
f0105554:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0105559:	0f b6 c0             	movzbl %al,%eax
f010555c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010555f:	0f 8f b8 fe ff ff    	jg     f010541d <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f0105565:	90                   	nop
f0105566:	c9                   	leave  
f0105567:	c3                   	ret    

f0105568 <sched_kill_env>:

/*2015*/
void sched_kill_env(uint32 envId)
{
f0105568:	55                   	push   %ebp
f0105569:	89 e5                	mov    %esp,%ebp
f010556b:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010556e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f0105575:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f010557c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105580:	0f 85 a0 00 00 00    	jne    f0105626 <sched_kill_env+0xbe>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105586:	a1 3c 7b 65 f0       	mov    0xf0657b3c,%eax
f010558b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010558e:	eb 67                	jmp    f01055f7 <sched_kill_env+0x8f>
					{
			if(ptr_env->env_id == envId)
f0105590:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105593:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105596:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105599:	75 54                	jne    f01055ef <sched_kill_env+0x87>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f010559b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010559e:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f01055a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055a7:	8b 40 4c             	mov    0x4c(%eax),%eax
f01055aa:	83 ec 04             	sub    $0x4,%esp
f01055ad:	52                   	push   %edx
f01055ae:	50                   	push   %eax
f01055af:	68 d4 57 13 f0       	push   $0xf01357d4
f01055b4:	e8 c9 b6 ff ff       	call   f0100c82 <cprintf>
f01055b9:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f01055bc:	83 ec 0c             	sub    $0xc,%esp
f01055bf:	ff 75 f4             	pushl  -0xc(%ebp)
f01055c2:	e8 17 f4 ff ff       	call   f01049de <sched_remove_new>
f01055c7:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f01055ca:	83 ec 0c             	sub    $0xc,%esp
f01055cd:	ff 75 f4             	pushl  -0xc(%ebp)
f01055d0:	e8 83 43 00 00       	call   f0109958 <env_free>
f01055d5:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01055d8:	83 ec 0c             	sub    $0xc,%esp
f01055db:	68 53 57 13 f0       	push   $0xf0135753
f01055e0:	e8 9d b6 ff ff       	call   f0100c82 <cprintf>
f01055e5:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01055e8:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01055ef:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f01055f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01055f7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01055fb:	74 08                	je     f0105605 <sched_kill_env+0x9d>
f01055fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105600:	8b 40 44             	mov    0x44(%eax),%eax
f0105603:	eb 05                	jmp    f010560a <sched_kill_env+0xa2>
f0105605:	b8 00 00 00 00       	mov    $0x0,%eax
f010560a:	a3 44 7b 65 f0       	mov    %eax,0xf0657b44
f010560f:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f0105614:	85 c0                	test   %eax,%eax
f0105616:	0f 85 74 ff ff ff    	jne    f0105590 <sched_kill_env+0x28>
f010561c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105620:	0f 85 6a ff ff ff    	jne    f0105590 <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
					}
	}
	if (!found)
f0105626:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010562a:	0f 85 a6 01 00 00    	jne    f01057d6 <sched_kill_env+0x26e>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105630:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105637:	e9 86 01 00 00       	jmp    f01057c2 <sched_kill_env+0x25a>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f010563c:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0105641:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105644:	c1 e2 04             	shl    $0x4,%edx
f0105647:	01 d0                	add    %edx,%eax
f0105649:	8b 00                	mov    (%eax),%eax
f010564b:	85 c0                	test   %eax,%eax
f010564d:	0f 84 66 01 00 00    	je     f01057b9 <sched_kill_env+0x251>
			{
				ptr_env=NULL;
f0105653:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010565a:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010565f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105662:	c1 e2 04             	shl    $0x4,%edx
f0105665:	01 d0                	add    %edx,%eax
f0105667:	8b 00                	mov    (%eax),%eax
f0105669:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010566c:	e9 10 01 00 00       	jmp    f0105781 <sched_kill_env+0x219>
				{
					if(ptr_env->env_id == envId)
f0105671:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105674:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105677:	3b 45 08             	cmp    0x8(%ebp),%eax
f010567a:	0f 85 ee 00 00 00    	jne    f010576e <sched_kill_env+0x206>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f0105680:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105683:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0105689:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010568c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010568f:	ff 75 ec             	pushl  -0x14(%ebp)
f0105692:	52                   	push   %edx
f0105693:	50                   	push   %eax
f0105694:	68 fc 57 13 f0       	push   $0xf01357fc
f0105699:	e8 e4 b5 ff ff       	call   f0100c82 <cprintf>
f010569e:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f01056a1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056a5:	75 17                	jne    f01056be <sched_kill_env+0x156>
f01056a7:	83 ec 04             	sub    $0x4,%esp
f01056aa:	68 88 55 13 f0       	push   $0xf0135588
f01056af:	68 33 02 00 00       	push   $0x233
f01056b4:	68 77 55 13 f0       	push   $0xf0135577
f01056b9:	e8 3d ab ff ff       	call   f01001fb <_panic>
f01056be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056c1:	8b 40 44             	mov    0x44(%eax),%eax
f01056c4:	85 c0                	test   %eax,%eax
f01056c6:	74 11                	je     f01056d9 <sched_kill_env+0x171>
f01056c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056cb:	8b 40 44             	mov    0x44(%eax),%eax
f01056ce:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01056d1:	8b 52 48             	mov    0x48(%edx),%edx
f01056d4:	89 50 48             	mov    %edx,0x48(%eax)
f01056d7:	eb 16                	jmp    f01056ef <sched_kill_env+0x187>
f01056d9:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f01056de:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01056e1:	c1 e2 04             	shl    $0x4,%edx
f01056e4:	01 c2                	add    %eax,%edx
f01056e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056e9:	8b 40 48             	mov    0x48(%eax),%eax
f01056ec:	89 42 04             	mov    %eax,0x4(%edx)
f01056ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056f2:	8b 40 48             	mov    0x48(%eax),%eax
f01056f5:	85 c0                	test   %eax,%eax
f01056f7:	74 11                	je     f010570a <sched_kill_env+0x1a2>
f01056f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056fc:	8b 40 48             	mov    0x48(%eax),%eax
f01056ff:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105702:	8b 52 44             	mov    0x44(%edx),%edx
f0105705:	89 50 44             	mov    %edx,0x44(%eax)
f0105708:	eb 15                	jmp    f010571f <sched_kill_env+0x1b7>
f010570a:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010570f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105712:	c1 e2 04             	shl    $0x4,%edx
f0105715:	01 c2                	add    %eax,%edx
f0105717:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010571a:	8b 40 44             	mov    0x44(%eax),%eax
f010571d:	89 02                	mov    %eax,(%edx)
f010571f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105722:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105729:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010572c:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105733:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0105738:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010573b:	c1 e2 04             	shl    $0x4,%edx
f010573e:	01 d0                	add    %edx,%eax
f0105740:	8b 50 0c             	mov    0xc(%eax),%edx
f0105743:	4a                   	dec    %edx
f0105744:	89 50 0c             	mov    %edx,0xc(%eax)
						env_free(ptr_env);
f0105747:	83 ec 0c             	sub    $0xc,%esp
f010574a:	ff 75 f4             	pushl  -0xc(%ebp)
f010574d:	e8 06 42 00 00       	call   f0109958 <env_free>
f0105752:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f0105755:	83 ec 0c             	sub    $0xc,%esp
f0105758:	68 53 57 13 f0       	push   $0xf0135753
f010575d:	e8 20 b5 ff ff       	call   f0100c82 <cprintf>
f0105762:	83 c4 10             	add    $0x10,%esp
						found = 1;
f0105765:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f010576c:	eb 4b                	jmp    f01057b9 <sched_kill_env+0x251>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010576e:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0105773:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105776:	c1 e2 04             	shl    $0x4,%edx
f0105779:	01 d0                	add    %edx,%eax
f010577b:	8b 40 08             	mov    0x8(%eax),%eax
f010577e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105781:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0105786:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105789:	c1 e2 04             	shl    $0x4,%edx
f010578c:	01 d0                	add    %edx,%eax
f010578e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105792:	74 08                	je     f010579c <sched_kill_env+0x234>
f0105794:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105797:	8b 52 44             	mov    0x44(%edx),%edx
f010579a:	eb 05                	jmp    f01057a1 <sched_kill_env+0x239>
f010579c:	ba 00 00 00 00       	mov    $0x0,%edx
f01057a1:	89 50 08             	mov    %edx,0x8(%eax)
f01057a4:	8b 40 08             	mov    0x8(%eax),%eax
f01057a7:	85 c0                	test   %eax,%eax
f01057a9:	0f 85 c2 fe ff ff    	jne    f0105671 <sched_kill_env+0x109>
f01057af:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01057b3:	0f 85 b8 fe ff ff    	jne    f0105671 <sched_kill_env+0x109>
						break;
						//return;
					}
				}
			}
			if (found)
f01057b9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01057bd:	75 16                	jne    f01057d5 <sched_kill_env+0x26d>
			}
					}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01057bf:	ff 45 ec             	incl   -0x14(%ebp)
f01057c2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01057c7:	0f b6 c0             	movzbl %al,%eax
f01057ca:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01057cd:	0f 8f 69 fe ff ff    	jg     f010563c <sched_kill_env+0xd4>
f01057d3:	eb 01                	jmp    f01057d6 <sched_kill_env+0x26e>
						//return;
					}
				}
			}
			if (found)
				break;
f01057d5:	90                   	nop
		}
	}
	if (!found)
f01057d6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01057da:	0f 85 a7 00 00 00    	jne    f0105887 <sched_kill_env+0x31f>
	{
		ptr_env=NULL;
f01057e0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01057e7:	a1 f4 7a 65 f0       	mov    0xf0657af4,%eax
f01057ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01057ef:	eb 67                	jmp    f0105858 <sched_kill_env+0x2f0>
		{
			if(ptr_env->env_id == envId)
f01057f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057f4:	8b 40 4c             	mov    0x4c(%eax),%eax
f01057f7:	3b 45 08             	cmp    0x8(%ebp),%eax
f01057fa:	75 54                	jne    f0105850 <sched_kill_env+0x2e8>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f01057fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057ff:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0105805:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105808:	8b 40 4c             	mov    0x4c(%eax),%eax
f010580b:	83 ec 04             	sub    $0x4,%esp
f010580e:	52                   	push   %edx
f010580f:	50                   	push   %eax
f0105810:	68 28 58 13 f0       	push   $0xf0135828
f0105815:	e8 68 b4 ff ff       	call   f0100c82 <cprintf>
f010581a:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f010581d:	83 ec 0c             	sub    $0xc,%esp
f0105820:	ff 75 f4             	pushl  -0xc(%ebp)
f0105823:	e8 9e f2 ff ff       	call   f0104ac6 <sched_remove_exit>
f0105828:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f010582b:	83 ec 0c             	sub    $0xc,%esp
f010582e:	ff 75 f4             	pushl  -0xc(%ebp)
f0105831:	e8 22 41 00 00       	call   f0109958 <env_free>
f0105836:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105839:	83 ec 0c             	sub    $0xc,%esp
f010583c:	68 53 57 13 f0       	push   $0xf0135753
f0105841:	e8 3c b4 ff ff       	call   f0100c82 <cprintf>
f0105846:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105849:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105850:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f0105855:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105858:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010585c:	74 08                	je     f0105866 <sched_kill_env+0x2fe>
f010585e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105861:	8b 40 44             	mov    0x44(%eax),%eax
f0105864:	eb 05                	jmp    f010586b <sched_kill_env+0x303>
f0105866:	b8 00 00 00 00       	mov    $0x0,%eax
f010586b:	a3 fc 7a 65 f0       	mov    %eax,0xf0657afc
f0105870:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f0105875:	85 c0                	test   %eax,%eax
f0105877:	0f 85 74 ff ff ff    	jne    f01057f1 <sched_kill_env+0x289>
f010587d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105881:	0f 85 6a ff ff ff    	jne    f01057f1 <sched_kill_env+0x289>
				//return;
			}
		}
	}

	if (!found)
f0105887:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010588b:	0f 85 a0 00 00 00    	jne    f0105931 <sched_kill_env+0x3c9>
	{
		if (curenv->env_id == envId)
f0105891:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f0105896:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105899:	3b 45 08             	cmp    0x8(%ebp),%eax
f010589c:	0f 85 8f 00 00 00    	jne    f0105931 <sched_kill_env+0x3c9>
		{
			ptr_env = curenv;
f01058a2:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f01058a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_id == ENV_RUNNABLE);
f01058aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058ad:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058b0:	83 f8 02             	cmp    $0x2,%eax
f01058b3:	74 19                	je     f01058ce <sched_kill_env+0x366>
f01058b5:	68 50 58 13 f0       	push   $0xf0135850
f01058ba:	68 70 58 13 f0       	push   $0xf0135870
f01058bf:	68 56 02 00 00       	push   $0x256
f01058c4:	68 77 55 13 f0       	push   $0xf0135577
f01058c9:	e8 2d a9 ff ff       	call   f01001fb <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f01058ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058d1:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f01058d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058da:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058dd:	83 ec 04             	sub    $0x4,%esp
f01058e0:	52                   	push   %edx
f01058e1:	50                   	push   %eax
f01058e2:	68 88 58 13 f0       	push   $0xf0135888
f01058e7:	e8 96 b3 ff ff       	call   f0100c82 <cprintf>
f01058ec:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f01058ef:	83 ec 0c             	sub    $0xc,%esp
f01058f2:	ff 75 f4             	pushl  -0xc(%ebp)
f01058f5:	e8 5e 40 00 00       	call   f0109958 <env_free>
f01058fa:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01058fd:	83 ec 0c             	sub    $0xc,%esp
f0105900:	68 53 57 13 f0       	push   $0xf0135753
f0105905:	e8 78 b3 ff ff       	call   f0100c82 <cprintf>
f010590a:	83 c4 10             	add    $0x10,%esp
			found = 1;
f010590d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//If it's the curenv, then reset it and reinvoke the scheduler
			//as there's no meaning to return back to a killed env
			//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
			lcr3(phys_page_directory);
f0105914:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f0105919:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010591c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010591f:	0f 22 d8             	mov    %eax,%cr3
			curenv = NULL;
f0105922:	c7 05 14 72 65 f0 00 	movl   $0x0,0xf0657214
f0105929:	00 00 00 
			fos_scheduler();
f010592c:	e8 14 ed ff ff       	call   f0104645 <fos_scheduler>
		}
	}
}
f0105931:	90                   	nop
f0105932:	c9                   	leave  
f0105933:	c3                   	ret    

f0105934 <clock_interrupt_handler>:


void clock_interrupt_handler()
{
f0105934:	55                   	push   %ebp
f0105935:	89 e5                	mov    %esp,%ebp
f0105937:	83 ec 08             	sub    $0x8,%esp
	//cputchar('i');

	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010593a:	83 ec 0c             	sub    $0xc,%esp
f010593d:	6a 01                	push   $0x1
f010593f:	e8 bd 81 00 00       	call   f010db01 <isPageReplacmentAlgorithmLRU>
f0105944:	83 c4 10             	add    $0x10,%esp
f0105947:	85 c0                	test   %eax,%eax
f0105949:	74 05                	je     f0105950 <clock_interrupt_handler+0x1c>
	{
		update_WS_time_stamps();
f010594b:	e8 05 00 00 00       	call   f0105955 <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f0105950:	e8 f0 ec ff ff       	call   f0104645 <fos_scheduler>

f0105955 <update_WS_time_stamps>:
}

void update_WS_time_stamps()
{
f0105955:	55                   	push   %ebp
f0105956:	89 e5                	mov    %esp,%ebp
f0105958:	53                   	push   %ebx
f0105959:	83 ec 24             	sub    $0x24,%esp
	struct Env *curr_env_ptr = curenv;
f010595c:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f0105961:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f0105964:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0105968:	0f 84 cc 01 00 00    	je     f0105b3a <update_WS_time_stamps+0x1e5>
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f010596e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0105975:	e9 cf 00 00 00       	jmp    f0105a49 <update_WS_time_stamps+0xf4>
			{
				if( curr_env_ptr->ptr_pageWorkingSet[i].empty != 1)
f010597a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010597d:	8b 48 78             	mov    0x78(%eax),%ecx
f0105980:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105983:	89 d0                	mov    %edx,%eax
f0105985:	01 c0                	add    %eax,%eax
f0105987:	01 d0                	add    %edx,%eax
f0105989:	c1 e0 03             	shl    $0x3,%eax
f010598c:	01 c8                	add    %ecx,%eax
f010598e:	8a 40 04             	mov    0x4(%eax),%al
f0105991:	3c 01                	cmp    $0x1,%al
f0105993:	0f 84 ad 00 00 00    	je     f0105a46 <update_WS_time_stamps+0xf1>
				{
					//update the time if the page was referenced
					uint32 page_va = curr_env_ptr->ptr_pageWorkingSet[i].virtual_address ;
f0105999:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010599c:	8b 48 78             	mov    0x78(%eax),%ecx
f010599f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01059a2:	89 d0                	mov    %edx,%eax
f01059a4:	01 c0                	add    %eax,%eax
f01059a6:	01 d0                	add    %edx,%eax
f01059a8:	c1 e0 03             	shl    $0x3,%eax
f01059ab:	01 c8                	add    %ecx,%eax
f01059ad:	8b 00                	mov    (%eax),%eax
f01059af:	89 45 e8             	mov    %eax,-0x18(%ebp)
					uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f01059b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01059b5:	8b 40 5c             	mov    0x5c(%eax),%eax
f01059b8:	83 ec 08             	sub    $0x8,%esp
f01059bb:	ff 75 e8             	pushl  -0x18(%ebp)
f01059be:	50                   	push   %eax
f01059bf:	e8 0d 22 00 00       	call   f0107bd1 <pt_get_page_permissions>
f01059c4:	83 c4 10             	add    $0x10,%esp
f01059c7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->ptr_pageWorkingSet[i].time_stamp;
f01059ca:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01059cd:	8b 48 78             	mov    0x78(%eax),%ecx
f01059d0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01059d3:	89 d0                	mov    %edx,%eax
f01059d5:	01 c0                	add    %eax,%eax
f01059d7:	01 d0                	add    %edx,%eax
f01059d9:	c1 e0 03             	shl    $0x3,%eax
f01059dc:	01 c8                	add    %ecx,%eax
f01059de:	8b 40 08             	mov    0x8(%eax),%eax
f01059e1:	89 45 e0             	mov    %eax,-0x20(%ebp)

					if (perm & PERM_USED)
f01059e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01059e7:	83 e0 20             	and    $0x20,%eax
f01059ea:	85 c0                	test   %eax,%eax
f01059ec:	74 3b                	je     f0105a29 <update_WS_time_stamps+0xd4>
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f01059ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01059f1:	8b 48 78             	mov    0x78(%eax),%ecx
f01059f4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01059f7:	89 d0                	mov    %edx,%eax
f01059f9:	01 c0                	add    %eax,%eax
f01059fb:	01 d0                	add    %edx,%eax
f01059fd:	c1 e0 03             	shl    $0x3,%eax
f0105a00:	01 c8                	add    %ecx,%eax
f0105a02:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105a05:	c1 ea 02             	shr    $0x2,%edx
f0105a08:	81 ca 00 00 00 80    	or     $0x80000000,%edx
f0105a0e:	89 50 08             	mov    %edx,0x8(%eax)
						pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f0105a11:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a14:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105a17:	6a 20                	push   $0x20
f0105a19:	6a 00                	push   $0x0
f0105a1b:	ff 75 e8             	pushl  -0x18(%ebp)
f0105a1e:	50                   	push   %eax
f0105a1f:	e8 f9 20 00 00       	call   f0107b1d <pt_set_page_permissions>
f0105a24:	83 c4 10             	add    $0x10,%esp
f0105a27:	eb 1d                	jmp    f0105a46 <update_WS_time_stamps+0xf1>
					}
					else
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2);
f0105a29:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a2c:	8b 48 78             	mov    0x78(%eax),%ecx
f0105a2f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105a32:	89 d0                	mov    %edx,%eax
f0105a34:	01 c0                	add    %eax,%eax
f0105a36:	01 d0                	add    %edx,%eax
f0105a38:	c1 e0 03             	shl    $0x3,%eax
f0105a3b:	01 c8                	add    %ecx,%eax
f0105a3d:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105a40:	c1 ea 02             	shr    $0x2,%edx
f0105a43:	89 50 08             	mov    %edx,0x8(%eax)

	if(curr_env_ptr != NULL)
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0105a46:	ff 45 f4             	incl   -0xc(%ebp)
f0105a49:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a4c:	8b 50 74             	mov    0x74(%eax),%edx
f0105a4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a52:	39 c2                	cmp    %eax,%edx
f0105a54:	0f 87 20 ff ff ff    	ja     f010597a <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105a5a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105a61:	e9 ca 00 00 00       	jmp    f0105b30 <update_WS_time_stamps+0x1db>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f0105a66:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105a69:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105a6c:	89 d0                	mov    %edx,%eax
f0105a6e:	01 c0                	add    %eax,%eax
f0105a70:	01 d0                	add    %edx,%eax
f0105a72:	c1 e0 03             	shl    $0x3,%eax
f0105a75:	01 c8                	add    %ecx,%eax
f0105a77:	83 e8 80             	sub    $0xffffff80,%eax
f0105a7a:	8a 00                	mov    (%eax),%al
f0105a7c:	3c 01                	cmp    $0x1,%al
f0105a7e:	0f 84 a9 00 00 00    	je     f0105b2d <update_WS_time_stamps+0x1d8>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f0105a84:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105a87:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105a8a:	89 d0                	mov    %edx,%eax
f0105a8c:	01 c0                	add    %eax,%eax
f0105a8e:	01 d0                	add    %edx,%eax
f0105a90:	c1 e0 03             	shl    $0x3,%eax
f0105a93:	01 c8                	add    %ecx,%eax
f0105a95:	83 c0 7c             	add    $0x7c,%eax
f0105a98:	8b 00                	mov    (%eax),%eax
f0105a9a:	89 45 dc             	mov    %eax,-0x24(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f0105a9d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105aa0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105aa3:	89 d0                	mov    %edx,%eax
f0105aa5:	01 c0                	add    %eax,%eax
f0105aa7:	01 d0                	add    %edx,%eax
f0105aa9:	c1 e0 03             	shl    $0x3,%eax
f0105aac:	01 c8                	add    %ecx,%eax
f0105aae:	05 84 00 00 00       	add    $0x84,%eax
f0105ab3:	8b 00                	mov    (%eax),%eax
f0105ab5:	89 45 d8             	mov    %eax,-0x28(%ebp)

					if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f0105ab8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105abb:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105abe:	83 ec 08             	sub    $0x8,%esp
f0105ac1:	ff 75 dc             	pushl  -0x24(%ebp)
f0105ac4:	50                   	push   %eax
f0105ac5:	e8 26 22 00 00       	call   f0107cf0 <pd_is_table_used>
f0105aca:	83 c4 10             	add    $0x10,%esp
f0105acd:	85 c0                	test   %eax,%eax
f0105acf:	74 3c                	je     f0105b0d <update_WS_time_stamps+0x1b8>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105ad1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105ad4:	c1 e8 02             	shr    $0x2,%eax
f0105ad7:	0d 00 00 00 80       	or     $0x80000000,%eax
f0105adc:	89 c1                	mov    %eax,%ecx
f0105ade:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105ae1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105ae4:	89 d0                	mov    %edx,%eax
f0105ae6:	01 c0                	add    %eax,%eax
f0105ae8:	01 d0                	add    %edx,%eax
f0105aea:	c1 e0 03             	shl    $0x3,%eax
f0105aed:	01 d8                	add    %ebx,%eax
f0105aef:	05 84 00 00 00       	add    $0x84,%eax
f0105af4:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f0105af6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105af9:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105afc:	83 ec 08             	sub    $0x8,%esp
f0105aff:	ff 75 dc             	pushl  -0x24(%ebp)
f0105b02:	50                   	push   %eax
f0105b03:	e8 0c 22 00 00       	call   f0107d14 <pd_set_table_unused>
f0105b08:	83 c4 10             	add    $0x10,%esp
f0105b0b:	eb 20                	jmp    f0105b2d <update_WS_time_stamps+0x1d8>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f0105b0d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105b10:	c1 e8 02             	shr    $0x2,%eax
f0105b13:	89 c1                	mov    %eax,%ecx
f0105b15:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105b18:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b1b:	89 d0                	mov    %edx,%eax
f0105b1d:	01 c0                	add    %eax,%eax
f0105b1f:	01 d0                	add    %edx,%eax
f0105b21:	c1 e0 03             	shl    $0x3,%eax
f0105b24:	01 d8                	add    %ebx,%eax
f0105b26:	05 84 00 00 00       	add    $0x84,%eax
f0105b2b:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105b2d:	ff 45 f0             	incl   -0x10(%ebp)
f0105b30:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f0105b34:	0f 8e 2c ff ff ff    	jle    f0105a66 <update_WS_time_stamps+0x111>
					}
				}
			}
		}
	}
}
f0105b3a:	90                   	nop
f0105b3b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0105b3e:	c9                   	leave  
f0105b3f:	c3                   	ret    

f0105b40 <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f0105b40:	55                   	push   %ebp
f0105b41:	89 e5                	mov    %esp,%ebp
f0105b43:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f0105b46:	c7 05 0c 72 65 f0 01 	movl   $0x1,0xf065720c
f0105b4d:	00 00 00 
f0105b50:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f0105b57:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0105b5b:	8a 45 b2             	mov    -0x4e(%ebp),%al
f0105b5e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105b61:	ee                   	out    %al,(%dx)
f0105b62:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f0105b69:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f0105b6d:	8a 45 b3             	mov    -0x4d(%ebp),%al
f0105b70:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b73:	ee                   	out    %al,(%dx)
f0105b74:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f0105b7b:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f0105b7f:	8a 45 b4             	mov    -0x4c(%ebp),%al
f0105b82:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105b85:	ee                   	out    %al,(%dx)
f0105b86:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f0105b8d:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f0105b91:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0105b94:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0105b97:	ee                   	out    %al,(%dx)
f0105b98:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f0105b9f:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0105ba3:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0105ba6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0105ba9:	ee                   	out    %al,(%dx)
f0105baa:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f0105bb1:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0105bb5:	8a 45 b7             	mov    -0x49(%ebp),%al
f0105bb8:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105bbb:	ee                   	out    %al,(%dx)
f0105bbc:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0105bc3:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0105bc7:	8a 45 b8             	mov    -0x48(%ebp),%al
f0105bca:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0105bcd:	ee                   	out    %al,(%dx)
f0105bce:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0105bd5:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0105bd9:	8a 45 b9             	mov    -0x47(%ebp),%al
f0105bdc:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105bdf:	ee                   	out    %al,(%dx)
f0105be0:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0105be7:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0105beb:	8a 45 ba             	mov    -0x46(%ebp),%al
f0105bee:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0105bf1:	ee                   	out    %al,(%dx)
f0105bf2:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0105bf9:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f0105bfd:	8a 45 bb             	mov    -0x45(%ebp),%al
f0105c00:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0105c03:	ee                   	out    %al,(%dx)
f0105c04:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0105c0b:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f0105c0f:	8a 45 bc             	mov    -0x44(%ebp),%al
f0105c12:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0105c15:	ee                   	out    %al,(%dx)
f0105c16:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f0105c1d:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f0105c21:	8a 45 bd             	mov    -0x43(%ebp),%al
f0105c24:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0105c27:	ee                   	out    %al,(%dx)
f0105c28:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f0105c2f:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f0105c33:	8a 45 be             	mov    -0x42(%ebp),%al
f0105c36:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0105c39:	ee                   	out    %al,(%dx)
f0105c3a:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f0105c41:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f0105c45:	8a 45 bf             	mov    -0x41(%ebp),%al
f0105c48:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0105c4b:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f0105c4c:	66 a1 b0 18 19 f0    	mov    0xf01918b0,%ax
f0105c52:	66 83 f8 ff          	cmp    $0xffff,%ax
f0105c56:	74 15                	je     f0105c6d <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f0105c58:	66 a1 b0 18 19 f0    	mov    0xf01918b0,%ax
f0105c5e:	0f b7 c0             	movzwl %ax,%eax
f0105c61:	83 ec 0c             	sub    $0xc,%esp
f0105c64:	50                   	push   %eax
f0105c65:	e8 06 00 00 00       	call   f0105c70 <irq_setmask_8259A>
f0105c6a:	83 c4 10             	add    $0x10,%esp
}
f0105c6d:	90                   	nop
f0105c6e:	c9                   	leave  
f0105c6f:	c3                   	ret    

f0105c70 <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f0105c70:	55                   	push   %ebp
f0105c71:	89 e5                	mov    %esp,%ebp
f0105c73:	83 ec 14             	sub    $0x14,%esp
f0105c76:	8b 45 08             	mov    0x8(%ebp),%eax
f0105c79:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f0105c7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105c80:	66 a3 b0 18 19 f0    	mov    %ax,0xf01918b0
	if (!didinit)
f0105c86:	a1 0c 72 65 f0       	mov    0xf065720c,%eax
f0105c8b:	85 c0                	test   %eax,%eax
f0105c8d:	74 34                	je     f0105cc3 <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f0105c8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105c92:	0f b6 c0             	movzbl %al,%eax
f0105c95:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0105c9c:	88 45 f6             	mov    %al,-0xa(%ebp)
f0105c9f:	8a 45 f6             	mov    -0xa(%ebp),%al
f0105ca2:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0105ca5:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f0105ca6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105ca9:	66 c1 e8 08          	shr    $0x8,%ax
f0105cad:	0f b6 c0             	movzbl %al,%eax
f0105cb0:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0105cb7:	88 45 f7             	mov    %al,-0x9(%ebp)
f0105cba:	8a 45 f7             	mov    -0x9(%ebp),%al
f0105cbd:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0105cc0:	ee                   	out    %al,(%dx)
f0105cc1:	eb 01                	jmp    f0105cc4 <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f0105cc3:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f0105cc4:	c9                   	leave  
f0105cc5:	c3                   	ret    

f0105cc6 <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f0105cc6:	55                   	push   %ebp
f0105cc7:	89 e5                	mov    %esp,%ebp
f0105cc9:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0105ccc:	83 ec 08             	sub    $0x8,%esp
f0105ccf:	68 00 10 00 00       	push   $0x1000
f0105cd4:	68 00 10 00 00       	push   $0x1000
f0105cd9:	e8 6a 02 00 00       	call   f0105f48 <boot_allocate_space>
f0105cde:	83 c4 10             	add    $0x10,%esp
f0105ce1:	a3 7c 7b 65 f0       	mov    %eax,0xf0657b7c
	memset(ptr_page_directory, 0, PAGE_SIZE);
f0105ce6:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0105ceb:	83 ec 04             	sub    $0x4,%esp
f0105cee:	68 00 10 00 00       	push   $0x1000
f0105cf3:	6a 00                	push   $0x0
f0105cf5:	50                   	push   %eax
f0105cf6:	e8 7d b1 02 00       	call   f0130e78 <memset>
f0105cfb:	83 c4 10             	add    $0x10,%esp
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0105cfe:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0105d03:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0105d06:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f0105d0d:	77 14                	ja     f0105d23 <initialize_kernel_VM+0x5d>
f0105d0f:	ff 75 e8             	pushl  -0x18(%ebp)
f0105d12:	68 b4 58 13 f0       	push   $0xf01358b4
f0105d17:	6a 45                	push   $0x45
f0105d19:	68 e8 58 13 f0       	push   $0xf01358e8
f0105d1e:	e8 d8 a4 ff ff       	call   f01001fb <_panic>
f0105d23:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105d26:	05 00 00 00 10       	add    $0x10000000,%eax
f0105d2b:	a3 ac 7b 65 f0       	mov    %eax,0xf0657bac
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f0105d30:	c7 45 e4 00 90 18 f0 	movl   $0xf0189000,-0x1c(%ebp)
f0105d37:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f0105d3e:	77 14                	ja     f0105d54 <initialize_kernel_VM+0x8e>
f0105d40:	ff 75 e4             	pushl  -0x1c(%ebp)
f0105d43:	68 b4 58 13 f0       	push   $0xf01358b4
f0105d48:	6a 4d                	push   $0x4d
f0105d4a:	68 e8 58 13 f0       	push   $0xf01358e8
f0105d4f:	e8 a7 a4 ff ff       	call   f01001fb <_panic>
f0105d54:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105d57:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105d5d:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0105d62:	83 ec 0c             	sub    $0xc,%esp
f0105d65:	6a 02                	push   $0x2
f0105d67:	52                   	push   %edx
f0105d68:	68 00 80 00 00       	push   $0x8000
f0105d6d:	68 00 80 bf ef       	push   $0xefbf8000
f0105d72:	50                   	push   %eax
f0105d73:	e8 31 02 00 00       	call   f0105fa9 <boot_map_range>
f0105d78:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f0105d7b:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f0105d82:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f0105d89:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105d90:	eb 25                	jmp    f0105db7 <initialize_kernel_VM+0xf1>
	{
		++nTables;
f0105d92:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f0105d95:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105d98:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0105d9d:	83 ec 04             	sub    $0x4,%esp
f0105da0:	6a 01                	push   $0x1
f0105da2:	52                   	push   %edx
f0105da3:	50                   	push   %eax
f0105da4:	e8 74 02 00 00       	call   f010601d <boot_get_page_table>
f0105da9:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105dac:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f0105db3:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f0105db7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105dbb:	72 d5                	jb     f0105d92 <initialize_kernel_VM+0xcc>
f0105dbd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105dc1:	77 06                	ja     f0105dc9 <initialize_kernel_VM+0x103>
f0105dc3:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f0105dc7:	76 c9                	jbe    f0105d92 <initialize_kernel_VM+0xcc>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f0105dc9:	8b 15 10 7b 65 f0    	mov    0xf0657b10,%edx
f0105dcf:	89 d0                	mov    %edx,%eax
f0105dd1:	01 c0                	add    %eax,%eax
f0105dd3:	01 d0                	add    %edx,%eax
f0105dd5:	c1 e0 03             	shl    $0x3,%eax
f0105dd8:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f0105ddb:	83 ec 08             	sub    $0x8,%esp
f0105dde:	68 00 10 00 00       	push   $0x1000
f0105de3:	ff 75 e0             	pushl  -0x20(%ebp)
f0105de6:	e8 5d 01 00 00       	call   f0105f48 <boot_allocate_space>
f0105deb:	83 c4 10             	add    $0x10,%esp
f0105dee:	a3 54 7b 65 f0       	mov    %eax,0xf0657b54
	memset(frames_info, 0, array_size);
f0105df3:	a1 54 7b 65 f0       	mov    0xf0657b54,%eax
f0105df8:	83 ec 04             	sub    $0x4,%esp
f0105dfb:	ff 75 e0             	pushl  -0x20(%ebp)
f0105dfe:	6a 00                	push   $0x0
f0105e00:	50                   	push   %eax
f0105e01:	e8 72 b0 02 00       	call   f0130e78 <memset>
f0105e06:	83 c4 10             	add    $0x10,%esp
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f0105e09:	c7 45 dc 00 c0 30 00 	movl   $0x30c000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0105e10:	83 ec 08             	sub    $0x8,%esp
f0105e13:	68 00 10 00 00       	push   $0x1000
f0105e18:	ff 75 dc             	pushl  -0x24(%ebp)
f0105e1b:	e8 28 01 00 00       	call   f0105f48 <boot_allocate_space>
f0105e20:	83 c4 10             	add    $0x10,%esp
f0105e23:	a3 dc 7a 65 f0       	mov    %eax,0xf0657adc
	memset(disk_frames_info , 0, disk_array_size);
f0105e28:	a1 dc 7a 65 f0       	mov    0xf0657adc,%eax
f0105e2d:	83 ec 04             	sub    $0x4,%esp
f0105e30:	ff 75 dc             	pushl  -0x24(%ebp)
f0105e33:	6a 00                	push   $0x0
f0105e35:	50                   	push   %eax
f0105e36:	e8 3d b0 02 00       	call   f0130e78 <memset>
f0105e3b:	83 c4 10             	add    $0x10,%esp

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f0105e3e:	e8 d5 04 00 00       	call   f0106318 <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f0105e43:	83 ec 0c             	sub    $0xc,%esp
f0105e46:	68 b1 02 00 00       	push   $0x2b1
f0105e4b:	e8 ac 9b 02 00       	call   f012f9fc <nearest_pow2_ceil>
f0105e50:	83 c4 10             	add    $0x10,%esp
f0105e53:	83 ec 04             	sub    $0x4,%esp
f0105e56:	50                   	push   %eax
f0105e57:	68 b1 02 00 00       	push   $0x2b1
f0105e5c:	68 08 59 13 f0       	push   $0xf0135908
f0105e61:	e8 1c ae ff ff       	call   f0100c82 <cprintf>
f0105e66:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f0105e69:	c7 45 d8 f0 fa 0f 00 	movl   $0xffaf0,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f0105e70:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105e73:	83 ec 08             	sub    $0x8,%esp
f0105e76:	68 00 10 00 00       	push   $0x1000
f0105e7b:	50                   	push   %eax
f0105e7c:	e8 c7 00 00 00       	call   f0105f48 <boot_allocate_space>
f0105e81:	83 c4 10             	add    $0x10,%esp
f0105e84:	a3 10 72 65 f0       	mov    %eax,0xf0657210
	memset(envs , 0, envs_size);
f0105e89:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105e8c:	a1 10 72 65 f0       	mov    0xf0657210,%eax
f0105e91:	83 ec 04             	sub    $0x4,%esp
f0105e94:	52                   	push   %edx
f0105e95:	6a 00                	push   $0x0
f0105e97:	50                   	push   %eax
f0105e98:	e8 db af 02 00       	call   f0130e78 <memset>
f0105e9d:	83 c4 10             	add    $0x10,%esp

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f0105ea0:	a1 10 72 65 f0       	mov    0xf0657210,%eax
f0105ea5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0105ea8:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f0105eaf:	77 17                	ja     f0105ec8 <initialize_kernel_VM+0x202>
f0105eb1:	ff 75 d4             	pushl  -0x2c(%ebp)
f0105eb4:	68 b4 58 13 f0       	push   $0xf01358b4
f0105eb9:	68 96 00 00 00       	push   $0x96
f0105ebe:	68 e8 58 13 f0       	push   $0xf01358e8
f0105ec3:	e8 33 a3 ff ff       	call   f01001fb <_panic>
f0105ec8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0105ecb:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f0105ed1:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105ed4:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0105ed9:	83 ec 0c             	sub    $0xc,%esp
f0105edc:	6a 04                	push   $0x4
f0105ede:	51                   	push   %ecx
f0105edf:	52                   	push   %edx
f0105ee0:	68 00 00 c0 ee       	push   $0xeec00000
f0105ee5:	50                   	push   %eax
f0105ee6:	e8 be 00 00 00       	call   f0105fa9 <boot_map_range>
f0105eeb:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0105eee:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0105ef3:	05 ec 0e 00 00       	add    $0xeec,%eax
f0105ef8:	8b 15 7c 7b 65 f0    	mov    0xf0657b7c,%edx
f0105efe:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f0105f04:	8b 12                	mov    (%edx),%edx
f0105f06:	83 ca 05             	or     $0x5,%edx
f0105f09:	89 10                	mov    %edx,(%eax)
#if USE_KHEAP
	{
		// MAKE SURE THAT THIS MAPPING HAPPENS AFTER ALL BOOT ALLOCATIONS (boot_allocate_space)
		// calls are fininshed, and no remaining data to be allocated for the kernel
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f0105f0b:	a1 78 7b 65 f0       	mov    0xf0657b78,%eax
f0105f10:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105f16:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0105f1b:	83 ec 0c             	sub    $0xc,%esp
f0105f1e:	6a 02                	push   $0x2
f0105f20:	6a 00                	push   $0x0
f0105f22:	52                   	push   %edx
f0105f23:	68 00 00 00 f0       	push   $0xf0000000
f0105f28:	50                   	push   %eax
f0105f29:	e8 7b 00 00 00       	call   f0105fa9 <boot_map_range>
f0105f2e:	83 c4 20             	add    $0x20,%esp
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f0105f31:	e8 ad a2 02 00       	call   f01301e3 <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f0105f36:	c7 05 f0 7a 65 f0 19 	movl   $0x19,0xf0657af0
f0105f3d:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f0105f40:	e8 d3 02 00 00       	call   f0106218 <turn_on_paging>
}
f0105f45:	90                   	nop
f0105f46:	c9                   	leave  
f0105f47:	c3                   	ret    

f0105f48 <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f0105f48:	55                   	push   %ebp
f0105f49:	89 e5                	mov    %esp,%ebp
f0105f4b:	83 ec 10             	sub    $0x10,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f0105f4e:	a1 78 7b 65 f0       	mov    0xf0657b78,%eax
f0105f53:	85 c0                	test   %eax,%eax
f0105f55:	75 0a                	jne    f0105f61 <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f0105f57:	c7 05 78 7b 65 f0 bc 	movl   $0xf0657cbc,0xf0657b78
f0105f5e:	7c 65 f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f0105f61:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105f64:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0105f67:	a1 78 7b 65 f0       	mov    0xf0657b78,%eax
f0105f6c:	89 c2                	mov    %eax,%edx
f0105f6e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0105f71:	01 d0                	add    %edx,%eax
f0105f73:	48                   	dec    %eax
f0105f74:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0105f77:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0105f7a:	ba 00 00 00 00       	mov    $0x0,%edx
f0105f7f:	f7 75 fc             	divl   -0x4(%ebp)
f0105f82:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0105f85:	29 d0                	sub    %edx,%eax
f0105f87:	a3 78 7b 65 f0       	mov    %eax,0xf0657b78

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f0105f8c:	a1 78 7b 65 f0       	mov    0xf0657b78,%eax
f0105f91:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f0105f94:	8b 15 78 7b 65 f0    	mov    0xf0657b78,%edx
f0105f9a:	8b 45 08             	mov    0x8(%ebp),%eax
f0105f9d:	01 d0                	add    %edx,%eax
f0105f9f:	a3 78 7b 65 f0       	mov    %eax,0xf0657b78

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	//memset(ptr_allocated_mem, 0, size);

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f0105fa4:	8b 45 f4             	mov    -0xc(%ebp),%eax

}
f0105fa7:	c9                   	leave  
f0105fa8:	c3                   	ret    

f0105fa9 <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f0105fa9:	55                   	push   %ebp
f0105faa:	89 e5                	mov    %esp,%ebp
f0105fac:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f0105faf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f0105fb6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0105fbd:	eb 53                	jmp    f0106012 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f0105fbf:	83 ec 04             	sub    $0x4,%esp
f0105fc2:	6a 01                	push   $0x1
f0105fc4:	ff 75 0c             	pushl  0xc(%ebp)
f0105fc7:	ff 75 08             	pushl  0x8(%ebp)
f0105fca:	e8 4e 00 00 00       	call   f010601d <boot_get_page_table>
f0105fcf:	83 c4 10             	add    $0x10,%esp
f0105fd2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f0105fd5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105fd8:	c1 e8 0c             	shr    $0xc,%eax
f0105fdb:	25 ff 03 00 00       	and    $0x3ff,%eax
f0105fe0:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f0105fe3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105fe6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0105fed:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105ff0:	01 c2                	add    %eax,%edx
f0105ff2:	8b 45 18             	mov    0x18(%ebp),%eax
f0105ff5:	0b 45 14             	or     0x14(%ebp),%eax
f0105ff8:	83 c8 01             	or     $0x1,%eax
f0105ffb:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f0105ffd:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f0106004:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f010600b:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0106012:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106015:	3b 45 10             	cmp    0x10(%ebp),%eax
f0106018:	72 a5                	jb     f0105fbf <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f010601a:	90                   	nop
f010601b:	c9                   	leave  
f010601c:	c3                   	ret    

f010601d <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f010601d:	55                   	push   %ebp
f010601e:	89 e5                	mov    %esp,%ebp
f0106020:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f0106023:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106026:	c1 e8 16             	shr    $0x16,%eax
f0106029:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f010602c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010602f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106036:	8b 45 08             	mov    0x8(%ebp),%eax
f0106039:	01 d0                	add    %edx,%eax
f010603b:	8b 00                	mov    (%eax),%eax
f010603d:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f0106040:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106043:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106048:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f010604b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010604e:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106051:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106054:	c1 e8 0c             	shr    $0xc,%eax
f0106057:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010605a:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f010605f:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106062:	72 17                	jb     f010607b <boot_get_page_table+0x5e>
f0106064:	ff 75 e8             	pushl  -0x18(%ebp)
f0106067:	68 30 59 13 f0       	push   $0xf0135930
f010606c:	68 15 01 00 00       	push   $0x115
f0106071:	68 e8 58 13 f0       	push   $0xf01358e8
f0106076:	e8 80 a1 ff ff       	call   f01001fb <_panic>
f010607b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010607e:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106083:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f0106086:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010608a:	75 72                	jne    f01060fe <boot_get_page_table+0xe1>
	{
		if (create)
f010608c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0106090:	74 65                	je     f01060f7 <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f0106092:	83 ec 08             	sub    $0x8,%esp
f0106095:	68 00 10 00 00       	push   $0x1000
f010609a:	68 00 10 00 00       	push   $0x1000
f010609f:	e8 a4 fe ff ff       	call   f0105f48 <boot_allocate_space>
f01060a4:	83 c4 10             	add    $0x10,%esp
f01060a7:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f01060aa:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01060ad:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01060b0:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f01060b7:	77 17                	ja     f01060d0 <boot_get_page_table+0xb3>
f01060b9:	ff 75 dc             	pushl  -0x24(%ebp)
f01060bc:	68 b4 58 13 f0       	push   $0xf01358b4
f01060c1:	68 1b 01 00 00       	push   $0x11b
f01060c6:	68 e8 58 13 f0       	push   $0xf01358e8
f01060cb:	e8 2b a1 ff ff       	call   f01001fb <_panic>
f01060d0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01060d3:	05 00 00 00 10       	add    $0x10000000,%eax
f01060d8:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f01060db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060de:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01060e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01060e8:	01 d0                	add    %edx,%eax
f01060ea:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01060ed:	83 ca 03             	or     $0x3,%edx
f01060f0:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f01060f2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01060f5:	eb 0a                	jmp    f0106101 <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f01060f7:	b8 00 00 00 00       	mov    $0x0,%eax
f01060fc:	eb 03                	jmp    f0106101 <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f01060fe:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f0106101:	c9                   	leave  
f0106102:	c3                   	ret    

f0106103 <nvram_read>:


int nvram_read(int r)
{
f0106103:	55                   	push   %ebp
f0106104:	89 e5                	mov    %esp,%ebp
f0106106:	53                   	push   %ebx
f0106107:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f010610a:	8b 45 08             	mov    0x8(%ebp),%eax
f010610d:	83 ec 0c             	sub    $0xc,%esp
f0106110:	50                   	push   %eax
f0106111:	e8 e6 de ff ff       	call   f0103ffc <mc146818_read>
f0106116:	83 c4 10             	add    $0x10,%esp
f0106119:	89 c3                	mov    %eax,%ebx
f010611b:	8b 45 08             	mov    0x8(%ebp),%eax
f010611e:	40                   	inc    %eax
f010611f:	83 ec 0c             	sub    $0xc,%esp
f0106122:	50                   	push   %eax
f0106123:	e8 d4 de ff ff       	call   f0103ffc <mc146818_read>
f0106128:	83 c4 10             	add    $0x10,%esp
f010612b:	c1 e0 08             	shl    $0x8,%eax
f010612e:	09 d8                	or     %ebx,%eax
}
f0106130:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106133:	c9                   	leave  
f0106134:	c3                   	ret    

f0106135 <detect_memory>:

void detect_memory()
{
f0106135:	55                   	push   %ebp
f0106136:	89 e5                	mov    %esp,%ebp
f0106138:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f010613b:	83 ec 0c             	sub    $0xc,%esp
f010613e:	6a 15                	push   $0x15
f0106140:	e8 be ff ff ff       	call   f0106103 <nvram_read>
f0106145:	83 c4 10             	add    $0x10,%esp
f0106148:	c1 e0 0a             	shl    $0xa,%eax
f010614b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010614e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106151:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106156:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f0106159:	83 ec 0c             	sub    $0xc,%esp
f010615c:	6a 17                	push   $0x17
f010615e:	e8 a0 ff ff ff       	call   f0106103 <nvram_read>
f0106163:	83 c4 10             	add    $0x10,%esp
f0106166:	c1 e0 0a             	shl    $0xa,%eax
f0106169:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010616c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010616f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106174:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f0106177:	83 ec 0c             	sub    $0xc,%esp
f010617a:	6a 34                	push   $0x34
f010617c:	e8 82 ff ff ff       	call   f0106103 <nvram_read>
f0106181:	83 c4 10             	add    $0x10,%esp
f0106184:	c1 e0 10             	shl    $0x10,%eax
f0106187:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010618a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010618d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106192:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f0106195:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0106199:	74 18                	je     f01061b3 <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f010619b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010619e:	05 00 00 00 01       	add    $0x1000000,%eax
f01061a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f01061a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01061a9:	2d 00 00 10 00       	sub    $0x100000,%eax
f01061ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01061b1:	eb 19                	jmp    f01061cc <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f01061b3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01061b7:	74 0d                	je     f01061c6 <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f01061b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01061bc:	05 00 00 10 00       	add    $0x100000,%eax
f01061c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01061c4:	eb 06                	jmp    f01061cc <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f01061c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01061c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f01061cc:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
		while(1);
	}
	number_of_frames = maxpa / PAGE_SIZE;
f01061d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01061d6:	c1 e8 0c             	shr    $0xc,%eax
f01061d9:	a3 10 7b 65 f0       	mov    %eax,0xf0657b10

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f01061de:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01061e1:	c1 e8 0a             	shr    $0xa,%eax
f01061e4:	83 ec 08             	sub    $0x8,%esp
f01061e7:	50                   	push   %eax
f01061e8:	68 60 59 13 f0       	push   $0xf0135960
f01061ed:	e8 90 aa ff ff       	call   f0100c82 <cprintf>
f01061f2:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f01061f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01061f8:	c1 e8 0a             	shr    $0xa,%eax
f01061fb:	89 c2                	mov    %eax,%edx
f01061fd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106200:	c1 e8 0a             	shr    $0xa,%eax
f0106203:	83 ec 04             	sub    $0x4,%esp
f0106206:	52                   	push   %edx
f0106207:	50                   	push   %eax
f0106208:	68 81 59 13 f0       	push   $0xf0135981
f010620d:	e8 70 aa ff ff       	call   f0100c82 <cprintf>
f0106212:	83 c4 10             	add    $0x10,%esp
}
f0106215:	90                   	nop
f0106216:	c9                   	leave  
f0106217:	c3                   	ret    

f0106218 <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f0106218:	55                   	push   %ebp
f0106219:	89 e5                	mov    %esp,%ebp
f010621b:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f010621e:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f0106225:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f010622c:	eb 24                	jmp    f0106252 <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f010622e:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0106233:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106236:	c1 e2 02             	shl    $0x2,%edx
f0106239:	01 c2                	add    %eax,%edx
f010623b:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0106240:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0106243:	c1 e1 02             	shl    $0x2,%ecx
f0106246:	01 c8                	add    %ecx,%eax
f0106248:	8b 00                	mov    (%eax),%eax
f010624a:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f010624c:	ff 45 fc             	incl   -0x4(%ebp)
f010624f:	ff 45 f8             	incl   -0x8(%ebp)
f0106252:	a1 78 7b 65 f0       	mov    0xf0657b78,%eax
f0106257:	c1 e8 16             	shr    $0x16,%eax
f010625a:	89 c2                	mov    %eax,%edx
f010625c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010625f:	39 c2                	cmp    %eax,%edx
f0106261:	77 cb                	ja     f010622e <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f0106263:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f0106268:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010626b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010626e:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0106271:	0f 20 c0             	mov    %cr0,%eax
f0106274:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f0106277:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f010627a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f010627d:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f0106284:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f0106288:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010628b:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f010628e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106291:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f0106294:	0f 01 15 f0 18 19 f0 	lgdtl  0xf01918f0
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f010629b:	b8 23 00 00 00       	mov    $0x23,%eax
f01062a0:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f01062a2:	b8 23 00 00 00       	mov    $0x23,%eax
f01062a7:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f01062a9:	b8 10 00 00 00       	mov    $0x10,%eax
f01062ae:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f01062b0:	b8 10 00 00 00       	mov    $0x10,%eax
f01062b5:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f01062b7:	b8 10 00 00 00       	mov    $0x10,%eax
f01062bc:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f01062be:	ea c5 62 10 f0 08 00 	ljmp   $0x8,$0xf01062c5
	asm volatile("lldt %%ax" :: "a" (0));
f01062c5:	b8 00 00 00 00       	mov    $0x0,%eax
f01062ca:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f01062cd:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f01062d4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01062db:	eb 19                	jmp    f01062f6 <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f01062dd:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01062e2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01062e5:	c1 e2 02             	shl    $0x2,%edx
f01062e8:	01 d0                	add    %edx,%eax
f01062ea:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01062f0:	ff 45 f4             	incl   -0xc(%ebp)
f01062f3:	ff 45 f0             	incl   -0x10(%ebp)
f01062f6:	a1 78 7b 65 f0       	mov    0xf0657b78,%eax
f01062fb:	c1 e8 16             	shr    $0x16,%eax
f01062fe:	89 c2                	mov    %eax,%edx
f0106300:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106303:	39 c2                	cmp    %eax,%edx
f0106305:	77 d6                	ja     f01062dd <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f0106307:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f010630c:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010630f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106312:	0f 22 d8             	mov    %eax,%cr3
}
f0106315:	90                   	nop
f0106316:	c9                   	leave  
f0106317:	c3                   	ret    

f0106318 <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f0106318:	55                   	push   %ebp
f0106319:	89 e5                	mov    %esp,%ebp
f010631b:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f010631e:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0106323:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106326:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f010632d:	77 17                	ja     f0106346 <setup_listing_to_all_page_tables_entries+0x2e>
f010632f:	ff 75 f4             	pushl  -0xc(%ebp)
f0106332:	68 b4 58 13 f0       	push   $0xf01358b4
f0106337:	68 ab 01 00 00       	push   $0x1ab
f010633c:	68 e8 58 13 f0       	push   $0xf01358e8
f0106341:	e8 b5 9e ff ff       	call   f01001fb <_panic>
f0106346:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106349:	05 00 00 00 10       	add    $0x10000000,%eax
f010634e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f0106351:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0106356:	05 fc 0e 00 00       	add    $0xefc,%eax
f010635b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010635e:	83 ca 03             	or     $0x3,%edx
f0106361:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f0106363:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0106368:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010636e:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0106373:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106376:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f010637d:	77 17                	ja     f0106396 <setup_listing_to_all_page_tables_entries+0x7e>
f010637f:	ff 75 ec             	pushl  -0x14(%ebp)
f0106382:	68 b4 58 13 f0       	push   $0xf01358b4
f0106387:	68 b0 01 00 00       	push   $0x1b0
f010638c:	68 e8 58 13 f0       	push   $0xf01358e8
f0106391:	e8 65 9e ff ff       	call   f01001fb <_panic>
f0106396:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106399:	05 00 00 00 10       	add    $0x10000000,%eax
f010639e:	83 c8 05             	or     $0x5,%eax
f01063a1:	89 02                	mov    %eax,(%edx)

}
f01063a3:	90                   	nop
f01063a4:	c9                   	leave  
f01063a5:	c3                   	ret    

f01063a6 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01063a6:	55                   	push   %ebp
f01063a7:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01063a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01063ac:	8b 15 54 7b 65 f0    	mov    0xf0657b54,%edx
f01063b2:	29 d0                	sub    %edx,%eax
f01063b4:	c1 f8 03             	sar    $0x3,%eax
f01063b7:	89 c2                	mov    %eax,%edx
f01063b9:	89 d0                	mov    %edx,%eax
f01063bb:	c1 e0 02             	shl    $0x2,%eax
f01063be:	01 d0                	add    %edx,%eax
f01063c0:	c1 e0 02             	shl    $0x2,%eax
f01063c3:	01 d0                	add    %edx,%eax
f01063c5:	c1 e0 02             	shl    $0x2,%eax
f01063c8:	01 d0                	add    %edx,%eax
f01063ca:	89 c1                	mov    %eax,%ecx
f01063cc:	c1 e1 08             	shl    $0x8,%ecx
f01063cf:	01 c8                	add    %ecx,%eax
f01063d1:	89 c1                	mov    %eax,%ecx
f01063d3:	c1 e1 10             	shl    $0x10,%ecx
f01063d6:	01 c8                	add    %ecx,%eax
f01063d8:	01 c0                	add    %eax,%eax
f01063da:	01 d0                	add    %edx,%eax
}
f01063dc:	5d                   	pop    %ebp
f01063dd:	c3                   	ret    

f01063de <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01063de:	55                   	push   %ebp
f01063df:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01063e1:	ff 75 08             	pushl  0x8(%ebp)
f01063e4:	e8 bd ff ff ff       	call   f01063a6 <to_frame_number>
f01063e9:	83 c4 04             	add    $0x4,%esp
f01063ec:	c1 e0 0c             	shl    $0xc,%eax
}
f01063ef:	c9                   	leave  
f01063f0:	c3                   	ret    

f01063f1 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f01063f1:	55                   	push   %ebp
f01063f2:	89 e5                	mov    %esp,%ebp
f01063f4:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f01063f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01063fa:	c1 e8 0c             	shr    $0xc,%eax
f01063fd:	89 c2                	mov    %eax,%edx
f01063ff:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f0106404:	39 c2                	cmp    %eax,%edx
f0106406:	72 14                	jb     f010641c <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0106408:	83 ec 04             	sub    $0x4,%esp
f010640b:	68 a0 59 13 f0       	push   $0xf01359a0
f0106410:	6a 55                	push   $0x55
f0106412:	68 c5 59 13 f0       	push   $0xf01359c5
f0106417:	e8 df 9d ff ff       	call   f01001fb <_panic>
	return &frames_info[PPN(physical_address)];
f010641c:	8b 15 54 7b 65 f0    	mov    0xf0657b54,%edx
f0106422:	8b 45 08             	mov    0x8(%ebp),%eax
f0106425:	c1 e8 0c             	shr    $0xc,%eax
f0106428:	89 c1                	mov    %eax,%ecx
f010642a:	89 c8                	mov    %ecx,%eax
f010642c:	01 c0                	add    %eax,%eax
f010642e:	01 c8                	add    %ecx,%eax
f0106430:	c1 e0 03             	shl    $0x3,%eax
f0106433:	01 d0                	add    %edx,%eax
}
f0106435:	c9                   	leave  
f0106436:	c3                   	ret    

f0106437 <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f0106437:	55                   	push   %ebp
f0106438:	89 e5                	mov    %esp,%ebp
f010643a:	83 ec 10             	sub    $0x10,%esp
f010643d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106440:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f0106443:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106446:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f0106449:	90                   	nop
f010644a:	c9                   	leave  
f010644b:	c3                   	ret    

f010644c <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f010644c:	55                   	push   %ebp
f010644d:	89 e5                	mov    %esp,%ebp
f010644f:	53                   	push   %ebx
f0106450:	83 ec 24             	sub    $0x24,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f0106453:	c7 05 18 7b 65 f0 00 	movl   $0x0,0xf0657b18
f010645a:	00 00 00 
f010645d:	c7 05 1c 7b 65 f0 00 	movl   $0x0,0xf0657b1c
f0106464:	00 00 00 
f0106467:	c7 05 24 7b 65 f0 00 	movl   $0x0,0xf0657b24
f010646e:	00 00 00 
	LIST_INIT(&modified_frame_list);
f0106471:	c7 05 b8 7a 65 f0 00 	movl   $0x0,0xf0657ab8
f0106478:	00 00 00 
f010647b:	c7 05 bc 7a 65 f0 00 	movl   $0x0,0xf0657abc
f0106482:	00 00 00 
f0106485:	c7 05 c4 7a 65 f0 00 	movl   $0x0,0xf0657ac4
f010648c:	00 00 00 

	frames_info[0].references = 1;
f010648f:	a1 54 7b 65 f0       	mov    0xf0657b54,%eax
f0106494:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f010649a:	a1 54 7b 65 f0       	mov    0xf0657b54,%eax
f010649f:	83 c0 18             	add    $0x18,%eax
f01064a2:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f01064a8:	a1 54 7b 65 f0       	mov    0xf0657b54,%eax
f01064ad:	83 c0 30             	add    $0x30,%eax
f01064b0:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f01064b6:	c7 05 60 7b 65 f0 00 	movl   $0xf0001000,0xf0657b60
f01064bd:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f01064c0:	c7 05 84 7b 65 f0 00 	movl   $0xf0002000,0xf0657b84
f01064c7:	20 00 f0 
	i =0;
f01064ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f01064d1:	eb 1f                	jmp    f01064f2 <initialize_paging+0xa6>
	{
		ptr_zero_page[i]=0;
f01064d3:	8b 15 60 7b 65 f0    	mov    0xf0657b60,%edx
f01064d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01064dc:	01 d0                	add    %edx,%eax
f01064de:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f01064e1:	8b 15 84 7b 65 f0    	mov    0xf0657b84,%edx
f01064e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01064ea:	01 d0                	add    %edx,%eax
f01064ec:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f01064ef:	ff 45 f4             	incl   -0xc(%ebp)
f01064f2:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f01064f9:	7e d8                	jle    f01064d3 <initialize_paging+0x87>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f01064fb:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0106502:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106505:	05 ff ff 09 00       	add    $0x9ffff,%eax
f010650a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010650d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106510:	ba 00 00 00 00       	mov    $0x0,%edx
f0106515:	f7 75 f0             	divl   -0x10(%ebp)
f0106518:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010651b:	29 d0                	sub    %edx,%eax
f010651d:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0106520:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f0106527:	e9 e8 00 00 00       	jmp    f0106614 <initialize_paging+0x1c8>
	{

		initialize_frame_info(&(frames_info[i]));
f010652c:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f0106532:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106535:	89 d0                	mov    %edx,%eax
f0106537:	01 c0                	add    %eax,%eax
f0106539:	01 d0                	add    %edx,%eax
f010653b:	c1 e0 03             	shl    $0x3,%eax
f010653e:	01 c8                	add    %ecx,%eax
f0106540:	83 ec 0c             	sub    $0xc,%esp
f0106543:	50                   	push   %eax
f0106544:	e8 b7 02 00 00       	call   f0106800 <initialize_frame_info>
f0106549:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f010654c:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f0106552:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106555:	89 d0                	mov    %edx,%eax
f0106557:	01 c0                	add    %eax,%eax
f0106559:	01 d0                	add    %edx,%eax
f010655b:	c1 e0 03             	shl    $0x3,%eax
f010655e:	01 c8                	add    %ecx,%eax
f0106560:	85 c0                	test   %eax,%eax
f0106562:	75 14                	jne    f0106578 <initialize_paging+0x12c>
f0106564:	83 ec 04             	sub    $0x4,%esp
f0106567:	68 e0 59 13 f0       	push   $0xf01359e0
f010656c:	6a 5c                	push   $0x5c
f010656e:	68 03 5a 13 f0       	push   $0xf0135a03
f0106573:	e8 83 9c ff ff       	call   f01001fb <_panic>
f0106578:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f010657e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106581:	89 d0                	mov    %edx,%eax
f0106583:	01 c0                	add    %eax,%eax
f0106585:	01 d0                	add    %edx,%eax
f0106587:	c1 e0 03             	shl    $0x3,%eax
f010658a:	01 c8                	add    %ecx,%eax
f010658c:	8b 15 18 7b 65 f0    	mov    0xf0657b18,%edx
f0106592:	89 10                	mov    %edx,(%eax)
f0106594:	8b 00                	mov    (%eax),%eax
f0106596:	85 c0                	test   %eax,%eax
f0106598:	74 1f                	je     f01065b9 <initialize_paging+0x16d>
f010659a:	8b 15 18 7b 65 f0    	mov    0xf0657b18,%edx
f01065a0:	8b 1d 54 7b 65 f0    	mov    0xf0657b54,%ebx
f01065a6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01065a9:	89 c8                	mov    %ecx,%eax
f01065ab:	01 c0                	add    %eax,%eax
f01065ad:	01 c8                	add    %ecx,%eax
f01065af:	c1 e0 03             	shl    $0x3,%eax
f01065b2:	01 d8                	add    %ebx,%eax
f01065b4:	89 42 04             	mov    %eax,0x4(%edx)
f01065b7:	eb 19                	jmp    f01065d2 <initialize_paging+0x186>
f01065b9:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f01065bf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01065c2:	89 d0                	mov    %edx,%eax
f01065c4:	01 c0                	add    %eax,%eax
f01065c6:	01 d0                	add    %edx,%eax
f01065c8:	c1 e0 03             	shl    $0x3,%eax
f01065cb:	01 c8                	add    %ecx,%eax
f01065cd:	a3 1c 7b 65 f0       	mov    %eax,0xf0657b1c
f01065d2:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f01065d8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01065db:	89 d0                	mov    %edx,%eax
f01065dd:	01 c0                	add    %eax,%eax
f01065df:	01 d0                	add    %edx,%eax
f01065e1:	c1 e0 03             	shl    $0x3,%eax
f01065e4:	01 c8                	add    %ecx,%eax
f01065e6:	a3 18 7b 65 f0       	mov    %eax,0xf0657b18
f01065eb:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f01065f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01065f4:	89 d0                	mov    %edx,%eax
f01065f6:	01 c0                	add    %eax,%eax
f01065f8:	01 d0                	add    %edx,%eax
f01065fa:	c1 e0 03             	shl    $0x3,%eax
f01065fd:	01 c8                	add    %ecx,%eax
f01065ff:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106606:	a1 24 7b 65 f0       	mov    0xf0657b24,%eax
f010660b:	40                   	inc    %eax
f010660c:	a3 24 7b 65 f0       	mov    %eax,0xf0657b24
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0106611:	ff 45 f4             	incl   -0xc(%ebp)
f0106614:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106617:	85 c0                	test   %eax,%eax
f0106619:	79 05                	jns    f0106620 <initialize_paging+0x1d4>
f010661b:	05 ff 0f 00 00       	add    $0xfff,%eax
f0106620:	c1 f8 0c             	sar    $0xc,%eax
f0106623:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106626:	0f 8f 00 ff ff ff    	jg     f010652c <initialize_paging+0xe0>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f010662c:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f0106633:	eb 1d                	jmp    f0106652 <initialize_paging+0x206>
	{
		frames_info[i].references = 1;
f0106635:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f010663b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010663e:	89 d0                	mov    %edx,%eax
f0106640:	01 c0                	add    %eax,%eax
f0106642:	01 d0                	add    %edx,%eax
f0106644:	c1 e0 03             	shl    $0x3,%eax
f0106647:	01 c8                	add    %ecx,%eax
f0106649:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f010664f:	ff 45 f4             	incl   -0xc(%ebp)
f0106652:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0106659:	7e da                	jle    f0106635 <initialize_paging+0x1e9>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f010665b:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0106662:	a1 78 7b 65 f0       	mov    0xf0657b78,%eax
f0106667:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010666a:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0106671:	77 14                	ja     f0106687 <initialize_paging+0x23b>
f0106673:	ff 75 e0             	pushl  -0x20(%ebp)
f0106676:	68 20 5a 13 f0       	push   $0xf0135a20
f010667b:	6a 64                	push   $0x64
f010667d:	68 03 5a 13 f0       	push   $0xf0135a03
f0106682:	e8 74 9b ff ff       	call   f01001fb <_panic>
f0106687:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010668a:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0106690:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106693:	01 d0                	add    %edx,%eax
f0106695:	48                   	dec    %eax
f0106696:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106699:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010669c:	ba 00 00 00 00       	mov    $0x0,%edx
f01066a1:	f7 75 e4             	divl   -0x1c(%ebp)
f01066a4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01066a7:	29 d0                	sub    %edx,%eax
f01066a9:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f01066ac:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f01066b3:	eb 1d                	jmp    f01066d2 <initialize_paging+0x286>
	{
		frames_info[i].references = 1;
f01066b5:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f01066bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066be:	89 d0                	mov    %edx,%eax
f01066c0:	01 c0                	add    %eax,%eax
f01066c2:	01 d0                	add    %edx,%eax
f01066c4:	c1 e0 03             	shl    $0x3,%eax
f01066c7:	01 c8                	add    %ecx,%eax
f01066c9:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f01066cf:	ff 45 f4             	incl   -0xc(%ebp)
f01066d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01066d5:	85 c0                	test   %eax,%eax
f01066d7:	79 05                	jns    f01066de <initialize_paging+0x292>
f01066d9:	05 ff 0f 00 00       	add    $0xfff,%eax
f01066de:	c1 f8 0c             	sar    $0xc,%eax
f01066e1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01066e4:	7f cf                	jg     f01066b5 <initialize_paging+0x269>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01066e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01066e9:	85 c0                	test   %eax,%eax
f01066eb:	79 05                	jns    f01066f2 <initialize_paging+0x2a6>
f01066ed:	05 ff 0f 00 00       	add    $0xfff,%eax
f01066f2:	c1 f8 0c             	sar    $0xc,%eax
f01066f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01066f8:	e9 e8 00 00 00       	jmp    f01067e5 <initialize_paging+0x399>
	{
		initialize_frame_info(&(frames_info[i]));
f01066fd:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f0106703:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106706:	89 d0                	mov    %edx,%eax
f0106708:	01 c0                	add    %eax,%eax
f010670a:	01 d0                	add    %edx,%eax
f010670c:	c1 e0 03             	shl    $0x3,%eax
f010670f:	01 c8                	add    %ecx,%eax
f0106711:	83 ec 0c             	sub    $0xc,%esp
f0106714:	50                   	push   %eax
f0106715:	e8 e6 00 00 00       	call   f0106800 <initialize_frame_info>
f010671a:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f010671d:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f0106723:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106726:	89 d0                	mov    %edx,%eax
f0106728:	01 c0                	add    %eax,%eax
f010672a:	01 d0                	add    %edx,%eax
f010672c:	c1 e0 03             	shl    $0x3,%eax
f010672f:	01 c8                	add    %ecx,%eax
f0106731:	85 c0                	test   %eax,%eax
f0106733:	75 14                	jne    f0106749 <initialize_paging+0x2fd>
f0106735:	83 ec 04             	sub    $0x4,%esp
f0106738:	68 e0 59 13 f0       	push   $0xf01359e0
f010673d:	6a 70                	push   $0x70
f010673f:	68 03 5a 13 f0       	push   $0xf0135a03
f0106744:	e8 b2 9a ff ff       	call   f01001fb <_panic>
f0106749:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f010674f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106752:	89 d0                	mov    %edx,%eax
f0106754:	01 c0                	add    %eax,%eax
f0106756:	01 d0                	add    %edx,%eax
f0106758:	c1 e0 03             	shl    $0x3,%eax
f010675b:	01 c8                	add    %ecx,%eax
f010675d:	8b 15 18 7b 65 f0    	mov    0xf0657b18,%edx
f0106763:	89 10                	mov    %edx,(%eax)
f0106765:	8b 00                	mov    (%eax),%eax
f0106767:	85 c0                	test   %eax,%eax
f0106769:	74 1f                	je     f010678a <initialize_paging+0x33e>
f010676b:	8b 15 18 7b 65 f0    	mov    0xf0657b18,%edx
f0106771:	8b 1d 54 7b 65 f0    	mov    0xf0657b54,%ebx
f0106777:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010677a:	89 c8                	mov    %ecx,%eax
f010677c:	01 c0                	add    %eax,%eax
f010677e:	01 c8                	add    %ecx,%eax
f0106780:	c1 e0 03             	shl    $0x3,%eax
f0106783:	01 d8                	add    %ebx,%eax
f0106785:	89 42 04             	mov    %eax,0x4(%edx)
f0106788:	eb 19                	jmp    f01067a3 <initialize_paging+0x357>
f010678a:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f0106790:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106793:	89 d0                	mov    %edx,%eax
f0106795:	01 c0                	add    %eax,%eax
f0106797:	01 d0                	add    %edx,%eax
f0106799:	c1 e0 03             	shl    $0x3,%eax
f010679c:	01 c8                	add    %ecx,%eax
f010679e:	a3 1c 7b 65 f0       	mov    %eax,0xf0657b1c
f01067a3:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f01067a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067ac:	89 d0                	mov    %edx,%eax
f01067ae:	01 c0                	add    %eax,%eax
f01067b0:	01 d0                	add    %edx,%eax
f01067b2:	c1 e0 03             	shl    $0x3,%eax
f01067b5:	01 c8                	add    %ecx,%eax
f01067b7:	a3 18 7b 65 f0       	mov    %eax,0xf0657b18
f01067bc:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f01067c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067c5:	89 d0                	mov    %edx,%eax
f01067c7:	01 c0                	add    %eax,%eax
f01067c9:	01 d0                	add    %edx,%eax
f01067cb:	c1 e0 03             	shl    $0x3,%eax
f01067ce:	01 c8                	add    %ecx,%eax
f01067d0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01067d7:	a1 24 7b 65 f0       	mov    0xf0657b24,%eax
f01067dc:	40                   	inc    %eax
f01067dd:	a3 24 7b 65 f0       	mov    %eax,0xf0657b24
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01067e2:	ff 45 f4             	incl   -0xc(%ebp)
f01067e5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067e8:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f01067ed:	39 c2                	cmp    %eax,%edx
f01067ef:	0f 82 08 ff ff ff    	jb     f01066fd <initialize_paging+0x2b1>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f01067f5:	e8 36 c9 ff ff       	call   f0103130 <initialize_disk_page_file>
}
f01067fa:	90                   	nop
f01067fb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01067fe:	c9                   	leave  
f01067ff:	c3                   	ret    

f0106800 <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f0106800:	55                   	push   %ebp
f0106801:	89 e5                	mov    %esp,%ebp
f0106803:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f0106806:	83 ec 04             	sub    $0x4,%esp
f0106809:	6a 18                	push   $0x18
f010680b:	6a 00                	push   $0x0
f010680d:	ff 75 08             	pushl  0x8(%ebp)
f0106810:	e8 63 a6 02 00       	call   f0130e78 <memset>
f0106815:	83 c4 10             	add    $0x10,%esp
}
f0106818:	90                   	nop
f0106819:	c9                   	leave  
f010681a:	c3                   	ret    

f010681b <allocate_frame>:
// Hint: references should not be incremented

//extern void env_free(struct Env *e);

int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f010681b:	55                   	push   %ebp
f010681c:	89 e5                	mov    %esp,%ebp
f010681e:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f0106821:	8b 15 18 7b 65 f0    	mov    0xf0657b18,%edx
f0106827:	8b 45 08             	mov    0x8(%ebp),%eax
f010682a:	89 10                	mov    %edx,(%eax)
	int c = 0;
f010682c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f0106833:	8b 45 08             	mov    0x8(%ebp),%eax
f0106836:	8b 00                	mov    (%eax),%eax
f0106838:	85 c0                	test   %eax,%eax
f010683a:	75 17                	jne    f0106853 <allocate_frame+0x38>
	{
		//TODO: [PROJECT MS3] [KERNEL MEM] Free RAM when it's FULL
		// Write your code here, remove the panic and write your code
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f010683c:	83 ec 04             	sub    $0x4,%esp
f010683f:	68 54 5a 13 f0       	push   $0xf0135a54
f0106844:	68 99 00 00 00       	push   $0x99
f0106849:	68 03 5a 13 f0       	push   $0xf0135a03
f010684e:	e8 a8 99 ff ff       	call   f01001fb <_panic>
	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f0106853:	8b 45 08             	mov    0x8(%ebp),%eax
f0106856:	8b 00                	mov    (%eax),%eax
f0106858:	85 c0                	test   %eax,%eax
f010685a:	75 17                	jne    f0106873 <allocate_frame+0x58>
f010685c:	83 ec 04             	sub    $0x4,%esp
f010685f:	68 a1 5a 13 f0       	push   $0xf0135aa1
f0106864:	68 9c 00 00 00       	push   $0x9c
f0106869:	68 03 5a 13 f0       	push   $0xf0135a03
f010686e:	e8 88 99 ff ff       	call   f01001fb <_panic>
f0106873:	8b 45 08             	mov    0x8(%ebp),%eax
f0106876:	8b 00                	mov    (%eax),%eax
f0106878:	8b 00                	mov    (%eax),%eax
f010687a:	85 c0                	test   %eax,%eax
f010687c:	74 14                	je     f0106892 <allocate_frame+0x77>
f010687e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106881:	8b 00                	mov    (%eax),%eax
f0106883:	8b 00                	mov    (%eax),%eax
f0106885:	8b 55 08             	mov    0x8(%ebp),%edx
f0106888:	8b 12                	mov    (%edx),%edx
f010688a:	8b 52 04             	mov    0x4(%edx),%edx
f010688d:	89 50 04             	mov    %edx,0x4(%eax)
f0106890:	eb 0d                	jmp    f010689f <allocate_frame+0x84>
f0106892:	8b 45 08             	mov    0x8(%ebp),%eax
f0106895:	8b 00                	mov    (%eax),%eax
f0106897:	8b 40 04             	mov    0x4(%eax),%eax
f010689a:	a3 1c 7b 65 f0       	mov    %eax,0xf0657b1c
f010689f:	8b 45 08             	mov    0x8(%ebp),%eax
f01068a2:	8b 00                	mov    (%eax),%eax
f01068a4:	8b 40 04             	mov    0x4(%eax),%eax
f01068a7:	85 c0                	test   %eax,%eax
f01068a9:	74 13                	je     f01068be <allocate_frame+0xa3>
f01068ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01068ae:	8b 00                	mov    (%eax),%eax
f01068b0:	8b 40 04             	mov    0x4(%eax),%eax
f01068b3:	8b 55 08             	mov    0x8(%ebp),%edx
f01068b6:	8b 12                	mov    (%edx),%edx
f01068b8:	8b 12                	mov    (%edx),%edx
f01068ba:	89 10                	mov    %edx,(%eax)
f01068bc:	eb 0c                	jmp    f01068ca <allocate_frame+0xaf>
f01068be:	8b 45 08             	mov    0x8(%ebp),%eax
f01068c1:	8b 00                	mov    (%eax),%eax
f01068c3:	8b 00                	mov    (%eax),%eax
f01068c5:	a3 18 7b 65 f0       	mov    %eax,0xf0657b18
f01068ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01068cd:	8b 00                	mov    (%eax),%eax
f01068cf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01068d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01068d8:	8b 00                	mov    (%eax),%eax
f01068da:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01068e1:	a1 24 7b 65 f0       	mov    0xf0657b24,%eax
f01068e6:	48                   	dec    %eax
f01068e7:	a3 24 7b 65 f0       	mov    %eax,0xf0657b24

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f01068ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01068ef:	8b 00                	mov    (%eax),%eax
f01068f1:	8a 40 14             	mov    0x14(%eax),%al
f01068f4:	84 c0                	test   %al,%al
f01068f6:	74 20                	je     f0106918 <allocate_frame+0xfd>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment->env_page_directory,(*ptr_frame_info)->va);
f01068f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01068fb:	8b 00                	mov    (%eax),%eax
f01068fd:	8b 50 0c             	mov    0xc(%eax),%edx
f0106900:	8b 45 08             	mov    0x8(%ebp),%eax
f0106903:	8b 00                	mov    (%eax),%eax
f0106905:	8b 40 10             	mov    0x10(%eax),%eax
f0106908:	8b 40 5c             	mov    0x5c(%eax),%eax
f010690b:	83 ec 08             	sub    $0x8,%esp
f010690e:	52                   	push   %edx
f010690f:	50                   	push   %eax
f0106910:	e8 17 13 00 00       	call   f0107c2c <pt_clear_page_table_entry>
f0106915:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f0106918:	8b 45 08             	mov    0x8(%ebp),%eax
f010691b:	8b 00                	mov    (%eax),%eax
f010691d:	83 ec 0c             	sub    $0xc,%esp
f0106920:	50                   	push   %eax
f0106921:	e8 da fe ff ff       	call   f0106800 <initialize_frame_info>
f0106926:	83 c4 10             	add    $0x10,%esp
	return 0;
f0106929:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010692e:	c9                   	leave  
f010692f:	c3                   	ret    

f0106930 <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f0106930:	55                   	push   %ebp
f0106931:	89 e5                	mov    %esp,%ebp
f0106933:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f0106936:	83 ec 0c             	sub    $0xc,%esp
f0106939:	ff 75 08             	pushl  0x8(%ebp)
f010693c:	e8 bf fe ff ff       	call   f0106800 <initialize_frame_info>
f0106941:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f0106944:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0106948:	75 17                	jne    f0106961 <free_frame+0x31>
f010694a:	83 ec 04             	sub    $0x4,%esp
f010694d:	68 e0 59 13 f0       	push   $0xf01359e0
f0106952:	68 b9 00 00 00       	push   $0xb9
f0106957:	68 03 5a 13 f0       	push   $0xf0135a03
f010695c:	e8 9a 98 ff ff       	call   f01001fb <_panic>
f0106961:	8b 15 18 7b 65 f0    	mov    0xf0657b18,%edx
f0106967:	8b 45 08             	mov    0x8(%ebp),%eax
f010696a:	89 10                	mov    %edx,(%eax)
f010696c:	8b 45 08             	mov    0x8(%ebp),%eax
f010696f:	8b 00                	mov    (%eax),%eax
f0106971:	85 c0                	test   %eax,%eax
f0106973:	74 0d                	je     f0106982 <free_frame+0x52>
f0106975:	a1 18 7b 65 f0       	mov    0xf0657b18,%eax
f010697a:	8b 55 08             	mov    0x8(%ebp),%edx
f010697d:	89 50 04             	mov    %edx,0x4(%eax)
f0106980:	eb 08                	jmp    f010698a <free_frame+0x5a>
f0106982:	8b 45 08             	mov    0x8(%ebp),%eax
f0106985:	a3 1c 7b 65 f0       	mov    %eax,0xf0657b1c
f010698a:	8b 45 08             	mov    0x8(%ebp),%eax
f010698d:	a3 18 7b 65 f0       	mov    %eax,0xf0657b18
f0106992:	8b 45 08             	mov    0x8(%ebp),%eax
f0106995:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010699c:	a1 24 7b 65 f0       	mov    0xf0657b24,%eax
f01069a1:	40                   	inc    %eax
f01069a2:	a3 24 7b 65 f0       	mov    %eax,0xf0657b24
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));


}
f01069a7:	90                   	nop
f01069a8:	c9                   	leave  
f01069a9:	c3                   	ret    

f01069aa <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f01069aa:	55                   	push   %ebp
f01069ab:	89 e5                	mov    %esp,%ebp
f01069ad:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f01069b0:	8b 45 08             	mov    0x8(%ebp),%eax
f01069b3:	8b 40 08             	mov    0x8(%eax),%eax
f01069b6:	48                   	dec    %eax
f01069b7:	8b 55 08             	mov    0x8(%ebp),%edx
f01069ba:	66 89 42 08          	mov    %ax,0x8(%edx)
f01069be:	8b 45 08             	mov    0x8(%ebp),%eax
f01069c1:	8b 40 08             	mov    0x8(%eax),%eax
f01069c4:	66 85 c0             	test   %ax,%ax
f01069c7:	75 0e                	jne    f01069d7 <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f01069c9:	83 ec 0c             	sub    $0xc,%esp
f01069cc:	ff 75 08             	pushl  0x8(%ebp)
f01069cf:	e8 5c ff ff ff       	call   f0106930 <free_frame>
f01069d4:	83 c4 10             	add    $0x10,%esp
}
f01069d7:	90                   	nop
f01069d8:	c9                   	leave  
f01069d9:	c3                   	ret    

f01069da <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f01069da:	55                   	push   %ebp
f01069db:	89 e5                	mov    %esp,%ebp
f01069dd:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f01069e0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01069e3:	c1 e8 16             	shr    $0x16,%eax
f01069e6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01069ed:	8b 45 08             	mov    0x8(%ebp),%eax
f01069f0:	01 d0                	add    %edx,%eax
f01069f2:	8b 00                	mov    (%eax),%eax
f01069f4:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f01069f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01069fa:	83 e0 01             	and    $0x1,%eax
f01069fd:	85 c0                	test   %eax,%eax
f01069ff:	74 74                	je     f0106a75 <get_page_table+0x9b>
	{
		//	cprintf("gpt .07, page_directory_entry= %x \n",page_directory_entry);
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106a01:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106a08:	77 1d                	ja     f0106a27 <get_page_table+0x4d>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106a0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106a0d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106a12:	83 ec 0c             	sub    $0xc,%esp
f0106a15:	50                   	push   %eax
f0106a16:	e8 cc 0f 00 00       	call   f01079e7 <kheap_virtual_address>
f0106a1b:	83 c4 10             	add    $0x10,%esp
f0106a1e:	89 c2                	mov    %eax,%edx
f0106a20:	8b 45 10             	mov    0x10(%ebp),%eax
f0106a23:	89 10                	mov    %edx,(%eax)
f0106a25:	eb 44                	jmp    f0106a6b <get_page_table+0x91>
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106a27:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106a2a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106a2f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106a32:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106a35:	c1 e8 0c             	shr    $0xc,%eax
f0106a38:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106a3b:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f0106a40:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0106a43:	72 17                	jb     f0106a5c <get_page_table+0x82>
f0106a45:	ff 75 f0             	pushl  -0x10(%ebp)
f0106a48:	68 c0 5a 13 f0       	push   $0xf0135ac0
f0106a4d:	68 e2 00 00 00       	push   $0xe2
f0106a52:	68 03 5a 13 f0       	push   $0xf0135a03
f0106a57:	e8 9f 97 ff ff       	call   f01001fb <_panic>
f0106a5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106a5f:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106a64:	89 c2                	mov    %eax,%edx
f0106a66:	8b 45 10             	mov    0x10(%ebp),%eax
f0106a69:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f0106a6b:	b8 00 00 00 00       	mov    $0x0,%eax
f0106a70:	e9 b9 00 00 00       	jmp    f0106b2e <get_page_table+0x154>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0106a75:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106a79:	0f 84 a1 00 00 00    	je     f0106b20 <get_page_table+0x146>
f0106a7f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106a82:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f0106a85:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106a88:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f0106a8b:	83 ec 0c             	sub    $0xc,%esp
f0106a8e:	6a 00                	push   $0x0
f0106a90:	e8 53 5a 00 00       	call   f010c4e8 <fault_handler>
f0106a95:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106a98:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106a9b:	c1 e8 16             	shr    $0x16,%eax
f0106a9e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106aa5:	8b 45 08             	mov    0x8(%ebp),%eax
f0106aa8:	01 d0                	add    %edx,%eax
f0106aaa:	8b 00                	mov    (%eax),%eax
f0106aac:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106aaf:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106ab6:	77 1d                	ja     f0106ad5 <get_page_table+0xfb>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106ab8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106abb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106ac0:	83 ec 0c             	sub    $0xc,%esp
f0106ac3:	50                   	push   %eax
f0106ac4:	e8 1e 0f 00 00       	call   f01079e7 <kheap_virtual_address>
f0106ac9:	83 c4 10             	add    $0x10,%esp
f0106acc:	89 c2                	mov    %eax,%edx
f0106ace:	8b 45 10             	mov    0x10(%ebp),%eax
f0106ad1:	89 10                	mov    %edx,(%eax)
f0106ad3:	eb 44                	jmp    f0106b19 <get_page_table+0x13f>
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106ad5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ad8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106add:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106ae0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106ae3:	c1 e8 0c             	shr    $0xc,%eax
f0106ae6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106ae9:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f0106aee:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106af1:	72 17                	jb     f0106b0a <get_page_table+0x130>
f0106af3:	ff 75 e8             	pushl  -0x18(%ebp)
f0106af6:	68 c0 5a 13 f0       	push   $0xf0135ac0
f0106afb:	68 fa 00 00 00       	push   $0xfa
f0106b00:	68 03 5a 13 f0       	push   $0xf0135a03
f0106b05:	e8 f1 96 ff ff       	call   f01001fb <_panic>
f0106b0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106b0d:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106b12:	89 c2                	mov    %eax,%edx
f0106b14:	8b 45 10             	mov    0x10(%ebp),%eax
f0106b17:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f0106b19:	b8 00 00 00 00       	mov    $0x0,%eax
f0106b1e:	eb 0e                	jmp    f0106b2e <get_page_table+0x154>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f0106b20:	8b 45 10             	mov    0x10(%ebp),%eax
f0106b23:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f0106b29:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f0106b2e:	c9                   	leave  
f0106b2f:	c3                   	ret    

f0106b30 <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f0106b30:	55                   	push   %ebp
f0106b31:	89 e5                	mov    %esp,%ebp
f0106b33:	53                   	push   %ebx
f0106b34:	83 ec 14             	sub    $0x14,%esp
	//	b.	clear the TLB cache (using "tlbflush()")

	//change this "return" according to your answer

#if USE_KHEAP
	uint32 * ptr_page_table = kmalloc(PAGE_SIZE);
f0106b37:	83 ec 0c             	sub    $0xc,%esp
f0106b3a:	68 00 10 00 00       	push   $0x1000
f0106b3f:	e8 ba 0c 00 00       	call   f01077fe <kmalloc>
f0106b44:	83 c4 10             	add    $0x10,%esp
f0106b47:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_page_table == NULL)
f0106b4a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106b4e:	75 17                	jne    f0106b67 <create_page_table+0x37>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0106b50:	83 ec 04             	sub    $0x4,%esp
f0106b53:	68 ef 5a 13 f0       	push   $0xf0135aef
f0106b58:	68 18 01 00 00       	push   $0x118
f0106b5d:	68 03 5a 13 f0       	push   $0xf0135a03
f0106b62:	e8 94 96 ff ff       	call   f01001fb <_panic>
	}
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f0106b67:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b6a:	c1 e8 16             	shr    $0x16,%eax
f0106b6d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106b74:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b77:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f0106b7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b7d:	83 ec 0c             	sub    $0xc,%esp
f0106b80:	50                   	push   %eax
f0106b81:	e8 8d 0e 00 00       	call   f0107a13 <kheap_physical_address>
f0106b86:	83 c4 10             	add    $0x10,%esp
f0106b89:	83 c8 07             	or     $0x7,%eax
f0106b8c:	89 03                	mov    %eax,(%ebx)
			kheap_physical_address((unsigned int)ptr_page_table)
			, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);

	//================
	memset(ptr_page_table , 0, PAGE_SIZE);
f0106b8e:	83 ec 04             	sub    $0x4,%esp
f0106b91:	68 00 10 00 00       	push   $0x1000
f0106b96:	6a 00                	push   $0x0
f0106b98:	ff 75 f4             	pushl  -0xc(%ebp)
f0106b9b:	e8 d8 a2 02 00       	call   f0130e78 <memset>
f0106ba0:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106ba3:	0f 20 d8             	mov    %cr3,%eax
f0106ba6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106ba9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106bac:	0f 22 d8             	mov    %eax,%cr3
#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
#endif

	return ptr_page_table;
f0106baf:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0106bb2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106bb5:	c9                   	leave  
f0106bb6:	c3                   	ret    

f0106bb7 <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106bb7:	55                   	push   %ebp
f0106bb8:	89 e5                	mov    %esp,%ebp
f0106bba:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f0106bbd:	83 ec 0c             	sub    $0xc,%esp
f0106bc0:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0106bc3:	50                   	push   %eax
f0106bc4:	e8 52 fc ff ff       	call   f010681b <allocate_frame>
f0106bc9:	83 c4 10             	add    $0x10,%esp
f0106bcc:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f0106bcf:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106bd2:	83 ec 0c             	sub    $0xc,%esp
f0106bd5:	50                   	push   %eax
f0106bd6:	e8 03 f8 ff ff       	call   f01063de <to_physical_address>
f0106bdb:	83 c4 10             	add    $0x10,%esp
f0106bde:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0106be1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106be4:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106be7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106bea:	c1 e8 0c             	shr    $0xc,%eax
f0106bed:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106bf0:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f0106bf5:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0106bf8:	72 17                	jb     f0106c11 <__static_cpt+0x5a>
f0106bfa:	ff 75 ec             	pushl  -0x14(%ebp)
f0106bfd:	68 c0 5a 13 f0       	push   $0xf0135ac0
f0106c02:	68 30 01 00 00       	push   $0x130
f0106c07:	68 03 5a 13 f0       	push   $0xf0135a03
f0106c0c:	e8 ea 95 ff ff       	call   f01001fb <_panic>
f0106c11:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106c14:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106c19:	89 c2                	mov    %eax,%edx
f0106c1b:	8b 45 10             	mov    0x10(%ebp),%eax
f0106c1e:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f0106c20:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106c23:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f0106c29:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106c2c:	c1 e8 16             	shr    $0x16,%eax
f0106c2f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106c36:	8b 45 08             	mov    0x8(%ebp),%eax
f0106c39:	01 d0                	add    %edx,%eax
f0106c3b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106c3e:	83 ca 07             	or     $0x7,%edx
f0106c41:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f0106c43:	8b 45 10             	mov    0x10(%ebp),%eax
f0106c46:	8b 00                	mov    (%eax),%eax
f0106c48:	83 ec 04             	sub    $0x4,%esp
f0106c4b:	68 00 10 00 00       	push   $0x1000
f0106c50:	6a 00                	push   $0x0
f0106c52:	50                   	push   %eax
f0106c53:	e8 20 a2 02 00       	call   f0130e78 <memset>
f0106c58:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106c5b:	0f 20 d8             	mov    %cr3,%eax
f0106c5e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106c61:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106c64:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0106c67:	90                   	nop
f0106c68:	c9                   	leave  
f0106c69:	c3                   	ret    

f0106c6a <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106c6a:	55                   	push   %ebp
f0106c6b:	89 e5                	mov    %esp,%ebp
f0106c6d:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106c70:	ff 75 0c             	pushl  0xc(%ebp)
f0106c73:	e8 66 f7 ff ff       	call   f01063de <to_physical_address>
f0106c78:	83 c4 04             	add    $0x4,%esp
f0106c7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f0106c7e:	83 ec 04             	sub    $0x4,%esp
f0106c81:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0106c84:	50                   	push   %eax
f0106c85:	ff 75 10             	pushl  0x10(%ebp)
f0106c88:	ff 75 08             	pushl  0x8(%ebp)
f0106c8b:	e8 4a fd ff ff       	call   f01069da <get_page_table>
f0106c90:	83 c4 10             	add    $0x10,%esp
f0106c93:	83 f8 01             	cmp    $0x1,%eax
f0106c96:	75 1b                	jne    f0106cb3 <map_frame+0x49>
		//page_directory_entry = ptr_page_directory[PDX(virtual_address)];
		//ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
		=============================================================================================*/
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(ptr_page_directory, (uint32)virtual_address);
f0106c98:	83 ec 08             	sub    $0x8,%esp
f0106c9b:	ff 75 10             	pushl  0x10(%ebp)
f0106c9e:	ff 75 08             	pushl  0x8(%ebp)
f0106ca1:	e8 8a fe ff ff       	call   f0106b30 <create_page_table>
f0106ca6:	83 c4 10             	add    $0x10,%esp
f0106ca9:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//cprintf("======>page table created using kheap for VA %x at dir = %x PT = %x\n", virtual_address, ptr_page_directory[PDX(virtual_address)], ptr_page_table);
			uint32* ptr_page_table2 =NULL;
f0106cac:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0106cb3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106cb6:	8b 55 10             	mov    0x10(%ebp),%edx
f0106cb9:	c1 ea 0c             	shr    $0xc,%edx
f0106cbc:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106cc2:	c1 e2 02             	shl    $0x2,%edx
f0106cc5:	01 d0                	add    %edx,%eax
f0106cc7:	8b 00                	mov    (%eax),%eax
f0106cc9:	89 45 ec             	mov    %eax,-0x14(%ebp)

	}*/

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f0106ccc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106ccf:	83 e0 01             	and    $0x1,%eax
f0106cd2:	85 c0                	test   %eax,%eax
f0106cd4:	74 25                	je     f0106cfb <map_frame+0x91>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f0106cd6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106cd9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106cde:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106ce1:	75 07                	jne    f0106cea <map_frame+0x80>
			return 0;
f0106ce3:	b8 00 00 00 00       	mov    $0x0,%eax
f0106ce8:	eb 43                	jmp    f0106d2d <map_frame+0xc3>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f0106cea:	83 ec 08             	sub    $0x8,%esp
f0106ced:	ff 75 10             	pushl  0x10(%ebp)
f0106cf0:	ff 75 08             	pushl  0x8(%ebp)
f0106cf3:	e8 a7 00 00 00       	call   f0106d9f <unmap_frame>
f0106cf8:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f0106cfb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106cfe:	8b 40 08             	mov    0x8(%eax),%eax
f0106d01:	40                   	inc    %eax
f0106d02:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106d05:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106d09:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106d0c:	8b 55 10             	mov    0x10(%ebp),%edx
f0106d0f:	c1 ea 0c             	shr    $0xc,%edx
f0106d12:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106d18:	c1 e2 02             	shl    $0x2,%edx
f0106d1b:	01 c2                	add    %eax,%edx
f0106d1d:	8b 45 14             	mov    0x14(%ebp),%eax
f0106d20:	0b 45 f4             	or     -0xc(%ebp),%eax
f0106d23:	83 c8 01             	or     $0x1,%eax
f0106d26:	89 02                	mov    %eax,(%edx)

	return 0;
f0106d28:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106d2d:	c9                   	leave  
f0106d2e:	c3                   	ret    

f0106d2f <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f0106d2f:	55                   	push   %ebp
f0106d30:	89 e5                	mov    %esp,%ebp
f0106d32:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f0106d35:	83 ec 04             	sub    $0x4,%esp
f0106d38:	ff 75 10             	pushl  0x10(%ebp)
f0106d3b:	ff 75 0c             	pushl  0xc(%ebp)
f0106d3e:	ff 75 08             	pushl  0x8(%ebp)
f0106d41:	e8 94 fc ff ff       	call   f01069da <get_page_table>
f0106d46:	83 c4 10             	add    $0x10,%esp
f0106d49:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f0106d4c:	8b 45 10             	mov    0x10(%ebp),%eax
f0106d4f:	8b 00                	mov    (%eax),%eax
f0106d51:	85 c0                	test   %eax,%eax
f0106d53:	74 43                	je     f0106d98 <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f0106d55:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106d58:	c1 e8 0c             	shr    $0xc,%eax
f0106d5b:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106d60:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f0106d63:	8b 45 10             	mov    0x10(%ebp),%eax
f0106d66:	8b 00                	mov    (%eax),%eax
f0106d68:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d6b:	c1 e2 02             	shl    $0x2,%edx
f0106d6e:	01 d0                	add    %edx,%eax
f0106d70:	8b 00                	mov    (%eax),%eax
f0106d72:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f0106d75:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106d79:	74 16                	je     f0106d91 <get_frame_info+0x62>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f0106d7b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d7e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106d83:	83 ec 0c             	sub    $0xc,%esp
f0106d86:	50                   	push   %eax
f0106d87:	e8 65 f6 ff ff       	call   f01063f1 <to_frame_info>
f0106d8c:	83 c4 10             	add    $0x10,%esp
f0106d8f:	eb 0c                	jmp    f0106d9d <get_frame_info+0x6e>
		}
		return 0;
f0106d91:	b8 00 00 00 00       	mov    $0x0,%eax
f0106d96:	eb 05                	jmp    f0106d9d <get_frame_info+0x6e>
	}
	return 0;
f0106d98:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106d9d:	c9                   	leave  
f0106d9e:	c3                   	ret    

f0106d9f <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f0106d9f:	55                   	push   %ebp
f0106da0:	89 e5                	mov    %esp,%ebp
f0106da2:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f0106da5:	83 ec 04             	sub    $0x4,%esp
f0106da8:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0106dab:	50                   	push   %eax
f0106dac:	ff 75 0c             	pushl  0xc(%ebp)
f0106daf:	ff 75 08             	pushl  0x8(%ebp)
f0106db2:	e8 78 ff ff ff       	call   f0106d2f <get_frame_info>
f0106db7:	83 c4 10             	add    $0x10,%esp
f0106dba:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f0106dbd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106dc1:	74 60                	je     f0106e23 <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0106dc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106dc6:	8a 40 14             	mov    0x14(%eax),%al
f0106dc9:	84 c0                	test   %al,%al
f0106dcb:	74 1c                	je     f0106de9 <unmap_frame+0x4a>
f0106dcd:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106dd4:	77 13                	ja     f0106de9 <unmap_frame+0x4a>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f0106dd6:	83 ec 08             	sub    $0x8,%esp
f0106dd9:	ff 75 0c             	pushl  0xc(%ebp)
f0106ddc:	68 0c 5b 13 f0       	push   $0xf0135b0c
f0106de1:	e8 9c 9e ff ff       	call   f0100c82 <cprintf>
f0106de6:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f0106de9:	83 ec 0c             	sub    $0xc,%esp
f0106dec:	ff 75 f4             	pushl  -0xc(%ebp)
f0106def:	e8 b6 fb ff ff       	call   f01069aa <decrement_references>
f0106df4:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0106df7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106dfa:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106dfd:	c1 ea 0c             	shr    $0xc,%edx
f0106e00:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106e06:	c1 e2 02             	shl    $0x2,%edx
f0106e09:	01 d0                	add    %edx,%eax
f0106e0b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f0106e11:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106e14:	83 ec 08             	sub    $0x8,%esp
f0106e17:	50                   	push   %eax
f0106e18:	ff 75 08             	pushl  0x8(%ebp)
f0106e1b:	e8 17 f6 ff ff       	call   f0106437 <tlb_invalidate>
f0106e20:	83 c4 10             	add    $0x10,%esp
	}
}
f0106e23:	90                   	nop
f0106e24:	c9                   	leave  
f0106e25:	c3                   	ret    

f0106e26 <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106e26:	55                   	push   %ebp
f0106e27:	89 e5                	mov    %esp,%ebp
f0106e29:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106e2c:	ff 75 0c             	pushl  0xc(%ebp)
f0106e2f:	e8 aa f5 ff ff       	call   f01063de <to_physical_address>
f0106e34:	83 c4 04             	add    $0x4,%esp
f0106e37:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106e3a:	8b 45 10             	mov    0x10(%ebp),%eax
f0106e3d:	c1 e8 16             	shr    $0x16,%eax
f0106e40:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106e47:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e4a:	01 d0                	add    %edx,%eax
f0106e4c:	8b 00                	mov    (%eax),%eax
f0106e4e:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106e51:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0106e58:	77 19                	ja     f0106e73 <loadtime_map_frame+0x4d>
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106e5a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106e5d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106e62:	83 ec 0c             	sub    $0xc,%esp
f0106e65:	50                   	push   %eax
f0106e66:	e8 7c 0b 00 00       	call   f01079e7 <kheap_virtual_address>
f0106e6b:	83 c4 10             	add    $0x10,%esp
f0106e6e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106e71:	eb 40                	jmp    f0106eb3 <loadtime_map_frame+0x8d>
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106e73:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106e76:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106e7b:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106e7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106e81:	c1 e8 0c             	shr    $0xc,%eax
f0106e84:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106e87:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f0106e8c:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106e8f:	72 17                	jb     f0106ea8 <loadtime_map_frame+0x82>
f0106e91:	ff 75 e8             	pushl  -0x18(%ebp)
f0106e94:	68 c0 5a 13 f0       	push   $0xf0135ac0
f0106e99:	68 e6 01 00 00       	push   $0x1e6
f0106e9e:	68 03 5a 13 f0       	push   $0xf0135a03
f0106ea3:	e8 53 93 ff ff       	call   f01001fb <_panic>
f0106ea8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106eab:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106eb0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f0106eb3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106eb7:	75 14                	jne    f0106ecd <loadtime_map_frame+0xa7>
	{
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
f0106eb9:	83 ec 08             	sub    $0x8,%esp
f0106ebc:	ff 75 10             	pushl  0x10(%ebp)
f0106ebf:	ff 75 08             	pushl  0x8(%ebp)
f0106ec2:	e8 69 fc ff ff       	call   f0106b30 <create_page_table>
f0106ec7:	83 c4 10             	add    $0x10,%esp
f0106eca:	89 45 f4             	mov    %eax,-0xc(%ebp)
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
		}
#endif
	}

	ptr_frame_info->references++;
f0106ecd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106ed0:	8b 40 08             	mov    0x8(%eax),%eax
f0106ed3:	40                   	inc    %eax
f0106ed4:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106ed7:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106edb:	8b 45 10             	mov    0x10(%ebp),%eax
f0106ede:	c1 e8 0c             	shr    $0xc,%eax
f0106ee1:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106ee6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106eed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ef0:	01 c2                	add    %eax,%edx
f0106ef2:	8b 45 14             	mov    0x14(%ebp),%eax
f0106ef5:	0b 45 f0             	or     -0x10(%ebp),%eax
f0106ef8:	83 c8 01             	or     $0x1,%eax
f0106efb:	89 02                	mov    %eax,(%edx)

	return 0;
f0106efd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106f02:	c9                   	leave  
f0106f03:	c3                   	ret    

f0106f04 <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f0106f04:	55                   	push   %ebp
f0106f05:	89 e5                	mov    %esp,%ebp
f0106f07:	57                   	push   %edi
f0106f08:	56                   	push   %esi
f0106f09:	53                   	push   %ebx
f0106f0a:	83 ec 20             	sub    $0x20,%esp

	//calculate the free frames from the free frame list
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f0106f0d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f0106f14:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f0106f1b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	LIST_FOREACH(ptr, &free_frame_list)
f0106f22:	a1 18 7b 65 f0       	mov    0xf0657b18,%eax
f0106f27:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106f2a:	eb 1a                	jmp    f0106f46 <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f0106f2c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106f2f:	8a 40 14             	mov    0x14(%eax),%al
f0106f32:	84 c0                	test   %al,%al
f0106f34:	74 05                	je     f0106f3b <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f0106f36:	ff 45 e8             	incl   -0x18(%ebp)
f0106f39:	eb 03                	jmp    f0106f3e <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f0106f3b:	ff 45 ec             	incl   -0x14(%ebp)
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;

	LIST_FOREACH(ptr, &free_frame_list)
f0106f3e:	a1 20 7b 65 f0       	mov    0xf0657b20,%eax
f0106f43:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106f46:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106f4a:	74 07                	je     f0106f53 <calculate_available_frames+0x4f>
f0106f4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106f4f:	8b 00                	mov    (%eax),%eax
f0106f51:	eb 05                	jmp    f0106f58 <calculate_available_frames+0x54>
f0106f53:	b8 00 00 00 00       	mov    $0x0,%eax
f0106f58:	a3 20 7b 65 f0       	mov    %eax,0xf0657b20
f0106f5d:	a1 20 7b 65 f0       	mov    0xf0657b20,%eax
f0106f62:	85 c0                	test   %eax,%eax
f0106f64:	75 c6                	jne    f0106f2c <calculate_available_frames+0x28>
f0106f66:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106f6a:	75 c0                	jne    f0106f2c <calculate_available_frames+0x28>
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0106f6c:	a1 b8 7a 65 f0       	mov    0xf0657ab8,%eax
f0106f71:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106f74:	eb 0b                	jmp    f0106f81 <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f0106f76:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0106f79:	a1 c0 7a 65 f0       	mov    0xf0657ac0,%eax
f0106f7e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106f81:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106f85:	74 07                	je     f0106f8e <calculate_available_frames+0x8a>
f0106f87:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106f8a:	8b 00                	mov    (%eax),%eax
f0106f8c:	eb 05                	jmp    f0106f93 <calculate_available_frames+0x8f>
f0106f8e:	b8 00 00 00 00       	mov    $0x0,%eax
f0106f93:	a3 c0 7a 65 f0       	mov    %eax,0xf0657ac0
f0106f98:	a1 c0 7a 65 f0       	mov    0xf0657ac0,%eax
f0106f9d:	85 c0                	test   %eax,%eax
f0106f9f:	75 d5                	jne    f0106f76 <calculate_available_frames+0x72>
f0106fa1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106fa5:	75 cf                	jne    f0106f76 <calculate_available_frames+0x72>
	{
		totalModified++ ;
	}

	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f0106fa7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106faa:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f0106fad:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106fb0:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f0106fb3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106fb6:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f0106fb9:	8b 45 08             	mov    0x8(%ebp),%eax
f0106fbc:	89 c3                	mov    %eax,%ebx
f0106fbe:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0106fc1:	ba 03 00 00 00       	mov    $0x3,%edx
f0106fc6:	89 df                	mov    %ebx,%edi
f0106fc8:	89 c6                	mov    %eax,%esi
f0106fca:	89 d1                	mov    %edx,%ecx
f0106fcc:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f0106fce:	8b 45 08             	mov    0x8(%ebp),%eax
f0106fd1:	83 c4 20             	add    $0x20,%esp
f0106fd4:	5b                   	pop    %ebx
f0106fd5:	5e                   	pop    %esi
f0106fd6:	5f                   	pop    %edi
f0106fd7:	5d                   	pop    %ebp
f0106fd8:	c2 04 00             	ret    $0x4

f0106fdb <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0106fdb:	55                   	push   %ebp
f0106fdc:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0106fde:	8b 45 08             	mov    0x8(%ebp),%eax
f0106fe1:	8b 15 54 7b 65 f0    	mov    0xf0657b54,%edx
f0106fe7:	29 d0                	sub    %edx,%eax
f0106fe9:	c1 f8 03             	sar    $0x3,%eax
f0106fec:	89 c2                	mov    %eax,%edx
f0106fee:	89 d0                	mov    %edx,%eax
f0106ff0:	c1 e0 02             	shl    $0x2,%eax
f0106ff3:	01 d0                	add    %edx,%eax
f0106ff5:	c1 e0 02             	shl    $0x2,%eax
f0106ff8:	01 d0                	add    %edx,%eax
f0106ffa:	c1 e0 02             	shl    $0x2,%eax
f0106ffd:	01 d0                	add    %edx,%eax
f0106fff:	89 c1                	mov    %eax,%ecx
f0107001:	c1 e1 08             	shl    $0x8,%ecx
f0107004:	01 c8                	add    %ecx,%eax
f0107006:	89 c1                	mov    %eax,%ecx
f0107008:	c1 e1 10             	shl    $0x10,%ecx
f010700b:	01 c8                	add    %ecx,%eax
f010700d:	01 c0                	add    %eax,%eax
f010700f:	01 d0                	add    %edx,%eax
}
f0107011:	5d                   	pop    %ebp
f0107012:	c3                   	ret    

f0107013 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107013:	55                   	push   %ebp
f0107014:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107016:	ff 75 08             	pushl  0x8(%ebp)
f0107019:	e8 bd ff ff ff       	call   f0106fdb <to_frame_number>
f010701e:	83 c4 04             	add    $0x4,%esp
f0107021:	c1 e0 0c             	shl    $0xc,%eax
}
f0107024:	c9                   	leave  
f0107025:	c3                   	ret    

f0107026 <create_shares_array>:
// [1] Create "shares" array:
//===========================
//Dynamically allocate the array of shared objects
//initialize the array of shared objects by 0's and empty = 1
void create_shares_array(uint32 numOfElements)
{
f0107026:	55                   	push   %ebp
f0107027:	89 e5                	mov    %esp,%ebp
f0107029:	83 ec 18             	sub    $0x18,%esp
#if USE_KHEAP
	MAX_SHARES  = numOfElements ;
f010702c:	8b 45 08             	mov    0x8(%ebp),%eax
f010702f:	a3 28 7b 65 f0       	mov    %eax,0xf0657b28
	shares = kmalloc(numOfElements*sizeof(struct Share));
f0107034:	8b 55 08             	mov    0x8(%ebp),%edx
f0107037:	89 d0                	mov    %edx,%eax
f0107039:	c1 e0 02             	shl    $0x2,%eax
f010703c:	01 d0                	add    %edx,%eax
f010703e:	c1 e0 02             	shl    $0x2,%eax
f0107041:	01 d0                	add    %edx,%eax
f0107043:	c1 e0 02             	shl    $0x2,%eax
f0107046:	83 ec 0c             	sub    $0xc,%esp
f0107049:	50                   	push   %eax
f010704a:	e8 af 07 00 00       	call   f01077fe <kmalloc>
f010704f:	83 c4 10             	add    $0x10,%esp
f0107052:	a3 ec 7a 65 f0       	mov    %eax,0xf0657aec
	if (shares == NULL)
f0107057:	a1 ec 7a 65 f0       	mov    0xf0657aec,%eax
f010705c:	85 c0                	test   %eax,%eax
f010705e:	75 14                	jne    f0107074 <create_shares_array+0x4e>
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
f0107060:	83 ec 04             	sub    $0x4,%esp
f0107063:	68 30 5b 13 f0       	push   $0xf0135b30
f0107068:	6a 21                	push   $0x21
f010706a:	68 74 5b 13 f0       	push   $0xf0135b74
f010706f:	e8 87 91 ff ff       	call   f01001fb <_panic>
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0107074:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010707b:	eb 4b                	jmp    f01070c8 <create_shares_array+0xa2>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
f010707d:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f0107083:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107086:	89 d0                	mov    %edx,%eax
f0107088:	c1 e0 02             	shl    $0x2,%eax
f010708b:	01 d0                	add    %edx,%eax
f010708d:	c1 e0 02             	shl    $0x2,%eax
f0107090:	01 d0                	add    %edx,%eax
f0107092:	c1 e0 02             	shl    $0x2,%eax
f0107095:	01 c8                	add    %ecx,%eax
f0107097:	83 ec 04             	sub    $0x4,%esp
f010709a:	6a 54                	push   $0x54
f010709c:	6a 00                	push   $0x0
f010709e:	50                   	push   %eax
f010709f:	e8 d4 9d 02 00       	call   f0130e78 <memset>
f01070a4:	83 c4 10             	add    $0x10,%esp
		shares[i].empty = 1;
f01070a7:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f01070ad:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01070b0:	89 d0                	mov    %edx,%eax
f01070b2:	c1 e0 02             	shl    $0x2,%eax
f01070b5:	01 d0                	add    %edx,%eax
f01070b7:	c1 e0 02             	shl    $0x2,%eax
f01070ba:	01 d0                	add    %edx,%eax
f01070bc:	c1 e0 02             	shl    $0x2,%eax
f01070bf:	01 c8                	add    %ecx,%eax
f01070c1:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f01070c5:	ff 45 f4             	incl   -0xc(%ebp)
f01070c8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01070cb:	a1 28 7b 65 f0       	mov    0xf0657b28,%eax
f01070d0:	39 c2                	cmp    %eax,%edx
f01070d2:	72 a9                	jb     f010707d <create_shares_array+0x57>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
		shares[i].empty = 1;
	}
}
f01070d4:	90                   	nop
f01070d5:	c9                   	leave  
f01070d6:	c3                   	ret    

f01070d7 <allocate_share_object>:
//	a) if succeed:
//		1. allocatedObject (pointer to struct Share) passed by reference
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
f01070d7:	55                   	push   %ebp
f01070d8:	89 e5                	mov    %esp,%ebp
f01070da:	53                   	push   %ebx
f01070db:	83 ec 14             	sub    $0x14,%esp
	int32 sharedObjectID = -1 ;
f01070de:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SHARES; ++i)
f01070e5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01070ec:	eb 2c                	jmp    f010711a <allocate_share_object+0x43>
	{
		if (shares[i].empty)
f01070ee:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f01070f4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01070f7:	89 d0                	mov    %edx,%eax
f01070f9:	c1 e0 02             	shl    $0x2,%eax
f01070fc:	01 d0                	add    %edx,%eax
f01070fe:	c1 e0 02             	shl    $0x2,%eax
f0107101:	01 d0                	add    %edx,%eax
f0107103:	c1 e0 02             	shl    $0x2,%eax
f0107106:	01 c8                	add    %ecx,%eax
f0107108:	8a 40 4d             	mov    0x4d(%eax),%al
f010710b:	84 c0                	test   %al,%al
f010710d:	74 08                	je     f0107117 <allocate_share_object+0x40>
		{
			sharedObjectID = i;
f010710f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107112:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0107115:	eb 0f                	jmp    f0107126 <allocate_share_object+0x4f>
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
	int32 sharedObjectID = -1 ;
	for (int i = 0; i < MAX_SHARES; ++i)
f0107117:	ff 45 f0             	incl   -0x10(%ebp)
f010711a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010711d:	a1 28 7b 65 f0       	mov    0xf0657b28,%eax
f0107122:	39 c2                	cmp    %eax,%edx
f0107124:	72 c8                	jb     f01070ee <allocate_share_object+0x17>
			sharedObjectID = i;
			break;
		}
	}

	if (sharedObjectID == -1)
f0107126:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010712a:	75 50                	jne    f010717c <allocate_share_object+0xa5>
	{
		//try to increase double the size of the "shares" array
#if USE_KHEAP
		{
			shares = krealloc(shares, 2*MAX_SHARES);
f010712c:	a1 28 7b 65 f0       	mov    0xf0657b28,%eax
f0107131:	01 c0                	add    %eax,%eax
f0107133:	89 c2                	mov    %eax,%edx
f0107135:	a1 ec 7a 65 f0       	mov    0xf0657aec,%eax
f010713a:	83 ec 08             	sub    $0x8,%esp
f010713d:	52                   	push   %edx
f010713e:	50                   	push   %eax
f010713f:	e8 71 09 00 00       	call   f0107ab5 <krealloc>
f0107144:	83 c4 10             	add    $0x10,%esp
f0107147:	a3 ec 7a 65 f0       	mov    %eax,0xf0657aec
			if (shares == NULL)
f010714c:	a1 ec 7a 65 f0       	mov    0xf0657aec,%eax
f0107151:	85 c0                	test   %eax,%eax
f0107153:	75 13                	jne    f0107168 <allocate_share_object+0x91>
			{
				*allocatedObject = NULL;
f0107155:	8b 45 08             	mov    0x8(%ebp),%eax
f0107158:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				return E_NO_SHARE;
f010715e:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f0107163:	e9 e8 00 00 00       	jmp    f0107250 <allocate_share_object+0x179>
			}
			else
			{
				sharedObjectID = MAX_SHARES;
f0107168:	a1 28 7b 65 f0       	mov    0xf0657b28,%eax
f010716d:	89 45 f4             	mov    %eax,-0xc(%ebp)
				MAX_SHARES *= 2;
f0107170:	a1 28 7b 65 f0       	mov    0xf0657b28,%eax
f0107175:	01 c0                	add    %eax,%eax
f0107177:	a3 28 7b 65 f0       	mov    %eax,0xf0657b28
			return E_NO_SHARE;
		}
#endif
	}

	*allocatedObject = &(shares[sharedObjectID]);
f010717c:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f0107182:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107185:	89 d0                	mov    %edx,%eax
f0107187:	c1 e0 02             	shl    $0x2,%eax
f010718a:	01 d0                	add    %edx,%eax
f010718c:	c1 e0 02             	shl    $0x2,%eax
f010718f:	01 d0                	add    %edx,%eax
f0107191:	c1 e0 02             	shl    $0x2,%eax
f0107194:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107197:	8b 45 08             	mov    0x8(%ebp),%eax
f010719a:	89 10                	mov    %edx,(%eax)
	shares[sharedObjectID].empty = 0;
f010719c:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f01071a2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071a5:	89 d0                	mov    %edx,%eax
f01071a7:	c1 e0 02             	shl    $0x2,%eax
f01071aa:	01 d0                	add    %edx,%eax
f01071ac:	c1 e0 02             	shl    $0x2,%eax
f01071af:	01 d0                	add    %edx,%eax
f01071b1:	c1 e0 02             	shl    $0x2,%eax
f01071b4:	01 c8                	add    %ecx,%eax
f01071b6:	c6 40 4d 00          	movb   $0x0,0x4d(%eax)

#if USE_KHEAP
	{
		shares[sharedObjectID].framesStorage = kmalloc(PAGE_SIZE);
f01071ba:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f01071c0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071c3:	89 d0                	mov    %edx,%eax
f01071c5:	c1 e0 02             	shl    $0x2,%eax
f01071c8:	01 d0                	add    %edx,%eax
f01071ca:	c1 e0 02             	shl    $0x2,%eax
f01071cd:	01 d0                	add    %edx,%eax
f01071cf:	c1 e0 02             	shl    $0x2,%eax
f01071d2:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
f01071d5:	83 ec 0c             	sub    $0xc,%esp
f01071d8:	68 00 10 00 00       	push   $0x1000
f01071dd:	e8 1c 06 00 00       	call   f01077fe <kmalloc>
f01071e2:	83 c4 10             	add    $0x10,%esp
f01071e5:	89 43 50             	mov    %eax,0x50(%ebx)
		if (shares[sharedObjectID].framesStorage == NULL)
f01071e8:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f01071ee:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071f1:	89 d0                	mov    %edx,%eax
f01071f3:	c1 e0 02             	shl    $0x2,%eax
f01071f6:	01 d0                	add    %edx,%eax
f01071f8:	c1 e0 02             	shl    $0x2,%eax
f01071fb:	01 d0                	add    %edx,%eax
f01071fd:	c1 e0 02             	shl    $0x2,%eax
f0107200:	01 c8                	add    %ecx,%eax
f0107202:	8b 40 50             	mov    0x50(%eax),%eax
f0107205:	85 c0                	test   %eax,%eax
f0107207:	75 14                	jne    f010721d <allocate_share_object+0x146>
		{
			panic("Kernel runs out of memory\nCan't create the framesStorage.");
f0107209:	83 ec 04             	sub    $0x4,%esp
f010720c:	68 98 5b 13 f0       	push   $0xf0135b98
f0107211:	6a 63                	push   $0x63
f0107213:	68 74 5b 13 f0       	push   $0xf0135b74
f0107218:	e8 de 8f ff ff       	call   f01001fb <_panic>
		}
	}
#endif
	memset(shares[sharedObjectID].framesStorage, 0, PAGE_SIZE);
f010721d:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f0107223:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107226:	89 d0                	mov    %edx,%eax
f0107228:	c1 e0 02             	shl    $0x2,%eax
f010722b:	01 d0                	add    %edx,%eax
f010722d:	c1 e0 02             	shl    $0x2,%eax
f0107230:	01 d0                	add    %edx,%eax
f0107232:	c1 e0 02             	shl    $0x2,%eax
f0107235:	01 c8                	add    %ecx,%eax
f0107237:	8b 40 50             	mov    0x50(%eax),%eax
f010723a:	83 ec 04             	sub    $0x4,%esp
f010723d:	68 00 10 00 00       	push   $0x1000
f0107242:	6a 00                	push   $0x0
f0107244:	50                   	push   %eax
f0107245:	e8 2e 9c 02 00       	call   f0130e78 <memset>
f010724a:	83 c4 10             	add    $0x10,%esp

	return sharedObjectID;
f010724d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107250:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107253:	c9                   	leave  
f0107254:	c3                   	ret    

f0107255 <get_share_object_ID>:
//Search for the given shared object in the "shares" array
//Return:
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
f0107255:	55                   	push   %ebp
f0107256:	89 e5                	mov    %esp,%ebp
f0107258:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010725b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(; i< MAX_SHARES; ++i)
f0107262:	eb 7b                	jmp    f01072df <get_share_object_ID+0x8a>
	{
		if (shares[i].empty)
f0107264:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f010726a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010726d:	89 d0                	mov    %edx,%eax
f010726f:	c1 e0 02             	shl    $0x2,%eax
f0107272:	01 d0                	add    %edx,%eax
f0107274:	c1 e0 02             	shl    $0x2,%eax
f0107277:	01 d0                	add    %edx,%eax
f0107279:	c1 e0 02             	shl    $0x2,%eax
f010727c:	01 c8                	add    %ecx,%eax
f010727e:	8a 40 4d             	mov    0x4d(%eax),%al
f0107281:	84 c0                	test   %al,%al
f0107283:	75 56                	jne    f01072db <get_share_object_ID+0x86>
			continue;

		//cprintf("shared var name = %s compared with %s\n", name, shares[i].name);
		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
f0107285:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f010728b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010728e:	89 d0                	mov    %edx,%eax
f0107290:	c1 e0 02             	shl    $0x2,%eax
f0107293:	01 d0                	add    %edx,%eax
f0107295:	c1 e0 02             	shl    $0x2,%eax
f0107298:	01 d0                	add    %edx,%eax
f010729a:	c1 e0 02             	shl    $0x2,%eax
f010729d:	01 c8                	add    %ecx,%eax
f010729f:	8b 00                	mov    (%eax),%eax
f01072a1:	3b 45 08             	cmp    0x8(%ebp),%eax
f01072a4:	75 36                	jne    f01072dc <get_share_object_ID+0x87>
f01072a6:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f01072ac:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072af:	89 d0                	mov    %edx,%eax
f01072b1:	c1 e0 02             	shl    $0x2,%eax
f01072b4:	01 d0                	add    %edx,%eax
f01072b6:	c1 e0 02             	shl    $0x2,%eax
f01072b9:	01 d0                	add    %edx,%eax
f01072bb:	c1 e0 02             	shl    $0x2,%eax
f01072be:	01 c8                	add    %ecx,%eax
f01072c0:	83 c0 04             	add    $0x4,%eax
f01072c3:	83 ec 08             	sub    $0x8,%esp
f01072c6:	50                   	push   %eax
f01072c7:	ff 75 0c             	pushl  0xc(%ebp)
f01072ca:	e8 c7 9a 02 00       	call   f0130d96 <strcmp>
f01072cf:	83 c4 10             	add    $0x10,%esp
f01072d2:	85 c0                	test   %eax,%eax
f01072d4:	75 06                	jne    f01072dc <get_share_object_ID+0x87>
		{
			//cprintf("%s found\n", name);
			return i;
f01072d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072d9:	eb 19                	jmp    f01072f4 <get_share_object_ID+0x9f>
	int i=0;

	for(; i< MAX_SHARES; ++i)
	{
		if (shares[i].empty)
			continue;
f01072db:	90                   	nop
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
	int i=0;

	for(; i< MAX_SHARES; ++i)
f01072dc:	ff 45 f4             	incl   -0xc(%ebp)
f01072df:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072e2:	a1 28 7b 65 f0       	mov    0xf0657b28,%eax
f01072e7:	39 c2                	cmp    %eax,%edx
f01072e9:	0f 82 75 ff ff ff    	jb     f0107264 <get_share_object_ID+0xf>
		{
			//cprintf("%s found\n", name);
			return i;
		}
	}
	return E_SHARED_MEM_NOT_EXISTS;
f01072ef:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
f01072f4:	c9                   	leave  
f01072f5:	c3                   	ret    

f01072f6 <free_share_object>:
//delete the given sharedObjectID from the "shares" array
//Return:
//	a) 0 if succeed
//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
int free_share_object(uint32 sharedObjectID)
{
f01072f6:	55                   	push   %ebp
f01072f7:	89 e5                	mov    %esp,%ebp
f01072f9:	83 ec 08             	sub    $0x8,%esp
	if (sharedObjectID >= MAX_SHARES)
f01072fc:	a1 28 7b 65 f0       	mov    0xf0657b28,%eax
f0107301:	39 45 08             	cmp    %eax,0x8(%ebp)
f0107304:	72 0a                	jb     f0107310 <free_share_object+0x1a>
		return E_SHARED_MEM_NOT_EXISTS;
f0107306:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f010730b:	e9 9f 00 00 00       	jmp    f01073af <free_share_object+0xb9>

	//panic("deleteSharedObject: not implemented yet");
	clear_frames_storage(shares[sharedObjectID].framesStorage);
f0107310:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f0107316:	8b 55 08             	mov    0x8(%ebp),%edx
f0107319:	89 d0                	mov    %edx,%eax
f010731b:	c1 e0 02             	shl    $0x2,%eax
f010731e:	01 d0                	add    %edx,%eax
f0107320:	c1 e0 02             	shl    $0x2,%eax
f0107323:	01 d0                	add    %edx,%eax
f0107325:	c1 e0 02             	shl    $0x2,%eax
f0107328:	01 c8                	add    %ecx,%eax
f010732a:	8b 40 50             	mov    0x50(%eax),%eax
f010732d:	83 ec 0c             	sub    $0xc,%esp
f0107330:	50                   	push   %eax
f0107331:	e8 52 01 00 00       	call   f0107488 <clear_frames_storage>
f0107336:	83 c4 10             	add    $0x10,%esp
#if USE_KHEAP
	kfree(shares[sharedObjectID].framesStorage);
f0107339:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f010733f:	8b 55 08             	mov    0x8(%ebp),%edx
f0107342:	89 d0                	mov    %edx,%eax
f0107344:	c1 e0 02             	shl    $0x2,%eax
f0107347:	01 d0                	add    %edx,%eax
f0107349:	c1 e0 02             	shl    $0x2,%eax
f010734c:	01 d0                	add    %edx,%eax
f010734e:	c1 e0 02             	shl    $0x2,%eax
f0107351:	01 c8                	add    %ecx,%eax
f0107353:	8b 40 50             	mov    0x50(%eax),%eax
f0107356:	83 ec 0c             	sub    $0xc,%esp
f0107359:	50                   	push   %eax
f010735a:	e8 61 05 00 00       	call   f01078c0 <kfree>
f010735f:	83 c4 10             	add    $0x10,%esp
#endif
	memset(&(shares[sharedObjectID]), 0, sizeof(struct Share));
f0107362:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f0107368:	8b 55 08             	mov    0x8(%ebp),%edx
f010736b:	89 d0                	mov    %edx,%eax
f010736d:	c1 e0 02             	shl    $0x2,%eax
f0107370:	01 d0                	add    %edx,%eax
f0107372:	c1 e0 02             	shl    $0x2,%eax
f0107375:	01 d0                	add    %edx,%eax
f0107377:	c1 e0 02             	shl    $0x2,%eax
f010737a:	01 c8                	add    %ecx,%eax
f010737c:	83 ec 04             	sub    $0x4,%esp
f010737f:	6a 54                	push   $0x54
f0107381:	6a 00                	push   $0x0
f0107383:	50                   	push   %eax
f0107384:	e8 ef 9a 02 00       	call   f0130e78 <memset>
f0107389:	83 c4 10             	add    $0x10,%esp
	shares[sharedObjectID].empty = 1;
f010738c:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f0107392:	8b 55 08             	mov    0x8(%ebp),%edx
f0107395:	89 d0                	mov    %edx,%eax
f0107397:	c1 e0 02             	shl    $0x2,%eax
f010739a:	01 d0                	add    %edx,%eax
f010739c:	c1 e0 02             	shl    $0x2,%eax
f010739f:	01 d0                	add    %edx,%eax
f01073a1:	c1 e0 02             	shl    $0x2,%eax
f01073a4:	01 c8                	add    %ecx,%eax
f01073a6:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)

	return 0;
f01073aa:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01073af:	c9                   	leave  
f01073b0:	c3                   	ret    

f01073b1 <create_frames_storage>:
//===========================
// [5] Create frames_storage:
//===========================
// if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f01073b1:	55                   	push   %ebp
f01073b2:	89 e5                	mov    %esp,%ebp
f01073b4:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = kmalloc(PAGE_SIZE);
f01073b7:	83 ec 0c             	sub    $0xc,%esp
f01073ba:	68 00 10 00 00       	push   $0x1000
f01073bf:	e8 3a 04 00 00       	call   f01077fe <kmalloc>
f01073c4:	83 c4 10             	add    $0x10,%esp
f01073c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f01073ca:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01073ce:	75 17                	jne    f01073e7 <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f01073d0:	83 ec 04             	sub    $0x4,%esp
f01073d3:	68 d2 5b 13 f0       	push   $0xf0135bd2
f01073d8:	68 a9 00 00 00       	push   $0xa9
f01073dd:	68 74 5b 13 f0       	push   $0xf0135b74
f01073e2:	e8 14 8e ff ff       	call   f01001fb <_panic>
	}
	return frames_storage;
f01073e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01073ea:	c9                   	leave  
f01073eb:	c3                   	ret    

f01073ec <add_frame_to_storage>:
//===========================
// [6] Add frame to storage:
//===========================
// Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct FrameInfo* ptr_frame_info, uint32 index)
{
f01073ec:	55                   	push   %ebp
f01073ed:	89 e5                	mov    %esp,%ebp
f01073ef:	53                   	push   %ebx
f01073f0:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f01073f3:	8b 45 10             	mov    0x10(%ebp),%eax
f01073f6:	c1 e0 0c             	shl    $0xc,%eax
f01073f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage,  va, &ptr_page_table);
f01073fc:	83 ec 04             	sub    $0x4,%esp
f01073ff:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107402:	50                   	push   %eax
f0107403:	ff 75 f4             	pushl  -0xc(%ebp)
f0107406:	ff 75 08             	pushl  0x8(%ebp)
f0107409:	e8 cc f5 ff ff       	call   f01069da <get_page_table>
f010740e:	83 c4 10             	add    $0x10,%esp
f0107411:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f0107414:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0107418:	75 14                	jne    f010742e <add_frame_to_storage+0x42>
	{
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
f010741a:	83 ec 08             	sub    $0x8,%esp
f010741d:	ff 75 f4             	pushl  -0xc(%ebp)
f0107420:	ff 75 08             	pushl  0x8(%ebp)
f0107423:	e8 08 f7 ff ff       	call   f0106b30 <create_page_table>
f0107428:	83 c4 10             	add    $0x10,%esp
f010742b:	89 45 ec             	mov    %eax,-0x14(%ebp)
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);

		}
#endif
	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f010742e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107431:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107434:	c1 ea 0c             	shr    $0xc,%edx
f0107437:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010743d:	c1 e2 02             	shl    $0x2,%edx
f0107440:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f0107443:	83 ec 0c             	sub    $0xc,%esp
f0107446:	ff 75 0c             	pushl  0xc(%ebp)
f0107449:	e8 c5 fb ff ff       	call   f0107013 <to_physical_address>
f010744e:	83 c4 10             	add    $0x10,%esp
f0107451:	83 c8 01             	or     $0x1,%eax
f0107454:	89 03                	mov    %eax,(%ebx)
}
f0107456:	90                   	nop
f0107457:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010745a:	c9                   	leave  
f010745b:	c3                   	ret    

f010745c <get_frame_from_storage>:
//===========================
// [7] Get frame from storage:
//===========================
// Get a frame info from the storage of frames at the given index
inline struct FrameInfo* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f010745c:	55                   	push   %ebp
f010745d:	89 e5                	mov    %esp,%ebp
f010745f:	83 ec 18             	sub    $0x18,%esp
	struct FrameInfo* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f0107462:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107465:	c1 e0 0c             	shl    $0xc,%eax
f0107468:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage,  va, &ptr_page_table);
f010746b:	83 ec 04             	sub    $0x4,%esp
f010746e:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107471:	50                   	push   %eax
f0107472:	ff 75 f4             	pushl  -0xc(%ebp)
f0107475:	ff 75 08             	pushl  0x8(%ebp)
f0107478:	e8 b2 f8 ff ff       	call   f0106d2f <get_frame_info>
f010747d:	83 c4 10             	add    $0x10,%esp
f0107480:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f0107483:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0107486:	c9                   	leave  
f0107487:	c3                   	ret    

f0107488 <clear_frames_storage>:

//===========================
// [8] Clear the frames_storage:
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
f0107488:	55                   	push   %ebp
f0107489:	89 e5                	mov    %esp,%ebp
f010748b:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f010748e:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107495:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010749c:	eb 5b                	jmp    f01074f9 <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f010749e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074a1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01074a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01074ab:	01 d0                	add    %edx,%eax
f01074ad:	8b 00                	mov    (%eax),%eax
f01074af:	85 c0                	test   %eax,%eax
f01074b1:	74 43                	je     f01074f6 <clear_frames_storage+0x6e>
		{
#if USE_KHEAP
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
f01074b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074b6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01074bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01074c0:	01 d0                	add    %edx,%eax
f01074c2:	8b 00                	mov    (%eax),%eax
f01074c4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01074c9:	83 ec 0c             	sub    $0xc,%esp
f01074cc:	50                   	push   %eax
f01074cd:	e8 15 05 00 00       	call   f01079e7 <kheap_virtual_address>
f01074d2:	83 c4 10             	add    $0x10,%esp
f01074d5:	83 ec 0c             	sub    $0xc,%esp
f01074d8:	50                   	push   %eax
f01074d9:	e8 e2 03 00 00       	call   f01078c0 <kfree>
f01074de:	83 c4 10             	add    $0x10,%esp
#else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
			}
#endif
			frames_storage[i] = 0;
f01074e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074e4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01074eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01074ee:	01 d0                	add    %edx,%eax
f01074f0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f01074f6:	ff 45 f4             	incl   -0xc(%ebp)
f01074f9:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0107500:	7e 9c                	jle    f010749e <clear_frames_storage+0x16>
			}
#endif
			frames_storage[i] = 0;
		}
	}
}
f0107502:	90                   	nop
f0107503:	c9                   	leave  
f0107504:	c3                   	ret    

f0107505 <createSharedObject>:

//=========================
// [1] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f0107505:	55                   	push   %ebp
f0107506:	89 e5                	mov    %esp,%ebp
f0107508:	83 ec 18             	sub    $0x18,%esp
f010750b:	8b 45 14             	mov    0x14(%ebp),%eax
f010750e:	88 45 f4             	mov    %al,-0xc(%ebp)
	// your code is here, remove the panic and write your code
	panic("createSharedObject() is not implemented yet...!!");
f0107511:	83 ec 04             	sub    $0x4,%esp
f0107514:	68 f0 5b 13 f0       	push   $0xf0135bf0
f0107519:	68 fa 00 00 00       	push   $0xfa
f010751e:	68 74 5b 13 f0       	push   $0xf0135b74
f0107523:	e8 d3 8c ff ff       	call   f01001fb <_panic>

f0107528 <getSizeOfSharedObject>:

//==============================
// [2] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f0107528:	55                   	push   %ebp
f0107529:	89 e5                	mov    %esp,%ebp
f010752b:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("getSizeOfSharedObject() is not implemented yet...!!");
f010752e:	83 ec 04             	sub    $0x4,%esp
f0107531:	68 24 5c 13 f0       	push   $0xf0135c24
f0107536:	68 0c 01 00 00       	push   $0x10c
f010753b:	68 74 5b 13 f0       	push   $0xf0135b74
f0107540:	e8 b6 8c ff ff       	call   f01001fb <_panic>

f0107545 <getSharedObject>:

//======================
// [3] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f0107545:	55                   	push   %ebp
f0107546:	89 e5                	mov    %esp,%ebp
f0107548:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("getSharedObject() is not implemented yet...!!");
f010754b:	83 ec 04             	sub    $0x4,%esp
f010754e:	68 58 5c 13 f0       	push   $0xf0135c58
f0107553:	68 1b 01 00 00       	push   $0x11b
f0107558:	68 74 5b 13 f0       	push   $0xf0135b74
f010755d:	e8 99 8c ff ff       	call   f01001fb <_panic>

f0107562 <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f0107562:	55                   	push   %ebp
f0107563:	89 e5                	mov    %esp,%ebp
f0107565:	83 ec 18             	sub    $0x18,%esp
	struct Env* myenv = curenv; //The calling environment
f0107568:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010756d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	// your code is here, remove the panic and write your code
	panic("freeSharedObject() is not implemented yet...!!");
f0107570:	83 ec 04             	sub    $0x4,%esp
f0107573:	68 88 5c 13 f0       	push   $0xf0135c88
f0107578:	68 33 01 00 00       	push   $0x133
f010757d:	68 74 5b 13 f0       	push   $0xf0135b74
f0107582:	e8 74 8c ff ff       	call   f01001fb <_panic>

f0107587 <isKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0107587:	55                   	push   %ebp
f0107588:	89 e5                	mov    %esp,%ebp
f010758a:	a1 5c 7b 65 f0       	mov    0xf0657b5c,%eax
f010758f:	83 f8 01             	cmp    $0x1,%eax
f0107592:	75 04                	jne    f0107598 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0107594:	b0 01                	mov    $0x1,%al
f0107596:	eb 02                	jmp    f010759a <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0107598:	b0 00                	mov    $0x0,%al
f010759a:	5d                   	pop    %ebp
f010759b:	c3                   	ret    

f010759c <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f010759c:	55                   	push   %ebp
f010759d:	89 e5                	mov    %esp,%ebp
f010759f:	a1 5c 7b 65 f0       	mov    0xf0657b5c,%eax
f01075a4:	83 f8 02             	cmp    $0x2,%eax
f01075a7:	75 04                	jne    f01075ad <isKHeapPlacementStrategyBESTFIT+0x11>
f01075a9:	b0 01                	mov    $0x1,%al
f01075ab:	eb 02                	jmp    f01075af <isKHeapPlacementStrategyBESTFIT+0x13>
f01075ad:	b0 00                	mov    $0x0,%al
f01075af:	5d                   	pop    %ebp
f01075b0:	c3                   	ret    

f01075b1 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01075b1:	55                   	push   %ebp
f01075b2:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01075b4:	8b 45 08             	mov    0x8(%ebp),%eax
f01075b7:	8b 15 54 7b 65 f0    	mov    0xf0657b54,%edx
f01075bd:	29 d0                	sub    %edx,%eax
f01075bf:	c1 f8 03             	sar    $0x3,%eax
f01075c2:	89 c2                	mov    %eax,%edx
f01075c4:	89 d0                	mov    %edx,%eax
f01075c6:	c1 e0 02             	shl    $0x2,%eax
f01075c9:	01 d0                	add    %edx,%eax
f01075cb:	c1 e0 02             	shl    $0x2,%eax
f01075ce:	01 d0                	add    %edx,%eax
f01075d0:	c1 e0 02             	shl    $0x2,%eax
f01075d3:	01 d0                	add    %edx,%eax
f01075d5:	89 c1                	mov    %eax,%ecx
f01075d7:	c1 e1 08             	shl    $0x8,%ecx
f01075da:	01 c8                	add    %ecx,%eax
f01075dc:	89 c1                	mov    %eax,%ecx
f01075de:	c1 e1 10             	shl    $0x10,%ecx
f01075e1:	01 c8                	add    %ecx,%eax
f01075e3:	01 c0                	add    %eax,%eax
f01075e5:	01 d0                	add    %edx,%eax
}
f01075e7:	5d                   	pop    %ebp
f01075e8:	c3                   	ret    

f01075e9 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01075e9:	55                   	push   %ebp
f01075ea:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01075ec:	ff 75 08             	pushl  0x8(%ebp)
f01075ef:	e8 bd ff ff ff       	call   f01075b1 <to_frame_number>
f01075f4:	83 c4 04             	add    $0x4,%esp
f01075f7:	c1 e0 0c             	shl    $0xc,%eax
}
f01075fa:	c9                   	leave  
f01075fb:	c3                   	ret    

f01075fc <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f01075fc:	55                   	push   %ebp
f01075fd:	89 e5                	mov    %esp,%ebp
f01075ff:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0107602:	8b 45 08             	mov    0x8(%ebp),%eax
f0107605:	c1 e8 0c             	shr    $0xc,%eax
f0107608:	89 c2                	mov    %eax,%edx
f010760a:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f010760f:	39 c2                	cmp    %eax,%edx
f0107611:	72 14                	jb     f0107627 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0107613:	83 ec 04             	sub    $0x4,%esp
f0107616:	68 b8 5c 13 f0       	push   $0xf0135cb8
f010761b:	6a 55                	push   $0x55
f010761d:	68 dd 5c 13 f0       	push   $0xf0135cdd
f0107622:	e8 d4 8b ff ff       	call   f01001fb <_panic>
	return &frames_info[PPN(physical_address)];
f0107627:	8b 15 54 7b 65 f0    	mov    0xf0657b54,%edx
f010762d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107630:	c1 e8 0c             	shr    $0xc,%eax
f0107633:	89 c1                	mov    %eax,%ecx
f0107635:	89 c8                	mov    %ecx,%eax
f0107637:	01 c0                	add    %eax,%eax
f0107639:	01 c8                	add    %ecx,%eax
f010763b:	c1 e0 03             	shl    $0x3,%eax
f010763e:	01 d0                	add    %edx,%eax
}
f0107640:	c9                   	leave  
f0107641:	c3                   	ret    

f0107642 <initialize_dyn_block_system>:
//NOTE: All kernel heap allocations are multiples of PAGE_SIZE (4KB)//
//==================================================================//
//==================================================================//

void initialize_dyn_block_system()
{
f0107642:	55                   	push   %ebp
f0107643:	89 e5                	mov    %esp,%ebp
f0107645:	83 ec 18             	sub    $0x18,%esp
//TODO: [PROJECT MS2] [KERNEL HEAP] initialize_dyn_block_system
	// your code is here, remove the panic and write your code
	//kpanic_into_prompt("initialize_dyn_block_system() is not implemented yet...!!");

	//1.Initialize two lists (AllocMemBlocksList & FreeMemBlocksList) [Hint: use LIST_INIT()]
	LIST_INIT(&AllocMemBlocksList);
f0107648:	c7 05 c8 7a 65 f0 00 	movl   $0x0,0xf0657ac8
f010764f:	00 00 00 
f0107652:	c7 05 cc 7a 65 f0 00 	movl   $0x0,0xf0657acc
f0107659:	00 00 00 
f010765c:	c7 05 d4 7a 65 f0 00 	movl   $0x0,0xf0657ad4
f0107663:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f0107666:	c7 05 64 7b 65 f0 00 	movl   $0x0,0xf0657b64
f010766d:	00 00 00 
f0107670:	c7 05 68 7b 65 f0 00 	movl   $0x0,0xf0657b68
f0107677:	00 00 00 
f010767a:	c7 05 70 7b 65 f0 00 	movl   $0x0,0xf0657b70
f0107681:	00 00 00 
	uint32 arr_size = 0;
f0107684:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//DO NOTHING
#else
	 //Dynamically allocate the array of MemBlockNodes remember to:

	 //2. set MAX_MEM_BLOCK_CNT with the chosen size of the array
	 MAX_MEM_BLOCK_CNT = (KERNEL_HEAP_MAX-KERNEL_HEAP_START)/PAGE_SIZE;
f010768b:	c7 05 04 7b 65 f0 ff 	movl   $0x9fff,0xf0657b04
f0107692:	9f 00 00 

	 //3. assign starting address of MemBlockNodes array
	 MemBlockNodes  =(struct MemBlock*) KERNEL_HEAP_START;
f0107695:	c7 05 d8 7a 65 f0 00 	movl   $0xf6000000,0xf0657ad8
f010769c:	00 00 f6 

	 //4.calculate the total size of memory required for the MemBlockNodes array (size of all the Structs)
	 arr_size =  ROUNDUP(MAX_MEM_BLOCK_CNT * sizeof(struct MemBlock), PAGE_SIZE);
f010769f:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f01076a6:	a1 04 7b 65 f0       	mov    0xf0657b04,%eax
f01076ab:	c1 e0 04             	shl    $0x4,%eax
f01076ae:	89 c2                	mov    %eax,%edx
f01076b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01076b3:	01 d0                	add    %edx,%eax
f01076b5:	48                   	dec    %eax
f01076b6:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01076b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01076bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01076c1:	f7 75 f0             	divl   -0x10(%ebp)
f01076c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01076c7:	29 d0                	sub    %edx,%eax
f01076c9:	89 45 f4             	mov    %eax,-0xc(%ebp)

	 //5. allocate_chunk for this total memory size, with correct startAddress
	 allocate_chunk(ptr_page_directory, KERNEL_HEAP_START , arr_size , PERM_WRITEABLE | PERM_PRESENT);
f01076cc:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01076d1:	6a 03                	push   $0x3
f01076d3:	ff 75 f4             	pushl  -0xc(%ebp)
f01076d6:	68 00 00 00 f6       	push   $0xf6000000
f01076db:	50                   	push   %eax
f01076dc:	e8 b4 13 00 00       	call   f0108a95 <allocate_chunk>
f01076e1:	83 c4 10             	add    $0x10,%esp
	 //HINT: can use alloc_chunk(...) function
#endif
	//6.Initialize AvailableMemBlocksList by filling it with the MemBlockNodes
	initialize_MemBlocksList(MAX_MEM_BLOCK_CNT);
f01076e4:	a1 04 7b 65 f0       	mov    0xf0657b04,%eax
f01076e9:	83 ec 0c             	sub    $0xc,%esp
f01076ec:	50                   	push   %eax
f01076ed:	e8 02 a1 02 00       	call   f01317f4 <initialize_MemBlocksList>
f01076f2:	83 c4 10             	add    $0x10,%esp
	//7. Take a block from the AvailableMemBlocksList and fill its size with all of the heap size (without size allocated for the array) and think what should the start address be?
	struct MemBlock * NewBlock = LIST_FIRST(&AvailableMemBlocksList);
f01076f5:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f01076fa:	89 45 e8             	mov    %eax,-0x18(%ebp)
	NewBlock->sva = KERNEL_HEAP_START + arr_size;
f01076fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107700:	8d 90 00 00 00 f6    	lea    -0xa000000(%eax),%edx
f0107706:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107709:	89 50 08             	mov    %edx,0x8(%eax)
	NewBlock->size = (KERNEL_HEAP_MAX-KERNEL_HEAP_START) - arr_size;
f010770c:	b8 00 f0 ff 09       	mov    $0x9fff000,%eax
f0107711:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0107714:	89 c2                	mov    %eax,%edx
f0107716:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107719:	89 50 0c             	mov    %edx,0xc(%eax)
	LIST_REMOVE(&AvailableMemBlocksList,NewBlock);
f010771c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0107720:	75 14                	jne    f0107736 <initialize_dyn_block_system+0xf4>
f0107722:	83 ec 04             	sub    $0x4,%esp
f0107725:	68 f7 5c 13 f0       	push   $0xf0135cf7
f010772a:	6a 30                	push   $0x30
f010772c:	68 15 5d 13 f0       	push   $0xf0135d15
f0107731:	e8 c5 8a ff ff       	call   f01001fb <_panic>
f0107736:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107739:	8b 00                	mov    (%eax),%eax
f010773b:	85 c0                	test   %eax,%eax
f010773d:	74 10                	je     f010774f <initialize_dyn_block_system+0x10d>
f010773f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107742:	8b 00                	mov    (%eax),%eax
f0107744:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107747:	8b 52 04             	mov    0x4(%edx),%edx
f010774a:	89 50 04             	mov    %edx,0x4(%eax)
f010774d:	eb 0b                	jmp    f010775a <initialize_dyn_block_system+0x118>
f010774f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107752:	8b 40 04             	mov    0x4(%eax),%eax
f0107755:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f010775a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010775d:	8b 40 04             	mov    0x4(%eax),%eax
f0107760:	85 c0                	test   %eax,%eax
f0107762:	74 0f                	je     f0107773 <initialize_dyn_block_system+0x131>
f0107764:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107767:	8b 40 04             	mov    0x4(%eax),%eax
f010776a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010776d:	8b 12                	mov    (%edx),%edx
f010776f:	89 10                	mov    %edx,(%eax)
f0107771:	eb 0a                	jmp    f010777d <initialize_dyn_block_system+0x13b>
f0107773:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107776:	8b 00                	mov    (%eax),%eax
f0107778:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f010777d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107780:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0107786:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107789:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107790:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0107795:	48                   	dec    %eax
f0107796:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
	//8. Insert a new MemBlock with the remaining heap size into the FreeMemBlocksList
	LIST_INSERT_HEAD(&FreeMemBlocksList, NewBlock);
f010779b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f010779f:	75 14                	jne    f01077b5 <initialize_dyn_block_system+0x173>
f01077a1:	83 ec 04             	sub    $0x4,%esp
f01077a4:	68 28 5d 13 f0       	push   $0xf0135d28
f01077a9:	6a 32                	push   $0x32
f01077ab:	68 15 5d 13 f0       	push   $0xf0135d15
f01077b0:	e8 46 8a ff ff       	call   f01001fb <_panic>
f01077b5:	8b 15 64 7b 65 f0    	mov    0xf0657b64,%edx
f01077bb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077be:	89 10                	mov    %edx,(%eax)
f01077c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077c3:	8b 00                	mov    (%eax),%eax
f01077c5:	85 c0                	test   %eax,%eax
f01077c7:	74 0d                	je     f01077d6 <initialize_dyn_block_system+0x194>
f01077c9:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f01077ce:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01077d1:	89 50 04             	mov    %edx,0x4(%eax)
f01077d4:	eb 08                	jmp    f01077de <initialize_dyn_block_system+0x19c>
f01077d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077d9:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f01077de:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077e1:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f01077e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077e9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01077f0:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f01077f5:	40                   	inc    %eax
f01077f6:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70

}
f01077fb:	90                   	nop
f01077fc:	c9                   	leave  
f01077fd:	c3                   	ret    

f01077fe <kmalloc>:

void* kmalloc(unsigned int size)
{
f01077fe:	55                   	push   %ebp
f01077ff:	89 e5                	mov    %esp,%ebp
f0107801:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kmalloc
	// your code is here, remove the panic and write your code
	//kpanic_into_prompt("kmalloc() is not implemented yet...!!");
	uint32 allocate_size=ROUNDUP(size,PAGE_SIZE);
f0107804:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f010780b:	8b 55 08             	mov    0x8(%ebp),%edx
f010780e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107811:	01 d0                	add    %edx,%eax
f0107813:	48                   	dec    %eax
f0107814:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107817:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010781a:	ba 00 00 00 00       	mov    $0x0,%edx
f010781f:	f7 75 f0             	divl   -0x10(%ebp)
f0107822:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107825:	29 d0                	sub    %edx,%eax
f0107827:	89 45 e8             	mov    %eax,-0x18(%ebp)
	struct MemBlock * mem_block;

	if(isKHeapPlacementStrategyFIRSTFIT())
f010782a:	e8 58 fd ff ff       	call   f0107587 <isKHeapPlacementStrategyFIRSTFIT>
f010782f:	84 c0                	test   %al,%al
f0107831:	74 13                	je     f0107846 <kmalloc+0x48>
		mem_block = alloc_block_FF(allocate_size);
f0107833:	83 ec 0c             	sub    $0xc,%esp
f0107836:	ff 75 e8             	pushl  -0x18(%ebp)
f0107839:	e8 78 a3 02 00       	call   f0131bb6 <alloc_block_FF>
f010783e:	83 c4 10             	add    $0x10,%esp
f0107841:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107844:	eb 2d                	jmp    f0107873 <kmalloc+0x75>
	else if (isKHeapPlacementStrategyBESTFIT())
f0107846:	e8 51 fd ff ff       	call   f010759c <isKHeapPlacementStrategyBESTFIT>
f010784b:	84 c0                	test   %al,%al
f010784d:	74 13                	je     f0107862 <kmalloc+0x64>
		mem_block = alloc_block_BF(allocate_size);
f010784f:	83 ec 0c             	sub    $0xc,%esp
f0107852:	ff 75 e8             	pushl  -0x18(%ebp)
f0107855:	e8 29 a5 02 00       	call   f0131d83 <alloc_block_BF>
f010785a:	83 c4 10             	add    $0x10,%esp
f010785d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107860:	eb 11                	jmp    f0107873 <kmalloc+0x75>
	else
		mem_block = alloc_block_NF(allocate_size);
f0107862:	83 ec 0c             	sub    $0xc,%esp
f0107865:	ff 75 e8             	pushl  -0x18(%ebp)
f0107868:	e8 27 a7 02 00       	call   f0131f94 <alloc_block_NF>
f010786d:	83 c4 10             	add    $0x10,%esp
f0107870:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if (mem_block != NULL )
f0107873:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107877:	74 40                	je     f01078b9 <kmalloc+0xbb>
	{
		int result = allocate_chunk(ptr_page_directory,mem_block->sva,allocate_size,PERM_WRITEABLE| PERM_PRESENT);
f0107879:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010787c:	8b 50 08             	mov    0x8(%eax),%edx
f010787f:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0107884:	6a 03                	push   $0x3
f0107886:	ff 75 e8             	pushl  -0x18(%ebp)
f0107889:	52                   	push   %edx
f010788a:	50                   	push   %eax
f010788b:	e8 05 12 00 00       	call   f0108a95 <allocate_chunk>
f0107890:	83 c4 10             	add    $0x10,%esp
f0107893:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (result == 0)
f0107896:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010789a:	75 16                	jne    f01078b2 <kmalloc+0xb4>
		{
			//LIST_INSERT_HEAD(&AllocMemBlocksList, mem_block);
			insert_sorted_allocList(mem_block);
f010789c:	83 ec 0c             	sub    $0xc,%esp
f010789f:	ff 75 f4             	pushl  -0xc(%ebp)
f01078a2:	e8 82 a0 02 00       	call   f0131929 <insert_sorted_allocList>
f01078a7:	83 c4 10             	add    $0x10,%esp
			return (uint32 *) mem_block->sva;
f01078aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01078ad:	8b 40 08             	mov    0x8(%eax),%eax
f01078b0:	eb 0c                	jmp    f01078be <kmalloc+0xc0>
		}
		else
			return 	NULL;
f01078b2:	b8 00 00 00 00       	mov    $0x0,%eax
f01078b7:	eb 05                	jmp    f01078be <kmalloc+0xc0>
	}
	return NULL;
f01078b9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01078be:	c9                   	leave  
f01078bf:	c3                   	ret    

f01078c0 <kfree>:
void kfree(void* virtual_address)
{
f01078c0:	55                   	push   %ebp
f01078c1:	89 e5                	mov    %esp,%ebp
f01078c3:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kfree
	// Write your code here, remove the panic and write your code
	//panic("kfree() is not implemented yet...!!");
	struct MemBlock * mem_block = find_block(&AllocMemBlocksList,(uint32)virtual_address);
f01078c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01078c9:	83 ec 08             	sub    $0x8,%esp
f01078cc:	50                   	push   %eax
f01078cd:	68 c8 7a 65 f0       	push   $0xf0657ac8
f01078d2:	e8 fa 9f 02 00       	call   f01318d1 <find_block>
f01078d7:	83 c4 10             	add    $0x10,%esp
f01078da:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(mem_block != NULL)
f01078dd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01078e1:	0f 84 fd 00 00 00    	je     f01079e4 <kfree+0x124>
	{
		LIST_REMOVE(&AllocMemBlocksList,mem_block);
f01078e7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01078eb:	75 14                	jne    f0107901 <kfree+0x41>
f01078ed:	83 ec 04             	sub    $0x4,%esp
f01078f0:	68 f7 5c 13 f0       	push   $0xf0135cf7
f01078f5:	6a 5b                	push   $0x5b
f01078f7:	68 15 5d 13 f0       	push   $0xf0135d15
f01078fc:	e8 fa 88 ff ff       	call   f01001fb <_panic>
f0107901:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107904:	8b 00                	mov    (%eax),%eax
f0107906:	85 c0                	test   %eax,%eax
f0107908:	74 10                	je     f010791a <kfree+0x5a>
f010790a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010790d:	8b 00                	mov    (%eax),%eax
f010790f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107912:	8b 52 04             	mov    0x4(%edx),%edx
f0107915:	89 50 04             	mov    %edx,0x4(%eax)
f0107918:	eb 0b                	jmp    f0107925 <kfree+0x65>
f010791a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010791d:	8b 40 04             	mov    0x4(%eax),%eax
f0107920:	a3 cc 7a 65 f0       	mov    %eax,0xf0657acc
f0107925:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107928:	8b 40 04             	mov    0x4(%eax),%eax
f010792b:	85 c0                	test   %eax,%eax
f010792d:	74 0f                	je     f010793e <kfree+0x7e>
f010792f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107932:	8b 40 04             	mov    0x4(%eax),%eax
f0107935:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107938:	8b 12                	mov    (%edx),%edx
f010793a:	89 10                	mov    %edx,(%eax)
f010793c:	eb 0a                	jmp    f0107948 <kfree+0x88>
f010793e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107941:	8b 00                	mov    (%eax),%eax
f0107943:	a3 c8 7a 65 f0       	mov    %eax,0xf0657ac8
f0107948:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010794b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0107951:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107954:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010795b:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f0107960:	48                   	dec    %eax
f0107961:	a3 d4 7a 65 f0       	mov    %eax,0xf0657ad4
		uint32 start = ROUNDDOWN(mem_block->sva,PAGE_SIZE);
f0107966:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107969:	8b 40 08             	mov    0x8(%eax),%eax
f010796c:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010796f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107972:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107977:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32 end = ROUNDUP(mem_block->sva+mem_block->size,PAGE_SIZE);
f010797a:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0107981:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107984:	8b 50 08             	mov    0x8(%eax),%edx
f0107987:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010798a:	8b 40 0c             	mov    0xc(%eax),%eax
f010798d:	01 c2                	add    %eax,%edx
f010798f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107992:	01 d0                	add    %edx,%eax
f0107994:	48                   	dec    %eax
f0107995:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0107998:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010799b:	ba 00 00 00 00       	mov    $0x0,%edx
f01079a0:	f7 75 e4             	divl   -0x1c(%ebp)
f01079a3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01079a6:	29 d0                	sub    %edx,%eax
f01079a8:	89 45 dc             	mov    %eax,-0x24(%ebp)

		for(uint32 i = start ; i < end; i += PAGE_SIZE)
f01079ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01079ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01079b1:	eb 1b                	jmp    f01079ce <kfree+0x10e>
			unmap_frame(ptr_page_directory , i);
f01079b3:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01079b8:	83 ec 08             	sub    $0x8,%esp
f01079bb:	ff 75 f4             	pushl  -0xc(%ebp)
f01079be:	50                   	push   %eax
f01079bf:	e8 db f3 ff ff       	call   f0106d9f <unmap_frame>
f01079c4:	83 c4 10             	add    $0x10,%esp
	{
		LIST_REMOVE(&AllocMemBlocksList,mem_block);
		uint32 start = ROUNDDOWN(mem_block->sva,PAGE_SIZE);
		uint32 end = ROUNDUP(mem_block->sva+mem_block->size,PAGE_SIZE);

		for(uint32 i = start ; i < end; i += PAGE_SIZE)
f01079c7:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01079ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01079d1:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01079d4:	72 dd                	jb     f01079b3 <kfree+0xf3>
			unmap_frame(ptr_page_directory , i);

		insert_sorted_with_merge_freeList(mem_block);
f01079d6:	83 ec 0c             	sub    $0xc,%esp
f01079d9:	ff 75 f0             	pushl  -0x10(%ebp)
f01079dc:	e8 80 ab 02 00       	call   f0132561 <insert_sorted_with_merge_freeList>
f01079e1:	83 c4 10             	add    $0x10,%esp
	}
}
f01079e4:	90                   	nop
f01079e5:	c9                   	leave  
f01079e6:	c3                   	ret    

f01079e7 <kheap_virtual_address>:

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f01079e7:	55                   	push   %ebp
f01079e8:	89 e5                	mov    %esp,%ebp
f01079ea:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_virtual_address
	// Write your code here, remove the panic and write your code
//	panic("kheap_virtual_address() is not implemented yet...!!");

	struct FrameInfo *convert_to_va=to_frame_info(physical_address);
f01079ed:	83 ec 0c             	sub    $0xc,%esp
f01079f0:	ff 75 08             	pushl  0x8(%ebp)
f01079f3:	e8 04 fc ff ff       	call   f01075fc <to_frame_info>
f01079f8:	83 c4 10             	add    $0x10,%esp
f01079fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(convert_to_va!=NULL)
f01079fe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107a02:	74 08                	je     f0107a0c <kheap_virtual_address+0x25>
		return convert_to_va->va;
f0107a04:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107a07:	8b 40 0c             	mov    0xc(%eax),%eax
f0107a0a:	eb 05                	jmp    f0107a11 <kheap_virtual_address+0x2a>
	else
		return 0;
f0107a0c:	b8 00 00 00 00       	mov    $0x0,%eax
	//return the virtual address corresponding to given physical_address
	//refer to the project presentation and documentation for details
	//EFFICIENT IMPLEMENTATION ~O(1) IS REQUIRED ==================
}
f0107a11:	c9                   	leave  
f0107a12:	c3                   	ret    

f0107a13 <kheap_physical_address>:

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f0107a13:	55                   	push   %ebp
f0107a14:	89 e5                	mov    %esp,%ebp
f0107a16:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_physical_address
	// Write your code here, remove the panic and write your code
	//panic("kheap_physical_address() is not implemented yet...!!");
	uint32 *ptr_page=NULL;
f0107a19:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	struct FrameInfo *frame_of_the_va = get_frame_info(ptr_page_directory,virtual_address,&ptr_page);
f0107a20:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0107a25:	83 ec 04             	sub    $0x4,%esp
f0107a28:	8d 55 ec             	lea    -0x14(%ebp),%edx
f0107a2b:	52                   	push   %edx
f0107a2c:	ff 75 08             	pushl  0x8(%ebp)
f0107a2f:	50                   	push   %eax
f0107a30:	e8 fa f2 ff ff       	call   f0106d2f <get_frame_info>
f0107a35:	83 c4 10             	add    $0x10,%esp
f0107a38:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 address_physical=to_physical_address(frame_of_the_va);
f0107a3b:	83 ec 0c             	sub    $0xc,%esp
f0107a3e:	ff 75 f4             	pushl  -0xc(%ebp)
f0107a41:	e8 a3 fb ff ff       	call   f01075e9 <to_physical_address>
f0107a46:	83 c4 10             	add    $0x10,%esp
f0107a49:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(frame_of_the_va != NULL)
f0107a4c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107a50:	74 05                	je     f0107a57 <kheap_physical_address+0x44>
		return address_physical;
f0107a52:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107a55:	eb 05                	jmp    f0107a5c <kheap_physical_address+0x49>
	return 0;
f0107a57:	b8 00 00 00 00       	mov    $0x0,%eax

	//return the physical address corresponding to given virtual_address
	//refer to the project presentation and documentation for details
}
f0107a5c:	c9                   	leave  
f0107a5d:	c3                   	ret    

f0107a5e <kfreeall>:


void kfreeall()
{
f0107a5e:	55                   	push   %ebp
f0107a5f:	89 e5                	mov    %esp,%ebp
f0107a61:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107a64:	83 ec 04             	sub    $0x4,%esp
f0107a67:	68 4b 5d 13 f0       	push   $0xf0135d4b
f0107a6c:	68 8a 00 00 00       	push   $0x8a
f0107a71:	68 15 5d 13 f0       	push   $0xf0135d15
f0107a76:	e8 80 87 ff ff       	call   f01001fb <_panic>

f0107a7b <kshrink>:

}

void kshrink(uint32 newSize)
{
f0107a7b:	55                   	push   %ebp
f0107a7c:	89 e5                	mov    %esp,%ebp
f0107a7e:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107a81:	83 ec 04             	sub    $0x4,%esp
f0107a84:	68 4b 5d 13 f0       	push   $0xf0135d4b
f0107a89:	68 90 00 00 00       	push   $0x90
f0107a8e:	68 15 5d 13 f0       	push   $0xf0135d15
f0107a93:	e8 63 87 ff ff       	call   f01001fb <_panic>

f0107a98 <kexpand>:
}

void kexpand(uint32 newSize)
{
f0107a98:	55                   	push   %ebp
f0107a99:	89 e5                	mov    %esp,%ebp
f0107a9b:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107a9e:	83 ec 04             	sub    $0x4,%esp
f0107aa1:	68 4b 5d 13 f0       	push   $0xf0135d4b
f0107aa6:	68 95 00 00 00       	push   $0x95
f0107aab:	68 15 5d 13 f0       	push   $0xf0135d15
f0107ab0:	e8 46 87 ff ff       	call   f01001fb <_panic>

f0107ab5 <krealloc>:

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
f0107ab5:	55                   	push   %ebp
f0107ab6:	89 e5                	mov    %esp,%ebp
f0107ab8:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [KERNEL HEAP] krealloc
	// Write your code here, remove the panic and write your code
	panic("krealloc() is not implemented yet...!!");
f0107abb:	83 ec 04             	sub    $0x4,%esp
f0107abe:	68 5c 5d 13 f0       	push   $0xf0135d5c
f0107ac3:	68 ac 00 00 00       	push   $0xac
f0107ac8:	68 15 5d 13 f0       	push   $0xf0135d15
f0107acd:	e8 29 87 ff ff       	call   f01001fb <_panic>

f0107ad2 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0107ad2:	55                   	push   %ebp
f0107ad3:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0107ad5:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ad8:	8b 15 54 7b 65 f0    	mov    0xf0657b54,%edx
f0107ade:	29 d0                	sub    %edx,%eax
f0107ae0:	c1 f8 03             	sar    $0x3,%eax
f0107ae3:	89 c2                	mov    %eax,%edx
f0107ae5:	89 d0                	mov    %edx,%eax
f0107ae7:	c1 e0 02             	shl    $0x2,%eax
f0107aea:	01 d0                	add    %edx,%eax
f0107aec:	c1 e0 02             	shl    $0x2,%eax
f0107aef:	01 d0                	add    %edx,%eax
f0107af1:	c1 e0 02             	shl    $0x2,%eax
f0107af4:	01 d0                	add    %edx,%eax
f0107af6:	89 c1                	mov    %eax,%ecx
f0107af8:	c1 e1 08             	shl    $0x8,%ecx
f0107afb:	01 c8                	add    %ecx,%eax
f0107afd:	89 c1                	mov    %eax,%ecx
f0107aff:	c1 e1 10             	shl    $0x10,%ecx
f0107b02:	01 c8                	add    %ecx,%eax
f0107b04:	01 c0                	add    %eax,%eax
f0107b06:	01 d0                	add    %edx,%eax
}
f0107b08:	5d                   	pop    %ebp
f0107b09:	c3                   	ret    

f0107b0a <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107b0a:	55                   	push   %ebp
f0107b0b:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107b0d:	ff 75 08             	pushl  0x8(%ebp)
f0107b10:	e8 bd ff ff ff       	call   f0107ad2 <to_frame_number>
f0107b15:	83 c4 04             	add    $0x4,%esp
f0107b18:	c1 e0 0c             	shl    $0xc,%eax
}
f0107b1b:	c9                   	leave  
f0107b1c:	c3                   	ret    

f0107b1d <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f0107b1d:	55                   	push   %ebp
f0107b1e:	89 e5                	mov    %esp,%ebp
f0107b20:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_set_page_permissions
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107b23:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107b2a:	83 ec 04             	sub    $0x4,%esp
f0107b2d:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0107b30:	50                   	push   %eax
f0107b31:	ff 75 0c             	pushl  0xc(%ebp)
f0107b34:	ff 75 08             	pushl  0x8(%ebp)
f0107b37:	e8 9e ee ff ff       	call   f01069da <get_page_table>
f0107b3c:	83 c4 10             	add    $0x10,%esp

	if (page_table_point!=NULL)
f0107b3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b42:	85 c0                	test   %eax,%eax
f0107b44:	74 75                	je     f0107bbb <pt_set_page_permissions+0x9e>
	{
		page_table_point[PTX(virtual_address)] &= ~(permissions_to_clear);
f0107b46:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b49:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107b4c:	c1 ea 0c             	shr    $0xc,%edx
f0107b4f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107b55:	c1 e2 02             	shl    $0x2,%edx
f0107b58:	01 d0                	add    %edx,%eax
f0107b5a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107b5d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107b60:	c1 e9 0c             	shr    $0xc,%ecx
f0107b63:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107b69:	c1 e1 02             	shl    $0x2,%ecx
f0107b6c:	01 ca                	add    %ecx,%edx
f0107b6e:	8b 12                	mov    (%edx),%edx
f0107b70:	8b 4d 14             	mov    0x14(%ebp),%ecx
f0107b73:	f7 d1                	not    %ecx
f0107b75:	21 ca                	and    %ecx,%edx
f0107b77:	89 10                	mov    %edx,(%eax)
		page_table_point[PTX(virtual_address)] |= permissions_to_set;
f0107b79:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b7c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107b7f:	c1 ea 0c             	shr    $0xc,%edx
f0107b82:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107b88:	c1 e2 02             	shl    $0x2,%edx
f0107b8b:	01 c2                	add    %eax,%edx
f0107b8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b90:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107b93:	c1 e9 0c             	shr    $0xc,%ecx
f0107b96:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107b9c:	c1 e1 02             	shl    $0x2,%ecx
f0107b9f:	01 c8                	add    %ecx,%eax
f0107ba1:	8b 00                	mov    (%eax),%eax
f0107ba3:	0b 45 10             	or     0x10(%ebp),%eax
f0107ba6:	89 02                	mov    %eax,(%edx)
		tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107ba8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107bab:	83 ec 08             	sub    $0x8,%esp
f0107bae:	50                   	push   %eax
f0107baf:	6a 00                	push   $0x0
f0107bb1:	e8 81 e8 ff ff       	call   f0106437 <tlb_invalidate>
f0107bb6:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		panic("Page Table doesn't exist...!");
	}
}
f0107bb9:	eb 14                	jmp    f0107bcf <pt_set_page_permissions+0xb2>
		page_table_point[PTX(virtual_address)] |= permissions_to_set;
		tlb_invalidate((void *)NULL, (void *)virtual_address);
	}
	else
	{
		panic("Page Table doesn't exist...!");
f0107bbb:	83 ec 04             	sub    $0x4,%esp
f0107bbe:	68 83 5d 13 f0       	push   $0xf0135d83
f0107bc3:	6a 19                	push   $0x19
f0107bc5:	68 a0 5d 13 f0       	push   $0xf0135da0
f0107bca:	e8 2c 86 ff ff       	call   f01001fb <_panic>
	}
}
f0107bcf:	c9                   	leave  
f0107bd0:	c3                   	ret    

f0107bd1 <pt_get_page_permissions>:

inline int pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f0107bd1:	55                   	push   %ebp
f0107bd2:	89 e5                	mov    %esp,%ebp
f0107bd4:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_get_page_permissions
	// Write your code here, remove the panic and write your code

	uint32* page_table_point=NULL;
f0107bd7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 entry_of_page_table;
	uint32 Permissions_of_entry;
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107bde:	83 ec 04             	sub    $0x4,%esp
f0107be1:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107be4:	50                   	push   %eax
f0107be5:	ff 75 0c             	pushl  0xc(%ebp)
f0107be8:	ff 75 08             	pushl  0x8(%ebp)
f0107beb:	e8 ea ed ff ff       	call   f01069da <get_page_table>
f0107bf0:	83 c4 10             	add    $0x10,%esp
	if(page_table_point!=NULL)
f0107bf3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107bf6:	85 c0                	test   %eax,%eax
f0107bf8:	74 2b                	je     f0107c25 <pt_get_page_permissions+0x54>
	{
		entry_of_page_table=page_table_point[PTX(virtual_address)];
f0107bfa:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107bfd:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107c00:	c1 ea 0c             	shr    $0xc,%edx
f0107c03:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107c09:	c1 e2 02             	shl    $0x2,%edx
f0107c0c:	01 d0                	add    %edx,%eax
f0107c0e:	8b 00                	mov    (%eax),%eax
f0107c10:	89 45 f4             	mov    %eax,-0xc(%ebp)
		Permissions_of_entry=entry_of_page_table&=0x00000FFF;
f0107c13:	81 65 f4 ff 0f 00 00 	andl   $0xfff,-0xc(%ebp)
f0107c1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c1d:	89 45 f0             	mov    %eax,-0x10(%ebp)


		return Permissions_of_entry;
f0107c20:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107c23:	eb 05                	jmp    f0107c2a <pt_get_page_permissions+0x59>
	}

	else
	{
		return -1;
f0107c25:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
}
f0107c2a:	c9                   	leave  
f0107c2b:	c3                   	ret    

f0107c2c <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f0107c2c:	55                   	push   %ebp
f0107c2d:	89 e5                	mov    %esp,%ebp
f0107c2f:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_clear_page_table_entry
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107c32:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107c39:	83 ec 04             	sub    $0x4,%esp
f0107c3c:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0107c3f:	50                   	push   %eax
f0107c40:	ff 75 0c             	pushl  0xc(%ebp)
f0107c43:	ff 75 08             	pushl  0x8(%ebp)
f0107c46:	e8 8f ed ff ff       	call   f01069da <get_page_table>
f0107c4b:	83 c4 10             	add    $0x10,%esp
	if (page_table_point!=NULL)
f0107c4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c51:	85 c0                	test   %eax,%eax
f0107c53:	74 2d                	je     f0107c82 <pt_clear_page_table_entry+0x56>
	{
		page_table_point[PTX(virtual_address)] = 0;
f0107c55:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c58:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107c5b:	c1 ea 0c             	shr    $0xc,%edx
f0107c5e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107c64:	c1 e2 02             	shl    $0x2,%edx
f0107c67:	01 d0                	add    %edx,%eax
f0107c69:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107c6f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107c72:	83 ec 08             	sub    $0x8,%esp
f0107c75:	50                   	push   %eax
f0107c76:	6a 00                	push   $0x0
f0107c78:	e8 ba e7 ff ff       	call   f0106437 <tlb_invalidate>
f0107c7d:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		panic("Page Table doesn't exist...!");
	}
}
f0107c80:	eb 14                	jmp    f0107c96 <pt_clear_page_table_entry+0x6a>
		page_table_point[PTX(virtual_address)] = 0;
		tlb_invalidate((void *)NULL, (void *)virtual_address);
	}
	else
	{
		panic("Page Table doesn't exist...!");
f0107c82:	83 ec 04             	sub    $0x4,%esp
f0107c85:	68 83 5d 13 f0       	push   $0xf0135d83
f0107c8a:	6a 42                	push   $0x42
f0107c8c:	68 a0 5d 13 f0       	push   $0xf0135da0
f0107c91:	e8 65 85 ff ff       	call   f01001fb <_panic>
	}
}
f0107c96:	c9                   	leave  
f0107c97:	c3                   	ret    

f0107c98 <virtual_to_physical>:

/***********************************************************************************************/

/*[2.2] ADDRESS CONVERTION*/
inline int virtual_to_physical(uint32* page_directory, uint32 virtual_address)
{
f0107c98:	55                   	push   %ebp
f0107c99:	89 e5                	mov    %esp,%ebp
f0107c9b:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] virtual_to_physical
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107c9e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107ca5:	83 ec 04             	sub    $0x4,%esp
f0107ca8:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0107cab:	50                   	push   %eax
f0107cac:	ff 75 0c             	pushl  0xc(%ebp)
f0107caf:	ff 75 08             	pushl  0x8(%ebp)
f0107cb2:	e8 23 ed ff ff       	call   f01069da <get_page_table>
f0107cb7:	83 c4 10             	add    $0x10,%esp

	if(page_table_point != NULL)
f0107cba:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107cbd:	85 c0                	test   %eax,%eax
f0107cbf:	74 28                	je     f0107ce9 <virtual_to_physical+0x51>
	{
		struct FrameInfo * frame_info = get_frame_info(page_directory,virtual_address,&page_table_point);
f0107cc1:	83 ec 04             	sub    $0x4,%esp
f0107cc4:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0107cc7:	50                   	push   %eax
f0107cc8:	ff 75 0c             	pushl  0xc(%ebp)
f0107ccb:	ff 75 08             	pushl  0x8(%ebp)
f0107cce:	e8 5c f0 ff ff       	call   f0106d2f <get_frame_info>
f0107cd3:	83 c4 10             	add    $0x10,%esp
f0107cd6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return to_physical_address(frame_info);
f0107cd9:	83 ec 0c             	sub    $0xc,%esp
f0107cdc:	ff 75 f4             	pushl  -0xc(%ebp)
f0107cdf:	e8 26 fe ff ff       	call   f0107b0a <to_physical_address>
f0107ce4:	83 c4 10             	add    $0x10,%esp
f0107ce7:	eb 05                	jmp    f0107cee <virtual_to_physical+0x56>
	}
	return -1;
f0107ce9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
f0107cee:	c9                   	leave  
f0107cef:	c3                   	ret    

f0107cf0 <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f0107cf0:	55                   	push   %ebp
f0107cf1:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f0107cf3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107cf6:	c1 e8 16             	shr    $0x16,%eax
f0107cf9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107d00:	8b 45 08             	mov    0x8(%ebp),%eax
f0107d03:	01 d0                	add    %edx,%eax
f0107d05:	8b 00                	mov    (%eax),%eax
f0107d07:	83 e0 20             	and    $0x20,%eax
f0107d0a:	85 c0                	test   %eax,%eax
f0107d0c:	0f 95 c0             	setne  %al
f0107d0f:	0f b6 c0             	movzbl %al,%eax
}
f0107d12:	5d                   	pop    %ebp
f0107d13:	c3                   	ret    

f0107d14 <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f0107d14:	55                   	push   %ebp
f0107d15:	89 e5                	mov    %esp,%ebp
f0107d17:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f0107d1a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107d1d:	c1 e8 16             	shr    $0x16,%eax
f0107d20:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107d27:	8b 45 08             	mov    0x8(%ebp),%eax
f0107d2a:	01 d0                	add    %edx,%eax
f0107d2c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107d2f:	c1 ea 16             	shr    $0x16,%edx
f0107d32:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0107d39:	8b 55 08             	mov    0x8(%ebp),%edx
f0107d3c:	01 ca                	add    %ecx,%edx
f0107d3e:	8b 12                	mov    (%edx),%edx
f0107d40:	83 e2 df             	and    $0xffffffdf,%edx
f0107d43:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107d45:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107d48:	83 ec 08             	sub    $0x8,%esp
f0107d4b:	50                   	push   %eax
f0107d4c:	6a 00                	push   $0x0
f0107d4e:	e8 e4 e6 ff ff       	call   f0106437 <tlb_invalidate>
f0107d53:	83 c4 10             	add    $0x10,%esp
}
f0107d56:	90                   	nop
f0107d57:	c9                   	leave  
f0107d58:	c3                   	ret    

f0107d59 <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f0107d59:	55                   	push   %ebp
f0107d5a:	89 e5                	mov    %esp,%ebp
f0107d5c:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f0107d5f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107d62:	c1 e8 16             	shr    $0x16,%eax
f0107d65:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107d6c:	8b 45 08             	mov    0x8(%ebp),%eax
f0107d6f:	01 d0                	add    %edx,%eax
f0107d71:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0107d77:	0f 20 d8             	mov    %cr3,%eax
f0107d7a:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0107d7d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0107d80:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0107d83:	90                   	nop
f0107d84:	c9                   	leave  
f0107d85:	c3                   	ret    

f0107d86 <env_page_ws_get_size>:

///============================================================================================
/// Dealing with environment working set

inline uint32 env_page_ws_get_size(struct Env *e)
{
f0107d86:	55                   	push   %ebp
f0107d87:	89 e5                	mov    %esp,%ebp
f0107d89:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0107d8c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0107d93:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f0107d9a:	eb 21                	jmp    f0107dbd <env_page_ws_get_size+0x37>
f0107d9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0107d9f:	8b 48 78             	mov    0x78(%eax),%ecx
f0107da2:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0107da5:	89 d0                	mov    %edx,%eax
f0107da7:	01 c0                	add    %eax,%eax
f0107da9:	01 d0                	add    %edx,%eax
f0107dab:	c1 e0 03             	shl    $0x3,%eax
f0107dae:	01 c8                	add    %ecx,%eax
f0107db0:	8a 40 04             	mov    0x4(%eax),%al
f0107db3:	84 c0                	test   %al,%al
f0107db5:	75 03                	jne    f0107dba <env_page_ws_get_size+0x34>
f0107db7:	ff 45 f8             	incl   -0x8(%ebp)
f0107dba:	ff 45 fc             	incl   -0x4(%ebp)
f0107dbd:	8b 45 08             	mov    0x8(%ebp),%eax
f0107dc0:	8b 50 74             	mov    0x74(%eax),%edx
f0107dc3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0107dc6:	39 c2                	cmp    %eax,%edx
f0107dc8:	77 d2                	ja     f0107d9c <env_page_ws_get_size+0x16>
	return counter;
f0107dca:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0107dcd:	c9                   	leave  
f0107dce:	c3                   	ret    

f0107dcf <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0107dcf:	55                   	push   %ebp
f0107dd0:	89 e5                	mov    %esp,%ebp
f0107dd2:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0107dd5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f0107ddc:	eb 4c                	jmp    f0107e2a <env_page_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f0107dde:	8b 45 08             	mov    0x8(%ebp),%eax
f0107de1:	8b 48 78             	mov    0x78(%eax),%ecx
f0107de4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107de7:	89 d0                	mov    %edx,%eax
f0107de9:	01 c0                	add    %eax,%eax
f0107deb:	01 d0                	add    %edx,%eax
f0107ded:	c1 e0 03             	shl    $0x3,%eax
f0107df0:	01 c8                	add    %ecx,%eax
f0107df2:	8b 00                	mov    (%eax),%eax
f0107df4:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107df7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107dfa:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107dff:	89 c2                	mov    %eax,%edx
f0107e01:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107e04:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107e07:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107e0a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107e0f:	39 c2                	cmp    %eax,%edx
f0107e11:	75 14                	jne    f0107e27 <env_page_ws_invalidate+0x58>
		{
			env_page_ws_clear_entry(e, i);
f0107e13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e16:	83 ec 08             	sub    $0x8,%esp
f0107e19:	50                   	push   %eax
f0107e1a:	ff 75 08             	pushl  0x8(%ebp)
f0107e1d:	e8 b9 00 00 00       	call   f0107edb <env_page_ws_clear_entry>
f0107e22:	83 c4 10             	add    $0x10,%esp
			break;
f0107e25:	eb 10                	jmp    f0107e37 <env_page_ws_invalidate+0x68>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f0107e27:	ff 45 f4             	incl   -0xc(%ebp)
f0107e2a:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e2d:	8b 50 74             	mov    0x74(%eax),%edx
f0107e30:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e33:	39 c2                	cmp    %eax,%edx
f0107e35:	77 a7                	ja     f0107dde <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f0107e37:	90                   	nop
f0107e38:	c9                   	leave  
f0107e39:	c3                   	ret    

f0107e3a <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0107e3a:	55                   	push   %ebp
f0107e3b:	89 e5                	mov    %esp,%ebp
f0107e3d:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f0107e40:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e43:	8b 40 74             	mov    0x74(%eax),%eax
f0107e46:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107e49:	77 16                	ja     f0107e61 <env_page_ws_set_entry+0x27>
f0107e4b:	68 bc 5d 13 f0       	push   $0xf0135dbc
f0107e50:	68 f2 5d 13 f0       	push   $0xf0135df2
f0107e55:	6a 26                	push   $0x26
f0107e57:	68 08 5e 13 f0       	push   $0xf0135e08
f0107e5c:	e8 9a 83 ff ff       	call   f01001fb <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f0107e61:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0107e68:	76 16                	jbe    f0107e80 <env_page_ws_set_entry+0x46>
f0107e6a:	68 28 5e 13 f0       	push   $0xf0135e28
f0107e6f:	68 f2 5d 13 f0       	push   $0xf0135df2
f0107e74:	6a 27                	push   $0x27
f0107e76:	68 08 5e 13 f0       	push   $0xf0135e08
f0107e7b:	e8 7b 83 ff ff       	call   f01001fb <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f0107e80:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e83:	8b 48 78             	mov    0x78(%eax),%ecx
f0107e86:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107e89:	89 d0                	mov    %edx,%eax
f0107e8b:	01 c0                	add    %eax,%eax
f0107e8d:	01 d0                	add    %edx,%eax
f0107e8f:	c1 e0 03             	shl    $0x3,%eax
f0107e92:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107e95:	8b 45 10             	mov    0x10(%ebp),%eax
f0107e98:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107e9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e9e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107ea3:	89 02                	mov    %eax,(%edx)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f0107ea5:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ea8:	8b 48 78             	mov    0x78(%eax),%ecx
f0107eab:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107eae:	89 d0                	mov    %edx,%eax
f0107eb0:	01 c0                	add    %eax,%eax
f0107eb2:	01 d0                	add    %edx,%eax
f0107eb4:	c1 e0 03             	shl    $0x3,%eax
f0107eb7:	01 c8                	add    %ecx,%eax
f0107eb9:	c6 40 04 00          	movb   $0x0,0x4(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f0107ebd:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ec0:	8b 48 78             	mov    0x78(%eax),%ecx
f0107ec3:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107ec6:	89 d0                	mov    %edx,%eax
f0107ec8:	01 c0                	add    %eax,%eax
f0107eca:	01 d0                	add    %edx,%eax
f0107ecc:	c1 e0 03             	shl    $0x3,%eax
f0107ecf:	01 c8                	add    %ecx,%eax
f0107ed1:	c7 40 08 00 00 00 80 	movl   $0x80000000,0x8(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f0107ed8:	90                   	nop
}
f0107ed9:	c9                   	leave  
f0107eda:	c3                   	ret    

f0107edb <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0107edb:	55                   	push   %ebp
f0107edc:	89 e5                	mov    %esp,%ebp
f0107ede:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0107ee1:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ee4:	8b 40 74             	mov    0x74(%eax),%eax
f0107ee7:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107eea:	77 16                	ja     f0107f02 <env_page_ws_clear_entry+0x27>
f0107eec:	68 5c 5e 13 f0       	push   $0xf0135e5c
f0107ef1:	68 f2 5d 13 f0       	push   $0xf0135df2
f0107ef6:	6a 32                	push   $0x32
f0107ef8:	68 08 5e 13 f0       	push   $0xf0135e08
f0107efd:	e8 f9 82 ff ff       	call   f01001fb <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f0107f02:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f05:	8b 48 78             	mov    0x78(%eax),%ecx
f0107f08:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f0b:	89 d0                	mov    %edx,%eax
f0107f0d:	01 c0                	add    %eax,%eax
f0107f0f:	01 d0                	add    %edx,%eax
f0107f11:	c1 e0 03             	shl    $0x3,%eax
f0107f14:	01 c8                	add    %ecx,%eax
f0107f16:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f0107f1c:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f1f:	8b 48 78             	mov    0x78(%eax),%ecx
f0107f22:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f25:	89 d0                	mov    %edx,%eax
f0107f27:	01 c0                	add    %eax,%eax
f0107f29:	01 d0                	add    %edx,%eax
f0107f2b:	c1 e0 03             	shl    $0x3,%eax
f0107f2e:	01 c8                	add    %ecx,%eax
f0107f30:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f0107f34:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f37:	8b 48 78             	mov    0x78(%eax),%ecx
f0107f3a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f3d:	89 d0                	mov    %edx,%eax
f0107f3f:	01 c0                	add    %eax,%eax
f0107f41:	01 d0                	add    %edx,%eax
f0107f43:	c1 e0 03             	shl    $0x3,%eax
f0107f46:	01 c8                	add    %ecx,%eax
f0107f48:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
f0107f4f:	90                   	nop
f0107f50:	c9                   	leave  
f0107f51:	c3                   	ret    

f0107f52 <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0107f52:	55                   	push   %ebp
f0107f53:	89 e5                	mov    %esp,%ebp
f0107f55:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0107f58:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f5b:	8b 40 74             	mov    0x74(%eax),%eax
f0107f5e:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107f61:	77 16                	ja     f0107f79 <env_page_ws_get_virtual_address+0x27>
f0107f63:	68 5c 5e 13 f0       	push   $0xf0135e5c
f0107f68:	68 f2 5d 13 f0       	push   $0xf0135df2
f0107f6d:	6a 3a                	push   $0x3a
f0107f6f:	68 08 5e 13 f0       	push   $0xf0135e08
f0107f74:	e8 82 82 ff ff       	call   f01001fb <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f0107f79:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f7c:	8b 48 78             	mov    0x78(%eax),%ecx
f0107f7f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f82:	89 d0                	mov    %edx,%eax
f0107f84:	01 c0                	add    %eax,%eax
f0107f86:	01 d0                	add    %edx,%eax
f0107f88:	c1 e0 03             	shl    $0x3,%eax
f0107f8b:	01 c8                	add    %ecx,%eax
f0107f8d:	8b 00                	mov    (%eax),%eax
f0107f8f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107f92:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107f95:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0107f9a:	c9                   	leave  
f0107f9b:	c3                   	ret    

f0107f9c <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0107f9c:	55                   	push   %ebp
f0107f9d:	89 e5                	mov    %esp,%ebp
f0107f9f:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0107fa2:	8b 45 08             	mov    0x8(%ebp),%eax
f0107fa5:	8b 40 74             	mov    0x74(%eax),%eax
f0107fa8:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107fab:	77 16                	ja     f0107fc3 <env_page_ws_get_time_stamp+0x27>
f0107fad:	68 5c 5e 13 f0       	push   $0xf0135e5c
f0107fb2:	68 f2 5d 13 f0       	push   $0xf0135df2
f0107fb7:	6a 40                	push   $0x40
f0107fb9:	68 08 5e 13 f0       	push   $0xf0135e08
f0107fbe:	e8 38 82 ff ff       	call   f01001fb <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f0107fc3:	8b 45 08             	mov    0x8(%ebp),%eax
f0107fc6:	8b 48 78             	mov    0x78(%eax),%ecx
f0107fc9:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107fcc:	89 d0                	mov    %edx,%eax
f0107fce:	01 c0                	add    %eax,%eax
f0107fd0:	01 d0                	add    %edx,%eax
f0107fd2:	c1 e0 03             	shl    $0x3,%eax
f0107fd5:	01 c8                	add    %ecx,%eax
f0107fd7:	8b 40 08             	mov    0x8(%eax),%eax
}
f0107fda:	c9                   	leave  
f0107fdb:	c3                   	ret    

f0107fdc <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0107fdc:	55                   	push   %ebp
f0107fdd:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f0107fdf:	8b 45 08             	mov    0x8(%ebp),%eax
f0107fe2:	8b 48 78             	mov    0x78(%eax),%ecx
f0107fe5:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107fe8:	89 d0                	mov    %edx,%eax
f0107fea:	01 c0                	add    %eax,%eax
f0107fec:	01 d0                	add    %edx,%eax
f0107fee:	c1 e0 03             	shl    $0x3,%eax
f0107ff1:	01 c8                	add    %ecx,%eax
f0107ff3:	8a 40 04             	mov    0x4(%eax),%al
f0107ff6:	0f b6 c0             	movzbl %al,%eax
}
f0107ff9:	5d                   	pop    %ebp
f0107ffa:	c3                   	ret    

f0107ffb <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f0107ffb:	55                   	push   %ebp
f0107ffc:	89 e5                	mov    %esp,%ebp
f0107ffe:	53                   	push   %ebx
f0107fff:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108002:	83 ec 0c             	sub    $0xc,%esp
f0108005:	6a 02                	push   $0x2
f0108007:	e8 f5 5a 00 00       	call   f010db01 <isPageReplacmentAlgorithmLRU>
f010800c:	83 c4 10             	add    $0x10,%esp
f010800f:	85 c0                	test   %eax,%eax
f0108011:	0f 84 fe 00 00 00    	je     f0108115 <env_page_ws_print+0x11a>
	{
		int i = 0;
f0108017:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f010801e:	83 ec 0c             	sub    $0xc,%esp
f0108021:	68 94 5e 13 f0       	push   $0xf0135e94
f0108026:	e8 57 8c ff ff       	call   f0100c82 <cprintf>
f010802b:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f010802e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108031:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f0108037:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010803a:	eb 2c                	jmp    f0108068 <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f010803c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010803f:	8b 10                	mov    (%eax),%edx
f0108041:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108044:	8d 48 01             	lea    0x1(%eax),%ecx
f0108047:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f010804a:	83 ec 04             	sub    $0x4,%esp
f010804d:	52                   	push   %edx
f010804e:	50                   	push   %eax
f010804f:	68 ae 5e 13 f0       	push   $0xf0135eae
f0108054:	e8 29 8c ff ff       	call   f0100c82 <cprintf>
f0108059:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f010805c:	8b 45 08             	mov    0x8(%ebp),%eax
f010805f:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f0108065:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108068:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010806c:	74 08                	je     f0108076 <env_page_ws_print+0x7b>
f010806e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108071:	8b 40 10             	mov    0x10(%eax),%eax
f0108074:	eb 05                	jmp    f010807b <env_page_ws_print+0x80>
f0108076:	b8 00 00 00 00       	mov    $0x0,%eax
f010807b:	8b 55 08             	mov    0x8(%ebp),%edx
f010807e:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f0108084:	8b 45 08             	mov    0x8(%ebp),%eax
f0108087:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010808d:	85 c0                	test   %eax,%eax
f010808f:	75 ab                	jne    f010803c <env_page_ws_print+0x41>
f0108091:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108095:	75 a5                	jne    f010803c <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f0108097:	83 ec 0c             	sub    $0xc,%esp
f010809a:	68 b6 5e 13 f0       	push   $0xf0135eb6
f010809f:	e8 de 8b ff ff       	call   f0100c82 <cprintf>
f01080a4:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f01080a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01080aa:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f01080b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01080b3:	eb 2c                	jmp    f01080e1 <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f01080b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01080b8:	8b 10                	mov    (%eax),%edx
f01080ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01080bd:	8d 48 01             	lea    0x1(%eax),%ecx
f01080c0:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f01080c3:	83 ec 04             	sub    $0x4,%esp
f01080c6:	52                   	push   %edx
f01080c7:	50                   	push   %eax
f01080c8:	68 ae 5e 13 f0       	push   $0xf0135eae
f01080cd:	e8 b0 8b ff ff       	call   f0100c82 <cprintf>
f01080d2:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f01080d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01080d8:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f01080de:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01080e1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01080e5:	74 08                	je     f01080ef <env_page_ws_print+0xf4>
f01080e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01080ea:	8b 40 10             	mov    0x10(%eax),%eax
f01080ed:	eb 05                	jmp    f01080f4 <env_page_ws_print+0xf9>
f01080ef:	b8 00 00 00 00       	mov    $0x0,%eax
f01080f4:	8b 55 08             	mov    0x8(%ebp),%edx
f01080f7:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f01080fd:	8b 45 08             	mov    0x8(%ebp),%eax
f0108100:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0108106:	85 c0                	test   %eax,%eax
f0108108:	75 ab                	jne    f01080b5 <env_page_ws_print+0xba>
f010810a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010810e:	75 a5                	jne    f01080b5 <env_page_ws_print+0xba>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f0108110:	e9 95 01 00 00       	jmp    f01082aa <env_page_ws_print+0x2af>
		}
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
f0108115:	83 ec 0c             	sub    $0xc,%esp
f0108118:	68 d1 5e 13 f0       	push   $0xf0135ed1
f010811d:	e8 60 8b ff ff       	call   f0100c82 <cprintf>
f0108122:	83 c4 10             	add    $0x10,%esp
		for(i=0; i< (e->page_WS_max_size); i++ )
f0108125:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010812c:	e9 6a 01 00 00       	jmp    f010829b <env_page_ws_print+0x2a0>
		{
			if (e->ptr_pageWorkingSet[i].empty)
f0108131:	8b 45 08             	mov    0x8(%ebp),%eax
f0108134:	8b 48 78             	mov    0x78(%eax),%ecx
f0108137:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010813a:	89 d0                	mov    %edx,%eax
f010813c:	01 c0                	add    %eax,%eax
f010813e:	01 d0                	add    %edx,%eax
f0108140:	c1 e0 03             	shl    $0x3,%eax
f0108143:	01 c8                	add    %ecx,%eax
f0108145:	8a 40 04             	mov    0x4(%eax),%al
f0108148:	84 c0                	test   %al,%al
f010814a:	74 43                	je     f010818f <env_page_ws_print+0x194>
			{
				cprintf("EMPTY LOCATION");
f010814c:	83 ec 0c             	sub    $0xc,%esp
f010814f:	68 db 5e 13 f0       	push   $0xf0135edb
f0108154:	e8 29 8b ff ff       	call   f0100c82 <cprintf>
f0108159:	83 c4 10             	add    $0x10,%esp
				if(i==e->page_last_WS_index )
f010815c:	8b 45 08             	mov    0x8(%ebp),%eax
f010815f:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f0108165:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108168:	75 10                	jne    f010817a <env_page_ws_print+0x17f>
				{
					cprintf("		<--");
f010816a:	83 ec 0c             	sub    $0xc,%esp
f010816d:	68 ea 5e 13 f0       	push   $0xf0135eea
f0108172:	e8 0b 8b ff ff       	call   f0100c82 <cprintf>
f0108177:	83 c4 10             	add    $0x10,%esp
				}
				cprintf("\n");
f010817a:	83 ec 0c             	sub    $0xc,%esp
f010817d:	68 f0 5e 13 f0       	push   $0xf0135ef0
f0108182:	e8 fb 8a ff ff       	call   f0100c82 <cprintf>
f0108187:	83 c4 10             	add    $0x10,%esp
				continue;
f010818a:	e9 09 01 00 00       	jmp    f0108298 <env_page_ws_print+0x29d>
			}
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f010818f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108192:	8b 48 78             	mov    0x78(%eax),%ecx
f0108195:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108198:	89 d0                	mov    %edx,%eax
f010819a:	01 c0                	add    %eax,%eax
f010819c:	01 d0                	add    %edx,%eax
f010819e:	c1 e0 03             	shl    $0x3,%eax
f01081a1:	01 c8                	add    %ecx,%eax
f01081a3:	8b 00                	mov    (%eax),%eax
f01081a5:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 time_stamp = e->ptr_pageWorkingSet[i].time_stamp;
f01081a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01081ab:	8b 48 78             	mov    0x78(%eax),%ecx
f01081ae:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01081b1:	89 d0                	mov    %edx,%eax
f01081b3:	01 c0                	add    %eax,%eax
f01081b5:	01 d0                	add    %edx,%eax
f01081b7:	c1 e0 03             	shl    $0x3,%eax
f01081ba:	01 c8                	add    %ecx,%eax
f01081bc:	8b 40 08             	mov    0x8(%eax),%eax
f01081bf:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f01081c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01081c5:	8b 40 5c             	mov    0x5c(%eax),%eax
f01081c8:	83 ec 08             	sub    $0x8,%esp
f01081cb:	ff 75 e8             	pushl  -0x18(%ebp)
f01081ce:	50                   	push   %eax
f01081cf:	e8 fd f9 ff ff       	call   f0107bd1 <pt_get_page_permissions>
f01081d4:	83 c4 10             	add    $0x10,%esp
f01081d7:	89 45 e0             	mov    %eax,-0x20(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f01081da:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01081dd:	83 e0 40             	and    $0x40,%eax
f01081e0:	85 c0                	test   %eax,%eax
f01081e2:	0f 95 c0             	setne  %al
f01081e5:	88 45 df             	mov    %al,-0x21(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f01081e8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01081eb:	83 e0 20             	and    $0x20,%eax
f01081ee:	85 c0                	test   %eax,%eax
f01081f0:	0f 95 c0             	setne  %al
f01081f3:	88 45 de             	mov    %al,-0x22(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f01081f6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01081f9:	25 00 02 00 00       	and    $0x200,%eax
f01081fe:	85 c0                	test   %eax,%eax
f0108200:	0f 95 c0             	setne  %al
f0108203:	88 45 dd             	mov    %al,-0x23(%ebp)


			cprintf("address @ %d = %x",i, e->ptr_pageWorkingSet[i].virtual_address);
f0108206:	8b 45 08             	mov    0x8(%ebp),%eax
f0108209:	8b 48 78             	mov    0x78(%eax),%ecx
f010820c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010820f:	89 d0                	mov    %edx,%eax
f0108211:	01 c0                	add    %eax,%eax
f0108213:	01 d0                	add    %edx,%eax
f0108215:	c1 e0 03             	shl    $0x3,%eax
f0108218:	01 c8                	add    %ecx,%eax
f010821a:	8b 00                	mov    (%eax),%eax
f010821c:	83 ec 04             	sub    $0x4,%esp
f010821f:	50                   	push   %eax
f0108220:	ff 75 ec             	pushl  -0x14(%ebp)
f0108223:	68 f2 5e 13 f0       	push   $0xf0135ef2
f0108228:	e8 55 8a ff ff       	call   f0100c82 <cprintf>
f010822d:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d", isUsed, isModified, isBuffered, time_stamp, e->ptr_pageWorkingSet[i].sweeps_counter) ;
f0108230:	8b 45 08             	mov    0x8(%ebp),%eax
f0108233:	8b 48 78             	mov    0x78(%eax),%ecx
f0108236:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108239:	89 d0                	mov    %edx,%eax
f010823b:	01 c0                	add    %eax,%eax
f010823d:	01 d0                	add    %edx,%eax
f010823f:	c1 e0 03             	shl    $0x3,%eax
f0108242:	01 c8                	add    %ecx,%eax
f0108244:	8b 58 0c             	mov    0xc(%eax),%ebx
f0108247:	0f be 4d dd          	movsbl -0x23(%ebp),%ecx
f010824b:	0f be 55 df          	movsbl -0x21(%ebp),%edx
f010824f:	0f be 45 de          	movsbl -0x22(%ebp),%eax
f0108253:	83 ec 08             	sub    $0x8,%esp
f0108256:	53                   	push   %ebx
f0108257:	ff 75 e4             	pushl  -0x1c(%ebp)
f010825a:	51                   	push   %ecx
f010825b:	52                   	push   %edx
f010825c:	50                   	push   %eax
f010825d:	68 04 5f 13 f0       	push   $0xf0135f04
f0108262:	e8 1b 8a ff ff       	call   f0100c82 <cprintf>
f0108267:	83 c4 20             	add    $0x20,%esp

			if(i==e->page_last_WS_index )
f010826a:	8b 45 08             	mov    0x8(%ebp),%eax
f010826d:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f0108273:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108276:	75 10                	jne    f0108288 <env_page_ws_print+0x28d>
			{
				cprintf(" <--");
f0108278:	83 ec 0c             	sub    $0xc,%esp
f010827b:	68 4b 5f 13 f0       	push   $0xf0135f4b
f0108280:	e8 fd 89 ff ff       	call   f0100c82 <cprintf>
f0108285:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0108288:	83 ec 0c             	sub    $0xc,%esp
f010828b:	68 f0 5e 13 f0       	push   $0xf0135ef0
f0108290:	e8 ed 89 ff ff       	call   f0100c82 <cprintf>
f0108295:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
		for(i=0; i< (e->page_WS_max_size); i++ )
f0108298:	ff 45 ec             	incl   -0x14(%ebp)
f010829b:	8b 45 08             	mov    0x8(%ebp),%eax
f010829e:	8b 40 74             	mov    0x74(%eax),%eax
f01082a1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01082a4:	0f 87 87 fe ff ff    	ja     f0108131 <env_page_ws_print+0x136>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f01082aa:	90                   	nop
f01082ab:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01082ae:	c9                   	leave  
f01082af:	c3                   	ret    

f01082b0 <env_table_ws_print>:

// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f01082b0:	55                   	push   %ebp
f01082b1:	89 e5                	mov    %esp,%ebp
f01082b3:	53                   	push   %ebx
f01082b4:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f01082b7:	83 ec 0c             	sub    $0xc,%esp
f01082ba:	68 50 5f 13 f0       	push   $0xf0135f50
f01082bf:	e8 be 89 ff ff       	call   f0100c82 <cprintf>
f01082c4:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f01082c7:	83 ec 0c             	sub    $0xc,%esp
f01082ca:	68 85 5f 13 f0       	push   $0xf0135f85
f01082cf:	e8 ae 89 ff ff       	call   f0100c82 <cprintf>
f01082d4:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f01082d7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01082de:	e9 10 01 00 00       	jmp    f01083f3 <env_table_ws_print+0x143>
	{
		if (e->__ptr_tws[i].empty)
f01082e3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01082e6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01082e9:	89 d0                	mov    %edx,%eax
f01082eb:	01 c0                	add    %eax,%eax
f01082ed:	01 d0                	add    %edx,%eax
f01082ef:	c1 e0 03             	shl    $0x3,%eax
f01082f2:	01 c8                	add    %ecx,%eax
f01082f4:	83 e8 80             	sub    $0xffffff80,%eax
f01082f7:	8a 00                	mov    (%eax),%al
f01082f9:	84 c0                	test   %al,%al
f01082fb:	74 43                	je     f0108340 <env_table_ws_print+0x90>
		{
			cprintf("EMPTY LOCATION");
f01082fd:	83 ec 0c             	sub    $0xc,%esp
f0108300:	68 db 5e 13 f0       	push   $0xf0135edb
f0108305:	e8 78 89 ff ff       	call   f0100c82 <cprintf>
f010830a:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f010830d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108310:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f0108316:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108319:	75 10                	jne    f010832b <env_table_ws_print+0x7b>
			{
				cprintf("		<--");
f010831b:	83 ec 0c             	sub    $0xc,%esp
f010831e:	68 ea 5e 13 f0       	push   $0xf0135eea
f0108323:	e8 5a 89 ff ff       	call   f0100c82 <cprintf>
f0108328:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f010832b:	83 ec 0c             	sub    $0xc,%esp
f010832e:	68 f0 5e 13 f0       	push   $0xf0135ef0
f0108333:	e8 4a 89 ff ff       	call   f0100c82 <cprintf>
f0108338:	83 c4 10             	add    $0x10,%esp
			continue;
f010833b:	e9 b0 00 00 00       	jmp    f01083f0 <env_table_ws_print+0x140>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f0108340:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108343:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108346:	89 d0                	mov    %edx,%eax
f0108348:	01 c0                	add    %eax,%eax
f010834a:	01 d0                	add    %edx,%eax
f010834c:	c1 e0 03             	shl    $0x3,%eax
f010834f:	01 c8                	add    %ecx,%eax
f0108351:	83 c0 7c             	add    $0x7c,%eax
f0108354:	8b 00                	mov    (%eax),%eax
f0108356:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f0108359:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010835c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010835f:	89 d0                	mov    %edx,%eax
f0108361:	01 c0                	add    %eax,%eax
f0108363:	01 d0                	add    %edx,%eax
f0108365:	c1 e0 03             	shl    $0x3,%eax
f0108368:	01 c8                	add    %ecx,%eax
f010836a:	83 c0 7c             	add    $0x7c,%eax
f010836d:	8b 00                	mov    (%eax),%eax
f010836f:	83 ec 04             	sub    $0x4,%esp
f0108372:	50                   	push   %eax
f0108373:	ff 75 f4             	pushl  -0xc(%ebp)
f0108376:	68 90 5f 13 f0       	push   $0xf0135f90
f010837b:	e8 02 89 ff ff       	call   f0100c82 <cprintf>
f0108380:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f0108383:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108386:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108389:	89 d0                	mov    %edx,%eax
f010838b:	01 c0                	add    %eax,%eax
f010838d:	01 d0                	add    %edx,%eax
f010838f:	c1 e0 03             	shl    $0x3,%eax
f0108392:	01 c8                	add    %ecx,%eax
f0108394:	05 84 00 00 00       	add    $0x84,%eax
f0108399:	8b 18                	mov    (%eax),%ebx
f010839b:	8b 45 08             	mov    0x8(%ebp),%eax
f010839e:	8b 40 5c             	mov    0x5c(%eax),%eax
f01083a1:	83 ec 08             	sub    $0x8,%esp
f01083a4:	ff 75 f0             	pushl  -0x10(%ebp)
f01083a7:	50                   	push   %eax
f01083a8:	e8 43 f9 ff ff       	call   f0107cf0 <pd_is_table_used>
f01083ad:	83 c4 10             	add    $0x10,%esp
f01083b0:	83 ec 04             	sub    $0x4,%esp
f01083b3:	53                   	push   %ebx
f01083b4:	50                   	push   %eax
f01083b5:	68 a8 5f 13 f0       	push   $0xf0135fa8
f01083ba:	e8 c3 88 ff ff       	call   f0100c82 <cprintf>
f01083bf:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f01083c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01083c5:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f01083cb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01083ce:	75 10                	jne    f01083e0 <env_table_ws_print+0x130>
		{
			cprintf(" <--");
f01083d0:	83 ec 0c             	sub    $0xc,%esp
f01083d3:	68 4b 5f 13 f0       	push   $0xf0135f4b
f01083d8:	e8 a5 88 ff ff       	call   f0100c82 <cprintf>
f01083dd:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f01083e0:	83 ec 0c             	sub    $0xc,%esp
f01083e3:	68 f0 5e 13 f0       	push   $0xf0135ef0
f01083e8:	e8 95 88 ff ff       	call   f0100c82 <cprintf>
f01083ed:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f01083f0:	ff 45 f4             	incl   -0xc(%ebp)
f01083f3:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f01083f7:	0f 86 e6 fe ff ff    	jbe    f01082e3 <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f01083fd:	90                   	nop
f01083fe:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108401:	c9                   	leave  
f0108402:	c3                   	ret    

f0108403 <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f0108403:	55                   	push   %ebp
f0108404:	89 e5                	mov    %esp,%ebp
f0108406:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0108409:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0108410:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f0108417:	eb 20                	jmp    f0108439 <env_table_ws_get_size+0x36>
f0108419:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010841c:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010841f:	89 d0                	mov    %edx,%eax
f0108421:	01 c0                	add    %eax,%eax
f0108423:	01 d0                	add    %edx,%eax
f0108425:	c1 e0 03             	shl    $0x3,%eax
f0108428:	01 c8                	add    %ecx,%eax
f010842a:	83 e8 80             	sub    $0xffffff80,%eax
f010842d:	8a 00                	mov    (%eax),%al
f010842f:	84 c0                	test   %al,%al
f0108431:	75 03                	jne    f0108436 <env_table_ws_get_size+0x33>
f0108433:	ff 45 f8             	incl   -0x8(%ebp)
f0108436:	ff 45 fc             	incl   -0x4(%ebp)
f0108439:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f010843d:	7e da                	jle    f0108419 <env_table_ws_get_size+0x16>
	return counter;
f010843f:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0108442:	c9                   	leave  
f0108443:	c3                   	ret    

f0108444 <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0108444:	55                   	push   %ebp
f0108445:	89 e5                	mov    %esp,%ebp
f0108447:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010844a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f0108451:	eb 4c                	jmp    f010849f <env_table_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f0108453:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108456:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108459:	89 d0                	mov    %edx,%eax
f010845b:	01 c0                	add    %eax,%eax
f010845d:	01 d0                	add    %edx,%eax
f010845f:	c1 e0 03             	shl    $0x3,%eax
f0108462:	01 c8                	add    %ecx,%eax
f0108464:	83 c0 7c             	add    $0x7c,%eax
f0108467:	8b 00                	mov    (%eax),%eax
f0108469:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010846c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010846f:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108474:	89 c2                	mov    %eax,%edx
f0108476:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108479:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010847c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010847f:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108484:	39 c2                	cmp    %eax,%edx
f0108486:	75 14                	jne    f010849c <env_table_ws_invalidate+0x58>
		{
			env_table_ws_clear_entry(e, i);
f0108488:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010848b:	83 ec 08             	sub    $0x8,%esp
f010848e:	50                   	push   %eax
f010848f:	ff 75 08             	pushl  0x8(%ebp)
f0108492:	e8 b8 00 00 00       	call   f010854f <env_table_ws_clear_entry>
f0108497:	83 c4 10             	add    $0x10,%esp
			break;
f010849a:	eb 09                	jmp    f01084a5 <env_table_ws_invalidate+0x61>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f010849c:	ff 45 f4             	incl   -0xc(%ebp)
f010849f:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f01084a3:	7e ae                	jle    f0108453 <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f01084a5:	90                   	nop
f01084a6:	c9                   	leave  
f01084a7:	c3                   	ret    

f01084a8 <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f01084a8:	55                   	push   %ebp
f01084a9:	89 e5                	mov    %esp,%ebp
f01084ab:	53                   	push   %ebx
f01084ac:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01084af:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01084b3:	76 19                	jbe    f01084ce <env_table_ws_set_entry+0x26>
f01084b5:	68 cc 5f 13 f0       	push   $0xf0135fcc
f01084ba:	68 f2 5d 13 f0       	push   $0xf0135df2
f01084bf:	68 b6 00 00 00       	push   $0xb6
f01084c4:	68 08 5e 13 f0       	push   $0xf0135e08
f01084c9:	e8 2d 7d ff ff       	call   f01001fb <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f01084ce:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f01084d5:	76 19                	jbe    f01084f0 <env_table_ws_set_entry+0x48>
f01084d7:	68 28 5e 13 f0       	push   $0xf0135e28
f01084dc:	68 f2 5d 13 f0       	push   $0xf0135df2
f01084e1:	68 b7 00 00 00       	push   $0xb7
f01084e6:	68 08 5e 13 f0       	push   $0xf0135e08
f01084eb:	e8 0b 7d ff ff       	call   f01001fb <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f01084f0:	8b 45 10             	mov    0x10(%ebp),%eax
f01084f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01084f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01084f9:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f01084fe:	89 c1                	mov    %eax,%ecx
f0108500:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0108503:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108506:	89 d0                	mov    %edx,%eax
f0108508:	01 c0                	add    %eax,%eax
f010850a:	01 d0                	add    %edx,%eax
f010850c:	c1 e0 03             	shl    $0x3,%eax
f010850f:	01 d8                	add    %ebx,%eax
f0108511:	83 c0 7c             	add    $0x7c,%eax
f0108514:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f0108516:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108519:	8b 55 0c             	mov    0xc(%ebp),%edx
f010851c:	89 d0                	mov    %edx,%eax
f010851e:	01 c0                	add    %eax,%eax
f0108520:	01 d0                	add    %edx,%eax
f0108522:	c1 e0 03             	shl    $0x3,%eax
f0108525:	01 c8                	add    %ecx,%eax
f0108527:	83 e8 80             	sub    $0xffffff80,%eax
f010852a:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f010852d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108530:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108533:	89 d0                	mov    %edx,%eax
f0108535:	01 c0                	add    %eax,%eax
f0108537:	01 d0                	add    %edx,%eax
f0108539:	c1 e0 03             	shl    $0x3,%eax
f010853c:	01 c8                	add    %ecx,%eax
f010853e:	05 84 00 00 00       	add    $0x84,%eax
f0108543:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f0108549:	90                   	nop
}
f010854a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010854d:	c9                   	leave  
f010854e:	c3                   	ret    

f010854f <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f010854f:	55                   	push   %ebp
f0108550:	89 e5                	mov    %esp,%ebp
f0108552:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108555:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108559:	76 19                	jbe    f0108574 <env_table_ws_clear_entry+0x25>
f010855b:	68 cc 5f 13 f0       	push   $0xf0135fcc
f0108560:	68 f2 5d 13 f0       	push   $0xf0135df2
f0108565:	68 c2 00 00 00       	push   $0xc2
f010856a:	68 08 5e 13 f0       	push   $0xf0135e08
f010856f:	e8 87 7c ff ff       	call   f01001fb <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f0108574:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108577:	8b 55 0c             	mov    0xc(%ebp),%edx
f010857a:	89 d0                	mov    %edx,%eax
f010857c:	01 c0                	add    %eax,%eax
f010857e:	01 d0                	add    %edx,%eax
f0108580:	c1 e0 03             	shl    $0x3,%eax
f0108583:	01 c8                	add    %ecx,%eax
f0108585:	83 c0 7c             	add    $0x7c,%eax
f0108588:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f010858e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108591:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108594:	89 d0                	mov    %edx,%eax
f0108596:	01 c0                	add    %eax,%eax
f0108598:	01 d0                	add    %edx,%eax
f010859a:	c1 e0 03             	shl    $0x3,%eax
f010859d:	01 c8                	add    %ecx,%eax
f010859f:	83 e8 80             	sub    $0xffffff80,%eax
f01085a2:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f01085a5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01085a8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01085ab:	89 d0                	mov    %edx,%eax
f01085ad:	01 c0                	add    %eax,%eax
f01085af:	01 d0                	add    %edx,%eax
f01085b1:	c1 e0 03             	shl    $0x3,%eax
f01085b4:	01 c8                	add    %ecx,%eax
f01085b6:	05 84 00 00 00       	add    $0x84,%eax
f01085bb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f01085c1:	90                   	nop
f01085c2:	c9                   	leave  
f01085c3:	c3                   	ret    

f01085c4 <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f01085c4:	55                   	push   %ebp
f01085c5:	89 e5                	mov    %esp,%ebp
f01085c7:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01085ca:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01085ce:	76 19                	jbe    f01085e9 <env_table_ws_get_virtual_address+0x25>
f01085d0:	68 cc 5f 13 f0       	push   $0xf0135fcc
f01085d5:	68 f2 5d 13 f0       	push   $0xf0135df2
f01085da:	68 ca 00 00 00       	push   $0xca
f01085df:	68 08 5e 13 f0       	push   $0xf0135e08
f01085e4:	e8 12 7c ff ff       	call   f01001fb <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f01085e9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01085ec:	8b 55 0c             	mov    0xc(%ebp),%edx
f01085ef:	89 d0                	mov    %edx,%eax
f01085f1:	01 c0                	add    %eax,%eax
f01085f3:	01 d0                	add    %edx,%eax
f01085f5:	c1 e0 03             	shl    $0x3,%eax
f01085f8:	01 c8                	add    %ecx,%eax
f01085fa:	83 c0 7c             	add    $0x7c,%eax
f01085fd:	8b 00                	mov    (%eax),%eax
f01085ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108602:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108605:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f010860a:	c9                   	leave  
f010860b:	c3                   	ret    

f010860c <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f010860c:	55                   	push   %ebp
f010860d:	89 e5                	mov    %esp,%ebp
f010860f:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108612:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108616:	76 19                	jbe    f0108631 <env_table_ws_get_time_stamp+0x25>
f0108618:	68 cc 5f 13 f0       	push   $0xf0135fcc
f010861d:	68 f2 5d 13 f0       	push   $0xf0135df2
f0108622:	68 d1 00 00 00       	push   $0xd1
f0108627:	68 08 5e 13 f0       	push   $0xf0135e08
f010862c:	e8 ca 7b ff ff       	call   f01001fb <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f0108631:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108634:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108637:	89 d0                	mov    %edx,%eax
f0108639:	01 c0                	add    %eax,%eax
f010863b:	01 d0                	add    %edx,%eax
f010863d:	c1 e0 03             	shl    $0x3,%eax
f0108640:	01 c8                	add    %ecx,%eax
f0108642:	05 84 00 00 00       	add    $0x84,%eax
f0108647:	8b 00                	mov    (%eax),%eax
}
f0108649:	c9                   	leave  
f010864a:	c3                   	ret    

f010864b <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f010864b:	55                   	push   %ebp
f010864c:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f010864e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108651:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108654:	89 d0                	mov    %edx,%eax
f0108656:	01 c0                	add    %eax,%eax
f0108658:	01 d0                	add    %edx,%eax
f010865a:	c1 e0 03             	shl    $0x3,%eax
f010865d:	01 c8                	add    %ecx,%eax
f010865f:	83 e8 80             	sub    $0xffffff80,%eax
f0108662:	8a 00                	mov    (%eax),%al
f0108664:	0f b6 c0             	movzbl %al,%eax
}
f0108667:	5d                   	pop    %ebp
f0108668:	c3                   	ret    

f0108669 <cut_paste_WS>:
///=================================================================================================

// Change WS Sizes For PRIORITY  =========================================================

void cut_paste_WS(struct WorkingSetElement* newWS, int newSize, struct Env* e)
{
f0108669:	55                   	push   %ebp
f010866a:	89 e5                	mov    %esp,%ebp
f010866c:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] cut_paste_WS
	//your code is here, remove the panic and write your code
	panic("cut_paste_WS() is not implemented yet...!!");
f010866f:	83 ec 04             	sub    $0x4,%esp
f0108672:	68 00 60 13 f0       	push   $0xf0136000
f0108677:	68 e5 00 00 00       	push   $0xe5
f010867c:	68 08 5e 13 f0       	push   $0xf0135e08
f0108681:	e8 75 7b ff ff       	call   f01001fb <_panic>

f0108686 <double_WS_Size>:
}

void double_WS_Size(struct Env* e, int isOneTimeOnly)
{
f0108686:	55                   	push   %ebp
f0108687:	89 e5                	mov    %esp,%ebp
f0108689:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] double_WS_Size
	//your code is here, remove the panic and write your code
	panic("double_WS_Size() is not implemented yet...!!");
f010868c:	83 ec 04             	sub    $0x4,%esp
f010868f:	68 2c 60 13 f0       	push   $0xf013602c
f0108694:	68 ec 00 00 00       	push   $0xec
f0108699:	68 08 5e 13 f0       	push   $0xf0135e08
f010869e:	e8 58 7b ff ff       	call   f01001fb <_panic>

f01086a3 <half_WS_Size>:
}

void half_WS_Size(struct Env* e, int isImmidiate)
{
f01086a3:	55                   	push   %ebp
f01086a4:	89 e5                	mov    %esp,%ebp
f01086a6:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] half_WS_Size
	//your code is here, remove the panic and write your code
	panic("half_WS_Size() is not implemented yet...!!");
f01086a9:	83 ec 04             	sub    $0x4,%esp
f01086ac:	68 5c 60 13 f0       	push   $0xf013605c
f01086b1:	68 f3 00 00 00       	push   $0xf3
f01086b6:	68 08 5e 13 f0       	push   $0xf0135e08
f01086bb:	e8 3b 7b ff ff       	call   f01001fb <_panic>

f01086c0 <cut_paste_pages>:
//===============================
//This function should cut-paste the given number of pages from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f01086c0:	55                   	push   %ebp
f01086c1:	89 e5                	mov    %esp,%ebp
f01086c3:	83 ec 48             	sub    $0x48,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] cut_paste_pages
	// Write your code here, remove the panic and write your code
	uint32 new_dest_va = dest_va;
f01086c6:	8b 45 10             	mov    0x10(%ebp),%eax
f01086c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 new_source_va = source_va;
f01086cc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01086cf:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(dest_va%PAGE_SIZE!=0)
f01086d2:	8b 45 10             	mov    0x10(%ebp),%eax
f01086d5:	25 ff 0f 00 00       	and    $0xfff,%eax
f01086da:	85 c0                	test   %eax,%eax
f01086dc:	74 11                	je     f01086ef <cut_paste_pages+0x2f>
		new_dest_va = ROUNDDOWN(dest_va,PAGE_SIZE);
f01086de:	8b 45 10             	mov    0x10(%ebp),%eax
f01086e1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01086e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01086e7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01086ec:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(source_va%PAGE_SIZE!=0)
f01086ef:	8b 45 0c             	mov    0xc(%ebp),%eax
f01086f2:	25 ff 0f 00 00       	and    $0xfff,%eax
f01086f7:	85 c0                	test   %eax,%eax
f01086f9:	74 11                	je     f010870c <cut_paste_pages+0x4c>
		new_source_va = ROUNDDOWN(source_va,PAGE_SIZE);
f01086fb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01086fe:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108701:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108704:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108709:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 max_size = (PAGE_SIZE * num_of_pages) + new_dest_va;
f010870c:	8b 45 14             	mov    0x14(%ebp),%eax
f010870f:	c1 e0 0c             	shl    $0xc,%eax
f0108712:	89 c2                	mov    %eax,%edx
f0108714:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108717:	01 d0                	add    %edx,%eax
f0108719:	89 45 dc             	mov    %eax,-0x24(%ebp)

	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f010871c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010871f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108722:	eb 4b                	jmp    f010876f <cut_paste_pages+0xaf>
	{
		uint32 *ptr_page_table_dest = NULL;
f0108724:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
		get_page_table(page_directory,i,&ptr_page_table_dest);
f010872b:	83 ec 04             	sub    $0x4,%esp
f010872e:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108731:	50                   	push   %eax
f0108732:	ff 75 ec             	pushl  -0x14(%ebp)
f0108735:	ff 75 08             	pushl  0x8(%ebp)
f0108738:	e8 9d e2 ff ff       	call   f01069da <get_page_table>
f010873d:	83 c4 10             	add    $0x10,%esp
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);
f0108740:	83 ec 04             	sub    $0x4,%esp
f0108743:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108746:	50                   	push   %eax
f0108747:	ff 75 ec             	pushl  -0x14(%ebp)
f010874a:	ff 75 08             	pushl  0x8(%ebp)
f010874d:	e8 dd e5 ff ff       	call   f0106d2f <get_frame_info>
f0108752:	83 c4 10             	add    $0x10,%esp
f0108755:	89 45 d8             	mov    %eax,-0x28(%ebp)

		if(dest_frame!=NULL)
f0108758:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f010875c:	74 0a                	je     f0108768 <cut_paste_pages+0xa8>
			return -1;
f010875e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108763:	e9 d4 00 00 00       	jmp    f010883c <cut_paste_pages+0x17c>

	if(source_va%PAGE_SIZE!=0)
		new_source_va = ROUNDDOWN(source_va,PAGE_SIZE);
	uint32 max_size = (PAGE_SIZE * num_of_pages) + new_dest_va;

	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108768:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f010876f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108772:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0108775:	72 ad                	jb     f0108724 <cut_paste_pages+0x64>
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);

		if(dest_frame!=NULL)
			return -1;
	}
	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108777:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010877a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010877d:	e9 a9 00 00 00       	jmp    f010882b <cut_paste_pages+0x16b>
	{
		uint32 *ptr_page_table_dest = NULL;
f0108782:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
		get_page_table(page_directory,i,&ptr_page_table_dest);
f0108789:	83 ec 04             	sub    $0x4,%esp
f010878c:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010878f:	50                   	push   %eax
f0108790:	ff 75 e8             	pushl  -0x18(%ebp)
f0108793:	ff 75 08             	pushl  0x8(%ebp)
f0108796:	e8 3f e2 ff ff       	call   f01069da <get_page_table>
f010879b:	83 c4 10             	add    $0x10,%esp

		if(ptr_page_table_dest == NULL)
f010879e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01087a1:	85 c0                	test   %eax,%eax
f01087a3:	75 14                	jne    f01087b9 <cut_paste_pages+0xf9>
			ptr_page_table_dest = create_page_table(page_directory,i);
f01087a5:	83 ec 08             	sub    $0x8,%esp
f01087a8:	ff 75 e8             	pushl  -0x18(%ebp)
f01087ab:	ff 75 08             	pushl  0x8(%ebp)
f01087ae:	e8 7d e3 ff ff       	call   f0106b30 <create_page_table>
f01087b3:	83 c4 10             	add    $0x10,%esp
f01087b6:	89 45 c8             	mov    %eax,-0x38(%ebp)

		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);
f01087b9:	83 ec 04             	sub    $0x4,%esp
f01087bc:	8d 45 c8             	lea    -0x38(%ebp),%eax
f01087bf:	50                   	push   %eax
f01087c0:	ff 75 e8             	pushl  -0x18(%ebp)
f01087c3:	ff 75 08             	pushl  0x8(%ebp)
f01087c6:	e8 64 e5 ff ff       	call   f0106d2f <get_frame_info>
f01087cb:	83 c4 10             	add    $0x10,%esp
f01087ce:	89 45 c4             	mov    %eax,-0x3c(%ebp)

		int source_perm = pt_get_page_permissions(page_directory,new_source_va);
f01087d1:	83 ec 08             	sub    $0x8,%esp
f01087d4:	ff 75 f0             	pushl  -0x10(%ebp)
f01087d7:	ff 75 08             	pushl  0x8(%ebp)
f01087da:	e8 f2 f3 ff ff       	call   f0107bd1 <pt_get_page_permissions>
f01087df:	83 c4 10             	add    $0x10,%esp
f01087e2:	89 45 d4             	mov    %eax,-0x2c(%ebp)

		unmap_frame(page_directory,new_source_va);
f01087e5:	83 ec 08             	sub    $0x8,%esp
f01087e8:	ff 75 f0             	pushl  -0x10(%ebp)
f01087eb:	ff 75 08             	pushl  0x8(%ebp)
f01087ee:	e8 ac e5 ff ff       	call   f0106d9f <unmap_frame>
f01087f3:	83 c4 10             	add    $0x10,%esp
		uint32 ret = allocate_frame(&dest_frame);
f01087f6:	83 ec 0c             	sub    $0xc,%esp
f01087f9:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f01087fc:	50                   	push   %eax
f01087fd:	e8 19 e0 ff ff       	call   f010681b <allocate_frame>
f0108802:	83 c4 10             	add    $0x10,%esp
f0108805:	89 45 d0             	mov    %eax,-0x30(%ebp)
		map_frame(page_directory, dest_frame, i,source_perm);
f0108808:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010880b:	ff 75 d4             	pushl  -0x2c(%ebp)
f010880e:	ff 75 e8             	pushl  -0x18(%ebp)
f0108811:	50                   	push   %eax
f0108812:	ff 75 08             	pushl  0x8(%ebp)
f0108815:	e8 50 e4 ff ff       	call   f0106c6a <map_frame>
f010881a:	83 c4 10             	add    $0x10,%esp

		new_source_va += PAGE_SIZE;
f010881d:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);

		if(dest_frame!=NULL)
			return -1;
	}
	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108824:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
f010882b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010882e:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0108831:	0f 82 4b ff ff ff    	jb     f0108782 <cut_paste_pages+0xc2>
		uint32 ret = allocate_frame(&dest_frame);
		map_frame(page_directory, dest_frame, i,source_perm);

		new_source_va += PAGE_SIZE;
	}
	return 0;
f0108837:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010883c:	c9                   	leave  
f010883d:	c3                   	ret    

f010883e <copy_paste_chunk>:
//===============================
//This function should copy-paste the given size from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f010883e:	55                   	push   %ebp
f010883f:	89 e5                	mov    %esp,%ebp
f0108841:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] copy_paste_chunk
	// Write your code here, remove the panic and write your code
	//panic("copy_paste_chunk() is not implemented yet...!!");
	uint32 *page_table=NULL;
f0108844:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	uint32 new_dest_va = dest_va;
f010884b:	8b 45 10             	mov    0x10(%ebp),%eax
f010884e:	89 45 e0             	mov    %eax,-0x20(%ebp)
	uint32 new_source_va = source_va;
f0108851:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108854:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for(uint32 i=dest_va;i<dest_va+size ;i+=PAGE_SIZE)
f0108857:	8b 45 10             	mov    0x10(%ebp),%eax
f010885a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010885d:	e9 d1 00 00 00       	jmp    f0108933 <copy_paste_chunk+0xf5>
	{
	   get_page_table(page_directory,i,&page_table);
f0108862:	83 ec 04             	sub    $0x4,%esp
f0108865:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108868:	50                   	push   %eax
f0108869:	ff 75 f0             	pushl  -0x10(%ebp)
f010886c:	ff 75 08             	pushl  0x8(%ebp)
f010886f:	e8 66 e1 ff ff       	call   f01069da <get_page_table>
f0108874:	83 c4 10             	add    $0x10,%esp
	   if(page_table==NULL)
f0108877:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010887a:	85 c0                	test   %eax,%eax
f010887c:	75 14                	jne    f0108892 <copy_paste_chunk+0x54>
		   page_table=create_page_table(page_directory,i);
f010887e:	83 ec 08             	sub    $0x8,%esp
f0108881:	ff 75 f0             	pushl  -0x10(%ebp)
f0108884:	ff 75 08             	pushl  0x8(%ebp)
f0108887:	e8 a4 e2 ff ff       	call   f0106b30 <create_page_table>
f010888c:	83 c4 10             	add    $0x10,%esp
f010888f:	89 45 d0             	mov    %eax,-0x30(%ebp)

	   struct FrameInfo *frame_info=get_frame_info(page_directory,i,&page_table);
f0108892:	83 ec 04             	sub    $0x4,%esp
f0108895:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108898:	50                   	push   %eax
f0108899:	ff 75 f0             	pushl  -0x10(%ebp)
f010889c:	ff 75 08             	pushl  0x8(%ebp)
f010889f:	e8 8b e4 ff ff       	call   f0106d2f <get_frame_info>
f01088a4:	83 c4 10             	add    $0x10,%esp
f01088a7:	89 45 cc             	mov    %eax,-0x34(%ebp)
	   uint32 perm =pt_get_page_permissions(page_directory,i);
f01088aa:	83 ec 08             	sub    $0x8,%esp
f01088ad:	ff 75 f0             	pushl  -0x10(%ebp)
f01088b0:	ff 75 08             	pushl  0x8(%ebp)
f01088b3:	e8 19 f3 ff ff       	call   f0107bd1 <pt_get_page_permissions>
f01088b8:	83 c4 10             	add    $0x10,%esp
f01088bb:	89 45 dc             	mov    %eax,-0x24(%ebp)

	   if((frame_info != NULL) && (( perm & PERM_WRITEABLE) !=PERM_WRITEABLE))
f01088be:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01088c1:	85 c0                	test   %eax,%eax
f01088c3:	74 14                	je     f01088d9 <copy_paste_chunk+0x9b>
f01088c5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01088c8:	83 e0 02             	and    $0x2,%eax
f01088cb:	85 c0                	test   %eax,%eax
f01088cd:	75 0a                	jne    f01088d9 <copy_paste_chunk+0x9b>
			return -1;
f01088cf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01088d4:	e9 a7 00 00 00       	jmp    f0108980 <copy_paste_chunk+0x142>
	   else
	   {
		   if(frame_info == NULL)
f01088d9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01088dc:	85 c0                	test   %eax,%eax
f01088de:	75 45                	jne    f0108925 <copy_paste_chunk+0xe7>
		   {
			   uint32 perms =pt_get_page_permissions(page_directory,new_source_va);
f01088e0:	83 ec 08             	sub    $0x8,%esp
f01088e3:	ff 75 f4             	pushl  -0xc(%ebp)
f01088e6:	ff 75 08             	pushl  0x8(%ebp)
f01088e9:	e8 e3 f2 ff ff       	call   f0107bd1 <pt_get_page_permissions>
f01088ee:	83 c4 10             	add    $0x10,%esp
f01088f1:	89 45 d8             	mov    %eax,-0x28(%ebp)
			   uint32 user_perm = (perms & PERM_USER)|PERM_WRITEABLE;
f01088f4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01088f7:	83 e0 04             	and    $0x4,%eax
f01088fa:	83 c8 02             	or     $0x2,%eax
f01088fd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
			   allocate_frame(&frame_info);
f0108900:	83 ec 0c             	sub    $0xc,%esp
f0108903:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108906:	50                   	push   %eax
f0108907:	e8 0f df ff ff       	call   f010681b <allocate_frame>
f010890c:	83 c4 10             	add    $0x10,%esp
			   map_frame(page_directory,frame_info,i,user_perm);
f010890f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0108912:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108915:	52                   	push   %edx
f0108916:	ff 75 f0             	pushl  -0x10(%ebp)
f0108919:	50                   	push   %eax
f010891a:	ff 75 08             	pushl  0x8(%ebp)
f010891d:	e8 48 e3 ff ff       	call   f0106c6a <map_frame>
f0108922:	83 c4 10             	add    $0x10,%esp
		   }
	   }
	   new_source_va += PAGE_SIZE;
f0108925:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
	// Write your code here, remove the panic and write your code
	//panic("copy_paste_chunk() is not implemented yet...!!");
	uint32 *page_table=NULL;
	uint32 new_dest_va = dest_va;
	uint32 new_source_va = source_va;
	for(uint32 i=dest_va;i<dest_va+size ;i+=PAGE_SIZE)
f010892c:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0108933:	8b 55 10             	mov    0x10(%ebp),%edx
f0108936:	8b 45 14             	mov    0x14(%ebp),%eax
f0108939:	01 d0                	add    %edx,%eax
f010893b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010893e:	0f 87 1e ff ff ff    	ja     f0108862 <copy_paste_chunk+0x24>
			   map_frame(page_directory,frame_info,i,user_perm);
		   }
	   }
	   new_source_va += PAGE_SIZE;
	}
	uint32 *frame = (uint32*)dest_va;
f0108944:	8b 45 10             	mov    0x10(%ebp),%eax
f0108947:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32 *page = (uint32*)source_va;
f010894a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010894d:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for (uint32 i = source_va; i < source_va+size ;i+=4)
f0108950:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108953:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108956:	eb 16                	jmp    f010896e <copy_paste_chunk+0x130>
    {
	    *frame= *page;
f0108958:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010895b:	8b 10                	mov    (%eax),%edx
f010895d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108960:	89 10                	mov    %edx,(%eax)
	    frame++;
f0108962:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
	    page++;
f0108966:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
	   }
	   new_source_va += PAGE_SIZE;
	}
	uint32 *frame = (uint32*)dest_va;
    uint32 *page = (uint32*)source_va;
    for (uint32 i = source_va; i < source_va+size ;i+=4)
f010896a:	83 45 e4 04          	addl   $0x4,-0x1c(%ebp)
f010896e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108971:	8b 45 14             	mov    0x14(%ebp),%eax
f0108974:	01 d0                	add    %edx,%eax
f0108976:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0108979:	77 dd                	ja     f0108958 <copy_paste_chunk+0x11a>
    {
	    *frame= *page;
	    frame++;
	    page++;
    }
	return 0;
f010897b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108980:	c9                   	leave  
f0108981:	c3                   	ret    

f0108982 <share_chunk>:
// 3) SHARE RANGE IN RAM:
//===============================
//This function should share the given size from dest_va with the source_va
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f0108982:	55                   	push   %ebp
f0108983:	89 e5                	mov    %esp,%ebp
f0108985:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] share_chunk
	// Write your code here, remove the panic and write your code
	uint32 *page_table=NULL;
f0108988:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
    uint32 va_dest=ROUNDDOWN(dest_va,PAGE_SIZE);
f010898f:	8b 45 10             	mov    0x10(%ebp),%eax
f0108992:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108995:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108998:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010899d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32 max_va_des=ROUNDUP(dest_va+size,PAGE_SIZE);
f01089a0:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f01089a7:	8b 55 10             	mov    0x10(%ebp),%edx
f01089aa:	8b 45 14             	mov    0x14(%ebp),%eax
f01089ad:	01 c2                	add    %eax,%edx
f01089af:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01089b2:	01 d0                	add    %edx,%eax
f01089b4:	48                   	dec    %eax
f01089b5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01089b8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01089bb:	ba 00 00 00 00       	mov    $0x0,%edx
f01089c0:	f7 75 e8             	divl   -0x18(%ebp)
f01089c3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01089c6:	29 d0                	sub    %edx,%eax
f01089c8:	89 45 e0             	mov    %eax,-0x20(%ebp)



   for(uint32 i=va_dest;i<max_va_des ;i+=PAGE_SIZE)
f01089cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01089ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01089d1:	e9 ac 00 00 00       	jmp    f0108a82 <share_chunk+0x100>
    {
        get_page_table(page_directory,i,&page_table);
f01089d6:	83 ec 04             	sub    $0x4,%esp
f01089d9:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f01089dc:	50                   	push   %eax
f01089dd:	ff 75 f4             	pushl  -0xc(%ebp)
f01089e0:	ff 75 08             	pushl  0x8(%ebp)
f01089e3:	e8 f2 df ff ff       	call   f01069da <get_page_table>
f01089e8:	83 c4 10             	add    $0x10,%esp
        if(page_table==NULL)
f01089eb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01089ee:	85 c0                	test   %eax,%eax
f01089f0:	75 14                	jne    f0108a06 <share_chunk+0x84>
           page_table=create_page_table(page_directory,i);
f01089f2:	83 ec 08             	sub    $0x8,%esp
f01089f5:	ff 75 f4             	pushl  -0xc(%ebp)
f01089f8:	ff 75 08             	pushl  0x8(%ebp)
f01089fb:	e8 30 e1 ff ff       	call   f0106b30 <create_page_table>
f0108a00:	83 c4 10             	add    $0x10,%esp
f0108a03:	89 45 d4             	mov    %eax,-0x2c(%ebp)



      struct FrameInfo *frame_info=get_frame_info(page_directory,i,&page_table);
f0108a06:	83 ec 04             	sub    $0x4,%esp
f0108a09:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f0108a0c:	50                   	push   %eax
f0108a0d:	ff 75 f4             	pushl  -0xc(%ebp)
f0108a10:	ff 75 08             	pushl  0x8(%ebp)
f0108a13:	e8 17 e3 ff ff       	call   f0106d2f <get_frame_info>
f0108a18:	83 c4 10             	add    $0x10,%esp
f0108a1b:	89 45 dc             	mov    %eax,-0x24(%ebp)
       if (frame_info != NULL)
f0108a1e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0108a22:	74 07                	je     f0108a2b <share_chunk+0xa9>
           return -1;
f0108a24:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108a29:	eb 68                	jmp    f0108a93 <share_chunk+0x111>



       uint32 *page_table_source = NULL;
f0108a2b:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
        get_page_table(page_directory,source_va,&page_table_source);
f0108a32:	83 ec 04             	sub    $0x4,%esp
f0108a35:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108a38:	50                   	push   %eax
f0108a39:	ff 75 0c             	pushl  0xc(%ebp)
f0108a3c:	ff 75 08             	pushl  0x8(%ebp)
f0108a3f:	e8 96 df ff ff       	call   f01069da <get_page_table>
f0108a44:	83 c4 10             	add    $0x10,%esp
        struct FrameInfo *page_info=get_frame_info(page_directory,source_va,&page_table_source);
f0108a47:	83 ec 04             	sub    $0x4,%esp
f0108a4a:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108a4d:	50                   	push   %eax
f0108a4e:	ff 75 0c             	pushl  0xc(%ebp)
f0108a51:	ff 75 08             	pushl  0x8(%ebp)
f0108a54:	e8 d6 e2 ff ff       	call   f0106d2f <get_frame_info>
f0108a59:	83 c4 10             	add    $0x10,%esp
f0108a5c:	89 45 d8             	mov    %eax,-0x28(%ebp)



       map_frame(page_directory,page_info,i,perms);
f0108a5f:	8b 45 18             	mov    0x18(%ebp),%eax
f0108a62:	50                   	push   %eax
f0108a63:	ff 75 f4             	pushl  -0xc(%ebp)
f0108a66:	ff 75 d8             	pushl  -0x28(%ebp)
f0108a69:	ff 75 08             	pushl  0x8(%ebp)
f0108a6c:	e8 f9 e1 ff ff       	call   f0106c6a <map_frame>
f0108a71:	83 c4 10             	add    $0x10,%esp



       source_va += PAGE_SIZE;
f0108a74:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    uint32 va_dest=ROUNDDOWN(dest_va,PAGE_SIZE);
    uint32 max_va_des=ROUNDUP(dest_va+size,PAGE_SIZE);



   for(uint32 i=va_dest;i<max_va_des ;i+=PAGE_SIZE)
f0108a7b:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108a82:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108a85:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0108a88:	0f 82 48 ff ff ff    	jb     f01089d6 <share_chunk+0x54>



       source_va += PAGE_SIZE;
    }
    return 0;
f0108a8e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108a93:	c9                   	leave  
f0108a94:	c3                   	ret    

f0108a95 <allocate_chunk>:
// 4) ALLOCATE CHUNK IN RAM:
//===============================
//This function should allocate in RAM the given range [va, va+size)
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f0108a95:	55                   	push   %ebp
f0108a96:	89 e5                	mov    %esp,%ebp
f0108a98:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] allocate_chunk
	// Write your code here, remove the panic and write your code
	uint32 virtual_address=0;
f0108a9b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 range_page=va+size;
f0108aa2:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108aa5:	8b 45 10             	mov    0x10(%ebp),%eax
f0108aa8:	01 d0                	add    %edx,%eax
f0108aaa:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 virtual_range=0;
f0108aad:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	struct FrameInfo *sb_chunck= NULL ;
f0108ab4:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	uint32 *page_table_point=NULL;
f0108abb:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
    uint32 result=0;
f0108ac2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	virtual_address=ROUNDDOWN(va,PAGE_SIZE);
f0108ac9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108acc:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108acf:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108ad2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108ad7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	virtual_range=ROUNDUP(range_page,PAGE_SIZE);
f0108ada:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0108ae1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108ae4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108ae7:	01 d0                	add    %edx,%eax
f0108ae9:	48                   	dec    %eax
f0108aea:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0108aed:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108af0:	ba 00 00 00 00       	mov    $0x0,%edx
f0108af5:	f7 75 dc             	divl   -0x24(%ebp)
f0108af8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108afb:	29 d0                	sub    %edx,%eax
f0108afd:	89 45 e8             	mov    %eax,-0x18(%ebp)
	uint32 new_virtual_address;
	for(uint32 count=virtual_address;count<virtual_range;count+=PAGE_SIZE)
f0108b00:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108b03:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108b06:	e9 9d 00 00 00       	jmp    f0108ba8 <allocate_chunk+0x113>
	{
		new_virtual_address=count;
f0108b0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108b0e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		get_page_table(page_directory,new_virtual_address,&page_table_point);
f0108b11:	83 ec 04             	sub    $0x4,%esp
f0108b14:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108b17:	50                   	push   %eax
f0108b18:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108b1b:	ff 75 08             	pushl  0x8(%ebp)
f0108b1e:	e8 b7 de ff ff       	call   f01069da <get_page_table>
f0108b23:	83 c4 10             	add    $0x10,%esp
		if(page_table_point==NULL)
f0108b26:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108b29:	85 c0                	test   %eax,%eax
f0108b2b:	75 14                	jne    f0108b41 <allocate_chunk+0xac>
		{
		   page_table_point=create_page_table(page_directory,new_virtual_address);
f0108b2d:	83 ec 08             	sub    $0x8,%esp
f0108b30:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108b33:	ff 75 08             	pushl  0x8(%ebp)
f0108b36:	e8 f5 df ff ff       	call   f0106b30 <create_page_table>
f0108b3b:	83 c4 10             	add    $0x10,%esp
f0108b3e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		}
	    sb_chunck=get_frame_info(page_directory,new_virtual_address,&page_table_point);
f0108b41:	83 ec 04             	sub    $0x4,%esp
f0108b44:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108b47:	50                   	push   %eax
f0108b48:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108b4b:	ff 75 08             	pushl  0x8(%ebp)
f0108b4e:	e8 dc e1 ff ff       	call   f0106d2f <get_frame_info>
f0108b53:	83 c4 10             	add    $0x10,%esp
f0108b56:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if(sb_chunck!=NULL)
f0108b59:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108b5c:	85 c0                	test   %eax,%eax
f0108b5e:	74 07                	je     f0108b67 <allocate_chunk+0xd2>
		{
			return -1;
f0108b60:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108b65:	eb 52                	jmp    f0108bb9 <allocate_chunk+0x124>
		}
	    result= allocate_frame(&sb_chunck);
f0108b67:	83 ec 0c             	sub    $0xc,%esp
f0108b6a:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108b6d:	50                   	push   %eax
f0108b6e:	e8 a8 dc ff ff       	call   f010681b <allocate_frame>
f0108b73:	83 c4 10             	add    $0x10,%esp
f0108b76:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if(result != E_NO_MEM)
f0108b79:	83 7d e4 fc          	cmpl   $0xfffffffc,-0x1c(%ebp)
f0108b7d:	74 22                	je     f0108ba1 <allocate_chunk+0x10c>
		{
			sb_chunck->va = new_virtual_address;
f0108b7f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108b82:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0108b85:	89 50 0c             	mov    %edx,0xc(%eax)
			result=map_frame(page_directory,sb_chunck,new_virtual_address,perms);
f0108b88:	8b 55 14             	mov    0x14(%ebp),%edx
f0108b8b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108b8e:	52                   	push   %edx
f0108b8f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108b92:	50                   	push   %eax
f0108b93:	ff 75 08             	pushl  0x8(%ebp)
f0108b96:	e8 cf e0 ff ff       	call   f0106c6a <map_frame>
f0108b9b:	83 c4 10             	add    $0x10,%esp
f0108b9e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    uint32 result=0;

	virtual_address=ROUNDDOWN(va,PAGE_SIZE);
	virtual_range=ROUNDUP(range_page,PAGE_SIZE);
	uint32 new_virtual_address;
	for(uint32 count=virtual_address;count<virtual_range;count+=PAGE_SIZE)
f0108ba1:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108ba8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108bab:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0108bae:	0f 82 57 ff ff ff    	jb     f0108b0b <allocate_chunk+0x76>
		{
			sb_chunck->va = new_virtual_address;
			result=map_frame(page_directory,sb_chunck,new_virtual_address,perms);
		}
	}
	return 0;
f0108bb4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108bb9:	c9                   	leave  
f0108bba:	c3                   	ret    

f0108bbb <calculate_allocated_space>:
/*BONUS*/
//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f0108bbb:	55                   	push   %ebp
f0108bbc:	89 e5                	mov    %esp,%ebp
f0108bbe:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_allocated_space
	// Write your code here, remove the panic and write your code
	panic("calculate_allocated_space() is not implemented yet...!!");
f0108bc1:	83 ec 04             	sub    $0x4,%esp
f0108bc4:	68 88 60 13 f0       	push   $0xf0136088
f0108bc9:	68 d2 00 00 00       	push   $0xd2
f0108bce:	68 c0 60 13 f0       	push   $0xf01360c0
f0108bd3:	e8 23 76 ff ff       	call   f01001fb <_panic>

f0108bd8 <calculate_required_frames>:
// calculate_required_frames:
// calculates the new allocation size required for given address+size,
// we are not interested in knowing if pages or tables actually exist in memory or the page file,
// we are interested in knowing whether they are allocated or not.
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f0108bd8:	55                   	push   %ebp
f0108bd9:	89 e5                	mov    %esp,%ebp
f0108bdb:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_required_frames
	// Write your code here, remove the panic and write your code
	//panic("calculate_required_frames() is not implemented yet...!!");
	uint32 number_of_tables = 0;
f0108bde:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 number_of_pages = 0;
f0108be5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 start_address_pt = ROUNDDOWN(sva, PAGE_SIZE*1024);
f0108bec:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108bef:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108bf2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108bf5:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108bfa:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 start_address = ROUNDDOWN(sva, PAGE_SIZE);
f0108bfd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108c00:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108c03:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108c06:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108c0b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	do
	{
		if(start_address_pt %(PAGE_SIZE*1024) == 0)
f0108c0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108c11:	25 ff ff 3f 00       	and    $0x3fffff,%eax
f0108c16:	85 c0                	test   %eax,%eax
f0108c18:	75 26                	jne    f0108c40 <calculate_required_frames+0x68>
		{
			uint32 *ptr_page_table = NULL;
f0108c1a:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
			get_page_table(page_directory, start_address_pt, &ptr_page_table);
f0108c21:	83 ec 04             	sub    $0x4,%esp
f0108c24:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0108c27:	50                   	push   %eax
f0108c28:	ff 75 ec             	pushl  -0x14(%ebp)
f0108c2b:	ff 75 08             	pushl  0x8(%ebp)
f0108c2e:	e8 a7 dd ff ff       	call   f01069da <get_page_table>
f0108c33:	83 c4 10             	add    $0x10,%esp
			if(ptr_page_table == NULL)
f0108c36:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108c39:	85 c0                	test   %eax,%eax
f0108c3b:	75 03                	jne    f0108c40 <calculate_required_frames+0x68>
				number_of_tables++;
f0108c3d:	ff 45 f4             	incl   -0xc(%ebp)
		}
		uint32 *ptr_page = NULL;
f0108c40:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	    if (get_frame_info(page_directory, start_address, &ptr_page) == 0)
f0108c47:	83 ec 04             	sub    $0x4,%esp
f0108c4a:	8d 45 dc             	lea    -0x24(%ebp),%eax
f0108c4d:	50                   	push   %eax
f0108c4e:	ff 75 e8             	pushl  -0x18(%ebp)
f0108c51:	ff 75 08             	pushl  0x8(%ebp)
f0108c54:	e8 d6 e0 ff ff       	call   f0106d2f <get_frame_info>
f0108c59:	83 c4 10             	add    $0x10,%esp
f0108c5c:	85 c0                	test   %eax,%eax
f0108c5e:	75 03                	jne    f0108c63 <calculate_required_frames+0x8b>
			number_of_pages++;
f0108c60:	ff 45 f0             	incl   -0x10(%ebp)

	    start_address += PAGE_SIZE;
f0108c63:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
	    start_address_pt = start_address;
f0108c6a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108c6d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	} while (start_address < sva+size);
f0108c70:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108c73:	8b 45 10             	mov    0x10(%ebp),%eax
f0108c76:	01 d0                	add    %edx,%eax
f0108c78:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0108c7b:	77 91                	ja     f0108c0e <calculate_required_frames+0x36>
	return number_of_tables + number_of_pages;
f0108c7d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108c80:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108c83:	01 d0                	add    %edx,%eax
}
f0108c85:	c9                   	leave  
f0108c86:	c3                   	ret    

f0108c87 <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108c87:	55                   	push   %ebp
f0108c88:	89 e5                	mov    %esp,%ebp
f0108c8a:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("allocate_user_mem() is not implemented yet...!!");
f0108c8d:	83 ec 04             	sub    $0x4,%esp
f0108c90:	68 dc 60 13 f0       	push   $0xf01360dc
f0108c95:	68 0b 01 00 00       	push   $0x10b
f0108c9a:	68 c0 60 13 f0       	push   $0xf01360c0
f0108c9f:	e8 57 75 ff ff       	call   f01001fb <_panic>

f0108ca4 <free_user_mem>:

//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108ca4:	55                   	push   %ebp
f0108ca5:	89 e5                	mov    %esp,%ebp
f0108ca7:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [USER HEAP - KERNEL SIDE] free_user_mem
	// Write your code here, remove the panic and write your code
	panic("free_user_mem() is not implemented yet...!!");
f0108caa:	83 ec 04             	sub    $0x4,%esp
f0108cad:	68 0c 61 13 f0       	push   $0xf013610c
f0108cb2:	68 15 01 00 00       	push   $0x115
f0108cb7:	68 c0 60 13 f0       	push   $0xf01360c0
f0108cbc:	e8 3a 75 ff ff       	call   f01001fb <_panic>

f0108cc1 <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108cc1:	55                   	push   %ebp
f0108cc2:	89 e5                	mov    %esp,%ebp
f0108cc4:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f0108cc7:	83 ec 04             	sub    $0x4,%esp
f0108cca:	68 38 61 13 f0       	push   $0xf0136138
f0108ccf:	68 23 01 00 00       	push   $0x123
f0108cd4:	68 c0 60 13 f0       	push   $0xf01360c0
f0108cd9:	e8 1d 75 ff ff       	call   f01001fb <_panic>

f0108cde <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f0108cde:	55                   	push   %ebp
f0108cdf:	89 e5                	mov    %esp,%ebp
f0108ce1:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [USER HEAP - KERNEL SIDE] move_user_mem
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f0108ce4:	83 ec 04             	sub    $0x4,%esp
f0108ce7:	68 78 61 13 f0       	push   $0xf0136178
f0108cec:	68 33 01 00 00       	push   $0x133
f0108cf1:	68 c0 60 13 f0       	push   $0xf01360c0
f0108cf6:	e8 00 75 ff ff       	call   f01001fb <_panic>

f0108cfb <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f0108cfb:	55                   	push   %ebp
f0108cfc:	89 e5                	mov    %esp,%ebp
f0108cfe:	57                   	push   %edi
f0108cff:	56                   	push   %esi
f0108d00:	53                   	push   %ebx
f0108d01:	81 ec ec 00 00 00    	sub    $0xec,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f0108d07:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f0108d0e:	83 ec 0c             	sub    $0xc,%esp
f0108d11:	ff 75 08             	pushl  0x8(%ebp)
f0108d14:	e8 c2 21 00 00       	call   f010aedb <get_user_program_info>
f0108d19:	83 c4 10             	add    $0x10,%esp
f0108d1c:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f0108d1f:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0108d23:	75 0a                	jne    f0108d2f <env_create+0x34>
f0108d25:	b8 00 00 00 00       	mov    $0x0,%eax
f0108d2a:	e9 cd 0b 00 00       	jmp    f01098fc <env_create+0xc01>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f0108d2f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108d32:	8b 40 08             	mov    0x8(%eax),%eax
f0108d35:	89 45 b8             	mov    %eax,-0x48(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f0108d38:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%ebp)
f0108d3f:	00 00 00 
	if(allocate_environment(&e) < 0)
f0108d42:	83 ec 0c             	sub    $0xc,%esp
f0108d45:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f0108d4b:	50                   	push   %eax
f0108d4c:	e8 d3 0e 00 00       	call   f0109c24 <allocate_environment>
f0108d51:	83 c4 10             	add    $0x10,%esp
f0108d54:	85 c0                	test   %eax,%eax
f0108d56:	79 0a                	jns    f0108d62 <env_create+0x67>
	{
		return 0;
f0108d58:	b8 00 00 00 00       	mov    $0x0,%eax
f0108d5d:	e9 9a 0b 00 00       	jmp    f01098fc <env_create+0xc01>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f0108d62:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108d65:	8b 00                	mov    (%eax),%eax
f0108d67:	83 ec 0c             	sub    $0xc,%esp
f0108d6a:	50                   	push   %eax
f0108d6b:	e8 1a 7f 02 00       	call   f0130c8a <strlen>
f0108d70:	83 c4 10             	add    $0x10,%esp
f0108d73:	83 f8 3f             	cmp    $0x3f,%eax
f0108d76:	7f 20                	jg     f0108d98 <env_create+0x9d>
		strcpy(e->prog_name, ptr_user_program_info->name);
f0108d78:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108d7b:	8b 00                	mov    (%eax),%eax
f0108d7d:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0108d83:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f0108d89:	83 ec 08             	sub    $0x8,%esp
f0108d8c:	50                   	push   %eax
f0108d8d:	52                   	push   %edx
f0108d8e:	e8 46 7f 02 00       	call   f0130cd9 <strcpy>
f0108d93:	83 c4 10             	add    $0x10,%esp
f0108d96:	eb 20                	jmp    f0108db8 <env_create+0xbd>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f0108d98:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108d9b:	8b 00                	mov    (%eax),%eax
f0108d9d:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0108da3:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f0108da9:	83 ec 04             	sub    $0x4,%esp
f0108dac:	6a 3f                	push   $0x3f
f0108dae:	50                   	push   %eax
f0108daf:	52                   	push   %edx
f0108db0:	e8 52 7f 02 00       	call   f0130d07 <strncpy>
f0108db5:	83 c4 10             	add    $0x10,%esp
	//REMEMBER: "allocate_frame" should always return a free frame
	uint32* ptr_user_page_directory;
	unsigned int phys_user_page_directory;
#if USE_KHEAP
	{
		ptr_user_page_directory = create_user_directory();
f0108db8:	e8 42 0f 00 00       	call   f0109cff <create_user_directory>
f0108dbd:	89 45 b0             	mov    %eax,-0x50(%ebp)
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
f0108dc0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0108dc3:	83 ec 0c             	sub    $0xc,%esp
f0108dc6:	50                   	push   %eax
f0108dc7:	e8 47 ec ff ff       	call   f0107a13 <kheap_physical_address>
f0108dcc:	83 c4 10             	add    $0x10,%esp
f0108dcf:	89 45 ac             	mov    %eax,-0x54(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f0108dd2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108dd8:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108ddb:	89 50 74             	mov    %edx,0x74(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108dde:	83 ec 0c             	sub    $0xc,%esp
f0108de1:	6a 02                	push   $0x2
f0108de3:	e8 19 4d 00 00       	call   f010db01 <isPageReplacmentAlgorithmLRU>
f0108de8:	83 c4 10             	add    $0x10,%esp
f0108deb:	85 c0                	test   %eax,%eax
f0108ded:	74 21                	je     f0108e10 <env_create+0x115>
	{
		e->SecondListSize = LRU_second_list_size;
f0108def:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108df5:	8b 55 10             	mov    0x10(%ebp),%edx
f0108df8:	89 90 ec 05 00 00    	mov    %edx,0x5ec(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f0108dfe:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108e04:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108e07:	2b 55 10             	sub    0x10(%ebp),%edx
f0108e0a:	89 90 e8 05 00 00    	mov    %edx,0x5e8(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f0108e10:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f0108e14:	75 12                	jne    f0108e28 <env_create+0x12d>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f0108e16:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108e1c:	c7 80 a0 05 00 00 0a 	movl   $0xa,0x5a0(%eax)
f0108e23:	00 00 00 
f0108e26:	eb 0f                	jmp    f0108e37 <env_create+0x13c>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f0108e28:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108e2e:	8b 55 14             	mov    0x14(%ebp),%edx
f0108e31:	89 90 a0 05 00 00    	mov    %edx,0x5a0(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f0108e37:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108e3d:	83 ec 04             	sub    $0x4,%esp
f0108e40:	ff 75 ac             	pushl  -0x54(%ebp)
f0108e43:	ff 75 b0             	pushl  -0x50(%ebp)
f0108e46:	50                   	push   %eax
f0108e47:	e8 b1 15 00 00       	call   f010a3fd <initialize_environment>
f0108e4c:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0108e4f:	0f 20 d8             	mov    %cr3,%eax
f0108e52:	89 45 a0             	mov    %eax,-0x60(%ebp)
	return val;
f0108e55:	8b 45 a0             	mov    -0x60(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f0108e58:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	lcr3(e->env_cr3) ;
f0108e5b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108e61:	8b 40 60             	mov    0x60(%eax),%eax
f0108e64:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0108e6a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0108e70:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f0108e73:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f0108e7a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f0108e81:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108e87:	8b 40 74             	mov    0x74(%eax),%eax
f0108e8a:	48                   	dec    %eax
f0108e8b:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f0108e8e:	c7 85 48 ff ff ff ff 	movl   $0xffffffff,-0xb8(%ebp)
f0108e95:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0108e98:	8d 85 08 ff ff ff    	lea    -0xf8(%ebp),%eax
f0108e9e:	83 ec 08             	sub    $0x8,%esp
f0108ea1:	ff 75 b8             	pushl  -0x48(%ebp)
f0108ea4:	50                   	push   %eax
f0108ea5:	e8 66 1d 00 00       	call   f010ac10 <PROGRAM_SEGMENT_FIRST>
f0108eaa:	83 c4 0c             	add    $0xc,%esp
f0108ead:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0108eb3:	8d 95 08 ff ff ff    	lea    -0xf8(%ebp),%edx
f0108eb9:	b9 05 00 00 00       	mov    $0x5,%ecx
f0108ebe:	89 c7                	mov    %eax,%edi
f0108ec0:	89 d6                	mov    %edx,%esi
f0108ec2:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0108ec4:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0108eca:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0108ecd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108ed0:	8b 40 10             	mov    0x10(%eax),%eax
f0108ed3:	83 f8 ff             	cmp    $0xffffffff,%eax
f0108ed6:	75 07                	jne    f0108edf <env_create+0x1e4>
f0108ed8:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0108edf:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108ee2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108ee5:	e9 15 03 00 00       	jmp    f01091ff <env_create+0x504>
	{
		segment_counter++;
f0108eea:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f0108eed:	c7 85 30 ff ff ff 00 	movl   $0x0,-0xd0(%ebp)
f0108ef4:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f0108ef7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108efd:	83 ec 0c             	sub    $0xc,%esp
f0108f00:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f0108f06:	52                   	push   %edx
f0108f07:	ff 75 dc             	pushl  -0x24(%ebp)
f0108f0a:	8d 95 30 ff ff ff    	lea    -0xd0(%ebp),%edx
f0108f10:	52                   	push   %edx
f0108f11:	ff 75 e4             	pushl  -0x1c(%ebp)
f0108f14:	50                   	push   %eax
f0108f15:	e8 02 0e 00 00       	call   f0109d1c <program_segment_alloc_map_copy_workingset>
f0108f1a:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f0108f1d:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0108f23:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f0108f26:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108f29:	8b 00                	mov    (%eax),%eax
f0108f2b:	89 45 9c             	mov    %eax,-0x64(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f0108f2e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108f31:	8b 40 0c             	mov    0xc(%eax),%eax
f0108f34:	89 45 98             	mov    %eax,-0x68(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f0108f37:	8b 45 98             	mov    -0x68(%ebp),%eax
f0108f3a:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0108f3d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0108f40:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108f45:	89 45 90             	mov    %eax,-0x70(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f0108f48:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0108f4f:	8b 55 98             	mov    -0x68(%ebp),%edx
f0108f52:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0108f55:	01 d0                	add    %edx,%eax
f0108f57:	48                   	dec    %eax
f0108f58:	89 45 88             	mov    %eax,-0x78(%ebp)
f0108f5b:	8b 45 88             	mov    -0x78(%ebp),%eax
f0108f5e:	ba 00 00 00 00       	mov    $0x0,%edx
f0108f63:	f7 75 8c             	divl   -0x74(%ebp)
f0108f66:	8b 45 88             	mov    -0x78(%ebp),%eax
f0108f69:	29 d0                	sub    %edx,%eax
f0108f6b:	89 45 84             	mov    %eax,-0x7c(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f0108f6e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0108f71:	2b 45 90             	sub    -0x70(%ebp),%eax
f0108f74:	89 45 80             	mov    %eax,-0x80(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f0108f77:	a1 84 7b 65 f0       	mov    0xf0657b84,%eax
f0108f7c:	83 ec 04             	sub    $0x4,%esp
f0108f7f:	68 00 10 00 00       	push   $0x1000
f0108f84:	6a 00                	push   $0x0
f0108f86:	50                   	push   %eax
f0108f87:	e8 ec 7e 02 00       	call   f0130e78 <memset>
f0108f8c:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f0108f8f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0108f92:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f0108f95:	8b 15 84 7b 65 f0    	mov    0xf0657b84,%edx
f0108f9b:	8b 45 80             	mov    -0x80(%ebp),%eax
f0108f9e:	01 d0                	add    %edx,%eax
f0108fa0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0108fa3:	8b 45 98             	mov    -0x68(%ebp),%eax
f0108fa6:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0108fa9:	eb 13                	jmp    f0108fbe <env_create+0x2c3>
		{
			*dst_ptr = *src_ptr ;
f0108fab:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108fae:	8a 10                	mov    (%eax),%dl
f0108fb0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108fb3:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0108fb5:	ff 45 cc             	incl   -0x34(%ebp)
f0108fb8:	ff 45 d4             	incl   -0x2c(%ebp)
f0108fbb:	ff 45 d0             	incl   -0x30(%ebp)
f0108fbe:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108fc1:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0108fc4:	72 e5                	jb     f0108fab <env_create+0x2b0>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0108fc6:	8b 15 84 7b 65 f0    	mov    0xf0657b84,%edx
f0108fcc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108fd2:	83 ec 04             	sub    $0x4,%esp
f0108fd5:	52                   	push   %edx
f0108fd6:	ff 75 90             	pushl  -0x70(%ebp)
f0108fd9:	50                   	push   %eax
f0108fda:	e8 aa a6 ff ff       	call   f0103689 <pf_add_env_page>
f0108fdf:	83 c4 10             	add    $0x10,%esp
f0108fe2:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0108fe5:	75 17                	jne    f0108ffe <env_create+0x303>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0108fe7:	83 ec 04             	sub    $0x4,%esp
f0108fea:	68 a4 61 13 f0       	push   $0xf01361a4
f0108fef:	68 e1 00 00 00       	push   $0xe1
f0108ff4:	68 e9 61 13 f0       	push   $0xf01361e9
f0108ff9:	e8 fd 71 ff ff       	call   f01001fb <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f0108ffe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109001:	8b 50 04             	mov    0x4(%eax),%edx
f0109004:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109007:	01 d0                	add    %edx,%eax
f0109009:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f010900f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0109015:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010901a:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f0109020:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109023:	8b 50 04             	mov    0x4(%eax),%edx
f0109026:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109029:	01 d0                	add    %edx,%eax
f010902b:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0109031:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0109034:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109037:	eb 43                	jmp    f010907c <env_create+0x381>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f0109039:	8b 55 cc             	mov    -0x34(%ebp),%edx
f010903c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109042:	83 ec 04             	sub    $0x4,%esp
f0109045:	ff 75 d4             	pushl  -0x2c(%ebp)
f0109048:	52                   	push   %edx
f0109049:	50                   	push   %eax
f010904a:	e8 3a a6 ff ff       	call   f0103689 <pf_add_env_page>
f010904f:	83 c4 10             	add    $0x10,%esp
f0109052:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109055:	75 17                	jne    f010906e <env_create+0x373>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109057:	83 ec 04             	sub    $0x4,%esp
f010905a:	68 a4 61 13 f0       	push   $0xf01361a4
f010905f:	68 ee 00 00 00       	push   $0xee
f0109064:	68 e9 61 13 f0       	push   $0xf01361e9
f0109069:	e8 8d 71 ff ff       	call   f01001fb <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f010906e:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0109075:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f010907c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010907f:	3b 85 78 ff ff ff    	cmp    -0x88(%ebp),%eax
f0109085:	72 b2                	jb     f0109039 <env_create+0x33e>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f0109087:	a1 84 7b 65 f0       	mov    0xf0657b84,%eax
f010908c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f010908f:	83 ec 04             	sub    $0x4,%esp
f0109092:	68 00 10 00 00       	push   $0x1000
f0109097:	6a 00                	push   $0x0
f0109099:	ff 75 d0             	pushl  -0x30(%ebp)
f010909c:	e8 d7 7d 02 00       	call   f0130e78 <memset>
f01090a1:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f01090a4:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01090aa:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01090ad:	eb 13                	jmp    f01090c2 <env_create+0x3c7>
		{
			*dst_ptr = *src_ptr;
f01090af:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01090b2:	8a 10                	mov    (%eax),%dl
f01090b4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01090b7:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f01090b9:	ff 45 cc             	incl   -0x34(%ebp)
f01090bc:	ff 45 d4             	incl   -0x2c(%ebp)
f01090bf:	ff 45 d0             	incl   -0x30(%ebp)
f01090c2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01090c5:	3b 85 74 ff ff ff    	cmp    -0x8c(%ebp),%eax
f01090cb:	72 e2                	jb     f01090af <env_create+0x3b4>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f01090cd:	8b 15 84 7b 65 f0    	mov    0xf0657b84,%edx
f01090d3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01090d9:	83 ec 04             	sub    $0x4,%esp
f01090dc:	52                   	push   %edx
f01090dd:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f01090e3:	50                   	push   %eax
f01090e4:	e8 a0 a5 ff ff       	call   f0103689 <pf_add_env_page>
f01090e9:	83 c4 10             	add    $0x10,%esp
f01090ec:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01090ef:	75 17                	jne    f0109108 <env_create+0x40d>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01090f1:	83 ec 04             	sub    $0x4,%esp
f01090f4:	68 a4 61 13 f0       	push   $0xf01361a4
f01090f9:	68 fd 00 00 00       	push   $0xfd
f01090fe:	68 e9 61 13 f0       	push   $0xf01361e9
f0109103:	e8 f3 70 ff ff       	call   f01001fb <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f0109108:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f010910f:	10 00 00 
f0109112:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109115:	8b 50 04             	mov    0x4(%eax),%edx
f0109118:	8b 45 98             	mov    -0x68(%ebp),%eax
f010911b:	01 c2                	add    %eax,%edx
f010911d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0109123:	01 d0                	add    %edx,%eax
f0109125:	48                   	dec    %eax
f0109126:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f010912c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0109132:	ba 00 00 00 00       	mov    $0x0,%edx
f0109137:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f010913d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0109143:	29 d0                	sub    %edx,%eax
f0109145:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f0109148:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010914b:	8b 50 08             	mov    0x8(%eax),%edx
f010914e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109151:	01 d0                	add    %edx,%eax
f0109153:	2b 45 c8             	sub    -0x38(%ebp),%eax
f0109156:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f010915c:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0109163:	eb 41                	jmp    f01091a6 <env_create+0x4ab>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f0109165:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010916b:	83 ec 04             	sub    $0x4,%esp
f010916e:	6a 01                	push   $0x1
f0109170:	ff 75 c8             	pushl  -0x38(%ebp)
f0109173:	50                   	push   %eax
f0109174:	e8 df a3 ff ff       	call   f0103558 <pf_add_empty_env_page>
f0109179:	83 c4 10             	add    $0x10,%esp
f010917c:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010917f:	75 17                	jne    f0109198 <env_create+0x49d>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109181:	83 ec 04             	sub    $0x4,%esp
f0109184:	68 a4 61 13 f0       	push   $0xf01361a4
f0109189:	68 0a 01 00 00       	push   $0x10a
f010918e:	68 e9 61 13 f0       	push   $0xf01361e9
f0109193:	e8 63 70 ff ff       	call   f01001fb <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0109198:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f010919f:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f01091a6:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01091ad:	10 00 00 
f01091b0:	8b 95 68 ff ff ff    	mov    -0x98(%ebp),%edx
f01091b6:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01091bc:	01 d0                	add    %edx,%eax
f01091be:	48                   	dec    %eax
f01091bf:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01091c5:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01091cb:	ba 00 00 00 00       	mov    $0x0,%edx
f01091d0:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01091d6:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01091dc:	29 d0                	sub    %edx,%eax
f01091de:	89 c2                	mov    %eax,%edx
f01091e0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01091e3:	39 c2                	cmp    %eax,%edx
f01091e5:	0f 87 7a ff ff ff    	ja     f0109165 <env_create+0x46a>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f01091eb:	83 ec 08             	sub    $0x8,%esp
f01091ee:	ff 75 b8             	pushl  -0x48(%ebp)
f01091f1:	ff 75 e4             	pushl  -0x1c(%ebp)
f01091f4:	e8 0c 19 00 00       	call   f010ab05 <PROGRAM_SEGMENT_NEXT>
f01091f9:	83 c4 10             	add    $0x10,%esp
f01091fc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01091ff:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0109203:	0f 85 e1 fc ff ff    	jne    f0108eea <env_create+0x1ef>
		}
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
f0109209:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f0109210:	e9 9d 00 00 00       	jmp    f01092b2 <env_create+0x5b7>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f0109215:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010921b:	8b 48 78             	mov    0x78(%eax),%ecx
f010921e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0109221:	89 d0                	mov    %edx,%eax
f0109223:	01 c0                	add    %eax,%eax
f0109225:	01 d0                	add    %edx,%eax
f0109227:	c1 e0 03             	shl    $0x3,%eax
f010922a:	01 c8                	add    %ecx,%eax
f010922c:	8a 40 04             	mov    0x4(%eax),%al
f010922f:	84 c0                	test   %al,%al
f0109231:	75 7c                	jne    f01092af <env_create+0x5b4>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f0109233:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109239:	8b 48 78             	mov    0x78(%eax),%ecx
f010923c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f010923f:	89 d0                	mov    %edx,%eax
f0109241:	01 c0                	add    %eax,%eax
f0109243:	01 d0                	add    %edx,%eax
f0109245:	c1 e0 03             	shl    $0x3,%eax
f0109248:	01 c8                	add    %ecx,%eax
f010924a:	8b 00                	mov    (%eax),%eax
f010924c:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f0109252:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109258:	8b 40 5c             	mov    0x5c(%eax),%eax
f010925b:	83 ec 04             	sub    $0x4,%esp
f010925e:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f0109264:	52                   	push   %edx
f0109265:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
f010926b:	50                   	push   %eax
f010926c:	e8 69 d7 ff ff       	call   f01069da <get_page_table>
f0109271:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f0109274:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f010927a:	8b 95 5c ff ff ff    	mov    -0xa4(%ebp),%edx
f0109280:	c1 ea 0c             	shr    $0xc,%edx
f0109283:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0109289:	c1 e2 02             	shl    $0x2,%edx
f010928c:	01 d0                	add    %edx,%eax
f010928e:	8b 95 2c ff ff ff    	mov    -0xd4(%ebp),%edx
f0109294:	8b 8d 5c ff ff ff    	mov    -0xa4(%ebp),%ecx
f010929a:	c1 e9 0c             	shr    $0xc,%ecx
f010929d:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f01092a3:	c1 e1 02             	shl    $0x2,%ecx
f01092a6:	01 ca                	add    %ecx,%edx
f01092a8:	8b 12                	mov    (%edx),%edx
f01092aa:	83 e2 bf             	and    $0xffffffbf,%edx
f01092ad:	89 10                	mov    %edx,(%eax)
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f01092af:	ff 45 c4             	incl   -0x3c(%ebp)
f01092b2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01092b8:	8b 50 74             	mov    0x74(%eax),%edx
f01092bb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01092be:	39 c2                	cmp    %eax,%edx
f01092c0:	0f 87 4f ff ff ff    	ja     f0109215 <env_create+0x51a>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f01092c6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01092c9:	8b 50 08             	mov    0x8(%eax),%edx
f01092cc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01092d2:	83 ec 08             	sub    $0x8,%esp
f01092d5:	52                   	push   %edx
f01092d6:	50                   	push   %eax
f01092d7:	e8 73 16 00 00       	call   f010a94f <set_environment_entry_point>
f01092dc:	83 c4 10             	add    $0x10,%esp

	//[9] Allocate and map one page for the program's initial stack
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set

	e->initNumStackPages = 1;
f01092df:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01092e5:	c7 80 58 05 00 00 01 	movl   $0x1,0x558(%eax)
f01092ec:	00 00 00 

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f01092ef:	c7 85 58 ff ff ff 00 	movl   $0xeebfd000,-0xa8(%ebp)
f01092f6:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f01092f9:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0109300:	e9 53 05 00 00       	jmp    f0109858 <env_create+0xb5d>
	{
		struct FrameInfo *pp = NULL;
f0109305:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010930c:	00 00 00 
		allocate_frame(&pp);
f010930f:	83 ec 0c             	sub    $0xc,%esp
f0109312:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0109318:	50                   	push   %eax
f0109319:	e8 fd d4 ff ff       	call   f010681b <allocate_frame>
f010931e:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f0109321:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f0109327:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010932d:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109330:	6a 06                	push   $0x6
f0109332:	ff 75 c0             	pushl  -0x40(%ebp)
f0109335:	52                   	push   %edx
f0109336:	50                   	push   %eax
f0109337:	e8 ea da ff ff       	call   f0106e26 <loadtime_map_frame>
f010933c:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f010933f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0109342:	83 ec 04             	sub    $0x4,%esp
f0109345:	68 00 10 00 00       	push   $0x1000
f010934a:	6a 00                	push   $0x0
f010934c:	50                   	push   %eax
f010934d:	e8 26 7b 02 00       	call   f0130e78 <memset>
f0109352:	83 c4 10             	add    $0x10,%esp

		//now add it to the working set and the page table
		{
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f0109355:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010935b:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109361:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109367:	83 ec 04             	sub    $0x4,%esp
f010936a:	ff 75 c0             	pushl  -0x40(%ebp)
f010936d:	52                   	push   %edx
f010936e:	50                   	push   %eax
f010936f:	e8 c6 ea ff ff       	call   f0107e3a <env_page_ws_set_entry>
f0109374:	83 c4 10             	add    $0x10,%esp

			//2020
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109377:	83 ec 0c             	sub    $0xc,%esp
f010937a:	6a 02                	push   $0x2
f010937c:	e8 80 47 00 00       	call   f010db01 <isPageReplacmentAlgorithmLRU>
f0109381:	83 c4 10             	add    $0x10,%esp
f0109384:	85 c0                	test   %eax,%eax
f0109386:	0f 84 6b 04 00 00    	je     f01097f7 <env_create+0xafc>
			{
				LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010938c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109392:	8b 48 78             	mov    0x78(%eax),%ecx
f0109395:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010939b:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01093a1:	89 d0                	mov    %edx,%eax
f01093a3:	01 c0                	add    %eax,%eax
f01093a5:	01 d0                	add    %edx,%eax
f01093a7:	c1 e0 03             	shl    $0x3,%eax
f01093aa:	01 c8                	add    %ecx,%eax
f01093ac:	85 c0                	test   %eax,%eax
f01093ae:	75 17                	jne    f01093c7 <env_create+0x6cc>
f01093b0:	83 ec 04             	sub    $0x4,%esp
f01093b3:	68 06 62 13 f0       	push   $0xf0136206
f01093b8:	68 41 01 00 00       	push   $0x141
f01093bd:	68 e9 61 13 f0       	push   $0xf01361e9
f01093c2:	e8 34 6e ff ff       	call   f01001fb <_panic>
f01093c7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01093cd:	8b 48 78             	mov    0x78(%eax),%ecx
f01093d0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01093d6:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01093dc:	89 d0                	mov    %edx,%eax
f01093de:	01 c0                	add    %eax,%eax
f01093e0:	01 d0                	add    %edx,%eax
f01093e2:	c1 e0 03             	shl    $0x3,%eax
f01093e5:	01 c8                	add    %ecx,%eax
f01093e7:	8b 40 10             	mov    0x10(%eax),%eax
f01093ea:	85 c0                	test   %eax,%eax
f01093ec:	74 4b                	je     f0109439 <env_create+0x73e>
f01093ee:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01093f4:	8b 48 78             	mov    0x78(%eax),%ecx
f01093f7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01093fd:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109403:	89 d0                	mov    %edx,%eax
f0109405:	01 c0                	add    %eax,%eax
f0109407:	01 d0                	add    %edx,%eax
f0109409:	c1 e0 03             	shl    $0x3,%eax
f010940c:	01 c8                	add    %ecx,%eax
f010940e:	8b 50 10             	mov    0x10(%eax),%edx
f0109411:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109417:	8b 58 78             	mov    0x78(%eax),%ebx
f010941a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109420:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109426:	89 c8                	mov    %ecx,%eax
f0109428:	01 c0                	add    %eax,%eax
f010942a:	01 c8                	add    %ecx,%eax
f010942c:	c1 e0 03             	shl    $0x3,%eax
f010942f:	01 d8                	add    %ebx,%eax
f0109431:	8b 40 14             	mov    0x14(%eax),%eax
f0109434:	89 42 14             	mov    %eax,0x14(%edx)
f0109437:	eb 2f                	jmp    f0109468 <env_create+0x76d>
f0109439:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010943f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109445:	8b 58 78             	mov    0x78(%eax),%ebx
f0109448:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010944e:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109454:	89 c8                	mov    %ecx,%eax
f0109456:	01 c0                	add    %eax,%eax
f0109458:	01 c8                	add    %ecx,%eax
f010945a:	c1 e0 03             	shl    $0x3,%eax
f010945d:	01 d8                	add    %ebx,%eax
f010945f:	8b 40 14             	mov    0x14(%eax),%eax
f0109462:	89 82 bc 05 00 00    	mov    %eax,0x5bc(%edx)
f0109468:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010946e:	8b 48 78             	mov    0x78(%eax),%ecx
f0109471:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109477:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010947d:	89 d0                	mov    %edx,%eax
f010947f:	01 c0                	add    %eax,%eax
f0109481:	01 d0                	add    %edx,%eax
f0109483:	c1 e0 03             	shl    $0x3,%eax
f0109486:	01 c8                	add    %ecx,%eax
f0109488:	8b 40 14             	mov    0x14(%eax),%eax
f010948b:	85 c0                	test   %eax,%eax
f010948d:	74 4b                	je     f01094da <env_create+0x7df>
f010948f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109495:	8b 48 78             	mov    0x78(%eax),%ecx
f0109498:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010949e:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01094a4:	89 d0                	mov    %edx,%eax
f01094a6:	01 c0                	add    %eax,%eax
f01094a8:	01 d0                	add    %edx,%eax
f01094aa:	c1 e0 03             	shl    $0x3,%eax
f01094ad:	01 c8                	add    %ecx,%eax
f01094af:	8b 50 14             	mov    0x14(%eax),%edx
f01094b2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01094b8:	8b 58 78             	mov    0x78(%eax),%ebx
f01094bb:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01094c1:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01094c7:	89 c8                	mov    %ecx,%eax
f01094c9:	01 c0                	add    %eax,%eax
f01094cb:	01 c8                	add    %ecx,%eax
f01094cd:	c1 e0 03             	shl    $0x3,%eax
f01094d0:	01 d8                	add    %ebx,%eax
f01094d2:	8b 40 10             	mov    0x10(%eax),%eax
f01094d5:	89 42 10             	mov    %eax,0x10(%edx)
f01094d8:	eb 2f                	jmp    f0109509 <env_create+0x80e>
f01094da:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01094e0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01094e6:	8b 58 78             	mov    0x78(%eax),%ebx
f01094e9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01094ef:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01094f5:	89 c8                	mov    %ecx,%eax
f01094f7:	01 c0                	add    %eax,%eax
f01094f9:	01 c8                	add    %ecx,%eax
f01094fb:	c1 e0 03             	shl    $0x3,%eax
f01094fe:	01 d8                	add    %ebx,%eax
f0109500:	8b 40 10             	mov    0x10(%eax),%eax
f0109503:	89 82 b8 05 00 00    	mov    %eax,0x5b8(%edx)
f0109509:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010950f:	8b 48 78             	mov    0x78(%eax),%ecx
f0109512:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109518:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010951e:	89 d0                	mov    %edx,%eax
f0109520:	01 c0                	add    %eax,%eax
f0109522:	01 d0                	add    %edx,%eax
f0109524:	c1 e0 03             	shl    $0x3,%eax
f0109527:	01 c8                	add    %ecx,%eax
f0109529:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f0109530:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109536:	8b 48 78             	mov    0x78(%eax),%ecx
f0109539:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010953f:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109545:	89 d0                	mov    %edx,%eax
f0109547:	01 c0                	add    %eax,%eax
f0109549:	01 d0                	add    %edx,%eax
f010954b:	c1 e0 03             	shl    $0x3,%eax
f010954e:	01 c8                	add    %ecx,%eax
f0109550:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109557:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010955d:	8b 90 c4 05 00 00    	mov    0x5c4(%eax),%edx
f0109563:	4a                   	dec    %edx
f0109564:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)
				//Now: we are sure that at least the top page in the stack will be added to Active list
				//Since we left 1 empty location in the Active list when we loaded the program segments
				if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f010956a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109570:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f0109576:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010957c:	8b 80 e8 05 00 00    	mov    0x5e8(%eax),%eax
f0109582:	39 c2                	cmp    %eax,%edx
f0109584:	0f 83 39 01 00 00    	jae    f01096c3 <env_create+0x9c8>
				{
					LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010958a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109590:	8b 48 78             	mov    0x78(%eax),%ecx
f0109593:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109599:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010959f:	89 d0                	mov    %edx,%eax
f01095a1:	01 c0                	add    %eax,%eax
f01095a3:	01 d0                	add    %edx,%eax
f01095a5:	c1 e0 03             	shl    $0x3,%eax
f01095a8:	01 c8                	add    %ecx,%eax
f01095aa:	85 c0                	test   %eax,%eax
f01095ac:	75 17                	jne    f01095c5 <env_create+0x8ca>
f01095ae:	83 ec 04             	sub    $0x4,%esp
f01095b1:	68 24 62 13 f0       	push   $0xf0136224
f01095b6:	68 46 01 00 00       	push   $0x146
f01095bb:	68 e9 61 13 f0       	push   $0xf01361e9
f01095c0:	e8 36 6c ff ff       	call   f01001fb <_panic>
f01095c5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095cb:	8b 48 78             	mov    0x78(%eax),%ecx
f01095ce:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095d4:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01095da:	89 d0                	mov    %edx,%eax
f01095dc:	01 c0                	add    %eax,%eax
f01095de:	01 d0                	add    %edx,%eax
f01095e0:	c1 e0 03             	shl    $0x3,%eax
f01095e3:	01 c8                	add    %ecx,%eax
f01095e5:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01095eb:	8b 92 c8 05 00 00    	mov    0x5c8(%edx),%edx
f01095f1:	89 50 10             	mov    %edx,0x10(%eax)
f01095f4:	8b 40 10             	mov    0x10(%eax),%eax
f01095f7:	85 c0                	test   %eax,%eax
f01095f9:	74 31                	je     f010962c <env_create+0x931>
f01095fb:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109601:	8b 90 c8 05 00 00    	mov    0x5c8(%eax),%edx
f0109607:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010960d:	8b 58 78             	mov    0x78(%eax),%ebx
f0109610:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109616:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010961c:	89 c8                	mov    %ecx,%eax
f010961e:	01 c0                	add    %eax,%eax
f0109620:	01 c8                	add    %ecx,%eax
f0109622:	c1 e0 03             	shl    $0x3,%eax
f0109625:	01 d8                	add    %ebx,%eax
f0109627:	89 42 14             	mov    %eax,0x14(%edx)
f010962a:	eb 2c                	jmp    f0109658 <env_create+0x95d>
f010962c:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109632:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109638:	8b 58 78             	mov    0x78(%eax),%ebx
f010963b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109641:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109647:	89 c8                	mov    %ecx,%eax
f0109649:	01 c0                	add    %eax,%eax
f010964b:	01 c8                	add    %ecx,%eax
f010964d:	c1 e0 03             	shl    $0x3,%eax
f0109650:	01 d8                	add    %ebx,%eax
f0109652:	89 82 cc 05 00 00    	mov    %eax,0x5cc(%edx)
f0109658:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010965e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109664:	8b 58 78             	mov    0x78(%eax),%ebx
f0109667:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010966d:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109673:	89 c8                	mov    %ecx,%eax
f0109675:	01 c0                	add    %eax,%eax
f0109677:	01 c8                	add    %ecx,%eax
f0109679:	c1 e0 03             	shl    $0x3,%eax
f010967c:	01 d8                	add    %ebx,%eax
f010967e:	89 82 c8 05 00 00    	mov    %eax,0x5c8(%edx)
f0109684:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010968a:	8b 48 78             	mov    0x78(%eax),%ecx
f010968d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109693:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109699:	89 d0                	mov    %edx,%eax
f010969b:	01 c0                	add    %eax,%eax
f010969d:	01 d0                	add    %edx,%eax
f010969f:	c1 e0 03             	shl    $0x3,%eax
f01096a2:	01 c8                	add    %ecx,%eax
f01096a4:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f01096ab:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096b1:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f01096b7:	42                   	inc    %edx
f01096b8:	89 90 d4 05 00 00    	mov    %edx,0x5d4(%eax)
f01096be:	e9 34 01 00 00       	jmp    f01097f7 <env_create+0xafc>
				}
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f01096c3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096c9:	8b 48 78             	mov    0x78(%eax),%ecx
f01096cc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096d2:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01096d8:	89 d0                	mov    %edx,%eax
f01096da:	01 c0                	add    %eax,%eax
f01096dc:	01 d0                	add    %edx,%eax
f01096de:	c1 e0 03             	shl    $0x3,%eax
f01096e1:	01 c8                	add    %ecx,%eax
f01096e3:	85 c0                	test   %eax,%eax
f01096e5:	75 17                	jne    f01096fe <env_create+0xa03>
f01096e7:	83 ec 04             	sub    $0x4,%esp
f01096ea:	68 24 62 13 f0       	push   $0xf0136224
f01096ef:	68 4a 01 00 00       	push   $0x14a
f01096f4:	68 e9 61 13 f0       	push   $0xf01361e9
f01096f9:	e8 fd 6a ff ff       	call   f01001fb <_panic>
f01096fe:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109704:	8b 48 78             	mov    0x78(%eax),%ecx
f0109707:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010970d:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109713:	89 d0                	mov    %edx,%eax
f0109715:	01 c0                	add    %eax,%eax
f0109717:	01 d0                	add    %edx,%eax
f0109719:	c1 e0 03             	shl    $0x3,%eax
f010971c:	01 c8                	add    %ecx,%eax
f010971e:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109724:	8b 92 d8 05 00 00    	mov    0x5d8(%edx),%edx
f010972a:	89 50 10             	mov    %edx,0x10(%eax)
f010972d:	8b 40 10             	mov    0x10(%eax),%eax
f0109730:	85 c0                	test   %eax,%eax
f0109732:	74 31                	je     f0109765 <env_create+0xa6a>
f0109734:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010973a:	8b 90 d8 05 00 00    	mov    0x5d8(%eax),%edx
f0109740:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109746:	8b 58 78             	mov    0x78(%eax),%ebx
f0109749:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010974f:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109755:	89 c8                	mov    %ecx,%eax
f0109757:	01 c0                	add    %eax,%eax
f0109759:	01 c8                	add    %ecx,%eax
f010975b:	c1 e0 03             	shl    $0x3,%eax
f010975e:	01 d8                	add    %ebx,%eax
f0109760:	89 42 14             	mov    %eax,0x14(%edx)
f0109763:	eb 2c                	jmp    f0109791 <env_create+0xa96>
f0109765:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010976b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109771:	8b 58 78             	mov    0x78(%eax),%ebx
f0109774:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010977a:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109780:	89 c8                	mov    %ecx,%eax
f0109782:	01 c0                	add    %eax,%eax
f0109784:	01 c8                	add    %ecx,%eax
f0109786:	c1 e0 03             	shl    $0x3,%eax
f0109789:	01 d8                	add    %ebx,%eax
f010978b:	89 82 dc 05 00 00    	mov    %eax,0x5dc(%edx)
f0109791:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109797:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010979d:	8b 58 78             	mov    0x78(%eax),%ebx
f01097a0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097a6:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01097ac:	89 c8                	mov    %ecx,%eax
f01097ae:	01 c0                	add    %eax,%eax
f01097b0:	01 c8                	add    %ecx,%eax
f01097b2:	c1 e0 03             	shl    $0x3,%eax
f01097b5:	01 d8                	add    %ebx,%eax
f01097b7:	89 82 d8 05 00 00    	mov    %eax,0x5d8(%edx)
f01097bd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097c3:	8b 48 78             	mov    0x78(%eax),%ecx
f01097c6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097cc:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01097d2:	89 d0                	mov    %edx,%eax
f01097d4:	01 c0                	add    %eax,%eax
f01097d6:	01 d0                	add    %edx,%eax
f01097d8:	c1 e0 03             	shl    $0x3,%eax
f01097db:	01 c8                	add    %ecx,%eax
f01097dd:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f01097e4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097ea:	8b 90 e4 05 00 00    	mov    0x5e4(%eax),%edx
f01097f0:	42                   	inc    %edx
f01097f1:	89 90 e4 05 00 00    	mov    %edx,0x5e4(%eax)
				}
			}
			e->page_last_WS_index ++;
f01097f7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097fd:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109803:	42                   	inc    %edx
f0109804:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
			e->page_last_WS_index %= (e->page_WS_max_size);
f010980a:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109810:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109816:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010981c:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109822:	8b 5a 74             	mov    0x74(%edx),%ebx
f0109825:	ba 00 00 00 00       	mov    $0x0,%edx
f010982a:	f7 f3                	div    %ebx
f010982c:	89 d0                	mov    %edx,%eax
f010982e:	89 81 2c 05 00 00    	mov    %eax,0x52c(%ecx)

			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f0109834:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010983a:	83 ec 04             	sub    $0x4,%esp
f010983d:	6a 01                	push   $0x1
f010983f:	ff 75 c0             	pushl  -0x40(%ebp)
f0109842:	50                   	push   %eax
f0109843:	e8 10 9d ff ff       	call   f0103558 <pf_add_empty_env_page>
f0109848:	83 c4 10             	add    $0x10,%esp
f010984b:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0109851:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f0109858:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010985b:	3b 85 58 ff ff ff    	cmp    -0xa8(%ebp),%eax
f0109861:	0f 83 9e fa ff ff    	jae    f0109305 <env_create+0x60a>

	}

	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109867:	83 ec 0c             	sub    $0xc,%esp
f010986a:	6a 02                	push   $0x2
f010986c:	e8 90 42 00 00       	call   f010db01 <isPageReplacmentAlgorithmLRU>
f0109871:	83 c4 10             	add    $0x10,%esp
f0109874:	85 c0                	test   %eax,%eax
f0109876:	74 72                	je     f01098ea <env_create+0xbef>
	{
		struct WorkingSetElement * elm = NULL;
f0109878:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
		LIST_FOREACH(elm, &(e->SecondList))
f010987f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109885:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010988b:	89 45 bc             	mov    %eax,-0x44(%ebp)
f010988e:	eb 2b                	jmp    f01098bb <env_create+0xbc0>
		{
			//set it's PRESENT bit to 0
			pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f0109890:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0109893:	8b 10                	mov    (%eax),%edx
f0109895:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010989b:	8b 40 5c             	mov    0x5c(%eax),%eax
f010989e:	6a 01                	push   $0x1
f01098a0:	6a 00                	push   $0x0
f01098a2:	52                   	push   %edx
f01098a3:	50                   	push   %eax
f01098a4:	e8 74 e2 ff ff       	call   f0107b1d <pt_set_page_permissions>
f01098a9:	83 c4 10             	add    $0x10,%esp
	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		struct WorkingSetElement * elm = NULL;
		LIST_FOREACH(elm, &(e->SecondList))
f01098ac:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098b2:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f01098b8:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01098bb:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098c1:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f01098c5:	74 08                	je     f01098cf <env_create+0xbd4>
f01098c7:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01098ca:	8b 52 10             	mov    0x10(%edx),%edx
f01098cd:	eb 05                	jmp    f01098d4 <env_create+0xbd9>
f01098cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01098d4:	89 90 e0 05 00 00    	mov    %edx,0x5e0(%eax)
f01098da:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f01098e0:	85 c0                	test   %eax,%eax
f01098e2:	75 ac                	jne    f0109890 <env_create+0xb95>
f01098e4:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f01098e8:	75 a6                	jne    f0109890 <env_create+0xb95>
f01098ea:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01098ed:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01098f0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01098f3:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f01098f6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
}
f01098fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01098ff:	5b                   	pop    %ebx
f0109900:	5e                   	pop    %esi
f0109901:	5f                   	pop    %edi
f0109902:	5d                   	pop    %ebp
f0109903:	c3                   	ret    

f0109904 <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f0109904:	55                   	push   %ebp
f0109905:	89 e5                	mov    %esp,%ebp
f0109907:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f010990a:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010990f:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109912:	74 25                	je     f0109939 <env_run+0x35>
	{
		curenv = e ;
f0109914:	8b 45 08             	mov    0x8(%ebp),%eax
f0109917:	a3 14 72 65 f0       	mov    %eax,0xf0657214
		curenv->env_runs++ ;
f010991c:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f0109921:	8b 50 58             	mov    0x58(%eax),%edx
f0109924:	42                   	inc    %edx
f0109925:	89 50 58             	mov    %edx,0x58(%eax)
		lcr3(curenv->env_cr3) ;
f0109928:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010992d:	8b 40 60             	mov    0x60(%eax),%eax
f0109930:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109933:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109936:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f0109939:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010993e:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f0109945:	e8 e9 a7 ff ff       	call   f0104133 <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f010994a:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010994f:	83 ec 0c             	sub    $0xc,%esp
f0109952:	50                   	push   %eax
f0109953:	e8 0f 01 00 00       	call   f0109a67 <env_pop_tf>

f0109958 <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f0109958:	55                   	push   %ebp
f0109959:	89 e5                	mov    %esp,%ebp
f010995b:	83 ec 08             	sub    $0x8,%esp
	/********DON'T CHANGE THIS LINE***********/
#if USE_KHEAP
	unshare_pws_at_user_space(e);
f010995e:	83 ec 0c             	sub    $0xc,%esp
f0109961:	ff 75 08             	pushl  0x8(%ebp)
f0109964:	e8 f5 10 00 00       	call   f010aa5e <unshare_pws_at_user_space>
f0109969:	83 c4 10             	add    $0x10,%esp
#endif
	/*****************************************/
	//TODO: [PROJECT MS3 - BONUS] [EXIT ENV] env_free
	// your code is here, remove the panic and write your code
	panic("env_free() is not implemented yet...!!");
f010996c:	83 ec 04             	sub    $0x4,%esp
f010996f:	68 48 62 13 f0       	push   $0xf0136248
f0109974:	68 9d 01 00 00       	push   $0x19d
f0109979:	68 e9 61 13 f0       	push   $0xf01361e9
f010997e:	e8 78 68 ff ff       	call   f01001fb <_panic>

f0109983 <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
/*2015*///Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f0109983:	55                   	push   %ebp
f0109984:	89 e5                	mov    %esp,%ebp
f0109986:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f0109989:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010998e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109991:	83 ec 0c             	sub    $0xc,%esp
f0109994:	50                   	push   %eax
f0109995:	e8 31 b8 ff ff       	call   f01051cb <sched_exit_env>
f010999a:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f010999d:	e8 a3 ac ff ff       	call   f0104645 <fos_scheduler>

f01099a2 <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f01099a2:	55                   	push   %ebp
f01099a3:	89 e5                	mov    %esp,%ebp
f01099a5:	53                   	push   %ebx
f01099a6:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f01099a9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01099ad:	75 15                	jne    f01099c4 <envid2env+0x22>
		*env_store = curenv;
f01099af:	8b 15 14 72 65 f0    	mov    0xf0657214,%edx
f01099b5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01099b8:	89 10                	mov    %edx,(%eax)
		return 0;
f01099ba:	b8 00 00 00 00       	mov    $0x0,%eax
f01099bf:	e9 9e 00 00 00       	jmp    f0109a62 <envid2env+0xc0>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f01099c4:	8b 1d 10 72 65 f0    	mov    0xf0657210,%ebx
f01099ca:	83 ec 0c             	sub    $0xc,%esp
f01099cd:	68 b1 02 00 00       	push   $0x2b1
f01099d2:	e8 25 60 02 00       	call   f012f9fc <nearest_pow2_ceil>
f01099d7:	83 c4 10             	add    $0x10,%esp
f01099da:	8d 50 ff             	lea    -0x1(%eax),%edx
f01099dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01099e0:	21 c2                	and    %eax,%edx
f01099e2:	89 d0                	mov    %edx,%eax
f01099e4:	c1 e0 03             	shl    $0x3,%eax
f01099e7:	01 d0                	add    %edx,%eax
f01099e9:	01 c0                	add    %eax,%eax
f01099eb:	01 d0                	add    %edx,%eax
f01099ed:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01099f4:	01 d0                	add    %edx,%eax
f01099f6:	c1 e0 04             	shl    $0x4,%eax
f01099f9:	01 d8                	add    %ebx,%eax
f01099fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f01099fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a01:	8b 40 54             	mov    0x54(%eax),%eax
f0109a04:	85 c0                	test   %eax,%eax
f0109a06:	74 0b                	je     f0109a13 <envid2env+0x71>
f0109a08:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a0b:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109a0e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109a11:	74 10                	je     f0109a23 <envid2env+0x81>
		*env_store = 0;
f0109a13:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109a16:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109a1c:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109a21:	eb 3f                	jmp    f0109a62 <envid2env+0xc0>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f0109a23:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0109a27:	74 2c                	je     f0109a55 <envid2env+0xb3>
f0109a29:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f0109a2e:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0109a31:	74 22                	je     f0109a55 <envid2env+0xb3>
f0109a33:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a36:	8b 50 50             	mov    0x50(%eax),%edx
f0109a39:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f0109a3e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109a41:	39 c2                	cmp    %eax,%edx
f0109a43:	74 10                	je     f0109a55 <envid2env+0xb3>
		*env_store = 0;
f0109a45:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109a48:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109a4e:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109a53:	eb 0d                	jmp    f0109a62 <envid2env+0xc0>
	}

	*env_store = e;
f0109a55:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109a58:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109a5b:	89 10                	mov    %edx,(%eax)
	return 0;
f0109a5d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109a62:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109a65:	c9                   	leave  
f0109a66:	c3                   	ret    

f0109a67 <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f0109a67:	55                   	push   %ebp
f0109a68:	89 e5                	mov    %esp,%ebp
f0109a6a:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f0109a6d:	8b 65 08             	mov    0x8(%ebp),%esp
f0109a70:	61                   	popa   
f0109a71:	07                   	pop    %es
f0109a72:	1f                   	pop    %ds
f0109a73:	83 c4 08             	add    $0x8,%esp
f0109a76:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f0109a77:	83 ec 04             	sub    $0x4,%esp
f0109a7a:	68 6f 62 13 f0       	push   $0xf013626f
f0109a7f:	68 fc 01 00 00       	push   $0x1fc
f0109a84:	68 e9 61 13 f0       	push   $0xf01361e9
f0109a89:	e8 6d 67 ff ff       	call   f01001fb <_panic>

f0109a8e <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f0109a8e:	55                   	push   %ebp
f0109a8f:	89 e5                	mov    %esp,%ebp
f0109a91:	53                   	push   %ebx
f0109a92:	83 ec 14             	sub    $0x14,%esp
	int iEnv = NENV-1;
f0109a95:	c7 45 f4 b0 02 00 00 	movl   $0x2b0,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f0109a9c:	e9 73 01 00 00       	jmp    f0109c14 <env_init+0x186>
	{
		envs[iEnv].env_status = ENV_FREE;
f0109aa1:	8b 0d 10 72 65 f0    	mov    0xf0657210,%ecx
f0109aa7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109aaa:	89 d0                	mov    %edx,%eax
f0109aac:	c1 e0 03             	shl    $0x3,%eax
f0109aaf:	01 d0                	add    %edx,%eax
f0109ab1:	01 c0                	add    %eax,%eax
f0109ab3:	01 d0                	add    %edx,%eax
f0109ab5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109abc:	01 d0                	add    %edx,%eax
f0109abe:	c1 e0 04             	shl    $0x4,%eax
f0109ac1:	01 c8                	add    %ecx,%eax
f0109ac3:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f0109aca:	8b 0d 10 72 65 f0    	mov    0xf0657210,%ecx
f0109ad0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109ad3:	89 d0                	mov    %edx,%eax
f0109ad5:	c1 e0 03             	shl    $0x3,%eax
f0109ad8:	01 d0                	add    %edx,%eax
f0109ada:	01 c0                	add    %eax,%eax
f0109adc:	01 d0                	add    %edx,%eax
f0109ade:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109ae5:	01 d0                	add    %edx,%eax
f0109ae7:	c1 e0 04             	shl    $0x4,%eax
f0109aea:	01 c8                	add    %ecx,%eax
f0109aec:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f0109af3:	8b 0d 10 72 65 f0    	mov    0xf0657210,%ecx
f0109af9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109afc:	89 d0                	mov    %edx,%eax
f0109afe:	c1 e0 03             	shl    $0x3,%eax
f0109b01:	01 d0                	add    %edx,%eax
f0109b03:	01 c0                	add    %eax,%eax
f0109b05:	01 d0                	add    %edx,%eax
f0109b07:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109b0e:	01 d0                	add    %edx,%eax
f0109b10:	c1 e0 04             	shl    $0x4,%eax
f0109b13:	01 c8                	add    %ecx,%eax
f0109b15:	85 c0                	test   %eax,%eax
f0109b17:	75 17                	jne    f0109b30 <env_init+0xa2>
f0109b19:	83 ec 04             	sub    $0x4,%esp
f0109b1c:	68 24 62 13 f0       	push   $0xf0136224
f0109b21:	68 18 02 00 00       	push   $0x218
f0109b26:	68 e9 61 13 f0       	push   $0xf01361e9
f0109b2b:	e8 cb 66 ff ff       	call   f01001fb <_panic>
f0109b30:	8b 0d 10 72 65 f0    	mov    0xf0657210,%ecx
f0109b36:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109b39:	89 d0                	mov    %edx,%eax
f0109b3b:	c1 e0 03             	shl    $0x3,%eax
f0109b3e:	01 d0                	add    %edx,%eax
f0109b40:	01 c0                	add    %eax,%eax
f0109b42:	01 d0                	add    %edx,%eax
f0109b44:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109b4b:	01 d0                	add    %edx,%eax
f0109b4d:	c1 e0 04             	shl    $0x4,%eax
f0109b50:	01 c8                	add    %ecx,%eax
f0109b52:	8b 15 18 72 65 f0    	mov    0xf0657218,%edx
f0109b58:	89 50 44             	mov    %edx,0x44(%eax)
f0109b5b:	8b 40 44             	mov    0x44(%eax),%eax
f0109b5e:	85 c0                	test   %eax,%eax
f0109b60:	74 2d                	je     f0109b8f <env_init+0x101>
f0109b62:	8b 0d 18 72 65 f0    	mov    0xf0657218,%ecx
f0109b68:	8b 1d 10 72 65 f0    	mov    0xf0657210,%ebx
f0109b6e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109b71:	89 d0                	mov    %edx,%eax
f0109b73:	c1 e0 03             	shl    $0x3,%eax
f0109b76:	01 d0                	add    %edx,%eax
f0109b78:	01 c0                	add    %eax,%eax
f0109b7a:	01 d0                	add    %edx,%eax
f0109b7c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109b83:	01 d0                	add    %edx,%eax
f0109b85:	c1 e0 04             	shl    $0x4,%eax
f0109b88:	01 d8                	add    %ebx,%eax
f0109b8a:	89 41 48             	mov    %eax,0x48(%ecx)
f0109b8d:	eb 27                	jmp    f0109bb6 <env_init+0x128>
f0109b8f:	8b 0d 10 72 65 f0    	mov    0xf0657210,%ecx
f0109b95:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109b98:	89 d0                	mov    %edx,%eax
f0109b9a:	c1 e0 03             	shl    $0x3,%eax
f0109b9d:	01 d0                	add    %edx,%eax
f0109b9f:	01 c0                	add    %eax,%eax
f0109ba1:	01 d0                	add    %edx,%eax
f0109ba3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109baa:	01 d0                	add    %edx,%eax
f0109bac:	c1 e0 04             	shl    $0x4,%eax
f0109baf:	01 c8                	add    %ecx,%eax
f0109bb1:	a3 1c 72 65 f0       	mov    %eax,0xf065721c
f0109bb6:	8b 0d 10 72 65 f0    	mov    0xf0657210,%ecx
f0109bbc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109bbf:	89 d0                	mov    %edx,%eax
f0109bc1:	c1 e0 03             	shl    $0x3,%eax
f0109bc4:	01 d0                	add    %edx,%eax
f0109bc6:	01 c0                	add    %eax,%eax
f0109bc8:	01 d0                	add    %edx,%eax
f0109bca:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109bd1:	01 d0                	add    %edx,%eax
f0109bd3:	c1 e0 04             	shl    $0x4,%eax
f0109bd6:	01 c8                	add    %ecx,%eax
f0109bd8:	a3 18 72 65 f0       	mov    %eax,0xf0657218
f0109bdd:	8b 0d 10 72 65 f0    	mov    0xf0657210,%ecx
f0109be3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109be6:	89 d0                	mov    %edx,%eax
f0109be8:	c1 e0 03             	shl    $0x3,%eax
f0109beb:	01 d0                	add    %edx,%eax
f0109bed:	01 c0                	add    %eax,%eax
f0109bef:	01 d0                	add    %edx,%eax
f0109bf1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109bf8:	01 d0                	add    %edx,%eax
f0109bfa:	c1 e0 04             	shl    $0x4,%eax
f0109bfd:	01 c8                	add    %ecx,%eax
f0109bff:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109c06:	a1 24 72 65 f0       	mov    0xf0657224,%eax
f0109c0b:	40                   	inc    %eax
f0109c0c:	a3 24 72 65 f0       	mov    %eax,0xf0657224
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f0109c11:	ff 4d f4             	decl   -0xc(%ebp)
f0109c14:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109c18:	0f 89 83 fe ff ff    	jns    f0109aa1 <env_init+0x13>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f0109c1e:	90                   	nop
f0109c1f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109c22:	c9                   	leave  
f0109c23:	c3                   	ret    

f0109c24 <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f0109c24:	55                   	push   %ebp
f0109c25:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f0109c27:	8b 15 18 72 65 f0    	mov    0xf0657218,%edx
f0109c2d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c30:	89 10                	mov    %edx,(%eax)
f0109c32:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c35:	8b 00                	mov    (%eax),%eax
f0109c37:	85 c0                	test   %eax,%eax
f0109c39:	75 07                	jne    f0109c42 <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f0109c3b:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f0109c40:	eb 11                	jmp    f0109c53 <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f0109c42:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c45:	8b 00                	mov    (%eax),%eax
f0109c47:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f0109c4e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109c53:	5d                   	pop    %ebp
f0109c54:	c3                   	ret    

f0109c55 <free_environment>:
//===============================
// 3) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f0109c55:	55                   	push   %ebp
f0109c56:	89 e5                	mov    %esp,%ebp
f0109c58:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f0109c5b:	83 ec 04             	sub    $0x4,%esp
f0109c5e:	68 f0 05 00 00       	push   $0x5f0
f0109c63:	6a 00                	push   $0x0
f0109c65:	ff 75 08             	pushl  0x8(%ebp)
f0109c68:	e8 0b 72 02 00       	call   f0130e78 <memset>
f0109c6d:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f0109c70:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c73:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f0109c7a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109c7e:	75 17                	jne    f0109c97 <free_environment+0x42>
f0109c80:	83 ec 04             	sub    $0x4,%esp
f0109c83:	68 24 62 13 f0       	push   $0xf0136224
f0109c88:	68 35 02 00 00       	push   $0x235
f0109c8d:	68 e9 61 13 f0       	push   $0xf01361e9
f0109c92:	e8 64 65 ff ff       	call   f01001fb <_panic>
f0109c97:	8b 15 18 72 65 f0    	mov    0xf0657218,%edx
f0109c9d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ca0:	89 50 44             	mov    %edx,0x44(%eax)
f0109ca3:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ca6:	8b 40 44             	mov    0x44(%eax),%eax
f0109ca9:	85 c0                	test   %eax,%eax
f0109cab:	74 0d                	je     f0109cba <free_environment+0x65>
f0109cad:	a1 18 72 65 f0       	mov    0xf0657218,%eax
f0109cb2:	8b 55 08             	mov    0x8(%ebp),%edx
f0109cb5:	89 50 48             	mov    %edx,0x48(%eax)
f0109cb8:	eb 08                	jmp    f0109cc2 <free_environment+0x6d>
f0109cba:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cbd:	a3 1c 72 65 f0       	mov    %eax,0xf065721c
f0109cc2:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cc5:	a3 18 72 65 f0       	mov    %eax,0xf0657218
f0109cca:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ccd:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109cd4:	a1 24 72 65 f0       	mov    0xf0657224,%eax
f0109cd9:	40                   	inc    %eax
f0109cda:	a3 24 72 65 f0       	mov    %eax,0xf0657224
}
f0109cdf:	90                   	nop
f0109ce0:	c9                   	leave  
f0109ce1:	c3                   	ret    

f0109ce2 <create_user_page_WS>:

//===============================================
// 4) DYNAMICALLY ALLOCATE SPACE FOR WORKING SET:
//===============================================
void * create_user_page_WS(struct Env * e, unsigned int numOfElements)
{
f0109ce2:	55                   	push   %ebp
f0109ce3:	89 e5                	mov    %esp,%ebp
f0109ce5:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [KERNEL DYNAMIC ALLOC] create_user_page_WS()
	// Write your code here, remove the panic and write your code
	panic("create_user_page_WS() is not implemented yet...!!");
f0109ce8:	83 ec 04             	sub    $0x4,%esp
f0109ceb:	68 7c 62 13 f0       	push   $0xf013627c
f0109cf0:	68 3f 02 00 00       	push   $0x23f
f0109cf5:	68 e9 61 13 f0       	push   $0xf01361e9
f0109cfa:	e8 fc 64 ff ff       	call   f01001fb <_panic>

f0109cff <create_user_directory>:

//==================================================
// 5) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f0109cff:	55                   	push   %ebp
f0109d00:	89 e5                	mov    %esp,%ebp
f0109d02:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [KERNEL DYNAMIC ALLOC] create_user_directory()
	// Write your code here, remove the panic and write your code
	panic("create_user_directory() is not implemented yet...!!");
f0109d05:	83 ec 04             	sub    $0x4,%esp
f0109d08:	68 b0 62 13 f0       	push   $0xf01362b0
f0109d0d:	68 4b 02 00 00       	push   $0x24b
f0109d12:	68 e9 61 13 f0       	push   $0xf01361e9
f0109d17:	e8 df 64 ff ff       	call   f01001fb <_panic>

f0109d1c <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f0109d1c:	55                   	push   %ebp
f0109d1d:	89 e5                	mov    %esp,%ebp
f0109d1f:	53                   	push   %ebx
f0109d20:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f0109d23:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109d26:	8b 40 0c             	mov    0xc(%eax),%eax
f0109d29:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f0109d2c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109d2f:	8b 40 08             	mov    0x8(%eax),%eax
f0109d32:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f0109d35:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0109d3c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0109d3f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0109d42:	01 c2                	add    %eax,%edx
f0109d44:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0109d47:	01 d0                	add    %edx,%eax
f0109d49:	48                   	dec    %eax
f0109d4a:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0109d4d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109d50:	ba 00 00 00 00       	mov    $0x0,%edx
f0109d55:	f7 75 dc             	divl   -0x24(%ebp)
f0109d58:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109d5b:	29 d0                	sub    %edx,%eax
f0109d5d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f0109d60:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109d63:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0109d66:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109d69:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109d6e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f0109d71:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f0109d78:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f0109d7f:	8b 45 10             	mov    0x10(%ebp),%eax
f0109d82:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f0109d88:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f0109d8f:	0f 85 c8 05 00 00    	jne    f010a35d <program_segment_alloc_map_copy_workingset+0x641>
f0109d95:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d98:	05 5c 05 00 00       	add    $0x55c,%eax
f0109d9d:	83 ec 08             	sub    $0x8,%esp
f0109da0:	68 e4 62 13 f0       	push   $0xf01362e4
f0109da5:	50                   	push   %eax
f0109da6:	e8 eb 6f 02 00       	call   f0130d96 <strcmp>
f0109dab:	83 c4 10             	add    $0x10,%esp
f0109dae:	85 c0                	test   %eax,%eax
f0109db0:	0f 84 a7 05 00 00    	je     f010a35d <program_segment_alloc_map_copy_workingset+0x641>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f0109db6:	8b 45 14             	mov    0x14(%ebp),%eax
f0109db9:	83 f8 06             	cmp    $0x6,%eax
f0109dbc:	76 05                	jbe    f0109dc3 <program_segment_alloc_map_copy_workingset+0xa7>
f0109dbe:	b8 06 00 00 00       	mov    $0x6,%eax
f0109dc3:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f0109dc6:	e9 92 05 00 00       	jmp    f010a35d <program_segment_alloc_map_copy_workingset+0x641>
	{
		// Allocate a page
		allocate_frame(&p) ;
f0109dcb:	83 ec 0c             	sub    $0xc,%esp
f0109dce:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0109dd1:	50                   	push   %eax
f0109dd2:	e8 44 ca ff ff       	call   f010681b <allocate_frame>
f0109dd7:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f0109dda:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0109ddd:	8b 45 08             	mov    0x8(%ebp),%eax
f0109de0:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109de3:	6a 06                	push   $0x6
f0109de5:	ff 75 f4             	pushl  -0xc(%ebp)
f0109de8:	52                   	push   %edx
f0109de9:	50                   	push   %eax
f0109dea:	e8 37 d0 ff ff       	call   f0106e26 <loadtime_map_frame>
f0109def:	83 c4 10             	add    $0x10,%esp
		LOG_STRING("segment page mapped");

		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));

		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f0109df2:	8b 45 08             	mov    0x8(%ebp),%eax
f0109df5:	8b 48 78             	mov    0x78(%eax),%ecx
f0109df8:	8b 45 08             	mov    0x8(%ebp),%eax
f0109dfb:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109e01:	89 d0                	mov    %edx,%eax
f0109e03:	01 c0                	add    %eax,%eax
f0109e05:	01 d0                	add    %edx,%eax
f0109e07:	c1 e0 03             	shl    $0x3,%eax
f0109e0a:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0109e0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109e10:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f0109e12:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e15:	8b 48 78             	mov    0x78(%eax),%ecx
f0109e18:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e1b:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109e21:	89 d0                	mov    %edx,%eax
f0109e23:	01 c0                	add    %eax,%eax
f0109e25:	01 d0                	add    %edx,%eax
f0109e27:	c1 e0 03             	shl    $0x3,%eax
f0109e2a:	01 c8                	add    %ecx,%eax
f0109e2c:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f0109e30:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e33:	8b 48 78             	mov    0x78(%eax),%ecx
f0109e36:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e39:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109e3f:	89 d0                	mov    %edx,%eax
f0109e41:	01 c0                	add    %eax,%eax
f0109e43:	01 d0                	add    %edx,%eax
f0109e45:	c1 e0 03             	shl    $0x3,%eax
f0109e48:	01 c8                	add    %ecx,%eax
f0109e4a:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109e51:	83 ec 0c             	sub    $0xc,%esp
f0109e54:	6a 02                	push   $0x2
f0109e56:	e8 a6 3c 00 00       	call   f010db01 <isPageReplacmentAlgorithmLRU>
f0109e5b:	83 c4 10             	add    $0x10,%esp
f0109e5e:	85 c0                	test   %eax,%eax
f0109e60:	0f 84 c8 03 00 00    	je     f010a22e <program_segment_alloc_map_copy_workingset+0x512>
		{
			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109e66:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e69:	8b 48 78             	mov    0x78(%eax),%ecx
f0109e6c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e6f:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109e75:	89 d0                	mov    %edx,%eax
f0109e77:	01 c0                	add    %eax,%eax
f0109e79:	01 d0                	add    %edx,%eax
f0109e7b:	c1 e0 03             	shl    $0x3,%eax
f0109e7e:	01 c8                	add    %ecx,%eax
f0109e80:	85 c0                	test   %eax,%eax
f0109e82:	75 17                	jne    f0109e9b <program_segment_alloc_map_copy_workingset+0x17f>
f0109e84:	83 ec 04             	sub    $0x4,%esp
f0109e87:	68 06 62 13 f0       	push   $0xf0136206
f0109e8c:	68 7d 02 00 00       	push   $0x27d
f0109e91:	68 e9 61 13 f0       	push   $0xf01361e9
f0109e96:	e8 60 63 ff ff       	call   f01001fb <_panic>
f0109e9b:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e9e:	8b 48 78             	mov    0x78(%eax),%ecx
f0109ea1:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ea4:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109eaa:	89 d0                	mov    %edx,%eax
f0109eac:	01 c0                	add    %eax,%eax
f0109eae:	01 d0                	add    %edx,%eax
f0109eb0:	c1 e0 03             	shl    $0x3,%eax
f0109eb3:	01 c8                	add    %ecx,%eax
f0109eb5:	8b 40 10             	mov    0x10(%eax),%eax
f0109eb8:	85 c0                	test   %eax,%eax
f0109eba:	74 3f                	je     f0109efb <program_segment_alloc_map_copy_workingset+0x1df>
f0109ebc:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ebf:	8b 48 78             	mov    0x78(%eax),%ecx
f0109ec2:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ec5:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109ecb:	89 d0                	mov    %edx,%eax
f0109ecd:	01 c0                	add    %eax,%eax
f0109ecf:	01 d0                	add    %edx,%eax
f0109ed1:	c1 e0 03             	shl    $0x3,%eax
f0109ed4:	01 c8                	add    %ecx,%eax
f0109ed6:	8b 50 10             	mov    0x10(%eax),%edx
f0109ed9:	8b 45 08             	mov    0x8(%ebp),%eax
f0109edc:	8b 58 78             	mov    0x78(%eax),%ebx
f0109edf:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ee2:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109ee8:	89 c8                	mov    %ecx,%eax
f0109eea:	01 c0                	add    %eax,%eax
f0109eec:	01 c8                	add    %ecx,%eax
f0109eee:	c1 e0 03             	shl    $0x3,%eax
f0109ef1:	01 d8                	add    %ebx,%eax
f0109ef3:	8b 40 14             	mov    0x14(%eax),%eax
f0109ef6:	89 42 14             	mov    %eax,0x14(%edx)
f0109ef9:	eb 26                	jmp    f0109f21 <program_segment_alloc_map_copy_workingset+0x205>
f0109efb:	8b 45 08             	mov    0x8(%ebp),%eax
f0109efe:	8b 48 78             	mov    0x78(%eax),%ecx
f0109f01:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f04:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109f0a:	89 d0                	mov    %edx,%eax
f0109f0c:	01 c0                	add    %eax,%eax
f0109f0e:	01 d0                	add    %edx,%eax
f0109f10:	c1 e0 03             	shl    $0x3,%eax
f0109f13:	01 c8                	add    %ecx,%eax
f0109f15:	8b 50 14             	mov    0x14(%eax),%edx
f0109f18:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f1b:	89 90 bc 05 00 00    	mov    %edx,0x5bc(%eax)
f0109f21:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f24:	8b 48 78             	mov    0x78(%eax),%ecx
f0109f27:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f2a:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109f30:	89 d0                	mov    %edx,%eax
f0109f32:	01 c0                	add    %eax,%eax
f0109f34:	01 d0                	add    %edx,%eax
f0109f36:	c1 e0 03             	shl    $0x3,%eax
f0109f39:	01 c8                	add    %ecx,%eax
f0109f3b:	8b 40 14             	mov    0x14(%eax),%eax
f0109f3e:	85 c0                	test   %eax,%eax
f0109f40:	74 3f                	je     f0109f81 <program_segment_alloc_map_copy_workingset+0x265>
f0109f42:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f45:	8b 48 78             	mov    0x78(%eax),%ecx
f0109f48:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f4b:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109f51:	89 d0                	mov    %edx,%eax
f0109f53:	01 c0                	add    %eax,%eax
f0109f55:	01 d0                	add    %edx,%eax
f0109f57:	c1 e0 03             	shl    $0x3,%eax
f0109f5a:	01 c8                	add    %ecx,%eax
f0109f5c:	8b 50 14             	mov    0x14(%eax),%edx
f0109f5f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f62:	8b 58 78             	mov    0x78(%eax),%ebx
f0109f65:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f68:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109f6e:	89 c8                	mov    %ecx,%eax
f0109f70:	01 c0                	add    %eax,%eax
f0109f72:	01 c8                	add    %ecx,%eax
f0109f74:	c1 e0 03             	shl    $0x3,%eax
f0109f77:	01 d8                	add    %ebx,%eax
f0109f79:	8b 40 10             	mov    0x10(%eax),%eax
f0109f7c:	89 42 10             	mov    %eax,0x10(%edx)
f0109f7f:	eb 26                	jmp    f0109fa7 <program_segment_alloc_map_copy_workingset+0x28b>
f0109f81:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f84:	8b 48 78             	mov    0x78(%eax),%ecx
f0109f87:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f8a:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109f90:	89 d0                	mov    %edx,%eax
f0109f92:	01 c0                	add    %eax,%eax
f0109f94:	01 d0                	add    %edx,%eax
f0109f96:	c1 e0 03             	shl    $0x3,%eax
f0109f99:	01 c8                	add    %ecx,%eax
f0109f9b:	8b 50 10             	mov    0x10(%eax),%edx
f0109f9e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fa1:	89 90 b8 05 00 00    	mov    %edx,0x5b8(%eax)
f0109fa7:	8b 45 08             	mov    0x8(%ebp),%eax
f0109faa:	8b 48 78             	mov    0x78(%eax),%ecx
f0109fad:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fb0:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109fb6:	89 d0                	mov    %edx,%eax
f0109fb8:	01 c0                	add    %eax,%eax
f0109fba:	01 d0                	add    %edx,%eax
f0109fbc:	c1 e0 03             	shl    $0x3,%eax
f0109fbf:	01 c8                	add    %ecx,%eax
f0109fc1:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f0109fc8:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fcb:	8b 48 78             	mov    0x78(%eax),%ecx
f0109fce:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fd1:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109fd7:	89 d0                	mov    %edx,%eax
f0109fd9:	01 c0                	add    %eax,%eax
f0109fdb:	01 d0                	add    %edx,%eax
f0109fdd:	c1 e0 03             	shl    $0x3,%eax
f0109fe0:	01 c8                	add    %ecx,%eax
f0109fe2:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109fe9:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fec:	8b 80 c4 05 00 00    	mov    0x5c4(%eax),%eax
f0109ff2:	8d 50 ff             	lea    -0x1(%eax),%edx
f0109ff5:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ff8:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f0109ffe:	8b 45 08             	mov    0x8(%ebp),%eax
f010a001:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010a007:	8b 45 08             	mov    0x8(%ebp),%eax
f010a00a:	8b 80 e8 05 00 00    	mov    0x5e8(%eax),%eax
f010a010:	48                   	dec    %eax
f010a011:	39 c2                	cmp    %eax,%edx
f010a013:	0f 83 0d 01 00 00    	jae    f010a126 <program_segment_alloc_map_copy_workingset+0x40a>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a019:	8b 45 08             	mov    0x8(%ebp),%eax
f010a01c:	8b 48 78             	mov    0x78(%eax),%ecx
f010a01f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a022:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a028:	89 d0                	mov    %edx,%eax
f010a02a:	01 c0                	add    %eax,%eax
f010a02c:	01 d0                	add    %edx,%eax
f010a02e:	c1 e0 03             	shl    $0x3,%eax
f010a031:	01 c8                	add    %ecx,%eax
f010a033:	85 c0                	test   %eax,%eax
f010a035:	75 17                	jne    f010a04e <program_segment_alloc_map_copy_workingset+0x332>
f010a037:	83 ec 04             	sub    $0x4,%esp
f010a03a:	68 24 62 13 f0       	push   $0xf0136224
f010a03f:	68 81 02 00 00       	push   $0x281
f010a044:	68 e9 61 13 f0       	push   $0xf01361e9
f010a049:	e8 ad 61 ff ff       	call   f01001fb <_panic>
f010a04e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a051:	8b 48 78             	mov    0x78(%eax),%ecx
f010a054:	8b 45 08             	mov    0x8(%ebp),%eax
f010a057:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a05d:	89 d0                	mov    %edx,%eax
f010a05f:	01 c0                	add    %eax,%eax
f010a061:	01 d0                	add    %edx,%eax
f010a063:	c1 e0 03             	shl    $0x3,%eax
f010a066:	01 c8                	add    %ecx,%eax
f010a068:	8b 55 08             	mov    0x8(%ebp),%edx
f010a06b:	8b 92 c8 05 00 00    	mov    0x5c8(%edx),%edx
f010a071:	89 50 10             	mov    %edx,0x10(%eax)
f010a074:	8b 40 10             	mov    0x10(%eax),%eax
f010a077:	85 c0                	test   %eax,%eax
f010a079:	74 28                	je     f010a0a3 <program_segment_alloc_map_copy_workingset+0x387>
f010a07b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a07e:	8b 90 c8 05 00 00    	mov    0x5c8(%eax),%edx
f010a084:	8b 45 08             	mov    0x8(%ebp),%eax
f010a087:	8b 58 78             	mov    0x78(%eax),%ebx
f010a08a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a08d:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a093:	89 c8                	mov    %ecx,%eax
f010a095:	01 c0                	add    %eax,%eax
f010a097:	01 c8                	add    %ecx,%eax
f010a099:	c1 e0 03             	shl    $0x3,%eax
f010a09c:	01 d8                	add    %ebx,%eax
f010a09e:	89 42 14             	mov    %eax,0x14(%edx)
f010a0a1:	eb 24                	jmp    f010a0c7 <program_segment_alloc_map_copy_workingset+0x3ab>
f010a0a3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0a6:	8b 48 78             	mov    0x78(%eax),%ecx
f010a0a9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0ac:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a0b2:	89 d0                	mov    %edx,%eax
f010a0b4:	01 c0                	add    %eax,%eax
f010a0b6:	01 d0                	add    %edx,%eax
f010a0b8:	c1 e0 03             	shl    $0x3,%eax
f010a0bb:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a0be:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0c1:	89 90 cc 05 00 00    	mov    %edx,0x5cc(%eax)
f010a0c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0ca:	8b 48 78             	mov    0x78(%eax),%ecx
f010a0cd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0d0:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a0d6:	89 d0                	mov    %edx,%eax
f010a0d8:	01 c0                	add    %eax,%eax
f010a0da:	01 d0                	add    %edx,%eax
f010a0dc:	c1 e0 03             	shl    $0x3,%eax
f010a0df:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a0e2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0e5:	89 90 c8 05 00 00    	mov    %edx,0x5c8(%eax)
f010a0eb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0ee:	8b 48 78             	mov    0x78(%eax),%ecx
f010a0f1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0f4:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a0fa:	89 d0                	mov    %edx,%eax
f010a0fc:	01 c0                	add    %eax,%eax
f010a0fe:	01 d0                	add    %edx,%eax
f010a100:	c1 e0 03             	shl    $0x3,%eax
f010a103:	01 c8                	add    %ecx,%eax
f010a105:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a10c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a10f:	8b 80 d4 05 00 00    	mov    0x5d4(%eax),%eax
f010a115:	8d 50 01             	lea    0x1(%eax),%edx
f010a118:	8b 45 08             	mov    0x8(%ebp),%eax
f010a11b:	89 90 d4 05 00 00    	mov    %edx,0x5d4(%eax)
f010a121:	e9 08 01 00 00       	jmp    f010a22e <program_segment_alloc_map_copy_workingset+0x512>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a126:	8b 45 08             	mov    0x8(%ebp),%eax
f010a129:	8b 48 78             	mov    0x78(%eax),%ecx
f010a12c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a12f:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a135:	89 d0                	mov    %edx,%eax
f010a137:	01 c0                	add    %eax,%eax
f010a139:	01 d0                	add    %edx,%eax
f010a13b:	c1 e0 03             	shl    $0x3,%eax
f010a13e:	01 c8                	add    %ecx,%eax
f010a140:	85 c0                	test   %eax,%eax
f010a142:	75 17                	jne    f010a15b <program_segment_alloc_map_copy_workingset+0x43f>
f010a144:	83 ec 04             	sub    $0x4,%esp
f010a147:	68 24 62 13 f0       	push   $0xf0136224
f010a14c:	68 86 02 00 00       	push   $0x286
f010a151:	68 e9 61 13 f0       	push   $0xf01361e9
f010a156:	e8 a0 60 ff ff       	call   f01001fb <_panic>
f010a15b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a15e:	8b 48 78             	mov    0x78(%eax),%ecx
f010a161:	8b 45 08             	mov    0x8(%ebp),%eax
f010a164:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a16a:	89 d0                	mov    %edx,%eax
f010a16c:	01 c0                	add    %eax,%eax
f010a16e:	01 d0                	add    %edx,%eax
f010a170:	c1 e0 03             	shl    $0x3,%eax
f010a173:	01 c8                	add    %ecx,%eax
f010a175:	8b 55 08             	mov    0x8(%ebp),%edx
f010a178:	8b 92 d8 05 00 00    	mov    0x5d8(%edx),%edx
f010a17e:	89 50 10             	mov    %edx,0x10(%eax)
f010a181:	8b 40 10             	mov    0x10(%eax),%eax
f010a184:	85 c0                	test   %eax,%eax
f010a186:	74 28                	je     f010a1b0 <program_segment_alloc_map_copy_workingset+0x494>
f010a188:	8b 45 08             	mov    0x8(%ebp),%eax
f010a18b:	8b 90 d8 05 00 00    	mov    0x5d8(%eax),%edx
f010a191:	8b 45 08             	mov    0x8(%ebp),%eax
f010a194:	8b 58 78             	mov    0x78(%eax),%ebx
f010a197:	8b 45 08             	mov    0x8(%ebp),%eax
f010a19a:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a1a0:	89 c8                	mov    %ecx,%eax
f010a1a2:	01 c0                	add    %eax,%eax
f010a1a4:	01 c8                	add    %ecx,%eax
f010a1a6:	c1 e0 03             	shl    $0x3,%eax
f010a1a9:	01 d8                	add    %ebx,%eax
f010a1ab:	89 42 14             	mov    %eax,0x14(%edx)
f010a1ae:	eb 24                	jmp    f010a1d4 <program_segment_alloc_map_copy_workingset+0x4b8>
f010a1b0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1b3:	8b 48 78             	mov    0x78(%eax),%ecx
f010a1b6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1b9:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a1bf:	89 d0                	mov    %edx,%eax
f010a1c1:	01 c0                	add    %eax,%eax
f010a1c3:	01 d0                	add    %edx,%eax
f010a1c5:	c1 e0 03             	shl    $0x3,%eax
f010a1c8:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a1cb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1ce:	89 90 dc 05 00 00    	mov    %edx,0x5dc(%eax)
f010a1d4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1d7:	8b 48 78             	mov    0x78(%eax),%ecx
f010a1da:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1dd:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a1e3:	89 d0                	mov    %edx,%eax
f010a1e5:	01 c0                	add    %eax,%eax
f010a1e7:	01 d0                	add    %edx,%eax
f010a1e9:	c1 e0 03             	shl    $0x3,%eax
f010a1ec:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a1ef:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1f2:	89 90 d8 05 00 00    	mov    %edx,0x5d8(%eax)
f010a1f8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1fb:	8b 48 78             	mov    0x78(%eax),%ecx
f010a1fe:	8b 45 08             	mov    0x8(%ebp),%eax
f010a201:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a207:	89 d0                	mov    %edx,%eax
f010a209:	01 c0                	add    %eax,%eax
f010a20b:	01 d0                	add    %edx,%eax
f010a20d:	c1 e0 03             	shl    $0x3,%eax
f010a210:	01 c8                	add    %ecx,%eax
f010a212:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a219:	8b 45 08             	mov    0x8(%ebp),%eax
f010a21c:	8b 80 e4 05 00 00    	mov    0x5e4(%eax),%eax
f010a222:	8d 50 01             	lea    0x1(%eax),%edx
f010a225:	8b 45 08             	mov    0x8(%ebp),%eax
f010a228:	89 90 e4 05 00 00    	mov    %edx,0x5e4(%eax)
			}
		}
		//=======================
		e->page_last_WS_index ++;
f010a22e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a231:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010a237:	8d 50 01             	lea    0x1(%eax),%edx
f010a23a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a23d:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f010a243:	8b 45 08             	mov    0x8(%ebp),%eax
f010a246:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010a24c:	8b 55 08             	mov    0x8(%ebp),%edx
f010a24f:	8b 4a 74             	mov    0x74(%edx),%ecx
f010a252:	ba 00 00 00 00       	mov    $0x0,%edx
f010a257:	f7 f1                	div    %ecx
f010a259:	8b 45 08             	mov    0x8(%ebp),%eax
f010a25c:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)

		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f010a262:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a265:	c1 e8 16             	shr    $0x16,%eax
f010a268:	89 c2                	mov    %eax,%edx
f010a26a:	8b 45 18             	mov    0x18(%ebp),%eax
f010a26d:	8b 00                	mov    (%eax),%eax
f010a26f:	39 c2                	cmp    %eax,%edx
f010a271:	0f 84 cf 00 00 00    	je     f010a346 <program_segment_alloc_map_copy_workingset+0x62a>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f010a277:	8b 45 08             	mov    0x8(%ebp),%eax
f010a27a:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a280:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a283:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010a286:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010a289:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010a28e:	89 c1                	mov    %eax,%ecx
f010a290:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a293:	89 d0                	mov    %edx,%eax
f010a295:	01 c0                	add    %eax,%eax
f010a297:	01 d0                	add    %edx,%eax
f010a299:	c1 e0 03             	shl    $0x3,%eax
f010a29c:	01 d8                	add    %ebx,%eax
f010a29e:	83 c0 7c             	add    $0x7c,%eax
f010a2a1:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f010a2a3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2a6:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a2ac:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a2af:	89 d0                	mov    %edx,%eax
f010a2b1:	01 c0                	add    %eax,%eax
f010a2b3:	01 d0                	add    %edx,%eax
f010a2b5:	c1 e0 03             	shl    $0x3,%eax
f010a2b8:	01 c8                	add    %ecx,%eax
f010a2ba:	83 e8 80             	sub    $0xffffff80,%eax
f010a2bd:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f010a2c0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2c3:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a2c9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a2cc:	89 d0                	mov    %edx,%eax
f010a2ce:	01 c0                	add    %eax,%eax
f010a2d0:	01 d0                	add    %edx,%eax
f010a2d2:	c1 e0 03             	shl    $0x3,%eax
f010a2d5:	01 c8                	add    %ecx,%eax
f010a2d7:	05 84 00 00 00       	add    $0x84,%eax
f010a2dc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f010a2e2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2e5:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a2eb:	8d 50 01             	lea    0x1(%eax),%edx
f010a2ee:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2f1:	89 90 30 05 00 00    	mov    %edx,0x530(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f010a2f7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2fa:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a300:	b9 32 00 00 00       	mov    $0x32,%ecx
f010a305:	ba 00 00 00 00       	mov    $0x0,%edx
f010a30a:	f7 f1                	div    %ecx
f010a30c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a30f:	89 90 30 05 00 00    	mov    %edx,0x530(%eax)
			if (e->table_last_WS_index == 0)
f010a315:	8b 45 08             	mov    0x8(%ebp),%eax
f010a318:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a31e:	85 c0                	test   %eax,%eax
f010a320:	75 17                	jne    f010a339 <program_segment_alloc_map_copy_workingset+0x61d>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f010a322:	83 ec 04             	sub    $0x4,%esp
f010a325:	68 e8 62 13 f0       	push   $0xf01362e8
f010a32a:	68 96 02 00 00       	push   $0x296
f010a32f:	68 e9 61 13 f0       	push   $0xf01361e9
f010a334:	e8 c2 5e ff ff       	call   f01001fb <_panic>
			(*lastTableNumber) = PDX(iVA);
f010a339:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a33c:	c1 e8 16             	shr    $0x16,%eax
f010a33f:	89 c2                	mov    %eax,%edx
f010a341:	8b 45 18             	mov    0x18(%ebp),%eax
f010a344:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f010a346:	8b 45 10             	mov    0x10(%ebp),%eax
f010a349:	8b 00                	mov    (%eax),%eax
f010a34b:	8d 50 01             	lea    0x1(%eax),%edx
f010a34e:	8b 45 10             	mov    0x10(%ebp),%eax
f010a351:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010a353:	ff 45 f0             	incl   -0x10(%ebp)
f010a356:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010a35d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a360:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010a363:	73 0c                	jae    f010a371 <program_segment_alloc_map_copy_workingset+0x655>
f010a365:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a368:	3b 45 14             	cmp    0x14(%ebp),%eax
f010a36b:	0f 82 5a fa ff ff    	jb     f0109dcb <program_segment_alloc_map_copy_workingset+0xaf>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f010a371:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a374:	8b 00                	mov    (%eax),%eax
f010a376:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f010a379:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a37c:	8b 40 0c             	mov    0xc(%eax),%eax
f010a37f:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a382:	eb 10                	jmp    f010a394 <program_segment_alloc_map_copy_workingset+0x678>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f010a384:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a387:	8a 10                	mov    (%eax),%dl
f010a389:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a38c:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f010a38e:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f010a391:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a394:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a397:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010a39a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a39d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a3a2:	89 c2                	mov    %eax,%edx
f010a3a4:	8b 45 10             	mov    0x10(%ebp),%eax
f010a3a7:	8b 00                	mov    (%eax),%eax
f010a3a9:	c1 e0 0c             	shl    $0xc,%eax
f010a3ac:	01 c2                	add    %eax,%edx
f010a3ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a3b1:	39 c2                	cmp    %eax,%edx
f010a3b3:	76 1d                	jbe    f010a3d2 <program_segment_alloc_map_copy_workingset+0x6b6>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f010a3b5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a3b8:	8b 50 04             	mov    0x4(%eax),%edx
f010a3bb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a3be:	01 c2                	add    %eax,%edx
f010a3c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a3c3:	39 c2                	cmp    %eax,%edx
f010a3c5:	77 bd                	ja     f010a384 <program_segment_alloc_map_copy_workingset+0x668>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a3c7:	eb 09                	jmp    f010a3d2 <program_segment_alloc_map_copy_workingset+0x6b6>
	{
		*dst_ptr = 0;
f010a3c9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a3cc:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f010a3cf:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a3d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a3d5:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010a3d8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010a3db:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a3e0:	89 c2                	mov    %eax,%edx
f010a3e2:	8b 45 10             	mov    0x10(%ebp),%eax
f010a3e5:	8b 00                	mov    (%eax),%eax
f010a3e7:	c1 e0 0c             	shl    $0xc,%eax
f010a3ea:	01 c2                	add    %eax,%edx
f010a3ec:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a3ef:	39 c2                	cmp    %eax,%edx
f010a3f1:	77 d6                	ja     f010a3c9 <program_segment_alloc_map_copy_workingset+0x6ad>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f010a3f3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a3f8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a3fb:	c9                   	leave  
f010a3fc:	c3                   	ret    

f010a3fd <initialize_environment>:
// and initialize the kernel portion of the new environment's address space.
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f010a3fd:	55                   	push   %ebp
f010a3fe:	89 e5                	mov    %esp,%ebp
f010a400:	53                   	push   %ebx
f010a401:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f010a404:	8b 45 08             	mov    0x8(%ebp),%eax
f010a407:	8b 55 0c             	mov    0xc(%ebp),%edx
f010a40a:	89 50 5c             	mov    %edx,0x5c(%eax)
	e->env_cr3 = phys_user_page_directory;
f010a40d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a410:	8b 55 10             	mov    0x10(%ebp),%edx
f010a413:	89 50 60             	mov    %edx,0x60(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a416:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a41d:	eb 17                	jmp    f010a436 <initialize_environment+0x39>
	{
		e->env_page_directory[i] = 0 ;
f010a41f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a422:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a425:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a428:	c1 e2 02             	shl    $0x2,%edx
f010a42b:	01 d0                	add    %edx,%eax
f010a42d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a433:	ff 45 f4             	incl   -0xc(%ebp)
f010a436:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a439:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f010a43e:	76 df                	jbe    f010a41f <initialize_environment+0x22>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a440:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f010a447:	eb 22                	jmp    f010a46b <initialize_environment+0x6e>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f010a449:	8b 45 08             	mov    0x8(%ebp),%eax
f010a44c:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a44f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a452:	c1 e2 02             	shl    $0x2,%edx
f010a455:	01 c2                	add    %eax,%edx
f010a457:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f010a45c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010a45f:	c1 e1 02             	shl    $0x2,%ecx
f010a462:	01 c8                	add    %ecx,%eax
f010a464:	8b 00                	mov    (%eax),%eax
f010a466:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a468:	ff 45 f4             	incl   -0xc(%ebp)
f010a46b:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010a472:	7e d5                	jle    f010a449 <initialize_environment+0x4c>
	}

	// Allocate the page working set for both kernel and user
#if USE_KHEAP == 1
	{
		e->ptr_pageWorkingSet = create_user_page_WS(e, e->page_WS_max_size);
f010a474:	8b 45 08             	mov    0x8(%ebp),%eax
f010a477:	8b 40 74             	mov    0x74(%eax),%eax
f010a47a:	83 ec 08             	sub    $0x8,%esp
f010a47d:	50                   	push   %eax
f010a47e:	ff 75 08             	pushl  0x8(%ebp)
f010a481:	e8 5c f8 ff ff       	call   f0109ce2 <create_user_page_WS>
f010a486:	83 c4 10             	add    $0x10,%esp
f010a489:	89 c2                	mov    %eax,%edx
f010a48b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a48e:	89 50 78             	mov    %edx,0x78(%eax)
		share_pws_at_user_space(e);
f010a491:	83 ec 0c             	sub    $0xc,%esp
f010a494:	ff 75 08             	pushl  0x8(%ebp)
f010a497:	e8 f3 04 00 00       	call   f010a98f <share_pws_at_user_space>
f010a49c:	83 c4 10             	add    $0x10,%esp
#endif


	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a49f:	83 ec 0c             	sub    $0xc,%esp
f010a4a2:	6a 02                	push   $0x2
f010a4a4:	e8 58 36 00 00       	call   f010db01 <isPageReplacmentAlgorithmLRU>
f010a4a9:	83 c4 10             	add    $0x10,%esp
f010a4ac:	85 c0                	test   %eax,%eax
f010a4ae:	0f 84 04 01 00 00    	je     f010a5b8 <initialize_environment+0x1bb>
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a4b4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010a4bb:	e9 e7 00 00 00       	jmp    f010a5a7 <initialize_environment+0x1aa>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f010a4c0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4c3:	8b 48 78             	mov    0x78(%eax),%ecx
f010a4c6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a4c9:	89 d0                	mov    %edx,%eax
f010a4cb:	01 c0                	add    %eax,%eax
f010a4cd:	01 d0                	add    %edx,%eax
f010a4cf:	c1 e0 03             	shl    $0x3,%eax
f010a4d2:	01 c8                	add    %ecx,%eax
f010a4d4:	85 c0                	test   %eax,%eax
f010a4d6:	75 17                	jne    f010a4ef <initialize_environment+0xf2>
f010a4d8:	83 ec 04             	sub    $0x4,%esp
f010a4db:	68 24 62 13 f0       	push   $0xf0136224
f010a4e0:	68 f4 02 00 00       	push   $0x2f4
f010a4e5:	68 e9 61 13 f0       	push   $0xf01361e9
f010a4ea:	e8 0c 5d ff ff       	call   f01001fb <_panic>
f010a4ef:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4f2:	8b 48 78             	mov    0x78(%eax),%ecx
f010a4f5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a4f8:	89 d0                	mov    %edx,%eax
f010a4fa:	01 c0                	add    %eax,%eax
f010a4fc:	01 d0                	add    %edx,%eax
f010a4fe:	c1 e0 03             	shl    $0x3,%eax
f010a501:	01 c8                	add    %ecx,%eax
f010a503:	8b 55 08             	mov    0x8(%ebp),%edx
f010a506:	8b 92 b8 05 00 00    	mov    0x5b8(%edx),%edx
f010a50c:	89 50 10             	mov    %edx,0x10(%eax)
f010a50f:	8b 40 10             	mov    0x10(%eax),%eax
f010a512:	85 c0                	test   %eax,%eax
f010a514:	74 22                	je     f010a538 <initialize_environment+0x13b>
f010a516:	8b 45 08             	mov    0x8(%ebp),%eax
f010a519:	8b 90 b8 05 00 00    	mov    0x5b8(%eax),%edx
f010a51f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a522:	8b 58 78             	mov    0x78(%eax),%ebx
f010a525:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010a528:	89 c8                	mov    %ecx,%eax
f010a52a:	01 c0                	add    %eax,%eax
f010a52c:	01 c8                	add    %ecx,%eax
f010a52e:	c1 e0 03             	shl    $0x3,%eax
f010a531:	01 d8                	add    %ebx,%eax
f010a533:	89 42 14             	mov    %eax,0x14(%edx)
f010a536:	eb 1e                	jmp    f010a556 <initialize_environment+0x159>
f010a538:	8b 45 08             	mov    0x8(%ebp),%eax
f010a53b:	8b 48 78             	mov    0x78(%eax),%ecx
f010a53e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a541:	89 d0                	mov    %edx,%eax
f010a543:	01 c0                	add    %eax,%eax
f010a545:	01 d0                	add    %edx,%eax
f010a547:	c1 e0 03             	shl    $0x3,%eax
f010a54a:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a54d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a550:	89 90 bc 05 00 00    	mov    %edx,0x5bc(%eax)
f010a556:	8b 45 08             	mov    0x8(%ebp),%eax
f010a559:	8b 48 78             	mov    0x78(%eax),%ecx
f010a55c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a55f:	89 d0                	mov    %edx,%eax
f010a561:	01 c0                	add    %eax,%eax
f010a563:	01 d0                	add    %edx,%eax
f010a565:	c1 e0 03             	shl    $0x3,%eax
f010a568:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a56b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a56e:	89 90 b8 05 00 00    	mov    %edx,0x5b8(%eax)
f010a574:	8b 45 08             	mov    0x8(%ebp),%eax
f010a577:	8b 48 78             	mov    0x78(%eax),%ecx
f010a57a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a57d:	89 d0                	mov    %edx,%eax
f010a57f:	01 c0                	add    %eax,%eax
f010a581:	01 d0                	add    %edx,%eax
f010a583:	c1 e0 03             	shl    $0x3,%eax
f010a586:	01 c8                	add    %ecx,%eax
f010a588:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a58f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a592:	8b 80 c4 05 00 00    	mov    0x5c4(%eax),%eax
f010a598:	8d 50 01             	lea    0x1(%eax),%edx
f010a59b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a59e:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)

	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a5a4:	ff 45 f0             	incl   -0x10(%ebp)
f010a5a7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5aa:	8b 50 74             	mov    0x74(%eax),%edx
f010a5ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a5b0:	39 c2                	cmp    %eax,%edx
f010a5b2:	0f 87 08 ff ff ff    	ja     f010a4c0 <initialize_environment+0xc3>
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010a5b8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a5bf:	eb 50                	jmp    f010a611 <initialize_environment+0x214>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f010a5c1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5c4:	8b 48 78             	mov    0x78(%eax),%ecx
f010a5c7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a5ca:	89 d0                	mov    %edx,%eax
f010a5cc:	01 c0                	add    %eax,%eax
f010a5ce:	01 d0                	add    %edx,%eax
f010a5d0:	c1 e0 03             	shl    $0x3,%eax
f010a5d3:	01 c8                	add    %ecx,%eax
f010a5d5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f010a5db:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5de:	8b 48 78             	mov    0x78(%eax),%ecx
f010a5e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a5e4:	89 d0                	mov    %edx,%eax
f010a5e6:	01 c0                	add    %eax,%eax
f010a5e8:	01 d0                	add    %edx,%eax
f010a5ea:	c1 e0 03             	shl    $0x3,%eax
f010a5ed:	01 c8                	add    %ecx,%eax
f010a5ef:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f010a5f3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5f6:	8b 48 78             	mov    0x78(%eax),%ecx
f010a5f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a5fc:	89 d0                	mov    %edx,%eax
f010a5fe:	01 c0                	add    %eax,%eax
f010a600:	01 d0                	add    %edx,%eax
f010a602:	c1 e0 03             	shl    $0x3,%eax
f010a605:	01 c8                	add    %ecx,%eax
f010a607:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010a60e:	ff 45 f4             	incl   -0xc(%ebp)
f010a611:	8b 45 08             	mov    0x8(%ebp),%eax
f010a614:	8b 50 74             	mov    0x74(%eax),%edx
f010a617:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a61a:	39 c2                	cmp    %eax,%edx
f010a61c:	77 a3                	ja     f010a5c1 <initialize_environment+0x1c4>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f010a61e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a621:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010a628:	00 00 00 

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010a62b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a632:	eb 50                	jmp    f010a684 <initialize_environment+0x287>
	{
		e->__ptr_tws[i].virtual_address = 0;
f010a634:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a637:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a63a:	89 d0                	mov    %edx,%eax
f010a63c:	01 c0                	add    %eax,%eax
f010a63e:	01 d0                	add    %edx,%eax
f010a640:	c1 e0 03             	shl    $0x3,%eax
f010a643:	01 c8                	add    %ecx,%eax
f010a645:	83 c0 7c             	add    $0x7c,%eax
f010a648:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f010a64e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a651:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a654:	89 d0                	mov    %edx,%eax
f010a656:	01 c0                	add    %eax,%eax
f010a658:	01 d0                	add    %edx,%eax
f010a65a:	c1 e0 03             	shl    $0x3,%eax
f010a65d:	01 c8                	add    %ecx,%eax
f010a65f:	83 e8 80             	sub    $0xffffff80,%eax
f010a662:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f010a665:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a668:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a66b:	89 d0                	mov    %edx,%eax
f010a66d:	01 c0                	add    %eax,%eax
f010a66f:	01 d0                	add    %edx,%eax
f010a671:	c1 e0 03             	shl    $0x3,%eax
f010a674:	01 c8                	add    %ecx,%eax
f010a676:	05 84 00 00 00       	add    $0x84,%eax
f010a67b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010a681:	ff 45 f4             	incl   -0xc(%ebp)
f010a684:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010a688:	7e aa                	jle    f010a634 <initialize_environment+0x237>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f010a68a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a68d:	c7 80 30 05 00 00 00 	movl   $0x0,0x530(%eax)
f010a694:	00 00 00 

	e->pageFaultsCounter=0;
f010a697:	8b 45 08             	mov    0x8(%ebp),%eax
f010a69a:	c7 80 34 05 00 00 00 	movl   $0x0,0x534(%eax)
f010a6a1:	00 00 00 
	e->tableFaultsCounter=0;
f010a6a4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6a7:	c7 80 38 05 00 00 00 	movl   $0x0,0x538(%eax)
f010a6ae:	00 00 00 

	e->freeingFullWSCounter = 0;
f010a6b1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6b4:	c7 80 3c 05 00 00 00 	movl   $0x0,0x53c(%eax)
f010a6bb:	00 00 00 
	e->freeingScarceMemCounter = 0;
f010a6be:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6c1:	c7 80 40 05 00 00 00 	movl   $0x0,0x540(%eax)
f010a6c8:	00 00 00 

	e->nModifiedPages=0;
f010a6cb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6ce:	c7 80 44 05 00 00 00 	movl   $0x0,0x544(%eax)
f010a6d5:	00 00 00 
	e->nNotModifiedPages=0;
f010a6d8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6db:	c7 80 48 05 00 00 00 	movl   $0x0,0x548(%eax)
f010a6e2:	00 00 00 
	e->nClocks = 0;
f010a6e5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6e8:	c7 80 a4 05 00 00 00 	movl   $0x0,0x5a4(%eax)
f010a6ef:	00 00 00 

	//2020
	e->nPageIn = 0;
f010a6f2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6f5:	c7 80 4c 05 00 00 00 	movl   $0x0,0x54c(%eax)
f010a6fc:	00 00 00 
	e->nPageOut = 0;
f010a6ff:	8b 45 08             	mov    0x8(%ebp),%eax
f010a702:	c7 80 50 05 00 00 00 	movl   $0x0,0x550(%eax)
f010a709:	00 00 00 
	e->nNewPageAdded = 0;
f010a70c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a70f:	c7 80 54 05 00 00 00 	movl   $0x0,0x554(%eax)
f010a716:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f010a719:	83 ec 0c             	sub    $0xc,%esp
f010a71c:	ff 75 08             	pushl  0x8(%ebp)
f010a71f:	e8 09 00 00 00       	call   f010a72d <complete_environment_initialization>
f010a724:	83 c4 10             	add    $0x10,%esp
}
f010a727:	90                   	nop
f010a728:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a72b:	c9                   	leave  
f010a72c:	c3                   	ret    

f010a72d <complete_environment_initialization>:

//========================================================
// 8) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f010a72d:	55                   	push   %ebp
f010a72e:	89 e5                	mov    %esp,%ebp
f010a730:	53                   	push   %ebx
f010a731:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f010a734:	8b 45 08             	mov    0x8(%ebp),%eax
f010a737:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a73a:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f010a740:	8b 45 08             	mov    0x8(%ebp),%eax
f010a743:	8b 40 60             	mov    0x60(%eax),%eax
f010a746:	83 c8 03             	or     $0x3,%eax
f010a749:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f010a74b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a74e:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a751:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010a757:	8b 45 08             	mov    0x8(%ebp),%eax
f010a75a:	8b 40 60             	mov    0x60(%eax),%eax
f010a75d:	83 c8 05             	or     $0x5,%eax
f010a760:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f010a762:	8b 45 08             	mov    0x8(%ebp),%eax
f010a765:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	e->disk_env_pgdir_PA= 0;
f010a76c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a76f:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
	e->disk_env_tabledir = 0;
f010a776:	8b 45 08             	mov    0x8(%ebp),%eax
f010a779:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	e->disk_env_tabledir_PA = 0;
f010a780:	8b 45 08             	mov    0x8(%ebp),%eax
f010a783:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f010a78a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a78d:	8b 58 4c             	mov    0x4c(%eax),%ebx
f010a790:	83 ec 0c             	sub    $0xc,%esp
f010a793:	68 b1 02 00 00       	push   $0x2b1
f010a798:	e8 94 52 02 00       	call   f012fa31 <log2_ceil>
f010a79d:	83 c4 10             	add    $0x10,%esp
f010a7a0:	ba 01 00 00 00       	mov    $0x1,%edx
f010a7a5:	88 c1                	mov    %al,%cl
f010a7a7:	d3 e2                	shl    %cl,%edx
f010a7a9:	89 d0                	mov    %edx,%eax
f010a7ab:	01 d8                	add    %ebx,%eax
f010a7ad:	89 c3                	mov    %eax,%ebx
f010a7af:	83 ec 0c             	sub    $0xc,%esp
f010a7b2:	68 b1 02 00 00       	push   $0x2b1
f010a7b7:	e8 40 52 02 00       	call   f012f9fc <nearest_pow2_ceil>
f010a7bc:	83 c4 10             	add    $0x10,%esp
f010a7bf:	f7 d8                	neg    %eax
f010a7c1:	21 d8                	and    %ebx,%eax
f010a7c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f010a7c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a7ca:	7f 1e                	jg     f010a7ea <complete_environment_initialization+0xbd>
		generation = 1 << ENVGENSHIFT;
f010a7cc:	83 ec 0c             	sub    $0xc,%esp
f010a7cf:	68 b1 02 00 00       	push   $0x2b1
f010a7d4:	e8 58 52 02 00       	call   f012fa31 <log2_ceil>
f010a7d9:	83 c4 10             	add    $0x10,%esp
f010a7dc:	ba 01 00 00 00       	mov    $0x1,%edx
f010a7e1:	88 c1                	mov    %al,%cl
f010a7e3:	d3 e2                	shl    %cl,%edx
f010a7e5:	89 d0                	mov    %edx,%eax
f010a7e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f010a7ea:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7ed:	8b 15 10 72 65 f0    	mov    0xf0657210,%edx
f010a7f3:	29 d0                	sub    %edx,%eax
f010a7f5:	c1 f8 04             	sar    $0x4,%eax
f010a7f8:	89 c2                	mov    %eax,%edx
f010a7fa:	89 d0                	mov    %edx,%eax
f010a7fc:	c1 e0 03             	shl    $0x3,%eax
f010a7ff:	01 d0                	add    %edx,%eax
f010a801:	01 c0                	add    %eax,%eax
f010a803:	01 d0                	add    %edx,%eax
f010a805:	c1 e0 03             	shl    $0x3,%eax
f010a808:	01 d0                	add    %edx,%eax
f010a80a:	89 c1                	mov    %eax,%ecx
f010a80c:	c1 e1 08             	shl    $0x8,%ecx
f010a80f:	01 c8                	add    %ecx,%eax
f010a811:	01 c0                	add    %eax,%eax
f010a813:	01 d0                	add    %edx,%eax
f010a815:	01 c0                	add    %eax,%eax
f010a817:	01 d0                	add    %edx,%eax
f010a819:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010a820:	01 d0                	add    %edx,%eax
f010a822:	89 c2                	mov    %eax,%edx
f010a824:	c1 e2 09             	shl    $0x9,%edx
f010a827:	29 c2                	sub    %eax,%edx
f010a829:	89 d0                	mov    %edx,%eax
f010a82b:	f7 d8                	neg    %eax
f010a82d:	0b 45 f4             	or     -0xc(%ebp),%eax
f010a830:	89 c2                	mov    %eax,%edx
f010a832:	8b 45 08             	mov    0x8(%ebp),%eax
f010a835:	89 50 4c             	mov    %edx,0x4c(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f010a838:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010a83d:	85 c0                	test   %eax,%eax
f010a83f:	75 0c                	jne    f010a84d <complete_environment_initialization+0x120>
		e->env_parent_id = 0;//no parent;
f010a841:	8b 45 08             	mov    0x8(%ebp),%eax
f010a844:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f010a84b:	eb 0e                	jmp    f010a85b <complete_environment_initialization+0x12e>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f010a84d:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010a852:	8b 50 4c             	mov    0x4c(%eax),%edx
f010a855:	8b 45 08             	mov    0x8(%ebp),%eax
f010a858:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f010a85b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a85e:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f010a865:	8b 45 08             	mov    0x8(%ebp),%eax
f010a868:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f010a86f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a872:	83 ec 04             	sub    $0x4,%esp
f010a875:	6a 44                	push   $0x44
f010a877:	6a 00                	push   $0x0
f010a879:	50                   	push   %eax
f010a87a:	e8 f9 65 02 00       	call   f0130e78 <memset>
f010a87f:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f010a882:	8b 45 08             	mov    0x8(%ebp),%eax
f010a885:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f010a88b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a88e:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f010a894:	8b 45 08             	mov    0x8(%ebp),%eax
f010a897:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f010a89d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8a0:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f010a8a7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8aa:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f010a8b0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8b3:	8b 40 38             	mov    0x38(%eax),%eax
f010a8b6:	80 cc 02             	or     $0x2,%ah
f010a8b9:	89 c2                	mov    %eax,%edx
f010a8bb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8be:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f010a8c1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010a8c5:	75 17                	jne    f010a8de <complete_environment_initialization+0x1b1>
f010a8c7:	83 ec 04             	sub    $0x4,%esp
f010a8ca:	68 06 62 13 f0       	push   $0xf0136206
f010a8cf:	68 58 03 00 00       	push   $0x358
f010a8d4:	68 e9 61 13 f0       	push   $0xf01361e9
f010a8d9:	e8 1d 59 ff ff       	call   f01001fb <_panic>
f010a8de:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8e1:	8b 40 44             	mov    0x44(%eax),%eax
f010a8e4:	85 c0                	test   %eax,%eax
f010a8e6:	74 11                	je     f010a8f9 <complete_environment_initialization+0x1cc>
f010a8e8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8eb:	8b 40 44             	mov    0x44(%eax),%eax
f010a8ee:	8b 55 08             	mov    0x8(%ebp),%edx
f010a8f1:	8b 52 48             	mov    0x48(%edx),%edx
f010a8f4:	89 50 48             	mov    %edx,0x48(%eax)
f010a8f7:	eb 0b                	jmp    f010a904 <complete_environment_initialization+0x1d7>
f010a8f9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8fc:	8b 40 48             	mov    0x48(%eax),%eax
f010a8ff:	a3 1c 72 65 f0       	mov    %eax,0xf065721c
f010a904:	8b 45 08             	mov    0x8(%ebp),%eax
f010a907:	8b 40 48             	mov    0x48(%eax),%eax
f010a90a:	85 c0                	test   %eax,%eax
f010a90c:	74 11                	je     f010a91f <complete_environment_initialization+0x1f2>
f010a90e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a911:	8b 40 48             	mov    0x48(%eax),%eax
f010a914:	8b 55 08             	mov    0x8(%ebp),%edx
f010a917:	8b 52 44             	mov    0x44(%edx),%edx
f010a91a:	89 50 44             	mov    %edx,0x44(%eax)
f010a91d:	eb 0b                	jmp    f010a92a <complete_environment_initialization+0x1fd>
f010a91f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a922:	8b 40 44             	mov    0x44(%eax),%eax
f010a925:	a3 18 72 65 f0       	mov    %eax,0xf0657218
f010a92a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a92d:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010a934:	8b 45 08             	mov    0x8(%ebp),%eax
f010a937:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010a93e:	a1 24 72 65 f0       	mov    0xf0657224,%eax
f010a943:	48                   	dec    %eax
f010a944:	a3 24 72 65 f0       	mov    %eax,0xf0657224
	return ;
f010a949:	90                   	nop
}
f010a94a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a94d:	c9                   	leave  
f010a94e:	c3                   	ret    

f010a94f <set_environment_entry_point>:

//===============================================
// 9) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f010a94f:	55                   	push   %ebp
f010a950:	89 e5                	mov    %esp,%ebp
f010a952:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010a955:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a958:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010a95b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a95e:	8b 00                	mov    (%eax),%eax
f010a960:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010a965:	74 17                	je     f010a97e <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f010a967:	83 ec 04             	sub    $0x4,%esp
f010a96a:	68 8b 63 13 f0       	push   $0xf013638b
f010a96f:	68 64 03 00 00       	push   $0x364
f010a974:	68 e9 61 13 f0       	push   $0xf01361e9
f010a979:	e8 7d 58 ff ff       	call   f01001fb <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f010a97e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a981:	8b 40 18             	mov    0x18(%eax),%eax
f010a984:	89 c2                	mov    %eax,%edx
f010a986:	8b 45 08             	mov    0x8(%ebp),%eax
f010a989:	89 50 30             	mov    %edx,0x30(%eax)
}
f010a98c:	90                   	nop
f010a98d:	c9                   	leave  
f010a98e:	c3                   	ret    

f010a98f <share_pws_at_user_space>:

//===============================================
// 10) SHARE WS AT USER SPACE (READ ONLY):
//===============================================
void share_pws_at_user_space(struct Env* e)
{
f010a98f:	55                   	push   %ebp
f010a990:	89 e5                	mov    %esp,%ebp
f010a992:	83 ec 28             	sub    $0x28,%esp
#if USE_KHEAP
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
f010a995:	8b 45 08             	mov    0x8(%ebp),%eax
f010a998:	c7 80 9c 05 00 00 00 	movl   $0xa0000000,0x59c(%eax)
f010a99f:	00 00 a0 
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
f010a9a2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9a5:	8b 40 78             	mov    0x78(%eax),%eax
f010a9a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010a9ab:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9ae:	8b 50 74             	mov    0x74(%eax),%edx
f010a9b1:	89 d0                	mov    %edx,%eax
f010a9b3:	01 c0                	add    %eax,%eax
f010a9b5:	01 d0                	add    %edx,%eax
f010a9b7:	c1 e0 03             	shl    $0x3,%eax
f010a9ba:	89 45 ec             	mov    %eax,-0x14(%ebp)
	unsigned int dva = (unsigned int) (e->__uptr_pws);
f010a9bd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9c0:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010a9c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010a9c9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9cc:	8b 40 78             	mov    0x78(%eax),%eax
f010a9cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a9d2:	eb 71                	jmp    f010aa45 <share_pws_at_user_space+0xb6>
	{
		//2017: Copy the table entries instead of mapping (to avoid increasing the number of references of corresponding frames)
		//unsigned int pa = kheap_physical_address(sva);
		//map_frame(e->env_page_directory, to_frame_info(pa), dva, PERM_USER);
		uint32 pa = kheap_physical_address(sva);
f010a9d4:	83 ec 0c             	sub    $0xc,%esp
f010a9d7:	ff 75 f4             	pushl  -0xc(%ebp)
f010a9da:	e8 34 d0 ff ff       	call   f0107a13 <kheap_physical_address>
f010a9df:	83 c4 10             	add    $0x10,%esp
f010a9e2:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32* ptr_page_table;
		if (get_page_table(e->env_page_directory,  dva, &ptr_page_table) == TABLE_NOT_EXIST)
f010a9e5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9e8:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a9eb:	83 ec 04             	sub    $0x4,%esp
f010a9ee:	8d 55 e4             	lea    -0x1c(%ebp),%edx
f010a9f1:	52                   	push   %edx
f010a9f2:	ff 75 f0             	pushl  -0x10(%ebp)
f010a9f5:	50                   	push   %eax
f010a9f6:	e8 df bf ff ff       	call   f01069da <get_page_table>
f010a9fb:	83 c4 10             	add    $0x10,%esp
f010a9fe:	83 f8 01             	cmp    $0x1,%eax
f010aa01:	75 18                	jne    f010aa1b <share_pws_at_user_space+0x8c>
		{
			ptr_page_table = create_page_table(e->env_page_directory, (uint32) dva);
f010aa03:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa06:	8b 40 5c             	mov    0x5c(%eax),%eax
f010aa09:	83 ec 08             	sub    $0x8,%esp
f010aa0c:	ff 75 f0             	pushl  -0x10(%ebp)
f010aa0f:	50                   	push   %eax
f010aa10:	e8 1b c1 ff ff       	call   f0106b30 <create_page_table>
f010aa15:	83 c4 10             	add    $0x10,%esp
f010aa18:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
f010aa1b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010aa1e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010aa21:	c1 ea 0c             	shr    $0xc,%edx
f010aa24:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010aa2a:	c1 e2 02             	shl    $0x2,%edx
f010aa2d:	01 d0                	add    %edx,%eax
f010aa2f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010aa32:	83 ca 05             	or     $0x5,%edx
f010aa35:	89 10                	mov    %edx,(%eax)
#if USE_KHEAP
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
	unsigned int dva = (unsigned int) (e->__uptr_pws);
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010aa37:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010aa3e:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f010aa45:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa48:	8b 40 78             	mov    0x78(%eax),%eax
f010aa4b:	89 c2                	mov    %eax,%edx
f010aa4d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010aa50:	01 d0                	add    %edx,%eax
f010aa52:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010aa55:	0f 87 79 ff ff ff    	ja     f010a9d4 <share_pws_at_user_space+0x45>
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
	}
#else
	panic("share_pws_at_user_space(): should not be called when kernel heap is disabled.");
#endif
}
f010aa5b:	90                   	nop
f010aa5c:	c9                   	leave  
f010aa5d:	c3                   	ret    

f010aa5e <unshare_pws_at_user_space>:

//===============================================
// 11) REMOVE THE SHARED WS FROM USER SPACE:
//===============================================
void unshare_pws_at_user_space(struct Env *e)
{
f010aa5e:	55                   	push   %ebp
f010aa5f:	89 e5                	mov    %esp,%ebp
f010aa61:	83 ec 28             	sub    $0x28,%esp
#if USE_KHEAP
	{
		uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010aa64:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa67:	8b 50 74             	mov    0x74(%eax),%edx
f010aa6a:	89 d0                	mov    %edx,%eax
f010aa6c:	01 c0                	add    %eax,%eax
f010aa6e:	01 d0                	add    %edx,%eax
f010aa70:	c1 e0 03             	shl    $0x3,%eax
f010aa73:	89 45 f0             	mov    %eax,-0x10(%ebp)
		unsigned int sva = (unsigned int) e->__uptr_pws;
f010aa76:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa79:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010aa7f:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, sva);
		}
		*/
		unsigned int tsva = ROUNDDOWN((unsigned int) e->__uptr_pws, PTSIZE);
f010aa82:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa85:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010aa8b:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010aa8e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010aa91:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010aa96:	89 45 f4             	mov    %eax,-0xc(%ebp)
		for(; tsva < ((unsigned int) (e->__uptr_pws) + nBytes) ; tsva+=PTSIZE)
f010aa99:	eb 46                	jmp    f010aae1 <unshare_pws_at_user_space+0x83>
		{
			unsigned int * uws_table;
			get_page_table(e->env_page_directory, tsva, &uws_table );
f010aa9b:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa9e:	8b 40 5c             	mov    0x5c(%eax),%eax
f010aaa1:	83 ec 04             	sub    $0x4,%esp
f010aaa4:	8d 55 e0             	lea    -0x20(%ebp),%edx
f010aaa7:	52                   	push   %edx
f010aaa8:	ff 75 f4             	pushl  -0xc(%ebp)
f010aaab:	50                   	push   %eax
f010aaac:	e8 29 bf ff ff       	call   f01069da <get_page_table>
f010aab1:	83 c4 10             	add    $0x10,%esp
			kfree(uws_table);
f010aab4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010aab7:	83 ec 0c             	sub    $0xc,%esp
f010aaba:	50                   	push   %eax
f010aabb:	e8 00 ce ff ff       	call   f01078c0 <kfree>
f010aac0:	83 c4 10             	add    $0x10,%esp
			e->env_page_directory[PDX(tsva)] = 0;
f010aac3:	8b 45 08             	mov    0x8(%ebp),%eax
f010aac6:	8b 40 5c             	mov    0x5c(%eax),%eax
f010aac9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aacc:	c1 ea 16             	shr    $0x16,%edx
f010aacf:	c1 e2 02             	shl    $0x2,%edx
f010aad2:	01 d0                	add    %edx,%eax
f010aad4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, sva);
		}
		*/
		unsigned int tsva = ROUNDDOWN((unsigned int) e->__uptr_pws, PTSIZE);
		for(; tsva < ((unsigned int) (e->__uptr_pws) + nBytes) ; tsva+=PTSIZE)
f010aada:	81 45 f4 00 00 40 00 	addl   $0x400000,-0xc(%ebp)
f010aae1:	8b 45 08             	mov    0x8(%ebp),%eax
f010aae4:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010aaea:	89 c2                	mov    %eax,%edx
f010aaec:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010aaef:	01 d0                	add    %edx,%eax
f010aaf1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010aaf4:	77 a5                	ja     f010aa9b <unshare_pws_at_user_space+0x3d>

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010aaf6:	0f 20 d8             	mov    %cr3,%eax
f010aaf9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010aafc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010aaff:	0f 22 d8             	mov    %eax,%cr3
		tlbflush();
	}
#else
	panic("__remove_pws_user_pages(): should not be called when kernel heap is disabled.");
#endif
}
f010ab02:	90                   	nop
f010ab03:	c9                   	leave  
f010ab04:	c3                   	ret    

f010ab05 <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 12) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f010ab05:	55                   	push   %ebp
f010ab06:	89 e5                	mov    %esp,%ebp
f010ab08:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f010ab0b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab0e:	8b 40 10             	mov    0x10(%eax),%eax
f010ab11:	8d 48 01             	lea    0x1(%eax),%ecx
f010ab14:	8b 55 08             	mov    0x8(%ebp),%edx
f010ab17:	89 4a 10             	mov    %ecx,0x10(%edx)
f010ab1a:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010ab1d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ab20:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010ab23:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ab26:	8b 00                	mov    (%eax),%eax
f010ab28:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010ab2d:	74 17                	je     f010ab46 <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f010ab2f:	83 ec 04             	sub    $0x4,%esp
f010ab32:	68 8b 63 13 f0       	push   $0xf013638b
f010ab37:	68 ae 03 00 00       	push   $0x3ae
f010ab3c:	68 e9 61 13 f0       	push   $0xf01361e9
f010ab41:	e8 b5 56 ff ff       	call   f01001fb <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010ab46:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ab49:	8b 50 1c             	mov    0x1c(%eax),%edx
f010ab4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ab4f:	01 d0                	add    %edx,%eax
f010ab51:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f010ab54:	eb 0f                	jmp    f010ab65 <PROGRAM_SEGMENT_NEXT+0x60>
f010ab56:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab59:	8b 40 10             	mov    0x10(%eax),%eax
f010ab5c:	8d 50 01             	lea    0x1(%eax),%edx
f010ab5f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab62:	89 50 10             	mov    %edx,0x10(%eax)
f010ab65:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab68:	8b 40 10             	mov    0x10(%eax),%eax
f010ab6b:	c1 e0 05             	shl    $0x5,%eax
f010ab6e:	89 c2                	mov    %eax,%edx
f010ab70:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ab73:	01 d0                	add    %edx,%eax
f010ab75:	8b 00                	mov    (%eax),%eax
f010ab77:	83 f8 01             	cmp    $0x1,%eax
f010ab7a:	74 13                	je     f010ab8f <PROGRAM_SEGMENT_NEXT+0x8a>
f010ab7c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab7f:	8b 50 10             	mov    0x10(%eax),%edx
f010ab82:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ab85:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ab88:	0f b7 c0             	movzwl %ax,%eax
f010ab8b:	39 c2                	cmp    %eax,%edx
f010ab8d:	72 c7                	jb     f010ab56 <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010ab8f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab92:	8b 40 10             	mov    0x10(%eax),%eax
f010ab95:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f010ab98:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ab9b:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ab9e:	0f b7 c0             	movzwl %ax,%eax
f010aba1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010aba4:	7e 63                	jle    f010ac09 <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010aba6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aba9:	c1 e0 05             	shl    $0x5,%eax
f010abac:	89 c2                	mov    %eax,%edx
f010abae:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010abb1:	01 d0                	add    %edx,%eax
f010abb3:	8b 50 04             	mov    0x4(%eax),%edx
f010abb6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010abb9:	01 c2                	add    %eax,%edx
f010abbb:	8b 45 08             	mov    0x8(%ebp),%eax
f010abbe:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010abc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010abc3:	c1 e0 05             	shl    $0x5,%eax
f010abc6:	89 c2                	mov    %eax,%edx
f010abc8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010abcb:	01 d0                	add    %edx,%eax
f010abcd:	8b 50 14             	mov    0x14(%eax),%edx
f010abd0:	8b 45 08             	mov    0x8(%ebp),%eax
f010abd3:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f010abd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010abd9:	c1 e0 05             	shl    $0x5,%eax
f010abdc:	89 c2                	mov    %eax,%edx
f010abde:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010abe1:	01 d0                	add    %edx,%eax
f010abe3:	8b 50 10             	mov    0x10(%eax),%edx
f010abe6:	8b 45 08             	mov    0x8(%ebp),%eax
f010abe9:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010abec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010abef:	c1 e0 05             	shl    $0x5,%eax
f010abf2:	89 c2                	mov    %eax,%edx
f010abf4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010abf7:	01 d0                	add    %edx,%eax
f010abf9:	8b 40 08             	mov    0x8(%eax),%eax
f010abfc:	89 c2                	mov    %eax,%edx
f010abfe:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac01:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f010ac04:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac07:	eb 05                	jmp    f010ac0e <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010ac09:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ac0e:	c9                   	leave  
f010ac0f:	c3                   	ret    

f010ac10 <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 13) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010ac10:	55                   	push   %ebp
f010ac11:	89 e5                	mov    %esp,%ebp
f010ac13:	57                   	push   %edi
f010ac14:	56                   	push   %esi
f010ac15:	53                   	push   %ebx
f010ac16:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010ac19:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010ac20:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ac23:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010ac26:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ac29:	8b 00                	mov    (%eax),%eax
f010ac2b:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010ac30:	74 17                	je     f010ac49 <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f010ac32:	83 ec 04             	sub    $0x4,%esp
f010ac35:	68 8b 63 13 f0       	push   $0xf013638b
f010ac3a:	68 ca 03 00 00       	push   $0x3ca
f010ac3f:	68 e9 61 13 f0       	push   $0xf01361e9
f010ac44:	e8 b2 55 ff ff       	call   f01001fb <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010ac49:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ac4c:	8b 50 1c             	mov    0x1c(%eax),%edx
f010ac4f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ac52:	01 d0                	add    %edx,%eax
f010ac54:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010ac57:	eb 07                	jmp    f010ac60 <PROGRAM_SEGMENT_FIRST+0x50>
f010ac59:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ac5c:	40                   	inc    %eax
f010ac5d:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010ac60:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ac63:	c1 e0 05             	shl    $0x5,%eax
f010ac66:	89 c2                	mov    %eax,%edx
f010ac68:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ac6b:	01 d0                	add    %edx,%eax
f010ac6d:	8b 00                	mov    (%eax),%eax
f010ac6f:	83 f8 01             	cmp    $0x1,%eax
f010ac72:	74 10                	je     f010ac84 <PROGRAM_SEGMENT_FIRST+0x74>
f010ac74:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010ac77:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ac7a:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ac7d:	0f b7 c0             	movzwl %ax,%eax
f010ac80:	39 c2                	cmp    %eax,%edx
f010ac82:	72 d5                	jb     f010ac59 <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010ac84:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ac87:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f010ac8a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ac8d:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ac90:	0f b7 c0             	movzwl %ax,%eax
f010ac93:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010ac96:	7e 68                	jle    f010ad00 <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010ac98:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ac9b:	c1 e0 05             	shl    $0x5,%eax
f010ac9e:	89 c2                	mov    %eax,%edx
f010aca0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010aca3:	01 d0                	add    %edx,%eax
f010aca5:	8b 50 04             	mov    0x4(%eax),%edx
f010aca8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010acab:	01 d0                	add    %edx,%eax
f010acad:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010acb0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010acb3:	c1 e0 05             	shl    $0x5,%eax
f010acb6:	89 c2                	mov    %eax,%edx
f010acb8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010acbb:	01 d0                	add    %edx,%eax
f010acbd:	8b 40 14             	mov    0x14(%eax),%eax
f010acc0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f010acc3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010acc6:	c1 e0 05             	shl    $0x5,%eax
f010acc9:	89 c2                	mov    %eax,%edx
f010accb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010acce:	01 d0                	add    %edx,%eax
f010acd0:	8b 40 10             	mov    0x10(%eax),%eax
f010acd3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f010acd6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010acd9:	c1 e0 05             	shl    $0x5,%eax
f010acdc:	89 c2                	mov    %eax,%edx
f010acde:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ace1:	01 d0                	add    %edx,%eax
f010ace3:	8b 40 08             	mov    0x8(%eax),%eax
f010ace6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f010ace9:	8b 45 08             	mov    0x8(%ebp),%eax
f010acec:	89 c3                	mov    %eax,%ebx
f010acee:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010acf1:	ba 05 00 00 00       	mov    $0x5,%edx
f010acf6:	89 df                	mov    %ebx,%edi
f010acf8:	89 c6                	mov    %eax,%esi
f010acfa:	89 d1                	mov    %edx,%ecx
f010acfc:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010acfe:	eb 1c                	jmp    f010ad1c <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010ad00:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f010ad07:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad0a:	89 c3                	mov    %eax,%ebx
f010ad0c:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010ad0f:	ba 05 00 00 00       	mov    $0x5,%edx
f010ad14:	89 df                	mov    %ebx,%edi
f010ad16:	89 c6                	mov    %eax,%esi
f010ad18:	89 d1                	mov    %edx,%ecx
f010ad1a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010ad1c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad1f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010ad22:	5b                   	pop    %ebx
f010ad23:	5e                   	pop    %esi
f010ad24:	5f                   	pop    %edi
f010ad25:	5d                   	pop    %ebp
f010ad26:	c2 04 00             	ret    $0x4

f010ad29 <cleanup_buffers>:

//===============================================
// 14) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================
void cleanup_buffers(struct Env* e)
{
f010ad29:	55                   	push   %ebp
f010ad2a:	89 e5                	mov    %esp,%ebp
f010ad2c:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010ad2f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010ad36:	a1 b8 7a 65 f0       	mov    0xf0657ab8,%eax
f010ad3b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010ad3e:	e9 c3 00 00 00       	jmp    f010ae06 <cleanup_buffers+0xdd>
	{
		if(ptr_fi->environment == e)
f010ad43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad46:	8b 40 10             	mov    0x10(%eax),%eax
f010ad49:	3b 45 08             	cmp    0x8(%ebp),%eax
f010ad4c:	0f 85 ac 00 00 00    	jne    f010adfe <cleanup_buffers+0xd5>
		{
			pt_clear_page_table_entry(ptr_fi->environment->env_page_directory,ptr_fi->va);
f010ad52:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad55:	8b 50 0c             	mov    0xc(%eax),%edx
f010ad58:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad5b:	8b 40 10             	mov    0x10(%eax),%eax
f010ad5e:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ad61:	83 ec 08             	sub    $0x8,%esp
f010ad64:	52                   	push   %edx
f010ad65:	50                   	push   %eax
f010ad66:	e8 c1 ce ff ff       	call   f0107c2c <pt_clear_page_table_entry>
f010ad6b:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			LIST_REMOVE(&modified_frame_list, ptr_fi);
f010ad6e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ad72:	75 17                	jne    f010ad8b <cleanup_buffers+0x62>
f010ad74:	83 ec 04             	sub    $0x4,%esp
f010ad77:	68 06 62 13 f0       	push   $0xf0136206
f010ad7c:	68 f1 03 00 00       	push   $0x3f1
f010ad81:	68 e9 61 13 f0       	push   $0xf01361e9
f010ad86:	e8 70 54 ff ff       	call   f01001fb <_panic>
f010ad8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad8e:	8b 00                	mov    (%eax),%eax
f010ad90:	85 c0                	test   %eax,%eax
f010ad92:	74 10                	je     f010ada4 <cleanup_buffers+0x7b>
f010ad94:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad97:	8b 00                	mov    (%eax),%eax
f010ad99:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ad9c:	8b 52 04             	mov    0x4(%edx),%edx
f010ad9f:	89 50 04             	mov    %edx,0x4(%eax)
f010ada2:	eb 0b                	jmp    f010adaf <cleanup_buffers+0x86>
f010ada4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ada7:	8b 40 04             	mov    0x4(%eax),%eax
f010adaa:	a3 bc 7a 65 f0       	mov    %eax,0xf0657abc
f010adaf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010adb2:	8b 40 04             	mov    0x4(%eax),%eax
f010adb5:	85 c0                	test   %eax,%eax
f010adb7:	74 0f                	je     f010adc8 <cleanup_buffers+0x9f>
f010adb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010adbc:	8b 40 04             	mov    0x4(%eax),%eax
f010adbf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010adc2:	8b 12                	mov    (%edx),%edx
f010adc4:	89 10                	mov    %edx,(%eax)
f010adc6:	eb 0a                	jmp    f010add2 <cleanup_buffers+0xa9>
f010adc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010adcb:	8b 00                	mov    (%eax),%eax
f010adcd:	a3 b8 7a 65 f0       	mov    %eax,0xf0657ab8
f010add2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010add5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010addb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010adde:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010ade5:	a1 c4 7a 65 f0       	mov    0xf0657ac4,%eax
f010adea:	48                   	dec    %eax
f010adeb:	a3 c4 7a 65 f0       	mov    %eax,0xf0657ac4

			free_frame(ptr_fi);
f010adf0:	83 ec 0c             	sub    $0xc,%esp
f010adf3:	ff 75 f4             	pushl  -0xc(%ebp)
f010adf6:	e8 35 bb ff ff       	call   f0106930 <free_frame>
f010adfb:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010adfe:	a1 c0 7a 65 f0       	mov    0xf0657ac0,%eax
f010ae03:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010ae06:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ae0a:	74 07                	je     f010ae13 <cleanup_buffers+0xea>
f010ae0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae0f:	8b 00                	mov    (%eax),%eax
f010ae11:	eb 05                	jmp    f010ae18 <cleanup_buffers+0xef>
f010ae13:	b8 00 00 00 00       	mov    $0x0,%eax
f010ae18:	a3 c0 7a 65 f0       	mov    %eax,0xf0657ac0
f010ae1d:	a1 c0 7a 65 f0       	mov    0xf0657ac0,%eax
f010ae22:	85 c0                	test   %eax,%eax
f010ae24:	0f 85 19 ff ff ff    	jne    f010ad43 <cleanup_buffers+0x1a>
f010ae2a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ae2e:	0f 85 0f ff ff ff    	jne    f010ad43 <cleanup_buffers+0x1a>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010ae34:	90                   	nop
f010ae35:	c9                   	leave  
f010ae36:	c3                   	ret    

f010ae37 <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f010ae37:	55                   	push   %ebp
f010ae38:	89 e5                	mov    %esp,%ebp
f010ae3a:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] set_program_priority
	//[ALREADY IMPLEMENTED]

	if(priority < 1 || priority > 5)
f010ae3d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010ae41:	7e 06                	jle    f010ae49 <set_program_priority+0x12>
f010ae43:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010ae47:	7e 14                	jle    f010ae5d <set_program_priority+0x26>
	{
		panic("Please enter valid priority (1->5)\n");
f010ae49:	83 ec 04             	sub    $0x4,%esp
f010ae4c:	68 a4 63 13 f0       	push   $0xf01363a4
f010ae51:	6a 10                	push   $0x10
f010ae53:	68 c8 63 13 f0       	push   $0xf01363c8
f010ae58:	e8 9e 53 ff ff       	call   f01001fb <_panic>
		return;
	}
	if(env == NULL)
f010ae5d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010ae61:	74 75                	je     f010aed8 <set_program_priority+0xa1>
		return;
	switch(priority)
f010ae63:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010ae67:	77 56                	ja     f010aebf <set_program_priority+0x88>
f010ae69:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ae6c:	c1 e0 02             	shl    $0x2,%eax
f010ae6f:	05 04 64 13 f0       	add    $0xf0136404,%eax
f010ae74:	8b 00                	mov    (%eax),%eax
f010ae76:	ff e0                	jmp    *%eax
	{
		case PRIORITY_LOW:
			half_WS_Size(env, 1);
f010ae78:	83 ec 08             	sub    $0x8,%esp
f010ae7b:	6a 01                	push   $0x1
f010ae7d:	ff 75 08             	pushl  0x8(%ebp)
f010ae80:	e8 1e d8 ff ff       	call   f01086a3 <half_WS_Size>
f010ae85:	83 c4 10             	add    $0x10,%esp
			break;
f010ae88:	eb 35                	jmp    f010aebf <set_program_priority+0x88>
		case PRIORITY_BELOWNORMAL:
			half_WS_Size(env, 0);
f010ae8a:	83 ec 08             	sub    $0x8,%esp
f010ae8d:	6a 00                	push   $0x0
f010ae8f:	ff 75 08             	pushl  0x8(%ebp)
f010ae92:	e8 0c d8 ff ff       	call   f01086a3 <half_WS_Size>
f010ae97:	83 c4 10             	add    $0x10,%esp
			break;
f010ae9a:	eb 23                	jmp    f010aebf <set_program_priority+0x88>
		case PRIORITY_NORMAL:
			// Do Nothing
			break;
		case PRIORITY_ABOVENORMAL:
			double_WS_Size(env, 1);
f010ae9c:	83 ec 08             	sub    $0x8,%esp
f010ae9f:	6a 01                	push   $0x1
f010aea1:	ff 75 08             	pushl  0x8(%ebp)
f010aea4:	e8 dd d7 ff ff       	call   f0108686 <double_WS_Size>
f010aea9:	83 c4 10             	add    $0x10,%esp
			break;
f010aeac:	eb 11                	jmp    f010aebf <set_program_priority+0x88>
		case PRIORITY_HIGH:
			double_WS_Size(env, 0);
f010aeae:	83 ec 08             	sub    $0x8,%esp
f010aeb1:	6a 00                	push   $0x0
f010aeb3:	ff 75 08             	pushl  0x8(%ebp)
f010aeb6:	e8 cb d7 ff ff       	call   f0108686 <double_WS_Size>
f010aebb:	83 c4 10             	add    $0x10,%esp
			break;
f010aebe:	90                   	nop
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
f010aebf:	8b 45 08             	mov    0x8(%ebp),%eax
f010aec2:	8b 40 74             	mov    0x74(%eax),%eax
f010aec5:	83 ec 08             	sub    $0x8,%esp
f010aec8:	50                   	push   %eax
f010aec9:	68 e5 63 13 f0       	push   $0xf01363e5
f010aece:	e8 af 5d ff ff       	call   f0100c82 <cprintf>
f010aed3:	83 c4 10             	add    $0x10,%esp
f010aed6:	eb 01                	jmp    f010aed9 <set_program_priority+0xa2>
	{
		panic("Please enter valid priority (1->5)\n");
		return;
	}
	if(env == NULL)
		return;
f010aed8:	90                   	nop
			double_WS_Size(env, 0);
			break;
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
}
f010aed9:	c9                   	leave  
f010aeda:	c3                   	ret    

f010aedb <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f010aedb:	55                   	push   %ebp
f010aedc:	89 e5                	mov    %esp,%ebp
f010aede:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010aee1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010aee8:	eb 29                	jmp    f010af13 <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010aeea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aeed:	89 d0                	mov    %edx,%eax
f010aeef:	01 c0                	add    %eax,%eax
f010aef1:	01 d0                	add    %edx,%eax
f010aef3:	c1 e0 02             	shl    $0x2,%eax
f010aef6:	05 00 19 19 f0       	add    $0xf0191900,%eax
f010aefb:	8b 00                	mov    (%eax),%eax
f010aefd:	83 ec 08             	sub    $0x8,%esp
f010af00:	50                   	push   %eax
f010af01:	ff 75 08             	pushl  0x8(%ebp)
f010af04:	e8 8d 5e 02 00       	call   f0130d96 <strcmp>
f010af09:	83 c4 10             	add    $0x10,%esp
f010af0c:	85 c0                	test   %eax,%eax
f010af0e:	74 0f                	je     f010af1f <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010af10:	ff 45 f4             	incl   -0xc(%ebp)
f010af13:	a1 c4 1c 19 f0       	mov    0xf0191cc4,%eax
f010af18:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010af1b:	7c cd                	jl     f010aeea <get_user_program_info+0xf>
f010af1d:	eb 01                	jmp    f010af20 <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010af1f:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010af20:	a1 c4 1c 19 f0       	mov    0xf0191cc4,%eax
f010af25:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010af28:	75 1a                	jne    f010af44 <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010af2a:	83 ec 08             	sub    $0x8,%esp
f010af2d:	ff 75 08             	pushl  0x8(%ebp)
f010af30:	68 31 6e 13 f0       	push   $0xf0136e31
f010af35:	e8 48 5d ff ff       	call   f0100c82 <cprintf>
f010af3a:	83 c4 10             	add    $0x10,%esp
		return 0;
f010af3d:	b8 00 00 00 00       	mov    $0x0,%eax
f010af42:	eb 11                	jmp    f010af55 <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010af44:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010af47:	89 d0                	mov    %edx,%eax
f010af49:	01 c0                	add    %eax,%eax
f010af4b:	01 d0                	add    %edx,%eax
f010af4d:	c1 e0 02             	shl    $0x2,%eax
f010af50:	05 00 19 19 f0       	add    $0xf0191900,%eax
}
f010af55:	c9                   	leave  
f010af56:	c3                   	ret    

f010af57 <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010af57:	55                   	push   %ebp
f010af58:	89 e5                	mov    %esp,%ebp
f010af5a:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010af5d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010af64:	eb 30                	jmp    f010af96 <get_user_program_info_by_env+0x3f>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f010af66:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010af69:	89 d0                	mov    %edx,%eax
f010af6b:	01 c0                	add    %eax,%eax
f010af6d:	01 d0                	add    %edx,%eax
f010af6f:	c1 e0 02             	shl    $0x2,%eax
f010af72:	05 00 19 19 f0       	add    $0xf0191900,%eax
f010af77:	8b 00                	mov    (%eax),%eax
f010af79:	8b 55 08             	mov    0x8(%ebp),%edx
f010af7c:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f010af82:	83 ec 08             	sub    $0x8,%esp
f010af85:	50                   	push   %eax
f010af86:	52                   	push   %edx
f010af87:	e8 0a 5e 02 00       	call   f0130d96 <strcmp>
f010af8c:	83 c4 10             	add    $0x10,%esp
f010af8f:	85 c0                	test   %eax,%eax
f010af91:	74 0f                	je     f010afa2 <get_user_program_info_by_env+0x4b>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010af93:	ff 45 f4             	incl   -0xc(%ebp)
f010af96:	a1 c4 1c 19 f0       	mov    0xf0191cc4,%eax
f010af9b:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010af9e:	7c c6                	jl     f010af66 <get_user_program_info_by_env+0xf>
f010afa0:	eb 01                	jmp    f010afa3 <get_user_program_info_by_env+0x4c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f010afa2:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010afa3:	a1 c4 1c 19 f0       	mov    0xf0191cc4,%eax
f010afa8:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010afab:	75 17                	jne    f010afc4 <get_user_program_info_by_env+0x6d>
	{
		cprintf("Unknown user program \n");
f010afad:	83 ec 0c             	sub    $0xc,%esp
f010afb0:	68 4c 6e 13 f0       	push   $0xf0136e4c
f010afb5:	e8 c8 5c ff ff       	call   f0100c82 <cprintf>
f010afba:	83 c4 10             	add    $0x10,%esp
		return 0;
f010afbd:	b8 00 00 00 00       	mov    $0x0,%eax
f010afc2:	eb 11                	jmp    f010afd5 <get_user_program_info_by_env+0x7e>
	}

	return &userPrograms[i];
f010afc4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010afc7:	89 d0                	mov    %edx,%eax
f010afc9:	01 c0                	add    %eax,%eax
f010afcb:	01 d0                	add    %edx,%eax
f010afcd:	c1 e0 02             	shl    $0x2,%eax
f010afd0:	05 00 19 19 f0       	add    $0xf0191900,%eax
}
f010afd5:	c9                   	leave  
f010afd6:	c3                   	ret    

f010afd7 <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010afd7:	55                   	push   %ebp
f010afd8:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010afda:	8b 45 08             	mov    0x8(%ebp),%eax
f010afdd:	83 f8 13             	cmp    $0x13,%eax
f010afe0:	77 0c                	ja     f010afee <trapname+0x17>
		return excnames[trapno];
f010afe2:	8b 45 08             	mov    0x8(%ebp),%eax
f010afe5:	8b 04 85 e0 71 13 f0 	mov    -0xfec8e20(,%eax,4),%eax
f010afec:	eb 12                	jmp    f010b000 <trapname+0x29>
	if (trapno == T_SYSCALL)
f010afee:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010aff2:	75 07                	jne    f010affb <trapname+0x24>
		return "System call";
f010aff4:	b8 80 6e 13 f0       	mov    $0xf0136e80,%eax
f010aff9:	eb 05                	jmp    f010b000 <trapname+0x29>
	return "(unknown trap)";
f010affb:	b8 8c 6e 13 f0       	mov    $0xf0136e8c,%eax
}
f010b000:	5d                   	pop    %ebp
f010b001:	c3                   	ret    

f010b002 <idt_init>:


void
idt_init(void)
{
f010b002:	55                   	push   %ebp
f010b003:	89 e5                	mov    %esp,%ebp
f010b005:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f010b008:	b8 06 c6 10 f0       	mov    $0xf010c606,%eax
f010b00d:	66 a3 b0 72 65 f0    	mov    %ax,0xf06572b0
f010b013:	66 c7 05 b2 72 65 f0 	movw   $0x8,0xf06572b2
f010b01a:	08 00 
f010b01c:	a0 b4 72 65 f0       	mov    0xf06572b4,%al
f010b021:	83 e0 e0             	and    $0xffffffe0,%eax
f010b024:	a2 b4 72 65 f0       	mov    %al,0xf06572b4
f010b029:	a0 b4 72 65 f0       	mov    0xf06572b4,%al
f010b02e:	83 e0 1f             	and    $0x1f,%eax
f010b031:	a2 b4 72 65 f0       	mov    %al,0xf06572b4
f010b036:	a0 b5 72 65 f0       	mov    0xf06572b5,%al
f010b03b:	83 e0 f0             	and    $0xfffffff0,%eax
f010b03e:	83 c8 0e             	or     $0xe,%eax
f010b041:	a2 b5 72 65 f0       	mov    %al,0xf06572b5
f010b046:	a0 b5 72 65 f0       	mov    0xf06572b5,%al
f010b04b:	83 e0 ef             	and    $0xffffffef,%eax
f010b04e:	a2 b5 72 65 f0       	mov    %al,0xf06572b5
f010b053:	a0 b5 72 65 f0       	mov    0xf06572b5,%al
f010b058:	83 e0 9f             	and    $0xffffff9f,%eax
f010b05b:	a2 b5 72 65 f0       	mov    %al,0xf06572b5
f010b060:	a0 b5 72 65 f0       	mov    0xf06572b5,%al
f010b065:	83 c8 80             	or     $0xffffff80,%eax
f010b068:	a2 b5 72 65 f0       	mov    %al,0xf06572b5
f010b06d:	b8 06 c6 10 f0       	mov    $0xf010c606,%eax
f010b072:	c1 e8 10             	shr    $0x10,%eax
f010b075:	66 a3 b6 72 65 f0    	mov    %ax,0xf06572b6
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f010b07b:	b8 0e c6 10 f0       	mov    $0xf010c60e,%eax
f010b080:	66 a3 c0 73 65 f0    	mov    %ax,0xf06573c0
f010b086:	66 c7 05 c2 73 65 f0 	movw   $0x8,0xf06573c2
f010b08d:	08 00 
f010b08f:	a0 c4 73 65 f0       	mov    0xf06573c4,%al
f010b094:	83 e0 e0             	and    $0xffffffe0,%eax
f010b097:	a2 c4 73 65 f0       	mov    %al,0xf06573c4
f010b09c:	a0 c4 73 65 f0       	mov    0xf06573c4,%al
f010b0a1:	83 e0 1f             	and    $0x1f,%eax
f010b0a4:	a2 c4 73 65 f0       	mov    %al,0xf06573c4
f010b0a9:	a0 c5 73 65 f0       	mov    0xf06573c5,%al
f010b0ae:	83 e0 f0             	and    $0xfffffff0,%eax
f010b0b1:	83 c8 0e             	or     $0xe,%eax
f010b0b4:	a2 c5 73 65 f0       	mov    %al,0xf06573c5
f010b0b9:	a0 c5 73 65 f0       	mov    0xf06573c5,%al
f010b0be:	83 e0 ef             	and    $0xffffffef,%eax
f010b0c1:	a2 c5 73 65 f0       	mov    %al,0xf06573c5
f010b0c6:	a0 c5 73 65 f0       	mov    0xf06573c5,%al
f010b0cb:	83 c8 60             	or     $0x60,%eax
f010b0ce:	a2 c5 73 65 f0       	mov    %al,0xf06573c5
f010b0d3:	a0 c5 73 65 f0       	mov    0xf06573c5,%al
f010b0d8:	83 c8 80             	or     $0xffffff80,%eax
f010b0db:	a2 c5 73 65 f0       	mov    %al,0xf06573c5
f010b0e0:	b8 0e c6 10 f0       	mov    $0xf010c60e,%eax
f010b0e5:	c1 e8 10             	shr    $0x10,%eax
f010b0e8:	66 a3 c6 73 65 f0    	mov    %ax,0xf06573c6
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f010b0ee:	b8 18 c6 10 f0       	mov    $0xf010c618,%eax
f010b0f3:	66 a3 80 72 65 f0    	mov    %ax,0xf0657280
f010b0f9:	66 c7 05 82 72 65 f0 	movw   $0x8,0xf0657282
f010b100:	08 00 
f010b102:	a0 84 72 65 f0       	mov    0xf0657284,%al
f010b107:	83 e0 e0             	and    $0xffffffe0,%eax
f010b10a:	a2 84 72 65 f0       	mov    %al,0xf0657284
f010b10f:	a0 84 72 65 f0       	mov    0xf0657284,%al
f010b114:	83 e0 1f             	and    $0x1f,%eax
f010b117:	a2 84 72 65 f0       	mov    %al,0xf0657284
f010b11c:	a0 85 72 65 f0       	mov    0xf0657285,%al
f010b121:	83 e0 f0             	and    $0xfffffff0,%eax
f010b124:	83 c8 0e             	or     $0xe,%eax
f010b127:	a2 85 72 65 f0       	mov    %al,0xf0657285
f010b12c:	a0 85 72 65 f0       	mov    0xf0657285,%al
f010b131:	83 e0 ef             	and    $0xffffffef,%eax
f010b134:	a2 85 72 65 f0       	mov    %al,0xf0657285
f010b139:	a0 85 72 65 f0       	mov    0xf0657285,%al
f010b13e:	83 e0 9f             	and    $0xffffff9f,%eax
f010b141:	a2 85 72 65 f0       	mov    %al,0xf0657285
f010b146:	a0 85 72 65 f0       	mov    0xf0657285,%al
f010b14b:	83 c8 80             	or     $0xffffff80,%eax
f010b14e:	a2 85 72 65 f0       	mov    %al,0xf0657285
f010b153:	b8 18 c6 10 f0       	mov    $0xf010c618,%eax
f010b158:	c1 e8 10             	shr    $0x10,%eax
f010b15b:	66 a3 86 72 65 f0    	mov    %ax,0xf0657286


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f010b161:	b8 20 c6 10 f0       	mov    $0xf010c620,%eax
f010b166:	66 a3 40 72 65 f0    	mov    %ax,0xf0657240
f010b16c:	66 c7 05 42 72 65 f0 	movw   $0x8,0xf0657242
f010b173:	08 00 
f010b175:	a0 44 72 65 f0       	mov    0xf0657244,%al
f010b17a:	83 e0 e0             	and    $0xffffffe0,%eax
f010b17d:	a2 44 72 65 f0       	mov    %al,0xf0657244
f010b182:	a0 44 72 65 f0       	mov    0xf0657244,%al
f010b187:	83 e0 1f             	and    $0x1f,%eax
f010b18a:	a2 44 72 65 f0       	mov    %al,0xf0657244
f010b18f:	a0 45 72 65 f0       	mov    0xf0657245,%al
f010b194:	83 e0 f0             	and    $0xfffffff0,%eax
f010b197:	83 c8 0e             	or     $0xe,%eax
f010b19a:	a2 45 72 65 f0       	mov    %al,0xf0657245
f010b19f:	a0 45 72 65 f0       	mov    0xf0657245,%al
f010b1a4:	83 e0 ef             	and    $0xffffffef,%eax
f010b1a7:	a2 45 72 65 f0       	mov    %al,0xf0657245
f010b1ac:	a0 45 72 65 f0       	mov    0xf0657245,%al
f010b1b1:	83 c8 60             	or     $0x60,%eax
f010b1b4:	a2 45 72 65 f0       	mov    %al,0xf0657245
f010b1b9:	a0 45 72 65 f0       	mov    0xf0657245,%al
f010b1be:	83 c8 80             	or     $0xffffff80,%eax
f010b1c1:	a2 45 72 65 f0       	mov    %al,0xf0657245
f010b1c6:	b8 20 c6 10 f0       	mov    $0xf010c620,%eax
f010b1cb:	c1 e8 10             	shr    $0x10,%eax
f010b1ce:	66 a3 46 72 65 f0    	mov    %ax,0xf0657246
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f010b1d4:	b8 2a c6 10 f0       	mov    $0xf010c62a,%eax
f010b1d9:	66 a3 48 72 65 f0    	mov    %ax,0xf0657248
f010b1df:	66 c7 05 4a 72 65 f0 	movw   $0x8,0xf065724a
f010b1e6:	08 00 
f010b1e8:	a0 4c 72 65 f0       	mov    0xf065724c,%al
f010b1ed:	83 e0 e0             	and    $0xffffffe0,%eax
f010b1f0:	a2 4c 72 65 f0       	mov    %al,0xf065724c
f010b1f5:	a0 4c 72 65 f0       	mov    0xf065724c,%al
f010b1fa:	83 e0 1f             	and    $0x1f,%eax
f010b1fd:	a2 4c 72 65 f0       	mov    %al,0xf065724c
f010b202:	a0 4d 72 65 f0       	mov    0xf065724d,%al
f010b207:	83 c8 0f             	or     $0xf,%eax
f010b20a:	a2 4d 72 65 f0       	mov    %al,0xf065724d
f010b20f:	a0 4d 72 65 f0       	mov    0xf065724d,%al
f010b214:	83 e0 ef             	and    $0xffffffef,%eax
f010b217:	a2 4d 72 65 f0       	mov    %al,0xf065724d
f010b21c:	a0 4d 72 65 f0       	mov    0xf065724d,%al
f010b221:	83 c8 60             	or     $0x60,%eax
f010b224:	a2 4d 72 65 f0       	mov    %al,0xf065724d
f010b229:	a0 4d 72 65 f0       	mov    0xf065724d,%al
f010b22e:	83 c8 80             	or     $0xffffff80,%eax
f010b231:	a2 4d 72 65 f0       	mov    %al,0xf065724d
f010b236:	b8 2a c6 10 f0       	mov    $0xf010c62a,%eax
f010b23b:	c1 e8 10             	shr    $0x10,%eax
f010b23e:	66 a3 4e 72 65 f0    	mov    %ax,0xf065724e
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f010b244:	b8 34 c6 10 f0       	mov    $0xf010c634,%eax
f010b249:	66 a3 50 72 65 f0    	mov    %ax,0xf0657250
f010b24f:	66 c7 05 52 72 65 f0 	movw   $0x8,0xf0657252
f010b256:	08 00 
f010b258:	a0 54 72 65 f0       	mov    0xf0657254,%al
f010b25d:	83 e0 e0             	and    $0xffffffe0,%eax
f010b260:	a2 54 72 65 f0       	mov    %al,0xf0657254
f010b265:	a0 54 72 65 f0       	mov    0xf0657254,%al
f010b26a:	83 e0 1f             	and    $0x1f,%eax
f010b26d:	a2 54 72 65 f0       	mov    %al,0xf0657254
f010b272:	a0 55 72 65 f0       	mov    0xf0657255,%al
f010b277:	83 e0 f0             	and    $0xfffffff0,%eax
f010b27a:	83 c8 0e             	or     $0xe,%eax
f010b27d:	a2 55 72 65 f0       	mov    %al,0xf0657255
f010b282:	a0 55 72 65 f0       	mov    0xf0657255,%al
f010b287:	83 e0 ef             	and    $0xffffffef,%eax
f010b28a:	a2 55 72 65 f0       	mov    %al,0xf0657255
f010b28f:	a0 55 72 65 f0       	mov    0xf0657255,%al
f010b294:	83 c8 60             	or     $0x60,%eax
f010b297:	a2 55 72 65 f0       	mov    %al,0xf0657255
f010b29c:	a0 55 72 65 f0       	mov    0xf0657255,%al
f010b2a1:	83 c8 80             	or     $0xffffff80,%eax
f010b2a4:	a2 55 72 65 f0       	mov    %al,0xf0657255
f010b2a9:	b8 34 c6 10 f0       	mov    $0xf010c634,%eax
f010b2ae:	c1 e8 10             	shr    $0x10,%eax
f010b2b1:	66 a3 56 72 65 f0    	mov    %ax,0xf0657256
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010b2b7:	b8 3e c6 10 f0       	mov    $0xf010c63e,%eax
f010b2bc:	66 a3 58 72 65 f0    	mov    %ax,0xf0657258
f010b2c2:	66 c7 05 5a 72 65 f0 	movw   $0x8,0xf065725a
f010b2c9:	08 00 
f010b2cb:	a0 5c 72 65 f0       	mov    0xf065725c,%al
f010b2d0:	83 e0 e0             	and    $0xffffffe0,%eax
f010b2d3:	a2 5c 72 65 f0       	mov    %al,0xf065725c
f010b2d8:	a0 5c 72 65 f0       	mov    0xf065725c,%al
f010b2dd:	83 e0 1f             	and    $0x1f,%eax
f010b2e0:	a2 5c 72 65 f0       	mov    %al,0xf065725c
f010b2e5:	a0 5d 72 65 f0       	mov    0xf065725d,%al
f010b2ea:	83 c8 0f             	or     $0xf,%eax
f010b2ed:	a2 5d 72 65 f0       	mov    %al,0xf065725d
f010b2f2:	a0 5d 72 65 f0       	mov    0xf065725d,%al
f010b2f7:	83 e0 ef             	and    $0xffffffef,%eax
f010b2fa:	a2 5d 72 65 f0       	mov    %al,0xf065725d
f010b2ff:	a0 5d 72 65 f0       	mov    0xf065725d,%al
f010b304:	83 c8 60             	or     $0x60,%eax
f010b307:	a2 5d 72 65 f0       	mov    %al,0xf065725d
f010b30c:	a0 5d 72 65 f0       	mov    0xf065725d,%al
f010b311:	83 c8 80             	or     $0xffffff80,%eax
f010b314:	a2 5d 72 65 f0       	mov    %al,0xf065725d
f010b319:	b8 3e c6 10 f0       	mov    $0xf010c63e,%eax
f010b31e:	c1 e8 10             	shr    $0x10,%eax
f010b321:	66 a3 5e 72 65 f0    	mov    %ax,0xf065725e
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010b327:	b8 48 c6 10 f0       	mov    $0xf010c648,%eax
f010b32c:	66 a3 60 72 65 f0    	mov    %ax,0xf0657260
f010b332:	66 c7 05 62 72 65 f0 	movw   $0x8,0xf0657262
f010b339:	08 00 
f010b33b:	a0 64 72 65 f0       	mov    0xf0657264,%al
f010b340:	83 e0 e0             	and    $0xffffffe0,%eax
f010b343:	a2 64 72 65 f0       	mov    %al,0xf0657264
f010b348:	a0 64 72 65 f0       	mov    0xf0657264,%al
f010b34d:	83 e0 1f             	and    $0x1f,%eax
f010b350:	a2 64 72 65 f0       	mov    %al,0xf0657264
f010b355:	a0 65 72 65 f0       	mov    0xf0657265,%al
f010b35a:	83 c8 0f             	or     $0xf,%eax
f010b35d:	a2 65 72 65 f0       	mov    %al,0xf0657265
f010b362:	a0 65 72 65 f0       	mov    0xf0657265,%al
f010b367:	83 e0 ef             	and    $0xffffffef,%eax
f010b36a:	a2 65 72 65 f0       	mov    %al,0xf0657265
f010b36f:	a0 65 72 65 f0       	mov    0xf0657265,%al
f010b374:	83 c8 60             	or     $0x60,%eax
f010b377:	a2 65 72 65 f0       	mov    %al,0xf0657265
f010b37c:	a0 65 72 65 f0       	mov    0xf0657265,%al
f010b381:	83 c8 80             	or     $0xffffff80,%eax
f010b384:	a2 65 72 65 f0       	mov    %al,0xf0657265
f010b389:	b8 48 c6 10 f0       	mov    $0xf010c648,%eax
f010b38e:	c1 e8 10             	shr    $0x10,%eax
f010b391:	66 a3 66 72 65 f0    	mov    %ax,0xf0657266
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010b397:	b8 52 c6 10 f0       	mov    $0xf010c652,%eax
f010b39c:	66 a3 68 72 65 f0    	mov    %ax,0xf0657268
f010b3a2:	66 c7 05 6a 72 65 f0 	movw   $0x8,0xf065726a
f010b3a9:	08 00 
f010b3ab:	a0 6c 72 65 f0       	mov    0xf065726c,%al
f010b3b0:	83 e0 e0             	and    $0xffffffe0,%eax
f010b3b3:	a2 6c 72 65 f0       	mov    %al,0xf065726c
f010b3b8:	a0 6c 72 65 f0       	mov    0xf065726c,%al
f010b3bd:	83 e0 1f             	and    $0x1f,%eax
f010b3c0:	a2 6c 72 65 f0       	mov    %al,0xf065726c
f010b3c5:	a0 6d 72 65 f0       	mov    0xf065726d,%al
f010b3ca:	83 e0 f0             	and    $0xfffffff0,%eax
f010b3cd:	83 c8 0e             	or     $0xe,%eax
f010b3d0:	a2 6d 72 65 f0       	mov    %al,0xf065726d
f010b3d5:	a0 6d 72 65 f0       	mov    0xf065726d,%al
f010b3da:	83 e0 ef             	and    $0xffffffef,%eax
f010b3dd:	a2 6d 72 65 f0       	mov    %al,0xf065726d
f010b3e2:	a0 6d 72 65 f0       	mov    0xf065726d,%al
f010b3e7:	83 c8 60             	or     $0x60,%eax
f010b3ea:	a2 6d 72 65 f0       	mov    %al,0xf065726d
f010b3ef:	a0 6d 72 65 f0       	mov    0xf065726d,%al
f010b3f4:	83 c8 80             	or     $0xffffff80,%eax
f010b3f7:	a2 6d 72 65 f0       	mov    %al,0xf065726d
f010b3fc:	b8 52 c6 10 f0       	mov    $0xf010c652,%eax
f010b401:	c1 e8 10             	shr    $0x10,%eax
f010b404:	66 a3 6e 72 65 f0    	mov    %ax,0xf065726e
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010b40a:	b8 5c c6 10 f0       	mov    $0xf010c65c,%eax
f010b40f:	66 a3 70 72 65 f0    	mov    %ax,0xf0657270
f010b415:	66 c7 05 72 72 65 f0 	movw   $0x8,0xf0657272
f010b41c:	08 00 
f010b41e:	a0 74 72 65 f0       	mov    0xf0657274,%al
f010b423:	83 e0 e0             	and    $0xffffffe0,%eax
f010b426:	a2 74 72 65 f0       	mov    %al,0xf0657274
f010b42b:	a0 74 72 65 f0       	mov    0xf0657274,%al
f010b430:	83 e0 1f             	and    $0x1f,%eax
f010b433:	a2 74 72 65 f0       	mov    %al,0xf0657274
f010b438:	a0 75 72 65 f0       	mov    0xf0657275,%al
f010b43d:	83 e0 f0             	and    $0xfffffff0,%eax
f010b440:	83 c8 0e             	or     $0xe,%eax
f010b443:	a2 75 72 65 f0       	mov    %al,0xf0657275
f010b448:	a0 75 72 65 f0       	mov    0xf0657275,%al
f010b44d:	83 e0 ef             	and    $0xffffffef,%eax
f010b450:	a2 75 72 65 f0       	mov    %al,0xf0657275
f010b455:	a0 75 72 65 f0       	mov    0xf0657275,%al
f010b45a:	83 c8 60             	or     $0x60,%eax
f010b45d:	a2 75 72 65 f0       	mov    %al,0xf0657275
f010b462:	a0 75 72 65 f0       	mov    0xf0657275,%al
f010b467:	83 c8 80             	or     $0xffffff80,%eax
f010b46a:	a2 75 72 65 f0       	mov    %al,0xf0657275
f010b46f:	b8 5c c6 10 f0       	mov    $0xf010c65c,%eax
f010b474:	c1 e8 10             	shr    $0x10,%eax
f010b477:	66 a3 76 72 65 f0    	mov    %ax,0xf0657276
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010b47d:	b8 66 c6 10 f0       	mov    $0xf010c666,%eax
f010b482:	66 a3 78 72 65 f0    	mov    %ax,0xf0657278
f010b488:	66 c7 05 7a 72 65 f0 	movw   $0x8,0xf065727a
f010b48f:	08 00 
f010b491:	a0 7c 72 65 f0       	mov    0xf065727c,%al
f010b496:	83 e0 e0             	and    $0xffffffe0,%eax
f010b499:	a2 7c 72 65 f0       	mov    %al,0xf065727c
f010b49e:	a0 7c 72 65 f0       	mov    0xf065727c,%al
f010b4a3:	83 e0 1f             	and    $0x1f,%eax
f010b4a6:	a2 7c 72 65 f0       	mov    %al,0xf065727c
f010b4ab:	a0 7d 72 65 f0       	mov    0xf065727d,%al
f010b4b0:	83 e0 f0             	and    $0xfffffff0,%eax
f010b4b3:	83 c8 0e             	or     $0xe,%eax
f010b4b6:	a2 7d 72 65 f0       	mov    %al,0xf065727d
f010b4bb:	a0 7d 72 65 f0       	mov    0xf065727d,%al
f010b4c0:	83 e0 ef             	and    $0xffffffef,%eax
f010b4c3:	a2 7d 72 65 f0       	mov    %al,0xf065727d
f010b4c8:	a0 7d 72 65 f0       	mov    0xf065727d,%al
f010b4cd:	83 c8 60             	or     $0x60,%eax
f010b4d0:	a2 7d 72 65 f0       	mov    %al,0xf065727d
f010b4d5:	a0 7d 72 65 f0       	mov    0xf065727d,%al
f010b4da:	83 c8 80             	or     $0xffffff80,%eax
f010b4dd:	a2 7d 72 65 f0       	mov    %al,0xf065727d
f010b4e2:	b8 66 c6 10 f0       	mov    $0xf010c666,%eax
f010b4e7:	c1 e8 10             	shr    $0x10,%eax
f010b4ea:	66 a3 7e 72 65 f0    	mov    %ax,0xf065727e
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010b4f0:	b8 70 c6 10 f0       	mov    $0xf010c670,%eax
f010b4f5:	66 a3 90 72 65 f0    	mov    %ax,0xf0657290
f010b4fb:	66 c7 05 92 72 65 f0 	movw   $0x8,0xf0657292
f010b502:	08 00 
f010b504:	a0 94 72 65 f0       	mov    0xf0657294,%al
f010b509:	83 e0 e0             	and    $0xffffffe0,%eax
f010b50c:	a2 94 72 65 f0       	mov    %al,0xf0657294
f010b511:	a0 94 72 65 f0       	mov    0xf0657294,%al
f010b516:	83 e0 1f             	and    $0x1f,%eax
f010b519:	a2 94 72 65 f0       	mov    %al,0xf0657294
f010b51e:	a0 95 72 65 f0       	mov    0xf0657295,%al
f010b523:	83 e0 f0             	and    $0xfffffff0,%eax
f010b526:	83 c8 0e             	or     $0xe,%eax
f010b529:	a2 95 72 65 f0       	mov    %al,0xf0657295
f010b52e:	a0 95 72 65 f0       	mov    0xf0657295,%al
f010b533:	83 e0 ef             	and    $0xffffffef,%eax
f010b536:	a2 95 72 65 f0       	mov    %al,0xf0657295
f010b53b:	a0 95 72 65 f0       	mov    0xf0657295,%al
f010b540:	83 c8 60             	or     $0x60,%eax
f010b543:	a2 95 72 65 f0       	mov    %al,0xf0657295
f010b548:	a0 95 72 65 f0       	mov    0xf0657295,%al
f010b54d:	83 c8 80             	or     $0xffffff80,%eax
f010b550:	a2 95 72 65 f0       	mov    %al,0xf0657295
f010b555:	b8 70 c6 10 f0       	mov    $0xf010c670,%eax
f010b55a:	c1 e8 10             	shr    $0x10,%eax
f010b55d:	66 a3 96 72 65 f0    	mov    %ax,0xf0657296
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010b563:	b8 78 c6 10 f0       	mov    $0xf010c678,%eax
f010b568:	66 a3 98 72 65 f0    	mov    %ax,0xf0657298
f010b56e:	66 c7 05 9a 72 65 f0 	movw   $0x8,0xf065729a
f010b575:	08 00 
f010b577:	a0 9c 72 65 f0       	mov    0xf065729c,%al
f010b57c:	83 e0 e0             	and    $0xffffffe0,%eax
f010b57f:	a2 9c 72 65 f0       	mov    %al,0xf065729c
f010b584:	a0 9c 72 65 f0       	mov    0xf065729c,%al
f010b589:	83 e0 1f             	and    $0x1f,%eax
f010b58c:	a2 9c 72 65 f0       	mov    %al,0xf065729c
f010b591:	a0 9d 72 65 f0       	mov    0xf065729d,%al
f010b596:	83 e0 f0             	and    $0xfffffff0,%eax
f010b599:	83 c8 0e             	or     $0xe,%eax
f010b59c:	a2 9d 72 65 f0       	mov    %al,0xf065729d
f010b5a1:	a0 9d 72 65 f0       	mov    0xf065729d,%al
f010b5a6:	83 e0 ef             	and    $0xffffffef,%eax
f010b5a9:	a2 9d 72 65 f0       	mov    %al,0xf065729d
f010b5ae:	a0 9d 72 65 f0       	mov    0xf065729d,%al
f010b5b3:	83 c8 60             	or     $0x60,%eax
f010b5b6:	a2 9d 72 65 f0       	mov    %al,0xf065729d
f010b5bb:	a0 9d 72 65 f0       	mov    0xf065729d,%al
f010b5c0:	83 c8 80             	or     $0xffffff80,%eax
f010b5c3:	a2 9d 72 65 f0       	mov    %al,0xf065729d
f010b5c8:	b8 78 c6 10 f0       	mov    $0xf010c678,%eax
f010b5cd:	c1 e8 10             	shr    $0x10,%eax
f010b5d0:	66 a3 9e 72 65 f0    	mov    %ax,0xf065729e
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010b5d6:	b8 7c c6 10 f0       	mov    $0xf010c67c,%eax
f010b5db:	66 a3 a0 72 65 f0    	mov    %ax,0xf06572a0
f010b5e1:	66 c7 05 a2 72 65 f0 	movw   $0x8,0xf06572a2
f010b5e8:	08 00 
f010b5ea:	a0 a4 72 65 f0       	mov    0xf06572a4,%al
f010b5ef:	83 e0 e0             	and    $0xffffffe0,%eax
f010b5f2:	a2 a4 72 65 f0       	mov    %al,0xf06572a4
f010b5f7:	a0 a4 72 65 f0       	mov    0xf06572a4,%al
f010b5fc:	83 e0 1f             	and    $0x1f,%eax
f010b5ff:	a2 a4 72 65 f0       	mov    %al,0xf06572a4
f010b604:	a0 a5 72 65 f0       	mov    0xf06572a5,%al
f010b609:	83 e0 f0             	and    $0xfffffff0,%eax
f010b60c:	83 c8 0e             	or     $0xe,%eax
f010b60f:	a2 a5 72 65 f0       	mov    %al,0xf06572a5
f010b614:	a0 a5 72 65 f0       	mov    0xf06572a5,%al
f010b619:	83 e0 ef             	and    $0xffffffef,%eax
f010b61c:	a2 a5 72 65 f0       	mov    %al,0xf06572a5
f010b621:	a0 a5 72 65 f0       	mov    0xf06572a5,%al
f010b626:	83 c8 60             	or     $0x60,%eax
f010b629:	a2 a5 72 65 f0       	mov    %al,0xf06572a5
f010b62e:	a0 a5 72 65 f0       	mov    0xf06572a5,%al
f010b633:	83 c8 80             	or     $0xffffff80,%eax
f010b636:	a2 a5 72 65 f0       	mov    %al,0xf06572a5
f010b63b:	b8 7c c6 10 f0       	mov    $0xf010c67c,%eax
f010b640:	c1 e8 10             	shr    $0x10,%eax
f010b643:	66 a3 a6 72 65 f0    	mov    %ax,0xf06572a6
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010b649:	b8 80 c6 10 f0       	mov    $0xf010c680,%eax
f010b64e:	66 a3 a8 72 65 f0    	mov    %ax,0xf06572a8
f010b654:	66 c7 05 aa 72 65 f0 	movw   $0x8,0xf06572aa
f010b65b:	08 00 
f010b65d:	a0 ac 72 65 f0       	mov    0xf06572ac,%al
f010b662:	83 e0 e0             	and    $0xffffffe0,%eax
f010b665:	a2 ac 72 65 f0       	mov    %al,0xf06572ac
f010b66a:	a0 ac 72 65 f0       	mov    0xf06572ac,%al
f010b66f:	83 e0 1f             	and    $0x1f,%eax
f010b672:	a2 ac 72 65 f0       	mov    %al,0xf06572ac
f010b677:	a0 ad 72 65 f0       	mov    0xf06572ad,%al
f010b67c:	83 e0 f0             	and    $0xfffffff0,%eax
f010b67f:	83 c8 0e             	or     $0xe,%eax
f010b682:	a2 ad 72 65 f0       	mov    %al,0xf06572ad
f010b687:	a0 ad 72 65 f0       	mov    0xf06572ad,%al
f010b68c:	83 e0 ef             	and    $0xffffffef,%eax
f010b68f:	a2 ad 72 65 f0       	mov    %al,0xf06572ad
f010b694:	a0 ad 72 65 f0       	mov    0xf06572ad,%al
f010b699:	83 c8 60             	or     $0x60,%eax
f010b69c:	a2 ad 72 65 f0       	mov    %al,0xf06572ad
f010b6a1:	a0 ad 72 65 f0       	mov    0xf06572ad,%al
f010b6a6:	83 c8 80             	or     $0xffffff80,%eax
f010b6a9:	a2 ad 72 65 f0       	mov    %al,0xf06572ad
f010b6ae:	b8 80 c6 10 f0       	mov    $0xf010c680,%eax
f010b6b3:	c1 e8 10             	shr    $0x10,%eax
f010b6b6:	66 a3 ae 72 65 f0    	mov    %ax,0xf06572ae
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010b6bc:	b8 84 c6 10 f0       	mov    $0xf010c684,%eax
f010b6c1:	66 a3 c0 72 65 f0    	mov    %ax,0xf06572c0
f010b6c7:	66 c7 05 c2 72 65 f0 	movw   $0x8,0xf06572c2
f010b6ce:	08 00 
f010b6d0:	a0 c4 72 65 f0       	mov    0xf06572c4,%al
f010b6d5:	83 e0 e0             	and    $0xffffffe0,%eax
f010b6d8:	a2 c4 72 65 f0       	mov    %al,0xf06572c4
f010b6dd:	a0 c4 72 65 f0       	mov    0xf06572c4,%al
f010b6e2:	83 e0 1f             	and    $0x1f,%eax
f010b6e5:	a2 c4 72 65 f0       	mov    %al,0xf06572c4
f010b6ea:	a0 c5 72 65 f0       	mov    0xf06572c5,%al
f010b6ef:	83 e0 f0             	and    $0xfffffff0,%eax
f010b6f2:	83 c8 0e             	or     $0xe,%eax
f010b6f5:	a2 c5 72 65 f0       	mov    %al,0xf06572c5
f010b6fa:	a0 c5 72 65 f0       	mov    0xf06572c5,%al
f010b6ff:	83 e0 ef             	and    $0xffffffef,%eax
f010b702:	a2 c5 72 65 f0       	mov    %al,0xf06572c5
f010b707:	a0 c5 72 65 f0       	mov    0xf06572c5,%al
f010b70c:	83 c8 60             	or     $0x60,%eax
f010b70f:	a2 c5 72 65 f0       	mov    %al,0xf06572c5
f010b714:	a0 c5 72 65 f0       	mov    0xf06572c5,%al
f010b719:	83 c8 80             	or     $0xffffff80,%eax
f010b71c:	a2 c5 72 65 f0       	mov    %al,0xf06572c5
f010b721:	b8 84 c6 10 f0       	mov    $0xf010c684,%eax
f010b726:	c1 e8 10             	shr    $0x10,%eax
f010b729:	66 a3 c6 72 65 f0    	mov    %ax,0xf06572c6
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010b72f:	b8 8a c6 10 f0       	mov    $0xf010c68a,%eax
f010b734:	66 a3 c8 72 65 f0    	mov    %ax,0xf06572c8
f010b73a:	66 c7 05 ca 72 65 f0 	movw   $0x8,0xf06572ca
f010b741:	08 00 
f010b743:	a0 cc 72 65 f0       	mov    0xf06572cc,%al
f010b748:	83 e0 e0             	and    $0xffffffe0,%eax
f010b74b:	a2 cc 72 65 f0       	mov    %al,0xf06572cc
f010b750:	a0 cc 72 65 f0       	mov    0xf06572cc,%al
f010b755:	83 e0 1f             	and    $0x1f,%eax
f010b758:	a2 cc 72 65 f0       	mov    %al,0xf06572cc
f010b75d:	a0 cd 72 65 f0       	mov    0xf06572cd,%al
f010b762:	83 e0 f0             	and    $0xfffffff0,%eax
f010b765:	83 c8 0e             	or     $0xe,%eax
f010b768:	a2 cd 72 65 f0       	mov    %al,0xf06572cd
f010b76d:	a0 cd 72 65 f0       	mov    0xf06572cd,%al
f010b772:	83 e0 ef             	and    $0xffffffef,%eax
f010b775:	a2 cd 72 65 f0       	mov    %al,0xf06572cd
f010b77a:	a0 cd 72 65 f0       	mov    0xf06572cd,%al
f010b77f:	83 c8 60             	or     $0x60,%eax
f010b782:	a2 cd 72 65 f0       	mov    %al,0xf06572cd
f010b787:	a0 cd 72 65 f0       	mov    0xf06572cd,%al
f010b78c:	83 c8 80             	or     $0xffffff80,%eax
f010b78f:	a2 cd 72 65 f0       	mov    %al,0xf06572cd
f010b794:	b8 8a c6 10 f0       	mov    $0xf010c68a,%eax
f010b799:	c1 e8 10             	shr    $0x10,%eax
f010b79c:	66 a3 ce 72 65 f0    	mov    %ax,0xf06572ce
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010b7a2:	b8 8e c6 10 f0       	mov    $0xf010c68e,%eax
f010b7a7:	66 a3 d0 72 65 f0    	mov    %ax,0xf06572d0
f010b7ad:	66 c7 05 d2 72 65 f0 	movw   $0x8,0xf06572d2
f010b7b4:	08 00 
f010b7b6:	a0 d4 72 65 f0       	mov    0xf06572d4,%al
f010b7bb:	83 e0 e0             	and    $0xffffffe0,%eax
f010b7be:	a2 d4 72 65 f0       	mov    %al,0xf06572d4
f010b7c3:	a0 d4 72 65 f0       	mov    0xf06572d4,%al
f010b7c8:	83 e0 1f             	and    $0x1f,%eax
f010b7cb:	a2 d4 72 65 f0       	mov    %al,0xf06572d4
f010b7d0:	a0 d5 72 65 f0       	mov    0xf06572d5,%al
f010b7d5:	83 e0 f0             	and    $0xfffffff0,%eax
f010b7d8:	83 c8 0e             	or     $0xe,%eax
f010b7db:	a2 d5 72 65 f0       	mov    %al,0xf06572d5
f010b7e0:	a0 d5 72 65 f0       	mov    0xf06572d5,%al
f010b7e5:	83 e0 ef             	and    $0xffffffef,%eax
f010b7e8:	a2 d5 72 65 f0       	mov    %al,0xf06572d5
f010b7ed:	a0 d5 72 65 f0       	mov    0xf06572d5,%al
f010b7f2:	83 c8 60             	or     $0x60,%eax
f010b7f5:	a2 d5 72 65 f0       	mov    %al,0xf06572d5
f010b7fa:	a0 d5 72 65 f0       	mov    0xf06572d5,%al
f010b7ff:	83 c8 80             	or     $0xffffff80,%eax
f010b802:	a2 d5 72 65 f0       	mov    %al,0xf06572d5
f010b807:	b8 8e c6 10 f0       	mov    $0xf010c68e,%eax
f010b80c:	c1 e8 10             	shr    $0x10,%eax
f010b80f:	66 a3 d6 72 65 f0    	mov    %ax,0xf06572d6
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010b815:	b8 94 c6 10 f0       	mov    $0xf010c694,%eax
f010b81a:	66 a3 d8 72 65 f0    	mov    %ax,0xf06572d8
f010b820:	66 c7 05 da 72 65 f0 	movw   $0x8,0xf06572da
f010b827:	08 00 
f010b829:	a0 dc 72 65 f0       	mov    0xf06572dc,%al
f010b82e:	83 e0 e0             	and    $0xffffffe0,%eax
f010b831:	a2 dc 72 65 f0       	mov    %al,0xf06572dc
f010b836:	a0 dc 72 65 f0       	mov    0xf06572dc,%al
f010b83b:	83 e0 1f             	and    $0x1f,%eax
f010b83e:	a2 dc 72 65 f0       	mov    %al,0xf06572dc
f010b843:	a0 dd 72 65 f0       	mov    0xf06572dd,%al
f010b848:	83 e0 f0             	and    $0xfffffff0,%eax
f010b84b:	83 c8 0e             	or     $0xe,%eax
f010b84e:	a2 dd 72 65 f0       	mov    %al,0xf06572dd
f010b853:	a0 dd 72 65 f0       	mov    0xf06572dd,%al
f010b858:	83 e0 ef             	and    $0xffffffef,%eax
f010b85b:	a2 dd 72 65 f0       	mov    %al,0xf06572dd
f010b860:	a0 dd 72 65 f0       	mov    0xf06572dd,%al
f010b865:	83 c8 60             	or     $0x60,%eax
f010b868:	a2 dd 72 65 f0       	mov    %al,0xf06572dd
f010b86d:	a0 dd 72 65 f0       	mov    0xf06572dd,%al
f010b872:	83 c8 80             	or     $0xffffff80,%eax
f010b875:	a2 dd 72 65 f0       	mov    %al,0xf06572dd
f010b87a:	b8 94 c6 10 f0       	mov    $0xf010c694,%eax
f010b87f:	c1 e8 10             	shr    $0x10,%eax
f010b882:	66 a3 de 72 65 f0    	mov    %ax,0xf06572de


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f010b888:	b8 9a c6 10 f0       	mov    $0xf010c69a,%eax
f010b88d:	66 a3 40 73 65 f0    	mov    %ax,0xf0657340
f010b893:	66 c7 05 42 73 65 f0 	movw   $0x8,0xf0657342
f010b89a:	08 00 
f010b89c:	a0 44 73 65 f0       	mov    0xf0657344,%al
f010b8a1:	83 e0 e0             	and    $0xffffffe0,%eax
f010b8a4:	a2 44 73 65 f0       	mov    %al,0xf0657344
f010b8a9:	a0 44 73 65 f0       	mov    0xf0657344,%al
f010b8ae:	83 e0 1f             	and    $0x1f,%eax
f010b8b1:	a2 44 73 65 f0       	mov    %al,0xf0657344
f010b8b6:	a0 45 73 65 f0       	mov    0xf0657345,%al
f010b8bb:	83 e0 f0             	and    $0xfffffff0,%eax
f010b8be:	83 c8 0e             	or     $0xe,%eax
f010b8c1:	a2 45 73 65 f0       	mov    %al,0xf0657345
f010b8c6:	a0 45 73 65 f0       	mov    0xf0657345,%al
f010b8cb:	83 e0 ef             	and    $0xffffffef,%eax
f010b8ce:	a2 45 73 65 f0       	mov    %al,0xf0657345
f010b8d3:	a0 45 73 65 f0       	mov    0xf0657345,%al
f010b8d8:	83 c8 60             	or     $0x60,%eax
f010b8db:	a2 45 73 65 f0       	mov    %al,0xf0657345
f010b8e0:	a0 45 73 65 f0       	mov    0xf0657345,%al
f010b8e5:	83 c8 80             	or     $0xffffff80,%eax
f010b8e8:	a2 45 73 65 f0       	mov    %al,0xf0657345
f010b8ed:	b8 9a c6 10 f0       	mov    $0xf010c69a,%eax
f010b8f2:	c1 e8 10             	shr    $0x10,%eax
f010b8f5:	66 a3 46 73 65 f0    	mov    %ax,0xf0657346
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f010b8fb:	b8 a0 c6 10 f0       	mov    $0xf010c6a0,%eax
f010b900:	66 a3 48 73 65 f0    	mov    %ax,0xf0657348
f010b906:	66 c7 05 4a 73 65 f0 	movw   $0x8,0xf065734a
f010b90d:	08 00 
f010b90f:	a0 4c 73 65 f0       	mov    0xf065734c,%al
f010b914:	83 e0 e0             	and    $0xffffffe0,%eax
f010b917:	a2 4c 73 65 f0       	mov    %al,0xf065734c
f010b91c:	a0 4c 73 65 f0       	mov    0xf065734c,%al
f010b921:	83 e0 1f             	and    $0x1f,%eax
f010b924:	a2 4c 73 65 f0       	mov    %al,0xf065734c
f010b929:	a0 4d 73 65 f0       	mov    0xf065734d,%al
f010b92e:	83 e0 f0             	and    $0xfffffff0,%eax
f010b931:	83 c8 0e             	or     $0xe,%eax
f010b934:	a2 4d 73 65 f0       	mov    %al,0xf065734d
f010b939:	a0 4d 73 65 f0       	mov    0xf065734d,%al
f010b93e:	83 e0 ef             	and    $0xffffffef,%eax
f010b941:	a2 4d 73 65 f0       	mov    %al,0xf065734d
f010b946:	a0 4d 73 65 f0       	mov    0xf065734d,%al
f010b94b:	83 c8 60             	or     $0x60,%eax
f010b94e:	a2 4d 73 65 f0       	mov    %al,0xf065734d
f010b953:	a0 4d 73 65 f0       	mov    0xf065734d,%al
f010b958:	83 c8 80             	or     $0xffffff80,%eax
f010b95b:	a2 4d 73 65 f0       	mov    %al,0xf065734d
f010b960:	b8 a0 c6 10 f0       	mov    $0xf010c6a0,%eax
f010b965:	c1 e8 10             	shr    $0x10,%eax
f010b968:	66 a3 4e 73 65 f0    	mov    %ax,0xf065734e
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010b96e:	b8 a6 c6 10 f0       	mov    $0xf010c6a6,%eax
f010b973:	66 a3 50 73 65 f0    	mov    %ax,0xf0657350
f010b979:	66 c7 05 52 73 65 f0 	movw   $0x8,0xf0657352
f010b980:	08 00 
f010b982:	a0 54 73 65 f0       	mov    0xf0657354,%al
f010b987:	83 e0 e0             	and    $0xffffffe0,%eax
f010b98a:	a2 54 73 65 f0       	mov    %al,0xf0657354
f010b98f:	a0 54 73 65 f0       	mov    0xf0657354,%al
f010b994:	83 e0 1f             	and    $0x1f,%eax
f010b997:	a2 54 73 65 f0       	mov    %al,0xf0657354
f010b99c:	a0 55 73 65 f0       	mov    0xf0657355,%al
f010b9a1:	83 e0 f0             	and    $0xfffffff0,%eax
f010b9a4:	83 c8 0e             	or     $0xe,%eax
f010b9a7:	a2 55 73 65 f0       	mov    %al,0xf0657355
f010b9ac:	a0 55 73 65 f0       	mov    0xf0657355,%al
f010b9b1:	83 e0 ef             	and    $0xffffffef,%eax
f010b9b4:	a2 55 73 65 f0       	mov    %al,0xf0657355
f010b9b9:	a0 55 73 65 f0       	mov    0xf0657355,%al
f010b9be:	83 c8 60             	or     $0x60,%eax
f010b9c1:	a2 55 73 65 f0       	mov    %al,0xf0657355
f010b9c6:	a0 55 73 65 f0       	mov    0xf0657355,%al
f010b9cb:	83 c8 80             	or     $0xffffff80,%eax
f010b9ce:	a2 55 73 65 f0       	mov    %al,0xf0657355
f010b9d3:	b8 a6 c6 10 f0       	mov    $0xf010c6a6,%eax
f010b9d8:	c1 e8 10             	shr    $0x10,%eax
f010b9db:	66 a3 56 73 65 f0    	mov    %ax,0xf0657356
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010b9e1:	b8 ac c6 10 f0       	mov    $0xf010c6ac,%eax
f010b9e6:	66 a3 58 73 65 f0    	mov    %ax,0xf0657358
f010b9ec:	66 c7 05 5a 73 65 f0 	movw   $0x8,0xf065735a
f010b9f3:	08 00 
f010b9f5:	a0 5c 73 65 f0       	mov    0xf065735c,%al
f010b9fa:	83 e0 e0             	and    $0xffffffe0,%eax
f010b9fd:	a2 5c 73 65 f0       	mov    %al,0xf065735c
f010ba02:	a0 5c 73 65 f0       	mov    0xf065735c,%al
f010ba07:	83 e0 1f             	and    $0x1f,%eax
f010ba0a:	a2 5c 73 65 f0       	mov    %al,0xf065735c
f010ba0f:	a0 5d 73 65 f0       	mov    0xf065735d,%al
f010ba14:	83 e0 f0             	and    $0xfffffff0,%eax
f010ba17:	83 c8 0e             	or     $0xe,%eax
f010ba1a:	a2 5d 73 65 f0       	mov    %al,0xf065735d
f010ba1f:	a0 5d 73 65 f0       	mov    0xf065735d,%al
f010ba24:	83 e0 ef             	and    $0xffffffef,%eax
f010ba27:	a2 5d 73 65 f0       	mov    %al,0xf065735d
f010ba2c:	a0 5d 73 65 f0       	mov    0xf065735d,%al
f010ba31:	83 c8 60             	or     $0x60,%eax
f010ba34:	a2 5d 73 65 f0       	mov    %al,0xf065735d
f010ba39:	a0 5d 73 65 f0       	mov    0xf065735d,%al
f010ba3e:	83 c8 80             	or     $0xffffff80,%eax
f010ba41:	a2 5d 73 65 f0       	mov    %al,0xf065735d
f010ba46:	b8 ac c6 10 f0       	mov    $0xf010c6ac,%eax
f010ba4b:	c1 e8 10             	shr    $0x10,%eax
f010ba4e:	66 a3 5e 73 65 f0    	mov    %ax,0xf065735e
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010ba54:	b8 b2 c6 10 f0       	mov    $0xf010c6b2,%eax
f010ba59:	66 a3 60 73 65 f0    	mov    %ax,0xf0657360
f010ba5f:	66 c7 05 62 73 65 f0 	movw   $0x8,0xf0657362
f010ba66:	08 00 
f010ba68:	a0 64 73 65 f0       	mov    0xf0657364,%al
f010ba6d:	83 e0 e0             	and    $0xffffffe0,%eax
f010ba70:	a2 64 73 65 f0       	mov    %al,0xf0657364
f010ba75:	a0 64 73 65 f0       	mov    0xf0657364,%al
f010ba7a:	83 e0 1f             	and    $0x1f,%eax
f010ba7d:	a2 64 73 65 f0       	mov    %al,0xf0657364
f010ba82:	a0 65 73 65 f0       	mov    0xf0657365,%al
f010ba87:	83 e0 f0             	and    $0xfffffff0,%eax
f010ba8a:	83 c8 0e             	or     $0xe,%eax
f010ba8d:	a2 65 73 65 f0       	mov    %al,0xf0657365
f010ba92:	a0 65 73 65 f0       	mov    0xf0657365,%al
f010ba97:	83 e0 ef             	and    $0xffffffef,%eax
f010ba9a:	a2 65 73 65 f0       	mov    %al,0xf0657365
f010ba9f:	a0 65 73 65 f0       	mov    0xf0657365,%al
f010baa4:	83 c8 60             	or     $0x60,%eax
f010baa7:	a2 65 73 65 f0       	mov    %al,0xf0657365
f010baac:	a0 65 73 65 f0       	mov    0xf0657365,%al
f010bab1:	83 c8 80             	or     $0xffffff80,%eax
f010bab4:	a2 65 73 65 f0       	mov    %al,0xf0657365
f010bab9:	b8 b2 c6 10 f0       	mov    $0xf010c6b2,%eax
f010babe:	c1 e8 10             	shr    $0x10,%eax
f010bac1:	66 a3 66 73 65 f0    	mov    %ax,0xf0657366
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010bac7:	b8 b8 c6 10 f0       	mov    $0xf010c6b8,%eax
f010bacc:	66 a3 68 73 65 f0    	mov    %ax,0xf0657368
f010bad2:	66 c7 05 6a 73 65 f0 	movw   $0x8,0xf065736a
f010bad9:	08 00 
f010badb:	a0 6c 73 65 f0       	mov    0xf065736c,%al
f010bae0:	83 e0 e0             	and    $0xffffffe0,%eax
f010bae3:	a2 6c 73 65 f0       	mov    %al,0xf065736c
f010bae8:	a0 6c 73 65 f0       	mov    0xf065736c,%al
f010baed:	83 e0 1f             	and    $0x1f,%eax
f010baf0:	a2 6c 73 65 f0       	mov    %al,0xf065736c
f010baf5:	a0 6d 73 65 f0       	mov    0xf065736d,%al
f010bafa:	83 e0 f0             	and    $0xfffffff0,%eax
f010bafd:	83 c8 0e             	or     $0xe,%eax
f010bb00:	a2 6d 73 65 f0       	mov    %al,0xf065736d
f010bb05:	a0 6d 73 65 f0       	mov    0xf065736d,%al
f010bb0a:	83 e0 ef             	and    $0xffffffef,%eax
f010bb0d:	a2 6d 73 65 f0       	mov    %al,0xf065736d
f010bb12:	a0 6d 73 65 f0       	mov    0xf065736d,%al
f010bb17:	83 c8 60             	or     $0x60,%eax
f010bb1a:	a2 6d 73 65 f0       	mov    %al,0xf065736d
f010bb1f:	a0 6d 73 65 f0       	mov    0xf065736d,%al
f010bb24:	83 c8 80             	or     $0xffffff80,%eax
f010bb27:	a2 6d 73 65 f0       	mov    %al,0xf065736d
f010bb2c:	b8 b8 c6 10 f0       	mov    $0xf010c6b8,%eax
f010bb31:	c1 e8 10             	shr    $0x10,%eax
f010bb34:	66 a3 6e 73 65 f0    	mov    %ax,0xf065736e
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010bb3a:	b8 be c6 10 f0       	mov    $0xf010c6be,%eax
f010bb3f:	66 a3 70 73 65 f0    	mov    %ax,0xf0657370
f010bb45:	66 c7 05 72 73 65 f0 	movw   $0x8,0xf0657372
f010bb4c:	08 00 
f010bb4e:	a0 74 73 65 f0       	mov    0xf0657374,%al
f010bb53:	83 e0 e0             	and    $0xffffffe0,%eax
f010bb56:	a2 74 73 65 f0       	mov    %al,0xf0657374
f010bb5b:	a0 74 73 65 f0       	mov    0xf0657374,%al
f010bb60:	83 e0 1f             	and    $0x1f,%eax
f010bb63:	a2 74 73 65 f0       	mov    %al,0xf0657374
f010bb68:	a0 75 73 65 f0       	mov    0xf0657375,%al
f010bb6d:	83 e0 f0             	and    $0xfffffff0,%eax
f010bb70:	83 c8 0e             	or     $0xe,%eax
f010bb73:	a2 75 73 65 f0       	mov    %al,0xf0657375
f010bb78:	a0 75 73 65 f0       	mov    0xf0657375,%al
f010bb7d:	83 e0 ef             	and    $0xffffffef,%eax
f010bb80:	a2 75 73 65 f0       	mov    %al,0xf0657375
f010bb85:	a0 75 73 65 f0       	mov    0xf0657375,%al
f010bb8a:	83 c8 60             	or     $0x60,%eax
f010bb8d:	a2 75 73 65 f0       	mov    %al,0xf0657375
f010bb92:	a0 75 73 65 f0       	mov    0xf0657375,%al
f010bb97:	83 c8 80             	or     $0xffffff80,%eax
f010bb9a:	a2 75 73 65 f0       	mov    %al,0xf0657375
f010bb9f:	b8 be c6 10 f0       	mov    $0xf010c6be,%eax
f010bba4:	c1 e8 10             	shr    $0x10,%eax
f010bba7:	66 a3 76 73 65 f0    	mov    %ax,0xf0657376
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010bbad:	b8 c4 c6 10 f0       	mov    $0xf010c6c4,%eax
f010bbb2:	66 a3 78 73 65 f0    	mov    %ax,0xf0657378
f010bbb8:	66 c7 05 7a 73 65 f0 	movw   $0x8,0xf065737a
f010bbbf:	08 00 
f010bbc1:	a0 7c 73 65 f0       	mov    0xf065737c,%al
f010bbc6:	83 e0 e0             	and    $0xffffffe0,%eax
f010bbc9:	a2 7c 73 65 f0       	mov    %al,0xf065737c
f010bbce:	a0 7c 73 65 f0       	mov    0xf065737c,%al
f010bbd3:	83 e0 1f             	and    $0x1f,%eax
f010bbd6:	a2 7c 73 65 f0       	mov    %al,0xf065737c
f010bbdb:	a0 7d 73 65 f0       	mov    0xf065737d,%al
f010bbe0:	83 e0 f0             	and    $0xfffffff0,%eax
f010bbe3:	83 c8 0e             	or     $0xe,%eax
f010bbe6:	a2 7d 73 65 f0       	mov    %al,0xf065737d
f010bbeb:	a0 7d 73 65 f0       	mov    0xf065737d,%al
f010bbf0:	83 e0 ef             	and    $0xffffffef,%eax
f010bbf3:	a2 7d 73 65 f0       	mov    %al,0xf065737d
f010bbf8:	a0 7d 73 65 f0       	mov    0xf065737d,%al
f010bbfd:	83 c8 60             	or     $0x60,%eax
f010bc00:	a2 7d 73 65 f0       	mov    %al,0xf065737d
f010bc05:	a0 7d 73 65 f0       	mov    0xf065737d,%al
f010bc0a:	83 c8 80             	or     $0xffffff80,%eax
f010bc0d:	a2 7d 73 65 f0       	mov    %al,0xf065737d
f010bc12:	b8 c4 c6 10 f0       	mov    $0xf010c6c4,%eax
f010bc17:	c1 e8 10             	shr    $0x10,%eax
f010bc1a:	66 a3 7e 73 65 f0    	mov    %ax,0xf065737e
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010bc20:	b8 ca c6 10 f0       	mov    $0xf010c6ca,%eax
f010bc25:	66 a3 80 73 65 f0    	mov    %ax,0xf0657380
f010bc2b:	66 c7 05 82 73 65 f0 	movw   $0x8,0xf0657382
f010bc32:	08 00 
f010bc34:	a0 84 73 65 f0       	mov    0xf0657384,%al
f010bc39:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc3c:	a2 84 73 65 f0       	mov    %al,0xf0657384
f010bc41:	a0 84 73 65 f0       	mov    0xf0657384,%al
f010bc46:	83 e0 1f             	and    $0x1f,%eax
f010bc49:	a2 84 73 65 f0       	mov    %al,0xf0657384
f010bc4e:	a0 85 73 65 f0       	mov    0xf0657385,%al
f010bc53:	83 e0 f0             	and    $0xfffffff0,%eax
f010bc56:	83 c8 0e             	or     $0xe,%eax
f010bc59:	a2 85 73 65 f0       	mov    %al,0xf0657385
f010bc5e:	a0 85 73 65 f0       	mov    0xf0657385,%al
f010bc63:	83 e0 ef             	and    $0xffffffef,%eax
f010bc66:	a2 85 73 65 f0       	mov    %al,0xf0657385
f010bc6b:	a0 85 73 65 f0       	mov    0xf0657385,%al
f010bc70:	83 c8 60             	or     $0x60,%eax
f010bc73:	a2 85 73 65 f0       	mov    %al,0xf0657385
f010bc78:	a0 85 73 65 f0       	mov    0xf0657385,%al
f010bc7d:	83 c8 80             	or     $0xffffff80,%eax
f010bc80:	a2 85 73 65 f0       	mov    %al,0xf0657385
f010bc85:	b8 ca c6 10 f0       	mov    $0xf010c6ca,%eax
f010bc8a:	c1 e8 10             	shr    $0x10,%eax
f010bc8d:	66 a3 86 73 65 f0    	mov    %ax,0xf0657386
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010bc93:	b8 d0 c6 10 f0       	mov    $0xf010c6d0,%eax
f010bc98:	66 a3 88 73 65 f0    	mov    %ax,0xf0657388
f010bc9e:	66 c7 05 8a 73 65 f0 	movw   $0x8,0xf065738a
f010bca5:	08 00 
f010bca7:	a0 8c 73 65 f0       	mov    0xf065738c,%al
f010bcac:	83 e0 e0             	and    $0xffffffe0,%eax
f010bcaf:	a2 8c 73 65 f0       	mov    %al,0xf065738c
f010bcb4:	a0 8c 73 65 f0       	mov    0xf065738c,%al
f010bcb9:	83 e0 1f             	and    $0x1f,%eax
f010bcbc:	a2 8c 73 65 f0       	mov    %al,0xf065738c
f010bcc1:	a0 8d 73 65 f0       	mov    0xf065738d,%al
f010bcc6:	83 e0 f0             	and    $0xfffffff0,%eax
f010bcc9:	83 c8 0e             	or     $0xe,%eax
f010bccc:	a2 8d 73 65 f0       	mov    %al,0xf065738d
f010bcd1:	a0 8d 73 65 f0       	mov    0xf065738d,%al
f010bcd6:	83 e0 ef             	and    $0xffffffef,%eax
f010bcd9:	a2 8d 73 65 f0       	mov    %al,0xf065738d
f010bcde:	a0 8d 73 65 f0       	mov    0xf065738d,%al
f010bce3:	83 c8 60             	or     $0x60,%eax
f010bce6:	a2 8d 73 65 f0       	mov    %al,0xf065738d
f010bceb:	a0 8d 73 65 f0       	mov    0xf065738d,%al
f010bcf0:	83 c8 80             	or     $0xffffff80,%eax
f010bcf3:	a2 8d 73 65 f0       	mov    %al,0xf065738d
f010bcf8:	b8 d0 c6 10 f0       	mov    $0xf010c6d0,%eax
f010bcfd:	c1 e8 10             	shr    $0x10,%eax
f010bd00:	66 a3 8e 73 65 f0    	mov    %ax,0xf065738e
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010bd06:	b8 d6 c6 10 f0       	mov    $0xf010c6d6,%eax
f010bd0b:	66 a3 90 73 65 f0    	mov    %ax,0xf0657390
f010bd11:	66 c7 05 92 73 65 f0 	movw   $0x8,0xf0657392
f010bd18:	08 00 
f010bd1a:	a0 94 73 65 f0       	mov    0xf0657394,%al
f010bd1f:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd22:	a2 94 73 65 f0       	mov    %al,0xf0657394
f010bd27:	a0 94 73 65 f0       	mov    0xf0657394,%al
f010bd2c:	83 e0 1f             	and    $0x1f,%eax
f010bd2f:	a2 94 73 65 f0       	mov    %al,0xf0657394
f010bd34:	a0 95 73 65 f0       	mov    0xf0657395,%al
f010bd39:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd3c:	83 c8 0e             	or     $0xe,%eax
f010bd3f:	a2 95 73 65 f0       	mov    %al,0xf0657395
f010bd44:	a0 95 73 65 f0       	mov    0xf0657395,%al
f010bd49:	83 e0 ef             	and    $0xffffffef,%eax
f010bd4c:	a2 95 73 65 f0       	mov    %al,0xf0657395
f010bd51:	a0 95 73 65 f0       	mov    0xf0657395,%al
f010bd56:	83 c8 60             	or     $0x60,%eax
f010bd59:	a2 95 73 65 f0       	mov    %al,0xf0657395
f010bd5e:	a0 95 73 65 f0       	mov    0xf0657395,%al
f010bd63:	83 c8 80             	or     $0xffffff80,%eax
f010bd66:	a2 95 73 65 f0       	mov    %al,0xf0657395
f010bd6b:	b8 d6 c6 10 f0       	mov    $0xf010c6d6,%eax
f010bd70:	c1 e8 10             	shr    $0x10,%eax
f010bd73:	66 a3 96 73 65 f0    	mov    %ax,0xf0657396
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010bd79:	b8 dc c6 10 f0       	mov    $0xf010c6dc,%eax
f010bd7e:	66 a3 98 73 65 f0    	mov    %ax,0xf0657398
f010bd84:	66 c7 05 9a 73 65 f0 	movw   $0x8,0xf065739a
f010bd8b:	08 00 
f010bd8d:	a0 9c 73 65 f0       	mov    0xf065739c,%al
f010bd92:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd95:	a2 9c 73 65 f0       	mov    %al,0xf065739c
f010bd9a:	a0 9c 73 65 f0       	mov    0xf065739c,%al
f010bd9f:	83 e0 1f             	and    $0x1f,%eax
f010bda2:	a2 9c 73 65 f0       	mov    %al,0xf065739c
f010bda7:	a0 9d 73 65 f0       	mov    0xf065739d,%al
f010bdac:	83 e0 f0             	and    $0xfffffff0,%eax
f010bdaf:	83 c8 0e             	or     $0xe,%eax
f010bdb2:	a2 9d 73 65 f0       	mov    %al,0xf065739d
f010bdb7:	a0 9d 73 65 f0       	mov    0xf065739d,%al
f010bdbc:	83 e0 ef             	and    $0xffffffef,%eax
f010bdbf:	a2 9d 73 65 f0       	mov    %al,0xf065739d
f010bdc4:	a0 9d 73 65 f0       	mov    0xf065739d,%al
f010bdc9:	83 c8 60             	or     $0x60,%eax
f010bdcc:	a2 9d 73 65 f0       	mov    %al,0xf065739d
f010bdd1:	a0 9d 73 65 f0       	mov    0xf065739d,%al
f010bdd6:	83 c8 80             	or     $0xffffff80,%eax
f010bdd9:	a2 9d 73 65 f0       	mov    %al,0xf065739d
f010bdde:	b8 dc c6 10 f0       	mov    $0xf010c6dc,%eax
f010bde3:	c1 e8 10             	shr    $0x10,%eax
f010bde6:	66 a3 9e 73 65 f0    	mov    %ax,0xf065739e
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010bdec:	b8 e2 c6 10 f0       	mov    $0xf010c6e2,%eax
f010bdf1:	66 a3 a0 73 65 f0    	mov    %ax,0xf06573a0
f010bdf7:	66 c7 05 a2 73 65 f0 	movw   $0x8,0xf06573a2
f010bdfe:	08 00 
f010be00:	a0 a4 73 65 f0       	mov    0xf06573a4,%al
f010be05:	83 e0 e0             	and    $0xffffffe0,%eax
f010be08:	a2 a4 73 65 f0       	mov    %al,0xf06573a4
f010be0d:	a0 a4 73 65 f0       	mov    0xf06573a4,%al
f010be12:	83 e0 1f             	and    $0x1f,%eax
f010be15:	a2 a4 73 65 f0       	mov    %al,0xf06573a4
f010be1a:	a0 a5 73 65 f0       	mov    0xf06573a5,%al
f010be1f:	83 e0 f0             	and    $0xfffffff0,%eax
f010be22:	83 c8 0e             	or     $0xe,%eax
f010be25:	a2 a5 73 65 f0       	mov    %al,0xf06573a5
f010be2a:	a0 a5 73 65 f0       	mov    0xf06573a5,%al
f010be2f:	83 e0 ef             	and    $0xffffffef,%eax
f010be32:	a2 a5 73 65 f0       	mov    %al,0xf06573a5
f010be37:	a0 a5 73 65 f0       	mov    0xf06573a5,%al
f010be3c:	83 c8 60             	or     $0x60,%eax
f010be3f:	a2 a5 73 65 f0       	mov    %al,0xf06573a5
f010be44:	a0 a5 73 65 f0       	mov    0xf06573a5,%al
f010be49:	83 c8 80             	or     $0xffffff80,%eax
f010be4c:	a2 a5 73 65 f0       	mov    %al,0xf06573a5
f010be51:	b8 e2 c6 10 f0       	mov    $0xf010c6e2,%eax
f010be56:	c1 e8 10             	shr    $0x10,%eax
f010be59:	66 a3 a6 73 65 f0    	mov    %ax,0xf06573a6
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010be5f:	b8 e8 c6 10 f0       	mov    $0xf010c6e8,%eax
f010be64:	66 a3 a8 73 65 f0    	mov    %ax,0xf06573a8
f010be6a:	66 c7 05 aa 73 65 f0 	movw   $0x8,0xf06573aa
f010be71:	08 00 
f010be73:	a0 ac 73 65 f0       	mov    0xf06573ac,%al
f010be78:	83 e0 e0             	and    $0xffffffe0,%eax
f010be7b:	a2 ac 73 65 f0       	mov    %al,0xf06573ac
f010be80:	a0 ac 73 65 f0       	mov    0xf06573ac,%al
f010be85:	83 e0 1f             	and    $0x1f,%eax
f010be88:	a2 ac 73 65 f0       	mov    %al,0xf06573ac
f010be8d:	a0 ad 73 65 f0       	mov    0xf06573ad,%al
f010be92:	83 e0 f0             	and    $0xfffffff0,%eax
f010be95:	83 c8 0e             	or     $0xe,%eax
f010be98:	a2 ad 73 65 f0       	mov    %al,0xf06573ad
f010be9d:	a0 ad 73 65 f0       	mov    0xf06573ad,%al
f010bea2:	83 e0 ef             	and    $0xffffffef,%eax
f010bea5:	a2 ad 73 65 f0       	mov    %al,0xf06573ad
f010beaa:	a0 ad 73 65 f0       	mov    0xf06573ad,%al
f010beaf:	83 c8 60             	or     $0x60,%eax
f010beb2:	a2 ad 73 65 f0       	mov    %al,0xf06573ad
f010beb7:	a0 ad 73 65 f0       	mov    0xf06573ad,%al
f010bebc:	83 c8 80             	or     $0xffffff80,%eax
f010bebf:	a2 ad 73 65 f0       	mov    %al,0xf06573ad
f010bec4:	b8 e8 c6 10 f0       	mov    $0xf010c6e8,%eax
f010bec9:	c1 e8 10             	shr    $0x10,%eax
f010becc:	66 a3 ae 73 65 f0    	mov    %ax,0xf06573ae
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010bed2:	b8 ee c6 10 f0       	mov    $0xf010c6ee,%eax
f010bed7:	66 a3 b0 73 65 f0    	mov    %ax,0xf06573b0
f010bedd:	66 c7 05 b2 73 65 f0 	movw   $0x8,0xf06573b2
f010bee4:	08 00 
f010bee6:	a0 b4 73 65 f0       	mov    0xf06573b4,%al
f010beeb:	83 e0 e0             	and    $0xffffffe0,%eax
f010beee:	a2 b4 73 65 f0       	mov    %al,0xf06573b4
f010bef3:	a0 b4 73 65 f0       	mov    0xf06573b4,%al
f010bef8:	83 e0 1f             	and    $0x1f,%eax
f010befb:	a2 b4 73 65 f0       	mov    %al,0xf06573b4
f010bf00:	a0 b5 73 65 f0       	mov    0xf06573b5,%al
f010bf05:	83 e0 f0             	and    $0xfffffff0,%eax
f010bf08:	83 c8 0e             	or     $0xe,%eax
f010bf0b:	a2 b5 73 65 f0       	mov    %al,0xf06573b5
f010bf10:	a0 b5 73 65 f0       	mov    0xf06573b5,%al
f010bf15:	83 e0 ef             	and    $0xffffffef,%eax
f010bf18:	a2 b5 73 65 f0       	mov    %al,0xf06573b5
f010bf1d:	a0 b5 73 65 f0       	mov    0xf06573b5,%al
f010bf22:	83 c8 60             	or     $0x60,%eax
f010bf25:	a2 b5 73 65 f0       	mov    %al,0xf06573b5
f010bf2a:	a0 b5 73 65 f0       	mov    0xf06573b5,%al
f010bf2f:	83 c8 80             	or     $0xffffff80,%eax
f010bf32:	a2 b5 73 65 f0       	mov    %al,0xf06573b5
f010bf37:	b8 ee c6 10 f0       	mov    $0xf010c6ee,%eax
f010bf3c:	c1 e8 10             	shr    $0x10,%eax
f010bf3f:	66 a3 b6 73 65 f0    	mov    %ax,0xf06573b6
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010bf45:	b8 f4 c6 10 f0       	mov    $0xf010c6f4,%eax
f010bf4a:	66 a3 b8 73 65 f0    	mov    %ax,0xf06573b8
f010bf50:	66 c7 05 ba 73 65 f0 	movw   $0x8,0xf06573ba
f010bf57:	08 00 
f010bf59:	a0 bc 73 65 f0       	mov    0xf06573bc,%al
f010bf5e:	83 e0 e0             	and    $0xffffffe0,%eax
f010bf61:	a2 bc 73 65 f0       	mov    %al,0xf06573bc
f010bf66:	a0 bc 73 65 f0       	mov    0xf06573bc,%al
f010bf6b:	83 e0 1f             	and    $0x1f,%eax
f010bf6e:	a2 bc 73 65 f0       	mov    %al,0xf06573bc
f010bf73:	a0 bd 73 65 f0       	mov    0xf06573bd,%al
f010bf78:	83 e0 f0             	and    $0xfffffff0,%eax
f010bf7b:	83 c8 0e             	or     $0xe,%eax
f010bf7e:	a2 bd 73 65 f0       	mov    %al,0xf06573bd
f010bf83:	a0 bd 73 65 f0       	mov    0xf06573bd,%al
f010bf88:	83 e0 ef             	and    $0xffffffef,%eax
f010bf8b:	a2 bd 73 65 f0       	mov    %al,0xf06573bd
f010bf90:	a0 bd 73 65 f0       	mov    0xf06573bd,%al
f010bf95:	83 c8 60             	or     $0x60,%eax
f010bf98:	a2 bd 73 65 f0       	mov    %al,0xf06573bd
f010bf9d:	a0 bd 73 65 f0       	mov    0xf06573bd,%al
f010bfa2:	83 c8 80             	or     $0xffffff80,%eax
f010bfa5:	a2 bd 73 65 f0       	mov    %al,0xf06573bd
f010bfaa:	b8 f4 c6 10 f0       	mov    $0xf010c6f4,%eax
f010bfaf:	c1 e8 10             	shr    $0x10,%eax
f010bfb2:	66 a3 be 73 65 f0    	mov    %ax,0xf06573be



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f010bfb8:	c7 05 44 7a 65 f0 00 	movl   $0xefc00000,0xf0657a44
f010bfbf:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f010bfc2:	66 c7 05 48 7a 65 f0 	movw   $0x10,0xf0657a48
f010bfc9:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f010bfcb:	66 c7 05 e8 18 19 f0 	movw   $0x68,0xf01918e8
f010bfd2:	68 00 
f010bfd4:	b8 40 7a 65 f0       	mov    $0xf0657a40,%eax
f010bfd9:	66 a3 ea 18 19 f0    	mov    %ax,0xf01918ea
f010bfdf:	b8 40 7a 65 f0       	mov    $0xf0657a40,%eax
f010bfe4:	c1 e8 10             	shr    $0x10,%eax
f010bfe7:	a2 ec 18 19 f0       	mov    %al,0xf01918ec
f010bfec:	a0 ed 18 19 f0       	mov    0xf01918ed,%al
f010bff1:	83 e0 f0             	and    $0xfffffff0,%eax
f010bff4:	83 c8 09             	or     $0x9,%eax
f010bff7:	a2 ed 18 19 f0       	mov    %al,0xf01918ed
f010bffc:	a0 ed 18 19 f0       	mov    0xf01918ed,%al
f010c001:	83 c8 10             	or     $0x10,%eax
f010c004:	a2 ed 18 19 f0       	mov    %al,0xf01918ed
f010c009:	a0 ed 18 19 f0       	mov    0xf01918ed,%al
f010c00e:	83 e0 9f             	and    $0xffffff9f,%eax
f010c011:	a2 ed 18 19 f0       	mov    %al,0xf01918ed
f010c016:	a0 ed 18 19 f0       	mov    0xf01918ed,%al
f010c01b:	83 c8 80             	or     $0xffffff80,%eax
f010c01e:	a2 ed 18 19 f0       	mov    %al,0xf01918ed
f010c023:	a0 ee 18 19 f0       	mov    0xf01918ee,%al
f010c028:	83 e0 f0             	and    $0xfffffff0,%eax
f010c02b:	a2 ee 18 19 f0       	mov    %al,0xf01918ee
f010c030:	a0 ee 18 19 f0       	mov    0xf01918ee,%al
f010c035:	83 e0 ef             	and    $0xffffffef,%eax
f010c038:	a2 ee 18 19 f0       	mov    %al,0xf01918ee
f010c03d:	a0 ee 18 19 f0       	mov    0xf01918ee,%al
f010c042:	83 e0 df             	and    $0xffffffdf,%eax
f010c045:	a2 ee 18 19 f0       	mov    %al,0xf01918ee
f010c04a:	a0 ee 18 19 f0       	mov    0xf01918ee,%al
f010c04f:	83 c8 40             	or     $0x40,%eax
f010c052:	a2 ee 18 19 f0       	mov    %al,0xf01918ee
f010c057:	a0 ee 18 19 f0       	mov    0xf01918ee,%al
f010c05c:	83 e0 7f             	and    $0x7f,%eax
f010c05f:	a2 ee 18 19 f0       	mov    %al,0xf01918ee
f010c064:	b8 40 7a 65 f0       	mov    $0xf0657a40,%eax
f010c069:	c1 e8 18             	shr    $0x18,%eax
f010c06c:	a2 ef 18 19 f0       	mov    %al,0xf01918ef
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f010c071:	a0 ed 18 19 f0       	mov    0xf01918ed,%al
f010c076:	83 e0 ef             	and    $0xffffffef,%eax
f010c079:	a2 ed 18 19 f0       	mov    %al,0xf01918ed
f010c07e:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010c084:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f010c088:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f010c08b:	0f 01 1d c8 1c 19 f0 	lidtl  0xf0191cc8
}
f010c092:	90                   	nop
f010c093:	c9                   	leave  
f010c094:	c3                   	ret    

f010c095 <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010c095:	55                   	push   %ebp
f010c096:	89 e5                	mov    %esp,%ebp
f010c098:	53                   	push   %ebx
f010c099:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010c09c:	83 ec 08             	sub    $0x8,%esp
f010c09f:	ff 75 08             	pushl  0x8(%ebp)
f010c0a2:	68 9b 6e 13 f0       	push   $0xf0136e9b
f010c0a7:	e8 d6 4b ff ff       	call   f0100c82 <cprintf>
f010c0ac:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010c0af:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0b2:	83 ec 0c             	sub    $0xc,%esp
f010c0b5:	50                   	push   %eax
f010c0b6:	e8 fd 00 00 00       	call   f010c1b8 <print_regs>
f010c0bb:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010c0be:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0c1:	8b 40 20             	mov    0x20(%eax),%eax
f010c0c4:	0f b7 c0             	movzwl %ax,%eax
f010c0c7:	83 ec 08             	sub    $0x8,%esp
f010c0ca:	50                   	push   %eax
f010c0cb:	68 ad 6e 13 f0       	push   $0xf0136ead
f010c0d0:	e8 ad 4b ff ff       	call   f0100c82 <cprintf>
f010c0d5:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010c0d8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0db:	8b 40 24             	mov    0x24(%eax),%eax
f010c0de:	0f b7 c0             	movzwl %ax,%eax
f010c0e1:	83 ec 08             	sub    $0x8,%esp
f010c0e4:	50                   	push   %eax
f010c0e5:	68 c0 6e 13 f0       	push   $0xf0136ec0
f010c0ea:	e8 93 4b ff ff       	call   f0100c82 <cprintf>
f010c0ef:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010c0f2:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0f5:	8b 58 28             	mov    0x28(%eax),%ebx
f010c0f8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0fb:	8b 40 28             	mov    0x28(%eax),%eax
f010c0fe:	83 ec 0c             	sub    $0xc,%esp
f010c101:	50                   	push   %eax
f010c102:	e8 d0 ee ff ff       	call   f010afd7 <trapname>
f010c107:	83 c4 10             	add    $0x10,%esp
f010c10a:	89 c2                	mov    %eax,%edx
f010c10c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c10f:	8b 40 28             	mov    0x28(%eax),%eax
f010c112:	53                   	push   %ebx
f010c113:	52                   	push   %edx
f010c114:	50                   	push   %eax
f010c115:	68 d3 6e 13 f0       	push   $0xf0136ed3
f010c11a:	e8 63 4b ff ff       	call   f0100c82 <cprintf>
f010c11f:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010c122:	8b 45 08             	mov    0x8(%ebp),%eax
f010c125:	8b 40 2c             	mov    0x2c(%eax),%eax
f010c128:	83 ec 08             	sub    $0x8,%esp
f010c12b:	50                   	push   %eax
f010c12c:	68 ea 6e 13 f0       	push   $0xf0136eea
f010c131:	e8 4c 4b ff ff       	call   f0100c82 <cprintf>
f010c136:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010c139:	8b 45 08             	mov    0x8(%ebp),%eax
f010c13c:	8b 40 30             	mov    0x30(%eax),%eax
f010c13f:	83 ec 08             	sub    $0x8,%esp
f010c142:	50                   	push   %eax
f010c143:	68 f9 6e 13 f0       	push   $0xf0136ef9
f010c148:	e8 35 4b ff ff       	call   f0100c82 <cprintf>
f010c14d:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010c150:	8b 45 08             	mov    0x8(%ebp),%eax
f010c153:	8b 40 34             	mov    0x34(%eax),%eax
f010c156:	0f b7 c0             	movzwl %ax,%eax
f010c159:	83 ec 08             	sub    $0x8,%esp
f010c15c:	50                   	push   %eax
f010c15d:	68 08 6f 13 f0       	push   $0xf0136f08
f010c162:	e8 1b 4b ff ff       	call   f0100c82 <cprintf>
f010c167:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010c16a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c16d:	8b 40 38             	mov    0x38(%eax),%eax
f010c170:	83 ec 08             	sub    $0x8,%esp
f010c173:	50                   	push   %eax
f010c174:	68 1b 6f 13 f0       	push   $0xf0136f1b
f010c179:	e8 04 4b ff ff       	call   f0100c82 <cprintf>
f010c17e:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010c181:	8b 45 08             	mov    0x8(%ebp),%eax
f010c184:	8b 40 3c             	mov    0x3c(%eax),%eax
f010c187:	83 ec 08             	sub    $0x8,%esp
f010c18a:	50                   	push   %eax
f010c18b:	68 2a 6f 13 f0       	push   $0xf0136f2a
f010c190:	e8 ed 4a ff ff       	call   f0100c82 <cprintf>
f010c195:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010c198:	8b 45 08             	mov    0x8(%ebp),%eax
f010c19b:	8b 40 40             	mov    0x40(%eax),%eax
f010c19e:	0f b7 c0             	movzwl %ax,%eax
f010c1a1:	83 ec 08             	sub    $0x8,%esp
f010c1a4:	50                   	push   %eax
f010c1a5:	68 39 6f 13 f0       	push   $0xf0136f39
f010c1aa:	e8 d3 4a ff ff       	call   f0100c82 <cprintf>
f010c1af:	83 c4 10             	add    $0x10,%esp
}
f010c1b2:	90                   	nop
f010c1b3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010c1b6:	c9                   	leave  
f010c1b7:	c3                   	ret    

f010c1b8 <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010c1b8:	55                   	push   %ebp
f010c1b9:	89 e5                	mov    %esp,%ebp
f010c1bb:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010c1be:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1c1:	8b 00                	mov    (%eax),%eax
f010c1c3:	83 ec 08             	sub    $0x8,%esp
f010c1c6:	50                   	push   %eax
f010c1c7:	68 4c 6f 13 f0       	push   $0xf0136f4c
f010c1cc:	e8 b1 4a ff ff       	call   f0100c82 <cprintf>
f010c1d1:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010c1d4:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1d7:	8b 40 04             	mov    0x4(%eax),%eax
f010c1da:	83 ec 08             	sub    $0x8,%esp
f010c1dd:	50                   	push   %eax
f010c1de:	68 5b 6f 13 f0       	push   $0xf0136f5b
f010c1e3:	e8 9a 4a ff ff       	call   f0100c82 <cprintf>
f010c1e8:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010c1eb:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1ee:	8b 40 08             	mov    0x8(%eax),%eax
f010c1f1:	83 ec 08             	sub    $0x8,%esp
f010c1f4:	50                   	push   %eax
f010c1f5:	68 6a 6f 13 f0       	push   $0xf0136f6a
f010c1fa:	e8 83 4a ff ff       	call   f0100c82 <cprintf>
f010c1ff:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010c202:	8b 45 08             	mov    0x8(%ebp),%eax
f010c205:	8b 40 0c             	mov    0xc(%eax),%eax
f010c208:	83 ec 08             	sub    $0x8,%esp
f010c20b:	50                   	push   %eax
f010c20c:	68 79 6f 13 f0       	push   $0xf0136f79
f010c211:	e8 6c 4a ff ff       	call   f0100c82 <cprintf>
f010c216:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010c219:	8b 45 08             	mov    0x8(%ebp),%eax
f010c21c:	8b 40 10             	mov    0x10(%eax),%eax
f010c21f:	83 ec 08             	sub    $0x8,%esp
f010c222:	50                   	push   %eax
f010c223:	68 88 6f 13 f0       	push   $0xf0136f88
f010c228:	e8 55 4a ff ff       	call   f0100c82 <cprintf>
f010c22d:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010c230:	8b 45 08             	mov    0x8(%ebp),%eax
f010c233:	8b 40 14             	mov    0x14(%eax),%eax
f010c236:	83 ec 08             	sub    $0x8,%esp
f010c239:	50                   	push   %eax
f010c23a:	68 97 6f 13 f0       	push   $0xf0136f97
f010c23f:	e8 3e 4a ff ff       	call   f0100c82 <cprintf>
f010c244:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010c247:	8b 45 08             	mov    0x8(%ebp),%eax
f010c24a:	8b 40 18             	mov    0x18(%eax),%eax
f010c24d:	83 ec 08             	sub    $0x8,%esp
f010c250:	50                   	push   %eax
f010c251:	68 a6 6f 13 f0       	push   $0xf0136fa6
f010c256:	e8 27 4a ff ff       	call   f0100c82 <cprintf>
f010c25b:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010c25e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c261:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c264:	83 ec 08             	sub    $0x8,%esp
f010c267:	50                   	push   %eax
f010c268:	68 b5 6f 13 f0       	push   $0xf0136fb5
f010c26d:	e8 10 4a ff ff       	call   f0100c82 <cprintf>
f010c272:	83 c4 10             	add    $0x10,%esp
}
f010c275:	90                   	nop
f010c276:	c9                   	leave  
f010c277:	c3                   	ret    

f010c278 <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010c278:	55                   	push   %ebp
f010c279:	89 e5                	mov    %esp,%ebp
f010c27b:	57                   	push   %edi
f010c27c:	56                   	push   %esi
f010c27d:	53                   	push   %ebx
f010c27e:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f010c281:	8b 45 08             	mov    0x8(%ebp),%eax
f010c284:	8b 40 28             	mov    0x28(%eax),%eax
f010c287:	83 f8 0e             	cmp    $0xe,%eax
f010c28a:	75 29                	jne    f010c2b5 <trap_dispatch+0x3d>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010c28c:	83 ec 0c             	sub    $0xc,%esp
f010c28f:	6a 01                	push   $0x1
f010c291:	e8 6b 18 00 00       	call   f010db01 <isPageReplacmentAlgorithmLRU>
f010c296:	83 c4 10             	add    $0x10,%esp
f010c299:	85 c0                	test   %eax,%eax
f010c29b:	74 05                	je     f010c2a2 <trap_dispatch+0x2a>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010c29d:	e8 b3 96 ff ff       	call   f0105955 <update_WS_time_stamps>
		}
		fault_handler(tf);
f010c2a2:	83 ec 0c             	sub    $0xc,%esp
f010c2a5:	ff 75 08             	pushl  0x8(%ebp)
f010c2a8:	e8 3b 02 00 00       	call   f010c4e8 <fault_handler>
f010c2ad:	83 c4 10             	add    $0x10,%esp
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010c2b0:	e9 a5 00 00 00       	jmp    f010c35a <trap_dispatch+0xe2>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010c2b5:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2b8:	8b 40 28             	mov    0x28(%eax),%eax
f010c2bb:	83 f8 30             	cmp    $0x30,%eax
f010c2be:	75 42                	jne    f010c302 <trap_dispatch+0x8a>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010c2c0:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2c3:	8b 78 04             	mov    0x4(%eax),%edi
f010c2c6:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2c9:	8b 30                	mov    (%eax),%esi
f010c2cb:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2ce:	8b 58 10             	mov    0x10(%eax),%ebx
f010c2d1:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2d4:	8b 48 18             	mov    0x18(%eax),%ecx
f010c2d7:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2da:	8b 50 14             	mov    0x14(%eax),%edx
f010c2dd:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2e0:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c2e3:	83 ec 08             	sub    $0x8,%esp
f010c2e6:	57                   	push   %edi
f010c2e7:	56                   	push   %esi
f010c2e8:	53                   	push   %ebx
f010c2e9:	51                   	push   %ecx
f010c2ea:	52                   	push   %edx
f010c2eb:	50                   	push   %eax
f010c2ec:	e8 5b 0f 00 00       	call   f010d24c <syscall>
f010c2f1:	83 c4 20             	add    $0x20,%esp
f010c2f4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f010c2f7:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2fa:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010c2fd:	89 50 1c             	mov    %edx,0x1c(%eax)
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010c300:	eb 58                	jmp    f010c35a <trap_dispatch+0xe2>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010c302:	8b 45 08             	mov    0x8(%ebp),%eax
f010c305:	8b 40 28             	mov    0x28(%eax),%eax
f010c308:	83 f8 08             	cmp    $0x8,%eax
f010c30b:	75 17                	jne    f010c324 <trap_dispatch+0xac>
	{
		panic("double fault!!");
f010c30d:	83 ec 04             	sub    $0x4,%esp
f010c310:	68 c4 6f 13 f0       	push   $0xf0136fc4
f010c315:	68 e7 00 00 00       	push   $0xe7
f010c31a:	68 d3 6f 13 f0       	push   $0xf0136fd3
f010c31f:	e8 d7 3e ff ff       	call   f01001fb <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f010c324:	8b 45 08             	mov    0x8(%ebp),%eax
f010c327:	8b 40 28             	mov    0x28(%eax),%eax
f010c32a:	83 f8 20             	cmp    $0x20,%eax
f010c32d:	75 07                	jne    f010c336 <trap_dispatch+0xbe>
	{
		clock_interrupt_handler() ;
f010c32f:	e8 00 96 ff ff       	call   f0105934 <clock_interrupt_handler>
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010c334:	eb 24                	jmp    f010c35a <trap_dispatch+0xe2>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f010c336:	8b 45 08             	mov    0x8(%ebp),%eax
f010c339:	8b 40 34             	mov    0x34(%eax),%eax
f010c33c:	66 83 f8 08          	cmp    $0x8,%ax
f010c340:	75 17                	jne    f010c359 <trap_dispatch+0xe1>
		{
			panic("unhandled trap in kernel");
f010c342:	83 ec 04             	sub    $0x4,%esp
f010c345:	68 e4 6f 13 f0       	push   $0xf0136fe4
f010c34a:	68 f4 00 00 00       	push   $0xf4
f010c34f:	68 d3 6f 13 f0       	push   $0xf0136fd3
f010c354:	e8 a2 3e ff ff       	call   f01001fb <_panic>
		}
		else {
			//env_destroy(curenv);
			return;
f010c359:	90                   	nop
		}
	}
	return;
}
f010c35a:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010c35d:	5b                   	pop    %ebx
f010c35e:	5e                   	pop    %esi
f010c35f:	5f                   	pop    %edi
f010c360:	5d                   	pop    %ebp
f010c361:	c3                   	ret    

f010c362 <trap>:

void trap(struct Trapframe *tf)
{
f010c362:	55                   	push   %ebp
f010c363:	89 e5                	mov    %esp,%ebp
f010c365:	57                   	push   %edi
f010c366:	56                   	push   %esi
f010c367:	53                   	push   %ebx
f010c368:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f010c36b:	e8 98 7d ff ff       	call   f0104108 <kclock_stop>

	int userTrap = 0;
f010c370:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c377:	8b 45 08             	mov    0x8(%ebp),%eax
f010c37a:	8b 40 34             	mov    0x34(%eax),%eax
f010c37d:	0f b7 c0             	movzwl %ax,%eax
f010c380:	83 e0 03             	and    $0x3,%eax
f010c383:	83 f8 03             	cmp    $0x3,%eax
f010c386:	75 49                	jne    f010c3d1 <trap+0x6f>
		assert(curenv);
f010c388:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c38d:	85 c0                	test   %eax,%eax
f010c38f:	75 19                	jne    f010c3aa <trap+0x48>
f010c391:	68 fd 6f 13 f0       	push   $0xf0136ffd
f010c396:	68 04 70 13 f0       	push   $0xf0137004
f010c39b:	68 04 01 00 00       	push   $0x104
f010c3a0:	68 d3 6f 13 f0       	push   $0xf0136fd3
f010c3a5:	e8 51 3e ff ff       	call   f01001fb <_panic>
		curenv->env_tf = *tf;
f010c3aa:	8b 15 14 72 65 f0    	mov    0xf0657214,%edx
f010c3b0:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3b3:	89 c3                	mov    %eax,%ebx
f010c3b5:	b8 11 00 00 00       	mov    $0x11,%eax
f010c3ba:	89 d7                	mov    %edx,%edi
f010c3bc:	89 de                	mov    %ebx,%esi
f010c3be:	89 c1                	mov    %eax,%ecx
f010c3c0:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010c3c2:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c3c7:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f010c3ca:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f010c3d1:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3d4:	8b 40 28             	mov    0x28(%eax),%eax
f010c3d7:	83 f8 20             	cmp    $0x20,%eax
f010c3da:	75 40                	jne    f010c41c <trap+0xba>
	{
		//		uint16 cnt0 = kclock_read_cnt0() ;
		//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f010c3dc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c3e0:	0f 84 a6 00 00 00    	je     f010c48c <trap+0x12a>
		{
			assert(curenv);
f010c3e6:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c3eb:	85 c0                	test   %eax,%eax
f010c3ed:	75 19                	jne    f010c408 <trap+0xa6>
f010c3ef:	68 fd 6f 13 f0       	push   $0xf0136ffd
f010c3f4:	68 04 70 13 f0       	push   $0xf0137004
f010c3f9:	68 10 01 00 00       	push   $0x110
f010c3fe:	68 d3 6f 13 f0       	push   $0xf0136fd3
f010c403:	e8 f3 3d ff ff       	call   f01001fb <_panic>
			curenv->nClocks++ ;
f010c408:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c40d:	8b 90 a4 05 00 00    	mov    0x5a4(%eax),%edx
f010c413:	42                   	inc    %edx
f010c414:	89 90 a4 05 00 00    	mov    %edx,0x5a4(%eax)
f010c41a:	eb 70                	jmp    f010c48c <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f010c41c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c41f:	8b 40 28             	mov    0x28(%eax),%eax
f010c422:	83 f8 0e             	cmp    $0xe,%eax
f010c425:	75 65                	jne    f010c48c <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f010c427:	a0 a8 7a 65 f0       	mov    0xf0657aa8,%al
f010c42c:	84 c0                	test   %al,%al
f010c42e:	74 5c                	je     f010c48c <trap+0x12a>
			if (userTrap){
f010c430:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c434:	74 2c                	je     f010c462 <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f010c436:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c43b:	8b 15 14 72 65 f0    	mov    0xf0657214,%edx
f010c441:	8b 52 30             	mov    0x30(%edx),%edx
f010c444:	89 d1                	mov    %edx,%ecx
f010c446:	8a 15 a8 7a 65 f0    	mov    0xf0657aa8,%dl
f010c44c:	0f b6 d2             	movzbl %dl,%edx
f010c44f:	01 ca                	add    %ecx,%edx
f010c451:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f010c454:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c459:	83 ec 0c             	sub    $0xc,%esp
f010c45c:	50                   	push   %eax
f010c45d:	e8 a2 d4 ff ff       	call   f0109904 <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010c462:	8b 45 08             	mov    0x8(%ebp),%eax
f010c465:	8b 40 30             	mov    0x30(%eax),%eax
f010c468:	89 c2                	mov    %eax,%edx
f010c46a:	a0 a8 7a 65 f0       	mov    0xf0657aa8,%al
f010c46f:	0f b6 c0             	movzbl %al,%eax
f010c472:	01 d0                	add    %edx,%eax
f010c474:	89 c2                	mov    %eax,%edx
f010c476:	8b 45 08             	mov    0x8(%ebp),%eax
f010c479:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f010c47c:	e8 b2 7c ff ff       	call   f0104133 <kclock_resume>
				env_pop_tf(tf);
f010c481:	83 ec 0c             	sub    $0xc,%esp
f010c484:	ff 75 08             	pushl  0x8(%ebp)
f010c487:	e8 db d5 ff ff       	call   f0109a67 <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f010c48c:	83 ec 0c             	sub    $0xc,%esp
f010c48f:	ff 75 08             	pushl  0x8(%ebp)
f010c492:	e8 e1 fd ff ff       	call   f010c278 <trap_dispatch>
f010c497:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f010c49a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c49e:	74 3d                	je     f010c4dd <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f010c4a0:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c4a5:	85 c0                	test   %eax,%eax
f010c4a7:	74 0d                	je     f010c4b6 <trap+0x154>
f010c4a9:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c4ae:	8b 40 54             	mov    0x54(%eax),%eax
f010c4b1:	83 f8 02             	cmp    $0x2,%eax
f010c4b4:	74 19                	je     f010c4cf <trap+0x16d>
f010c4b6:	68 1c 70 13 f0       	push   $0xf013701c
f010c4bb:	68 04 70 13 f0       	push   $0xf0137004
f010c4c0:	68 25 01 00 00       	push   $0x125
f010c4c5:	68 d3 6f 13 f0       	push   $0xf0136fd3
f010c4ca:	e8 2c 3d ff ff       	call   f01001fb <_panic>
		env_run(curenv);
f010c4cf:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c4d4:	83 ec 0c             	sub    $0xc,%esp
f010c4d7:	50                   	push   %eax
f010c4d8:	e8 27 d4 ff ff       	call   f0109904 <env_run>
	/* 2019
	 * If trap from kernel, then return to the called kernel function using the passed param "tf" not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f010c4dd:	83 ec 0c             	sub    $0xc,%esp
f010c4e0:	ff 75 08             	pushl  0x8(%ebp)
f010c4e3:	e8 7f d5 ff ff       	call   f0109a67 <env_pop_tf>

f010c4e8 <fault_handler>:
	}
}


void fault_handler(struct Trapframe *tf)
{
f010c4e8:	55                   	push   %ebp
f010c4e9:	89 e5                	mov    %esp,%ebp
f010c4eb:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f010c4ee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c4f5:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4f8:	8b 40 34             	mov    0x34(%eax),%eax
f010c4fb:	0f b7 c0             	movzwl %ax,%eax
f010c4fe:	83 e0 03             	and    $0x3,%eax
f010c501:	83 f8 03             	cmp    $0x3,%eax
f010c504:	75 07                	jne    f010c50d <fault_handler+0x25>
		userTrap = 1;
f010c506:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010c50d:	0f 20 d0             	mov    %cr2,%eax
f010c510:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	return val;
f010c513:	8b 45 e4             	mov    -0x1c(%ebp),%eax
	}
	//print_trapframe(tf);
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f010c516:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//2017: Check stack overflow for Kernel
	if (!userTrap)
f010c519:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c51d:	75 29                	jne    f010c548 <fault_handler+0x60>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f010c51f:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f010c526:	77 40                	ja     f010c568 <fault_handler+0x80>
f010c528:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f010c52f:	76 37                	jbe    f010c568 <fault_handler+0x80>
			panic("Kernel: stack overflow exception!");
f010c531:	83 ec 04             	sub    $0x4,%esp
f010c534:	68 4c 70 13 f0       	push   $0xf013704c
f010c539:	68 42 01 00 00       	push   $0x142
f010c53e:	68 d3 6f 13 f0       	push   $0xf0136fd3
f010c543:	e8 b3 3c ff ff       	call   f01001fb <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f010c548:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010c54f:	76 17                	jbe    f010c568 <fault_handler+0x80>
			panic("User: stack underflow exception!");
f010c551:	83 ec 04             	sub    $0x4,%esp
f010c554:	68 70 70 13 f0       	push   $0xf0137070
f010c559:	68 48 01 00 00       	push   $0x148
f010c55e:	68 d3 6f 13 f0       	push   $0xf0136fd3
f010c563:	e8 93 3c ff ff       	call   f01001fb <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f010c568:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c56d:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (curenv->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010c570:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c575:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c578:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c57b:	c1 ea 16             	shr    $0x16,%edx
f010c57e:	c1 e2 02             	shl    $0x2,%edx
f010c581:	01 d0                	add    %edx,%eax
f010c583:	8b 00                	mov    (%eax),%eax
f010c585:	83 e0 01             	and    $0x1,%eax
f010c588:	85 c0                	test   %eax,%eax
f010c58a:	75 28                	jne    f010c5b4 <fault_handler+0xcc>
	{
		// we have a table fault =============================================================
		//cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f010c58c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c58f:	8b 80 38 05 00 00    	mov    0x538(%eax),%eax
f010c595:	8d 50 01             	lea    0x1(%eax),%edx
f010c598:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c59b:	89 90 38 05 00 00    	mov    %edx,0x538(%eax)

		table_fault_handler(faulted_env, fault_va);
f010c5a1:	83 ec 08             	sub    $0x8,%esp
f010c5a4:	ff 75 ec             	pushl  -0x14(%ebp)
f010c5a7:	ff 75 e8             	pushl  -0x18(%ebp)
f010c5aa:	e8 37 16 00 00       	call   f010dbe6 <table_fault_handler>
f010c5af:	83 c4 10             	add    $0x10,%esp
f010c5b2:	eb 42                	jmp    f010c5f6 <fault_handler+0x10e>
	}
	else
	{
		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010c5b4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c5b7:	8b 80 34 05 00 00    	mov    0x534(%eax),%eax
f010c5bd:	8d 50 01             	lea    0x1(%eax),%edx
f010c5c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c5c3:	89 90 34 05 00 00    	mov    %edx,0x534(%eax)

		//cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//cprintf("\nPage working set BEFORE fault handler...\n");
		//env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010c5c9:	e8 f6 15 00 00       	call   f010dbc4 <isBufferingEnabled>
f010c5ce:	84 c0                	test   %al,%al
f010c5d0:	74 13                	je     f010c5e5 <fault_handler+0xfd>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010c5d2:	83 ec 08             	sub    $0x8,%esp
f010c5d5:	ff 75 ec             	pushl  -0x14(%ebp)
f010c5d8:	ff 75 e8             	pushl  -0x18(%ebp)
f010c5db:	e8 41 16 00 00       	call   f010dc21 <__page_fault_handler_with_buffering>
f010c5e0:	83 c4 10             	add    $0x10,%esp
f010c5e3:	eb 11                	jmp    f010c5f6 <fault_handler+0x10e>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010c5e5:	83 ec 08             	sub    $0x8,%esp
f010c5e8:	ff 75 ec             	pushl  -0x14(%ebp)
f010c5eb:	ff 75 e8             	pushl  -0x18(%ebp)
f010c5ee:	e8 14 16 00 00       	call   f010dc07 <page_fault_handler>
f010c5f3:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010c5f6:	0f 20 d8             	mov    %cr3,%eax
f010c5f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010c5fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c5ff:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f010c602:	90                   	nop
f010c603:	c9                   	leave  
f010c604:	c3                   	ret    
f010c605:	90                   	nop

f010c606 <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f010c606:	6a 0e                	push   $0xe
f010c608:	e9 ed 00 00 00       	jmp    f010c6fa <_alltraps>
f010c60d:	90                   	nop

f010c60e <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f010c60e:	6a 00                	push   $0x0
f010c610:	6a 30                	push   $0x30
f010c612:	e9 e3 00 00 00       	jmp    f010c6fa <_alltraps>
f010c617:	90                   	nop

f010c618 <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f010c618:	6a 08                	push   $0x8
f010c61a:	e9 db 00 00 00       	jmp    f010c6fa <_alltraps>
f010c61f:	90                   	nop

f010c620 <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f010c620:	6a 00                	push   $0x0
f010c622:	6a 00                	push   $0x0
f010c624:	e9 d1 00 00 00       	jmp    f010c6fa <_alltraps>
f010c629:	90                   	nop

f010c62a <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f010c62a:	6a 00                	push   $0x0
f010c62c:	6a 01                	push   $0x1
f010c62e:	e9 c7 00 00 00       	jmp    f010c6fa <_alltraps>
f010c633:	90                   	nop

f010c634 <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f010c634:	6a 00                	push   $0x0
f010c636:	6a 02                	push   $0x2
f010c638:	e9 bd 00 00 00       	jmp    f010c6fa <_alltraps>
f010c63d:	90                   	nop

f010c63e <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f010c63e:	6a 00                	push   $0x0
f010c640:	6a 03                	push   $0x3
f010c642:	e9 b3 00 00 00       	jmp    f010c6fa <_alltraps>
f010c647:	90                   	nop

f010c648 <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f010c648:	6a 00                	push   $0x0
f010c64a:	6a 04                	push   $0x4
f010c64c:	e9 a9 00 00 00       	jmp    f010c6fa <_alltraps>
f010c651:	90                   	nop

f010c652 <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f010c652:	6a 00                	push   $0x0
f010c654:	6a 05                	push   $0x5
f010c656:	e9 9f 00 00 00       	jmp    f010c6fa <_alltraps>
f010c65b:	90                   	nop

f010c65c <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f010c65c:	6a 00                	push   $0x0
f010c65e:	6a 06                	push   $0x6
f010c660:	e9 95 00 00 00       	jmp    f010c6fa <_alltraps>
f010c665:	90                   	nop

f010c666 <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f010c666:	6a 00                	push   $0x0
f010c668:	6a 07                	push   $0x7
f010c66a:	e9 8b 00 00 00       	jmp    f010c6fa <_alltraps>
f010c66f:	90                   	nop

f010c670 <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f010c670:	6a 0a                	push   $0xa
f010c672:	e9 83 00 00 00       	jmp    f010c6fa <_alltraps>
f010c677:	90                   	nop

f010c678 <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f010c678:	6a 0b                	push   $0xb
f010c67a:	eb 7e                	jmp    f010c6fa <_alltraps>

f010c67c <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f010c67c:	6a 0c                	push   $0xc
f010c67e:	eb 7a                	jmp    f010c6fa <_alltraps>

f010c680 <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f010c680:	6a 0d                	push   $0xd
f010c682:	eb 76                	jmp    f010c6fa <_alltraps>

f010c684 <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f010c684:	6a 00                	push   $0x0
f010c686:	6a 10                	push   $0x10
f010c688:	eb 70                	jmp    f010c6fa <_alltraps>

f010c68a <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f010c68a:	6a 11                	push   $0x11
f010c68c:	eb 6c                	jmp    f010c6fa <_alltraps>

f010c68e <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f010c68e:	6a 00                	push   $0x0
f010c690:	6a 12                	push   $0x12
f010c692:	eb 66                	jmp    f010c6fa <_alltraps>

f010c694 <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f010c694:	6a 00                	push   $0x0
f010c696:	6a 13                	push   $0x13
f010c698:	eb 60                	jmp    f010c6fa <_alltraps>

f010c69a <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f010c69a:	6a 00                	push   $0x0
f010c69c:	6a 20                	push   $0x20
f010c69e:	eb 5a                	jmp    f010c6fa <_alltraps>

f010c6a0 <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f010c6a0:	6a 00                	push   $0x0
f010c6a2:	6a 21                	push   $0x21
f010c6a4:	eb 54                	jmp    f010c6fa <_alltraps>

f010c6a6 <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010c6a6:	6a 00                	push   $0x0
f010c6a8:	6a 22                	push   $0x22
f010c6aa:	eb 4e                	jmp    f010c6fa <_alltraps>

f010c6ac <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010c6ac:	6a 00                	push   $0x0
f010c6ae:	6a 23                	push   $0x23
f010c6b0:	eb 48                	jmp    f010c6fa <_alltraps>

f010c6b2 <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010c6b2:	6a 00                	push   $0x0
f010c6b4:	6a 24                	push   $0x24
f010c6b6:	eb 42                	jmp    f010c6fa <_alltraps>

f010c6b8 <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010c6b8:	6a 00                	push   $0x0
f010c6ba:	6a 25                	push   $0x25
f010c6bc:	eb 3c                	jmp    f010c6fa <_alltraps>

f010c6be <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010c6be:	6a 00                	push   $0x0
f010c6c0:	6a 26                	push   $0x26
f010c6c2:	eb 36                	jmp    f010c6fa <_alltraps>

f010c6c4 <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010c6c4:	6a 00                	push   $0x0
f010c6c6:	6a 27                	push   $0x27
f010c6c8:	eb 30                	jmp    f010c6fa <_alltraps>

f010c6ca <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010c6ca:	6a 00                	push   $0x0
f010c6cc:	6a 28                	push   $0x28
f010c6ce:	eb 2a                	jmp    f010c6fa <_alltraps>

f010c6d0 <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010c6d0:	6a 00                	push   $0x0
f010c6d2:	6a 29                	push   $0x29
f010c6d4:	eb 24                	jmp    f010c6fa <_alltraps>

f010c6d6 <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010c6d6:	6a 00                	push   $0x0
f010c6d8:	6a 2a                	push   $0x2a
f010c6da:	eb 1e                	jmp    f010c6fa <_alltraps>

f010c6dc <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010c6dc:	6a 00                	push   $0x0
f010c6de:	6a 2b                	push   $0x2b
f010c6e0:	eb 18                	jmp    f010c6fa <_alltraps>

f010c6e2 <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010c6e2:	6a 00                	push   $0x0
f010c6e4:	6a 2c                	push   $0x2c
f010c6e6:	eb 12                	jmp    f010c6fa <_alltraps>

f010c6e8 <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010c6e8:	6a 00                	push   $0x0
f010c6ea:	6a 2d                	push   $0x2d
f010c6ec:	eb 0c                	jmp    f010c6fa <_alltraps>

f010c6ee <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010c6ee:	6a 00                	push   $0x0
f010c6f0:	6a 2e                	push   $0x2e
f010c6f2:	eb 06                	jmp    f010c6fa <_alltraps>

f010c6f4 <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f010c6f4:	6a 00                	push   $0x0
f010c6f6:	6a 2f                	push   $0x2f
f010c6f8:	eb 00                	jmp    f010c6fa <_alltraps>

f010c6fa <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds
f010c6fa:	1e                   	push   %ds
push %es
f010c6fb:	06                   	push   %es
pushal
f010c6fc:	60                   	pusha  

mov $(GD_KD), %ax
f010c6fd:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f010c701:	8e d8                	mov    %eax,%ds
mov %ax,%es
f010c703:	8e c0                	mov    %eax,%es

push %esp
f010c705:	54                   	push   %esp

call trap
f010c706:	e8 57 fc ff ff       	call   f010c362 <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at
f010c70b:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal
f010c70c:	61                   	popa   
pop %es
f010c70d:	07                   	pop    %es
pop %ds
f010c70e:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f010c70f:	83 c4 08             	add    $0x8,%esp

iret
f010c712:	cf                   	iret   

f010c713 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010c713:	55                   	push   %ebp
f010c714:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010c716:	8b 45 08             	mov    0x8(%ebp),%eax
f010c719:	8b 15 54 7b 65 f0    	mov    0xf0657b54,%edx
f010c71f:	29 d0                	sub    %edx,%eax
f010c721:	c1 f8 03             	sar    $0x3,%eax
f010c724:	89 c2                	mov    %eax,%edx
f010c726:	89 d0                	mov    %edx,%eax
f010c728:	c1 e0 02             	shl    $0x2,%eax
f010c72b:	01 d0                	add    %edx,%eax
f010c72d:	c1 e0 02             	shl    $0x2,%eax
f010c730:	01 d0                	add    %edx,%eax
f010c732:	c1 e0 02             	shl    $0x2,%eax
f010c735:	01 d0                	add    %edx,%eax
f010c737:	89 c1                	mov    %eax,%ecx
f010c739:	c1 e1 08             	shl    $0x8,%ecx
f010c73c:	01 c8                	add    %ecx,%eax
f010c73e:	89 c1                	mov    %eax,%ecx
f010c740:	c1 e1 10             	shl    $0x10,%ecx
f010c743:	01 c8                	add    %ecx,%eax
f010c745:	01 c0                	add    %eax,%eax
f010c747:	01 d0                	add    %edx,%eax
}
f010c749:	5d                   	pop    %ebp
f010c74a:	c3                   	ret    

f010c74b <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010c74b:	55                   	push   %ebp
f010c74c:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010c74e:	ff 75 08             	pushl  0x8(%ebp)
f010c751:	e8 bd ff ff ff       	call   f010c713 <to_frame_number>
f010c756:	83 c4 04             	add    $0x4,%esp
f010c759:	c1 e0 0c             	shl    $0xc,%eax
}
f010c75c:	c9                   	leave  
f010c75d:	c3                   	ret    

f010c75e <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010c75e:	55                   	push   %ebp
f010c75f:	89 e5                	mov    %esp,%ebp
f010c761:	83 ec 18             	sub    $0x18,%esp
f010c764:	8b 45 10             	mov    0x10(%ebp),%eax
f010c767:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010c76a:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010c76e:	74 26                	je     f010c796 <sys_cputs+0x38>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010c770:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c775:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c778:	8b 15 14 72 65 f0    	mov    0xf0657214,%edx
f010c77e:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f010c784:	83 ec 04             	sub    $0x4,%esp
f010c787:	50                   	push   %eax
f010c788:	52                   	push   %edx
f010c789:	68 30 72 13 f0       	push   $0xf0137230
f010c78e:	e8 ef 44 ff ff       	call   f0100c82 <cprintf>
f010c793:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010c796:	83 ec 04             	sub    $0x4,%esp
f010c799:	ff 75 08             	pushl  0x8(%ebp)
f010c79c:	ff 75 0c             	pushl  0xc(%ebp)
f010c79f:	68 39 72 13 f0       	push   $0xf0137239
f010c7a4:	e8 d9 44 ff ff       	call   f0100c82 <cprintf>
f010c7a9:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010c7ac:	90                   	nop
f010c7ad:	c9                   	leave  
f010c7ae:	c3                   	ret    

f010c7af <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010c7af:	55                   	push   %ebp
f010c7b0:	89 e5                	mov    %esp,%ebp
f010c7b2:	83 ec 18             	sub    $0x18,%esp
f010c7b5:	8b 45 08             	mov    0x8(%ebp),%eax
f010c7b8:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010c7bb:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010c7bf:	83 ec 08             	sub    $0x8,%esp
f010c7c2:	50                   	push   %eax
f010c7c3:	68 3e 72 13 f0       	push   $0xf013723e
f010c7c8:	e8 b5 44 ff ff       	call   f0100c82 <cprintf>
f010c7cd:	83 c4 10             	add    $0x10,%esp
}
f010c7d0:	90                   	nop
f010c7d1:	c9                   	leave  
f010c7d2:	c3                   	ret    

f010c7d3 <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010c7d3:	55                   	push   %ebp
f010c7d4:	89 e5                	mov    %esp,%ebp
f010c7d6:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010c7d9:	e8 de 42 ff ff       	call   f0100abc <cons_getc2>
f010c7de:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010c7e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010c7e4:	c9                   	leave  
f010c7e5:	c3                   	ret    

f010c7e6 <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010c7e6:	55                   	push   %ebp
f010c7e7:	89 e5                	mov    %esp,%ebp
f010c7e9:	83 ec 18             	sub    $0x18,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010c7ec:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c7f1:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010c7f4:	83 ec 0c             	sub    $0xc,%esp
f010c7f7:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010c7fa:	50                   	push   %eax
f010c7fb:	e8 1b a0 ff ff       	call   f010681b <allocate_frame>
f010c800:	83 c4 10             	add    $0x10,%esp
f010c803:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010c806:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010c80a:	75 08                	jne    f010c814 <__sys_allocate_page+0x2e>
		return r ;
f010c80c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c80f:	e9 e9 00 00 00       	jmp    f010c8fd <__sys_allocate_page+0x117>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010c814:	8b 45 08             	mov    0x8(%ebp),%eax
f010c817:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010c81c:	77 0c                	ja     f010c82a <__sys_allocate_page+0x44>
f010c81e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c821:	25 ff 0f 00 00       	and    $0xfff,%eax
f010c826:	85 c0                	test   %eax,%eax
f010c828:	74 0a                	je     f010c834 <__sys_allocate_page+0x4e>
		return E_INVAL;
f010c82a:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010c82f:	e9 c9 00 00 00       	jmp    f010c8fd <__sys_allocate_page+0x117>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010c834:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c837:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010c83c:	83 f8 04             	cmp    $0x4,%eax
f010c83f:	74 0a                	je     f010c84b <__sys_allocate_page+0x65>
		return E_INVAL;
f010c841:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010c846:	e9 b2 00 00 00       	jmp    f010c8fd <__sys_allocate_page+0x117>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010c84b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c84e:	83 ec 0c             	sub    $0xc,%esp
f010c851:	50                   	push   %eax
f010c852:	e8 f4 fe ff ff       	call   f010c74b <to_physical_address>
f010c857:	83 c4 10             	add    $0x10,%esp
f010c85a:	89 45 ec             	mov    %eax,-0x14(%ebp)
#if USE_KHEAP
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unsed VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(e->env_page_directory, ptr_frame_info, USER_LIMIT, PERM_WRITEABLE);
f010c85d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010c860:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c863:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c866:	6a 02                	push   $0x2
f010c868:	68 00 00 80 ef       	push   $0xef800000
f010c86d:	52                   	push   %edx
f010c86e:	50                   	push   %eax
f010c86f:	e8 f6 a3 ff ff       	call   f0106c6a <map_frame>
f010c874:	83 c4 10             	add    $0x10,%esp
		memset((void*)USER_LIMIT, 0, PAGE_SIZE);
f010c877:	83 ec 04             	sub    $0x4,%esp
f010c87a:	68 00 10 00 00       	push   $0x1000
f010c87f:	6a 00                	push   $0x0
f010c881:	68 00 00 80 ef       	push   $0xef800000
f010c886:	e8 ed 45 02 00       	call   f0130e78 <memset>
f010c88b:	83 c4 10             	add    $0x10,%esp

		// Temporarily increase the references to prevent unmap_frame from removing the frame
		// we just got from allocate_frame, we will use it for the new page
		ptr_frame_info->references += 1;
f010c88e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010c891:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c894:	8b 40 08             	mov    0x8(%eax),%eax
f010c897:	40                   	inc    %eax
f010c898:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(e->env_page_directory, USER_LIMIT);
f010c89c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c89f:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c8a2:	83 ec 08             	sub    $0x8,%esp
f010c8a5:	68 00 00 80 ef       	push   $0xef800000
f010c8aa:	50                   	push   %eax
f010c8ab:	e8 ef a4 ff ff       	call   f0106d9f <unmap_frame>
f010c8b0:	83 c4 10             	add    $0x10,%esp

		//return it to the original status
		ptr_frame_info->references -= 1;
f010c8b3:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010c8b6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c8b9:	8b 40 08             	mov    0x8(%eax),%eax
f010c8bc:	48                   	dec    %eax
f010c8bd:	66 89 42 08          	mov    %ax,0x8(%edx)
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010c8c1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010c8c4:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010c8c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c8ca:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c8cd:	ff 75 0c             	pushl  0xc(%ebp)
f010c8d0:	51                   	push   %ecx
f010c8d1:	52                   	push   %edx
f010c8d2:	50                   	push   %eax
f010c8d3:	e8 92 a3 ff ff       	call   f0106c6a <map_frame>
f010c8d8:	83 c4 10             	add    $0x10,%esp
f010c8db:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010c8de:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010c8e2:	75 14                	jne    f010c8f8 <__sys_allocate_page+0x112>
	{
		decrement_references(ptr_frame_info);
f010c8e4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c8e7:	83 ec 0c             	sub    $0xc,%esp
f010c8ea:	50                   	push   %eax
f010c8eb:	e8 ba a0 ff ff       	call   f01069aa <decrement_references>
f010c8f0:	83 c4 10             	add    $0x10,%esp
		return r;
f010c8f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c8f6:	eb 05                	jmp    f010c8fd <__sys_allocate_page+0x117>
	}
	return 0 ;
f010c8f8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010c8fd:	c9                   	leave  
f010c8fe:	c3                   	ret    

f010c8ff <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010c8ff:	55                   	push   %ebp
f010c900:	89 e5                	mov    %esp,%ebp
f010c902:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010c905:	83 ec 04             	sub    $0x4,%esp
f010c908:	68 41 72 13 f0       	push   $0xf0137241
f010c90d:	68 b3 00 00 00       	push   $0xb3
f010c912:	68 5f 72 13 f0       	push   $0xf013725f
f010c917:	e8 df 38 ff ff       	call   f01001fb <_panic>

f010c91c <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010c91c:	55                   	push   %ebp
f010c91d:	89 e5                	mov    %esp,%ebp
f010c91f:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010c922:	83 ec 04             	sub    $0x4,%esp
f010c925:	68 74 72 13 f0       	push   $0xf0137274
f010c92a:	68 c3 00 00 00       	push   $0xc3
f010c92f:	68 5f 72 13 f0       	push   $0xf013725f
f010c934:	e8 c2 38 ff ff       	call   f01001fb <_panic>

f010c939 <sys_calculate_required_frames>:
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010c939:	55                   	push   %ebp
f010c93a:	89 e5                	mov    %esp,%ebp
f010c93c:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010c93f:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c944:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c947:	83 ec 04             	sub    $0x4,%esp
f010c94a:	ff 75 0c             	pushl  0xc(%ebp)
f010c94d:	ff 75 08             	pushl  0x8(%ebp)
f010c950:	50                   	push   %eax
f010c951:	e8 82 c2 ff ff       	call   f0108bd8 <calculate_required_frames>
f010c956:	83 c4 10             	add    $0x10,%esp
}
f010c959:	c9                   	leave  
f010c95a:	c3                   	ret    

f010c95b <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010c95b:	55                   	push   %ebp
f010c95c:	89 e5                	mov    %esp,%ebp
f010c95e:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c961:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c964:	83 ec 0c             	sub    $0xc,%esp
f010c967:	50                   	push   %eax
f010c968:	e8 97 a5 ff ff       	call   f0106f04 <calculate_available_frames>
f010c96d:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010c970:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c973:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c976:	01 d0                	add    %edx,%eax
}
f010c978:	c9                   	leave  
f010c979:	c3                   	ret    

f010c97a <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010c97a:	55                   	push   %ebp
f010c97b:	89 e5                	mov    %esp,%ebp
f010c97d:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c980:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c983:	83 ec 0c             	sub    $0xc,%esp
f010c986:	50                   	push   %eax
f010c987:	e8 78 a5 ff ff       	call   f0106f04 <calculate_available_frames>
f010c98c:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010c98f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010c992:	c9                   	leave  
f010c993:	c3                   	ret    

f010c994 <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010c994:	55                   	push   %ebp
f010c995:	89 e5                	mov    %esp,%ebp
f010c997:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c99a:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c99d:	83 ec 0c             	sub    $0xc,%esp
f010c9a0:	50                   	push   %eax
f010c9a1:	e8 5e a5 ff ff       	call   f0106f04 <calculate_available_frames>
f010c9a6:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010c9a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010c9ac:	c9                   	leave  
f010c9ad:	c3                   	ret    

f010c9ae <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010c9ae:	55                   	push   %ebp
f010c9af:	89 e5                	mov    %esp,%ebp
f010c9b1:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010c9b4:	83 ec 0c             	sub    $0xc,%esp
f010c9b7:	ff 75 08             	pushl  0x8(%ebp)
f010c9ba:	e8 d6 31 02 00       	call   f012fb95 <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010c9bf:	83 c4 10             	add    $0x10,%esp
}
f010c9c2:	c9                   	leave  
f010c9c3:	c3                   	ret    

f010c9c4 <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010c9c4:	55                   	push   %ebp
f010c9c5:	89 e5                	mov    %esp,%ebp
f010c9c7:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010c9ca:	e8 1e 31 02 00       	call   f012faed <scarce_memory>
}
f010c9cf:	90                   	nop
f010c9d0:	c9                   	leave  
f010c9d1:	c3                   	ret    

f010c9d2 <sys_clearFFL>:

void sys_clearFFL()
{
f010c9d2:	55                   	push   %ebp
f010c9d3:	89 e5                	mov    %esp,%ebp
f010c9d5:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010c9d8:	a1 24 7b 65 f0       	mov    0xf0657b24,%eax
f010c9dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010c9e0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010c9e7:	eb 12                	jmp    f010c9fb <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010c9e9:	83 ec 0c             	sub    $0xc,%esp
f010c9ec:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c9ef:	50                   	push   %eax
f010c9f0:	e8 26 9e ff ff       	call   f010681b <allocate_frame>
f010c9f5:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010c9f8:	ff 45 f4             	incl   -0xc(%ebp)
f010c9fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c9fe:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ca01:	7c e6                	jl     f010c9e9 <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010ca03:	90                   	nop
f010ca04:	c9                   	leave  
f010ca05:	c3                   	ret    

f010ca06 <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010ca06:	55                   	push   %ebp
f010ca07:	89 e5                	mov    %esp,%ebp
f010ca09:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010ca0c:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010ca11:	83 ec 0c             	sub    $0xc,%esp
f010ca14:	50                   	push   %eax
f010ca15:	e8 82 72 ff ff       	call   f0103c9c <pf_calculate_allocated_pages>
f010ca1a:	83 c4 10             	add    $0x10,%esp
}
f010ca1d:	c9                   	leave  
f010ca1e:	c3                   	ret    

f010ca1f <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010ca1f:	55                   	push   %ebp
f010ca20:	89 e5                	mov    %esp,%ebp
f010ca22:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010ca25:	e8 9a 11 00 00       	call   f010dbc4 <isBufferingEnabled>
f010ca2a:	84 c0                	test   %al,%al
f010ca2c:	74 19                	je     f010ca47 <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
f010ca2e:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010ca33:	83 ec 04             	sub    $0x4,%esp
f010ca36:	ff 75 0c             	pushl  0xc(%ebp)
f010ca39:	ff 75 08             	pushl  0x8(%ebp)
f010ca3c:	50                   	push   %eax
f010ca3d:	e8 7f c2 ff ff       	call   f0108cc1 <__free_user_mem_with_buffering>
f010ca42:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
	}
	return;
f010ca45:	eb 18                	jmp    f010ca5f <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
f010ca47:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010ca4c:	83 ec 04             	sub    $0x4,%esp
f010ca4f:	ff 75 0c             	pushl  0xc(%ebp)
f010ca52:	ff 75 08             	pushl  0x8(%ebp)
f010ca55:	50                   	push   %eax
f010ca56:	e8 49 c2 ff ff       	call   f0108ca4 <free_user_mem>
f010ca5b:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010ca5e:	90                   	nop
}
f010ca5f:	c9                   	leave  
f010ca60:	c3                   	ret    

f010ca61 <sys_allocate_user_mem>:

void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010ca61:	55                   	push   %ebp
f010ca62:	89 e5                	mov    %esp,%ebp
f010ca64:	83 ec 08             	sub    $0x8,%esp
	allocate_user_mem(curenv, virtual_address, size);
f010ca67:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010ca6c:	83 ec 04             	sub    $0x4,%esp
f010ca6f:	ff 75 0c             	pushl  0xc(%ebp)
f010ca72:	ff 75 08             	pushl  0x8(%ebp)
f010ca75:	50                   	push   %eax
f010ca76:	e8 0c c2 ff ff       	call   f0108c87 <allocate_user_mem>
f010ca7b:	83 c4 10             	add    $0x10,%esp
	return;
f010ca7e:	90                   	nop
}
f010ca7f:	c9                   	leave  
f010ca80:	c3                   	ret    

f010ca81 <sys_allocate_chunk>:

void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010ca81:	55                   	push   %ebp
f010ca82:	89 e5                	mov    %esp,%ebp
f010ca84:	83 ec 08             	sub    $0x8,%esp
	allocate_chunk(curenv->env_page_directory, virtual_address, size, perms);
f010ca87:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010ca8c:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ca8f:	ff 75 10             	pushl  0x10(%ebp)
f010ca92:	ff 75 0c             	pushl  0xc(%ebp)
f010ca95:	ff 75 08             	pushl  0x8(%ebp)
f010ca98:	50                   	push   %eax
f010ca99:	e8 f7 bf ff ff       	call   f0108a95 <allocate_chunk>
f010ca9e:	83 c4 10             	add    $0x10,%esp
	return;
f010caa1:	90                   	nop
}
f010caa2:	c9                   	leave  
f010caa3:	c3                   	ret    

f010caa4 <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010caa4:	55                   	push   %ebp
f010caa5:	89 e5                	mov    %esp,%ebp
f010caa7:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(curenv, src_virtual_address, dst_virtual_address, size);
f010caaa:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010caaf:	ff 75 10             	pushl  0x10(%ebp)
f010cab2:	ff 75 0c             	pushl  0xc(%ebp)
f010cab5:	ff 75 08             	pushl  0x8(%ebp)
f010cab8:	50                   	push   %eax
f010cab9:	e8 20 c2 ff ff       	call   f0108cde <move_user_mem>
f010cabe:	83 c4 10             	add    $0x10,%esp
	return;
f010cac1:	90                   	nop
}
f010cac2:	c9                   	leave  
f010cac3:	c3                   	ret    

f010cac4 <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010cac4:	55                   	push   %ebp
f010cac5:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010cac7:	a1 30 7b 65 f0       	mov    0xf0657b30,%eax
}
f010cacc:	5d                   	pop    %ebp
f010cacd:	c3                   	ret    

f010cace <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010cace:	55                   	push   %ebp
f010cacf:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010cad1:	8b 45 08             	mov    0x8(%ebp),%eax
f010cad4:	a3 30 7b 65 f0       	mov    %eax,0xf0657b30
}
f010cad9:	90                   	nop
f010cada:	5d                   	pop    %ebp
f010cadb:	c3                   	ret    

f010cadc <sys_disable_interrupt>:
/*******************************/
/* INTERRUPTS SYSTEM CALLS */
/*******************************/
//NEW!! 2012...
void sys_disable_interrupt()
{
f010cadc:	55                   	push   %ebp
f010cadd:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010cadf:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cae4:	8b 15 14 72 65 f0    	mov    0xf0657214,%edx
f010caea:	8b 52 38             	mov    0x38(%edx),%edx
f010caed:	80 e6 fd             	and    $0xfd,%dh
f010caf0:	89 50 38             	mov    %edx,0x38(%eax)
}
f010caf3:	90                   	nop
f010caf4:	5d                   	pop    %ebp
f010caf5:	c3                   	ret    

f010caf6 <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010caf6:	55                   	push   %ebp
f010caf7:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010caf9:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cafe:	8b 15 14 72 65 f0    	mov    0xf0657214,%edx
f010cb04:	8b 52 38             	mov    0x38(%edx),%edx
f010cb07:	80 ce 02             	or     $0x2,%dh
f010cb0a:	89 50 38             	mov    %edx,0x38(%eax)
}
f010cb0d:	90                   	nop
f010cb0e:	5d                   	pop    %ebp
f010cb0f:	c3                   	ret    

f010cb10 <sys_createSemaphore>:

/*******************************/
/* SEMAPHORES SYSTEM CALLS */
/*******************************/
int sys_createSemaphore(char* semaphoreName, uint32 initialValue)
{
f010cb10:	55                   	push   %ebp
f010cb11:	89 e5                	mov    %esp,%ebp
f010cb13:	83 ec 08             	sub    $0x8,%esp
	return createSemaphore(curenv->env_id, semaphoreName, initialValue);
f010cb16:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cb1b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cb1e:	83 ec 04             	sub    $0x4,%esp
f010cb21:	ff 75 0c             	pushl  0xc(%ebp)
f010cb24:	ff 75 08             	pushl  0x8(%ebp)
f010cb27:	50                   	push   %eax
f010cb28:	e8 b0 14 00 00       	call   f010dfdd <createSemaphore>
f010cb2d:	83 c4 10             	add    $0x10,%esp
}
f010cb30:	c9                   	leave  
f010cb31:	c3                   	ret    

f010cb32 <sys_waitSemaphore>:

void sys_waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010cb32:	55                   	push   %ebp
f010cb33:	89 e5                	mov    %esp,%ebp
f010cb35:	83 ec 08             	sub    $0x8,%esp
	waitSemaphore(ownerEnvID, semaphoreName);
f010cb38:	83 ec 08             	sub    $0x8,%esp
f010cb3b:	ff 75 0c             	pushl  0xc(%ebp)
f010cb3e:	ff 75 08             	pushl  0x8(%ebp)
f010cb41:	e8 b4 14 00 00       	call   f010dffa <waitSemaphore>
f010cb46:	83 c4 10             	add    $0x10,%esp
}
f010cb49:	90                   	nop
f010cb4a:	c9                   	leave  
f010cb4b:	c3                   	ret    

f010cb4c <sys_signalSemaphore>:

void sys_signalSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010cb4c:	55                   	push   %ebp
f010cb4d:	89 e5                	mov    %esp,%ebp
f010cb4f:	83 ec 08             	sub    $0x8,%esp
	signalSemaphore(ownerEnvID, semaphoreName);
f010cb52:	83 ec 08             	sub    $0x8,%esp
f010cb55:	ff 75 0c             	pushl  0xc(%ebp)
f010cb58:	ff 75 08             	pushl  0x8(%ebp)
f010cb5b:	e8 b7 14 00 00       	call   f010e017 <signalSemaphore>
f010cb60:	83 c4 10             	add    $0x10,%esp
}
f010cb63:	90                   	nop
f010cb64:	c9                   	leave  
f010cb65:	c3                   	ret    

f010cb66 <sys_getSemaphoreValue>:

int sys_getSemaphoreValue(int32 ownerEnvID, char* semaphoreName)
{
f010cb66:	55                   	push   %ebp
f010cb67:	89 e5                	mov    %esp,%ebp
f010cb69:	83 ec 18             	sub    $0x18,%esp
	int semID = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010cb6c:	83 ec 08             	sub    $0x8,%esp
f010cb6f:	ff 75 0c             	pushl  0xc(%ebp)
f010cb72:	ff 75 08             	pushl  0x8(%ebp)
f010cb75:	e8 db 12 00 00       	call   f010de55 <get_semaphore_object_ID>
f010cb7a:	83 c4 10             	add    $0x10,%esp
f010cb7d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(semID >= 0 && semID < MAX_SEMAPHORES) ;
f010cb80:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cb84:	78 0c                	js     f010cb92 <sys_getSemaphoreValue+0x2c>
f010cb86:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010cb89:	a1 b4 7a 65 f0       	mov    0xf0657ab4,%eax
f010cb8e:	39 c2                	cmp    %eax,%edx
f010cb90:	72 19                	jb     f010cbab <sys_getSemaphoreValue+0x45>
f010cb92:	68 94 72 13 f0       	push   $0xf0137294
f010cb97:	68 b9 72 13 f0       	push   $0xf01372b9
f010cb9c:	68 4a 01 00 00       	push   $0x14a
f010cba1:	68 5f 72 13 f0       	push   $0xf013725f
f010cba6:	e8 50 36 ff ff       	call   f01001fb <_panic>

	return semaphores[semID].value ;
f010cbab:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010cbb1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010cbb4:	89 d0                	mov    %edx,%eax
f010cbb6:	c1 e0 02             	shl    $0x2,%eax
f010cbb9:	01 d0                	add    %edx,%eax
f010cbbb:	01 c0                	add    %eax,%eax
f010cbbd:	01 d0                	add    %edx,%eax
f010cbbf:	01 c0                	add    %eax,%eax
f010cbc1:	01 d0                	add    %edx,%eax
f010cbc3:	c1 e0 02             	shl    $0x2,%eax
f010cbc6:	01 c8                	add    %ecx,%eax
f010cbc8:	8b 40 54             	mov    0x54(%eax),%eax
}
f010cbcb:	c9                   	leave  
f010cbcc:	c3                   	ret    

f010cbcd <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010cbcd:	55                   	push   %ebp
f010cbce:	89 e5                	mov    %esp,%ebp
f010cbd0:	83 ec 18             	sub    $0x18,%esp
f010cbd3:	8b 45 10             	mov    0x10(%ebp),%eax
f010cbd6:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(curenv->env_id, shareName, size, isWritable, virtual_address);
f010cbd9:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010cbdd:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cbe2:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cbe5:	83 ec 0c             	sub    $0xc,%esp
f010cbe8:	ff 75 14             	pushl  0x14(%ebp)
f010cbeb:	52                   	push   %edx
f010cbec:	ff 75 0c             	pushl  0xc(%ebp)
f010cbef:	ff 75 08             	pushl  0x8(%ebp)
f010cbf2:	50                   	push   %eax
f010cbf3:	e8 0d a9 ff ff       	call   f0107505 <createSharedObject>
f010cbf8:	83 c4 20             	add    $0x20,%esp
}
f010cbfb:	c9                   	leave  
f010cbfc:	c3                   	ret    

f010cbfd <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010cbfd:	55                   	push   %ebp
f010cbfe:	89 e5                	mov    %esp,%ebp
f010cc00:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010cc03:	83 ec 08             	sub    $0x8,%esp
f010cc06:	ff 75 0c             	pushl  0xc(%ebp)
f010cc09:	ff 75 08             	pushl  0x8(%ebp)
f010cc0c:	e8 17 a9 ff ff       	call   f0107528 <getSizeOfSharedObject>
f010cc11:	83 c4 10             	add    $0x10,%esp
}
f010cc14:	c9                   	leave  
f010cc15:	c3                   	ret    

f010cc16 <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010cc16:	55                   	push   %ebp
f010cc17:	89 e5                	mov    %esp,%ebp
f010cc19:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010cc1c:	83 ec 04             	sub    $0x4,%esp
f010cc1f:	ff 75 10             	pushl  0x10(%ebp)
f010cc22:	ff 75 0c             	pushl  0xc(%ebp)
f010cc25:	ff 75 08             	pushl  0x8(%ebp)
f010cc28:	e8 18 a9 ff ff       	call   f0107545 <getSharedObject>
f010cc2d:	83 c4 10             	add    $0x10,%esp
}
f010cc30:	c9                   	leave  
f010cc31:	c3                   	ret    

f010cc32 <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010cc32:	55                   	push   %ebp
f010cc33:	89 e5                	mov    %esp,%ebp
f010cc35:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010cc38:	83 ec 08             	sub    $0x8,%esp
f010cc3b:	ff 75 0c             	pushl  0xc(%ebp)
f010cc3e:	ff 75 08             	pushl  0x8(%ebp)
f010cc41:	e8 1c a9 ff ff       	call   f0107562 <freeSharedObject>
f010cc46:	83 c4 10             	add    $0x10,%esp
}
f010cc49:	c9                   	leave  
f010cc4a:	c3                   	ret    

f010cc4b <sys_getMaxShares>:

uint32 sys_getMaxShares()
{
f010cc4b:	55                   	push   %ebp
f010cc4c:	89 e5                	mov    %esp,%ebp
	return MAX_SHARES;
f010cc4e:	a1 28 7b 65 f0       	mov    0xf0657b28,%eax
}
f010cc53:	5d                   	pop    %ebp
f010cc54:	c3                   	ret    

f010cc55 <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010cc55:	55                   	push   %ebp
f010cc56:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010cc58:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cc5d:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010cc60:	5d                   	pop    %ebp
f010cc61:	c3                   	ret    

f010cc62 <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010cc62:	55                   	push   %ebp
f010cc63:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010cc65:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cc6a:	89 c2                	mov    %eax,%edx
f010cc6c:	a1 10 72 65 f0       	mov    0xf0657210,%eax
f010cc71:	29 c2                	sub    %eax,%edx
f010cc73:	89 d0                	mov    %edx,%eax
f010cc75:	c1 f8 04             	sar    $0x4,%eax
f010cc78:	89 c2                	mov    %eax,%edx
f010cc7a:	89 d0                	mov    %edx,%eax
f010cc7c:	c1 e0 03             	shl    $0x3,%eax
f010cc7f:	01 d0                	add    %edx,%eax
f010cc81:	01 c0                	add    %eax,%eax
f010cc83:	01 d0                	add    %edx,%eax
f010cc85:	c1 e0 03             	shl    $0x3,%eax
f010cc88:	01 d0                	add    %edx,%eax
f010cc8a:	89 c1                	mov    %eax,%ecx
f010cc8c:	c1 e1 08             	shl    $0x8,%ecx
f010cc8f:	01 c8                	add    %ecx,%eax
f010cc91:	01 c0                	add    %eax,%eax
f010cc93:	01 d0                	add    %edx,%eax
f010cc95:	01 c0                	add    %eax,%eax
f010cc97:	01 d0                	add    %edx,%eax
f010cc99:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010cca0:	01 d0                	add    %edx,%eax
f010cca2:	89 c2                	mov    %eax,%edx
f010cca4:	c1 e2 09             	shl    $0x9,%edx
f010cca7:	29 c2                	sub    %eax,%edx
f010cca9:	89 d0                	mov    %edx,%eax
f010ccab:	f7 d8                	neg    %eax
}
f010ccad:	5d                   	pop    %ebp
f010ccae:	c3                   	ret    

f010ccaf <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010ccaf:	55                   	push   %ebp
f010ccb0:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010ccb2:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010ccb7:	8b 40 50             	mov    0x50(%eax),%eax
}
f010ccba:	5d                   	pop    %ebp
f010ccbb:	c3                   	ret    

f010ccbc <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010ccbc:	55                   	push   %ebp
f010ccbd:	89 e5                	mov    %esp,%ebp
f010ccbf:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010ccc2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010ccc6:	75 0a                	jne    f010ccd2 <sys_destroy_env+0x16>
	{
		e = curenv ;
f010ccc8:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cccd:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010ccd0:	eb 22                	jmp    f010ccf4 <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010ccd2:	83 ec 04             	sub    $0x4,%esp
f010ccd5:	6a 00                	push   $0x0
f010ccd7:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010ccda:	50                   	push   %eax
f010ccdb:	ff 75 08             	pushl  0x8(%ebp)
f010ccde:	e8 bf cc ff ff       	call   f01099a2 <envid2env>
f010cce3:	83 c4 10             	add    $0x10,%esp
f010cce6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010cce9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cced:	79 05                	jns    f010ccf4 <sys_destroy_env+0x38>
	{
		return r;
f010ccef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ccf2:	eb 5e                	jmp    f010cd52 <sys_destroy_env+0x96>
	}

	if (e == curenv)
f010ccf4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ccf7:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010ccfc:	39 c2                	cmp    %eax,%edx
f010ccfe:	75 1b                	jne    f010cd1b <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010cd00:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cd05:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cd08:	83 ec 08             	sub    $0x8,%esp
f010cd0b:	50                   	push   %eax
f010cd0c:	68 ce 72 13 f0       	push   $0xf01372ce
f010cd11:	e8 6c 3f ff ff       	call   f0100c82 <cprintf>
f010cd16:	83 c4 10             	add    $0x10,%esp
f010cd19:	eb 20                	jmp    f010cd3b <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010cd1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cd1e:	8b 50 4c             	mov    0x4c(%eax),%edx
f010cd21:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cd26:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cd29:	83 ec 04             	sub    $0x4,%esp
f010cd2c:	52                   	push   %edx
f010cd2d:	50                   	push   %eax
f010cd2e:	68 e9 72 13 f0       	push   $0xf01372e9
f010cd33:	e8 4a 3f ff ff       	call   f0100c82 <cprintf>
f010cd38:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010cd3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cd3e:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cd41:	83 ec 0c             	sub    $0xc,%esp
f010cd44:	50                   	push   %eax
f010cd45:	e8 1e 88 ff ff       	call   f0105568 <sched_kill_env>
f010cd4a:	83 c4 10             	add    $0x10,%esp

	return 0;
f010cd4d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010cd52:	c9                   	leave  
f010cd53:	c3                   	ret    

f010cd54 <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010cd54:	55                   	push   %ebp
f010cd55:	89 e5                	mov    %esp,%ebp
f010cd57:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010cd5a:	e8 24 cc ff ff       	call   f0109983 <env_exit>
	//env_run_cmd_prmpt();
}
f010cd5f:	90                   	nop
f010cd60:	c9                   	leave  
f010cd61:	c3                   	ret    

f010cd62 <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010cd62:	55                   	push   %ebp
f010cd63:	89 e5                	mov    %esp,%ebp
f010cd65:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010cd68:	ff 75 14             	pushl  0x14(%ebp)
f010cd6b:	ff 75 10             	pushl  0x10(%ebp)
f010cd6e:	ff 75 0c             	pushl  0xc(%ebp)
f010cd71:	ff 75 08             	pushl  0x8(%ebp)
f010cd74:	e8 82 bf ff ff       	call   f0108cfb <env_create>
f010cd79:	83 c4 10             	add    $0x10,%esp
f010cd7c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010cd7f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cd83:	75 07                	jne    f010cd8c <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010cd85:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010cd8a:	eb 14                	jmp    f010cda0 <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010cd8c:	83 ec 0c             	sub    $0xc,%esp
f010cd8f:	ff 75 f4             	pushl  -0xc(%ebp)
f010cd92:	e8 96 83 ff ff       	call   f010512d <sched_new_env>
f010cd97:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010cd9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cd9d:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010cda0:	c9                   	leave  
f010cda1:	c3                   	ret    

f010cda2 <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010cda2:	55                   	push   %ebp
f010cda3:	89 e5                	mov    %esp,%ebp
f010cda5:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010cda8:	8b 45 08             	mov    0x8(%ebp),%eax
f010cdab:	83 ec 0c             	sub    $0xc,%esp
f010cdae:	50                   	push   %eax
f010cdaf:	e8 96 83 ff ff       	call   f010514a <sched_run_env>
f010cdb4:	83 c4 10             	add    $0x10,%esp
}
f010cdb7:	90                   	nop
f010cdb8:	c9                   	leave  
f010cdb9:	c3                   	ret    

f010cdba <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010cdba:	55                   	push   %ebp
f010cdbb:	89 e5                	mov    %esp,%ebp
f010cdbd:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010cdc0:	0f 31                	rdtsc  
f010cdc2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010cdc5:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010cdc8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cdcb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010cdce:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010cdd1:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010cdd4:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010cdd7:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010cdda:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010cddd:	89 01                	mov    %eax,(%ecx)
f010cddf:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010cde2:	8b 45 08             	mov    0x8(%ebp),%eax
f010cde5:	c9                   	leave  
f010cde6:	c2 04 00             	ret    $0x4

f010cde9 <sys_rcr2>:

uint32 sys_rcr2()
{
f010cde9:	55                   	push   %ebp
f010cdea:	89 e5                	mov    %esp,%ebp
f010cdec:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010cdef:	0f 20 d0             	mov    %cr2,%eax
f010cdf2:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010cdf5:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010cdf8:	90                   	nop
}
f010cdf9:	c9                   	leave  
f010cdfa:	c3                   	ret    

f010cdfb <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010cdfb:	55                   	push   %ebp
f010cdfc:	89 e5                	mov    %esp,%ebp
f010cdfe:	83 ec 04             	sub    $0x4,%esp
f010ce01:	8b 45 08             	mov    0x8(%ebp),%eax
f010ce04:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010ce07:	8a 45 fc             	mov    -0x4(%ebp),%al
f010ce0a:	a2 a8 7a 65 f0       	mov    %al,0xf0657aa8
}
f010ce0f:	90                   	nop
f010ce10:	c9                   	leave  
f010ce11:	c3                   	ret    

f010ce12 <rsttst>:

uint32 tstcnt;
void rsttst()
{
f010ce12:	55                   	push   %ebp
f010ce13:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f010ce15:	c7 05 b0 7c 65 f0 00 	movl   $0x0,0xf0657cb0
f010ce1c:	00 00 00 
}
f010ce1f:	90                   	nop
f010ce20:	5d                   	pop    %ebp
f010ce21:	c3                   	ret    

f010ce22 <inctst>:
void inctst()
{
f010ce22:	55                   	push   %ebp
f010ce23:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f010ce25:	a1 b0 7c 65 f0       	mov    0xf0657cb0,%eax
f010ce2a:	40                   	inc    %eax
f010ce2b:	a3 b0 7c 65 f0       	mov    %eax,0xf0657cb0
}
f010ce30:	90                   	nop
f010ce31:	5d                   	pop    %ebp
f010ce32:	c3                   	ret    

f010ce33 <gettst>:
uint32 gettst()
{
f010ce33:	55                   	push   %ebp
f010ce34:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f010ce36:	a1 b0 7c 65 f0       	mov    0xf0657cb0,%eax
}
f010ce3b:	5d                   	pop    %ebp
f010ce3c:	c3                   	ret    

f010ce3d <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f010ce3d:	55                   	push   %ebp
f010ce3e:	89 e5                	mov    %esp,%ebp
f010ce40:	83 ec 28             	sub    $0x28,%esp
f010ce43:	8b 45 14             	mov    0x14(%ebp),%eax
f010ce46:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f010ce49:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f010ce50:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f010ce54:	83 f8 65             	cmp    $0x65,%eax
f010ce57:	74 5d                	je     f010ceb6 <tst+0x79>
f010ce59:	83 f8 65             	cmp    $0x65,%eax
f010ce5c:	7f 0a                	jg     f010ce68 <tst+0x2b>
f010ce5e:	83 f8 62             	cmp    $0x62,%eax
f010ce61:	74 73                	je     f010ced6 <tst+0x99>
f010ce63:	e9 91 00 00 00       	jmp    f010cef9 <tst+0xbc>
f010ce68:	83 f8 67             	cmp    $0x67,%eax
f010ce6b:	74 29                	je     f010ce96 <tst+0x59>
f010ce6d:	83 f8 6c             	cmp    $0x6c,%eax
f010ce70:	0f 85 83 00 00 00    	jne    f010cef9 <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f010ce76:	8b 45 08             	mov    0x8(%ebp),%eax
f010ce79:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010ce7c:	73 09                	jae    f010ce87 <tst+0x4a>
			chk = 1;
f010ce7e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010ce85:	eb 68                	jmp    f010ceef <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f010ce87:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010ce8b:	74 62                	je     f010ceef <tst+0xb2>
			chk = 1;
f010ce8d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010ce94:	eb 59                	jmp    f010ceef <tst+0xb2>
	case 'g':
		if (n > v1)
f010ce96:	8b 45 08             	mov    0x8(%ebp),%eax
f010ce99:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010ce9c:	76 09                	jbe    f010cea7 <tst+0x6a>
			chk = 1;
f010ce9e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010cea5:	eb 4b                	jmp    f010cef2 <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f010cea7:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010ceab:	74 45                	je     f010cef2 <tst+0xb5>
			chk = 1;
f010cead:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010ceb4:	eb 3c                	jmp    f010cef2 <tst+0xb5>
	case 'e':
		if (n == v1)
f010ceb6:	8b 45 08             	mov    0x8(%ebp),%eax
f010ceb9:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010cebc:	75 09                	jne    f010cec7 <tst+0x8a>
			chk = 1;
f010cebe:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010cec5:	eb 2e                	jmp    f010cef5 <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f010cec7:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010cecb:	74 28                	je     f010cef5 <tst+0xb8>
			chk = 1;
f010cecd:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010ced4:	eb 1f                	jmp    f010cef5 <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v1)
f010ced6:	8b 45 08             	mov    0x8(%ebp),%eax
f010ced9:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010cedc:	72 1a                	jb     f010cef8 <tst+0xbb>
f010cede:	8b 45 08             	mov    0x8(%ebp),%eax
f010cee1:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010cee4:	77 12                	ja     f010cef8 <tst+0xbb>
			chk = 1;
f010cee6:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010ceed:	eb 09                	jmp    f010cef8 <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010ceef:	90                   	nop
f010cef0:	eb 07                	jmp    f010cef9 <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010cef2:	90                   	nop
f010cef3:	eb 04                	jmp    f010cef9 <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010cef5:	90                   	nop
f010cef6:	eb 01                	jmp    f010cef9 <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v1)
			chk = 1;
		break;
f010cef8:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f010cef9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cefd:	75 17                	jne    f010cf16 <tst+0xd9>
f010ceff:	83 ec 04             	sub    $0x4,%esp
f010cf02:	68 01 73 13 f0       	push   $0xf0137301
f010cf07:	68 00 02 00 00       	push   $0x200
f010cf0c:	68 5f 72 13 f0       	push   $0xf013725f
f010cf11:	e8 e5 32 ff ff       	call   f01001fb <_panic>
	tstcnt++ ;
f010cf16:	a1 b0 7c 65 f0       	mov    0xf0657cb0,%eax
f010cf1b:	40                   	inc    %eax
f010cf1c:	a3 b0 7c 65 f0       	mov    %eax,0xf0657cb0
	return;
f010cf21:	90                   	nop
}
f010cf22:	c9                   	leave  
f010cf23:	c3                   	ret    

f010cf24 <chktst>:

void chktst(uint32 n)
{
f010cf24:	55                   	push   %ebp
f010cf25:	89 e5                	mov    %esp,%ebp
f010cf27:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f010cf2a:	a1 b0 7c 65 f0       	mov    0xf0657cb0,%eax
f010cf2f:	3b 45 08             	cmp    0x8(%ebp),%eax
f010cf32:	75 12                	jne    f010cf46 <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f010cf34:	83 ec 0c             	sub    $0xc,%esp
f010cf37:	68 14 73 13 f0       	push   $0xf0137314
f010cf3c:	e8 41 3d ff ff       	call   f0100c82 <cprintf>
f010cf41:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f010cf44:	eb 17                	jmp    f010cf5d <chktst+0x39>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f010cf46:	83 ec 04             	sub    $0x4,%esp
f010cf49:	68 40 73 13 f0       	push   $0xf0137340
f010cf4e:	68 0a 02 00 00       	push   $0x20a
f010cf53:	68 5f 72 13 f0       	push   $0xf013725f
f010cf58:	e8 9e 32 ff ff       	call   f01001fb <_panic>
}
f010cf5d:	c9                   	leave  
f010cf5e:	c3                   	ret    

f010cf5f <sys_check_LRU_lists>:



//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f010cf5f:	55                   	push   %ebp
f010cf60:	89 e5                	mov    %esp,%ebp
f010cf62:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010cf65:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cf6a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int active_list_validation = 1;
f010cf6d:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
	int second_list_validation = 1;
f010cf74:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f010cf7b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010cf7f:	0f 84 a5 00 00 00    	je     f010d02a <sys_check_LRU_lists+0xcb>
	{
		int idx_active_list = 0;
f010cf85:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010cf8c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cf8f:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f010cf95:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010cf98:	eb 4a                	jmp    f010cfe4 <sys_check_LRU_lists+0x85>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f010cf9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cf9d:	8b 00                	mov    (%eax),%eax
f010cf9f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010cfa2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010cfa5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010cfaa:	89 c2                	mov    %eax,%edx
f010cfac:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cfaf:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010cfb6:	8b 45 08             	mov    0x8(%ebp),%eax
f010cfb9:	01 c8                	add    %ecx,%eax
f010cfbb:	8b 00                	mov    (%eax),%eax
f010cfbd:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010cfc0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010cfc3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010cfc8:	39 c2                	cmp    %eax,%edx
f010cfca:	74 09                	je     f010cfd5 <sys_check_LRU_lists+0x76>
			{
				active_list_validation = 0;
f010cfcc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
				break;
f010cfd3:	eb 3e                	jmp    f010d013 <sys_check_LRU_lists+0xb4>
			}
			idx_active_list++;
f010cfd5:	ff 45 f0             	incl   -0x10(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010cfd8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cfdb:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010cfe1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010cfe4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cfe8:	74 08                	je     f010cff2 <sys_check_LRU_lists+0x93>
f010cfea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cfed:	8b 40 10             	mov    0x10(%eax),%eax
f010cff0:	eb 05                	jmp    f010cff7 <sys_check_LRU_lists+0x98>
f010cff2:	b8 00 00 00 00       	mov    $0x0,%eax
f010cff7:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cffa:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010d000:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d003:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d009:	85 c0                	test   %eax,%eax
f010d00b:	75 8d                	jne    f010cf9a <sys_check_LRU_lists+0x3b>
f010d00d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d011:	75 87                	jne    f010cf9a <sys_check_LRU_lists+0x3b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f010d013:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d016:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010d01c:	8b 45 10             	mov    0x10(%ebp),%eax
f010d01f:	39 c2                	cmp    %eax,%edx
f010d021:	74 07                	je     f010d02a <sys_check_LRU_lists+0xcb>
		{
			active_list_validation = 0;
f010d023:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f010d02a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010d02e:	0f 84 a5 00 00 00    	je     f010d0d9 <sys_check_LRU_lists+0x17a>
	{
		int idx_second_list = 0;
f010d034:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d03b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d03e:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010d044:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d047:	eb 4a                	jmp    f010d093 <sys_check_LRU_lists+0x134>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f010d049:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d04c:	8b 00                	mov    (%eax),%eax
f010d04e:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d051:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d054:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d059:	89 c2                	mov    %eax,%edx
f010d05b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d05e:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d065:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d068:	01 c8                	add    %ecx,%eax
f010d06a:	8b 00                	mov    (%eax),%eax
f010d06c:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010d06f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d072:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d077:	39 c2                	cmp    %eax,%edx
f010d079:	74 09                	je     f010d084 <sys_check_LRU_lists+0x125>
			{
				second_list_validation = 0;
f010d07b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
				break;
f010d082:	eb 3e                	jmp    f010d0c2 <sys_check_LRU_lists+0x163>
			}
			idx_second_list++;
f010d084:	ff 45 ec             	incl   -0x14(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d087:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d08a:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d090:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d093:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d097:	74 08                	je     f010d0a1 <sys_check_LRU_lists+0x142>
f010d099:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d09c:	8b 40 10             	mov    0x10(%eax),%eax
f010d09f:	eb 05                	jmp    f010d0a6 <sys_check_LRU_lists+0x147>
f010d0a1:	b8 00 00 00 00       	mov    $0x0,%eax
f010d0a6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d0a9:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010d0af:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d0b2:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d0b8:	85 c0                	test   %eax,%eax
f010d0ba:	75 8d                	jne    f010d049 <sys_check_LRU_lists+0xea>
f010d0bc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d0c0:	75 87                	jne    f010d049 <sys_check_LRU_lists+0xea>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f010d0c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d0c5:	8b 90 e4 05 00 00    	mov    0x5e4(%eax),%edx
f010d0cb:	8b 45 14             	mov    0x14(%ebp),%eax
f010d0ce:	39 c2                	cmp    %eax,%edx
f010d0d0:	74 07                	je     f010d0d9 <sys_check_LRU_lists+0x17a>
			second_list_validation = 0;
f010d0d2:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	}
	return active_list_validation&second_list_validation;
f010d0d9:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d0dc:	23 45 f8             	and    -0x8(%ebp),%eax
}
f010d0df:	c9                   	leave  
f010d0e0:	c3                   	ret    

f010d0e1 <sys_check_LRU_lists_free>:



//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f010d0e1:	55                   	push   %ebp
f010d0e2:	89 e5                	mov    %esp,%ebp
f010d0e4:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010d0e7:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010d0ec:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int list_validation_count = 0;
f010d0ef:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d0f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d0f9:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f010d0ff:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d102:	eb 65                	jmp    f010d169 <sys_check_LRU_lists_free+0x88>
	{
		for(int var = 0; var < list_size; var++)
f010d104:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010d10b:	eb 3a                	jmp    f010d147 <sys_check_LRU_lists_free+0x66>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010d10d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d110:	8b 00                	mov    (%eax),%eax
f010d112:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010d115:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d118:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d11d:	89 c2                	mov    %eax,%edx
f010d11f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d122:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d129:	8b 45 08             	mov    0x8(%ebp),%eax
f010d12c:	01 c8                	add    %ecx,%eax
f010d12e:	8b 00                	mov    (%eax),%eax
f010d130:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d133:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d136:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d13b:	39 c2                	cmp    %eax,%edx
f010d13d:	75 05                	jne    f010d144 <sys_check_LRU_lists_free+0x63>
			{
				list_validation_count++;
f010d13f:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010d142:	eb 0b                	jmp    f010d14f <sys_check_LRU_lists_free+0x6e>
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f010d144:	ff 45 f4             	incl   -0xc(%ebp)
f010d147:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d14a:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d14d:	7c be                	jl     f010d10d <sys_check_LRU_lists_free+0x2c>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010d14f:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010d153:	7e 08                	jle    f010d15d <sys_check_LRU_lists_free+0x7c>
			return list_validation_count;
f010d155:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d158:	e9 ed 00 00 00       	jmp    f010d24a <sys_check_LRU_lists_free+0x169>
	struct Env* env = curenv;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d15d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d160:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d166:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d169:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d16d:	74 08                	je     f010d177 <sys_check_LRU_lists_free+0x96>
f010d16f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d172:	8b 40 10             	mov    0x10(%eax),%eax
f010d175:	eb 05                	jmp    f010d17c <sys_check_LRU_lists_free+0x9b>
f010d177:	b8 00 00 00 00       	mov    $0x0,%eax
f010d17c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d17f:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010d185:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d188:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d18e:	85 c0                	test   %eax,%eax
f010d190:	0f 85 6e ff ff ff    	jne    f010d104 <sys_check_LRU_lists_free+0x23>
f010d196:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d19a:	0f 85 64 ff ff ff    	jne    f010d104 <sys_check_LRU_lists_free+0x23>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d1a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d1a3:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010d1a9:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d1ac:	eb 62                	jmp    f010d210 <sys_check_LRU_lists_free+0x12f>
	{
		for(int var = 0; var < list_size; var++)
f010d1ae:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010d1b5:	eb 3a                	jmp    f010d1f1 <sys_check_LRU_lists_free+0x110>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010d1b7:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d1ba:	8b 00                	mov    (%eax),%eax
f010d1bc:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010d1bf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d1c2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d1c7:	89 c2                	mov    %eax,%edx
f010d1c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d1cc:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d1d3:	8b 45 08             	mov    0x8(%ebp),%eax
f010d1d6:	01 c8                	add    %ecx,%eax
f010d1d8:	8b 00                	mov    (%eax),%eax
f010d1da:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010d1dd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d1e0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d1e5:	39 c2                	cmp    %eax,%edx
f010d1e7:	75 05                	jne    f010d1ee <sys_check_LRU_lists_free+0x10d>
			{
				list_validation_count++;
f010d1e9:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010d1ec:	eb 0b                	jmp    f010d1f9 <sys_check_LRU_lists_free+0x118>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f010d1ee:	ff 45 f0             	incl   -0x10(%ebp)
f010d1f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d1f4:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d1f7:	7c be                	jl     f010d1b7 <sys_check_LRU_lists_free+0xd6>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010d1f9:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010d1fd:	7e 05                	jle    f010d204 <sys_check_LRU_lists_free+0x123>
			return list_validation_count;
f010d1ff:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d202:	eb 46                	jmp    f010d24a <sys_check_LRU_lists_free+0x169>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d204:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d207:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d20d:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d210:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d214:	74 08                	je     f010d21e <sys_check_LRU_lists_free+0x13d>
f010d216:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d219:	8b 40 10             	mov    0x10(%eax),%eax
f010d21c:	eb 05                	jmp    f010d223 <sys_check_LRU_lists_free+0x142>
f010d21e:	b8 00 00 00 00       	mov    $0x0,%eax
f010d223:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d226:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010d22c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d22f:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d235:	85 c0                	test   %eax,%eax
f010d237:	0f 85 71 ff ff ff    	jne    f010d1ae <sys_check_LRU_lists_free+0xcd>
f010d23d:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d241:	0f 85 67 ff ff ff    	jne    f010d1ae <sys_check_LRU_lists_free+0xcd>
			return list_validation_count;

	}


	return list_validation_count;
f010d247:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f010d24a:	c9                   	leave  
f010d24b:	c3                   	ret    

f010d24c <syscall>:
/*****************************************************************************/
/************************* SYSTEM CALLS DISPATCHER ***************************/
/*****************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010d24c:	55                   	push   %ebp
f010d24d:	89 e5                	mov    %esp,%ebp
f010d24f:	56                   	push   %esi
f010d250:	53                   	push   %ebx
f010d251:	83 ec 10             	sub    $0x10,%esp
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	// LAB 3: Your code here.
	switch(syscallno)
f010d254:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010d258:	0f 87 0e 04 00 00    	ja     f010d66c <syscall+0x420>
f010d25e:	8b 45 08             	mov    0x8(%ebp),%eax
f010d261:	c1 e0 02             	shl    $0x2,%eax
f010d264:	05 5c 73 13 f0       	add    $0xf013735c,%eax
f010d269:	8b 00                	mov    (%eax),%eax
f010d26b:	ff e0                	jmp    *%eax
	{
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010d26d:	8b 45 14             	mov    0x14(%ebp),%eax
f010d270:	0f b6 d0             	movzbl %al,%edx
f010d273:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d276:	83 ec 04             	sub    $0x4,%esp
f010d279:	52                   	push   %edx
f010d27a:	ff 75 10             	pushl  0x10(%ebp)
f010d27d:	50                   	push   %eax
f010d27e:	e8 db f4 ff ff       	call   f010c75e <sys_cputs>
f010d283:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d286:	b8 00 00 00 00       	mov    $0x0,%eax
f010d28b:	e9 e1 03 00 00       	jmp    f010d671 <syscall+0x425>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010d290:	e8 3e f5 ff ff       	call   f010c7d3 <sys_cgetc>
f010d295:	e9 d7 03 00 00       	jmp    f010d671 <syscall+0x425>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010d29a:	83 ec 08             	sub    $0x8,%esp
f010d29d:	ff 75 10             	pushl  0x10(%ebp)
f010d2a0:	ff 75 0c             	pushl  0xc(%ebp)
f010d2a3:	e8 91 f6 ff ff       	call   f010c939 <sys_calculate_required_frames>
f010d2a8:	83 c4 10             	add    $0x10,%esp
f010d2ab:	e9 c1 03 00 00       	jmp    f010d671 <syscall+0x425>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010d2b0:	e8 a6 f6 ff ff       	call   f010c95b <sys_calculate_free_frames>
f010d2b5:	e9 b7 03 00 00       	jmp    f010d671 <syscall+0x425>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010d2ba:	e8 bb f6 ff ff       	call   f010c97a <sys_calculate_modified_frames>
f010d2bf:	e9 ad 03 00 00       	jmp    f010d671 <syscall+0x425>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010d2c4:	e8 cb f6 ff ff       	call   f010c994 <sys_calculate_notmod_frames>
f010d2c9:	e9 a3 03 00 00       	jmp    f010d671 <syscall+0x425>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010d2ce:	e8 33 f7 ff ff       	call   f010ca06 <sys_pf_calculate_allocated_pages>
f010d2d3:	e9 99 03 00 00       	jmp    f010d671 <syscall+0x425>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010d2d8:	83 ec 0c             	sub    $0xc,%esp
f010d2db:	ff 75 0c             	pushl  0xc(%ebp)
f010d2de:	e8 cb f6 ff ff       	call   f010c9ae <sys_calculate_pages_tobe_removed_ready_exit>
f010d2e3:	83 c4 10             	add    $0x10,%esp
f010d2e6:	e9 86 03 00 00       	jmp    f010d671 <syscall+0x425>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010d2eb:	e8 d4 f6 ff ff       	call   f010c9c4 <sys_scarce_memory>
		return 0;
f010d2f0:	b8 00 00 00 00       	mov    $0x0,%eax
f010d2f5:	e9 77 03 00 00       	jmp    f010d671 <syscall+0x425>
		break;
	case SYS_free_user_mem:
		sys_free_user_mem(a1, a2);
f010d2fa:	83 ec 08             	sub    $0x8,%esp
f010d2fd:	ff 75 10             	pushl  0x10(%ebp)
f010d300:	ff 75 0c             	pushl  0xc(%ebp)
f010d303:	e8 17 f7 ff ff       	call   f010ca1f <sys_free_user_mem>
f010d308:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d30b:	b8 00 00 00 00       	mov    $0x0,%eax
f010d310:	e9 5c 03 00 00       	jmp    f010d671 <syscall+0x425>
		break;
		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010d315:	8b 55 10             	mov    0x10(%ebp),%edx
f010d318:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d31b:	83 ec 08             	sub    $0x8,%esp
f010d31e:	52                   	push   %edx
f010d31f:	50                   	push   %eax
f010d320:	e8 c1 f4 ff ff       	call   f010c7e6 <__sys_allocate_page>
f010d325:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d328:	b8 00 00 00 00       	mov    $0x0,%eax
f010d32d:	e9 3f 03 00 00       	jmp    f010d671 <syscall+0x425>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010d332:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010d335:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010d338:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d33b:	8b 55 10             	mov    0x10(%ebp),%edx
f010d33e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d341:	83 ec 0c             	sub    $0xc,%esp
f010d344:	56                   	push   %esi
f010d345:	53                   	push   %ebx
f010d346:	51                   	push   %ecx
f010d347:	52                   	push   %edx
f010d348:	50                   	push   %eax
f010d349:	e8 b1 f5 ff ff       	call   f010c8ff <__sys_map_frame>
f010d34e:	83 c4 20             	add    $0x20,%esp
		return 0;
f010d351:	b8 00 00 00 00       	mov    $0x0,%eax
f010d356:	e9 16 03 00 00       	jmp    f010d671 <syscall+0x425>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010d35b:	8b 55 10             	mov    0x10(%ebp),%edx
f010d35e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d361:	83 ec 08             	sub    $0x8,%esp
f010d364:	52                   	push   %edx
f010d365:	50                   	push   %eax
f010d366:	e8 b1 f5 ff ff       	call   f010c91c <__sys_unmap_frame>
f010d36b:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d36e:	b8 00 00 00 00       	mov    $0x0,%eax
f010d373:	e9 f9 02 00 00       	jmp    f010d671 <syscall+0x425>
		break;

		//2022
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010d378:	83 ec 04             	sub    $0x4,%esp
f010d37b:	ff 75 14             	pushl  0x14(%ebp)
f010d37e:	ff 75 10             	pushl  0x10(%ebp)
f010d381:	ff 75 0c             	pushl  0xc(%ebp)
f010d384:	e8 f8 f6 ff ff       	call   f010ca81 <sys_allocate_chunk>
f010d389:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d38c:	b8 00 00 00 00       	mov    $0x0,%eax
f010d391:	e9 db 02 00 00       	jmp    f010d671 <syscall+0x425>
		break;
	case SYS_disableINTR:
		sys_disable_interrupt();
f010d396:	e8 41 f7 ff ff       	call   f010cadc <sys_disable_interrupt>
		return 0;
f010d39b:	b8 00 00 00 00       	mov    $0x0,%eax
f010d3a0:	e9 cc 02 00 00       	jmp    f010d671 <syscall+0x425>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010d3a5:	e8 4c f7 ff ff       	call   f010caf6 <sys_enable_interrupt>
		return 0;
f010d3aa:	b8 00 00 00 00       	mov    $0x0,%eax
f010d3af:	e9 bd 02 00 00       	jmp    f010d671 <syscall+0x425>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010d3b4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d3b7:	0f be c0             	movsbl %al,%eax
f010d3ba:	83 ec 0c             	sub    $0xc,%esp
f010d3bd:	50                   	push   %eax
f010d3be:	e8 ec f3 ff ff       	call   f010c7af <sys_cputc>
f010d3c3:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d3c6:	b8 00 00 00 00       	mov    $0x0,%eax
f010d3cb:	e9 a1 02 00 00       	jmp    f010d671 <syscall+0x425>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010d3d0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d3d3:	0f be c0             	movsbl %al,%eax
f010d3d6:	83 ec 0c             	sub    $0xc,%esp
f010d3d9:	50                   	push   %eax
f010d3da:	e8 f3 f5 ff ff       	call   f010c9d2 <sys_clearFFL>
f010d3df:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d3e2:	b8 00 00 00 00       	mov    $0x0,%eax
f010d3e7:	e9 85 02 00 00       	jmp    f010d671 <syscall+0x425>
		break;

	case SYS_create_semaphore:
		return sys_createSemaphore((char*)a1, a2);
f010d3ec:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d3ef:	83 ec 08             	sub    $0x8,%esp
f010d3f2:	ff 75 10             	pushl  0x10(%ebp)
f010d3f5:	50                   	push   %eax
f010d3f6:	e8 15 f7 ff ff       	call   f010cb10 <sys_createSemaphore>
f010d3fb:	83 c4 10             	add    $0x10,%esp
f010d3fe:	e9 6e 02 00 00       	jmp    f010d671 <syscall+0x425>
		break;

	case SYS_wait_semaphore:
		sys_waitSemaphore((int32)a1, (char*)a2);
f010d403:	8b 55 10             	mov    0x10(%ebp),%edx
f010d406:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d409:	83 ec 08             	sub    $0x8,%esp
f010d40c:	52                   	push   %edx
f010d40d:	50                   	push   %eax
f010d40e:	e8 1f f7 ff ff       	call   f010cb32 <sys_waitSemaphore>
f010d413:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d416:	b8 00 00 00 00       	mov    $0x0,%eax
f010d41b:	e9 51 02 00 00       	jmp    f010d671 <syscall+0x425>
		break;

	case SYS_signal_semaphore:
		sys_signalSemaphore((int32)a1, (char*)a2);
f010d420:	8b 55 10             	mov    0x10(%ebp),%edx
f010d423:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d426:	83 ec 08             	sub    $0x8,%esp
f010d429:	52                   	push   %edx
f010d42a:	50                   	push   %eax
f010d42b:	e8 1c f7 ff ff       	call   f010cb4c <sys_signalSemaphore>
f010d430:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d433:	b8 00 00 00 00       	mov    $0x0,%eax
f010d438:	e9 34 02 00 00       	jmp    f010d671 <syscall+0x425>
		break;

	case SYS_get_semaphore_value:
		return sys_getSemaphoreValue((int32)a1, (char*)a2);
f010d43d:	8b 55 10             	mov    0x10(%ebp),%edx
f010d440:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d443:	83 ec 08             	sub    $0x8,%esp
f010d446:	52                   	push   %edx
f010d447:	50                   	push   %eax
f010d448:	e8 19 f7 ff ff       	call   f010cb66 <sys_getSemaphoreValue>
f010d44d:	83 c4 10             	add    $0x10,%esp
f010d450:	e9 1c 02 00 00       	jmp    f010d671 <syscall+0x425>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010d455:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010d458:	8b 45 14             	mov    0x14(%ebp),%eax
f010d45b:	0f b6 d0             	movzbl %al,%edx
f010d45e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d461:	51                   	push   %ecx
f010d462:	52                   	push   %edx
f010d463:	ff 75 10             	pushl  0x10(%ebp)
f010d466:	50                   	push   %eax
f010d467:	e8 61 f7 ff ff       	call   f010cbcd <sys_createSharedObject>
f010d46c:	83 c4 10             	add    $0x10,%esp
f010d46f:	e9 fd 01 00 00       	jmp    f010d671 <syscall+0x425>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010d474:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d477:	8b 55 10             	mov    0x10(%ebp),%edx
f010d47a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d47d:	83 ec 04             	sub    $0x4,%esp
f010d480:	51                   	push   %ecx
f010d481:	52                   	push   %edx
f010d482:	50                   	push   %eax
f010d483:	e8 8e f7 ff ff       	call   f010cc16 <sys_getSharedObject>
f010d488:	83 c4 10             	add    $0x10,%esp
f010d48b:	e9 e1 01 00 00       	jmp    f010d671 <syscall+0x425>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010d490:	8b 55 10             	mov    0x10(%ebp),%edx
f010d493:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d496:	83 ec 08             	sub    $0x8,%esp
f010d499:	52                   	push   %edx
f010d49a:	50                   	push   %eax
f010d49b:	e8 92 f7 ff ff       	call   f010cc32 <sys_freeSharedObject>
f010d4a0:	83 c4 10             	add    $0x10,%esp
f010d4a3:	e9 c9 01 00 00       	jmp    f010d671 <syscall+0x425>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010d4a8:	8b 55 10             	mov    0x10(%ebp),%edx
f010d4ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d4ae:	83 ec 08             	sub    $0x8,%esp
f010d4b1:	52                   	push   %edx
f010d4b2:	50                   	push   %eax
f010d4b3:	e8 45 f7 ff ff       	call   f010cbfd <sys_getSizeOfSharedObject>
f010d4b8:	83 c4 10             	add    $0x10,%esp
f010d4bb:	e9 b1 01 00 00       	jmp    f010d671 <syscall+0x425>
		break;

	case SYS_get_max_shares:
		return sys_getMaxShares();
f010d4c0:	e8 86 f7 ff ff       	call   f010cc4b <sys_getMaxShares>
f010d4c5:	e9 a7 01 00 00       	jmp    f010d671 <syscall+0x425>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010d4ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d4cd:	ff 75 18             	pushl  0x18(%ebp)
f010d4d0:	ff 75 14             	pushl  0x14(%ebp)
f010d4d3:	ff 75 10             	pushl  0x10(%ebp)
f010d4d6:	50                   	push   %eax
f010d4d7:	e8 86 f8 ff ff       	call   f010cd62 <sys_create_env>
f010d4dc:	83 c4 10             	add    $0x10,%esp
f010d4df:	e9 8d 01 00 00       	jmp    f010d671 <syscall+0x425>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010d4e4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d4e7:	83 ec 0c             	sub    $0xc,%esp
f010d4ea:	50                   	push   %eax
f010d4eb:	e8 b2 f8 ff ff       	call   f010cda2 <sys_run_env>
f010d4f0:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d4f3:	b8 00 00 00 00       	mov    $0x0,%eax
f010d4f8:	e9 74 01 00 00       	jmp    f010d671 <syscall+0x425>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010d4fd:	e8 60 f7 ff ff       	call   f010cc62 <sys_getenvindex>
f010d502:	e9 6a 01 00 00       	jmp    f010d671 <syscall+0x425>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010d507:	e8 49 f7 ff ff       	call   f010cc55 <sys_getenvid>
f010d50c:	e9 60 01 00 00       	jmp    f010d671 <syscall+0x425>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010d511:	e8 99 f7 ff ff       	call   f010ccaf <sys_getparentenvid>
f010d516:	e9 56 01 00 00       	jmp    f010d671 <syscall+0x425>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010d51b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d51e:	83 ec 0c             	sub    $0xc,%esp
f010d521:	50                   	push   %eax
f010d522:	e8 95 f7 ff ff       	call   f010ccbc <sys_destroy_env>
f010d527:	83 c4 10             	add    $0x10,%esp
f010d52a:	e9 42 01 00 00       	jmp    f010d671 <syscall+0x425>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010d52f:	e8 20 f8 ff ff       	call   f010cd54 <sys_exit_env>
		return 0;
f010d534:	b8 00 00 00 00       	mov    $0x0,%eax
f010d539:	e9 33 01 00 00       	jmp    f010d671 <syscall+0x425>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010d53e:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010d541:	83 ec 0c             	sub    $0xc,%esp
f010d544:	50                   	push   %eax
f010d545:	e8 70 f8 ff ff       	call   f010cdba <sys_get_virtual_time>
f010d54a:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010d54d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d550:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010d553:	8b 45 10             	mov    0x10(%ebp),%eax
f010d556:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010d559:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d55c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d55f:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010d561:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d564:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d567:	89 10                	mov    %edx,(%eax)
		return 0;
f010d569:	b8 00 00 00 00       	mov    $0x0,%eax
f010d56e:	e9 fe 00 00 00       	jmp    f010d671 <syscall+0x425>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010d573:	83 ec 04             	sub    $0x4,%esp
f010d576:	ff 75 14             	pushl  0x14(%ebp)
f010d579:	ff 75 10             	pushl  0x10(%ebp)
f010d57c:	ff 75 0c             	pushl  0xc(%ebp)
f010d57f:	e8 20 f5 ff ff       	call   f010caa4 <sys_move_user_mem>
f010d584:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d587:	b8 00 00 00 00       	mov    $0x0,%eax
f010d58c:	e9 e0 00 00 00       	jmp    f010d671 <syscall+0x425>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010d591:	e8 53 f8 ff ff       	call   f010cde9 <sys_rcr2>
f010d596:	e9 d6 00 00 00       	jmp    f010d671 <syscall+0x425>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010d59b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d59e:	0f b6 c0             	movzbl %al,%eax
f010d5a1:	83 ec 0c             	sub    $0xc,%esp
f010d5a4:	50                   	push   %eax
f010d5a5:	e8 51 f8 ff ff       	call   f010cdfb <sys_bypassPageFault>
f010d5aa:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d5ad:	b8 00 00 00 00       	mov    $0x0,%eax
f010d5b2:	e9 ba 00 00 00       	jmp    f010d671 <syscall+0x425>

	case SYS_rsttst:
		rsttst();
f010d5b7:	e8 56 f8 ff ff       	call   f010ce12 <rsttst>
		return 0;
f010d5bc:	b8 00 00 00 00       	mov    $0x0,%eax
f010d5c1:	e9 ab 00 00 00       	jmp    f010d671 <syscall+0x425>
	case SYS_inctst:
		inctst();
f010d5c6:	e8 57 f8 ff ff       	call   f010ce22 <inctst>
		return 0;
f010d5cb:	b8 00 00 00 00       	mov    $0x0,%eax
f010d5d0:	e9 9c 00 00 00       	jmp    f010d671 <syscall+0x425>
	case SYS_chktst:
		chktst(a1);
f010d5d5:	83 ec 0c             	sub    $0xc,%esp
f010d5d8:	ff 75 0c             	pushl  0xc(%ebp)
f010d5db:	e8 44 f9 ff ff       	call   f010cf24 <chktst>
f010d5e0:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d5e3:	b8 00 00 00 00       	mov    $0x0,%eax
f010d5e8:	e9 84 00 00 00       	jmp    f010d671 <syscall+0x425>
	case SYS_gettst:
		return gettst();
f010d5ed:	e8 41 f8 ff ff       	call   f010ce33 <gettst>
f010d5f2:	eb 7d                	jmp    f010d671 <syscall+0x425>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010d5f4:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010d5f7:	8b 45 18             	mov    0x18(%ebp),%eax
f010d5fa:	0f be c0             	movsbl %al,%eax
f010d5fd:	83 ec 0c             	sub    $0xc,%esp
f010d600:	52                   	push   %edx
f010d601:	50                   	push   %eax
f010d602:	ff 75 14             	pushl  0x14(%ebp)
f010d605:	ff 75 10             	pushl  0x10(%ebp)
f010d608:	ff 75 0c             	pushl  0xc(%ebp)
f010d60b:	e8 2d f8 ff ff       	call   f010ce3d <tst>
f010d610:	83 c4 20             	add    $0x20,%esp
		return 0;
f010d613:	b8 00 00 00 00       	mov    $0x0,%eax
f010d618:	eb 57                	jmp    f010d671 <syscall+0x425>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010d61a:	e8 a5 f4 ff ff       	call   f010cac4 <sys_get_heap_strategy>
f010d61f:	eb 50                	jmp    f010d671 <syscall+0x425>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010d621:	83 ec 0c             	sub    $0xc,%esp
f010d624:	ff 75 0c             	pushl  0xc(%ebp)
f010d627:	e8 a2 f4 ff ff       	call   f010cace <sys_set_uheap_strategy>
f010d62c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d62f:	b8 00 00 00 00       	mov    $0x0,%eax
f010d634:	eb 3b                	jmp    f010d671 <syscall+0x425>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010d636:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010d639:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d63c:	8b 55 10             	mov    0x10(%ebp),%edx
f010d63f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d642:	53                   	push   %ebx
f010d643:	51                   	push   %ecx
f010d644:	52                   	push   %edx
f010d645:	50                   	push   %eax
f010d646:	e8 14 f9 ff ff       	call   f010cf5f <sys_check_LRU_lists>
f010d64b:	83 c4 10             	add    $0x10,%esp
f010d64e:	eb 21                	jmp    f010d671 <syscall+0x425>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010d650:	8b 55 10             	mov    0x10(%ebp),%edx
f010d653:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d656:	83 ec 08             	sub    $0x8,%esp
f010d659:	52                   	push   %edx
f010d65a:	50                   	push   %eax
f010d65b:	e8 81 fa ff ff       	call   f010d0e1 <sys_check_LRU_lists_free>
f010d660:	83 c4 10             	add    $0x10,%esp
f010d663:	eb 0c                	jmp    f010d671 <syscall+0x425>

	case NSYSCALLS:
		return 	-E_INVAL;
f010d665:	b8 03 00 00 00       	mov    $0x3,%eax
f010d66a:	eb 05                	jmp    f010d671 <syscall+0x425>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010d66c:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010d671:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010d674:	5b                   	pop    %ebx
f010d675:	5e                   	pop    %esi
f010d676:	5d                   	pop    %ebp
f010d677:	c3                   	ret    

f010d678 <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010d678:	55                   	push   %ebp
f010d679:	89 e5                	mov    %esp,%ebp
f010d67b:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010d67e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d681:	8b 00                	mov    (%eax),%eax
f010d683:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d686:	8b 45 10             	mov    0x10(%ebp),%eax
f010d689:	8b 00                	mov    (%eax),%eax
f010d68b:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d68e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010d695:	e9 ca 00 00 00       	jmp    f010d764 <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010d69a:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d69d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d6a0:	01 d0                	add    %edx,%eax
f010d6a2:	89 c2                	mov    %eax,%edx
f010d6a4:	c1 ea 1f             	shr    $0x1f,%edx
f010d6a7:	01 d0                	add    %edx,%eax
f010d6a9:	d1 f8                	sar    %eax
f010d6ab:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010d6ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d6b1:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010d6b4:	eb 03                	jmp    f010d6b9 <stab_binsearch+0x41>
			m--;
f010d6b6:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010d6b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d6bc:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d6bf:	7c 1e                	jl     f010d6df <stab_binsearch+0x67>
f010d6c1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d6c4:	89 d0                	mov    %edx,%eax
f010d6c6:	01 c0                	add    %eax,%eax
f010d6c8:	01 d0                	add    %edx,%eax
f010d6ca:	c1 e0 02             	shl    $0x2,%eax
f010d6cd:	89 c2                	mov    %eax,%edx
f010d6cf:	8b 45 08             	mov    0x8(%ebp),%eax
f010d6d2:	01 d0                	add    %edx,%eax
f010d6d4:	8a 40 04             	mov    0x4(%eax),%al
f010d6d7:	0f b6 c0             	movzbl %al,%eax
f010d6da:	3b 45 14             	cmp    0x14(%ebp),%eax
f010d6dd:	75 d7                	jne    f010d6b6 <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010d6df:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d6e2:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d6e5:	7d 09                	jge    f010d6f0 <stab_binsearch+0x78>
			l = true_m + 1;
f010d6e7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d6ea:	40                   	inc    %eax
f010d6eb:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010d6ee:	eb 74                	jmp    f010d764 <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010d6f0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010d6f7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d6fa:	89 d0                	mov    %edx,%eax
f010d6fc:	01 c0                	add    %eax,%eax
f010d6fe:	01 d0                	add    %edx,%eax
f010d700:	c1 e0 02             	shl    $0x2,%eax
f010d703:	89 c2                	mov    %eax,%edx
f010d705:	8b 45 08             	mov    0x8(%ebp),%eax
f010d708:	01 d0                	add    %edx,%eax
f010d70a:	8b 40 08             	mov    0x8(%eax),%eax
f010d70d:	3b 45 18             	cmp    0x18(%ebp),%eax
f010d710:	73 11                	jae    f010d723 <stab_binsearch+0xab>
			*region_left = m;
f010d712:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d715:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d718:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010d71a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d71d:	40                   	inc    %eax
f010d71e:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d721:	eb 41                	jmp    f010d764 <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010d723:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d726:	89 d0                	mov    %edx,%eax
f010d728:	01 c0                	add    %eax,%eax
f010d72a:	01 d0                	add    %edx,%eax
f010d72c:	c1 e0 02             	shl    $0x2,%eax
f010d72f:	89 c2                	mov    %eax,%edx
f010d731:	8b 45 08             	mov    0x8(%ebp),%eax
f010d734:	01 d0                	add    %edx,%eax
f010d736:	8b 40 08             	mov    0x8(%eax),%eax
f010d739:	3b 45 18             	cmp    0x18(%ebp),%eax
f010d73c:	76 14                	jbe    f010d752 <stab_binsearch+0xda>
			*region_right = m - 1;
f010d73e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d741:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d744:	8b 45 10             	mov    0x10(%ebp),%eax
f010d747:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010d749:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d74c:	48                   	dec    %eax
f010d74d:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d750:	eb 12                	jmp    f010d764 <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010d752:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d755:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d758:	89 10                	mov    %edx,(%eax)
			l = m;
f010d75a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d75d:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010d760:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010d764:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d767:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010d76a:	0f 8e 2a ff ff ff    	jle    f010d69a <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010d770:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d774:	75 0f                	jne    f010d785 <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010d776:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d779:	8b 00                	mov    (%eax),%eax
f010d77b:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d77e:	8b 45 10             	mov    0x10(%ebp),%eax
f010d781:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010d783:	eb 3d                	jmp    f010d7c2 <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d785:	8b 45 10             	mov    0x10(%ebp),%eax
f010d788:	8b 00                	mov    (%eax),%eax
f010d78a:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d78d:	eb 03                	jmp    f010d792 <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010d78f:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010d792:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d795:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d797:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d79a:	7d 1e                	jge    f010d7ba <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010d79c:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d79f:	89 d0                	mov    %edx,%eax
f010d7a1:	01 c0                	add    %eax,%eax
f010d7a3:	01 d0                	add    %edx,%eax
f010d7a5:	c1 e0 02             	shl    $0x2,%eax
f010d7a8:	89 c2                	mov    %eax,%edx
f010d7aa:	8b 45 08             	mov    0x8(%ebp),%eax
f010d7ad:	01 d0                	add    %edx,%eax
f010d7af:	8a 40 04             	mov    0x4(%eax),%al
f010d7b2:	0f b6 c0             	movzbl %al,%eax
f010d7b5:	3b 45 14             	cmp    0x14(%ebp),%eax
f010d7b8:	75 d5                	jne    f010d78f <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010d7ba:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d7bd:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d7c0:	89 10                	mov    %edx,(%eax)
	}
}
f010d7c2:	90                   	nop
f010d7c3:	c9                   	leave  
f010d7c4:	c3                   	ret    

f010d7c5 <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010d7c5:	55                   	push   %ebp
f010d7c6:	89 e5                	mov    %esp,%ebp
f010d7c8:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010d7cb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d7ce:	c7 00 20 74 13 f0    	movl   $0xf0137420,(%eax)
	info->eip_line = 0;
f010d7d4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d7d7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010d7de:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d7e1:	c7 40 08 20 74 13 f0 	movl   $0xf0137420,0x8(%eax)
	info->eip_fn_namelen = 9;
f010d7e8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d7eb:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010d7f2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d7f5:	8b 55 08             	mov    0x8(%ebp),%edx
f010d7f8:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010d7fb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d7fe:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010d805:	8b 45 08             	mov    0x8(%ebp),%eax
f010d808:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010d80d:	76 1e                	jbe    f010d82d <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010d80f:	c7 45 f4 90 d0 13 f0 	movl   $0xf013d090,-0xc(%ebp)
		stab_end = __STAB_END__;
f010d816:	c7 45 f0 bc c1 17 f0 	movl   $0xf017c1bc,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010d81d:	c7 45 ec bd c1 17 f0 	movl   $0xf017c1bd,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010d824:	c7 45 e8 ae 8c 18 f0 	movl   $0xf0188cae,-0x18(%ebp)
f010d82b:	eb 2a                	jmp    f010d857 <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010d82d:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010d834:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d837:	8b 00                	mov    (%eax),%eax
f010d839:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010d83c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d83f:	8b 40 04             	mov    0x4(%eax),%eax
f010d842:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010d845:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d848:	8b 40 08             	mov    0x8(%eax),%eax
f010d84b:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010d84e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d851:	8b 40 0c             	mov    0xc(%eax),%eax
f010d854:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010d857:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d85a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010d85d:	76 0a                	jbe    f010d869 <debuginfo_eip+0xa4>
f010d85f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d862:	48                   	dec    %eax
f010d863:	8a 00                	mov    (%eax),%al
f010d865:	84 c0                	test   %al,%al
f010d867:	74 0a                	je     f010d873 <debuginfo_eip+0xae>
		return -1;
f010d869:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010d86e:	e9 01 02 00 00       	jmp    f010da74 <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010d873:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010d87a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d87d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d880:	29 c2                	sub    %eax,%edx
f010d882:	89 d0                	mov    %edx,%eax
f010d884:	c1 f8 02             	sar    $0x2,%eax
f010d887:	89 c2                	mov    %eax,%edx
f010d889:	89 d0                	mov    %edx,%eax
f010d88b:	c1 e0 02             	shl    $0x2,%eax
f010d88e:	01 d0                	add    %edx,%eax
f010d890:	c1 e0 02             	shl    $0x2,%eax
f010d893:	01 d0                	add    %edx,%eax
f010d895:	c1 e0 02             	shl    $0x2,%eax
f010d898:	01 d0                	add    %edx,%eax
f010d89a:	89 c1                	mov    %eax,%ecx
f010d89c:	c1 e1 08             	shl    $0x8,%ecx
f010d89f:	01 c8                	add    %ecx,%eax
f010d8a1:	89 c1                	mov    %eax,%ecx
f010d8a3:	c1 e1 10             	shl    $0x10,%ecx
f010d8a6:	01 c8                	add    %ecx,%eax
f010d8a8:	01 c0                	add    %eax,%eax
f010d8aa:	01 d0                	add    %edx,%eax
f010d8ac:	48                   	dec    %eax
f010d8ad:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010d8b0:	ff 75 08             	pushl  0x8(%ebp)
f010d8b3:	6a 64                	push   $0x64
f010d8b5:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010d8b8:	50                   	push   %eax
f010d8b9:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010d8bc:	50                   	push   %eax
f010d8bd:	ff 75 f4             	pushl  -0xc(%ebp)
f010d8c0:	e8 b3 fd ff ff       	call   f010d678 <stab_binsearch>
f010d8c5:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010d8c8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d8cb:	85 c0                	test   %eax,%eax
f010d8cd:	75 0a                	jne    f010d8d9 <debuginfo_eip+0x114>
		return -1;
f010d8cf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010d8d4:	e9 9b 01 00 00       	jmp    f010da74 <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010d8d9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d8dc:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010d8df:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d8e2:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010d8e5:	ff 75 08             	pushl  0x8(%ebp)
f010d8e8:	6a 24                	push   $0x24
f010d8ea:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010d8ed:	50                   	push   %eax
f010d8ee:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010d8f1:	50                   	push   %eax
f010d8f2:	ff 75 f4             	pushl  -0xc(%ebp)
f010d8f5:	e8 7e fd ff ff       	call   f010d678 <stab_binsearch>
f010d8fa:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010d8fd:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010d900:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d903:	39 c2                	cmp    %eax,%edx
f010d905:	0f 8f 86 00 00 00    	jg     f010d991 <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010d90b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d90e:	89 c2                	mov    %eax,%edx
f010d910:	89 d0                	mov    %edx,%eax
f010d912:	01 c0                	add    %eax,%eax
f010d914:	01 d0                	add    %edx,%eax
f010d916:	c1 e0 02             	shl    $0x2,%eax
f010d919:	89 c2                	mov    %eax,%edx
f010d91b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d91e:	01 d0                	add    %edx,%eax
f010d920:	8b 00                	mov    (%eax),%eax
f010d922:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010d925:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d928:	29 d1                	sub    %edx,%ecx
f010d92a:	89 ca                	mov    %ecx,%edx
f010d92c:	39 d0                	cmp    %edx,%eax
f010d92e:	73 22                	jae    f010d952 <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010d930:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d933:	89 c2                	mov    %eax,%edx
f010d935:	89 d0                	mov    %edx,%eax
f010d937:	01 c0                	add    %eax,%eax
f010d939:	01 d0                	add    %edx,%eax
f010d93b:	c1 e0 02             	shl    $0x2,%eax
f010d93e:	89 c2                	mov    %eax,%edx
f010d940:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d943:	01 d0                	add    %edx,%eax
f010d945:	8b 10                	mov    (%eax),%edx
f010d947:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d94a:	01 c2                	add    %eax,%edx
f010d94c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d94f:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010d952:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d955:	89 c2                	mov    %eax,%edx
f010d957:	89 d0                	mov    %edx,%eax
f010d959:	01 c0                	add    %eax,%eax
f010d95b:	01 d0                	add    %edx,%eax
f010d95d:	c1 e0 02             	shl    $0x2,%eax
f010d960:	89 c2                	mov    %eax,%edx
f010d962:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d965:	01 d0                	add    %edx,%eax
f010d967:	8b 50 08             	mov    0x8(%eax),%edx
f010d96a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d96d:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010d970:	8b 55 08             	mov    0x8(%ebp),%edx
f010d973:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d976:	8b 40 10             	mov    0x10(%eax),%eax
f010d979:	29 c2                	sub    %eax,%edx
f010d97b:	89 d0                	mov    %edx,%eax
f010d97d:	c1 f8 02             	sar    $0x2,%eax
f010d980:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010d983:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d986:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010d989:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d98c:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d98f:	eb 15                	jmp    f010d9a6 <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010d991:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d994:	8b 55 08             	mov    0x8(%ebp),%edx
f010d997:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010d99a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d99d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010d9a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d9a3:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010d9a6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d9a9:	8b 40 08             	mov    0x8(%eax),%eax
f010d9ac:	83 ec 08             	sub    $0x8,%esp
f010d9af:	6a 3a                	push   $0x3a
f010d9b1:	50                   	push   %eax
f010d9b2:	e8 95 34 02 00       	call   f0130e4c <strfind>
f010d9b7:	83 c4 10             	add    $0x10,%esp
f010d9ba:	89 c2                	mov    %eax,%edx
f010d9bc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d9bf:	8b 40 08             	mov    0x8(%eax),%eax
f010d9c2:	29 c2                	sub    %eax,%edx
f010d9c4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d9c7:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010d9ca:	eb 03                	jmp    f010d9cf <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010d9cc:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010d9cf:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d9d2:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010d9d5:	7c 4e                	jl     f010da25 <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010d9d7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d9da:	89 d0                	mov    %edx,%eax
f010d9dc:	01 c0                	add    %eax,%eax
f010d9de:	01 d0                	add    %edx,%eax
f010d9e0:	c1 e0 02             	shl    $0x2,%eax
f010d9e3:	89 c2                	mov    %eax,%edx
f010d9e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d9e8:	01 d0                	add    %edx,%eax
f010d9ea:	8a 40 04             	mov    0x4(%eax),%al
f010d9ed:	3c 84                	cmp    $0x84,%al
f010d9ef:	74 34                	je     f010da25 <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010d9f1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d9f4:	89 d0                	mov    %edx,%eax
f010d9f6:	01 c0                	add    %eax,%eax
f010d9f8:	01 d0                	add    %edx,%eax
f010d9fa:	c1 e0 02             	shl    $0x2,%eax
f010d9fd:	89 c2                	mov    %eax,%edx
f010d9ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010da02:	01 d0                	add    %edx,%eax
f010da04:	8a 40 04             	mov    0x4(%eax),%al
f010da07:	3c 64                	cmp    $0x64,%al
f010da09:	75 c1                	jne    f010d9cc <debuginfo_eip+0x207>
f010da0b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010da0e:	89 d0                	mov    %edx,%eax
f010da10:	01 c0                	add    %eax,%eax
f010da12:	01 d0                	add    %edx,%eax
f010da14:	c1 e0 02             	shl    $0x2,%eax
f010da17:	89 c2                	mov    %eax,%edx
f010da19:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010da1c:	01 d0                	add    %edx,%eax
f010da1e:	8b 40 08             	mov    0x8(%eax),%eax
f010da21:	85 c0                	test   %eax,%eax
f010da23:	74 a7                	je     f010d9cc <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010da25:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010da28:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010da2b:	7c 42                	jl     f010da6f <debuginfo_eip+0x2aa>
f010da2d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010da30:	89 d0                	mov    %edx,%eax
f010da32:	01 c0                	add    %eax,%eax
f010da34:	01 d0                	add    %edx,%eax
f010da36:	c1 e0 02             	shl    $0x2,%eax
f010da39:	89 c2                	mov    %eax,%edx
f010da3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010da3e:	01 d0                	add    %edx,%eax
f010da40:	8b 00                	mov    (%eax),%eax
f010da42:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010da45:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010da48:	29 d1                	sub    %edx,%ecx
f010da4a:	89 ca                	mov    %ecx,%edx
f010da4c:	39 d0                	cmp    %edx,%eax
f010da4e:	73 1f                	jae    f010da6f <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010da50:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010da53:	89 d0                	mov    %edx,%eax
f010da55:	01 c0                	add    %eax,%eax
f010da57:	01 d0                	add    %edx,%eax
f010da59:	c1 e0 02             	shl    $0x2,%eax
f010da5c:	89 c2                	mov    %eax,%edx
f010da5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010da61:	01 d0                	add    %edx,%eax
f010da63:	8b 10                	mov    (%eax),%edx
f010da65:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010da68:	01 c2                	add    %eax,%edx
f010da6a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da6d:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010da6f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010da74:	c9                   	leave  
f010da75:	c3                   	ret    

f010da76 <setPageReplacmentAlgorithmLRU>:
//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f010da76:	55                   	push   %ebp
f010da77:	89 e5                	mov    %esp,%ebp
f010da79:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010da7c:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010da80:	74 1c                	je     f010da9e <setPageReplacmentAlgorithmLRU+0x28>
f010da82:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010da86:	74 16                	je     f010da9e <setPageReplacmentAlgorithmLRU+0x28>
f010da88:	68 2c 74 13 f0       	push   $0xf013742c
f010da8d:	68 76 74 13 f0       	push   $0xf0137476
f010da92:	6a 18                	push   $0x18
f010da94:	68 8b 74 13 f0       	push   $0xf013748b
f010da99:	e8 5d 27 ff ff       	call   f01001fb <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f010da9e:	8b 45 08             	mov    0x8(%ebp),%eax
f010daa1:	a3 88 7b 65 f0       	mov    %eax,0xf0657b88
}
f010daa6:	90                   	nop
f010daa7:	c9                   	leave  
f010daa8:	c3                   	ret    

f010daa9 <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010daa9:	55                   	push   %ebp
f010daaa:	89 e5                	mov    %esp,%ebp
f010daac:	c7 05 88 7b 65 f0 03 	movl   $0x3,0xf0657b88
f010dab3:	00 00 00 
f010dab6:	90                   	nop
f010dab7:	5d                   	pop    %ebp
f010dab8:	c3                   	ret    

f010dab9 <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010dab9:	55                   	push   %ebp
f010daba:	89 e5                	mov    %esp,%ebp
f010dabc:	c7 05 88 7b 65 f0 04 	movl   $0x4,0xf0657b88
f010dac3:	00 00 00 
f010dac6:	90                   	nop
f010dac7:	5d                   	pop    %ebp
f010dac8:	c3                   	ret    

f010dac9 <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010dac9:	55                   	push   %ebp
f010daca:	89 e5                	mov    %esp,%ebp
f010dacc:	c7 05 88 7b 65 f0 05 	movl   $0x5,0xf0657b88
f010dad3:	00 00 00 
f010dad6:	90                   	nop
f010dad7:	5d                   	pop    %ebp
f010dad8:	c3                   	ret    

f010dad9 <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
f010dad9:	55                   	push   %ebp
f010dada:	89 e5                	mov    %esp,%ebp
f010dadc:	c7 05 88 7b 65 f0 07 	movl   $0x7,0xf0657b88
f010dae3:	00 00 00 
f010dae6:	90                   	nop
f010dae7:	5d                   	pop    %ebp
f010dae8:	c3                   	ret    

f010dae9 <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}
f010dae9:	55                   	push   %ebp
f010daea:	89 e5                	mov    %esp,%ebp
f010daec:	c7 05 88 7b 65 f0 06 	movl   $0x6,0xf0657b88
f010daf3:	00 00 00 
f010daf6:	8b 45 08             	mov    0x8(%ebp),%eax
f010daf9:	a3 e4 7a 65 f0       	mov    %eax,0xf0657ae4
f010dafe:	90                   	nop
f010daff:	5d                   	pop    %ebp
f010db00:	c3                   	ret    

f010db01 <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
f010db01:	55                   	push   %ebp
f010db02:	89 e5                	mov    %esp,%ebp
f010db04:	8b 15 88 7b 65 f0    	mov    0xf0657b88,%edx
f010db0a:	8b 45 08             	mov    0x8(%ebp),%eax
f010db0d:	39 c2                	cmp    %eax,%edx
f010db0f:	0f 94 c0             	sete   %al
f010db12:	0f b6 c0             	movzbl %al,%eax
f010db15:	5d                   	pop    %ebp
f010db16:	c3                   	ret    

f010db17 <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010db17:	55                   	push   %ebp
f010db18:	89 e5                	mov    %esp,%ebp
f010db1a:	a1 88 7b 65 f0       	mov    0xf0657b88,%eax
f010db1f:	83 f8 03             	cmp    $0x3,%eax
f010db22:	75 07                	jne    f010db2b <isPageReplacmentAlgorithmCLOCK+0x14>
f010db24:	b8 01 00 00 00       	mov    $0x1,%eax
f010db29:	eb 05                	jmp    f010db30 <isPageReplacmentAlgorithmCLOCK+0x19>
f010db2b:	b8 00 00 00 00       	mov    $0x0,%eax
f010db30:	5d                   	pop    %ebp
f010db31:	c3                   	ret    

f010db32 <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010db32:	55                   	push   %ebp
f010db33:	89 e5                	mov    %esp,%ebp
f010db35:	a1 88 7b 65 f0       	mov    0xf0657b88,%eax
f010db3a:	83 f8 04             	cmp    $0x4,%eax
f010db3d:	75 07                	jne    f010db46 <isPageReplacmentAlgorithmFIFO+0x14>
f010db3f:	b8 01 00 00 00       	mov    $0x1,%eax
f010db44:	eb 05                	jmp    f010db4b <isPageReplacmentAlgorithmFIFO+0x19>
f010db46:	b8 00 00 00 00       	mov    $0x0,%eax
f010db4b:	5d                   	pop    %ebp
f010db4c:	c3                   	ret    

f010db4d <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010db4d:	55                   	push   %ebp
f010db4e:	89 e5                	mov    %esp,%ebp
f010db50:	a1 88 7b 65 f0       	mov    0xf0657b88,%eax
f010db55:	83 f8 05             	cmp    $0x5,%eax
f010db58:	75 07                	jne    f010db61 <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010db5a:	b8 01 00 00 00       	mov    $0x1,%eax
f010db5f:	eb 05                	jmp    f010db66 <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010db61:	b8 00 00 00 00       	mov    $0x0,%eax
f010db66:	5d                   	pop    %ebp
f010db67:	c3                   	ret    

f010db68 <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
f010db68:	55                   	push   %ebp
f010db69:	89 e5                	mov    %esp,%ebp
f010db6b:	a1 88 7b 65 f0       	mov    0xf0657b88,%eax
f010db70:	83 f8 07             	cmp    $0x7,%eax
f010db73:	75 07                	jne    f010db7c <isPageReplacmentAlgorithmDynamicLocal+0x14>
f010db75:	b8 01 00 00 00       	mov    $0x1,%eax
f010db7a:	eb 05                	jmp    f010db81 <isPageReplacmentAlgorithmDynamicLocal+0x19>
f010db7c:	b8 00 00 00 00       	mov    $0x0,%eax
f010db81:	5d                   	pop    %ebp
f010db82:	c3                   	ret    

f010db83 <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}
f010db83:	55                   	push   %ebp
f010db84:	89 e5                	mov    %esp,%ebp
f010db86:	a1 88 7b 65 f0       	mov    0xf0657b88,%eax
f010db8b:	83 f8 06             	cmp    $0x6,%eax
f010db8e:	75 07                	jne    f010db97 <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
f010db90:	b8 01 00 00 00       	mov    $0x1,%eax
f010db95:	eb 05                	jmp    f010db9c <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
f010db97:	b8 00 00 00 00       	mov    $0x0,%eax
f010db9c:	5d                   	pop    %ebp
f010db9d:	c3                   	ret    

f010db9e <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f010db9e:	55                   	push   %ebp
f010db9f:	89 e5                	mov    %esp,%ebp
f010dba1:	8b 45 08             	mov    0x8(%ebp),%eax
f010dba4:	a3 50 7b 65 f0       	mov    %eax,0xf0657b50
f010dba9:	90                   	nop
f010dbaa:	5d                   	pop    %ebp
f010dbab:	c3                   	ret    

f010dbac <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010dbac:	55                   	push   %ebp
f010dbad:	89 e5                	mov    %esp,%ebp
f010dbaf:	a1 50 7b 65 f0       	mov    0xf0657b50,%eax
f010dbb4:	5d                   	pop    %ebp
f010dbb5:	c3                   	ret    

f010dbb6 <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f010dbb6:	55                   	push   %ebp
f010dbb7:	89 e5                	mov    %esp,%ebp
f010dbb9:	8b 45 08             	mov    0x8(%ebp),%eax
f010dbbc:	a3 90 7b 65 f0       	mov    %eax,0xf0657b90
f010dbc1:	90                   	nop
f010dbc2:	5d                   	pop    %ebp
f010dbc3:	c3                   	ret    

f010dbc4 <isBufferingEnabled>:
uint8 isBufferingEnabled(){  return _EnableBuffering ; }
f010dbc4:	55                   	push   %ebp
f010dbc5:	89 e5                	mov    %esp,%ebp
f010dbc7:	a1 90 7b 65 f0       	mov    0xf0657b90,%eax
f010dbcc:	5d                   	pop    %ebp
f010dbcd:	c3                   	ret    

f010dbce <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f010dbce:	55                   	push   %ebp
f010dbcf:	89 e5                	mov    %esp,%ebp
f010dbd1:	8b 45 08             	mov    0x8(%ebp),%eax
f010dbd4:	a3 b0 7b 65 f0       	mov    %eax,0xf0657bb0
f010dbd9:	90                   	nop
f010dbda:	5d                   	pop    %ebp
f010dbdb:	c3                   	ret    

f010dbdc <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010dbdc:	55                   	push   %ebp
f010dbdd:	89 e5                	mov    %esp,%ebp
f010dbdf:	a1 b0 7b 65 f0       	mov    0xf0657bb0,%eax
f010dbe4:	5d                   	pop    %ebp
f010dbe5:	c3                   	ret    

f010dbe6 <table_fault_handler>:
// FAULT HANDLERS
//===============================

//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010dbe6:	55                   	push   %ebp
f010dbe7:	89 e5                	mov    %esp,%ebp
f010dbe9:	83 ec 18             	sub    $0x18,%esp
	//panic("table_fault_handler() is not implemented yet...!!");
	//Check if it's a stack page
	uint32* ptr_table;
#if USE_KHEAP
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
f010dbec:	8b 45 08             	mov    0x8(%ebp),%eax
f010dbef:	8b 40 5c             	mov    0x5c(%eax),%eax
f010dbf2:	83 ec 08             	sub    $0x8,%esp
f010dbf5:	ff 75 0c             	pushl  0xc(%ebp)
f010dbf8:	50                   	push   %eax
f010dbf9:	e8 32 8f ff ff       	call   f0106b30 <create_page_table>
f010dbfe:	83 c4 10             	add    $0x10,%esp
f010dc01:	89 45 f4             	mov    %eax,-0xc(%ebp)
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
	}
#endif
}
f010dc04:	90                   	nop
f010dc05:	c9                   	leave  
f010dc06:	c3                   	ret    

f010dc07 <page_fault_handler>:

//Handle the page fault

void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010dc07:	55                   	push   %ebp
f010dc08:	89 e5                	mov    %esp,%ebp
f010dc0a:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [FAULT HANDLER] page_fault_handler
	// Write your code here, remove the panic and write your code
	panic("page_fault_handler() is not implemented yet...!!");
f010dc0d:	83 ec 04             	sub    $0x4,%esp
f010dc10:	68 a8 74 13 f0       	push   $0xf01374a8
f010dc15:	6a 50                	push   $0x50
f010dc17:	68 8b 74 13 f0       	push   $0xf013748b
f010dc1c:	e8 da 25 ff ff       	call   f01001fb <_panic>

f010dc21 <__page_fault_handler_with_buffering>:

	//refer to the project presentation and documentation for details
}
void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010dc21:	55                   	push   %ebp
f010dc22:	89 e5                	mov    %esp,%ebp
f010dc24:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("__page_fault_handler_with_buffering() is not implemented yet...!!");
f010dc27:	83 ec 04             	sub    $0x4,%esp
f010dc2a:	68 dc 74 13 f0       	push   $0xf01374dc
f010dc2f:	6a 57                	push   $0x57
f010dc31:	68 8b 74 13 f0       	push   $0xf013748b
f010dc36:	e8 c0 25 ff ff       	call   f01001fb <_panic>

f010dc3b <create_semaphores_array>:
// [1] Create "semaphores" array:
//===============================
//Dynamically allocate the "semaphores" array
//initialize the "semaphores" array by 0's and empty = 1
void create_semaphores_array(uint32 numOfSemaphores)
{
f010dc3b:	55                   	push   %ebp
f010dc3c:	89 e5                	mov    %esp,%ebp
f010dc3e:	83 ec 18             	sub    $0x18,%esp
#if USE_KHEAP
	MAX_SEMAPHORES = numOfSemaphores ;
f010dc41:	8b 45 08             	mov    0x8(%ebp),%eax
f010dc44:	a3 b4 7a 65 f0       	mov    %eax,0xf0657ab4
	semaphores = (struct Semaphore*) kmalloc(numOfSemaphores*sizeof(struct Semaphore));
f010dc49:	8b 55 08             	mov    0x8(%ebp),%edx
f010dc4c:	89 d0                	mov    %edx,%eax
f010dc4e:	c1 e0 02             	shl    $0x2,%eax
f010dc51:	01 d0                	add    %edx,%eax
f010dc53:	01 c0                	add    %eax,%eax
f010dc55:	01 d0                	add    %edx,%eax
f010dc57:	01 c0                	add    %eax,%eax
f010dc59:	01 d0                	add    %edx,%eax
f010dc5b:	c1 e0 02             	shl    $0x2,%eax
f010dc5e:	83 ec 0c             	sub    $0xc,%esp
f010dc61:	50                   	push   %eax
f010dc62:	e8 97 9b ff ff       	call   f01077fe <kmalloc>
f010dc67:	83 c4 10             	add    $0x10,%esp
f010dc6a:	a3 0c 7b 65 f0       	mov    %eax,0xf0657b0c
	if (semaphores == NULL)
f010dc6f:	a1 0c 7b 65 f0       	mov    0xf0657b0c,%eax
f010dc74:	85 c0                	test   %eax,%eax
f010dc76:	75 14                	jne    f010dc8c <create_semaphores_array+0x51>
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
f010dc78:	83 ec 04             	sub    $0x4,%esp
f010dc7b:	68 20 75 13 f0       	push   $0xf0137520
f010dc80:	6a 1e                	push   $0x1e
f010dc82:	68 60 75 13 f0       	push   $0xf0137560
f010dc87:	e8 6f 25 ff ff       	call   f01001fb <_panic>
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010dc8c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010dc93:	e9 bd 00 00 00       	jmp    f010dd55 <create_semaphores_array+0x11a>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
f010dc98:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010dc9e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dca1:	89 d0                	mov    %edx,%eax
f010dca3:	c1 e0 02             	shl    $0x2,%eax
f010dca6:	01 d0                	add    %edx,%eax
f010dca8:	01 c0                	add    %eax,%eax
f010dcaa:	01 d0                	add    %edx,%eax
f010dcac:	01 c0                	add    %eax,%eax
f010dcae:	01 d0                	add    %edx,%eax
f010dcb0:	c1 e0 02             	shl    $0x2,%eax
f010dcb3:	01 c8                	add    %ecx,%eax
f010dcb5:	83 ec 04             	sub    $0x4,%esp
f010dcb8:	6a 5c                	push   $0x5c
f010dcba:	6a 00                	push   $0x0
f010dcbc:	50                   	push   %eax
f010dcbd:	e8 b6 31 02 00       	call   f0130e78 <memset>
f010dcc2:	83 c4 10             	add    $0x10,%esp
		semaphores[i].empty = 1;
f010dcc5:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010dccb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dcce:	89 d0                	mov    %edx,%eax
f010dcd0:	c1 e0 02             	shl    $0x2,%eax
f010dcd3:	01 d0                	add    %edx,%eax
f010dcd5:	01 c0                	add    %eax,%eax
f010dcd7:	01 d0                	add    %edx,%eax
f010dcd9:	01 c0                	add    %eax,%eax
f010dcdb:	01 d0                	add    %edx,%eax
f010dcdd:	c1 e0 02             	shl    $0x2,%eax
f010dce0:	01 c8                	add    %ecx,%eax
f010dce2:	c6 40 58 01          	movb   $0x1,0x58(%eax)
		LIST_INIT(&(semaphores[i].env_queue));
f010dce6:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010dcec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dcef:	89 d0                	mov    %edx,%eax
f010dcf1:	c1 e0 02             	shl    $0x2,%eax
f010dcf4:	01 d0                	add    %edx,%eax
f010dcf6:	01 c0                	add    %eax,%eax
f010dcf8:	01 d0                	add    %edx,%eax
f010dcfa:	01 c0                	add    %eax,%eax
f010dcfc:	01 d0                	add    %edx,%eax
f010dcfe:	c1 e0 02             	shl    $0x2,%eax
f010dd01:	01 c8                	add    %ecx,%eax
f010dd03:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010dd0a:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010dd10:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dd13:	89 d0                	mov    %edx,%eax
f010dd15:	c1 e0 02             	shl    $0x2,%eax
f010dd18:	01 d0                	add    %edx,%eax
f010dd1a:	01 c0                	add    %eax,%eax
f010dd1c:	01 d0                	add    %edx,%eax
f010dd1e:	01 c0                	add    %eax,%eax
f010dd20:	01 d0                	add    %edx,%eax
f010dd22:	c1 e0 02             	shl    $0x2,%eax
f010dd25:	01 c8                	add    %ecx,%eax
f010dd27:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010dd2e:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010dd34:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dd37:	89 d0                	mov    %edx,%eax
f010dd39:	c1 e0 02             	shl    $0x2,%eax
f010dd3c:	01 d0                	add    %edx,%eax
f010dd3e:	01 c0                	add    %eax,%eax
f010dd40:	01 d0                	add    %edx,%eax
f010dd42:	01 c0                	add    %eax,%eax
f010dd44:	01 d0                	add    %edx,%eax
f010dd46:	c1 e0 02             	shl    $0x2,%eax
f010dd49:	01 c8                	add    %ecx,%eax
f010dd4b:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010dd52:	ff 45 f4             	incl   -0xc(%ebp)
f010dd55:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dd58:	a1 b4 7a 65 f0       	mov    0xf0657ab4,%eax
f010dd5d:	39 c2                	cmp    %eax,%edx
f010dd5f:	0f 82 33 ff ff ff    	jb     f010dc98 <create_semaphores_array+0x5d>
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
		semaphores[i].empty = 1;
		LIST_INIT(&(semaphores[i].env_queue));
	}

}
f010dd65:	90                   	nop
f010dd66:	c9                   	leave  
f010dd67:	c3                   	ret    

f010dd68 <allocate_semaphore_object>:
//	a) if succeed:
//		1. allocatedSemaphore (pointer to struct Semaphore) passed by reference
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
f010dd68:	55                   	push   %ebp
f010dd69:	89 e5                	mov    %esp,%ebp
f010dd6b:	83 ec 18             	sub    $0x18,%esp
	int32 semaphoreObjectID = -1 ;
f010dd6e:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010dd75:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010dd7c:	eb 2f                	jmp    f010ddad <allocate_semaphore_object+0x45>
	{
		if (semaphores[i].empty)
f010dd7e:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010dd84:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dd87:	89 d0                	mov    %edx,%eax
f010dd89:	c1 e0 02             	shl    $0x2,%eax
f010dd8c:	01 d0                	add    %edx,%eax
f010dd8e:	01 c0                	add    %eax,%eax
f010dd90:	01 d0                	add    %edx,%eax
f010dd92:	01 c0                	add    %eax,%eax
f010dd94:	01 d0                	add    %edx,%eax
f010dd96:	c1 e0 02             	shl    $0x2,%eax
f010dd99:	01 c8                	add    %ecx,%eax
f010dd9b:	8a 40 58             	mov    0x58(%eax),%al
f010dd9e:	84 c0                	test   %al,%al
f010dda0:	74 08                	je     f010ddaa <allocate_semaphore_object+0x42>
		{
			semaphoreObjectID = i;
f010dda2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dda5:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f010dda8:	eb 0f                	jmp    f010ddb9 <allocate_semaphore_object+0x51>
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
	int32 semaphoreObjectID = -1 ;
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010ddaa:	ff 45 f0             	incl   -0x10(%ebp)
f010ddad:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ddb0:	a1 b4 7a 65 f0       	mov    0xf0657ab4,%eax
f010ddb5:	39 c2                	cmp    %eax,%edx
f010ddb7:	72 c5                	jb     f010dd7e <allocate_semaphore_object+0x16>
			semaphoreObjectID = i;
			break;
		}
	}

	if (semaphoreObjectID == -1)
f010ddb9:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010ddbd:	75 4d                	jne    f010de0c <allocate_semaphore_object+0xa4>
	{
		//try to double the size of the "semaphores" array
		#if USE_KHEAP
		{
			semaphores = (struct Semaphore*) krealloc(semaphores, 2*MAX_SEMAPHORES);
f010ddbf:	a1 b4 7a 65 f0       	mov    0xf0657ab4,%eax
f010ddc4:	01 c0                	add    %eax,%eax
f010ddc6:	89 c2                	mov    %eax,%edx
f010ddc8:	a1 0c 7b 65 f0       	mov    0xf0657b0c,%eax
f010ddcd:	83 ec 08             	sub    $0x8,%esp
f010ddd0:	52                   	push   %edx
f010ddd1:	50                   	push   %eax
f010ddd2:	e8 de 9c ff ff       	call   f0107ab5 <krealloc>
f010ddd7:	83 c4 10             	add    $0x10,%esp
f010ddda:	a3 0c 7b 65 f0       	mov    %eax,0xf0657b0c
			if (semaphores == NULL)
f010dddf:	a1 0c 7b 65 f0       	mov    0xf0657b0c,%eax
f010dde4:	85 c0                	test   %eax,%eax
f010dde6:	75 10                	jne    f010ddf8 <allocate_semaphore_object+0x90>
			{
				*allocatedObject = NULL;
f010dde8:	8b 45 08             	mov    0x8(%ebp),%eax
f010ddeb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				return E_NO_SEMAPHORE;
f010ddf1:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
f010ddf6:	eb 5b                	jmp    f010de53 <allocate_semaphore_object+0xeb>
			}
			else
			{
				semaphoreObjectID = MAX_SEMAPHORES;
f010ddf8:	a1 b4 7a 65 f0       	mov    0xf0657ab4,%eax
f010ddfd:	89 45 f4             	mov    %eax,-0xc(%ebp)
				MAX_SEMAPHORES *= 2;
f010de00:	a1 b4 7a 65 f0       	mov    0xf0657ab4,%eax
f010de05:	01 c0                	add    %eax,%eax
f010de07:	a3 b4 7a 65 f0       	mov    %eax,0xf0657ab4
			return E_NO_SEMAPHORE;
		}
		#endif
	}

	*allocatedObject = &(semaphores[semaphoreObjectID]);
f010de0c:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010de12:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010de15:	89 d0                	mov    %edx,%eax
f010de17:	c1 e0 02             	shl    $0x2,%eax
f010de1a:	01 d0                	add    %edx,%eax
f010de1c:	01 c0                	add    %eax,%eax
f010de1e:	01 d0                	add    %edx,%eax
f010de20:	01 c0                	add    %eax,%eax
f010de22:	01 d0                	add    %edx,%eax
f010de24:	c1 e0 02             	shl    $0x2,%eax
f010de27:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010de2a:	8b 45 08             	mov    0x8(%ebp),%eax
f010de2d:	89 10                	mov    %edx,(%eax)
	semaphores[semaphoreObjectID].empty = 0;
f010de2f:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010de35:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010de38:	89 d0                	mov    %edx,%eax
f010de3a:	c1 e0 02             	shl    $0x2,%eax
f010de3d:	01 d0                	add    %edx,%eax
f010de3f:	01 c0                	add    %eax,%eax
f010de41:	01 d0                	add    %edx,%eax
f010de43:	01 c0                	add    %eax,%eax
f010de45:	01 d0                	add    %edx,%eax
f010de47:	c1 e0 02             	shl    $0x2,%eax
f010de4a:	01 c8                	add    %ecx,%eax
f010de4c:	c6 40 58 00          	movb   $0x0,0x58(%eax)

	return semaphoreObjectID;
f010de50:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010de53:	c9                   	leave  
f010de54:	c3                   	ret    

f010de55 <get_semaphore_object_ID>:
//Search for the given semaphore object in the "semaphores" array
//Return:
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
f010de55:	55                   	push   %ebp
f010de56:	89 e5                	mov    %esp,%ebp
f010de58:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010de5b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i < MAX_SEMAPHORES; ++i)
f010de62:	e9 84 00 00 00       	jmp    f010deeb <get_semaphore_object_ID+0x96>
	{
		if (semaphores[i].empty)
f010de67:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010de6d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010de70:	89 d0                	mov    %edx,%eax
f010de72:	c1 e0 02             	shl    $0x2,%eax
f010de75:	01 d0                	add    %edx,%eax
f010de77:	01 c0                	add    %eax,%eax
f010de79:	01 d0                	add    %edx,%eax
f010de7b:	01 c0                	add    %eax,%eax
f010de7d:	01 d0                	add    %edx,%eax
f010de7f:	c1 e0 02             	shl    $0x2,%eax
f010de82:	01 c8                	add    %ecx,%eax
f010de84:	8a 40 58             	mov    0x58(%eax),%al
f010de87:	84 c0                	test   %al,%al
f010de89:	75 5c                	jne    f010dee7 <get_semaphore_object_ID+0x92>
			continue;

		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
f010de8b:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010de91:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010de94:	89 d0                	mov    %edx,%eax
f010de96:	c1 e0 02             	shl    $0x2,%eax
f010de99:	01 d0                	add    %edx,%eax
f010de9b:	01 c0                	add    %eax,%eax
f010de9d:	01 d0                	add    %edx,%eax
f010de9f:	01 c0                	add    %eax,%eax
f010dea1:	01 d0                	add    %edx,%eax
f010dea3:	c1 e0 02             	shl    $0x2,%eax
f010dea6:	01 c8                	add    %ecx,%eax
f010dea8:	8b 00                	mov    (%eax),%eax
f010deaa:	3b 45 08             	cmp    0x8(%ebp),%eax
f010dead:	75 39                	jne    f010dee8 <get_semaphore_object_ID+0x93>
f010deaf:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010deb5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010deb8:	89 d0                	mov    %edx,%eax
f010deba:	c1 e0 02             	shl    $0x2,%eax
f010debd:	01 d0                	add    %edx,%eax
f010debf:	01 c0                	add    %eax,%eax
f010dec1:	01 d0                	add    %edx,%eax
f010dec3:	01 c0                	add    %eax,%eax
f010dec5:	01 d0                	add    %edx,%eax
f010dec7:	c1 e0 02             	shl    $0x2,%eax
f010deca:	01 c8                	add    %ecx,%eax
f010decc:	83 c0 04             	add    $0x4,%eax
f010decf:	83 ec 08             	sub    $0x8,%esp
f010ded2:	50                   	push   %eax
f010ded3:	ff 75 0c             	pushl  0xc(%ebp)
f010ded6:	e8 bb 2e 02 00       	call   f0130d96 <strcmp>
f010dedb:	83 c4 10             	add    $0x10,%esp
f010dede:	85 c0                	test   %eax,%eax
f010dee0:	75 06                	jne    f010dee8 <get_semaphore_object_ID+0x93>
		{
			return i;
f010dee2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dee5:	eb 19                	jmp    f010df00 <get_semaphore_object_ID+0xab>
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
	{
		if (semaphores[i].empty)
			continue;
f010dee7:	90                   	nop
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
f010dee8:	ff 45 f4             	incl   -0xc(%ebp)
f010deeb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010deee:	a1 b4 7a 65 f0       	mov    0xf0657ab4,%eax
f010def3:	39 c2                	cmp    %eax,%edx
f010def5:	0f 82 6c ff ff ff    	jb     f010de67 <get_semaphore_object_ID+0x12>
		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
		{
			return i;
		}
	}
	return E_SEMAPHORE_NOT_EXISTS;
f010defb:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
f010df00:	c9                   	leave  
f010df01:	c3                   	ret    

f010df02 <free_semaphore_object>:
//delete the semaphore with the given ID from the "semaphores" array
//Return:
//	a) 0 if succeed
//	b) E_SEMAPHORE_NOT_EXISTS if the semaphore is not exists
int free_semaphore_object(uint32 semaphoreObjectID)
{
f010df02:	55                   	push   %ebp
f010df03:	89 e5                	mov    %esp,%ebp
f010df05:	83 ec 08             	sub    $0x8,%esp
	if (semaphoreObjectID >= MAX_SEMAPHORES)
f010df08:	a1 b4 7a 65 f0       	mov    0xf0657ab4,%eax
f010df0d:	39 45 08             	cmp    %eax,0x8(%ebp)
f010df10:	72 0a                	jb     f010df1c <free_semaphore_object+0x1a>
		return E_SEMAPHORE_NOT_EXISTS;
f010df12:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
f010df17:	e9 bf 00 00 00       	jmp    f010dfdb <free_semaphore_object+0xd9>

	memset(&(semaphores[semaphoreObjectID]), 0, sizeof(struct Semaphore));
f010df1c:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010df22:	8b 55 08             	mov    0x8(%ebp),%edx
f010df25:	89 d0                	mov    %edx,%eax
f010df27:	c1 e0 02             	shl    $0x2,%eax
f010df2a:	01 d0                	add    %edx,%eax
f010df2c:	01 c0                	add    %eax,%eax
f010df2e:	01 d0                	add    %edx,%eax
f010df30:	01 c0                	add    %eax,%eax
f010df32:	01 d0                	add    %edx,%eax
f010df34:	c1 e0 02             	shl    $0x2,%eax
f010df37:	01 c8                	add    %ecx,%eax
f010df39:	83 ec 04             	sub    $0x4,%esp
f010df3c:	6a 5c                	push   $0x5c
f010df3e:	6a 00                	push   $0x0
f010df40:	50                   	push   %eax
f010df41:	e8 32 2f 02 00       	call   f0130e78 <memset>
f010df46:	83 c4 10             	add    $0x10,%esp
	semaphores[semaphoreObjectID].empty = 1;
f010df49:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010df4f:	8b 55 08             	mov    0x8(%ebp),%edx
f010df52:	89 d0                	mov    %edx,%eax
f010df54:	c1 e0 02             	shl    $0x2,%eax
f010df57:	01 d0                	add    %edx,%eax
f010df59:	01 c0                	add    %eax,%eax
f010df5b:	01 d0                	add    %edx,%eax
f010df5d:	01 c0                	add    %eax,%eax
f010df5f:	01 d0                	add    %edx,%eax
f010df61:	c1 e0 02             	shl    $0x2,%eax
f010df64:	01 c8                	add    %ecx,%eax
f010df66:	c6 40 58 01          	movb   $0x1,0x58(%eax)
	LIST_INIT(&(semaphores[semaphoreObjectID].env_queue));
f010df6a:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010df70:	8b 55 08             	mov    0x8(%ebp),%edx
f010df73:	89 d0                	mov    %edx,%eax
f010df75:	c1 e0 02             	shl    $0x2,%eax
f010df78:	01 d0                	add    %edx,%eax
f010df7a:	01 c0                	add    %eax,%eax
f010df7c:	01 d0                	add    %edx,%eax
f010df7e:	01 c0                	add    %eax,%eax
f010df80:	01 d0                	add    %edx,%eax
f010df82:	c1 e0 02             	shl    $0x2,%eax
f010df85:	01 c8                	add    %ecx,%eax
f010df87:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010df8e:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010df94:	8b 55 08             	mov    0x8(%ebp),%edx
f010df97:	89 d0                	mov    %edx,%eax
f010df99:	c1 e0 02             	shl    $0x2,%eax
f010df9c:	01 d0                	add    %edx,%eax
f010df9e:	01 c0                	add    %eax,%eax
f010dfa0:	01 d0                	add    %edx,%eax
f010dfa2:	01 c0                	add    %eax,%eax
f010dfa4:	01 d0                	add    %edx,%eax
f010dfa6:	c1 e0 02             	shl    $0x2,%eax
f010dfa9:	01 c8                	add    %ecx,%eax
f010dfab:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010dfb2:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010dfb8:	8b 55 08             	mov    0x8(%ebp),%edx
f010dfbb:	89 d0                	mov    %edx,%eax
f010dfbd:	c1 e0 02             	shl    $0x2,%eax
f010dfc0:	01 d0                	add    %edx,%eax
f010dfc2:	01 c0                	add    %eax,%eax
f010dfc4:	01 d0                	add    %edx,%eax
f010dfc6:	01 c0                	add    %eax,%eax
f010dfc8:	01 d0                	add    %edx,%eax
f010dfca:	c1 e0 02             	shl    $0x2,%eax
f010dfcd:	01 c8                	add    %ecx,%eax
f010dfcf:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)

	return 0;
f010dfd6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dfdb:	c9                   	leave  
f010dfdc:	c3                   	ret    

f010dfdd <createSemaphore>:

//======================
// [1] Create Semaphore:
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue)
{
f010dfdd:	55                   	push   %ebp
f010dfde:	89 e5                	mov    %esp,%ebp
f010dfe0:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("createSemaphore() is not implemented yet...!!");
f010dfe3:	83 ec 04             	sub    $0x4,%esp
f010dfe6:	68 80 75 13 f0       	push   $0xf0137580
f010dfeb:	68 94 00 00 00       	push   $0x94
f010dff0:	68 60 75 13 f0       	push   $0xf0137560
f010dff5:	e8 01 22 ff ff       	call   f01001fb <_panic>

f010dffa <waitSemaphore>:

//============
// [2] Wait():
//============
void waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010dffa:	55                   	push   %ebp
f010dffb:	89 e5                	mov    %esp,%ebp
f010dffd:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("waitSemaphore() is not implemented yet...!!");
f010e000:	83 ec 04             	sub    $0x4,%esp
f010e003:	68 b0 75 13 f0       	push   $0xf01375b0
f010e008:	68 a6 00 00 00       	push   $0xa6
f010e00d:	68 60 75 13 f0       	push   $0xf0137560
f010e012:	e8 e4 21 ff ff       	call   f01001fb <_panic>

f010e017 <signalSemaphore>:

//==============
// [3] Signal():
//==============
void signalSemaphore(int ownerEnvID, char* semaphoreName)
{
f010e017:	55                   	push   %ebp
f010e018:	89 e5                	mov    %esp,%ebp
f010e01a:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("signalSemaphore() is not implemented yet...!!");
f010e01d:	83 ec 04             	sub    $0x4,%esp
f010e020:	68 dc 75 13 f0       	push   $0xf01375dc
f010e025:	68 ba 00 00 00       	push   $0xba
f010e02a:	68 60 75 13 f0       	push   $0xf0137560
f010e02f:	e8 c7 21 ff ff       	call   f01001fb <_panic>

f010e034 <test_initialize_MemBlocksList>:

#define Mega  (1024*1024)
#define kilo (1024)

void test_initialize_MemBlocksList()
{
f010e034:	55                   	push   %ebp
f010e035:	89 e5                	mov    %esp,%ebp
f010e037:	83 ec 18             	sub    $0x18,%esp
	uint32 numOfBlocks = 5;
f010e03a:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e041:	83 ec 0c             	sub    $0xc,%esp
f010e044:	ff 75 ec             	pushl  -0x14(%ebp)
f010e047:	e8 a8 37 02 00       	call   f01317f4 <initialize_MemBlocksList>
f010e04c:	83 c4 10             	add    $0x10,%esp
	//Check 1: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks)
f010e04f:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010e054:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e057:	74 17                	je     f010e070 <test_initialize_MemBlocksList+0x3c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AvailableMemBlocksList %d\n", LIST_SIZE(&(AvailableMemBlocksList)));
f010e059:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010e05e:	50                   	push   %eax
f010e05f:	68 20 76 13 f0       	push   $0xf0137620
f010e064:	6a 1f                	push   $0x1f
f010e066:	68 74 76 13 f0       	push   $0xf0137674
f010e06b:	e8 8b 21 ff ff       	call   f01001fb <_panic>
		//assert(LIST_SIZE(&AvailableMemBlocksList) == numOfBlocks);
	}

	//Check 2: Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e070:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010e075:	85 c0                	test   %eax,%eax
f010e077:	74 17                	je     f010e090 <test_initialize_MemBlocksList+0x5c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AllocMemBlocksList %d\n", LIST_SIZE(&(AllocMemBlocksList)));
f010e079:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010e07e:	50                   	push   %eax
f010e07f:	68 98 76 13 f0       	push   $0xf0137698
f010e084:	6a 26                	push   $0x26
f010e086:	68 74 76 13 f0       	push   $0xf0137674
f010e08b:	e8 6b 21 ff ff       	call   f01001fb <_panic>
	}

	//Check 3: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 0)
f010e090:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010e095:	85 c0                	test   %eax,%eax
f010e097:	74 17                	je     f010e0b0 <test_initialize_MemBlocksList+0x7c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the FreeMemBlocksList %d\n", LIST_SIZE(&(FreeMemBlocksList)));
f010e099:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010e09e:	50                   	push   %eax
f010e09f:	68 e8 76 13 f0       	push   $0xf01376e8
f010e0a4:	6a 2c                	push   $0x2c
f010e0a6:	68 74 76 13 f0       	push   $0xf0137674
f010e0ab:	e8 4b 21 ff ff       	call   f01001fb <_panic>
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
f010e0b0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 size = 0;
f010e0b7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010e0be:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f010e0c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010e0c6:	eb 29                	jmp    f010e0f1 <test_initialize_MemBlocksList+0xbd>
	{
		size++;
f010e0c8:	ff 45 f0             	incl   -0x10(%ebp)
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f010e0cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e0ce:	8b 50 0c             	mov    0xc(%eax),%edx
f010e0d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e0d4:	8b 40 08             	mov    0x8(%eax),%eax
f010e0d7:	83 ec 04             	sub    $0x4,%esp
f010e0da:	52                   	push   %edx
f010e0db:	50                   	push   %eax
f010e0dc:	68 38 77 13 f0       	push   $0xf0137738
f010e0e1:	e8 9c 2b ff ff       	call   f0100c82 <cprintf>
f010e0e6:	83 c4 10             	add    $0x10,%esp
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
	uint32 size = 0;
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010e0e9:	a1 a0 7b 65 f0       	mov    0xf0657ba0,%eax
f010e0ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010e0f1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e0f5:	74 07                	je     f010e0fe <test_initialize_MemBlocksList+0xca>
f010e0f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e0fa:	8b 00                	mov    (%eax),%eax
f010e0fc:	eb 05                	jmp    f010e103 <test_initialize_MemBlocksList+0xcf>
f010e0fe:	b8 00 00 00 00       	mov    $0x0,%eax
f010e103:	a3 a0 7b 65 f0       	mov    %eax,0xf0657ba0
f010e108:	a1 a0 7b 65 f0       	mov    0xf0657ba0,%eax
f010e10d:	85 c0                	test   %eax,%eax
f010e10f:	75 b7                	jne    f010e0c8 <test_initialize_MemBlocksList+0x94>
f010e111:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e115:	75 b1                	jne    f010e0c8 <test_initialize_MemBlocksList+0x94>
	{
		size++;
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
	if(LIST_SIZE(&(AvailableMemBlocksList)) != size)
f010e117:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010e11c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e11f:	74 14                	je     f010e135 <test_initialize_MemBlocksList+0x101>
		panic("initialize_MemBlocksList: Some nodes are not created in the initialize_MemBlocksList\n");
f010e121:	83 ec 04             	sub    $0x4,%esp
f010e124:	68 58 77 13 f0       	push   $0xf0137758
f010e129:	6a 38                	push   $0x38
f010e12b:	68 74 76 13 f0       	push   $0xf0137674
f010e130:	e8 c6 20 ff ff       	call   f01001fb <_panic>
	else
		cprintf("Congratulations!! test initialize_MemBlocksList completed successfully.\n");
f010e135:	83 ec 0c             	sub    $0xc,%esp
f010e138:	68 b0 77 13 f0       	push   $0xf01377b0
f010e13d:	e8 40 2b ff ff       	call   f0100c82 <cprintf>
f010e142:	83 c4 10             	add    $0x10,%esp
}
f010e145:	90                   	nop
f010e146:	c9                   	leave  
f010e147:	c3                   	ret    

f010e148 <test_insert_sorted_allocList>:

void test_insert_sorted_allocList()
{
f010e148:	55                   	push   %ebp
f010e149:	89 e5                	mov    %esp,%ebp
f010e14b:	57                   	push   %edi
f010e14c:	81 ec 94 00 00 00    	sub    $0x94,%esp
	uint32 numOfBlocks = 5;
f010e152:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e159:	83 ec 0c             	sub    $0xc,%esp
f010e15c:	ff 75 f4             	pushl  -0xc(%ebp)
f010e15f:	e8 90 36 02 00       	call   f01317f4 <initialize_MemBlocksList>
f010e164:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010e167:	c7 05 c8 7a 65 f0 00 	movl   $0x0,0xf0657ac8
f010e16e:	00 00 00 
f010e171:	c7 05 cc 7a 65 f0 00 	movl   $0x0,0xf0657acc
f010e178:	00 00 00 
f010e17b:	c7 05 d4 7a 65 f0 00 	movl   $0x0,0xf0657ad4
f010e182:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010e185:	c7 05 64 7b 65 f0 00 	movl   $0x0,0xf0657b64
f010e18c:	00 00 00 
f010e18f:	c7 05 68 7b 65 f0 00 	movl   $0x0,0xf0657b68
f010e196:	00 00 00 
f010e199:	c7 05 70 7b 65 f0 00 	movl   $0x0,0xf0657b70
f010e1a0:	00 00 00 

	uint32 blocksToInsertSVAs[5]={0,0,0,0,0};
f010e1a3:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010e1a6:	b9 05 00 00 00       	mov    $0x5,%ecx
f010e1ab:	b8 00 00 00 00       	mov    $0x0,%eax
f010e1b0:	89 d7                	mov    %edx,%edi
f010e1b2:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[5]={0,0,0,0,0};
f010e1b4:	8d 55 c4             	lea    -0x3c(%ebp),%edx
f010e1b7:	b9 05 00 00 00       	mov    $0x5,%ecx
f010e1bc:	b8 00 00 00 00       	mov    $0x0,%eax
f010e1c1:	89 d7                	mov    %edx,%edi
f010e1c3:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f010e1c5:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	uint32 actualSize = 0;
f010e1cc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)


	/*INSERT Scenario 1: Insert BLOCK_1 in the empty AllocMemBlocksList*/
	//BLOCK_1 sva = 8K
	blocksToInsertSVAs[1] = 0x0 + (8*kilo);
f010e1d3:	c7 45 dc 00 20 00 00 	movl   $0x2000,-0x24(%ebp)
	blocksToInsertSizes[1] = (4*kilo);
f010e1da:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[1];
f010e1e1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e1e4:	89 45 b8             	mov    %eax,-0x48(%ebp)
	blockToInsert1.size = blocksToInsertSizes[1];
f010e1e7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010e1ea:	89 45 bc             	mov    %eax,-0x44(%ebp)

	insert_sorted_allocList(&blockToInsert1);
f010e1ed:	83 ec 0c             	sub    $0xc,%esp
f010e1f0:	8d 45 b0             	lea    -0x50(%ebp),%eax
f010e1f3:	50                   	push   %eax
f010e1f4:	e8 30 37 02 00       	call   f0131929 <insert_sorted_allocList>
f010e1f9:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 1;
f010e1fc:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010e203:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010e208:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e20b:	74 14                	je     f010e221 <test_insert_sorted_allocList+0xd9>
f010e20d:	83 ec 04             	sub    $0x4,%esp
f010e210:	68 fc 77 13 f0       	push   $0xf01377fc
f010e215:	6a 56                	push   $0x56
f010e217:	68 74 76 13 f0       	push   $0xf0137674
f010e21c:	e8 da 1f ff ff       	call   f01001fb <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010e221:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010e226:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e229:	74 14                	je     f010e23f <test_insert_sorted_allocList+0xf7>
f010e22b:	83 ec 04             	sub    $0x4,%esp
f010e22e:	68 48 78 13 f0       	push   $0xf0137848
f010e233:	6a 59                	push   $0x59
f010e235:	68 74 76 13 f0       	push   $0xf0137674
f010e23a:	e8 bc 1f ff ff       	call   f01001fb <_panic>

	//Check 3: Check the allocated list content
	int chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010e23f:	83 ec 0c             	sub    $0xc,%esp
f010e242:	ff 75 f0             	pushl  -0x10(%ebp)
f010e245:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e248:	50                   	push   %eax
f010e249:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e24c:	50                   	push   %eax
f010e24d:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e250:	50                   	push   %eax
f010e251:	68 c8 7a 65 f0       	push   $0xf0657ac8
f010e256:	e8 7d 26 00 00       	call   f01108d8 <check_list_data>
f010e25b:	83 c4 20             	add    $0x20,%esp
f010e25e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010e261:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010e265:	74 14                	je     f010e27b <test_insert_sorted_allocList+0x133>
f010e267:	83 ec 04             	sub    $0x4,%esp
f010e26a:	68 98 78 13 f0       	push   $0xf0137898
f010e26f:	6a 5d                	push   $0x5d
f010e271:	68 74 76 13 f0       	push   $0xf0137674
f010e276:	e8 80 1f ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010e27b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e27e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e281:	74 14                	je     f010e297 <test_insert_sorted_allocList+0x14f>
f010e283:	83 ec 04             	sub    $0x4,%esp
f010e286:	68 e8 78 13 f0       	push   $0xf01378e8
f010e28b:	6a 5e                	push   $0x5e
f010e28d:	68 74 76 13 f0       	push   $0xf0137674
f010e292:	e8 64 1f ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT Scenario 2: Insert BLOCK_2 in the AllocMemBlocksList with sva greater than BLOCK_1*/
	//BLOCK_2 sva = 28K
	blocksToInsertSVAs[4] = (28*kilo);
f010e297:	c7 45 e8 00 70 00 00 	movl   $0x7000,-0x18(%ebp)
	blocksToInsertSizes[4] = (2*kilo);
f010e29e:	c7 45 d4 00 08 00 00 	movl   $0x800,-0x2c(%ebp)
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[4];
f010e2a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e2a8:	89 45 a8             	mov    %eax,-0x58(%ebp)
	blockToInsert2.size = blocksToInsertSizes[4];
f010e2ab:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e2ae:	89 45 ac             	mov    %eax,-0x54(%ebp)

	insert_sorted_allocList(&blockToInsert2);
f010e2b1:	83 ec 0c             	sub    $0xc,%esp
f010e2b4:	8d 45 a0             	lea    -0x60(%ebp),%eax
f010e2b7:	50                   	push   %eax
f010e2b8:	e8 6c 36 02 00       	call   f0131929 <insert_sorted_allocList>
f010e2bd:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 2;
f010e2c0:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010e2c7:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010e2cc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e2cf:	74 14                	je     f010e2e5 <test_insert_sorted_allocList+0x19d>
f010e2d1:	83 ec 04             	sub    $0x4,%esp
f010e2d4:	68 fc 77 13 f0       	push   $0xf01377fc
f010e2d9:	6a 6d                	push   $0x6d
f010e2db:	68 74 76 13 f0       	push   $0xf0137674
f010e2e0:	e8 16 1f ff ff       	call   f01001fb <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010e2e5:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010e2ea:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e2ed:	74 14                	je     f010e303 <test_insert_sorted_allocList+0x1bb>
f010e2ef:	83 ec 04             	sub    $0x4,%esp
f010e2f2:	68 48 78 13 f0       	push   $0xf0137848
f010e2f7:	6a 70                	push   $0x70
f010e2f9:	68 74 76 13 f0       	push   $0xf0137674
f010e2fe:	e8 f8 1e ff ff       	call   f01001fb <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010e303:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010e30a:	83 ec 0c             	sub    $0xc,%esp
f010e30d:	ff 75 f0             	pushl  -0x10(%ebp)
f010e310:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e313:	50                   	push   %eax
f010e314:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e317:	50                   	push   %eax
f010e318:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e31b:	50                   	push   %eax
f010e31c:	68 c8 7a 65 f0       	push   $0xf0657ac8
f010e321:	e8 b2 25 00 00       	call   f01108d8 <check_list_data>
f010e326:	83 c4 20             	add    $0x20,%esp
f010e329:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010e32c:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010e330:	74 14                	je     f010e346 <test_insert_sorted_allocList+0x1fe>
f010e332:	83 ec 04             	sub    $0x4,%esp
f010e335:	68 98 78 13 f0       	push   $0xf0137898
f010e33a:	6a 75                	push   $0x75
f010e33c:	68 74 76 13 f0       	push   $0xf0137674
f010e341:	e8 b5 1e ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010e346:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e349:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e34c:	74 14                	je     f010e362 <test_insert_sorted_allocList+0x21a>
f010e34e:	83 ec 04             	sub    $0x4,%esp
f010e351:	68 e8 78 13 f0       	push   $0xf01378e8
f010e356:	6a 76                	push   $0x76
f010e358:	68 74 76 13 f0       	push   $0xf0137674
f010e35d:	e8 99 1e ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT Scenario 3: Insert BLOCK_3 in the AllocMemBlocksList with sva smaller than BLOCK_2*/
	//BLOCK_3 sva = 16K
	blocksToInsertSVAs[2] = (16*kilo);
f010e362:	c7 45 e0 00 40 00 00 	movl   $0x4000,-0x20(%ebp)
	blocksToInsertSizes[2] = (8*kilo);
f010e369:	c7 45 cc 00 20 00 00 	movl   $0x2000,-0x34(%ebp)
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[2];
f010e370:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e373:	89 45 98             	mov    %eax,-0x68(%ebp)
	blockToInsert3.size = blocksToInsertSizes[2];
f010e376:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e379:	89 45 9c             	mov    %eax,-0x64(%ebp)

	insert_sorted_allocList(&blockToInsert3);
f010e37c:	83 ec 0c             	sub    $0xc,%esp
f010e37f:	8d 45 90             	lea    -0x70(%ebp),%eax
f010e382:	50                   	push   %eax
f010e383:	e8 a1 35 02 00       	call   f0131929 <insert_sorted_allocList>
f010e388:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 3;
f010e38b:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010e392:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010e397:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e39a:	74 17                	je     f010e3b3 <test_insert_sorted_allocList+0x26b>
f010e39c:	83 ec 04             	sub    $0x4,%esp
f010e39f:	68 fc 77 13 f0       	push   $0xf01377fc
f010e3a4:	68 85 00 00 00       	push   $0x85
f010e3a9:	68 74 76 13 f0       	push   $0xf0137674
f010e3ae:	e8 48 1e ff ff       	call   f01001fb <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList\n");
f010e3b3:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010e3b8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e3bb:	74 17                	je     f010e3d4 <test_insert_sorted_allocList+0x28c>
f010e3bd:	83 ec 04             	sub    $0x4,%esp
f010e3c0:	68 34 79 13 f0       	push   $0xf0137934
f010e3c5:	68 88 00 00 00       	push   $0x88
f010e3ca:	68 74 76 13 f0       	push   $0xf0137674
f010e3cf:	e8 27 1e ff ff       	call   f01001fb <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010e3d4:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010e3db:	83 ec 0c             	sub    $0xc,%esp
f010e3de:	ff 75 f0             	pushl  -0x10(%ebp)
f010e3e1:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e3e4:	50                   	push   %eax
f010e3e5:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e3e8:	50                   	push   %eax
f010e3e9:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e3ec:	50                   	push   %eax
f010e3ed:	68 c8 7a 65 f0       	push   $0xf0657ac8
f010e3f2:	e8 e1 24 00 00       	call   f01108d8 <check_list_data>
f010e3f7:	83 c4 20             	add    $0x20,%esp
f010e3fa:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010e3fd:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010e401:	74 17                	je     f010e41a <test_insert_sorted_allocList+0x2d2>
f010e403:	83 ec 04             	sub    $0x4,%esp
f010e406:	68 98 78 13 f0       	push   $0xf0137898
f010e40b:	68 8d 00 00 00       	push   $0x8d
f010e410:	68 74 76 13 f0       	push   $0xf0137674
f010e415:	e8 e1 1d ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010e41a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e41d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e420:	74 17                	je     f010e439 <test_insert_sorted_allocList+0x2f1>
f010e422:	83 ec 04             	sub    $0x4,%esp
f010e425:	68 e8 78 13 f0       	push   $0xf01378e8
f010e42a:	68 8e 00 00 00       	push   $0x8e
f010e42f:	68 74 76 13 f0       	push   $0xf0137674
f010e434:	e8 c2 1d ff ff       	call   f01001fb <_panic>

	//====================================================================//
	//INSERT Scenario 4: Insert BLOCK_4 in the AllocMemBlocksList with sva smaller than ALL (SHALL BE INSERTED AS HEAD)
	//BLOCK_4 sva = 0x0
	blocksToInsertSVAs[0] = (0x0);
f010e439:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	blocksToInsertSizes[0] = (8*kilo);
f010e440:	c7 45 c4 00 20 00 00 	movl   $0x2000,-0x3c(%ebp)
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[0];
f010e447:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e44a:	89 45 88             	mov    %eax,-0x78(%ebp)
	blockToInsert4.size = blocksToInsertSizes[0];
f010e44d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e450:	89 45 8c             	mov    %eax,-0x74(%ebp)
	insert_sorted_allocList(&blockToInsert4);
f010e453:	83 ec 0c             	sub    $0xc,%esp
f010e456:	8d 45 80             	lea    -0x80(%ebp),%eax
f010e459:	50                   	push   %eax
f010e45a:	e8 ca 34 02 00       	call   f0131929 <insert_sorted_allocList>
f010e45f:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 4;
f010e462:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010e469:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010e46e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e471:	74 17                	je     f010e48a <test_insert_sorted_allocList+0x342>
f010e473:	83 ec 04             	sub    $0x4,%esp
f010e476:	68 fc 77 13 f0       	push   $0xf01377fc
f010e47b:	68 9c 00 00 00       	push   $0x9c
f010e480:	68 74 76 13 f0       	push   $0xf0137674
f010e485:	e8 71 1d ff ff       	call   f01001fb <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010e48a:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010e48f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e492:	74 17                	je     f010e4ab <test_insert_sorted_allocList+0x363>
f010e494:	83 ec 04             	sub    $0x4,%esp
f010e497:	68 48 78 13 f0       	push   $0xf0137848
f010e49c:	68 9f 00 00 00       	push   $0x9f
f010e4a1:	68 74 76 13 f0       	push   $0xf0137674
f010e4a6:	e8 50 1d ff ff       	call   f01001fb <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010e4ab:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010e4b2:	83 ec 0c             	sub    $0xc,%esp
f010e4b5:	ff 75 f0             	pushl  -0x10(%ebp)
f010e4b8:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e4bb:	50                   	push   %eax
f010e4bc:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e4bf:	50                   	push   %eax
f010e4c0:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e4c3:	50                   	push   %eax
f010e4c4:	68 c8 7a 65 f0       	push   $0xf0657ac8
f010e4c9:	e8 0a 24 00 00       	call   f01108d8 <check_list_data>
f010e4ce:	83 c4 20             	add    $0x20,%esp
f010e4d1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010e4d4:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010e4d8:	74 17                	je     f010e4f1 <test_insert_sorted_allocList+0x3a9>
f010e4da:	83 ec 04             	sub    $0x4,%esp
f010e4dd:	68 98 78 13 f0       	push   $0xf0137898
f010e4e2:	68 a4 00 00 00       	push   $0xa4
f010e4e7:	68 74 76 13 f0       	push   $0xf0137674
f010e4ec:	e8 0a 1d ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010e4f1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e4f4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e4f7:	74 17                	je     f010e510 <test_insert_sorted_allocList+0x3c8>
f010e4f9:	83 ec 04             	sub    $0x4,%esp
f010e4fc:	68 e8 78 13 f0       	push   $0xf01378e8
f010e501:	68 a5 00 00 00       	push   $0xa5
f010e506:	68 74 76 13 f0       	push   $0xf0137674
f010e50b:	e8 eb 1c ff ff       	call   f01001fb <_panic>

	//====================================================================//
	//INSERT Scenario 5: Insert BLOCK_5 in the AllocMemBlocksList with sva not greater than the first block only
	//BLOCK_5 sva = 24K
	blocksToInsertSVAs[3] = 24*kilo;
f010e510:	c7 45 e4 00 60 00 00 	movl   $0x6000,-0x1c(%ebp)
	blocksToInsertSizes[3] = (4*kilo);
f010e517:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[3];
f010e51e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e521:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
	blockToInsert5.size = blocksToInsertSizes[3];
f010e527:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e52a:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	insert_sorted_allocList(&blockToInsert5);
f010e530:	83 ec 0c             	sub    $0xc,%esp
f010e533:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f010e539:	50                   	push   %eax
f010e53a:	e8 ea 33 02 00       	call   f0131929 <insert_sorted_allocList>
f010e53f:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 5;
f010e542:	c7 45 f0 05 00 00 00 	movl   $0x5,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010e549:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010e54e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e551:	74 17                	je     f010e56a <test_insert_sorted_allocList+0x422>
f010e553:	83 ec 04             	sub    $0x4,%esp
f010e556:	68 fc 77 13 f0       	push   $0xf01377fc
f010e55b:	68 b3 00 00 00       	push   $0xb3
f010e560:	68 74 76 13 f0       	push   $0xf0137674
f010e565:	e8 91 1c ff ff       	call   f01001fb <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010e56a:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010e56f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e572:	74 17                	je     f010e58b <test_insert_sorted_allocList+0x443>
f010e574:	83 ec 04             	sub    $0x4,%esp
f010e577:	68 48 78 13 f0       	push   $0xf0137848
f010e57c:	68 b6 00 00 00       	push   $0xb6
f010e581:	68 74 76 13 f0       	push   $0xf0137674
f010e586:	e8 70 1c ff ff       	call   f01001fb <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010e58b:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010e592:	83 ec 0c             	sub    $0xc,%esp
f010e595:	ff 75 f0             	pushl  -0x10(%ebp)
f010e598:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e59b:	50                   	push   %eax
f010e59c:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e59f:	50                   	push   %eax
f010e5a0:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e5a3:	50                   	push   %eax
f010e5a4:	68 c8 7a 65 f0       	push   $0xf0657ac8
f010e5a9:	e8 2a 23 00 00       	call   f01108d8 <check_list_data>
f010e5ae:	83 c4 20             	add    $0x20,%esp
f010e5b1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010e5b4:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010e5b8:	74 17                	je     f010e5d1 <test_insert_sorted_allocList+0x489>
f010e5ba:	83 ec 04             	sub    $0x4,%esp
f010e5bd:	68 98 78 13 f0       	push   $0xf0137898
f010e5c2:	68 bb 00 00 00       	push   $0xbb
f010e5c7:	68 74 76 13 f0       	push   $0xf0137674
f010e5cc:	e8 2a 1c ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010e5d1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e5d4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e5d7:	74 17                	je     f010e5f0 <test_insert_sorted_allocList+0x4a8>
f010e5d9:	83 ec 04             	sub    $0x4,%esp
f010e5dc:	68 e8 78 13 f0       	push   $0xf01378e8
f010e5e1:	68 bc 00 00 00       	push   $0xbc
f010e5e6:	68 74 76 13 f0       	push   $0xf0137674
f010e5eb:	e8 0b 1c ff ff       	call   f01001fb <_panic>
	//====================================================================//
	//====================================================================//
	//show_list_content(&AllocMemBlocksList);

	cprintf("Congratulations!! test insert_sorted completed successfully.\n");
f010e5f0:	83 ec 0c             	sub    $0xc,%esp
f010e5f3:	68 84 79 13 f0       	push   $0xf0137984
f010e5f8:	e8 85 26 ff ff       	call   f0100c82 <cprintf>
f010e5fd:	83 c4 10             	add    $0x10,%esp
}
f010e600:	90                   	nop
f010e601:	8b 7d fc             	mov    -0x4(%ebp),%edi
f010e604:	c9                   	leave  
f010e605:	c3                   	ret    

f010e606 <test_find_block>:

void test_find_block()
{
f010e606:	55                   	push   %ebp
f010e607:	89 e5                	mov    %esp,%ebp
f010e609:	57                   	push   %edi
f010e60a:	56                   	push   %esi
f010e60b:	53                   	push   %ebx
f010e60c:	81 ec ac 00 00 00    	sub    $0xac,%esp
	uint32 numOfBlocks = 6;
f010e612:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e619:	83 ec 0c             	sub    $0xc,%esp
f010e61c:	ff 75 e0             	pushl  -0x20(%ebp)
f010e61f:	e8 d0 31 02 00       	call   f01317f4 <initialize_MemBlocksList>
f010e624:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&FreeMemBlocksList);
f010e627:	c7 05 64 7b 65 f0 00 	movl   $0x0,0xf0657b64
f010e62e:	00 00 00 
f010e631:	c7 05 68 7b 65 f0 00 	movl   $0x0,0xf0657b68
f010e638:	00 00 00 
f010e63b:	c7 05 70 7b 65 f0 00 	movl   $0x0,0xf0657b70
f010e642:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfAllocBlocks  6
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
f010e645:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e648:	bb fc 7a 13 f0       	mov    $0xf0137afc,%ebx
f010e64d:	ba 06 00 00 00       	mov    $0x6,%edx
f010e652:	89 c7                	mov    %eax,%edi
f010e654:	89 de                	mov    %ebx,%esi
f010e656:	89 d1                	mov    %edx,%ecx
f010e658:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;
f010e65a:	8d 45 ac             	lea    -0x54(%ebp),%eax
f010e65d:	bb 14 7b 13 f0       	mov    $0xf0137b14,%ebx
f010e662:	ba 06 00 00 00       	mov    $0x6,%edx
f010e667:	89 c7                	mov    %eax,%edi
f010e669:	89 de                	mov    %ebx,%esi
f010e66b:	89 d1                	mov    %edx,%ecx
f010e66d:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&AllocMemBlocksList);
f010e66f:	c7 05 c8 7a 65 f0 00 	movl   $0x0,0xf0657ac8
f010e676:	00 00 00 
f010e679:	c7 05 cc 7a 65 f0 00 	movl   $0x0,0xf0657acc
f010e680:	00 00 00 
f010e683:	c7 05 d4 7a 65 f0 00 	movl   $0x0,0xf0657ad4
f010e68a:	00 00 00 
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010e68d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010e694:	e9 5f 01 00 00       	jmp    f010e7f8 <test_find_block+0x1f2>
	{
		blockToInsert[i].sva = BlocksSVAs[i];
f010e699:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e69c:	8b 44 85 c4          	mov    -0x3c(%ebp,%eax,4),%eax
f010e6a0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e6a3:	c1 e2 04             	shl    $0x4,%edx
f010e6a6:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e6a9:	01 da                	add    %ebx,%edx
f010e6ab:	81 ea 94 00 00 00    	sub    $0x94,%edx
f010e6b1:	89 02                	mov    %eax,(%edx)
		blockToInsert[i].size = BlocksSizes[i];
f010e6b3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e6b6:	8b 44 85 ac          	mov    -0x54(%ebp,%eax,4),%eax
f010e6ba:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e6bd:	c1 e2 04             	shl    $0x4,%edx
f010e6c0:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e6c3:	01 f2                	add    %esi,%edx
f010e6c5:	81 ea 90 00 00 00    	sub    $0x90,%edx
f010e6cb:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010e6cd:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010e6d1:	0f 85 92 00 00 00    	jne    f010e769 <test_find_block+0x163>
			LIST_INSERT_HEAD(&AllocMemBlocksList, &(blockToInsert[i]));
f010e6d7:	a1 c8 7a 65 f0       	mov    0xf0657ac8,%eax
f010e6dc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e6df:	c1 e2 04             	shl    $0x4,%edx
f010e6e2:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e6e5:	01 fa                	add    %edi,%edx
f010e6e7:	81 ea 9c 00 00 00    	sub    $0x9c,%edx
f010e6ed:	89 02                	mov    %eax,(%edx)
f010e6ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e6f2:	c1 e0 04             	shl    $0x4,%eax
f010e6f5:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e6f8:	01 d8                	add    %ebx,%eax
f010e6fa:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010e6ff:	8b 00                	mov    (%eax),%eax
f010e701:	85 c0                	test   %eax,%eax
f010e703:	74 18                	je     f010e71d <test_find_block+0x117>
f010e705:	a1 c8 7a 65 f0       	mov    0xf0657ac8,%eax
f010e70a:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010e710:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e713:	c1 e1 04             	shl    $0x4,%ecx
f010e716:	01 ca                	add    %ecx,%edx
f010e718:	89 50 04             	mov    %edx,0x4(%eax)
f010e71b:	eb 13                	jmp    f010e730 <test_find_block+0x12a>
f010e71d:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010e723:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e726:	c1 e2 04             	shl    $0x4,%edx
f010e729:	01 d0                	add    %edx,%eax
f010e72b:	a3 cc 7a 65 f0       	mov    %eax,0xf0657acc
f010e730:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010e736:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e739:	c1 e2 04             	shl    $0x4,%edx
f010e73c:	01 d0                	add    %edx,%eax
f010e73e:	a3 c8 7a 65 f0       	mov    %eax,0xf0657ac8
f010e743:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e746:	c1 e0 04             	shl    $0x4,%eax
f010e749:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e74c:	01 f0                	add    %esi,%eax
f010e74e:	2d 98 00 00 00       	sub    $0x98,%eax
f010e753:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e759:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010e75e:	40                   	inc    %eax
f010e75f:	a3 d4 7a 65 f0       	mov    %eax,0xf0657ad4
f010e764:	e9 8c 00 00 00       	jmp    f010e7f5 <test_find_block+0x1ef>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
f010e769:	a1 cc 7a 65 f0       	mov    0xf0657acc,%eax
f010e76e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e771:	c1 e2 04             	shl    $0x4,%edx
f010e774:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e777:	01 fa                	add    %edi,%edx
f010e779:	81 ea 98 00 00 00    	sub    $0x98,%edx
f010e77f:	89 02                	mov    %eax,(%edx)
f010e781:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e784:	c1 e0 04             	shl    $0x4,%eax
f010e787:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e78a:	01 d8                	add    %ebx,%eax
f010e78c:	2d 98 00 00 00       	sub    $0x98,%eax
f010e791:	8b 00                	mov    (%eax),%eax
f010e793:	85 c0                	test   %eax,%eax
f010e795:	74 17                	je     f010e7ae <test_find_block+0x1a8>
f010e797:	a1 cc 7a 65 f0       	mov    0xf0657acc,%eax
f010e79c:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010e7a2:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e7a5:	c1 e1 04             	shl    $0x4,%ecx
f010e7a8:	01 ca                	add    %ecx,%edx
f010e7aa:	89 10                	mov    %edx,(%eax)
f010e7ac:	eb 13                	jmp    f010e7c1 <test_find_block+0x1bb>
f010e7ae:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010e7b4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e7b7:	c1 e2 04             	shl    $0x4,%edx
f010e7ba:	01 d0                	add    %edx,%eax
f010e7bc:	a3 c8 7a 65 f0       	mov    %eax,0xf0657ac8
f010e7c1:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010e7c7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e7ca:	c1 e2 04             	shl    $0x4,%edx
f010e7cd:	01 d0                	add    %edx,%eax
f010e7cf:	a3 cc 7a 65 f0       	mov    %eax,0xf0657acc
f010e7d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e7d7:	c1 e0 04             	shl    $0x4,%eax
f010e7da:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e7dd:	01 f0                	add    %esi,%eax
f010e7df:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010e7e4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e7ea:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010e7ef:	40                   	inc    %eax
f010e7f0:	a3 d4 7a 65 f0       	mov    %eax,0xf0657ad4
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;

	LIST_INIT(&AllocMemBlocksList);
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010e7f5:	ff 45 e4             	incl   -0x1c(%ebp)
f010e7f8:	83 7d e4 05          	cmpl   $0x5,-0x1c(%ebp)
f010e7fc:	0f 8e 97 fe ff ff    	jle    f010e699 <test_find_block+0x93>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
	}

	/*FIND Scenario 1: Search for a block that doesn't exist (Block with SVA = 4KB)*/
	struct MemBlock * blockToFind = find_block(&AllocMemBlocksList, 0x1000);
f010e802:	83 ec 08             	sub    $0x8,%esp
f010e805:	68 00 10 00 00       	push   $0x1000
f010e80a:	68 c8 7a 65 f0       	push   $0xf0657ac8
f010e80f:	e8 bd 30 02 00       	call   f01318d1 <find_block>
f010e814:	83 c4 10             	add    $0x10,%esp
f010e817:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind != NULL)
f010e81a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e81e:	74 17                	je     f010e837 <test_find_block+0x231>
		panic("find_block: WRONG SEARCH - The block you searched for doesn't exist, however find_block find it.");
f010e820:	83 ec 04             	sub    $0x4,%esp
f010e823:	68 c4 79 13 f0       	push   $0xf01379c4
f010e828:	68 de 00 00 00       	push   $0xde
f010e82d:	68 74 76 13 f0       	push   $0xf0137674
f010e832:	e8 c4 19 ff ff       	call   f01001fb <_panic>

	/*FIND Scenario 2: Search for a block exist @ the beginning (Block with SVA = 0KB)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x0);
f010e837:	83 ec 08             	sub    $0x8,%esp
f010e83a:	6a 00                	push   $0x0
f010e83c:	68 c8 7a 65 f0       	push   $0xf0657ac8
f010e841:	e8 8b 30 02 00       	call   f01318d1 <find_block>
f010e846:	83 c4 10             	add    $0x10,%esp
f010e849:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 3*kilo || blockToFind->sva != 0x0)
f010e84c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e850:	74 17                	je     f010e869 <test_find_block+0x263>
f010e852:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e855:	8b 40 0c             	mov    0xc(%eax),%eax
f010e858:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010e85d:	75 0a                	jne    f010e869 <test_find_block+0x263>
f010e85f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e862:	8b 40 08             	mov    0x8(%eax),%eax
f010e865:	85 c0                	test   %eax,%eax
f010e867:	74 17                	je     f010e880 <test_find_block+0x27a>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010e869:	83 ec 04             	sub    $0x4,%esp
f010e86c:	68 28 7a 13 f0       	push   $0xf0137a28
f010e871:	68 e3 00 00 00       	push   $0xe3
f010e876:	68 74 76 13 f0       	push   $0xf0137674
f010e87b:	e8 7b 19 ff ff       	call   f01001fb <_panic>

	/*FIND Scenario 3: Search for a block exist @ the mid (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x7000);
f010e880:	83 ec 08             	sub    $0x8,%esp
f010e883:	68 00 70 00 00       	push   $0x7000
f010e888:	68 c8 7a 65 f0       	push   $0xf0657ac8
f010e88d:	e8 3f 30 02 00       	call   f01318d1 <find_block>
f010e892:	83 c4 10             	add    $0x10,%esp
f010e895:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 9*kilo || blockToFind->sva != 0x7000)
f010e898:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e89c:	74 1a                	je     f010e8b8 <test_find_block+0x2b2>
f010e89e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e8a1:	8b 40 0c             	mov    0xc(%eax),%eax
f010e8a4:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010e8a9:	75 0d                	jne    f010e8b8 <test_find_block+0x2b2>
f010e8ab:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e8ae:	8b 40 08             	mov    0x8(%eax),%eax
f010e8b1:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010e8b6:	74 17                	je     f010e8cf <test_find_block+0x2c9>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010e8b8:	83 ec 04             	sub    $0x4,%esp
f010e8bb:	68 28 7a 13 f0       	push   $0xf0137a28
f010e8c0:	68 e8 00 00 00       	push   $0xe8
f010e8c5:	68 74 76 13 f0       	push   $0xf0137674
f010e8ca:	e8 2c 19 ff ff       	call   f01001fb <_panic>

	/*FIND Scenario 4: Search for a block exist @ the end (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x1A400);
f010e8cf:	83 ec 08             	sub    $0x8,%esp
f010e8d2:	68 00 a4 01 00       	push   $0x1a400
f010e8d7:	68 c8 7a 65 f0       	push   $0xf0657ac8
f010e8dc:	e8 f0 2f 02 00       	call   f01318d1 <find_block>
f010e8e1:	83 c4 10             	add    $0x10,%esp
f010e8e4:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 2*Mega || blockToFind->sva != 0x1A400)
f010e8e7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e8eb:	74 1a                	je     f010e907 <test_find_block+0x301>
f010e8ed:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e8f0:	8b 40 0c             	mov    0xc(%eax),%eax
f010e8f3:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010e8f8:	75 0d                	jne    f010e907 <test_find_block+0x301>
f010e8fa:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e8fd:	8b 40 08             	mov    0x8(%eax),%eax
f010e900:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010e905:	74 17                	je     f010e91e <test_find_block+0x318>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010e907:	83 ec 04             	sub    $0x4,%esp
f010e90a:	68 28 7a 13 f0       	push   $0xf0137a28
f010e90f:	68 ed 00 00 00       	push   $0xed
f010e914:	68 74 76 13 f0       	push   $0xf0137674
f010e919:	e8 dd 18 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList & FreeMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 0 )
f010e91e:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010e923:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010e926:	75 09                	jne    f010e931 <test_find_block+0x32b>
f010e928:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010e92d:	85 c0                	test   %eax,%eax
f010e92f:	74 17                	je     f010e948 <test_find_block+0x342>
	{
		panic("find_block: AvailableMemBlocksList and FreeMemBlocksList are affected and this shall not occurred.");
f010e931:	83 ec 04             	sub    $0x4,%esp
f010e934:	68 5c 7a 13 f0       	push   $0xf0137a5c
f010e939:	68 f2 00 00 00       	push   $0xf2
f010e93e:	68 74 76 13 f0       	push   $0xf0137674
f010e943:	e8 b3 18 ff ff       	call   f01001fb <_panic>
	}

	//show_list_content(&AllocMemBlocksList);
	cprintf("Congratulations!! test find_block completed successfully.\n");
f010e948:	83 ec 0c             	sub    $0xc,%esp
f010e94b:	68 c0 7a 13 f0       	push   $0xf0137ac0
f010e950:	e8 2d 23 ff ff       	call   f0100c82 <cprintf>
f010e955:	83 c4 10             	add    $0x10,%esp
}
f010e958:	90                   	nop
f010e959:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010e95c:	5b                   	pop    %ebx
f010e95d:	5e                   	pop    %esi
f010e95e:	5f                   	pop    %edi
f010e95f:	5d                   	pop    %ebp
f010e960:	c3                   	ret    

f010e961 <test_alloc_block_FF>:

void test_alloc_block_FF()
{
f010e961:	55                   	push   %ebp
f010e962:	89 e5                	mov    %esp,%ebp
f010e964:	57                   	push   %edi
f010e965:	56                   	push   %esi
f010e966:	53                   	push   %ebx
f010e967:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010e96d:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e974:	83 ec 0c             	sub    $0xc,%esp
f010e977:	ff 75 e0             	pushl  -0x20(%ebp)
f010e97a:	e8 75 2e 02 00       	call   f01317f4 <initialize_MemBlocksList>
f010e97f:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010e982:	c7 05 c8 7a 65 f0 00 	movl   $0x0,0xf0657ac8
f010e989:	00 00 00 
f010e98c:	c7 05 cc 7a 65 f0 00 	movl   $0x0,0xf0657acc
f010e993:	00 00 00 
f010e996:	c7 05 d4 7a 65 f0 00 	movl   $0x0,0xf0657ad4
f010e99d:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_FF  8
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010e9a0:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010e9a3:	bb a0 7d 13 f0       	mov    $0xf0137da0,%ebx
f010e9a8:	ba 08 00 00 00       	mov    $0x8,%edx
f010e9ad:	89 c7                	mov    %eax,%edi
f010e9af:	89 de                	mov    %ebx,%esi
f010e9b1:	89 d1                	mov    %edx,%ecx
f010e9b3:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;
f010e9b5:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010e9b8:	bb c0 7d 13 f0       	mov    $0xf0137dc0,%ebx
f010e9bd:	ba 08 00 00 00       	mov    $0x8,%edx
f010e9c2:	89 c7                	mov    %eax,%edi
f010e9c4:	89 de                	mov    %ebx,%esi
f010e9c6:	89 d1                	mov    %edx,%ecx
f010e9c8:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010e9ca:	c7 05 64 7b 65 f0 00 	movl   $0x0,0xf0657b64
f010e9d1:	00 00 00 
f010e9d4:	c7 05 68 7b 65 f0 00 	movl   $0x0,0xf0657b68
f010e9db:	00 00 00 
f010e9de:	c7 05 70 7b 65 f0 00 	movl   $0x0,0xf0657b70
f010e9e5:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010e9e8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010e9ef:	e9 5f 01 00 00       	jmp    f010eb53 <test_alloc_block_FF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010e9f4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e9f7:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010e9fb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e9fe:	c1 e2 04             	shl    $0x4,%edx
f010ea01:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ea04:	01 da                	add    %ebx,%edx
f010ea06:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010ea0c:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010ea0e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ea11:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010ea15:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ea18:	c1 e2 04             	shl    $0x4,%edx
f010ea1b:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ea1e:	01 f2                	add    %esi,%edx
f010ea20:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010ea26:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010ea28:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010ea2c:	0f 85 92 00 00 00    	jne    f010eac4 <test_alloc_block_FF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010ea32:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f010ea37:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ea3a:	c1 e2 04             	shl    $0x4,%edx
f010ea3d:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010ea40:	01 fa                	add    %edi,%edx
f010ea42:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010ea48:	89 02                	mov    %eax,(%edx)
f010ea4a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ea4d:	c1 e0 04             	shl    $0x4,%eax
f010ea50:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ea53:	01 d8                	add    %ebx,%eax
f010ea55:	2d d4 00 00 00       	sub    $0xd4,%eax
f010ea5a:	8b 00                	mov    (%eax),%eax
f010ea5c:	85 c0                	test   %eax,%eax
f010ea5e:	74 18                	je     f010ea78 <test_alloc_block_FF+0x117>
f010ea60:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f010ea65:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010ea6b:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010ea6e:	c1 e1 04             	shl    $0x4,%ecx
f010ea71:	01 ca                	add    %ecx,%edx
f010ea73:	89 50 04             	mov    %edx,0x4(%eax)
f010ea76:	eb 13                	jmp    f010ea8b <test_alloc_block_FF+0x12a>
f010ea78:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010ea7e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ea81:	c1 e2 04             	shl    $0x4,%edx
f010ea84:	01 d0                	add    %edx,%eax
f010ea86:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f010ea8b:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010ea91:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ea94:	c1 e2 04             	shl    $0x4,%edx
f010ea97:	01 d0                	add    %edx,%eax
f010ea99:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f010ea9e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010eaa1:	c1 e0 04             	shl    $0x4,%eax
f010eaa4:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010eaa7:	01 f0                	add    %esi,%eax
f010eaa9:	2d d0 00 00 00       	sub    $0xd0,%eax
f010eaae:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010eab4:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010eab9:	40                   	inc    %eax
f010eaba:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
f010eabf:	e9 8c 00 00 00       	jmp    f010eb50 <test_alloc_block_FF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010eac4:	a1 68 7b 65 f0       	mov    0xf0657b68,%eax
f010eac9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010eacc:	c1 e2 04             	shl    $0x4,%edx
f010eacf:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010ead2:	01 fa                	add    %edi,%edx
f010ead4:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010eada:	89 02                	mov    %eax,(%edx)
f010eadc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010eadf:	c1 e0 04             	shl    $0x4,%eax
f010eae2:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010eae5:	01 d8                	add    %ebx,%eax
f010eae7:	2d d0 00 00 00       	sub    $0xd0,%eax
f010eaec:	8b 00                	mov    (%eax),%eax
f010eaee:	85 c0                	test   %eax,%eax
f010eaf0:	74 17                	je     f010eb09 <test_alloc_block_FF+0x1a8>
f010eaf2:	a1 68 7b 65 f0       	mov    0xf0657b68,%eax
f010eaf7:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010eafd:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010eb00:	c1 e1 04             	shl    $0x4,%ecx
f010eb03:	01 ca                	add    %ecx,%edx
f010eb05:	89 10                	mov    %edx,(%eax)
f010eb07:	eb 13                	jmp    f010eb1c <test_alloc_block_FF+0x1bb>
f010eb09:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010eb0f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010eb12:	c1 e2 04             	shl    $0x4,%edx
f010eb15:	01 d0                	add    %edx,%eax
f010eb17:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f010eb1c:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010eb22:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010eb25:	c1 e2 04             	shl    $0x4,%edx
f010eb28:	01 d0                	add    %edx,%eax
f010eb2a:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f010eb2f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010eb32:	c1 e0 04             	shl    $0x4,%eax
f010eb35:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010eb38:	01 f0                	add    %esi,%eax
f010eb3a:	2d d4 00 00 00       	sub    $0xd4,%eax
f010eb3f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010eb45:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010eb4a:	40                   	inc    %eax
f010eb4b:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010eb50:	ff 45 e4             	incl   -0x1c(%ebp)
f010eb53:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010eb57:	0f 8e 97 fe ff ff    	jle    f010e9f4 <test_alloc_block_FF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_FF(3*Mega);
f010eb5d:	83 ec 0c             	sub    $0xc,%esp
f010eb60:	68 00 00 30 00       	push   $0x300000
f010eb65:	e8 4c 30 02 00       	call   f0131bb6 <alloc_block_FF>
f010eb6a:	83 c4 10             	add    $0x10,%esp
f010eb6d:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a block instead no existing free blocks with the given size.");
f010eb70:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010eb74:	74 17                	je     f010eb8d <test_alloc_block_FF+0x22c>
f010eb76:	83 ec 04             	sub    $0x4,%esp
f010eb79:	68 2c 7b 13 f0       	push   $0xf0137b2c
f010eb7e:	68 15 01 00 00       	push   $0x115
f010eb83:	68 74 76 13 f0       	push   $0xf0137674
f010eb88:	e8 6e 16 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010eb8d:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010eb92:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010eb95:	75 13                	jne    f010ebaa <test_alloc_block_FF+0x249>
f010eb97:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010eb9c:	83 f8 08             	cmp    $0x8,%eax
f010eb9f:	75 09                	jne    f010ebaa <test_alloc_block_FF+0x249>
f010eba1:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010eba6:	85 c0                	test   %eax,%eax
f010eba8:	74 17                	je     f010ebc1 <test_alloc_block_FF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010ebaa:	83 ec 04             	sub    $0x4,%esp
f010ebad:	68 a0 7b 13 f0       	push   $0xf0137ba0
f010ebb2:	68 19 01 00 00       	push   $0x119
f010ebb7:	68 74 76 13 f0       	push   $0xf0137674
f010ebbc:	e8 3a 16 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(9*kilo);
f010ebc1:	83 ec 0c             	sub    $0xc,%esp
f010ebc4:	68 00 24 00 00       	push   $0x2400
f010ebc9:	e8 e8 2f 02 00       	call   f0131bb6 <alloc_block_FF>
f010ebce:	83 c4 10             	add    $0x10,%esp
f010ebd1:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 9*kilo || blockToAlloc->sva != 0x7000)
f010ebd4:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ebd8:	74 1a                	je     f010ebf4 <test_alloc_block_FF+0x293>
f010ebda:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ebdd:	8b 40 0c             	mov    0xc(%eax),%eax
f010ebe0:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010ebe5:	75 0d                	jne    f010ebf4 <test_alloc_block_FF+0x293>
f010ebe7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ebea:	8b 40 08             	mov    0x8(%eax),%eax
f010ebed:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010ebf2:	74 17                	je     f010ec0b <test_alloc_block_FF+0x2aa>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010ebf4:	83 ec 04             	sub    $0x4,%esp
f010ebf7:	68 18 7c 13 f0       	push   $0xf0137c18
f010ebfc:	68 21 01 00 00       	push   $0x121
f010ec01:	68 74 76 13 f0       	push   $0xf0137674
f010ec06:	e8 f0 15 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ec0b:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010ec10:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010ec13:	75 13                	jne    f010ec28 <test_alloc_block_FF+0x2c7>
f010ec15:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010ec1a:	83 f8 07             	cmp    $0x7,%eax
f010ec1d:	75 09                	jne    f010ec28 <test_alloc_block_FF+0x2c7>
f010ec1f:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010ec24:	85 c0                	test   %eax,%eax
f010ec26:	74 17                	je     f010ec3f <test_alloc_block_FF+0x2de>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010ec28:	83 ec 04             	sub    $0x4,%esp
f010ec2b:	68 5c 7c 13 f0       	push   $0xf0137c5c
f010ec30:	68 25 01 00 00       	push   $0x125
f010ec35:	68 74 76 13 f0       	push   $0xf0137674
f010ec3a:	e8 bc 15 ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010ec3f:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010ec46:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_FF-1;
f010ec49:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010ec50:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010ec57:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010ec5e:	83 ec 0c             	sub    $0xc,%esp
f010ec61:	ff 75 d8             	pushl  -0x28(%ebp)
f010ec64:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010ec6a:	50                   	push   %eax
f010ec6b:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ec6e:	50                   	push   %eax
f010ec6f:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010ec72:	50                   	push   %eax
f010ec73:	68 64 7b 65 f0       	push   $0xf0657b64
f010ec78:	e8 5b 1c 00 00       	call   f01108d8 <check_list_data>
f010ec7d:	83 c4 20             	add    $0x20,%esp
f010ec80:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010ec83:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010ec87:	74 17                	je     f010eca0 <test_alloc_block_FF+0x33f>
f010ec89:	83 ec 04             	sub    $0x4,%esp
f010ec8c:	68 c0 7c 13 f0       	push   $0xf0137cc0
f010ec91:	68 2d 01 00 00       	push   $0x12d
f010ec96:	68 74 76 13 f0       	push   $0xf0137674
f010ec9b:	e8 5b 15 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010eca0:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010eca6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010eca9:	74 17                	je     f010ecc2 <test_alloc_block_FF+0x361>
f010ecab:	83 ec 04             	sub    $0x4,%esp
f010ecae:	68 0c 7d 13 f0       	push   $0xf0137d0c
f010ecb3:	68 2e 01 00 00       	push   $0x12e
f010ecb8:	68 74 76 13 f0       	push   $0xf0137674
f010ecbd:	e8 39 15 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(1*Mega);
f010ecc2:	83 ec 0c             	sub    $0xc,%esp
f010ecc5:	68 00 00 10 00       	push   $0x100000
f010ecca:	e8 e7 2e 02 00       	call   f0131bb6 <alloc_block_FF>
f010eccf:	83 c4 10             	add    $0x10,%esp
f010ecd2:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010ecd5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ecd9:	74 1a                	je     f010ecf5 <test_alloc_block_FF+0x394>
f010ecdb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ecde:	8b 40 0c             	mov    0xc(%eax),%eax
f010ece1:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010ece6:	75 0d                	jne    f010ecf5 <test_alloc_block_FF+0x394>
f010ece8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010eceb:	8b 40 08             	mov    0x8(%eax),%eax
f010ecee:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010ecf3:	74 17                	je     f010ed0c <test_alloc_block_FF+0x3ab>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010ecf5:	83 ec 04             	sub    $0x4,%esp
f010ecf8:	68 18 7c 13 f0       	push   $0xf0137c18
f010ecfd:	68 36 01 00 00       	push   $0x136
f010ed02:	68 74 76 13 f0       	push   $0xf0137674
f010ed07:	e8 ef 14 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ed0c:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010ed11:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010ed14:	4a                   	dec    %edx
f010ed15:	39 d0                	cmp    %edx,%eax
f010ed17:	75 13                	jne    f010ed2c <test_alloc_block_FF+0x3cb>
f010ed19:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010ed1e:	83 f8 07             	cmp    $0x7,%eax
f010ed21:	75 09                	jne    f010ed2c <test_alloc_block_FF+0x3cb>
f010ed23:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010ed28:	85 c0                	test   %eax,%eax
f010ed2a:	74 17                	je     f010ed43 <test_alloc_block_FF+0x3e2>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010ed2c:	83 ec 04             	sub    $0x4,%esp
f010ed2f:	68 5c 7c 13 f0       	push   $0xf0137c5c
f010ed34:	68 3a 01 00 00       	push   $0x13a
f010ed39:	68 74 76 13 f0       	push   $0xf0137674
f010ed3e:	e8 b8 14 ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010ed43:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010ed4a:	00 00 00 
	actualSize = numOfFreeBlocks_FF-1;
f010ed4d:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010ed54:	c7 45 c8 00 a4 11 00 	movl   $0x11a400,-0x38(%ebp)
	BlocksSizes[5] = 1*Mega;
f010ed5b:	c7 45 a8 00 00 10 00 	movl   $0x100000,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010ed62:	83 ec 0c             	sub    $0xc,%esp
f010ed65:	ff 75 d8             	pushl  -0x28(%ebp)
f010ed68:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010ed6e:	50                   	push   %eax
f010ed6f:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ed72:	50                   	push   %eax
f010ed73:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010ed76:	50                   	push   %eax
f010ed77:	68 64 7b 65 f0       	push   $0xf0657b64
f010ed7c:	e8 57 1b 00 00       	call   f01108d8 <check_list_data>
f010ed81:	83 c4 20             	add    $0x20,%esp
f010ed84:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010ed87:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010ed8b:	74 17                	je     f010eda4 <test_alloc_block_FF+0x443>
f010ed8d:	83 ec 04             	sub    $0x4,%esp
f010ed90:	68 c0 7c 13 f0       	push   $0xf0137cc0
f010ed95:	68 42 01 00 00       	push   $0x142
f010ed9a:	68 74 76 13 f0       	push   $0xf0137674
f010ed9f:	e8 57 14 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010eda4:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010edaa:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010edad:	74 17                	je     f010edc6 <test_alloc_block_FF+0x465>
f010edaf:	83 ec 04             	sub    $0x4,%esp
f010edb2:	68 0c 7d 13 f0       	push   $0xf0137d0c
f010edb7:	68 43 01 00 00       	push   $0x143
f010edbc:	68 74 76 13 f0       	push   $0xf0137674
f010edc1:	e8 35 14 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_FF completed successfully.\n");
f010edc6:	83 ec 0c             	sub    $0xc,%esp
f010edc9:	68 58 7d 13 f0       	push   $0xf0137d58
f010edce:	e8 af 1e ff ff       	call   f0100c82 <cprintf>
f010edd3:	83 c4 10             	add    $0x10,%esp
}
f010edd6:	90                   	nop
f010edd7:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010edda:	5b                   	pop    %ebx
f010eddb:	5e                   	pop    %esi
f010eddc:	5f                   	pop    %edi
f010eddd:	5d                   	pop    %ebp
f010edde:	c3                   	ret    

f010eddf <test_alloc_block_BF>:

void test_alloc_block_BF()
{
f010eddf:	55                   	push   %ebp
f010ede0:	89 e5                	mov    %esp,%ebp
f010ede2:	57                   	push   %edi
f010ede3:	56                   	push   %esi
f010ede4:	53                   	push   %ebx
f010ede5:	81 ec cc 00 00 00    	sub    $0xcc,%esp
	uint32 numOfBlocks = 10;
f010edeb:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010edf2:	83 ec 0c             	sub    $0xc,%esp
f010edf5:	ff 75 e0             	pushl  -0x20(%ebp)
f010edf8:	e8 f7 29 02 00       	call   f01317f4 <initialize_MemBlocksList>
f010edfd:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010ee00:	c7 05 c8 7a 65 f0 00 	movl   $0x0,0xf0657ac8
f010ee07:	00 00 00 
f010ee0a:	c7 05 cc 7a 65 f0 00 	movl   $0x0,0xf0657acc
f010ee11:	00 00 00 
f010ee14:	c7 05 d4 7a 65 f0 00 	movl   $0x0,0xf0657ad4
f010ee1b:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_BF 7
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
f010ee1e:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010ee21:	bb d4 7f 13 f0       	mov    $0xf0137fd4,%ebx
f010ee26:	ba 07 00 00 00       	mov    $0x7,%edx
f010ee2b:	89 c7                	mov    %eax,%edi
f010ee2d:	89 de                	mov    %ebx,%esi
f010ee2f:	89 d1                	mov    %edx,%ecx
f010ee31:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;
f010ee33:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010ee36:	bb f0 7f 13 f0       	mov    $0xf0137ff0,%ebx
f010ee3b:	ba 07 00 00 00       	mov    $0x7,%edx
f010ee40:	89 c7                	mov    %eax,%edi
f010ee42:	89 de                	mov    %ebx,%esi
f010ee44:	89 d1                	mov    %edx,%ecx
f010ee46:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010ee48:	c7 05 64 7b 65 f0 00 	movl   $0x0,0xf0657b64
f010ee4f:	00 00 00 
f010ee52:	c7 05 68 7b 65 f0 00 	movl   $0x0,0xf0657b68
f010ee59:	00 00 00 
f010ee5c:	c7 05 70 7b 65 f0 00 	movl   $0x0,0xf0657b70
f010ee63:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010ee66:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010ee6d:	e9 5f 01 00 00       	jmp    f010efd1 <test_alloc_block_BF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010ee72:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ee75:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f010ee79:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ee7c:	c1 e2 04             	shl    $0x4,%edx
f010ee7f:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ee82:	01 da                	add    %ebx,%edx
f010ee84:	81 ea b4 00 00 00    	sub    $0xb4,%edx
f010ee8a:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010ee8c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ee8f:	8b 44 85 9c          	mov    -0x64(%ebp,%eax,4),%eax
f010ee93:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ee96:	c1 e2 04             	shl    $0x4,%edx
f010ee99:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ee9c:	01 f2                	add    %esi,%edx
f010ee9e:	81 ea b0 00 00 00    	sub    $0xb0,%edx
f010eea4:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010eea6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010eeaa:	0f 85 92 00 00 00    	jne    f010ef42 <test_alloc_block_BF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010eeb0:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f010eeb5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010eeb8:	c1 e2 04             	shl    $0x4,%edx
f010eebb:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010eebe:	01 fa                	add    %edi,%edx
f010eec0:	81 ea bc 00 00 00    	sub    $0xbc,%edx
f010eec6:	89 02                	mov    %eax,(%edx)
f010eec8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010eecb:	c1 e0 04             	shl    $0x4,%eax
f010eece:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010eed1:	01 d8                	add    %ebx,%eax
f010eed3:	2d bc 00 00 00       	sub    $0xbc,%eax
f010eed8:	8b 00                	mov    (%eax),%eax
f010eeda:	85 c0                	test   %eax,%eax
f010eedc:	74 18                	je     f010eef6 <test_alloc_block_BF+0x117>
f010eede:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f010eee3:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010eee9:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010eeec:	c1 e1 04             	shl    $0x4,%ecx
f010eeef:	01 ca                	add    %ecx,%edx
f010eef1:	89 50 04             	mov    %edx,0x4(%eax)
f010eef4:	eb 13                	jmp    f010ef09 <test_alloc_block_BF+0x12a>
f010eef6:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010eefc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010eeff:	c1 e2 04             	shl    $0x4,%edx
f010ef02:	01 d0                	add    %edx,%eax
f010ef04:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f010ef09:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010ef0f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ef12:	c1 e2 04             	shl    $0x4,%edx
f010ef15:	01 d0                	add    %edx,%eax
f010ef17:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f010ef1c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ef1f:	c1 e0 04             	shl    $0x4,%eax
f010ef22:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ef25:	01 f0                	add    %esi,%eax
f010ef27:	2d b8 00 00 00       	sub    $0xb8,%eax
f010ef2c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010ef32:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010ef37:	40                   	inc    %eax
f010ef38:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
f010ef3d:	e9 8c 00 00 00       	jmp    f010efce <test_alloc_block_BF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010ef42:	a1 68 7b 65 f0       	mov    0xf0657b68,%eax
f010ef47:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ef4a:	c1 e2 04             	shl    $0x4,%edx
f010ef4d:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010ef50:	01 fa                	add    %edi,%edx
f010ef52:	81 ea b8 00 00 00    	sub    $0xb8,%edx
f010ef58:	89 02                	mov    %eax,(%edx)
f010ef5a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ef5d:	c1 e0 04             	shl    $0x4,%eax
f010ef60:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ef63:	01 d8                	add    %ebx,%eax
f010ef65:	2d b8 00 00 00       	sub    $0xb8,%eax
f010ef6a:	8b 00                	mov    (%eax),%eax
f010ef6c:	85 c0                	test   %eax,%eax
f010ef6e:	74 17                	je     f010ef87 <test_alloc_block_BF+0x1a8>
f010ef70:	a1 68 7b 65 f0       	mov    0xf0657b68,%eax
f010ef75:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010ef7b:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010ef7e:	c1 e1 04             	shl    $0x4,%ecx
f010ef81:	01 ca                	add    %ecx,%edx
f010ef83:	89 10                	mov    %edx,(%eax)
f010ef85:	eb 13                	jmp    f010ef9a <test_alloc_block_BF+0x1bb>
f010ef87:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010ef8d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ef90:	c1 e2 04             	shl    $0x4,%edx
f010ef93:	01 d0                	add    %edx,%eax
f010ef95:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f010ef9a:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010efa0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010efa3:	c1 e2 04             	shl    $0x4,%edx
f010efa6:	01 d0                	add    %edx,%eax
f010efa8:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f010efad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010efb0:	c1 e0 04             	shl    $0x4,%eax
f010efb3:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010efb6:	01 f0                	add    %esi,%eax
f010efb8:	2d bc 00 00 00       	sub    $0xbc,%eax
f010efbd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010efc3:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010efc8:	40                   	inc    %eax
f010efc9:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010efce:	ff 45 e4             	incl   -0x1c(%ebp)
f010efd1:	83 7d e4 06          	cmpl   $0x6,-0x1c(%ebp)
f010efd5:	0f 8e 97 fe ff ff    	jle    f010ee72 <test_alloc_block_BF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_BF(4*Mega);
f010efdb:	83 ec 0c             	sub    $0xc,%esp
f010efde:	68 00 00 40 00       	push   $0x400000
f010efe3:	e8 9b 2d 02 00       	call   f0131d83 <alloc_block_BF>
f010efe8:	83 c4 10             	add    $0x10,%esp
f010efeb:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a block instead no existing free blocks with the given size.");
f010efee:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010eff2:	74 17                	je     f010f00b <test_alloc_block_BF+0x22c>
f010eff4:	83 ec 04             	sub    $0x4,%esp
f010eff7:	68 e0 7d 13 f0       	push   $0xf0137de0
f010effc:	68 66 01 00 00       	push   $0x166
f010f001:	68 74 76 13 f0       	push   $0xf0137674
f010f006:	e8 f0 11 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f00b:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010f010:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f013:	75 13                	jne    f010f028 <test_alloc_block_BF+0x249>
f010f015:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f01a:	83 f8 07             	cmp    $0x7,%eax
f010f01d:	75 09                	jne    f010f028 <test_alloc_block_BF+0x249>
f010f01f:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010f024:	85 c0                	test   %eax,%eax
f010f026:	74 17                	je     f010f03f <test_alloc_block_BF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010f028:	83 ec 04             	sub    $0x4,%esp
f010f02b:	68 a0 7b 13 f0       	push   $0xf0137ba0
f010f030:	68 6a 01 00 00       	push   $0x16a
f010f035:	68 74 76 13 f0       	push   $0xf0137674
f010f03a:	e8 bc 11 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (NOT THE FIRST BLOCK FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010f03f:	83 ec 0c             	sub    $0xc,%esp
f010f042:	68 00 00 10 00       	push   $0x100000
f010f047:	e8 37 2d 02 00       	call   f0131d83 <alloc_block_BF>
f010f04c:	83 c4 10             	add    $0x10,%esp
f010f04f:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x21B400)
f010f052:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f056:	74 1a                	je     f010f072 <test_alloc_block_BF+0x293>
f010f058:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f05b:	8b 40 0c             	mov    0xc(%eax),%eax
f010f05e:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010f063:	75 0d                	jne    f010f072 <test_alloc_block_BF+0x293>
f010f065:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f068:	8b 40 08             	mov    0x8(%eax),%eax
f010f06b:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010f070:	74 17                	je     f010f089 <test_alloc_block_BF+0x2aa>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010f072:	83 ec 04             	sub    $0x4,%esp
f010f075:	68 54 7e 13 f0       	push   $0xf0137e54
f010f07a:	68 72 01 00 00       	push   $0x172
f010f07f:	68 74 76 13 f0       	push   $0xf0137674
f010f084:	e8 72 11 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f089:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010f08e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f091:	75 13                	jne    f010f0a6 <test_alloc_block_BF+0x2c7>
f010f093:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f098:	83 f8 06             	cmp    $0x6,%eax
f010f09b:	75 09                	jne    f010f0a6 <test_alloc_block_BF+0x2c7>
f010f09d:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010f0a2:	85 c0                	test   %eax,%eax
f010f0a4:	74 17                	je     f010f0bd <test_alloc_block_BF+0x2de>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f0a6:	83 ec 04             	sub    $0x4,%esp
f010f0a9:	68 98 7e 13 f0       	push   $0xf0137e98
f010f0ae:	68 76 01 00 00       	push   $0x176
f010f0b3:	68 74 76 13 f0       	push   $0xf0137674
f010f0b8:	e8 3e 11 ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010f0bd:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010f0c4:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_BF-1;
f010f0c7:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0;
f010f0ce:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	BlocksSizes[6] = 0;
f010f0d5:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f0dc:	83 ec 0c             	sub    $0xc,%esp
f010f0df:	ff 75 d8             	pushl  -0x28(%ebp)
f010f0e2:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010f0e8:	50                   	push   %eax
f010f0e9:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f0ec:	50                   	push   %eax
f010f0ed:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f0f0:	50                   	push   %eax
f010f0f1:	68 64 7b 65 f0       	push   $0xf0657b64
f010f0f6:	e8 dd 17 00 00       	call   f01108d8 <check_list_data>
f010f0fb:	83 c4 20             	add    $0x20,%esp
f010f0fe:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010f101:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f105:	74 17                	je     f010f11e <test_alloc_block_BF+0x33f>
f010f107:	83 ec 04             	sub    $0x4,%esp
f010f10a:	68 fc 7e 13 f0       	push   $0xf0137efc
f010f10f:	68 7e 01 00 00       	push   $0x17e
f010f114:	68 74 76 13 f0       	push   $0xf0137674
f010f119:	e8 dd 10 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010f11e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f124:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f127:	74 17                	je     f010f140 <test_alloc_block_BF+0x361>
f010f129:	83 ec 04             	sub    $0x4,%esp
f010f12c:	68 48 7f 13 f0       	push   $0xf0137f48
f010f131:	68 7f 01 00 00       	push   $0x17f
f010f136:	68 74 76 13 f0       	push   $0xf0137674
f010f13b:	e8 bb 10 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of any existing free block (ONLY ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010f140:	83 ec 0c             	sub    $0xc,%esp
f010f143:	68 00 00 10 00       	push   $0x100000
f010f148:	e8 36 2c 02 00       	call   f0131d83 <alloc_block_BF>
f010f14d:	83 c4 10             	add    $0x10,%esp
f010f150:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010f153:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f157:	74 1a                	je     f010f173 <test_alloc_block_BF+0x394>
f010f159:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f15c:	8b 40 0c             	mov    0xc(%eax),%eax
f010f15f:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010f164:	75 0d                	jne    f010f173 <test_alloc_block_BF+0x394>
f010f166:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f169:	8b 40 08             	mov    0x8(%eax),%eax
f010f16c:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010f171:	74 17                	je     f010f18a <test_alloc_block_BF+0x3ab>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010f173:	83 ec 04             	sub    $0x4,%esp
f010f176:	68 54 7e 13 f0       	push   $0xf0137e54
f010f17b:	68 87 01 00 00       	push   $0x187
f010f180:	68 74 76 13 f0       	push   $0xf0137674
f010f185:	e8 71 10 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f18a:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010f18f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f192:	4a                   	dec    %edx
f010f193:	39 d0                	cmp    %edx,%eax
f010f195:	75 13                	jne    f010f1aa <test_alloc_block_BF+0x3cb>
f010f197:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f19c:	83 f8 06             	cmp    $0x6,%eax
f010f19f:	75 09                	jne    f010f1aa <test_alloc_block_BF+0x3cb>
f010f1a1:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010f1a6:	85 c0                	test   %eax,%eax
f010f1a8:	74 17                	je     f010f1c1 <test_alloc_block_BF+0x3e2>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f1aa:	83 ec 04             	sub    $0x4,%esp
f010f1ad:	68 98 7e 13 f0       	push   $0xf0137e98
f010f1b2:	68 8b 01 00 00       	push   $0x18b
f010f1b7:	68 74 76 13 f0       	push   $0xf0137674
f010f1bc:	e8 3a 10 ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f1c1:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010f1c8:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010f1cb:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010f1d2:	c7 45 cc 00 a4 11 00 	movl   $0x11a400,-0x34(%ebp)
	BlocksSizes[5] = 1*Mega;
f010f1d9:	c7 45 b0 00 00 10 00 	movl   $0x100000,-0x50(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f1e0:	83 ec 0c             	sub    $0xc,%esp
f010f1e3:	ff 75 d8             	pushl  -0x28(%ebp)
f010f1e6:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010f1ec:	50                   	push   %eax
f010f1ed:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f1f0:	50                   	push   %eax
f010f1f1:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f1f4:	50                   	push   %eax
f010f1f5:	68 64 7b 65 f0       	push   $0xf0657b64
f010f1fa:	e8 d9 16 00 00       	call   f01108d8 <check_list_data>
f010f1ff:	83 c4 20             	add    $0x20,%esp
f010f202:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010f205:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f209:	74 17                	je     f010f222 <test_alloc_block_BF+0x443>
f010f20b:	83 ec 04             	sub    $0x4,%esp
f010f20e:	68 fc 7e 13 f0       	push   $0xf0137efc
f010f213:	68 93 01 00 00       	push   $0x193
f010f218:	68 74 76 13 f0       	push   $0xf0137674
f010f21d:	e8 d9 0f ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010f222:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f228:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f22b:	74 17                	je     f010f244 <test_alloc_block_BF+0x465>
f010f22d:	83 ec 04             	sub    $0x4,%esp
f010f230:	68 48 7f 13 f0       	push   $0xf0137f48
f010f235:	68 94 01 00 00       	push   $0x194
f010f23a:	68 74 76 13 f0       	push   $0xf0137674
f010f23f:	e8 b7 0f ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (MORE THAN ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(3*kilo);
f010f244:	83 ec 0c             	sub    $0xc,%esp
f010f247:	68 00 0c 00 00       	push   $0xc00
f010f24c:	e8 32 2b 02 00       	call   f0131d83 <alloc_block_BF>
f010f251:	83 c4 10             	add    $0x10,%esp
f010f254:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x19000)
f010f257:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f25b:	74 1a                	je     f010f277 <test_alloc_block_BF+0x498>
f010f25d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f260:	8b 40 0c             	mov    0xc(%eax),%eax
f010f263:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010f268:	75 0d                	jne    f010f277 <test_alloc_block_BF+0x498>
f010f26a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f26d:	8b 40 08             	mov    0x8(%eax),%eax
f010f270:	3d 00 90 01 00       	cmp    $0x19000,%eax
f010f275:	74 17                	je     f010f28e <test_alloc_block_BF+0x4af>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010f277:	83 ec 04             	sub    $0x4,%esp
f010f27a:	68 54 7e 13 f0       	push   $0xf0137e54
f010f27f:	68 9c 01 00 00       	push   $0x19c
f010f284:	68 74 76 13 f0       	push   $0xf0137674
f010f289:	e8 6d 0f ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f28e:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010f293:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f296:	83 ea 02             	sub    $0x2,%edx
f010f299:	39 d0                	cmp    %edx,%eax
f010f29b:	75 13                	jne    f010f2b0 <test_alloc_block_BF+0x4d1>
f010f29d:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f2a2:	83 f8 06             	cmp    $0x6,%eax
f010f2a5:	75 09                	jne    f010f2b0 <test_alloc_block_BF+0x4d1>
f010f2a7:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010f2ac:	85 c0                	test   %eax,%eax
f010f2ae:	74 17                	je     f010f2c7 <test_alloc_block_BF+0x4e8>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f2b0:	83 ec 04             	sub    $0x4,%esp
f010f2b3:	68 98 7e 13 f0       	push   $0xf0137e98
f010f2b8:	68 a0 01 00 00       	push   $0x1a0
f010f2bd:	68 74 76 13 f0       	push   $0xf0137674
f010f2c2:	e8 34 0f ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f2c7:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010f2ce:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010f2d1:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[4] = 0x19C00;  //100KB + 3KB
f010f2d8:	c7 45 c8 00 9c 01 00 	movl   $0x19c00,-0x38(%ebp)
	BlocksSizes[4] = 1*kilo;
f010f2df:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f2e6:	83 ec 0c             	sub    $0xc,%esp
f010f2e9:	ff 75 d8             	pushl  -0x28(%ebp)
f010f2ec:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010f2f2:	50                   	push   %eax
f010f2f3:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f2f6:	50                   	push   %eax
f010f2f7:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f2fa:	50                   	push   %eax
f010f2fb:	68 64 7b 65 f0       	push   $0xf0657b64
f010f300:	e8 d3 15 00 00       	call   f01108d8 <check_list_data>
f010f305:	83 c4 20             	add    $0x20,%esp
f010f308:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010f30b:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f30f:	74 17                	je     f010f328 <test_alloc_block_BF+0x549>
f010f311:	83 ec 04             	sub    $0x4,%esp
f010f314:	68 fc 7e 13 f0       	push   $0xf0137efc
f010f319:	68 a8 01 00 00       	push   $0x1a8
f010f31e:	68 74 76 13 f0       	push   $0xf0137674
f010f323:	e8 d3 0e ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010f328:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f32e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f331:	74 17                	je     f010f34a <test_alloc_block_BF+0x56b>
f010f333:	83 ec 04             	sub    $0x4,%esp
f010f336:	68 48 7f 13 f0       	push   $0xf0137f48
f010f33b:	68 a9 01 00 00       	push   $0x1a9
f010f340:	68 74 76 13 f0       	push   $0xf0137674
f010f345:	e8 b1 0e ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 5: Try to allocate a block @ the head of the free block list */
	blockToAlloc = alloc_block_BF(2*kilo);
f010f34a:	83 ec 0c             	sub    $0xc,%esp
f010f34d:	68 00 08 00 00       	push   $0x800
f010f352:	e8 2c 2a 02 00       	call   f0131d83 <alloc_block_BF>
f010f357:	83 c4 10             	add    $0x10,%esp
f010f35a:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*kilo || blockToAlloc->sva != 0x0)
f010f35d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f361:	74 17                	je     f010f37a <test_alloc_block_BF+0x59b>
f010f363:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f366:	8b 40 0c             	mov    0xc(%eax),%eax
f010f369:	3d 00 08 00 00       	cmp    $0x800,%eax
f010f36e:	75 0a                	jne    f010f37a <test_alloc_block_BF+0x59b>
f010f370:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f373:	8b 40 08             	mov    0x8(%eax),%eax
f010f376:	85 c0                	test   %eax,%eax
f010f378:	74 17                	je     f010f391 <test_alloc_block_BF+0x5b2>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010f37a:	83 ec 04             	sub    $0x4,%esp
f010f37d:	68 54 7e 13 f0       	push   $0xf0137e54
f010f382:	68 b1 01 00 00       	push   $0x1b1
f010f387:	68 74 76 13 f0       	push   $0xf0137674
f010f38c:	e8 6a 0e ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f391:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010f396:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f399:	83 ea 02             	sub    $0x2,%edx
f010f39c:	39 d0                	cmp    %edx,%eax
f010f39e:	75 13                	jne    f010f3b3 <test_alloc_block_BF+0x5d4>
f010f3a0:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f3a5:	83 f8 05             	cmp    $0x5,%eax
f010f3a8:	75 09                	jne    f010f3b3 <test_alloc_block_BF+0x5d4>
f010f3aa:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010f3af:	85 c0                	test   %eax,%eax
f010f3b1:	74 17                	je     f010f3ca <test_alloc_block_BF+0x5eb>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f3b3:	83 ec 04             	sub    $0x4,%esp
f010f3b6:	68 98 7e 13 f0       	push   $0xf0137e98
f010f3bb:	68 b5 01 00 00       	push   $0x1b5
f010f3c0:	68 74 76 13 f0       	push   $0xf0137674
f010f3c5:	e8 31 0e ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f3ca:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010f3d1:	00 00 00 
	actualSize = numOfFreeBlocks_BF-2;
f010f3d4:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0x0;
f010f3db:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
	BlocksSizes[0] = 0;
f010f3e2:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f3e9:	83 ec 0c             	sub    $0xc,%esp
f010f3ec:	ff 75 d8             	pushl  -0x28(%ebp)
f010f3ef:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010f3f5:	50                   	push   %eax
f010f3f6:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f3f9:	50                   	push   %eax
f010f3fa:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f3fd:	50                   	push   %eax
f010f3fe:	68 64 7b 65 f0       	push   $0xf0657b64
f010f403:	e8 d0 14 00 00       	call   f01108d8 <check_list_data>
f010f408:	83 c4 20             	add    $0x20,%esp
f010f40b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010f40e:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f412:	74 17                	je     f010f42b <test_alloc_block_BF+0x64c>
f010f414:	83 ec 04             	sub    $0x4,%esp
f010f417:	68 fc 7e 13 f0       	push   $0xf0137efc
f010f41c:	68 bd 01 00 00       	push   $0x1bd
f010f421:	68 74 76 13 f0       	push   $0xf0137674
f010f426:	e8 d0 0d ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010f42b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f431:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f434:	74 17                	je     f010f44d <test_alloc_block_BF+0x66e>
f010f436:	83 ec 04             	sub    $0x4,%esp
f010f439:	68 48 7f 13 f0       	push   $0xf0137f48
f010f43e:	68 be 01 00 00       	push   $0x1be
f010f443:	68 74 76 13 f0       	push   $0xf0137674
f010f448:	e8 ae 0d ff ff       	call   f01001fb <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_BF completed successfully.\n");
f010f44d:	83 ec 0c             	sub    $0xc,%esp
f010f450:	68 94 7f 13 f0       	push   $0xf0137f94
f010f455:	e8 28 18 ff ff       	call   f0100c82 <cprintf>
f010f45a:	83 c4 10             	add    $0x10,%esp
}
f010f45d:	90                   	nop
f010f45e:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f461:	5b                   	pop    %ebx
f010f462:	5e                   	pop    %esi
f010f463:	5f                   	pop    %edi
f010f464:	5d                   	pop    %ebp
f010f465:	c3                   	ret    

f010f466 <test_alloc_block_NF>:

void test_alloc_block_NF()
{
f010f466:	55                   	push   %ebp
f010f467:	89 e5                	mov    %esp,%ebp
f010f469:	57                   	push   %edi
f010f46a:	56                   	push   %esi
f010f46b:	53                   	push   %ebx
f010f46c:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010f472:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010f479:	83 ec 0c             	sub    $0xc,%esp
f010f47c:	ff 75 e0             	pushl  -0x20(%ebp)
f010f47f:	e8 70 23 02 00       	call   f01317f4 <initialize_MemBlocksList>
f010f484:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010f487:	c7 05 c8 7a 65 f0 00 	movl   $0x0,0xf0657ac8
f010f48e:	00 00 00 
f010f491:	c7 05 cc 7a 65 f0 00 	movl   $0x0,0xf0657acc
f010f498:	00 00 00 
f010f49b:	c7 05 d4 7a 65 f0 00 	movl   $0x0,0xf0657ad4
f010f4a2:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_NF 8
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010f4a5:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f4a8:	bb a0 7d 13 f0       	mov    $0xf0137da0,%ebx
f010f4ad:	ba 08 00 00 00       	mov    $0x8,%edx
f010f4b2:	89 c7                	mov    %eax,%edi
f010f4b4:	89 de                	mov    %ebx,%esi
f010f4b6:	89 d1                	mov    %edx,%ecx
f010f4b8:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;
f010f4ba:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f4bd:	bb 00 82 13 f0       	mov    $0xf0138200,%ebx
f010f4c2:	ba 08 00 00 00       	mov    $0x8,%edx
f010f4c7:	89 c7                	mov    %eax,%edi
f010f4c9:	89 de                	mov    %ebx,%esi
f010f4cb:	89 d1                	mov    %edx,%ecx
f010f4cd:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010f4cf:	c7 05 64 7b 65 f0 00 	movl   $0x0,0xf0657b64
f010f4d6:	00 00 00 
f010f4d9:	c7 05 68 7b 65 f0 00 	movl   $0x0,0xf0657b68
f010f4e0:	00 00 00 
f010f4e3:	c7 05 70 7b 65 f0 00 	movl   $0x0,0xf0657b70
f010f4ea:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010f4ed:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010f4f4:	e9 5f 01 00 00       	jmp    f010f658 <test_alloc_block_NF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010f4f9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f4fc:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010f500:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f503:	c1 e2 04             	shl    $0x4,%edx
f010f506:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f509:	01 da                	add    %ebx,%edx
f010f50b:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010f511:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010f513:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f516:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010f51a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f51d:	c1 e2 04             	shl    $0x4,%edx
f010f520:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f523:	01 f2                	add    %esi,%edx
f010f525:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010f52b:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010f52d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010f531:	0f 85 92 00 00 00    	jne    f010f5c9 <test_alloc_block_NF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010f537:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f010f53c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f53f:	c1 e2 04             	shl    $0x4,%edx
f010f542:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f545:	01 fa                	add    %edi,%edx
f010f547:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010f54d:	89 02                	mov    %eax,(%edx)
f010f54f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f552:	c1 e0 04             	shl    $0x4,%eax
f010f555:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f558:	01 d8                	add    %ebx,%eax
f010f55a:	2d d4 00 00 00       	sub    $0xd4,%eax
f010f55f:	8b 00                	mov    (%eax),%eax
f010f561:	85 c0                	test   %eax,%eax
f010f563:	74 18                	je     f010f57d <test_alloc_block_NF+0x117>
f010f565:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f010f56a:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010f570:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f573:	c1 e1 04             	shl    $0x4,%ecx
f010f576:	01 ca                	add    %ecx,%edx
f010f578:	89 50 04             	mov    %edx,0x4(%eax)
f010f57b:	eb 13                	jmp    f010f590 <test_alloc_block_NF+0x12a>
f010f57d:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f583:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f586:	c1 e2 04             	shl    $0x4,%edx
f010f589:	01 d0                	add    %edx,%eax
f010f58b:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f010f590:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f596:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f599:	c1 e2 04             	shl    $0x4,%edx
f010f59c:	01 d0                	add    %edx,%eax
f010f59e:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f010f5a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f5a6:	c1 e0 04             	shl    $0x4,%eax
f010f5a9:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f5ac:	01 f0                	add    %esi,%eax
f010f5ae:	2d d0 00 00 00       	sub    $0xd0,%eax
f010f5b3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f5b9:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f5be:	40                   	inc    %eax
f010f5bf:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
f010f5c4:	e9 8c 00 00 00       	jmp    f010f655 <test_alloc_block_NF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010f5c9:	a1 68 7b 65 f0       	mov    0xf0657b68,%eax
f010f5ce:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f5d1:	c1 e2 04             	shl    $0x4,%edx
f010f5d4:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f5d7:	01 fa                	add    %edi,%edx
f010f5d9:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010f5df:	89 02                	mov    %eax,(%edx)
f010f5e1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f5e4:	c1 e0 04             	shl    $0x4,%eax
f010f5e7:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f5ea:	01 d8                	add    %ebx,%eax
f010f5ec:	2d d0 00 00 00       	sub    $0xd0,%eax
f010f5f1:	8b 00                	mov    (%eax),%eax
f010f5f3:	85 c0                	test   %eax,%eax
f010f5f5:	74 17                	je     f010f60e <test_alloc_block_NF+0x1a8>
f010f5f7:	a1 68 7b 65 f0       	mov    0xf0657b68,%eax
f010f5fc:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010f602:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f605:	c1 e1 04             	shl    $0x4,%ecx
f010f608:	01 ca                	add    %ecx,%edx
f010f60a:	89 10                	mov    %edx,(%eax)
f010f60c:	eb 13                	jmp    f010f621 <test_alloc_block_NF+0x1bb>
f010f60e:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f614:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f617:	c1 e2 04             	shl    $0x4,%edx
f010f61a:	01 d0                	add    %edx,%eax
f010f61c:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f010f621:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f627:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f62a:	c1 e2 04             	shl    $0x4,%edx
f010f62d:	01 d0                	add    %edx,%eax
f010f62f:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f010f634:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f637:	c1 e0 04             	shl    $0x4,%eax
f010f63a:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f63d:	01 f0                	add    %esi,%eax
f010f63f:	2d d4 00 00 00       	sub    $0xd4,%eax
f010f644:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f64a:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f64f:	40                   	inc    %eax
f010f650:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010f655:	ff 45 e4             	incl   -0x1c(%ebp)
f010f658:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010f65c:	0f 8e 97 fe ff ff    	jle    f010f4f9 <test_alloc_block_NF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*NF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_NF(10*Mega);
f010f662:	83 ec 0c             	sub    $0xc,%esp
f010f665:	68 00 00 a0 00       	push   $0xa00000
f010f66a:	e8 25 29 02 00       	call   f0131f94 <alloc_block_NF>
f010f66f:	83 c4 10             	add    $0x10,%esp
f010f672:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a block instead no existing free blocks with the given size.");
f010f675:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f679:	74 17                	je     f010f692 <test_alloc_block_NF+0x22c>
f010f67b:	83 ec 04             	sub    $0x4,%esp
f010f67e:	68 0c 80 13 f0       	push   $0xf013800c
f010f683:	68 e1 01 00 00       	push   $0x1e1
f010f688:	68 74 76 13 f0       	push   $0xf0137674
f010f68d:	e8 69 0b ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f692:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010f697:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f69a:	75 13                	jne    f010f6af <test_alloc_block_NF+0x249>
f010f69c:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f6a1:	83 f8 08             	cmp    $0x8,%eax
f010f6a4:	75 09                	jne    f010f6af <test_alloc_block_NF+0x249>
f010f6a6:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010f6ab:	85 c0                	test   %eax,%eax
f010f6ad:	74 17                	je     f010f6c6 <test_alloc_block_NF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010f6af:	83 ec 04             	sub    $0x4,%esp
f010f6b2:	68 a0 7b 13 f0       	push   $0xf0137ba0
f010f6b7:	68 e5 01 00 00       	push   $0x1e5
f010f6bc:	68 74 76 13 f0       	push   $0xf0137674
f010f6c1:	e8 35 0b ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (STARTING from 0)*/
	blockToAlloc = alloc_block_NF(10*kilo);
f010f6c6:	83 ec 0c             	sub    $0xc,%esp
f010f6c9:	68 00 28 00 00       	push   $0x2800
f010f6ce:	e8 c1 28 02 00       	call   f0131f94 <alloc_block_NF>
f010f6d3:	83 c4 10             	add    $0x10,%esp
f010f6d6:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 10*kilo || blockToAlloc->sva != 0x7000)
f010f6d9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f6dd:	74 1a                	je     f010f6f9 <test_alloc_block_NF+0x293>
f010f6df:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f6e2:	8b 40 0c             	mov    0xc(%eax),%eax
f010f6e5:	3d 00 28 00 00       	cmp    $0x2800,%eax
f010f6ea:	75 0d                	jne    f010f6f9 <test_alloc_block_NF+0x293>
f010f6ec:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f6ef:	8b 40 08             	mov    0x8(%eax),%eax
f010f6f2:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010f6f7:	74 17                	je     f010f710 <test_alloc_block_NF+0x2aa>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010f6f9:	83 ec 04             	sub    $0x4,%esp
f010f6fc:	68 80 80 13 f0       	push   $0xf0138080
f010f701:	68 ed 01 00 00       	push   $0x1ed
f010f706:	68 74 76 13 f0       	push   $0xf0137674
f010f70b:	e8 eb 0a ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f710:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010f715:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f718:	75 13                	jne    f010f72d <test_alloc_block_NF+0x2c7>
f010f71a:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f71f:	83 f8 07             	cmp    $0x7,%eax
f010f722:	75 09                	jne    f010f72d <test_alloc_block_NF+0x2c7>
f010f724:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010f729:	85 c0                	test   %eax,%eax
f010f72b:	74 17                	je     f010f744 <test_alloc_block_NF+0x2de>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f72d:	83 ec 04             	sub    $0x4,%esp
f010f730:	68 c4 80 13 f0       	push   $0xf01380c4
f010f735:	68 f1 01 00 00       	push   $0x1f1
f010f73a:	68 74 76 13 f0       	push   $0xf0137674
f010f73f:	e8 b7 0a ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010f744:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f74b:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_NF-1;
f010f74e:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010f755:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010f75c:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f763:	83 ec 0c             	sub    $0xc,%esp
f010f766:	ff 75 d8             	pushl  -0x28(%ebp)
f010f769:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f76f:	50                   	push   %eax
f010f770:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f773:	50                   	push   %eax
f010f774:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f777:	50                   	push   %eax
f010f778:	68 64 7b 65 f0       	push   $0xf0657b64
f010f77d:	e8 56 11 00 00       	call   f01108d8 <check_list_data>
f010f782:	83 c4 20             	add    $0x20,%esp
f010f785:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010f788:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f78c:	74 17                	je     f010f7a5 <test_alloc_block_NF+0x33f>
f010f78e:	83 ec 04             	sub    $0x4,%esp
f010f791:	68 28 81 13 f0       	push   $0xf0138128
f010f796:	68 f9 01 00 00       	push   $0x1f9
f010f79b:	68 74 76 13 f0       	push   $0xf0137674
f010f7a0:	e8 56 0a ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010f7a5:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f7ab:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f7ae:	74 17                	je     f010f7c7 <test_alloc_block_NF+0x361>
f010f7b0:	83 ec 04             	sub    $0x4,%esp
f010f7b3:	68 74 81 13 f0       	push   $0xf0138174
f010f7b8:	68 fa 01 00 00       	push   $0x1fa
f010f7bd:	68 74 76 13 f0       	push   $0xf0137674
f010f7c2:	e8 34 0a ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the one existing free blocks (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(2*Mega);
f010f7c7:	83 ec 0c             	sub    $0xc,%esp
f010f7ca:	68 00 00 20 00       	push   $0x200000
f010f7cf:	e8 c0 27 02 00       	call   f0131f94 <alloc_block_NF>
f010f7d4:	83 c4 10             	add    $0x10,%esp
f010f7d7:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*Mega || blockToAlloc->sva != 0x1A400)
f010f7da:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f7de:	74 1a                	je     f010f7fa <test_alloc_block_NF+0x394>
f010f7e0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f7e3:	8b 40 0c             	mov    0xc(%eax),%eax
f010f7e6:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010f7eb:	75 0d                	jne    f010f7fa <test_alloc_block_NF+0x394>
f010f7ed:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f7f0:	8b 40 08             	mov    0x8(%eax),%eax
f010f7f3:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010f7f8:	74 17                	je     f010f811 <test_alloc_block_NF+0x3ab>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010f7fa:	83 ec 04             	sub    $0x4,%esp
f010f7fd:	68 80 80 13 f0       	push   $0xf0138080
f010f802:	68 03 02 00 00       	push   $0x203
f010f807:	68 74 76 13 f0       	push   $0xf0137674
f010f80c:	e8 ea 09 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f811:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010f816:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f819:	75 13                	jne    f010f82e <test_alloc_block_NF+0x3c8>
f010f81b:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f820:	83 f8 06             	cmp    $0x6,%eax
f010f823:	75 09                	jne    f010f82e <test_alloc_block_NF+0x3c8>
f010f825:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010f82a:	85 c0                	test   %eax,%eax
f010f82c:	74 17                	je     f010f845 <test_alloc_block_NF+0x3df>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f82e:	83 ec 04             	sub    $0x4,%esp
f010f831:	68 c4 80 13 f0       	push   $0xf01380c4
f010f836:	68 07 02 00 00       	push   $0x207
f010f83b:	68 74 76 13 f0       	push   $0xf0137674
f010f840:	e8 b6 09 ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f845:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f84c:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010f84f:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0;
f010f856:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	BlocksSizes[5] = 0;
f010f85d:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f864:	83 ec 0c             	sub    $0xc,%esp
f010f867:	ff 75 d8             	pushl  -0x28(%ebp)
f010f86a:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f870:	50                   	push   %eax
f010f871:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f874:	50                   	push   %eax
f010f875:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f878:	50                   	push   %eax
f010f879:	68 64 7b 65 f0       	push   $0xf0657b64
f010f87e:	e8 55 10 00 00       	call   f01108d8 <check_list_data>
f010f883:	83 c4 20             	add    $0x20,%esp
f010f886:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010f889:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f88d:	74 17                	je     f010f8a6 <test_alloc_block_NF+0x440>
f010f88f:	83 ec 04             	sub    $0x4,%esp
f010f892:	68 28 81 13 f0       	push   $0xf0138128
f010f897:	68 0f 02 00 00       	push   $0x20f
f010f89c:	68 74 76 13 f0       	push   $0xf0137674
f010f8a1:	e8 55 09 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010f8a6:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f8ac:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f8af:	74 17                	je     f010f8c8 <test_alloc_block_NF+0x462>
f010f8b1:	83 ec 04             	sub    $0x4,%esp
f010f8b4:	68 74 81 13 f0       	push   $0xf0138174
f010f8b9:	68 10 02 00 00       	push   $0x210
f010f8be:	68 74 76 13 f0       	push   $0xf0137674
f010f8c3:	e8 33 09 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(512*kilo);
f010f8c8:	83 ec 0c             	sub    $0xc,%esp
f010f8cb:	68 00 00 08 00       	push   $0x80000
f010f8d0:	e8 bf 26 02 00       	call   f0131f94 <alloc_block_NF>
f010f8d5:	83 c4 10             	add    $0x10,%esp
f010f8d8:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 512*kilo || blockToAlloc->sva != 0x21B400)
f010f8db:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f8df:	74 1a                	je     f010f8fb <test_alloc_block_NF+0x495>
f010f8e1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f8e4:	8b 40 0c             	mov    0xc(%eax),%eax
f010f8e7:	3d 00 00 08 00       	cmp    $0x80000,%eax
f010f8ec:	75 0d                	jne    f010f8fb <test_alloc_block_NF+0x495>
f010f8ee:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f8f1:	8b 40 08             	mov    0x8(%eax),%eax
f010f8f4:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010f8f9:	74 17                	je     f010f912 <test_alloc_block_NF+0x4ac>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010f8fb:	83 ec 04             	sub    $0x4,%esp
f010f8fe:	68 80 80 13 f0       	push   $0xf0138080
f010f903:	68 19 02 00 00       	push   $0x219
f010f908:	68 74 76 13 f0       	push   $0xf0137674
f010f90d:	e8 e9 08 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f912:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010f917:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f91a:	4a                   	dec    %edx
f010f91b:	39 d0                	cmp    %edx,%eax
f010f91d:	75 13                	jne    f010f932 <test_alloc_block_NF+0x4cc>
f010f91f:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f924:	83 f8 06             	cmp    $0x6,%eax
f010f927:	75 09                	jne    f010f932 <test_alloc_block_NF+0x4cc>
f010f929:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010f92e:	85 c0                	test   %eax,%eax
f010f930:	74 17                	je     f010f949 <test_alloc_block_NF+0x4e3>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f932:	83 ec 04             	sub    $0x4,%esp
f010f935:	68 c4 80 13 f0       	push   $0xf01380c4
f010f93a:	68 1d 02 00 00       	push   $0x21d
f010f93f:	68 74 76 13 f0       	push   $0xf0137674
f010f944:	e8 b2 08 ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f949:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f950:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010f953:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo;
f010f95a:	c7 45 cc 00 b4 29 00 	movl   $0x29b400,-0x34(%ebp)
	BlocksSizes[6] = 512*kilo;
f010f961:	c7 45 ac 00 00 08 00 	movl   $0x80000,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f968:	83 ec 0c             	sub    $0xc,%esp
f010f96b:	ff 75 d8             	pushl  -0x28(%ebp)
f010f96e:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f974:	50                   	push   %eax
f010f975:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f978:	50                   	push   %eax
f010f979:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f97c:	50                   	push   %eax
f010f97d:	68 64 7b 65 f0       	push   $0xf0657b64
f010f982:	e8 51 0f 00 00       	call   f01108d8 <check_list_data>
f010f987:	83 c4 20             	add    $0x20,%esp
f010f98a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010f98d:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f991:	74 17                	je     f010f9aa <test_alloc_block_NF+0x544>
f010f993:	83 ec 04             	sub    $0x4,%esp
f010f996:	68 28 81 13 f0       	push   $0xf0138128
f010f99b:	68 25 02 00 00       	push   $0x225
f010f9a0:	68 74 76 13 f0       	push   $0xf0137674
f010f9a5:	e8 51 08 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010f9aa:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f9b0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f9b3:	74 17                	je     f010f9cc <test_alloc_block_NF+0x566>
f010f9b5:	83 ec 04             	sub    $0x4,%esp
f010f9b8:	68 74 81 13 f0       	push   $0xf0138174
f010f9bd:	68 26 02 00 00       	push   $0x226
f010f9c2:	68 74 76 13 f0       	push   $0xf0137674
f010f9c7:	e8 2f 08 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 5: Try to allocate a block with a size smaller than the size of any existing free block (One from the updated blocks before in the free list)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(511*kilo);
f010f9cc:	83 ec 0c             	sub    $0xc,%esp
f010f9cf:	68 00 fc 07 00       	push   $0x7fc00
f010f9d4:	e8 bb 25 02 00       	call   f0131f94 <alloc_block_NF>
f010f9d9:	83 c4 10             	add    $0x10,%esp
f010f9dc:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 511*kilo || blockToAlloc->sva != (0x21B400 + 512*kilo))
f010f9df:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f9e3:	74 1a                	je     f010f9ff <test_alloc_block_NF+0x599>
f010f9e5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f9e8:	8b 40 0c             	mov    0xc(%eax),%eax
f010f9eb:	3d 00 fc 07 00       	cmp    $0x7fc00,%eax
f010f9f0:	75 0d                	jne    f010f9ff <test_alloc_block_NF+0x599>
f010f9f2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f9f5:	8b 40 08             	mov    0x8(%eax),%eax
f010f9f8:	3d 00 b4 29 00       	cmp    $0x29b400,%eax
f010f9fd:	74 17                	je     f010fa16 <test_alloc_block_NF+0x5b0>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010f9ff:	83 ec 04             	sub    $0x4,%esp
f010fa02:	68 80 80 13 f0       	push   $0xf0138080
f010fa07:	68 2f 02 00 00       	push   $0x22f
f010fa0c:	68 74 76 13 f0       	push   $0xf0137674
f010fa11:	e8 e5 07 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fa16:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010fa1b:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010fa1e:	83 ea 02             	sub    $0x2,%edx
f010fa21:	39 d0                	cmp    %edx,%eax
f010fa23:	75 13                	jne    f010fa38 <test_alloc_block_NF+0x5d2>
f010fa25:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010fa2a:	83 f8 06             	cmp    $0x6,%eax
f010fa2d:	75 09                	jne    f010fa38 <test_alloc_block_NF+0x5d2>
f010fa2f:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010fa34:	85 c0                	test   %eax,%eax
f010fa36:	74 17                	je     f010fa4f <test_alloc_block_NF+0x5e9>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fa38:	83 ec 04             	sub    $0x4,%esp
f010fa3b:	68 c4 80 13 f0       	push   $0xf01380c4
f010fa40:	68 33 02 00 00       	push   $0x233
f010fa45:	68 74 76 13 f0       	push   $0xf0137674
f010fa4a:	e8 ac 07 ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010fa4f:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010fa56:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010fa59:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo + (511*kilo);
f010fa60:	c7 45 cc 00 b0 31 00 	movl   $0x31b000,-0x34(%ebp)
	BlocksSizes[6] = 1*kilo;
f010fa67:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fa6e:	83 ec 0c             	sub    $0xc,%esp
f010fa71:	ff 75 d8             	pushl  -0x28(%ebp)
f010fa74:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010fa7a:	50                   	push   %eax
f010fa7b:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fa7e:	50                   	push   %eax
f010fa7f:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010fa82:	50                   	push   %eax
f010fa83:	68 64 7b 65 f0       	push   $0xf0657b64
f010fa88:	e8 4b 0e 00 00       	call   f01108d8 <check_list_data>
f010fa8d:	83 c4 20             	add    $0x20,%esp
f010fa90:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010fa93:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fa97:	74 17                	je     f010fab0 <test_alloc_block_NF+0x64a>
f010fa99:	83 ec 04             	sub    $0x4,%esp
f010fa9c:	68 28 81 13 f0       	push   $0xf0138128
f010faa1:	68 3b 02 00 00       	push   $0x23b
f010faa6:	68 74 76 13 f0       	push   $0xf0137674
f010faab:	e8 4b 07 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010fab0:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010fab6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fab9:	74 17                	je     f010fad2 <test_alloc_block_NF+0x66c>
f010fabb:	83 ec 04             	sub    $0x4,%esp
f010fabe:	68 74 81 13 f0       	push   $0xf0138174
f010fac3:	68 3c 02 00 00       	push   $0x23c
f010fac8:	68 74 76 13 f0       	push   $0xf0137674
f010facd:	e8 29 07 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 6: Try to allocate a block with a size smaller than ALL the NEXT existing blocks .. Shall start search from the start of the list*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(3*kilo);
f010fad2:	83 ec 0c             	sub    $0xc,%esp
f010fad5:	68 00 0c 00 00       	push   $0xc00
f010fada:	e8 b5 24 02 00       	call   f0131f94 <alloc_block_NF>
f010fadf:	83 c4 10             	add    $0x10,%esp
f010fae2:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x0)
f010fae5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fae9:	74 17                	je     f010fb02 <test_alloc_block_NF+0x69c>
f010faeb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010faee:	8b 40 0c             	mov    0xc(%eax),%eax
f010faf1:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010faf6:	75 0a                	jne    f010fb02 <test_alloc_block_NF+0x69c>
f010faf8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fafb:	8b 40 08             	mov    0x8(%eax),%eax
f010fafe:	85 c0                	test   %eax,%eax
f010fb00:	74 17                	je     f010fb19 <test_alloc_block_NF+0x6b3>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010fb02:	83 ec 04             	sub    $0x4,%esp
f010fb05:	68 80 80 13 f0       	push   $0xf0138080
f010fb0a:	68 45 02 00 00       	push   $0x245
f010fb0f:	68 74 76 13 f0       	push   $0xf0137674
f010fb14:	e8 e2 06 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fb19:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010fb1e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010fb21:	83 ea 02             	sub    $0x2,%edx
f010fb24:	39 d0                	cmp    %edx,%eax
f010fb26:	75 13                	jne    f010fb3b <test_alloc_block_NF+0x6d5>
f010fb28:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010fb2d:	83 f8 05             	cmp    $0x5,%eax
f010fb30:	75 09                	jne    f010fb3b <test_alloc_block_NF+0x6d5>
f010fb32:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010fb37:	85 c0                	test   %eax,%eax
f010fb39:	74 17                	je     f010fb52 <test_alloc_block_NF+0x6ec>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fb3b:	83 ec 04             	sub    $0x4,%esp
f010fb3e:	68 c4 80 13 f0       	push   $0xf01380c4
f010fb43:	68 49 02 00 00       	push   $0x249
f010fb48:	68 74 76 13 f0       	push   $0xf0137674
f010fb4d:	e8 a9 06 ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010fb52:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010fb59:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f010fb5c:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0;
f010fb63:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	BlocksSizes[0] = 0;
f010fb6a:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fb71:	83 ec 0c             	sub    $0xc,%esp
f010fb74:	ff 75 d8             	pushl  -0x28(%ebp)
f010fb77:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010fb7d:	50                   	push   %eax
f010fb7e:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fb81:	50                   	push   %eax
f010fb82:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010fb85:	50                   	push   %eax
f010fb86:	68 64 7b 65 f0       	push   $0xf0657b64
f010fb8b:	e8 48 0d 00 00       	call   f01108d8 <check_list_data>
f010fb90:	83 c4 20             	add    $0x20,%esp
f010fb93:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010fb96:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fb9a:	74 17                	je     f010fbb3 <test_alloc_block_NF+0x74d>
f010fb9c:	83 ec 04             	sub    $0x4,%esp
f010fb9f:	68 28 81 13 f0       	push   $0xf0138128
f010fba4:	68 51 02 00 00       	push   $0x251
f010fba9:	68 74 76 13 f0       	push   $0xf0137674
f010fbae:	e8 48 06 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010fbb3:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010fbb9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fbbc:	74 17                	je     f010fbd5 <test_alloc_block_NF+0x76f>
f010fbbe:	83 ec 04             	sub    $0x4,%esp
f010fbc1:	68 74 81 13 f0       	push   $0xf0138174
f010fbc6:	68 52 02 00 00       	push   $0x252
f010fbcb:	68 74 76 13 f0       	push   $0xf0137674
f010fbd0:	e8 26 06 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(1*kilo);
f010fbd5:	83 ec 0c             	sub    $0xc,%esp
f010fbd8:	68 00 04 00 00       	push   $0x400
f010fbdd:	e8 b2 23 02 00       	call   f0131f94 <alloc_block_NF>
f010fbe2:	83 c4 10             	add    $0x10,%esp
f010fbe5:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*kilo || blockToAlloc->sva != 0x2000)
f010fbe8:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fbec:	74 1a                	je     f010fc08 <test_alloc_block_NF+0x7a2>
f010fbee:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fbf1:	8b 40 0c             	mov    0xc(%eax),%eax
f010fbf4:	3d 00 04 00 00       	cmp    $0x400,%eax
f010fbf9:	75 0d                	jne    f010fc08 <test_alloc_block_NF+0x7a2>
f010fbfb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fbfe:	8b 40 08             	mov    0x8(%eax),%eax
f010fc01:	3d 00 20 00 00       	cmp    $0x2000,%eax
f010fc06:	74 17                	je     f010fc1f <test_alloc_block_NF+0x7b9>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010fc08:	83 ec 04             	sub    $0x4,%esp
f010fc0b:	68 80 80 13 f0       	push   $0xf0138080
f010fc10:	68 5b 02 00 00       	push   $0x25b
f010fc15:	68 74 76 13 f0       	push   $0xf0137674
f010fc1a:	e8 dc 05 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-3 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fc1f:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010fc24:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010fc27:	83 ea 03             	sub    $0x3,%edx
f010fc2a:	39 d0                	cmp    %edx,%eax
f010fc2c:	75 13                	jne    f010fc41 <test_alloc_block_NF+0x7db>
f010fc2e:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010fc33:	83 f8 05             	cmp    $0x5,%eax
f010fc36:	75 09                	jne    f010fc41 <test_alloc_block_NF+0x7db>
f010fc38:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010fc3d:	85 c0                	test   %eax,%eax
f010fc3f:	74 17                	je     f010fc58 <test_alloc_block_NF+0x7f2>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fc41:	83 ec 04             	sub    $0x4,%esp
f010fc44:	68 c4 80 13 f0       	push   $0xf01380c4
f010fc49:	68 5f 02 00 00       	push   $0x25f
f010fc4e:	68 74 76 13 f0       	push   $0xf0137674
f010fc53:	e8 a3 05 ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010fc58:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010fc5f:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f010fc62:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[1] = 0x2000 + 1*kilo;
f010fc69:	c7 45 b8 00 24 00 00 	movl   $0x2400,-0x48(%ebp)
	BlocksSizes[1] = 7*kilo;
f010fc70:	c7 45 98 00 1c 00 00 	movl   $0x1c00,-0x68(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fc77:	83 ec 0c             	sub    $0xc,%esp
f010fc7a:	ff 75 d8             	pushl  -0x28(%ebp)
f010fc7d:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010fc83:	50                   	push   %eax
f010fc84:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fc87:	50                   	push   %eax
f010fc88:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010fc8b:	50                   	push   %eax
f010fc8c:	68 64 7b 65 f0       	push   $0xf0657b64
f010fc91:	e8 42 0c 00 00       	call   f01108d8 <check_list_data>
f010fc96:	83 c4 20             	add    $0x20,%esp
f010fc99:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010fc9c:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fca0:	74 17                	je     f010fcb9 <test_alloc_block_NF+0x853>
f010fca2:	83 ec 04             	sub    $0x4,%esp
f010fca5:	68 28 81 13 f0       	push   $0xf0138128
f010fcaa:	68 67 02 00 00       	push   $0x267
f010fcaf:	68 74 76 13 f0       	push   $0xf0137674
f010fcb4:	e8 42 05 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010fcb9:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010fcbf:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fcc2:	74 17                	je     f010fcdb <test_alloc_block_NF+0x875>
f010fcc4:	83 ec 04             	sub    $0x4,%esp
f010fcc7:	68 74 81 13 f0       	push   $0xf0138174
f010fccc:	68 68 02 00 00       	push   $0x268
f010fcd1:	68 74 76 13 f0       	push   $0xf0137674
f010fcd6:	e8 20 05 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");
f010fcdb:	83 ec 0c             	sub    $0xc,%esp
f010fcde:	68 c0 81 13 f0       	push   $0xf01381c0
f010fce3:	e8 9a 0f ff ff       	call   f0100c82 <cprintf>
f010fce8:	83 c4 10             	add    $0x10,%esp

}
f010fceb:	90                   	nop
f010fcec:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010fcef:	5b                   	pop    %ebx
f010fcf0:	5e                   	pop    %esi
f010fcf1:	5f                   	pop    %edi
f010fcf2:	5d                   	pop    %ebp
f010fcf3:	c3                   	ret    

f010fcf4 <test_insert_sorted_with_merge_freeList>:

void test_insert_sorted_with_merge_freeList()
{
f010fcf4:	55                   	push   %ebp
f010fcf5:	89 e5                	mov    %esp,%ebp
f010fcf7:	57                   	push   %edi
f010fcf8:	81 ec 04 01 00 00    	sub    $0x104,%esp
	uint32 numOfBlocks = 10;
f010fcfe:	c7 45 f4 0a 00 00 00 	movl   $0xa,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010fd05:	83 ec 0c             	sub    $0xc,%esp
f010fd08:	ff 75 f4             	pushl  -0xc(%ebp)
f010fd0b:	e8 e4 1a 02 00       	call   f01317f4 <initialize_MemBlocksList>
f010fd10:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010fd13:	c7 05 c8 7a 65 f0 00 	movl   $0x0,0xf0657ac8
f010fd1a:	00 00 00 
f010fd1d:	c7 05 cc 7a 65 f0 00 	movl   $0x0,0xf0657acc
f010fd24:	00 00 00 
f010fd27:	c7 05 d4 7a 65 f0 00 	movl   $0x0,0xf0657ad4
f010fd2e:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010fd31:	c7 05 64 7b 65 f0 00 	movl   $0x0,0xf0657b64
f010fd38:	00 00 00 
f010fd3b:	c7 05 68 7b 65 f0 00 	movl   $0x0,0xf0657b68
f010fd42:	00 00 00 
f010fd45:	c7 05 70 7b 65 f0 00 	movl   $0x0,0xf0657b70
f010fd4c:	00 00 00 

	uint32 blocksToInsertSVAs[10]={0,0,0,0,0,0,0,0,0,0};
f010fd4f:	8d 55 c0             	lea    -0x40(%ebp),%edx
f010fd52:	b9 0a 00 00 00       	mov    $0xa,%ecx
f010fd57:	b8 00 00 00 00       	mov    $0x0,%eax
f010fd5c:	89 d7                	mov    %edx,%edi
f010fd5e:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[10]={0,0,0,0,0,0,0,0,0,0};
f010fd60:	8d 55 98             	lea    -0x68(%ebp),%edx
f010fd63:	b9 0a 00 00 00       	mov    $0xa,%ecx
f010fd68:	b8 00 00 00 00       	mov    $0x0,%eax
f010fd6d:	89 d7                	mov    %edx,%edi
f010fd6f:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f010fd71:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	uint32 actualSize = 0;
f010fd78:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	/*INSERT_SORTED_WITH MERGE Scenario 1: CASE 0 - Insert BLOCK_1 in the empty FreeMemBlocksList*/
	int idx_blocksToInsert = 3;
f010fd7f:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo;
f010fd86:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fd89:	c7 44 85 c0 00 20 00 	movl   $0x2000,-0x40(%ebp,%eax,4)
f010fd90:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f010fd91:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fd94:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f010fd9b:	00 
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010fd9c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fd9f:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010fda3:	89 45 8c             	mov    %eax,-0x74(%ebp)
	blockToInsert1.size = blocksToInsertSizes[idx_blocksToInsert];
f010fda6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fda9:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fdad:	89 45 90             	mov    %eax,-0x70(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert1);
f010fdb0:	83 ec 0c             	sub    $0xc,%esp
f010fdb3:	8d 45 84             	lea    -0x7c(%ebp),%eax
f010fdb6:	50                   	push   %eax
f010fdb7:	e8 a5 27 02 00       	call   f0132561 <insert_sorted_with_merge_freeList>
f010fdbc:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 1)
f010fdbf:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010fdc4:	85 c0                	test   %eax,%eax
f010fdc6:	75 14                	jne    f010fddc <test_insert_sorted_with_merge_freeList+0xe8>
f010fdc8:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010fdcd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010fdd0:	75 0a                	jne    f010fddc <test_insert_sorted_with_merge_freeList+0xe8>
f010fdd2:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010fdd7:	83 f8 01             	cmp    $0x1,%eax
f010fdda:	74 17                	je     f010fdf3 <test_insert_sorted_with_merge_freeList+0xff>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fddc:	83 ec 04             	sub    $0x4,%esp
f010fddf:	68 20 82 13 f0       	push   $0xf0138220
f010fde4:	68 88 02 00 00       	push   $0x288
f010fde9:	68 74 76 13 f0       	push   $0xf0137674
f010fdee:	e8 08 04 ff ff       	call   f01001fb <_panic>

	//Check 2: Check the free list content
	size = 0;
f010fdf3:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 1;
f010fdfa:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010fe01:	83 ec 0c             	sub    $0xc,%esp
f010fe04:	ff 75 f0             	pushl  -0x10(%ebp)
f010fe07:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fe0a:	50                   	push   %eax
f010fe0b:	8d 45 98             	lea    -0x68(%ebp),%eax
f010fe0e:	50                   	push   %eax
f010fe0f:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010fe12:	50                   	push   %eax
f010fe13:	68 64 7b 65 f0       	push   $0xf0657b64
f010fe18:	e8 bb 0a 00 00       	call   f01108d8 <check_list_data>
f010fe1d:	83 c4 20             	add    $0x20,%esp
f010fe20:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010fe23:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fe27:	74 17                	je     f010fe40 <test_insert_sorted_with_merge_freeList+0x14c>
f010fe29:	83 ec 04             	sub    $0x4,%esp
f010fe2c:	68 8c 82 13 f0       	push   $0xf013828c
f010fe31:	68 8e 02 00 00       	push   $0x28e
f010fe36:	68 74 76 13 f0       	push   $0xf0137674
f010fe3b:	e8 bb 03 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010fe40:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fe43:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010fe46:	74 17                	je     f010fe5f <test_insert_sorted_with_merge_freeList+0x16b>
f010fe48:	83 ec 04             	sub    $0x4,%esp
f010fe4b:	68 e0 82 13 f0       	push   $0xf01382e0
f010fe50:	68 8f 02 00 00       	push   $0x28f
f010fe55:	68 74 76 13 f0       	push   $0xf0137674
f010fe5a:	e8 9c 03 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 2: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE TAIL)*/
	idx_blocksToInsert = 7;
f010fe5f:	c7 45 ec 07 00 00 00 	movl   $0x7,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo;
f010fe66:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe69:	c7 44 85 c0 00 80 00 	movl   $0x8000,-0x40(%ebp,%eax,4)
f010fe70:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 7*kilo;
f010fe71:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe74:	c7 44 85 98 00 1c 00 	movl   $0x1c00,-0x68(%ebp,%eax,4)
f010fe7b:	00 
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010fe7c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe7f:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010fe83:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	blockToInsert2.size = blocksToInsertSizes[idx_blocksToInsert];
f010fe89:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe8c:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fe90:	89 45 80             	mov    %eax,-0x80(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert2);
f010fe93:	83 ec 0c             	sub    $0xc,%esp
f010fe96:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f010fe9c:	50                   	push   %eax
f010fe9d:	e8 bf 26 02 00       	call   f0132561 <insert_sorted_with_merge_freeList>
f010fea2:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 2)
f010fea5:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010feaa:	85 c0                	test   %eax,%eax
f010feac:	75 14                	jne    f010fec2 <test_insert_sorted_with_merge_freeList+0x1ce>
f010feae:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010feb3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010feb6:	75 0a                	jne    f010fec2 <test_insert_sorted_with_merge_freeList+0x1ce>
f010feb8:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010febd:	83 f8 02             	cmp    $0x2,%eax
f010fec0:	74 17                	je     f010fed9 <test_insert_sorted_with_merge_freeList+0x1e5>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fec2:	83 ec 04             	sub    $0x4,%esp
f010fec5:	68 20 82 13 f0       	push   $0xf0138220
f010feca:	68 9e 02 00 00       	push   $0x29e
f010fecf:	68 74 76 13 f0       	push   $0xf0137674
f010fed4:	e8 22 03 ff ff       	call   f01001fb <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010fed9:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 2;
f010fee0:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010fee7:	83 ec 0c             	sub    $0xc,%esp
f010feea:	ff 75 f0             	pushl  -0x10(%ebp)
f010feed:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fef0:	50                   	push   %eax
f010fef1:	8d 45 98             	lea    -0x68(%ebp),%eax
f010fef4:	50                   	push   %eax
f010fef5:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010fef8:	50                   	push   %eax
f010fef9:	68 64 7b 65 f0       	push   $0xf0657b64
f010fefe:	e8 d5 09 00 00       	call   f01108d8 <check_list_data>
f010ff03:	83 c4 20             	add    $0x20,%esp
f010ff06:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010ff09:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010ff0d:	74 17                	je     f010ff26 <test_insert_sorted_with_merge_freeList+0x232>
f010ff0f:	83 ec 04             	sub    $0x4,%esp
f010ff12:	68 8c 82 13 f0       	push   $0xf013828c
f010ff17:	68 a4 02 00 00       	push   $0x2a4
f010ff1c:	68 74 76 13 f0       	push   $0xf0137674
f010ff21:	e8 d5 02 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010ff26:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010ff29:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ff2c:	74 17                	je     f010ff45 <test_insert_sorted_with_merge_freeList+0x251>
f010ff2e:	83 ec 04             	sub    $0x4,%esp
f010ff31:	68 e0 82 13 f0       	push   $0xf01382e0
f010ff36:	68 a5 02 00 00       	push   $0x2a5
f010ff3b:	68 74 76 13 f0       	push   $0xf0137674
f010ff40:	e8 b6 02 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 3: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE HEAD)*/
	idx_blocksToInsert = 1;
f010ff45:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 1*kilo;
f010ff4c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ff4f:	c7 44 85 c0 00 04 00 	movl   $0x400,-0x40(%ebp,%eax,4)
f010ff56:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f010ff57:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ff5a:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f010ff61:	00 
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010ff62:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ff65:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010ff69:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
	blockToInsert3.size = blocksToInsertSizes[idx_blocksToInsert];
f010ff6f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ff72:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010ff76:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert3);
f010ff7c:	83 ec 0c             	sub    $0xc,%esp
f010ff7f:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
f010ff85:	50                   	push   %eax
f010ff86:	e8 d6 25 02 00       	call   f0132561 <insert_sorted_with_merge_freeList>
f010ff8b:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f010ff8e:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010ff93:	85 c0                	test   %eax,%eax
f010ff95:	75 14                	jne    f010ffab <test_insert_sorted_with_merge_freeList+0x2b7>
f010ff97:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010ff9c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ff9f:	75 0a                	jne    f010ffab <test_insert_sorted_with_merge_freeList+0x2b7>
f010ffa1:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010ffa6:	83 f8 03             	cmp    $0x3,%eax
f010ffa9:	74 17                	je     f010ffc2 <test_insert_sorted_with_merge_freeList+0x2ce>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010ffab:	83 ec 04             	sub    $0x4,%esp
f010ffae:	68 20 82 13 f0       	push   $0xf0138220
f010ffb3:	68 b4 02 00 00       	push   $0x2b4
f010ffb8:	68 74 76 13 f0       	push   $0xf0137674
f010ffbd:	e8 39 02 ff ff       	call   f01001fb <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010ffc2:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f010ffc9:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010ffd0:	83 ec 0c             	sub    $0xc,%esp
f010ffd3:	ff 75 f0             	pushl  -0x10(%ebp)
f010ffd6:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ffd9:	50                   	push   %eax
f010ffda:	8d 45 98             	lea    -0x68(%ebp),%eax
f010ffdd:	50                   	push   %eax
f010ffde:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010ffe1:	50                   	push   %eax
f010ffe2:	68 64 7b 65 f0       	push   $0xf0657b64
f010ffe7:	e8 ec 08 00 00       	call   f01108d8 <check_list_data>
f010ffec:	83 c4 20             	add    $0x20,%esp
f010ffef:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010fff2:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fff6:	74 17                	je     f011000f <test_insert_sorted_with_merge_freeList+0x31b>
f010fff8:	83 ec 04             	sub    $0x4,%esp
f010fffb:	68 8c 82 13 f0       	push   $0xf013828c
f0110000:	68 ba 02 00 00       	push   $0x2ba
f0110005:	68 74 76 13 f0       	push   $0xf0137674
f011000a:	e8 ec 01 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f011000f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110012:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110015:	74 17                	je     f011002e <test_insert_sorted_with_merge_freeList+0x33a>
f0110017:	83 ec 04             	sub    $0x4,%esp
f011001a:	68 e0 82 13 f0       	push   $0xf01382e0
f011001f:	68 bb 02 00 00       	push   $0x2bb
f0110024:	68 74 76 13 f0       	push   $0xf0137674
f0110029:	e8 cd 01 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 4: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 6;
f011002e:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 10*kilo;
f0110035:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110038:	c7 44 85 c0 00 58 00 	movl   $0x5800,-0x40(%ebp,%eax,4)
f011003f:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f0110040:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110043:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f011004a:	00 
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[idx_blocksToInsert];
f011004b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011004e:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110052:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
	blockToInsert4.size = blocksToInsertSizes[idx_blocksToInsert];
f0110058:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011005b:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011005f:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert4);
f0110065:	83 ec 0c             	sub    $0xc,%esp
f0110068:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f011006e:	50                   	push   %eax
f011006f:	e8 ed 24 02 00       	call   f0132561 <insert_sorted_with_merge_freeList>
f0110074:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110077:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f011007c:	85 c0                	test   %eax,%eax
f011007e:	75 14                	jne    f0110094 <test_insert_sorted_with_merge_freeList+0x3a0>
f0110080:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0110085:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110088:	75 0a                	jne    f0110094 <test_insert_sorted_with_merge_freeList+0x3a0>
f011008a:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f011008f:	83 f8 04             	cmp    $0x4,%eax
f0110092:	74 17                	je     f01100ab <test_insert_sorted_with_merge_freeList+0x3b7>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110094:	83 ec 04             	sub    $0x4,%esp
f0110097:	68 20 82 13 f0       	push   $0xf0138220
f011009c:	68 ca 02 00 00       	push   $0x2ca
f01100a1:	68 74 76 13 f0       	push   $0xf0137674
f01100a6:	e8 50 01 ff ff       	call   f01001fb <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01100ab:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f01100b2:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f01100b9:	83 ec 0c             	sub    $0xc,%esp
f01100bc:	ff 75 f0             	pushl  -0x10(%ebp)
f01100bf:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01100c2:	50                   	push   %eax
f01100c3:	8d 45 98             	lea    -0x68(%ebp),%eax
f01100c6:	50                   	push   %eax
f01100c7:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01100ca:	50                   	push   %eax
f01100cb:	68 64 7b 65 f0       	push   $0xf0657b64
f01100d0:	e8 03 08 00 00       	call   f01108d8 <check_list_data>
f01100d5:	83 c4 20             	add    $0x20,%esp
f01100d8:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f01100db:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01100df:	74 17                	je     f01100f8 <test_insert_sorted_with_merge_freeList+0x404>
f01100e1:	83 ec 04             	sub    $0x4,%esp
f01100e4:	68 8c 82 13 f0       	push   $0xf013828c
f01100e9:	68 d0 02 00 00       	push   $0x2d0
f01100ee:	68 74 76 13 f0       	push   $0xf0137674
f01100f3:	e8 03 01 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f01100f8:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01100fb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01100fe:	74 17                	je     f0110117 <test_insert_sorted_with_merge_freeList+0x423>
f0110100:	83 ec 04             	sub    $0x4,%esp
f0110103:	68 e0 82 13 f0       	push   $0xf01382e0
f0110108:	68 d1 02 00 00       	push   $0x2d1
f011010d:	68 74 76 13 f0       	push   $0xf0137674
f0110112:	e8 e4 00 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 5: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (AT the tail)*/
	idx_blocksToInsert = 8;
f0110117:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo + 7*kilo;
f011011e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110121:	c7 44 85 c0 00 9c 00 	movl   $0x9c00,-0x40(%ebp,%eax,4)
f0110128:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 3*kilo;
f0110129:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011012c:	c7 44 85 98 00 0c 00 	movl   $0xc00,-0x68(%ebp,%eax,4)
f0110133:	00 
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110134:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110137:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f011013b:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
	blockToInsert5.size = blocksToInsertSizes[idx_blocksToInsert];
f0110141:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110144:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110148:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert5);
f011014e:	83 ec 0c             	sub    $0xc,%esp
f0110151:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
f0110157:	50                   	push   %eax
f0110158:	e8 04 24 02 00       	call   f0132561 <insert_sorted_with_merge_freeList>
f011015d:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 1 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110160:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f0110165:	85 c0                	test   %eax,%eax
f0110167:	75 17                	jne    f0110180 <test_insert_sorted_with_merge_freeList+0x48c>
f0110169:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f011016e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110171:	42                   	inc    %edx
f0110172:	39 d0                	cmp    %edx,%eax
f0110174:	75 0a                	jne    f0110180 <test_insert_sorted_with_merge_freeList+0x48c>
f0110176:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f011017b:	83 f8 04             	cmp    $0x4,%eax
f011017e:	74 17                	je     f0110197 <test_insert_sorted_with_merge_freeList+0x4a3>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110180:	83 ec 04             	sub    $0x4,%esp
f0110183:	68 20 82 13 f0       	push   $0xf0138220
f0110188:	68 e3 02 00 00       	push   $0x2e3
f011018d:	68 74 76 13 f0       	push   $0xf0137674
f0110192:	e8 64 00 ff ff       	call   f01001fb <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110197:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f011019e:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f01101a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01101a8:	8d 50 ff             	lea    -0x1(%eax),%edx
f01101ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01101ae:	48                   	dec    %eax
f01101af:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f01101b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01101b6:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01101ba:	01 c8                	add    %ecx,%eax
f01101bc:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f01101c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01101c3:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f01101ca:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f01101cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01101ce:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f01101d5:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f01101d6:	83 ec 0c             	sub    $0xc,%esp
f01101d9:	ff 75 f0             	pushl  -0x10(%ebp)
f01101dc:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01101df:	50                   	push   %eax
f01101e0:	8d 45 98             	lea    -0x68(%ebp),%eax
f01101e3:	50                   	push   %eax
f01101e4:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01101e7:	50                   	push   %eax
f01101e8:	68 64 7b 65 f0       	push   $0xf0657b64
f01101ed:	e8 e6 06 00 00       	call   f01108d8 <check_list_data>
f01101f2:	83 c4 20             	add    $0x20,%esp
f01101f5:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f01101f8:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01101fc:	74 17                	je     f0110215 <test_insert_sorted_with_merge_freeList+0x521>
f01101fe:	83 ec 04             	sub    $0x4,%esp
f0110201:	68 8c 82 13 f0       	push   $0xf013828c
f0110206:	68 ec 02 00 00       	push   $0x2ec
f011020b:	68 74 76 13 f0       	push   $0xf0137674
f0110210:	e8 e6 ff fe ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110215:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110218:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011021b:	74 17                	je     f0110234 <test_insert_sorted_with_merge_freeList+0x540>
f011021d:	83 ec 04             	sub    $0x4,%esp
f0110220:	68 e0 82 13 f0       	push   $0xf01382e0
f0110225:	68 ed 02 00 00       	push   $0x2ed
f011022a:	68 74 76 13 f0       	push   $0xf0137674
f011022f:	e8 c7 ff fe ff       	call   f01001fb <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110234:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f011023b:	83 ec 0c             	sub    $0xc,%esp
f011023e:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110241:	50                   	push   %eax
f0110242:	e8 5d 07 00 00       	call   f01109a4 <check_avaliable_list_data>
f0110247:	83 c4 10             	add    $0x10,%esp
f011024a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f011024d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110250:	8d 50 01             	lea    0x1(%eax),%edx
f0110253:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110256:	39 c2                	cmp    %eax,%edx
f0110258:	74 17                	je     f0110271 <test_insert_sorted_with_merge_freeList+0x57d>
f011025a:	83 ec 04             	sub    $0x4,%esp
f011025d:	68 34 83 13 f0       	push   $0xf0138334
f0110262:	68 f2 02 00 00       	push   $0x2f2
f0110267:	68 74 76 13 f0       	push   $0xf0137674
f011026c:	e8 8a ff fe ff       	call   f01001fb <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110271:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110275:	74 17                	je     f011028e <test_insert_sorted_with_merge_freeList+0x59a>
f0110277:	83 ec 04             	sub    $0x4,%esp
f011027a:	68 8c 83 13 f0       	push   $0xf013838c
f011027f:	68 f3 02 00 00       	push   $0x2f3
f0110284:	68 74 76 13 f0       	push   $0xf0137674
f0110289:	e8 6d ff fe ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 6: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 4;
f011028e:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo;
f0110295:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110298:	c7 44 85 c0 00 30 00 	movl   $0x3000,-0x40(%ebp,%eax,4)
f011029f:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f01102a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01102a3:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f01102aa:	00 
	struct MemBlock blockToInsert6;
	blockToInsert6.sva = blocksToInsertSVAs[idx_blocksToInsert];
f01102ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01102ae:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01102b2:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
	blockToInsert6.size = blocksToInsertSizes[idx_blocksToInsert];
f01102b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01102bb:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01102bf:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert6);
f01102c5:	83 ec 0c             	sub    $0xc,%esp
f01102c8:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01102ce:	50                   	push   %eax
f01102cf:	e8 8d 22 02 00       	call   f0132561 <insert_sorted_with_merge_freeList>
f01102d4:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 2 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f01102d7:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f01102dc:	85 c0                	test   %eax,%eax
f01102de:	75 19                	jne    f01102f9 <test_insert_sorted_with_merge_freeList+0x605>
f01102e0:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f01102e5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01102e8:	83 c2 02             	add    $0x2,%edx
f01102eb:	39 d0                	cmp    %edx,%eax
f01102ed:	75 0a                	jne    f01102f9 <test_insert_sorted_with_merge_freeList+0x605>
f01102ef:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f01102f4:	83 f8 04             	cmp    $0x4,%eax
f01102f7:	74 17                	je     f0110310 <test_insert_sorted_with_merge_freeList+0x61c>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01102f9:	83 ec 04             	sub    $0x4,%esp
f01102fc:	68 20 82 13 f0       	push   $0xf0138220
f0110301:	68 05 03 00 00       	push   $0x305
f0110306:	68 74 76 13 f0       	push   $0xf0137674
f011030b:	e8 eb fe fe ff       	call   f01001fb <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110310:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110317:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f011031e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110321:	8d 50 ff             	lea    -0x1(%eax),%edx
f0110324:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110327:	48                   	dec    %eax
f0110328:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f011032c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011032f:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110333:	01 c8                	add    %ecx,%eax
f0110335:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110339:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011033c:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110343:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110344:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110347:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f011034e:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f011034f:	83 ec 0c             	sub    $0xc,%esp
f0110352:	ff 75 f0             	pushl  -0x10(%ebp)
f0110355:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110358:	50                   	push   %eax
f0110359:	8d 45 98             	lea    -0x68(%ebp),%eax
f011035c:	50                   	push   %eax
f011035d:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110360:	50                   	push   %eax
f0110361:	68 64 7b 65 f0       	push   $0xf0657b64
f0110366:	e8 6d 05 00 00       	call   f01108d8 <check_list_data>
f011036b:	83 c4 20             	add    $0x20,%esp
f011036e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110371:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110375:	74 17                	je     f011038e <test_insert_sorted_with_merge_freeList+0x69a>
f0110377:	83 ec 04             	sub    $0x4,%esp
f011037a:	68 8c 82 13 f0       	push   $0xf013828c
f011037f:	68 0e 03 00 00       	push   $0x30e
f0110384:	68 74 76 13 f0       	push   $0xf0137674
f0110389:	e8 6d fe fe ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f011038e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110391:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110394:	74 17                	je     f01103ad <test_insert_sorted_with_merge_freeList+0x6b9>
f0110396:	83 ec 04             	sub    $0x4,%esp
f0110399:	68 e0 82 13 f0       	push   $0xf01382e0
f011039e:	68 0f 03 00 00       	push   $0x30f
f01103a3:	68 74 76 13 f0       	push   $0xf0137674
f01103a8:	e8 4e fe fe ff       	call   f01001fb <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f01103ad:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f01103b4:	83 ec 0c             	sub    $0xc,%esp
f01103b7:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01103ba:	50                   	push   %eax
f01103bb:	e8 e4 05 00 00       	call   f01109a4 <check_avaliable_list_data>
f01103c0:	83 c4 10             	add    $0x10,%esp
f01103c3:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 2) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f01103c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01103c9:	8d 50 02             	lea    0x2(%eax),%edx
f01103cc:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01103cf:	39 c2                	cmp    %eax,%edx
f01103d1:	74 17                	je     f01103ea <test_insert_sorted_with_merge_freeList+0x6f6>
f01103d3:	83 ec 04             	sub    $0x4,%esp
f01103d6:	68 34 83 13 f0       	push   $0xf0138334
f01103db:	68 14 03 00 00       	push   $0x314
f01103e0:	68 74 76 13 f0       	push   $0xf0137674
f01103e5:	e8 11 fe fe ff       	call   f01001fb <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f01103ea:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01103ee:	74 17                	je     f0110407 <test_insert_sorted_with_merge_freeList+0x713>
f01103f0:	83 ec 04             	sub    $0x4,%esp
f01103f3:	68 8c 83 13 f0       	push   $0xf013838c
f01103f8:	68 15 03 00 00       	push   $0x315
f01103fd:	68 74 76 13 f0       	push   $0xf0137674
f0110402:	e8 f4 fd fe ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 7: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (AT the head)*/
	idx_blocksToInsert = 0;
f0110407:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f011040e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110411:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110418:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f0110419:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011041c:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f0110423:	00 
	struct MemBlock blockToInsert7;
	blockToInsert7.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110424:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110427:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f011042b:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
	blockToInsert7.size = blocksToInsertSizes[idx_blocksToInsert];
f0110431:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110434:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110438:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert7);
f011043e:	83 ec 0c             	sub    $0xc,%esp
f0110441:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0110447:	50                   	push   %eax
f0110448:	e8 14 21 02 00       	call   f0132561 <insert_sorted_with_merge_freeList>
f011044d:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 3 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110450:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f0110455:	85 c0                	test   %eax,%eax
f0110457:	75 19                	jne    f0110472 <test_insert_sorted_with_merge_freeList+0x77e>
f0110459:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f011045e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110461:	83 c2 03             	add    $0x3,%edx
f0110464:	39 d0                	cmp    %edx,%eax
f0110466:	75 0a                	jne    f0110472 <test_insert_sorted_with_merge_freeList+0x77e>
f0110468:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f011046d:	83 f8 04             	cmp    $0x4,%eax
f0110470:	74 17                	je     f0110489 <test_insert_sorted_with_merge_freeList+0x795>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110472:	83 ec 04             	sub    $0x4,%esp
f0110475:	68 20 82 13 f0       	push   $0xf0138220
f011047a:	68 28 03 00 00       	push   $0x328
f011047f:	68 74 76 13 f0       	push   $0xf0137674
f0110484:	e8 72 fd fe ff       	call   f01001fb <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110489:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110490:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f0110497:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011049a:	8d 50 01             	lea    0x1(%eax),%edx
f011049d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01104a0:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01104a4:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f01104a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01104ab:	8d 50 01             	lea    0x1(%eax),%edx
f01104ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01104b1:	40                   	inc    %eax
f01104b2:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f01104b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01104b9:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01104bd:	01 c8                	add    %ecx,%eax
f01104bf:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f01104c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01104c6:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f01104cd:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f01104ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01104d1:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f01104d8:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f01104d9:	83 ec 0c             	sub    $0xc,%esp
f01104dc:	ff 75 f0             	pushl  -0x10(%ebp)
f01104df:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01104e2:	50                   	push   %eax
f01104e3:	8d 45 98             	lea    -0x68(%ebp),%eax
f01104e6:	50                   	push   %eax
f01104e7:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01104ea:	50                   	push   %eax
f01104eb:	68 64 7b 65 f0       	push   $0xf0657b64
f01104f0:	e8 e3 03 00 00       	call   f01108d8 <check_list_data>
f01104f5:	83 c4 20             	add    $0x20,%esp
f01104f8:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f01104fb:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01104ff:	74 17                	je     f0110518 <test_insert_sorted_with_merge_freeList+0x824>
f0110501:	83 ec 04             	sub    $0x4,%esp
f0110504:	68 8c 82 13 f0       	push   $0xf013828c
f0110509:	68 32 03 00 00       	push   $0x332
f011050e:	68 74 76 13 f0       	push   $0xf0137674
f0110513:	e8 e3 fc fe ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110518:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011051b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011051e:	74 17                	je     f0110537 <test_insert_sorted_with_merge_freeList+0x843>
f0110520:	83 ec 04             	sub    $0x4,%esp
f0110523:	68 e0 82 13 f0       	push   $0xf01382e0
f0110528:	68 33 03 00 00       	push   $0x333
f011052d:	68 74 76 13 f0       	push   $0xf0137674
f0110532:	e8 c4 fc fe ff       	call   f01001fb <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110537:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f011053e:	83 ec 0c             	sub    $0xc,%esp
f0110541:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110544:	50                   	push   %eax
f0110545:	e8 5a 04 00 00       	call   f01109a4 <check_avaliable_list_data>
f011054a:	83 c4 10             	add    $0x10,%esp
f011054d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 3) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110550:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110553:	8d 50 03             	lea    0x3(%eax),%edx
f0110556:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110559:	39 c2                	cmp    %eax,%edx
f011055b:	74 17                	je     f0110574 <test_insert_sorted_with_merge_freeList+0x880>
f011055d:	83 ec 04             	sub    $0x4,%esp
f0110560:	68 34 83 13 f0       	push   $0xf0138334
f0110565:	68 38 03 00 00       	push   $0x338
f011056a:	68 74 76 13 f0       	push   $0xf0137674
f011056f:	e8 87 fc fe ff       	call   f01001fb <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110574:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110578:	74 17                	je     f0110591 <test_insert_sorted_with_merge_freeList+0x89d>
f011057a:	83 ec 04             	sub    $0x4,%esp
f011057d:	68 8c 83 13 f0       	push   $0xf013838c
f0110582:	68 39 03 00 00       	push   $0x339
f0110587:	68 74 76 13 f0       	push   $0xf0137674
f011058c:	e8 6a fc fe ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 8: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 5;
f0110591:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = (8*kilo + 4*kilo + 10*kilo) - (4*kilo);
f0110598:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011059b:	c7 44 85 c0 00 48 00 	movl   $0x4800,-0x40(%ebp,%eax,4)
f01105a2:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f01105a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01105a6:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f01105ad:	00 
	struct MemBlock blockToInsert8;
	blockToInsert8.sva = blocksToInsertSVAs[idx_blocksToInsert];
f01105ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01105b1:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01105b5:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
	blockToInsert8.size = blocksToInsertSizes[idx_blocksToInsert];
f01105bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01105be:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01105c2:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert8);
f01105c8:	83 ec 0c             	sub    $0xc,%esp
f01105cb:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f01105d1:	50                   	push   %eax
f01105d2:	e8 8a 1f 02 00       	call   f0132561 <insert_sorted_with_merge_freeList>
f01105d7:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 4 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f01105da:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f01105df:	85 c0                	test   %eax,%eax
f01105e1:	75 19                	jne    f01105fc <test_insert_sorted_with_merge_freeList+0x908>
f01105e3:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f01105e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01105eb:	83 c2 04             	add    $0x4,%edx
f01105ee:	39 d0                	cmp    %edx,%eax
f01105f0:	75 0a                	jne    f01105fc <test_insert_sorted_with_merge_freeList+0x908>
f01105f2:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f01105f7:	83 f8 04             	cmp    $0x4,%eax
f01105fa:	74 17                	je     f0110613 <test_insert_sorted_with_merge_freeList+0x91f>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01105fc:	83 ec 04             	sub    $0x4,%esp
f01105ff:	68 20 82 13 f0       	push   $0xf0138220
f0110604:	68 4c 03 00 00       	push   $0x34c
f0110609:	68 74 76 13 f0       	push   $0xf0137674
f011060e:	e8 e8 fb fe ff       	call   f01001fb <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110613:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f011061a:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f0110621:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110624:	8d 50 01             	lea    0x1(%eax),%edx
f0110627:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011062a:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f011062e:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f0110632:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110635:	8d 50 01             	lea    0x1(%eax),%edx
f0110638:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011063b:	40                   	inc    %eax
f011063c:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110640:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110643:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110647:	01 c8                	add    %ecx,%eax
f0110649:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f011064d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110650:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110657:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110658:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011065b:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110662:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110663:	83 ec 0c             	sub    $0xc,%esp
f0110666:	ff 75 f0             	pushl  -0x10(%ebp)
f0110669:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011066c:	50                   	push   %eax
f011066d:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110670:	50                   	push   %eax
f0110671:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110674:	50                   	push   %eax
f0110675:	68 64 7b 65 f0       	push   $0xf0657b64
f011067a:	e8 59 02 00 00       	call   f01108d8 <check_list_data>
f011067f:	83 c4 20             	add    $0x20,%esp
f0110682:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110685:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110689:	74 17                	je     f01106a2 <test_insert_sorted_with_merge_freeList+0x9ae>
f011068b:	83 ec 04             	sub    $0x4,%esp
f011068e:	68 8c 82 13 f0       	push   $0xf013828c
f0110693:	68 56 03 00 00       	push   $0x356
f0110698:	68 74 76 13 f0       	push   $0xf0137674
f011069d:	e8 59 fb fe ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f01106a2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01106a5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01106a8:	74 17                	je     f01106c1 <test_insert_sorted_with_merge_freeList+0x9cd>
f01106aa:	83 ec 04             	sub    $0x4,%esp
f01106ad:	68 e0 82 13 f0       	push   $0xf01382e0
f01106b2:	68 57 03 00 00       	push   $0x357
f01106b7:	68 74 76 13 f0       	push   $0xf0137674
f01106bc:	e8 3a fb fe ff       	call   f01001fb <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f01106c1:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f01106c8:	83 ec 0c             	sub    $0xc,%esp
f01106cb:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01106ce:	50                   	push   %eax
f01106cf:	e8 d0 02 00 00       	call   f01109a4 <check_avaliable_list_data>
f01106d4:	83 c4 10             	add    $0x10,%esp
f01106d7:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 4) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f01106da:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01106dd:	8d 50 04             	lea    0x4(%eax),%edx
f01106e0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01106e3:	39 c2                	cmp    %eax,%edx
f01106e5:	74 17                	je     f01106fe <test_insert_sorted_with_merge_freeList+0xa0a>
f01106e7:	83 ec 04             	sub    $0x4,%esp
f01106ea:	68 34 83 13 f0       	push   $0xf0138334
f01106ef:	68 5c 03 00 00       	push   $0x35c
f01106f4:	68 74 76 13 f0       	push   $0xf0137674
f01106f9:	e8 fd fa fe ff       	call   f01001fb <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f01106fe:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110702:	74 17                	je     f011071b <test_insert_sorted_with_merge_freeList+0xa27>
f0110704:	83 ec 04             	sub    $0x4,%esp
f0110707:	68 8c 83 13 f0       	push   $0xf013838c
f011070c:	68 5d 03 00 00       	push   $0x35d
f0110711:	68 74 76 13 f0       	push   $0xf0137674
f0110716:	e8 e0 fa fe ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 9: CASE 4 - Merge with prev & next in the FreeMemBlocksList */
	idx_blocksToInsert = 2;
f011071b:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 2*kilo;
f0110722:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110725:	c7 44 85 c0 00 08 00 	movl   $0x800,-0x40(%ebp,%eax,4)
f011072c:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0x2000 - 2*kilo; //6144
f011072d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110730:	c7 44 85 98 00 18 00 	movl   $0x1800,-0x68(%ebp,%eax,4)
f0110737:	00 
	struct MemBlock blockToInsert9;
	blockToInsert9.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110738:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011073b:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f011073f:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
	blockToInsert9.size = blocksToInsertSizes[idx_blocksToInsert];
f0110745:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110748:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011074c:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)

	//printf("===>BEFORE\n");
	//show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert9);
f0110752:	83 ec 0c             	sub    $0xc,%esp
f0110755:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011075b:	50                   	push   %eax
f011075c:	e8 00 1e 02 00       	call   f0132561 <insert_sorted_with_merge_freeList>
f0110761:	83 c4 10             	add    $0x10,%esp
	//show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 6 || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f0110764:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f0110769:	85 c0                	test   %eax,%eax
f011076b:	75 19                	jne    f0110786 <test_insert_sorted_with_merge_freeList+0xa92>
f011076d:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0110772:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110775:	83 c2 06             	add    $0x6,%edx
f0110778:	39 d0                	cmp    %edx,%eax
f011077a:	75 0a                	jne    f0110786 <test_insert_sorted_with_merge_freeList+0xa92>
f011077c:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f0110781:	83 f8 03             	cmp    $0x3,%eax
f0110784:	74 17                	je     f011079d <test_insert_sorted_with_merge_freeList+0xaa9>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110786:	83 ec 04             	sub    $0x4,%esp
f0110789:	68 20 82 13 f0       	push   $0xf0138220
f011078e:	68 70 03 00 00       	push   $0x370
f0110793:	68 74 76 13 f0       	push   $0xf0137674
f0110798:	e8 5e fa fe ff       	call   f01001fb <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f011079d:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f01107a4:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert-1] = 0x0;
f01107ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01107ae:	48                   	dec    %eax
f01107af:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f01107b6:	00 
	blocksToInsertSizes[idx_blocksToInsert-1] = blocksToInsertSizes[idx_blocksToInsert-1] + blocksToInsertSizes[idx_blocksToInsert] + blocksToInsertSizes[idx_blocksToInsert+1];
f01107b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01107ba:	8d 50 ff             	lea    -0x1(%eax),%edx
f01107bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01107c0:	48                   	dec    %eax
f01107c1:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f01107c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01107c8:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01107cc:	01 c1                	add    %eax,%ecx
f01107ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01107d1:	40                   	inc    %eax
f01107d2:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01107d6:	01 c8                	add    %ecx,%eax
f01107d8:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f01107dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01107df:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f01107e6:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f01107e7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01107ea:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f01107f1:	00 
	blocksToInsertSVAs[idx_blocksToInsert+1] = 0x0;
f01107f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01107f5:	40                   	inc    %eax
f01107f6:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f01107fd:	00 
	blocksToInsertSizes[idx_blocksToInsert+1] = 0;
f01107fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110801:	40                   	inc    %eax
f0110802:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110809:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f011080a:	83 ec 0c             	sub    $0xc,%esp
f011080d:	ff 75 f0             	pushl  -0x10(%ebp)
f0110810:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110813:	50                   	push   %eax
f0110814:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110817:	50                   	push   %eax
f0110818:	8d 45 c0             	lea    -0x40(%ebp),%eax
f011081b:	50                   	push   %eax
f011081c:	68 64 7b 65 f0       	push   $0xf0657b64
f0110821:	e8 b2 00 00 00       	call   f01108d8 <check_list_data>
f0110826:	83 c4 20             	add    $0x20,%esp
f0110829:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f011082c:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110830:	74 17                	je     f0110849 <test_insert_sorted_with_merge_freeList+0xb55>
f0110832:	83 ec 04             	sub    $0x4,%esp
f0110835:	68 8c 82 13 f0       	push   $0xf013828c
f011083a:	68 7c 03 00 00       	push   $0x37c
f011083f:	68 74 76 13 f0       	push   $0xf0137674
f0110844:	e8 b2 f9 fe ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110849:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011084c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011084f:	74 17                	je     f0110868 <test_insert_sorted_with_merge_freeList+0xb74>
f0110851:	83 ec 04             	sub    $0x4,%esp
f0110854:	68 e0 82 13 f0       	push   $0xf01382e0
f0110859:	68 7d 03 00 00       	push   $0x37d
f011085e:	68 74 76 13 f0       	push   $0xf0137674
f0110863:	e8 93 f9 fe ff       	call   f01001fb <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110868:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f011086f:	83 ec 0c             	sub    $0xc,%esp
f0110872:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110875:	50                   	push   %eax
f0110876:	e8 29 01 00 00       	call   f01109a4 <check_avaliable_list_data>
f011087b:	83 c4 10             	add    $0x10,%esp
f011087e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 6) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110881:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110884:	8d 50 06             	lea    0x6(%eax),%edx
f0110887:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011088a:	39 c2                	cmp    %eax,%edx
f011088c:	74 17                	je     f01108a5 <test_insert_sorted_with_merge_freeList+0xbb1>
f011088e:	83 ec 04             	sub    $0x4,%esp
f0110891:	68 34 83 13 f0       	push   $0xf0138334
f0110896:	68 82 03 00 00       	push   $0x382
f011089b:	68 74 76 13 f0       	push   $0xf0137674
f01108a0:	e8 56 f9 fe ff       	call   f01001fb <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f01108a5:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01108a9:	74 17                	je     f01108c2 <test_insert_sorted_with_merge_freeList+0xbce>
f01108ab:	83 ec 04             	sub    $0x4,%esp
f01108ae:	68 8c 83 13 f0       	push   $0xf013838c
f01108b3:	68 83 03 00 00       	push   $0x383
f01108b8:	68 74 76 13 f0       	push   $0xf0137674
f01108bd:	e8 39 f9 fe ff       	call   f01001fb <_panic>
	//====================================================================//


	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test insert_sorted_with_merge_freeList completed successfully.\n");
f01108c2:	83 ec 0c             	sub    $0xc,%esp
f01108c5:	68 e8 83 13 f0       	push   $0xf01383e8
f01108ca:	e8 b3 03 ff ff       	call   f0100c82 <cprintf>
f01108cf:	83 c4 10             	add    $0x10,%esp

}
f01108d2:	90                   	nop
f01108d3:	8b 7d fc             	mov    -0x4(%ebp),%edi
f01108d6:	c9                   	leave  
f01108d7:	c3                   	ret    

f01108d8 <check_list_data>:

/********************Helper Functions***************************/
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
f01108d8:	55                   	push   %ebp
f01108d9:	89 e5                	mov    %esp,%ebp
f01108db:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f01108de:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f01108e5:	8b 45 14             	mov    0x14(%ebp),%eax
f01108e8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i = 0;
f01108ee:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	LIST_FOREACH(node, list)
f01108f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01108f8:	8b 00                	mov    (%eax),%eax
f01108fa:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01108fd:	eb 6e                	jmp    f011096d <check_list_data+0x95>
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
			i++;
f01108ff:	ff 45 f8             	incl   -0x8(%ebp)
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
f0110902:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0110905:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011090c:	8b 45 10             	mov    0x10(%ebp),%eax
f011090f:	01 d0                	add    %edx,%eax
f0110911:	8b 00                	mov    (%eax),%eax
f0110913:	85 c0                	test   %eax,%eax
f0110915:	74 e8                	je     f01108ff <check_list_data+0x27>
			i++;
		if(node->sva != blocksSVAs[(i)] || node->size != blocksSizes[i])
f0110917:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011091a:	8b 50 08             	mov    0x8(%eax),%edx
f011091d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0110920:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0110927:	8b 45 0c             	mov    0xc(%ebp),%eax
f011092a:	01 c8                	add    %ecx,%eax
f011092c:	8b 00                	mov    (%eax),%eax
f011092e:	39 c2                	cmp    %eax,%edx
f0110930:	75 1b                	jne    f011094d <check_list_data+0x75>
f0110932:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110935:	8b 50 0c             	mov    0xc(%eax),%edx
f0110938:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011093b:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0110942:	8b 45 10             	mov    0x10(%ebp),%eax
f0110945:	01 c8                	add    %ecx,%eax
f0110947:	8b 00                	mov    (%eax),%eax
f0110949:	39 c2                	cmp    %eax,%edx
f011094b:	74 07                	je     f0110954 <check_list_data+0x7c>
		{
//			cprintf("i = %d .. \n", i);
//			cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
//			cprintf("blocks[i] data: sva = %x, size = %d\n", blocksSVAs[(i)], blocksSizes[i]);
			return 0;
f011094d:	b8 00 00 00 00       	mov    $0x0,%eax
f0110952:	eb 4e                	jmp    f01109a2 <check_list_data+0xca>
		}
		(*size)++;
f0110954:	8b 45 14             	mov    0x14(%ebp),%eax
f0110957:	8b 00                	mov    (%eax),%eax
f0110959:	8d 50 01             	lea    0x1(%eax),%edx
f011095c:	8b 45 14             	mov    0x14(%ebp),%eax
f011095f:	89 10                	mov    %edx,(%eax)
		i++;
f0110961:	ff 45 f8             	incl   -0x8(%ebp)
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
f0110964:	8b 45 08             	mov    0x8(%ebp),%eax
f0110967:	8b 40 08             	mov    0x8(%eax),%eax
f011096a:	89 45 fc             	mov    %eax,-0x4(%ebp)
f011096d:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0110971:	74 07                	je     f011097a <check_list_data+0xa2>
f0110973:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110976:	8b 00                	mov    (%eax),%eax
f0110978:	eb 05                	jmp    f011097f <check_list_data+0xa7>
f011097a:	b8 00 00 00 00       	mov    $0x0,%eax
f011097f:	8b 55 08             	mov    0x8(%ebp),%edx
f0110982:	89 42 08             	mov    %eax,0x8(%edx)
f0110985:	8b 45 08             	mov    0x8(%ebp),%eax
f0110988:	8b 40 08             	mov    0x8(%eax),%eax
f011098b:	85 c0                	test   %eax,%eax
f011098d:	0f 85 6f ff ff ff    	jne    f0110902 <check_list_data+0x2a>
f0110993:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0110997:	0f 85 65 ff ff ff    	jne    f0110902 <check_list_data+0x2a>
			return 0;
		}
		(*size)++;
		i++;
	}
	return 1;
f011099d:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01109a2:	c9                   	leave  
f01109a3:	c3                   	ret    

f01109a4 <check_avaliable_list_data>:

int check_avaliable_list_data(uint32* size)
{
f01109a4:	55                   	push   %ebp
f01109a5:	89 e5                	mov    %esp,%ebp
f01109a7:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f01109aa:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f01109b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01109b4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	LIST_FOREACH(node, &AvailableMemBlocksList)
f01109ba:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f01109bf:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01109c2:	eb 30                	jmp    f01109f4 <check_avaliable_list_data+0x50>
	{
		if(node->sva != 0x0 || node->size != 0)
f01109c4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01109c7:	8b 40 08             	mov    0x8(%eax),%eax
f01109ca:	85 c0                	test   %eax,%eax
f01109cc:	75 0a                	jne    f01109d8 <check_avaliable_list_data+0x34>
f01109ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01109d1:	8b 40 0c             	mov    0xc(%eax),%eax
f01109d4:	85 c0                	test   %eax,%eax
f01109d6:	74 07                	je     f01109df <check_avaliable_list_data+0x3b>
		{
			return 0;
f01109d8:	b8 00 00 00 00       	mov    $0x0,%eax
f01109dd:	eb 40                	jmp    f0110a1f <check_avaliable_list_data+0x7b>
		}
		(*size)++;
f01109df:	8b 45 08             	mov    0x8(%ebp),%eax
f01109e2:	8b 00                	mov    (%eax),%eax
f01109e4:	8d 50 01             	lea    0x1(%eax),%edx
f01109e7:	8b 45 08             	mov    0x8(%ebp),%eax
f01109ea:	89 10                	mov    %edx,(%eax)
int check_avaliable_list_data(uint32* size)
{
	struct MemBlock* node = NULL;
	*size = 0;

	LIST_FOREACH(node, &AvailableMemBlocksList)
f01109ec:	a1 a0 7b 65 f0       	mov    0xf0657ba0,%eax
f01109f1:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01109f4:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01109f8:	74 07                	je     f0110a01 <check_avaliable_list_data+0x5d>
f01109fa:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01109fd:	8b 00                	mov    (%eax),%eax
f01109ff:	eb 05                	jmp    f0110a06 <check_avaliable_list_data+0x62>
f0110a01:	b8 00 00 00 00       	mov    $0x0,%eax
f0110a06:	a3 a0 7b 65 f0       	mov    %eax,0xf0657ba0
f0110a0b:	a1 a0 7b 65 f0       	mov    0xf0657ba0,%eax
f0110a10:	85 c0                	test   %eax,%eax
f0110a12:	75 b0                	jne    f01109c4 <check_avaliable_list_data+0x20>
f0110a14:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0110a18:	75 aa                	jne    f01109c4 <check_avaliable_list_data+0x20>
		{
			return 0;
		}
		(*size)++;
	}
	return 1;
f0110a1a:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0110a1f:	c9                   	leave  
f0110a20:	c3                   	ret    

f0110a21 <show_list_content>:


void show_list_content(struct MemBlock_List* list)
{
f0110a21:	55                   	push   %ebp
f0110a22:	89 e5                	mov    %esp,%ebp
f0110a24:	83 ec 18             	sub    $0x18,%esp
	struct MemBlock* node = NULL;
f0110a27:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(node, list)
f0110a2e:	8b 45 08             	mov    0x8(%ebp),%eax
f0110a31:	8b 00                	mov    (%eax),%eax
f0110a33:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0110a36:	eb 27                	jmp    f0110a5f <show_list_content+0x3e>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f0110a38:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110a3b:	8b 50 0c             	mov    0xc(%eax),%edx
f0110a3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110a41:	8b 40 08             	mov    0x8(%eax),%eax
f0110a44:	83 ec 04             	sub    $0x4,%esp
f0110a47:	52                   	push   %edx
f0110a48:	50                   	push   %eax
f0110a49:	68 38 77 13 f0       	push   $0xf0137738
f0110a4e:	e8 2f 02 ff ff       	call   f0100c82 <cprintf>
f0110a53:	83 c4 10             	add    $0x10,%esp


void show_list_content(struct MemBlock_List* list)
{
	struct MemBlock* node = NULL;
	LIST_FOREACH(node, list)
f0110a56:	8b 45 08             	mov    0x8(%ebp),%eax
f0110a59:	8b 40 08             	mov    0x8(%eax),%eax
f0110a5c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0110a5f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0110a63:	74 07                	je     f0110a6c <show_list_content+0x4b>
f0110a65:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110a68:	8b 00                	mov    (%eax),%eax
f0110a6a:	eb 05                	jmp    f0110a71 <show_list_content+0x50>
f0110a6c:	b8 00 00 00 00       	mov    $0x0,%eax
f0110a71:	8b 55 08             	mov    0x8(%ebp),%edx
f0110a74:	89 42 08             	mov    %eax,0x8(%edx)
f0110a77:	8b 45 08             	mov    0x8(%ebp),%eax
f0110a7a:	8b 40 08             	mov    0x8(%eax),%eax
f0110a7d:	85 c0                	test   %eax,%eax
f0110a7f:	75 b7                	jne    f0110a38 <show_list_content+0x17>
f0110a81:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0110a85:	75 b1                	jne    f0110a38 <show_list_content+0x17>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
}
f0110a87:	90                   	nop
f0110a88:	c9                   	leave  
f0110a89:	c3                   	ret    

f0110a8a <TestAutoCompleteCommand>:
int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc);
int CA(uint32 *ptr_dir, uint32 va);
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which);
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type);
int TestAutoCompleteCommand()
{
f0110a8a:	55                   	push   %ebp
f0110a8b:	89 e5                	mov    %esp,%ebp
f0110a8d:	57                   	push   %edi
f0110a8e:	56                   	push   %esi
f0110a8f:	53                   	push   %ebx
f0110a90:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f0110a96:	83 ec 0c             	sub    $0xc,%esp
f0110a99:	68 3c 84 13 f0       	push   $0xf013843c
f0110a9e:	e8 df 01 ff ff       	call   f0100c82 <cprintf>
f0110aa3:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f0110aa6:	83 ec 0c             	sub    $0xc,%esp
f0110aa9:	68 60 84 13 f0       	push   $0xf0138460
f0110aae:	e8 cf 01 ff ff       	call   f0100c82 <cprintf>
f0110ab3:	83 c4 10             	add    $0x10,%esp
	//	cprintf("========================\n");
	//	cprintf("Q2 Test: manually try the test cases in the doc. \n..."
	//			"OR, you can do it automatically by un-commenting the code in this function, it should output the same results in the Examples exist in the MS1 ppt\n");
	//
	//	int retValue = 0;
	int i = 0;
f0110ab6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	//CASE1:
	//should execute the kernel_info command
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f0110abd:	83 ec 0c             	sub    $0xc,%esp
f0110ac0:	68 7c 84 13 f0       	push   $0xf013847c
f0110ac5:	e8 b8 01 ff ff       	call   f0100c82 <cprintf>
f0110aca:	83 c4 10             	add    $0x10,%esp
	char cr0[100] = "kernel_info";
f0110acd:	8d 45 80             	lea    -0x80(%ebp),%eax
f0110ad0:	bb 36 85 13 f0       	mov    $0xf0138536,%ebx
f0110ad5:	ba 03 00 00 00       	mov    $0x3,%edx
f0110ada:	89 c7                	mov    %eax,%edi
f0110adc:	89 de                	mov    %ebx,%esi
f0110ade:	89 d1                	mov    %edx,%ecx
f0110ae0:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0110ae2:	8d 55 8c             	lea    -0x74(%ebp),%edx
f0110ae5:	b9 16 00 00 00       	mov    $0x16,%ecx
f0110aea:	b8 00 00 00 00       	mov    $0x0,%eax
f0110aef:	89 d7                	mov    %edx,%edi
f0110af1:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr0) ;
f0110af3:	83 ec 0c             	sub    $0xc,%esp
f0110af6:	8d 45 80             	lea    -0x80(%ebp),%eax
f0110af9:	50                   	push   %eax
f0110afa:	e8 e5 01 ff ff       	call   f0100ce4 <execute_command>
f0110aff:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0110b02:	83 ec 0c             	sub    $0xc,%esp
f0110b05:	68 aa 84 13 f0       	push   $0xf01384aa
f0110b0a:	e8 73 01 ff ff       	call   f0100c82 <cprintf>
f0110b0f:	83 c4 10             	add    $0x10,%esp

	//CASE2: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f0110b12:	83 ec 0c             	sub    $0xc,%esp
f0110b15:	68 c0 84 13 f0       	push   $0xf01384c0
f0110b1a:	e8 63 01 ff ff       	call   f0100c82 <cprintf>
f0110b1f:	83 c4 10             	add    $0x10,%esp
	char cr2[100] = "he";
f0110b22:	c7 85 1c ff ff ff 68 	movl   $0x6568,-0xe4(%ebp)
f0110b29:	65 00 00 
f0110b2c:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0110b32:	b9 18 00 00 00       	mov    $0x18,%ecx
f0110b37:	b8 00 00 00 00       	mov    $0x0,%eax
f0110b3c:	89 d7                	mov    %edx,%edi
f0110b3e:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr2) ;
f0110b40:	83 ec 0c             	sub    $0xc,%esp
f0110b43:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f0110b49:	50                   	push   %eax
f0110b4a:	e8 95 01 ff ff       	call   f0100ce4 <execute_command>
f0110b4f:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0110b52:	83 ec 0c             	sub    $0xc,%esp
f0110b55:	68 aa 84 13 f0       	push   $0xf01384aa
f0110b5a:	e8 23 01 ff ff       	call   f0100c82 <cprintf>
f0110b5f:	83 c4 10             	add    $0x10,%esp


	//CASE3: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f0110b62:	83 ec 0c             	sub    $0xc,%esp
f0110b65:	68 e8 84 13 f0       	push   $0xf01384e8
f0110b6a:	e8 13 01 ff ff       	call   f0100c82 <cprintf>
f0110b6f:	83 c4 10             	add    $0x10,%esp
	char cr3[100] = "ru";
f0110b72:	c7 85 b8 fe ff ff 72 	movl   $0x7572,-0x148(%ebp)
f0110b79:	75 00 00 
f0110b7c:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f0110b82:	b9 18 00 00 00       	mov    $0x18,%ecx
f0110b87:	b8 00 00 00 00       	mov    $0x0,%eax
f0110b8c:	89 d7                	mov    %edx,%edi
f0110b8e:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr3) ;
f0110b90:	83 ec 0c             	sub    $0xc,%esp
f0110b93:	8d 85 b8 fe ff ff    	lea    -0x148(%ebp),%eax
f0110b99:	50                   	push   %eax
f0110b9a:	e8 45 01 ff ff       	call   f0100ce4 <execute_command>
f0110b9f:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0110ba2:	83 ec 0c             	sub    $0xc,%esp
f0110ba5:	68 aa 84 13 f0       	push   $0xf01384aa
f0110baa:	e8 d3 00 ff ff       	call   f0100c82 <cprintf>
f0110baf:	83 c4 10             	add    $0x10,%esp

	//CASE4: should print unknown command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f0110bb2:	83 ec 0c             	sub    $0xc,%esp
f0110bb5:	68 10 85 13 f0       	push   $0xf0138510
f0110bba:	e8 c3 00 ff ff       	call   f0100c82 <cprintf>
f0110bbf:	83 c4 10             	add    $0x10,%esp
	char cr4[100] = "smm";
f0110bc2:	c7 85 54 fe ff ff 73 	movl   $0x6d6d73,-0x1ac(%ebp)
f0110bc9:	6d 6d 00 
f0110bcc:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f0110bd2:	b9 18 00 00 00       	mov    $0x18,%ecx
f0110bd7:	b8 00 00 00 00       	mov    $0x0,%eax
f0110bdc:	89 d7                	mov    %edx,%edi
f0110bde:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr4) ;
f0110be0:	83 ec 0c             	sub    $0xc,%esp
f0110be3:	8d 85 54 fe ff ff    	lea    -0x1ac(%ebp),%eax
f0110be9:	50                   	push   %eax
f0110bea:	e8 f5 00 ff ff       	call   f0100ce4 <execute_command>
f0110bef:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0110bf2:	83 ec 0c             	sub    $0xc,%esp
f0110bf5:	68 aa 84 13 f0       	push   $0xf01384aa
f0110bfa:	e8 83 00 ff ff       	call   f0100c82 <cprintf>
f0110bff:	83 c4 10             	add    $0x10,%esp
	return 0;
f0110c02:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0110c07:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0110c0a:	5b                   	pop    %ebx
f0110c0b:	5e                   	pop    %esi
f0110c0c:	5f                   	pop    %edi
f0110c0d:	5d                   	pop    %ebp
f0110c0e:	c3                   	ret    

f0110c0f <test_pt_set_page_permissions>:

//=====================================
// 1) TEST SET/CLEAR PAGE PERMISSIONS:
//=====================================
int test_pt_set_page_permissions()
{
f0110c0f:	55                   	push   %ebp
f0110c10:	89 e5                	mov    %esp,%ebp
f0110c12:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check setting a permission
	uint32 va = 0xEF800000;
f0110c15:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0110c1c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0110c23:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110c2a:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110c2f:	ff 75 ec             	pushl  -0x14(%ebp)
f0110c32:	ff 75 f0             	pushl  -0x10(%ebp)
f0110c35:	ff 75 f4             	pushl  -0xc(%ebp)
f0110c38:	50                   	push   %eax
f0110c39:	e8 df 6e ff ff       	call   f0107b1d <pt_set_page_permissions>
f0110c3e:	83 c4 10             	add    $0x10,%esp
	int ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110c41:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110c46:	ff 75 ec             	pushl  -0x14(%ebp)
f0110c49:	ff 75 f0             	pushl  -0x10(%ebp)
f0110c4c:	ff 75 f4             	pushl  -0xc(%ebp)
f0110c4f:	50                   	push   %eax
f0110c50:	e8 9e 4e 00 00       	call   f0115af3 <CP>
f0110c55:	83 c4 10             	add    $0x10,%esp
f0110c58:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110c5b:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110c5f:	74 14                	je     f0110c75 <test_pt_set_page_permissions+0x66>
	{
		panic("[EVAL] #1 Set Permission Failed.\n");
f0110c61:	83 ec 04             	sub    $0x4,%esp
f0110c64:	68 9c 85 13 f0       	push   $0xf013859c
f0110c69:	6a 5a                	push   $0x5a
f0110c6b:	68 be 85 13 f0       	push   $0xf01385be
f0110c70:	e8 86 f5 fe ff       	call   f01001fb <_panic>
	}

	//Case 2: Check setting MORE THAN ONE permission
	va = 0xEF801000;
f0110c75:	c7 45 f4 00 10 80 ef 	movl   $0xef801000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER;
f0110c7c:	c7 45 f0 44 00 00 00 	movl   $0x44,-0x10(%ebp)
	permissions_to_clear = 0;
f0110c83:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110c8a:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110c8f:	ff 75 ec             	pushl  -0x14(%ebp)
f0110c92:	ff 75 f0             	pushl  -0x10(%ebp)
f0110c95:	ff 75 f4             	pushl  -0xc(%ebp)
f0110c98:	50                   	push   %eax
f0110c99:	e8 7f 6e ff ff       	call   f0107b1d <pt_set_page_permissions>
f0110c9e:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110ca1:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110ca6:	ff 75 ec             	pushl  -0x14(%ebp)
f0110ca9:	ff 75 f0             	pushl  -0x10(%ebp)
f0110cac:	ff 75 f4             	pushl  -0xc(%ebp)
f0110caf:	50                   	push   %eax
f0110cb0:	e8 3e 4e 00 00       	call   f0115af3 <CP>
f0110cb5:	83 c4 10             	add    $0x10,%esp
f0110cb8:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110cbb:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110cbf:	74 14                	je     f0110cd5 <test_pt_set_page_permissions+0xc6>
	{
		panic("[EVAL] #2 Set Permission Failed.\n");
f0110cc1:	83 ec 04             	sub    $0x4,%esp
f0110cc4:	68 dc 85 13 f0       	push   $0xf01385dc
f0110cc9:	6a 66                	push   $0x66
f0110ccb:	68 be 85 13 f0       	push   $0xf01385be
f0110cd0:	e8 26 f5 fe ff       	call   f01001fb <_panic>
	}

	va = 0xEF800000;
f0110cd5:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER|PERM_USED|PERM_PRESENT;
f0110cdc:	c7 45 f0 65 00 00 00 	movl   $0x65,-0x10(%ebp)
	permissions_to_clear = 0;
f0110ce3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110cea:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110cef:	ff 75 ec             	pushl  -0x14(%ebp)
f0110cf2:	ff 75 f0             	pushl  -0x10(%ebp)
f0110cf5:	ff 75 f4             	pushl  -0xc(%ebp)
f0110cf8:	50                   	push   %eax
f0110cf9:	e8 1f 6e ff ff       	call   f0107b1d <pt_set_page_permissions>
f0110cfe:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110d01:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110d06:	ff 75 ec             	pushl  -0x14(%ebp)
f0110d09:	ff 75 f0             	pushl  -0x10(%ebp)
f0110d0c:	ff 75 f4             	pushl  -0xc(%ebp)
f0110d0f:	50                   	push   %eax
f0110d10:	e8 de 4d 00 00       	call   f0115af3 <CP>
f0110d15:	83 c4 10             	add    $0x10,%esp
f0110d18:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110d1b:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110d1f:	74 14                	je     f0110d35 <test_pt_set_page_permissions+0x126>
	{
		panic("[EVAL] #3 Set Permission Failed.\n");
f0110d21:	83 ec 04             	sub    $0x4,%esp
f0110d24:	68 00 86 13 f0       	push   $0xf0138600
f0110d29:	6a 71                	push   $0x71
f0110d2b:	68 be 85 13 f0       	push   $0xf01385be
f0110d30:	e8 c6 f4 fe ff       	call   f01001fb <_panic>
	}

	//Case 3: Check clearing a permission
	va = 0xF0000000;
f0110d35:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	permissions_to_set = 0;
f0110d3c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_PRESENT;
f0110d43:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110d4a:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110d4f:	ff 75 ec             	pushl  -0x14(%ebp)
f0110d52:	ff 75 f0             	pushl  -0x10(%ebp)
f0110d55:	ff 75 f4             	pushl  -0xc(%ebp)
f0110d58:	50                   	push   %eax
f0110d59:	e8 bf 6d ff ff       	call   f0107b1d <pt_set_page_permissions>
f0110d5e:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110d61:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110d66:	ff 75 ec             	pushl  -0x14(%ebp)
f0110d69:	ff 75 f0             	pushl  -0x10(%ebp)
f0110d6c:	ff 75 f4             	pushl  -0xc(%ebp)
f0110d6f:	50                   	push   %eax
f0110d70:	e8 7e 4d 00 00       	call   f0115af3 <CP>
f0110d75:	83 c4 10             	add    $0x10,%esp
f0110d78:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110d7b:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110d7f:	74 14                	je     f0110d95 <test_pt_set_page_permissions+0x186>
	{
		panic("[EVAL] #4 Clear Permission Failed.\n");
f0110d81:	83 ec 04             	sub    $0x4,%esp
f0110d84:	68 24 86 13 f0       	push   $0xf0138624
f0110d89:	6a 7d                	push   $0x7d
f0110d8b:	68 be 85 13 f0       	push   $0xf01385be
f0110d90:	e8 66 f4 fe ff       	call   f01001fb <_panic>
	}

	//Case 4: Check clearing MORE THAN ONE permission
	va = 0xEF800000;
f0110d95:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = 0;
f0110d9c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_MODIFIED|PERM_USER;
f0110da3:	c7 45 ec 44 00 00 00 	movl   $0x44,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110daa:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110daf:	ff 75 ec             	pushl  -0x14(%ebp)
f0110db2:	ff 75 f0             	pushl  -0x10(%ebp)
f0110db5:	ff 75 f4             	pushl  -0xc(%ebp)
f0110db8:	50                   	push   %eax
f0110db9:	e8 5f 6d ff ff       	call   f0107b1d <pt_set_page_permissions>
f0110dbe:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110dc1:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110dc6:	ff 75 ec             	pushl  -0x14(%ebp)
f0110dc9:	ff 75 f0             	pushl  -0x10(%ebp)
f0110dcc:	ff 75 f4             	pushl  -0xc(%ebp)
f0110dcf:	50                   	push   %eax
f0110dd0:	e8 1e 4d 00 00       	call   f0115af3 <CP>
f0110dd5:	83 c4 10             	add    $0x10,%esp
f0110dd8:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110ddb:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110ddf:	74 17                	je     f0110df8 <test_pt_set_page_permissions+0x1e9>
	{
		panic("[EVAL] #5 Clear Permission Failed.\n");
f0110de1:	83 ec 04             	sub    $0x4,%esp
f0110de4:	68 48 86 13 f0       	push   $0xf0138648
f0110de9:	68 89 00 00 00       	push   $0x89
f0110dee:	68 be 85 13 f0       	push   $0xf01385be
f0110df3:	e8 03 f4 fe ff       	call   f01001fb <_panic>
	}

	//Case 5: Check settiing & clearing MORE THAN ONE permission together
	va = 0xF0001000;
f0110df8:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	permissions_to_set = PERM_USER|PERM_BUFFERED;
f0110dff:	c7 45 f0 04 02 00 00 	movl   $0x204,-0x10(%ebp)
	permissions_to_clear = PERM_WRITEABLE|PERM_USED|PERM_MODIFIED;
f0110e06:	c7 45 ec 62 00 00 00 	movl   $0x62,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110e0d:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110e12:	ff 75 ec             	pushl  -0x14(%ebp)
f0110e15:	ff 75 f0             	pushl  -0x10(%ebp)
f0110e18:	ff 75 f4             	pushl  -0xc(%ebp)
f0110e1b:	50                   	push   %eax
f0110e1c:	e8 fc 6c ff ff       	call   f0107b1d <pt_set_page_permissions>
f0110e21:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110e24:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110e29:	ff 75 ec             	pushl  -0x14(%ebp)
f0110e2c:	ff 75 f0             	pushl  -0x10(%ebp)
f0110e2f:	ff 75 f4             	pushl  -0xc(%ebp)
f0110e32:	50                   	push   %eax
f0110e33:	e8 bb 4c 00 00       	call   f0115af3 <CP>
f0110e38:	83 c4 10             	add    $0x10,%esp
f0110e3b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110e3e:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110e42:	74 17                	je     f0110e5b <test_pt_set_page_permissions+0x24c>
	{
		panic("[EVAL] #6 Set & Clear Permission Failed.\n");
f0110e44:	83 ec 04             	sub    $0x4,%esp
f0110e47:	68 6c 86 13 f0       	push   $0xf013866c
f0110e4c:	68 95 00 00 00       	push   $0x95
f0110e51:	68 be 85 13 f0       	push   $0xf01385be
f0110e56:	e8 a0 f3 fe ff       	call   f01001fb <_panic>
	}

	cprintf("Congratulations!! test pt_set&clear_page_permissions completed successfully.\n");
f0110e5b:	83 ec 0c             	sub    $0xc,%esp
f0110e5e:	68 98 86 13 f0       	push   $0xf0138698
f0110e63:	e8 1a fe fe ff       	call   f0100c82 <cprintf>
f0110e68:	83 c4 10             	add    $0x10,%esp
	return 0;
f0110e6b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0110e70:	c9                   	leave  
f0110e71:	c3                   	ret    

f0110e72 <test_pt_set_page_permissions_invalid_va>:

int test_pt_set_page_permissions_invalid_va()
{
f0110e72:	55                   	push   %ebp
f0110e73:	89 e5                	mov    %esp,%ebp
f0110e75:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x0;
f0110e78:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0110e7f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0110e86:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110e8d:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110e92:	ff 75 ec             	pushl  -0x14(%ebp)
f0110e95:	ff 75 f0             	pushl  -0x10(%ebp)
f0110e98:	ff 75 f4             	pushl  -0xc(%ebp)
f0110e9b:	50                   	push   %eax
f0110e9c:	e8 7c 6c ff ff       	call   f0107b1d <pt_set_page_permissions>
f0110ea1:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling setting permissions of an invalid virtual address with non existing page table.");
f0110ea4:	83 ec 04             	sub    $0x4,%esp
f0110ea7:	68 e8 86 13 f0       	push   $0xf01386e8
f0110eac:	68 a2 00 00 00       	push   $0xa2
f0110eb1:	68 be 85 13 f0       	push   $0xf01385be
f0110eb6:	e8 40 f3 fe ff       	call   f01001fb <_panic>

f0110ebb <test_pt_get_page_permissions>:

//=====================================
// 2) TEST GET PAGE PERMISSIONS:
//=====================================
int test_pt_get_page_permissions()
{
f0110ebb:	55                   	push   %ebp
f0110ebc:	89 e5                	mov    %esp,%ebp
f0110ebe:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check getting a permission of a non existing VA with NO table
	uint32 va = 0xeebfe000;
f0110ec1:	c7 45 f4 00 e0 bf ee 	movl   $0xeebfe000,-0xc(%ebp)
	int ret = pt_get_page_permissions(ptr_page_directory, va);
f0110ec8:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110ecd:	83 ec 08             	sub    $0x8,%esp
f0110ed0:	ff 75 f4             	pushl  -0xc(%ebp)
f0110ed3:	50                   	push   %eax
f0110ed4:	e8 f8 6c ff ff       	call   f0107bd1 <pt_get_page_permissions>
f0110ed9:	83 c4 10             	add    $0x10,%esp
f0110edc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != -1)
f0110edf:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0110ee3:	74 17                	je     f0110efc <test_pt_get_page_permissions+0x41>
	{
		panic("[EVAL] #1 Get Permission Failed.\n");
f0110ee5:	83 ec 04             	sub    $0x4,%esp
f0110ee8:	68 84 87 13 f0       	push   $0xf0138784
f0110eed:	68 b0 00 00 00       	push   $0xb0
f0110ef2:	68 be 85 13 f0       	push   $0xf01385be
f0110ef7:	e8 ff f2 fe ff       	call   f01001fb <_panic>
	}

	//Case 2: Check getting a permission of a non existing VA with an existing table
	va = 0xEF800000;
f0110efc:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0110f03:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110f08:	83 ec 08             	sub    $0x8,%esp
f0110f0b:	ff 75 f4             	pushl  -0xc(%ebp)
f0110f0e:	50                   	push   %eax
f0110f0f:	e8 bd 6c ff ff       	call   f0107bd1 <pt_get_page_permissions>
f0110f14:	83 c4 10             	add    $0x10,%esp
f0110f17:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 0)
f0110f1a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110f1e:	74 17                	je     f0110f37 <test_pt_get_page_permissions+0x7c>
	{
		panic("[EVAL] #2 Get Permission Failed.\n");
f0110f20:	83 ec 04             	sub    $0x4,%esp
f0110f23:	68 a8 87 13 f0       	push   $0xf01387a8
f0110f28:	68 b8 00 00 00       	push   $0xb8
f0110f2d:	68 be 85 13 f0       	push   $0xf01385be
f0110f32:	e8 c4 f2 fe ff       	call   f01001fb <_panic>
	}

	//Case 3: Check getting a permission of an existing VA with an existing table
	va = 0xf0000000;
f0110f37:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0110f3e:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110f43:	83 ec 08             	sub    $0x8,%esp
f0110f46:	ff 75 f4             	pushl  -0xc(%ebp)
f0110f49:	50                   	push   %eax
f0110f4a:	e8 82 6c ff ff       	call   f0107bd1 <pt_get_page_permissions>
f0110f4f:	83 c4 10             	add    $0x10,%esp
f0110f52:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0110f55:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0110f59:	74 17                	je     f0110f72 <test_pt_get_page_permissions+0xb7>
	{
		panic("[EVAL] #3 Get Permission Failed.\n");
f0110f5b:	83 ec 04             	sub    $0x4,%esp
f0110f5e:	68 cc 87 13 f0       	push   $0xf01387cc
f0110f63:	68 c0 00 00 00       	push   $0xc0
f0110f68:	68 be 85 13 f0       	push   $0xf01385be
f0110f6d:	e8 89 f2 fe ff       	call   f01001fb <_panic>
	}

	va = 0xF1000000;
f0110f72:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0110f79:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110f7e:	83 ec 08             	sub    $0x8,%esp
f0110f81:	ff 75 f4             	pushl  -0xc(%ebp)
f0110f84:	50                   	push   %eax
f0110f85:	e8 47 6c ff ff       	call   f0107bd1 <pt_get_page_permissions>
f0110f8a:	83 c4 10             	add    $0x10,%esp
f0110f8d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0110f90:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0110f94:	74 17                	je     f0110fad <test_pt_get_page_permissions+0xf2>
	{
		panic("[EVAL] #4 Get Permission Failed.\n");
f0110f96:	83 ec 04             	sub    $0x4,%esp
f0110f99:	68 f0 87 13 f0       	push   $0xf01387f0
f0110f9e:	68 c7 00 00 00       	push   $0xc7
f0110fa3:	68 be 85 13 f0       	push   $0xf01385be
f0110fa8:	e8 4e f2 fe ff       	call   f01001fb <_panic>
	}

	va = 0xF0001000;
f0110fad:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0110fb4:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110fb9:	83 ec 08             	sub    $0x8,%esp
f0110fbc:	ff 75 f4             	pushl  -0xc(%ebp)
f0110fbf:	50                   	push   %eax
f0110fc0:	e8 0c 6c ff ff       	call   f0107bd1 <pt_get_page_permissions>
f0110fc5:	83 c4 10             	add    $0x10,%esp
f0110fc8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 99)
f0110fcb:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f0110fcf:	74 17                	je     f0110fe8 <test_pt_get_page_permissions+0x12d>
	{
		panic("[EVAL] #5 Get Permission Failed.\n");
f0110fd1:	83 ec 04             	sub    $0x4,%esp
f0110fd4:	68 14 88 13 f0       	push   $0xf0138814
f0110fd9:	68 ce 00 00 00       	push   $0xce
f0110fde:	68 be 85 13 f0       	push   $0xf01385be
f0110fe3:	e8 13 f2 fe ff       	call   f01001fb <_panic>
	}
	cprintf("Congratulations!! test pt_get_page_permissions completed successfully.\n");
f0110fe8:	83 ec 0c             	sub    $0xc,%esp
f0110feb:	68 38 88 13 f0       	push   $0xf0138838
f0110ff0:	e8 8d fc fe ff       	call   f0100c82 <cprintf>
f0110ff5:	83 c4 10             	add    $0x10,%esp
	return 0;
f0110ff8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0110ffd:	c9                   	leave  
f0110ffe:	c3                   	ret    

f0110fff <test_pt_clear_page_table_entry>:

//=====================================
// 3) TEST CLEAR PAGE TABLE ENTRY:
//=====================================
int test_pt_clear_page_table_entry()
{
f0110fff:	55                   	push   %ebp
f0111000:	89 e5                	mov    %esp,%ebp
f0111002:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0xF1000000;
f0111005:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f011100c:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111011:	83 ec 08             	sub    $0x8,%esp
f0111014:	ff 75 f4             	pushl  -0xc(%ebp)
f0111017:	50                   	push   %eax
f0111018:	e8 0f 6c ff ff       	call   f0107c2c <pt_clear_page_table_entry>
f011101d:	83 c4 10             	add    $0x10,%esp
	int ret = CE(ptr_page_directory, va);
f0111020:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111025:	83 ec 08             	sub    $0x8,%esp
f0111028:	ff 75 f4             	pushl  -0xc(%ebp)
f011102b:	50                   	push   %eax
f011102c:	e8 1e 4a 00 00       	call   f0115a4f <CE>
f0111031:	83 c4 10             	add    $0x10,%esp
f0111034:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111037:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f011103b:	74 17                	je     f0111054 <test_pt_clear_page_table_entry+0x55>
	{
		panic("[EVAL] #1 Clear Page Table Entry Failed.\n");
f011103d:	83 ec 04             	sub    $0x4,%esp
f0111040:	68 80 88 13 f0       	push   $0xf0138880
f0111045:	68 de 00 00 00       	push   $0xde
f011104a:	68 be 85 13 f0       	push   $0xf01385be
f011104f:	e8 a7 f1 fe ff       	call   f01001fb <_panic>
	}

	va = 0xF0001000;
f0111054:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f011105b:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111060:	83 ec 08             	sub    $0x8,%esp
f0111063:	ff 75 f4             	pushl  -0xc(%ebp)
f0111066:	50                   	push   %eax
f0111067:	e8 c0 6b ff ff       	call   f0107c2c <pt_clear_page_table_entry>
f011106c:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f011106f:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111074:	83 ec 08             	sub    $0x8,%esp
f0111077:	ff 75 f4             	pushl  -0xc(%ebp)
f011107a:	50                   	push   %eax
f011107b:	e8 cf 49 00 00       	call   f0115a4f <CE>
f0111080:	83 c4 10             	add    $0x10,%esp
f0111083:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111086:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f011108a:	74 17                	je     f01110a3 <test_pt_clear_page_table_entry+0xa4>
	{
		panic("[EVAL] #2 Clear Page Table Entry Failed.\n");
f011108c:	83 ec 04             	sub    $0x4,%esp
f011108f:	68 ac 88 13 f0       	push   $0xf01388ac
f0111094:	68 e6 00 00 00       	push   $0xe6
f0111099:	68 be 85 13 f0       	push   $0xf01385be
f011109e:	e8 58 f1 fe ff       	call   f01001fb <_panic>
	}

	va = 0xEF800000;
f01110a3:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01110aa:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01110af:	83 ec 08             	sub    $0x8,%esp
f01110b2:	ff 75 f4             	pushl  -0xc(%ebp)
f01110b5:	50                   	push   %eax
f01110b6:	e8 71 6b ff ff       	call   f0107c2c <pt_clear_page_table_entry>
f01110bb:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f01110be:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01110c3:	83 ec 08             	sub    $0x8,%esp
f01110c6:	ff 75 f4             	pushl  -0xc(%ebp)
f01110c9:	50                   	push   %eax
f01110ca:	e8 80 49 00 00       	call   f0115a4f <CE>
f01110cf:	83 c4 10             	add    $0x10,%esp
f01110d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f01110d5:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01110d9:	74 17                	je     f01110f2 <test_pt_clear_page_table_entry+0xf3>
	{
		panic("[EVAL] #3 Clear Page Table Entry Failed.\n");
f01110db:	83 ec 04             	sub    $0x4,%esp
f01110de:	68 d8 88 13 f0       	push   $0xf01388d8
f01110e3:	68 ee 00 00 00       	push   $0xee
f01110e8:	68 be 85 13 f0       	push   $0xf01385be
f01110ed:	e8 09 f1 fe ff       	call   f01001fb <_panic>
	}

	va = 0xF0000000;
f01110f2:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01110f9:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01110fe:	83 ec 08             	sub    $0x8,%esp
f0111101:	ff 75 f4             	pushl  -0xc(%ebp)
f0111104:	50                   	push   %eax
f0111105:	e8 22 6b ff ff       	call   f0107c2c <pt_clear_page_table_entry>
f011110a:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f011110d:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111112:	83 ec 08             	sub    $0x8,%esp
f0111115:	ff 75 f4             	pushl  -0xc(%ebp)
f0111118:	50                   	push   %eax
f0111119:	e8 31 49 00 00       	call   f0115a4f <CE>
f011111e:	83 c4 10             	add    $0x10,%esp
f0111121:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111124:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111128:	74 17                	je     f0111141 <test_pt_clear_page_table_entry+0x142>
	{
		panic("[EVAL] #4 Clear Page Table Entry Failed.\n");
f011112a:	83 ec 04             	sub    $0x4,%esp
f011112d:	68 04 89 13 f0       	push   $0xf0138904
f0111132:	68 f6 00 00 00       	push   $0xf6
f0111137:	68 be 85 13 f0       	push   $0xf01385be
f011113c:	e8 ba f0 fe ff       	call   f01001fb <_panic>
	}

	cprintf("Congratulations!! test pt_clear_page_table_entry completed successfully.\n");
f0111141:	83 ec 0c             	sub    $0xc,%esp
f0111144:	68 30 89 13 f0       	push   $0xf0138930
f0111149:	e8 34 fb fe ff       	call   f0100c82 <cprintf>
f011114e:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111151:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111156:	c9                   	leave  
f0111157:	c3                   	ret    

f0111158 <test_pt_clear_page_table_entry_invalid_va>:

int test_pt_clear_page_table_entry_invalid_va()
{
f0111158:	55                   	push   %ebp
f0111159:	89 e5                	mov    %esp,%ebp
f011115b:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x1000;
f011115e:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111165:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f011116a:	83 ec 08             	sub    $0x8,%esp
f011116d:	ff 75 f4             	pushl  -0xc(%ebp)
f0111170:	50                   	push   %eax
f0111171:	e8 b6 6a ff ff       	call   f0107c2c <pt_clear_page_table_entry>
f0111176:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling clearing the entry of an invalid virtual address non existing page table.");
f0111179:	83 ec 04             	sub    $0x4,%esp
f011117c:	68 7c 89 13 f0       	push   $0xf013897c
f0111181:	68 01 01 00 00       	push   $0x101
f0111186:	68 be 85 13 f0       	push   $0xf01385be
f011118b:	e8 6b f0 fe ff       	call   f01001fb <_panic>

f0111190 <test_virtual_to_physical>:

//=====================================
// 4) TEST CONVERTING VA 2 PA:
//=====================================
int test_virtual_to_physical()
{
f0111190:	55                   	push   %ebp
f0111191:	89 e5                	mov    %esp,%ebp
f0111193:	57                   	push   %edi
f0111194:	56                   	push   %esi
f0111195:	53                   	push   %ebx
f0111196:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	int kilo = 1024 ;
f011119c:	c7 45 e4 00 04 00 00 	movl   $0x400,-0x1c(%ebp)
	int mega = 1024*1024 ;
f01111a3:	c7 45 e0 00 00 10 00 	movl   $0x100000,-0x20(%ebp)
	uint32 va;
	ClearUserSpace(ptr_page_directory);
f01111aa:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01111af:	83 ec 0c             	sub    $0xc,%esp
f01111b2:	50                   	push   %eax
f01111b3:	e8 79 49 00 00       	call   f0115b31 <ClearUserSpace>
f01111b8:	83 c4 10             	add    $0x10,%esp

	//============================
	//Case 1: Check getting pa of a va with NO table
	va = 0xeebfe000;
f01111bb:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	int pa = virtual_to_physical(ptr_page_directory, va);
f01111c2:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01111c7:	83 ec 08             	sub    $0x8,%esp
f01111ca:	ff 75 dc             	pushl  -0x24(%ebp)
f01111cd:	50                   	push   %eax
f01111ce:	e8 c5 6a ff ff       	call   f0107c98 <virtual_to_physical>
f01111d3:	83 c4 10             	add    $0x10,%esp
f01111d6:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %d\n", va, CA(ptr_page_directory, va), pa);
	if(pa != -1)
f01111d9:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
f01111dd:	74 17                	je     f01111f6 <test_virtual_to_physical+0x66>
		panic("[EVAL] #1 Test of virtual_to_physical Entry Failed.\n");
f01111df:	83 ec 04             	sub    $0x4,%esp
f01111e2:	68 14 8a 13 f0       	push   $0xf0138a14
f01111e7:	68 16 01 00 00       	push   $0x116
f01111ec:	68 be 85 13 f0       	push   $0xf01385be
f01111f1:	e8 05 f0 fe ff       	call   f01001fb <_panic>

	//============================
	//Case 2: Check getting pa of a va with a table
	va = 0xf0000000;
f01111f6:	c7 45 dc 00 00 00 f0 	movl   $0xf0000000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f01111fd:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111202:	83 ec 08             	sub    $0x8,%esp
f0111205:	ff 75 dc             	pushl  -0x24(%ebp)
f0111208:	50                   	push   %eax
f0111209:	e8 8a 6a ff ff       	call   f0107c98 <virtual_to_physical>
f011120e:	83 c4 10             	add    $0x10,%esp
f0111211:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111214:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111219:	83 ec 08             	sub    $0x8,%esp
f011121c:	ff 75 dc             	pushl  -0x24(%ebp)
f011121f:	50                   	push   %eax
f0111220:	e8 0b 48 00 00       	call   f0115a30 <CA>
f0111225:	83 c4 10             	add    $0x10,%esp
f0111228:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011122b:	74 17                	je     f0111244 <test_virtual_to_physical+0xb4>
		panic("[EVAL] #2 Test of virtual_to_physical Entry Failed.\n");
f011122d:	83 ec 04             	sub    $0x4,%esp
f0111230:	68 4c 8a 13 f0       	push   $0xf0138a4c
f0111235:	68 1f 01 00 00       	push   $0x11f
f011123a:	68 be 85 13 f0       	push   $0xf01385be
f011123f:	e8 b7 ef fe ff       	call   f01001fb <_panic>

	//============================
	char ap1[100] = "ap 0x2800000";execute_command(ap1);
f0111244:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f011124a:	bb 18 8c 13 f0       	mov    $0xf0138c18,%ebx
f011124f:	ba 0d 00 00 00       	mov    $0xd,%edx
f0111254:	89 c7                	mov    %eax,%edi
f0111256:	89 de                	mov    %ebx,%esi
f0111258:	89 d1                	mov    %edx,%ecx
f011125a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011125c:	8d 55 81             	lea    -0x7f(%ebp),%edx
f011125f:	b9 57 00 00 00       	mov    $0x57,%ecx
f0111264:	b0 00                	mov    $0x0,%al
f0111266:	89 d7                	mov    %edx,%edi
f0111268:	f3 aa                	rep stos %al,%es:(%edi)
f011126a:	83 ec 0c             	sub    $0xc,%esp
f011126d:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0111273:	50                   	push   %eax
f0111274:	e8 6b fa fe ff       	call   f0100ce4 <execute_command>
f0111279:	83 c4 10             	add    $0x10,%esp
	va = 0x2800000;
f011127c:	c7 45 dc 00 00 80 02 	movl   $0x2800000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111283:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111288:	83 ec 08             	sub    $0x8,%esp
f011128b:	ff 75 dc             	pushl  -0x24(%ebp)
f011128e:	50                   	push   %eax
f011128f:	e8 04 6a ff ff       	call   f0107c98 <virtual_to_physical>
f0111294:	83 c4 10             	add    $0x10,%esp
f0111297:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f011129a:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f011129f:	83 ec 08             	sub    $0x8,%esp
f01112a2:	ff 75 dc             	pushl  -0x24(%ebp)
f01112a5:	50                   	push   %eax
f01112a6:	e8 85 47 00 00       	call   f0115a30 <CA>
f01112ab:	83 c4 10             	add    $0x10,%esp
f01112ae:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01112b1:	74 17                	je     f01112ca <test_virtual_to_physical+0x13a>
		panic("[EVAL] #3 Test of virtual_to_physical Entry Failed.\n");
f01112b3:	83 ec 04             	sub    $0x4,%esp
f01112b6:	68 84 8a 13 f0       	push   $0xf0138a84
f01112bb:	68 28 01 00 00       	push   $0x128
f01112c0:	68 be 85 13 f0       	push   $0xf01385be
f01112c5:	e8 31 ef fe ff       	call   f01001fb <_panic>

	//============================
	char ap2[100] = "ap 0x2801000";execute_command(ap2);
f01112ca:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01112d0:	bb 7c 8c 13 f0       	mov    $0xf0138c7c,%ebx
f01112d5:	ba 0d 00 00 00       	mov    $0xd,%edx
f01112da:	89 c7                	mov    %eax,%edi
f01112dc:	89 de                	mov    %ebx,%esi
f01112de:	89 d1                	mov    %edx,%ecx
f01112e0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01112e2:	8d 95 1d ff ff ff    	lea    -0xe3(%ebp),%edx
f01112e8:	b9 57 00 00 00       	mov    $0x57,%ecx
f01112ed:	b0 00                	mov    $0x0,%al
f01112ef:	89 d7                	mov    %edx,%edi
f01112f1:	f3 aa                	rep stos %al,%es:(%edi)
f01112f3:	83 ec 0c             	sub    $0xc,%esp
f01112f6:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01112fc:	50                   	push   %eax
f01112fd:	e8 e2 f9 fe ff       	call   f0100ce4 <execute_command>
f0111302:	83 c4 10             	add    $0x10,%esp
	va = 0x2801000;
f0111305:	c7 45 dc 00 10 80 02 	movl   $0x2801000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f011130c:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111311:	83 ec 08             	sub    $0x8,%esp
f0111314:	ff 75 dc             	pushl  -0x24(%ebp)
f0111317:	50                   	push   %eax
f0111318:	e8 7b 69 ff ff       	call   f0107c98 <virtual_to_physical>
f011131d:	83 c4 10             	add    $0x10,%esp
f0111320:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111323:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111328:	83 ec 08             	sub    $0x8,%esp
f011132b:	ff 75 dc             	pushl  -0x24(%ebp)
f011132e:	50                   	push   %eax
f011132f:	e8 fc 46 00 00       	call   f0115a30 <CA>
f0111334:	83 c4 10             	add    $0x10,%esp
f0111337:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011133a:	74 17                	je     f0111353 <test_virtual_to_physical+0x1c3>
		panic("[EVAL] #4 Test of virtual_to_physical Entry Failed.\n");
f011133c:	83 ec 04             	sub    $0x4,%esp
f011133f:	68 bc 8a 13 f0       	push   $0xf0138abc
f0111344:	68 31 01 00 00       	push   $0x131
f0111349:	68 be 85 13 f0       	push   $0xf01385be
f011134e:	e8 a8 ee fe ff       	call   f01001fb <_panic>

	//============================
	char ap3[100] = "ap 0x2802000";execute_command(ap3);
f0111353:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f0111359:	bb e0 8c 13 f0       	mov    $0xf0138ce0,%ebx
f011135e:	ba 0d 00 00 00       	mov    $0xd,%edx
f0111363:	89 c7                	mov    %eax,%edi
f0111365:	89 de                	mov    %ebx,%esi
f0111367:	89 d1                	mov    %edx,%ecx
f0111369:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011136b:	8d 95 b9 fe ff ff    	lea    -0x147(%ebp),%edx
f0111371:	b9 57 00 00 00       	mov    $0x57,%ecx
f0111376:	b0 00                	mov    $0x0,%al
f0111378:	89 d7                	mov    %edx,%edi
f011137a:	f3 aa                	rep stos %al,%es:(%edi)
f011137c:	83 ec 0c             	sub    $0xc,%esp
f011137f:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f0111385:	50                   	push   %eax
f0111386:	e8 59 f9 fe ff       	call   f0100ce4 <execute_command>
f011138b:	83 c4 10             	add    $0x10,%esp
	va = 0x2802000;
f011138e:	c7 45 dc 00 20 80 02 	movl   $0x2802000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111395:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f011139a:	83 ec 08             	sub    $0x8,%esp
f011139d:	ff 75 dc             	pushl  -0x24(%ebp)
f01113a0:	50                   	push   %eax
f01113a1:	e8 f2 68 ff ff       	call   f0107c98 <virtual_to_physical>
f01113a6:	83 c4 10             	add    $0x10,%esp
f01113a9:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f01113ac:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01113b1:	83 ec 08             	sub    $0x8,%esp
f01113b4:	ff 75 dc             	pushl  -0x24(%ebp)
f01113b7:	50                   	push   %eax
f01113b8:	e8 73 46 00 00       	call   f0115a30 <CA>
f01113bd:	83 c4 10             	add    $0x10,%esp
f01113c0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01113c3:	74 17                	je     f01113dc <test_virtual_to_physical+0x24c>
		panic("[EVAL] #5 Test of virtual_to_physical Entry Failed.\n");
f01113c5:	83 ec 04             	sub    $0x4,%esp
f01113c8:	68 f4 8a 13 f0       	push   $0xf0138af4
f01113cd:	68 3a 01 00 00       	push   $0x13a
f01113d2:	68 be 85 13 f0       	push   $0xf01385be
f01113d7:	e8 1f ee fe ff       	call   f01001fb <_panic>

	//============================
	va = 0xF0001000;
f01113dc:	c7 45 dc 00 10 00 f0 	movl   $0xf0001000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f01113e3:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01113e8:	83 ec 08             	sub    $0x8,%esp
f01113eb:	ff 75 dc             	pushl  -0x24(%ebp)
f01113ee:	50                   	push   %eax
f01113ef:	e8 a4 68 ff ff       	call   f0107c98 <virtual_to_physical>
f01113f4:	83 c4 10             	add    $0x10,%esp
f01113f7:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f01113fa:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01113ff:	83 ec 08             	sub    $0x8,%esp
f0111402:	ff 75 dc             	pushl  -0x24(%ebp)
f0111405:	50                   	push   %eax
f0111406:	e8 25 46 00 00       	call   f0115a30 <CA>
f011140b:	83 c4 10             	add    $0x10,%esp
f011140e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111411:	74 17                	je     f011142a <test_virtual_to_physical+0x29a>
		panic("[EVAL] #6 Test of virtual_to_physical Entry Failed.\n");
f0111413:	83 ec 04             	sub    $0x4,%esp
f0111416:	68 2c 8b 13 f0       	push   $0xf0138b2c
f011141b:	68 42 01 00 00       	push   $0x142
f0111420:	68 be 85 13 f0       	push   $0xf01385be
f0111425:	e8 d1 ed fe ff       	call   f01001fb <_panic>

	//============================
	va = 0xF0001005;
f011142a:	c7 45 dc 05 10 00 f0 	movl   $0xf0001005,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111431:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111436:	83 ec 08             	sub    $0x8,%esp
f0111439:	ff 75 dc             	pushl  -0x24(%ebp)
f011143c:	50                   	push   %eax
f011143d:	e8 56 68 ff ff       	call   f0107c98 <virtual_to_physical>
f0111442:	83 c4 10             	add    $0x10,%esp
f0111445:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111448:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f011144d:	83 ec 08             	sub    $0x8,%esp
f0111450:	ff 75 dc             	pushl  -0x24(%ebp)
f0111453:	50                   	push   %eax
f0111454:	e8 d7 45 00 00       	call   f0115a30 <CA>
f0111459:	83 c4 10             	add    $0x10,%esp
f011145c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011145f:	74 17                	je     f0111478 <test_virtual_to_physical+0x2e8>
		panic("[EVAL] #7 Test of virtual_to_physical Entry Failed.\n");
f0111461:	83 ec 04             	sub    $0x4,%esp
f0111464:	68 64 8b 13 f0       	push   $0xf0138b64
f0111469:	68 4a 01 00 00       	push   $0x14a
f011146e:	68 be 85 13 f0       	push   $0xf01385be
f0111473:	e8 83 ed fe ff       	call   f01001fb <_panic>

	//============================
	char ap4[100] = "ap 0xeebfe000";execute_command(ap4);
f0111478:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f011147e:	bb 44 8d 13 f0       	mov    $0xf0138d44,%ebx
f0111483:	ba 0e 00 00 00       	mov    $0xe,%edx
f0111488:	89 c7                	mov    %eax,%edi
f011148a:	89 de                	mov    %ebx,%esi
f011148c:	89 d1                	mov    %edx,%ecx
f011148e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111490:	8d 95 56 fe ff ff    	lea    -0x1aa(%ebp),%edx
f0111496:	b9 56 00 00 00       	mov    $0x56,%ecx
f011149b:	b0 00                	mov    $0x0,%al
f011149d:	89 d7                	mov    %edx,%edi
f011149f:	f3 aa                	rep stos %al,%es:(%edi)
f01114a1:	83 ec 0c             	sub    $0xc,%esp
f01114a4:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f01114aa:	50                   	push   %eax
f01114ab:	e8 34 f8 fe ff       	call   f0100ce4 <execute_command>
f01114b0:	83 c4 10             	add    $0x10,%esp
	va = 0xeebfe000;
f01114b3:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f01114ba:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01114bf:	83 ec 08             	sub    $0x8,%esp
f01114c2:	ff 75 dc             	pushl  -0x24(%ebp)
f01114c5:	50                   	push   %eax
f01114c6:	e8 cd 67 ff ff       	call   f0107c98 <virtual_to_physical>
f01114cb:	83 c4 10             	add    $0x10,%esp
f01114ce:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f01114d1:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01114d6:	83 ec 08             	sub    $0x8,%esp
f01114d9:	ff 75 dc             	pushl  -0x24(%ebp)
f01114dc:	50                   	push   %eax
f01114dd:	e8 4e 45 00 00       	call   f0115a30 <CA>
f01114e2:	83 c4 10             	add    $0x10,%esp
f01114e5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01114e8:	74 17                	je     f0111501 <test_virtual_to_physical+0x371>
		panic("[EVAL] #8 Test of virtual_to_physical Entry Failed.\n");
f01114ea:	83 ec 04             	sub    $0x4,%esp
f01114ed:	68 9c 8b 13 f0       	push   $0xf0138b9c
f01114f2:	68 53 01 00 00       	push   $0x153
f01114f7:	68 be 85 13 f0       	push   $0xf01385be
f01114fc:	e8 fa ec fe ff       	call   f01001fb <_panic>

	//============================
	cprintf("Congratulations!! test virtual_to_physical completed successfully.\n");
f0111501:	83 ec 0c             	sub    $0xc,%esp
f0111504:	68 d4 8b 13 f0       	push   $0xf0138bd4
f0111509:	e8 74 f7 fe ff       	call   f0100c82 <cprintf>
f011150e:	83 c4 10             	add    $0x10,%esp

	return 0;
f0111511:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111516:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0111519:	5b                   	pop    %ebx
f011151a:	5e                   	pop    %esi
f011151b:	5f                   	pop    %edi
f011151c:	5d                   	pop    %ebp
f011151d:	c3                   	ret    

f011151e <test_cut_paste_pages>:

//===============================
// 1) TEST CUT-PASTE PAGES:
//===============================
int test_cut_paste_pages()
{
f011151e:	55                   	push   %ebp
f011151f:	89 e5                	mov    %esp,%ebp
f0111521:	57                   	push   %edi
f0111522:	56                   	push   %esi
f0111523:	53                   	push   %ebx
f0111524:	81 ec ec 03 00 00    	sub    $0x3ec,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f011152a:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0111530:	bb 58 90 13 f0       	mov    $0xf0139058,%ebx
f0111535:	ba 0f 00 00 00       	mov    $0xf,%edx
f011153a:	89 c7                	mov    %eax,%edi
f011153c:	89 de                	mov    %ebx,%esi
f011153e:	89 d1                	mov    %edx,%ecx
f0111540:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111542:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0111548:	b9 23 00 00 00       	mov    $0x23,%ecx
f011154d:	b0 00                	mov    $0x0,%al
f011154f:	89 d7                	mov    %edx,%edi
f0111551:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0111553:	6a 00                	push   $0x0
f0111555:	6a 0a                	push   $0xa
f0111557:	6a 14                	push   $0x14
f0111559:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f011155f:	50                   	push   %eax
f0111560:	e8 96 77 ff ff       	call   f0108cfb <env_create>
f0111565:	83 c4 10             	add    $0x10,%esp
f0111568:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f011156b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011156e:	8b 40 5c             	mov    0x5c(%eax),%eax
f0111571:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0111574:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111577:	8b 40 60             	mov    0x60(%eax),%eax
f011157a:	89 45 90             	mov    %eax,-0x70(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f011157d:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111580:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0111583:	c7 85 4a ff ff ff 61 	movl   $0x20707561,-0xb6(%ebp)
f011158a:	75 70 20 
f011158d:	c7 85 4e ff ff ff 00 	movl   $0x0,-0xb2(%ebp)
f0111594:	00 00 00 
f0111597:	8d 95 52 ff ff ff    	lea    -0xae(%ebp),%edx
f011159d:	b9 03 00 00 00       	mov    $0x3,%ecx
f01115a2:	b8 00 00 00 00       	mov    $0x0,%eax
f01115a7:	89 d7                	mov    %edx,%edi
f01115a9:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f01115ab:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01115ae:	8b 40 4c             	mov    0x4c(%eax),%eax
f01115b1:	83 ec 08             	sub    $0x8,%esp
f01115b4:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f01115ba:	52                   	push   %edx
f01115bb:	50                   	push   %eax
f01115bc:	e8 6f fb 01 00       	call   f0131130 <ltostr>
f01115c1:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f01115c4:	83 ec 04             	sub    $0x4,%esp
f01115c7:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01115cd:	50                   	push   %eax
f01115ce:	8d 85 36 ff ff ff    	lea    -0xca(%ebp),%eax
f01115d4:	50                   	push   %eax
f01115d5:	8d 85 4a ff ff ff    	lea    -0xb6(%ebp),%eax
f01115db:	50                   	push   %eax
f01115dc:	e8 47 fc 01 00       	call   f0131228 <strcconcat>
f01115e1:	83 c4 10             	add    $0x10,%esp
	//===================================================
	int numOfArgs = 0;
f01115e4:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6;
	int kilo = 1024 ;
f01115eb:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f01115f2:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)

	ClearUserSpace(proc_directory);
f01115f9:	83 ec 0c             	sub    $0xc,%esp
f01115fc:	ff 75 d4             	pushl  -0x2c(%ebp)
f01115ff:	e8 2d 45 00 00       	call   f0115b31 <ClearUserSpace>
f0111604:	83 c4 10             	add    $0x10,%esp

	char ap1[100] ;strcconcat(aup_cmd, " 0x2800000", ap1); execute_command(ap1);
f0111607:	83 ec 04             	sub    $0x4,%esp
f011160a:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0111610:	50                   	push   %eax
f0111611:	68 a8 8d 13 f0       	push   $0xf0138da8
f0111616:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011161c:	50                   	push   %eax
f011161d:	e8 06 fc 01 00       	call   f0131228 <strcconcat>
f0111622:	83 c4 10             	add    $0x10,%esp
f0111625:	83 ec 0c             	sub    $0xc,%esp
f0111628:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f011162e:	50                   	push   %eax
f011162f:	e8 b0 f6 fe ff       	call   f0100ce4 <execute_command>
f0111634:	83 c4 10             	add    $0x10,%esp
	char ap2[100] ;strcconcat(aup_cmd, " 0x2801000", ap2); execute_command(ap2);
f0111637:	83 ec 04             	sub    $0x4,%esp
f011163a:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f0111640:	50                   	push   %eax
f0111641:	68 b3 8d 13 f0       	push   $0xf0138db3
f0111646:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011164c:	50                   	push   %eax
f011164d:	e8 d6 fb 01 00       	call   f0131228 <strcconcat>
f0111652:	83 c4 10             	add    $0x10,%esp
f0111655:	83 ec 0c             	sub    $0xc,%esp
f0111658:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f011165e:	50                   	push   %eax
f011165f:	e8 80 f6 fe ff       	call   f0100ce4 <execute_command>
f0111664:	83 c4 10             	add    $0x10,%esp
	char ap3[100] ;strcconcat(aup_cmd, " 0x2802000", ap3); execute_command(ap3);
f0111667:	83 ec 04             	sub    $0x4,%esp
f011166a:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f0111670:	50                   	push   %eax
f0111671:	68 be 8d 13 f0       	push   $0xf0138dbe
f0111676:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011167c:	50                   	push   %eax
f011167d:	e8 a6 fb 01 00       	call   f0131228 <strcconcat>
f0111682:	83 c4 10             	add    $0x10,%esp
f0111685:	83 ec 0c             	sub    $0xc,%esp
f0111688:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f011168e:	50                   	push   %eax
f011168f:	e8 50 f6 fe ff       	call   f0100ce4 <execute_command>
f0111694:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x2800000; *ptr1 = 'a';
f0111697:	c7 45 c0 00 00 80 02 	movl   $0x2800000,-0x40(%ebp)
f011169e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01116a1:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x28017FF; *ptr1 = 'b';
f01116a4:	c7 45 c0 ff 17 80 02 	movl   $0x28017ff,-0x40(%ebp)
f01116ab:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01116ae:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x2802FFF; *ptr1 = 'c';
f01116b1:	c7 45 c0 ff 2f 80 02 	movl   $0x2802fff,-0x40(%ebp)
f01116b8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01116bb:	c6 00 63             	movb   $0x63,(%eax)

	uint32 perms = GP(proc_directory, (uint32)ptr1);
f01116be:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01116c1:	83 ec 08             	sub    $0x8,%esp
f01116c4:	50                   	push   %eax
f01116c5:	ff 75 d4             	pushl  -0x2c(%ebp)
f01116c8:	e8 45 44 00 00       	call   f0115b12 <GP>
f01116cd:	83 c4 10             	add    $0x10,%esp
f01116d0:	89 45 bc             	mov    %eax,-0x44(%ebp)

	int eval = 0;
f01116d3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int correct = 1;
f01116da:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	int ff1 = sys_calculate_free_frames();
f01116e1:	e8 75 b2 ff ff       	call   f010c95b <sys_calculate_free_frames>
f01116e6:	89 45 b8             	mov    %eax,-0x48(%ebp)

	/*=============================================*/
	/*PART I: Destination Pages Does NOT Exist 60% */
	/*=============================================*/
	cprintf("CASE I: Destination Pages Does NOT Exist [60%]\n") ;
f01116e9:	83 ec 0c             	sub    $0xc,%esp
f01116ec:	68 cc 8d 13 f0       	push   $0xf0138dcc
f01116f1:	e8 8c f5 fe ff       	call   f0100c82 <cprintf>
f01116f6:	83 c4 10             	add    $0x10,%esp
	int ret = cut_paste_pages(proc_directory, 0x2800000, 0x2900000, 3) ;
f01116f9:	6a 03                	push   $0x3
f01116fb:	68 00 00 90 02       	push   $0x2900000
f0111700:	68 00 00 80 02       	push   $0x2800000
f0111705:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111708:	e8 b3 6f ff ff       	call   f01086c0 <cut_paste_pages>
f011170d:	83 c4 10             	add    $0x10,%esp
f0111710:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	int ff2 = sys_calculate_free_frames();
f0111713:	e8 43 b2 ff ff       	call   f010c95b <sys_calculate_free_frames>
f0111718:	89 45 b0             	mov    %eax,-0x50(%ebp)

	correct = 1 ;
f011171b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	if (ret != 0 || ff1 != ff2)
f0111722:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0111726:	75 08                	jne    f0111730 <test_cut_paste_pages+0x212>
f0111728:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011172b:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011172e:	74 2b                	je     f011175b <test_cut_paste_pages+0x23d>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0111730:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111733:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0111736:	83 ec 0c             	sub    $0xc,%esp
f0111739:	50                   	push   %eax
f011173a:	ff 75 b4             	pushl  -0x4c(%ebp)
f011173d:	68 fc 8d 13 f0       	push   $0xf0138dfc
f0111742:	68 91 01 00 00       	push   $0x191
f0111747:	68 be 85 13 f0       	push   $0xf01385be
f011174c:	e8 36 ec fe ff       	call   f0100387 <_warn>
f0111751:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0111754:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 5 ;
f011175b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011175f:	74 04                	je     f0111765 <test_cut_paste_pages+0x247>
f0111761:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0111765:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2800000, 0x2900000, 3*PAGE_SIZE, 1, perms, 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f011176c:	83 ec 08             	sub    $0x8,%esp
f011176f:	6a 00                	push   $0x0
f0111771:	6a 01                	push   $0x1
f0111773:	6a 00                	push   $0x0
f0111775:	68 ff 0f 00 00       	push   $0xfff
f011177a:	ff 75 bc             	pushl  -0x44(%ebp)
f011177d:	6a 01                	push   $0x1
f011177f:	68 00 30 00 00       	push   $0x3000
f0111784:	68 00 00 90 02       	push   $0x2900000
f0111789:	68 00 00 80 02       	push   $0x2800000
f011178e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111791:	e8 cf 43 00 00       	call   f0115b65 <CCP>
f0111796:	83 c4 30             	add    $0x30,%esp
f0111799:	83 f8 01             	cmp    $0x1,%eax
f011179c:	74 21                	je     f01117bf <test_cut_paste_pages+0x2a1>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f011179e:	83 ec 04             	sub    $0x4,%esp
f01117a1:	68 50 8e 13 f0       	push   $0xf0138e50
f01117a6:	68 99 01 00 00       	push   $0x199
f01117ab:	68 be 85 13 f0       	push   $0xf01385be
f01117b0:	e8 d2 eb fe ff       	call   f0100387 <_warn>
f01117b5:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01117b8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 15 ;
f01117bf:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01117c3:	74 04                	je     f01117c9 <test_cut_paste_pages+0x2ab>
f01117c5:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	correct = 1 ;
f01117c9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2900000, 0) && CB(proc_directory, 0x2901000, 0) && CB(proc_directory, 0x2902000, 0))
f01117d0:	83 ec 04             	sub    $0x4,%esp
f01117d3:	6a 00                	push   $0x0
f01117d5:	68 00 00 90 02       	push   $0x2900000
f01117da:	ff 75 d4             	pushl  -0x2c(%ebp)
f01117dd:	e8 5f 41 00 00       	call   f0115941 <CB>
f01117e2:	83 c4 10             	add    $0x10,%esp
f01117e5:	85 c0                	test   %eax,%eax
f01117e7:	0f 84 f6 00 00 00    	je     f01118e3 <test_cut_paste_pages+0x3c5>
f01117ed:	83 ec 04             	sub    $0x4,%esp
f01117f0:	6a 00                	push   $0x0
f01117f2:	68 00 10 90 02       	push   $0x2901000
f01117f7:	ff 75 d4             	pushl  -0x2c(%ebp)
f01117fa:	e8 42 41 00 00       	call   f0115941 <CB>
f01117ff:	83 c4 10             	add    $0x10,%esp
f0111802:	85 c0                	test   %eax,%eax
f0111804:	0f 84 d9 00 00 00    	je     f01118e3 <test_cut_paste_pages+0x3c5>
f011180a:	83 ec 04             	sub    $0x4,%esp
f011180d:	6a 00                	push   $0x0
f011180f:	68 00 20 90 02       	push   $0x2902000
f0111814:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111817:	e8 25 41 00 00       	call   f0115941 <CB>
f011181c:	83 c4 10             	add    $0x10,%esp
f011181f:	85 c0                	test   %eax,%eax
f0111821:	0f 84 bc 00 00 00    	je     f01118e3 <test_cut_paste_pages+0x3c5>
	{
		ptr1 = (char*)0x2900000;
f0111827:	c7 45 c0 00 00 90 02 	movl   $0x2900000,-0x40(%ebp)
		ptr2 = (char*)0x29017FF;
f011182e:	c7 45 ac ff 17 90 02 	movl   $0x29017ff,-0x54(%ebp)
		ptr3 = (char*)0x2902FFF;
f0111835:	c7 45 a8 ff 2f 90 02 	movl   $0x2902fff,-0x58(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'b' || (*ptr3) != 'c')
f011183c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011183f:	8a 00                	mov    (%eax),%al
f0111841:	3c 61                	cmp    $0x61,%al
f0111843:	75 12                	jne    f0111857 <test_cut_paste_pages+0x339>
f0111845:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111848:	8a 00                	mov    (%eax),%al
f011184a:	3c 62                	cmp    $0x62,%al
f011184c:	75 09                	jne    f0111857 <test_cut_paste_pages+0x339>
f011184e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111851:	8a 00                	mov    (%eax),%al
f0111853:	3c 63                	cmp    $0x63,%al
f0111855:	74 21                	je     f0111878 <test_cut_paste_pages+0x35a>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0111857:	83 ec 04             	sub    $0x4,%esp
f011185a:	68 9c 8e 13 f0       	push   $0xf0138e9c
f011185f:	68 a6 01 00 00       	push   $0x1a6
f0111864:	68 be 85 13 f0       	push   $0xf01385be
f0111869:	e8 19 eb fe ff       	call   f0100387 <_warn>
f011186e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111871:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0111878:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011187c:	74 04                	je     f0111882 <test_cut_paste_pages+0x364>
f011187e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0111882:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CB(proc_directory, 0x2901000, 1))
f0111889:	83 ec 04             	sub    $0x4,%esp
f011188c:	6a 01                	push   $0x1
f011188e:	68 00 10 90 02       	push   $0x2901000
f0111893:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111896:	e8 a6 40 00 00       	call   f0115941 <CB>
f011189b:	83 c4 10             	add    $0x10,%esp
f011189e:	85 c0                	test   %eax,%eax
f01118a0:	74 41                	je     f01118e3 <test_cut_paste_pages+0x3c5>
		{
			*ptr2 = 'y';
f01118a2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01118a5:	c6 00 79             	movb   $0x79,(%eax)
			if ((*ptr2) != 'y')
f01118a8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01118ab:	8a 00                	mov    (%eax),%al
f01118ad:	3c 79                	cmp    $0x79,%al
f01118af:	74 21                	je     f01118d2 <test_cut_paste_pages+0x3b4>
			{
				warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01118b1:	83 ec 04             	sub    $0x4,%esp
f01118b4:	68 9c 8e 13 f0       	push   $0xf0138e9c
f01118b9:	68 b1 01 00 00       	push   $0x1b1
f01118be:	68 be 85 13 f0       	push   $0xf01385be
f01118c3:	e8 bf ea fe ff       	call   f0100387 <_warn>
f01118c8:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01118cb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f01118d2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01118d6:	74 04                	je     f01118dc <test_cut_paste_pages+0x3be>
f01118d8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01118dc:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}


	ff1 = ff2 ;
f01118e3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01118e6:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x2901000, 0x2BFF000, 2) ;
f01118e9:	6a 02                	push   $0x2
f01118eb:	68 00 f0 bf 02       	push   $0x2bff000
f01118f0:	68 00 10 90 02       	push   $0x2901000
f01118f5:	ff 75 d4             	pushl  -0x2c(%ebp)
f01118f8:	e8 c3 6d ff ff       	call   f01086c0 <cut_paste_pages>
f01118fd:	83 c4 10             	add    $0x10,%esp
f0111900:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0111903:	e8 53 b0 ff ff       	call   f010c95b <sys_calculate_free_frames>
f0111908:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != 0 || ff1 - ff2 != 1)
f011190b:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f011190f:	75 0b                	jne    f011191c <test_cut_paste_pages+0x3fe>
f0111911:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111914:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0111917:	83 f8 01             	cmp    $0x1,%eax
f011191a:	74 2b                	je     f0111947 <test_cut_paste_pages+0x429>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f011191c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011191f:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0111922:	83 ec 0c             	sub    $0xc,%esp
f0111925:	50                   	push   %eax
f0111926:	ff 75 b4             	pushl  -0x4c(%ebp)
f0111929:	68 fc 8d 13 f0       	push   $0xf0138dfc
f011192e:	68 c2 01 00 00       	push   $0x1c2
f0111933:	68 be 85 13 f0       	push   $0xf01385be
f0111938:	e8 4a ea fe ff       	call   f0100387 <_warn>
f011193d:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0111940:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0111947:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011194b:	74 04                	je     f0111951 <test_cut_paste_pages+0x433>
f011194d:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0111951:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2901000, 0x2BFF000, 2*PAGE_SIZE, 1, perms , 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0111958:	83 ec 08             	sub    $0x8,%esp
f011195b:	6a 00                	push   $0x0
f011195d:	6a 01                	push   $0x1
f011195f:	6a 00                	push   $0x0
f0111961:	68 ff 0f 00 00       	push   $0xfff
f0111966:	ff 75 bc             	pushl  -0x44(%ebp)
f0111969:	6a 01                	push   $0x1
f011196b:	68 00 20 00 00       	push   $0x2000
f0111970:	68 00 f0 bf 02       	push   $0x2bff000
f0111975:	68 00 10 90 02       	push   $0x2901000
f011197a:	ff 75 d4             	pushl  -0x2c(%ebp)
f011197d:	e8 e3 41 00 00       	call   f0115b65 <CCP>
f0111982:	83 c4 30             	add    $0x30,%esp
f0111985:	83 f8 01             	cmp    $0x1,%eax
f0111988:	74 21                	je     f01119ab <test_cut_paste_pages+0x48d>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f011198a:	83 ec 04             	sub    $0x4,%esp
f011198d:	68 50 8e 13 f0       	push   $0xf0138e50
f0111992:	68 ca 01 00 00       	push   $0x1ca
f0111997:	68 be 85 13 f0       	push   $0xf01385be
f011199c:	e8 e6 e9 fe ff       	call   f0100387 <_warn>
f01119a1:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01119a4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f01119ab:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01119af:	74 04                	je     f01119b5 <test_cut_paste_pages+0x497>
f01119b1:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f01119b5:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2BFF7FF, 0) && CB(proc_directory, 0x2C00FFF, 0))
f01119bc:	83 ec 04             	sub    $0x4,%esp
f01119bf:	6a 00                	push   $0x0
f01119c1:	68 ff f7 bf 02       	push   $0x2bff7ff
f01119c6:	ff 75 d4             	pushl  -0x2c(%ebp)
f01119c9:	e8 73 3f 00 00       	call   f0115941 <CB>
f01119ce:	83 c4 10             	add    $0x10,%esp
f01119d1:	85 c0                	test   %eax,%eax
f01119d3:	74 6b                	je     f0111a40 <test_cut_paste_pages+0x522>
f01119d5:	83 ec 04             	sub    $0x4,%esp
f01119d8:	6a 00                	push   $0x0
f01119da:	68 ff 0f c0 02       	push   $0x2c00fff
f01119df:	ff 75 d4             	pushl  -0x2c(%ebp)
f01119e2:	e8 5a 3f 00 00       	call   f0115941 <CB>
f01119e7:	83 c4 10             	add    $0x10,%esp
f01119ea:	85 c0                	test   %eax,%eax
f01119ec:	74 52                	je     f0111a40 <test_cut_paste_pages+0x522>
	{
		ptr1 = (char*)0x2BFF7FF;
f01119ee:	c7 45 c0 ff f7 bf 02 	movl   $0x2bff7ff,-0x40(%ebp)
		ptr2 = (char*)0x2C00FFF;
f01119f5:	c7 45 ac ff 0f c0 02 	movl   $0x2c00fff,-0x54(%ebp)
		if ((*ptr1) != 'y' || (*ptr2) != 'c')
f01119fc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01119ff:	8a 00                	mov    (%eax),%al
f0111a01:	3c 79                	cmp    $0x79,%al
f0111a03:	75 09                	jne    f0111a0e <test_cut_paste_pages+0x4f0>
f0111a05:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111a08:	8a 00                	mov    (%eax),%al
f0111a0a:	3c 63                	cmp    $0x63,%al
f0111a0c:	74 21                	je     f0111a2f <test_cut_paste_pages+0x511>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0111a0e:	83 ec 04             	sub    $0x4,%esp
f0111a11:	68 9c 8e 13 f0       	push   $0xf0138e9c
f0111a16:	68 d6 01 00 00       	push   $0x1d6
f0111a1b:	68 be 85 13 f0       	push   $0xf01385be
f0111a20:	e8 62 e9 fe ff       	call   f0100387 <_warn>
f0111a25:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111a28:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0111a2f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111a33:	74 04                	je     f0111a39 <test_cut_paste_pages+0x51b>
f0111a35:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0111a39:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}
	cprintf("CASE I: END\n") ;
f0111a40:	83 ec 0c             	sub    $0xc,%esp
f0111a43:	68 d5 8e 13 f0       	push   $0xf0138ed5
f0111a48:	e8 35 f2 fe ff       	call   f0100c82 <cprintf>
f0111a4d:	83 c4 10             	add    $0x10,%esp

	/*========================================*/
	/*PART II: Destination Pages Exist 40%	  */
	/*========================================*/
	cprintf("\nCASE II: Destination Pages Exist [40%]\n") ;
f0111a50:	83 ec 0c             	sub    $0xc,%esp
f0111a53:	68 e4 8e 13 f0       	push   $0xf0138ee4
f0111a58:	e8 25 f2 fe ff       	call   f0100c82 <cprintf>
f0111a5d:	83 c4 10             	add    $0x10,%esp

	char ap4[100] ;strcconcat(aup_cmd, " 0x1400000", ap4); execute_command(ap4);
f0111a60:	83 ec 04             	sub    $0x4,%esp
f0111a63:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0111a69:	50                   	push   %eax
f0111a6a:	68 0d 8f 13 f0       	push   $0xf0138f0d
f0111a6f:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111a75:	50                   	push   %eax
f0111a76:	e8 ad f7 01 00       	call   f0131228 <strcconcat>
f0111a7b:	83 c4 10             	add    $0x10,%esp
f0111a7e:	83 ec 0c             	sub    $0xc,%esp
f0111a81:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0111a87:	50                   	push   %eax
f0111a88:	e8 57 f2 fe ff       	call   f0100ce4 <execute_command>
f0111a8d:	83 c4 10             	add    $0x10,%esp
	char ap5[100] ;strcconcat(aup_cmd, " 0x1401000", ap5); execute_command(ap5);
f0111a90:	83 ec 04             	sub    $0x4,%esp
f0111a93:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0111a99:	50                   	push   %eax
f0111a9a:	68 18 8f 13 f0       	push   $0xf0138f18
f0111a9f:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111aa5:	50                   	push   %eax
f0111aa6:	e8 7d f7 01 00       	call   f0131228 <strcconcat>
f0111aab:	83 c4 10             	add    $0x10,%esp
f0111aae:	83 ec 0c             	sub    $0xc,%esp
f0111ab1:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0111ab7:	50                   	push   %eax
f0111ab8:	e8 27 f2 fe ff       	call   f0100ce4 <execute_command>
f0111abd:	83 c4 10             	add    $0x10,%esp
	char ap6[100] ;strcconcat(aup_cmd, " 0x1402000", ap6); execute_command(ap6);
f0111ac0:	83 ec 04             	sub    $0x4,%esp
f0111ac3:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0111ac9:	50                   	push   %eax
f0111aca:	68 23 8f 13 f0       	push   $0xf0138f23
f0111acf:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111ad5:	50                   	push   %eax
f0111ad6:	e8 4d f7 01 00       	call   f0131228 <strcconcat>
f0111adb:	83 c4 10             	add    $0x10,%esp
f0111ade:	83 ec 0c             	sub    $0xc,%esp
f0111ae1:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0111ae7:	50                   	push   %eax
f0111ae8:	e8 f7 f1 fe ff       	call   f0100ce4 <execute_command>
f0111aed:	83 c4 10             	add    $0x10,%esp
	char ap7[100] ;strcconcat(aup_cmd, " 0x1C00000", ap7); execute_command(ap7);
f0111af0:	83 ec 04             	sub    $0x4,%esp
f0111af3:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0111af9:	50                   	push   %eax
f0111afa:	68 2e 8f 13 f0       	push   $0xf0138f2e
f0111aff:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111b05:	50                   	push   %eax
f0111b06:	e8 1d f7 01 00       	call   f0131228 <strcconcat>
f0111b0b:	83 c4 10             	add    $0x10,%esp
f0111b0e:	83 ec 0c             	sub    $0xc,%esp
f0111b11:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0111b17:	50                   	push   %eax
f0111b18:	e8 c7 f1 fe ff       	call   f0100ce4 <execute_command>
f0111b1d:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x1400000; *ptr1 = 'a';
f0111b20:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
f0111b27:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111b2a:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x14007FF; *ptr1 = 'b';
f0111b2d:	c7 45 c0 ff 07 40 01 	movl   $0x14007ff,-0x40(%ebp)
f0111b34:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111b37:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x1400FFF; *ptr1 = 'c';
f0111b3a:	c7 45 c0 ff 0f 40 01 	movl   $0x1400fff,-0x40(%ebp)
f0111b41:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111b44:	c6 00 63             	movb   $0x63,(%eax)
	ptr1 = (char*)0x1C00000; *ptr1 = 'x';
f0111b47:	c7 45 c0 00 00 c0 01 	movl   $0x1c00000,-0x40(%ebp)
f0111b4e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111b51:	c6 00 78             	movb   $0x78,(%eax)
	ptr1 = (char*)0x1C007FF; *ptr1 = 'y';
f0111b54:	c7 45 c0 ff 07 c0 01 	movl   $0x1c007ff,-0x40(%ebp)
f0111b5b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111b5e:	c6 00 79             	movb   $0x79,(%eax)
	ptr1 = (char*)0x1C00FFF; *ptr1 = 'z';
f0111b61:	c7 45 c0 ff 0f c0 01 	movl   $0x1c00fff,-0x40(%ebp)
f0111b68:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111b6b:	c6 00 7a             	movb   $0x7a,(%eax)
	uint32 srcp = GP(proc_directory, 0x1C00000) ;
f0111b6e:	83 ec 08             	sub    $0x8,%esp
f0111b71:	68 00 00 c0 01       	push   $0x1c00000
f0111b76:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111b79:	e8 94 3f 00 00       	call   f0115b12 <GP>
f0111b7e:	83 c4 10             	add    $0x10,%esp
f0111b81:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	uint32 dstp = GP(proc_directory, 0x1400000) ;
f0111b84:	83 ec 08             	sub    $0x8,%esp
f0111b87:	68 00 00 40 01       	push   $0x1400000
f0111b8c:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111b8f:	e8 7e 3f 00 00       	call   f0115b12 <GP>
f0111b94:	83 c4 10             	add    $0x10,%esp
f0111b97:	89 45 a0             	mov    %eax,-0x60(%ebp)

	ff1 = sys_calculate_free_frames();
f0111b9a:	e8 bc ad ff ff       	call   f010c95b <sys_calculate_free_frames>
f0111b9f:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1C00000, 0x1400000, 1) ;
f0111ba2:	6a 01                	push   $0x1
f0111ba4:	68 00 00 40 01       	push   $0x1400000
f0111ba9:	68 00 00 c0 01       	push   $0x1c00000
f0111bae:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111bb1:	e8 0a 6b ff ff       	call   f01086c0 <cut_paste_pages>
f0111bb6:	83 c4 10             	add    $0x10,%esp
f0111bb9:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0111bbc:	e8 9a ad ff ff       	call   f010c95b <sys_calculate_free_frames>
f0111bc1:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0111bc4:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0111bc8:	75 08                	jne    f0111bd2 <test_cut_paste_pages+0x6b4>
f0111bca:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111bcd:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0111bd0:	74 2b                	je     f0111bfd <test_cut_paste_pages+0x6df>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0111bd2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111bd5:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0111bd8:	83 ec 0c             	sub    $0xc,%esp
f0111bdb:	50                   	push   %eax
f0111bdc:	ff 75 b4             	pushl  -0x4c(%ebp)
f0111bdf:	68 3c 8f 13 f0       	push   $0xf0138f3c
f0111be4:	68 f9 01 00 00       	push   $0x1f9
f0111be9:	68 be 85 13 f0       	push   $0xf01385be
f0111bee:	e8 94 e7 fe ff       	call   f0100387 <_warn>
f0111bf3:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0111bf6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0111bfd:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111c01:	74 04                	je     f0111c07 <test_cut_paste_pages+0x6e9>
f0111c03:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0111c07:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	int chk_cntnt = 1 ;
f0111c0e:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CCP(proc_directory, 0x1C00000, 0x1400000, 1*PAGE_SIZE, 1, dstp , 0xFFF, srcp, 0xFFF, CHK_CUT_PASTE) != 1)
f0111c15:	83 ec 08             	sub    $0x8,%esp
f0111c18:	6a 00                	push   $0x0
f0111c1a:	68 ff 0f 00 00       	push   $0xfff
f0111c1f:	ff 75 a4             	pushl  -0x5c(%ebp)
f0111c22:	68 ff 0f 00 00       	push   $0xfff
f0111c27:	ff 75 a0             	pushl  -0x60(%ebp)
f0111c2a:	6a 01                	push   $0x1
f0111c2c:	68 00 10 00 00       	push   $0x1000
f0111c31:	68 00 00 40 01       	push   $0x1400000
f0111c36:	68 00 00 c0 01       	push   $0x1c00000
f0111c3b:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111c3e:	e8 22 3f 00 00       	call   f0115b65 <CCP>
f0111c43:	83 c4 30             	add    $0x30,%esp
f0111c46:	83 f8 01             	cmp    $0x1,%eax
f0111c49:	74 28                	je     f0111c73 <test_cut_paste_pages+0x755>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0111c4b:	83 ec 04             	sub    $0x4,%esp
f0111c4e:	68 50 8e 13 f0       	push   $0xf0138e50
f0111c53:	68 02 02 00 00       	push   $0x202
f0111c58:	68 be 85 13 f0       	push   $0xf01385be
f0111c5d:	e8 25 e7 fe ff       	call   f0100387 <_warn>
f0111c62:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0111c65:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0111c6c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0111c73:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111c77:	74 04                	je     f0111c7d <test_cut_paste_pages+0x75f>
f0111c79:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0111c7d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0111c84:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0111c88:	0f 84 92 00 00 00    	je     f0111d20 <test_cut_paste_pages+0x802>
	{
		ptr1 = (char*)0x1400000;
f0111c8e:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0111c95:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0111c9c:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0111ca3:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0111caa:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0111cb1:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0111cb8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111cbb:	8a 00                	mov    (%eax),%al
f0111cbd:	3c 61                	cmp    $0x61,%al
f0111cbf:	75 2d                	jne    f0111cee <test_cut_paste_pages+0x7d0>
f0111cc1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111cc4:	8a 00                	mov    (%eax),%al
f0111cc6:	3c 78                	cmp    $0x78,%al
f0111cc8:	75 24                	jne    f0111cee <test_cut_paste_pages+0x7d0>
f0111cca:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111ccd:	8a 00                	mov    (%eax),%al
f0111ccf:	3c 62                	cmp    $0x62,%al
f0111cd1:	75 1b                	jne    f0111cee <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0111cd3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111cd6:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0111cd8:	3c 79                	cmp    $0x79,%al
f0111cda:	75 12                	jne    f0111cee <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0111cdc:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111cdf:	8a 00                	mov    (%eax),%al
f0111ce1:	3c 63                	cmp    $0x63,%al
f0111ce3:	75 09                	jne    f0111cee <test_cut_paste_pages+0x7d0>
f0111ce5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111ce8:	8a 00                	mov    (%eax),%al
f0111cea:	3c 7a                	cmp    $0x7a,%al
f0111cec:	74 21                	je     f0111d0f <test_cut_paste_pages+0x7f1>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0111cee:	83 ec 04             	sub    $0x4,%esp
f0111cf1:	68 9c 8e 13 f0       	push   $0xf0138e9c
f0111cf6:	68 14 02 00 00       	push   $0x214
f0111cfb:	68 be 85 13 f0       	push   $0xf01385be
f0111d00:	e8 82 e6 fe ff       	call   f0100387 <_warn>
f0111d05:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111d08:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0111d0f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111d13:	74 04                	je     f0111d19 <test_cut_paste_pages+0x7fb>
f0111d15:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0111d19:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	ff1 = sys_calculate_free_frames();
f0111d20:	e8 36 ac ff ff       	call   f010c95b <sys_calculate_free_frames>
f0111d25:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1400000, 0x1BFF000, 3) ;
f0111d28:	6a 03                	push   $0x3
f0111d2a:	68 00 f0 bf 01       	push   $0x1bff000
f0111d2f:	68 00 00 40 01       	push   $0x1400000
f0111d34:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111d37:	e8 84 69 ff ff       	call   f01086c0 <cut_paste_pages>
f0111d3c:	83 c4 10             	add    $0x10,%esp
f0111d3f:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0111d42:	e8 14 ac ff ff       	call   f010c95b <sys_calculate_free_frames>
f0111d47:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0111d4a:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0111d4e:	75 08                	jne    f0111d58 <test_cut_paste_pages+0x83a>
f0111d50:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111d53:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0111d56:	74 2b                	je     f0111d83 <test_cut_paste_pages+0x865>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0111d58:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111d5b:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0111d5e:	83 ec 0c             	sub    $0xc,%esp
f0111d61:	50                   	push   %eax
f0111d62:	ff 75 b4             	pushl  -0x4c(%ebp)
f0111d65:	68 3c 8f 13 f0       	push   $0xf0138f3c
f0111d6a:	68 23 02 00 00       	push   $0x223
f0111d6f:	68 be 85 13 f0       	push   $0xf01385be
f0111d74:	e8 0e e6 fe ff       	call   f0100387 <_warn>
f0111d79:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0111d7c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0111d83:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111d87:	74 04                	je     f0111d8d <test_cut_paste_pages+0x86f>
f0111d89:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0111d8d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	chk_cntnt = 1;
f0111d94:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0111d9b:	83 ec 04             	sub    $0x4,%esp
f0111d9e:	6a 00                	push   $0x0
f0111da0:	68 00 00 40 01       	push   $0x1400000
f0111da5:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111da8:	e8 94 3b 00 00       	call   f0115941 <CB>
f0111dad:	83 c4 10             	add    $0x10,%esp
f0111db0:	83 f8 01             	cmp    $0x1,%eax
f0111db3:	0f 85 80 00 00 00    	jne    f0111e39 <test_cut_paste_pages+0x91b>
f0111db9:	83 ec 04             	sub    $0x4,%esp
f0111dbc:	6a 00                	push   $0x0
f0111dbe:	68 00 10 40 01       	push   $0x1401000
f0111dc3:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111dc6:	e8 76 3b 00 00       	call   f0115941 <CB>
f0111dcb:	83 c4 10             	add    $0x10,%esp
f0111dce:	83 f8 01             	cmp    $0x1,%eax
f0111dd1:	75 66                	jne    f0111e39 <test_cut_paste_pages+0x91b>
f0111dd3:	83 ec 04             	sub    $0x4,%esp
f0111dd6:	6a 00                	push   $0x0
f0111dd8:	68 00 20 40 01       	push   $0x1402000
f0111ddd:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111de0:	e8 5c 3b 00 00       	call   f0115941 <CB>
f0111de5:	83 c4 10             	add    $0x10,%esp
f0111de8:	83 f8 01             	cmp    $0x1,%eax
f0111deb:	75 4c                	jne    f0111e39 <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0111ded:	83 ec 04             	sub    $0x4,%esp
f0111df0:	6a 00                	push   $0x0
f0111df2:	68 00 f0 bf 01       	push   $0x1bff000
f0111df7:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111dfa:	e8 42 3b 00 00       	call   f0115941 <CB>
f0111dff:	83 c4 10             	add    $0x10,%esp
		correct = 0;
	}
	if (correct) eval += 10 ;
	correct = 1 ;
	chk_cntnt = 1;
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0111e02:	85 c0                	test   %eax,%eax
f0111e04:	75 33                	jne    f0111e39 <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0111e06:	83 ec 04             	sub    $0x4,%esp
f0111e09:	6a 00                	push   $0x0
f0111e0b:	68 00 00 c0 01       	push   $0x1c00000
f0111e10:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111e13:	e8 29 3b 00 00       	call   f0115941 <CB>
f0111e18:	83 c4 10             	add    $0x10,%esp
f0111e1b:	83 f8 01             	cmp    $0x1,%eax
f0111e1e:	75 19                	jne    f0111e39 <test_cut_paste_pages+0x91b>
f0111e20:	83 ec 04             	sub    $0x4,%esp
f0111e23:	6a 00                	push   $0x0
f0111e25:	68 00 10 c0 01       	push   $0x1c01000
f0111e2a:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111e2d:	e8 0f 3b 00 00       	call   f0115941 <CB>
f0111e32:	83 c4 10             	add    $0x10,%esp
f0111e35:	85 c0                	test   %eax,%eax
f0111e37:	74 28                	je     f0111e61 <test_cut_paste_pages+0x943>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions)\n");
f0111e39:	83 ec 04             	sub    $0x4,%esp
f0111e3c:	68 9c 8f 13 f0       	push   $0xf0138f9c
f0111e41:	68 2c 02 00 00       	push   $0x22c
f0111e46:	68 be 85 13 f0       	push   $0xf01385be
f0111e4b:	e8 37 e5 fe ff       	call   f0100387 <_warn>
f0111e50:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0111e53:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0111e5a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0111e61:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111e65:	74 04                	je     f0111e6b <test_cut_paste_pages+0x94d>
f0111e67:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0111e6b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0111e72:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0111e76:	0f 84 99 00 00 00    	je     f0111f15 <test_cut_paste_pages+0x9f7>
	{
		ptr1 = (char*)0x1400000;
f0111e7c:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0111e83:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0111e8a:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0111e91:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0111e98:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0111e9f:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0111ea6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111ea9:	8a 00                	mov    (%eax),%al
f0111eab:	3c 61                	cmp    $0x61,%al
f0111ead:	75 2d                	jne    f0111edc <test_cut_paste_pages+0x9be>
f0111eaf:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111eb2:	8a 00                	mov    (%eax),%al
f0111eb4:	3c 78                	cmp    $0x78,%al
f0111eb6:	75 24                	jne    f0111edc <test_cut_paste_pages+0x9be>
f0111eb8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111ebb:	8a 00                	mov    (%eax),%al
f0111ebd:	3c 62                	cmp    $0x62,%al
f0111ebf:	75 1b                	jne    f0111edc <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0111ec1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111ec4:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0111ec6:	3c 79                	cmp    $0x79,%al
f0111ec8:	75 12                	jne    f0111edc <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0111eca:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111ecd:	8a 00                	mov    (%eax),%al
f0111ecf:	3c 63                	cmp    $0x63,%al
f0111ed1:	75 09                	jne    f0111edc <test_cut_paste_pages+0x9be>
f0111ed3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111ed6:	8a 00                	mov    (%eax),%al
f0111ed8:	3c 7a                	cmp    $0x7a,%al
f0111eda:	74 28                	je     f0111f04 <test_cut_paste_pages+0x9e6>
		{
			correct = 0;
f0111edc:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chk_cntnt = 0;
f0111ee3:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0111eea:	83 ec 04             	sub    $0x4,%esp
f0111eed:	68 9c 8e 13 f0       	push   $0xf0138e9c
f0111ef2:	68 40 02 00 00       	push   $0x240
f0111ef7:	68 be 85 13 f0       	push   $0xf01385be
f0111efc:	e8 86 e4 fe ff       	call   f0100387 <_warn>
f0111f01:	83 c4 10             	add    $0x10,%esp
		}
		if (correct) eval += 5 ;
f0111f04:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111f08:	74 04                	je     f0111f0e <test_cut_paste_pages+0x9f0>
f0111f0a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0111f0e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	cprintf("CASE II: END\n") ;
f0111f15:	83 ec 0c             	sub    $0xc,%esp
f0111f18:	68 d5 8f 13 f0       	push   $0xf0138fd5
f0111f1d:	e8 60 ed fe ff       	call   f0100c82 <cprintf>
f0111f22:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] cut_paste_pages: FINISHED. Evaluation = %d\n", eval);
f0111f25:	83 ec 08             	sub    $0x8,%esp
f0111f28:	ff 75 e4             	pushl  -0x1c(%ebp)
f0111f2b:	68 e4 8f 13 f0       	push   $0xf0138fe4
f0111f30:	e8 4d ed fe ff       	call   f0100c82 <cprintf>
f0111f35:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0111f38:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0111f3c:	75 10                	jne    f0111f4e <test_cut_paste_pages+0xa30>
		cprintf("Congratulations!! test cut_paste_pages completed successfully.\n");
f0111f3e:	83 ec 0c             	sub    $0xc,%esp
f0111f41:	68 18 90 13 f0       	push   $0xf0139018
f0111f46:	e8 37 ed fe ff       	call   f0100c82 <cprintf>
f0111f4b:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0111f4e:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f0111f53:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0111f56:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0111f59:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0111f5c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111f61:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0111f64:	5b                   	pop    %ebx
f0111f65:	5e                   	pop    %esi
f0111f66:	5f                   	pop    %edi
f0111f67:	5d                   	pop    %ebp
f0111f68:	c3                   	ret    

f0111f69 <test_copy_paste_chunk>:

//===============================
// 2) TEST COPY-PASTE CHUNK:
//===============================
int test_copy_paste_chunk()
{
f0111f69:	55                   	push   %ebp
f0111f6a:	89 e5                	mov    %esp,%ebp
f0111f6c:	57                   	push   %edi
f0111f6d:	56                   	push   %esi
f0111f6e:	53                   	push   %ebx
f0111f6f:	81 ec ac 05 00 00    	sub    $0x5ac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0111f75:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0111f7b:	bb 58 90 13 f0       	mov    $0xf0139058,%ebx
f0111f80:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111f85:	89 c7                	mov    %eax,%edi
f0111f87:	89 de                	mov    %ebx,%esi
f0111f89:	89 d1                	mov    %edx,%ecx
f0111f8b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111f8d:	8d 95 51 ff ff ff    	lea    -0xaf(%ebp),%edx
f0111f93:	b9 23 00 00 00       	mov    $0x23,%ecx
f0111f98:	b0 00                	mov    $0x0,%al
f0111f9a:	89 d7                	mov    %edx,%edi
f0111f9c:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0111f9e:	6a 00                	push   $0x0
f0111fa0:	6a 0a                	push   $0xa
f0111fa2:	6a 14                	push   $0x14
f0111fa4:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0111faa:	50                   	push   %eax
f0111fab:	e8 4b 6d ff ff       	call   f0108cfb <env_create>
f0111fb0:	83 c4 10             	add    $0x10,%esp
f0111fb3:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0111fb6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111fb9:	8b 40 5c             	mov    0x5c(%eax),%eax
f0111fbc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0111fbf:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111fc2:	8b 40 60             	mov    0x60(%eax),%eax
f0111fc5:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0111fcb:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0111fd1:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0111fd4:	c7 85 2e ff ff ff 61 	movl   $0x20707561,-0xd2(%ebp)
f0111fdb:	75 70 20 
f0111fde:	c7 85 32 ff ff ff 00 	movl   $0x0,-0xce(%ebp)
f0111fe5:	00 00 00 
f0111fe8:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0111fee:	b9 03 00 00 00       	mov    $0x3,%ecx
f0111ff3:	b8 00 00 00 00       	mov    $0x0,%eax
f0111ff8:	89 d7                	mov    %edx,%edi
f0111ffa:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0111ffc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111fff:	8b 40 4c             	mov    0x4c(%eax),%eax
f0112002:	83 ec 08             	sub    $0x8,%esp
f0112005:	8d 95 1a ff ff ff    	lea    -0xe6(%ebp),%edx
f011200b:	52                   	push   %edx
f011200c:	50                   	push   %eax
f011200d:	e8 1e f1 01 00       	call   f0131130 <ltostr>
f0112012:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0112015:	83 ec 04             	sub    $0x4,%esp
f0112018:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011201e:	50                   	push   %eax
f011201f:	8d 85 1a ff ff ff    	lea    -0xe6(%ebp),%eax
f0112025:	50                   	push   %eax
f0112026:	8d 85 2e ff ff ff    	lea    -0xd2(%ebp),%eax
f011202c:	50                   	push   %eax
f011202d:	e8 f6 f1 01 00       	call   f0131228 <strcconcat>
f0112032:	83 c4 10             	add    $0x10,%esp
	//===================================================

	ClearUserSpace(proc_directory);
f0112035:	83 ec 0c             	sub    $0xc,%esp
f0112038:	ff 75 d4             	pushl  -0x2c(%ebp)
f011203b:	e8 f1 3a 00 00       	call   f0115b31 <ClearUserSpace>
f0112040:	83 c4 10             	add    $0x10,%esp
	int numOfArgs = 0;
f0112043:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;
	uint32 res =0;
f011204a:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 eval = 0; int correct = 1 ;
f0112051:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0112058:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter ;
	char *ch1, *ch2, *ch3, *ch4, *ch5, *ch6, *ch7,*ch8, *ch9, *ch10, *ch11, *ch12 ;
	char tch[13];
	int kilo = 1024 ;
f011205f:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0112066:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	/*==================================================*/
	/*PART I: Destination page(s) exist & read only 20% */
	/*==================================================*/
	cprintf("\nCASE I: Destination page(s) exist & read only [20%]\n") ;
f011206d:	83 ec 0c             	sub    $0xc,%esp
f0112070:	68 8c 90 13 f0       	push   $0xf013908c
f0112075:	e8 08 ec fe ff       	call   f0100c82 <cprintf>
f011207a:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f011207d:	83 ec 04             	sub    $0x4,%esp
f0112080:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112086:	50                   	push   %eax
f0112087:	68 c2 90 13 f0       	push   $0xf01390c2
f011208c:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112092:	50                   	push   %eax
f0112093:	e8 90 f1 01 00       	call   f0131228 <strcconcat>
f0112098:	83 c4 10             	add    $0x10,%esp
f011209b:	83 ec 0c             	sub    $0xc,%esp
f011209e:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01120a4:	50                   	push   %eax
f01120a5:	e8 3a ec fe ff       	call   f0100ce4 <execute_command>
f01120aa:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x1000", c1); execute_command(c1);
f01120ad:	83 ec 04             	sub    $0x4,%esp
f01120b0:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01120b6:	50                   	push   %eax
f01120b7:	68 c7 90 13 f0       	push   $0xf01390c7
f01120bc:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01120c2:	50                   	push   %eax
f01120c3:	e8 60 f1 01 00       	call   f0131228 <strcconcat>
f01120c8:	83 c4 10             	add    $0x10,%esp
f01120cb:	83 ec 0c             	sub    $0xc,%esp
f01120ce:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01120d4:	50                   	push   %eax
f01120d5:	e8 0a ec fe ff       	call   f0100ce4 <execute_command>
f01120da:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x000000 a";execute_command(c2);
f01120dd:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f01120e3:	bb cd 93 13 f0       	mov    $0xf01393cd,%ebx
f01120e8:	ba 0f 00 00 00       	mov    $0xf,%edx
f01120ed:	89 c7                	mov    %eax,%edi
f01120ef:	89 de                	mov    %ebx,%esi
f01120f1:	89 d1                	mov    %edx,%ecx
f01120f3:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01120f5:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f01120fb:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112100:	b0 00                	mov    $0x0,%al
f0112102:	89 d7                	mov    %edx,%edi
f0112104:	f3 aa                	rep stos %al,%es:(%edi)
f0112106:	83 ec 0c             	sub    $0xc,%esp
f0112109:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f011210f:	50                   	push   %eax
f0112110:	e8 cf eb fe ff       	call   f0100ce4 <execute_command>
f0112115:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x0007FF b";execute_command(c3);
f0112118:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f011211e:	bb 31 94 13 f0       	mov    $0xf0139431,%ebx
f0112123:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112128:	89 c7                	mov    %eax,%edi
f011212a:	89 de                	mov    %ebx,%esi
f011212c:	89 d1                	mov    %edx,%ecx
f011212e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112130:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0112136:	b9 55 00 00 00       	mov    $0x55,%ecx
f011213b:	b0 00                	mov    $0x0,%al
f011213d:	89 d7                	mov    %edx,%edi
f011213f:	f3 aa                	rep stos %al,%es:(%edi)
f0112141:	83 ec 0c             	sub    $0xc,%esp
f0112144:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f011214a:	50                   	push   %eax
f011214b:	e8 94 eb fe ff       	call   f0100ce4 <execute_command>
f0112150:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x000FFF c";execute_command(c4);
f0112153:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112159:	bb 95 94 13 f0       	mov    $0xf0139495,%ebx
f011215e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112163:	89 c7                	mov    %eax,%edi
f0112165:	89 de                	mov    %ebx,%esi
f0112167:	89 d1                	mov    %edx,%ecx
f0112169:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011216b:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0112171:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112176:	b0 00                	mov    $0x0,%al
f0112178:	89 d7                	mov    %edx,%edi
f011217a:	f3 aa                	rep stos %al,%es:(%edi)
f011217c:	83 ec 0c             	sub    $0xc,%esp
f011217f:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112185:	50                   	push   %eax
f0112186:	e8 59 eb fe ff       	call   f0100ce4 <execute_command>
f011218b:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x001000 d";execute_command(c22);
f011218e:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112194:	bb f9 94 13 f0       	mov    $0xf01394f9,%ebx
f0112199:	ba 0f 00 00 00       	mov    $0xf,%edx
f011219e:	89 c7                	mov    %eax,%edi
f01121a0:	89 de                	mov    %ebx,%esi
f01121a2:	89 d1                	mov    %edx,%ecx
f01121a4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01121a6:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f01121ac:	b9 55 00 00 00       	mov    $0x55,%ecx
f01121b1:	b0 00                	mov    $0x0,%al
f01121b3:	89 d7                	mov    %edx,%edi
f01121b5:	f3 aa                	rep stos %al,%es:(%edi)
f01121b7:	83 ec 0c             	sub    $0xc,%esp
f01121ba:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f01121c0:	50                   	push   %eax
f01121c1:	e8 1e eb fe ff       	call   f0100ce4 <execute_command>
f01121c6:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x0017FF e";execute_command(c23);
f01121c9:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f01121cf:	bb 5d 95 13 f0       	mov    $0xf013955d,%ebx
f01121d4:	ba 0f 00 00 00       	mov    $0xf,%edx
f01121d9:	89 c7                	mov    %eax,%edi
f01121db:	89 de                	mov    %ebx,%esi
f01121dd:	89 d1                	mov    %edx,%ecx
f01121df:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01121e1:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f01121e7:	b9 55 00 00 00       	mov    $0x55,%ecx
f01121ec:	b0 00                	mov    $0x0,%al
f01121ee:	89 d7                	mov    %edx,%edi
f01121f0:	f3 aa                	rep stos %al,%es:(%edi)
f01121f2:	83 ec 0c             	sub    $0xc,%esp
f01121f5:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f01121fb:	50                   	push   %eax
f01121fc:	e8 e3 ea fe ff       	call   f0100ce4 <execute_command>
f0112201:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x001FFF f";execute_command(c24);
f0112204:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f011220a:	bb c1 95 13 f0       	mov    $0xf01395c1,%ebx
f011220f:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112214:	89 c7                	mov    %eax,%edi
f0112216:	89 de                	mov    %ebx,%esi
f0112218:	89 d1                	mov    %edx,%ecx
f011221a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011221c:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0112222:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112227:	b0 00                	mov    $0x0,%al
f0112229:	89 d7                	mov    %edx,%edi
f011222b:	f3 aa                	rep stos %al,%es:(%edi)
f011222d:	83 ec 0c             	sub    $0xc,%esp
f0112230:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112236:	50                   	push   %eax
f0112237:	e8 a8 ea fe ff       	call   f0100ce4 <execute_command>
f011223c:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x100000", c5); execute_command(c5);
f011223f:	83 ec 04             	sub    $0x4,%esp
f0112242:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112248:	50                   	push   %eax
f0112249:	68 cf 90 13 f0       	push   $0xf01390cf
f011224e:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112254:	50                   	push   %eax
f0112255:	e8 ce ef 01 00       	call   f0131228 <strcconcat>
f011225a:	83 c4 10             	add    $0x10,%esp
f011225d:	83 ec 0c             	sub    $0xc,%esp
f0112260:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112266:	50                   	push   %eax
f0112267:	e8 78 ea fe ff       	call   f0100ce4 <execute_command>
f011226c:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x101000 r", c5); execute_command(c5);
f011226f:	83 ec 04             	sub    $0x4,%esp
f0112272:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112278:	50                   	push   %eax
f0112279:	68 d9 90 13 f0       	push   $0xf01390d9
f011227e:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112284:	50                   	push   %eax
f0112285:	e8 9e ef 01 00       	call   f0131228 <strcconcat>
f011228a:	83 c4 10             	add    $0x10,%esp
f011228d:	83 ec 0c             	sub    $0xc,%esp
f0112290:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112296:	50                   	push   %eax
f0112297:	e8 48 ea fe ff       	call   f0100ce4 <execute_command>
f011229c:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x100000 x";execute_command(c6);
f011229f:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01122a5:	bb 25 96 13 f0       	mov    $0xf0139625,%ebx
f01122aa:	ba 0f 00 00 00       	mov    $0xf,%edx
f01122af:	89 c7                	mov    %eax,%edi
f01122b1:	89 de                	mov    %ebx,%esi
f01122b3:	89 d1                	mov    %edx,%ecx
f01122b5:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01122b7:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f01122bd:	b9 55 00 00 00       	mov    $0x55,%ecx
f01122c2:	b0 00                	mov    $0x0,%al
f01122c4:	89 d7                	mov    %edx,%edi
f01122c6:	f3 aa                	rep stos %al,%es:(%edi)
f01122c8:	83 ec 0c             	sub    $0xc,%esp
f01122cb:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01122d1:	50                   	push   %eax
f01122d2:	e8 0d ea fe ff       	call   f0100ce4 <execute_command>
f01122d7:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x1007FF y";execute_command(c7);
f01122da:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01122e0:	bb 89 96 13 f0       	mov    $0xf0139689,%ebx
f01122e5:	ba 0f 00 00 00       	mov    $0xf,%edx
f01122ea:	89 c7                	mov    %eax,%edi
f01122ec:	89 de                	mov    %ebx,%esi
f01122ee:	89 d1                	mov    %edx,%ecx
f01122f0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01122f2:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f01122f8:	b9 55 00 00 00       	mov    $0x55,%ecx
f01122fd:	b0 00                	mov    $0x0,%al
f01122ff:	89 d7                	mov    %edx,%edi
f0112301:	f3 aa                	rep stos %al,%es:(%edi)
f0112303:	83 ec 0c             	sub    $0xc,%esp
f0112306:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011230c:	50                   	push   %eax
f011230d:	e8 d2 e9 fe ff       	call   f0100ce4 <execute_command>
f0112312:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x100FFF z";execute_command(c8);
f0112315:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f011231b:	bb ed 96 13 f0       	mov    $0xf01396ed,%ebx
f0112320:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112325:	89 c7                	mov    %eax,%edi
f0112327:	89 de                	mov    %ebx,%esi
f0112329:	89 d1                	mov    %edx,%ecx
f011232b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011232d:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0112333:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112338:	b0 00                	mov    $0x0,%al
f011233a:	89 d7                	mov    %edx,%edi
f011233c:	f3 aa                	rep stos %al,%es:(%edi)
f011233e:	83 ec 0c             	sub    $0xc,%esp
f0112341:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112347:	50                   	push   %eax
f0112348:	e8 97 e9 fe ff       	call   f0100ce4 <execute_command>
f011234d:	83 c4 10             	add    $0x10,%esp

		ch1 = (char*)0x000000; ch2 = (char*)0x100000;
f0112350:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0112357:	c7 45 b8 00 00 10 00 	movl   $0x100000,-0x48(%ebp)
		ch3 = (char*)0x0007FF; ch4 = (char*)0x1007FF;
f011235e:	c7 45 b4 ff 07 00 00 	movl   $0x7ff,-0x4c(%ebp)
f0112365:	c7 45 b0 ff 07 10 00 	movl   $0x1007ff,-0x50(%ebp)
		ch5 = (char*)0x000FFF; ch6 = (char*)0x100FFF;
f011236c:	c7 45 ac ff 0f 00 00 	movl   $0xfff,-0x54(%ebp)
f0112373:	c7 45 a8 ff 0f 10 00 	movl   $0x100fff,-0x58(%ebp)
		ch7 = (char*)0x001000; ch8 = (char*)0x101000;
f011237a:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0112381:	c7 45 a0 00 10 10 00 	movl   $0x101000,-0x60(%ebp)
		ch9 = (char*)0x0017FF; ch10= (char*)0x1017FF;
f0112388:	c7 45 9c ff 17 00 00 	movl   $0x17ff,-0x64(%ebp)
f011238f:	c7 45 98 ff 17 10 00 	movl   $0x1017ff,-0x68(%ebp)
		ch11= (char*)0x001FFF; ch12= (char*)0x101FFF;
f0112396:	c7 45 94 ff 1f 00 00 	movl   $0x1fff,-0x6c(%ebp)
f011239d:	c7 45 90 ff 1f 10 00 	movl   $0x101fff,-0x70(%ebp)

		tch[8] = *ch8 ;tch[10] = *ch10 ;tch[12] = *ch12 ;
f01123a4:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01123a7:	8a 00                	mov    (%eax),%al
f01123a9:	88 85 a3 fe ff ff    	mov    %al,-0x15d(%ebp)
f01123af:	8b 45 98             	mov    -0x68(%ebp),%eax
f01123b2:	8a 00                	mov    (%eax),%al
f01123b4:	88 85 a5 fe ff ff    	mov    %al,-0x15b(%ebp)
f01123ba:	8b 45 90             	mov    -0x70(%ebp),%eax
f01123bd:	8a 00                	mov    (%eax),%al
f01123bf:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f01123c5:	e8 91 a5 ff ff       	call   f010c95b <sys_calculate_free_frames>
f01123ca:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x0, 0x100000, 6*kilo);
f01123cd:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01123d0:	89 d0                	mov    %edx,%eax
f01123d2:	01 c0                	add    %eax,%eax
f01123d4:	01 d0                	add    %edx,%eax
f01123d6:	01 c0                	add    %eax,%eax
f01123d8:	50                   	push   %eax
f01123d9:	68 00 00 10 00       	push   $0x100000
f01123de:	6a 00                	push   $0x0
f01123e0:	ff 75 d4             	pushl  -0x2c(%ebp)
f01123e3:	e8 56 64 ff ff       	call   f010883e <copy_paste_chunk>
f01123e8:	83 c4 10             	add    $0x10,%esp
f01123eb:	89 45 88             	mov    %eax,-0x78(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01123ee:	e8 68 a5 ff ff       	call   f010c95b <sys_calculate_free_frames>
f01123f3:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f01123f6:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != -1 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f01123fd:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%ebp)
f0112401:	75 08                	jne    f011240b <test_copy_paste_chunk+0x4a2>
f0112403:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112406:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0112409:	74 2b                	je     f0112436 <test_copy_paste_chunk+0x4cd>
		{
			warn("[EVAL] copy_paste_chunk: Failed (dest is read-only... operation should be denied) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011240b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011240e:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112411:	83 ec 0c             	sub    $0xc,%esp
f0112414:	50                   	push   %eax
f0112415:	ff 75 88             	pushl  -0x78(%ebp)
f0112418:	68 e8 90 13 f0       	push   $0xf01390e8
f011241d:	68 93 02 00 00       	push   $0x293
f0112422:	68 be 85 13 f0       	push   $0xf01385be
f0112427:	e8 5b df fe ff       	call   f0100387 <_warn>
f011242c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011242f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112436:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011243a:	74 04                	je     f0112440 <test_copy_paste_chunk+0x4d7>
f011243c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112440:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'x' || *ch3 != 'b' || *ch4 != 'y' || *ch5 != 'c' || *ch6 != 'z'
f0112447:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011244a:	8a 00                	mov    (%eax),%al
f011244c:	3c 61                	cmp    $0x61,%al
f011244e:	75 75                	jne    f01124c5 <test_copy_paste_chunk+0x55c>
f0112450:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112453:	8a 00                	mov    (%eax),%al
f0112455:	3c 78                	cmp    $0x78,%al
f0112457:	75 6c                	jne    f01124c5 <test_copy_paste_chunk+0x55c>
f0112459:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011245c:	8a 00                	mov    (%eax),%al
f011245e:	3c 62                	cmp    $0x62,%al
f0112460:	75 63                	jne    f01124c5 <test_copy_paste_chunk+0x55c>
f0112462:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112465:	8a 00                	mov    (%eax),%al
f0112467:	3c 79                	cmp    $0x79,%al
f0112469:	75 5a                	jne    f01124c5 <test_copy_paste_chunk+0x55c>
f011246b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011246e:	8a 00                	mov    (%eax),%al
f0112470:	3c 63                	cmp    $0x63,%al
f0112472:	75 51                	jne    f01124c5 <test_copy_paste_chunk+0x55c>
f0112474:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112477:	8a 00                	mov    (%eax),%al
f0112479:	3c 7a                	cmp    $0x7a,%al
f011247b:	75 48                	jne    f01124c5 <test_copy_paste_chunk+0x55c>
				||  *ch7 != 'd' || *ch8 != tch[8] || *ch9 != 'e' || *ch10 != tch[10] || *ch11!= 'f' || *ch12 != tch[12])
f011247d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112480:	8a 00                	mov    (%eax),%al
f0112482:	3c 64                	cmp    $0x64,%al
f0112484:	75 3f                	jne    f01124c5 <test_copy_paste_chunk+0x55c>
f0112486:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112489:	8a 10                	mov    (%eax),%dl
f011248b:	8a 85 a3 fe ff ff    	mov    -0x15d(%ebp),%al
f0112491:	38 c2                	cmp    %al,%dl
f0112493:	75 30                	jne    f01124c5 <test_copy_paste_chunk+0x55c>
f0112495:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112498:	8a 00                	mov    (%eax),%al
f011249a:	3c 65                	cmp    $0x65,%al
f011249c:	75 27                	jne    f01124c5 <test_copy_paste_chunk+0x55c>
f011249e:	8b 45 98             	mov    -0x68(%ebp),%eax
f01124a1:	8a 10                	mov    (%eax),%dl
f01124a3:	8a 85 a5 fe ff ff    	mov    -0x15b(%ebp),%al
f01124a9:	38 c2                	cmp    %al,%dl
f01124ab:	75 18                	jne    f01124c5 <test_copy_paste_chunk+0x55c>
f01124ad:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01124b0:	8a 00                	mov    (%eax),%al
f01124b2:	3c 66                	cmp    $0x66,%al
f01124b4:	75 0f                	jne    f01124c5 <test_copy_paste_chunk+0x55c>
f01124b6:	8b 45 90             	mov    -0x70(%ebp),%eax
f01124b9:	8a 10                	mov    (%eax),%dl
f01124bb:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f01124c1:	38 c2                	cmp    %al,%dl
f01124c3:	74 21                	je     f01124e6 <test_copy_paste_chunk+0x57d>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01124c5:	83 ec 04             	sub    $0x4,%esp
f01124c8:	68 4c 91 13 f0       	push   $0xf013914c
f01124cd:	68 9c 02 00 00       	push   $0x29c
f01124d2:	68 be 85 13 f0       	push   $0xf01385be
f01124d7:	e8 ab de fe ff       	call   f0100387 <_warn>
f01124dc:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01124df:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01124e6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01124ea:	74 04                	je     f01124f0 <test_copy_paste_chunk+0x587>
f01124ec:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01124f0:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE I: END \n") ;
f01124f7:	83 ec 0c             	sub    $0xc,%esp
f01124fa:	68 86 91 13 f0       	push   $0xf0139186
f01124ff:	e8 7e e7 fe ff       	call   f0100c82 <cprintf>
f0112504:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: Destination page(s) exist & writable 40% */
	/*==================================================*/
	cprintf("\nCASE II: Destination page(s) exist & writable [40%]\n") ;
f0112507:	83 ec 0c             	sub    $0xc,%esp
f011250a:	68 98 91 13 f0       	push   $0xf0139198
f011250f:	e8 6e e7 fe ff       	call   f0100c82 <cprintf>
f0112514:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x200000", c1); execute_command(c1);
f0112517:	83 ec 04             	sub    $0x4,%esp
f011251a:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112520:	50                   	push   %eax
f0112521:	68 ce 91 13 f0       	push   $0xf01391ce
f0112526:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011252c:	50                   	push   %eax
f011252d:	e8 f6 ec 01 00       	call   f0131228 <strcconcat>
f0112532:	83 c4 10             	add    $0x10,%esp
f0112535:	83 ec 0c             	sub    $0xc,%esp
f0112538:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f011253e:	50                   	push   %eax
f011253f:	e8 a0 e7 fe ff       	call   f0100ce4 <execute_command>
f0112544:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x201000", c1); execute_command(c1);
f0112547:	83 ec 04             	sub    $0x4,%esp
f011254a:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112550:	50                   	push   %eax
f0112551:	68 d8 91 13 f0       	push   $0xf01391d8
f0112556:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011255c:	50                   	push   %eax
f011255d:	e8 c6 ec 01 00       	call   f0131228 <strcconcat>
f0112562:	83 c4 10             	add    $0x10,%esp
f0112565:	83 ec 0c             	sub    $0xc,%esp
f0112568:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f011256e:	50                   	push   %eax
f011256f:	e8 70 e7 fe ff       	call   f0100ce4 <execute_command>
f0112574:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x200000 a";execute_command(c2);
f0112577:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f011257d:	bb 51 97 13 f0       	mov    $0xf0139751,%ebx
f0112582:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112587:	89 c7                	mov    %eax,%edi
f0112589:	89 de                	mov    %ebx,%esi
f011258b:	89 d1                	mov    %edx,%ecx
f011258d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011258f:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0112595:	b9 55 00 00 00       	mov    $0x55,%ecx
f011259a:	b0 00                	mov    $0x0,%al
f011259c:	89 d7                	mov    %edx,%edi
f011259e:	f3 aa                	rep stos %al,%es:(%edi)
f01125a0:	83 ec 0c             	sub    $0xc,%esp
f01125a3:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f01125a9:	50                   	push   %eax
f01125aa:	e8 35 e7 fe ff       	call   f0100ce4 <execute_command>
f01125af:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x2007FF b";execute_command(c3);
f01125b2:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f01125b8:	bb b5 97 13 f0       	mov    $0xf01397b5,%ebx
f01125bd:	ba 0f 00 00 00       	mov    $0xf,%edx
f01125c2:	89 c7                	mov    %eax,%edi
f01125c4:	89 de                	mov    %ebx,%esi
f01125c6:	89 d1                	mov    %edx,%ecx
f01125c8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01125ca:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f01125d0:	b9 55 00 00 00       	mov    $0x55,%ecx
f01125d5:	b0 00                	mov    $0x0,%al
f01125d7:	89 d7                	mov    %edx,%edi
f01125d9:	f3 aa                	rep stos %al,%es:(%edi)
f01125db:	83 ec 0c             	sub    $0xc,%esp
f01125de:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f01125e4:	50                   	push   %eax
f01125e5:	e8 fa e6 fe ff       	call   f0100ce4 <execute_command>
f01125ea:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x200FFF c";execute_command(c4);
f01125ed:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f01125f3:	bb 19 98 13 f0       	mov    $0xf0139819,%ebx
f01125f8:	ba 0f 00 00 00       	mov    $0xf,%edx
f01125fd:	89 c7                	mov    %eax,%edi
f01125ff:	89 de                	mov    %ebx,%esi
f0112601:	89 d1                	mov    %edx,%ecx
f0112603:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112605:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f011260b:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112610:	b0 00                	mov    $0x0,%al
f0112612:	89 d7                	mov    %edx,%edi
f0112614:	f3 aa                	rep stos %al,%es:(%edi)
f0112616:	83 ec 0c             	sub    $0xc,%esp
f0112619:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f011261f:	50                   	push   %eax
f0112620:	e8 bf e6 fe ff       	call   f0100ce4 <execute_command>
f0112625:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x201000 d";execute_command(c22);
f0112628:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f011262e:	bb 7d 98 13 f0       	mov    $0xf013987d,%ebx
f0112633:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112638:	89 c7                	mov    %eax,%edi
f011263a:	89 de                	mov    %ebx,%esi
f011263c:	89 d1                	mov    %edx,%ecx
f011263e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112640:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0112646:	b9 55 00 00 00       	mov    $0x55,%ecx
f011264b:	b0 00                	mov    $0x0,%al
f011264d:	89 d7                	mov    %edx,%edi
f011264f:	f3 aa                	rep stos %al,%es:(%edi)
f0112651:	83 ec 0c             	sub    $0xc,%esp
f0112654:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f011265a:	50                   	push   %eax
f011265b:	e8 84 e6 fe ff       	call   f0100ce4 <execute_command>
f0112660:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x2017FF e";execute_command(c23);
f0112663:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112669:	bb e1 98 13 f0       	mov    $0xf01398e1,%ebx
f011266e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112673:	89 c7                	mov    %eax,%edi
f0112675:	89 de                	mov    %ebx,%esi
f0112677:	89 d1                	mov    %edx,%ecx
f0112679:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011267b:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0112681:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112686:	b0 00                	mov    $0x0,%al
f0112688:	89 d7                	mov    %edx,%edi
f011268a:	f3 aa                	rep stos %al,%es:(%edi)
f011268c:	83 ec 0c             	sub    $0xc,%esp
f011268f:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112695:	50                   	push   %eax
f0112696:	e8 49 e6 fe ff       	call   f0100ce4 <execute_command>
f011269b:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x201FFF f";execute_command(c24);
f011269e:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f01126a4:	bb 45 99 13 f0       	mov    $0xf0139945,%ebx
f01126a9:	ba 0f 00 00 00       	mov    $0xf,%edx
f01126ae:	89 c7                	mov    %eax,%edi
f01126b0:	89 de                	mov    %ebx,%esi
f01126b2:	89 d1                	mov    %edx,%ecx
f01126b4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01126b6:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f01126bc:	b9 55 00 00 00       	mov    $0x55,%ecx
f01126c1:	b0 00                	mov    $0x0,%al
f01126c3:	89 d7                	mov    %edx,%edi
f01126c5:	f3 aa                	rep stos %al,%es:(%edi)
f01126c7:	83 ec 0c             	sub    $0xc,%esp
f01126ca:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f01126d0:	50                   	push   %eax
f01126d1:	e8 0e e6 fe ff       	call   f0100ce4 <execute_command>
f01126d6:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x400000", c5); execute_command(c5);
f01126d9:	83 ec 04             	sub    $0x4,%esp
f01126dc:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01126e2:	50                   	push   %eax
f01126e3:	68 e2 91 13 f0       	push   $0xf01391e2
f01126e8:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01126ee:	50                   	push   %eax
f01126ef:	e8 34 eb 01 00       	call   f0131228 <strcconcat>
f01126f4:	83 c4 10             	add    $0x10,%esp
f01126f7:	83 ec 0c             	sub    $0xc,%esp
f01126fa:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112700:	50                   	push   %eax
f0112701:	e8 de e5 fe ff       	call   f0100ce4 <execute_command>
f0112706:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x401000", c5); execute_command(c5);
f0112709:	83 ec 04             	sub    $0x4,%esp
f011270c:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112712:	50                   	push   %eax
f0112713:	68 ec 91 13 f0       	push   $0xf01391ec
f0112718:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011271e:	50                   	push   %eax
f011271f:	e8 04 eb 01 00       	call   f0131228 <strcconcat>
f0112724:	83 c4 10             	add    $0x10,%esp
f0112727:	83 ec 0c             	sub    $0xc,%esp
f011272a:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112730:	50                   	push   %eax
f0112731:	e8 ae e5 fe ff       	call   f0100ce4 <execute_command>
f0112736:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x400000 x";execute_command(c6);
f0112739:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f011273f:	bb a9 99 13 f0       	mov    $0xf01399a9,%ebx
f0112744:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112749:	89 c7                	mov    %eax,%edi
f011274b:	89 de                	mov    %ebx,%esi
f011274d:	89 d1                	mov    %edx,%ecx
f011274f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112751:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0112757:	b9 55 00 00 00       	mov    $0x55,%ecx
f011275c:	b0 00                	mov    $0x0,%al
f011275e:	89 d7                	mov    %edx,%edi
f0112760:	f3 aa                	rep stos %al,%es:(%edi)
f0112762:	83 ec 0c             	sub    $0xc,%esp
f0112765:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f011276b:	50                   	push   %eax
f011276c:	e8 73 e5 fe ff       	call   f0100ce4 <execute_command>
f0112771:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x4007FF y";execute_command(c7);
f0112774:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011277a:	bb 0d 9a 13 f0       	mov    $0xf0139a0d,%ebx
f011277f:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112784:	89 c7                	mov    %eax,%edi
f0112786:	89 de                	mov    %ebx,%esi
f0112788:	89 d1                	mov    %edx,%ecx
f011278a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011278c:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0112792:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112797:	b0 00                	mov    $0x0,%al
f0112799:	89 d7                	mov    %edx,%edi
f011279b:	f3 aa                	rep stos %al,%es:(%edi)
f011279d:	83 ec 0c             	sub    $0xc,%esp
f01127a0:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01127a6:	50                   	push   %eax
f01127a7:	e8 38 e5 fe ff       	call   f0100ce4 <execute_command>
f01127ac:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x400FFF z";execute_command(c8);
f01127af:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01127b5:	bb 71 9a 13 f0       	mov    $0xf0139a71,%ebx
f01127ba:	ba 0f 00 00 00       	mov    $0xf,%edx
f01127bf:	89 c7                	mov    %eax,%edi
f01127c1:	89 de                	mov    %ebx,%esi
f01127c3:	89 d1                	mov    %edx,%ecx
f01127c5:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01127c7:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f01127cd:	b9 55 00 00 00       	mov    $0x55,%ecx
f01127d2:	b0 00                	mov    $0x0,%al
f01127d4:	89 d7                	mov    %edx,%edi
f01127d6:	f3 aa                	rep stos %al,%es:(%edi)
f01127d8:	83 ec 0c             	sub    $0xc,%esp
f01127db:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01127e1:	50                   	push   %eax
f01127e2:	e8 fd e4 fe ff       	call   f0100ce4 <execute_command>
f01127e7:	83 c4 10             	add    $0x10,%esp

		//Test1
		ch1 = (char*)0x200000; ch2 = (char*)0x400000;
f01127ea:	c7 45 bc 00 00 20 00 	movl   $0x200000,-0x44(%ebp)
f01127f1:	c7 45 b8 00 00 40 00 	movl   $0x400000,-0x48(%ebp)
		ch3 = (char*)0x2007FF; ch4 = (char*)0x4007FF;
f01127f8:	c7 45 b4 ff 07 20 00 	movl   $0x2007ff,-0x4c(%ebp)
f01127ff:	c7 45 b0 ff 07 40 00 	movl   $0x4007ff,-0x50(%ebp)
		ch5 = (char*)0x200FFF; ch6 = (char*)0x400FFF;
f0112806:	c7 45 ac ff 0f 20 00 	movl   $0x200fff,-0x54(%ebp)
f011280d:	c7 45 a8 ff 0f 40 00 	movl   $0x400fff,-0x58(%ebp)
		ch7 = (char*)0x201000; ch8 = (char*)0x401000;
f0112814:	c7 45 a4 00 10 20 00 	movl   $0x201000,-0x5c(%ebp)
f011281b:	c7 45 a0 00 10 40 00 	movl   $0x401000,-0x60(%ebp)
		ch9 = (char*)0x2017FF; ch10= (char*)0x4017FF;
f0112822:	c7 45 9c ff 17 20 00 	movl   $0x2017ff,-0x64(%ebp)
f0112829:	c7 45 98 ff 17 40 00 	movl   $0x4017ff,-0x68(%ebp)
		ch11= (char*)0x201FFF; ch12= (char*)0x401FFF;
f0112830:	c7 45 94 ff 1f 20 00 	movl   $0x201fff,-0x6c(%ebp)
f0112837:	c7 45 90 ff 1f 40 00 	movl   $0x401fff,-0x70(%ebp)

		tch[12] = *ch12 ;
f011283e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112841:	8a 00                	mov    (%eax),%al
f0112843:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112849:	e8 0d a1 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011284e:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x200000, 0x400000, 6*kilo);
f0112851:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112854:	89 d0                	mov    %edx,%eax
f0112856:	01 c0                	add    %eax,%eax
f0112858:	01 d0                	add    %edx,%eax
f011285a:	01 c0                	add    %eax,%eax
f011285c:	50                   	push   %eax
f011285d:	68 00 00 40 00       	push   $0x400000
f0112862:	68 00 00 20 00       	push   $0x200000
f0112867:	ff 75 d4             	pushl  -0x2c(%ebp)
f011286a:	e8 cf 5f ff ff       	call   f010883e <copy_paste_chunk>
f011286f:	83 c4 10             	add    $0x10,%esp
f0112872:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112875:	e8 e1 a0 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011287a:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f011287d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0112884:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0112888:	75 08                	jne    f0112892 <test_copy_paste_chunk+0x929>
f011288a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011288d:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0112890:	74 2b                	je     f01128bd <test_copy_paste_chunk+0x954>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112892:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112895:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112898:	83 ec 0c             	sub    $0xc,%esp
f011289b:	50                   	push   %eax
f011289c:	ff 75 80             	pushl  -0x80(%ebp)
f011289f:	68 f8 91 13 f0       	push   $0xf01391f8
f01128a4:	68 cc 02 00 00       	push   $0x2cc
f01128a9:	68 be 85 13 f0       	push   $0xf01385be
f01128ae:	e8 d4 da fe ff       	call   f0100387 <_warn>
f01128b3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01128b6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01128bd:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01128c1:	74 04                	je     f01128c7 <test_copy_paste_chunk+0x95e>
f01128c3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01128c7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1;
f01128ce:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%ebp)
f01128d5:	00 00 00 
		if (CCP(proc_directory, 0x200000, 0x400000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f01128d8:	83 ec 08             	sub    $0x8,%esp
f01128db:	6a 01                	push   $0x1
f01128dd:	6a 07                	push   $0x7
f01128df:	6a 07                	push   $0x7
f01128e1:	6a 07                	push   $0x7
f01128e3:	6a 07                	push   $0x7
f01128e5:	6a 01                	push   $0x1
f01128e7:	68 00 20 00 00       	push   $0x2000
f01128ec:	68 00 00 40 00       	push   $0x400000
f01128f1:	68 00 00 20 00       	push   $0x200000
f01128f6:	ff 75 d4             	pushl  -0x2c(%ebp)
f01128f9:	e8 67 32 00 00       	call   f0115b65 <CCP>
f01128fe:	83 c4 30             	add    $0x30,%esp
f0112901:	83 f8 01             	cmp    $0x1,%eax
f0112904:	74 2b                	je     f0112931 <test_copy_paste_chunk+0x9c8>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references)\n");
f0112906:	83 ec 04             	sub    $0x4,%esp
f0112909:	68 4c 92 13 f0       	push   $0xf013924c
f011290e:	68 d5 02 00 00       	push   $0x2d5
f0112913:	68 be 85 13 f0       	push   $0xf01385be
f0112918:	e8 6a da fe ff       	call   f0100387 <_warn>
f011291d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112920:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0;
f0112927:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
f011292e:	00 00 00 
		}
		if (correct) eval += 5 ;
f0112931:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112935:	74 04                	je     f011293b <test_copy_paste_chunk+0x9d2>
f0112937:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011293b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		*ch3 = 'y' ;	// wum 0x2007FF y
f0112942:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112945:	c6 00 79             	movb   $0x79,(%eax)
		*ch6 = 'z' ;	// wum 0x400FFF z
f0112948:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011294b:	c6 00 7a             	movb   $0x7a,(%eax)
		*ch7 = 'w' ;	// wum 0x201000 w
f011294e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112951:	c6 00 77             	movb   $0x77,(%eax)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z'
f0112954:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112957:	8a 00                	mov    (%eax),%al
f0112959:	3c 61                	cmp    $0x61,%al
f011295b:	75 69                	jne    f01129c6 <test_copy_paste_chunk+0xa5d>
f011295d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112960:	8a 00                	mov    (%eax),%al
f0112962:	3c 61                	cmp    $0x61,%al
f0112964:	75 60                	jne    f01129c6 <test_copy_paste_chunk+0xa5d>
f0112966:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112969:	8a 00                	mov    (%eax),%al
f011296b:	3c 79                	cmp    $0x79,%al
f011296d:	75 57                	jne    f01129c6 <test_copy_paste_chunk+0xa5d>
f011296f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112972:	8a 00                	mov    (%eax),%al
f0112974:	3c 62                	cmp    $0x62,%al
f0112976:	75 4e                	jne    f01129c6 <test_copy_paste_chunk+0xa5d>
f0112978:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011297b:	8a 00                	mov    (%eax),%al
f011297d:	3c 63                	cmp    $0x63,%al
f011297f:	75 45                	jne    f01129c6 <test_copy_paste_chunk+0xa5d>
f0112981:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112984:	8a 00                	mov    (%eax),%al
f0112986:	3c 7a                	cmp    $0x7a,%al
f0112988:	75 3c                	jne    f01129c6 <test_copy_paste_chunk+0xa5d>
				||  *ch7 != 'w' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'e' || *ch11!= 'f' || *ch12 != tch[12])
f011298a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011298d:	8a 00                	mov    (%eax),%al
f011298f:	3c 77                	cmp    $0x77,%al
f0112991:	75 33                	jne    f01129c6 <test_copy_paste_chunk+0xa5d>
f0112993:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112996:	8a 00                	mov    (%eax),%al
f0112998:	3c 64                	cmp    $0x64,%al
f011299a:	75 2a                	jne    f01129c6 <test_copy_paste_chunk+0xa5d>
f011299c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011299f:	8a 00                	mov    (%eax),%al
f01129a1:	3c 65                	cmp    $0x65,%al
f01129a3:	75 21                	jne    f01129c6 <test_copy_paste_chunk+0xa5d>
f01129a5:	8b 45 98             	mov    -0x68(%ebp),%eax
f01129a8:	8a 00                	mov    (%eax),%al
f01129aa:	3c 65                	cmp    $0x65,%al
f01129ac:	75 18                	jne    f01129c6 <test_copy_paste_chunk+0xa5d>
f01129ae:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01129b1:	8a 00                	mov    (%eax),%al
f01129b3:	3c 66                	cmp    $0x66,%al
f01129b5:	75 0f                	jne    f01129c6 <test_copy_paste_chunk+0xa5d>
f01129b7:	8b 45 90             	mov    -0x70(%ebp),%eax
f01129ba:	8a 10                	mov    (%eax),%dl
f01129bc:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f01129c2:	38 c2                	cmp    %al,%dl
f01129c4:	74 21                	je     f01129e7 <test_copy_paste_chunk+0xa7e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01129c6:	83 ec 04             	sub    $0x4,%esp
f01129c9:	68 4c 91 13 f0       	push   $0xf013914c
f01129ce:	68 e3 02 00 00       	push   $0x2e3
f01129d3:	68 be 85 13 f0       	push   $0xf01385be
f01129d8:	e8 aa d9 fe ff       	call   f0100387 <_warn>
f01129dd:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01129e0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01129e7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01129eb:	74 04                	je     f01129f1 <test_copy_paste_chunk+0xa88>
f01129ed:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01129f1:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		//Test2
		*ch10 = 'x';	// wum 0x4017FF y
f01129f8:	8b 45 98             	mov    -0x68(%ebp),%eax
f01129fb:	c6 00 78             	movb   $0x78,(%eax)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01129fe:	e8 58 9f ff ff       	call   f010c95b <sys_calculate_free_frames>
f0112a03:	89 45 8c             	mov    %eax,-0x74(%ebp)

		ret = copy_paste_chunk(proc_directory, 0x400800, 0x200800, 3*kilo);
f0112a06:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112a09:	89 c2                	mov    %eax,%edx
f0112a0b:	01 d2                	add    %edx,%edx
f0112a0d:	01 d0                	add    %edx,%eax
f0112a0f:	50                   	push   %eax
f0112a10:	68 00 08 20 00       	push   $0x200800
f0112a15:	68 00 08 40 00       	push   $0x400800
f0112a1a:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112a1d:	e8 1c 5e ff ff       	call   f010883e <copy_paste_chunk>
f0112a22:	83 c4 10             	add    $0x10,%esp
f0112a25:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112a28:	e8 2e 9f ff ff       	call   f010c95b <sys_calculate_free_frames>
f0112a2d:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0112a30:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0112a34:	75 08                	jne    f0112a3e <test_copy_paste_chunk+0xad5>
f0112a36:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112a39:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0112a3c:	74 2b                	je     f0112a69 <test_copy_paste_chunk+0xb00>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112a3e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112a41:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112a44:	83 ec 0c             	sub    $0xc,%esp
f0112a47:	50                   	push   %eax
f0112a48:	ff 75 80             	pushl  -0x80(%ebp)
f0112a4b:	68 f8 91 13 f0       	push   $0xf01391f8
f0112a50:	68 f3 02 00 00       	push   $0x2f3
f0112a55:	68 be 85 13 f0       	push   $0xf01385be
f0112a5a:	e8 28 d9 fe ff       	call   f0100387 <_warn>
f0112a5f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112a62:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112a69:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112a6d:	74 04                	je     f0112a73 <test_copy_paste_chunk+0xb0a>
f0112a6f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112a73:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CCP(proc_directory, 0x400000, 0x200000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0112a7a:	83 ec 08             	sub    $0x8,%esp
f0112a7d:	6a 01                	push   $0x1
f0112a7f:	6a 07                	push   $0x7
f0112a81:	6a 07                	push   $0x7
f0112a83:	6a 07                	push   $0x7
f0112a85:	6a 07                	push   $0x7
f0112a87:	6a 01                	push   $0x1
f0112a89:	68 00 20 00 00       	push   $0x2000
f0112a8e:	68 00 00 20 00       	push   $0x200000
f0112a93:	68 00 00 40 00       	push   $0x400000
f0112a98:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112a9b:	e8 c5 30 00 00       	call   f0115b65 <CCP>
f0112aa0:	83 c4 30             	add    $0x30,%esp
f0112aa3:	83 f8 01             	cmp    $0x1,%eax
f0112aa6:	74 21                	je     f0112ac9 <test_copy_paste_chunk+0xb60>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0112aa8:	83 ec 04             	sub    $0x4,%esp
f0112aab:	68 98 92 13 f0       	push   $0xf0139298
f0112ab0:	68 fb 02 00 00       	push   $0x2fb
f0112ab5:	68 be 85 13 f0       	push   $0xf01385be
f0112aba:	e8 c8 d8 fe ff       	call   f0100387 <_warn>
f0112abf:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112ac2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112ac9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112acd:	74 04                	je     f0112ad3 <test_copy_paste_chunk+0xb6a>
f0112acf:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112ad3:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0112ada:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112add:	8a 00                	mov    (%eax),%al
f0112adf:	3c 61                	cmp    $0x61,%al
f0112ae1:	75 69                	jne    f0112b4c <test_copy_paste_chunk+0xbe3>
f0112ae3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112ae6:	8a 00                	mov    (%eax),%al
f0112ae8:	3c 61                	cmp    $0x61,%al
f0112aea:	75 60                	jne    f0112b4c <test_copy_paste_chunk+0xbe3>
f0112aec:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112aef:	8a 00                	mov    (%eax),%al
f0112af1:	3c 79                	cmp    $0x79,%al
f0112af3:	75 57                	jne    f0112b4c <test_copy_paste_chunk+0xbe3>
f0112af5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112af8:	8a 00                	mov    (%eax),%al
f0112afa:	3c 62                	cmp    $0x62,%al
f0112afc:	75 4e                	jne    f0112b4c <test_copy_paste_chunk+0xbe3>
f0112afe:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112b01:	8a 00                	mov    (%eax),%al
f0112b03:	3c 7a                	cmp    $0x7a,%al
f0112b05:	75 45                	jne    f0112b4c <test_copy_paste_chunk+0xbe3>
f0112b07:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112b0a:	8a 00                	mov    (%eax),%al
f0112b0c:	3c 7a                	cmp    $0x7a,%al
f0112b0e:	75 3c                	jne    f0112b4c <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0112b10:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112b13:	8a 00                	mov    (%eax),%al
			correct = 0;
		}
		if (correct) eval += 5 ;
		correct = 1 ;

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0112b15:	3c 64                	cmp    $0x64,%al
f0112b17:	75 33                	jne    f0112b4c <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0112b19:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112b1c:	8a 00                	mov    (%eax),%al
f0112b1e:	3c 64                	cmp    $0x64,%al
f0112b20:	75 2a                	jne    f0112b4c <test_copy_paste_chunk+0xbe3>
f0112b22:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112b25:	8a 00                	mov    (%eax),%al
f0112b27:	3c 65                	cmp    $0x65,%al
f0112b29:	75 21                	jne    f0112b4c <test_copy_paste_chunk+0xbe3>
f0112b2b:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112b2e:	8a 00                	mov    (%eax),%al
f0112b30:	3c 78                	cmp    $0x78,%al
f0112b32:	75 18                	jne    f0112b4c <test_copy_paste_chunk+0xbe3>
f0112b34:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112b37:	8a 00                	mov    (%eax),%al
f0112b39:	3c 66                	cmp    $0x66,%al
f0112b3b:	75 0f                	jne    f0112b4c <test_copy_paste_chunk+0xbe3>
f0112b3d:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112b40:	8a 10                	mov    (%eax),%dl
f0112b42:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0112b48:	38 c2                	cmp    %al,%dl
f0112b4a:	74 21                	je     f0112b6d <test_copy_paste_chunk+0xc04>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112b4c:	83 ec 04             	sub    $0x4,%esp
f0112b4f:	68 4c 91 13 f0       	push   $0xf013914c
f0112b54:	68 04 03 00 00       	push   $0x304
f0112b59:	68 be 85 13 f0       	push   $0xf01385be
f0112b5e:	e8 24 d8 fe ff       	call   f0100387 <_warn>
f0112b63:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112b66:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112b6d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112b71:	74 04                	je     f0112b77 <test_copy_paste_chunk+0xc0e>
f0112b73:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112b77:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE II: END\n") ;
f0112b7e:	83 ec 0c             	sub    $0xc,%esp
f0112b81:	68 e3 92 13 f0       	push   $0xf01392e3
f0112b86:	e8 f7 e0 fe ff       	call   f0100c82 <cprintf>
f0112b8b:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART III: Destination page(s) doesn't exist 40% */
	/*================================================*/
	cprintf("\nCASE III: Destination page(s) doesn't exist [40%]\n") ;
f0112b8e:	83 ec 0c             	sub    $0xc,%esp
f0112b91:	68 f4 92 13 f0       	push   $0xf01392f4
f0112b96:	e8 e7 e0 fe ff       	call   f0100c82 <cprintf>
f0112b9b:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x800000", c1); execute_command(c1);
f0112b9e:	83 ec 04             	sub    $0x4,%esp
f0112ba1:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112ba7:	50                   	push   %eax
f0112ba8:	68 28 93 13 f0       	push   $0xf0139328
f0112bad:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112bb3:	50                   	push   %eax
f0112bb4:	e8 6f e6 01 00       	call   f0131228 <strcconcat>
f0112bb9:	83 c4 10             	add    $0x10,%esp
f0112bbc:	83 ec 0c             	sub    $0xc,%esp
f0112bbf:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112bc5:	50                   	push   %eax
f0112bc6:	e8 19 e1 fe ff       	call   f0100ce4 <execute_command>
f0112bcb:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x801000", c1); execute_command(c1);
f0112bce:	83 ec 04             	sub    $0x4,%esp
f0112bd1:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112bd7:	50                   	push   %eax
f0112bd8:	68 32 93 13 f0       	push   $0xf0139332
f0112bdd:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112be3:	50                   	push   %eax
f0112be4:	e8 3f e6 01 00       	call   f0131228 <strcconcat>
f0112be9:	83 c4 10             	add    $0x10,%esp
f0112bec:	83 ec 0c             	sub    $0xc,%esp
f0112bef:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112bf5:	50                   	push   %eax
f0112bf6:	e8 e9 e0 fe ff       	call   f0100ce4 <execute_command>
f0112bfb:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x802000", c1); execute_command(c1);
f0112bfe:	83 ec 04             	sub    $0x4,%esp
f0112c01:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112c07:	50                   	push   %eax
f0112c08:	68 3c 93 13 f0       	push   $0xf013933c
f0112c0d:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112c13:	50                   	push   %eax
f0112c14:	e8 0f e6 01 00       	call   f0131228 <strcconcat>
f0112c19:	83 c4 10             	add    $0x10,%esp
f0112c1c:	83 ec 0c             	sub    $0xc,%esp
f0112c1f:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112c25:	50                   	push   %eax
f0112c26:	e8 b9 e0 fe ff       	call   f0100ce4 <execute_command>
f0112c2b:	83 c4 10             	add    $0x10,%esp
		char c14[100] = "wum 0x800000 a"; execute_command(c14);
f0112c2e:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112c34:	bb d5 9a 13 f0       	mov    $0xf0139ad5,%ebx
f0112c39:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112c3e:	89 c7                	mov    %eax,%edi
f0112c40:	89 de                	mov    %ebx,%esi
f0112c42:	89 d1                	mov    %edx,%ecx
f0112c44:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112c46:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0112c4c:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112c51:	b0 00                	mov    $0x0,%al
f0112c53:	89 d7                	mov    %edx,%edi
f0112c55:	f3 aa                	rep stos %al,%es:(%edi)
f0112c57:	83 ec 0c             	sub    $0xc,%esp
f0112c5a:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112c60:	50                   	push   %eax
f0112c61:	e8 7e e0 fe ff       	call   f0100ce4 <execute_command>
f0112c66:	83 c4 10             	add    $0x10,%esp
		char c15[100] = "wum 0x8017FF b"; execute_command(c15);
f0112c69:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112c6f:	bb 39 9b 13 f0       	mov    $0xf0139b39,%ebx
f0112c74:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112c79:	89 c7                	mov    %eax,%edi
f0112c7b:	89 de                	mov    %ebx,%esi
f0112c7d:	89 d1                	mov    %edx,%ecx
f0112c7f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112c81:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0112c87:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112c8c:	b0 00                	mov    $0x0,%al
f0112c8e:	89 d7                	mov    %edx,%edi
f0112c90:	f3 aa                	rep stos %al,%es:(%edi)
f0112c92:	83 ec 0c             	sub    $0xc,%esp
f0112c95:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112c9b:	50                   	push   %eax
f0112c9c:	e8 43 e0 fe ff       	call   f0100ce4 <execute_command>
f0112ca1:	83 c4 10             	add    $0x10,%esp
		char c16[100] = "wum 0x802FFF c"; execute_command(c16);
f0112ca4:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112caa:	bb 9d 9b 13 f0       	mov    $0xf0139b9d,%ebx
f0112caf:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112cb4:	89 c7                	mov    %eax,%edi
f0112cb6:	89 de                	mov    %ebx,%esi
f0112cb8:	89 d1                	mov    %edx,%ecx
f0112cba:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112cbc:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0112cc2:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112cc7:	b0 00                	mov    $0x0,%al
f0112cc9:	89 d7                	mov    %edx,%edi
f0112ccb:	f3 aa                	rep stos %al,%es:(%edi)
f0112ccd:	83 ec 0c             	sub    $0xc,%esp
f0112cd0:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112cd6:	50                   	push   %eax
f0112cd7:	e8 08 e0 fe ff       	call   f0100ce4 <execute_command>
f0112cdc:	83 c4 10             	add    $0x10,%esp

		//Test3
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112cdf:	e8 77 9c ff ff       	call   f010c95b <sys_calculate_free_frames>
f0112ce4:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x800000, 0x900000, 12*kilo);
f0112ce7:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112cea:	89 d0                	mov    %edx,%eax
f0112cec:	01 c0                	add    %eax,%eax
f0112cee:	01 d0                	add    %edx,%eax
f0112cf0:	c1 e0 02             	shl    $0x2,%eax
f0112cf3:	50                   	push   %eax
f0112cf4:	68 00 00 90 00       	push   $0x900000
f0112cf9:	68 00 00 80 00       	push   $0x800000
f0112cfe:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112d01:	e8 38 5b ff ff       	call   f010883e <copy_paste_chunk>
f0112d06:	83 c4 10             	add    $0x10,%esp
f0112d09:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112d0f:	e8 47 9c ff ff       	call   f010c95b <sys_calculate_free_frames>
f0112d14:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0112d17:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0112d1e:	75 0b                	jne    f0112d2b <test_copy_paste_chunk+0xdc2>
f0112d20:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112d23:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112d26:	83 f8 03             	cmp    $0x3,%eax
f0112d29:	74 2e                	je     f0112d59 <test_copy_paste_chunk+0xdf0>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112d2b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112d2e:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112d31:	83 ec 0c             	sub    $0xc,%esp
f0112d34:	50                   	push   %eax
f0112d35:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0112d3b:	68 f8 91 13 f0       	push   $0xf01391f8
f0112d40:	68 22 03 00 00       	push   $0x322
f0112d45:	68 be 85 13 f0       	push   $0xf01385be
f0112d4a:	e8 38 d6 fe ff       	call   f0100387 <_warn>
f0112d4f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112d52:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112d59:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112d5d:	74 04                	je     f0112d63 <test_copy_paste_chunk+0xdfa>
f0112d5f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112d63:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1 ;
f0112d6a:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x800000, 0x900000, 3*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0112d71:	83 ec 08             	sub    $0x8,%esp
f0112d74:	6a 01                	push   $0x1
f0112d76:	6a 07                	push   $0x7
f0112d78:	6a 07                	push   $0x7
f0112d7a:	6a 07                	push   $0x7
f0112d7c:	6a 07                	push   $0x7
f0112d7e:	6a 01                	push   $0x1
f0112d80:	68 00 30 00 00       	push   $0x3000
f0112d85:	68 00 00 90 00       	push   $0x900000
f0112d8a:	68 00 00 80 00       	push   $0x800000
f0112d8f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112d92:	e8 ce 2d 00 00       	call   f0115b65 <CCP>
f0112d97:	83 c4 30             	add    $0x30,%esp
f0112d9a:	83 f8 01             	cmp    $0x1,%eax
f0112d9d:	74 28                	je     f0112dc7 <test_copy_paste_chunk+0xe5e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0112d9f:	83 ec 04             	sub    $0x4,%esp
f0112da2:	68 98 92 13 f0       	push   $0xf0139298
f0112da7:	68 2b 03 00 00       	push   $0x32b
f0112dac:	68 be 85 13 f0       	push   $0xf01385be
f0112db1:	e8 d1 d5 fe ff       	call   f0100387 <_warn>
f0112db6:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112db9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0112dc0:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 5 ;
f0112dc7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112dcb:	74 04                	je     f0112dd1 <test_copy_paste_chunk+0xe68>
f0112dcd:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112dd1:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0112dd8:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112ddc:	0f 84 9e 00 00 00    	je     f0112e80 <test_copy_paste_chunk+0xf17>
		{
			ch1 = (char*)0x800000; ch2 = (char*)0x900000;
f0112de2:	c7 45 bc 00 00 80 00 	movl   $0x800000,-0x44(%ebp)
f0112de9:	c7 45 b8 00 00 90 00 	movl   $0x900000,-0x48(%ebp)
			ch3 = (char*)0x8017FF; ch4 = (char*)0x9017FF;
f0112df0:	c7 45 b4 ff 17 80 00 	movl   $0x8017ff,-0x4c(%ebp)
f0112df7:	c7 45 b0 ff 17 90 00 	movl   $0x9017ff,-0x50(%ebp)
			ch5 = (char*)0x802FFF; ch6 = (char*)0x902FFF;
f0112dfe:	c7 45 ac ff 2f 80 00 	movl   $0x802fff,-0x54(%ebp)
f0112e05:	c7 45 a8 ff 2f 90 00 	movl   $0x902fff,-0x58(%ebp)

			*ch3 = 'y';	//wum 0x8017FF y
f0112e0c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112e0f:	c6 00 79             	movb   $0x79,(%eax)
			*ch6 = 'z';	//wum 0x902FFF z
f0112e12:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112e15:	c6 00 7a             	movb   $0x7a,(%eax)

			if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z')
f0112e18:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112e1b:	8a 00                	mov    (%eax),%al
f0112e1d:	3c 61                	cmp    $0x61,%al
f0112e1f:	75 2d                	jne    f0112e4e <test_copy_paste_chunk+0xee5>
f0112e21:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112e24:	8a 00                	mov    (%eax),%al
f0112e26:	3c 61                	cmp    $0x61,%al
f0112e28:	75 24                	jne    f0112e4e <test_copy_paste_chunk+0xee5>
f0112e2a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112e2d:	8a 00                	mov    (%eax),%al
f0112e2f:	3c 79                	cmp    $0x79,%al
f0112e31:	75 1b                	jne    f0112e4e <test_copy_paste_chunk+0xee5>
f0112e33:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112e36:	8a 00                	mov    (%eax),%al
f0112e38:	3c 62                	cmp    $0x62,%al
f0112e3a:	75 12                	jne    f0112e4e <test_copy_paste_chunk+0xee5>
f0112e3c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112e3f:	8a 00                	mov    (%eax),%al
f0112e41:	3c 63                	cmp    $0x63,%al
f0112e43:	75 09                	jne    f0112e4e <test_copy_paste_chunk+0xee5>
f0112e45:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112e48:	8a 00                	mov    (%eax),%al
f0112e4a:	3c 7a                	cmp    $0x7a,%al
f0112e4c:	74 21                	je     f0112e6f <test_copy_paste_chunk+0xf06>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112e4e:	83 ec 04             	sub    $0x4,%esp
f0112e51:	68 4c 91 13 f0       	push   $0xf013914c
f0112e56:	68 3d 03 00 00       	push   $0x33d
f0112e5b:	68 be 85 13 f0       	push   $0xf01385be
f0112e60:	e8 22 d5 fe ff       	call   f0100387 <_warn>
f0112e65:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112e68:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 10 ;
f0112e6f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112e73:	74 04                	je     f0112e79 <test_copy_paste_chunk+0xf10>
f0112e75:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
			correct = 1 ;
f0112e79:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
		//Test4
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112e80:	e8 d6 9a ff ff       	call   f010c95b <sys_calculate_free_frames>
f0112e85:	89 45 8c             	mov    %eax,-0x74(%ebp)
		SB(proc_directory, 0x901000, 2 , 0) ;
f0112e88:	6a 00                	push   $0x0
f0112e8a:	6a 02                	push   $0x2
f0112e8c:	68 00 10 90 00       	push   $0x901000
f0112e91:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112e94:	e8 59 2b 00 00       	call   f01159f2 <SB>
f0112e99:	83 c4 10             	add    $0x10,%esp
		SB(proc_directory, 0x902000, 2 , 0) ;
f0112e9c:	6a 00                	push   $0x0
f0112e9e:	6a 02                	push   $0x2
f0112ea0:	68 00 20 90 00       	push   $0x902000
f0112ea5:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112ea8:	e8 45 2b 00 00       	call   f01159f2 <SB>
f0112ead:	83 c4 10             	add    $0x10,%esp

		ret = copy_paste_chunk(proc_directory, 0x901000, 0xBFF000, 8*kilo);
f0112eb0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112eb3:	c1 e0 03             	shl    $0x3,%eax
f0112eb6:	50                   	push   %eax
f0112eb7:	68 00 f0 bf 00       	push   $0xbff000
f0112ebc:	68 00 10 90 00       	push   $0x901000
f0112ec1:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112ec4:	e8 75 59 ff ff       	call   f010883e <copy_paste_chunk>
f0112ec9:	83 c4 10             	add    $0x10,%esp
f0112ecc:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112ed2:	e8 84 9a ff ff       	call   f010c95b <sys_calculate_free_frames>
f0112ed7:	89 45 84             	mov    %eax,-0x7c(%ebp)
		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0112eda:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0112ee1:	75 0b                	jne    f0112eee <test_copy_paste_chunk+0xf85>
f0112ee3:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112ee6:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112ee9:	83 f8 03             	cmp    $0x3,%eax
f0112eec:	74 2e                	je     f0112f1c <test_copy_paste_chunk+0xfb3>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112eee:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112ef1:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112ef4:	83 ec 0c             	sub    $0xc,%esp
f0112ef7:	50                   	push   %eax
f0112ef8:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0112efe:	68 f8 91 13 f0       	push   $0xf01391f8
f0112f03:	68 4d 03 00 00       	push   $0x34d
f0112f08:	68 be 85 13 f0       	push   $0xf01385be
f0112f0d:	e8 75 d4 fe ff       	call   f0100387 <_warn>
f0112f12:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112f15:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112f1c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112f20:	74 04                	je     f0112f26 <test_copy_paste_chunk+0xfbd>
f0112f22:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112f26:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		chkcnt = 1 ;
f0112f2d:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x901000, 0xBFF000, 2*PAGE_SIZE, 1, 0x003, 0x007, 0x003, 0x007, CHK_COPY_PASTE) != 1)
f0112f34:	83 ec 08             	sub    $0x8,%esp
f0112f37:	6a 01                	push   $0x1
f0112f39:	6a 07                	push   $0x7
f0112f3b:	6a 03                	push   $0x3
f0112f3d:	6a 07                	push   $0x7
f0112f3f:	6a 03                	push   $0x3
f0112f41:	6a 01                	push   $0x1
f0112f43:	68 00 20 00 00       	push   $0x2000
f0112f48:	68 00 f0 bf 00       	push   $0xbff000
f0112f4d:	68 00 10 90 00       	push   $0x901000
f0112f52:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112f55:	e8 0b 2c 00 00       	call   f0115b65 <CCP>
f0112f5a:	83 c4 30             	add    $0x30,%esp
f0112f5d:	83 f8 01             	cmp    $0x1,%eax
f0112f60:	74 28                	je     f0112f8a <test_copy_paste_chunk+0x1021>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0112f62:	83 ec 04             	sub    $0x4,%esp
f0112f65:	68 98 92 13 f0       	push   $0xf0139298
f0112f6a:	68 56 03 00 00       	push   $0x356
f0112f6f:	68 be 85 13 f0       	push   $0xf01385be
f0112f74:	e8 0e d4 fe ff       	call   f0100387 <_warn>
f0112f79:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112f7c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0112f83:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f0112f8a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112f8e:	74 04                	je     f0112f94 <test_copy_paste_chunk+0x102b>
f0112f90:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112f94:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0112f9b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112f9f:	74 72                	je     f0113013 <test_copy_paste_chunk+0x10aa>
		{
			ch1 = (char*)0x9017FF; ch2 = (char*)0xBFF7FF; ch3 = (char*)0x902FFF;ch4 = (char*)0xC00FFF;
f0112fa1:	c7 45 bc ff 17 90 00 	movl   $0x9017ff,-0x44(%ebp)
f0112fa8:	c7 45 b8 ff f7 bf 00 	movl   $0xbff7ff,-0x48(%ebp)
f0112faf:	c7 45 b4 ff 2f 90 00 	movl   $0x902fff,-0x4c(%ebp)
f0112fb6:	c7 45 b0 ff 0f c0 00 	movl   $0xc00fff,-0x50(%ebp)
			if (*ch1 != 'b' || *ch2 != 'b' || *ch3 != 'z' || *ch4 != 'z')
f0112fbd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112fc0:	8a 00                	mov    (%eax),%al
f0112fc2:	3c 62                	cmp    $0x62,%al
f0112fc4:	75 1b                	jne    f0112fe1 <test_copy_paste_chunk+0x1078>
f0112fc6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112fc9:	8a 00                	mov    (%eax),%al
f0112fcb:	3c 62                	cmp    $0x62,%al
f0112fcd:	75 12                	jne    f0112fe1 <test_copy_paste_chunk+0x1078>
f0112fcf:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112fd2:	8a 00                	mov    (%eax),%al
f0112fd4:	3c 7a                	cmp    $0x7a,%al
f0112fd6:	75 09                	jne    f0112fe1 <test_copy_paste_chunk+0x1078>
f0112fd8:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112fdb:	8a 00                	mov    (%eax),%al
f0112fdd:	3c 7a                	cmp    $0x7a,%al
f0112fdf:	74 21                	je     f0113002 <test_copy_paste_chunk+0x1099>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112fe1:	83 ec 04             	sub    $0x4,%esp
f0112fe4:	68 4c 91 13 f0       	push   $0xf013914c
f0112fe9:	68 62 03 00 00       	push   $0x362
f0112fee:	68 be 85 13 f0       	push   $0xf01385be
f0112ff3:	e8 8f d3 fe ff       	call   f0100387 <_warn>
f0112ff8:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112ffb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0113002:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113006:	74 04                	je     f011300c <test_copy_paste_chunk+0x10a3>
f0113008:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011300c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0113013:	83 ec 0c             	sub    $0xc,%esp
f0113016:	68 46 93 13 f0       	push   $0xf0139346
f011301b:	e8 62 dc fe ff       	call   f0100c82 <cprintf>
f0113020:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] copy_paste_chunk: FINISHED. Evaluation = %d\n", eval);
f0113023:	83 ec 08             	sub    $0x8,%esp
f0113026:	ff 75 e4             	pushl  -0x1c(%ebp)
f0113029:	68 58 93 13 f0       	push   $0xf0139358
f011302e:	e8 4f dc fe ff       	call   f0100c82 <cprintf>
f0113033:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0113036:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f011303a:	75 10                	jne    f011304c <test_copy_paste_chunk+0x10e3>
		cprintf("Congratulations!! test copy_paste_chunk completed successfully.\n");
f011303c:	83 ec 0c             	sub    $0xc,%esp
f011303f:	68 8c 93 13 f0       	push   $0xf013938c
f0113044:	e8 39 dc fe ff       	call   f0100c82 <cprintf>
f0113049:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f011304c:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f0113051:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0113054:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113057:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f011305a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011305f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0113062:	5b                   	pop    %ebx
f0113063:	5e                   	pop    %esi
f0113064:	5f                   	pop    %edi
f0113065:	5d                   	pop    %ebp
f0113066:	c3                   	ret    

f0113067 <test_share_chunk>:

//===============================
// 3) TEST SHARE CHUNK:
//===============================
int test_share_chunk()
{
f0113067:	55                   	push   %ebp
f0113068:	89 e5                	mov    %esp,%ebp
f011306a:	57                   	push   %edi
f011306b:	56                   	push   %esi
f011306c:	53                   	push   %ebx
f011306d:	81 ec bc 00 00 00    	sub    $0xbc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0113073:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0113079:	bb 58 90 13 f0       	mov    $0xf0139058,%ebx
f011307e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113083:	89 c7                	mov    %eax,%edi
f0113085:	89 de                	mov    %ebx,%esi
f0113087:	89 d1                	mov    %edx,%ecx
f0113089:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011308b:	8d 95 5d ff ff ff    	lea    -0xa3(%ebp),%edx
f0113091:	b9 23 00 00 00       	mov    $0x23,%ecx
f0113096:	b0 00                	mov    $0x0,%al
f0113098:	89 d7                	mov    %edx,%edi
f011309a:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011309c:	6a 00                	push   $0x0
f011309e:	6a 0a                	push   $0xa
f01130a0:	6a 14                	push   $0x14
f01130a2:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f01130a8:	50                   	push   %eax
f01130a9:	e8 4d 5c ff ff       	call   f0108cfb <env_create>
f01130ae:	83 c4 10             	add    $0x10,%esp
f01130b1:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01130b4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01130b7:	8b 40 5c             	mov    0x5c(%eax),%eax
f01130ba:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f01130bd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01130c0:	8b 40 60             	mov    0x60(%eax),%eax
f01130c3:	89 45 80             	mov    %eax,-0x80(%ebp)
f01130c6:	8b 45 80             	mov    -0x80(%ebp),%eax
f01130c9:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f01130cc:	83 ec 0c             	sub    $0xc,%esp
f01130cf:	ff 75 cc             	pushl  -0x34(%ebp)
f01130d2:	e8 5a 2a 00 00       	call   f0115b31 <ClearUserSpace>
f01130d7:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f01130da:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f01130e1:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f01130e8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f01130ef:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 20% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [20%]\n") ;
f01130f3:	83 ec 0c             	sub    $0xc,%esp
f01130f6:	68 04 9c 13 f0       	push   $0xf0139c04
f01130fb:	e8 82 db fe ff       	call   f0100c82 <cprintf>
f0113100:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)0xF0100000;
f0113103:	c7 45 bc 00 00 10 f0 	movl   $0xf0100000,-0x44(%ebp)
		ptr2 = (char*)0xF1004000;
f011310a:	c7 45 b8 00 40 00 f1 	movl   $0xf1004000,-0x48(%ebp)
		tptr[1] = *ptr1 ;
f0113111:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113114:	8a 00                	mov    (%eax),%al
f0113116:	88 85 45 ff ff ff    	mov    %al,-0xbb(%ebp)
		tptr[2] = *ptr2 ;
f011311c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011311f:	8a 00                	mov    (%eax),%al
f0113121:	88 85 46 ff ff ff    	mov    %al,-0xba(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113127:	e8 2f 98 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011312c:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0100000,0xF0104000, 6*kilo, PERM_WRITEABLE) ;
f011312f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113132:	89 d0                	mov    %edx,%eax
f0113134:	01 c0                	add    %eax,%eax
f0113136:	01 d0                	add    %edx,%eax
f0113138:	01 c0                	add    %eax,%eax
f011313a:	83 ec 0c             	sub    $0xc,%esp
f011313d:	6a 02                	push   $0x2
f011313f:	50                   	push   %eax
f0113140:	68 00 40 10 f0       	push   $0xf0104000
f0113145:	68 00 00 10 f0       	push   $0xf0100000
f011314a:	ff 75 cc             	pushl  -0x34(%ebp)
f011314d:	e8 30 58 ff ff       	call   f0108982 <share_chunk>
f0113152:	83 c4 20             	add    $0x20,%esp
f0113155:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113158:	e8 fe 97 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011315d:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0113160:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0113164:	75 08                	jne    f011316e <test_share_chunk+0x107>
f0113166:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113169:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011316c:	74 28                	je     f0113196 <test_share_chunk+0x12f>
		{
			warn("[EVAL] share_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter));
f011316e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113171:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113174:	83 ec 0c             	sub    $0xc,%esp
f0113177:	50                   	push   %eax
f0113178:	ff 75 b0             	pushl  -0x50(%ebp)
f011317b:	68 30 9c 13 f0       	push   $0xf0139c30
f0113180:	68 9e 03 00 00       	push   $0x39e
f0113185:	68 be 85 13 f0       	push   $0xf01385be
f011318a:	e8 f8 d1 fe ff       	call   f0100387 <_warn>
f011318f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113192:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113196:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011319a:	74 04                	je     f01131a0 <test_share_chunk+0x139>
f011319c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01131a0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xF0100000, 0xF0104000, 8*kilo, 1, 0x003, 0x007, 0x003, 0x007, ~CHK_SHARE) == 0)
f01131a4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01131a7:	c1 e0 03             	shl    $0x3,%eax
f01131aa:	83 ec 08             	sub    $0x8,%esp
f01131ad:	68 fd 00 00 00       	push   $0xfd
f01131b2:	6a 07                	push   $0x7
f01131b4:	6a 03                	push   $0x3
f01131b6:	6a 07                	push   $0x7
f01131b8:	6a 03                	push   $0x3
f01131ba:	6a 01                	push   $0x1
f01131bc:	50                   	push   %eax
f01131bd:	68 00 40 10 f0       	push   $0xf0104000
f01131c2:	68 00 00 10 f0       	push   $0xf0100000
f01131c7:	ff 75 cc             	pushl  -0x34(%ebp)
f01131ca:	e8 96 29 00 00       	call   f0115b65 <CCP>
f01131cf:	83 c4 30             	add    $0x30,%esp
f01131d2:	85 c0                	test   %eax,%eax
f01131d4:	75 1e                	jne    f01131f4 <test_share_chunk+0x18d>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01131d6:	83 ec 04             	sub    $0x4,%esp
f01131d9:	68 8c 9c 13 f0       	push   $0xf0139c8c
f01131de:	68 a6 03 00 00       	push   $0x3a6
f01131e3:	68 be 85 13 f0       	push   $0xf01385be
f01131e8:	e8 9a d1 fe ff       	call   f0100387 <_warn>
f01131ed:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01131f0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01131f4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01131f8:	74 04                	je     f01131fe <test_share_chunk+0x197>
f01131fa:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)

		*ptr1 = 'A' ;
f01131fe:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113201:	c6 00 41             	movb   $0x41,(%eax)
		*ptr2 = 'B' ;
f0113204:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113207:	c6 00 42             	movb   $0x42,(%eax)

		if ((*ptr1) != 'A' || (*ptr2) != 'B')
f011320a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011320d:	8a 00                	mov    (%eax),%al
f011320f:	3c 41                	cmp    $0x41,%al
f0113211:	75 09                	jne    f011321c <test_share_chunk+0x1b5>
f0113213:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113216:	8a 00                	mov    (%eax),%al
f0113218:	3c 42                	cmp    $0x42,%al
f011321a:	74 1e                	je     f011323a <test_share_chunk+0x1d3>
		{
			warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f011321c:	83 ec 04             	sub    $0x4,%esp
f011321f:	68 d4 9c 13 f0       	push   $0xf0139cd4
f0113224:	68 b0 03 00 00       	push   $0x3b0
f0113229:	68 be 85 13 f0       	push   $0xf01385be
f011322e:	e8 54 d1 fe ff       	call   f0100387 <_warn>
f0113233:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113236:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011323a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011323e:	74 04                	je     f0113244 <test_share_chunk+0x1dd>
f0113240:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113244:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		*ptr1 = tptr[1] ;
f0113248:	8a 95 45 ff ff ff    	mov    -0xbb(%ebp),%dl
f011324e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113251:	88 10                	mov    %dl,(%eax)
		*ptr2 = tptr[2] ;
f0113253:	8a 95 46 ff ff ff    	mov    -0xba(%ebp),%dl
f0113259:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011325c:	88 10                	mov    %dl,(%eax)
	}
	cprintf("\nCASE I: END\n") ;
f011325e:	83 ec 0c             	sub    $0xc,%esp
f0113261:	68 09 9d 13 f0       	push   $0xf0139d09
f0113266:	e8 17 da fe ff       	call   f0100c82 <cprintf>
f011326b:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART II: Destination page(s) not exist [Supervisor] 25% */
	/*========================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor] [25%]\n") ;
f011326e:	83 ec 0c             	sub    $0xc,%esp
f0113271:	68 18 9d 13 f0       	push   $0xf0139d18
f0113276:	e8 07 da fe ff       	call   f0100c82 <cprintf>
f011327b:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011327e:	e8 d8 96 ff ff       	call   f010c95b <sys_calculate_free_frames>
f0113283:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0000000,0x40000000, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0113286:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113289:	c1 e0 05             	shl    $0x5,%eax
f011328c:	83 ec 0c             	sub    $0xc,%esp
f011328f:	68 02 0e 00 00       	push   $0xe02
f0113294:	50                   	push   %eax
f0113295:	68 00 00 00 40       	push   $0x40000000
f011329a:	68 00 00 00 f0       	push   $0xf0000000
f011329f:	ff 75 cc             	pushl  -0x34(%ebp)
f01132a2:	e8 db 56 ff ff       	call   f0108982 <share_chunk>
f01132a7:	83 c4 20             	add    $0x20,%esp
f01132aa:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01132ad:	e8 a9 96 ff ff       	call   f010c95b <sys_calculate_free_frames>
f01132b2:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (32*mega) / (4*mega))
f01132b5:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f01132b9:	75 1f                	jne    f01132da <test_share_chunk+0x273>
f01132bb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01132be:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01132c1:	89 c1                	mov    %eax,%ecx
f01132c3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01132c6:	c1 e0 05             	shl    $0x5,%eax
f01132c9:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01132cc:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01132d3:	99                   	cltd   
f01132d4:	f7 fb                	idiv   %ebx
f01132d6:	39 c1                	cmp    %eax,%ecx
f01132d8:	74 28                	je     f0113302 <test_share_chunk+0x29b>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01132da:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01132dd:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01132e0:	83 ec 0c             	sub    $0xc,%esp
f01132e3:	50                   	push   %eax
f01132e4:	ff 75 a8             	pushl  -0x58(%ebp)
f01132e7:	68 54 9d 13 f0       	push   $0xf0139d54
f01132ec:	68 c8 03 00 00       	push   $0x3c8
f01132f1:	68 be 85 13 f0       	push   $0xf01385be
f01132f6:	e8 8c d0 fe ff       	call   f0100387 <_warn>
f01132fb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01132fe:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113302:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113306:	74 04                	je     f011330c <test_share_chunk+0x2a5>
f0113308:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011330c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113310:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0xF0000000, 0x40000000, 32*mega, -1, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0113317:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011331a:	c1 e0 05             	shl    $0x5,%eax
f011331d:	83 ec 08             	sub    $0x8,%esp
f0113320:	6a 02                	push   $0x2
f0113322:	6a 07                	push   $0x7
f0113324:	6a 03                	push   $0x3
f0113326:	68 07 0e 00 00       	push   $0xe07
f011332b:	68 03 0e 00 00       	push   $0xe03
f0113330:	6a ff                	push   $0xffffffff
f0113332:	50                   	push   %eax
f0113333:	68 00 00 00 40       	push   $0x40000000
f0113338:	68 00 00 00 f0       	push   $0xf0000000
f011333d:	ff 75 cc             	pushl  -0x34(%ebp)
f0113340:	e8 20 28 00 00       	call   f0115b65 <CCP>
f0113345:	83 c4 30             	add    $0x30,%esp
f0113348:	85 c0                	test   %eax,%eax
f011334a:	75 25                	jne    f0113371 <test_share_chunk+0x30a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011334c:	83 ec 04             	sub    $0x4,%esp
f011334f:	68 8c 9c 13 f0       	push   $0xf0139c8c
f0113354:	68 d1 03 00 00       	push   $0x3d1
f0113359:	68 be 85 13 f0       	push   $0xf01385be
f011335e:	e8 24 d0 fe ff       	call   f0100387 <_warn>
f0113363:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113366:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f011336a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}

		if (CCP(proc_directory, 0xF0000000, 0x40000000, 12*kilo, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0113371:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113374:	89 d0                	mov    %edx,%eax
f0113376:	01 c0                	add    %eax,%eax
f0113378:	01 d0                	add    %edx,%eax
f011337a:	c1 e0 02             	shl    $0x2,%eax
f011337d:	83 ec 08             	sub    $0x8,%esp
f0113380:	6a 02                	push   $0x2
f0113382:	6a 07                	push   $0x7
f0113384:	6a 03                	push   $0x3
f0113386:	68 07 0e 00 00       	push   $0xe07
f011338b:	68 03 0e 00 00       	push   $0xe03
f0113390:	6a 02                	push   $0x2
f0113392:	50                   	push   %eax
f0113393:	68 00 00 00 40       	push   $0x40000000
f0113398:	68 00 00 00 f0       	push   $0xf0000000
f011339d:	ff 75 cc             	pushl  -0x34(%ebp)
f01133a0:	e8 c0 27 00 00       	call   f0115b65 <CCP>
f01133a5:	83 c4 30             	add    $0x30,%esp
f01133a8:	85 c0                	test   %eax,%eax
f01133aa:	75 1e                	jne    f01133ca <test_share_chunk+0x363>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01133ac:	83 ec 04             	sub    $0x4,%esp
f01133af:	68 8c 9c 13 f0       	push   $0xf0139c8c
f01133b4:	68 d8 03 00 00       	push   $0x3d8
f01133b9:	68 be 85 13 f0       	push   $0xf01385be
f01133be:	e8 c4 cf fe ff       	call   f0100387 <_warn>
f01133c3:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01133c6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01133ca:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01133ce:	74 04                	je     f01133d4 <test_share_chunk+0x36d>
f01133d0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01133d4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		extern char end_of_kernel[];
		uint32 endRange = ((uint32)end_of_kernel - KERNEL_BASE);
f01133d8:	b8 bc 7c 65 f0       	mov    $0xf0657cbc,%eax
f01133dd:	05 00 00 00 10       	add    $0x10000000,%eax
f01133e2:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (CCP(proc_directory, 0xF0000000+PHYS_IO_MEM, 0x40000000+PHYS_IO_MEM, endRange - PHYS_IO_MEM, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f01133e5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01133e8:	2d 00 00 0a 00       	sub    $0xa0000,%eax
f01133ed:	83 ec 08             	sub    $0x8,%esp
f01133f0:	6a 02                	push   $0x2
f01133f2:	6a 07                	push   $0x7
f01133f4:	6a 03                	push   $0x3
f01133f6:	68 07 0e 00 00       	push   $0xe07
f01133fb:	68 03 0e 00 00       	push   $0xe03
f0113400:	6a 02                	push   $0x2
f0113402:	50                   	push   %eax
f0113403:	68 00 00 0a 40       	push   $0x400a0000
f0113408:	68 00 00 0a f0       	push   $0xf00a0000
f011340d:	ff 75 cc             	pushl  -0x34(%ebp)
f0113410:	e8 50 27 00 00       	call   f0115b65 <CCP>
f0113415:	83 c4 30             	add    $0x30,%esp
f0113418:	85 c0                	test   %eax,%eax
f011341a:	75 1e                	jne    f011343a <test_share_chunk+0x3d3>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011341c:	83 ec 04             	sub    $0x4,%esp
f011341f:	68 8c 9c 13 f0       	push   $0xf0139c8c
f0113424:	68 e2 03 00 00       	push   $0x3e2
f0113429:	68 be 85 13 f0       	push   $0xf01385be
f011342e:	e8 54 cf fe ff       	call   f0100387 <_warn>
f0113433:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113436:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011343a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011343e:	74 04                	je     f0113444 <test_share_chunk+0x3dd>
f0113440:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113444:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0113448:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011344c:	0f 84 a4 00 00 00    	je     f01134f6 <test_share_chunk+0x48f>
		{
			ptr1 = (char*)0xF00007FF; *ptr1 = 'A' ;
f0113452:	c7 45 bc ff 07 00 f0 	movl   $0xf00007ff,-0x44(%ebp)
f0113459:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011345c:	c6 00 41             	movb   $0x41,(%eax)
			ptr2 = (char*)0x400007FF;
f011345f:	c7 45 b8 ff 07 00 40 	movl   $0x400007ff,-0x48(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A')
f0113466:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113469:	8a 00                	mov    (%eax),%al
f011346b:	3c 41                	cmp    $0x41,%al
f011346d:	75 09                	jne    f0113478 <test_share_chunk+0x411>
f011346f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113472:	8a 00                	mov    (%eax),%al
f0113474:	3c 41                	cmp    $0x41,%al
f0113476:	74 1e                	je     f0113496 <test_share_chunk+0x42f>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113478:	83 ec 04             	sub    $0x4,%esp
f011347b:	68 d4 9c 13 f0       	push   $0xf0139cd4
f0113480:	68 ef 03 00 00       	push   $0x3ef
f0113485:	68 be 85 13 f0       	push   $0xf01385be
f011348a:	e8 f8 ce fe ff       	call   f0100387 <_warn>
f011348f:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113492:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113496:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011349a:	74 04                	je     f01134a0 <test_share_chunk+0x439>
f011349c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01134a0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

			ptr1 = (char*)0x41000FFF; *ptr1 = 'C' ;
f01134a4:	c7 45 bc ff 0f 00 41 	movl   $0x41000fff,-0x44(%ebp)
f01134ab:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01134ae:	c6 00 43             	movb   $0x43,(%eax)
			ptr2 = (char*)0xF1000FFF;
f01134b1:	c7 45 b8 ff 0f 00 f1 	movl   $0xf1000fff,-0x48(%ebp)

			if ((*ptr1) != 'C' || (*ptr2) != 'C')
f01134b8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01134bb:	8a 00                	mov    (%eax),%al
f01134bd:	3c 43                	cmp    $0x43,%al
f01134bf:	75 09                	jne    f01134ca <test_share_chunk+0x463>
f01134c1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01134c4:	8a 00                	mov    (%eax),%al
f01134c6:	3c 43                	cmp    $0x43,%al
f01134c8:	74 1e                	je     f01134e8 <test_share_chunk+0x481>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01134ca:	83 ec 04             	sub    $0x4,%esp
f01134cd:	68 d4 9c 13 f0       	push   $0xf0139cd4
f01134d2:	68 fa 03 00 00       	push   $0x3fa
f01134d7:	68 be 85 13 f0       	push   $0xf01385be
f01134dc:	e8 a6 ce fe ff       	call   f0100387 <_warn>
f01134e1:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01134e4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01134e8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01134ec:	74 04                	je     f01134f2 <test_share_chunk+0x48b>
f01134ee:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01134f2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f01134f6:	83 ec 0c             	sub    $0xc,%esp
f01134f9:	68 e3 92 13 f0       	push   $0xf01392e3
f01134fe:	e8 7f d7 fe ff       	call   f0100c82 <cprintf>
f0113503:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART III: Destination page(s) not exist [User r/w] 25%  */
	/*========================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [User r/w] [25%]\n") ;
f0113506:	83 ec 0c             	sub    $0xc,%esp
f0113509:	68 a4 9d 13 f0       	push   $0xf0139da4
f011350e:	e8 6f d7 fe ff       	call   f0100c82 <cprintf>
f0113513:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113516:	e8 40 94 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011351b:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x40000000,0x0, 648*kilo, PERM_WRITEABLE|PERM_USER) ;
f011351e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113521:	89 d0                	mov    %edx,%eax
f0113523:	c1 e0 03             	shl    $0x3,%eax
f0113526:	01 d0                	add    %edx,%eax
f0113528:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011352f:	01 d0                	add    %edx,%eax
f0113531:	c1 e0 03             	shl    $0x3,%eax
f0113534:	83 ec 0c             	sub    $0xc,%esp
f0113537:	6a 06                	push   $0x6
f0113539:	50                   	push   %eax
f011353a:	6a 00                	push   $0x0
f011353c:	68 00 00 00 40       	push   $0x40000000
f0113541:	ff 75 cc             	pushl  -0x34(%ebp)
f0113544:	e8 39 54 ff ff       	call   f0108982 <share_chunk>
f0113549:	83 c4 20             	add    $0x20,%esp
f011354c:	89 45 a0             	mov    %eax,-0x60(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011354f:	e8 07 94 ff ff       	call   f010c95b <sys_calculate_free_frames>
f0113554:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0113557:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f011355b:	75 0b                	jne    f0113568 <test_share_chunk+0x501>
f011355d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113560:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113563:	83 f8 01             	cmp    $0x1,%eax
f0113566:	74 28                	je     f0113590 <test_share_chunk+0x529>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113568:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011356b:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011356e:	83 ec 0c             	sub    $0xc,%esp
f0113571:	50                   	push   %eax
f0113572:	ff 75 a0             	pushl  -0x60(%ebp)
f0113575:	68 54 9d 13 f0       	push   $0xf0139d54
f011357a:	68 10 04 00 00       	push   $0x410
f011357f:	68 be 85 13 f0       	push   $0xf01385be
f0113584:	e8 fe cd fe ff       	call   f0100387 <_warn>
f0113589:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011358c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113590:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113594:	74 04                	je     f011359a <test_share_chunk+0x533>
f0113596:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011359a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f011359e:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0x40000000, 0x0, PHYS_IO_MEM + 4*kilo, -1, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f01135a5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01135a8:	05 00 80 02 00       	add    $0x28000,%eax
f01135ad:	c1 e0 02             	shl    $0x2,%eax
f01135b0:	83 ec 08             	sub    $0x8,%esp
f01135b3:	6a 02                	push   $0x2
f01135b5:	6a 07                	push   $0x7
f01135b7:	6a 03                	push   $0x3
f01135b9:	6a 07                	push   $0x7
f01135bb:	6a 07                	push   $0x7
f01135bd:	6a ff                	push   $0xffffffff
f01135bf:	50                   	push   %eax
f01135c0:	6a 00                	push   $0x0
f01135c2:	68 00 00 00 40       	push   $0x40000000
f01135c7:	ff 75 cc             	pushl  -0x34(%ebp)
f01135ca:	e8 96 25 00 00       	call   f0115b65 <CCP>
f01135cf:	83 c4 30             	add    $0x30,%esp
f01135d2:	85 c0                	test   %eax,%eax
f01135d4:	75 25                	jne    f01135fb <test_share_chunk+0x594>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01135d6:	83 ec 04             	sub    $0x4,%esp
f01135d9:	68 8c 9c 13 f0       	push   $0xf0139c8c
f01135de:	68 19 04 00 00       	push   $0x419
f01135e3:	68 be 85 13 f0       	push   $0xf01385be
f01135e8:	e8 9a cd fe ff       	call   f0100387 <_warn>
f01135ed:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01135f0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01135f4:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}

		if (CCP(proc_directory, 0x40000000, 0x0, 12*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f01135fb:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01135fe:	89 d0                	mov    %edx,%eax
f0113600:	01 c0                	add    %eax,%eax
f0113602:	01 d0                	add    %edx,%eax
f0113604:	c1 e0 02             	shl    $0x2,%eax
f0113607:	83 ec 08             	sub    $0x8,%esp
f011360a:	6a 02                	push   $0x2
f011360c:	6a 07                	push   $0x7
f011360e:	6a 03                	push   $0x3
f0113610:	6a 07                	push   $0x7
f0113612:	6a 07                	push   $0x7
f0113614:	6a 03                	push   $0x3
f0113616:	50                   	push   %eax
f0113617:	6a 00                	push   $0x0
f0113619:	68 00 00 00 40       	push   $0x40000000
f011361e:	ff 75 cc             	pushl  -0x34(%ebp)
f0113621:	e8 3f 25 00 00       	call   f0115b65 <CCP>
f0113626:	83 c4 30             	add    $0x30,%esp
f0113629:	85 c0                	test   %eax,%eax
f011362b:	75 1e                	jne    f011364b <test_share_chunk+0x5e4>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011362d:	83 ec 04             	sub    $0x4,%esp
f0113630:	68 8c 9c 13 f0       	push   $0xf0139c8c
f0113635:	68 20 04 00 00       	push   $0x420
f011363a:	68 be 85 13 f0       	push   $0xf01385be
f011363f:	e8 43 cd fe ff       	call   f0100387 <_warn>
f0113644:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113647:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011364b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011364f:	74 04                	je     f0113655 <test_share_chunk+0x5ee>
f0113651:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113655:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40003000, 0x3000, PHYS_IO_MEM - 12*kilo, 2, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0113659:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011365c:	89 d0                	mov    %edx,%eax
f011365e:	01 c0                	add    %eax,%eax
f0113660:	01 d0                	add    %edx,%eax
f0113662:	c1 e0 02             	shl    $0x2,%eax
f0113665:	f7 d8                	neg    %eax
f0113667:	05 00 00 0a 00       	add    $0xa0000,%eax
f011366c:	83 ec 08             	sub    $0x8,%esp
f011366f:	6a 02                	push   $0x2
f0113671:	6a 07                	push   $0x7
f0113673:	6a 03                	push   $0x3
f0113675:	6a 07                	push   $0x7
f0113677:	6a 07                	push   $0x7
f0113679:	6a 02                	push   $0x2
f011367b:	50                   	push   %eax
f011367c:	68 00 30 00 00       	push   $0x3000
f0113681:	68 00 30 00 40       	push   $0x40003000
f0113686:	ff 75 cc             	pushl  -0x34(%ebp)
f0113689:	e8 d7 24 00 00       	call   f0115b65 <CCP>
f011368e:	83 c4 30             	add    $0x30,%esp
f0113691:	85 c0                	test   %eax,%eax
f0113693:	75 1e                	jne    f01136b3 <test_share_chunk+0x64c>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113695:	83 ec 04             	sub    $0x4,%esp
f0113698:	68 8c 9c 13 f0       	push   $0xf0139c8c
f011369d:	68 28 04 00 00       	push   $0x428
f01136a2:	68 be 85 13 f0       	push   $0xf01385be
f01136a7:	e8 db cc fe ff       	call   f0100387 <_warn>
f01136ac:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01136af:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01136b3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01136b7:	74 04                	je     f01136bd <test_share_chunk+0x656>
f01136b9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01136bd:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40000000+PHYS_IO_MEM, PHYS_IO_MEM, 4*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f01136c1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01136c4:	c1 e0 02             	shl    $0x2,%eax
f01136c7:	83 ec 08             	sub    $0x8,%esp
f01136ca:	6a 02                	push   $0x2
f01136cc:	6a 07                	push   $0x7
f01136ce:	6a 03                	push   $0x3
f01136d0:	6a 07                	push   $0x7
f01136d2:	6a 07                	push   $0x7
f01136d4:	6a 03                	push   $0x3
f01136d6:	50                   	push   %eax
f01136d7:	68 00 00 0a 00       	push   $0xa0000
f01136dc:	68 00 00 0a 40       	push   $0x400a0000
f01136e1:	ff 75 cc             	pushl  -0x34(%ebp)
f01136e4:	e8 7c 24 00 00       	call   f0115b65 <CCP>
f01136e9:	83 c4 30             	add    $0x30,%esp
f01136ec:	85 c0                	test   %eax,%eax
f01136ee:	75 1e                	jne    f011370e <test_share_chunk+0x6a7>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01136f0:	83 ec 04             	sub    $0x4,%esp
f01136f3:	68 8c 9c 13 f0       	push   $0xf0139c8c
f01136f8:	68 30 04 00 00       	push   $0x430
f01136fd:	68 be 85 13 f0       	push   $0xf01385be
f0113702:	e8 80 cc fe ff       	call   f0100387 <_warn>
f0113707:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011370a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011370e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113712:	74 04                	je     f0113718 <test_share_chunk+0x6b1>
f0113714:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113718:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f011371c:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0113720:	0f 84 92 00 00 00    	je     f01137b8 <test_share_chunk+0x751>
		{
			ptr1 = (char*)0x7FF;
f0113726:	c7 45 bc ff 07 00 00 	movl   $0x7ff,-0x44(%ebp)
			ptr2 = (char*)0xF00007FF;
f011372d:	c7 45 b8 ff 07 00 f0 	movl   $0xf00007ff,-0x48(%ebp)
			ptr3 = (char*)0x400007FF;
f0113734:	c7 45 9c ff 07 00 40 	movl   $0x400007ff,-0x64(%ebp)
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
f011373b:	c7 45 98 ff ff 09 00 	movl   $0x9ffff,-0x68(%ebp)
f0113742:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113745:	c6 00 44             	movb   $0x44,(%eax)
			ptr5 = (char*)0xF009FFFF;
f0113748:	c7 45 94 ff ff 09 f0 	movl   $0xf009ffff,-0x6c(%ebp)
			ptr6 = (char*)0x4009FFFF;
f011374f:	c7 45 90 ff ff 09 40 	movl   $0x4009ffff,-0x70(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0113756:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113759:	8a 00                	mov    (%eax),%al
f011375b:	3c 41                	cmp    $0x41,%al
f011375d:	75 2d                	jne    f011378c <test_share_chunk+0x725>
f011375f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113762:	8a 00                	mov    (%eax),%al
f0113764:	3c 41                	cmp    $0x41,%al
f0113766:	75 24                	jne    f011378c <test_share_chunk+0x725>
f0113768:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011376b:	8a 00                	mov    (%eax),%al
f011376d:	3c 41                	cmp    $0x41,%al
f011376f:	75 1b                	jne    f011378c <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0113771:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113774:	8a 00                	mov    (%eax),%al
			ptr3 = (char*)0x400007FF;
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
			ptr5 = (char*)0xF009FFFF;
			ptr6 = (char*)0x4009FFFF;

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0113776:	3c 44                	cmp    $0x44,%al
f0113778:	75 12                	jne    f011378c <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f011377a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011377d:	8a 00                	mov    (%eax),%al
f011377f:	3c 44                	cmp    $0x44,%al
f0113781:	75 09                	jne    f011378c <test_share_chunk+0x725>
f0113783:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113786:	8a 00                	mov    (%eax),%al
f0113788:	3c 44                	cmp    $0x44,%al
f011378a:	74 1e                	je     f01137aa <test_share_chunk+0x743>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f011378c:	83 ec 04             	sub    $0x4,%esp
f011378f:	68 d4 9c 13 f0       	push   $0xf0139cd4
f0113794:	68 42 04 00 00       	push   $0x442
f0113799:	68 be 85 13 f0       	push   $0xf01385be
f011379e:	e8 e4 cb fe ff       	call   f0100387 <_warn>
f01137a3:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01137a6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01137aa:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01137ae:	74 04                	je     f01137b4 <test_share_chunk+0x74d>
f01137b0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01137b4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f01137b8:	83 ec 0c             	sub    $0xc,%esp
f01137bb:	68 46 93 13 f0       	push   $0xf0139346
f01137c0:	e8 bd d4 fe ff       	call   f0100c82 <cprintf>
f01137c5:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r] 30%     */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r] [30%]\n") ;
f01137c8:	83 ec 0c             	sub    $0xc,%esp
f01137cb:	68 e0 9d 13 f0       	push   $0xf0139de0
f01137d0:	e8 ad d4 fe ff       	call   f0100c82 <cprintf>
f01137d5:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01137d8:	e8 7e 91 ff ff       	call   f010c95b <sys_calculate_free_frames>
f01137dd:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x9FC00,0x3FFC00, 7*kilo, PERM_USER) ;
f01137e0:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01137e3:	89 d0                	mov    %edx,%eax
f01137e5:	01 c0                	add    %eax,%eax
f01137e7:	01 d0                	add    %edx,%eax
f01137e9:	01 c0                	add    %eax,%eax
f01137eb:	01 d0                	add    %edx,%eax
f01137ed:	83 ec 0c             	sub    $0xc,%esp
f01137f0:	6a 04                	push   $0x4
f01137f2:	50                   	push   %eax
f01137f3:	68 00 fc 3f 00       	push   $0x3ffc00
f01137f8:	68 00 fc 09 00       	push   $0x9fc00
f01137fd:	ff 75 cc             	pushl  -0x34(%ebp)
f0113800:	e8 7d 51 ff ff       	call   f0108982 <share_chunk>
f0113805:	83 c4 20             	add    $0x20,%esp
f0113808:	89 45 8c             	mov    %eax,-0x74(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011380b:	e8 4b 91 ff ff       	call   f010c95b <sys_calculate_free_frames>
f0113810:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0113813:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
f0113817:	75 0b                	jne    f0113824 <test_share_chunk+0x7bd>
f0113819:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011381c:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011381f:	83 f8 01             	cmp    $0x1,%eax
f0113822:	74 28                	je     f011384c <test_share_chunk+0x7e5>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113824:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113827:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011382a:	83 ec 0c             	sub    $0xc,%esp
f011382d:	50                   	push   %eax
f011382e:	ff 75 8c             	pushl  -0x74(%ebp)
f0113831:	68 54 9d 13 f0       	push   $0xf0139d54
f0113836:	68 58 04 00 00       	push   $0x458
f011383b:	68 be 85 13 f0       	push   $0xf01385be
f0113840:	e8 42 cb fe ff       	call   f0100387 <_warn>
f0113845:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113848:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011384c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113850:	74 04                	je     f0113856 <test_share_chunk+0x7ef>
f0113852:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113856:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f011385a:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0x9F000, 0x3FF000, 12*kilo, -1, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0113861:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113864:	89 d0                	mov    %edx,%eax
f0113866:	01 c0                	add    %eax,%eax
f0113868:	01 d0                	add    %edx,%eax
f011386a:	c1 e0 02             	shl    $0x2,%eax
f011386d:	83 ec 08             	sub    $0x8,%esp
f0113870:	6a 02                	push   $0x2
f0113872:	6a 07                	push   $0x7
f0113874:	6a 07                	push   $0x7
f0113876:	6a 07                	push   $0x7
f0113878:	6a 05                	push   $0x5
f011387a:	6a ff                	push   $0xffffffff
f011387c:	50                   	push   %eax
f011387d:	68 00 f0 3f 00       	push   $0x3ff000
f0113882:	68 00 f0 09 00       	push   $0x9f000
f0113887:	ff 75 cc             	pushl  -0x34(%ebp)
f011388a:	e8 d6 22 00 00       	call   f0115b65 <CCP>
f011388f:	83 c4 30             	add    $0x30,%esp
f0113892:	85 c0                	test   %eax,%eax
f0113894:	75 25                	jne    f01138bb <test_share_chunk+0x854>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113896:	83 ec 04             	sub    $0x4,%esp
f0113899:	68 8c 9c 13 f0       	push   $0xf0139c8c
f011389e:	68 61 04 00 00       	push   $0x461
f01138a3:	68 be 85 13 f0       	push   $0xf01385be
f01138a8:	e8 da ca fe ff       	call   f0100387 <_warn>
f01138ad:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01138b0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01138b4:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 5 ;
f01138bb:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01138bf:	74 04                	je     f01138c5 <test_share_chunk+0x85e>
f01138c1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01138c5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x9F000, 0x3FF000, 4*kilo, 3, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f01138c9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01138cc:	c1 e0 02             	shl    $0x2,%eax
f01138cf:	83 ec 08             	sub    $0x8,%esp
f01138d2:	6a 02                	push   $0x2
f01138d4:	6a 07                	push   $0x7
f01138d6:	6a 07                	push   $0x7
f01138d8:	6a 07                	push   $0x7
f01138da:	6a 05                	push   $0x5
f01138dc:	6a 03                	push   $0x3
f01138de:	50                   	push   %eax
f01138df:	68 00 f0 3f 00       	push   $0x3ff000
f01138e4:	68 00 f0 09 00       	push   $0x9f000
f01138e9:	ff 75 cc             	pushl  -0x34(%ebp)
f01138ec:	e8 74 22 00 00       	call   f0115b65 <CCP>
f01138f1:	83 c4 30             	add    $0x30,%esp
f01138f4:	85 c0                	test   %eax,%eax
f01138f6:	75 1e                	jne    f0113916 <test_share_chunk+0x8af>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01138f8:	83 ec 04             	sub    $0x4,%esp
f01138fb:	68 8c 9c 13 f0       	push   $0xf0139c8c
f0113900:	68 6a 04 00 00       	push   $0x46a
f0113905:	68 be 85 13 f0       	push   $0xf01385be
f011390a:	e8 78 ca fe ff       	call   f0100387 <_warn>
f011390f:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113912:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113916:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011391a:	74 04                	je     f0113920 <test_share_chunk+0x8b9>
f011391c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113920:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xA0000, 0x400000, 8*kilo, 4, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0113924:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113927:	c1 e0 03             	shl    $0x3,%eax
f011392a:	83 ec 08             	sub    $0x8,%esp
f011392d:	6a 02                	push   $0x2
f011392f:	6a 07                	push   $0x7
f0113931:	6a 07                	push   $0x7
f0113933:	6a 07                	push   $0x7
f0113935:	6a 05                	push   $0x5
f0113937:	6a 04                	push   $0x4
f0113939:	50                   	push   %eax
f011393a:	68 00 00 40 00       	push   $0x400000
f011393f:	68 00 00 0a 00       	push   $0xa0000
f0113944:	ff 75 cc             	pushl  -0x34(%ebp)
f0113947:	e8 19 22 00 00       	call   f0115b65 <CCP>
f011394c:	83 c4 30             	add    $0x30,%esp
f011394f:	85 c0                	test   %eax,%eax
f0113951:	75 1e                	jne    f0113971 <test_share_chunk+0x90a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113953:	83 ec 04             	sub    $0x4,%esp
f0113956:	68 8c 9c 13 f0       	push   $0xf0139c8c
f011395b:	68 72 04 00 00       	push   $0x472
f0113960:	68 be 85 13 f0       	push   $0xf01385be
f0113965:	e8 1d ca fe ff       	call   f0100387 <_warn>
f011396a:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011396d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113971:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113975:	74 04                	je     f011397b <test_share_chunk+0x914>
f0113977:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011397b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f011397f:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0113983:	0f 84 b2 00 00 00    	je     f0113a3b <test_share_chunk+0x9d4>
		{
			ptr1 = (char*)0x0009FFFF;
f0113989:	c7 45 bc ff ff 09 00 	movl   $0x9ffff,-0x44(%ebp)
			ptr2 = (char*)0x003FFFFF;
f0113990:	c7 45 b8 ff ff 3f 00 	movl   $0x3fffff,-0x48(%ebp)
			ptr3 = (char*)0x4009FFFF;
f0113997:	c7 45 9c ff ff 09 40 	movl   $0x4009ffff,-0x64(%ebp)
			ptr4 = (char*)0xF009FFFF;
f011399e:	c7 45 98 ff ff 09 f0 	movl   $0xf009ffff,-0x68(%ebp)

			ptr5 = (char*)0x000A1001;
f01139a5:	c7 45 94 01 10 0a 00 	movl   $0xa1001,-0x6c(%ebp)
			ptr6 = (char*)0x00401001;
f01139ac:	c7 45 90 01 10 40 00 	movl   $0x401001,-0x70(%ebp)
			ptr7 = (char*)0x400A1001;
f01139b3:	c7 45 88 01 10 0a 40 	movl   $0x400a1001,-0x78(%ebp)
			ptr8 = (char*)0xF00A1001;
f01139ba:	c7 45 84 01 10 0a f0 	movl   $0xf00a1001,-0x7c(%ebp)

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f01139c1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01139c4:	8a 00                	mov    (%eax),%al
f01139c6:	3c 44                	cmp    $0x44,%al
f01139c8:	75 45                	jne    f0113a0f <test_share_chunk+0x9a8>
f01139ca:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01139cd:	8a 00                	mov    (%eax),%al
f01139cf:	3c 44                	cmp    $0x44,%al
f01139d1:	75 3c                	jne    f0113a0f <test_share_chunk+0x9a8>
f01139d3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01139d6:	8a 00                	mov    (%eax),%al
f01139d8:	3c 44                	cmp    $0x44,%al
f01139da:	75 33                	jne    f0113a0f <test_share_chunk+0x9a8>
f01139dc:	8b 45 98             	mov    -0x68(%ebp),%eax
f01139df:	8a 00                	mov    (%eax),%al
f01139e1:	3c 44                	cmp    $0x44,%al
f01139e3:	75 2a                	jne    f0113a0f <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f01139e5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01139e8:	8a 10                	mov    (%eax),%dl
f01139ea:	8b 45 90             	mov    -0x70(%ebp),%eax
f01139ed:	8a 00                	mov    (%eax),%al
			ptr5 = (char*)0x000A1001;
			ptr6 = (char*)0x00401001;
			ptr7 = (char*)0x400A1001;
			ptr8 = (char*)0xF00A1001;

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f01139ef:	38 c2                	cmp    %al,%dl
f01139f1:	75 1c                	jne    f0113a0f <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f01139f3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01139f6:	8a 10                	mov    (%eax),%dl
f01139f8:	8b 45 88             	mov    -0x78(%ebp),%eax
f01139fb:	8a 00                	mov    (%eax),%al
f01139fd:	38 c2                	cmp    %al,%dl
f01139ff:	75 0e                	jne    f0113a0f <test_share_chunk+0x9a8>
f0113a01:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113a04:	8a 10                	mov    (%eax),%dl
f0113a06:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0113a09:	8a 00                	mov    (%eax),%al
f0113a0b:	38 c2                	cmp    %al,%dl
f0113a0d:	74 1e                	je     f0113a2d <test_share_chunk+0x9c6>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113a0f:	83 ec 04             	sub    $0x4,%esp
f0113a12:	68 d4 9c 13 f0       	push   $0xf0139cd4
f0113a17:	68 87 04 00 00       	push   $0x487
f0113a1c:	68 be 85 13 f0       	push   $0xf01385be
f0113a21:	e8 61 c9 fe ff       	call   f0100387 <_warn>
f0113a26:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113a29:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113a2d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113a31:	74 04                	je     f0113a37 <test_share_chunk+0x9d0>
f0113a33:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113a37:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE IV: END\n") ;
f0113a3b:	83 ec 0c             	sub    $0xc,%esp
f0113a3e:	68 18 9e 13 f0       	push   $0xf0139e18
f0113a43:	e8 3a d2 fe ff       	call   f0100c82 <cprintf>
f0113a48:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] share_chunk: FINISHED. Evaluation = %d\n", eval);
f0113a4b:	83 ec 08             	sub    $0x8,%esp
f0113a4e:	ff 75 e4             	pushl  -0x1c(%ebp)
f0113a51:	68 28 9e 13 f0       	push   $0xf0139e28
f0113a56:	e8 27 d2 fe ff       	call   f0100c82 <cprintf>
f0113a5b:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0113a5e:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0113a62:	75 10                	jne    f0113a74 <test_share_chunk+0xa0d>
		cprintf("Congratulations!! test share_chunk completed successfully.\n");
f0113a64:	83 ec 0c             	sub    $0xc,%esp
f0113a67:	68 58 9e 13 f0       	push   $0xf0139e58
f0113a6c:	e8 11 d2 fe ff       	call   f0100c82 <cprintf>
f0113a71:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0113a74:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f0113a79:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0113a7c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113a7f:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0113a82:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113a87:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0113a8a:	5b                   	pop    %ebx
f0113a8b:	5e                   	pop    %esi
f0113a8c:	5f                   	pop    %edi
f0113a8d:	5d                   	pop    %ebp
f0113a8e:	c3                   	ret    

f0113a8f <test_allocate_chunk>:

//===============================
// 4) TEST ALLOCATE CHUNK:
//===============================
int test_allocate_chunk()
{
f0113a8f:	55                   	push   %ebp
f0113a90:	89 e5                	mov    %esp,%ebp
f0113a92:	57                   	push   %edi
f0113a93:	56                   	push   %esi
f0113a94:	53                   	push   %ebx
f0113a95:	81 ec ac 00 00 00    	sub    $0xac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0113a9b:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0113aa1:	bb 58 90 13 f0       	mov    $0xf0139058,%ebx
f0113aa6:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113aab:	89 c7                	mov    %eax,%edi
f0113aad:	89 de                	mov    %ebx,%esi
f0113aaf:	89 d1                	mov    %edx,%ecx
f0113ab1:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113ab3:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0113ab9:	b9 23 00 00 00       	mov    $0x23,%ecx
f0113abe:	b0 00                	mov    $0x0,%al
f0113ac0:	89 d7                	mov    %edx,%edi
f0113ac2:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0113ac4:	6a 00                	push   $0x0
f0113ac6:	6a 0a                	push   $0xa
f0113ac8:	6a 14                	push   $0x14
f0113aca:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0113ad0:	50                   	push   %eax
f0113ad1:	e8 25 52 ff ff       	call   f0108cfb <env_create>
f0113ad6:	83 c4 10             	add    $0x10,%esp
f0113ad9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0113adc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0113adf:	8b 40 5c             	mov    0x5c(%eax),%eax
f0113ae2:	89 45 d0             	mov    %eax,-0x30(%ebp)
	lcr3(env->env_cr3) ;
f0113ae5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0113ae8:	8b 40 60             	mov    0x60(%eax),%eax
f0113aeb:	89 45 90             	mov    %eax,-0x70(%ebp)
f0113aee:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113af1:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0113af4:	83 ec 0c             	sub    $0xc,%esp
f0113af7:	ff 75 d0             	pushl  -0x30(%ebp)
f0113afa:	e8 32 20 00 00       	call   f0115b31 <ClearUserSpace>
f0113aff:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0113b02:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f0113b09:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)
	uint32 eval = 0;
f0113b10:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0113b17:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 30% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [30%]\n") ;
f0113b1b:	83 ec 0c             	sub    $0xc,%esp
f0113b1e:	68 94 9e 13 f0       	push   $0xf0139e94
f0113b23:	e8 5a d1 fe ff       	call   f0100c82 <cprintf>
f0113b28:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)KERNEL_STACK_TOP - 1;
f0113b2b:	c7 45 c0 ff ff bf ef 	movl   $0xefbfffff,-0x40(%ebp)
		ptr2 = (char*)KERNEL_STACK_TOP - 2;
f0113b32:	c7 45 bc fe ff bf ef 	movl   $0xefbffffe,-0x44(%ebp)
		tptr[1] = *ptr1 ;
f0113b39:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113b3c:	8a 00                	mov    (%eax),%al
f0113b3e:	88 85 55 ff ff ff    	mov    %al,-0xab(%ebp)
		tptr[2] = *ptr2 ;
f0113b44:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113b47:	8a 00                	mov    (%eax),%al
f0113b49:	88 85 56 ff ff ff    	mov    %al,-0xaa(%ebp)
		uint32 old_perms = GP(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE) ;
f0113b4f:	83 ec 08             	sub    $0x8,%esp
f0113b52:	68 00 f0 bf ef       	push   $0xefbff000
f0113b57:	ff 75 d0             	pushl  -0x30(%ebp)
f0113b5a:	e8 b3 1f 00 00       	call   f0115b12 <GP>
f0113b5f:	83 c4 10             	add    $0x10,%esp
f0113b62:	89 45 b8             	mov    %eax,-0x48(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113b65:	e8 f1 8d ff ff       	call   f010c95b <sys_calculate_free_frames>
f0113b6a:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE, 4*kilo, PERM_WRITEABLE) ;
f0113b6d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113b70:	c1 e0 02             	shl    $0x2,%eax
f0113b73:	6a 02                	push   $0x2
f0113b75:	50                   	push   %eax
f0113b76:	68 00 f0 bf ef       	push   $0xefbff000
f0113b7b:	ff 75 d0             	pushl  -0x30(%ebp)
f0113b7e:	e8 12 4f ff ff       	call   f0108a95 <allocate_chunk>
f0113b83:	83 c4 10             	add    $0x10,%esp
f0113b86:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113b89:	e8 cd 8d ff ff       	call   f010c95b <sys_calculate_free_frames>
f0113b8e:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0113b91:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0113b95:	75 08                	jne    f0113b9f <test_allocate_chunk+0x110>
f0113b97:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113b9a:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0113b9d:	74 2a                	je     f0113bc9 <test_allocate_chunk+0x13a>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0113b9f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113ba2:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113ba5:	83 ec 08             	sub    $0x8,%esp
f0113ba8:	6a 00                	push   $0x0
f0113baa:	50                   	push   %eax
f0113bab:	ff 75 b0             	pushl  -0x50(%ebp)
f0113bae:	68 c0 9e 13 f0       	push   $0xf0139ec0
f0113bb3:	68 c3 04 00 00       	push   $0x4c3
f0113bb8:	68 be 85 13 f0       	push   $0xf01385be
f0113bbd:	e8 c5 c7 fe ff       	call   f0100387 <_warn>
f0113bc2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113bc5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113bc9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113bcd:	74 04                	je     f0113bd3 <test_allocate_chunk+0x144>
f0113bcf:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113bd3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113bd7:	e8 7f 8d ff ff       	call   f010c95b <sys_calculate_free_frames>
f0113bdc:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 5*kilo, 2*kilo, PERM_WRITEABLE) ;
f0113bdf:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113be2:	01 c0                	add    %eax,%eax
f0113be4:	89 c1                	mov    %eax,%ecx
f0113be6:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113be9:	89 d0                	mov    %edx,%eax
f0113beb:	c1 e0 02             	shl    $0x2,%eax
f0113bee:	01 d0                	add    %edx,%eax
f0113bf0:	f7 d8                	neg    %eax
f0113bf2:	2d 00 00 40 10       	sub    $0x10400000,%eax
f0113bf7:	6a 02                	push   $0x2
f0113bf9:	51                   	push   %ecx
f0113bfa:	50                   	push   %eax
f0113bfb:	ff 75 d0             	pushl  -0x30(%ebp)
f0113bfe:	e8 92 4e ff ff       	call   f0108a95 <allocate_chunk>
f0113c03:	83 c4 10             	add    $0x10,%esp
f0113c06:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113c09:	e8 4d 8d ff ff       	call   f010c95b <sys_calculate_free_frames>
f0113c0e:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0113c11:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0113c15:	75 08                	jne    f0113c1f <test_allocate_chunk+0x190>
f0113c17:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113c1a:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0113c1d:	74 2a                	je     f0113c49 <test_allocate_chunk+0x1ba>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0113c1f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113c22:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113c25:	83 ec 08             	sub    $0x8,%esp
f0113c28:	6a 00                	push   $0x0
f0113c2a:	50                   	push   %eax
f0113c2b:	ff 75 b0             	pushl  -0x50(%ebp)
f0113c2e:	68 c0 9e 13 f0       	push   $0xf0139ec0
f0113c33:	68 d1 04 00 00       	push   $0x4d1
f0113c38:	68 be 85 13 f0       	push   $0xf01385be
f0113c3d:	e8 45 c7 fe ff       	call   f0100387 <_warn>
f0113c42:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113c45:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113c49:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113c4d:	74 04                	je     f0113c53 <test_allocate_chunk+0x1c4>
f0113c4f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113c53:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0, KERNEL_STACK_TOP-1*PAGE_SIZE, 4*kilo, 1, old_perms, 0xFFF, 0, 0, CHK_ALLOC) == 0)
f0113c57:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113c5a:	c1 e0 02             	shl    $0x2,%eax
f0113c5d:	83 ec 08             	sub    $0x8,%esp
f0113c60:	6a 03                	push   $0x3
f0113c62:	6a 00                	push   $0x0
f0113c64:	6a 00                	push   $0x0
f0113c66:	68 ff 0f 00 00       	push   $0xfff
f0113c6b:	ff 75 b8             	pushl  -0x48(%ebp)
f0113c6e:	6a 01                	push   $0x1
f0113c70:	50                   	push   %eax
f0113c71:	68 00 f0 bf ef       	push   $0xefbff000
f0113c76:	6a 00                	push   $0x0
f0113c78:	ff 75 d0             	pushl  -0x30(%ebp)
f0113c7b:	e8 e5 1e 00 00       	call   f0115b65 <CCP>
f0113c80:	83 c4 30             	add    $0x30,%esp
f0113c83:	85 c0                	test   %eax,%eax
f0113c85:	75 1e                	jne    f0113ca5 <test_allocate_chunk+0x216>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0113c87:	83 ec 04             	sub    $0x4,%esp
f0113c8a:	68 28 9f 13 f0       	push   $0xf0139f28
f0113c8f:	68 d9 04 00 00       	push   $0x4d9
f0113c94:	68 be 85 13 f0       	push   $0xf01385be
f0113c99:	e8 e9 c6 fe ff       	call   f0100387 <_warn>
f0113c9e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113ca1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113ca5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113ca9:	74 04                	je     f0113caf <test_allocate_chunk+0x220>
f0113cab:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113caf:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if ((*ptr1) != tptr[1] || (*ptr2) != tptr[2])
f0113cb3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113cb6:	8a 10                	mov    (%eax),%dl
f0113cb8:	8a 85 55 ff ff ff    	mov    -0xab(%ebp),%al
f0113cbe:	38 c2                	cmp    %al,%dl
f0113cc0:	75 0f                	jne    f0113cd1 <test_allocate_chunk+0x242>
f0113cc2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113cc5:	8a 10                	mov    (%eax),%dl
f0113cc7:	8a 85 56 ff ff ff    	mov    -0xaa(%ebp),%al
f0113ccd:	38 c2                	cmp    %al,%dl
f0113ccf:	74 1e                	je     f0113cef <test_allocate_chunk+0x260>
		{
			warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0113cd1:	83 ec 04             	sub    $0x4,%esp
f0113cd4:	68 74 9f 13 f0       	push   $0xf0139f74
f0113cd9:	68 e1 04 00 00       	push   $0x4e1
f0113cde:	68 be 85 13 f0       	push   $0xf01385be
f0113ce3:	e8 9f c6 fe ff       	call   f0100387 <_warn>
f0113ce8:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113ceb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113cef:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113cf3:	74 04                	je     f0113cf9 <test_allocate_chunk+0x26a>
f0113cf5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113cf9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0113cfd:	83 ec 0c             	sub    $0xc,%esp
f0113d00:	68 09 9d 13 f0       	push   $0xf0139d09
f0113d05:	e8 78 cf fe ff       	call   f0100c82 <cprintf>
f0113d0a:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART II: Destination page(s) not exist [Supervisor r/w] 20% */
	/*============================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor r/w] [20%]\n") ;
f0113d0d:	83 ec 0c             	sub    $0xc,%esp
f0113d10:	68 ac 9f 13 f0       	push   $0xf0139fac
f0113d15:	e8 68 cf fe ff       	call   f0100c82 <cprintf>
f0113d1a:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113d1d:	e8 39 8c ff ff       	call   f010c95b <sys_calculate_free_frames>
f0113d22:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0113d25:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113d28:	c1 e0 05             	shl    $0x5,%eax
f0113d2b:	68 02 0e 00 00       	push   $0xe02
f0113d30:	50                   	push   %eax
f0113d31:	6a 00                	push   $0x0
f0113d33:	ff 75 d0             	pushl  -0x30(%ebp)
f0113d36:	e8 5a 4d ff ff       	call   f0108a95 <allocate_chunk>
f0113d3b:	83 c4 10             	add    $0x10,%esp
f0113d3e:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113d41:	e8 15 8c ff ff       	call   f010c95b <sys_calculate_free_frames>
f0113d46:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((32*mega)/(4*mega) + (32*mega)/(4*kilo)))
f0113d49:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0113d4d:	75 36                	jne    f0113d85 <test_allocate_chunk+0x2f6>
f0113d4f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113d52:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113d55:	89 c1                	mov    %eax,%ecx
f0113d57:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113d5a:	c1 e0 05             	shl    $0x5,%eax
f0113d5d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113d60:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113d67:	99                   	cltd   
f0113d68:	f7 fe                	idiv   %esi
f0113d6a:	89 c3                	mov    %eax,%ebx
f0113d6c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113d6f:	c1 e0 05             	shl    $0x5,%eax
f0113d72:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113d75:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113d7c:	99                   	cltd   
f0113d7d:	f7 fe                	idiv   %esi
f0113d7f:	01 d8                	add    %ebx,%eax
f0113d81:	39 c1                	cmp    %eax,%ecx
f0113d83:	74 54                	je     f0113dd9 <test_allocate_chunk+0x34a>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((32*mega)/(4*mega) + (32*mega)/(4*kilo)));
f0113d85:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113d88:	c1 e0 05             	shl    $0x5,%eax
f0113d8b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113d8e:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0113d95:	99                   	cltd   
f0113d96:	f7 ff                	idiv   %edi
f0113d98:	89 c1                	mov    %eax,%ecx
f0113d9a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113d9d:	c1 e0 05             	shl    $0x5,%eax
f0113da0:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113da3:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113daa:	99                   	cltd   
f0113dab:	f7 fe                	idiv   %esi
f0113dad:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0113db0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113db3:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113db6:	83 ec 08             	sub    $0x8,%esp
f0113db9:	52                   	push   %edx
f0113dba:	50                   	push   %eax
f0113dbb:	ff 75 a8             	pushl  -0x58(%ebp)
f0113dbe:	68 ec 9f 13 f0       	push   $0xf0139fec
f0113dc3:	68 f6 04 00 00       	push   $0x4f6
f0113dc8:	68 be 85 13 f0       	push   $0xf01385be
f0113dcd:	e8 b5 c5 fe ff       	call   f0100387 <_warn>
f0113dd2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113dd5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113dd9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113ddd:	74 04                	je     f0113de3 <test_allocate_chunk+0x354>
f0113ddf:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113de3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113de7:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0, 0x0, 32*mega, 1, 0xE03, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0113dee:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113df1:	c1 e0 05             	shl    $0x5,%eax
f0113df4:	83 ec 08             	sub    $0x8,%esp
f0113df7:	6a 03                	push   $0x3
f0113df9:	6a 00                	push   $0x0
f0113dfb:	6a 00                	push   $0x0
f0113dfd:	68 07 0e 00 00       	push   $0xe07
f0113e02:	68 03 0e 00 00       	push   $0xe03
f0113e07:	6a 01                	push   $0x1
f0113e09:	50                   	push   %eax
f0113e0a:	6a 00                	push   $0x0
f0113e0c:	6a 00                	push   $0x0
f0113e0e:	ff 75 d0             	pushl  -0x30(%ebp)
f0113e11:	e8 4f 1d 00 00       	call   f0115b65 <CCP>
f0113e16:	83 c4 30             	add    $0x30,%esp
f0113e19:	85 c0                	test   %eax,%eax
f0113e1b:	75 25                	jne    f0113e42 <test_allocate_chunk+0x3b3>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0113e1d:	83 ec 04             	sub    $0x4,%esp
f0113e20:	68 28 9f 13 f0       	push   $0xf0139f28
f0113e25:	68 ff 04 00 00       	push   $0x4ff
f0113e2a:	68 be 85 13 f0       	push   $0xf01385be
f0113e2f:	e8 53 c5 fe ff       	call   f0100387 <_warn>
f0113e34:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113e37:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113e3b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f0113e42:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113e46:	74 04                	je     f0113e4c <test_allocate_chunk+0x3bd>
f0113e48:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113e4c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0113e50:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113e54:	74 5a                	je     f0113eb0 <test_allocate_chunk+0x421>
		{
			ptr1 = (char*)(0x0+2*kilo); *ptr1 = 'K' ;
f0113e56:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113e59:	01 c0                	add    %eax,%eax
f0113e5b:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0113e5e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113e61:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(0x0+2*mega); *ptr2 = 'M' ;
f0113e64:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113e67:	01 c0                	add    %eax,%eax
f0113e69:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0113e6c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113e6f:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0113e72:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113e75:	8a 00                	mov    (%eax),%al
f0113e77:	3c 4b                	cmp    $0x4b,%al
f0113e79:	75 09                	jne    f0113e84 <test_allocate_chunk+0x3f5>
f0113e7b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113e7e:	8a 00                	mov    (%eax),%al
f0113e80:	3c 4d                	cmp    $0x4d,%al
f0113e82:	74 1e                	je     f0113ea2 <test_allocate_chunk+0x413>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0113e84:	83 ec 04             	sub    $0x4,%esp
f0113e87:	68 74 9f 13 f0       	push   $0xf0139f74
f0113e8c:	68 0d 05 00 00       	push   $0x50d
f0113e91:	68 be 85 13 f0       	push   $0xf01385be
f0113e96:	e8 ec c4 fe ff       	call   f0100387 <_warn>
f0113e9b:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113e9e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113ea2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113ea6:	74 04                	je     f0113eac <test_allocate_chunk+0x41d>
f0113ea8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113eac:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0113eb0:	83 ec 0c             	sub    $0xc,%esp
f0113eb3:	68 e3 92 13 f0       	push   $0xf01392e3
f0113eb8:	e8 c5 cd fe ff       	call   f0100c82 <cprintf>
f0113ebd:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART III: Destination page(s) not exist [Supervisor r] 15%  */
	/*============================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [Supervisor r] [15%]\n") ;
f0113ec0:	83 ec 0c             	sub    $0xc,%esp
f0113ec3:	68 4c a0 13 f0       	push   $0xf013a04c
f0113ec8:	e8 b5 cd fe ff       	call   f0100c82 <cprintf>
f0113ecd:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113ed0:	e8 86 8a ff ff       	call   f010c95b <sys_calculate_free_frames>
f0113ed5:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0+32*mega, 64*mega, 0) ;
f0113ed8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113edb:	c1 e0 06             	shl    $0x6,%eax
f0113ede:	89 c2                	mov    %eax,%edx
f0113ee0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113ee3:	c1 e0 05             	shl    $0x5,%eax
f0113ee6:	6a 00                	push   $0x0
f0113ee8:	52                   	push   %edx
f0113ee9:	50                   	push   %eax
f0113eea:	ff 75 d0             	pushl  -0x30(%ebp)
f0113eed:	e8 a3 4b ff ff       	call   f0108a95 <allocate_chunk>
f0113ef2:	83 c4 10             	add    $0x10,%esp
f0113ef5:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113ef8:	e8 5e 8a ff ff       	call   f010c95b <sys_calculate_free_frames>
f0113efd:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*mega) + (64*mega)/(4*kilo)))
f0113f00:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
f0113f04:	75 36                	jne    f0113f3c <test_allocate_chunk+0x4ad>
f0113f06:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113f09:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113f0c:	89 c1                	mov    %eax,%ecx
f0113f0e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113f11:	c1 e0 06             	shl    $0x6,%eax
f0113f14:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113f17:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0113f1e:	99                   	cltd   
f0113f1f:	f7 ff                	idiv   %edi
f0113f21:	89 c3                	mov    %eax,%ebx
f0113f23:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113f26:	c1 e0 06             	shl    $0x6,%eax
f0113f29:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113f2c:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113f33:	99                   	cltd   
f0113f34:	f7 fe                	idiv   %esi
f0113f36:	01 d8                	add    %ebx,%eax
f0113f38:	39 c1                	cmp    %eax,%ecx
f0113f3a:	74 54                	je     f0113f90 <test_allocate_chunk+0x501>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*mega) + (64*mega)/(4*kilo)));
f0113f3c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113f3f:	c1 e0 06             	shl    $0x6,%eax
f0113f42:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113f45:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113f4c:	99                   	cltd   
f0113f4d:	f7 fb                	idiv   %ebx
f0113f4f:	89 c1                	mov    %eax,%ecx
f0113f51:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113f54:	c1 e0 06             	shl    $0x6,%eax
f0113f57:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113f5a:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0113f61:	99                   	cltd   
f0113f62:	f7 ff                	idiv   %edi
f0113f64:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0113f67:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113f6a:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113f6d:	83 ec 08             	sub    $0x8,%esp
f0113f70:	52                   	push   %edx
f0113f71:	50                   	push   %eax
f0113f72:	ff 75 a4             	pushl  -0x5c(%ebp)
f0113f75:	68 ec 9f 13 f0       	push   $0xf0139fec
f0113f7a:	68 23 05 00 00       	push   $0x523
f0113f7f:	68 be 85 13 f0       	push   $0xf01385be
f0113f84:	e8 fe c3 fe ff       	call   f0100387 <_warn>
f0113f89:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113f8c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113f90:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113f94:	74 04                	je     f0113f9a <test_allocate_chunk+0x50b>
f0113f96:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113f9a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113f9e:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
		if (CCP(proc_directory, 0, 0x0+32*mega, 64*mega, 1, 0x001, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0113fa5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113fa8:	c1 e0 06             	shl    $0x6,%eax
f0113fab:	89 c2                	mov    %eax,%edx
f0113fad:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113fb0:	c1 e0 05             	shl    $0x5,%eax
f0113fb3:	83 ec 08             	sub    $0x8,%esp
f0113fb6:	6a 03                	push   $0x3
f0113fb8:	6a 00                	push   $0x0
f0113fba:	6a 00                	push   $0x0
f0113fbc:	68 07 0e 00 00       	push   $0xe07
f0113fc1:	6a 01                	push   $0x1
f0113fc3:	6a 01                	push   $0x1
f0113fc5:	52                   	push   %edx
f0113fc6:	50                   	push   %eax
f0113fc7:	6a 00                	push   $0x0
f0113fc9:	ff 75 d0             	pushl  -0x30(%ebp)
f0113fcc:	e8 94 1b 00 00       	call   f0115b65 <CCP>
f0113fd1:	83 c4 30             	add    $0x30,%esp
f0113fd4:	85 c0                	test   %eax,%eax
f0113fd6:	75 25                	jne    f0113ffd <test_allocate_chunk+0x56e>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0113fd8:	83 ec 04             	sub    $0x4,%esp
f0113fdb:	68 28 9f 13 f0       	push   $0xf0139f28
f0113fe0:	68 2c 05 00 00       	push   $0x52c
f0113fe5:	68 be 85 13 f0       	push   $0xf01385be
f0113fea:	e8 98 c3 fe ff       	call   f0100387 <_warn>
f0113fef:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113ff2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113ff6:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		}
		if (correct) eval += 10 ;
f0113ffd:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114001:	74 04                	je     f0114007 <test_allocate_chunk+0x578>
f0114003:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114007:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE III: END\n") ;
f011400b:	83 ec 0c             	sub    $0xc,%esp
f011400e:	68 46 93 13 f0       	push   $0xf0139346
f0114013:	e8 6a cc fe ff       	call   f0100c82 <cprintf>
f0114018:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r/w] 20%  */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r/w] [20%]\n") ;
f011401b:	83 ec 0c             	sub    $0xc,%esp
f011401e:	68 8c a0 13 f0       	push   $0xf013a08c
f0114023:	e8 5a cc fe ff       	call   f0100c82 <cprintf>
f0114028:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011402b:	e8 2b 89 ff ff       	call   f010c95b <sys_calculate_free_frames>
f0114030:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, USER_HEAP_START, 64*mega, PERM_WRITEABLE|PERM_USER|PERM_AVAILABLE) ;
f0114033:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114036:	c1 e0 06             	shl    $0x6,%eax
f0114039:	68 06 0e 00 00       	push   $0xe06
f011403e:	50                   	push   %eax
f011403f:	68 00 00 00 80       	push   $0x80000000
f0114044:	ff 75 d0             	pushl  -0x30(%ebp)
f0114047:	e8 49 4a ff ff       	call   f0108a95 <allocate_chunk>
f011404c:	83 c4 10             	add    $0x10,%esp
f011404f:	89 45 9c             	mov    %eax,-0x64(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114052:	e8 04 89 ff ff       	call   f010c95b <sys_calculate_free_frames>
f0114057:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*kilo)+(64*mega)/(4*mega)))
f011405a:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f011405e:	75 36                	jne    f0114096 <test_allocate_chunk+0x607>
f0114060:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114063:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114066:	89 c1                	mov    %eax,%ecx
f0114068:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011406b:	c1 e0 06             	shl    $0x6,%eax
f011406e:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114071:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114078:	99                   	cltd   
f0114079:	f7 fb                	idiv   %ebx
f011407b:	89 c3                	mov    %eax,%ebx
f011407d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114080:	c1 e0 06             	shl    $0x6,%eax
f0114083:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114086:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011408d:	99                   	cltd   
f011408e:	f7 fe                	idiv   %esi
f0114090:	01 d8                	add    %ebx,%eax
f0114092:	39 c1                	cmp    %eax,%ecx
f0114094:	74 54                	je     f01140ea <test_allocate_chunk+0x65b>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*kilo)+(64*mega)/(4*mega)));
f0114096:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114099:	c1 e0 06             	shl    $0x6,%eax
f011409c:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011409f:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f01140a6:	99                   	cltd   
f01140a7:	f7 ff                	idiv   %edi
f01140a9:	89 c1                	mov    %eax,%ecx
f01140ab:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01140ae:	c1 e0 06             	shl    $0x6,%eax
f01140b1:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01140b4:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01140bb:	99                   	cltd   
f01140bc:	f7 fb                	idiv   %ebx
f01140be:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01140c1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01140c4:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01140c7:	83 ec 08             	sub    $0x8,%esp
f01140ca:	52                   	push   %edx
f01140cb:	50                   	push   %eax
f01140cc:	ff 75 9c             	pushl  -0x64(%ebp)
f01140cf:	68 ec 9f 13 f0       	push   $0xf0139fec
f01140d4:	68 42 05 00 00       	push   $0x542
f01140d9:	68 be 85 13 f0       	push   $0xf01385be
f01140de:	e8 a4 c2 fe ff       	call   f0100387 <_warn>
f01140e3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01140e6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01140ea:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01140ee:	74 04                	je     f01140f4 <test_allocate_chunk+0x665>
f01140f0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01140f4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01140f8:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0, USER_HEAP_START, 64*mega, 1, 0xE07, 0xE07, 0, 0, CHK_ALLOC) == 0)
f01140ff:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114102:	c1 e0 06             	shl    $0x6,%eax
f0114105:	83 ec 08             	sub    $0x8,%esp
f0114108:	6a 03                	push   $0x3
f011410a:	6a 00                	push   $0x0
f011410c:	6a 00                	push   $0x0
f011410e:	68 07 0e 00 00       	push   $0xe07
f0114113:	68 07 0e 00 00       	push   $0xe07
f0114118:	6a 01                	push   $0x1
f011411a:	50                   	push   %eax
f011411b:	68 00 00 00 80       	push   $0x80000000
f0114120:	6a 00                	push   $0x0
f0114122:	ff 75 d0             	pushl  -0x30(%ebp)
f0114125:	e8 3b 1a 00 00       	call   f0115b65 <CCP>
f011412a:	83 c4 30             	add    $0x30,%esp
f011412d:	85 c0                	test   %eax,%eax
f011412f:	75 25                	jne    f0114156 <test_allocate_chunk+0x6c7>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114131:	83 ec 04             	sub    $0x4,%esp
f0114134:	68 28 9f 13 f0       	push   $0xf0139f28
f0114139:	68 4b 05 00 00       	push   $0x54b
f011413e:	68 be 85 13 f0       	push   $0xf01385be
f0114143:	e8 3f c2 fe ff       	call   f0100387 <_warn>
f0114148:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011414b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f011414f:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}
		if (correct) eval += 10 ;
f0114156:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011415a:	74 04                	je     f0114160 <test_allocate_chunk+0x6d1>
f011415c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114160:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114164:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0114168:	74 6f                	je     f01141d9 <test_allocate_chunk+0x74a>
		{
			ptr1 = (char*)(USER_HEAP_START+2*kilo); *ptr1 = 'K' ;
f011416a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011416d:	01 c0                	add    %eax,%eax
f011416f:	05 00 00 00 80       	add    $0x80000000,%eax
f0114174:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114177:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011417a:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(USER_HEAP_START+22*mega);*ptr2 = 'M' ;
f011417d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114180:	89 d0                	mov    %edx,%eax
f0114182:	c1 e0 02             	shl    $0x2,%eax
f0114185:	01 d0                	add    %edx,%eax
f0114187:	01 c0                	add    %eax,%eax
f0114189:	01 d0                	add    %edx,%eax
f011418b:	01 c0                	add    %eax,%eax
f011418d:	05 00 00 00 80       	add    $0x80000000,%eax
f0114192:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0114195:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114198:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f011419b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011419e:	8a 00                	mov    (%eax),%al
f01141a0:	3c 4b                	cmp    $0x4b,%al
f01141a2:	75 09                	jne    f01141ad <test_allocate_chunk+0x71e>
f01141a4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01141a7:	8a 00                	mov    (%eax),%al
f01141a9:	3c 4d                	cmp    $0x4d,%al
f01141ab:	74 1e                	je     f01141cb <test_allocate_chunk+0x73c>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f01141ad:	83 ec 04             	sub    $0x4,%esp
f01141b0:	68 74 9f 13 f0       	push   $0xf0139f74
f01141b5:	68 59 05 00 00       	push   $0x559
f01141ba:	68 be 85 13 f0       	push   $0xf01385be
f01141bf:	e8 c3 c1 fe ff       	call   f0100387 <_warn>
f01141c4:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01141c7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01141cb:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01141cf:	74 04                	je     f01141d5 <test_allocate_chunk+0x746>
f01141d1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01141d5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		}
	}
	cprintf("\nCASE IV: END\n") ;
f01141d9:	83 ec 0c             	sub    $0xc,%esp
f01141dc:	68 18 9e 13 f0       	push   $0xf0139e18
f01141e1:	e8 9c ca fe ff       	call   f0100c82 <cprintf>
f01141e6:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART V: Destination page(s) not exist [User r] 15%     */
	/*========================================================*/
	cprintf("\nCASE V: Destination page(s) not exist [User r] [15%]\n") ;
f01141e9:	83 ec 0c             	sub    $0xc,%esp
f01141ec:	68 c8 a0 13 f0       	push   $0xf013a0c8
f01141f1:	e8 8c ca fe ff       	call   f0100c82 <cprintf>
f01141f6:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01141f9:	e8 5d 87 ff ff       	call   f010c95b <sys_calculate_free_frames>
f01141fe:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory,0x403FFC00, 7*kilo, PERM_USER|PERM_AVAILABLE) ;
f0114201:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114204:	89 d0                	mov    %edx,%eax
f0114206:	01 c0                	add    %eax,%eax
f0114208:	01 d0                	add    %edx,%eax
f011420a:	01 c0                	add    %eax,%eax
f011420c:	01 d0                	add    %edx,%eax
f011420e:	68 04 0e 00 00       	push   $0xe04
f0114213:	50                   	push   %eax
f0114214:	68 00 fc 3f 40       	push   $0x403ffc00
f0114219:	ff 75 d0             	pushl  -0x30(%ebp)
f011421c:	e8 74 48 ff ff       	call   f0108a95 <allocate_chunk>
f0114221:	83 c4 10             	add    $0x10,%esp
f0114224:	89 45 98             	mov    %eax,-0x68(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114227:	e8 2f 87 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011422c:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (3+2))
f011422f:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0114233:	75 0b                	jne    f0114240 <test_allocate_chunk+0x7b1>
f0114235:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114238:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011423b:	83 f8 05             	cmp    $0x5,%eax
f011423e:	74 2a                	je     f011426a <test_allocate_chunk+0x7db>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, (3+2));
f0114240:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114243:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114246:	83 ec 08             	sub    $0x8,%esp
f0114249:	6a 05                	push   $0x5
f011424b:	50                   	push   %eax
f011424c:	ff 75 98             	pushl  -0x68(%ebp)
f011424f:	68 ec 9f 13 f0       	push   $0xf0139fec
f0114254:	68 70 05 00 00       	push   $0x570
f0114259:	68 be 85 13 f0       	push   $0xf01385be
f011425e:	e8 24 c1 fe ff       	call   f0100387 <_warn>
f0114263:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114266:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011426a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011426e:	74 04                	je     f0114274 <test_allocate_chunk+0x7e5>
f0114270:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114274:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114278:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
		if (CCP(proc_directory, 0, 0x403FF000, 12*kilo, 1, 0xE05, 0xE07, 0, 0, CHK_ALLOC) == 0)
f011427f:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114282:	89 d0                	mov    %edx,%eax
f0114284:	01 c0                	add    %eax,%eax
f0114286:	01 d0                	add    %edx,%eax
f0114288:	c1 e0 02             	shl    $0x2,%eax
f011428b:	83 ec 08             	sub    $0x8,%esp
f011428e:	6a 03                	push   $0x3
f0114290:	6a 00                	push   $0x0
f0114292:	6a 00                	push   $0x0
f0114294:	68 07 0e 00 00       	push   $0xe07
f0114299:	68 05 0e 00 00       	push   $0xe05
f011429e:	6a 01                	push   $0x1
f01142a0:	50                   	push   %eax
f01142a1:	68 00 f0 3f 40       	push   $0x403ff000
f01142a6:	6a 00                	push   $0x0
f01142a8:	ff 75 d0             	pushl  -0x30(%ebp)
f01142ab:	e8 b5 18 00 00       	call   f0115b65 <CCP>
f01142b0:	83 c4 30             	add    $0x30,%esp
f01142b3:	85 c0                	test   %eax,%eax
f01142b5:	75 25                	jne    f01142dc <test_allocate_chunk+0x84d>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f01142b7:	83 ec 04             	sub    $0x4,%esp
f01142ba:	68 28 9f 13 f0       	push   $0xf0139f28
f01142bf:	68 79 05 00 00       	push   $0x579
f01142c4:	68 be 85 13 f0       	push   $0xf01385be
f01142c9:	e8 b9 c0 fe ff       	call   f0100387 <_warn>
f01142ce:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01142d1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01142d5:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
		}
		if (correct) eval += 5 ;
f01142dc:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01142e0:	74 04                	je     f01142e6 <test_allocate_chunk+0x857>
f01142e2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01142e6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

	}
	cprintf("\nCASE V: END\n") ;
f01142ea:	83 ec 0c             	sub    $0xc,%esp
f01142ed:	68 ff a0 13 f0       	push   $0xf013a0ff
f01142f2:	e8 8b c9 fe ff       	call   f0100c82 <cprintf>
f01142f7:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] allocate_chunk: FINISHED. Evaluation = %d\n", eval);
f01142fa:	83 ec 08             	sub    $0x8,%esp
f01142fd:	ff 75 e4             	pushl  -0x1c(%ebp)
f0114300:	68 10 a1 13 f0       	push   $0xf013a110
f0114305:	e8 78 c9 fe ff       	call   f0100c82 <cprintf>
f011430a:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f011430d:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0114311:	75 10                	jne    f0114323 <test_allocate_chunk+0x894>
		cprintf("Congratulations!! test allocate_chunk completed successfully.\n");
f0114313:	83 ec 0c             	sub    $0xc,%esp
f0114316:	68 44 a1 13 f0       	push   $0xf013a144
f011431b:	e8 62 c9 fe ff       	call   f0100c82 <cprintf>
f0114320:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0114323:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f0114328:	89 45 cc             	mov    %eax,-0x34(%ebp)
f011432b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011432e:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0114331:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0114336:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114339:	5b                   	pop    %ebx
f011433a:	5e                   	pop    %esi
f011433b:	5f                   	pop    %edi
f011433c:	5d                   	pop    %ebp
f011433d:	c3                   	ret    

f011433e <test_calculate_required_frames>:

//======================================
// 5) [+]TEST CALCULATE REQUIRED FRAMES:
//======================================
int test_calculate_required_frames()
{
f011433e:	55                   	push   %ebp
f011433f:	89 e5                	mov    %esp,%ebp
f0114341:	57                   	push   %edi
f0114342:	56                   	push   %esi
f0114343:	53                   	push   %ebx
f0114344:	81 ec fc 01 00 00    	sub    $0x1fc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f011434a:	8d 45 8e             	lea    -0x72(%ebp),%eax
f011434d:	bb 58 90 13 f0       	mov    $0xf0139058,%ebx
f0114352:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114357:	89 c7                	mov    %eax,%edi
f0114359:	89 de                	mov    %ebx,%esi
f011435b:	89 d1                	mov    %edx,%ecx
f011435d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011435f:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0114362:	b9 23 00 00 00       	mov    $0x23,%ecx
f0114367:	b0 00                	mov    $0x0,%al
f0114369:	89 d7                	mov    %edx,%edi
f011436b:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011436d:	6a 00                	push   $0x0
f011436f:	6a 0a                	push   $0xa
f0114371:	6a 14                	push   $0x14
f0114373:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0114376:	50                   	push   %eax
f0114377:	e8 7f 49 ff ff       	call   f0108cfb <env_create>
f011437c:	83 c4 10             	add    $0x10,%esp
f011437f:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0114382:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114385:	8b 40 5c             	mov    0x5c(%eax),%eax
f0114388:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f011438b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011438e:	8b 40 60             	mov    0x60(%eax),%eax
f0114391:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114394:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114397:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f011439a:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f01143a1:	75 70 20 
f01143a4:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f01143ab:	00 00 00 
f01143ae:	8d 55 82             	lea    -0x7e(%ebp),%edx
f01143b1:	b9 03 00 00 00       	mov    $0x3,%ecx
f01143b6:	b8 00 00 00 00       	mov    $0x0,%eax
f01143bb:	89 d7                	mov    %edx,%edi
f01143bd:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f01143bf:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01143c2:	8b 40 4c             	mov    0x4c(%eax),%eax
f01143c5:	83 ec 08             	sub    $0x8,%esp
f01143c8:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f01143ce:	52                   	push   %edx
f01143cf:	50                   	push   %eax
f01143d0:	e8 5b cd 01 00       	call   f0131130 <ltostr>
f01143d5:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f01143d8:	83 ec 04             	sub    $0x4,%esp
f01143db:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01143e1:	50                   	push   %eax
f01143e2:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f01143e8:	50                   	push   %eax
f01143e9:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f01143ef:	50                   	push   %eax
f01143f0:	e8 33 ce 01 00       	call   f0131228 <strcconcat>
f01143f5:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f01143f8:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f01143ff:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0114406:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32 res =0;
f011440d:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint8 correct = 1;
f0114414:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;

	ClearUserSpace(proc_directory);
f0114418:	83 ec 0c             	sub    $0xc,%esp
f011441b:	ff 75 d8             	pushl  -0x28(%ebp)
f011441e:	e8 0e 17 00 00       	call   f0115b31 <ClearUserSpace>
f0114423:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0114426:	83 ec 0c             	sub    $0xc,%esp
f0114429:	68 84 a1 13 f0       	push   $0xf013a184
f011442e:	e8 4f c8 fe ff       	call   f0100c82 <cprintf>
f0114433:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0114436:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114439:	c1 e0 03             	shl    $0x3,%eax
f011443c:	83 ec 04             	sub    $0x4,%esp
f011443f:	50                   	push   %eax
f0114440:	6a 00                	push   $0x0
f0114442:	ff 75 d8             	pushl  -0x28(%ebp)
f0114445:	e8 8e 47 ff ff       	call   f0108bd8 <calculate_required_frames>
f011444a:	83 c4 10             	add    $0x10,%esp
f011444d:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0114450:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0114454:	74 23                	je     f0114479 <test_calculate_required_frames+0x13b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0114456:	83 ec 0c             	sub    $0xc,%esp
f0114459:	6a 03                	push   $0x3
f011445b:	ff 75 c8             	pushl  -0x38(%ebp)
f011445e:	68 b8 a1 13 f0       	push   $0xf013a1b8
f0114463:	68 b2 05 00 00       	push   $0x5b2
f0114468:	68 be 85 13 f0       	push   $0xf01385be
f011446d:	e8 15 bf fe ff       	call   f0100387 <_warn>
f0114472:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114475:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114479:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011447d:	74 04                	je     f0114483 <test_calculate_required_frames+0x145>
f011447f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114483:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 4*mega);
f0114487:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011448a:	c1 e0 02             	shl    $0x2,%eax
f011448d:	83 ec 04             	sub    $0x4,%esp
f0114490:	50                   	push   %eax
f0114491:	6a 00                	push   $0x0
f0114493:	ff 75 d8             	pushl  -0x28(%ebp)
f0114496:	e8 3d 47 ff ff       	call   f0108bd8 <calculate_required_frames>
f011449b:	83 c4 10             	add    $0x10,%esp
f011449e:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 1025)
f01144a1:	81 7d c8 01 04 00 00 	cmpl   $0x401,-0x38(%ebp)
f01144a8:	74 26                	je     f01144d0 <test_calculate_required_frames+0x192>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 1025);
f01144aa:	83 ec 0c             	sub    $0xc,%esp
f01144ad:	68 01 04 00 00       	push   $0x401
f01144b2:	ff 75 c8             	pushl  -0x38(%ebp)
f01144b5:	68 b8 a1 13 f0       	push   $0xf013a1b8
f01144ba:	68 bc 05 00 00       	push   $0x5bc
f01144bf:	68 be 85 13 f0       	push   $0xf01385be
f01144c4:	e8 be be fe ff       	call   f0100387 <_warn>
f01144c9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01144cc:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01144d0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01144d4:	74 04                	je     f01144da <test_calculate_required_frames+0x19c>
f01144d6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01144da:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f01144de:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01144e1:	c1 e0 0a             	shl    $0xa,%eax
f01144e4:	83 ec 04             	sub    $0x4,%esp
f01144e7:	50                   	push   %eax
f01144e8:	6a 00                	push   $0x0
f01144ea:	ff 75 d8             	pushl  -0x28(%ebp)
f01144ed:	e8 e6 46 ff ff       	call   f0108bd8 <calculate_required_frames>
f01144f2:	83 c4 10             	add    $0x10,%esp
f01144f5:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)))
f01144f8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01144fb:	c1 e0 0a             	shl    $0xa,%eax
f01144fe:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114501:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114508:	99                   	cltd   
f0114509:	f7 fb                	idiv   %ebx
f011450b:	89 c1                	mov    %eax,%ecx
f011450d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114510:	c1 e0 0a             	shl    $0xa,%eax
f0114513:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114516:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011451d:	99                   	cltd   
f011451e:	f7 fe                	idiv   %esi
f0114520:	01 c8                	add    %ecx,%eax
f0114522:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114525:	74 4c                	je     f0114573 <test_calculate_required_frames+0x235>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)));
f0114527:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011452a:	c1 e0 0a             	shl    $0xa,%eax
f011452d:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114530:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114537:	99                   	cltd   
f0114538:	f7 fb                	idiv   %ebx
f011453a:	89 c1                	mov    %eax,%ecx
f011453c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011453f:	c1 e0 0a             	shl    $0xa,%eax
f0114542:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114545:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011454c:	99                   	cltd   
f011454d:	f7 fe                	idiv   %esi
f011454f:	01 c8                	add    %ecx,%eax
f0114551:	83 ec 0c             	sub    $0xc,%esp
f0114554:	50                   	push   %eax
f0114555:	ff 75 c8             	pushl  -0x38(%ebp)
f0114558:	68 b8 a1 13 f0       	push   $0xf013a1b8
f011455d:	68 c6 05 00 00       	push   $0x5c6
f0114562:	68 be 85 13 f0       	push   $0xf01385be
f0114567:	e8 1b be fe ff       	call   f0100387 <_warn>
f011456c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011456f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114573:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114577:	74 04                	je     f011457d <test_calculate_required_frames+0x23f>
f0114579:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011457d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test4
		res = calculate_required_frames(proc_directory, 0x1000, 6*kilo);
f0114581:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114584:	89 d0                	mov    %edx,%eax
f0114586:	01 c0                	add    %eax,%eax
f0114588:	01 d0                	add    %edx,%eax
f011458a:	01 c0                	add    %eax,%eax
f011458c:	83 ec 04             	sub    $0x4,%esp
f011458f:	50                   	push   %eax
f0114590:	68 00 10 00 00       	push   $0x1000
f0114595:	ff 75 d8             	pushl  -0x28(%ebp)
f0114598:	e8 3b 46 ff ff       	call   f0108bd8 <calculate_required_frames>
f011459d:	83 c4 10             	add    $0x10,%esp
f01145a0:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f01145a3:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f01145a7:	74 23                	je     f01145cc <test_calculate_required_frames+0x28e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f01145a9:	83 ec 0c             	sub    $0xc,%esp
f01145ac:	6a 03                	push   $0x3
f01145ae:	ff 75 c8             	pushl  -0x38(%ebp)
f01145b1:	68 b8 a1 13 f0       	push   $0xf013a1b8
f01145b6:	68 d2 05 00 00       	push   $0x5d2
f01145bb:	68 be 85 13 f0       	push   $0xf01385be
f01145c0:	e8 c2 bd fe ff       	call   f0100387 <_warn>
f01145c5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01145c8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01145cc:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01145d0:	74 04                	je     f01145d6 <test_calculate_required_frames+0x298>
f01145d2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01145d6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f01145da:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01145dd:	89 c2                	mov    %eax,%edx
f01145df:	01 d2                	add    %edx,%edx
f01145e1:	01 d0                	add    %edx,%eax
f01145e3:	83 ec 04             	sub    $0x4,%esp
f01145e6:	50                   	push   %eax
f01145e7:	68 00 18 00 00       	push   $0x1800
f01145ec:	ff 75 d8             	pushl  -0x28(%ebp)
f01145ef:	e8 e4 45 ff ff       	call   f0108bd8 <calculate_required_frames>
f01145f4:	83 c4 10             	add    $0x10,%esp
f01145f7:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f01145fa:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f01145fe:	74 23                	je     f0114623 <test_calculate_required_frames+0x2e5>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0114600:	83 ec 0c             	sub    $0xc,%esp
f0114603:	6a 03                	push   $0x3
f0114605:	ff 75 c8             	pushl  -0x38(%ebp)
f0114608:	68 b8 a1 13 f0       	push   $0xf013a1b8
f011460d:	68 dc 05 00 00       	push   $0x5dc
f0114612:	68 be 85 13 f0       	push   $0xf01385be
f0114617:	e8 6b bd fe ff       	call   f0100387 <_warn>
f011461c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011461f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114623:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114627:	74 04                	je     f011462d <test_calculate_required_frames+0x2ef>
f0114629:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011462d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0114631:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114634:	89 d0                	mov    %edx,%eax
f0114636:	c1 e0 02             	shl    $0x2,%eax
f0114639:	01 d0                	add    %edx,%eax
f011463b:	01 c0                	add    %eax,%eax
f011463d:	83 ec 04             	sub    $0x4,%esp
f0114640:	50                   	push   %eax
f0114641:	68 00 00 40 00       	push   $0x400000
f0114646:	ff 75 d8             	pushl  -0x28(%ebp)
f0114649:	e8 8a 45 ff ff       	call   f0108bd8 <calculate_required_frames>
f011464e:	83 c4 10             	add    $0x10,%esp
f0114651:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2563)
f0114654:	81 7d c8 03 0a 00 00 	cmpl   $0xa03,-0x38(%ebp)
f011465b:	74 26                	je     f0114683 <test_calculate_required_frames+0x345>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f011465d:	83 ec 0c             	sub    $0xc,%esp
f0114660:	68 03 0a 00 00       	push   $0xa03
f0114665:	ff 75 c8             	pushl  -0x38(%ebp)
f0114668:	68 b8 a1 13 f0       	push   $0xf013a1b8
f011466d:	68 e6 05 00 00       	push   $0x5e6
f0114672:	68 be 85 13 f0       	push   $0xf01385be
f0114677:	e8 0b bd fe ff       	call   f0100387 <_warn>
f011467c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011467f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114683:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114687:	74 04                	je     f011468d <test_calculate_required_frames+0x34f>
f0114689:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011468d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0114691:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114694:	01 c0                	add    %eax,%eax
f0114696:	83 ec 04             	sub    $0x4,%esp
f0114699:	50                   	push   %eax
f011469a:	68 00 00 70 00       	push   $0x700000
f011469f:	ff 75 d8             	pushl  -0x28(%ebp)
f01146a2:	e8 31 45 ff ff       	call   f0108bd8 <calculate_required_frames>
f01146a7:	83 c4 10             	add    $0x10,%esp
f01146aa:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 514)
f01146ad:	81 7d c8 02 02 00 00 	cmpl   $0x202,-0x38(%ebp)
f01146b4:	74 26                	je     f01146dc <test_calculate_required_frames+0x39e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 514);
f01146b6:	83 ec 0c             	sub    $0xc,%esp
f01146b9:	68 02 02 00 00       	push   $0x202
f01146be:	ff 75 c8             	pushl  -0x38(%ebp)
f01146c1:	68 b8 a1 13 f0       	push   $0xf013a1b8
f01146c6:	68 f2 05 00 00       	push   $0x5f2
f01146cb:	68 be 85 13 f0       	push   $0xf01385be
f01146d0:	e8 b2 bc fe ff       	call   f0100387 <_warn>
f01146d5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01146d8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01146dc:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01146e0:	74 04                	je     f01146e6 <test_calculate_required_frames+0x3a8>
f01146e2:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01146e6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f01146ea:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01146ed:	83 ec 04             	sub    $0x4,%esp
f01146f0:	50                   	push   %eax
f01146f1:	68 ff ff 3f 00       	push   $0x3fffff
f01146f6:	ff 75 d8             	pushl  -0x28(%ebp)
f01146f9:	e8 da 44 ff ff       	call   f0108bd8 <calculate_required_frames>
f01146fe:	83 c4 10             	add    $0x10,%esp
f0114701:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 4)
f0114704:	83 7d c8 04          	cmpl   $0x4,-0x38(%ebp)
f0114708:	74 23                	je     f011472d <test_calculate_required_frames+0x3ef>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 4);
f011470a:	83 ec 0c             	sub    $0xc,%esp
f011470d:	6a 04                	push   $0x4
f011470f:	ff 75 c8             	pushl  -0x38(%ebp)
f0114712:	68 b8 a1 13 f0       	push   $0xf013a1b8
f0114717:	68 fc 05 00 00       	push   $0x5fc
f011471c:	68 be 85 13 f0       	push   $0xf01385be
f0114721:	e8 61 bc fe ff       	call   f0100387 <_warn>
f0114726:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114729:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011472d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114731:	74 04                	je     f0114737 <test_calculate_required_frames+0x3f9>
f0114733:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114737:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f011473b:	83 ec 0c             	sub    $0xc,%esp
f011473e:	68 09 9d 13 f0       	push   $0xf0139d09
f0114743:	e8 3a c5 fe ff       	call   f0100c82 <cprintf>
f0114748:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f011474b:	83 ec 0c             	sub    $0xc,%esp
f011474e:	68 10 a2 13 f0       	push   $0xf013a210
f0114753:	e8 2a c5 fe ff       	call   f0100c82 <cprintf>
f0114758:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f011475b:	83 ec 04             	sub    $0x4,%esp
f011475e:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f0114764:	50                   	push   %eax
f0114765:	68 c2 90 13 f0       	push   $0xf01390c2
f011476a:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114770:	50                   	push   %eax
f0114771:	e8 b2 ca 01 00       	call   f0131228 <strcconcat>
f0114776:	83 c4 10             	add    $0x10,%esp
f0114779:	83 ec 0c             	sub    $0xc,%esp
f011477c:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f0114782:	50                   	push   %eax
f0114783:	e8 5c c5 fe ff       	call   f0100ce4 <execute_command>
f0114788:	83 c4 10             	add    $0x10,%esp

		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f011478b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011478e:	c1 e0 03             	shl    $0x3,%eax
f0114791:	83 ec 04             	sub    $0x4,%esp
f0114794:	50                   	push   %eax
f0114795:	6a 00                	push   $0x0
f0114797:	ff 75 d8             	pushl  -0x28(%ebp)
f011479a:	e8 39 44 ff ff       	call   f0108bd8 <calculate_required_frames>
f011479f:	83 c4 10             	add    $0x10,%esp
f01147a2:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f01147a5:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f01147ac:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01147af:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01147b2:	74 24                	je     f01147d8 <test_calculate_required_frames+0x49a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01147b4:	83 ec 0c             	sub    $0xc,%esp
f01147b7:	ff 75 c4             	pushl  -0x3c(%ebp)
f01147ba:	ff 75 c8             	pushl  -0x38(%ebp)
f01147bd:	68 b8 a1 13 f0       	push   $0xf013a1b8
f01147c2:	68 10 06 00 00       	push   $0x610
f01147c7:	68 be 85 13 f0       	push   $0xf01385be
f01147cc:	e8 b6 bb fe ff       	call   f0100387 <_warn>
f01147d1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01147d4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01147d8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01147dc:	74 04                	je     f01147e2 <test_calculate_required_frames+0x4a4>
f01147de:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01147e2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f01147e6:	83 ec 04             	sub    $0x4,%esp
f01147e9:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01147ef:	50                   	push   %eax
f01147f0:	68 cf 90 13 f0       	push   $0xf01390cf
f01147f5:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01147fb:	50                   	push   %eax
f01147fc:	e8 27 ca 01 00       	call   f0131228 <strcconcat>
f0114801:	83 c4 10             	add    $0x10,%esp
f0114804:	83 ec 0c             	sub    $0xc,%esp
f0114807:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011480d:	50                   	push   %eax
f011480e:	e8 d1 c4 fe ff       	call   f0100ce4 <execute_command>
f0114813:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0114816:	83 ec 04             	sub    $0x4,%esp
f0114819:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011481f:	50                   	push   %eax
f0114820:	68 44 a2 13 f0       	push   $0xf013a244
f0114825:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011482b:	50                   	push   %eax
f011482c:	e8 f7 c9 01 00       	call   f0131228 <strcconcat>
f0114831:	83 c4 10             	add    $0x10,%esp
f0114834:	83 ec 0c             	sub    $0xc,%esp
f0114837:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011483d:	50                   	push   %eax
f011483e:	e8 a1 c4 fe ff       	call   f0100ce4 <execute_command>
f0114843:	83 c4 10             	add    $0x10,%esp

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 8*mega);
f0114846:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114849:	c1 e0 03             	shl    $0x3,%eax
f011484c:	83 ec 04             	sub    $0x4,%esp
f011484f:	50                   	push   %eax
f0114850:	6a 00                	push   $0x0
f0114852:	ff 75 d8             	pushl  -0x28(%ebp)
f0114855:	e8 7e 43 ff ff       	call   f0108bd8 <calculate_required_frames>
f011485a:	83 c4 10             	add    $0x10,%esp
f011485d:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 2047;
f0114860:	c7 45 c4 ff 07 00 00 	movl   $0x7ff,-0x3c(%ebp)
		if (res != expected)
f0114867:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011486a:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011486d:	74 24                	je     f0114893 <test_calculate_required_frames+0x555>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f011486f:	83 ec 0c             	sub    $0xc,%esp
f0114872:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114875:	ff 75 c8             	pushl  -0x38(%ebp)
f0114878:	68 b8 a1 13 f0       	push   $0xf013a1b8
f011487d:	68 1e 06 00 00       	push   $0x61e
f0114882:	68 be 85 13 f0       	push   $0xf01385be
f0114887:	e8 fb ba fe ff       	call   f0100387 <_warn>
f011488c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011488f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114893:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114897:	74 04                	je     f011489d <test_calculate_required_frames+0x55f>
f0114899:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011489d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f01148a1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01148a4:	c1 e0 0a             	shl    $0xa,%eax
f01148a7:	83 ec 04             	sub    $0x4,%esp
f01148aa:	50                   	push   %eax
f01148ab:	6a 00                	push   $0x0
f01148ad:	ff 75 d8             	pushl  -0x28(%ebp)
f01148b0:	e8 23 43 ff ff       	call   f0108bd8 <calculate_required_frames>
f01148b5:	83 c4 10             	add    $0x10,%esp
f01148b8:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)) - 2 - 1 - 2;
f01148bb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01148be:	c1 e0 0a             	shl    $0xa,%eax
f01148c1:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01148c4:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01148cb:	99                   	cltd   
f01148cc:	f7 fb                	idiv   %ebx
f01148ce:	89 c1                	mov    %eax,%ecx
f01148d0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01148d3:	c1 e0 0a             	shl    $0xa,%eax
f01148d6:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01148d9:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01148e0:	99                   	cltd   
f01148e1:	f7 fe                	idiv   %esi
f01148e3:	01 c8                	add    %ecx,%eax
f01148e5:	83 e8 05             	sub    $0x5,%eax
f01148e8:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (res != expected)
f01148eb:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01148ee:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01148f1:	74 24                	je     f0114917 <test_calculate_required_frames+0x5d9>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01148f3:	83 ec 0c             	sub    $0xc,%esp
f01148f6:	ff 75 c4             	pushl  -0x3c(%ebp)
f01148f9:	ff 75 c8             	pushl  -0x38(%ebp)
f01148fc:	68 b8 a1 13 f0       	push   $0xf013a1b8
f0114901:	68 29 06 00 00       	push   $0x629
f0114906:	68 be 85 13 f0       	push   $0xf01385be
f011490b:	e8 77 ba fe ff       	call   f0100387 <_warn>
f0114910:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114913:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114917:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011491b:	74 04                	je     f0114921 <test_calculate_required_frames+0x5e3>
f011491d:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114921:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0114925:	83 ec 04             	sub    $0x4,%esp
f0114928:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011492e:	50                   	push   %eax
f011492f:	68 50 a2 13 f0       	push   $0xf013a250
f0114934:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011493a:	50                   	push   %eax
f011493b:	e8 e8 c8 01 00       	call   f0131228 <strcconcat>
f0114940:	83 c4 10             	add    $0x10,%esp
f0114943:	83 ec 0c             	sub    $0xc,%esp
f0114946:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011494c:	50                   	push   %eax
f011494d:	e8 92 c3 fe ff       	call   f0100ce4 <execute_command>
f0114952:	83 c4 10             	add    $0x10,%esp

		//Test4
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0114955:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114958:	89 c2                	mov    %eax,%edx
f011495a:	01 d2                	add    %edx,%edx
f011495c:	01 d0                	add    %edx,%eax
f011495e:	83 ec 04             	sub    $0x4,%esp
f0114961:	50                   	push   %eax
f0114962:	68 00 18 00 00       	push   $0x1800
f0114967:	ff 75 d8             	pushl  -0x28(%ebp)
f011496a:	e8 69 42 ff ff       	call   f0108bd8 <calculate_required_frames>
f011496f:	83 c4 10             	add    $0x10,%esp
f0114972:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0114975:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f011497c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011497f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114982:	74 24                	je     f01149a8 <test_calculate_required_frames+0x66a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114984:	83 ec 0c             	sub    $0xc,%esp
f0114987:	ff 75 c4             	pushl  -0x3c(%ebp)
f011498a:	ff 75 c8             	pushl  -0x38(%ebp)
f011498d:	68 b8 a1 13 f0       	push   $0xf013a1b8
f0114992:	68 38 06 00 00       	push   $0x638
f0114997:	68 be 85 13 f0       	push   $0xf01385be
f011499c:	e8 e6 b9 fe ff       	call   f0100387 <_warn>
f01149a1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01149a4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01149a8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01149ac:	74 04                	je     f01149b2 <test_calculate_required_frames+0x674>
f01149ae:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01149b2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f01149b6:	83 ec 04             	sub    $0x4,%esp
f01149b9:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01149bf:	50                   	push   %eax
f01149c0:	68 28 93 13 f0       	push   $0xf0139328
f01149c5:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01149cb:	50                   	push   %eax
f01149cc:	e8 57 c8 01 00       	call   f0131228 <strcconcat>
f01149d1:	83 c4 10             	add    $0x10,%esp
f01149d4:	83 ec 0c             	sub    $0xc,%esp
f01149d7:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01149dd:	50                   	push   %eax
f01149de:	e8 01 c3 fe ff       	call   f0100ce4 <execute_command>
f01149e3:	83 c4 10             	add    $0x10,%esp

		//Test5
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f01149e6:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01149e9:	89 d0                	mov    %edx,%eax
f01149eb:	c1 e0 02             	shl    $0x2,%eax
f01149ee:	01 d0                	add    %edx,%eax
f01149f0:	01 c0                	add    %eax,%eax
f01149f2:	83 ec 04             	sub    $0x4,%esp
f01149f5:	50                   	push   %eax
f01149f6:	68 00 00 40 00       	push   $0x400000
f01149fb:	ff 75 d8             	pushl  -0x28(%ebp)
f01149fe:	e8 d5 41 ff ff       	call   f0108bd8 <calculate_required_frames>
f0114a03:	83 c4 10             	add    $0x10,%esp
f0114a06:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2561)
f0114a09:	81 7d c8 01 0a 00 00 	cmpl   $0xa01,-0x38(%ebp)
f0114a10:	74 26                	je     f0114a38 <test_calculate_required_frames+0x6fa>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0114a12:	83 ec 0c             	sub    $0xc,%esp
f0114a15:	68 03 0a 00 00       	push   $0xa03
f0114a1a:	ff 75 c8             	pushl  -0x38(%ebp)
f0114a1d:	68 b8 a1 13 f0       	push   $0xf013a1b8
f0114a22:	68 44 06 00 00       	push   $0x644
f0114a27:	68 be 85 13 f0       	push   $0xf01385be
f0114a2c:	e8 56 b9 fe ff       	call   f0100387 <_warn>
f0114a31:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114a34:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114a38:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114a3c:	74 04                	je     f0114a42 <test_calculate_required_frames+0x704>
f0114a3e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114a42:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0114a46:	83 ec 04             	sub    $0x4,%esp
f0114a49:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0114a4f:	50                   	push   %eax
f0114a50:	68 32 93 13 f0       	push   $0xf0139332
f0114a55:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114a5b:	50                   	push   %eax
f0114a5c:	e8 c7 c7 01 00       	call   f0131228 <strcconcat>
f0114a61:	83 c4 10             	add    $0x10,%esp
f0114a64:	83 ec 0c             	sub    $0xc,%esp
f0114a67:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0114a6d:	50                   	push   %eax
f0114a6e:	e8 71 c2 fe ff       	call   f0100ce4 <execute_command>
f0114a73:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0114a76:	83 ec 04             	sub    $0x4,%esp
f0114a79:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114a7f:	50                   	push   %eax
f0114a80:	68 58 a2 13 f0       	push   $0xf013a258
f0114a85:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114a8b:	50                   	push   %eax
f0114a8c:	e8 97 c7 01 00       	call   f0131228 <strcconcat>
f0114a91:	83 c4 10             	add    $0x10,%esp
f0114a94:	83 ec 0c             	sub    $0xc,%esp
f0114a97:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114a9d:	50                   	push   %eax
f0114a9e:	e8 41 c2 fe ff       	call   f0100ce4 <execute_command>
f0114aa3:	83 c4 10             	add    $0x10,%esp

		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0114aa6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114aa9:	01 c0                	add    %eax,%eax
f0114aab:	83 ec 04             	sub    $0x4,%esp
f0114aae:	50                   	push   %eax
f0114aaf:	68 00 00 70 00       	push   $0x700000
f0114ab4:	ff 75 d8             	pushl  -0x28(%ebp)
f0114ab7:	e8 1c 41 ff ff       	call   f0108bd8 <calculate_required_frames>
f0114abc:	83 c4 10             	add    $0x10,%esp
f0114abf:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 510 ;
f0114ac2:	c7 45 c4 fe 01 00 00 	movl   $0x1fe,-0x3c(%ebp)
		if (res != expected)
f0114ac9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114acc:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114acf:	74 24                	je     f0114af5 <test_calculate_required_frames+0x7b7>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114ad1:	83 ec 0c             	sub    $0xc,%esp
f0114ad4:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114ad7:	ff 75 c8             	pushl  -0x38(%ebp)
f0114ada:	68 b8 a1 13 f0       	push   $0xf013a1b8
f0114adf:	68 54 06 00 00       	push   $0x654
f0114ae4:	68 be 85 13 f0       	push   $0xf01385be
f0114ae9:	e8 99 b8 fe ff       	call   f0100387 <_warn>
f0114aee:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114af1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114af5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114af9:	74 04                	je     f0114aff <test_calculate_required_frames+0x7c1>
f0114afb:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114aff:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0114b03:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114b06:	83 ec 04             	sub    $0x4,%esp
f0114b09:	50                   	push   %eax
f0114b0a:	68 ff ff 3f 00       	push   $0x3fffff
f0114b0f:	ff 75 d8             	pushl  -0x28(%ebp)
f0114b12:	e8 c1 40 ff ff       	call   f0108bd8 <calculate_required_frames>
f0114b17:	83 c4 10             	add    $0x10,%esp
f0114b1a:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 3 ;
f0114b1d:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (res != expected)
f0114b24:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114b27:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114b2a:	74 24                	je     f0114b50 <test_calculate_required_frames+0x812>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114b2c:	83 ec 0c             	sub    $0xc,%esp
f0114b2f:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114b32:	ff 75 c8             	pushl  -0x38(%ebp)
f0114b35:	68 b8 a1 13 f0       	push   $0xf013a1b8
f0114b3a:	68 5f 06 00 00       	push   $0x65f
f0114b3f:	68 be 85 13 f0       	push   $0xf01385be
f0114b44:	e8 3e b8 fe ff       	call   f0100387 <_warn>
f0114b49:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114b4c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114b50:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114b54:	74 04                	je     f0114b5a <test_calculate_required_frames+0x81c>
f0114b56:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114b5a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0114b5e:	83 ec 0c             	sub    $0xc,%esp
f0114b61:	68 e3 92 13 f0       	push   $0xf01392e3
f0114b66:	e8 17 c1 fe ff       	call   f0100c82 <cprintf>
f0114b6b:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_required_frames: FINISHED. Evaluation = %d\n", eval);
f0114b6e:	83 ec 08             	sub    $0x8,%esp
f0114b71:	ff 75 e4             	pushl  -0x1c(%ebp)
f0114b74:	68 64 a2 13 f0       	push   $0xf013a264
f0114b79:	e8 04 c1 fe ff       	call   f0100c82 <cprintf>
f0114b7e:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0114b81:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0114b85:	75 10                	jne    f0114b97 <test_calculate_required_frames+0x859>
		cprintf("Congratulations!! test calculate_required_frames completed successfully.\n");
f0114b87:	83 ec 0c             	sub    $0xc,%esp
f0114b8a:	68 a4 a2 13 f0       	push   $0xf013a2a4
f0114b8f:	e8 ee c0 fe ff       	call   f0100c82 <cprintf>
f0114b94:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0114b97:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f0114b9c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0114b9f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0114ba2:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0114ba5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0114baa:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114bad:	5b                   	pop    %ebx
f0114bae:	5e                   	pop    %esi
f0114baf:	5f                   	pop    %edi
f0114bb0:	5d                   	pop    %ebp
f0114bb1:	c3                   	ret    

f0114bb2 <test_calculate_allocated_space>:

int test_calculate_allocated_space()
{
f0114bb2:	55                   	push   %ebp
f0114bb3:	89 e5                	mov    %esp,%ebp
f0114bb5:	57                   	push   %edi
f0114bb6:	56                   	push   %esi
f0114bb7:	53                   	push   %ebx
f0114bb8:	81 ec 0c 02 00 00    	sub    $0x20c,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0114bbe:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0114bc1:	bb 58 90 13 f0       	mov    $0xf0139058,%ebx
f0114bc6:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114bcb:	89 c7                	mov    %eax,%edi
f0114bcd:	89 de                	mov    %ebx,%esi
f0114bcf:	89 d1                	mov    %edx,%ecx
f0114bd1:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114bd3:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0114bd6:	b9 23 00 00 00       	mov    $0x23,%ecx
f0114bdb:	b0 00                	mov    $0x0,%al
f0114bdd:	89 d7                	mov    %edx,%edi
f0114bdf:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0114be1:	6a 00                	push   $0x0
f0114be3:	6a 0a                	push   $0xa
f0114be5:	6a 14                	push   $0x14
f0114be7:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0114bea:	50                   	push   %eax
f0114beb:	e8 0b 41 ff ff       	call   f0108cfb <env_create>
f0114bf0:	83 c4 10             	add    $0x10,%esp
f0114bf3:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0114bf6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114bf9:	8b 40 5c             	mov    0x5c(%eax),%eax
f0114bfc:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0114bff:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114c02:	8b 40 60             	mov    0x60(%eax),%eax
f0114c05:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114c08:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114c0b:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0114c0e:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0114c15:	75 70 20 
f0114c18:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0114c1f:	00 00 00 
f0114c22:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0114c25:	b9 03 00 00 00       	mov    $0x3,%ecx
f0114c2a:	b8 00 00 00 00       	mov    $0x0,%eax
f0114c2f:	89 d7                	mov    %edx,%edi
f0114c31:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0114c33:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114c36:	8b 40 4c             	mov    0x4c(%eax),%eax
f0114c39:	83 ec 08             	sub    $0x8,%esp
f0114c3c:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0114c42:	52                   	push   %edx
f0114c43:	50                   	push   %eax
f0114c44:	e8 e7 c4 01 00       	call   f0131130 <ltostr>
f0114c49:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0114c4c:	83 ec 04             	sub    $0x4,%esp
f0114c4f:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114c55:	50                   	push   %eax
f0114c56:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0114c5c:	50                   	push   %eax
f0114c5d:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0114c63:	50                   	push   %eax
f0114c64:	e8 bf c5 01 00       	call   f0131228 <strcconcat>
f0114c69:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0114c6c:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0114c73:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0114c7a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct = 1;
f0114c81:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected_num_pages;
	uint32 expected_num_tables;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;
	uint32 num_pages = 0;
f0114c85:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114c8c:	00 00 00 
	uint32 num_tables = 0;
f0114c8f:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114c96:	00 00 00 
	ClearUserSpace(proc_directory);
f0114c99:	83 ec 0c             	sub    $0xc,%esp
f0114c9c:	ff 75 d8             	pushl  -0x28(%ebp)
f0114c9f:	e8 8d 0e 00 00       	call   f0115b31 <ClearUserSpace>
f0114ca4:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0114ca7:	83 ec 0c             	sub    $0xc,%esp
f0114caa:	68 84 a1 13 f0       	push   $0xf013a184
f0114caf:	e8 ce bf fe ff       	call   f0100c82 <cprintf>
f0114cb4:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0114cb7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114cba:	c1 e0 03             	shl    $0x3,%eax
f0114cbd:	89 c2                	mov    %eax,%edx
f0114cbf:	83 ec 0c             	sub    $0xc,%esp
f0114cc2:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114cc8:	50                   	push   %eax
f0114cc9:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114ccf:	50                   	push   %eax
f0114cd0:	52                   	push   %edx
f0114cd1:	6a 00                	push   $0x0
f0114cd3:	ff 75 d8             	pushl  -0x28(%ebp)
f0114cd6:	e8 e0 3e ff ff       	call   f0108bbb <calculate_allocated_space>
f0114cdb:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114cde:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114ce4:	85 c0                	test   %eax,%eax
f0114ce6:	74 27                	je     f0114d0f <test_calculate_allocated_space+0x15d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114ce8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114cee:	83 ec 0c             	sub    $0xc,%esp
f0114cf1:	6a 00                	push   $0x0
f0114cf3:	50                   	push   %eax
f0114cf4:	68 f0 a2 13 f0       	push   $0xf013a2f0
f0114cf9:	68 94 06 00 00       	push   $0x694
f0114cfe:	68 be 85 13 f0       	push   $0xf01385be
f0114d03:	e8 7f b6 fe ff       	call   f0100387 <_warn>
f0114d08:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114d0b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114d0f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114d15:	85 c0                	test   %eax,%eax
f0114d17:	74 27                	je     f0114d40 <test_calculate_allocated_space+0x18e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114d19:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114d1f:	83 ec 0c             	sub    $0xc,%esp
f0114d22:	6a 00                	push   $0x0
f0114d24:	50                   	push   %eax
f0114d25:	68 50 a3 13 f0       	push   $0xf013a350
f0114d2a:	68 99 06 00 00       	push   $0x699
f0114d2f:	68 be 85 13 f0       	push   $0xf01385be
f0114d34:	e8 4e b6 fe ff       	call   f0100387 <_warn>
f0114d39:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114d3c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114d40:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114d44:	74 04                	je     f0114d4a <test_calculate_allocated_space+0x198>
f0114d46:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114d4a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		num_tables = 0;
f0114d4e:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114d55:	00 00 00 
		num_pages = 0;
f0114d58:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114d5f:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+4*mega, &num_tables, &num_pages);
f0114d62:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114d65:	c1 e0 02             	shl    $0x2,%eax
f0114d68:	89 c2                	mov    %eax,%edx
f0114d6a:	83 ec 0c             	sub    $0xc,%esp
f0114d6d:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114d73:	50                   	push   %eax
f0114d74:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114d7a:	50                   	push   %eax
f0114d7b:	52                   	push   %edx
f0114d7c:	6a 00                	push   $0x0
f0114d7e:	ff 75 d8             	pushl  -0x28(%ebp)
f0114d81:	e8 35 3e ff ff       	call   f0108bbb <calculate_allocated_space>
f0114d86:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114d89:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114d8f:	85 c0                	test   %eax,%eax
f0114d91:	74 27                	je     f0114dba <test_calculate_allocated_space+0x208>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114d93:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114d99:	83 ec 0c             	sub    $0xc,%esp
f0114d9c:	6a 00                	push   $0x0
f0114d9e:	50                   	push   %eax
f0114d9f:	68 f0 a2 13 f0       	push   $0xf013a2f0
f0114da4:	68 a5 06 00 00       	push   $0x6a5
f0114da9:	68 be 85 13 f0       	push   $0xf01385be
f0114dae:	e8 d4 b5 fe ff       	call   f0100387 <_warn>
f0114db3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114db6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114dba:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114dc0:	85 c0                	test   %eax,%eax
f0114dc2:	74 27                	je     f0114deb <test_calculate_allocated_space+0x239>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114dc4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114dca:	83 ec 0c             	sub    $0xc,%esp
f0114dcd:	6a 00                	push   $0x0
f0114dcf:	50                   	push   %eax
f0114dd0:	68 50 a3 13 f0       	push   $0xf013a350
f0114dd5:	68 aa 06 00 00       	push   $0x6aa
f0114dda:	68 be 85 13 f0       	push   $0xf01385be
f0114ddf:	e8 a3 b5 fe ff       	call   f0100387 <_warn>
f0114de4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114de7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114deb:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114def:	74 04                	je     f0114df5 <test_calculate_allocated_space+0x243>
f0114df1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114df5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0114df9:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114e00:	00 00 00 
		num_pages = 0;
f0114e03:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114e0a:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0114e0d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114e10:	c1 e0 0a             	shl    $0xa,%eax
f0114e13:	89 c2                	mov    %eax,%edx
f0114e15:	83 ec 0c             	sub    $0xc,%esp
f0114e18:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114e1e:	50                   	push   %eax
f0114e1f:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114e25:	50                   	push   %eax
f0114e26:	52                   	push   %edx
f0114e27:	6a 00                	push   $0x0
f0114e29:	ff 75 d8             	pushl  -0x28(%ebp)
f0114e2c:	e8 8a 3d ff ff       	call   f0108bbb <calculate_allocated_space>
f0114e31:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114e34:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114e3a:	85 c0                	test   %eax,%eax
f0114e3c:	74 27                	je     f0114e65 <test_calculate_allocated_space+0x2b3>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114e3e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114e44:	83 ec 0c             	sub    $0xc,%esp
f0114e47:	6a 00                	push   $0x0
f0114e49:	50                   	push   %eax
f0114e4a:	68 f0 a2 13 f0       	push   $0xf013a2f0
f0114e4f:	68 b6 06 00 00       	push   $0x6b6
f0114e54:	68 be 85 13 f0       	push   $0xf01385be
f0114e59:	e8 29 b5 fe ff       	call   f0100387 <_warn>
f0114e5e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114e61:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114e65:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114e6b:	85 c0                	test   %eax,%eax
f0114e6d:	74 27                	je     f0114e96 <test_calculate_allocated_space+0x2e4>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114e6f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114e75:	83 ec 0c             	sub    $0xc,%esp
f0114e78:	6a 00                	push   $0x0
f0114e7a:	50                   	push   %eax
f0114e7b:	68 50 a3 13 f0       	push   $0xf013a350
f0114e80:	68 bb 06 00 00       	push   $0x6bb
f0114e85:	68 be 85 13 f0       	push   $0xf01385be
f0114e8a:	e8 f8 b4 fe ff       	call   f0100387 <_warn>
f0114e8f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114e92:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114e96:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114e9a:	74 04                	je     f0114ea0 <test_calculate_allocated_space+0x2ee>
f0114e9c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114ea0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test4
		num_tables = 0;
f0114ea4:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114eab:	00 00 00 
		num_pages = 0;
f0114eae:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114eb5:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1000, 0x1000+6*kilo, &num_tables, &num_pages);
f0114eb8:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114ebb:	89 d0                	mov    %edx,%eax
f0114ebd:	01 c0                	add    %eax,%eax
f0114ebf:	01 d0                	add    %edx,%eax
f0114ec1:	01 c0                	add    %eax,%eax
f0114ec3:	05 00 10 00 00       	add    $0x1000,%eax
f0114ec8:	89 c2                	mov    %eax,%edx
f0114eca:	83 ec 0c             	sub    $0xc,%esp
f0114ecd:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114ed3:	50                   	push   %eax
f0114ed4:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114eda:	50                   	push   %eax
f0114edb:	52                   	push   %edx
f0114edc:	68 00 10 00 00       	push   $0x1000
f0114ee1:	ff 75 d8             	pushl  -0x28(%ebp)
f0114ee4:	e8 d2 3c ff ff       	call   f0108bbb <calculate_allocated_space>
f0114ee9:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114eec:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114ef2:	85 c0                	test   %eax,%eax
f0114ef4:	74 27                	je     f0114f1d <test_calculate_allocated_space+0x36b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114ef6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114efc:	83 ec 0c             	sub    $0xc,%esp
f0114eff:	6a 00                	push   $0x0
f0114f01:	50                   	push   %eax
f0114f02:	68 f0 a2 13 f0       	push   $0xf013a2f0
f0114f07:	68 c8 06 00 00       	push   $0x6c8
f0114f0c:	68 be 85 13 f0       	push   $0xf01385be
f0114f11:	e8 71 b4 fe ff       	call   f0100387 <_warn>
f0114f16:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114f19:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114f1d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114f23:	85 c0                	test   %eax,%eax
f0114f25:	74 27                	je     f0114f4e <test_calculate_allocated_space+0x39c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114f27:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114f2d:	83 ec 0c             	sub    $0xc,%esp
f0114f30:	6a 00                	push   $0x0
f0114f32:	50                   	push   %eax
f0114f33:	68 50 a3 13 f0       	push   $0xf013a350
f0114f38:	68 cd 06 00 00       	push   $0x6cd
f0114f3d:	68 be 85 13 f0       	push   $0xf01385be
f0114f42:	e8 40 b4 fe ff       	call   f0100387 <_warn>
f0114f47:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114f4a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114f4e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114f52:	74 04                	je     f0114f58 <test_calculate_allocated_space+0x3a6>
f0114f54:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114f58:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		num_tables = 0;
f0114f5c:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114f63:	00 00 00 
		num_pages = 0;
f0114f66:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114f6d:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0114f70:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114f73:	89 c2                	mov    %eax,%edx
f0114f75:	01 d2                	add    %edx,%edx
f0114f77:	01 d0                	add    %edx,%eax
f0114f79:	05 00 18 00 00       	add    $0x1800,%eax
f0114f7e:	89 c2                	mov    %eax,%edx
f0114f80:	83 ec 0c             	sub    $0xc,%esp
f0114f83:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114f89:	50                   	push   %eax
f0114f8a:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114f90:	50                   	push   %eax
f0114f91:	52                   	push   %edx
f0114f92:	68 00 18 00 00       	push   $0x1800
f0114f97:	ff 75 d8             	pushl  -0x28(%ebp)
f0114f9a:	e8 1c 3c ff ff       	call   f0108bbb <calculate_allocated_space>
f0114f9f:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114fa2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114fa8:	85 c0                	test   %eax,%eax
f0114faa:	74 27                	je     f0114fd3 <test_calculate_allocated_space+0x421>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114fac:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114fb2:	83 ec 0c             	sub    $0xc,%esp
f0114fb5:	6a 00                	push   $0x0
f0114fb7:	50                   	push   %eax
f0114fb8:	68 f0 a2 13 f0       	push   $0xf013a2f0
f0114fbd:	68 d9 06 00 00       	push   $0x6d9
f0114fc2:	68 be 85 13 f0       	push   $0xf01385be
f0114fc7:	e8 bb b3 fe ff       	call   f0100387 <_warn>
f0114fcc:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114fcf:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114fd3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114fd9:	85 c0                	test   %eax,%eax
f0114fdb:	74 27                	je     f0115004 <test_calculate_allocated_space+0x452>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114fdd:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114fe3:	83 ec 0c             	sub    $0xc,%esp
f0114fe6:	6a 00                	push   $0x0
f0114fe8:	50                   	push   %eax
f0114fe9:	68 50 a3 13 f0       	push   $0xf013a350
f0114fee:	68 de 06 00 00       	push   $0x6de
f0114ff3:	68 be 85 13 f0       	push   $0xf01385be
f0114ff8:	e8 8a b3 fe ff       	call   f0100387 <_warn>
f0114ffd:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115000:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115004:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115008:	74 04                	je     f011500e <test_calculate_allocated_space+0x45c>
f011500a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011500e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		num_tables = 0;
f0115012:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115019:	00 00 00 
		num_pages = 0;
f011501c:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115023:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0115026:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115029:	89 d0                	mov    %edx,%eax
f011502b:	c1 e0 02             	shl    $0x2,%eax
f011502e:	01 d0                	add    %edx,%eax
f0115030:	01 c0                	add    %eax,%eax
f0115032:	05 00 00 40 00       	add    $0x400000,%eax
f0115037:	89 c2                	mov    %eax,%edx
f0115039:	83 ec 0c             	sub    $0xc,%esp
f011503c:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115042:	50                   	push   %eax
f0115043:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115049:	50                   	push   %eax
f011504a:	52                   	push   %edx
f011504b:	68 00 00 40 00       	push   $0x400000
f0115050:	ff 75 d8             	pushl  -0x28(%ebp)
f0115053:	e8 63 3b ff ff       	call   f0108bbb <calculate_allocated_space>
f0115058:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011505b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115061:	85 c0                	test   %eax,%eax
f0115063:	74 27                	je     f011508c <test_calculate_allocated_space+0x4da>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115065:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011506b:	83 ec 0c             	sub    $0xc,%esp
f011506e:	6a 00                	push   $0x0
f0115070:	50                   	push   %eax
f0115071:	68 f0 a2 13 f0       	push   $0xf013a2f0
f0115076:	68 ea 06 00 00       	push   $0x6ea
f011507b:	68 be 85 13 f0       	push   $0xf01385be
f0115080:	e8 02 b3 fe ff       	call   f0100387 <_warn>
f0115085:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115088:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f011508c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115092:	85 c0                	test   %eax,%eax
f0115094:	74 27                	je     f01150bd <test_calculate_allocated_space+0x50b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115096:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011509c:	83 ec 0c             	sub    $0xc,%esp
f011509f:	6a 00                	push   $0x0
f01150a1:	50                   	push   %eax
f01150a2:	68 50 a3 13 f0       	push   $0xf013a350
f01150a7:	68 ef 06 00 00       	push   $0x6ef
f01150ac:	68 be 85 13 f0       	push   $0xf01385be
f01150b1:	e8 d1 b2 fe ff       	call   f0100387 <_warn>
f01150b6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01150b9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01150bd:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01150c1:	74 04                	je     f01150c7 <test_calculate_allocated_space+0x515>
f01150c3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01150c7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test7
		num_tables = 0;
f01150cb:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01150d2:	00 00 00 
		num_pages = 0;
f01150d5:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01150dc:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f01150df:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01150e2:	05 00 00 38 00       	add    $0x380000,%eax
f01150e7:	01 c0                	add    %eax,%eax
f01150e9:	89 c2                	mov    %eax,%edx
f01150eb:	83 ec 0c             	sub    $0xc,%esp
f01150ee:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01150f4:	50                   	push   %eax
f01150f5:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01150fb:	50                   	push   %eax
f01150fc:	52                   	push   %edx
f01150fd:	68 00 00 70 00       	push   $0x700000
f0115102:	ff 75 d8             	pushl  -0x28(%ebp)
f0115105:	e8 b1 3a ff ff       	call   f0108bbb <calculate_allocated_space>
f011510a:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011510d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115113:	85 c0                	test   %eax,%eax
f0115115:	74 27                	je     f011513e <test_calculate_allocated_space+0x58c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115117:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011511d:	83 ec 0c             	sub    $0xc,%esp
f0115120:	6a 00                	push   $0x0
f0115122:	50                   	push   %eax
f0115123:	68 f0 a2 13 f0       	push   $0xf013a2f0
f0115128:	68 fc 06 00 00       	push   $0x6fc
f011512d:	68 be 85 13 f0       	push   $0xf01385be
f0115132:	e8 50 b2 fe ff       	call   f0100387 <_warn>
f0115137:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011513a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f011513e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115144:	85 c0                	test   %eax,%eax
f0115146:	74 27                	je     f011516f <test_calculate_allocated_space+0x5bd>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115148:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011514e:	83 ec 0c             	sub    $0xc,%esp
f0115151:	6a 00                	push   $0x0
f0115153:	50                   	push   %eax
f0115154:	68 50 a3 13 f0       	push   $0xf013a350
f0115159:	68 01 07 00 00       	push   $0x701
f011515e:	68 be 85 13 f0       	push   $0xf01385be
f0115163:	e8 1f b2 fe ff       	call   f0100387 <_warn>
f0115168:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011516b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011516f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115173:	74 04                	je     f0115179 <test_calculate_allocated_space+0x5c7>
f0115175:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115179:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		num_tables = 0;
f011517d:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115184:	00 00 00 
		num_pages = 0;
f0115187:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011518e:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0115191:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115194:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0115199:	89 c2                	mov    %eax,%edx
f011519b:	83 ec 0c             	sub    $0xc,%esp
f011519e:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01151a4:	50                   	push   %eax
f01151a5:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01151ab:	50                   	push   %eax
f01151ac:	52                   	push   %edx
f01151ad:	68 ff ff 3f 00       	push   $0x3fffff
f01151b2:	ff 75 d8             	pushl  -0x28(%ebp)
f01151b5:	e8 01 3a ff ff       	call   f0108bbb <calculate_allocated_space>
f01151ba:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01151bd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01151c3:	85 c0                	test   %eax,%eax
f01151c5:	74 27                	je     f01151ee <test_calculate_allocated_space+0x63c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01151c7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01151cd:	83 ec 0c             	sub    $0xc,%esp
f01151d0:	6a 00                	push   $0x0
f01151d2:	50                   	push   %eax
f01151d3:	68 f0 a2 13 f0       	push   $0xf013a2f0
f01151d8:	68 0d 07 00 00       	push   $0x70d
f01151dd:	68 be 85 13 f0       	push   $0xf01385be
f01151e2:	e8 a0 b1 fe ff       	call   f0100387 <_warn>
f01151e7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01151ea:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01151ee:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01151f4:	85 c0                	test   %eax,%eax
f01151f6:	74 27                	je     f011521f <test_calculate_allocated_space+0x66d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01151f8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01151fe:	83 ec 0c             	sub    $0xc,%esp
f0115201:	6a 00                	push   $0x0
f0115203:	50                   	push   %eax
f0115204:	68 50 a3 13 f0       	push   $0xf013a350
f0115209:	68 12 07 00 00       	push   $0x712
f011520e:	68 be 85 13 f0       	push   $0xf01385be
f0115213:	e8 6f b1 fe ff       	call   f0100387 <_warn>
f0115218:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011521b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011521f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115223:	74 04                	je     f0115229 <test_calculate_allocated_space+0x677>
f0115225:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115229:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f011522d:	83 ec 0c             	sub    $0xc,%esp
f0115230:	68 09 9d 13 f0       	push   $0xf0139d09
f0115235:	e8 48 ba fe ff       	call   f0100c82 <cprintf>
f011523a:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f011523d:	83 ec 0c             	sub    $0xc,%esp
f0115240:	68 10 a2 13 f0       	push   $0xf013a210
f0115245:	e8 38 ba fe ff       	call   f0100c82 <cprintf>
f011524a:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f011524d:	83 ec 04             	sub    $0x4,%esp
f0115250:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0115256:	50                   	push   %eax
f0115257:	68 c2 90 13 f0       	push   $0xf01390c2
f011525c:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115262:	50                   	push   %eax
f0115263:	e8 c0 bf 01 00       	call   f0131228 <strcconcat>
f0115268:	83 c4 10             	add    $0x10,%esp
f011526b:	83 ec 0c             	sub    $0xc,%esp
f011526e:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0115274:	50                   	push   %eax
f0115275:	e8 6a ba fe ff       	call   f0100ce4 <execute_command>
f011527a:	83 c4 10             	add    $0x10,%esp

		num_tables = 0;
f011527d:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115284:	00 00 00 
		num_pages = 0;
f0115287:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011528e:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0115291:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115294:	c1 e0 03             	shl    $0x3,%eax
f0115297:	89 c2                	mov    %eax,%edx
f0115299:	83 ec 0c             	sub    $0xc,%esp
f011529c:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01152a2:	50                   	push   %eax
f01152a3:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01152a9:	50                   	push   %eax
f01152aa:	52                   	push   %edx
f01152ab:	6a 00                	push   $0x0
f01152ad:	ff 75 d8             	pushl  -0x28(%ebp)
f01152b0:	e8 06 39 ff ff       	call   f0108bbb <calculate_allocated_space>
f01152b5:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f01152b8:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1 ;
f01152bf:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01152c6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01152cc:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01152cf:	74 28                	je     f01152f9 <test_calculate_allocated_space+0x747>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01152d1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01152d7:	83 ec 0c             	sub    $0xc,%esp
f01152da:	ff 75 c8             	pushl  -0x38(%ebp)
f01152dd:	50                   	push   %eax
f01152de:	68 f0 a2 13 f0       	push   $0xf013a2f0
f01152e3:	68 29 07 00 00       	push   $0x729
f01152e8:	68 be 85 13 f0       	push   $0xf01385be
f01152ed:	e8 95 b0 fe ff       	call   f0100387 <_warn>
f01152f2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01152f5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01152f9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01152ff:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115302:	74 28                	je     f011532c <test_calculate_allocated_space+0x77a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115304:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011530a:	83 ec 0c             	sub    $0xc,%esp
f011530d:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115310:	50                   	push   %eax
f0115311:	68 50 a3 13 f0       	push   $0xf013a350
f0115316:	68 2e 07 00 00       	push   $0x72e
f011531b:	68 be 85 13 f0       	push   $0xf01385be
f0115320:	e8 62 b0 fe ff       	call   f0100387 <_warn>
f0115325:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115328:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011532c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115330:	74 04                	je     f0115336 <test_calculate_allocated_space+0x784>
f0115332:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115336:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f011533a:	83 ec 04             	sub    $0x4,%esp
f011533d:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115343:	50                   	push   %eax
f0115344:	68 cf 90 13 f0       	push   $0xf01390cf
f0115349:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011534f:	50                   	push   %eax
f0115350:	e8 d3 be 01 00       	call   f0131228 <strcconcat>
f0115355:	83 c4 10             	add    $0x10,%esp
f0115358:	83 ec 0c             	sub    $0xc,%esp
f011535b:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115361:	50                   	push   %eax
f0115362:	e8 7d b9 fe ff       	call   f0100ce4 <execute_command>
f0115367:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f011536a:	83 ec 04             	sub    $0x4,%esp
f011536d:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115373:	50                   	push   %eax
f0115374:	68 44 a2 13 f0       	push   $0xf013a244
f0115379:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011537f:	50                   	push   %eax
f0115380:	e8 a3 be 01 00       	call   f0131228 <strcconcat>
f0115385:	83 c4 10             	add    $0x10,%esp
f0115388:	83 ec 0c             	sub    $0xc,%esp
f011538b:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115391:	50                   	push   %eax
f0115392:	e8 4d b9 fe ff       	call   f0100ce4 <execute_command>
f0115397:	83 c4 10             	add    $0x10,%esp

		//Test2
		num_tables = 0;
f011539a:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01153a1:	00 00 00 
		num_pages = 0;
f01153a4:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01153ab:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*mega, &num_tables, &num_pages);
f01153ae:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01153b1:	c1 e0 03             	shl    $0x3,%eax
f01153b4:	89 c2                	mov    %eax,%edx
f01153b6:	83 ec 0c             	sub    $0xc,%esp
f01153b9:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01153bf:	50                   	push   %eax
f01153c0:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01153c6:	50                   	push   %eax
f01153c7:	52                   	push   %edx
f01153c8:	6a 00                	push   $0x0
f01153ca:	ff 75 d8             	pushl  -0x28(%ebp)
f01153cd:	e8 e9 37 ff ff       	call   f0108bbb <calculate_allocated_space>
f01153d2:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f01153d5:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 2 ;
f01153dc:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01153e3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01153e9:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01153ec:	74 28                	je     f0115416 <test_calculate_allocated_space+0x864>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01153ee:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01153f4:	83 ec 0c             	sub    $0xc,%esp
f01153f7:	ff 75 c8             	pushl  -0x38(%ebp)
f01153fa:	50                   	push   %eax
f01153fb:	68 f0 a2 13 f0       	push   $0xf013a2f0
f0115400:	68 3f 07 00 00       	push   $0x73f
f0115405:	68 be 85 13 f0       	push   $0xf01385be
f011540a:	e8 78 af fe ff       	call   f0100387 <_warn>
f011540f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115412:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115416:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011541c:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011541f:	74 28                	je     f0115449 <test_calculate_allocated_space+0x897>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115421:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115427:	83 ec 0c             	sub    $0xc,%esp
f011542a:	ff 75 c4             	pushl  -0x3c(%ebp)
f011542d:	50                   	push   %eax
f011542e:	68 50 a3 13 f0       	push   $0xf013a350
f0115433:	68 44 07 00 00       	push   $0x744
f0115438:	68 be 85 13 f0       	push   $0xf01385be
f011543d:	e8 45 af fe ff       	call   f0100387 <_warn>
f0115442:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115445:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115449:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011544d:	74 04                	je     f0115453 <test_calculate_allocated_space+0x8a1>
f011544f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115453:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0115457:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011545e:	00 00 00 
		num_pages = 0;
f0115461:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115468:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f011546b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011546e:	c1 e0 0a             	shl    $0xa,%eax
f0115471:	89 c2                	mov    %eax,%edx
f0115473:	83 ec 0c             	sub    $0xc,%esp
f0115476:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011547c:	50                   	push   %eax
f011547d:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115483:	50                   	push   %eax
f0115484:	52                   	push   %edx
f0115485:	6a 00                	push   $0x0
f0115487:	ff 75 d8             	pushl  -0x28(%ebp)
f011548a:	e8 2c 37 ff ff       	call   f0108bbb <calculate_allocated_space>
f011548f:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 + 1;
f0115492:	c7 45 c8 02 00 00 00 	movl   $0x2,-0x38(%ebp)
		expected_num_pages = 1 + 1 + 1;
f0115499:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01154a0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01154a6:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01154a9:	74 28                	je     f01154d3 <test_calculate_allocated_space+0x921>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01154ab:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01154b1:	83 ec 0c             	sub    $0xc,%esp
f01154b4:	ff 75 c8             	pushl  -0x38(%ebp)
f01154b7:	50                   	push   %eax
f01154b8:	68 f0 a2 13 f0       	push   $0xf013a2f0
f01154bd:	68 52 07 00 00       	push   $0x752
f01154c2:	68 be 85 13 f0       	push   $0xf01385be
f01154c7:	e8 bb ae fe ff       	call   f0100387 <_warn>
f01154cc:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01154cf:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01154d3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01154d9:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01154dc:	74 28                	je     f0115506 <test_calculate_allocated_space+0x954>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01154de:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01154e4:	83 ec 0c             	sub    $0xc,%esp
f01154e7:	ff 75 c4             	pushl  -0x3c(%ebp)
f01154ea:	50                   	push   %eax
f01154eb:	68 50 a3 13 f0       	push   $0xf013a350
f01154f0:	68 57 07 00 00       	push   $0x757
f01154f5:	68 be 85 13 f0       	push   $0xf01385be
f01154fa:	e8 88 ae fe ff       	call   f0100387 <_warn>
f01154ff:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115502:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115506:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011550a:	74 04                	je     f0115510 <test_calculate_allocated_space+0x95e>
f011550c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115510:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0115514:	83 ec 04             	sub    $0x4,%esp
f0115517:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f011551d:	50                   	push   %eax
f011551e:	68 50 a2 13 f0       	push   $0xf013a250
f0115523:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115529:	50                   	push   %eax
f011552a:	e8 f9 bc 01 00       	call   f0131228 <strcconcat>
f011552f:	83 c4 10             	add    $0x10,%esp
f0115532:	83 ec 0c             	sub    $0xc,%esp
f0115535:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f011553b:	50                   	push   %eax
f011553c:	e8 a3 b7 fe ff       	call   f0100ce4 <execute_command>
f0115541:	83 c4 10             	add    $0x10,%esp

		//Test4
		num_tables = 0;
f0115544:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011554b:	00 00 00 
		num_pages = 0;
f011554e:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115555:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0115558:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011555b:	89 c2                	mov    %eax,%edx
f011555d:	01 d2                	add    %edx,%edx
f011555f:	01 d0                	add    %edx,%eax
f0115561:	05 00 18 00 00       	add    $0x1800,%eax
f0115566:	89 c2                	mov    %eax,%edx
f0115568:	83 ec 0c             	sub    $0xc,%esp
f011556b:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115571:	50                   	push   %eax
f0115572:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115578:	50                   	push   %eax
f0115579:	52                   	push   %edx
f011557a:	68 00 18 00 00       	push   $0x1800
f011557f:	ff 75 d8             	pushl  -0x28(%ebp)
f0115582:	e8 34 36 ff ff       	call   f0108bbb <calculate_allocated_space>
f0115587:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f011558a:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0115591:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115598:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011559e:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01155a1:	74 28                	je     f01155cb <test_calculate_allocated_space+0xa19>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01155a3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01155a9:	83 ec 0c             	sub    $0xc,%esp
f01155ac:	ff 75 c8             	pushl  -0x38(%ebp)
f01155af:	50                   	push   %eax
f01155b0:	68 f0 a2 13 f0       	push   $0xf013a2f0
f01155b5:	68 68 07 00 00       	push   $0x768
f01155ba:	68 be 85 13 f0       	push   $0xf01385be
f01155bf:	e8 c3 ad fe ff       	call   f0100387 <_warn>
f01155c4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01155c7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01155cb:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01155d1:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01155d4:	74 28                	je     f01155fe <test_calculate_allocated_space+0xa4c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01155d6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01155dc:	83 ec 0c             	sub    $0xc,%esp
f01155df:	ff 75 c4             	pushl  -0x3c(%ebp)
f01155e2:	50                   	push   %eax
f01155e3:	68 50 a3 13 f0       	push   $0xf013a350
f01155e8:	68 6d 07 00 00       	push   $0x76d
f01155ed:	68 be 85 13 f0       	push   $0xf01385be
f01155f2:	e8 90 ad fe ff       	call   f0100387 <_warn>
f01155f7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01155fa:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01155fe:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115602:	74 04                	je     f0115608 <test_calculate_allocated_space+0xa56>
f0115604:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115608:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f011560c:	83 ec 04             	sub    $0x4,%esp
f011560f:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115615:	50                   	push   %eax
f0115616:	68 28 93 13 f0       	push   $0xf0139328
f011561b:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115621:	50                   	push   %eax
f0115622:	e8 01 bc 01 00       	call   f0131228 <strcconcat>
f0115627:	83 c4 10             	add    $0x10,%esp
f011562a:	83 ec 0c             	sub    $0xc,%esp
f011562d:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115633:	50                   	push   %eax
f0115634:	e8 ab b6 fe ff       	call   f0100ce4 <execute_command>
f0115639:	83 c4 10             	add    $0x10,%esp

		//Test5
		num_tables = 0;
f011563c:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115643:	00 00 00 
		num_pages = 0;
f0115646:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011564d:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0115650:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115653:	89 d0                	mov    %edx,%eax
f0115655:	c1 e0 02             	shl    $0x2,%eax
f0115658:	01 d0                	add    %edx,%eax
f011565a:	01 c0                	add    %eax,%eax
f011565c:	05 00 00 40 00       	add    $0x400000,%eax
f0115661:	89 c2                	mov    %eax,%edx
f0115663:	83 ec 0c             	sub    $0xc,%esp
f0115666:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011566c:	50                   	push   %eax
f011566d:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115673:	50                   	push   %eax
f0115674:	52                   	push   %edx
f0115675:	68 00 00 40 00       	push   $0x400000
f011567a:	ff 75 d8             	pushl  -0x28(%ebp)
f011567d:	e8 39 35 ff ff       	call   f0108bbb <calculate_allocated_space>
f0115682:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0115685:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f011568c:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115693:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115699:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011569c:	74 28                	je     f01156c6 <test_calculate_allocated_space+0xb14>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f011569e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01156a4:	83 ec 0c             	sub    $0xc,%esp
f01156a7:	ff 75 c8             	pushl  -0x38(%ebp)
f01156aa:	50                   	push   %eax
f01156ab:	68 f0 a2 13 f0       	push   $0xf013a2f0
f01156b0:	68 7d 07 00 00       	push   $0x77d
f01156b5:	68 be 85 13 f0       	push   $0xf01385be
f01156ba:	e8 c8 ac fe ff       	call   f0100387 <_warn>
f01156bf:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01156c2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01156c6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01156cc:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01156cf:	74 28                	je     f01156f9 <test_calculate_allocated_space+0xb47>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01156d1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01156d7:	83 ec 0c             	sub    $0xc,%esp
f01156da:	ff 75 c4             	pushl  -0x3c(%ebp)
f01156dd:	50                   	push   %eax
f01156de:	68 50 a3 13 f0       	push   $0xf013a350
f01156e3:	68 82 07 00 00       	push   $0x782
f01156e8:	68 be 85 13 f0       	push   $0xf01385be
f01156ed:	e8 95 ac fe ff       	call   f0100387 <_warn>
f01156f2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01156f5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01156f9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01156fd:	74 04                	je     f0115703 <test_calculate_allocated_space+0xb51>
f01156ff:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115703:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0115707:	83 ec 04             	sub    $0x4,%esp
f011570a:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115710:	50                   	push   %eax
f0115711:	68 32 93 13 f0       	push   $0xf0139332
f0115716:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011571c:	50                   	push   %eax
f011571d:	e8 06 bb 01 00       	call   f0131228 <strcconcat>
f0115722:	83 c4 10             	add    $0x10,%esp
f0115725:	83 ec 0c             	sub    $0xc,%esp
f0115728:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f011572e:	50                   	push   %eax
f011572f:	e8 b0 b5 fe ff       	call   f0100ce4 <execute_command>
f0115734:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0115737:	83 ec 04             	sub    $0x4,%esp
f011573a:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115740:	50                   	push   %eax
f0115741:	68 58 a2 13 f0       	push   $0xf013a258
f0115746:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011574c:	50                   	push   %eax
f011574d:	e8 d6 ba 01 00       	call   f0131228 <strcconcat>
f0115752:	83 c4 10             	add    $0x10,%esp
f0115755:	83 ec 0c             	sub    $0xc,%esp
f0115758:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f011575e:	50                   	push   %eax
f011575f:	e8 80 b5 fe ff       	call   f0100ce4 <execute_command>
f0115764:	83 c4 10             	add    $0x10,%esp

		//Test6
		num_tables = 0;
f0115767:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011576e:	00 00 00 
		num_pages = 0;
f0115771:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115778:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f011577b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011577e:	05 00 00 38 00       	add    $0x380000,%eax
f0115783:	01 c0                	add    %eax,%eax
f0115785:	89 c2                	mov    %eax,%edx
f0115787:	83 ec 0c             	sub    $0xc,%esp
f011578a:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115790:	50                   	push   %eax
f0115791:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115797:	50                   	push   %eax
f0115798:	52                   	push   %edx
f0115799:	68 00 00 70 00       	push   $0x700000
f011579e:	ff 75 d8             	pushl  -0x28(%ebp)
f01157a1:	e8 15 34 ff ff       	call   f0108bbb <calculate_allocated_space>
f01157a6:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01157a9:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 3;
f01157b0:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01157b7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01157bd:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01157c0:	74 28                	je     f01157ea <test_calculate_allocated_space+0xc38>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01157c2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01157c8:	83 ec 0c             	sub    $0xc,%esp
f01157cb:	ff 75 c8             	pushl  -0x38(%ebp)
f01157ce:	50                   	push   %eax
f01157cf:	68 f0 a2 13 f0       	push   $0xf013a2f0
f01157d4:	68 94 07 00 00       	push   $0x794
f01157d9:	68 be 85 13 f0       	push   $0xf01385be
f01157de:	e8 a4 ab fe ff       	call   f0100387 <_warn>
f01157e3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01157e6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01157ea:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01157f0:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01157f3:	74 28                	je     f011581d <test_calculate_allocated_space+0xc6b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01157f5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01157fb:	83 ec 0c             	sub    $0xc,%esp
f01157fe:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115801:	50                   	push   %eax
f0115802:	68 50 a3 13 f0       	push   $0xf013a350
f0115807:	68 99 07 00 00       	push   $0x799
f011580c:	68 be 85 13 f0       	push   $0xf01385be
f0115811:	e8 71 ab fe ff       	call   f0100387 <_warn>
f0115816:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115819:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011581d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115821:	74 04                	je     f0115827 <test_calculate_allocated_space+0xc75>
f0115823:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115827:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test7
		num_tables = 0;
f011582b:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115832:	00 00 00 
		num_pages = 0;
f0115835:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011583c:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f011583f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115842:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0115847:	89 c2                	mov    %eax,%edx
f0115849:	83 ec 0c             	sub    $0xc,%esp
f011584c:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115852:	50                   	push   %eax
f0115853:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115859:	50                   	push   %eax
f011585a:	52                   	push   %edx
f011585b:	68 ff ff 3f 00       	push   $0x3fffff
f0115860:	ff 75 d8             	pushl  -0x28(%ebp)
f0115863:	e8 53 33 ff ff       	call   f0108bbb <calculate_allocated_space>
f0115868:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f011586b:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 0;
f0115872:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115879:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011587f:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115882:	74 28                	je     f01158ac <test_calculate_allocated_space+0xcfa>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115884:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011588a:	83 ec 0c             	sub    $0xc,%esp
f011588d:	ff 75 c8             	pushl  -0x38(%ebp)
f0115890:	50                   	push   %eax
f0115891:	68 f0 a2 13 f0       	push   $0xf013a2f0
f0115896:	68 a7 07 00 00       	push   $0x7a7
f011589b:	68 be 85 13 f0       	push   $0xf01385be
f01158a0:	e8 e2 aa fe ff       	call   f0100387 <_warn>
f01158a5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01158a8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01158ac:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01158b2:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01158b5:	74 28                	je     f01158df <test_calculate_allocated_space+0xd2d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01158b7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01158bd:	83 ec 0c             	sub    $0xc,%esp
f01158c0:	ff 75 c4             	pushl  -0x3c(%ebp)
f01158c3:	50                   	push   %eax
f01158c4:	68 50 a3 13 f0       	push   $0xf013a350
f01158c9:	68 ac 07 00 00       	push   $0x7ac
f01158ce:	68 be 85 13 f0       	push   $0xf01385be
f01158d3:	e8 af aa fe ff       	call   f0100387 <_warn>
f01158d8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01158db:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01158df:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01158e3:	74 04                	je     f01158e9 <test_calculate_allocated_space+0xd37>
f01158e5:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01158e9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f01158ed:	83 ec 0c             	sub    $0xc,%esp
f01158f0:	68 e3 92 13 f0       	push   $0xf01392e3
f01158f5:	e8 88 b3 fe ff       	call   f0100c82 <cprintf>
f01158fa:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_allocated_space: FINISHED. Evaluation = %d\n", eval);
f01158fd:	83 ec 08             	sub    $0x8,%esp
f0115900:	ff 75 e4             	pushl  -0x1c(%ebp)
f0115903:	68 ac a3 13 f0       	push   $0xf013a3ac
f0115908:	e8 75 b3 fe ff       	call   f0100c82 <cprintf>
f011590d:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0115910:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0115914:	75 10                	jne    f0115926 <test_calculate_allocated_space+0xd74>
		cprintf("Congratulations!! test calculate_allocated_space completed successfully.\n");
f0115916:	83 ec 0c             	sub    $0xc,%esp
f0115919:	68 ec a3 13 f0       	push   $0xf013a3ec
f011591e:	e8 5f b3 fe ff       	call   f0100c82 <cprintf>
f0115923:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0115926:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f011592b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f011592e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0115931:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0115934:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0115939:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011593c:	5b                   	pop    %ebx
f011593d:	5e                   	pop    %esi
f011593e:	5f                   	pop    %edi
f011593f:	5d                   	pop    %ebp
f0115940:	c3                   	ret    

f0115941 <CB>:
//===========================================================================
//===========================================================================
//===========================================================================

int CB(uint32 *ptr_dir, uint32 va, int bn)
{
f0115941:	55                   	push   %ebp
f0115942:	89 e5                	mov    %esp,%ebp
f0115944:	83 ec 18             	sub    $0x18,%esp
	//assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f0115947:	8b 45 10             	mov    0x10(%ebp),%eax
f011594a:	ba 01 00 00 00       	mov    $0x1,%edx
f011594f:	88 c1                	mov    %al,%cl
f0115951:	d3 e2                	shl    %cl,%edx
f0115953:	89 d0                	mov    %edx,%eax
f0115955:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0115958:	8b 45 0c             	mov    0xc(%ebp),%eax
f011595b:	c1 e8 16             	shr    $0x16,%eax
f011595e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115965:	8b 45 08             	mov    0x8(%ebp),%eax
f0115968:	01 d0                	add    %edx,%eax
f011596a:	8b 00                	mov    (%eax),%eax
f011596c:	83 e0 01             	and    $0x1,%eax
f011596f:	85 c0                	test   %eax,%eax
f0115971:	75 07                	jne    f011597a <CB+0x39>
f0115973:	b8 00 00 00 00       	mov    $0x0,%eax
f0115978:	eb 76                	jmp    f01159f0 <CB+0xaf>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f011597a:	8b 45 0c             	mov    0xc(%ebp),%eax
f011597d:	c1 e8 16             	shr    $0x16,%eax
f0115980:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115987:	8b 45 08             	mov    0x8(%ebp),%eax
f011598a:	01 d0                	add    %edx,%eax
f011598c:	8b 00                	mov    (%eax),%eax
f011598e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115993:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0115996:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115999:	c1 e8 0c             	shr    $0xc,%eax
f011599c:	89 45 ec             	mov    %eax,-0x14(%ebp)
f011599f:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f01159a4:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01159a7:	72 17                	jb     f01159c0 <CB+0x7f>
f01159a9:	ff 75 f0             	pushl  -0x10(%ebp)
f01159ac:	68 38 a4 13 f0       	push   $0xf013a438
f01159b1:	68 c7 07 00 00       	push   $0x7c7
f01159b6:	68 be 85 13 f0       	push   $0xf01385be
f01159bb:	e8 3b a8 fe ff       	call   f01001fb <_panic>
f01159c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01159c3:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01159c8:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return ((table[((((uint32) (va)) >> 12) & 0x3FF)]&mask) == mask)? 1 : 0 ;
f01159cb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01159ce:	c1 e8 0c             	shr    $0xc,%eax
f01159d1:	25 ff 03 00 00       	and    $0x3ff,%eax
f01159d6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01159dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01159e0:	01 d0                	add    %edx,%eax
f01159e2:	8b 00                	mov    (%eax),%eax
f01159e4:	23 45 f4             	and    -0xc(%ebp),%eax
f01159e7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01159ea:	0f 94 c0             	sete   %al
f01159ed:	0f b6 c0             	movzbl %al,%eax
}
f01159f0:	c9                   	leave  
f01159f1:	c3                   	ret    

f01159f2 <SB>:
int SB(uint32 *ptr_dir, uint32 va, int bn , int v)
{
f01159f2:	55                   	push   %ebp
f01159f3:	89 e5                	mov    %esp,%ebp
f01159f5:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f01159f8:	68 67 a4 13 f0       	push   $0xf013a467
f01159fd:	68 76 a4 13 f0       	push   $0xf013a476
f0115a02:	68 cc 07 00 00       	push   $0x7cc
f0115a07:	68 be 85 13 f0       	push   $0xf01385be
f0115a0c:	e8 ea a7 fe ff       	call   f01001fb <_panic>

f0115a11 <CPs>:
	if (~v) table[((((uint32) (va)) >> 12) & 0x3FF)] &= ~mask ;
	else 	table[((((uint32) (va)) >> 12) & 0x3FF)] |= mask ;
	return 0;
}
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
f0115a11:	55                   	push   %ebp
f0115a12:	89 e5                	mov    %esp,%ebp
f0115a14:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0115a17:	68 67 a4 13 f0       	push   $0xf013a467
f0115a1c:	68 76 a4 13 f0       	push   $0xf013a476
f0115a21:	68 d6 07 00 00       	push   $0x7d6
f0115a26:	68 be 85 13 f0       	push   $0xf01385be
f0115a2b:	e8 cb a7 fe ff       	call   f01001fb <_panic>

f0115a30 <CA>:
	}
	return 1;
}

int CA(uint32 *ptr_dir, uint32 va)
{
f0115a30:	55                   	push   %ebp
f0115a31:	89 e5                	mov    %esp,%ebp
f0115a33:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0115a36:	68 67 a4 13 f0       	push   $0xf013a467
f0115a3b:	68 76 a4 13 f0       	push   $0xf013a476
f0115a40:	68 e5 07 00 00       	push   $0x7e5
f0115a45:	68 be 85 13 f0       	push   $0xf01385be
f0115a4a:	e8 ac a7 fe ff       	call   f01001fb <_panic>

f0115a4f <CE>:
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	return table[((((uint32) (va)) >> 12) & 0x3FF)]&~0x00000FFF;
}

int CE(uint32 *_d, uint32 va)
{
f0115a4f:	55                   	push   %ebp
f0115a50:	89 e5                	mov    %esp,%ebp
f0115a52:	83 ec 18             	sub    $0x18,%esp
	if (!(_d[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0115a55:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115a58:	c1 e8 16             	shr    $0x16,%eax
f0115a5b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115a62:	8b 45 08             	mov    0x8(%ebp),%eax
f0115a65:	01 d0                	add    %edx,%eax
f0115a67:	8b 00                	mov    (%eax),%eax
f0115a69:	83 e0 01             	and    $0x1,%eax
f0115a6c:	85 c0                	test   %eax,%eax
f0115a6e:	75 07                	jne    f0115a77 <CE+0x28>
f0115a70:	b8 00 00 00 00       	mov    $0x0,%eax
f0115a75:	eb 7a                	jmp    f0115af1 <CE+0xa2>
	uint32 *_t = (STATIC_KERNEL_VIRTUAL_ADDRESS(_d[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0115a77:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115a7a:	c1 e8 16             	shr    $0x16,%eax
f0115a7d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115a84:	8b 45 08             	mov    0x8(%ebp),%eax
f0115a87:	01 d0                	add    %edx,%eax
f0115a89:	8b 00                	mov    (%eax),%eax
f0115a8b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115a90:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0115a93:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115a96:	c1 e8 0c             	shr    $0xc,%eax
f0115a99:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0115a9c:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f0115aa1:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0115aa4:	72 17                	jb     f0115abd <CE+0x6e>
f0115aa6:	ff 75 f4             	pushl  -0xc(%ebp)
f0115aa9:	68 38 a4 13 f0       	push   $0xf013a438
f0115aae:	68 ee 07 00 00       	push   $0x7ee
f0115ab3:	68 be 85 13 f0       	push   $0xf01385be
f0115ab8:	e8 3e a7 fe ff       	call   f01001fb <_panic>
f0115abd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115ac0:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0115ac5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((_t[((((uint32) (va)) >> 12) & 0x3FF)])!=0) return 0;
f0115ac8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115acb:	c1 e8 0c             	shr    $0xc,%eax
f0115ace:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115ad3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115ada:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0115add:	01 d0                	add    %edx,%eax
f0115adf:	8b 00                	mov    (%eax),%eax
f0115ae1:	85 c0                	test   %eax,%eax
f0115ae3:	74 07                	je     f0115aec <CE+0x9d>
f0115ae5:	b8 00 00 00 00       	mov    $0x0,%eax
f0115aea:	eb 05                	jmp    f0115af1 <CE+0xa2>
	return 1;
f0115aec:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0115af1:	c9                   	leave  
f0115af2:	c3                   	ret    

f0115af3 <CP>:

int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc)
{
f0115af3:	55                   	push   %ebp
f0115af4:	89 e5                	mov    %esp,%ebp
f0115af6:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0115af9:	68 67 a4 13 f0       	push   $0xf013a467
f0115afe:	68 76 a4 13 f0       	push   $0xf013a476
f0115b03:	68 f5 07 00 00       	push   $0x7f5
f0115b08:	68 be 85 13 f0       	push   $0xf01385be
f0115b0d:	e8 e9 a6 fe ff       	call   f01001fb <_panic>

f0115b12 <GP>:
	}
	return 0;
}

uint32 GP(uint32 *ptr_dir, uint32 va)
{
f0115b12:	55                   	push   %ebp
f0115b13:	89 e5                	mov    %esp,%ebp
f0115b15:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0115b18:	68 67 a4 13 f0       	push   $0xf013a467
f0115b1d:	68 76 a4 13 f0       	push   $0xf013a476
f0115b22:	68 05 08 00 00       	push   $0x805
f0115b27:	68 be 85 13 f0       	push   $0xf01385be
f0115b2c:	e8 ca a6 fe ff       	call   f01001fb <_panic>

f0115b31 <ClearUserSpace>:
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
f0115b31:	55                   	push   %ebp
f0115b32:	89 e5                	mov    %esp,%ebp
f0115b34:	83 ec 10             	sub    $0x10,%esp
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0115b37:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0115b3e:	eb 18                	jmp    f0115b58 <ClearUserSpace+0x27>
		ptr_dir[i] = 0;
f0115b40:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0115b43:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115b4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0115b4d:	01 d0                	add    %edx,%eax
f0115b4f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0115b55:	ff 45 fc             	incl   -0x4(%ebp)
f0115b58:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0115b5b:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f0115b60:	76 de                	jbe    f0115b40 <ClearUserSpace+0xf>
		ptr_dir[i] = 0;
	}
}
f0115b62:	90                   	nop
f0115b63:	c9                   	leave  
f0115b64:	c3                   	ret    

f0115b65 <CCP>:

int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
f0115b65:	55                   	push   %ebp
f0115b66:	89 e5                	mov    %esp,%ebp
f0115b68:	83 ec 38             	sub    $0x38,%esp
f0115b6b:	8b 45 2c             	mov    0x2c(%ebp),%eax
f0115b6e:	88 45 d4             	mov    %al,-0x2c(%ebp)
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
f0115b71:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115b74:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115b79:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));
f0115b7c:	8b 45 10             	mov    0x10(%ebp),%eax
f0115b7f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115b84:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0115b87:	e9 ea 01 00 00       	jmp    f0115d76 <CCP+0x211>
	{
		uint32* ptr_table1;
		uint32* ptr_table2;
		struct FrameInfo * pfi1 ;
		struct FrameInfo * pfi2 ;
		if (chk_type != CHK_ALLOC)
f0115b8c:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0115b90:	74 44                	je     f0115bd6 <CCP+0x71>
		{
			pfi1 = get_frame_info(ptr_dir, (uint32)ptrTemp1, &ptr_table1);
f0115b92:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115b95:	83 ec 04             	sub    $0x4,%esp
f0115b98:	8d 55 dc             	lea    -0x24(%ebp),%edx
f0115b9b:	52                   	push   %edx
f0115b9c:	50                   	push   %eax
f0115b9d:	ff 75 08             	pushl  0x8(%ebp)
f0115ba0:	e8 8a 11 ff ff       	call   f0106d2f <get_frame_info>
f0115ba5:	83 c4 10             	add    $0x10,%esp
f0115ba8:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (ptr_table1 == NULL)
f0115bab:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115bae:	85 c0                	test   %eax,%eax
f0115bb0:	75 24                	jne    f0115bd6 <CCP+0x71>
			{
				warn("[EVAL] Failed. Table of address 1 = NULL\n");
f0115bb2:	83 ec 04             	sub    $0x4,%esp
f0115bb5:	68 8c a4 13 f0       	push   $0xf013a48c
f0115bba:	68 22 08 00 00       	push   $0x822
f0115bbf:	68 be 85 13 f0       	push   $0xf01385be
f0115bc4:	e8 be a7 fe ff       	call   f0100387 <_warn>
f0115bc9:	83 c4 10             	add    $0x10,%esp
				return 0;
f0115bcc:	b8 00 00 00 00       	mov    $0x0,%eax
f0115bd1:	e9 b6 01 00 00       	jmp    f0115d8c <CCP+0x227>
			}
		}
		pfi2 = get_frame_info(ptr_dir, (uint32)ptrTemp2, &ptr_table2);
f0115bd6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115bd9:	83 ec 04             	sub    $0x4,%esp
f0115bdc:	8d 55 d8             	lea    -0x28(%ebp),%edx
f0115bdf:	52                   	push   %edx
f0115be0:	50                   	push   %eax
f0115be1:	ff 75 08             	pushl  0x8(%ebp)
f0115be4:	e8 46 11 ff ff       	call   f0106d2f <get_frame_info>
f0115be9:	83 c4 10             	add    $0x10,%esp
f0115bec:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (ptr_table2 == NULL)
f0115bef:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0115bf2:	85 c0                	test   %eax,%eax
f0115bf4:	75 24                	jne    f0115c1a <CCP+0xb5>
		{
			warn("[EVAL] Failed. Table of address 2 = NULL\n");
f0115bf6:	83 ec 04             	sub    $0x4,%esp
f0115bf9:	68 b8 a4 13 f0       	push   $0xf013a4b8
f0115bfe:	68 29 08 00 00       	push   $0x829
f0115c03:	68 be 85 13 f0       	push   $0xf01385be
f0115c08:	e8 7a a7 fe ff       	call   f0100387 <_warn>
f0115c0d:	83 c4 10             	add    $0x10,%esp
			return 0;
f0115c10:	b8 00 00 00 00       	mov    $0x0,%eax
f0115c15:	e9 72 01 00 00       	jmp    f0115d8c <CCP+0x227>
		}
		if (chk_type == CHK_SHARE)
f0115c1a:	80 7d d4 02          	cmpb   $0x2,-0x2c(%ebp)
f0115c1e:	75 70                	jne    f0115c90 <CCP+0x12b>
		{
			uint32 fn1 = ptr_table1[PTX(ptrTemp1)] >> 12 ;
f0115c20:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115c23:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0115c26:	c1 ea 0c             	shr    $0xc,%edx
f0115c29:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0115c2f:	c1 e2 02             	shl    $0x2,%edx
f0115c32:	01 d0                	add    %edx,%eax
f0115c34:	8b 00                	mov    (%eax),%eax
f0115c36:	c1 e8 0c             	shr    $0xc,%eax
f0115c39:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 fn2 = ptr_table2[PTX(ptrTemp2)] >> 12 ;
f0115c3c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0115c3f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0115c42:	c1 ea 0c             	shr    $0xc,%edx
f0115c45:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0115c4b:	c1 e2 02             	shl    $0x2,%edx
f0115c4e:	01 d0                	add    %edx,%eax
f0115c50:	8b 00                	mov    (%eax),%eax
f0115c52:	c1 e8 0c             	shr    $0xc,%eax
f0115c55:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			if(fn1 != fn2)
f0115c58:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0115c5b:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0115c5e:	74 30                	je     f0115c90 <CCP+0x12b>
			{
				warn("[EVAL] Failed. Frame numbers not equal in the whole range!\nva1=%x, va2=%x, fn1=%x, fn2=%x\n", ptrTemp1, ptrTemp2, fn1, fn2);
f0115c60:	83 ec 04             	sub    $0x4,%esp
f0115c63:	ff 75 e4             	pushl  -0x1c(%ebp)
f0115c66:	ff 75 e8             	pushl  -0x18(%ebp)
f0115c69:	ff 75 f0             	pushl  -0x10(%ebp)
f0115c6c:	ff 75 f4             	pushl  -0xc(%ebp)
f0115c6f:	68 e4 a4 13 f0       	push   $0xf013a4e4
f0115c74:	68 33 08 00 00       	push   $0x833
f0115c79:	68 be 85 13 f0       	push   $0xf01385be
f0115c7e:	e8 04 a7 fe ff       	call   f0100387 <_warn>
f0115c83:	83 c4 20             	add    $0x20,%esp
				return 0;
f0115c86:	b8 00 00 00 00       	mov    $0x0,%eax
f0115c8b:	e9 fc 00 00 00       	jmp    f0115d8c <CCP+0x227>
			}
		}
		if (ref != -1)
f0115c90:	83 7d 18 ff          	cmpl   $0xffffffff,0x18(%ebp)
f0115c94:	74 52                	je     f0115ce8 <CCP+0x183>
		{
			if (pfi2 == NULL || (*pfi2).references != ref)
f0115c96:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0115c9a:	74 0e                	je     f0115caa <CCP+0x145>
f0115c9c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0115c9f:	8b 40 08             	mov    0x8(%eax),%eax
f0115ca2:	0f b7 c0             	movzwl %ax,%eax
f0115ca5:	3b 45 18             	cmp    0x18(%ebp),%eax
f0115ca8:	74 3e                	je     f0115ce8 <CCP+0x183>
			{
				warn("[EVAL] Failed. Num of frame references is not correct. MAKE SURE to use the functions of LAB5! va2=%x, ref2=%d\n", ptrTemp2, pfi2==NULL? 0 : (*pfi2).references);
f0115caa:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0115cae:	74 0b                	je     f0115cbb <CCP+0x156>
f0115cb0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0115cb3:	8b 40 08             	mov    0x8(%eax),%eax
f0115cb6:	0f b7 c0             	movzwl %ax,%eax
f0115cb9:	eb 05                	jmp    f0115cc0 <CCP+0x15b>
f0115cbb:	b8 00 00 00 00       	mov    $0x0,%eax
f0115cc0:	83 ec 0c             	sub    $0xc,%esp
f0115cc3:	50                   	push   %eax
f0115cc4:	ff 75 f0             	pushl  -0x10(%ebp)
f0115cc7:	68 40 a5 13 f0       	push   $0xf013a540
f0115ccc:	68 3b 08 00 00       	push   $0x83b
f0115cd1:	68 be 85 13 f0       	push   $0xf01385be
f0115cd6:	e8 ac a6 fe ff       	call   f0100387 <_warn>
f0115cdb:	83 c4 20             	add    $0x20,%esp
				return 0;
f0115cde:	b8 00 00 00 00       	mov    $0x0,%eax
f0115ce3:	e9 a4 00 00 00       	jmp    f0115d8c <CCP+0x227>
			}
		}
		if (CPs(ptr_dir, (uint32)ptrTemp2, dst_perms, dst_to_chk) <= 0)
f0115ce8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115ceb:	ff 75 20             	pushl  0x20(%ebp)
f0115cee:	ff 75 1c             	pushl  0x1c(%ebp)
f0115cf1:	50                   	push   %eax
f0115cf2:	ff 75 08             	pushl  0x8(%ebp)
f0115cf5:	e8 17 fd ff ff       	call   f0115a11 <CPs>
f0115cfa:	83 c4 10             	add    $0x10,%esp
f0115cfd:	85 c0                	test   %eax,%eax
f0115cff:	7f 21                	jg     f0115d22 <CCP+0x1bd>
		{
			warn("[EVAL] Failed. one or more permission in destination is not correct\n");
f0115d01:	83 ec 04             	sub    $0x4,%esp
f0115d04:	68 b0 a5 13 f0       	push   $0xf013a5b0
f0115d09:	68 41 08 00 00       	push   $0x841
f0115d0e:	68 be 85 13 f0       	push   $0xf01385be
f0115d13:	e8 6f a6 fe ff       	call   f0100387 <_warn>
f0115d18:	83 c4 10             	add    $0x10,%esp
			return 0;
f0115d1b:	b8 00 00 00 00       	mov    $0x0,%eax
f0115d20:	eb 6a                	jmp    f0115d8c <CCP+0x227>
		}
		if (chk_type != CHK_ALLOC)
f0115d22:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0115d26:	74 3a                	je     f0115d62 <CCP+0x1fd>
		{
			if (CPs(ptr_dir, (uint32)ptrTemp1, src_perms, src_to_chk) <= 0)
f0115d28:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115d2b:	ff 75 28             	pushl  0x28(%ebp)
f0115d2e:	ff 75 24             	pushl  0x24(%ebp)
f0115d31:	50                   	push   %eax
f0115d32:	ff 75 08             	pushl  0x8(%ebp)
f0115d35:	e8 d7 fc ff ff       	call   f0115a11 <CPs>
f0115d3a:	83 c4 10             	add    $0x10,%esp
f0115d3d:	85 c0                	test   %eax,%eax
f0115d3f:	7f 21                	jg     f0115d62 <CCP+0x1fd>
			{
				warn("[EVAL] Failed. one or more permission in source is not correct\n");
f0115d41:	83 ec 04             	sub    $0x4,%esp
f0115d44:	68 f8 a5 13 f0       	push   $0xf013a5f8
f0115d49:	68 48 08 00 00       	push   $0x848
f0115d4e:	68 be 85 13 f0       	push   $0xf01385be
f0115d53:	e8 2f a6 fe ff       	call   f0100387 <_warn>
f0115d58:	83 c4 10             	add    $0x10,%esp
				return 0;
f0115d5b:	b8 00 00 00 00       	mov    $0x0,%eax
f0115d60:	eb 2a                	jmp    f0115d8c <CCP+0x227>
			}
		}
		if (chk_type != CHK_ALLOC)
f0115d62:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0115d66:	74 07                	je     f0115d6f <CCP+0x20a>
		{
			ptrTemp1 += PAGE_SIZE;
f0115d68:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0115d6f:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0115d76:	8b 55 10             	mov    0x10(%ebp),%edx
f0115d79:	8b 45 14             	mov    0x14(%ebp),%eax
f0115d7c:	01 d0                	add    %edx,%eax
f0115d7e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0115d81:	0f 87 05 fe ff ff    	ja     f0115b8c <CCP+0x27>
		{
			ptrTemp1 += PAGE_SIZE;
		}
	}

	return 1;
f0115d87:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0115d8c:	c9                   	leave  
f0115d8d:	c3                   	ret    

f0115d8e <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f0115d8e:	55                   	push   %ebp
f0115d8f:	89 e5                	mov    %esp,%ebp
f0115d91:	57                   	push   %edi
f0115d92:	56                   	push   %esi
f0115d93:	53                   	push   %ebx
f0115d94:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
	if(firstTime)
f0115d9a:	a0 ce 1c 19 f0       	mov    0xf0191cce,%al
f0115d9f:	84 c0                	test   %al,%al
f0115da1:	0f 84 b4 09 00 00    	je     f011675b <test_priority_normal_and_higher+0x9cd>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f0115da7:	c6 05 ce 1c 19 f0 00 	movb   $0x0,0xf0191cce
		char command[100] = "load fos_add 20";
f0115dae:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0115db4:	bb 98 a8 13 f0       	mov    $0xf013a898,%ebx
f0115db9:	ba 04 00 00 00       	mov    $0x4,%edx
f0115dbe:	89 c7                	mov    %eax,%edi
f0115dc0:	89 de                	mov    %ebx,%esi
f0115dc2:	89 d1                	mov    %edx,%ecx
f0115dc4:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0115dc6:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f0115dcc:	b9 15 00 00 00       	mov    $0x15,%ecx
f0115dd1:	b8 00 00 00 00       	mov    $0x0,%eax
f0115dd6:	89 d7                	mov    %edx,%edi
f0115dd8:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0115dda:	83 ec 0c             	sub    $0xc,%esp
f0115ddd:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0115de3:	50                   	push   %eax
f0115de4:	e8 fb ae fe ff       	call   f0100ce4 <execute_command>
f0115de9:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f0115dec:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0115df2:	bb fc a8 13 f0       	mov    $0xf013a8fc,%ebx
f0115df7:	ba 0d 00 00 00       	mov    $0xd,%edx
f0115dfc:	89 c7                	mov    %eax,%edi
f0115dfe:	89 de                	mov    %ebx,%esi
f0115e00:	89 d1                	mov    %edx,%ecx
f0115e02:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115e04:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f0115e0a:	b9 57 00 00 00       	mov    $0x57,%ecx
f0115e0f:	b0 00                	mov    $0x0,%al
f0115e11:	89 d7                	mov    %edx,%edi
f0115e13:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0115e15:	83 ec 0c             	sub    $0xc,%esp
f0115e18:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0115e1e:	50                   	push   %eax
f0115e1f:	e8 c0 ae fe ff       	call   f0100ce4 <execute_command>
f0115e24:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f0115e27:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0115e2d:	bb 60 a9 13 f0       	mov    $0xf013a960,%ebx
f0115e32:	ba 17 00 00 00       	mov    $0x17,%edx
f0115e37:	89 c7                	mov    %eax,%edi
f0115e39:	89 de                	mov    %ebx,%esi
f0115e3b:	89 d1                	mov    %edx,%ecx
f0115e3d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115e3f:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f0115e45:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0115e4a:	b0 00                	mov    $0x0,%al
f0115e4c:	89 d7                	mov    %edx,%edi
f0115e4e:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0115e50:	83 ec 0c             	sub    $0xc,%esp
f0115e53:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0115e59:	50                   	push   %eax
f0115e5a:	e8 85 ae fe ff       	call   f0100ce4 <execute_command>
f0115e5f:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0115e62:	83 ec 04             	sub    $0x4,%esp
f0115e65:	6a 00                	push   $0x0
f0115e67:	8d 45 ac             	lea    -0x54(%ebp),%eax
f0115e6a:	50                   	push   %eax
f0115e6b:	68 00 10 00 00       	push   $0x1000
f0115e70:	e8 2d 3b ff ff       	call   f01099a2 <envid2env>
f0115e75:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0115e78:	83 ec 04             	sub    $0x4,%esp
f0115e7b:	6a 00                	push   $0x0
f0115e7d:	8d 45 a8             	lea    -0x58(%ebp),%eax
f0115e80:	50                   	push   %eax
f0115e81:	68 01 10 00 00       	push   $0x1001
f0115e86:	e8 17 3b ff ff       	call   f01099a2 <envid2env>
f0115e8b:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0115e8e:	83 ec 04             	sub    $0x4,%esp
f0115e91:	6a 00                	push   $0x0
f0115e93:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f0115e96:	50                   	push   %eax
f0115e97:	68 02 10 00 00       	push   $0x1002
f0115e9c:	e8 01 3b ff ff       	call   f01099a2 <envid2env>
f0115ea1:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0115ea4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115ea7:	85 c0                	test   %eax,%eax
f0115ea9:	74 0e                	je     f0115eb9 <test_priority_normal_and_higher+0x12b>
f0115eab:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115eae:	85 c0                	test   %eax,%eax
f0115eb0:	74 07                	je     f0115eb9 <test_priority_normal_and_higher+0x12b>
f0115eb2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115eb5:	85 c0                	test   %eax,%eax
f0115eb7:	75 14                	jne    f0115ecd <test_priority_normal_and_higher+0x13f>
			panic("Loading programs failed\n");
f0115eb9:	83 ec 04             	sub    $0x4,%esp
f0115ebc:	68 38 a6 13 f0       	push   $0xf013a638
f0115ec1:	6a 26                	push   $0x26
f0115ec3:	68 51 a6 13 f0       	push   $0xf013a651
f0115ec8:	e8 2e a3 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0115ecd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115ed0:	8b 40 74             	mov    0x74(%eax),%eax
f0115ed3:	83 f8 14             	cmp    $0x14,%eax
f0115ed6:	75 16                	jne    f0115eee <test_priority_normal_and_higher+0x160>
f0115ed8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115edb:	8b 40 74             	mov    0x74(%eax),%eax
f0115ede:	83 f8 0f             	cmp    $0xf,%eax
f0115ee1:	75 0b                	jne    f0115eee <test_priority_normal_and_higher+0x160>
f0115ee3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115ee6:	8b 40 74             	mov    0x74(%eax),%eax
f0115ee9:	83 f8 0a             	cmp    $0xa,%eax
f0115eec:	74 14                	je     f0115f02 <test_priority_normal_and_higher+0x174>
			panic("The programs should be initially loaded with the given working set size\n");
f0115eee:	83 ec 04             	sub    $0x4,%esp
f0115ef1:	68 6c a6 13 f0       	push   $0xf013a66c
f0115ef6:	6a 29                	push   $0x29
f0115ef8:	68 51 a6 13 f0       	push   $0xf013a651
f0115efd:	e8 f9 a2 fe ff       	call   f01001fb <_panic>

		for(int i = 0; i < 20; i++)
f0115f02:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0115f09:	eb 44                	jmp    f0115f4f <test_priority_normal_and_higher+0x1c1>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0115f0b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115f0e:	8b 48 78             	mov    0x78(%eax),%ecx
f0115f11:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0115f14:	89 d0                	mov    %edx,%eax
f0115f16:	01 c0                	add    %eax,%eax
f0115f18:	01 d0                	add    %edx,%eax
f0115f1a:	c1 e0 03             	shl    $0x3,%eax
f0115f1d:	01 c8                	add    %ecx,%eax
f0115f1f:	8b 10                	mov    (%eax),%edx
f0115f21:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0115f24:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0115f2b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115f2e:	8b 48 78             	mov    0x78(%eax),%ecx
f0115f31:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0115f34:	89 d0                	mov    %edx,%eax
f0115f36:	01 c0                	add    %eax,%eax
f0115f38:	01 d0                	add    %edx,%eax
f0115f3a:	c1 e0 03             	shl    $0x3,%eax
f0115f3d:	01 c8                	add    %ecx,%eax
f0115f3f:	8b 50 08             	mov    0x8(%eax),%edx
f0115f42:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0115f45:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0115f4c:	ff 45 e4             	incl   -0x1c(%ebp)
f0115f4f:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0115f53:	7e b6                	jle    f0115f0b <test_priority_normal_and_higher+0x17d>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0115f55:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0115f5c:	eb 44                	jmp    f0115fa2 <test_priority_normal_and_higher+0x214>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0115f5e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115f61:	8b 48 78             	mov    0x78(%eax),%ecx
f0115f64:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0115f67:	89 d0                	mov    %edx,%eax
f0115f69:	01 c0                	add    %eax,%eax
f0115f6b:	01 d0                	add    %edx,%eax
f0115f6d:	c1 e0 03             	shl    $0x3,%eax
f0115f70:	01 c8                	add    %ecx,%eax
f0115f72:	8b 10                	mov    (%eax),%edx
f0115f74:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0115f77:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0115f7e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115f81:	8b 48 78             	mov    0x78(%eax),%ecx
f0115f84:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0115f87:	89 d0                	mov    %edx,%eax
f0115f89:	01 c0                	add    %eax,%eax
f0115f8b:	01 d0                	add    %edx,%eax
f0115f8d:	c1 e0 03             	shl    $0x3,%eax
f0115f90:	01 c8                	add    %ecx,%eax
f0115f92:	8b 50 08             	mov    0x8(%eax),%edx
f0115f95:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0115f98:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0115f9f:	ff 45 e0             	incl   -0x20(%ebp)
f0115fa2:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f0115fa6:	7e b6                	jle    f0115f5e <test_priority_normal_and_higher+0x1d0>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0115fa8:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0115faf:	eb 44                	jmp    f0115ff5 <test_priority_normal_and_higher+0x267>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0115fb1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115fb4:	8b 48 78             	mov    0x78(%eax),%ecx
f0115fb7:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0115fba:	89 d0                	mov    %edx,%eax
f0115fbc:	01 c0                	add    %eax,%eax
f0115fbe:	01 d0                	add    %edx,%eax
f0115fc0:	c1 e0 03             	shl    $0x3,%eax
f0115fc3:	01 c8                	add    %ecx,%eax
f0115fc5:	8b 10                	mov    (%eax),%edx
f0115fc7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115fca:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0115fd1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115fd4:	8b 48 78             	mov    0x78(%eax),%ecx
f0115fd7:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0115fda:	89 d0                	mov    %edx,%eax
f0115fdc:	01 c0                	add    %eax,%eax
f0115fde:	01 d0                	add    %edx,%eax
f0115fe0:	c1 e0 03             	shl    $0x3,%eax
f0115fe3:	01 c8                	add    %ecx,%eax
f0115fe5:	8b 50 08             	mov    0x8(%eax),%edx
f0115fe8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115feb:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0115ff2:	ff 45 dc             	incl   -0x24(%ebp)
f0115ff5:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f0115ff9:	7e b6                	jle    f0115fb1 <test_priority_normal_and_higher+0x223>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0115ffb:	e8 5b 69 ff ff       	call   f010c95b <sys_calculate_free_frames>
f0116000:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f0116003:	e8 34 dd fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116008:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f011600b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011600e:	83 ec 08             	sub    $0x8,%esp
f0116011:	6a 03                	push   $0x3
f0116013:	50                   	push   %eax
f0116014:	e8 1e 4e ff ff       	call   f010ae37 <set_program_priority>
f0116019:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f011601c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011601f:	83 ec 08             	sub    $0x8,%esp
f0116022:	6a 03                	push   $0x3
f0116024:	50                   	push   %eax
f0116025:	e8 0d 4e ff ff       	call   f010ae37 <set_program_priority>
f011602a:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f011602d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116030:	83 ec 08             	sub    $0x8,%esp
f0116033:	6a 03                	push   $0x3
f0116035:	50                   	push   %eax
f0116036:	e8 fc 4d ff ff       	call   f010ae37 <set_program_priority>
f011603b:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011603e:	e8 f9 dc fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116043:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116046:	74 14                	je     f011605c <test_priority_normal_and_higher+0x2ce>
f0116048:	83 ec 04             	sub    $0x4,%esp
f011604b:	68 b8 a6 13 f0       	push   $0xf013a6b8
f0116050:	6a 45                	push   $0x45
f0116052:	68 51 a6 13 f0       	push   $0xf013a651
f0116057:	e8 9f a1 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011605c:	e8 fa 68 ff ff       	call   f010c95b <sys_calculate_free_frames>
f0116061:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116064:	74 14                	je     f011607a <test_priority_normal_and_higher+0x2ec>
f0116066:	83 ec 04             	sub    $0x4,%esp
f0116069:	68 b8 a6 13 f0       	push   $0xf013a6b8
f011606e:	6a 46                	push   $0x46
f0116070:	68 51 a6 13 f0       	push   $0xf013a651
f0116075:	e8 81 a1 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f011607a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011607d:	8b 40 74             	mov    0x74(%eax),%eax
f0116080:	83 f8 14             	cmp    $0x14,%eax
f0116083:	75 16                	jne    f011609b <test_priority_normal_and_higher+0x30d>
f0116085:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116088:	8b 40 74             	mov    0x74(%eax),%eax
f011608b:	83 f8 0f             	cmp    $0xf,%eax
f011608e:	75 0b                	jne    f011609b <test_priority_normal_and_higher+0x30d>
f0116090:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116093:	8b 40 74             	mov    0x74(%eax),%eax
f0116096:	83 f8 0a             	cmp    $0xa,%eax
f0116099:	74 14                	je     f01160af <test_priority_normal_and_higher+0x321>
			panic("The programs' working set size should not change after setting priority to normal\n");
f011609b:	83 ec 04             	sub    $0x4,%esp
f011609e:	68 e4 a6 13 f0       	push   $0xf013a6e4
f01160a3:	6a 49                	push   $0x49
f01160a5:	68 51 a6 13 f0       	push   $0xf013a651
f01160aa:	e8 4c a1 fe ff       	call   f01001fb <_panic>

		freeFrames = sys_calculate_free_frames();
f01160af:	e8 a7 68 ff ff       	call   f010c95b <sys_calculate_free_frames>
f01160b4:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01160b7:	e8 80 dc fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01160bc:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f01160bf:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01160c2:	83 ec 08             	sub    $0x8,%esp
f01160c5:	6a 04                	push   $0x4
f01160c7:	50                   	push   %eax
f01160c8:	e8 6a 4d ff ff       	call   f010ae37 <set_program_priority>
f01160cd:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f01160d0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01160d3:	83 ec 08             	sub    $0x8,%esp
f01160d6:	6a 04                	push   $0x4
f01160d8:	50                   	push   %eax
f01160d9:	e8 59 4d ff ff       	call   f010ae37 <set_program_priority>
f01160de:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f01160e1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01160e4:	83 ec 08             	sub    $0x8,%esp
f01160e7:	6a 04                	push   $0x4
f01160e9:	50                   	push   %eax
f01160ea:	e8 48 4d ff ff       	call   f010ae37 <set_program_priority>
f01160ef:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01160f2:	e8 45 dc fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01160f7:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01160fa:	74 14                	je     f0116110 <test_priority_normal_and_higher+0x382>
f01160fc:	83 ec 04             	sub    $0x4,%esp
f01160ff:	68 b8 a6 13 f0       	push   $0xf013a6b8
f0116104:	6a 53                	push   $0x53
f0116106:	68 51 a6 13 f0       	push   $0xf013a651
f011610b:	e8 eb a0 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f0116110:	e8 46 68 ff ff       	call   f010c95b <sys_calculate_free_frames>
f0116115:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116118:	74 14                	je     f011612e <test_priority_normal_and_higher+0x3a0>
f011611a:	83 ec 04             	sub    $0x4,%esp
f011611d:	68 38 a7 13 f0       	push   $0xf013a738
f0116122:	6a 54                	push   $0x54
f0116124:	68 51 a6 13 f0       	push   $0xf013a651
f0116129:	e8 cd a0 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f011612e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116131:	8b 40 74             	mov    0x74(%eax),%eax
f0116134:	83 f8 14             	cmp    $0x14,%eax
f0116137:	75 16                	jne    f011614f <test_priority_normal_and_higher+0x3c1>
f0116139:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011613c:	8b 40 74             	mov    0x74(%eax),%eax
f011613f:	83 f8 0f             	cmp    $0xf,%eax
f0116142:	75 0b                	jne    f011614f <test_priority_normal_and_higher+0x3c1>
f0116144:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116147:	8b 40 74             	mov    0x74(%eax),%eax
f011614a:	83 f8 14             	cmp    $0x14,%eax
f011614d:	74 14                	je     f0116163 <test_priority_normal_and_higher+0x3d5>
			panic("The programs' working set size should be doubled only if it is full\n");
f011614f:	83 ec 04             	sub    $0x4,%esp
f0116152:	68 68 a7 13 f0       	push   $0xf013a768
f0116157:	6a 57                	push   $0x57
f0116159:	68 51 a6 13 f0       	push   $0xf013a651
f011615e:	e8 98 a0 fe ff       	call   f01001fb <_panic>

		freeFrames = sys_calculate_free_frames();
f0116163:	e8 f3 67 ff ff       	call   f010c95b <sys_calculate_free_frames>
f0116168:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011616b:	e8 cc db fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116170:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f0116173:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116176:	83 ec 08             	sub    $0x8,%esp
f0116179:	6a 04                	push   $0x4
f011617b:	50                   	push   %eax
f011617c:	e8 b6 4c ff ff       	call   f010ae37 <set_program_priority>
f0116181:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116184:	e8 b3 db fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116189:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011618c:	74 14                	je     f01161a2 <test_priority_normal_and_higher+0x414>
f011618e:	83 ec 04             	sub    $0x4,%esp
f0116191:	68 b8 a6 13 f0       	push   $0xf013a6b8
f0116196:	6a 5f                	push   $0x5f
f0116198:	68 51 a6 13 f0       	push   $0xf013a651
f011619d:	e8 59 a0 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01161a2:	e8 b4 67 ff ff       	call   f010c95b <sys_calculate_free_frames>
f01161a7:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01161aa:	74 14                	je     f01161c0 <test_priority_normal_and_higher+0x432>
f01161ac:	83 ec 04             	sub    $0x4,%esp
f01161af:	68 b8 a6 13 f0       	push   $0xf013a6b8
f01161b4:	6a 60                	push   $0x60
f01161b6:	68 51 a6 13 f0       	push   $0xf013a651
f01161bb:	e8 3b a0 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f01161c0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01161c3:	8b 40 74             	mov    0x74(%eax),%eax
f01161c6:	83 f8 14             	cmp    $0x14,%eax
f01161c9:	75 16                	jne    f01161e1 <test_priority_normal_and_higher+0x453>
f01161cb:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01161ce:	8b 40 74             	mov    0x74(%eax),%eax
f01161d1:	83 f8 0f             	cmp    $0xf,%eax
f01161d4:	75 0b                	jne    f01161e1 <test_priority_normal_and_higher+0x453>
f01161d6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01161d9:	8b 40 74             	mov    0x74(%eax),%eax
f01161dc:	83 f8 14             	cmp    $0x14,%eax
f01161df:	74 14                	je     f01161f5 <test_priority_normal_and_higher+0x467>
			panic("The programs' working set size should be doubled only once\n");
f01161e1:	83 ec 04             	sub    $0x4,%esp
f01161e4:	68 b0 a7 13 f0       	push   $0xf013a7b0
f01161e9:	6a 63                	push   $0x63
f01161eb:	68 51 a6 13 f0       	push   $0xf013a651
f01161f0:	e8 06 a0 fe ff       	call   f01001fb <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f01161f5:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f01161fc:	eb 1b                	jmp    f0116219 <test_priority_normal_and_higher+0x48b>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f01161fe:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116201:	8b 48 78             	mov    0x78(%eax),%ecx
f0116204:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0116207:	89 d0                	mov    %edx,%eax
f0116209:	01 c0                	add    %eax,%eax
f011620b:	01 d0                	add    %edx,%eax
f011620d:	c1 e0 03             	shl    $0x3,%eax
f0116210:	01 c8                	add    %ecx,%eax
f0116212:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0116216:	ff 45 d8             	incl   -0x28(%ebp)
f0116219:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f011621d:	7e df                	jle    f01161fe <test_priority_normal_and_higher+0x470>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f011621f:	e8 37 67 ff ff       	call   f010c95b <sys_calculate_free_frames>
f0116224:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116227:	e8 10 db fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011622c:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f011622f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116232:	83 ec 08             	sub    $0x8,%esp
f0116235:	6a 04                	push   $0x4
f0116237:	50                   	push   %eax
f0116238:	e8 fa 4b ff ff       	call   f010ae37 <set_program_priority>
f011623d:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116240:	e8 f7 da fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116245:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116248:	74 14                	je     f011625e <test_priority_normal_and_higher+0x4d0>
f011624a:	83 ec 04             	sub    $0x4,%esp
f011624d:	68 b8 a6 13 f0       	push   $0xf013a6b8
f0116252:	6a 70                	push   $0x70
f0116254:	68 51 a6 13 f0       	push   $0xf013a651
f0116259:	e8 9d 9f fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011625e:	e8 f8 66 ff ff       	call   f010c95b <sys_calculate_free_frames>
f0116263:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116266:	74 14                	je     f011627c <test_priority_normal_and_higher+0x4ee>
f0116268:	83 ec 04             	sub    $0x4,%esp
f011626b:	68 b8 a6 13 f0       	push   $0xf013a6b8
f0116270:	6a 71                	push   $0x71
f0116272:	68 51 a6 13 f0       	push   $0xf013a651
f0116277:	e8 7f 9f fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f011627c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011627f:	8b 40 74             	mov    0x74(%eax),%eax
f0116282:	83 f8 14             	cmp    $0x14,%eax
f0116285:	75 16                	jne    f011629d <test_priority_normal_and_higher+0x50f>
f0116287:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011628a:	8b 40 74             	mov    0x74(%eax),%eax
f011628d:	83 f8 0f             	cmp    $0xf,%eax
f0116290:	75 0b                	jne    f011629d <test_priority_normal_and_higher+0x50f>
f0116292:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116295:	8b 40 74             	mov    0x74(%eax),%eax
f0116298:	83 f8 14             	cmp    $0x14,%eax
f011629b:	74 14                	je     f01162b1 <test_priority_normal_and_higher+0x523>
			panic("The programs' working set size should be doubled only once\n");
f011629d:	83 ec 04             	sub    $0x4,%esp
f01162a0:	68 b0 a7 13 f0       	push   $0xf013a7b0
f01162a5:	6a 74                	push   $0x74
f01162a7:	68 51 a6 13 f0       	push   $0xf013a651
f01162ac:	e8 4a 9f fe ff       	call   f01001fb <_panic>

		for(int i = 10; i < 15; i++)
f01162b1:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f01162b8:	eb 1b                	jmp    f01162d5 <test_priority_normal_and_higher+0x547>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f01162ba:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01162bd:	8b 48 78             	mov    0x78(%eax),%ecx
f01162c0:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01162c3:	89 d0                	mov    %edx,%eax
f01162c5:	01 c0                	add    %eax,%eax
f01162c7:	01 d0                	add    %edx,%eax
f01162c9:	c1 e0 03             	shl    $0x3,%eax
f01162cc:	01 c8                	add    %ecx,%eax
f01162ce:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f01162d2:	ff 45 d4             	incl   -0x2c(%ebp)
f01162d5:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f01162d9:	7e df                	jle    f01162ba <test_priority_normal_and_higher+0x52c>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01162db:	e8 7b 66 ff ff       	call   f010c95b <sys_calculate_free_frames>
f01162e0:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01162e3:	e8 54 da fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01162e8:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f01162eb:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01162ee:	83 ec 08             	sub    $0x8,%esp
f01162f1:	6a 05                	push   $0x5
f01162f3:	50                   	push   %eax
f01162f4:	e8 3e 4b ff ff       	call   f010ae37 <set_program_priority>
f01162f9:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f01162fc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01162ff:	83 ec 08             	sub    $0x8,%esp
f0116302:	6a 05                	push   $0x5
f0116304:	50                   	push   %eax
f0116305:	e8 2d 4b ff ff       	call   f010ae37 <set_program_priority>
f011630a:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011630d:	e8 2a da fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116312:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116315:	74 14                	je     f011632b <test_priority_normal_and_higher+0x59d>
f0116317:	83 ec 04             	sub    $0x4,%esp
f011631a:	68 b8 a6 13 f0       	push   $0xf013a6b8
f011631f:	6a 7f                	push   $0x7f
f0116321:	68 51 a6 13 f0       	push   $0xf013a651
f0116326:	e8 d0 9e fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011632b:	e8 2b 66 ff ff       	call   f010c95b <sys_calculate_free_frames>
f0116330:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116333:	74 17                	je     f011634c <test_priority_normal_and_higher+0x5be>
f0116335:	83 ec 04             	sub    $0x4,%esp
f0116338:	68 b8 a6 13 f0       	push   $0xf013a6b8
f011633d:	68 80 00 00 00       	push   $0x80
f0116342:	68 51 a6 13 f0       	push   $0xf013a651
f0116347:	e8 af 9e fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f011634c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011634f:	8b 40 74             	mov    0x74(%eax),%eax
f0116352:	83 f8 14             	cmp    $0x14,%eax
f0116355:	75 16                	jne    f011636d <test_priority_normal_and_higher+0x5df>
f0116357:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011635a:	8b 40 74             	mov    0x74(%eax),%eax
f011635d:	83 f8 1e             	cmp    $0x1e,%eax
f0116360:	75 0b                	jne    f011636d <test_priority_normal_and_higher+0x5df>
f0116362:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116365:	8b 40 74             	mov    0x74(%eax),%eax
f0116368:	83 f8 28             	cmp    $0x28,%eax
f011636b:	74 17                	je     f0116384 <test_priority_normal_and_higher+0x5f6>
			panic("The programs' working set size should be doubled if full\n");
f011636d:	83 ec 04             	sub    $0x4,%esp
f0116370:	68 ec a7 13 f0       	push   $0xf013a7ec
f0116375:	68 83 00 00 00       	push   $0x83
f011637a:	68 51 a6 13 f0       	push   $0xf013a651
f011637f:	e8 77 9e fe ff       	call   f01001fb <_panic>

		for(int i = 20; i < 40; i++)
f0116384:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f011638b:	eb 1b                	jmp    f01163a8 <test_priority_normal_and_higher+0x61a>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f011638d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116390:	8b 48 78             	mov    0x78(%eax),%ecx
f0116393:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0116396:	89 d0                	mov    %edx,%eax
f0116398:	01 c0                	add    %eax,%eax
f011639a:	01 d0                	add    %edx,%eax
f011639c:	c1 e0 03             	shl    $0x3,%eax
f011639f:	01 c8                	add    %ecx,%eax
f01163a1:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f01163a5:	ff 45 d0             	incl   -0x30(%ebp)
f01163a8:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f01163ac:	7e df                	jle    f011638d <test_priority_normal_and_higher+0x5ff>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01163ae:	e8 a8 65 ff ff       	call   f010c95b <sys_calculate_free_frames>
f01163b3:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01163b6:	e8 81 d9 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01163bb:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f01163be:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01163c1:	83 ec 08             	sub    $0x8,%esp
f01163c4:	6a 05                	push   $0x5
f01163c6:	50                   	push   %eax
f01163c7:	e8 6b 4a ff ff       	call   f010ae37 <set_program_priority>
f01163cc:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f01163cf:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01163d2:	83 ec 08             	sub    $0x8,%esp
f01163d5:	6a 04                	push   $0x4
f01163d7:	50                   	push   %eax
f01163d8:	e8 5a 4a ff ff       	call   f010ae37 <set_program_priority>
f01163dd:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01163e0:	e8 57 d9 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01163e5:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01163e8:	74 17                	je     f0116401 <test_priority_normal_and_higher+0x673>
f01163ea:	83 ec 04             	sub    $0x4,%esp
f01163ed:	68 b8 a6 13 f0       	push   $0xf013a6b8
f01163f2:	68 8e 00 00 00       	push   $0x8e
f01163f7:	68 51 a6 13 f0       	push   $0xf013a651
f01163fc:	e8 fa 9d fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116401:	e8 55 65 ff ff       	call   f010c95b <sys_calculate_free_frames>
f0116406:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116409:	74 17                	je     f0116422 <test_priority_normal_and_higher+0x694>
f011640b:	83 ec 04             	sub    $0x4,%esp
f011640e:	68 b8 a6 13 f0       	push   $0xf013a6b8
f0116413:	68 8f 00 00 00       	push   $0x8f
f0116418:	68 51 a6 13 f0       	push   $0xf013a651
f011641d:	e8 d9 9d fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0116422:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116425:	8b 40 74             	mov    0x74(%eax),%eax
f0116428:	83 f8 14             	cmp    $0x14,%eax
f011642b:	75 16                	jne    f0116443 <test_priority_normal_and_higher+0x6b5>
f011642d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116430:	8b 40 74             	mov    0x74(%eax),%eax
f0116433:	83 f8 1e             	cmp    $0x1e,%eax
f0116436:	75 0b                	jne    f0116443 <test_priority_normal_and_higher+0x6b5>
f0116438:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011643b:	8b 40 74             	mov    0x74(%eax),%eax
f011643e:	83 f8 28             	cmp    $0x28,%eax
f0116441:	74 17                	je     f011645a <test_priority_normal_and_higher+0x6cc>
			panic("The programs' working set size should be doubled if full\n");
f0116443:	83 ec 04             	sub    $0x4,%esp
f0116446:	68 ec a7 13 f0       	push   $0xf013a7ec
f011644b:	68 92 00 00 00       	push   $0x92
f0116450:	68 51 a6 13 f0       	push   $0xf013a651
f0116455:	e8 a1 9d fe ff       	call   f01001fb <_panic>

		for(int i = 15; i < 30; i++)
f011645a:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f0116461:	eb 1b                	jmp    f011647e <test_priority_normal_and_higher+0x6f0>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0116463:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116466:	8b 48 78             	mov    0x78(%eax),%ecx
f0116469:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011646c:	89 d0                	mov    %edx,%eax
f011646e:	01 c0                	add    %eax,%eax
f0116470:	01 d0                	add    %edx,%eax
f0116472:	c1 e0 03             	shl    $0x3,%eax
f0116475:	01 c8                	add    %ecx,%eax
f0116477:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f011647b:	ff 45 cc             	incl   -0x34(%ebp)
f011647e:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f0116482:	7e df                	jle    f0116463 <test_priority_normal_and_higher+0x6d5>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116484:	e8 d2 64 ff ff       	call   f010c95b <sys_calculate_free_frames>
f0116489:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011648c:	e8 ab d8 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116491:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0116494:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116497:	83 ec 08             	sub    $0x8,%esp
f011649a:	6a 05                	push   $0x5
f011649c:	50                   	push   %eax
f011649d:	e8 95 49 ff ff       	call   f010ae37 <set_program_priority>
f01164a2:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f01164a5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01164a8:	83 ec 08             	sub    $0x8,%esp
f01164ab:	6a 04                	push   $0x4
f01164ad:	50                   	push   %eax
f01164ae:	e8 84 49 ff ff       	call   f010ae37 <set_program_priority>
f01164b3:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01164b6:	e8 81 d8 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01164bb:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01164be:	74 17                	je     f01164d7 <test_priority_normal_and_higher+0x749>
f01164c0:	83 ec 04             	sub    $0x4,%esp
f01164c3:	68 b8 a6 13 f0       	push   $0xf013a6b8
f01164c8:	68 9d 00 00 00       	push   $0x9d
f01164cd:	68 51 a6 13 f0       	push   $0xf013a651
f01164d2:	e8 24 9d fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01164d7:	e8 7f 64 ff ff       	call   f010c95b <sys_calculate_free_frames>
f01164dc:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01164df:	74 17                	je     f01164f8 <test_priority_normal_and_higher+0x76a>
f01164e1:	83 ec 04             	sub    $0x4,%esp
f01164e4:	68 b8 a6 13 f0       	push   $0xf013a6b8
f01164e9:	68 9e 00 00 00       	push   $0x9e
f01164ee:	68 51 a6 13 f0       	push   $0xf013a651
f01164f3:	e8 03 9d fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f01164f8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01164fb:	8b 40 74             	mov    0x74(%eax),%eax
f01164fe:	83 f8 14             	cmp    $0x14,%eax
f0116501:	75 16                	jne    f0116519 <test_priority_normal_and_higher+0x78b>
f0116503:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116506:	8b 40 74             	mov    0x74(%eax),%eax
f0116509:	83 f8 3c             	cmp    $0x3c,%eax
f011650c:	75 0b                	jne    f0116519 <test_priority_normal_and_higher+0x78b>
f011650e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116511:	8b 40 74             	mov    0x74(%eax),%eax
f0116514:	83 f8 28             	cmp    $0x28,%eax
f0116517:	74 17                	je     f0116530 <test_priority_normal_and_higher+0x7a2>
			panic("The programs' working set size should be doubled if full\n");
f0116519:	83 ec 04             	sub    $0x4,%esp
f011651c:	68 ec a7 13 f0       	push   $0xf013a7ec
f0116521:	68 a1 00 00 00       	push   $0xa1
f0116526:	68 51 a6 13 f0       	push   $0xf013a651
f011652b:	e8 cb 9c fe ff       	call   f01001fb <_panic>

		for(int i = 15; i < 60; i++)
f0116530:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f0116537:	eb 1b                	jmp    f0116554 <test_priority_normal_and_higher+0x7c6>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f0116539:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011653c:	8b 48 78             	mov    0x78(%eax),%ecx
f011653f:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0116542:	89 d0                	mov    %edx,%eax
f0116544:	01 c0                	add    %eax,%eax
f0116546:	01 d0                	add    %edx,%eax
f0116548:	c1 e0 03             	shl    $0x3,%eax
f011654b:	01 c8                	add    %ecx,%eax
f011654d:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f0116551:	ff 45 c8             	incl   -0x38(%ebp)
f0116554:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f0116558:	7e df                	jle    f0116539 <test_priority_normal_and_higher+0x7ab>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f011655a:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f0116561:	eb 1b                	jmp    f011657e <test_priority_normal_and_higher+0x7f0>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f0116563:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116566:	8b 48 78             	mov    0x78(%eax),%ecx
f0116569:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011656c:	89 d0                	mov    %edx,%eax
f011656e:	01 c0                	add    %eax,%eax
f0116570:	01 d0                	add    %edx,%eax
f0116572:	c1 e0 03             	shl    $0x3,%eax
f0116575:	01 c8                	add    %ecx,%eax
f0116577:	c6 40 04 01          	movb   $0x1,0x4(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f011657b:	ff 45 c4             	incl   -0x3c(%ebp)
f011657e:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f0116582:	7e df                	jle    f0116563 <test_priority_normal_and_higher+0x7d5>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0116584:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f011658b:	eb 7a                	jmp    f0116607 <test_priority_normal_and_higher+0x879>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f011658d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116590:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f0116597:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011659a:	8b 58 78             	mov    0x78(%eax),%ebx
f011659d:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01165a0:	89 d0                	mov    %edx,%eax
f01165a2:	01 c0                	add    %eax,%eax
f01165a4:	01 d0                	add    %edx,%eax
f01165a6:	c1 e0 03             	shl    $0x3,%eax
f01165a9:	01 d8                	add    %ebx,%eax
f01165ab:	8b 00                	mov    (%eax),%eax
f01165ad:	39 c1                	cmp    %eax,%ecx
f01165af:	74 17                	je     f01165c8 <test_priority_normal_and_higher+0x83a>
				panic("Working set should be moved properly to the new one");
f01165b1:	83 ec 04             	sub    $0x4,%esp
f01165b4:	68 28 a8 13 f0       	push   $0xf013a828
f01165b9:	68 af 00 00 00       	push   $0xaf
f01165be:	68 51 a6 13 f0       	push   $0xf013a651
f01165c3:	e8 33 9c fe ff       	call   f01001fb <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f01165c8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01165cb:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f01165d2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01165d5:	8b 58 78             	mov    0x78(%eax),%ebx
f01165d8:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01165db:	89 d0                	mov    %edx,%eax
f01165dd:	01 c0                	add    %eax,%eax
f01165df:	01 d0                	add    %edx,%eax
f01165e1:	c1 e0 03             	shl    $0x3,%eax
f01165e4:	01 d8                	add    %ebx,%eax
f01165e6:	8b 40 08             	mov    0x8(%eax),%eax
f01165e9:	39 c1                	cmp    %eax,%ecx
f01165eb:	74 17                	je     f0116604 <test_priority_normal_and_higher+0x876>
				panic("Working set should be moved properly to the new one");
f01165ed:	83 ec 04             	sub    $0x4,%esp
f01165f0:	68 28 a8 13 f0       	push   $0xf013a828
f01165f5:	68 b2 00 00 00       	push   $0xb2
f01165fa:	68 51 a6 13 f0       	push   $0xf013a651
f01165ff:	e8 f7 9b fe ff       	call   f01001fb <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0116604:	ff 45 c0             	incl   -0x40(%ebp)
f0116607:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f011660b:	7e 80                	jle    f011658d <test_priority_normal_and_higher+0x7ff>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f011660d:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0116614:	eb 7a                	jmp    f0116690 <test_priority_normal_and_higher+0x902>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0116616:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116619:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f0116620:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116623:	8b 58 78             	mov    0x78(%eax),%ebx
f0116626:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0116629:	89 d0                	mov    %edx,%eax
f011662b:	01 c0                	add    %eax,%eax
f011662d:	01 d0                	add    %edx,%eax
f011662f:	c1 e0 03             	shl    $0x3,%eax
f0116632:	01 d8                	add    %ebx,%eax
f0116634:	8b 00                	mov    (%eax),%eax
f0116636:	39 c1                	cmp    %eax,%ecx
f0116638:	74 17                	je     f0116651 <test_priority_normal_and_higher+0x8c3>
				panic("Working set should be moved properly to the new one");
f011663a:	83 ec 04             	sub    $0x4,%esp
f011663d:	68 28 a8 13 f0       	push   $0xf013a828
f0116642:	68 b8 00 00 00       	push   $0xb8
f0116647:	68 51 a6 13 f0       	push   $0xf013a651
f011664c:	e8 aa 9b fe ff       	call   f01001fb <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0116651:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116654:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f011665b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011665e:	8b 58 78             	mov    0x78(%eax),%ebx
f0116661:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0116664:	89 d0                	mov    %edx,%eax
f0116666:	01 c0                	add    %eax,%eax
f0116668:	01 d0                	add    %edx,%eax
f011666a:	c1 e0 03             	shl    $0x3,%eax
f011666d:	01 d8                	add    %ebx,%eax
f011666f:	8b 40 08             	mov    0x8(%eax),%eax
f0116672:	39 c1                	cmp    %eax,%ecx
f0116674:	74 17                	je     f011668d <test_priority_normal_and_higher+0x8ff>
				panic("Working set should be moved properly to the new one");
f0116676:	83 ec 04             	sub    $0x4,%esp
f0116679:	68 28 a8 13 f0       	push   $0xf013a828
f011667e:	68 bb 00 00 00       	push   $0xbb
f0116683:	68 51 a6 13 f0       	push   $0xf013a651
f0116688:	e8 6e 9b fe ff       	call   f01001fb <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f011668d:	ff 45 bc             	incl   -0x44(%ebp)
f0116690:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f0116694:	7e 80                	jle    f0116616 <test_priority_normal_and_higher+0x888>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116696:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f011669d:	eb 7a                	jmp    f0116719 <test_priority_normal_and_higher+0x98b>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f011669f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01166a2:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f01166a9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01166ac:	8b 58 78             	mov    0x78(%eax),%ebx
f01166af:	8b 55 b8             	mov    -0x48(%ebp),%edx
f01166b2:	89 d0                	mov    %edx,%eax
f01166b4:	01 c0                	add    %eax,%eax
f01166b6:	01 d0                	add    %edx,%eax
f01166b8:	c1 e0 03             	shl    $0x3,%eax
f01166bb:	01 d8                	add    %ebx,%eax
f01166bd:	8b 00                	mov    (%eax),%eax
f01166bf:	39 c1                	cmp    %eax,%ecx
f01166c1:	74 17                	je     f01166da <test_priority_normal_and_higher+0x94c>
				panic("Working set should be moved properly to the new one");
f01166c3:	83 ec 04             	sub    $0x4,%esp
f01166c6:	68 28 a8 13 f0       	push   $0xf013a828
f01166cb:	68 c1 00 00 00       	push   $0xc1
f01166d0:	68 51 a6 13 f0       	push   $0xf013a651
f01166d5:	e8 21 9b fe ff       	call   f01001fb <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f01166da:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01166dd:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f01166e4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01166e7:	8b 58 78             	mov    0x78(%eax),%ebx
f01166ea:	8b 55 b8             	mov    -0x48(%ebp),%edx
f01166ed:	89 d0                	mov    %edx,%eax
f01166ef:	01 c0                	add    %eax,%eax
f01166f1:	01 d0                	add    %edx,%eax
f01166f3:	c1 e0 03             	shl    $0x3,%eax
f01166f6:	01 d8                	add    %ebx,%eax
f01166f8:	8b 40 08             	mov    0x8(%eax),%eax
f01166fb:	39 c1                	cmp    %eax,%ecx
f01166fd:	74 17                	je     f0116716 <test_priority_normal_and_higher+0x988>
				panic("Working set should be moved properly to the new one");
f01166ff:	83 ec 04             	sub    $0x4,%esp
f0116702:	68 28 a8 13 f0       	push   $0xf013a828
f0116707:	68 c4 00 00 00       	push   $0xc4
f011670c:	68 51 a6 13 f0       	push   $0xf013a651
f0116711:	e8 e5 9a fe ff       	call   f01001fb <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116716:	ff 45 b8             	incl   -0x48(%ebp)
f0116719:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f011671d:	7e 80                	jle    f011669f <test_priority_normal_and_higher+0x911>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f011671f:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f0116726:	75 6e 61 
f0116729:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f0116730:	6c 00 00 
f0116733:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f0116739:	b9 17 00 00 00       	mov    $0x17,%ecx
f011673e:	b8 00 00 00 00       	mov    $0x0,%eax
f0116743:	89 d7                	mov    %edx,%edi
f0116745:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0116747:	83 ec 0c             	sub    $0xc,%esp
f011674a:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0116750:	50                   	push   %eax
f0116751:	e8 8e a5 fe ff       	call   f0100ce4 <execute_command>
f0116756:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
}
f0116759:	eb 10                	jmp    f011676b <test_priority_normal_and_higher+0x9dd>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f011675b:	83 ec 0c             	sub    $0xc,%esp
f011675e:	68 5c a8 13 f0       	push   $0xf013a85c
f0116763:	e8 1a a5 fe ff       	call   f0100c82 <cprintf>
f0116768:	83 c4 10             	add    $0x10,%esp
	}
}
f011676b:	90                   	nop
f011676c:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011676f:	5b                   	pop    %ebx
f0116770:	5e                   	pop    %esi
f0116771:	5f                   	pop    %edi
f0116772:	5d                   	pop    %ebp
f0116773:	c3                   	ret    

f0116774 <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f0116774:	55                   	push   %ebp
f0116775:	89 e5                	mov    %esp,%ebp
f0116777:	57                   	push   %edi
f0116778:	56                   	push   %esi
f0116779:	53                   	push   %ebx
f011677a:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
	if(firstTime)
f0116780:	a0 ce 1c 19 f0       	mov    0xf0191cce,%al
f0116785:	84 c0                	test   %al,%al
f0116787:	0f 84 be 09 00 00    	je     f011714b <test_priority_normal_and_lower+0x9d7>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f011678d:	c6 05 ce 1c 19 f0 00 	movb   $0x0,0xf0191cce
		char command[100] = "load fos_add 20";
f0116794:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f011679a:	bb 98 a8 13 f0       	mov    $0xf013a898,%ebx
f011679f:	ba 04 00 00 00       	mov    $0x4,%edx
f01167a4:	89 c7                	mov    %eax,%edi
f01167a6:	89 de                	mov    %ebx,%esi
f01167a8:	89 d1                	mov    %edx,%ecx
f01167aa:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01167ac:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f01167b2:	b9 15 00 00 00       	mov    $0x15,%ecx
f01167b7:	b8 00 00 00 00       	mov    $0x0,%eax
f01167bc:	89 d7                	mov    %edx,%edi
f01167be:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f01167c0:	83 ec 0c             	sub    $0xc,%esp
f01167c3:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f01167c9:	50                   	push   %eax
f01167ca:	e8 15 a5 fe ff       	call   f0100ce4 <execute_command>
f01167cf:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f01167d2:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f01167d8:	bb 54 ab 13 f0       	mov    $0xf013ab54,%ebx
f01167dd:	ba 0d 00 00 00       	mov    $0xd,%edx
f01167e2:	89 c7                	mov    %eax,%edi
f01167e4:	89 de                	mov    %ebx,%esi
f01167e6:	89 d1                	mov    %edx,%ecx
f01167e8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01167ea:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f01167f0:	b9 57 00 00 00       	mov    $0x57,%ecx
f01167f5:	b0 00                	mov    $0x0,%al
f01167f7:	89 d7                	mov    %edx,%edi
f01167f9:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f01167fb:	83 ec 0c             	sub    $0xc,%esp
f01167fe:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0116804:	50                   	push   %eax
f0116805:	e8 da a4 fe ff       	call   f0100ce4 <execute_command>
f011680a:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f011680d:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0116813:	bb b8 ab 13 f0       	mov    $0xf013abb8,%ebx
f0116818:	ba 17 00 00 00       	mov    $0x17,%edx
f011681d:	89 c7                	mov    %eax,%edi
f011681f:	89 de                	mov    %ebx,%esi
f0116821:	89 d1                	mov    %edx,%ecx
f0116823:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116825:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f011682b:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0116830:	b0 00                	mov    $0x0,%al
f0116832:	89 d7                	mov    %edx,%edi
f0116834:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0116836:	83 ec 0c             	sub    $0xc,%esp
f0116839:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f011683f:	50                   	push   %eax
f0116840:	e8 9f a4 fe ff       	call   f0100ce4 <execute_command>
f0116845:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0116848:	83 ec 04             	sub    $0x4,%esp
f011684b:	6a 00                	push   $0x0
f011684d:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0116850:	50                   	push   %eax
f0116851:	68 00 10 00 00       	push   $0x1000
f0116856:	e8 47 31 ff ff       	call   f01099a2 <envid2env>
f011685b:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f011685e:	83 ec 04             	sub    $0x4,%esp
f0116861:	6a 00                	push   $0x0
f0116863:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0116866:	50                   	push   %eax
f0116867:	68 01 10 00 00       	push   $0x1001
f011686c:	e8 31 31 ff ff       	call   f01099a2 <envid2env>
f0116871:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0116874:	83 ec 04             	sub    $0x4,%esp
f0116877:	6a 00                	push   $0x0
f0116879:	8d 45 b0             	lea    -0x50(%ebp),%eax
f011687c:	50                   	push   %eax
f011687d:	68 02 10 00 00       	push   $0x1002
f0116882:	e8 1b 31 ff ff       	call   f01099a2 <envid2env>
f0116887:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f011688a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011688d:	85 c0                	test   %eax,%eax
f011688f:	74 0e                	je     f011689f <test_priority_normal_and_lower+0x12b>
f0116891:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116894:	85 c0                	test   %eax,%eax
f0116896:	74 07                	je     f011689f <test_priority_normal_and_lower+0x12b>
f0116898:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011689b:	85 c0                	test   %eax,%eax
f011689d:	75 17                	jne    f01168b6 <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f011689f:	83 ec 04             	sub    $0x4,%esp
f01168a2:	68 38 a6 13 f0       	push   $0xf013a638
f01168a7:	68 eb 00 00 00       	push   $0xeb
f01168ac:	68 51 a6 13 f0       	push   $0xf013a651
f01168b1:	e8 45 99 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f01168b6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01168b9:	8b 40 74             	mov    0x74(%eax),%eax
f01168bc:	83 f8 14             	cmp    $0x14,%eax
f01168bf:	75 16                	jne    f01168d7 <test_priority_normal_and_lower+0x163>
f01168c1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01168c4:	8b 40 74             	mov    0x74(%eax),%eax
f01168c7:	83 f8 1e             	cmp    $0x1e,%eax
f01168ca:	75 0b                	jne    f01168d7 <test_priority_normal_and_lower+0x163>
f01168cc:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01168cf:	8b 40 74             	mov    0x74(%eax),%eax
f01168d2:	83 f8 28             	cmp    $0x28,%eax
f01168d5:	74 17                	je     f01168ee <test_priority_normal_and_lower+0x17a>
			panic("The programs should be initially loaded with the given working set size\n");
f01168d7:	83 ec 04             	sub    $0x4,%esp
f01168da:	68 6c a6 13 f0       	push   $0xf013a66c
f01168df:	68 ee 00 00 00       	push   $0xee
f01168e4:	68 51 a6 13 f0       	push   $0xf013a651
f01168e9:	e8 0d 99 fe ff       	call   f01001fb <_panic>

		for(int i = 0; i < 20; i++)
f01168ee:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f01168f5:	eb 44                	jmp    f011693b <test_priority_normal_and_lower+0x1c7>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f01168f7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01168fa:	8b 48 78             	mov    0x78(%eax),%ecx
f01168fd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116900:	89 d0                	mov    %edx,%eax
f0116902:	01 c0                	add    %eax,%eax
f0116904:	01 d0                	add    %edx,%eax
f0116906:	c1 e0 03             	shl    $0x3,%eax
f0116909:	01 c8                	add    %ecx,%eax
f011690b:	8b 10                	mov    (%eax),%edx
f011690d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116910:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0116917:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011691a:	8b 48 78             	mov    0x78(%eax),%ecx
f011691d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116920:	89 d0                	mov    %edx,%eax
f0116922:	01 c0                	add    %eax,%eax
f0116924:	01 d0                	add    %edx,%eax
f0116926:	c1 e0 03             	shl    $0x3,%eax
f0116929:	01 c8                	add    %ecx,%eax
f011692b:	8b 50 08             	mov    0x8(%eax),%edx
f011692e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116931:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0116938:	ff 45 e4             	incl   -0x1c(%ebp)
f011693b:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f011693f:	7e b6                	jle    f01168f7 <test_priority_normal_and_lower+0x183>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0116941:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0116948:	eb 44                	jmp    f011698e <test_priority_normal_and_lower+0x21a>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f011694a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011694d:	8b 48 78             	mov    0x78(%eax),%ecx
f0116950:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0116953:	89 d0                	mov    %edx,%eax
f0116955:	01 c0                	add    %eax,%eax
f0116957:	01 d0                	add    %edx,%eax
f0116959:	c1 e0 03             	shl    $0x3,%eax
f011695c:	01 c8                	add    %ecx,%eax
f011695e:	8b 10                	mov    (%eax),%edx
f0116960:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116963:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f011696a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011696d:	8b 48 78             	mov    0x78(%eax),%ecx
f0116970:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0116973:	89 d0                	mov    %edx,%eax
f0116975:	01 c0                	add    %eax,%eax
f0116977:	01 d0                	add    %edx,%eax
f0116979:	c1 e0 03             	shl    $0x3,%eax
f011697c:	01 c8                	add    %ecx,%eax
f011697e:	8b 50 08             	mov    0x8(%eax),%edx
f0116981:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116984:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f011698b:	ff 45 e0             	incl   -0x20(%ebp)
f011698e:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f0116992:	7e b6                	jle    f011694a <test_priority_normal_and_lower+0x1d6>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0116994:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f011699b:	eb 44                	jmp    f01169e1 <test_priority_normal_and_lower+0x26d>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f011699d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01169a0:	8b 48 78             	mov    0x78(%eax),%ecx
f01169a3:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01169a6:	89 d0                	mov    %edx,%eax
f01169a8:	01 c0                	add    %eax,%eax
f01169aa:	01 d0                	add    %edx,%eax
f01169ac:	c1 e0 03             	shl    $0x3,%eax
f01169af:	01 c8                	add    %ecx,%eax
f01169b1:	8b 10                	mov    (%eax),%edx
f01169b3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01169b6:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f01169bd:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01169c0:	8b 48 78             	mov    0x78(%eax),%ecx
f01169c3:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01169c6:	89 d0                	mov    %edx,%eax
f01169c8:	01 c0                	add    %eax,%eax
f01169ca:	01 d0                	add    %edx,%eax
f01169cc:	c1 e0 03             	shl    $0x3,%eax
f01169cf:	01 c8                	add    %ecx,%eax
f01169d1:	8b 50 08             	mov    0x8(%eax),%edx
f01169d4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01169d7:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f01169de:	ff 45 dc             	incl   -0x24(%ebp)
f01169e1:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f01169e5:	7e b6                	jle    f011699d <test_priority_normal_and_lower+0x229>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f01169e7:	e8 6f 5f ff ff       	call   f010c95b <sys_calculate_free_frames>
f01169ec:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01169ef:	e8 48 d3 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01169f4:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f01169f7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01169fa:	83 ec 08             	sub    $0x8,%esp
f01169fd:	6a 03                	push   $0x3
f01169ff:	50                   	push   %eax
f0116a00:	e8 32 44 ff ff       	call   f010ae37 <set_program_priority>
f0116a05:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0116a08:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116a0b:	83 ec 08             	sub    $0x8,%esp
f0116a0e:	6a 03                	push   $0x3
f0116a10:	50                   	push   %eax
f0116a11:	e8 21 44 ff ff       	call   f010ae37 <set_program_priority>
f0116a16:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0116a19:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116a1c:	83 ec 08             	sub    $0x8,%esp
f0116a1f:	6a 03                	push   $0x3
f0116a21:	50                   	push   %eax
f0116a22:	e8 10 44 ff ff       	call   f010ae37 <set_program_priority>
f0116a27:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116a2a:	e8 0d d3 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116a2f:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116a32:	74 17                	je     f0116a4b <test_priority_normal_and_lower+0x2d7>
f0116a34:	83 ec 04             	sub    $0x4,%esp
f0116a37:	68 b8 a6 13 f0       	push   $0xf013a6b8
f0116a3c:	68 0a 01 00 00       	push   $0x10a
f0116a41:	68 51 a6 13 f0       	push   $0xf013a651
f0116a46:	e8 b0 97 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116a4b:	e8 0b 5f ff ff       	call   f010c95b <sys_calculate_free_frames>
f0116a50:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0116a53:	74 17                	je     f0116a6c <test_priority_normal_and_lower+0x2f8>
f0116a55:	83 ec 04             	sub    $0x4,%esp
f0116a58:	68 b8 a6 13 f0       	push   $0xf013a6b8
f0116a5d:	68 0b 01 00 00       	push   $0x10b
f0116a62:	68 51 a6 13 f0       	push   $0xf013a651
f0116a67:	e8 8f 97 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0116a6c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116a6f:	8b 40 74             	mov    0x74(%eax),%eax
f0116a72:	83 f8 14             	cmp    $0x14,%eax
f0116a75:	75 16                	jne    f0116a8d <test_priority_normal_and_lower+0x319>
f0116a77:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116a7a:	8b 40 74             	mov    0x74(%eax),%eax
f0116a7d:	83 f8 1e             	cmp    $0x1e,%eax
f0116a80:	75 0b                	jne    f0116a8d <test_priority_normal_and_lower+0x319>
f0116a82:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116a85:	8b 40 74             	mov    0x74(%eax),%eax
f0116a88:	83 f8 28             	cmp    $0x28,%eax
f0116a8b:	74 17                	je     f0116aa4 <test_priority_normal_and_lower+0x330>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0116a8d:	83 ec 04             	sub    $0x4,%esp
f0116a90:	68 e4 a6 13 f0       	push   $0xf013a6e4
f0116a95:	68 0e 01 00 00       	push   $0x10e
f0116a9a:	68 51 a6 13 f0       	push   $0xf013a651
f0116a9f:	e8 57 97 fe ff       	call   f01001fb <_panic>

		freeFrames = sys_calculate_free_frames();
f0116aa4:	e8 b2 5e ff ff       	call   f010c95b <sys_calculate_free_frames>
f0116aa9:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116aac:	e8 8b d2 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116ab1:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0116ab4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116ab7:	83 ec 08             	sub    $0x8,%esp
f0116aba:	6a 02                	push   $0x2
f0116abc:	50                   	push   %eax
f0116abd:	e8 75 43 ff ff       	call   f010ae37 <set_program_priority>
f0116ac2:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0116ac5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116ac8:	83 ec 08             	sub    $0x8,%esp
f0116acb:	6a 02                	push   $0x2
f0116acd:	50                   	push   %eax
f0116ace:	e8 64 43 ff ff       	call   f010ae37 <set_program_priority>
f0116ad3:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0116ad6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116ad9:	83 ec 08             	sub    $0x8,%esp
f0116adc:	6a 02                	push   $0x2
f0116ade:	50                   	push   %eax
f0116adf:	e8 53 43 ff ff       	call   f010ae37 <set_program_priority>
f0116ae4:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116ae7:	e8 50 d2 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116aec:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116aef:	74 17                	je     f0116b08 <test_priority_normal_and_lower+0x394>
f0116af1:	83 ec 04             	sub    $0x4,%esp
f0116af4:	68 b8 a6 13 f0       	push   $0xf013a6b8
f0116af9:	68 18 01 00 00       	push   $0x118
f0116afe:	68 51 a6 13 f0       	push   $0xf013a651
f0116b03:	e8 f3 96 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0116b08:	e8 4e 5e ff ff       	call   f010c95b <sys_calculate_free_frames>
f0116b0d:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0116b10:	74 21                	je     f0116b33 <test_priority_normal_and_lower+0x3bf>
f0116b12:	e8 44 5e ff ff       	call   f010c95b <sys_calculate_free_frames>
f0116b17:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116b1a:	29 c2                	sub    %eax,%edx
f0116b1c:	89 d0                	mov    %edx,%eax
f0116b1e:	50                   	push   %eax
f0116b1f:	68 38 a7 13 f0       	push   $0xf013a738
f0116b24:	68 19 01 00 00       	push   $0x119
f0116b29:	68 51 a6 13 f0       	push   $0xf013a651
f0116b2e:	e8 c8 96 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116b33:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116b36:	8b 40 74             	mov    0x74(%eax),%eax
f0116b39:	83 f8 0a             	cmp    $0xa,%eax
f0116b3c:	75 16                	jne    f0116b54 <test_priority_normal_and_lower+0x3e0>
f0116b3e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116b41:	8b 40 74             	mov    0x74(%eax),%eax
f0116b44:	83 f8 0f             	cmp    $0xf,%eax
f0116b47:	75 0b                	jne    f0116b54 <test_priority_normal_and_lower+0x3e0>
f0116b49:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116b4c:	8b 40 74             	mov    0x74(%eax),%eax
f0116b4f:	83 f8 14             	cmp    $0x14,%eax
f0116b52:	74 17                	je     f0116b6b <test_priority_normal_and_lower+0x3f7>
			panic("The programs' working set size should be doubled only if it is full\n");
f0116b54:	83 ec 04             	sub    $0x4,%esp
f0116b57:	68 68 a7 13 f0       	push   $0xf013a768
f0116b5c:	68 1c 01 00 00       	push   $0x11c
f0116b61:	68 51 a6 13 f0       	push   $0xf013a651
f0116b66:	e8 90 96 fe ff       	call   f01001fb <_panic>

		freeFrames = sys_calculate_free_frames();
f0116b6b:	e8 eb 5d ff ff       	call   f010c95b <sys_calculate_free_frames>
f0116b70:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116b73:	e8 c4 d1 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116b78:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0116b7b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116b7e:	83 ec 08             	sub    $0x8,%esp
f0116b81:	6a 02                	push   $0x2
f0116b83:	50                   	push   %eax
f0116b84:	e8 ae 42 ff ff       	call   f010ae37 <set_program_priority>
f0116b89:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0116b8c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116b8f:	83 ec 08             	sub    $0x8,%esp
f0116b92:	6a 02                	push   $0x2
f0116b94:	50                   	push   %eax
f0116b95:	e8 9d 42 ff ff       	call   f010ae37 <set_program_priority>
f0116b9a:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0116b9d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116ba0:	83 ec 08             	sub    $0x8,%esp
f0116ba3:	6a 02                	push   $0x2
f0116ba5:	50                   	push   %eax
f0116ba6:	e8 8c 42 ff ff       	call   f010ae37 <set_program_priority>
f0116bab:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116bae:	e8 89 d1 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116bb3:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116bb6:	74 17                	je     f0116bcf <test_priority_normal_and_lower+0x45b>
f0116bb8:	83 ec 04             	sub    $0x4,%esp
f0116bbb:	68 b8 a6 13 f0       	push   $0xf013a6b8
f0116bc0:	68 26 01 00 00       	push   $0x126
f0116bc5:	68 51 a6 13 f0       	push   $0xf013a651
f0116bca:	e8 2c 96 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0116bcf:	e8 87 5d ff ff       	call   f010c95b <sys_calculate_free_frames>
f0116bd4:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0116bd7:	74 21                	je     f0116bfa <test_priority_normal_and_lower+0x486>
f0116bd9:	e8 7d 5d ff ff       	call   f010c95b <sys_calculate_free_frames>
f0116bde:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116be1:	29 c2                	sub    %eax,%edx
f0116be3:	89 d0                	mov    %edx,%eax
f0116be5:	50                   	push   %eax
f0116be6:	68 38 a7 13 f0       	push   $0xf013a738
f0116beb:	68 27 01 00 00       	push   $0x127
f0116bf0:	68 51 a6 13 f0       	push   $0xf013a651
f0116bf5:	e8 01 96 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0116bfa:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116bfd:	8b 40 74             	mov    0x74(%eax),%eax
f0116c00:	83 f8 0a             	cmp    $0xa,%eax
f0116c03:	75 16                	jne    f0116c1b <test_priority_normal_and_lower+0x4a7>
f0116c05:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116c08:	8b 40 74             	mov    0x74(%eax),%eax
f0116c0b:	83 f8 0f             	cmp    $0xf,%eax
f0116c0e:	75 0b                	jne    f0116c1b <test_priority_normal_and_lower+0x4a7>
f0116c10:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116c13:	8b 40 74             	mov    0x74(%eax),%eax
f0116c16:	83 f8 0a             	cmp    $0xa,%eax
f0116c19:	74 17                	je     f0116c32 <test_priority_normal_and_lower+0x4be>
			panic("The programs' working set size should be doubled only if it is full\n");
f0116c1b:	83 ec 04             	sub    $0x4,%esp
f0116c1e:	68 68 a7 13 f0       	push   $0xf013a768
f0116c23:	68 2a 01 00 00       	push   $0x12a
f0116c28:	68 51 a6 13 f0       	push   $0xf013a651
f0116c2d:	e8 c9 95 fe ff       	call   f01001fb <_panic>

		for(int i = 0; i < 10; i++)
f0116c32:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0116c39:	eb 7a                	jmp    f0116cb5 <test_priority_normal_and_lower+0x541>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0116c3b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116c3e:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0116c45:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116c48:	8b 58 78             	mov    0x78(%eax),%ebx
f0116c4b:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0116c4e:	89 d0                	mov    %edx,%eax
f0116c50:	01 c0                	add    %eax,%eax
f0116c52:	01 d0                	add    %edx,%eax
f0116c54:	c1 e0 03             	shl    $0x3,%eax
f0116c57:	01 d8                	add    %ebx,%eax
f0116c59:	8b 00                	mov    (%eax),%eax
f0116c5b:	39 c1                	cmp    %eax,%ecx
f0116c5d:	74 17                	je     f0116c76 <test_priority_normal_and_lower+0x502>
				panic("Working set should be moved properly to the new one");
f0116c5f:	83 ec 04             	sub    $0x4,%esp
f0116c62:	68 28 a8 13 f0       	push   $0xf013a828
f0116c67:	68 2f 01 00 00       	push   $0x12f
f0116c6c:	68 51 a6 13 f0       	push   $0xf013a651
f0116c71:	e8 85 95 fe ff       	call   f01001fb <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0116c76:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116c79:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0116c80:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116c83:	8b 58 78             	mov    0x78(%eax),%ebx
f0116c86:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0116c89:	89 d0                	mov    %edx,%eax
f0116c8b:	01 c0                	add    %eax,%eax
f0116c8d:	01 d0                	add    %edx,%eax
f0116c8f:	c1 e0 03             	shl    $0x3,%eax
f0116c92:	01 d8                	add    %ebx,%eax
f0116c94:	8b 40 08             	mov    0x8(%eax),%eax
f0116c97:	39 c1                	cmp    %eax,%ecx
f0116c99:	74 17                	je     f0116cb2 <test_priority_normal_and_lower+0x53e>
				panic("Working set should be moved properly to the new one");
f0116c9b:	83 ec 04             	sub    $0x4,%esp
f0116c9e:	68 28 a8 13 f0       	push   $0xf013a828
f0116ca3:	68 32 01 00 00       	push   $0x132
f0116ca8:	68 51 a6 13 f0       	push   $0xf013a651
f0116cad:	e8 49 95 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f0116cb2:	ff 45 d8             	incl   -0x28(%ebp)
f0116cb5:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f0116cb9:	7e 80                	jle    f0116c3b <test_priority_normal_and_lower+0x4c7>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116cbb:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0116cc2:	eb 7a                	jmp    f0116d3e <test_priority_normal_and_lower+0x5ca>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0116cc4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116cc7:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0116cce:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116cd1:	8b 58 78             	mov    0x78(%eax),%ebx
f0116cd4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0116cd7:	89 d0                	mov    %edx,%eax
f0116cd9:	01 c0                	add    %eax,%eax
f0116cdb:	01 d0                	add    %edx,%eax
f0116cdd:	c1 e0 03             	shl    $0x3,%eax
f0116ce0:	01 d8                	add    %ebx,%eax
f0116ce2:	8b 00                	mov    (%eax),%eax
f0116ce4:	39 c1                	cmp    %eax,%ecx
f0116ce6:	74 17                	je     f0116cff <test_priority_normal_and_lower+0x58b>
				panic("Working set should be moved properly to the new one");
f0116ce8:	83 ec 04             	sub    $0x4,%esp
f0116ceb:	68 28 a8 13 f0       	push   $0xf013a828
f0116cf0:	68 38 01 00 00       	push   $0x138
f0116cf5:	68 51 a6 13 f0       	push   $0xf013a651
f0116cfa:	e8 fc 94 fe ff       	call   f01001fb <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0116cff:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116d02:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0116d09:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116d0c:	8b 58 78             	mov    0x78(%eax),%ebx
f0116d0f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0116d12:	89 d0                	mov    %edx,%eax
f0116d14:	01 c0                	add    %eax,%eax
f0116d16:	01 d0                	add    %edx,%eax
f0116d18:	c1 e0 03             	shl    $0x3,%eax
f0116d1b:	01 d8                	add    %ebx,%eax
f0116d1d:	8b 40 08             	mov    0x8(%eax),%eax
f0116d20:	39 c1                	cmp    %eax,%ecx
f0116d22:	74 17                	je     f0116d3b <test_priority_normal_and_lower+0x5c7>
				panic("Working set should be moved properly to the new one");
f0116d24:	83 ec 04             	sub    $0x4,%esp
f0116d27:	68 28 a8 13 f0       	push   $0xf013a828
f0116d2c:	68 3b 01 00 00       	push   $0x13b
f0116d31:	68 51 a6 13 f0       	push   $0xf013a651
f0116d36:	e8 c0 94 fe ff       	call   f01001fb <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116d3b:	ff 45 d4             	incl   -0x2c(%ebp)
f0116d3e:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0116d42:	7e 80                	jle    f0116cc4 <test_priority_normal_and_lower+0x550>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116d44:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0116d4b:	eb 7a                	jmp    f0116dc7 <test_priority_normal_and_lower+0x653>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0116d4d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116d50:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0116d57:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116d5a:	8b 58 78             	mov    0x78(%eax),%ebx
f0116d5d:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0116d60:	89 d0                	mov    %edx,%eax
f0116d62:	01 c0                	add    %eax,%eax
f0116d64:	01 d0                	add    %edx,%eax
f0116d66:	c1 e0 03             	shl    $0x3,%eax
f0116d69:	01 d8                	add    %ebx,%eax
f0116d6b:	8b 00                	mov    (%eax),%eax
f0116d6d:	39 c1                	cmp    %eax,%ecx
f0116d6f:	74 17                	je     f0116d88 <test_priority_normal_and_lower+0x614>
				panic("Working set should be moved properly to the new one");
f0116d71:	83 ec 04             	sub    $0x4,%esp
f0116d74:	68 28 a8 13 f0       	push   $0xf013a828
f0116d79:	68 41 01 00 00       	push   $0x141
f0116d7e:	68 51 a6 13 f0       	push   $0xf013a651
f0116d83:	e8 73 94 fe ff       	call   f01001fb <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0116d88:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116d8b:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0116d92:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116d95:	8b 58 78             	mov    0x78(%eax),%ebx
f0116d98:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0116d9b:	89 d0                	mov    %edx,%eax
f0116d9d:	01 c0                	add    %eax,%eax
f0116d9f:	01 d0                	add    %edx,%eax
f0116da1:	c1 e0 03             	shl    $0x3,%eax
f0116da4:	01 d8                	add    %ebx,%eax
f0116da6:	8b 40 08             	mov    0x8(%eax),%eax
f0116da9:	39 c1                	cmp    %eax,%ecx
f0116dab:	74 17                	je     f0116dc4 <test_priority_normal_and_lower+0x650>
				panic("Working set should be moved properly to the new one");
f0116dad:	83 ec 04             	sub    $0x4,%esp
f0116db0:	68 28 a8 13 f0       	push   $0xf013a828
f0116db5:	68 44 01 00 00       	push   $0x144
f0116dba:	68 51 a6 13 f0       	push   $0xf013a651
f0116dbf:	e8 37 94 fe ff       	call   f01001fb <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116dc4:	ff 45 d0             	incl   -0x30(%ebp)
f0116dc7:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f0116dcb:	7e 80                	jle    f0116d4d <test_priority_normal_and_lower+0x5d9>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f0116dcd:	e8 89 5b ff ff       	call   f010c95b <sys_calculate_free_frames>
f0116dd2:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116dd5:	e8 62 cf fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116dda:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0116ddd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116de0:	83 ec 08             	sub    $0x8,%esp
f0116de3:	6a 01                	push   $0x1
f0116de5:	50                   	push   %eax
f0116de6:	e8 4c 40 ff ff       	call   f010ae37 <set_program_priority>
f0116deb:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f0116dee:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116df1:	83 ec 08             	sub    $0x8,%esp
f0116df4:	6a 01                	push   $0x1
f0116df6:	50                   	push   %eax
f0116df7:	e8 3b 40 ff ff       	call   f010ae37 <set_program_priority>
f0116dfc:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f0116dff:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116e02:	83 ec 08             	sub    $0x8,%esp
f0116e05:	6a 01                	push   $0x1
f0116e07:	50                   	push   %eax
f0116e08:	e8 2a 40 ff ff       	call   f010ae37 <set_program_priority>
f0116e0d:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116e10:	e8 27 cf fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116e15:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116e18:	74 17                	je     f0116e31 <test_priority_normal_and_lower+0x6bd>
f0116e1a:	83 ec 04             	sub    $0x4,%esp
f0116e1d:	68 b8 a6 13 f0       	push   $0xf013a6b8
f0116e22:	68 4d 01 00 00       	push   $0x14d
f0116e27:	68 51 a6 13 f0       	push   $0xf013a651
f0116e2c:	e8 ca 93 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f0116e31:	e8 25 5b ff ff       	call   f010c95b <sys_calculate_free_frames>
f0116e36:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0116e39:	83 f8 0d             	cmp    $0xd,%eax
f0116e3c:	74 17                	je     f0116e55 <test_priority_normal_and_lower+0x6e1>
f0116e3e:	83 ec 04             	sub    $0x4,%esp
f0116e41:	68 c4 a9 13 f0       	push   $0xf013a9c4
f0116e46:	68 4e 01 00 00       	push   $0x14e
f0116e4b:	68 51 a6 13 f0       	push   $0xf013a651
f0116e50:	e8 a6 93 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0116e55:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116e58:	8b 40 74             	mov    0x74(%eax),%eax
f0116e5b:	83 f8 05             	cmp    $0x5,%eax
f0116e5e:	75 16                	jne    f0116e76 <test_priority_normal_and_lower+0x702>
f0116e60:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116e63:	8b 40 74             	mov    0x74(%eax),%eax
f0116e66:	83 f8 07             	cmp    $0x7,%eax
f0116e69:	75 0b                	jne    f0116e76 <test_priority_normal_and_lower+0x702>
f0116e6b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116e6e:	8b 40 74             	mov    0x74(%eax),%eax
f0116e71:	83 f8 05             	cmp    $0x5,%eax
f0116e74:	74 17                	je     f0116e8d <test_priority_normal_and_lower+0x719>
			panic("The programs' working set size should be half\n");
f0116e76:	83 ec 04             	sub    $0x4,%esp
f0116e79:	68 0c aa 13 f0       	push   $0xf013aa0c
f0116e7e:	68 51 01 00 00       	push   $0x151
f0116e83:	68 51 a6 13 f0       	push   $0xf013a651
f0116e88:	e8 6e 93 fe ff       	call   f01001fb <_panic>


		freeFrames = sys_calculate_free_frames();
f0116e8d:	e8 c9 5a ff ff       	call   f010c95b <sys_calculate_free_frames>
f0116e92:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116e95:	e8 a2 ce fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116e9a:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0116e9d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116ea0:	83 ec 08             	sub    $0x8,%esp
f0116ea3:	6a 01                	push   $0x1
f0116ea5:	50                   	push   %eax
f0116ea6:	e8 8c 3f ff ff       	call   f010ae37 <set_program_priority>
f0116eab:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116eae:	e8 89 ce fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116eb3:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116eb6:	74 17                	je     f0116ecf <test_priority_normal_and_lower+0x75b>
f0116eb8:	83 ec 04             	sub    $0x4,%esp
f0116ebb:	68 b8 a6 13 f0       	push   $0xf013a6b8
f0116ec0:	68 57 01 00 00       	push   $0x157
f0116ec5:	68 51 a6 13 f0       	push   $0xf013a651
f0116eca:	e8 2c 93 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f0116ecf:	e8 87 5a ff ff       	call   f010c95b <sys_calculate_free_frames>
f0116ed4:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0116ed7:	83 f8 03             	cmp    $0x3,%eax
f0116eda:	74 17                	je     f0116ef3 <test_priority_normal_and_lower+0x77f>
f0116edc:	83 ec 04             	sub    $0x4,%esp
f0116edf:	68 b8 a6 13 f0       	push   $0xf013a6b8
f0116ee4:	68 58 01 00 00       	push   $0x158
f0116ee9:	68 51 a6 13 f0       	push   $0xf013a651
f0116eee:	e8 08 93 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0116ef3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116ef6:	8b 40 74             	mov    0x74(%eax),%eax
f0116ef9:	83 f8 02             	cmp    $0x2,%eax
f0116efc:	75 16                	jne    f0116f14 <test_priority_normal_and_lower+0x7a0>
f0116efe:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116f01:	8b 40 74             	mov    0x74(%eax),%eax
f0116f04:	83 f8 07             	cmp    $0x7,%eax
f0116f07:	75 0b                	jne    f0116f14 <test_priority_normal_and_lower+0x7a0>
f0116f09:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116f0c:	8b 40 74             	mov    0x74(%eax),%eax
f0116f0f:	83 f8 05             	cmp    $0x5,%eax
f0116f12:	74 17                	je     f0116f2b <test_priority_normal_and_lower+0x7b7>
			panic("The programs' working set size should be doubled if full\n");
f0116f14:	83 ec 04             	sub    $0x4,%esp
f0116f17:	68 ec a7 13 f0       	push   $0xf013a7ec
f0116f1c:	68 5b 01 00 00       	push   $0x15b
f0116f21:	68 51 a6 13 f0       	push   $0xf013a651
f0116f26:	e8 d0 92 fe ff       	call   f01001fb <_panic>

		for(int i = 0; i < 2; i++)
f0116f2b:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0116f32:	e9 80 00 00 00       	jmp    f0116fb7 <test_priority_normal_and_lower+0x843>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0116f37:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116f3a:	83 c0 08             	add    $0x8,%eax
f0116f3d:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0116f44:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116f47:	8b 58 78             	mov    0x78(%eax),%ebx
f0116f4a:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116f4d:	89 d0                	mov    %edx,%eax
f0116f4f:	01 c0                	add    %eax,%eax
f0116f51:	01 d0                	add    %edx,%eax
f0116f53:	c1 e0 03             	shl    $0x3,%eax
f0116f56:	01 d8                	add    %ebx,%eax
f0116f58:	8b 00                	mov    (%eax),%eax
f0116f5a:	39 c1                	cmp    %eax,%ecx
f0116f5c:	74 17                	je     f0116f75 <test_priority_normal_and_lower+0x801>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116f5e:	83 ec 04             	sub    $0x4,%esp
f0116f61:	68 3c aa 13 f0       	push   $0xf013aa3c
f0116f66:	68 60 01 00 00       	push   $0x160
f0116f6b:	68 51 a6 13 f0       	push   $0xf013a651
f0116f70:	e8 86 92 fe ff       	call   f01001fb <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0116f75:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116f78:	83 c0 08             	add    $0x8,%eax
f0116f7b:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0116f82:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116f85:	8b 58 78             	mov    0x78(%eax),%ebx
f0116f88:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116f8b:	89 d0                	mov    %edx,%eax
f0116f8d:	01 c0                	add    %eax,%eax
f0116f8f:	01 d0                	add    %edx,%eax
f0116f91:	c1 e0 03             	shl    $0x3,%eax
f0116f94:	01 d8                	add    %ebx,%eax
f0116f96:	8b 40 08             	mov    0x8(%eax),%eax
f0116f99:	39 c1                	cmp    %eax,%ecx
f0116f9b:	74 17                	je     f0116fb4 <test_priority_normal_and_lower+0x840>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116f9d:	83 ec 04             	sub    $0x4,%esp
f0116fa0:	68 3c aa 13 f0       	push   $0xf013aa3c
f0116fa5:	68 63 01 00 00       	push   $0x163
f0116faa:	68 51 a6 13 f0       	push   $0xf013a651
f0116faf:	e8 47 92 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f0116fb4:	ff 45 cc             	incl   -0x34(%ebp)
f0116fb7:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f0116fbb:	0f 8e 76 ff ff ff    	jle    f0116f37 <test_priority_normal_and_lower+0x7c3>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0116fc1:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f0116fc8:	e9 80 00 00 00       	jmp    f011704d <test_priority_normal_and_lower+0x8d9>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0116fcd:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0116fd0:	83 c0 03             	add    $0x3,%eax
f0116fd3:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0116fda:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116fdd:	8b 58 78             	mov    0x78(%eax),%ebx
f0116fe0:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0116fe3:	89 d0                	mov    %edx,%eax
f0116fe5:	01 c0                	add    %eax,%eax
f0116fe7:	01 d0                	add    %edx,%eax
f0116fe9:	c1 e0 03             	shl    $0x3,%eax
f0116fec:	01 d8                	add    %ebx,%eax
f0116fee:	8b 00                	mov    (%eax),%eax
f0116ff0:	39 c1                	cmp    %eax,%ecx
f0116ff2:	74 17                	je     f011700b <test_priority_normal_and_lower+0x897>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f0116ff4:	ff 75 c8             	pushl  -0x38(%ebp)
f0116ff7:	68 a8 aa 13 f0       	push   $0xf013aaa8
f0116ffc:	68 69 01 00 00       	push   $0x169
f0117001:	68 51 a6 13 f0       	push   $0xf013a651
f0117006:	e8 f0 91 fe ff       	call   f01001fb <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f011700b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011700e:	83 c0 03             	add    $0x3,%eax
f0117011:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0117018:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011701b:	8b 58 78             	mov    0x78(%eax),%ebx
f011701e:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0117021:	89 d0                	mov    %edx,%eax
f0117023:	01 c0                	add    %eax,%eax
f0117025:	01 d0                	add    %edx,%eax
f0117027:	c1 e0 03             	shl    $0x3,%eax
f011702a:	01 d8                	add    %ebx,%eax
f011702c:	8b 40 08             	mov    0x8(%eax),%eax
f011702f:	39 c1                	cmp    %eax,%ecx
f0117031:	74 17                	je     f011704a <test_priority_normal_and_lower+0x8d6>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117033:	83 ec 04             	sub    $0x4,%esp
f0117036:	68 3c aa 13 f0       	push   $0xf013aa3c
f011703b:	68 6c 01 00 00       	push   $0x16c
f0117040:	68 51 a6 13 f0       	push   $0xf013a651
f0117045:	e8 b1 91 fe ff       	call   f01001fb <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f011704a:	ff 45 c8             	incl   -0x38(%ebp)
f011704d:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f0117051:	0f 8e 76 ff ff ff    	jle    f0116fcd <test_priority_normal_and_lower+0x859>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0117057:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f011705e:	e9 80 00 00 00       	jmp    f01170e3 <test_priority_normal_and_lower+0x96f>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0117063:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117066:	83 c0 05             	add    $0x5,%eax
f0117069:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0117070:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117073:	8b 58 78             	mov    0x78(%eax),%ebx
f0117076:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0117079:	89 d0                	mov    %edx,%eax
f011707b:	01 c0                	add    %eax,%eax
f011707d:	01 d0                	add    %edx,%eax
f011707f:	c1 e0 03             	shl    $0x3,%eax
f0117082:	01 d8                	add    %ebx,%eax
f0117084:	8b 00                	mov    (%eax),%eax
f0117086:	39 c1                	cmp    %eax,%ecx
f0117088:	74 17                	je     f01170a1 <test_priority_normal_and_lower+0x92d>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f011708a:	83 ec 04             	sub    $0x4,%esp
f011708d:	68 3c aa 13 f0       	push   $0xf013aa3c
f0117092:	68 72 01 00 00       	push   $0x172
f0117097:	68 51 a6 13 f0       	push   $0xf013a651
f011709c:	e8 5a 91 fe ff       	call   f01001fb <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f01170a1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01170a4:	83 c0 05             	add    $0x5,%eax
f01170a7:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f01170ae:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01170b1:	8b 58 78             	mov    0x78(%eax),%ebx
f01170b4:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01170b7:	89 d0                	mov    %edx,%eax
f01170b9:	01 c0                	add    %eax,%eax
f01170bb:	01 d0                	add    %edx,%eax
f01170bd:	c1 e0 03             	shl    $0x3,%eax
f01170c0:	01 d8                	add    %ebx,%eax
f01170c2:	8b 40 08             	mov    0x8(%eax),%eax
f01170c5:	39 c1                	cmp    %eax,%ecx
f01170c7:	74 17                	je     f01170e0 <test_priority_normal_and_lower+0x96c>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01170c9:	83 ec 04             	sub    $0x4,%esp
f01170cc:	68 3c aa 13 f0       	push   $0xf013aa3c
f01170d1:	68 75 01 00 00       	push   $0x175
f01170d6:	68 51 a6 13 f0       	push   $0xf013a651
f01170db:	e8 1b 91 fe ff       	call   f01001fb <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f01170e0:	ff 45 c4             	incl   -0x3c(%ebp)
f01170e3:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f01170e7:	0f 8e 76 ff ff ff    	jle    f0117063 <test_priority_normal_and_lower+0x8ef>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f01170ed:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01170f0:	83 ec 08             	sub    $0x8,%esp
f01170f3:	6a 05                	push   $0x5
f01170f5:	50                   	push   %eax
f01170f6:	e8 3c 3d ff ff       	call   f010ae37 <set_program_priority>
f01170fb:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f01170fe:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117101:	83 ec 08             	sub    $0x8,%esp
f0117104:	6a 05                	push   $0x5
f0117106:	50                   	push   %eax
f0117107:	e8 2b 3d ff ff       	call   f010ae37 <set_program_priority>
f011710c:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f011710f:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f0117116:	75 6e 61 
f0117119:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f0117120:	6c 00 00 
f0117123:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0117129:	b9 17 00 00 00       	mov    $0x17,%ecx
f011712e:	b8 00 00 00 00       	mov    $0x0,%eax
f0117133:	89 d7                	mov    %edx,%edi
f0117135:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0117137:	83 ec 0c             	sub    $0xc,%esp
f011713a:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f0117140:	50                   	push   %eax
f0117141:	e8 9e 9b fe ff       	call   f0100ce4 <execute_command>
f0117146:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
}
f0117149:	eb 10                	jmp    f011715b <test_priority_normal_and_lower+0x9e7>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f011714b:	83 ec 0c             	sub    $0xc,%esp
f011714e:	68 18 ab 13 f0       	push   $0xf013ab18
f0117153:	e8 2a 9b fe ff       	call   f0100c82 <cprintf>
f0117158:	83 c4 10             	add    $0x10,%esp
	}
}
f011715b:	90                   	nop
f011715c:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011715f:	5b                   	pop    %ebx
f0117160:	5e                   	pop    %esi
f0117161:	5f                   	pop    %edi
f0117162:	5d                   	pop    %ebp
f0117163:	c3                   	ret    

f0117164 <isKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0117164:	55                   	push   %ebp
f0117165:	89 e5                	mov    %esp,%ebp
f0117167:	a1 5c 7b 65 f0       	mov    0xf0657b5c,%eax
f011716c:	83 f8 03             	cmp    $0x3,%eax
f011716f:	75 04                	jne    f0117175 <isKHeapPlacementStrategyNEXTFIT+0x11>
f0117171:	b0 01                	mov    $0x1,%al
f0117173:	eb 02                	jmp    f0117177 <isKHeapPlacementStrategyNEXTFIT+0x13>
f0117175:	b0 00                	mov    $0x0,%al
f0117177:	5d                   	pop    %ebp
f0117178:	c3                   	ret    

f0117179 <test_kmalloc>:
	int c;
};


int test_kmalloc()
{
f0117179:	55                   	push   %ebp
f011717a:	89 e5                	mov    %esp,%ebp
f011717c:	57                   	push   %edi
f011717d:	53                   	push   %ebx
f011717e:	81 ec c0 01 00 00    	sub    $0x1c0,%esp
	cprintf("==============================================\n");
f0117184:	83 ec 0c             	sub    $0xc,%esp
f0117187:	68 1c ac 13 f0       	push   $0xf013ac1c
f011718c:	e8 f1 9a fe ff       	call   f0100c82 <cprintf>
f0117191:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0117194:	83 ec 0c             	sub    $0xc,%esp
f0117197:	68 4c ac 13 f0       	push   $0xf013ac4c
f011719c:	e8 e1 9a fe ff       	call   f0100c82 <cprintf>
f01171a1:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01171a4:	83 ec 0c             	sub    $0xc,%esp
f01171a7:	68 1c ac 13 f0       	push   $0xf013ac1c
f01171ac:	e8 d1 9a fe ff       	call   f0100c82 <cprintf>
f01171b1:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01171b4:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f01171b8:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f01171bc:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f01171c2:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f01171c8:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f01171cf:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01171d6:	e8 80 57 ff ff       	call   f010c95b <sys_calculate_free_frames>
f01171db:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f01171de:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f01171e4:	b9 14 00 00 00       	mov    $0x14,%ecx
f01171e9:	b8 00 00 00 00       	mov    $0x0,%eax
f01171ee:	89 d7                	mov    %edx,%edi
f01171f0:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f01171f2:	e8 64 57 ff ff       	call   f010c95b <sys_calculate_free_frames>
f01171f7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01171fa:	e8 3d cb fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01171ff:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f0117202:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0117209:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011720c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117211:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0117214:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117217:	ba 00 00 00 00       	mov    $0x0,%edx
f011721c:	f7 75 d4             	divl   -0x2c(%ebp)
f011721f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117222:	29 d0                	sub    %edx,%eax
f0117224:	89 c1                	mov    %eax,%ecx
f0117226:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011722d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0117232:	0f b6 d0             	movzbl %al,%edx
f0117235:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117238:	01 d0                	add    %edx,%eax
f011723a:	48                   	dec    %eax
f011723b:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011723e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117241:	ba 00 00 00 00       	mov    $0x0,%edx
f0117246:	f7 75 cc             	divl   -0x34(%ebp)
f0117249:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011724c:	29 d0                	sub    %edx,%eax
f011724e:	01 c1                	add    %eax,%ecx
f0117250:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0117257:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011725c:	0f b6 c0             	movzbl %al,%eax
f011725f:	c1 e0 04             	shl    $0x4,%eax
f0117262:	89 c2                	mov    %eax,%edx
f0117264:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117267:	01 d0                	add    %edx,%eax
f0117269:	48                   	dec    %eax
f011726a:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011726d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117270:	ba 00 00 00 00       	mov    $0x0,%edx
f0117275:	f7 75 c4             	divl   -0x3c(%ebp)
f0117278:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011727b:	29 d0                	sub    %edx,%eax
f011727d:	01 c8                	add    %ecx,%eax
f011727f:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f0117284:	29 c2                	sub    %eax,%edx
f0117286:	89 d0                	mov    %edx,%eax
f0117288:	89 45 bc             	mov    %eax,-0x44(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f011728b:	83 ec 0c             	sub    $0xc,%esp
f011728e:	ff 75 bc             	pushl  -0x44(%ebp)
f0117291:	e8 68 05 ff ff       	call   f01077fe <kmalloc>
f0117296:	83 c4 10             	add    $0x10,%esp
f0117299:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f011729f:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01172a5:	85 c0                	test   %eax,%eax
f01172a7:	74 14                	je     f01172bd <test_kmalloc+0x144>
f01172a9:	83 ec 04             	sub    $0x4,%esp
f01172ac:	68 a8 ac 13 f0       	push   $0xf013aca8
f01172b1:	6a 40                	push   $0x40
f01172b3:	68 da ac 13 f0       	push   $0xf013acda
f01172b8:	e8 3e 8f fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01172bd:	e8 7a ca fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01172c2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01172c5:	74 14                	je     f01172db <test_kmalloc+0x162>
f01172c7:	83 ec 04             	sub    $0x4,%esp
f01172ca:	68 f4 ac 13 f0       	push   $0xf013acf4
f01172cf:	6a 41                	push   $0x41
f01172d1:	68 da ac 13 f0       	push   $0xf013acda
f01172d6:	e8 20 8f fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f01172db:	e8 7b 56 ff ff       	call   f010c95b <sys_calculate_free_frames>
f01172e0:	89 c2                	mov    %eax,%edx
f01172e2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01172e5:	39 c2                	cmp    %eax,%edx
f01172e7:	74 14                	je     f01172fd <test_kmalloc+0x184>
f01172e9:	83 ec 04             	sub    $0x4,%esp
f01172ec:	68 5c ad 13 f0       	push   $0xf013ad5c
f01172f1:	6a 42                	push   $0x42
f01172f3:	68 da ac 13 f0       	push   $0xf013acda
f01172f8:	e8 fe 8e fe ff       	call   f01001fb <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f01172fd:	83 ec 0c             	sub    $0xc,%esp
f0117300:	68 9c ad 13 f0       	push   $0xf013ad9c
f0117305:	e8 78 99 fe ff       	call   f0100c82 <cprintf>
f011730a:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011730d:	e8 49 56 ff ff       	call   f010c95b <sys_calculate_free_frames>
f0117312:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117315:	e8 22 ca fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011731a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011731d:	83 ec 0c             	sub    $0xc,%esp
f0117320:	68 00 fc 1f 00       	push   $0x1ffc00
f0117325:	e8 d4 04 ff ff       	call   f01077fe <kmalloc>
f011732a:	83 c4 10             	add    $0x10,%esp
f011732d:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117333:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0117339:	89 c1                	mov    %eax,%ecx
f011733b:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0117342:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117345:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011734a:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011734d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117350:	ba 00 00 00 00       	mov    $0x0,%edx
f0117355:	f7 75 b8             	divl   -0x48(%ebp)
f0117358:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011735b:	29 d0                	sub    %edx,%eax
f011735d:	89 c3                	mov    %eax,%ebx
f011735f:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0117366:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011736b:	0f b6 d0             	movzbl %al,%edx
f011736e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117371:	01 d0                	add    %edx,%eax
f0117373:	48                   	dec    %eax
f0117374:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0117377:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011737a:	ba 00 00 00 00       	mov    $0x0,%edx
f011737f:	f7 75 b0             	divl   -0x50(%ebp)
f0117382:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117385:	29 d0                	sub    %edx,%eax
f0117387:	01 c3                	add    %eax,%ebx
f0117389:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0117390:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0117395:	0f b6 c0             	movzbl %al,%eax
f0117398:	c1 e0 04             	shl    $0x4,%eax
f011739b:	89 c2                	mov    %eax,%edx
f011739d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01173a0:	01 d0                	add    %edx,%eax
f01173a2:	48                   	dec    %eax
f01173a3:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01173a6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01173a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01173ae:	f7 75 a8             	divl   -0x58(%ebp)
f01173b1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01173b4:	29 d0                	sub    %edx,%eax
f01173b6:	01 d8                	add    %ebx,%eax
f01173b8:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01173bd:	39 c1                	cmp    %eax,%ecx
f01173bf:	74 14                	je     f01173d5 <test_kmalloc+0x25c>
f01173c1:	83 ec 04             	sub    $0x4,%esp
f01173c4:	68 c0 ad 13 f0       	push   $0xf013adc0
f01173c9:	6a 49                	push   $0x49
f01173cb:	68 da ac 13 f0       	push   $0xf013acda
f01173d0:	e8 26 8e fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01173d5:	e8 62 c9 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01173da:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01173dd:	74 14                	je     f01173f3 <test_kmalloc+0x27a>
f01173df:	83 ec 04             	sub    $0x4,%esp
f01173e2:	68 f4 ac 13 f0       	push   $0xf013acf4
f01173e7:	6a 4a                	push   $0x4a
f01173e9:	68 da ac 13 f0       	push   $0xf013acda
f01173ee:	e8 08 8e fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01173f3:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01173f6:	e8 60 55 ff ff       	call   f010c95b <sys_calculate_free_frames>
f01173fb:	29 c3                	sub    %eax,%ebx
f01173fd:	89 d8                	mov    %ebx,%eax
f01173ff:	3d 00 02 00 00       	cmp    $0x200,%eax
f0117404:	74 14                	je     f011741a <test_kmalloc+0x2a1>
f0117406:	83 ec 04             	sub    $0x4,%esp
f0117409:	68 5c ad 13 f0       	push   $0xf013ad5c
f011740e:	6a 4b                	push   $0x4b
f0117410:	68 da ac 13 f0       	push   $0xf013acda
f0117415:	e8 e1 8d fe ff       	call   f01001fb <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011741a:	e8 3c 55 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011741f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117422:	e8 15 c9 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117427:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011742a:	83 ec 0c             	sub    $0xc,%esp
f011742d:	68 00 fc 1f 00       	push   $0x1ffc00
f0117432:	e8 c7 03 ff ff       	call   f01077fe <kmalloc>
f0117437:	83 c4 10             	add    $0x10,%esp
f011743a:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117440:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0117446:	89 c1                	mov    %eax,%ecx
f0117448:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f011744f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0117452:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117457:	89 45 9c             	mov    %eax,-0x64(%ebp)
f011745a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011745d:	ba 00 00 00 00       	mov    $0x0,%edx
f0117462:	f7 75 a0             	divl   -0x60(%ebp)
f0117465:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0117468:	29 d0                	sub    %edx,%eax
f011746a:	89 c3                	mov    %eax,%ebx
f011746c:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0117473:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0117478:	0f b6 d0             	movzbl %al,%edx
f011747b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011747e:	01 d0                	add    %edx,%eax
f0117480:	48                   	dec    %eax
f0117481:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0117484:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0117487:	ba 00 00 00 00       	mov    $0x0,%edx
f011748c:	f7 75 98             	divl   -0x68(%ebp)
f011748f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0117492:	29 d0                	sub    %edx,%eax
f0117494:	01 c3                	add    %eax,%ebx
f0117496:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f011749d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01174a2:	0f b6 c0             	movzbl %al,%eax
f01174a5:	c1 e0 04             	shl    $0x4,%eax
f01174a8:	89 c2                	mov    %eax,%edx
f01174aa:	8b 45 90             	mov    -0x70(%ebp),%eax
f01174ad:	01 d0                	add    %edx,%eax
f01174af:	48                   	dec    %eax
f01174b0:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01174b3:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01174b6:	ba 00 00 00 00       	mov    $0x0,%edx
f01174bb:	f7 75 90             	divl   -0x70(%ebp)
f01174be:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01174c1:	29 d0                	sub    %edx,%eax
f01174c3:	01 d8                	add    %ebx,%eax
f01174c5:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01174ca:	39 c1                	cmp    %eax,%ecx
f01174cc:	74 14                	je     f01174e2 <test_kmalloc+0x369>
f01174ce:	83 ec 04             	sub    $0x4,%esp
f01174d1:	68 c0 ad 13 f0       	push   $0xf013adc0
f01174d6:	6a 51                	push   $0x51
f01174d8:	68 da ac 13 f0       	push   $0xf013acda
f01174dd:	e8 19 8d fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01174e2:	e8 55 c8 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01174e7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01174ea:	74 14                	je     f0117500 <test_kmalloc+0x387>
f01174ec:	83 ec 04             	sub    $0x4,%esp
f01174ef:	68 f4 ac 13 f0       	push   $0xf013acf4
f01174f4:	6a 52                	push   $0x52
f01174f6:	68 da ac 13 f0       	push   $0xf013acda
f01174fb:	e8 fb 8c fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117500:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117503:	e8 53 54 ff ff       	call   f010c95b <sys_calculate_free_frames>
f0117508:	29 c3                	sub    %eax,%ebx
f011750a:	89 d8                	mov    %ebx,%eax
f011750c:	3d 00 02 00 00       	cmp    $0x200,%eax
f0117511:	74 14                	je     f0117527 <test_kmalloc+0x3ae>
f0117513:	83 ec 04             	sub    $0x4,%esp
f0117516:	68 5c ad 13 f0       	push   $0xf013ad5c
f011751b:	6a 53                	push   $0x53
f011751d:	68 da ac 13 f0       	push   $0xf013acda
f0117522:	e8 d4 8c fe ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0117527:	e8 2f 54 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011752c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011752f:	e8 08 c8 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117534:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0117537:	83 ec 0c             	sub    $0xc,%esp
f011753a:	68 00 08 00 00       	push   $0x800
f011753f:	e8 ba 02 ff ff       	call   f01077fe <kmalloc>
f0117544:	83 c4 10             	add    $0x10,%esp
f0117547:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011754d:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0117553:	89 c1                	mov    %eax,%ecx
f0117555:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f011755c:	8b 45 88             	mov    -0x78(%ebp),%eax
f011755f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117564:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0117567:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011756a:	ba 00 00 00 00       	mov    $0x0,%edx
f011756f:	f7 75 88             	divl   -0x78(%ebp)
f0117572:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0117575:	29 d0                	sub    %edx,%eax
f0117577:	89 c3                	mov    %eax,%ebx
f0117579:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0117580:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0117585:	0f b6 d0             	movzbl %al,%edx
f0117588:	8b 45 80             	mov    -0x80(%ebp),%eax
f011758b:	01 d0                	add    %edx,%eax
f011758d:	48                   	dec    %eax
f011758e:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0117594:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011759a:	ba 00 00 00 00       	mov    $0x0,%edx
f011759f:	f7 75 80             	divl   -0x80(%ebp)
f01175a2:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01175a8:	29 d0                	sub    %edx,%eax
f01175aa:	01 c3                	add    %eax,%ebx
f01175ac:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01175b3:	10 00 00 
f01175b6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01175bb:	0f b6 c0             	movzbl %al,%eax
f01175be:	c1 e0 04             	shl    $0x4,%eax
f01175c1:	89 c2                	mov    %eax,%edx
f01175c3:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01175c9:	01 d0                	add    %edx,%eax
f01175cb:	48                   	dec    %eax
f01175cc:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01175d2:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01175d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01175dd:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01175e3:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01175e9:	29 d0                	sub    %edx,%eax
f01175eb:	01 d8                	add    %ebx,%eax
f01175ed:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01175f2:	39 c1                	cmp    %eax,%ecx
f01175f4:	74 14                	je     f011760a <test_kmalloc+0x491>
f01175f6:	83 ec 04             	sub    $0x4,%esp
f01175f9:	68 c0 ad 13 f0       	push   $0xf013adc0
f01175fe:	6a 59                	push   $0x59
f0117600:	68 da ac 13 f0       	push   $0xf013acda
f0117605:	e8 f1 8b fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011760a:	e8 2d c7 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011760f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117612:	74 14                	je     f0117628 <test_kmalloc+0x4af>
f0117614:	83 ec 04             	sub    $0x4,%esp
f0117617:	68 f4 ac 13 f0       	push   $0xf013acf4
f011761c:	6a 5a                	push   $0x5a
f011761e:	68 da ac 13 f0       	push   $0xf013acda
f0117623:	e8 d3 8b fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117628:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011762b:	e8 2b 53 ff ff       	call   f010c95b <sys_calculate_free_frames>
f0117630:	29 c3                	sub    %eax,%ebx
f0117632:	89 d8                	mov    %ebx,%eax
f0117634:	83 f8 01             	cmp    $0x1,%eax
f0117637:	74 14                	je     f011764d <test_kmalloc+0x4d4>
f0117639:	83 ec 04             	sub    $0x4,%esp
f011763c:	68 5c ad 13 f0       	push   $0xf013ad5c
f0117641:	6a 5b                	push   $0x5b
f0117643:	68 da ac 13 f0       	push   $0xf013acda
f0117648:	e8 ae 8b fe ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011764d:	e8 09 53 ff ff       	call   f010c95b <sys_calculate_free_frames>
f0117652:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117655:	e8 e2 c6 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011765a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011765d:	83 ec 0c             	sub    $0xc,%esp
f0117660:	68 00 08 00 00       	push   $0x800
f0117665:	e8 94 01 ff ff       	call   f01077fe <kmalloc>
f011766a:	83 c4 10             	add    $0x10,%esp
f011766d:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117673:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0117679:	89 c1                	mov    %eax,%ecx
f011767b:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0117682:	10 00 00 
f0117685:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011768b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117690:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0117696:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011769c:	ba 00 00 00 00       	mov    $0x0,%edx
f01176a1:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01176a7:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01176ad:	29 d0                	sub    %edx,%eax
f01176af:	89 c3                	mov    %eax,%ebx
f01176b1:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01176b8:	10 00 00 
f01176bb:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01176c0:	0f b6 d0             	movzbl %al,%edx
f01176c3:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01176c9:	01 d0                	add    %edx,%eax
f01176cb:	48                   	dec    %eax
f01176cc:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01176d2:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01176d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01176dd:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01176e3:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01176e9:	29 d0                	sub    %edx,%eax
f01176eb:	01 c3                	add    %eax,%ebx
f01176ed:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01176f4:	10 00 00 
f01176f7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01176fc:	0f b6 c0             	movzbl %al,%eax
f01176ff:	c1 e0 04             	shl    $0x4,%eax
f0117702:	89 c2                	mov    %eax,%edx
f0117704:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011770a:	01 d0                	add    %edx,%eax
f011770c:	48                   	dec    %eax
f011770d:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0117713:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0117719:	ba 00 00 00 00       	mov    $0x0,%edx
f011771e:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0117724:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011772a:	29 d0                	sub    %edx,%eax
f011772c:	01 d8                	add    %ebx,%eax
f011772e:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0117733:	39 c1                	cmp    %eax,%ecx
f0117735:	74 14                	je     f011774b <test_kmalloc+0x5d2>
f0117737:	83 ec 04             	sub    $0x4,%esp
f011773a:	68 c0 ad 13 f0       	push   $0xf013adc0
f011773f:	6a 61                	push   $0x61
f0117741:	68 da ac 13 f0       	push   $0xf013acda
f0117746:	e8 b0 8a fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011774b:	e8 ec c5 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117750:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117753:	74 14                	je     f0117769 <test_kmalloc+0x5f0>
f0117755:	83 ec 04             	sub    $0x4,%esp
f0117758:	68 f4 ac 13 f0       	push   $0xf013acf4
f011775d:	6a 62                	push   $0x62
f011775f:	68 da ac 13 f0       	push   $0xf013acda
f0117764:	e8 92 8a fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117769:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011776c:	e8 ea 51 ff ff       	call   f010c95b <sys_calculate_free_frames>
f0117771:	29 c3                	sub    %eax,%ebx
f0117773:	89 d8                	mov    %ebx,%eax
f0117775:	83 f8 01             	cmp    $0x1,%eax
f0117778:	74 14                	je     f011778e <test_kmalloc+0x615>
f011777a:	83 ec 04             	sub    $0x4,%esp
f011777d:	68 5c ad 13 f0       	push   $0xf013ad5c
f0117782:	6a 63                	push   $0x63
f0117784:	68 da ac 13 f0       	push   $0xf013acda
f0117789:	e8 6d 8a fe ff       	call   f01001fb <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011778e:	e8 c8 51 ff ff       	call   f010c95b <sys_calculate_free_frames>
f0117793:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117796:	e8 a1 c5 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011779b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011779e:	83 ec 0c             	sub    $0xc,%esp
f01177a1:	68 00 1c 00 00       	push   $0x1c00
f01177a6:	e8 53 00 ff ff       	call   f01077fe <kmalloc>
f01177ab:	83 c4 10             	add    $0x10,%esp
f01177ae:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01177b4:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01177ba:	89 c1                	mov    %eax,%ecx
f01177bc:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01177c3:	10 00 00 
f01177c6:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01177cc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01177d1:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01177d7:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01177dd:	ba 00 00 00 00       	mov    $0x0,%edx
f01177e2:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01177e8:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01177ee:	29 d0                	sub    %edx,%eax
f01177f0:	89 c3                	mov    %eax,%ebx
f01177f2:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01177f9:	10 00 00 
f01177fc:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0117801:	0f b6 d0             	movzbl %al,%edx
f0117804:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011780a:	01 d0                	add    %edx,%eax
f011780c:	48                   	dec    %eax
f011780d:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0117813:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0117819:	ba 00 00 00 00       	mov    $0x0,%edx
f011781e:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0117824:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011782a:	29 d0                	sub    %edx,%eax
f011782c:	01 c3                	add    %eax,%ebx
f011782e:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0117835:	10 00 00 
f0117838:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011783d:	0f b6 c0             	movzbl %al,%eax
f0117840:	c1 e0 04             	shl    $0x4,%eax
f0117843:	89 c2                	mov    %eax,%edx
f0117845:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011784b:	01 d0                	add    %edx,%eax
f011784d:	48                   	dec    %eax
f011784e:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0117854:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011785a:	ba 00 00 00 00       	mov    $0x0,%edx
f011785f:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0117865:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011786b:	29 d0                	sub    %edx,%eax
f011786d:	01 d8                	add    %ebx,%eax
f011786f:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0117874:	39 c1                	cmp    %eax,%ecx
f0117876:	74 14                	je     f011788c <test_kmalloc+0x713>
f0117878:	83 ec 04             	sub    $0x4,%esp
f011787b:	68 c0 ad 13 f0       	push   $0xf013adc0
f0117880:	6a 69                	push   $0x69
f0117882:	68 da ac 13 f0       	push   $0xf013acda
f0117887:	e8 6f 89 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011788c:	e8 ab c4 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117891:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117894:	74 14                	je     f01178aa <test_kmalloc+0x731>
f0117896:	83 ec 04             	sub    $0x4,%esp
f0117899:	68 f4 ac 13 f0       	push   $0xf013acf4
f011789e:	6a 6a                	push   $0x6a
f01178a0:	68 da ac 13 f0       	push   $0xf013acda
f01178a5:	e8 51 89 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01178aa:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01178ad:	e8 a9 50 ff ff       	call   f010c95b <sys_calculate_free_frames>
f01178b2:	29 c3                	sub    %eax,%ebx
f01178b4:	89 d8                	mov    %ebx,%eax
f01178b6:	83 f8 02             	cmp    $0x2,%eax
f01178b9:	74 14                	je     f01178cf <test_kmalloc+0x756>
f01178bb:	83 ec 04             	sub    $0x4,%esp
f01178be:	68 5c ad 13 f0       	push   $0xf013ad5c
f01178c3:	6a 6b                	push   $0x6b
f01178c5:	68 da ac 13 f0       	push   $0xf013acda
f01178ca:	e8 2c 89 fe ff       	call   f01001fb <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01178cf:	e8 87 50 ff ff       	call   f010c95b <sys_calculate_free_frames>
f01178d4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01178d7:	e8 60 c4 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01178dc:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01178df:	83 ec 0c             	sub    $0xc,%esp
f01178e2:	68 00 fc 2f 00       	push   $0x2ffc00
f01178e7:	e8 12 ff fe ff       	call   f01077fe <kmalloc>
f01178ec:	83 c4 10             	add    $0x10,%esp
f01178ef:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01178f5:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01178fb:	89 c1                	mov    %eax,%ecx
f01178fd:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0117904:	10 00 00 
f0117907:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011790d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117912:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0117918:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011791e:	ba 00 00 00 00       	mov    $0x0,%edx
f0117923:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0117929:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011792f:	29 d0                	sub    %edx,%eax
f0117931:	89 c3                	mov    %eax,%ebx
f0117933:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f011793a:	10 00 00 
f011793d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0117942:	0f b6 d0             	movzbl %al,%edx
f0117945:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011794b:	01 d0                	add    %edx,%eax
f011794d:	48                   	dec    %eax
f011794e:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0117954:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011795a:	ba 00 00 00 00       	mov    $0x0,%edx
f011795f:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0117965:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011796b:	29 d0                	sub    %edx,%eax
f011796d:	01 c3                	add    %eax,%ebx
f011796f:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0117976:	10 00 00 
f0117979:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011797e:	0f b6 c0             	movzbl %al,%eax
f0117981:	c1 e0 04             	shl    $0x4,%eax
f0117984:	89 c2                	mov    %eax,%edx
f0117986:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011798c:	01 d0                	add    %edx,%eax
f011798e:	48                   	dec    %eax
f011798f:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0117995:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011799b:	ba 00 00 00 00       	mov    $0x0,%edx
f01179a0:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01179a6:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01179ac:	29 d0                	sub    %edx,%eax
f01179ae:	01 d8                	add    %ebx,%eax
f01179b0:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01179b5:	39 c1                	cmp    %eax,%ecx
f01179b7:	74 14                	je     f01179cd <test_kmalloc+0x854>
f01179b9:	83 ec 04             	sub    $0x4,%esp
f01179bc:	68 c0 ad 13 f0       	push   $0xf013adc0
f01179c1:	6a 71                	push   $0x71
f01179c3:	68 da ac 13 f0       	push   $0xf013acda
f01179c8:	e8 2e 88 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01179cd:	e8 6a c3 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01179d2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01179d5:	74 14                	je     f01179eb <test_kmalloc+0x872>
f01179d7:	83 ec 04             	sub    $0x4,%esp
f01179da:	68 f4 ac 13 f0       	push   $0xf013acf4
f01179df:	6a 72                	push   $0x72
f01179e1:	68 da ac 13 f0       	push   $0xf013acda
f01179e6:	e8 10 88 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01179eb:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01179ee:	e8 68 4f ff ff       	call   f010c95b <sys_calculate_free_frames>
f01179f3:	29 c3                	sub    %eax,%ebx
f01179f5:	89 d8                	mov    %ebx,%eax
f01179f7:	3d 00 03 00 00       	cmp    $0x300,%eax
f01179fc:	74 14                	je     f0117a12 <test_kmalloc+0x899>
f01179fe:	83 ec 04             	sub    $0x4,%esp
f0117a01:	68 5c ad 13 f0       	push   $0xf013ad5c
f0117a06:	6a 73                	push   $0x73
f0117a08:	68 da ac 13 f0       	push   $0xf013acda
f0117a0d:	e8 e9 87 fe ff       	call   f01001fb <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0117a12:	e8 44 4f ff ff       	call   f010c95b <sys_calculate_free_frames>
f0117a17:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117a1a:	e8 1d c3 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117a1f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0117a22:	83 ec 0c             	sub    $0xc,%esp
f0117a25:	68 00 fc 5f 00       	push   $0x5ffc00
f0117a2a:	e8 cf fd fe ff       	call   f01077fe <kmalloc>
f0117a2f:	83 c4 10             	add    $0x10,%esp
f0117a32:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117a38:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0117a3e:	89 c1                	mov    %eax,%ecx
f0117a40:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0117a47:	10 00 00 
f0117a4a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0117a50:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117a55:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0117a5b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117a61:	ba 00 00 00 00       	mov    $0x0,%edx
f0117a66:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0117a6c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117a72:	29 d0                	sub    %edx,%eax
f0117a74:	89 c3                	mov    %eax,%ebx
f0117a76:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0117a7d:	10 00 00 
f0117a80:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0117a85:	0f b6 d0             	movzbl %al,%edx
f0117a88:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117a8e:	01 d0                	add    %edx,%eax
f0117a90:	48                   	dec    %eax
f0117a91:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0117a97:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0117a9d:	ba 00 00 00 00       	mov    $0x0,%edx
f0117aa2:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0117aa8:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0117aae:	29 d0                	sub    %edx,%eax
f0117ab0:	01 c3                	add    %eax,%ebx
f0117ab2:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0117ab9:	10 00 00 
f0117abc:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0117ac1:	0f b6 c0             	movzbl %al,%eax
f0117ac4:	c1 e0 04             	shl    $0x4,%eax
f0117ac7:	89 c2                	mov    %eax,%edx
f0117ac9:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0117acf:	01 d0                	add    %edx,%eax
f0117ad1:	48                   	dec    %eax
f0117ad2:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0117ad8:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0117ade:	ba 00 00 00 00       	mov    $0x0,%edx
f0117ae3:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0117ae9:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0117aef:	29 d0                	sub    %edx,%eax
f0117af1:	01 d8                	add    %ebx,%eax
f0117af3:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0117af8:	39 c1                	cmp    %eax,%ecx
f0117afa:	74 14                	je     f0117b10 <test_kmalloc+0x997>
f0117afc:	83 ec 04             	sub    $0x4,%esp
f0117aff:	68 c0 ad 13 f0       	push   $0xf013adc0
f0117b04:	6a 79                	push   $0x79
f0117b06:	68 da ac 13 f0       	push   $0xf013acda
f0117b0b:	e8 eb 86 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117b10:	e8 27 c2 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117b15:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117b18:	74 14                	je     f0117b2e <test_kmalloc+0x9b5>
f0117b1a:	83 ec 04             	sub    $0x4,%esp
f0117b1d:	68 f4 ac 13 f0       	push   $0xf013acf4
f0117b22:	6a 7a                	push   $0x7a
f0117b24:	68 da ac 13 f0       	push   $0xf013acda
f0117b29:	e8 cd 86 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117b2e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117b31:	e8 25 4e ff ff       	call   f010c95b <sys_calculate_free_frames>
f0117b36:	29 c3                	sub    %eax,%ebx
f0117b38:	89 d8                	mov    %ebx,%eax
f0117b3a:	3d 00 06 00 00       	cmp    $0x600,%eax
f0117b3f:	74 14                	je     f0117b55 <test_kmalloc+0x9dc>
f0117b41:	83 ec 04             	sub    $0x4,%esp
f0117b44:	68 5c ad 13 f0       	push   $0xf013ad5c
f0117b49:	6a 7b                	push   $0x7b
f0117b4b:	68 da ac 13 f0       	push   $0xf013acda
f0117b50:	e8 a6 86 fe ff       	call   f01001fb <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0117b55:	e8 01 4e ff ff       	call   f010c95b <sys_calculate_free_frames>
f0117b5a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117b5d:	e8 da c1 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117b62:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0117b65:	83 ec 0c             	sub    $0xc,%esp
f0117b68:	68 00 38 00 00       	push   $0x3800
f0117b6d:	e8 8c fc fe ff       	call   f01077fe <kmalloc>
f0117b72:	83 c4 10             	add    $0x10,%esp
f0117b75:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117b7b:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0117b81:	89 c1                	mov    %eax,%ecx
f0117b83:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0117b8a:	10 00 00 
f0117b8d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0117b93:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117b98:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0117b9e:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0117ba4:	ba 00 00 00 00       	mov    $0x0,%edx
f0117ba9:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0117baf:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0117bb5:	29 d0                	sub    %edx,%eax
f0117bb7:	89 c3                	mov    %eax,%ebx
f0117bb9:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0117bc0:	10 00 00 
f0117bc3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0117bc8:	0f b6 d0             	movzbl %al,%edx
f0117bcb:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0117bd1:	01 d0                	add    %edx,%eax
f0117bd3:	48                   	dec    %eax
f0117bd4:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0117bda:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0117be0:	ba 00 00 00 00       	mov    $0x0,%edx
f0117be5:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0117beb:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0117bf1:	29 d0                	sub    %edx,%eax
f0117bf3:	01 c3                	add    %eax,%ebx
f0117bf5:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0117bfc:	10 00 00 
f0117bff:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0117c04:	0f b6 c0             	movzbl %al,%eax
f0117c07:	c1 e0 04             	shl    $0x4,%eax
f0117c0a:	89 c2                	mov    %eax,%edx
f0117c0c:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0117c12:	01 d0                	add    %edx,%eax
f0117c14:	48                   	dec    %eax
f0117c15:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0117c1b:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0117c21:	ba 00 00 00 00       	mov    $0x0,%edx
f0117c26:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0117c2c:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0117c32:	29 d0                	sub    %edx,%eax
f0117c34:	01 d8                	add    %ebx,%eax
f0117c36:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0117c3b:	39 c1                	cmp    %eax,%ecx
f0117c3d:	74 17                	je     f0117c56 <test_kmalloc+0xadd>
f0117c3f:	83 ec 04             	sub    $0x4,%esp
f0117c42:	68 c0 ad 13 f0       	push   $0xf013adc0
f0117c47:	68 81 00 00 00       	push   $0x81
f0117c4c:	68 da ac 13 f0       	push   $0xf013acda
f0117c51:	e8 a5 85 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117c56:	e8 e1 c0 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117c5b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117c5e:	74 17                	je     f0117c77 <test_kmalloc+0xafe>
f0117c60:	83 ec 04             	sub    $0x4,%esp
f0117c63:	68 f4 ac 13 f0       	push   $0xf013acf4
f0117c68:	68 82 00 00 00       	push   $0x82
f0117c6d:	68 da ac 13 f0       	push   $0xf013acda
f0117c72:	e8 84 85 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117c77:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117c7a:	e8 dc 4c ff ff       	call   f010c95b <sys_calculate_free_frames>
f0117c7f:	29 c3                	sub    %eax,%ebx
f0117c81:	89 d8                	mov    %ebx,%eax
f0117c83:	83 f8 04             	cmp    $0x4,%eax
f0117c86:	74 17                	je     f0117c9f <test_kmalloc+0xb26>
f0117c88:	83 ec 04             	sub    $0x4,%esp
f0117c8b:	68 5c ad 13 f0       	push   $0xf013ad5c
f0117c90:	68 83 00 00 00       	push   $0x83
f0117c95:	68 da ac 13 f0       	push   $0xf013acda
f0117c9a:	e8 5c 85 fe ff       	call   f01001fb <_panic>

		cprintf("\b\b\b50%");
f0117c9f:	83 ec 0c             	sub    $0xc,%esp
f0117ca2:	68 26 ae 13 f0       	push   $0xf013ae26
f0117ca7:	e8 d6 8f fe ff       	call   f0100c82 <cprintf>
f0117cac:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f0117caf:	e8 a7 4c ff ff       	call   f010c95b <sys_calculate_free_frames>
f0117cb4:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0117cb7:	e8 80 c0 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117cbc:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f0117cbf:	c7 85 f8 fe ff ff ff 	movl   $0x1ffbff,-0x108(%ebp)
f0117cc6:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f0117cc9:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0117ccf:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
			byteArr[0] = minByte ;
f0117cd5:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0117cdb:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0117cde:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f0117ce0:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f0117ce6:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0117cec:	01 c2                	add    %eax,%edx
f0117cee:	8a 45 f2             	mov    -0xe(%ebp),%al
f0117cf1:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f0117cf3:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0117cf9:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f0117cff:	c7 85 ec fe ff ff ff 	movl   $0xffdff,-0x114(%ebp)
f0117d06:	fd 0f 00 
			shortArr[0] = minShort;
f0117d09:	8b 95 f0 fe ff ff    	mov    -0x110(%ebp),%edx
f0117d0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0117d12:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f0117d15:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0117d1b:	01 c0                	add    %eax,%eax
f0117d1d:	89 c2                	mov    %eax,%edx
f0117d1f:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0117d25:	01 c2                	add    %eax,%edx
f0117d27:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0117d2b:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f0117d2e:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0117d34:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f0117d3a:	c7 85 e4 fe ff ff ff 	movl   $0x1ff,-0x11c(%ebp)
f0117d41:	01 00 00 
			intArr[0] = minInt;
f0117d44:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0117d4a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0117d4d:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f0117d4f:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0117d55:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0117d5c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0117d62:	01 c2                	add    %eax,%edx
f0117d64:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117d67:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f0117d69:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0117d6f:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f0117d75:	c7 85 dc fe ff ff 7f 	movl   $0x37f,-0x124(%ebp)
f0117d7c:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f0117d7f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117d85:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0117d88:	88 10                	mov    %dl,(%eax)
f0117d8a:	8b 95 e0 fe ff ff    	mov    -0x120(%ebp),%edx
f0117d90:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0117d93:	66 89 42 02          	mov    %ax,0x2(%edx)
f0117d97:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117d9d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0117da0:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f0117da3:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117da9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117db0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117db6:	01 c2                	add    %eax,%edx
f0117db8:	8a 45 f2             	mov    -0xe(%ebp),%al
f0117dbb:	88 02                	mov    %al,(%edx)
f0117dbd:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117dc3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117dca:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117dd0:	01 c2                	add    %eax,%edx
f0117dd2:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0117dd6:	66 89 42 02          	mov    %ax,0x2(%edx)
f0117dda:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117de0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117de7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117ded:	01 c2                	add    %eax,%edx
f0117def:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117df2:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f0117df5:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f0117dfc:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f0117dff:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0117e05:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
			byteArr2[0] = minByte ;
f0117e0b:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117e11:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0117e14:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f0117e16:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0117e1c:	89 c2                	mov    %eax,%edx
f0117e1e:	c1 ea 1f             	shr    $0x1f,%edx
f0117e21:	01 d0                	add    %edx,%eax
f0117e23:	d1 f8                	sar    %eax
f0117e25:	89 c2                	mov    %eax,%edx
f0117e27:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117e2d:	01 c2                	add    %eax,%edx
f0117e2f:	8a 45 f2             	mov    -0xe(%ebp),%al
f0117e32:	88 c1                	mov    %al,%cl
f0117e34:	c0 e9 07             	shr    $0x7,%cl
f0117e37:	01 c8                	add    %ecx,%eax
f0117e39:	d0 f8                	sar    %al
f0117e3b:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f0117e3d:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f0117e43:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117e49:	01 c2                	add    %eax,%edx
f0117e4b:	8a 45 f2             	mov    -0xe(%ebp),%al
f0117e4e:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f0117e50:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0117e56:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f0117e5c:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f0117e63:	1b 00 00 
			shortArr2[0] = minShort;
f0117e66:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f0117e6c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0117e6f:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f0117e72:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0117e78:	01 c0                	add    %eax,%eax
f0117e7a:	89 c2                	mov    %eax,%edx
f0117e7c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0117e82:	01 c2                	add    %eax,%edx
f0117e84:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0117e88:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0117e8b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0117e91:	8a 00                	mov    (%eax),%al
f0117e93:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0117e96:	75 15                	jne    f0117ead <test_kmalloc+0xd34>
f0117e98:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f0117e9e:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0117ea4:	01 d0                	add    %edx,%eax
f0117ea6:	8a 00                	mov    (%eax),%al
f0117ea8:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0117eab:	74 17                	je     f0117ec4 <test_kmalloc+0xd4b>
f0117ead:	83 ec 04             	sub    $0x4,%esp
f0117eb0:	68 30 ae 13 f0       	push   $0xf013ae30
f0117eb5:	68 b2 00 00 00       	push   $0xb2
f0117eba:	68 da ac 13 f0       	push   $0xf013acda
f0117ebf:	e8 37 83 fe ff       	call   f01001fb <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0117ec4:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0117eca:	66 8b 00             	mov    (%eax),%ax
f0117ecd:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0117ed1:	75 1b                	jne    f0117eee <test_kmalloc+0xd75>
f0117ed3:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0117ed9:	01 c0                	add    %eax,%eax
f0117edb:	89 c2                	mov    %eax,%edx
f0117edd:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0117ee3:	01 d0                	add    %edx,%eax
f0117ee5:	66 8b 00             	mov    (%eax),%ax
f0117ee8:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0117eec:	74 17                	je     f0117f05 <test_kmalloc+0xd8c>
f0117eee:	83 ec 04             	sub    $0x4,%esp
f0117ef1:	68 30 ae 13 f0       	push   $0xf013ae30
f0117ef6:	68 b3 00 00 00       	push   $0xb3
f0117efb:	68 da ac 13 f0       	push   $0xf013acda
f0117f00:	e8 f6 82 fe ff       	call   f01001fb <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f0117f05:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0117f0b:	8b 00                	mov    (%eax),%eax
f0117f0d:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0117f10:	75 1c                	jne    f0117f2e <test_kmalloc+0xdb5>
f0117f12:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0117f18:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0117f1f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0117f25:	01 d0                	add    %edx,%eax
f0117f27:	8b 00                	mov    (%eax),%eax
f0117f29:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0117f2c:	74 17                	je     f0117f45 <test_kmalloc+0xdcc>
f0117f2e:	83 ec 04             	sub    $0x4,%esp
f0117f31:	68 30 ae 13 f0       	push   $0xf013ae30
f0117f36:	68 b4 00 00 00       	push   $0xb4
f0117f3b:	68 da ac 13 f0       	push   $0xf013acda
f0117f40:	e8 b6 82 fe ff       	call   f01001fb <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f0117f45:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117f4b:	8a 00                	mov    (%eax),%al
f0117f4d:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0117f50:	75 1c                	jne    f0117f6e <test_kmalloc+0xdf5>
f0117f52:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117f58:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117f5f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117f65:	01 d0                	add    %edx,%eax
f0117f67:	8a 00                	mov    (%eax),%al
f0117f69:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0117f6c:	74 17                	je     f0117f85 <test_kmalloc+0xe0c>
f0117f6e:	83 ec 04             	sub    $0x4,%esp
f0117f71:	68 30 ae 13 f0       	push   $0xf013ae30
f0117f76:	68 b6 00 00 00       	push   $0xb6
f0117f7b:	68 da ac 13 f0       	push   $0xf013acda
f0117f80:	e8 76 82 fe ff       	call   f01001fb <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f0117f85:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117f8b:	66 8b 40 02          	mov    0x2(%eax),%ax
f0117f8f:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0117f93:	75 1f                	jne    f0117fb4 <test_kmalloc+0xe3b>
f0117f95:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117f9b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117fa2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117fa8:	01 d0                	add    %edx,%eax
f0117faa:	66 8b 40 02          	mov    0x2(%eax),%ax
f0117fae:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0117fb2:	74 17                	je     f0117fcb <test_kmalloc+0xe52>
f0117fb4:	83 ec 04             	sub    $0x4,%esp
f0117fb7:	68 30 ae 13 f0       	push   $0xf013ae30
f0117fbc:	68 b7 00 00 00       	push   $0xb7
f0117fc1:	68 da ac 13 f0       	push   $0xf013acda
f0117fc6:	e8 30 82 fe ff       	call   f01001fb <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f0117fcb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117fd1:	8b 40 04             	mov    0x4(%eax),%eax
f0117fd4:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0117fd7:	75 1d                	jne    f0117ff6 <test_kmalloc+0xe7d>
f0117fd9:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117fdf:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117fe6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117fec:	01 d0                	add    %edx,%eax
f0117fee:	8b 40 04             	mov    0x4(%eax),%eax
f0117ff1:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0117ff4:	74 17                	je     f011800d <test_kmalloc+0xe94>
f0117ff6:	83 ec 04             	sub    $0x4,%esp
f0117ff9:	68 30 ae 13 f0       	push   $0xf013ae30
f0117ffe:	68 b8 00 00 00       	push   $0xb8
f0118003:	68 da ac 13 f0       	push   $0xf013acda
f0118008:	e8 ee 81 fe ff       	call   f01001fb <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f011800d:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118013:	8a 00                	mov    (%eax),%al
f0118015:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118018:	75 40                	jne    f011805a <test_kmalloc+0xee1>
f011801a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0118020:	89 c2                	mov    %eax,%edx
f0118022:	c1 ea 1f             	shr    $0x1f,%edx
f0118025:	01 d0                	add    %edx,%eax
f0118027:	d1 f8                	sar    %eax
f0118029:	89 c2                	mov    %eax,%edx
f011802b:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118031:	01 d0                	add    %edx,%eax
f0118033:	8a 10                	mov    (%eax),%dl
f0118035:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118038:	88 c1                	mov    %al,%cl
f011803a:	c0 e9 07             	shr    $0x7,%cl
f011803d:	01 c8                	add    %ecx,%eax
f011803f:	d0 f8                	sar    %al
f0118041:	38 c2                	cmp    %al,%dl
f0118043:	75 15                	jne    f011805a <test_kmalloc+0xee1>
f0118045:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f011804b:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118051:	01 d0                	add    %edx,%eax
f0118053:	8a 00                	mov    (%eax),%al
f0118055:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0118058:	74 17                	je     f0118071 <test_kmalloc+0xef8>
f011805a:	83 ec 04             	sub    $0x4,%esp
f011805d:	68 30 ae 13 f0       	push   $0xf013ae30
f0118062:	68 ba 00 00 00       	push   $0xba
f0118067:	68 da ac 13 f0       	push   $0xf013acda
f011806c:	e8 8a 81 fe ff       	call   f01001fb <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0118071:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118077:	66 8b 00             	mov    (%eax),%ax
f011807a:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f011807e:	75 1b                	jne    f011809b <test_kmalloc+0xf22>
f0118080:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0118086:	01 c0                	add    %eax,%eax
f0118088:	89 c2                	mov    %eax,%edx
f011808a:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118090:	01 d0                	add    %edx,%eax
f0118092:	66 8b 00             	mov    (%eax),%ax
f0118095:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0118099:	74 17                	je     f01180b2 <test_kmalloc+0xf39>
f011809b:	83 ec 04             	sub    $0x4,%esp
f011809e:	68 30 ae 13 f0       	push   $0xf013ae30
f01180a3:	68 bb 00 00 00       	push   $0xbb
f01180a8:	68 da ac 13 f0       	push   $0xf013acda
f01180ad:	e8 49 81 fe ff       	call   f01001fb <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f01180b2:	e8 a4 48 ff ff       	call   f010c95b <sys_calculate_free_frames>
f01180b7:	89 c2                	mov    %eax,%edx
f01180b9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01180bc:	39 c2                	cmp    %eax,%edx
f01180be:	74 17                	je     f01180d7 <test_kmalloc+0xf5e>
f01180c0:	83 ec 04             	sub    $0x4,%esp
f01180c3:	68 5c ad 13 f0       	push   $0xf013ad5c
f01180c8:	68 bd 00 00 00       	push   $0xbd
f01180cd:	68 da ac 13 f0       	push   $0xf013acda
f01180d2:	e8 24 81 fe ff       	call   f01001fb <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01180d7:	e8 60 bc fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01180dc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01180df:	74 17                	je     f01180f8 <test_kmalloc+0xf7f>
f01180e1:	83 ec 04             	sub    $0x4,%esp
f01180e4:	68 f4 ac 13 f0       	push   $0xf013acf4
f01180e9:	68 be 00 00 00       	push   $0xbe
f01180ee:	68 da ac 13 f0       	push   $0xf013acda
f01180f3:	e8 03 81 fe ff       	call   f01001fb <_panic>
		}

		cprintf("\b\b\b80%");
f01180f8:	83 ec 0c             	sub    $0xc,%esp
f01180fb:	68 65 ae 13 f0       	push   $0xf013ae65
f0118100:	e8 7d 8b fe ff       	call   f0100c82 <cprintf>
f0118105:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f0118108:	e8 4e 48 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011810d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118110:	e8 27 bc fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0118115:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f0118118:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f011811f:	10 00 00 
f0118122:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0118128:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011812d:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f0118133:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0118139:	ba 00 00 00 00       	mov    $0x0,%edx
f011813e:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f0118144:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011814a:	29 d0                	sub    %edx,%eax
f011814c:	89 c1                	mov    %eax,%ecx
f011814e:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f0118155:	10 00 00 
f0118158:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011815d:	0f b6 d0             	movzbl %al,%edx
f0118160:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0118166:	01 d0                	add    %edx,%eax
f0118168:	48                   	dec    %eax
f0118169:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f011816f:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0118175:	ba 00 00 00 00       	mov    $0x0,%edx
f011817a:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f0118180:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0118186:	29 d0                	sub    %edx,%eax
f0118188:	01 c1                	add    %eax,%ecx
f011818a:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f0118191:	10 00 00 
f0118194:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118199:	0f b6 c0             	movzbl %al,%eax
f011819c:	c1 e0 04             	shl    $0x4,%eax
f011819f:	89 c2                	mov    %eax,%edx
f01181a1:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01181a7:	01 d0                	add    %edx,%eax
f01181a9:	48                   	dec    %eax
f01181aa:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f01181b0:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01181b6:	ba 00 00 00 00       	mov    $0x0,%edx
f01181bb:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f01181c1:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01181c7:	29 d0                	sub    %edx,%eax
f01181c9:	01 c8                	add    %ecx,%eax
f01181cb:	ba 00 50 2f 09       	mov    $0x92f5000,%edx
f01181d0:	29 c2                	sub    %eax,%edx
f01181d2:	89 d0                	mov    %edx,%eax
f01181d4:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f01181da:	83 ec 0c             	sub    $0xc,%esp
f01181dd:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f01181e3:	e8 16 f6 fe ff       	call   f01077fe <kmalloc>
f01181e8:	83 c4 10             	add    $0x10,%esp
f01181eb:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f01181f1:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01181f7:	85 c0                	test   %eax,%eax
f01181f9:	74 17                	je     f0118212 <test_kmalloc+0x1099>
f01181fb:	83 ec 04             	sub    $0x4,%esp
f01181fe:	68 a8 ac 13 f0       	push   $0xf013aca8
f0118203:	68 c8 00 00 00       	push   $0xc8
f0118208:	68 da ac 13 f0       	push   $0xf013acda
f011820d:	e8 e9 7f fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118212:	e8 25 bb fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0118217:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011821a:	74 17                	je     f0118233 <test_kmalloc+0x10ba>
f011821c:	83 ec 04             	sub    $0x4,%esp
f011821f:	68 f4 ac 13 f0       	push   $0xf013acf4
f0118224:	68 c9 00 00 00       	push   $0xc9
f0118229:	68 da ac 13 f0       	push   $0xf013acda
f011822e:	e8 c8 7f fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118233:	e8 23 47 ff ff       	call   f010c95b <sys_calculate_free_frames>
f0118238:	89 c2                	mov    %eax,%edx
f011823a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011823d:	39 c2                	cmp    %eax,%edx
f011823f:	74 17                	je     f0118258 <test_kmalloc+0x10df>
f0118241:	83 ec 04             	sub    $0x4,%esp
f0118244:	68 5c ad 13 f0       	push   $0xf013ad5c
f0118249:	68 ca 00 00 00       	push   $0xca
f011824e:	68 da ac 13 f0       	push   $0xf013acda
f0118253:	e8 a3 7f fe ff       	call   f01001fb <_panic>

		cprintf("\b\b\b90%");
f0118258:	83 ec 0c             	sub    $0xc,%esp
f011825b:	68 6c ae 13 f0       	push   $0xf013ae6c
f0118260:	e8 1d 8a fe ff       	call   f0100c82 <cprintf>
f0118265:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f0118268:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011826e:	05 00 40 00 00       	add    $0x4000,%eax
f0118273:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0118279:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0118280:	10 00 00 
f0118283:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0118289:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011828e:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0118294:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011829a:	ba 00 00 00 00       	mov    $0x0,%edx
f011829f:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f01182a5:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01182ab:	29 d0                	sub    %edx,%eax
f01182ad:	89 c1                	mov    %eax,%ecx
f01182af:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f01182b6:	10 00 00 
f01182b9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01182be:	0f b6 d0             	movzbl %al,%edx
f01182c1:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01182c7:	01 d0                	add    %edx,%eax
f01182c9:	48                   	dec    %eax
f01182ca:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f01182d0:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01182d6:	ba 00 00 00 00       	mov    $0x0,%edx
f01182db:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f01182e1:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01182e7:	29 d0                	sub    %edx,%eax
f01182e9:	01 c1                	add    %eax,%ecx
f01182eb:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f01182f2:	10 00 00 
f01182f5:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01182fa:	0f b6 c0             	movzbl %al,%eax
f01182fd:	c1 e0 04             	shl    $0x4,%eax
f0118300:	89 c2                	mov    %eax,%edx
f0118302:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0118308:	01 d0                	add    %edx,%eax
f011830a:	48                   	dec    %eax
f011830b:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0118311:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0118317:	ba 00 00 00 00       	mov    $0x0,%edx
f011831c:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0118322:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0118328:	29 d0                	sub    %edx,%eax
f011832a:	01 c8                	add    %ecx,%eax
f011832c:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0118331:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0118334:	eb 6a                	jmp    f01183a0 <test_kmalloc+0x1227>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f0118336:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f011833b:	83 ec 04             	sub    $0x4,%esp
f011833e:	8d 95 3c fe ff ff    	lea    -0x1c4(%ebp),%edx
f0118344:	52                   	push   %edx
f0118345:	ff 75 f4             	pushl  -0xc(%ebp)
f0118348:	50                   	push   %eax
f0118349:	e8 8c e6 fe ff       	call   f01069da <get_page_table>
f011834e:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f0118351:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0118357:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011835a:	c1 ea 0c             	shr    $0xc,%edx
f011835d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0118363:	c1 e2 02             	shl    $0x2,%edx
f0118366:	01 d0                	add    %edx,%eax
f0118368:	8b 00                	mov    (%eax),%eax
f011836a:	25 ff 0f 00 00       	and    $0xfff,%eax
f011836f:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f0118375:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011837b:	83 e0 04             	and    $0x4,%eax
f011837e:	85 c0                	test   %eax,%eax
f0118380:	74 17                	je     f0118399 <test_kmalloc+0x1220>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f0118382:	83 ec 04             	sub    $0x4,%esp
f0118385:	68 74 ae 13 f0       	push   $0xf013ae74
f011838a:	68 d7 00 00 00       	push   $0xd7
f011838f:	68 da ac 13 f0       	push   $0xf013acda
f0118394:	e8 62 7e fe ff       	call   f01001fb <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0118399:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01183a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01183a3:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f01183a9:	72 8b                	jb     f0118336 <test_kmalloc+0x11bd>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f01183ab:	83 ec 0c             	sub    $0xc,%esp
f01183ae:	68 be ae 13 f0       	push   $0xf013aebe
f01183b3:	e8 ca 88 fe ff       	call   f0100c82 <cprintf>
f01183b8:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f01183bb:	83 ec 0c             	sub    $0xc,%esp
f01183be:	68 c8 ae 13 f0       	push   $0xf013aec8
f01183c3:	e8 ba 88 fe ff       	call   f0100c82 <cprintf>
f01183c8:	83 c4 10             	add    $0x10,%esp

	return 1;
f01183cb:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01183d0:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01183d3:	5b                   	pop    %ebx
f01183d4:	5f                   	pop    %edi
f01183d5:	5d                   	pop    %ebp
f01183d6:	c3                   	ret    

f01183d7 <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f01183d7:	55                   	push   %ebp
f01183d8:	89 e5                	mov    %esp,%ebp
f01183da:	57                   	push   %edi
f01183db:	53                   	push   %ebx
f01183dc:	81 ec 70 04 00 00    	sub    $0x470,%esp
	cprintf("==============================================\n");
f01183e2:	83 ec 0c             	sub    $0xc,%esp
f01183e5:	68 1c ac 13 f0       	push   $0xf013ac1c
f01183ea:	e8 93 88 fe ff       	call   f0100c82 <cprintf>
f01183ef:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01183f2:	83 ec 0c             	sub    $0xc,%esp
f01183f5:	68 4c ac 13 f0       	push   $0xf013ac4c
f01183fa:	e8 83 88 fe ff       	call   f0100c82 <cprintf>
f01183ff:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0118402:	83 ec 0c             	sub    $0xc,%esp
f0118405:	68 1c ac 13 f0       	push   $0xf013ac1c
f011840a:	e8 73 88 fe ff       	call   f0100c82 <cprintf>
f011840f:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f0118412:	8d 95 88 fb ff ff    	lea    -0x478(%ebp),%edx
f0118418:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011841d:	b8 00 00 00 00       	mov    $0x0,%eax
f0118422:	89 d7                	mov    %edx,%edi
f0118424:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f0118426:	83 ec 0c             	sub    $0xc,%esp
f0118429:	68 04 af 13 f0       	push   $0xf013af04
f011842e:	e8 4f 88 fe ff       	call   f0100c82 <cprintf>
f0118433:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f0118436:	e8 20 45 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011843b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011843e:	e8 f9 b8 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0118443:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0118446:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011844d:	eb 1f                	jmp    f011846e <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011844f:	83 ec 0c             	sub    $0xc,%esp
f0118452:	68 00 00 20 00       	push   $0x200000
f0118457:	e8 a2 f3 fe ff       	call   f01077fe <kmalloc>
f011845c:	83 c4 10             	add    $0x10,%esp
f011845f:	89 c2                	mov    %eax,%edx
f0118461:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118464:	89 94 85 88 fb ff ff 	mov    %edx,-0x478(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f011846b:	ff 45 f4             	incl   -0xc(%ebp)
f011846e:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f0118472:	7e db                	jle    f011844f <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);
f0118474:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f011847b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011847e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118483:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0118486:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118489:	ba 00 00 00 00       	mov    $0x0,%edx
f011848e:	f7 75 e8             	divl   -0x18(%ebp)
f0118491:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118494:	29 d0                	sub    %edx,%eax
f0118496:	89 c1                	mov    %eax,%ecx
f0118498:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f011849f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01184a4:	0f b6 d0             	movzbl %al,%edx
f01184a7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01184aa:	01 d0                	add    %edx,%eax
f01184ac:	48                   	dec    %eax
f01184ad:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01184b0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01184b3:	ba 00 00 00 00       	mov    $0x0,%edx
f01184b8:	f7 75 e0             	divl   -0x20(%ebp)
f01184bb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01184be:	29 d0                	sub    %edx,%eax
f01184c0:	01 c1                	add    %eax,%ecx
f01184c2:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f01184c9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01184ce:	0f b6 c0             	movzbl %al,%eax
f01184d1:	c1 e0 04             	shl    $0x4,%eax
f01184d4:	89 c2                	mov    %eax,%edx
f01184d6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01184d9:	01 d0                	add    %edx,%eax
f01184db:	48                   	dec    %eax
f01184dc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01184df:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01184e2:	ba 00 00 00 00       	mov    $0x0,%edx
f01184e7:	f7 75 d8             	divl   -0x28(%ebp)
f01184ea:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01184ed:	29 d0                	sub    %edx,%eax
f01184ef:	01 c8                	add    %ecx,%eax
f01184f1:	ba 00 b0 1f 00       	mov    $0x1fb000,%edx
f01184f6:	29 c2                	sub    %eax,%edx
f01184f8:	89 d0                	mov    %edx,%eax
f01184fa:	83 ec 0c             	sub    $0xc,%esp
f01184fd:	50                   	push   %eax
f01184fe:	e8 fb f2 fe ff       	call   f01077fe <kmalloc>
f0118503:	83 c4 10             	add    $0x10,%esp
f0118506:	89 85 c4 fc ff ff    	mov    %eax,-0x33c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011850c:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f0118512:	89 c1                	mov    %eax,%ecx
f0118514:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f011851b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011851e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118523:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0118526:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0118529:	ba 00 00 00 00       	mov    $0x0,%edx
f011852e:	f7 75 d0             	divl   -0x30(%ebp)
f0118531:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0118534:	29 d0                	sub    %edx,%eax
f0118536:	89 c3                	mov    %eax,%ebx
f0118538:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f011853f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118544:	0f b6 d0             	movzbl %al,%edx
f0118547:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011854a:	01 d0                	add    %edx,%eax
f011854c:	48                   	dec    %eax
f011854d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0118550:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0118553:	ba 00 00 00 00       	mov    $0x0,%edx
f0118558:	f7 75 c8             	divl   -0x38(%ebp)
f011855b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011855e:	29 d0                	sub    %edx,%eax
f0118560:	01 c3                	add    %eax,%ebx
f0118562:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0118569:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011856e:	0f b6 c0             	movzbl %al,%eax
f0118571:	c1 e0 04             	shl    $0x4,%eax
f0118574:	89 c2                	mov    %eax,%edx
f0118576:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0118579:	01 d0                	add    %edx,%eax
f011857b:	48                   	dec    %eax
f011857c:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011857f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0118582:	ba 00 00 00 00       	mov    $0x0,%edx
f0118587:	f7 75 c0             	divl   -0x40(%ebp)
f011858a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011858d:	29 d0                	sub    %edx,%eax
f011858f:	01 d8                	add    %ebx,%eax
f0118591:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0118596:	39 c1                	cmp    %eax,%ecx
f0118598:	0f 85 ed 04 00 00    	jne    f0118a8b <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011859e:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f01185a4:	89 c1                	mov    %eax,%ecx
f01185a6:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01185ad:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01185b0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01185b5:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01185b8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01185bb:	ba 00 00 00 00       	mov    $0x0,%edx
f01185c0:	f7 75 b8             	divl   -0x48(%ebp)
f01185c3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01185c6:	29 d0                	sub    %edx,%eax
f01185c8:	89 c3                	mov    %eax,%ebx
f01185ca:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01185d1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01185d6:	0f b6 d0             	movzbl %al,%edx
f01185d9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01185dc:	01 d0                	add    %edx,%eax
f01185de:	48                   	dec    %eax
f01185df:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01185e2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01185e5:	ba 00 00 00 00       	mov    $0x0,%edx
f01185ea:	f7 75 b0             	divl   -0x50(%ebp)
f01185ed:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01185f0:	29 d0                	sub    %edx,%eax
f01185f2:	01 c3                	add    %eax,%ebx
f01185f4:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01185fb:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118600:	0f b6 c0             	movzbl %al,%eax
f0118603:	c1 e0 04             	shl    $0x4,%eax
f0118606:	89 c2                	mov    %eax,%edx
f0118608:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011860b:	01 d0                	add    %edx,%eax
f011860d:	48                   	dec    %eax
f011860e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0118611:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118614:	ba 00 00 00 00       	mov    $0x0,%edx
f0118619:	f7 75 a8             	divl   -0x58(%ebp)
f011861c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011861f:	29 d0                	sub    %edx,%eax
f0118621:	01 d8                	add    %ebx,%eax
f0118623:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0118628:	39 c1                	cmp    %eax,%ecx
f011862a:	0f 85 5b 04 00 00    	jne    f0118a8b <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0118630:	8b 85 a8 fb ff ff    	mov    -0x458(%ebp),%eax
f0118636:	89 c1                	mov    %eax,%ecx
f0118638:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f011863f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0118642:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118647:	89 45 9c             	mov    %eax,-0x64(%ebp)
f011864a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011864d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118652:	f7 75 a0             	divl   -0x60(%ebp)
f0118655:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0118658:	29 d0                	sub    %edx,%eax
f011865a:	89 c3                	mov    %eax,%ebx
f011865c:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0118663:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118668:	0f b6 d0             	movzbl %al,%edx
f011866b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011866e:	01 d0                	add    %edx,%eax
f0118670:	48                   	dec    %eax
f0118671:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0118674:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0118677:	ba 00 00 00 00       	mov    $0x0,%edx
f011867c:	f7 75 98             	divl   -0x68(%ebp)
f011867f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0118682:	29 d0                	sub    %edx,%eax
f0118684:	01 c3                	add    %eax,%ebx
f0118686:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f011868d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118692:	0f b6 c0             	movzbl %al,%eax
f0118695:	c1 e0 04             	shl    $0x4,%eax
f0118698:	89 c2                	mov    %eax,%edx
f011869a:	8b 45 90             	mov    -0x70(%ebp),%eax
f011869d:	01 d0                	add    %edx,%eax
f011869f:	48                   	dec    %eax
f01186a0:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01186a3:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01186a6:	ba 00 00 00 00       	mov    $0x0,%edx
f01186ab:	f7 75 90             	divl   -0x70(%ebp)
f01186ae:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01186b1:	29 d0                	sub    %edx,%eax
f01186b3:	01 d8                	add    %ebx,%eax
f01186b5:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f01186ba:	39 c1                	cmp    %eax,%ecx
f01186bc:	0f 85 c9 03 00 00    	jne    f0118a8b <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f01186c2:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f01186c8:	89 c1                	mov    %eax,%ecx
f01186ca:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01186d1:	8b 45 88             	mov    -0x78(%ebp),%eax
f01186d4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01186d9:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01186dc:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01186df:	ba 00 00 00 00       	mov    $0x0,%edx
f01186e4:	f7 75 88             	divl   -0x78(%ebp)
f01186e7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01186ea:	29 d0                	sub    %edx,%eax
f01186ec:	89 c3                	mov    %eax,%ebx
f01186ee:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01186f5:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01186fa:	0f b6 d0             	movzbl %al,%edx
f01186fd:	8b 45 80             	mov    -0x80(%ebp),%eax
f0118700:	01 d0                	add    %edx,%eax
f0118702:	48                   	dec    %eax
f0118703:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0118709:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011870f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118714:	f7 75 80             	divl   -0x80(%ebp)
f0118717:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011871d:	29 d0                	sub    %edx,%eax
f011871f:	01 c3                	add    %eax,%ebx
f0118721:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0118728:	10 00 00 
f011872b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118730:	0f b6 c0             	movzbl %al,%eax
f0118733:	c1 e0 04             	shl    $0x4,%eax
f0118736:	89 c2                	mov    %eax,%edx
f0118738:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011873e:	01 d0                	add    %edx,%eax
f0118740:	48                   	dec    %eax
f0118741:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0118747:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011874d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118752:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0118758:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011875e:	29 d0                	sub    %edx,%eax
f0118760:	01 d8                	add    %ebx,%eax
f0118762:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0118767:	39 c1                	cmp    %eax,%ecx
f0118769:	0f 85 1c 03 00 00    	jne    f0118a8b <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011876f:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f0118775:	89 c1                	mov    %eax,%ecx
f0118777:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f011877e:	10 00 00 
f0118781:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0118787:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011878c:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0118792:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118798:	ba 00 00 00 00       	mov    $0x0,%edx
f011879d:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01187a3:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01187a9:	29 d0                	sub    %edx,%eax
f01187ab:	89 c3                	mov    %eax,%ebx
f01187ad:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01187b4:	10 00 00 
f01187b7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01187bc:	0f b6 d0             	movzbl %al,%edx
f01187bf:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01187c5:	01 d0                	add    %edx,%eax
f01187c7:	48                   	dec    %eax
f01187c8:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01187ce:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01187d4:	ba 00 00 00 00       	mov    $0x0,%edx
f01187d9:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01187df:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01187e5:	29 d0                	sub    %edx,%eax
f01187e7:	01 c3                	add    %eax,%ebx
f01187e9:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01187f0:	10 00 00 
f01187f3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01187f8:	0f b6 c0             	movzbl %al,%eax
f01187fb:	c1 e0 04             	shl    $0x4,%eax
f01187fe:	89 c2                	mov    %eax,%edx
f0118800:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0118806:	01 d0                	add    %edx,%eax
f0118808:	48                   	dec    %eax
f0118809:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f011880f:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118815:	ba 00 00 00 00       	mov    $0x0,%edx
f011881a:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0118820:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118826:	29 d0                	sub    %edx,%eax
f0118828:	01 d8                	add    %ebx,%eax
f011882a:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011882f:	39 c1                	cmp    %eax,%ecx
f0118831:	0f 85 54 02 00 00    	jne    f0118a8b <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f0118837:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f011883d:	89 c1                	mov    %eax,%ecx
f011883f:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0118846:	10 00 00 
f0118849:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011884f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118854:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f011885a:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118860:	ba 00 00 00 00       	mov    $0x0,%edx
f0118865:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f011886b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118871:	29 d0                	sub    %edx,%eax
f0118873:	89 c3                	mov    %eax,%ebx
f0118875:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f011887c:	10 00 00 
f011887f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118884:	0f b6 d0             	movzbl %al,%edx
f0118887:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011888d:	01 d0                	add    %edx,%eax
f011888f:	48                   	dec    %eax
f0118890:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0118896:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011889c:	ba 00 00 00 00       	mov    $0x0,%edx
f01188a1:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01188a7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01188ad:	29 d0                	sub    %edx,%eax
f01188af:	01 c3                	add    %eax,%ebx
f01188b1:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01188b8:	10 00 00 
f01188bb:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01188c0:	0f b6 c0             	movzbl %al,%eax
f01188c3:	c1 e0 04             	shl    $0x4,%eax
f01188c6:	89 c2                	mov    %eax,%edx
f01188c8:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01188ce:	01 d0                	add    %edx,%eax
f01188d0:	48                   	dec    %eax
f01188d1:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01188d7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01188dd:	ba 00 00 00 00       	mov    $0x0,%edx
f01188e2:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01188e8:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01188ee:	29 d0                	sub    %edx,%eax
f01188f0:	01 d8                	add    %ebx,%eax
f01188f2:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f01188f7:	39 c1                	cmp    %eax,%ecx
f01188f9:	0f 85 8c 01 00 00    	jne    f0118a8b <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f01188ff:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f0118905:	89 c1                	mov    %eax,%ecx
f0118907:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f011890e:	10 00 00 
f0118911:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0118917:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011891c:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0118922:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118928:	ba 00 00 00 00       	mov    $0x0,%edx
f011892d:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0118933:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118939:	29 d0                	sub    %edx,%eax
f011893b:	89 c3                	mov    %eax,%ebx
f011893d:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0118944:	10 00 00 
f0118947:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011894c:	0f b6 d0             	movzbl %al,%edx
f011894f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118955:	01 d0                	add    %edx,%eax
f0118957:	48                   	dec    %eax
f0118958:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f011895e:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0118964:	ba 00 00 00 00       	mov    $0x0,%edx
f0118969:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f011896f:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0118975:	29 d0                	sub    %edx,%eax
f0118977:	01 c3                	add    %eax,%ebx
f0118979:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0118980:	10 00 00 
f0118983:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118988:	0f b6 c0             	movzbl %al,%eax
f011898b:	c1 e0 04             	shl    $0x4,%eax
f011898e:	89 c2                	mov    %eax,%edx
f0118990:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0118996:	01 d0                	add    %edx,%eax
f0118998:	48                   	dec    %eax
f0118999:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f011899f:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01189a5:	ba 00 00 00 00       	mov    $0x0,%edx
f01189aa:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01189b0:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01189b6:	29 d0                	sub    %edx,%eax
f01189b8:	01 d8                	add    %ebx,%eax
f01189ba:	2d 00 c0 df 06       	sub    $0x6dfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f01189bf:	39 c1                	cmp    %eax,%ecx
f01189c1:	0f 85 c4 00 00 00    	jne    f0118a8b <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f01189c7:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f01189cd:	89 c1                	mov    %eax,%ecx
f01189cf:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f01189d6:	10 00 00 
f01189d9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01189df:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01189e4:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f01189ea:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01189f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01189f5:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f01189fb:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118a01:	29 d0                	sub    %edx,%eax
f0118a03:	89 c3                	mov    %eax,%ebx
f0118a05:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0118a0c:	10 00 00 
f0118a0f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118a14:	0f b6 d0             	movzbl %al,%edx
f0118a17:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0118a1d:	01 d0                	add    %edx,%eax
f0118a1f:	48                   	dec    %eax
f0118a20:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0118a26:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118a2c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a31:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0118a37:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118a3d:	29 d0                	sub    %edx,%eax
f0118a3f:	01 c3                	add    %eax,%ebx
f0118a41:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0118a48:	10 00 00 
f0118a4b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118a50:	0f b6 c0             	movzbl %al,%eax
f0118a53:	c1 e0 04             	shl    $0x4,%eax
f0118a56:	89 c2                	mov    %eax,%edx
f0118a58:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0118a5e:	01 d0                	add    %edx,%eax
f0118a60:	48                   	dec    %eax
f0118a61:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0118a67:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118a6d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a72:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0118a78:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118a7e:	29 d0                	sub    %edx,%eax
f0118a80:	01 d8                	add    %ebx,%eax
f0118a82:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f0118a87:	39 c1                	cmp    %eax,%ecx
f0118a89:	74 17                	je     f0118aa2 <test_kmalloc_nextfit+0x6cb>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f0118a8b:	83 ec 04             	sub    $0x4,%esp
f0118a8e:	68 54 af 13 f0       	push   $0xf013af54
f0118a93:	68 03 01 00 00       	push   $0x103
f0118a98:	68 da ac 13 f0       	push   $0xf013acda
f0118a9d:	e8 59 77 fe ff       	call   f01001fb <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118aa2:	e8 95 b2 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0118aa7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118aaa:	74 17                	je     f0118ac3 <test_kmalloc_nextfit+0x6ec>
f0118aac:	83 ec 04             	sub    $0x4,%esp
f0118aaf:	68 f4 ac 13 f0       	push   $0xf013acf4
f0118ab4:	68 05 01 00 00       	push   $0x105
f0118ab9:	68 da ac 13 f0       	push   $0xf013acda
f0118abe:	e8 38 77 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f0118ac3:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118ac6:	e8 90 3e ff ff       	call   f010c95b <sys_calculate_free_frames>
f0118acb:	29 c3                	sub    %eax,%ebx
f0118acd:	89 d9                	mov    %ebx,%ecx
f0118acf:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0118ad6:	10 00 00 
f0118ad9:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0118adf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118ae4:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0118aea:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0118af0:	ba 00 00 00 00       	mov    $0x0,%edx
f0118af5:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0118afb:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0118b01:	29 d0                	sub    %edx,%eax
f0118b03:	89 c3                	mov    %eax,%ebx
f0118b05:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0118b0c:	10 00 00 
f0118b0f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118b14:	0f b6 d0             	movzbl %al,%edx
f0118b17:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0118b1d:	01 d0                	add    %edx,%eax
f0118b1f:	48                   	dec    %eax
f0118b20:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0118b26:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0118b2c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118b31:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0118b37:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0118b3d:	29 d0                	sub    %edx,%eax
f0118b3f:	01 c3                	add    %eax,%ebx
f0118b41:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0118b48:	10 00 00 
f0118b4b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118b50:	0f b6 c0             	movzbl %al,%eax
f0118b53:	c1 e0 04             	shl    $0x4,%eax
f0118b56:	89 c2                	mov    %eax,%edx
f0118b58:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0118b5e:	01 d0                	add    %edx,%eax
f0118b60:	48                   	dec    %eax
f0118b61:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0118b67:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0118b6d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118b72:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0118b78:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0118b7e:	29 d0                	sub    %edx,%eax
f0118b80:	01 d8                	add    %ebx,%eax
f0118b82:	ba 00 b0 ff 09       	mov    $0x9ffb000,%edx
f0118b87:	29 c2                	sub    %eax,%edx
f0118b89:	89 d0                	mov    %edx,%eax
f0118b8b:	c1 e8 0c             	shr    $0xc,%eax
f0118b8e:	39 c1                	cmp    %eax,%ecx
f0118b90:	74 17                	je     f0118ba9 <test_kmalloc_nextfit+0x7d2>
f0118b92:	83 ec 04             	sub    $0x4,%esp
f0118b95:	68 97 af 13 f0       	push   $0xf013af97
f0118b9a:	68 06 01 00 00       	push   $0x106
f0118b9f:	68 da ac 13 f0       	push   $0xf013acda
f0118ba4:	e8 52 76 fe ff       	call   f01001fb <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f0118ba9:	e8 8e b1 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0118bae:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118bb1:	e8 a5 3d ff ff       	call   f010c95b <sys_calculate_free_frames>
f0118bb6:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f0118bb9:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f0118bbf:	83 ec 0c             	sub    $0xc,%esp
f0118bc2:	50                   	push   %eax
f0118bc3:	e8 f8 ec fe ff       	call   f01078c0 <kfree>
f0118bc8:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f0118bcb:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f0118bd1:	83 ec 0c             	sub    $0xc,%esp
f0118bd4:	50                   	push   %eax
f0118bd5:	e8 e6 ec fe ff       	call   f01078c0 <kfree>
f0118bda:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f0118bdd:	8b 85 94 fb ff ff    	mov    -0x46c(%ebp),%eax
f0118be3:	83 ec 0c             	sub    $0xc,%esp
f0118be6:	50                   	push   %eax
f0118be7:	e8 d4 ec fe ff       	call   f01078c0 <kfree>
f0118bec:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f0118bef:	8b 85 9c fb ff ff    	mov    -0x464(%ebp),%eax
f0118bf5:	83 ec 0c             	sub    $0xc,%esp
f0118bf8:	50                   	push   %eax
f0118bf9:	e8 c2 ec fe ff       	call   f01078c0 <kfree>
f0118bfe:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f0118c01:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f0118c07:	83 ec 0c             	sub    $0xc,%esp
f0118c0a:	50                   	push   %eax
f0118c0b:	e8 b0 ec fe ff       	call   f01078c0 <kfree>
f0118c10:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f0118c13:	8b 85 b8 fb ff ff    	mov    -0x448(%ebp),%eax
f0118c19:	83 ec 0c             	sub    $0xc,%esp
f0118c1c:	50                   	push   %eax
f0118c1d:	e8 9e ec fe ff       	call   f01078c0 <kfree>
f0118c22:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f0118c25:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f0118c2b:	83 ec 0c             	sub    $0xc,%esp
f0118c2e:	50                   	push   %eax
f0118c2f:	e8 8c ec fe ff       	call   f01078c0 <kfree>
f0118c34:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f0118c37:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f0118c3d:	83 ec 0c             	sub    $0xc,%esp
f0118c40:	50                   	push   %eax
f0118c41:	e8 7a ec fe ff       	call   f01078c0 <kfree>
f0118c46:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f0118c49:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f0118c4f:	83 ec 0c             	sub    $0xc,%esp
f0118c52:	50                   	push   %eax
f0118c53:	e8 68 ec fe ff       	call   f01078c0 <kfree>
f0118c58:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f0118c5b:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f0118c61:	83 ec 0c             	sub    $0xc,%esp
f0118c64:	50                   	push   %eax
f0118c65:	e8 56 ec fe ff       	call   f01078c0 <kfree>
f0118c6a:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118c6d:	e8 ca b0 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0118c72:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118c75:	74 17                	je     f0118c8e <test_kmalloc_nextfit+0x8b7>
f0118c77:	83 ec 04             	sub    $0x4,%esp
f0118c7a:	68 f4 ac 13 f0       	push   $0xf013acf4
f0118c7f:	68 17 01 00 00       	push   $0x117
f0118c84:	68 da ac 13 f0       	push   $0xf013acda
f0118c89:	e8 6d 75 fe ff       	call   f01001fb <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0118c8e:	e8 c8 3c ff ff       	call   f010c95b <sys_calculate_free_frames>
f0118c93:	89 c2                	mov    %eax,%edx
f0118c95:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118c98:	89 d1                	mov    %edx,%ecx
f0118c9a:	29 c1                	sub    %eax,%ecx
f0118c9c:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0118ca3:	10 00 00 
f0118ca6:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0118cac:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118cb1:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0118cb7:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118cbd:	ba 00 00 00 00       	mov    $0x0,%edx
f0118cc2:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0118cc8:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118cce:	29 d0                	sub    %edx,%eax
f0118cd0:	89 c3                	mov    %eax,%ebx
f0118cd2:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0118cd9:	10 00 00 
f0118cdc:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118ce1:	0f b6 d0             	movzbl %al,%edx
f0118ce4:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0118cea:	01 d0                	add    %edx,%eax
f0118cec:	48                   	dec    %eax
f0118ced:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0118cf3:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0118cf9:	ba 00 00 00 00       	mov    $0x0,%edx
f0118cfe:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0118d04:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0118d0a:	29 d0                	sub    %edx,%eax
f0118d0c:	01 c3                	add    %eax,%ebx
f0118d0e:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0118d15:	10 00 00 
f0118d18:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118d1d:	0f b6 c0             	movzbl %al,%eax
f0118d20:	c1 e0 04             	shl    $0x4,%eax
f0118d23:	89 c2                	mov    %eax,%edx
f0118d25:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118d2b:	01 d0                	add    %edx,%eax
f0118d2d:	48                   	dec    %eax
f0118d2e:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0118d34:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0118d3a:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d3f:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0118d45:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0118d4b:	29 d0                	sub    %edx,%eax
f0118d4d:	01 d8                	add    %ebx,%eax
f0118d4f:	ba 00 b0 3f 01       	mov    $0x13fb000,%edx
f0118d54:	29 c2                	sub    %eax,%edx
f0118d56:	89 d0                	mov    %edx,%eax
f0118d58:	c1 e8 0c             	shr    $0xc,%eax
f0118d5b:	39 c1                	cmp    %eax,%ecx
f0118d5d:	74 17                	je     f0118d76 <test_kmalloc_nextfit+0x99f>
f0118d5f:	83 ec 04             	sub    $0x4,%esp
f0118d62:	68 a8 af 13 f0       	push   $0xf013afa8
f0118d67:	68 18 01 00 00       	push   $0x118
f0118d6c:	68 da ac 13 f0       	push   $0xf013acda
f0118d71:	e8 85 74 fe ff       	call   f01001fb <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f0118d76:	e8 c1 af fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0118d7b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118d7e:	e8 d8 3b ff ff       	call   f010c95b <sys_calculate_free_frames>
f0118d83:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f0118d86:	83 ec 0c             	sub    $0xc,%esp
f0118d89:	68 00 fc 0f 00       	push   $0xffc00
f0118d8e:	e8 6b ea fe ff       	call   f01077fe <kmalloc>
f0118d93:	83 c4 10             	add    $0x10,%esp
f0118d96:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f0118d9c:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0118da3:	10 00 00 
f0118da6:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118dac:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118db1:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0118db7:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0118dbd:	ba 00 00 00 00       	mov    $0x0,%edx
f0118dc2:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0118dc8:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0118dce:	29 d0                	sub    %edx,%eax
f0118dd0:	89 c1                	mov    %eax,%ecx
f0118dd2:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0118dd9:	10 00 00 
f0118ddc:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118de1:	0f b6 d0             	movzbl %al,%edx
f0118de4:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118dea:	01 d0                	add    %edx,%eax
f0118dec:	48                   	dec    %eax
f0118ded:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0118df3:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118df9:	ba 00 00 00 00       	mov    $0x0,%edx
f0118dfe:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0118e04:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118e0a:	29 d0                	sub    %edx,%eax
f0118e0c:	01 c1                	add    %eax,%ecx
f0118e0e:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0118e15:	10 00 00 
f0118e18:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118e1d:	0f b6 c0             	movzbl %al,%eax
f0118e20:	c1 e0 04             	shl    $0x4,%eax
f0118e23:	89 c2                	mov    %eax,%edx
f0118e25:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0118e2b:	01 d0                	add    %edx,%eax
f0118e2d:	48                   	dec    %eax
f0118e2e:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0118e34:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0118e3a:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e3f:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0118e45:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0118e4b:	29 d0                	sub    %edx,%eax
f0118e4d:	01 c8                	add    %ecx,%eax
f0118e4f:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f0118e55:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118e5b:	39 c2                	cmp    %eax,%edx
f0118e5d:	74 17                	je     f0118e76 <test_kmalloc_nextfit+0xa9f>
		panic("Next Fit not working correctly");
f0118e5f:	83 ec 04             	sub    $0x4,%esp
f0118e62:	68 e8 af 13 f0       	push   $0xf013afe8
f0118e67:	68 1f 01 00 00       	push   $0x11f
f0118e6c:	68 da ac 13 f0       	push   $0xf013acda
f0118e71:	e8 85 73 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118e76:	e8 c1 ae fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0118e7b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118e7e:	74 17                	je     f0118e97 <test_kmalloc_nextfit+0xac0>
f0118e80:	83 ec 04             	sub    $0x4,%esp
f0118e83:	68 f4 ac 13 f0       	push   $0xf013acf4
f0118e88:	68 20 01 00 00       	push   $0x120
f0118e8d:	68 da ac 13 f0       	push   $0xf013acda
f0118e92:	e8 64 73 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0118e97:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118e9a:	e8 bc 3a ff ff       	call   f010c95b <sys_calculate_free_frames>
f0118e9f:	29 c3                	sub    %eax,%ebx
f0118ea1:	89 d8                	mov    %ebx,%eax
f0118ea3:	3d 00 01 00 00       	cmp    $0x100,%eax
f0118ea8:	74 17                	je     f0118ec1 <test_kmalloc_nextfit+0xaea>
f0118eaa:	83 ec 04             	sub    $0x4,%esp
f0118ead:	68 97 af 13 f0       	push   $0xf013af97
f0118eb2:	68 21 01 00 00       	push   $0x121
f0118eb7:	68 da ac 13 f0       	push   $0xf013acda
f0118ebc:	e8 3a 73 fe ff       	call   f01001fb <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118ec1:	e8 76 ae fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0118ec6:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118ec9:	e8 8d 3a ff ff       	call   f010c95b <sys_calculate_free_frames>
f0118ece:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f0118ed1:	83 ec 0c             	sub    $0xc,%esp
f0118ed4:	68 00 04 00 00       	push   $0x400
f0118ed9:	e8 20 e9 fe ff       	call   f01077fe <kmalloc>
f0118ede:	83 c4 10             	add    $0x10,%esp
f0118ee1:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f0118ee7:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0118eee:	10 00 00 
f0118ef1:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0118ef7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118efc:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0118f02:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0118f08:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f0d:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0118f13:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0118f19:	29 d0                	sub    %edx,%eax
f0118f1b:	89 c1                	mov    %eax,%ecx
f0118f1d:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0118f24:	10 00 00 
f0118f27:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118f2c:	0f b6 d0             	movzbl %al,%edx
f0118f2f:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0118f35:	01 d0                	add    %edx,%eax
f0118f37:	48                   	dec    %eax
f0118f38:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0118f3e:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0118f44:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f49:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0118f4f:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0118f55:	29 d0                	sub    %edx,%eax
f0118f57:	01 c1                	add    %eax,%ecx
f0118f59:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0118f60:	10 00 00 
f0118f63:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118f68:	0f b6 c0             	movzbl %al,%eax
f0118f6b:	c1 e0 04             	shl    $0x4,%eax
f0118f6e:	89 c2                	mov    %eax,%edx
f0118f70:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118f76:	01 d0                	add    %edx,%eax
f0118f78:	48                   	dec    %eax
f0118f79:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0118f7f:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0118f85:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f8a:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0118f90:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0118f96:	29 d0                	sub    %edx,%eax
f0118f98:	01 c8                	add    %ecx,%eax
f0118f9a:	8d 90 00 40 10 f6    	lea    -0x9efc000(%eax),%edx
f0118fa0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118fa6:	39 c2                	cmp    %eax,%edx
f0118fa8:	74 17                	je     f0118fc1 <test_kmalloc_nextfit+0xbea>
		panic("Next Fit not working correctly");
f0118faa:	83 ec 04             	sub    $0x4,%esp
f0118fad:	68 e8 af 13 f0       	push   $0xf013afe8
f0118fb2:	68 27 01 00 00       	push   $0x127
f0118fb7:	68 da ac 13 f0       	push   $0xf013acda
f0118fbc:	e8 3a 72 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118fc1:	e8 76 ad fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0118fc6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118fc9:	74 17                	je     f0118fe2 <test_kmalloc_nextfit+0xc0b>
f0118fcb:	83 ec 04             	sub    $0x4,%esp
f0118fce:	68 f4 ac 13 f0       	push   $0xf013acf4
f0118fd3:	68 28 01 00 00       	push   $0x128
f0118fd8:	68 da ac 13 f0       	push   $0xf013acda
f0118fdd:	e8 19 72 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0118fe2:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118fe5:	e8 71 39 ff ff       	call   f010c95b <sys_calculate_free_frames>
f0118fea:	29 c3                	sub    %eax,%ebx
f0118fec:	89 d8                	mov    %ebx,%eax
f0118fee:	83 f8 01             	cmp    $0x1,%eax
f0118ff1:	74 17                	je     f011900a <test_kmalloc_nextfit+0xc33>
f0118ff3:	83 ec 04             	sub    $0x4,%esp
f0118ff6:	68 97 af 13 f0       	push   $0xf013af97
f0118ffb:	68 29 01 00 00       	push   $0x129
f0119000:	68 da ac 13 f0       	push   $0xf013acda
f0119005:	e8 f1 71 fe ff       	call   f01001fb <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011900a:	e8 2d ad fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011900f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119012:	e8 44 39 ff ff       	call   f010c95b <sys_calculate_free_frames>
f0119017:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011901a:	83 ec 0c             	sub    $0xc,%esp
f011901d:	68 00 00 50 00       	push   $0x500000
f0119022:	e8 d7 e7 fe ff       	call   f01077fe <kmalloc>
f0119027:	83 c4 10             	add    $0x10,%esp
f011902a:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f0119030:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f0119037:	10 00 00 
f011903a:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0119040:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119045:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011904b:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0119051:	ba 00 00 00 00       	mov    $0x0,%edx
f0119056:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011905c:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0119062:	29 d0                	sub    %edx,%eax
f0119064:	89 c1                	mov    %eax,%ecx
f0119066:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011906d:	10 00 00 
f0119070:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119075:	0f b6 d0             	movzbl %al,%edx
f0119078:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011907e:	01 d0                	add    %edx,%eax
f0119080:	48                   	dec    %eax
f0119081:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f0119087:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011908d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119092:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f0119098:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011909e:	29 d0                	sub    %edx,%eax
f01190a0:	01 c1                	add    %eax,%ecx
f01190a2:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f01190a9:	10 00 00 
f01190ac:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01190b1:	0f b6 c0             	movzbl %al,%eax
f01190b4:	c1 e0 04             	shl    $0x4,%eax
f01190b7:	89 c2                	mov    %eax,%edx
f01190b9:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01190bf:	01 d0                	add    %edx,%eax
f01190c1:	48                   	dec    %eax
f01190c2:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f01190c8:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01190ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01190d3:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f01190d9:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01190df:	29 d0                	sub    %edx,%eax
f01190e1:	01 c8                	add    %ecx,%eax
f01190e3:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f01190e9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01190ef:	39 c2                	cmp    %eax,%edx
f01190f1:	74 17                	je     f011910a <test_kmalloc_nextfit+0xd33>
		panic("Next Fit not working correctly");
f01190f3:	83 ec 04             	sub    $0x4,%esp
f01190f6:	68 e8 af 13 f0       	push   $0xf013afe8
f01190fb:	68 2f 01 00 00       	push   $0x12f
f0119100:	68 da ac 13 f0       	push   $0xf013acda
f0119105:	e8 f1 70 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011910a:	e8 2d ac fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011910f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119112:	74 17                	je     f011912b <test_kmalloc_nextfit+0xd54>
f0119114:	83 ec 04             	sub    $0x4,%esp
f0119117:	68 f4 ac 13 f0       	push   $0xf013acf4
f011911c:	68 30 01 00 00       	push   $0x130
f0119121:	68 da ac 13 f0       	push   $0xf013acda
f0119126:	e8 d0 70 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011912b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011912e:	e8 28 38 ff ff       	call   f010c95b <sys_calculate_free_frames>
f0119133:	29 c3                	sub    %eax,%ebx
f0119135:	89 d8                	mov    %ebx,%eax
f0119137:	3d 00 05 00 00       	cmp    $0x500,%eax
f011913c:	74 17                	je     f0119155 <test_kmalloc_nextfit+0xd7e>
f011913e:	83 ec 04             	sub    $0x4,%esp
f0119141:	68 97 af 13 f0       	push   $0xf013af97
f0119146:	68 31 01 00 00       	push   $0x131
f011914b:	68 da ac 13 f0       	push   $0xf013acda
f0119150:	e8 a6 70 fe ff       	call   f01001fb <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119155:	e8 e2 ab fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011915a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011915d:	e8 f9 37 ff ff       	call   f010c95b <sys_calculate_free_frames>
f0119162:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f0119165:	83 ec 0c             	sub    $0xc,%esp
f0119168:	68 00 00 10 00       	push   $0x100000
f011916d:	e8 8c e6 fe ff       	call   f01077fe <kmalloc>
f0119172:	83 c4 10             	add    $0x10,%esp
f0119175:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f011917b:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f0119182:	10 00 00 
f0119185:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011918b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119190:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f0119196:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011919c:	ba 00 00 00 00       	mov    $0x0,%edx
f01191a1:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f01191a7:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01191ad:	29 d0                	sub    %edx,%eax
f01191af:	89 c1                	mov    %eax,%ecx
f01191b1:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f01191b8:	10 00 00 
f01191bb:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01191c0:	0f b6 d0             	movzbl %al,%edx
f01191c3:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f01191c9:	01 d0                	add    %edx,%eax
f01191cb:	48                   	dec    %eax
f01191cc:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f01191d2:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01191d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01191dd:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f01191e3:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01191e9:	29 d0                	sub    %edx,%eax
f01191eb:	01 c1                	add    %eax,%ecx
f01191ed:	c7 85 84 fe ff ff 00 	movl   $0x1000,-0x17c(%ebp)
f01191f4:	10 00 00 
f01191f7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01191fc:	0f b6 c0             	movzbl %al,%eax
f01191ff:	c1 e0 04             	shl    $0x4,%eax
f0119202:	89 c2                	mov    %eax,%edx
f0119204:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011920a:	01 d0                	add    %edx,%eax
f011920c:	48                   	dec    %eax
f011920d:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
f0119213:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0119219:	ba 00 00 00 00       	mov    $0x0,%edx
f011921e:	f7 b5 84 fe ff ff    	divl   -0x17c(%ebp)
f0119224:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011922a:	29 d0                	sub    %edx,%eax
f011922c:	01 c8                	add    %ecx,%eax
f011922e:	8d 90 00 40 90 f7    	lea    -0x86fc000(%eax),%edx
f0119234:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011923a:	39 c2                	cmp    %eax,%edx
f011923c:	74 17                	je     f0119255 <test_kmalloc_nextfit+0xe7e>
		panic("Next Fit not working correctly");
f011923e:	83 ec 04             	sub    $0x4,%esp
f0119241:	68 e8 af 13 f0       	push   $0xf013afe8
f0119246:	68 37 01 00 00       	push   $0x137
f011924b:	68 da ac 13 f0       	push   $0xf013acda
f0119250:	e8 a6 6f fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119255:	e8 e2 aa fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011925a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011925d:	74 17                	je     f0119276 <test_kmalloc_nextfit+0xe9f>
f011925f:	83 ec 04             	sub    $0x4,%esp
f0119262:	68 f4 ac 13 f0       	push   $0xf013acf4
f0119267:	68 38 01 00 00       	push   $0x138
f011926c:	68 da ac 13 f0       	push   $0xf013acda
f0119271:	e8 85 6f fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119276:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119279:	e8 dd 36 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011927e:	29 c3                	sub    %eax,%ebx
f0119280:	89 d8                	mov    %ebx,%eax
f0119282:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119287:	74 17                	je     f01192a0 <test_kmalloc_nextfit+0xec9>
f0119289:	83 ec 04             	sub    $0x4,%esp
f011928c:	68 97 af 13 f0       	push   $0xf013af97
f0119291:	68 39 01 00 00       	push   $0x139
f0119296:	68 da ac 13 f0       	push   $0xf013acda
f011929b:	e8 5b 6f fe ff       	call   f01001fb <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f01192a0:	e8 97 aa fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01192a5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01192a8:	e8 ae 36 ff ff       	call   f010c95b <sys_calculate_free_frames>
f01192ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f01192b0:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f01192b6:	83 ec 0c             	sub    $0xc,%esp
f01192b9:	50                   	push   %eax
f01192ba:	e8 01 e6 fe ff       	call   f01078c0 <kfree>
f01192bf:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01192c2:	e8 75 aa fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01192c7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01192ca:	74 17                	je     f01192e3 <test_kmalloc_nextfit+0xf0c>
f01192cc:	83 ec 04             	sub    $0x4,%esp
f01192cf:	68 f4 ac 13 f0       	push   $0xf013acf4
f01192d4:	68 3e 01 00 00       	push   $0x13e
f01192d9:	68 da ac 13 f0       	push   $0xf013acda
f01192de:	e8 18 6f fe ff       	call   f01001fb <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f01192e3:	e8 73 36 ff ff       	call   f010c95b <sys_calculate_free_frames>
f01192e8:	89 c2                	mov    %eax,%edx
f01192ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01192ed:	29 c2                	sub    %eax,%edx
f01192ef:	89 d0                	mov    %edx,%eax
f01192f1:	3d 00 02 00 00       	cmp    $0x200,%eax
f01192f6:	74 17                	je     f011930f <test_kmalloc_nextfit+0xf38>
f01192f8:	83 ec 04             	sub    $0x4,%esp
f01192fb:	68 a8 af 13 f0       	push   $0xf013afa8
f0119300:	68 3f 01 00 00       	push   $0x13f
f0119305:	68 da ac 13 f0       	push   $0xf013acda
f011930a:	e8 ec 6e fe ff       	call   f01001fb <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011930f:	e8 28 aa fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119314:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119317:	e8 3f 36 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011931c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f011931f:	83 ec 0c             	sub    $0xc,%esp
f0119322:	68 00 04 00 00       	push   $0x400
f0119327:	e8 d2 e4 fe ff       	call   f01077fe <kmalloc>
f011932c:	83 c4 10             	add    $0x10,%esp
f011932f:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f0119335:	c7 85 7c fe ff ff 00 	movl   $0x1000,-0x184(%ebp)
f011933c:	10 00 00 
f011933f:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0119345:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011934a:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
f0119350:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0119356:	ba 00 00 00 00       	mov    $0x0,%edx
f011935b:	f7 b5 7c fe ff ff    	divl   -0x184(%ebp)
f0119361:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0119367:	29 d0                	sub    %edx,%eax
f0119369:	89 c1                	mov    %eax,%ecx
f011936b:	c7 85 74 fe ff ff 00 	movl   $0x1000,-0x18c(%ebp)
f0119372:	10 00 00 
f0119375:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011937a:	0f b6 d0             	movzbl %al,%edx
f011937d:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0119383:	01 d0                	add    %edx,%eax
f0119385:	48                   	dec    %eax
f0119386:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
f011938c:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0119392:	ba 00 00 00 00       	mov    $0x0,%edx
f0119397:	f7 b5 74 fe ff ff    	divl   -0x18c(%ebp)
f011939d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01193a3:	29 d0                	sub    %edx,%eax
f01193a5:	01 c1                	add    %eax,%ecx
f01193a7:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f01193ae:	10 00 00 
f01193b1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01193b6:	0f b6 c0             	movzbl %al,%eax
f01193b9:	c1 e0 04             	shl    $0x4,%eax
f01193bc:	89 c2                	mov    %eax,%edx
f01193be:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01193c4:	01 d0                	add    %edx,%eax
f01193c6:	48                   	dec    %eax
f01193c7:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f01193cd:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01193d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01193d8:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f01193de:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01193e4:	29 d0                	sub    %edx,%eax
f01193e6:	01 c8                	add    %ecx,%eax
f01193e8:	8d 90 00 40 e0 f7    	lea    -0x81fc000(%eax),%edx
f01193ee:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01193f4:	39 c2                	cmp    %eax,%edx
f01193f6:	74 17                	je     f011940f <test_kmalloc_nextfit+0x1038>
		panic("Next Fit not working correctly");
f01193f8:	83 ec 04             	sub    $0x4,%esp
f01193fb:	68 e8 af 13 f0       	push   $0xf013afe8
f0119400:	68 45 01 00 00       	push   $0x145
f0119405:	68 da ac 13 f0       	push   $0xf013acda
f011940a:	e8 ec 6d fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011940f:	e8 28 a9 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119414:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119417:	74 17                	je     f0119430 <test_kmalloc_nextfit+0x1059>
f0119419:	83 ec 04             	sub    $0x4,%esp
f011941c:	68 f4 ac 13 f0       	push   $0xf013acf4
f0119421:	68 46 01 00 00       	push   $0x146
f0119426:	68 da ac 13 f0       	push   $0xf013acda
f011942b:	e8 cb 6d fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0119430:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119433:	e8 23 35 ff ff       	call   f010c95b <sys_calculate_free_frames>
f0119438:	29 c3                	sub    %eax,%ebx
f011943a:	89 d8                	mov    %ebx,%eax
f011943c:	83 f8 01             	cmp    $0x1,%eax
f011943f:	74 17                	je     f0119458 <test_kmalloc_nextfit+0x1081>
f0119441:	83 ec 04             	sub    $0x4,%esp
f0119444:	68 97 af 13 f0       	push   $0xf013af97
f0119449:	68 47 01 00 00       	push   $0x147
f011944e:	68 da ac 13 f0       	push   $0xf013acda
f0119453:	e8 a3 6d fe ff       	call   f01001fb <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119458:	e8 df a8 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011945d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119460:	e8 f6 34 ff ff       	call   f010c95b <sys_calculate_free_frames>
f0119465:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f0119468:	83 ec 0c             	sub    $0xc,%esp
f011946b:	68 00 e0 1f 00       	push   $0x1fe000
f0119470:	e8 89 e3 fe ff       	call   f01077fe <kmalloc>
f0119475:	83 c4 10             	add    $0x10,%esp
f0119478:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f011947e:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f0119485:	10 00 00 
f0119488:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011948e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119493:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f0119499:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011949f:	ba 00 00 00 00       	mov    $0x0,%edx
f01194a4:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f01194aa:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01194b0:	29 d0                	sub    %edx,%eax
f01194b2:	89 c1                	mov    %eax,%ecx
f01194b4:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f01194bb:	10 00 00 
f01194be:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01194c3:	0f b6 d0             	movzbl %al,%edx
f01194c6:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01194cc:	01 d0                	add    %edx,%eax
f01194ce:	48                   	dec    %eax
f01194cf:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f01194d5:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01194db:	ba 00 00 00 00       	mov    $0x0,%edx
f01194e0:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f01194e6:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01194ec:	29 d0                	sub    %edx,%eax
f01194ee:	01 c1                	add    %eax,%ecx
f01194f0:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f01194f7:	10 00 00 
f01194fa:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01194ff:	0f b6 c0             	movzbl %al,%eax
f0119502:	c1 e0 04             	shl    $0x4,%eax
f0119505:	89 c2                	mov    %eax,%edx
f0119507:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011950d:	01 d0                	add    %edx,%eax
f011950f:	48                   	dec    %eax
f0119510:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f0119516:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011951c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119521:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f0119527:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011952d:	29 d0                	sub    %edx,%eax
f011952f:	01 c8                	add    %ecx,%eax
f0119531:	8d 90 00 50 e0 f7    	lea    -0x81fb000(%eax),%edx
f0119537:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011953d:	39 c2                	cmp    %eax,%edx
f011953f:	74 17                	je     f0119558 <test_kmalloc_nextfit+0x1181>
		panic("Next Fit not working correctly");
f0119541:	83 ec 04             	sub    $0x4,%esp
f0119544:	68 e8 af 13 f0       	push   $0xf013afe8
f0119549:	68 4d 01 00 00       	push   $0x14d
f011954e:	68 da ac 13 f0       	push   $0xf013acda
f0119553:	e8 a3 6c fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119558:	e8 df a7 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011955d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119560:	74 17                	je     f0119579 <test_kmalloc_nextfit+0x11a2>
f0119562:	83 ec 04             	sub    $0x4,%esp
f0119565:	68 f4 ac 13 f0       	push   $0xf013acf4
f011956a:	68 4e 01 00 00       	push   $0x14e
f011956f:	68 da ac 13 f0       	push   $0xf013acda
f0119574:	e8 82 6c fe ff       	call   f01001fb <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0119579:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011957c:	e8 da 33 ff ff       	call   f010c95b <sys_calculate_free_frames>
f0119581:	29 c3                	sub    %eax,%ebx
f0119583:	89 d8                	mov    %ebx,%eax
f0119585:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f011958a:	74 17                	je     f01195a3 <test_kmalloc_nextfit+0x11cc>
f011958c:	83 ec 04             	sub    $0x4,%esp
f011958f:	68 97 af 13 f0       	push   $0xf013af97
f0119594:	68 50 01 00 00       	push   $0x150
f0119599:	68 da ac 13 f0       	push   $0xf013acda
f011959e:	e8 58 6c fe ff       	call   f01001fb <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f01195a3:	e8 94 a7 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01195a8:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01195ab:	e8 ab 33 ff ff       	call   f010c95b <sys_calculate_free_frames>
f01195b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f01195b3:	83 ec 0c             	sub    $0xc,%esp
f01195b6:	68 00 00 08 00       	push   $0x80000
f01195bb:	e8 3e e2 fe ff       	call   f01077fe <kmalloc>
f01195c0:	83 c4 10             	add    $0x10,%esp
f01195c3:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f01195c9:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f01195d0:	10 00 00 
f01195d3:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01195d9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01195de:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f01195e4:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01195ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01195ef:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f01195f5:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01195fb:	29 d0                	sub    %edx,%eax
f01195fd:	89 c1                	mov    %eax,%ecx
f01195ff:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f0119606:	10 00 00 
f0119609:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011960e:	0f b6 d0             	movzbl %al,%edx
f0119611:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0119617:	01 d0                	add    %edx,%eax
f0119619:	48                   	dec    %eax
f011961a:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f0119620:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0119626:	ba 00 00 00 00       	mov    $0x0,%edx
f011962b:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f0119631:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0119637:	29 d0                	sub    %edx,%eax
f0119639:	01 c1                	add    %eax,%ecx
f011963b:	c7 85 3c fe ff ff 00 	movl   $0x1000,-0x1c4(%ebp)
f0119642:	10 00 00 
f0119645:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011964a:	0f b6 c0             	movzbl %al,%eax
f011964d:	c1 e0 04             	shl    $0x4,%eax
f0119650:	89 c2                	mov    %eax,%edx
f0119652:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0119658:	01 d0                	add    %edx,%eax
f011965a:	48                   	dec    %eax
f011965b:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
f0119661:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0119667:	ba 00 00 00 00       	mov    $0x0,%edx
f011966c:	f7 b5 3c fe ff ff    	divl   -0x1c4(%ebp)
f0119672:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0119678:	29 d0                	sub    %edx,%eax
f011967a:	01 c8                	add    %ecx,%eax
f011967c:	8d 90 00 40 80 f8    	lea    -0x77fc000(%eax),%edx
f0119682:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119688:	39 c2                	cmp    %eax,%edx
f011968a:	74 17                	je     f01196a3 <test_kmalloc_nextfit+0x12cc>
		panic("Next Fit not working correctly");
f011968c:	83 ec 04             	sub    $0x4,%esp
f011968f:	68 e8 af 13 f0       	push   $0xf013afe8
f0119694:	68 56 01 00 00       	push   $0x156
f0119699:	68 da ac 13 f0       	push   $0xf013acda
f011969e:	e8 58 6b fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01196a3:	e8 94 a6 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01196a8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01196ab:	74 17                	je     f01196c4 <test_kmalloc_nextfit+0x12ed>
f01196ad:	83 ec 04             	sub    $0x4,%esp
f01196b0:	68 f4 ac 13 f0       	push   $0xf013acf4
f01196b5:	68 57 01 00 00       	push   $0x157
f01196ba:	68 da ac 13 f0       	push   $0xf013acda
f01196bf:	e8 37 6b fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f01196c4:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01196c7:	e8 8f 32 ff ff       	call   f010c95b <sys_calculate_free_frames>
f01196cc:	29 c3                	sub    %eax,%ebx
f01196ce:	89 d8                	mov    %ebx,%eax
f01196d0:	3d 80 00 00 00       	cmp    $0x80,%eax
f01196d5:	74 17                	je     f01196ee <test_kmalloc_nextfit+0x1317>
f01196d7:	83 ec 04             	sub    $0x4,%esp
f01196da:	68 97 af 13 f0       	push   $0xf013af97
f01196df:	68 58 01 00 00       	push   $0x158
f01196e4:	68 da ac 13 f0       	push   $0xf013acda
f01196e9:	e8 0d 6b fe ff       	call   f01001fb <_panic>

	cprintf("\nCASE1: (next fit without looping back) is succeeded...\n") ;
f01196ee:	83 ec 0c             	sub    $0xc,%esp
f01196f1:	68 08 b0 13 f0       	push   $0xf013b008
f01196f6:	e8 87 75 fe ff       	call   f0100c82 <cprintf>
f01196fb:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f01196fe:	e8 39 a6 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119703:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119706:	e8 50 32 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011970b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f011970e:	83 ec 0c             	sub    $0xc,%esp
f0119711:	68 00 00 38 00       	push   $0x380000
f0119716:	e8 e3 e0 fe ff       	call   f01077fe <kmalloc>
f011971b:	83 c4 10             	add    $0x10,%esp
f011971e:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f0119724:	c7 85 34 fe ff ff 00 	movl   $0x1000,-0x1cc(%ebp)
f011972b:	10 00 00 
f011972e:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0119734:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119739:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
f011973f:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0119745:	ba 00 00 00 00       	mov    $0x0,%edx
f011974a:	f7 b5 34 fe ff ff    	divl   -0x1cc(%ebp)
f0119750:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0119756:	29 d0                	sub    %edx,%eax
f0119758:	89 c1                	mov    %eax,%ecx
f011975a:	c7 85 2c fe ff ff 00 	movl   $0x1000,-0x1d4(%ebp)
f0119761:	10 00 00 
f0119764:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119769:	0f b6 d0             	movzbl %al,%edx
f011976c:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0119772:	01 d0                	add    %edx,%eax
f0119774:	48                   	dec    %eax
f0119775:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
f011977b:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0119781:	ba 00 00 00 00       	mov    $0x0,%edx
f0119786:	f7 b5 2c fe ff ff    	divl   -0x1d4(%ebp)
f011978c:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0119792:	29 d0                	sub    %edx,%eax
f0119794:	01 c1                	add    %eax,%ecx
f0119796:	c7 85 24 fe ff ff 00 	movl   $0x1000,-0x1dc(%ebp)
f011979d:	10 00 00 
f01197a0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01197a5:	0f b6 c0             	movzbl %al,%eax
f01197a8:	c1 e0 04             	shl    $0x4,%eax
f01197ab:	89 c2                	mov    %eax,%edx
f01197ad:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f01197b3:	01 d0                	add    %edx,%eax
f01197b5:	48                   	dec    %eax
f01197b6:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
f01197bc:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01197c2:	ba 00 00 00 00       	mov    $0x0,%edx
f01197c7:	f7 b5 24 fe ff ff    	divl   -0x1dc(%ebp)
f01197cd:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01197d3:	29 d0                	sub    %edx,%eax
f01197d5:	01 c8                	add    %ecx,%eax
f01197d7:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f01197dd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01197e3:	39 c2                	cmp    %eax,%edx
f01197e5:	74 17                	je     f01197fe <test_kmalloc_nextfit+0x1427>
		panic("Next Fit not working correctly");
f01197e7:	83 ec 04             	sub    $0x4,%esp
f01197ea:	68 e8 af 13 f0       	push   $0xf013afe8
f01197ef:	68 62 01 00 00       	push   $0x162
f01197f4:	68 da ac 13 f0       	push   $0xf013acda
f01197f9:	e8 fd 69 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01197fe:	e8 39 a5 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119803:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119806:	74 17                	je     f011981f <test_kmalloc_nextfit+0x1448>
f0119808:	83 ec 04             	sub    $0x4,%esp
f011980b:	68 f4 ac 13 f0       	push   $0xf013acf4
f0119810:	68 63 01 00 00       	push   $0x163
f0119815:	68 da ac 13 f0       	push   $0xf013acda
f011981a:	e8 dc 69 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011981f:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119822:	e8 34 31 ff ff       	call   f010c95b <sys_calculate_free_frames>
f0119827:	29 c3                	sub    %eax,%ebx
f0119829:	89 d8                	mov    %ebx,%eax
f011982b:	3d 80 03 00 00       	cmp    $0x380,%eax
f0119830:	74 17                	je     f0119849 <test_kmalloc_nextfit+0x1472>
f0119832:	83 ec 04             	sub    $0x4,%esp
f0119835:	68 97 af 13 f0       	push   $0xf013af97
f011983a:	68 64 01 00 00       	push   $0x164
f011983f:	68 da ac 13 f0       	push   $0xf013acda
f0119844:	e8 b2 69 fe ff       	call   f01001fb <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119849:	e8 ee a4 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011984e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119851:	e8 05 31 ff ff       	call   f010c95b <sys_calculate_free_frames>
f0119856:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f0119859:	8b 85 e8 fb ff ff    	mov    -0x418(%ebp),%eax
f011985f:	83 ec 0c             	sub    $0xc,%esp
f0119862:	50                   	push   %eax
f0119863:	e8 58 e0 fe ff       	call   f01078c0 <kfree>
f0119868:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011986b:	e8 cc a4 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119870:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119873:	74 17                	je     f011988c <test_kmalloc_nextfit+0x14b5>
f0119875:	83 ec 04             	sub    $0x4,%esp
f0119878:	68 f4 ac 13 f0       	push   $0xf013acf4
f011987d:	68 69 01 00 00       	push   $0x169
f0119882:	68 da ac 13 f0       	push   $0xf013acda
f0119887:	e8 6f 69 fe ff       	call   f01001fb <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011988c:	e8 ca 30 ff ff       	call   f010c95b <sys_calculate_free_frames>
f0119891:	89 c2                	mov    %eax,%edx
f0119893:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119896:	29 c2                	sub    %eax,%edx
f0119898:	89 d0                	mov    %edx,%eax
f011989a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011989f:	74 17                	je     f01198b8 <test_kmalloc_nextfit+0x14e1>
f01198a1:	83 ec 04             	sub    $0x4,%esp
f01198a4:	68 a8 af 13 f0       	push   $0xf013afa8
f01198a9:	68 6a 01 00 00       	push   $0x16a
f01198ae:	68 da ac 13 f0       	push   $0xf013acda
f01198b3:	e8 43 69 fe ff       	call   f01001fb <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f01198b8:	e8 7f a4 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01198bd:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01198c0:	e8 96 30 ff ff       	call   f010c95b <sys_calculate_free_frames>
f01198c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f01198c8:	83 ec 0c             	sub    $0xc,%esp
f01198cb:	68 00 fc 3f 00       	push   $0x3ffc00
f01198d0:	e8 29 df fe ff       	call   f01077fe <kmalloc>
f01198d5:	83 c4 10             	add    $0x10,%esp
f01198d8:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f01198de:	c7 85 1c fe ff ff 00 	movl   $0x1000,-0x1e4(%ebp)
f01198e5:	10 00 00 
f01198e8:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01198ee:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01198f3:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
f01198f9:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f01198ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0119904:	f7 b5 1c fe ff ff    	divl   -0x1e4(%ebp)
f011990a:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0119910:	29 d0                	sub    %edx,%eax
f0119912:	89 c1                	mov    %eax,%ecx
f0119914:	c7 85 14 fe ff ff 00 	movl   $0x1000,-0x1ec(%ebp)
f011991b:	10 00 00 
f011991e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119923:	0f b6 d0             	movzbl %al,%edx
f0119926:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f011992c:	01 d0                	add    %edx,%eax
f011992e:	48                   	dec    %eax
f011992f:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
f0119935:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f011993b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119940:	f7 b5 14 fe ff ff    	divl   -0x1ec(%ebp)
f0119946:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f011994c:	29 d0                	sub    %edx,%eax
f011994e:	01 c1                	add    %eax,%ecx
f0119950:	c7 85 0c fe ff ff 00 	movl   $0x1000,-0x1f4(%ebp)
f0119957:	10 00 00 
f011995a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011995f:	0f b6 c0             	movzbl %al,%eax
f0119962:	c1 e0 04             	shl    $0x4,%eax
f0119965:	89 c2                	mov    %eax,%edx
f0119967:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f011996d:	01 d0                	add    %edx,%eax
f011996f:	48                   	dec    %eax
f0119970:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
f0119976:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f011997c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119981:	f7 b5 0c fe ff ff    	divl   -0x1f4(%ebp)
f0119987:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f011998d:	29 d0                	sub    %edx,%eax
f011998f:	01 c8                	add    %ecx,%eax
f0119991:	8d 90 00 40 00 f9    	lea    -0x6ffc000(%eax),%edx
f0119997:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011999d:	39 c2                	cmp    %eax,%edx
f011999f:	74 17                	je     f01199b8 <test_kmalloc_nextfit+0x15e1>
		panic("Next Fit not working correctly");
f01199a1:	83 ec 04             	sub    $0x4,%esp
f01199a4:	68 e8 af 13 f0       	push   $0xf013afe8
f01199a9:	68 70 01 00 00       	push   $0x170
f01199ae:	68 da ac 13 f0       	push   $0xf013acda
f01199b3:	e8 43 68 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01199b8:	e8 7f a3 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01199bd:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01199c0:	74 17                	je     f01199d9 <test_kmalloc_nextfit+0x1602>
f01199c2:	83 ec 04             	sub    $0x4,%esp
f01199c5:	68 f4 ac 13 f0       	push   $0xf013acf4
f01199ca:	68 71 01 00 00       	push   $0x171
f01199cf:	68 da ac 13 f0       	push   $0xf013acda
f01199d4:	e8 22 68 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f01199d9:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01199dc:	e8 7a 2f ff ff       	call   f010c95b <sys_calculate_free_frames>
f01199e1:	29 c3                	sub    %eax,%ebx
f01199e3:	89 d8                	mov    %ebx,%eax
f01199e5:	3d 00 04 00 00       	cmp    $0x400,%eax
f01199ea:	74 17                	je     f0119a03 <test_kmalloc_nextfit+0x162c>
f01199ec:	83 ec 04             	sub    $0x4,%esp
f01199ef:	68 97 af 13 f0       	push   $0xf013af97
f01199f4:	68 72 01 00 00       	push   $0x172
f01199f9:	68 da ac 13 f0       	push   $0xf013acda
f01199fe:	e8 f8 67 fe ff       	call   f01001fb <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) is succeeded...\n") ;
f0119a03:	83 ec 0c             	sub    $0xc,%esp
f0119a06:	68 44 b0 13 f0       	push   $0xf013b044
f0119a0b:	e8 72 72 fe ff       	call   f0100c82 <cprintf>
f0119a10:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f0119a13:	e8 24 a3 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119a18:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119a1b:	e8 3b 2f ff ff       	call   f010c95b <sys_calculate_free_frames>
f0119a20:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f0119a23:	83 ec 0c             	sub    $0xc,%esp
f0119a26:	68 00 00 60 00       	push   $0x600000
f0119a2b:	e8 ce dd fe ff       	call   f01077fe <kmalloc>
f0119a30:	83 c4 10             	add    $0x10,%esp
f0119a33:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != 0x0)
f0119a39:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119a3f:	85 c0                	test   %eax,%eax
f0119a41:	74 17                	je     f0119a5a <test_kmalloc_nextfit+0x1683>
		panic("Next Fit not working correctly");
f0119a43:	83 ec 04             	sub    $0x4,%esp
f0119a46:	68 e8 af 13 f0       	push   $0xf013afe8
f0119a4b:	68 7c 01 00 00       	push   $0x17c
f0119a50:	68 da ac 13 f0       	push   $0xf013acda
f0119a55:	e8 a1 67 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119a5a:	e8 dd a2 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119a5f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119a62:	74 17                	je     f0119a7b <test_kmalloc_nextfit+0x16a4>
f0119a64:	83 ec 04             	sub    $0x4,%esp
f0119a67:	68 f4 ac 13 f0       	push   $0xf013acf4
f0119a6c:	68 7d 01 00 00       	push   $0x17d
f0119a71:	68 da ac 13 f0       	push   $0xf013acda
f0119a76:	e8 80 67 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f0119a7b:	e8 db 2e ff ff       	call   f010c95b <sys_calculate_free_frames>
f0119a80:	89 c2                	mov    %eax,%edx
f0119a82:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119a85:	39 c2                	cmp    %eax,%edx
f0119a87:	74 17                	je     f0119aa0 <test_kmalloc_nextfit+0x16c9>
f0119a89:	83 ec 04             	sub    $0x4,%esp
f0119a8c:	68 97 af 13 f0       	push   $0xf013af97
f0119a91:	68 7e 01 00 00       	push   $0x17e
f0119a96:	68 da ac 13 f0       	push   $0xf013acda
f0119a9b:	e8 5b 67 fe ff       	call   f01001fb <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) is succeeded...\n") ;
f0119aa0:	83 ec 0c             	sub    $0xc,%esp
f0119aa3:	68 7c b0 13 f0       	push   $0xf013b07c
f0119aa8:	e8 d5 71 fe ff       	call   f0100c82 <cprintf>
f0119aad:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f0119ab0:	83 ec 0c             	sub    $0xc,%esp
f0119ab3:	68 b8 b0 13 f0       	push   $0xf013b0b8
f0119ab8:	e8 c5 71 fe ff       	call   f0100c82 <cprintf>
f0119abd:	83 c4 10             	add    $0x10,%esp
	return 1;
f0119ac0:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0119ac5:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0119ac8:	5b                   	pop    %ebx
f0119ac9:	5f                   	pop    %edi
f0119aca:	5d                   	pop    %ebp
f0119acb:	c3                   	ret    

f0119acc <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f0119acc:	55                   	push   %ebp
f0119acd:	89 e5                	mov    %esp,%ebp
f0119acf:	57                   	push   %edi
f0119ad0:	53                   	push   %ebx
f0119ad1:	81 ec 90 01 00 00    	sub    $0x190,%esp
	cprintf("==============================================\n");
f0119ad7:	83 ec 0c             	sub    $0xc,%esp
f0119ada:	68 1c ac 13 f0       	push   $0xf013ac1c
f0119adf:	e8 9e 71 fe ff       	call   f0100c82 <cprintf>
f0119ae4:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0119ae7:	83 ec 0c             	sub    $0xc,%esp
f0119aea:	68 4c ac 13 f0       	push   $0xf013ac4c
f0119aef:	e8 8e 71 fe ff       	call   f0100c82 <cprintf>
f0119af4:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0119af7:	83 ec 0c             	sub    $0xc,%esp
f0119afa:	68 1c ac 13 f0       	push   $0xf013ac1c
f0119aff:	e8 7e 71 fe ff       	call   f0100c82 <cprintf>
f0119b04:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f0119b07:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0119b0d:	b9 14 00 00 00       	mov    $0x14,%ecx
f0119b12:	b8 00 00 00 00       	mov    $0x0,%eax
f0119b17:	89 d7                	mov    %edx,%edi
f0119b19:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0119b1b:	e8 3b 2e ff ff       	call   f010c95b <sys_calculate_free_frames>
f0119b20:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119b23:	e8 14 a2 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119b28:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f0119b2b:	83 ec 0c             	sub    $0xc,%esp
f0119b2e:	68 00 fc 2f 00       	push   $0x2ffc00
f0119b33:	e8 c6 dc fe ff       	call   f01077fe <kmalloc>
f0119b38:	83 c4 10             	add    $0x10,%esp
f0119b3b:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f0119b41:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0119b47:	89 c1                	mov    %eax,%ecx
f0119b49:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f0119b50:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0119b53:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119b58:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0119b5b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0119b5e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b63:	f7 75 ec             	divl   -0x14(%ebp)
f0119b66:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0119b69:	29 d0                	sub    %edx,%eax
f0119b6b:	89 c3                	mov    %eax,%ebx
f0119b6d:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0119b74:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119b79:	0f b6 d0             	movzbl %al,%edx
f0119b7c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0119b7f:	01 d0                	add    %edx,%eax
f0119b81:	48                   	dec    %eax
f0119b82:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0119b85:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0119b88:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b8d:	f7 75 e4             	divl   -0x1c(%ebp)
f0119b90:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0119b93:	29 d0                	sub    %edx,%eax
f0119b95:	01 c3                	add    %eax,%ebx
f0119b97:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0119b9e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119ba3:	0f b6 c0             	movzbl %al,%eax
f0119ba6:	c1 e0 04             	shl    $0x4,%eax
f0119ba9:	89 c2                	mov    %eax,%edx
f0119bab:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0119bae:	01 d0                	add    %edx,%eax
f0119bb0:	48                   	dec    %eax
f0119bb1:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0119bb4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0119bb7:	ba 00 00 00 00       	mov    $0x0,%edx
f0119bbc:	f7 75 dc             	divl   -0x24(%ebp)
f0119bbf:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0119bc2:	29 d0                	sub    %edx,%eax
f0119bc4:	01 d8                	add    %ebx,%eax
f0119bc6:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0119bcb:	39 c1                	cmp    %eax,%ecx
f0119bcd:	74 17                	je     f0119be6 <test_kmalloc_bestfit1+0x11a>
f0119bcf:	83 ec 04             	sub    $0x4,%esp
f0119bd2:	68 f4 b0 13 f0       	push   $0xf013b0f4
f0119bd7:	68 98 01 00 00       	push   $0x198
f0119bdc:	68 da ac 13 f0       	push   $0xf013acda
f0119be1:	e8 15 66 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119be6:	e8 51 a1 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119beb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119bee:	74 17                	je     f0119c07 <test_kmalloc_bestfit1+0x13b>
f0119bf0:	83 ec 04             	sub    $0x4,%esp
f0119bf3:	68 f4 ac 13 f0       	push   $0xf013acf4
f0119bf8:	68 99 01 00 00       	push   $0x199
f0119bfd:	68 da ac 13 f0       	push   $0xf013acda
f0119c02:	e8 f4 65 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f0119c07:	e8 4f 2d ff ff       	call   f010c95b <sys_calculate_free_frames>
f0119c0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119c0f:	29 c2                	sub    %eax,%edx
f0119c11:	89 d0                	mov    %edx,%eax
f0119c13:	3d 00 03 00 00       	cmp    $0x300,%eax
f0119c18:	74 17                	je     f0119c31 <test_kmalloc_bestfit1+0x165>
f0119c1a:	83 ec 04             	sub    $0x4,%esp
f0119c1d:	68 24 b1 13 f0       	push   $0xf013b124
f0119c22:	68 9a 01 00 00       	push   $0x19a
f0119c27:	68 da ac 13 f0       	push   $0xf013acda
f0119c2c:	e8 ca 65 fe ff       	call   f01001fb <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0119c31:	e8 25 2d ff ff       	call   f010c95b <sys_calculate_free_frames>
f0119c36:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119c39:	e8 fe a0 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119c3e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f0119c41:	83 ec 0c             	sub    $0xc,%esp
f0119c44:	68 00 fc 2f 00       	push   $0x2ffc00
f0119c49:	e8 b0 db fe ff       	call   f01077fe <kmalloc>
f0119c4e:	83 c4 10             	add    $0x10,%esp
f0119c51:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f0119c57:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0119c5d:	89 c1                	mov    %eax,%ecx
f0119c5f:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0119c66:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0119c69:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119c6e:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0119c71:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0119c74:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c79:	f7 75 d4             	divl   -0x2c(%ebp)
f0119c7c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0119c7f:	29 d0                	sub    %edx,%eax
f0119c81:	89 c3                	mov    %eax,%ebx
f0119c83:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0119c8a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119c8f:	0f b6 d0             	movzbl %al,%edx
f0119c92:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0119c95:	01 d0                	add    %edx,%eax
f0119c97:	48                   	dec    %eax
f0119c98:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0119c9b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0119c9e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ca3:	f7 75 cc             	divl   -0x34(%ebp)
f0119ca6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0119ca9:	29 d0                	sub    %edx,%eax
f0119cab:	01 c3                	add    %eax,%ebx
f0119cad:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0119cb4:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119cb9:	0f b6 c0             	movzbl %al,%eax
f0119cbc:	c1 e0 04             	shl    $0x4,%eax
f0119cbf:	89 c2                	mov    %eax,%edx
f0119cc1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0119cc4:	01 d0                	add    %edx,%eax
f0119cc6:	48                   	dec    %eax
f0119cc7:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0119cca:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0119ccd:	ba 00 00 00 00       	mov    $0x0,%edx
f0119cd2:	f7 75 c4             	divl   -0x3c(%ebp)
f0119cd5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0119cd8:	29 d0                	sub    %edx,%eax
f0119cda:	01 d8                	add    %ebx,%eax
f0119cdc:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0119ce1:	39 c1                	cmp    %eax,%ecx
f0119ce3:	74 17                	je     f0119cfc <test_kmalloc_bestfit1+0x230>
f0119ce5:	83 ec 04             	sub    $0x4,%esp
f0119ce8:	68 f4 b0 13 f0       	push   $0xf013b0f4
f0119ced:	68 a0 01 00 00       	push   $0x1a0
f0119cf2:	68 da ac 13 f0       	push   $0xf013acda
f0119cf7:	e8 ff 64 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119cfc:	e8 3b a0 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119d01:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119d04:	74 17                	je     f0119d1d <test_kmalloc_bestfit1+0x251>
f0119d06:	83 ec 04             	sub    $0x4,%esp
f0119d09:	68 f4 ac 13 f0       	push   $0xf013acf4
f0119d0e:	68 a1 01 00 00       	push   $0x1a1
f0119d13:	68 da ac 13 f0       	push   $0xf013acda
f0119d18:	e8 de 64 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f0119d1d:	e8 39 2c ff ff       	call   f010c95b <sys_calculate_free_frames>
f0119d22:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119d25:	29 c2                	sub    %eax,%edx
f0119d27:	89 d0                	mov    %edx,%eax
f0119d29:	3d 00 03 00 00       	cmp    $0x300,%eax
f0119d2e:	74 17                	je     f0119d47 <test_kmalloc_bestfit1+0x27b>
f0119d30:	83 ec 04             	sub    $0x4,%esp
f0119d33:	68 24 b1 13 f0       	push   $0xf013b124
f0119d38:	68 a2 01 00 00       	push   $0x1a2
f0119d3d:	68 da ac 13 f0       	push   $0xf013acda
f0119d42:	e8 b4 64 fe ff       	call   f01001fb <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0119d47:	e8 0f 2c ff ff       	call   f010c95b <sys_calculate_free_frames>
f0119d4c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119d4f:	e8 e8 9f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119d54:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f0119d57:	83 ec 0c             	sub    $0xc,%esp
f0119d5a:	68 00 fc 1f 00       	push   $0x1ffc00
f0119d5f:	e8 9a da fe ff       	call   f01077fe <kmalloc>
f0119d64:	83 c4 10             	add    $0x10,%esp
f0119d67:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f0119d6d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0119d73:	89 c1                	mov    %eax,%ecx
f0119d75:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0119d7c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0119d7f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119d84:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0119d87:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119d8a:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d8f:	f7 75 bc             	divl   -0x44(%ebp)
f0119d92:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119d95:	29 d0                	sub    %edx,%eax
f0119d97:	89 c3                	mov    %eax,%ebx
f0119d99:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0119da0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119da5:	0f b6 d0             	movzbl %al,%edx
f0119da8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119dab:	01 d0                	add    %edx,%eax
f0119dad:	48                   	dec    %eax
f0119dae:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0119db1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119db4:	ba 00 00 00 00       	mov    $0x0,%edx
f0119db9:	f7 75 b4             	divl   -0x4c(%ebp)
f0119dbc:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119dbf:	29 d0                	sub    %edx,%eax
f0119dc1:	01 c3                	add    %eax,%ebx
f0119dc3:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0119dca:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119dcf:	0f b6 c0             	movzbl %al,%eax
f0119dd2:	c1 e0 04             	shl    $0x4,%eax
f0119dd5:	89 c2                	mov    %eax,%edx
f0119dd7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0119dda:	01 d0                	add    %edx,%eax
f0119ddc:	48                   	dec    %eax
f0119ddd:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0119de0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0119de3:	ba 00 00 00 00       	mov    $0x0,%edx
f0119de8:	f7 75 ac             	divl   -0x54(%ebp)
f0119deb:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0119dee:	29 d0                	sub    %edx,%eax
f0119df0:	01 d8                	add    %ebx,%eax
f0119df2:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f0119df7:	39 c1                	cmp    %eax,%ecx
f0119df9:	74 17                	je     f0119e12 <test_kmalloc_bestfit1+0x346>
f0119dfb:	83 ec 04             	sub    $0x4,%esp
f0119dfe:	68 f4 b0 13 f0       	push   $0xf013b0f4
f0119e03:	68 a8 01 00 00       	push   $0x1a8
f0119e08:	68 da ac 13 f0       	push   $0xf013acda
f0119e0d:	e8 e9 63 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119e12:	e8 25 9f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119e17:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119e1a:	74 17                	je     f0119e33 <test_kmalloc_bestfit1+0x367>
f0119e1c:	83 ec 04             	sub    $0x4,%esp
f0119e1f:	68 f4 ac 13 f0       	push   $0xf013acf4
f0119e24:	68 a9 01 00 00       	push   $0x1a9
f0119e29:	68 da ac 13 f0       	push   $0xf013acda
f0119e2e:	e8 c8 63 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f0119e33:	e8 23 2b ff ff       	call   f010c95b <sys_calculate_free_frames>
f0119e38:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119e3b:	29 c2                	sub    %eax,%edx
f0119e3d:	89 d0                	mov    %edx,%eax
f0119e3f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119e44:	74 17                	je     f0119e5d <test_kmalloc_bestfit1+0x391>
f0119e46:	83 ec 04             	sub    $0x4,%esp
f0119e49:	68 24 b1 13 f0       	push   $0xf013b124
f0119e4e:	68 aa 01 00 00       	push   $0x1aa
f0119e53:	68 da ac 13 f0       	push   $0xf013acda
f0119e58:	e8 9e 63 fe ff       	call   f01001fb <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0119e5d:	e8 f9 2a ff ff       	call   f010c95b <sys_calculate_free_frames>
f0119e62:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119e65:	e8 d2 9e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119e6a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f0119e6d:	83 ec 0c             	sub    $0xc,%esp
f0119e70:	68 00 fc 1f 00       	push   $0x1ffc00
f0119e75:	e8 84 d9 fe ff       	call   f01077fe <kmalloc>
f0119e7a:	83 c4 10             	add    $0x10,%esp
f0119e7d:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f0119e83:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0119e89:	89 c1                	mov    %eax,%ecx
f0119e8b:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0119e92:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0119e95:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119e9a:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0119e9d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0119ea0:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ea5:	f7 75 a4             	divl   -0x5c(%ebp)
f0119ea8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0119eab:	29 d0                	sub    %edx,%eax
f0119ead:	89 c3                	mov    %eax,%ebx
f0119eaf:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0119eb6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119ebb:	0f b6 d0             	movzbl %al,%edx
f0119ebe:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0119ec1:	01 d0                	add    %edx,%eax
f0119ec3:	48                   	dec    %eax
f0119ec4:	89 45 98             	mov    %eax,-0x68(%ebp)
f0119ec7:	8b 45 98             	mov    -0x68(%ebp),%eax
f0119eca:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ecf:	f7 75 9c             	divl   -0x64(%ebp)
f0119ed2:	8b 45 98             	mov    -0x68(%ebp),%eax
f0119ed5:	29 d0                	sub    %edx,%eax
f0119ed7:	01 c3                	add    %eax,%ebx
f0119ed9:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0119ee0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119ee5:	0f b6 c0             	movzbl %al,%eax
f0119ee8:	c1 e0 04             	shl    $0x4,%eax
f0119eeb:	89 c2                	mov    %eax,%edx
f0119eed:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0119ef0:	01 d0                	add    %edx,%eax
f0119ef2:	48                   	dec    %eax
f0119ef3:	89 45 90             	mov    %eax,-0x70(%ebp)
f0119ef6:	8b 45 90             	mov    -0x70(%ebp),%eax
f0119ef9:	ba 00 00 00 00       	mov    $0x0,%edx
f0119efe:	f7 75 94             	divl   -0x6c(%ebp)
f0119f01:	8b 45 90             	mov    -0x70(%ebp),%eax
f0119f04:	29 d0                	sub    %edx,%eax
f0119f06:	01 d8                	add    %ebx,%eax
f0119f08:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f0119f0d:	39 c1                	cmp    %eax,%ecx
f0119f0f:	74 17                	je     f0119f28 <test_kmalloc_bestfit1+0x45c>
f0119f11:	83 ec 04             	sub    $0x4,%esp
f0119f14:	68 f4 b0 13 f0       	push   $0xf013b0f4
f0119f19:	68 b0 01 00 00       	push   $0x1b0
f0119f1e:	68 da ac 13 f0       	push   $0xf013acda
f0119f23:	e8 d3 62 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119f28:	e8 0f 9e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119f2d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119f30:	74 17                	je     f0119f49 <test_kmalloc_bestfit1+0x47d>
f0119f32:	83 ec 04             	sub    $0x4,%esp
f0119f35:	68 f4 ac 13 f0       	push   $0xf013acf4
f0119f3a:	68 b1 01 00 00       	push   $0x1b1
f0119f3f:	68 da ac 13 f0       	push   $0xf013acda
f0119f44:	e8 b2 62 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f0119f49:	e8 0d 2a ff ff       	call   f010c95b <sys_calculate_free_frames>
f0119f4e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119f51:	29 c2                	sub    %eax,%edx
f0119f53:	89 d0                	mov    %edx,%eax
f0119f55:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119f5a:	74 17                	je     f0119f73 <test_kmalloc_bestfit1+0x4a7>
f0119f5c:	83 ec 04             	sub    $0x4,%esp
f0119f5f:	68 24 b1 13 f0       	push   $0xf013b124
f0119f64:	68 b2 01 00 00       	push   $0x1b2
f0119f69:	68 da ac 13 f0       	push   $0xf013acda
f0119f6e:	e8 88 62 fe ff       	call   f01001fb <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0119f73:	e8 e3 29 ff ff       	call   f010c95b <sys_calculate_free_frames>
f0119f78:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119f7b:	e8 bc 9d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119f80:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f0119f83:	83 ec 0c             	sub    $0xc,%esp
f0119f86:	68 00 fc 0f 00       	push   $0xffc00
f0119f8b:	e8 6e d8 fe ff       	call   f01077fe <kmalloc>
f0119f90:	83 c4 10             	add    $0x10,%esp
f0119f93:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f0119f99:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0119f9f:	89 c1                	mov    %eax,%ecx
f0119fa1:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0119fa8:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0119fab:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119fb0:	89 45 88             	mov    %eax,-0x78(%ebp)
f0119fb3:	8b 45 88             	mov    -0x78(%ebp),%eax
f0119fb6:	ba 00 00 00 00       	mov    $0x0,%edx
f0119fbb:	f7 75 8c             	divl   -0x74(%ebp)
f0119fbe:	8b 45 88             	mov    -0x78(%ebp),%eax
f0119fc1:	29 d0                	sub    %edx,%eax
f0119fc3:	89 c3                	mov    %eax,%ebx
f0119fc5:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0119fcc:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119fd1:	0f b6 d0             	movzbl %al,%edx
f0119fd4:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0119fd7:	01 d0                	add    %edx,%eax
f0119fd9:	48                   	dec    %eax
f0119fda:	89 45 80             	mov    %eax,-0x80(%ebp)
f0119fdd:	8b 45 80             	mov    -0x80(%ebp),%eax
f0119fe0:	ba 00 00 00 00       	mov    $0x0,%edx
f0119fe5:	f7 75 84             	divl   -0x7c(%ebp)
f0119fe8:	8b 45 80             	mov    -0x80(%ebp),%eax
f0119feb:	29 d0                	sub    %edx,%eax
f0119fed:	01 c3                	add    %eax,%ebx
f0119fef:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0119ff6:	10 00 00 
f0119ff9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119ffe:	0f b6 c0             	movzbl %al,%eax
f011a001:	c1 e0 04             	shl    $0x4,%eax
f011a004:	89 c2                	mov    %eax,%edx
f011a006:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011a00c:	01 d0                	add    %edx,%eax
f011a00e:	48                   	dec    %eax
f011a00f:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011a015:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011a01b:	ba 00 00 00 00       	mov    $0x0,%edx
f011a020:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011a026:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011a02c:	29 d0                	sub    %edx,%eax
f011a02e:	01 d8                	add    %ebx,%eax
f011a030:	2d 00 c0 5f 09       	sub    $0x95fc000,%eax
f011a035:	39 c1                	cmp    %eax,%ecx
f011a037:	74 17                	je     f011a050 <test_kmalloc_bestfit1+0x584>
f011a039:	83 ec 04             	sub    $0x4,%esp
f011a03c:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011a041:	68 b8 01 00 00       	push   $0x1b8
f011a046:	68 da ac 13 f0       	push   $0xf013acda
f011a04b:	e8 ab 61 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a050:	e8 e7 9c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a055:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a058:	74 17                	je     f011a071 <test_kmalloc_bestfit1+0x5a5>
f011a05a:	83 ec 04             	sub    $0x4,%esp
f011a05d:	68 f4 ac 13 f0       	push   $0xf013acf4
f011a062:	68 b9 01 00 00       	push   $0x1b9
f011a067:	68 da ac 13 f0       	push   $0xf013acda
f011a06c:	e8 8a 61 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a071:	e8 e5 28 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011a076:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a079:	29 c2                	sub    %eax,%edx
f011a07b:	89 d0                	mov    %edx,%eax
f011a07d:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a082:	74 17                	je     f011a09b <test_kmalloc_bestfit1+0x5cf>
f011a084:	83 ec 04             	sub    $0x4,%esp
f011a087:	68 24 b1 13 f0       	push   $0xf013b124
f011a08c:	68 ba 01 00 00       	push   $0x1ba
f011a091:	68 da ac 13 f0       	push   $0xf013acda
f011a096:	e8 60 61 fe ff       	call   f01001fb <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a09b:	e8 bb 28 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011a0a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a0a3:	e8 94 9c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a0a8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f011a0ab:	83 ec 0c             	sub    $0xc,%esp
f011a0ae:	68 00 fc 0f 00       	push   $0xffc00
f011a0b3:	e8 46 d7 fe ff       	call   f01077fe <kmalloc>
f011a0b8:	83 c4 10             	add    $0x10,%esp
f011a0bb:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011a0c1:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011a0c7:	89 c1                	mov    %eax,%ecx
f011a0c9:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011a0d0:	10 00 00 
f011a0d3:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011a0d9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a0de:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011a0e4:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011a0ea:	ba 00 00 00 00       	mov    $0x0,%edx
f011a0ef:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011a0f5:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011a0fb:	29 d0                	sub    %edx,%eax
f011a0fd:	89 c3                	mov    %eax,%ebx
f011a0ff:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011a106:	10 00 00 
f011a109:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a10e:	0f b6 d0             	movzbl %al,%edx
f011a111:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011a117:	01 d0                	add    %edx,%eax
f011a119:	48                   	dec    %eax
f011a11a:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011a120:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011a126:	ba 00 00 00 00       	mov    $0x0,%edx
f011a12b:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011a131:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011a137:	29 d0                	sub    %edx,%eax
f011a139:	01 c3                	add    %eax,%ebx
f011a13b:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011a142:	10 00 00 
f011a145:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a14a:	0f b6 c0             	movzbl %al,%eax
f011a14d:	c1 e0 04             	shl    $0x4,%eax
f011a150:	89 c2                	mov    %eax,%edx
f011a152:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011a158:	01 d0                	add    %edx,%eax
f011a15a:	48                   	dec    %eax
f011a15b:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011a161:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011a167:	ba 00 00 00 00       	mov    $0x0,%edx
f011a16c:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011a172:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011a178:	29 d0                	sub    %edx,%eax
f011a17a:	01 d8                	add    %ebx,%eax
f011a17c:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011a181:	39 c1                	cmp    %eax,%ecx
f011a183:	74 17                	je     f011a19c <test_kmalloc_bestfit1+0x6d0>
f011a185:	83 ec 04             	sub    $0x4,%esp
f011a188:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011a18d:	68 c0 01 00 00       	push   $0x1c0
f011a192:	68 da ac 13 f0       	push   $0xf013acda
f011a197:	e8 5f 60 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a19c:	e8 9b 9b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a1a1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a1a4:	74 17                	je     f011a1bd <test_kmalloc_bestfit1+0x6f1>
f011a1a6:	83 ec 04             	sub    $0x4,%esp
f011a1a9:	68 f4 ac 13 f0       	push   $0xf013acf4
f011a1ae:	68 c1 01 00 00       	push   $0x1c1
f011a1b3:	68 da ac 13 f0       	push   $0xf013acda
f011a1b8:	e8 3e 60 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a1bd:	e8 99 27 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011a1c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a1c5:	29 c2                	sub    %eax,%edx
f011a1c7:	89 d0                	mov    %edx,%eax
f011a1c9:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a1ce:	74 17                	je     f011a1e7 <test_kmalloc_bestfit1+0x71b>
f011a1d0:	83 ec 04             	sub    $0x4,%esp
f011a1d3:	68 24 b1 13 f0       	push   $0xf013b124
f011a1d8:	68 c2 01 00 00       	push   $0x1c2
f011a1dd:	68 da ac 13 f0       	push   $0xf013acda
f011a1e2:	e8 14 60 fe ff       	call   f01001fb <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a1e7:	e8 6f 27 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011a1ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a1ef:	e8 48 9b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a1f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f011a1f7:	83 ec 0c             	sub    $0xc,%esp
f011a1fa:	68 00 fc 0f 00       	push   $0xffc00
f011a1ff:	e8 fa d5 fe ff       	call   f01077fe <kmalloc>
f011a204:	83 c4 10             	add    $0x10,%esp
f011a207:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f011a20d:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011a213:	89 c1                	mov    %eax,%ecx
f011a215:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011a21c:	10 00 00 
f011a21f:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011a225:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a22a:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011a230:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011a236:	ba 00 00 00 00       	mov    $0x0,%edx
f011a23b:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011a241:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011a247:	29 d0                	sub    %edx,%eax
f011a249:	89 c3                	mov    %eax,%ebx
f011a24b:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011a252:	10 00 00 
f011a255:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a25a:	0f b6 d0             	movzbl %al,%edx
f011a25d:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011a263:	01 d0                	add    %edx,%eax
f011a265:	48                   	dec    %eax
f011a266:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011a26c:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011a272:	ba 00 00 00 00       	mov    $0x0,%edx
f011a277:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011a27d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011a283:	29 d0                	sub    %edx,%eax
f011a285:	01 c3                	add    %eax,%ebx
f011a287:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011a28e:	10 00 00 
f011a291:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a296:	0f b6 c0             	movzbl %al,%eax
f011a299:	c1 e0 04             	shl    $0x4,%eax
f011a29c:	89 c2                	mov    %eax,%edx
f011a29e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011a2a4:	01 d0                	add    %edx,%eax
f011a2a6:	48                   	dec    %eax
f011a2a7:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011a2ad:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011a2b3:	ba 00 00 00 00       	mov    $0x0,%edx
f011a2b8:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011a2be:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011a2c4:	29 d0                	sub    %edx,%eax
f011a2c6:	01 d8                	add    %ebx,%eax
f011a2c8:	2d 00 c0 3f 09       	sub    $0x93fc000,%eax
f011a2cd:	39 c1                	cmp    %eax,%ecx
f011a2cf:	74 17                	je     f011a2e8 <test_kmalloc_bestfit1+0x81c>
f011a2d1:	83 ec 04             	sub    $0x4,%esp
f011a2d4:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011a2d9:	68 c8 01 00 00       	push   $0x1c8
f011a2de:	68 da ac 13 f0       	push   $0xf013acda
f011a2e3:	e8 13 5f fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a2e8:	e8 4f 9a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a2ed:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a2f0:	74 17                	je     f011a309 <test_kmalloc_bestfit1+0x83d>
f011a2f2:	83 ec 04             	sub    $0x4,%esp
f011a2f5:	68 f4 ac 13 f0       	push   $0xf013acf4
f011a2fa:	68 c9 01 00 00       	push   $0x1c9
f011a2ff:	68 da ac 13 f0       	push   $0xf013acda
f011a304:	e8 f2 5e fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a309:	e8 4d 26 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011a30e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a311:	29 c2                	sub    %eax,%edx
f011a313:	89 d0                	mov    %edx,%eax
f011a315:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a31a:	74 17                	je     f011a333 <test_kmalloc_bestfit1+0x867>
f011a31c:	83 ec 04             	sub    $0x4,%esp
f011a31f:	68 24 b1 13 f0       	push   $0xf013b124
f011a324:	68 ca 01 00 00       	push   $0x1ca
f011a329:	68 da ac 13 f0       	push   $0xf013acda
f011a32e:	e8 c8 5e fe ff       	call   f01001fb <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a333:	e8 23 26 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011a338:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a33b:	e8 fc 99 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a340:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f011a343:	83 ec 0c             	sub    $0xc,%esp
f011a346:	68 00 fc 0f 00       	push   $0xffc00
f011a34b:	e8 ae d4 fe ff       	call   f01077fe <kmalloc>
f011a350:	83 c4 10             	add    $0x10,%esp
f011a353:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f011a359:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011a35f:	89 c1                	mov    %eax,%ecx
f011a361:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011a368:	10 00 00 
f011a36b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011a371:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a376:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011a37c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011a382:	ba 00 00 00 00       	mov    $0x0,%edx
f011a387:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011a38d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011a393:	29 d0                	sub    %edx,%eax
f011a395:	89 c3                	mov    %eax,%ebx
f011a397:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011a39e:	10 00 00 
f011a3a1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a3a6:	0f b6 d0             	movzbl %al,%edx
f011a3a9:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011a3af:	01 d0                	add    %edx,%eax
f011a3b1:	48                   	dec    %eax
f011a3b2:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011a3b8:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a3be:	ba 00 00 00 00       	mov    $0x0,%edx
f011a3c3:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011a3c9:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a3cf:	29 d0                	sub    %edx,%eax
f011a3d1:	01 c3                	add    %eax,%ebx
f011a3d3:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011a3da:	10 00 00 
f011a3dd:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a3e2:	0f b6 c0             	movzbl %al,%eax
f011a3e5:	c1 e0 04             	shl    $0x4,%eax
f011a3e8:	89 c2                	mov    %eax,%edx
f011a3ea:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011a3f0:	01 d0                	add    %edx,%eax
f011a3f2:	48                   	dec    %eax
f011a3f3:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011a3f9:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011a3ff:	ba 00 00 00 00       	mov    $0x0,%edx
f011a404:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011a40a:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011a410:	29 d0                	sub    %edx,%eax
f011a412:	01 d8                	add    %ebx,%eax
f011a414:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f011a419:	39 c1                	cmp    %eax,%ecx
f011a41b:	74 17                	je     f011a434 <test_kmalloc_bestfit1+0x968>
f011a41d:	83 ec 04             	sub    $0x4,%esp
f011a420:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011a425:	68 d0 01 00 00       	push   $0x1d0
f011a42a:	68 da ac 13 f0       	push   $0xf013acda
f011a42f:	e8 c7 5d fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a434:	e8 03 99 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a439:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a43c:	74 17                	je     f011a455 <test_kmalloc_bestfit1+0x989>
f011a43e:	83 ec 04             	sub    $0x4,%esp
f011a441:	68 f4 ac 13 f0       	push   $0xf013acf4
f011a446:	68 d1 01 00 00       	push   $0x1d1
f011a44b:	68 da ac 13 f0       	push   $0xf013acda
f011a450:	e8 a6 5d fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a455:	e8 01 25 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011a45a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a45d:	29 c2                	sub    %eax,%edx
f011a45f:	89 d0                	mov    %edx,%eax
f011a461:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a466:	74 17                	je     f011a47f <test_kmalloc_bestfit1+0x9b3>
f011a468:	83 ec 04             	sub    $0x4,%esp
f011a46b:	68 24 b1 13 f0       	push   $0xf013b124
f011a470:	68 d2 01 00 00       	push   $0x1d2
f011a475:	68 da ac 13 f0       	push   $0xf013acda
f011a47a:	e8 7c 5d fe ff       	call   f01001fb <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011a47f:	e8 d7 24 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011a484:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a487:	e8 b0 98 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a48c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011a48f:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011a495:	83 ec 0c             	sub    $0xc,%esp
f011a498:	50                   	push   %eax
f011a499:	e8 22 d4 fe ff       	call   f01078c0 <kfree>
f011a49e:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a4a1:	e8 96 98 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a4a6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a4a9:	74 17                	je     f011a4c2 <test_kmalloc_bestfit1+0x9f6>
f011a4ab:	83 ec 04             	sub    $0x4,%esp
f011a4ae:	68 f4 ac 13 f0       	push   $0xf013acf4
f011a4b3:	68 db 01 00 00       	push   $0x1db
f011a4b8:	68 da ac 13 f0       	push   $0xf013acda
f011a4bd:	e8 39 5d fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011a4c2:	e8 94 24 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011a4c7:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011a4ca:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a4cf:	74 17                	je     f011a4e8 <test_kmalloc_bestfit1+0xa1c>
f011a4d1:	83 ec 04             	sub    $0x4,%esp
f011a4d4:	68 37 b1 13 f0       	push   $0xf013b137
f011a4d9:	68 dc 01 00 00       	push   $0x1dc
f011a4de:	68 da ac 13 f0       	push   $0xf013acda
f011a4e3:	e8 13 5d fe ff       	call   f01001fb <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011a4e8:	e8 6e 24 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011a4ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a4f0:	e8 47 98 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a4f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011a4f8:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011a4fe:	83 ec 0c             	sub    $0xc,%esp
f011a501:	50                   	push   %eax
f011a502:	e8 b9 d3 fe ff       	call   f01078c0 <kfree>
f011a507:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a50a:	e8 2d 98 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a50f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a512:	74 17                	je     f011a52b <test_kmalloc_bestfit1+0xa5f>
f011a514:	83 ec 04             	sub    $0x4,%esp
f011a517:	68 f4 ac 13 f0       	push   $0xf013acf4
f011a51c:	68 e2 01 00 00       	push   $0x1e2
f011a521:	68 da ac 13 f0       	push   $0xf013acda
f011a526:	e8 d0 5c fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011a52b:	e8 2b 24 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011a530:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011a533:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a538:	74 17                	je     f011a551 <test_kmalloc_bestfit1+0xa85>
f011a53a:	83 ec 04             	sub    $0x4,%esp
f011a53d:	68 37 b1 13 f0       	push   $0xf013b137
f011a542:	68 e3 01 00 00       	push   $0x1e3
f011a547:	68 da ac 13 f0       	push   $0xf013acda
f011a54c:	e8 aa 5c fe ff       	call   f01001fb <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011a551:	e8 05 24 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011a556:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a559:	e8 de 97 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a55e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f011a561:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011a567:	83 ec 0c             	sub    $0xc,%esp
f011a56a:	50                   	push   %eax
f011a56b:	e8 50 d3 fe ff       	call   f01078c0 <kfree>
f011a570:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a573:	e8 c4 97 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a578:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a57b:	74 17                	je     f011a594 <test_kmalloc_bestfit1+0xac8>
f011a57d:	83 ec 04             	sub    $0x4,%esp
f011a580:	68 f4 ac 13 f0       	push   $0xf013acf4
f011a585:	68 e9 01 00 00       	push   $0x1e9
f011a58a:	68 da ac 13 f0       	push   $0xf013acda
f011a58f:	e8 67 5c fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011a594:	e8 c2 23 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011a599:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011a59c:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a5a1:	74 17                	je     f011a5ba <test_kmalloc_bestfit1+0xaee>
f011a5a3:	83 ec 04             	sub    $0x4,%esp
f011a5a6:	68 37 b1 13 f0       	push   $0xf013b137
f011a5ab:	68 ea 01 00 00       	push   $0x1ea
f011a5b0:	68 da ac 13 f0       	push   $0xf013acda
f011a5b5:	e8 41 5c fe ff       	call   f01001fb <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011a5ba:	e8 9c 23 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011a5bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a5c2:	e8 75 97 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a5c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f011a5ca:	83 ec 0c             	sub    $0xc,%esp
f011a5cd:	68 00 00 08 00       	push   $0x80000
f011a5d2:	e8 27 d2 fe ff       	call   f01077fe <kmalloc>
f011a5d7:	83 c4 10             	add    $0x10,%esp
f011a5da:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011a5e0:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011a5e6:	89 c1                	mov    %eax,%ecx
f011a5e8:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011a5ef:	10 00 00 
f011a5f2:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011a5f8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a5fd:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011a603:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011a609:	ba 00 00 00 00       	mov    $0x0,%edx
f011a60e:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011a614:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011a61a:	29 d0                	sub    %edx,%eax
f011a61c:	89 c3                	mov    %eax,%ebx
f011a61e:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011a625:	10 00 00 
f011a628:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a62d:	0f b6 d0             	movzbl %al,%edx
f011a630:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011a636:	01 d0                	add    %edx,%eax
f011a638:	48                   	dec    %eax
f011a639:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011a63f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011a645:	ba 00 00 00 00       	mov    $0x0,%edx
f011a64a:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011a650:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011a656:	29 d0                	sub    %edx,%eax
f011a658:	01 c3                	add    %eax,%ebx
f011a65a:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011a661:	10 00 00 
f011a664:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a669:	0f b6 c0             	movzbl %al,%eax
f011a66c:	c1 e0 04             	shl    $0x4,%eax
f011a66f:	89 c2                	mov    %eax,%edx
f011a671:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011a677:	01 d0                	add    %edx,%eax
f011a679:	48                   	dec    %eax
f011a67a:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011a680:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011a686:	ba 00 00 00 00       	mov    $0x0,%edx
f011a68b:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011a691:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011a697:	29 d0                	sub    %edx,%eax
f011a699:	01 d8                	add    %ebx,%eax
f011a69b:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011a6a0:	39 c1                	cmp    %eax,%ecx
f011a6a2:	74 17                	je     f011a6bb <test_kmalloc_bestfit1+0xbef>
f011a6a4:	83 ec 04             	sub    $0x4,%esp
f011a6a7:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011a6ac:	68 f3 01 00 00       	push   $0x1f3
f011a6b1:	68 da ac 13 f0       	push   $0xf013acda
f011a6b6:	e8 40 5b fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a6bb:	e8 7c 96 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a6c0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a6c3:	74 17                	je     f011a6dc <test_kmalloc_bestfit1+0xc10>
f011a6c5:	83 ec 04             	sub    $0x4,%esp
f011a6c8:	68 f4 ac 13 f0       	push   $0xf013acf4
f011a6cd:	68 f4 01 00 00       	push   $0x1f4
f011a6d2:	68 da ac 13 f0       	push   $0xf013acda
f011a6d7:	e8 1f 5b fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011a6dc:	e8 7a 22 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011a6e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a6e4:	29 c2                	sub    %eax,%edx
f011a6e6:	89 d0                	mov    %edx,%eax
f011a6e8:	3d 80 00 00 00       	cmp    $0x80,%eax
f011a6ed:	74 17                	je     f011a706 <test_kmalloc_bestfit1+0xc3a>
f011a6ef:	83 ec 04             	sub    $0x4,%esp
f011a6f2:	68 24 b1 13 f0       	push   $0xf013b124
f011a6f7:	68 f5 01 00 00       	push   $0x1f5
f011a6fc:	68 da ac 13 f0       	push   $0xf013acda
f011a701:	e8 f5 5a fe ff       	call   f01001fb <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011a706:	e8 50 22 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011a70b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a70e:	e8 29 96 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a713:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011a716:	83 ec 0c             	sub    $0xc,%esp
f011a719:	68 00 fc 0f 00       	push   $0xffc00
f011a71e:	e8 db d0 fe ff       	call   f01077fe <kmalloc>
f011a723:	83 c4 10             	add    $0x10,%esp
f011a726:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011a72c:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011a732:	89 c1                	mov    %eax,%ecx
f011a734:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011a73b:	10 00 00 
f011a73e:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011a744:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a749:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011a74f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011a755:	ba 00 00 00 00       	mov    $0x0,%edx
f011a75a:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011a760:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011a766:	29 d0                	sub    %edx,%eax
f011a768:	89 c3                	mov    %eax,%ebx
f011a76a:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011a771:	10 00 00 
f011a774:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a779:	0f b6 d0             	movzbl %al,%edx
f011a77c:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011a782:	01 d0                	add    %edx,%eax
f011a784:	48                   	dec    %eax
f011a785:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011a78b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011a791:	ba 00 00 00 00       	mov    $0x0,%edx
f011a796:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011a79c:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011a7a2:	29 d0                	sub    %edx,%eax
f011a7a4:	01 c3                	add    %eax,%ebx
f011a7a6:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011a7ad:	10 00 00 
f011a7b0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a7b5:	0f b6 c0             	movzbl %al,%eax
f011a7b8:	c1 e0 04             	shl    $0x4,%eax
f011a7bb:	89 c2                	mov    %eax,%edx
f011a7bd:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011a7c3:	01 d0                	add    %edx,%eax
f011a7c5:	48                   	dec    %eax
f011a7c6:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011a7cc:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011a7d2:	ba 00 00 00 00       	mov    $0x0,%edx
f011a7d7:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011a7dd:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011a7e3:	29 d0                	sub    %edx,%eax
f011a7e5:	01 d8                	add    %ebx,%eax
f011a7e7:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011a7ec:	39 c1                	cmp    %eax,%ecx
f011a7ee:	74 17                	je     f011a807 <test_kmalloc_bestfit1+0xd3b>
f011a7f0:	83 ec 04             	sub    $0x4,%esp
f011a7f3:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011a7f8:	68 fb 01 00 00       	push   $0x1fb
f011a7fd:	68 da ac 13 f0       	push   $0xf013acda
f011a802:	e8 f4 59 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a807:	e8 30 95 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a80c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a80f:	74 17                	je     f011a828 <test_kmalloc_bestfit1+0xd5c>
f011a811:	83 ec 04             	sub    $0x4,%esp
f011a814:	68 f4 ac 13 f0       	push   $0xf013acf4
f011a819:	68 fc 01 00 00       	push   $0x1fc
f011a81e:	68 da ac 13 f0       	push   $0xf013acda
f011a823:	e8 d3 59 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a828:	e8 2e 21 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011a82d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a830:	29 c2                	sub    %eax,%edx
f011a832:	89 d0                	mov    %edx,%eax
f011a834:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a839:	74 17                	je     f011a852 <test_kmalloc_bestfit1+0xd86>
f011a83b:	83 ec 04             	sub    $0x4,%esp
f011a83e:	68 24 b1 13 f0       	push   $0xf013b124
f011a843:	68 fd 01 00 00       	push   $0x1fd
f011a848:	68 da ac 13 f0       	push   $0xf013acda
f011a84d:	e8 a9 59 fe ff       	call   f01001fb <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011a852:	e8 04 21 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011a857:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a85a:	e8 dd 94 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a85f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011a862:	83 ec 0c             	sub    $0xc,%esp
f011a865:	68 00 fc 03 00       	push   $0x3fc00
f011a86a:	e8 8f cf fe ff       	call   f01077fe <kmalloc>
f011a86f:	83 c4 10             	add    $0x10,%esp
f011a872:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011a878:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011a87e:	89 c1                	mov    %eax,%ecx
f011a880:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011a887:	10 00 00 
f011a88a:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011a890:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a895:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011a89b:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011a8a1:	ba 00 00 00 00       	mov    $0x0,%edx
f011a8a6:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011a8ac:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011a8b2:	29 d0                	sub    %edx,%eax
f011a8b4:	89 c3                	mov    %eax,%ebx
f011a8b6:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011a8bd:	10 00 00 
f011a8c0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a8c5:	0f b6 d0             	movzbl %al,%edx
f011a8c8:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011a8ce:	01 d0                	add    %edx,%eax
f011a8d0:	48                   	dec    %eax
f011a8d1:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011a8d7:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a8dd:	ba 00 00 00 00       	mov    $0x0,%edx
f011a8e2:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011a8e8:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a8ee:	29 d0                	sub    %edx,%eax
f011a8f0:	01 c3                	add    %eax,%ebx
f011a8f2:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011a8f9:	10 00 00 
f011a8fc:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a901:	0f b6 c0             	movzbl %al,%eax
f011a904:	c1 e0 04             	shl    $0x4,%eax
f011a907:	89 c2                	mov    %eax,%edx
f011a909:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011a90f:	01 d0                	add    %edx,%eax
f011a911:	48                   	dec    %eax
f011a912:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011a918:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011a91e:	ba 00 00 00 00       	mov    $0x0,%edx
f011a923:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011a929:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011a92f:	29 d0                	sub    %edx,%eax
f011a931:	01 d8                	add    %ebx,%eax
f011a933:	2d 00 c0 47 09       	sub    $0x947c000,%eax
f011a938:	39 c1                	cmp    %eax,%ecx
f011a93a:	74 17                	je     f011a953 <test_kmalloc_bestfit1+0xe87>
f011a93c:	83 ec 04             	sub    $0x4,%esp
f011a93f:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011a944:	68 03 02 00 00       	push   $0x203
f011a949:	68 da ac 13 f0       	push   $0xf013acda
f011a94e:	e8 a8 58 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a953:	e8 e4 93 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a958:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a95b:	74 17                	je     f011a974 <test_kmalloc_bestfit1+0xea8>
f011a95d:	83 ec 04             	sub    $0x4,%esp
f011a960:	68 f4 ac 13 f0       	push   $0xf013acf4
f011a965:	68 04 02 00 00       	push   $0x204
f011a96a:	68 da ac 13 f0       	push   $0xf013acda
f011a96f:	e8 87 58 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011a974:	e8 e2 1f ff ff       	call   f010c95b <sys_calculate_free_frames>
f011a979:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a97c:	29 c2                	sub    %eax,%edx
f011a97e:	89 d0                	mov    %edx,%eax
f011a980:	83 f8 40             	cmp    $0x40,%eax
f011a983:	74 17                	je     f011a99c <test_kmalloc_bestfit1+0xed0>
f011a985:	83 ec 04             	sub    $0x4,%esp
f011a988:	68 24 b1 13 f0       	push   $0xf013b124
f011a98d:	68 05 02 00 00       	push   $0x205
f011a992:	68 da ac 13 f0       	push   $0xf013acda
f011a997:	e8 5f 58 fe ff       	call   f01001fb <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011a99c:	e8 ba 1f ff ff       	call   f010c95b <sys_calculate_free_frames>
f011a9a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a9a4:	e8 93 93 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a9a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f011a9ac:	83 ec 0c             	sub    $0xc,%esp
f011a9af:	68 00 fc 3f 00       	push   $0x3ffc00
f011a9b4:	e8 45 ce fe ff       	call   f01077fe <kmalloc>
f011a9b9:	83 c4 10             	add    $0x10,%esp
f011a9bc:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011a9c2:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011a9c8:	89 c1                	mov    %eax,%ecx
f011a9ca:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011a9d1:	10 00 00 
f011a9d4:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011a9da:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a9df:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011a9e5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a9eb:	ba 00 00 00 00       	mov    $0x0,%edx
f011a9f0:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011a9f6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a9fc:	29 d0                	sub    %edx,%eax
f011a9fe:	89 c3                	mov    %eax,%ebx
f011aa00:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011aa07:	10 00 00 
f011aa0a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011aa0f:	0f b6 d0             	movzbl %al,%edx
f011aa12:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011aa18:	01 d0                	add    %edx,%eax
f011aa1a:	48                   	dec    %eax
f011aa1b:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011aa21:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011aa27:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa2c:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011aa32:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011aa38:	29 d0                	sub    %edx,%eax
f011aa3a:	01 c3                	add    %eax,%ebx
f011aa3c:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011aa43:	10 00 00 
f011aa46:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011aa4b:	0f b6 c0             	movzbl %al,%eax
f011aa4e:	c1 e0 04             	shl    $0x4,%eax
f011aa51:	89 c2                	mov    %eax,%edx
f011aa53:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011aa59:	01 d0                	add    %edx,%eax
f011aa5b:	48                   	dec    %eax
f011aa5c:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011aa62:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011aa68:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa6d:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011aa73:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011aa79:	29 d0                	sub    %edx,%eax
f011aa7b:	01 d8                	add    %ebx,%eax
f011aa7d:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011aa82:	39 c1                	cmp    %eax,%ecx
f011aa84:	74 17                	je     f011aa9d <test_kmalloc_bestfit1+0xfd1>
f011aa86:	83 ec 04             	sub    $0x4,%esp
f011aa89:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011aa8e:	68 0b 02 00 00       	push   $0x20b
f011aa93:	68 da ac 13 f0       	push   $0xf013acda
f011aa98:	e8 5e 57 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aa9d:	e8 9a 92 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011aaa2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aaa5:	74 17                	je     f011aabe <test_kmalloc_bestfit1+0xff2>
f011aaa7:	83 ec 04             	sub    $0x4,%esp
f011aaaa:	68 f4 ac 13 f0       	push   $0xf013acf4
f011aaaf:	68 0c 02 00 00       	push   $0x20c
f011aab4:	68 da ac 13 f0       	push   $0xf013acda
f011aab9:	e8 3d 57 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011aabe:	e8 98 1e ff ff       	call   f010c95b <sys_calculate_free_frames>
f011aac3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011aac6:	29 c2                	sub    %eax,%edx
f011aac8:	89 d0                	mov    %edx,%eax
f011aaca:	3d 00 04 00 00       	cmp    $0x400,%eax
f011aacf:	74 17                	je     f011aae8 <test_kmalloc_bestfit1+0x101c>
f011aad1:	83 ec 04             	sub    $0x4,%esp
f011aad4:	68 24 b1 13 f0       	push   $0xf013b124
f011aad9:	68 0d 02 00 00       	push   $0x20d
f011aade:	68 da ac 13 f0       	push   $0xf013acda
f011aae3:	e8 13 57 fe ff       	call   f01001fb <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f011aae8:	e8 6e 1e ff ff       	call   f010c95b <sys_calculate_free_frames>
f011aaed:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aaf0:	e8 47 92 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011aaf5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011aaf8:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011aafe:	83 ec 0c             	sub    $0xc,%esp
f011ab01:	50                   	push   %eax
f011ab02:	e8 b9 cd fe ff       	call   f01078c0 <kfree>
f011ab07:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ab0a:	e8 2d 92 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ab0f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ab12:	74 17                	je     f011ab2b <test_kmalloc_bestfit1+0x105f>
f011ab14:	83 ec 04             	sub    $0x4,%esp
f011ab17:	68 f4 ac 13 f0       	push   $0xf013acf4
f011ab1c:	68 16 02 00 00       	push   $0x216
f011ab21:	68 da ac 13 f0       	push   $0xf013acda
f011ab26:	e8 d0 56 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011ab2b:	e8 2b 1e ff ff       	call   f010c95b <sys_calculate_free_frames>
f011ab30:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011ab33:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ab38:	74 17                	je     f011ab51 <test_kmalloc_bestfit1+0x1085>
f011ab3a:	83 ec 04             	sub    $0x4,%esp
f011ab3d:	68 37 b1 13 f0       	push   $0xf013b137
f011ab42:	68 17 02 00 00       	push   $0x217
f011ab47:	68 da ac 13 f0       	push   $0xf013acda
f011ab4c:	e8 aa 56 fe ff       	call   f01001fb <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f011ab51:	e8 05 1e ff ff       	call   f010c95b <sys_calculate_free_frames>
f011ab56:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ab59:	e8 de 91 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ab5e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f011ab61:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011ab67:	83 ec 0c             	sub    $0xc,%esp
f011ab6a:	50                   	push   %eax
f011ab6b:	e8 50 cd fe ff       	call   f01078c0 <kfree>
f011ab70:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ab73:	e8 c4 91 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ab78:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ab7b:	74 17                	je     f011ab94 <test_kmalloc_bestfit1+0x10c8>
f011ab7d:	83 ec 04             	sub    $0x4,%esp
f011ab80:	68 f4 ac 13 f0       	push   $0xf013acf4
f011ab85:	68 1d 02 00 00       	push   $0x21d
f011ab8a:	68 da ac 13 f0       	push   $0xf013acda
f011ab8f:	e8 67 56 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f011ab94:	e8 c2 1d ff ff       	call   f010c95b <sys_calculate_free_frames>
f011ab99:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011ab9c:	3d 80 00 00 00       	cmp    $0x80,%eax
f011aba1:	74 17                	je     f011abba <test_kmalloc_bestfit1+0x10ee>
f011aba3:	83 ec 04             	sub    $0x4,%esp
f011aba6:	68 37 b1 13 f0       	push   $0xf013b137
f011abab:	68 1e 02 00 00       	push   $0x21e
f011abb0:	68 da ac 13 f0       	push   $0xf013acda
f011abb5:	e8 41 56 fe ff       	call   f01001fb <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f011abba:	e8 9c 1d ff ff       	call   f010c95b <sys_calculate_free_frames>
f011abbf:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011abc2:	e8 75 91 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011abc7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f011abca:	83 ec 0c             	sub    $0xc,%esp
f011abcd:	68 00 fc 1f 00       	push   $0x1ffc00
f011abd2:	e8 27 cc fe ff       	call   f01077fe <kmalloc>
f011abd7:	83 c4 10             	add    $0x10,%esp
f011abda:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f011abe0:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011abe6:	89 c1                	mov    %eax,%ecx
f011abe8:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011abef:	10 00 00 
f011abf2:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011abf8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011abfd:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011ac03:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011ac09:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac0e:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011ac14:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011ac1a:	29 d0                	sub    %edx,%eax
f011ac1c:	89 c3                	mov    %eax,%ebx
f011ac1e:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011ac25:	10 00 00 
f011ac28:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ac2d:	0f b6 d0             	movzbl %al,%edx
f011ac30:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011ac36:	01 d0                	add    %edx,%eax
f011ac38:	48                   	dec    %eax
f011ac39:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011ac3f:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011ac45:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac4a:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011ac50:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011ac56:	29 d0                	sub    %edx,%eax
f011ac58:	01 c3                	add    %eax,%ebx
f011ac5a:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011ac61:	10 00 00 
f011ac64:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ac69:	0f b6 c0             	movzbl %al,%eax
f011ac6c:	c1 e0 04             	shl    $0x4,%eax
f011ac6f:	89 c2                	mov    %eax,%edx
f011ac71:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011ac77:	01 d0                	add    %edx,%eax
f011ac79:	48                   	dec    %eax
f011ac7a:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011ac80:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011ac86:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac8b:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011ac91:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011ac97:	29 d0                	sub    %edx,%eax
f011ac99:	01 d8                	add    %ebx,%eax
f011ac9b:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f011aca0:	39 c1                	cmp    %eax,%ecx
f011aca2:	74 17                	je     f011acbb <test_kmalloc_bestfit1+0x11ef>
f011aca4:	83 ec 04             	sub    $0x4,%esp
f011aca7:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011acac:	68 27 02 00 00       	push   $0x227
f011acb1:	68 da ac 13 f0       	push   $0xf013acda
f011acb6:	e8 40 55 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011acbb:	e8 7c 90 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011acc0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011acc3:	74 17                	je     f011acdc <test_kmalloc_bestfit1+0x1210>
f011acc5:	83 ec 04             	sub    $0x4,%esp
f011acc8:	68 f4 ac 13 f0       	push   $0xf013acf4
f011accd:	68 28 02 00 00       	push   $0x228
f011acd2:	68 da ac 13 f0       	push   $0xf013acda
f011acd7:	e8 1f 55 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011acdc:	e8 7a 1c ff ff       	call   f010c95b <sys_calculate_free_frames>
f011ace1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ace4:	29 c2                	sub    %eax,%edx
f011ace6:	89 d0                	mov    %edx,%eax
f011ace8:	3d 00 02 00 00       	cmp    $0x200,%eax
f011aced:	74 17                	je     f011ad06 <test_kmalloc_bestfit1+0x123a>
f011acef:	83 ec 04             	sub    $0x4,%esp
f011acf2:	68 24 b1 13 f0       	push   $0xf013b124
f011acf7:	68 29 02 00 00       	push   $0x229
f011acfc:	68 da ac 13 f0       	push   $0xf013acda
f011ad01:	e8 f5 54 fe ff       	call   f01001fb <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f011ad06:	83 ec 0c             	sub    $0xc,%esp
f011ad09:	68 44 b1 13 f0       	push   $0xf013b144
f011ad0e:	e8 6f 5f fe ff       	call   f0100c82 <cprintf>
f011ad13:	83 c4 10             	add    $0x10,%esp

	return 1;
f011ad16:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011ad1b:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011ad1e:	5b                   	pop    %ebx
f011ad1f:	5f                   	pop    %edi
f011ad20:	5d                   	pop    %ebp
f011ad21:	c3                   	ret    

f011ad22 <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f011ad22:	55                   	push   %ebp
f011ad23:	89 e5                	mov    %esp,%ebp
f011ad25:	57                   	push   %edi
f011ad26:	53                   	push   %ebx
f011ad27:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011ad2d:	83 ec 0c             	sub    $0xc,%esp
f011ad30:	68 1c ac 13 f0       	push   $0xf013ac1c
f011ad35:	e8 48 5f fe ff       	call   f0100c82 <cprintf>
f011ad3a:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011ad3d:	83 ec 0c             	sub    $0xc,%esp
f011ad40:	68 4c ac 13 f0       	push   $0xf013ac4c
f011ad45:	e8 38 5f fe ff       	call   f0100c82 <cprintf>
f011ad4a:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011ad4d:	83 ec 0c             	sub    $0xc,%esp
f011ad50:	68 1c ac 13 f0       	push   $0xf013ac1c
f011ad55:	e8 28 5f fe ff       	call   f0100c82 <cprintf>
f011ad5a:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011ad5d:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011ad63:	b9 14 00 00 00       	mov    $0x14,%ecx
f011ad68:	b8 00 00 00 00       	mov    $0x0,%eax
f011ad6d:	89 d7                	mov    %edx,%edi
f011ad6f:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011ad71:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011ad78:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011ad7b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ad80:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011ad83:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011ad86:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad8b:	f7 75 f4             	divl   -0xc(%ebp)
f011ad8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011ad91:	29 d0                	sub    %edx,%eax
f011ad93:	89 c1                	mov    %eax,%ecx
f011ad95:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011ad9c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ada1:	0f b6 d0             	movzbl %al,%edx
f011ada4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011ada7:	01 d0                	add    %edx,%eax
f011ada9:	48                   	dec    %eax
f011adaa:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011adad:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011adb0:	ba 00 00 00 00       	mov    $0x0,%edx
f011adb5:	f7 75 ec             	divl   -0x14(%ebp)
f011adb8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011adbb:	29 d0                	sub    %edx,%eax
f011adbd:	01 c1                	add    %eax,%ecx
f011adbf:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011adc6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011adcb:	0f b6 c0             	movzbl %al,%eax
f011adce:	c1 e0 04             	shl    $0x4,%eax
f011add1:	89 c2                	mov    %eax,%edx
f011add3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011add6:	01 d0                	add    %edx,%eax
f011add8:	48                   	dec    %eax
f011add9:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011addc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011addf:	ba 00 00 00 00       	mov    $0x0,%edx
f011ade4:	f7 75 e4             	divl   -0x1c(%ebp)
f011ade7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011adea:	29 d0                	sub    %edx,%eax
f011adec:	01 c8                	add    %ecx,%eax
f011adee:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011adf3:	29 c2                	sub    %eax,%edx
f011adf5:	89 d0                	mov    %edx,%eax
f011adf7:	83 ec 0c             	sub    $0xc,%esp
f011adfa:	50                   	push   %eax
f011adfb:	e8 fe c9 fe ff       	call   f01077fe <kmalloc>
f011ae00:	83 c4 10             	add    $0x10,%esp
f011ae03:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f011ae09:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011ae0f:	85 c0                	test   %eax,%eax
f011ae11:	74 17                	je     f011ae2a <test_kmalloc_bestfit2+0x108>
f011ae13:	83 ec 04             	sub    $0x4,%esp
f011ae16:	68 8c b1 13 f0       	push   $0xf013b18c
f011ae1b:	68 3f 02 00 00       	push   $0x23f
f011ae20:	68 da ac 13 f0       	push   $0xf013acda
f011ae25:	e8 d1 53 fe ff       	call   f01001fb <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ae2a:	e8 2c 1b ff ff       	call   f010c95b <sys_calculate_free_frames>
f011ae2f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ae32:	e8 05 8f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ae37:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011ae3a:	83 ec 0c             	sub    $0xc,%esp
f011ae3d:	68 00 fc 1f 00       	push   $0x1ffc00
f011ae42:	e8 b7 c9 fe ff       	call   f01077fe <kmalloc>
f011ae47:	83 c4 10             	add    $0x10,%esp
f011ae4a:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011ae50:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011ae56:	89 c1                	mov    %eax,%ecx
f011ae58:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011ae5f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011ae62:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ae67:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011ae6a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ae6d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae72:	f7 75 d4             	divl   -0x2c(%ebp)
f011ae75:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ae78:	29 d0                	sub    %edx,%eax
f011ae7a:	89 c3                	mov    %eax,%ebx
f011ae7c:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011ae83:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ae88:	0f b6 d0             	movzbl %al,%edx
f011ae8b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011ae8e:	01 d0                	add    %edx,%eax
f011ae90:	48                   	dec    %eax
f011ae91:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011ae94:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011ae97:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae9c:	f7 75 cc             	divl   -0x34(%ebp)
f011ae9f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011aea2:	29 d0                	sub    %edx,%eax
f011aea4:	01 c3                	add    %eax,%ebx
f011aea6:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011aead:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011aeb2:	0f b6 c0             	movzbl %al,%eax
f011aeb5:	c1 e0 04             	shl    $0x4,%eax
f011aeb8:	89 c2                	mov    %eax,%edx
f011aeba:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011aebd:	01 d0                	add    %edx,%eax
f011aebf:	48                   	dec    %eax
f011aec0:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011aec3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011aec6:	ba 00 00 00 00       	mov    $0x0,%edx
f011aecb:	f7 75 c4             	divl   -0x3c(%ebp)
f011aece:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011aed1:	29 d0                	sub    %edx,%eax
f011aed3:	01 d8                	add    %ebx,%eax
f011aed5:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011aeda:	39 c1                	cmp    %eax,%ecx
f011aedc:	74 17                	je     f011aef5 <test_kmalloc_bestfit2+0x1d3>
f011aede:	83 ec 04             	sub    $0x4,%esp
f011aee1:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011aee6:	68 49 02 00 00       	push   $0x249
f011aeeb:	68 da ac 13 f0       	push   $0xf013acda
f011aef0:	e8 06 53 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aef5:	e8 42 8e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011aefa:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011aefd:	74 17                	je     f011af16 <test_kmalloc_bestfit2+0x1f4>
f011aeff:	83 ec 04             	sub    $0x4,%esp
f011af02:	68 f4 ac 13 f0       	push   $0xf013acf4
f011af07:	68 4a 02 00 00       	push   $0x24a
f011af0c:	68 da ac 13 f0       	push   $0xf013acda
f011af11:	e8 e5 52 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011af16:	e8 40 1a ff ff       	call   f010c95b <sys_calculate_free_frames>
f011af1b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011af1e:	29 c2                	sub    %eax,%edx
f011af20:	89 d0                	mov    %edx,%eax
f011af22:	3d 00 02 00 00       	cmp    $0x200,%eax
f011af27:	74 17                	je     f011af40 <test_kmalloc_bestfit2+0x21e>
f011af29:	83 ec 04             	sub    $0x4,%esp
f011af2c:	68 24 b1 13 f0       	push   $0xf013b124
f011af31:	68 4b 02 00 00       	push   $0x24b
f011af36:	68 da ac 13 f0       	push   $0xf013acda
f011af3b:	e8 bb 52 fe ff       	call   f01001fb <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011af40:	e8 16 1a ff ff       	call   f010c95b <sys_calculate_free_frames>
f011af45:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011af48:	e8 ef 8d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011af4d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011af50:	83 ec 0c             	sub    $0xc,%esp
f011af53:	68 00 fc 1f 00       	push   $0x1ffc00
f011af58:	e8 a1 c8 fe ff       	call   f01077fe <kmalloc>
f011af5d:	83 c4 10             	add    $0x10,%esp
f011af60:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011af66:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011af6c:	89 c1                	mov    %eax,%ecx
f011af6e:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011af75:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011af78:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011af7d:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011af80:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011af83:	ba 00 00 00 00       	mov    $0x0,%edx
f011af88:	f7 75 bc             	divl   -0x44(%ebp)
f011af8b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011af8e:	29 d0                	sub    %edx,%eax
f011af90:	89 c3                	mov    %eax,%ebx
f011af92:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011af99:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011af9e:	0f b6 d0             	movzbl %al,%edx
f011afa1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011afa4:	01 d0                	add    %edx,%eax
f011afa6:	48                   	dec    %eax
f011afa7:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011afaa:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011afad:	ba 00 00 00 00       	mov    $0x0,%edx
f011afb2:	f7 75 b4             	divl   -0x4c(%ebp)
f011afb5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011afb8:	29 d0                	sub    %edx,%eax
f011afba:	01 c3                	add    %eax,%ebx
f011afbc:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011afc3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011afc8:	0f b6 c0             	movzbl %al,%eax
f011afcb:	c1 e0 04             	shl    $0x4,%eax
f011afce:	89 c2                	mov    %eax,%edx
f011afd0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011afd3:	01 d0                	add    %edx,%eax
f011afd5:	48                   	dec    %eax
f011afd6:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011afd9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011afdc:	ba 00 00 00 00       	mov    $0x0,%edx
f011afe1:	f7 75 ac             	divl   -0x54(%ebp)
f011afe4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011afe7:	29 d0                	sub    %edx,%eax
f011afe9:	01 d8                	add    %ebx,%eax
f011afeb:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011aff0:	39 c1                	cmp    %eax,%ecx
f011aff2:	74 17                	je     f011b00b <test_kmalloc_bestfit2+0x2e9>
f011aff4:	83 ec 04             	sub    $0x4,%esp
f011aff7:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011affc:	68 51 02 00 00       	push   $0x251
f011b001:	68 da ac 13 f0       	push   $0xf013acda
f011b006:	e8 f0 51 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b00b:	e8 2c 8d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b010:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b013:	74 17                	je     f011b02c <test_kmalloc_bestfit2+0x30a>
f011b015:	83 ec 04             	sub    $0x4,%esp
f011b018:	68 f4 ac 13 f0       	push   $0xf013acf4
f011b01d:	68 52 02 00 00       	push   $0x252
f011b022:	68 da ac 13 f0       	push   $0xf013acda
f011b027:	e8 cf 51 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011b02c:	e8 2a 19 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011b031:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b034:	29 c2                	sub    %eax,%edx
f011b036:	89 d0                	mov    %edx,%eax
f011b038:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b03d:	74 17                	je     f011b056 <test_kmalloc_bestfit2+0x334>
f011b03f:	83 ec 04             	sub    $0x4,%esp
f011b042:	68 24 b1 13 f0       	push   $0xf013b124
f011b047:	68 53 02 00 00       	push   $0x253
f011b04c:	68 da ac 13 f0       	push   $0xf013acda
f011b051:	e8 a5 51 fe ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011b056:	e8 00 19 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011b05b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b05e:	e8 d9 8c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b063:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011b066:	83 ec 0c             	sub    $0xc,%esp
f011b069:	68 00 08 00 00       	push   $0x800
f011b06e:	e8 8b c7 fe ff       	call   f01077fe <kmalloc>
f011b073:	83 c4 10             	add    $0x10,%esp
f011b076:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011b07c:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011b082:	89 c1                	mov    %eax,%ecx
f011b084:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011b08b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b08e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b093:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011b096:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b099:	ba 00 00 00 00       	mov    $0x0,%edx
f011b09e:	f7 75 a4             	divl   -0x5c(%ebp)
f011b0a1:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b0a4:	29 d0                	sub    %edx,%eax
f011b0a6:	89 c3                	mov    %eax,%ebx
f011b0a8:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011b0af:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b0b4:	0f b6 d0             	movzbl %al,%edx
f011b0b7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011b0ba:	01 d0                	add    %edx,%eax
f011b0bc:	48                   	dec    %eax
f011b0bd:	89 45 98             	mov    %eax,-0x68(%ebp)
f011b0c0:	8b 45 98             	mov    -0x68(%ebp),%eax
f011b0c3:	ba 00 00 00 00       	mov    $0x0,%edx
f011b0c8:	f7 75 9c             	divl   -0x64(%ebp)
f011b0cb:	8b 45 98             	mov    -0x68(%ebp),%eax
f011b0ce:	29 d0                	sub    %edx,%eax
f011b0d0:	01 c3                	add    %eax,%ebx
f011b0d2:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011b0d9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b0de:	0f b6 c0             	movzbl %al,%eax
f011b0e1:	c1 e0 04             	shl    $0x4,%eax
f011b0e4:	89 c2                	mov    %eax,%edx
f011b0e6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011b0e9:	01 d0                	add    %edx,%eax
f011b0eb:	48                   	dec    %eax
f011b0ec:	89 45 90             	mov    %eax,-0x70(%ebp)
f011b0ef:	8b 45 90             	mov    -0x70(%ebp),%eax
f011b0f2:	ba 00 00 00 00       	mov    $0x0,%edx
f011b0f7:	f7 75 94             	divl   -0x6c(%ebp)
f011b0fa:	8b 45 90             	mov    -0x70(%ebp),%eax
f011b0fd:	29 d0                	sub    %edx,%eax
f011b0ff:	01 d8                	add    %ebx,%eax
f011b101:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011b106:	39 c1                	cmp    %eax,%ecx
f011b108:	74 17                	je     f011b121 <test_kmalloc_bestfit2+0x3ff>
f011b10a:	83 ec 04             	sub    $0x4,%esp
f011b10d:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011b112:	68 59 02 00 00       	push   $0x259
f011b117:	68 da ac 13 f0       	push   $0xf013acda
f011b11c:	e8 da 50 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b121:	e8 16 8c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b126:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b129:	74 17                	je     f011b142 <test_kmalloc_bestfit2+0x420>
f011b12b:	83 ec 04             	sub    $0x4,%esp
f011b12e:	68 f4 ac 13 f0       	push   $0xf013acf4
f011b133:	68 5a 02 00 00       	push   $0x25a
f011b138:	68 da ac 13 f0       	push   $0xf013acda
f011b13d:	e8 b9 50 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011b142:	e8 14 18 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011b147:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b14a:	29 c2                	sub    %eax,%edx
f011b14c:	89 d0                	mov    %edx,%eax
f011b14e:	83 f8 01             	cmp    $0x1,%eax
f011b151:	74 17                	je     f011b16a <test_kmalloc_bestfit2+0x448>
f011b153:	83 ec 04             	sub    $0x4,%esp
f011b156:	68 24 b1 13 f0       	push   $0xf013b124
f011b15b:	68 5b 02 00 00       	push   $0x25b
f011b160:	68 da ac 13 f0       	push   $0xf013acda
f011b165:	e8 91 50 fe ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011b16a:	e8 ec 17 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011b16f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b172:	e8 c5 8b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b177:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011b17a:	83 ec 0c             	sub    $0xc,%esp
f011b17d:	68 00 08 00 00       	push   $0x800
f011b182:	e8 77 c6 fe ff       	call   f01077fe <kmalloc>
f011b187:	83 c4 10             	add    $0x10,%esp
f011b18a:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011b190:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011b196:	89 c1                	mov    %eax,%ecx
f011b198:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011b19f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011b1a2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b1a7:	89 45 88             	mov    %eax,-0x78(%ebp)
f011b1aa:	8b 45 88             	mov    -0x78(%ebp),%eax
f011b1ad:	ba 00 00 00 00       	mov    $0x0,%edx
f011b1b2:	f7 75 8c             	divl   -0x74(%ebp)
f011b1b5:	8b 45 88             	mov    -0x78(%ebp),%eax
f011b1b8:	29 d0                	sub    %edx,%eax
f011b1ba:	89 c3                	mov    %eax,%ebx
f011b1bc:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011b1c3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b1c8:	0f b6 d0             	movzbl %al,%edx
f011b1cb:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011b1ce:	01 d0                	add    %edx,%eax
f011b1d0:	48                   	dec    %eax
f011b1d1:	89 45 80             	mov    %eax,-0x80(%ebp)
f011b1d4:	8b 45 80             	mov    -0x80(%ebp),%eax
f011b1d7:	ba 00 00 00 00       	mov    $0x0,%edx
f011b1dc:	f7 75 84             	divl   -0x7c(%ebp)
f011b1df:	8b 45 80             	mov    -0x80(%ebp),%eax
f011b1e2:	29 d0                	sub    %edx,%eax
f011b1e4:	01 c3                	add    %eax,%ebx
f011b1e6:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011b1ed:	10 00 00 
f011b1f0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b1f5:	0f b6 c0             	movzbl %al,%eax
f011b1f8:	c1 e0 04             	shl    $0x4,%eax
f011b1fb:	89 c2                	mov    %eax,%edx
f011b1fd:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011b203:	01 d0                	add    %edx,%eax
f011b205:	48                   	dec    %eax
f011b206:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011b20c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011b212:	ba 00 00 00 00       	mov    $0x0,%edx
f011b217:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011b21d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011b223:	29 d0                	sub    %edx,%eax
f011b225:	01 d8                	add    %ebx,%eax
f011b227:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011b22c:	39 c1                	cmp    %eax,%ecx
f011b22e:	74 17                	je     f011b247 <test_kmalloc_bestfit2+0x525>
f011b230:	83 ec 04             	sub    $0x4,%esp
f011b233:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011b238:	68 61 02 00 00       	push   $0x261
f011b23d:	68 da ac 13 f0       	push   $0xf013acda
f011b242:	e8 b4 4f fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b247:	e8 f0 8a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b24c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b24f:	74 17                	je     f011b268 <test_kmalloc_bestfit2+0x546>
f011b251:	83 ec 04             	sub    $0x4,%esp
f011b254:	68 f4 ac 13 f0       	push   $0xf013acf4
f011b259:	68 62 02 00 00       	push   $0x262
f011b25e:	68 da ac 13 f0       	push   $0xf013acda
f011b263:	e8 93 4f fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011b268:	e8 ee 16 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011b26d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b270:	29 c2                	sub    %eax,%edx
f011b272:	89 d0                	mov    %edx,%eax
f011b274:	83 f8 01             	cmp    $0x1,%eax
f011b277:	74 17                	je     f011b290 <test_kmalloc_bestfit2+0x56e>
f011b279:	83 ec 04             	sub    $0x4,%esp
f011b27c:	68 24 b1 13 f0       	push   $0xf013b124
f011b281:	68 63 02 00 00       	push   $0x263
f011b286:	68 da ac 13 f0       	push   $0xf013acda
f011b28b:	e8 6b 4f fe ff       	call   f01001fb <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b290:	e8 c6 16 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011b295:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b298:	e8 9f 8a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b29d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011b2a0:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011b2a6:	83 ec 0c             	sub    $0xc,%esp
f011b2a9:	50                   	push   %eax
f011b2aa:	e8 11 c6 fe ff       	call   f01078c0 <kfree>
f011b2af:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b2b2:	e8 85 8a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b2b7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b2ba:	74 17                	je     f011b2d3 <test_kmalloc_bestfit2+0x5b1>
f011b2bc:	83 ec 04             	sub    $0x4,%esp
f011b2bf:	68 f4 ac 13 f0       	push   $0xf013acf4
f011b2c4:	68 69 02 00 00       	push   $0x269
f011b2c9:	68 da ac 13 f0       	push   $0xf013acda
f011b2ce:	e8 28 4f fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f011b2d3:	e8 83 16 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011b2d8:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011b2db:	83 f8 01             	cmp    $0x1,%eax
f011b2de:	74 17                	je     f011b2f7 <test_kmalloc_bestfit2+0x5d5>
f011b2e0:	83 ec 04             	sub    $0x4,%esp
f011b2e3:	68 24 b1 13 f0       	push   $0xf013b124
f011b2e8:	68 6a 02 00 00       	push   $0x26a
f011b2ed:	68 da ac 13 f0       	push   $0xf013acda
f011b2f2:	e8 04 4f fe ff       	call   f01001fb <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011b2f7:	e8 5f 16 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011b2fc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b2ff:	e8 38 8a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b304:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011b307:	83 ec 0c             	sub    $0xc,%esp
f011b30a:	68 00 1c 00 00       	push   $0x1c00
f011b30f:	e8 ea c4 fe ff       	call   f01077fe <kmalloc>
f011b314:	83 c4 10             	add    $0x10,%esp
f011b317:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011b31d:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011b323:	89 c1                	mov    %eax,%ecx
f011b325:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011b32c:	10 00 00 
f011b32f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011b335:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b33a:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011b340:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011b346:	ba 00 00 00 00       	mov    $0x0,%edx
f011b34b:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011b351:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011b357:	29 d0                	sub    %edx,%eax
f011b359:	89 c3                	mov    %eax,%ebx
f011b35b:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011b362:	10 00 00 
f011b365:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b36a:	0f b6 d0             	movzbl %al,%edx
f011b36d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011b373:	01 d0                	add    %edx,%eax
f011b375:	48                   	dec    %eax
f011b376:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011b37c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011b382:	ba 00 00 00 00       	mov    $0x0,%edx
f011b387:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011b38d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011b393:	29 d0                	sub    %edx,%eax
f011b395:	01 c3                	add    %eax,%ebx
f011b397:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011b39e:	10 00 00 
f011b3a1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b3a6:	0f b6 c0             	movzbl %al,%eax
f011b3a9:	c1 e0 04             	shl    $0x4,%eax
f011b3ac:	89 c2                	mov    %eax,%edx
f011b3ae:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011b3b4:	01 d0                	add    %edx,%eax
f011b3b6:	48                   	dec    %eax
f011b3b7:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011b3bd:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011b3c3:	ba 00 00 00 00       	mov    $0x0,%edx
f011b3c8:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011b3ce:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011b3d4:	29 d0                	sub    %edx,%eax
f011b3d6:	01 d8                	add    %ebx,%eax
f011b3d8:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011b3dd:	39 c1                	cmp    %eax,%ecx
f011b3df:	74 17                	je     f011b3f8 <test_kmalloc_bestfit2+0x6d6>
f011b3e1:	83 ec 04             	sub    $0x4,%esp
f011b3e4:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011b3e9:	68 70 02 00 00       	push   $0x270
f011b3ee:	68 da ac 13 f0       	push   $0xf013acda
f011b3f3:	e8 03 4e fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b3f8:	e8 3f 89 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b3fd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b400:	74 17                	je     f011b419 <test_kmalloc_bestfit2+0x6f7>
f011b402:	83 ec 04             	sub    $0x4,%esp
f011b405:	68 f4 ac 13 f0       	push   $0xf013acf4
f011b40a:	68 71 02 00 00       	push   $0x271
f011b40f:	68 da ac 13 f0       	push   $0xf013acda
f011b414:	e8 e2 4d fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f011b419:	e8 3d 15 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011b41e:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b421:	29 c2                	sub    %eax,%edx
f011b423:	89 d0                	mov    %edx,%eax
f011b425:	83 f8 02             	cmp    $0x2,%eax
f011b428:	74 17                	je     f011b441 <test_kmalloc_bestfit2+0x71f>
f011b42a:	83 ec 04             	sub    $0x4,%esp
f011b42d:	68 24 b1 13 f0       	push   $0xf013b124
f011b432:	68 72 02 00 00       	push   $0x272
f011b437:	68 da ac 13 f0       	push   $0xf013acda
f011b43c:	e8 ba 4d fe ff       	call   f01001fb <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b441:	e8 15 15 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011b446:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b449:	e8 ee 88 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b44e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011b451:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011b457:	83 ec 0c             	sub    $0xc,%esp
f011b45a:	50                   	push   %eax
f011b45b:	e8 60 c4 fe ff       	call   f01078c0 <kfree>
f011b460:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b463:	e8 d4 88 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b468:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b46b:	74 17                	je     f011b484 <test_kmalloc_bestfit2+0x762>
f011b46d:	83 ec 04             	sub    $0x4,%esp
f011b470:	68 f4 ac 13 f0       	push   $0xf013acf4
f011b475:	68 78 02 00 00       	push   $0x278
f011b47a:	68 da ac 13 f0       	push   $0xf013acda
f011b47f:	e8 77 4d fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f011b484:	e8 d2 14 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011b489:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011b48c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b491:	74 17                	je     f011b4aa <test_kmalloc_bestfit2+0x788>
f011b493:	83 ec 04             	sub    $0x4,%esp
f011b496:	68 a8 af 13 f0       	push   $0xf013afa8
f011b49b:	68 79 02 00 00       	push   $0x279
f011b4a0:	68 da ac 13 f0       	push   $0xf013acda
f011b4a5:	e8 51 4d fe ff       	call   f01001fb <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011b4aa:	e8 ac 14 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011b4af:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b4b2:	e8 85 88 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b4b7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011b4ba:	83 ec 0c             	sub    $0xc,%esp
f011b4bd:	68 00 fc 2f 00       	push   $0x2ffc00
f011b4c2:	e8 37 c3 fe ff       	call   f01077fe <kmalloc>
f011b4c7:	83 c4 10             	add    $0x10,%esp
f011b4ca:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011b4d0:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011b4d6:	89 c1                	mov    %eax,%ecx
f011b4d8:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011b4df:	10 00 00 
f011b4e2:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011b4e8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b4ed:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011b4f3:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011b4f9:	ba 00 00 00 00       	mov    $0x0,%edx
f011b4fe:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011b504:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011b50a:	29 d0                	sub    %edx,%eax
f011b50c:	89 c3                	mov    %eax,%ebx
f011b50e:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011b515:	10 00 00 
f011b518:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b51d:	0f b6 d0             	movzbl %al,%edx
f011b520:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011b526:	01 d0                	add    %edx,%eax
f011b528:	48                   	dec    %eax
f011b529:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011b52f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011b535:	ba 00 00 00 00       	mov    $0x0,%edx
f011b53a:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011b540:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011b546:	29 d0                	sub    %edx,%eax
f011b548:	01 c3                	add    %eax,%ebx
f011b54a:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011b551:	10 00 00 
f011b554:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b559:	0f b6 c0             	movzbl %al,%eax
f011b55c:	c1 e0 04             	shl    $0x4,%eax
f011b55f:	89 c2                	mov    %eax,%edx
f011b561:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011b567:	01 d0                	add    %edx,%eax
f011b569:	48                   	dec    %eax
f011b56a:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011b570:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011b576:	ba 00 00 00 00       	mov    $0x0,%edx
f011b57b:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011b581:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011b587:	29 d0                	sub    %edx,%eax
f011b589:	01 d8                	add    %ebx,%eax
f011b58b:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011b590:	39 c1                	cmp    %eax,%ecx
f011b592:	74 17                	je     f011b5ab <test_kmalloc_bestfit2+0x889>
f011b594:	83 ec 04             	sub    $0x4,%esp
f011b597:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011b59c:	68 7f 02 00 00       	push   $0x27f
f011b5a1:	68 da ac 13 f0       	push   $0xf013acda
f011b5a6:	e8 50 4c fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b5ab:	e8 8c 87 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b5b0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b5b3:	74 17                	je     f011b5cc <test_kmalloc_bestfit2+0x8aa>
f011b5b5:	83 ec 04             	sub    $0x4,%esp
f011b5b8:	68 f4 ac 13 f0       	push   $0xf013acf4
f011b5bd:	68 80 02 00 00       	push   $0x280
f011b5c2:	68 da ac 13 f0       	push   $0xf013acda
f011b5c7:	e8 2f 4c fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f011b5cc:	e8 8a 13 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011b5d1:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b5d4:	29 c2                	sub    %eax,%edx
f011b5d6:	89 d0                	mov    %edx,%eax
f011b5d8:	3d 00 03 00 00       	cmp    $0x300,%eax
f011b5dd:	74 17                	je     f011b5f6 <test_kmalloc_bestfit2+0x8d4>
f011b5df:	83 ec 04             	sub    $0x4,%esp
f011b5e2:	68 24 b1 13 f0       	push   $0xf013b124
f011b5e7:	68 81 02 00 00       	push   $0x281
f011b5ec:	68 da ac 13 f0       	push   $0xf013acda
f011b5f1:	e8 05 4c fe ff       	call   f01001fb <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011b5f6:	e8 60 13 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011b5fb:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b5fe:	e8 39 87 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b603:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011b606:	83 ec 0c             	sub    $0xc,%esp
f011b609:	68 00 18 20 00       	push   $0x201800
f011b60e:	e8 eb c1 fe ff       	call   f01077fe <kmalloc>
f011b613:	83 c4 10             	add    $0x10,%esp
f011b616:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011b61c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011b622:	89 c1                	mov    %eax,%ecx
f011b624:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011b62b:	10 00 00 
f011b62e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011b634:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b639:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011b63f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b645:	ba 00 00 00 00       	mov    $0x0,%edx
f011b64a:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011b650:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b656:	29 d0                	sub    %edx,%eax
f011b658:	89 c3                	mov    %eax,%ebx
f011b65a:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011b661:	10 00 00 
f011b664:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b669:	0f b6 d0             	movzbl %al,%edx
f011b66c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011b672:	01 d0                	add    %edx,%eax
f011b674:	48                   	dec    %eax
f011b675:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011b67b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b681:	ba 00 00 00 00       	mov    $0x0,%edx
f011b686:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011b68c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b692:	29 d0                	sub    %edx,%eax
f011b694:	01 c3                	add    %eax,%ebx
f011b696:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011b69d:	10 00 00 
f011b6a0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b6a5:	0f b6 c0             	movzbl %al,%eax
f011b6a8:	c1 e0 04             	shl    $0x4,%eax
f011b6ab:	89 c2                	mov    %eax,%edx
f011b6ad:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011b6b3:	01 d0                	add    %edx,%eax
f011b6b5:	48                   	dec    %eax
f011b6b6:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011b6bc:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b6c2:	ba 00 00 00 00       	mov    $0x0,%edx
f011b6c7:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011b6cd:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b6d3:	29 d0                	sub    %edx,%eax
f011b6d5:	01 d8                	add    %ebx,%eax
f011b6d7:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011b6dc:	39 c1                	cmp    %eax,%ecx
f011b6de:	74 17                	je     f011b6f7 <test_kmalloc_bestfit2+0x9d5>
f011b6e0:	83 ec 04             	sub    $0x4,%esp
f011b6e3:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011b6e8:	68 87 02 00 00       	push   $0x287
f011b6ed:	68 da ac 13 f0       	push   $0xf013acda
f011b6f2:	e8 04 4b fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b6f7:	e8 40 86 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b6fc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b6ff:	74 17                	je     f011b718 <test_kmalloc_bestfit2+0x9f6>
f011b701:	83 ec 04             	sub    $0x4,%esp
f011b704:	68 f4 ac 13 f0       	push   $0xf013acf4
f011b709:	68 88 02 00 00       	push   $0x288
f011b70e:	68 da ac 13 f0       	push   $0xf013acda
f011b713:	e8 e3 4a fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011b718:	e8 3e 12 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011b71d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b720:	29 c2                	sub    %eax,%edx
f011b722:	89 d0                	mov    %edx,%eax
f011b724:	3d 02 02 00 00       	cmp    $0x202,%eax
f011b729:	74 17                	je     f011b742 <test_kmalloc_bestfit2+0xa20>
f011b72b:	83 ec 04             	sub    $0x4,%esp
f011b72e:	68 24 b1 13 f0       	push   $0xf013b124
f011b733:	68 89 02 00 00       	push   $0x289
f011b738:	68 da ac 13 f0       	push   $0xf013acda
f011b73d:	e8 b9 4a fe ff       	call   f01001fb <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011b742:	e8 14 12 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011b747:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b74a:	e8 ed 85 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b74f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011b752:	83 ec 0c             	sub    $0xc,%esp
f011b755:	68 00 fc 4f 00       	push   $0x4ffc00
f011b75a:	e8 9f c0 fe ff       	call   f01077fe <kmalloc>
f011b75f:	83 c4 10             	add    $0x10,%esp
f011b762:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011b768:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011b76e:	89 c1                	mov    %eax,%ecx
f011b770:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011b777:	10 00 00 
f011b77a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011b780:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b785:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011b78b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b791:	ba 00 00 00 00       	mov    $0x0,%edx
f011b796:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011b79c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b7a2:	29 d0                	sub    %edx,%eax
f011b7a4:	89 c3                	mov    %eax,%ebx
f011b7a6:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011b7ad:	10 00 00 
f011b7b0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b7b5:	0f b6 d0             	movzbl %al,%edx
f011b7b8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011b7be:	01 d0                	add    %edx,%eax
f011b7c0:	48                   	dec    %eax
f011b7c1:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011b7c7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b7cd:	ba 00 00 00 00       	mov    $0x0,%edx
f011b7d2:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011b7d8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b7de:	29 d0                	sub    %edx,%eax
f011b7e0:	01 c3                	add    %eax,%ebx
f011b7e2:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011b7e9:	10 00 00 
f011b7ec:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b7f1:	0f b6 c0             	movzbl %al,%eax
f011b7f4:	c1 e0 04             	shl    $0x4,%eax
f011b7f7:	89 c2                	mov    %eax,%edx
f011b7f9:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011b7ff:	01 d0                	add    %edx,%eax
f011b801:	48                   	dec    %eax
f011b802:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011b808:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011b80e:	ba 00 00 00 00       	mov    $0x0,%edx
f011b813:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011b819:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011b81f:	29 d0                	sub    %edx,%eax
f011b821:	01 d8                	add    %ebx,%eax
f011b823:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011b828:	39 c1                	cmp    %eax,%ecx
f011b82a:	74 17                	je     f011b843 <test_kmalloc_bestfit2+0xb21>
f011b82c:	83 ec 04             	sub    $0x4,%esp
f011b82f:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011b834:	68 8f 02 00 00       	push   $0x28f
f011b839:	68 da ac 13 f0       	push   $0xf013acda
f011b83e:	e8 b8 49 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b843:	e8 f4 84 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b848:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b84b:	74 17                	je     f011b864 <test_kmalloc_bestfit2+0xb42>
f011b84d:	83 ec 04             	sub    $0x4,%esp
f011b850:	68 f4 ac 13 f0       	push   $0xf013acf4
f011b855:	68 90 02 00 00       	push   $0x290
f011b85a:	68 da ac 13 f0       	push   $0xf013acda
f011b85f:	e8 97 49 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011b864:	e8 f2 10 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011b869:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b86c:	29 c2                	sub    %eax,%edx
f011b86e:	89 d0                	mov    %edx,%eax
f011b870:	3d 00 05 00 00       	cmp    $0x500,%eax
f011b875:	74 17                	je     f011b88e <test_kmalloc_bestfit2+0xb6c>
f011b877:	83 ec 04             	sub    $0x4,%esp
f011b87a:	68 24 b1 13 f0       	push   $0xf013b124
f011b87f:	68 91 02 00 00       	push   $0x291
f011b884:	68 da ac 13 f0       	push   $0xf013acda
f011b889:	e8 6d 49 fe ff       	call   f01001fb <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b88e:	e8 c8 10 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011b893:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b896:	e8 a1 84 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b89b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f011b89e:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011b8a4:	83 ec 0c             	sub    $0xc,%esp
f011b8a7:	50                   	push   %eax
f011b8a8:	e8 13 c0 fe ff       	call   f01078c0 <kfree>
f011b8ad:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b8b0:	e8 87 84 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b8b5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b8b8:	74 17                	je     f011b8d1 <test_kmalloc_bestfit2+0xbaf>
f011b8ba:	83 ec 04             	sub    $0x4,%esp
f011b8bd:	68 f4 ac 13 f0       	push   $0xf013acf4
f011b8c2:	68 97 02 00 00       	push   $0x297
f011b8c7:	68 da ac 13 f0       	push   $0xf013acda
f011b8cc:	e8 2a 49 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f011b8d1:	e8 85 10 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011b8d6:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011b8d9:	3d 02 02 00 00       	cmp    $0x202,%eax
f011b8de:	74 17                	je     f011b8f7 <test_kmalloc_bestfit2+0xbd5>
f011b8e0:	83 ec 04             	sub    $0x4,%esp
f011b8e3:	68 a8 af 13 f0       	push   $0xf013afa8
f011b8e8:	68 98 02 00 00       	push   $0x298
f011b8ed:	68 da ac 13 f0       	push   $0xf013acda
f011b8f2:	e8 04 49 fe ff       	call   f01001fb <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b8f7:	e8 5f 10 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011b8fc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b8ff:	e8 38 84 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b904:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011b907:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011b90d:	83 ec 0c             	sub    $0xc,%esp
f011b910:	50                   	push   %eax
f011b911:	e8 aa bf fe ff       	call   f01078c0 <kfree>
f011b916:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b919:	e8 1e 84 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b91e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b921:	74 17                	je     f011b93a <test_kmalloc_bestfit2+0xc18>
f011b923:	83 ec 04             	sub    $0x4,%esp
f011b926:	68 f4 ac 13 f0       	push   $0xf013acf4
f011b92b:	68 9e 02 00 00       	push   $0x29e
f011b930:	68 da ac 13 f0       	push   $0xf013acda
f011b935:	e8 c1 48 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f011b93a:	e8 1c 10 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011b93f:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011b942:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b947:	74 17                	je     f011b960 <test_kmalloc_bestfit2+0xc3e>
f011b949:	83 ec 04             	sub    $0x4,%esp
f011b94c:	68 d4 b1 13 f0       	push   $0xf013b1d4
f011b951:	68 9f 02 00 00       	push   $0x29f
f011b956:	68 da ac 13 f0       	push   $0xf013acda
f011b95b:	e8 9b 48 fe ff       	call   f01001fb <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b960:	e8 f6 0f ff ff       	call   f010c95b <sys_calculate_free_frames>
f011b965:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b968:	e8 cf 83 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b96d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f011b970:	83 ec 0c             	sub    $0xc,%esp
f011b973:	68 00 fc 1f 00       	push   $0x1ffc00
f011b978:	e8 81 be fe ff       	call   f01077fe <kmalloc>
f011b97d:	83 c4 10             	add    $0x10,%esp
f011b980:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011b986:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011b98c:	89 c1                	mov    %eax,%ecx
f011b98e:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011b995:	10 00 00 
f011b998:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011b99e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b9a3:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011b9a9:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011b9af:	ba 00 00 00 00       	mov    $0x0,%edx
f011b9b4:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011b9ba:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011b9c0:	29 d0                	sub    %edx,%eax
f011b9c2:	89 c3                	mov    %eax,%ebx
f011b9c4:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011b9cb:	10 00 00 
f011b9ce:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b9d3:	0f b6 d0             	movzbl %al,%edx
f011b9d6:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011b9dc:	01 d0                	add    %edx,%eax
f011b9de:	48                   	dec    %eax
f011b9df:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011b9e5:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011b9eb:	ba 00 00 00 00       	mov    $0x0,%edx
f011b9f0:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011b9f6:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011b9fc:	29 d0                	sub    %edx,%eax
f011b9fe:	01 c3                	add    %eax,%ebx
f011ba00:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011ba07:	10 00 00 
f011ba0a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ba0f:	0f b6 c0             	movzbl %al,%eax
f011ba12:	c1 e0 04             	shl    $0x4,%eax
f011ba15:	89 c2                	mov    %eax,%edx
f011ba17:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011ba1d:	01 d0                	add    %edx,%eax
f011ba1f:	48                   	dec    %eax
f011ba20:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011ba26:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011ba2c:	ba 00 00 00 00       	mov    $0x0,%edx
f011ba31:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011ba37:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011ba3d:	29 d0                	sub    %edx,%eax
f011ba3f:	01 d8                	add    %ebx,%eax
f011ba41:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011ba46:	39 c1                	cmp    %eax,%ecx
f011ba48:	74 17                	je     f011ba61 <test_kmalloc_bestfit2+0xd3f>
f011ba4a:	83 ec 04             	sub    $0x4,%esp
f011ba4d:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011ba52:	68 a5 02 00 00       	push   $0x2a5
f011ba57:	68 da ac 13 f0       	push   $0xf013acda
f011ba5c:	e8 9a 47 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ba61:	e8 d6 82 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ba66:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ba69:	74 17                	je     f011ba82 <test_kmalloc_bestfit2+0xd60>
f011ba6b:	83 ec 04             	sub    $0x4,%esp
f011ba6e:	68 f4 ac 13 f0       	push   $0xf013acf4
f011ba73:	68 a6 02 00 00       	push   $0x2a6
f011ba78:	68 da ac 13 f0       	push   $0xf013acda
f011ba7d:	e8 79 47 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f011ba82:	e8 d4 0e ff ff       	call   f010c95b <sys_calculate_free_frames>
f011ba87:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ba8a:	29 c2                	sub    %eax,%edx
f011ba8c:	89 d0                	mov    %edx,%eax
f011ba8e:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ba93:	74 17                	je     f011baac <test_kmalloc_bestfit2+0xd8a>
f011ba95:	83 ec 04             	sub    $0x4,%esp
f011ba98:	68 12 b2 13 f0       	push   $0xf013b212
f011ba9d:	68 a7 02 00 00       	push   $0x2a7
f011baa2:	68 da ac 13 f0       	push   $0xf013acda
f011baa7:	e8 4f 47 fe ff       	call   f01001fb <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f011baac:	e8 aa 0e ff ff       	call   f010c95b <sys_calculate_free_frames>
f011bab1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bab4:	e8 83 82 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011bab9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f011babc:	83 ec 0c             	sub    $0xc,%esp
f011babf:	68 00 18 00 00       	push   $0x1800
f011bac4:	e8 35 bd fe ff       	call   f01077fe <kmalloc>
f011bac9:	83 c4 10             	add    $0x10,%esp
f011bacc:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011bad2:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011bad8:	89 c1                	mov    %eax,%ecx
f011bada:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011bae1:	10 00 00 
f011bae4:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011baea:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011baef:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011baf5:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011bafb:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb00:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011bb06:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011bb0c:	29 d0                	sub    %edx,%eax
f011bb0e:	89 c3                	mov    %eax,%ebx
f011bb10:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011bb17:	10 00 00 
f011bb1a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011bb1f:	0f b6 d0             	movzbl %al,%edx
f011bb22:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011bb28:	01 d0                	add    %edx,%eax
f011bb2a:	48                   	dec    %eax
f011bb2b:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011bb31:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011bb37:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb3c:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011bb42:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011bb48:	29 d0                	sub    %edx,%eax
f011bb4a:	01 c3                	add    %eax,%ebx
f011bb4c:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011bb53:	10 00 00 
f011bb56:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011bb5b:	0f b6 c0             	movzbl %al,%eax
f011bb5e:	c1 e0 04             	shl    $0x4,%eax
f011bb61:	89 c2                	mov    %eax,%edx
f011bb63:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011bb69:	01 d0                	add    %edx,%eax
f011bb6b:	48                   	dec    %eax
f011bb6c:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011bb72:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011bb78:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb7d:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011bb83:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011bb89:	29 d0                	sub    %edx,%eax
f011bb8b:	01 d8                	add    %ebx,%eax
f011bb8d:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f011bb92:	39 c1                	cmp    %eax,%ecx
f011bb94:	74 17                	je     f011bbad <test_kmalloc_bestfit2+0xe8b>
f011bb96:	83 ec 04             	sub    $0x4,%esp
f011bb99:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011bb9e:	68 ad 02 00 00       	push   $0x2ad
f011bba3:	68 da ac 13 f0       	push   $0xf013acda
f011bba8:	e8 4e 46 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bbad:	e8 8a 81 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011bbb2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bbb5:	74 17                	je     f011bbce <test_kmalloc_bestfit2+0xeac>
f011bbb7:	83 ec 04             	sub    $0x4,%esp
f011bbba:	68 f4 ac 13 f0       	push   $0xf013acf4
f011bbbf:	68 ae 02 00 00       	push   $0x2ae
f011bbc4:	68 da ac 13 f0       	push   $0xf013acda
f011bbc9:	e8 2d 46 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f011bbce:	e8 88 0d ff ff       	call   f010c95b <sys_calculate_free_frames>
f011bbd3:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bbd6:	29 c2                	sub    %eax,%edx
f011bbd8:	89 d0                	mov    %edx,%eax
f011bbda:	83 f8 02             	cmp    $0x2,%eax
f011bbdd:	74 17                	je     f011bbf6 <test_kmalloc_bestfit2+0xed4>
f011bbdf:	83 ec 04             	sub    $0x4,%esp
f011bbe2:	68 12 b2 13 f0       	push   $0xf013b212
f011bbe7:	68 af 02 00 00       	push   $0x2af
f011bbec:	68 da ac 13 f0       	push   $0xf013acda
f011bbf1:	e8 05 46 fe ff       	call   f01001fb <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bbf6:	e8 60 0d ff ff       	call   f010c95b <sys_calculate_free_frames>
f011bbfb:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bbfe:	e8 39 81 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011bc03:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011bc06:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011bc0c:	83 ec 0c             	sub    $0xc,%esp
f011bc0f:	50                   	push   %eax
f011bc10:	e8 ab bc fe ff       	call   f01078c0 <kfree>
f011bc15:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bc18:	e8 1f 81 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011bc1d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bc20:	74 17                	je     f011bc39 <test_kmalloc_bestfit2+0xf17>
f011bc22:	83 ec 04             	sub    $0x4,%esp
f011bc25:	68 f4 ac 13 f0       	push   $0xf013acf4
f011bc2a:	68 b5 02 00 00       	push   $0x2b5
f011bc2f:	68 da ac 13 f0       	push   $0xf013acda
f011bc34:	e8 c2 45 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f011bc39:	e8 1d 0d ff ff       	call   f010c95b <sys_calculate_free_frames>
f011bc3e:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011bc41:	3d 00 03 00 00       	cmp    $0x300,%eax
f011bc46:	74 17                	je     f011bc5f <test_kmalloc_bestfit2+0xf3d>
f011bc48:	83 ec 04             	sub    $0x4,%esp
f011bc4b:	68 d4 b1 13 f0       	push   $0xf013b1d4
f011bc50:	68 b6 02 00 00       	push   $0x2b6
f011bc55:	68 da ac 13 f0       	push   $0xf013acda
f011bc5a:	e8 9c 45 fe ff       	call   f01001fb <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011bc5f:	e8 f7 0c ff ff       	call   f010c95b <sys_calculate_free_frames>
f011bc64:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bc67:	e8 d0 80 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011bc6c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f011bc6f:	83 ec 0c             	sub    $0xc,%esp
f011bc72:	68 00 fc 2f 00       	push   $0x2ffc00
f011bc77:	e8 82 bb fe ff       	call   f01077fe <kmalloc>
f011bc7c:	83 c4 10             	add    $0x10,%esp
f011bc7f:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011bc85:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011bc8b:	89 c1                	mov    %eax,%ecx
f011bc8d:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011bc94:	10 00 00 
f011bc97:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011bc9d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bca2:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011bca8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011bcae:	ba 00 00 00 00       	mov    $0x0,%edx
f011bcb3:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011bcb9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011bcbf:	29 d0                	sub    %edx,%eax
f011bcc1:	89 c3                	mov    %eax,%ebx
f011bcc3:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011bcca:	10 00 00 
f011bccd:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011bcd2:	0f b6 d0             	movzbl %al,%edx
f011bcd5:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011bcdb:	01 d0                	add    %edx,%eax
f011bcdd:	48                   	dec    %eax
f011bcde:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011bce4:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011bcea:	ba 00 00 00 00       	mov    $0x0,%edx
f011bcef:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011bcf5:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011bcfb:	29 d0                	sub    %edx,%eax
f011bcfd:	01 c3                	add    %eax,%ebx
f011bcff:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011bd06:	10 00 00 
f011bd09:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011bd0e:	0f b6 c0             	movzbl %al,%eax
f011bd11:	c1 e0 04             	shl    $0x4,%eax
f011bd14:	89 c2                	mov    %eax,%edx
f011bd16:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011bd1c:	01 d0                	add    %edx,%eax
f011bd1e:	48                   	dec    %eax
f011bd1f:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011bd25:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011bd2b:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd30:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011bd36:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011bd3c:	29 d0                	sub    %edx,%eax
f011bd3e:	01 d8                	add    %ebx,%eax
f011bd40:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011bd45:	39 c1                	cmp    %eax,%ecx
f011bd47:	74 17                	je     f011bd60 <test_kmalloc_bestfit2+0x103e>
f011bd49:	83 ec 04             	sub    $0x4,%esp
f011bd4c:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011bd51:	68 bc 02 00 00       	push   $0x2bc
f011bd56:	68 da ac 13 f0       	push   $0xf013acda
f011bd5b:	e8 9b 44 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bd60:	e8 d7 7f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011bd65:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bd68:	74 17                	je     f011bd81 <test_kmalloc_bestfit2+0x105f>
f011bd6a:	83 ec 04             	sub    $0x4,%esp
f011bd6d:	68 f4 ac 13 f0       	push   $0xf013acf4
f011bd72:	68 bd 02 00 00       	push   $0x2bd
f011bd77:	68 da ac 13 f0       	push   $0xf013acda
f011bd7c:	e8 7a 44 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011bd81:	e8 d5 0b ff ff       	call   f010c95b <sys_calculate_free_frames>
f011bd86:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bd89:	29 c2                	sub    %eax,%edx
f011bd8b:	89 d0                	mov    %edx,%eax
f011bd8d:	3d 00 03 00 00       	cmp    $0x300,%eax
f011bd92:	74 17                	je     f011bdab <test_kmalloc_bestfit2+0x1089>
f011bd94:	83 ec 04             	sub    $0x4,%esp
f011bd97:	68 d4 b1 13 f0       	push   $0xf013b1d4
f011bd9c:	68 be 02 00 00       	push   $0x2be
f011bda1:	68 da ac 13 f0       	push   $0xf013acda
f011bda6:	e8 50 44 fe ff       	call   f01001fb <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f011bdab:	e8 ab 0b ff ff       	call   f010c95b <sys_calculate_free_frames>
f011bdb0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bdb3:	e8 84 7f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011bdb8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f011bdbb:	83 ec 0c             	sub    $0xc,%esp
f011bdbe:	68 00 fc 3f 00       	push   $0x3ffc00
f011bdc3:	e8 36 ba fe ff       	call   f01077fe <kmalloc>
f011bdc8:	83 c4 10             	add    $0x10,%esp
f011bdcb:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011bdd1:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011bdd7:	89 c1                	mov    %eax,%ecx
f011bdd9:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011bde0:	10 00 00 
f011bde3:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011bde9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bdee:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011bdf4:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011bdfa:	ba 00 00 00 00       	mov    $0x0,%edx
f011bdff:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011be05:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011be0b:	29 d0                	sub    %edx,%eax
f011be0d:	89 c3                	mov    %eax,%ebx
f011be0f:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011be16:	10 00 00 
f011be19:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011be1e:	0f b6 d0             	movzbl %al,%edx
f011be21:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011be27:	01 d0                	add    %edx,%eax
f011be29:	48                   	dec    %eax
f011be2a:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011be30:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011be36:	ba 00 00 00 00       	mov    $0x0,%edx
f011be3b:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011be41:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011be47:	29 d0                	sub    %edx,%eax
f011be49:	01 c3                	add    %eax,%ebx
f011be4b:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011be52:	10 00 00 
f011be55:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011be5a:	0f b6 c0             	movzbl %al,%eax
f011be5d:	c1 e0 04             	shl    $0x4,%eax
f011be60:	89 c2                	mov    %eax,%edx
f011be62:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011be68:	01 d0                	add    %edx,%eax
f011be6a:	48                   	dec    %eax
f011be6b:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011be71:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011be77:	ba 00 00 00 00       	mov    $0x0,%edx
f011be7c:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011be82:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011be88:	29 d0                	sub    %edx,%eax
f011be8a:	01 d8                	add    %ebx,%eax
f011be8c:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011be91:	39 c1                	cmp    %eax,%ecx
f011be93:	74 17                	je     f011beac <test_kmalloc_bestfit2+0x118a>
f011be95:	83 ec 04             	sub    $0x4,%esp
f011be98:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011be9d:	68 c4 02 00 00       	push   $0x2c4
f011bea2:	68 da ac 13 f0       	push   $0xf013acda
f011bea7:	e8 4f 43 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011beac:	e8 8b 7e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011beb1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011beb4:	74 17                	je     f011becd <test_kmalloc_bestfit2+0x11ab>
f011beb6:	83 ec 04             	sub    $0x4,%esp
f011beb9:	68 f4 ac 13 f0       	push   $0xf013acf4
f011bebe:	68 c5 02 00 00       	push   $0x2c5
f011bec3:	68 da ac 13 f0       	push   $0xf013acda
f011bec8:	e8 2e 43 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011becd:	e8 89 0a ff ff       	call   f010c95b <sys_calculate_free_frames>
f011bed2:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bed5:	29 c2                	sub    %eax,%edx
f011bed7:	89 d0                	mov    %edx,%eax
f011bed9:	3d 00 04 00 00       	cmp    $0x400,%eax
f011bede:	74 17                	je     f011bef7 <test_kmalloc_bestfit2+0x11d5>
f011bee0:	83 ec 04             	sub    $0x4,%esp
f011bee3:	68 d4 b1 13 f0       	push   $0xf013b1d4
f011bee8:	68 c6 02 00 00       	push   $0x2c6
f011beed:	68 da ac 13 f0       	push   $0xf013acda
f011bef2:	e8 04 43 fe ff       	call   f01001fb <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011bef7:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011befe:	10 00 00 
f011bf01:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011bf07:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bf0c:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011bf12:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011bf18:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf1d:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011bf23:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011bf29:	29 d0                	sub    %edx,%eax
f011bf2b:	89 c1                	mov    %eax,%ecx
f011bf2d:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011bf34:	10 00 00 
f011bf37:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011bf3c:	0f b6 d0             	movzbl %al,%edx
f011bf3f:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011bf45:	01 d0                	add    %edx,%eax
f011bf47:	48                   	dec    %eax
f011bf48:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011bf4e:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011bf54:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf59:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011bf5f:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011bf65:	29 d0                	sub    %edx,%eax
f011bf67:	01 c1                	add    %eax,%ecx
f011bf69:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011bf70:	10 00 00 
f011bf73:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011bf78:	0f b6 c0             	movzbl %al,%eax
f011bf7b:	c1 e0 04             	shl    $0x4,%eax
f011bf7e:	89 c2                	mov    %eax,%edx
f011bf80:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011bf86:	01 d0                	add    %edx,%eax
f011bf88:	48                   	dec    %eax
f011bf89:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011bf8f:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011bf95:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf9a:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011bfa0:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011bfa6:	29 d0                	sub    %edx,%eax
f011bfa8:	01 c8                	add    %ecx,%eax
f011bfaa:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011bfaf:	29 c2                	sub    %eax,%edx
f011bfb1:	89 d0                	mov    %edx,%eax
f011bfb3:	83 ec 0c             	sub    $0xc,%esp
f011bfb6:	50                   	push   %eax
f011bfb7:	e8 42 b8 fe ff       	call   f01077fe <kmalloc>
f011bfbc:	83 c4 10             	add    $0x10,%esp
f011bfbf:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011bfc5:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011bfcb:	85 c0                	test   %eax,%eax
f011bfcd:	74 17                	je     f011bfe6 <test_kmalloc_bestfit2+0x12c4>
f011bfcf:	83 ec 04             	sub    $0x4,%esp
f011bfd2:	68 24 b2 13 f0       	push   $0xf013b224
f011bfd7:	68 ce 02 00 00       	push   $0x2ce
f011bfdc:	68 da ac 13 f0       	push   $0xf013acda
f011bfe1:	e8 15 42 fe ff       	call   f01001fb <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f011bfe6:	83 ec 0c             	sub    $0xc,%esp
f011bfe9:	68 88 b2 13 f0       	push   $0xf013b288
f011bfee:	e8 8f 4c fe ff       	call   f0100c82 <cprintf>
f011bff3:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011bff6:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011bffb:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011bffe:	5b                   	pop    %ebx
f011bfff:	5f                   	pop    %edi
f011c000:	5d                   	pop    %ebp
f011c001:	c3                   	ret    

f011c002 <test_kmalloc_firstfit1>:

int test_kmalloc_firstfit1()
{
f011c002:	55                   	push   %ebp
f011c003:	89 e5                	mov    %esp,%ebp
f011c005:	57                   	push   %edi
f011c006:	53                   	push   %ebx
f011c007:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011c00d:	83 ec 0c             	sub    $0xc,%esp
f011c010:	68 1c ac 13 f0       	push   $0xf013ac1c
f011c015:	e8 68 4c fe ff       	call   f0100c82 <cprintf>
f011c01a:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011c01d:	83 ec 0c             	sub    $0xc,%esp
f011c020:	68 4c ac 13 f0       	push   $0xf013ac4c
f011c025:	e8 58 4c fe ff       	call   f0100c82 <cprintf>
f011c02a:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011c02d:	83 ec 0c             	sub    $0xc,%esp
f011c030:	68 1c ac 13 f0       	push   $0xf013ac1c
f011c035:	e8 48 4c fe ff       	call   f0100c82 <cprintf>
f011c03a:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011c03d:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011c043:	b9 14 00 00 00       	mov    $0x14,%ecx
f011c048:	b8 00 00 00 00       	mov    $0x0,%eax
f011c04d:	89 d7                	mov    %edx,%edi
f011c04f:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c051:	e8 05 09 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011c056:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c059:	e8 de 7c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c05e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f011c061:	83 ec 0c             	sub    $0xc,%esp
f011c064:	68 00 fc 0f 00       	push   $0xffc00
f011c069:	e8 90 b7 fe ff       	call   f01077fe <kmalloc>
f011c06e:	83 c4 10             	add    $0x10,%esp
f011c071:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011c077:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011c07d:	89 c1                	mov    %eax,%ecx
f011c07f:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011c086:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011c089:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c08e:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011c091:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c094:	ba 00 00 00 00       	mov    $0x0,%edx
f011c099:	f7 75 ec             	divl   -0x14(%ebp)
f011c09c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c09f:	29 d0                	sub    %edx,%eax
f011c0a1:	89 c3                	mov    %eax,%ebx
f011c0a3:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011c0aa:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c0af:	0f b6 d0             	movzbl %al,%edx
f011c0b2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011c0b5:	01 d0                	add    %edx,%eax
f011c0b7:	48                   	dec    %eax
f011c0b8:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011c0bb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c0be:	ba 00 00 00 00       	mov    $0x0,%edx
f011c0c3:	f7 75 e4             	divl   -0x1c(%ebp)
f011c0c6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c0c9:	29 d0                	sub    %edx,%eax
f011c0cb:	01 c3                	add    %eax,%ebx
f011c0cd:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011c0d4:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c0d9:	0f b6 c0             	movzbl %al,%eax
f011c0dc:	c1 e0 04             	shl    $0x4,%eax
f011c0df:	89 c2                	mov    %eax,%edx
f011c0e1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011c0e4:	01 d0                	add    %edx,%eax
f011c0e6:	48                   	dec    %eax
f011c0e7:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011c0ea:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011c0ed:	ba 00 00 00 00       	mov    $0x0,%edx
f011c0f2:	f7 75 dc             	divl   -0x24(%ebp)
f011c0f5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011c0f8:	29 d0                	sub    %edx,%eax
f011c0fa:	01 d8                	add    %ebx,%eax
f011c0fc:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011c101:	39 c1                	cmp    %eax,%ecx
f011c103:	74 17                	je     f011c11c <test_kmalloc_firstfit1+0x11a>
f011c105:	83 ec 04             	sub    $0x4,%esp
f011c108:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011c10d:	68 e6 02 00 00       	push   $0x2e6
f011c112:	68 da ac 13 f0       	push   $0xf013acda
f011c117:	e8 df 40 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c11c:	e8 1b 7c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c121:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c124:	74 17                	je     f011c13d <test_kmalloc_firstfit1+0x13b>
f011c126:	83 ec 04             	sub    $0x4,%esp
f011c129:	68 f4 ac 13 f0       	push   $0xf013acf4
f011c12e:	68 e7 02 00 00       	push   $0x2e7
f011c133:	68 da ac 13 f0       	push   $0xf013acda
f011c138:	e8 be 40 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c13d:	e8 19 08 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011c142:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c145:	29 c2                	sub    %eax,%edx
f011c147:	89 d0                	mov    %edx,%eax
f011c149:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c14e:	74 17                	je     f011c167 <test_kmalloc_firstfit1+0x165>
f011c150:	83 ec 04             	sub    $0x4,%esp
f011c153:	68 24 b1 13 f0       	push   $0xf013b124
f011c158:	68 e8 02 00 00       	push   $0x2e8
f011c15d:	68 da ac 13 f0       	push   $0xf013acda
f011c162:	e8 94 40 fe ff       	call   f01001fb <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c167:	e8 ef 07 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011c16c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c16f:	e8 c8 7b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c174:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f011c177:	83 ec 0c             	sub    $0xc,%esp
f011c17a:	68 00 fc 0f 00       	push   $0xffc00
f011c17f:	e8 7a b6 fe ff       	call   f01077fe <kmalloc>
f011c184:	83 c4 10             	add    $0x10,%esp
f011c187:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011c18d:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011c193:	89 c1                	mov    %eax,%ecx
f011c195:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011c19c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011c19f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c1a4:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011c1a7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011c1aa:	ba 00 00 00 00       	mov    $0x0,%edx
f011c1af:	f7 75 d4             	divl   -0x2c(%ebp)
f011c1b2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011c1b5:	29 d0                	sub    %edx,%eax
f011c1b7:	89 c3                	mov    %eax,%ebx
f011c1b9:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011c1c0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c1c5:	0f b6 d0             	movzbl %al,%edx
f011c1c8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011c1cb:	01 d0                	add    %edx,%eax
f011c1cd:	48                   	dec    %eax
f011c1ce:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011c1d1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011c1d4:	ba 00 00 00 00       	mov    $0x0,%edx
f011c1d9:	f7 75 cc             	divl   -0x34(%ebp)
f011c1dc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011c1df:	29 d0                	sub    %edx,%eax
f011c1e1:	01 c3                	add    %eax,%ebx
f011c1e3:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011c1ea:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c1ef:	0f b6 c0             	movzbl %al,%eax
f011c1f2:	c1 e0 04             	shl    $0x4,%eax
f011c1f5:	89 c2                	mov    %eax,%edx
f011c1f7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011c1fa:	01 d0                	add    %edx,%eax
f011c1fc:	48                   	dec    %eax
f011c1fd:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011c200:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c203:	ba 00 00 00 00       	mov    $0x0,%edx
f011c208:	f7 75 c4             	divl   -0x3c(%ebp)
f011c20b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c20e:	29 d0                	sub    %edx,%eax
f011c210:	01 d8                	add    %ebx,%eax
f011c212:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011c217:	39 c1                	cmp    %eax,%ecx
f011c219:	74 17                	je     f011c232 <test_kmalloc_firstfit1+0x230>
f011c21b:	83 ec 04             	sub    $0x4,%esp
f011c21e:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011c223:	68 ee 02 00 00       	push   $0x2ee
f011c228:	68 da ac 13 f0       	push   $0xf013acda
f011c22d:	e8 c9 3f fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c232:	e8 05 7b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c237:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c23a:	74 17                	je     f011c253 <test_kmalloc_firstfit1+0x251>
f011c23c:	83 ec 04             	sub    $0x4,%esp
f011c23f:	68 f4 ac 13 f0       	push   $0xf013acf4
f011c244:	68 ef 02 00 00       	push   $0x2ef
f011c249:	68 da ac 13 f0       	push   $0xf013acda
f011c24e:	e8 a8 3f fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c253:	e8 03 07 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011c258:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c25b:	29 c2                	sub    %eax,%edx
f011c25d:	89 d0                	mov    %edx,%eax
f011c25f:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c264:	74 17                	je     f011c27d <test_kmalloc_firstfit1+0x27b>
f011c266:	83 ec 04             	sub    $0x4,%esp
f011c269:	68 24 b1 13 f0       	push   $0xf013b124
f011c26e:	68 f0 02 00 00       	push   $0x2f0
f011c273:	68 da ac 13 f0       	push   $0xf013acda
f011c278:	e8 7e 3f fe ff       	call   f01001fb <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c27d:	e8 d9 06 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011c282:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c285:	e8 b2 7a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c28a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f011c28d:	83 ec 0c             	sub    $0xc,%esp
f011c290:	68 00 fc 0f 00       	push   $0xffc00
f011c295:	e8 64 b5 fe ff       	call   f01077fe <kmalloc>
f011c29a:	83 c4 10             	add    $0x10,%esp
f011c29d:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011c2a3:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011c2a9:	89 c1                	mov    %eax,%ecx
f011c2ab:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011c2b2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011c2b5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c2ba:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011c2bd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c2c0:	ba 00 00 00 00       	mov    $0x0,%edx
f011c2c5:	f7 75 bc             	divl   -0x44(%ebp)
f011c2c8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c2cb:	29 d0                	sub    %edx,%eax
f011c2cd:	89 c3                	mov    %eax,%ebx
f011c2cf:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011c2d6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c2db:	0f b6 d0             	movzbl %al,%edx
f011c2de:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011c2e1:	01 d0                	add    %edx,%eax
f011c2e3:	48                   	dec    %eax
f011c2e4:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011c2e7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011c2ea:	ba 00 00 00 00       	mov    $0x0,%edx
f011c2ef:	f7 75 b4             	divl   -0x4c(%ebp)
f011c2f2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011c2f5:	29 d0                	sub    %edx,%eax
f011c2f7:	01 c3                	add    %eax,%ebx
f011c2f9:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011c300:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c305:	0f b6 c0             	movzbl %al,%eax
f011c308:	c1 e0 04             	shl    $0x4,%eax
f011c30b:	89 c2                	mov    %eax,%edx
f011c30d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011c310:	01 d0                	add    %edx,%eax
f011c312:	48                   	dec    %eax
f011c313:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011c316:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011c319:	ba 00 00 00 00       	mov    $0x0,%edx
f011c31e:	f7 75 ac             	divl   -0x54(%ebp)
f011c321:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011c324:	29 d0                	sub    %edx,%eax
f011c326:	01 d8                	add    %ebx,%eax
f011c328:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011c32d:	39 c1                	cmp    %eax,%ecx
f011c32f:	74 17                	je     f011c348 <test_kmalloc_firstfit1+0x346>
f011c331:	83 ec 04             	sub    $0x4,%esp
f011c334:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011c339:	68 f6 02 00 00       	push   $0x2f6
f011c33e:	68 da ac 13 f0       	push   $0xf013acda
f011c343:	e8 b3 3e fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c348:	e8 ef 79 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c34d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c350:	74 17                	je     f011c369 <test_kmalloc_firstfit1+0x367>
f011c352:	83 ec 04             	sub    $0x4,%esp
f011c355:	68 f4 ac 13 f0       	push   $0xf013acf4
f011c35a:	68 f7 02 00 00       	push   $0x2f7
f011c35f:	68 da ac 13 f0       	push   $0xf013acda
f011c364:	e8 92 3e fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c369:	e8 ed 05 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011c36e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c371:	29 c2                	sub    %eax,%edx
f011c373:	89 d0                	mov    %edx,%eax
f011c375:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c37a:	74 17                	je     f011c393 <test_kmalloc_firstfit1+0x391>
f011c37c:	83 ec 04             	sub    $0x4,%esp
f011c37f:	68 24 b1 13 f0       	push   $0xf013b124
f011c384:	68 f8 02 00 00       	push   $0x2f8
f011c389:	68 da ac 13 f0       	push   $0xf013acda
f011c38e:	e8 68 3e fe ff       	call   f01001fb <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c393:	e8 c3 05 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011c398:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c39b:	e8 9c 79 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c3a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f011c3a3:	83 ec 0c             	sub    $0xc,%esp
f011c3a6:	68 00 fc 0f 00       	push   $0xffc00
f011c3ab:	e8 4e b4 fe ff       	call   f01077fe <kmalloc>
f011c3b0:	83 c4 10             	add    $0x10,%esp
f011c3b3:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011c3b9:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011c3bf:	89 c1                	mov    %eax,%ecx
f011c3c1:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011c3c8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011c3cb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c3d0:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011c3d3:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011c3d6:	ba 00 00 00 00       	mov    $0x0,%edx
f011c3db:	f7 75 a4             	divl   -0x5c(%ebp)
f011c3de:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011c3e1:	29 d0                	sub    %edx,%eax
f011c3e3:	89 c3                	mov    %eax,%ebx
f011c3e5:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011c3ec:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c3f1:	0f b6 d0             	movzbl %al,%edx
f011c3f4:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011c3f7:	01 d0                	add    %edx,%eax
f011c3f9:	48                   	dec    %eax
f011c3fa:	89 45 98             	mov    %eax,-0x68(%ebp)
f011c3fd:	8b 45 98             	mov    -0x68(%ebp),%eax
f011c400:	ba 00 00 00 00       	mov    $0x0,%edx
f011c405:	f7 75 9c             	divl   -0x64(%ebp)
f011c408:	8b 45 98             	mov    -0x68(%ebp),%eax
f011c40b:	29 d0                	sub    %edx,%eax
f011c40d:	01 c3                	add    %eax,%ebx
f011c40f:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011c416:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c41b:	0f b6 c0             	movzbl %al,%eax
f011c41e:	c1 e0 04             	shl    $0x4,%eax
f011c421:	89 c2                	mov    %eax,%edx
f011c423:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011c426:	01 d0                	add    %edx,%eax
f011c428:	48                   	dec    %eax
f011c429:	89 45 90             	mov    %eax,-0x70(%ebp)
f011c42c:	8b 45 90             	mov    -0x70(%ebp),%eax
f011c42f:	ba 00 00 00 00       	mov    $0x0,%edx
f011c434:	f7 75 94             	divl   -0x6c(%ebp)
f011c437:	8b 45 90             	mov    -0x70(%ebp),%eax
f011c43a:	29 d0                	sub    %edx,%eax
f011c43c:	01 d8                	add    %ebx,%eax
f011c43e:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011c443:	39 c1                	cmp    %eax,%ecx
f011c445:	74 17                	je     f011c45e <test_kmalloc_firstfit1+0x45c>
f011c447:	83 ec 04             	sub    $0x4,%esp
f011c44a:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011c44f:	68 fe 02 00 00       	push   $0x2fe
f011c454:	68 da ac 13 f0       	push   $0xf013acda
f011c459:	e8 9d 3d fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c45e:	e8 d9 78 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c463:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c466:	74 17                	je     f011c47f <test_kmalloc_firstfit1+0x47d>
f011c468:	83 ec 04             	sub    $0x4,%esp
f011c46b:	68 f4 ac 13 f0       	push   $0xf013acf4
f011c470:	68 ff 02 00 00       	push   $0x2ff
f011c475:	68 da ac 13 f0       	push   $0xf013acda
f011c47a:	e8 7c 3d fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c47f:	e8 d7 04 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011c484:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c487:	29 c2                	sub    %eax,%edx
f011c489:	89 d0                	mov    %edx,%eax
f011c48b:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c490:	74 17                	je     f011c4a9 <test_kmalloc_firstfit1+0x4a7>
f011c492:	83 ec 04             	sub    $0x4,%esp
f011c495:	68 24 b1 13 f0       	push   $0xf013b124
f011c49a:	68 00 03 00 00       	push   $0x300
f011c49f:	68 da ac 13 f0       	push   $0xf013acda
f011c4a4:	e8 52 3d fe ff       	call   f01001fb <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c4a9:	e8 ad 04 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011c4ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c4b1:	e8 86 78 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c4b6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f011c4b9:	83 ec 0c             	sub    $0xc,%esp
f011c4bc:	68 00 fc 1f 00       	push   $0x1ffc00
f011c4c1:	e8 38 b3 fe ff       	call   f01077fe <kmalloc>
f011c4c6:	83 c4 10             	add    $0x10,%esp
f011c4c9:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011c4cf:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011c4d5:	89 c1                	mov    %eax,%ecx
f011c4d7:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011c4de:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011c4e1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c4e6:	89 45 88             	mov    %eax,-0x78(%ebp)
f011c4e9:	8b 45 88             	mov    -0x78(%ebp),%eax
f011c4ec:	ba 00 00 00 00       	mov    $0x0,%edx
f011c4f1:	f7 75 8c             	divl   -0x74(%ebp)
f011c4f4:	8b 45 88             	mov    -0x78(%ebp),%eax
f011c4f7:	29 d0                	sub    %edx,%eax
f011c4f9:	89 c3                	mov    %eax,%ebx
f011c4fb:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011c502:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c507:	0f b6 d0             	movzbl %al,%edx
f011c50a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011c50d:	01 d0                	add    %edx,%eax
f011c50f:	48                   	dec    %eax
f011c510:	89 45 80             	mov    %eax,-0x80(%ebp)
f011c513:	8b 45 80             	mov    -0x80(%ebp),%eax
f011c516:	ba 00 00 00 00       	mov    $0x0,%edx
f011c51b:	f7 75 84             	divl   -0x7c(%ebp)
f011c51e:	8b 45 80             	mov    -0x80(%ebp),%eax
f011c521:	29 d0                	sub    %edx,%eax
f011c523:	01 c3                	add    %eax,%ebx
f011c525:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011c52c:	10 00 00 
f011c52f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c534:	0f b6 c0             	movzbl %al,%eax
f011c537:	c1 e0 04             	shl    $0x4,%eax
f011c53a:	89 c2                	mov    %eax,%edx
f011c53c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011c542:	01 d0                	add    %edx,%eax
f011c544:	48                   	dec    %eax
f011c545:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011c54b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011c551:	ba 00 00 00 00       	mov    $0x0,%edx
f011c556:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011c55c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011c562:	29 d0                	sub    %edx,%eax
f011c564:	01 d8                	add    %ebx,%eax
f011c566:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011c56b:	39 c1                	cmp    %eax,%ecx
f011c56d:	74 17                	je     f011c586 <test_kmalloc_firstfit1+0x584>
f011c56f:	83 ec 04             	sub    $0x4,%esp
f011c572:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011c577:	68 06 03 00 00       	push   $0x306
f011c57c:	68 da ac 13 f0       	push   $0xf013acda
f011c581:	e8 75 3c fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c586:	e8 b1 77 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c58b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c58e:	74 17                	je     f011c5a7 <test_kmalloc_firstfit1+0x5a5>
f011c590:	83 ec 04             	sub    $0x4,%esp
f011c593:	68 f4 ac 13 f0       	push   $0xf013acf4
f011c598:	68 07 03 00 00       	push   $0x307
f011c59d:	68 da ac 13 f0       	push   $0xf013acda
f011c5a2:	e8 54 3c fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011c5a7:	e8 af 03 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011c5ac:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c5af:	29 c2                	sub    %eax,%edx
f011c5b1:	89 d0                	mov    %edx,%eax
f011c5b3:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c5b8:	74 17                	je     f011c5d1 <test_kmalloc_firstfit1+0x5cf>
f011c5ba:	83 ec 04             	sub    $0x4,%esp
f011c5bd:	68 24 b1 13 f0       	push   $0xf013b124
f011c5c2:	68 08 03 00 00       	push   $0x308
f011c5c7:	68 da ac 13 f0       	push   $0xf013acda
f011c5cc:	e8 2a 3c fe ff       	call   f01001fb <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c5d1:	e8 85 03 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011c5d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c5d9:	e8 5e 77 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c5de:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f011c5e1:	83 ec 0c             	sub    $0xc,%esp
f011c5e4:	68 00 fc 1f 00       	push   $0x1ffc00
f011c5e9:	e8 10 b2 fe ff       	call   f01077fe <kmalloc>
f011c5ee:	83 c4 10             	add    $0x10,%esp
f011c5f1:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011c5f7:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011c5fd:	89 c1                	mov    %eax,%ecx
f011c5ff:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011c606:	10 00 00 
f011c609:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011c60f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c614:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011c61a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011c620:	ba 00 00 00 00       	mov    $0x0,%edx
f011c625:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011c62b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011c631:	29 d0                	sub    %edx,%eax
f011c633:	89 c3                	mov    %eax,%ebx
f011c635:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011c63c:	10 00 00 
f011c63f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c644:	0f b6 d0             	movzbl %al,%edx
f011c647:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011c64d:	01 d0                	add    %edx,%eax
f011c64f:	48                   	dec    %eax
f011c650:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011c656:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011c65c:	ba 00 00 00 00       	mov    $0x0,%edx
f011c661:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011c667:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011c66d:	29 d0                	sub    %edx,%eax
f011c66f:	01 c3                	add    %eax,%ebx
f011c671:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011c678:	10 00 00 
f011c67b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c680:	0f b6 c0             	movzbl %al,%eax
f011c683:	c1 e0 04             	shl    $0x4,%eax
f011c686:	89 c2                	mov    %eax,%edx
f011c688:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011c68e:	01 d0                	add    %edx,%eax
f011c690:	48                   	dec    %eax
f011c691:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011c697:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011c69d:	ba 00 00 00 00       	mov    $0x0,%edx
f011c6a2:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011c6a8:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011c6ae:	29 d0                	sub    %edx,%eax
f011c6b0:	01 d8                	add    %ebx,%eax
f011c6b2:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011c6b7:	39 c1                	cmp    %eax,%ecx
f011c6b9:	74 17                	je     f011c6d2 <test_kmalloc_firstfit1+0x6d0>
f011c6bb:	83 ec 04             	sub    $0x4,%esp
f011c6be:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011c6c3:	68 0e 03 00 00       	push   $0x30e
f011c6c8:	68 da ac 13 f0       	push   $0xf013acda
f011c6cd:	e8 29 3b fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c6d2:	e8 65 76 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c6d7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c6da:	74 17                	je     f011c6f3 <test_kmalloc_firstfit1+0x6f1>
f011c6dc:	83 ec 04             	sub    $0x4,%esp
f011c6df:	68 f4 ac 13 f0       	push   $0xf013acf4
f011c6e4:	68 0f 03 00 00       	push   $0x30f
f011c6e9:	68 da ac 13 f0       	push   $0xf013acda
f011c6ee:	e8 08 3b fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011c6f3:	e8 63 02 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011c6f8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c6fb:	29 c2                	sub    %eax,%edx
f011c6fd:	89 d0                	mov    %edx,%eax
f011c6ff:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c704:	74 17                	je     f011c71d <test_kmalloc_firstfit1+0x71b>
f011c706:	83 ec 04             	sub    $0x4,%esp
f011c709:	68 24 b1 13 f0       	push   $0xf013b124
f011c70e:	68 10 03 00 00       	push   $0x310
f011c713:	68 da ac 13 f0       	push   $0xf013acda
f011c718:	e8 de 3a fe ff       	call   f01001fb <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c71d:	e8 39 02 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011c722:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c725:	e8 12 76 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c72a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011c72d:	83 ec 0c             	sub    $0xc,%esp
f011c730:	68 00 fc 2f 00       	push   $0x2ffc00
f011c735:	e8 c4 b0 fe ff       	call   f01077fe <kmalloc>
f011c73a:	83 c4 10             	add    $0x10,%esp
f011c73d:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011c743:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011c749:	89 c1                	mov    %eax,%ecx
f011c74b:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011c752:	10 00 00 
f011c755:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011c75b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c760:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011c766:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c76c:	ba 00 00 00 00       	mov    $0x0,%edx
f011c771:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011c777:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c77d:	29 d0                	sub    %edx,%eax
f011c77f:	89 c3                	mov    %eax,%ebx
f011c781:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011c788:	10 00 00 
f011c78b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c790:	0f b6 d0             	movzbl %al,%edx
f011c793:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011c799:	01 d0                	add    %edx,%eax
f011c79b:	48                   	dec    %eax
f011c79c:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011c7a2:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c7a8:	ba 00 00 00 00       	mov    $0x0,%edx
f011c7ad:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011c7b3:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c7b9:	29 d0                	sub    %edx,%eax
f011c7bb:	01 c3                	add    %eax,%ebx
f011c7bd:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011c7c4:	10 00 00 
f011c7c7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c7cc:	0f b6 c0             	movzbl %al,%eax
f011c7cf:	c1 e0 04             	shl    $0x4,%eax
f011c7d2:	89 c2                	mov    %eax,%edx
f011c7d4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011c7da:	01 d0                	add    %edx,%eax
f011c7dc:	48                   	dec    %eax
f011c7dd:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011c7e3:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c7e9:	ba 00 00 00 00       	mov    $0x0,%edx
f011c7ee:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011c7f4:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c7fa:	29 d0                	sub    %edx,%eax
f011c7fc:	01 d8                	add    %ebx,%eax
f011c7fe:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011c803:	39 c1                	cmp    %eax,%ecx
f011c805:	74 17                	je     f011c81e <test_kmalloc_firstfit1+0x81c>
f011c807:	83 ec 04             	sub    $0x4,%esp
f011c80a:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011c80f:	68 16 03 00 00       	push   $0x316
f011c814:	68 da ac 13 f0       	push   $0xf013acda
f011c819:	e8 dd 39 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c81e:	e8 19 75 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c823:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c826:	74 17                	je     f011c83f <test_kmalloc_firstfit1+0x83d>
f011c828:	83 ec 04             	sub    $0x4,%esp
f011c82b:	68 f4 ac 13 f0       	push   $0xf013acf4
f011c830:	68 17 03 00 00       	push   $0x317
f011c835:	68 da ac 13 f0       	push   $0xf013acda
f011c83a:	e8 bc 39 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011c83f:	e8 17 01 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011c844:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c847:	29 c2                	sub    %eax,%edx
f011c849:	89 d0                	mov    %edx,%eax
f011c84b:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c850:	74 17                	je     f011c869 <test_kmalloc_firstfit1+0x867>
f011c852:	83 ec 04             	sub    $0x4,%esp
f011c855:	68 24 b1 13 f0       	push   $0xf013b124
f011c85a:	68 18 03 00 00       	push   $0x318
f011c85f:	68 da ac 13 f0       	push   $0xf013acda
f011c864:	e8 92 39 fe ff       	call   f01001fb <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c869:	e8 ed 00 ff ff       	call   f010c95b <sys_calculate_free_frames>
f011c86e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c871:	e8 c6 74 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c876:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f011c879:	83 ec 0c             	sub    $0xc,%esp
f011c87c:	68 00 fc 2f 00       	push   $0x2ffc00
f011c881:	e8 78 af fe ff       	call   f01077fe <kmalloc>
f011c886:	83 c4 10             	add    $0x10,%esp
f011c889:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011c88f:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011c895:	89 c1                	mov    %eax,%ecx
f011c897:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011c89e:	10 00 00 
f011c8a1:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011c8a7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c8ac:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011c8b2:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c8b8:	ba 00 00 00 00       	mov    $0x0,%edx
f011c8bd:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011c8c3:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c8c9:	29 d0                	sub    %edx,%eax
f011c8cb:	89 c3                	mov    %eax,%ebx
f011c8cd:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011c8d4:	10 00 00 
f011c8d7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c8dc:	0f b6 d0             	movzbl %al,%edx
f011c8df:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011c8e5:	01 d0                	add    %edx,%eax
f011c8e7:	48                   	dec    %eax
f011c8e8:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011c8ee:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c8f4:	ba 00 00 00 00       	mov    $0x0,%edx
f011c8f9:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011c8ff:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c905:	29 d0                	sub    %edx,%eax
f011c907:	01 c3                	add    %eax,%ebx
f011c909:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011c910:	10 00 00 
f011c913:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c918:	0f b6 c0             	movzbl %al,%eax
f011c91b:	c1 e0 04             	shl    $0x4,%eax
f011c91e:	89 c2                	mov    %eax,%edx
f011c920:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011c926:	01 d0                	add    %edx,%eax
f011c928:	48                   	dec    %eax
f011c929:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011c92f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c935:	ba 00 00 00 00       	mov    $0x0,%edx
f011c93a:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011c940:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c946:	29 d0                	sub    %edx,%eax
f011c948:	01 d8                	add    %ebx,%eax
f011c94a:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011c94f:	39 c1                	cmp    %eax,%ecx
f011c951:	74 17                	je     f011c96a <test_kmalloc_firstfit1+0x968>
f011c953:	83 ec 04             	sub    $0x4,%esp
f011c956:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011c95b:	68 1e 03 00 00       	push   $0x31e
f011c960:	68 da ac 13 f0       	push   $0xf013acda
f011c965:	e8 91 38 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c96a:	e8 cd 73 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c96f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c972:	74 17                	je     f011c98b <test_kmalloc_firstfit1+0x989>
f011c974:	83 ec 04             	sub    $0x4,%esp
f011c977:	68 f4 ac 13 f0       	push   $0xf013acf4
f011c97c:	68 1f 03 00 00       	push   $0x31f
f011c981:	68 da ac 13 f0       	push   $0xf013acda
f011c986:	e8 70 38 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011c98b:	e8 cb ff fe ff       	call   f010c95b <sys_calculate_free_frames>
f011c990:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c993:	29 c2                	sub    %eax,%edx
f011c995:	89 d0                	mov    %edx,%eax
f011c997:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c99c:	74 17                	je     f011c9b5 <test_kmalloc_firstfit1+0x9b3>
f011c99e:	83 ec 04             	sub    $0x4,%esp
f011c9a1:	68 24 b1 13 f0       	push   $0xf013b124
f011c9a6:	68 20 03 00 00       	push   $0x320
f011c9ab:	68 da ac 13 f0       	push   $0xf013acda
f011c9b0:	e8 46 38 fe ff       	call   f01001fb <_panic>
	}

	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c9b5:	e8 a1 ff fe ff       	call   f010c95b <sys_calculate_free_frames>
f011c9ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c9bd:	e8 7a 73 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c9c2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011c9c5:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011c9cb:	83 ec 0c             	sub    $0xc,%esp
f011c9ce:	50                   	push   %eax
f011c9cf:	e8 ec ae fe ff       	call   f01078c0 <kfree>
f011c9d4:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c9d7:	e8 60 73 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c9dc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c9df:	74 17                	je     f011c9f8 <test_kmalloc_firstfit1+0x9f6>
f011c9e1:	83 ec 04             	sub    $0x4,%esp
f011c9e4:	68 f4 ac 13 f0       	push   $0xf013acf4
f011c9e9:	68 29 03 00 00       	push   $0x329
f011c9ee:	68 da ac 13 f0       	push   $0xf013acda
f011c9f3:	e8 03 38 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011c9f8:	e8 5e ff fe ff       	call   f010c95b <sys_calculate_free_frames>
f011c9fd:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011ca00:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ca05:	74 17                	je     f011ca1e <test_kmalloc_firstfit1+0xa1c>
f011ca07:	83 ec 04             	sub    $0x4,%esp
f011ca0a:	68 37 b1 13 f0       	push   $0xf013b137
f011ca0f:	68 2a 03 00 00       	push   $0x32a
f011ca14:	68 da ac 13 f0       	push   $0xf013acda
f011ca19:	e8 dd 37 fe ff       	call   f01001fb <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011ca1e:	e8 38 ff fe ff       	call   f010c95b <sys_calculate_free_frames>
f011ca23:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ca26:	e8 11 73 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ca2b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011ca2e:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011ca34:	83 ec 0c             	sub    $0xc,%esp
f011ca37:	50                   	push   %eax
f011ca38:	e8 83 ae fe ff       	call   f01078c0 <kfree>
f011ca3d:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ca40:	e8 f7 72 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ca45:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ca48:	74 17                	je     f011ca61 <test_kmalloc_firstfit1+0xa5f>
f011ca4a:	83 ec 04             	sub    $0x4,%esp
f011ca4d:	68 f4 ac 13 f0       	push   $0xf013acf4
f011ca52:	68 30 03 00 00       	push   $0x330
f011ca57:	68 da ac 13 f0       	push   $0xf013acda
f011ca5c:	e8 9a 37 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011ca61:	e8 f5 fe fe ff       	call   f010c95b <sys_calculate_free_frames>
f011ca66:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011ca69:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ca6e:	74 17                	je     f011ca87 <test_kmalloc_firstfit1+0xa85>
f011ca70:	83 ec 04             	sub    $0x4,%esp
f011ca73:	68 37 b1 13 f0       	push   $0xf013b137
f011ca78:	68 31 03 00 00       	push   $0x331
f011ca7d:	68 da ac 13 f0       	push   $0xf013acda
f011ca82:	e8 74 37 fe ff       	call   f01001fb <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011ca87:	e8 cf fe fe ff       	call   f010c95b <sys_calculate_free_frames>
f011ca8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ca8f:	e8 a8 72 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ca94:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[6]);
f011ca97:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011ca9d:	83 ec 0c             	sub    $0xc,%esp
f011caa0:	50                   	push   %eax
f011caa1:	e8 1a ae fe ff       	call   f01078c0 <kfree>
f011caa6:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011caa9:	e8 8e 72 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011caae:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cab1:	74 17                	je     f011caca <test_kmalloc_firstfit1+0xac8>
f011cab3:	83 ec 04             	sub    $0x4,%esp
f011cab6:	68 f4 ac 13 f0       	push   $0xf013acf4
f011cabb:	68 37 03 00 00       	push   $0x337
f011cac0:	68 da ac 13 f0       	push   $0xf013acda
f011cac5:	e8 31 37 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011caca:	e8 8c fe fe ff       	call   f010c95b <sys_calculate_free_frames>
f011cacf:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011cad2:	3d 00 03 00 00       	cmp    $0x300,%eax
f011cad7:	74 17                	je     f011caf0 <test_kmalloc_firstfit1+0xaee>
f011cad9:	83 ec 04             	sub    $0x4,%esp
f011cadc:	68 37 b1 13 f0       	push   $0xf013b137
f011cae1:	68 38 03 00 00       	push   $0x338
f011cae6:	68 da ac 13 f0       	push   $0xf013acda
f011caeb:	e8 0b 37 fe ff       	call   f01001fb <_panic>
	}

	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011caf0:	e8 66 fe fe ff       	call   f010c95b <sys_calculate_free_frames>
f011caf5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011caf8:	e8 3f 72 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011cafd:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f011cb00:	83 ec 0c             	sub    $0xc,%esp
f011cb03:	68 00 fc 07 00       	push   $0x7fc00
f011cb08:	e8 f1 ac fe ff       	call   f01077fe <kmalloc>
f011cb0d:	83 c4 10             	add    $0x10,%esp
f011cb10:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011cb16:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011cb1c:	89 c1                	mov    %eax,%ecx
f011cb1e:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011cb25:	10 00 00 
f011cb28:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011cb2e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cb33:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011cb39:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011cb3f:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb44:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011cb4a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011cb50:	29 d0                	sub    %edx,%eax
f011cb52:	89 c3                	mov    %eax,%ebx
f011cb54:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011cb5b:	10 00 00 
f011cb5e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011cb63:	0f b6 d0             	movzbl %al,%edx
f011cb66:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011cb6c:	01 d0                	add    %edx,%eax
f011cb6e:	48                   	dec    %eax
f011cb6f:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011cb75:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011cb7b:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb80:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011cb86:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011cb8c:	29 d0                	sub    %edx,%eax
f011cb8e:	01 c3                	add    %eax,%ebx
f011cb90:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011cb97:	10 00 00 
f011cb9a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011cb9f:	0f b6 c0             	movzbl %al,%eax
f011cba2:	c1 e0 04             	shl    $0x4,%eax
f011cba5:	89 c2                	mov    %eax,%edx
f011cba7:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011cbad:	01 d0                	add    %edx,%eax
f011cbaf:	48                   	dec    %eax
f011cbb0:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011cbb6:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011cbbc:	ba 00 00 00 00       	mov    $0x0,%edx
f011cbc1:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011cbc7:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011cbcd:	29 d0                	sub    %edx,%eax
f011cbcf:	01 d8                	add    %ebx,%eax
f011cbd1:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011cbd6:	39 c1                	cmp    %eax,%ecx
f011cbd8:	74 17                	je     f011cbf1 <test_kmalloc_firstfit1+0xbef>
f011cbda:	83 ec 04             	sub    $0x4,%esp
f011cbdd:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011cbe2:	68 41 03 00 00       	push   $0x341
f011cbe7:	68 da ac 13 f0       	push   $0xf013acda
f011cbec:	e8 0a 36 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cbf1:	e8 46 71 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011cbf6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cbf9:	74 17                	je     f011cc12 <test_kmalloc_firstfit1+0xc10>
f011cbfb:	83 ec 04             	sub    $0x4,%esp
f011cbfe:	68 f4 ac 13 f0       	push   $0xf013acf4
f011cc03:	68 42 03 00 00       	push   $0x342
f011cc08:	68 da ac 13 f0       	push   $0xf013acda
f011cc0d:	e8 e9 35 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011cc12:	e8 44 fd fe ff       	call   f010c95b <sys_calculate_free_frames>
f011cc17:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cc1a:	29 c2                	sub    %eax,%edx
f011cc1c:	89 d0                	mov    %edx,%eax
f011cc1e:	3d 80 00 00 00       	cmp    $0x80,%eax
f011cc23:	74 17                	je     f011cc3c <test_kmalloc_firstfit1+0xc3a>
f011cc25:	83 ec 04             	sub    $0x4,%esp
f011cc28:	68 24 b1 13 f0       	push   $0xf013b124
f011cc2d:	68 43 03 00 00       	push   $0x343
f011cc32:	68 da ac 13 f0       	push   $0xf013acda
f011cc37:	e8 bf 35 fe ff       	call   f01001fb <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011cc3c:	e8 1a fd fe ff       	call   f010c95b <sys_calculate_free_frames>
f011cc41:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cc44:	e8 f3 70 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011cc49:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011cc4c:	83 ec 0c             	sub    $0xc,%esp
f011cc4f:	68 00 fc 0f 00       	push   $0xffc00
f011cc54:	e8 a5 ab fe ff       	call   f01077fe <kmalloc>
f011cc59:	83 c4 10             	add    $0x10,%esp
f011cc5c:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011cc62:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011cc68:	89 c1                	mov    %eax,%ecx
f011cc6a:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011cc71:	10 00 00 
f011cc74:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011cc7a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cc7f:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011cc85:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011cc8b:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc90:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011cc96:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011cc9c:	29 d0                	sub    %edx,%eax
f011cc9e:	89 c3                	mov    %eax,%ebx
f011cca0:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011cca7:	10 00 00 
f011ccaa:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ccaf:	0f b6 d0             	movzbl %al,%edx
f011ccb2:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011ccb8:	01 d0                	add    %edx,%eax
f011ccba:	48                   	dec    %eax
f011ccbb:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011ccc1:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011ccc7:	ba 00 00 00 00       	mov    $0x0,%edx
f011cccc:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011ccd2:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011ccd8:	29 d0                	sub    %edx,%eax
f011ccda:	01 c3                	add    %eax,%ebx
f011ccdc:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011cce3:	10 00 00 
f011cce6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011cceb:	0f b6 c0             	movzbl %al,%eax
f011ccee:	c1 e0 04             	shl    $0x4,%eax
f011ccf1:	89 c2                	mov    %eax,%edx
f011ccf3:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011ccf9:	01 d0                	add    %edx,%eax
f011ccfb:	48                   	dec    %eax
f011ccfc:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011cd02:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011cd08:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd0d:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011cd13:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011cd19:	29 d0                	sub    %edx,%eax
f011cd1b:	01 d8                	add    %ebx,%eax
f011cd1d:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011cd22:	39 c1                	cmp    %eax,%ecx
f011cd24:	74 17                	je     f011cd3d <test_kmalloc_firstfit1+0xd3b>
f011cd26:	83 ec 04             	sub    $0x4,%esp
f011cd29:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011cd2e:	68 49 03 00 00       	push   $0x349
f011cd33:	68 da ac 13 f0       	push   $0xf013acda
f011cd38:	e8 be 34 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cd3d:	e8 fa 6f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011cd42:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cd45:	74 17                	je     f011cd5e <test_kmalloc_firstfit1+0xd5c>
f011cd47:	83 ec 04             	sub    $0x4,%esp
f011cd4a:	68 f4 ac 13 f0       	push   $0xf013acf4
f011cd4f:	68 4a 03 00 00       	push   $0x34a
f011cd54:	68 da ac 13 f0       	push   $0xf013acda
f011cd59:	e8 9d 34 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011cd5e:	e8 f8 fb fe ff       	call   f010c95b <sys_calculate_free_frames>
f011cd63:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cd66:	29 c2                	sub    %eax,%edx
f011cd68:	89 d0                	mov    %edx,%eax
f011cd6a:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cd6f:	74 17                	je     f011cd88 <test_kmalloc_firstfit1+0xd86>
f011cd71:	83 ec 04             	sub    $0x4,%esp
f011cd74:	68 24 b1 13 f0       	push   $0xf013b124
f011cd79:	68 4b 03 00 00       	push   $0x34b
f011cd7e:	68 da ac 13 f0       	push   $0xf013acda
f011cd83:	e8 73 34 fe ff       	call   f01001fb <_panic>


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011cd88:	e8 ce fb fe ff       	call   f010c95b <sys_calculate_free_frames>
f011cd8d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cd90:	e8 a7 6f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011cd95:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011cd98:	83 ec 0c             	sub    $0xc,%esp
f011cd9b:	68 00 fc 03 00       	push   $0x3fc00
f011cda0:	e8 59 aa fe ff       	call   f01077fe <kmalloc>
f011cda5:	83 c4 10             	add    $0x10,%esp
f011cda8:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011cdae:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011cdb4:	89 c1                	mov    %eax,%ecx
f011cdb6:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011cdbd:	10 00 00 
f011cdc0:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011cdc6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cdcb:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011cdd1:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011cdd7:	ba 00 00 00 00       	mov    $0x0,%edx
f011cddc:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011cde2:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011cde8:	29 d0                	sub    %edx,%eax
f011cdea:	89 c3                	mov    %eax,%ebx
f011cdec:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011cdf3:	10 00 00 
f011cdf6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011cdfb:	0f b6 d0             	movzbl %al,%edx
f011cdfe:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011ce04:	01 d0                	add    %edx,%eax
f011ce06:	48                   	dec    %eax
f011ce07:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011ce0d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011ce13:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce18:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011ce1e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011ce24:	29 d0                	sub    %edx,%eax
f011ce26:	01 c3                	add    %eax,%ebx
f011ce28:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011ce2f:	10 00 00 
f011ce32:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ce37:	0f b6 c0             	movzbl %al,%eax
f011ce3a:	c1 e0 04             	shl    $0x4,%eax
f011ce3d:	89 c2                	mov    %eax,%edx
f011ce3f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011ce45:	01 d0                	add    %edx,%eax
f011ce47:	48                   	dec    %eax
f011ce48:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011ce4e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011ce54:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce59:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011ce5f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011ce65:	29 d0                	sub    %edx,%eax
f011ce67:	01 d8                	add    %ebx,%eax
f011ce69:	2d 00 c0 e7 09       	sub    $0x9e7c000,%eax
f011ce6e:	39 c1                	cmp    %eax,%ecx
f011ce70:	74 17                	je     f011ce89 <test_kmalloc_firstfit1+0xe87>
f011ce72:	83 ec 04             	sub    $0x4,%esp
f011ce75:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011ce7a:	68 52 03 00 00       	push   $0x352
f011ce7f:	68 da ac 13 f0       	push   $0xf013acda
f011ce84:	e8 72 33 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ce89:	e8 ae 6e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ce8e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ce91:	74 17                	je     f011ceaa <test_kmalloc_firstfit1+0xea8>
f011ce93:	83 ec 04             	sub    $0x4,%esp
f011ce96:	68 f4 ac 13 f0       	push   $0xf013acf4
f011ce9b:	68 53 03 00 00       	push   $0x353
f011cea0:	68 da ac 13 f0       	push   $0xf013acda
f011cea5:	e8 51 33 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011ceaa:	e8 ac fa fe ff       	call   f010c95b <sys_calculate_free_frames>
f011ceaf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ceb2:	29 c2                	sub    %eax,%edx
f011ceb4:	89 d0                	mov    %edx,%eax
f011ceb6:	83 f8 40             	cmp    $0x40,%eax
f011ceb9:	74 17                	je     f011ced2 <test_kmalloc_firstfit1+0xed0>
f011cebb:	83 ec 04             	sub    $0x4,%esp
f011cebe:	68 24 b1 13 f0       	push   $0xf013b124
f011cec3:	68 54 03 00 00       	push   $0x354
f011cec8:	68 da ac 13 f0       	push   $0xf013acda
f011cecd:	e8 29 33 fe ff       	call   f01001fb <_panic>

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011ced2:	e8 84 fa fe ff       	call   f010c95b <sys_calculate_free_frames>
f011ced7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ceda:	e8 5d 6e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011cedf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f011cee2:	83 ec 0c             	sub    $0xc,%esp
f011cee5:	68 00 00 20 00       	push   $0x200000
f011ceea:	e8 0f a9 fe ff       	call   f01077fe <kmalloc>
f011ceef:	83 c4 10             	add    $0x10,%esp
f011cef2:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011cef8:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011cefe:	89 c1                	mov    %eax,%ecx
f011cf00:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011cf07:	10 00 00 
f011cf0a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011cf10:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cf15:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011cf1b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011cf21:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf26:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011cf2c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011cf32:	29 d0                	sub    %edx,%eax
f011cf34:	89 c3                	mov    %eax,%ebx
f011cf36:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011cf3d:	10 00 00 
f011cf40:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011cf45:	0f b6 d0             	movzbl %al,%edx
f011cf48:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011cf4e:	01 d0                	add    %edx,%eax
f011cf50:	48                   	dec    %eax
f011cf51:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011cf57:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011cf5d:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf62:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011cf68:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011cf6e:	29 d0                	sub    %edx,%eax
f011cf70:	01 c3                	add    %eax,%ebx
f011cf72:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011cf79:	10 00 00 
f011cf7c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011cf81:	0f b6 c0             	movzbl %al,%eax
f011cf84:	c1 e0 04             	shl    $0x4,%eax
f011cf87:	89 c2                	mov    %eax,%edx
f011cf89:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011cf8f:	01 d0                	add    %edx,%eax
f011cf91:	48                   	dec    %eax
f011cf92:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011cf98:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011cf9e:	ba 00 00 00 00       	mov    $0x0,%edx
f011cfa3:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011cfa9:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011cfaf:	29 d0                	sub    %edx,%eax
f011cfb1:	01 d8                	add    %ebx,%eax
f011cfb3:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011cfb8:	39 c1                	cmp    %eax,%ecx
f011cfba:	74 17                	je     f011cfd3 <test_kmalloc_firstfit1+0xfd1>
f011cfbc:	83 ec 04             	sub    $0x4,%esp
f011cfbf:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011cfc4:	68 5a 03 00 00       	push   $0x35a
f011cfc9:	68 da ac 13 f0       	push   $0xf013acda
f011cfce:	e8 28 32 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011cfd3:	e8 83 f9 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011cfd8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cfdb:	29 c2                	sub    %eax,%edx
f011cfdd:	89 d0                	mov    %edx,%eax
f011cfdf:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cfe4:	74 17                	je     f011cffd <test_kmalloc_firstfit1+0xffb>
f011cfe6:	83 ec 04             	sub    $0x4,%esp
f011cfe9:	68 24 b1 13 f0       	push   $0xf013b124
f011cfee:	68 5b 03 00 00       	push   $0x35b
f011cff3:	68 da ac 13 f0       	push   $0xf013acda
f011cff8:	e8 fe 31 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cffd:	e8 3a 6d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d002:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d005:	74 17                	je     f011d01e <test_kmalloc_firstfit1+0x101c>
f011d007:	83 ec 04             	sub    $0x4,%esp
f011d00a:	68 f4 ac 13 f0       	push   $0xf013acf4
f011d00f:	68 5c 03 00 00       	push   $0x35c
f011d014:	68 da ac 13 f0       	push   $0xf013acda
f011d019:	e8 dd 31 fe ff       	call   f01001fb <_panic>


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011d01e:	e8 38 f9 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011d023:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d026:	e8 11 6d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d02b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f011d02e:	83 ec 0c             	sub    $0xc,%esp
f011d031:	68 00 fc 3f 00       	push   $0x3ffc00
f011d036:	e8 c3 a7 fe ff       	call   f01077fe <kmalloc>
f011d03b:	83 c4 10             	add    $0x10,%esp
f011d03e:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011d044:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011d04a:	89 c1                	mov    %eax,%ecx
f011d04c:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011d053:	10 00 00 
f011d056:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011d05c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d061:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011d067:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011d06d:	ba 00 00 00 00       	mov    $0x0,%edx
f011d072:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011d078:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011d07e:	29 d0                	sub    %edx,%eax
f011d080:	89 c3                	mov    %eax,%ebx
f011d082:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011d089:	10 00 00 
f011d08c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d091:	0f b6 d0             	movzbl %al,%edx
f011d094:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011d09a:	01 d0                	add    %edx,%eax
f011d09c:	48                   	dec    %eax
f011d09d:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011d0a3:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011d0a9:	ba 00 00 00 00       	mov    $0x0,%edx
f011d0ae:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011d0b4:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011d0ba:	29 d0                	sub    %edx,%eax
f011d0bc:	01 c3                	add    %eax,%ebx
f011d0be:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011d0c5:	10 00 00 
f011d0c8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d0cd:	0f b6 c0             	movzbl %al,%eax
f011d0d0:	c1 e0 04             	shl    $0x4,%eax
f011d0d3:	89 c2                	mov    %eax,%edx
f011d0d5:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011d0db:	01 d0                	add    %edx,%eax
f011d0dd:	48                   	dec    %eax
f011d0de:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011d0e4:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011d0ea:	ba 00 00 00 00       	mov    $0x0,%edx
f011d0ef:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011d0f5:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011d0fb:	29 d0                	sub    %edx,%eax
f011d0fd:	01 d8                	add    %ebx,%eax
f011d0ff:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011d104:	39 c1                	cmp    %eax,%ecx
f011d106:	74 17                	je     f011d11f <test_kmalloc_firstfit1+0x111d>
f011d108:	83 ec 04             	sub    $0x4,%esp
f011d10b:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011d110:	68 63 03 00 00       	push   $0x363
f011d115:	68 da ac 13 f0       	push   $0xf013acda
f011d11a:	e8 dc 30 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d11f:	e8 18 6c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d124:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d127:	74 17                	je     f011d140 <test_kmalloc_firstfit1+0x113e>
f011d129:	83 ec 04             	sub    $0x4,%esp
f011d12c:	68 f4 ac 13 f0       	push   $0xf013acf4
f011d131:	68 64 03 00 00       	push   $0x364
f011d136:	68 da ac 13 f0       	push   $0xf013acda
f011d13b:	e8 bb 30 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011d140:	e8 16 f8 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011d145:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d148:	29 c2                	sub    %eax,%edx
f011d14a:	89 d0                	mov    %edx,%eax
f011d14c:	3d 00 04 00 00       	cmp    $0x400,%eax
f011d151:	74 17                	je     f011d16a <test_kmalloc_firstfit1+0x1168>
f011d153:	83 ec 04             	sub    $0x4,%esp
f011d156:	68 24 b1 13 f0       	push   $0xf013b124
f011d15b:	68 65 03 00 00       	push   $0x365
f011d160:	68 da ac 13 f0       	push   $0xf013acda
f011d165:	e8 91 30 fe ff       	call   f01001fb <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = sys_calculate_free_frames() ;
f011d16a:	e8 ec f7 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011d16f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d172:	e8 c5 6b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d177:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[2]);
f011d17a:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011d180:	83 ec 0c             	sub    $0xc,%esp
f011d183:	50                   	push   %eax
f011d184:	e8 37 a7 fe ff       	call   f01078c0 <kfree>
f011d189:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d18c:	e8 ab 6b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d191:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d194:	74 17                	je     f011d1ad <test_kmalloc_firstfit1+0x11ab>
f011d196:	83 ec 04             	sub    $0x4,%esp
f011d199:	68 f4 ac 13 f0       	push   $0xf013acf4
f011d19e:	68 6e 03 00 00       	push   $0x36e
f011d1a3:	68 da ac 13 f0       	push   $0xf013acda
f011d1a8:	e8 4e 30 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d1ad:	e8 a9 f7 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011d1b2:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d1b5:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d1ba:	74 17                	je     f011d1d3 <test_kmalloc_firstfit1+0x11d1>
f011d1bc:	83 ec 04             	sub    $0x4,%esp
f011d1bf:	68 37 b1 13 f0       	push   $0xf013b137
f011d1c4:	68 6f 03 00 00       	push   $0x36f
f011d1c9:	68 da ac 13 f0       	push   $0xf013acda
f011d1ce:	e8 28 30 fe ff       	call   f01001fb <_panic>

		//Next 1 MB Hole appended also
		freeFrames = sys_calculate_free_frames() ;
f011d1d3:	e8 83 f7 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011d1d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d1db:	e8 5c 6b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d1e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011d1e3:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011d1e9:	83 ec 0c             	sub    $0xc,%esp
f011d1ec:	50                   	push   %eax
f011d1ed:	e8 ce a6 fe ff       	call   f01078c0 <kfree>
f011d1f2:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d1f5:	e8 42 6b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d1fa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d1fd:	74 17                	je     f011d216 <test_kmalloc_firstfit1+0x1214>
f011d1ff:	83 ec 04             	sub    $0x4,%esp
f011d202:	68 f4 ac 13 f0       	push   $0xf013acf4
f011d207:	68 75 03 00 00       	push   $0x375
f011d20c:	68 da ac 13 f0       	push   $0xf013acda
f011d211:	e8 e5 2f fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d216:	e8 40 f7 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011d21b:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d21e:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d223:	74 17                	je     f011d23c <test_kmalloc_firstfit1+0x123a>
f011d225:	83 ec 04             	sub    $0x4,%esp
f011d228:	68 37 b1 13 f0       	push   $0xf013b137
f011d22d:	68 76 03 00 00       	push   $0x376
f011d232:	68 da ac 13 f0       	push   $0xf013acda
f011d237:	e8 bf 2f fe ff       	call   f01001fb <_panic>

	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = sys_calculate_free_frames() ;
f011d23c:	e8 1a f7 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011d241:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d244:	e8 f3 6a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d249:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f011d24c:	83 ec 0c             	sub    $0xc,%esp
f011d24f:	68 00 00 10 00       	push   $0x100000
f011d254:	e8 a5 a5 fe ff       	call   f01077fe <kmalloc>
f011d259:	83 c4 10             	add    $0x10,%esp
f011d25c:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) panic("Wrong start address for the allocated space... ");
f011d262:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011d268:	89 c1                	mov    %eax,%ecx
f011d26a:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011d271:	10 00 00 
f011d274:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011d27a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d27f:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011d285:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011d28b:	ba 00 00 00 00       	mov    $0x0,%edx
f011d290:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011d296:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011d29c:	29 d0                	sub    %edx,%eax
f011d29e:	89 c3                	mov    %eax,%ebx
f011d2a0:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011d2a7:	10 00 00 
f011d2aa:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d2af:	0f b6 d0             	movzbl %al,%edx
f011d2b2:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011d2b8:	01 d0                	add    %edx,%eax
f011d2ba:	48                   	dec    %eax
f011d2bb:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011d2c1:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011d2c7:	ba 00 00 00 00       	mov    $0x0,%edx
f011d2cc:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011d2d2:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011d2d8:	29 d0                	sub    %edx,%eax
f011d2da:	01 c3                	add    %eax,%ebx
f011d2dc:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011d2e3:	10 00 00 
f011d2e6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d2eb:	0f b6 c0             	movzbl %al,%eax
f011d2ee:	c1 e0 04             	shl    $0x4,%eax
f011d2f1:	89 c2                	mov    %eax,%edx
f011d2f3:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011d2f9:	01 d0                	add    %edx,%eax
f011d2fb:	48                   	dec    %eax
f011d2fc:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011d302:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011d308:	ba 00 00 00 00       	mov    $0x0,%edx
f011d30d:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011d313:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011d319:	29 d0                	sub    %edx,%eax
f011d31b:	01 d8                	add    %ebx,%eax
f011d31d:	2d 00 c0 e3 09       	sub    $0x9e3c000,%eax
f011d322:	39 c1                	cmp    %eax,%ecx
f011d324:	74 17                	je     f011d33d <test_kmalloc_firstfit1+0x133b>
f011d326:	83 ec 04             	sub    $0x4,%esp
f011d329:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011d32e:	68 80 03 00 00       	push   $0x380
f011d333:	68 da ac 13 f0       	push   $0xf013acda
f011d338:	e8 be 2e fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d33d:	e8 fa 69 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d342:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d345:	74 17                	je     f011d35e <test_kmalloc_firstfit1+0x135c>
f011d347:	83 ec 04             	sub    $0x4,%esp
f011d34a:	68 f4 ac 13 f0       	push   $0xf013acf4
f011d34f:	68 81 03 00 00       	push   $0x381
f011d354:	68 da ac 13 f0       	push   $0xf013acda
f011d359:	e8 9d 2e fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d35e:	e8 f8 f5 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011d363:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d366:	29 c2                	sub    %eax,%edx
f011d368:	89 d0                	mov    %edx,%eax
f011d36a:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d36f:	74 17                	je     f011d388 <test_kmalloc_firstfit1+0x1386>
f011d371:	83 ec 04             	sub    $0x4,%esp
f011d374:	68 24 b1 13 f0       	push   $0xf013b124
f011d379:	68 82 03 00 00       	push   $0x382
f011d37e:	68 da ac 13 f0       	push   $0xf013acda
f011d383:	e8 73 2e fe ff       	call   f01001fb <_panic>
	}

	cprintf("Congratulations!! test FIRST FIT allocation (1) completed successfully.\n");
f011d388:	83 ec 0c             	sub    $0xc,%esp
f011d38b:	68 d0 b2 13 f0       	push   $0xf013b2d0
f011d390:	e8 ed 38 fe ff       	call   f0100c82 <cprintf>
f011d395:	83 c4 10             	add    $0x10,%esp

	return 1;
f011d398:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011d39d:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011d3a0:	5b                   	pop    %ebx
f011d3a1:	5f                   	pop    %edi
f011d3a2:	5d                   	pop    %ebp
f011d3a3:	c3                   	ret    

f011d3a4 <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f011d3a4:	55                   	push   %ebp
f011d3a5:	89 e5                	mov    %esp,%ebp
f011d3a7:	57                   	push   %edi
f011d3a8:	53                   	push   %ebx
f011d3a9:	81 ec 60 01 00 00    	sub    $0x160,%esp
	cprintf("==============================================\n");
f011d3af:	83 ec 0c             	sub    $0xc,%esp
f011d3b2:	68 1c ac 13 f0       	push   $0xf013ac1c
f011d3b7:	e8 c6 38 fe ff       	call   f0100c82 <cprintf>
f011d3bc:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011d3bf:	83 ec 0c             	sub    $0xc,%esp
f011d3c2:	68 4c ac 13 f0       	push   $0xf013ac4c
f011d3c7:	e8 b6 38 fe ff       	call   f0100c82 <cprintf>
f011d3cc:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011d3cf:	83 ec 0c             	sub    $0xc,%esp
f011d3d2:	68 1c ac 13 f0       	push   $0xf013ac1c
f011d3d7:	e8 a6 38 fe ff       	call   f0100c82 <cprintf>
f011d3dc:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011d3df:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f011d3e5:	b9 14 00 00 00       	mov    $0x14,%ecx
f011d3ea:	b8 00 00 00 00       	mov    $0x0,%eax
f011d3ef:	89 d7                	mov    %edx,%edi
f011d3f1:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011d3f3:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011d3fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011d3fd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d402:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011d405:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011d408:	ba 00 00 00 00       	mov    $0x0,%edx
f011d40d:	f7 75 f4             	divl   -0xc(%ebp)
f011d410:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011d413:	29 d0                	sub    %edx,%eax
f011d415:	89 c1                	mov    %eax,%ecx
f011d417:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011d41e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d423:	0f b6 d0             	movzbl %al,%edx
f011d426:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011d429:	01 d0                	add    %edx,%eax
f011d42b:	48                   	dec    %eax
f011d42c:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011d42f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011d432:	ba 00 00 00 00       	mov    $0x0,%edx
f011d437:	f7 75 ec             	divl   -0x14(%ebp)
f011d43a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011d43d:	29 d0                	sub    %edx,%eax
f011d43f:	01 c1                	add    %eax,%ecx
f011d441:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011d448:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d44d:	0f b6 c0             	movzbl %al,%eax
f011d450:	c1 e0 04             	shl    $0x4,%eax
f011d453:	89 c2                	mov    %eax,%edx
f011d455:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011d458:	01 d0                	add    %edx,%eax
f011d45a:	48                   	dec    %eax
f011d45b:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011d45e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011d461:	ba 00 00 00 00       	mov    $0x0,%edx
f011d466:	f7 75 e4             	divl   -0x1c(%ebp)
f011d469:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011d46c:	29 d0                	sub    %edx,%eax
f011d46e:	01 c8                	add    %ecx,%eax
f011d470:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011d475:	29 c2                	sub    %eax,%edx
f011d477:	89 d0                	mov    %edx,%eax
f011d479:	83 ec 0c             	sub    $0xc,%esp
f011d47c:	50                   	push   %eax
f011d47d:	e8 7c a3 fe ff       	call   f01077fe <kmalloc>
f011d482:	83 c4 10             	add    $0x10,%esp
f011d485:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("kmalloc: Attempt to allocate more than heap size, should return NULL");
f011d48b:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011d491:	85 c0                	test   %eax,%eax
f011d493:	74 17                	je     f011d4ac <test_kmalloc_firstfit2+0x108>
f011d495:	83 ec 04             	sub    $0x4,%esp
f011d498:	68 1c b3 13 f0       	push   $0xf013b31c
f011d49d:	68 97 03 00 00       	push   $0x397
f011d4a2:	68 da ac 13 f0       	push   $0xf013acda
f011d4a7:	e8 4f 2d fe ff       	call   f01001fb <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d4ac:	e8 aa f4 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011d4b1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d4b4:	e8 83 68 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d4b9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011d4bc:	83 ec 0c             	sub    $0xc,%esp
f011d4bf:	68 00 fc 1f 00       	push   $0x1ffc00
f011d4c4:	e8 35 a3 fe ff       	call   f01077fe <kmalloc>
f011d4c9:	83 c4 10             	add    $0x10,%esp
f011d4cc:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011d4d2:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011d4d8:	89 c1                	mov    %eax,%ecx
f011d4da:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011d4e1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011d4e4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d4e9:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011d4ec:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011d4ef:	ba 00 00 00 00       	mov    $0x0,%edx
f011d4f4:	f7 75 d4             	divl   -0x2c(%ebp)
f011d4f7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011d4fa:	29 d0                	sub    %edx,%eax
f011d4fc:	89 c3                	mov    %eax,%ebx
f011d4fe:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011d505:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d50a:	0f b6 d0             	movzbl %al,%edx
f011d50d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011d510:	01 d0                	add    %edx,%eax
f011d512:	48                   	dec    %eax
f011d513:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011d516:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d519:	ba 00 00 00 00       	mov    $0x0,%edx
f011d51e:	f7 75 cc             	divl   -0x34(%ebp)
f011d521:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d524:	29 d0                	sub    %edx,%eax
f011d526:	01 c3                	add    %eax,%ebx
f011d528:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011d52f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d534:	0f b6 c0             	movzbl %al,%eax
f011d537:	c1 e0 04             	shl    $0x4,%eax
f011d53a:	89 c2                	mov    %eax,%edx
f011d53c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011d53f:	01 d0                	add    %edx,%eax
f011d541:	48                   	dec    %eax
f011d542:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011d545:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d548:	ba 00 00 00 00       	mov    $0x0,%edx
f011d54d:	f7 75 c4             	divl   -0x3c(%ebp)
f011d550:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d553:	29 d0                	sub    %edx,%eax
f011d555:	01 d8                	add    %ebx,%eax
f011d557:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011d55c:	39 c1                	cmp    %eax,%ecx
f011d55e:	74 17                	je     f011d577 <test_kmalloc_firstfit2+0x1d3>
f011d560:	83 ec 04             	sub    $0x4,%esp
f011d563:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011d568:	68 a1 03 00 00       	push   $0x3a1
f011d56d:	68 da ac 13 f0       	push   $0xf013acda
f011d572:	e8 84 2c fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d577:	e8 c0 67 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d57c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d57f:	74 17                	je     f011d598 <test_kmalloc_firstfit2+0x1f4>
f011d581:	83 ec 04             	sub    $0x4,%esp
f011d584:	68 f4 ac 13 f0       	push   $0xf013acf4
f011d589:	68 a2 03 00 00       	push   $0x3a2
f011d58e:	68 da ac 13 f0       	push   $0xf013acda
f011d593:	e8 63 2c fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d598:	e8 be f3 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011d59d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d5a0:	29 c2                	sub    %eax,%edx
f011d5a2:	89 d0                	mov    %edx,%eax
f011d5a4:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d5a9:	74 17                	je     f011d5c2 <test_kmalloc_firstfit2+0x21e>
f011d5ab:	83 ec 04             	sub    $0x4,%esp
f011d5ae:	68 24 b1 13 f0       	push   $0xf013b124
f011d5b3:	68 a3 03 00 00       	push   $0x3a3
f011d5b8:	68 da ac 13 f0       	push   $0xf013acda
f011d5bd:	e8 39 2c fe ff       	call   f01001fb <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d5c2:	e8 94 f3 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011d5c7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d5ca:	e8 6d 67 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d5cf:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011d5d2:	83 ec 0c             	sub    $0xc,%esp
f011d5d5:	68 00 fc 1f 00       	push   $0x1ffc00
f011d5da:	e8 1f a2 fe ff       	call   f01077fe <kmalloc>
f011d5df:	83 c4 10             	add    $0x10,%esp
f011d5e2:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011d5e8:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011d5ee:	89 c1                	mov    %eax,%ecx
f011d5f0:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011d5f7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011d5fa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d5ff:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011d602:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011d605:	ba 00 00 00 00       	mov    $0x0,%edx
f011d60a:	f7 75 bc             	divl   -0x44(%ebp)
f011d60d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011d610:	29 d0                	sub    %edx,%eax
f011d612:	89 c3                	mov    %eax,%ebx
f011d614:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011d61b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d620:	0f b6 d0             	movzbl %al,%edx
f011d623:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011d626:	01 d0                	add    %edx,%eax
f011d628:	48                   	dec    %eax
f011d629:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011d62c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011d62f:	ba 00 00 00 00       	mov    $0x0,%edx
f011d634:	f7 75 b4             	divl   -0x4c(%ebp)
f011d637:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011d63a:	29 d0                	sub    %edx,%eax
f011d63c:	01 c3                	add    %eax,%ebx
f011d63e:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011d645:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d64a:	0f b6 c0             	movzbl %al,%eax
f011d64d:	c1 e0 04             	shl    $0x4,%eax
f011d650:	89 c2                	mov    %eax,%edx
f011d652:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011d655:	01 d0                	add    %edx,%eax
f011d657:	48                   	dec    %eax
f011d658:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011d65b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011d65e:	ba 00 00 00 00       	mov    $0x0,%edx
f011d663:	f7 75 ac             	divl   -0x54(%ebp)
f011d666:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011d669:	29 d0                	sub    %edx,%eax
f011d66b:	01 d8                	add    %ebx,%eax
f011d66d:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011d672:	39 c1                	cmp    %eax,%ecx
f011d674:	74 17                	je     f011d68d <test_kmalloc_firstfit2+0x2e9>
f011d676:	83 ec 04             	sub    $0x4,%esp
f011d679:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011d67e:	68 a9 03 00 00       	push   $0x3a9
f011d683:	68 da ac 13 f0       	push   $0xf013acda
f011d688:	e8 6e 2b fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d68d:	e8 aa 66 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d692:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d695:	74 17                	je     f011d6ae <test_kmalloc_firstfit2+0x30a>
f011d697:	83 ec 04             	sub    $0x4,%esp
f011d69a:	68 f4 ac 13 f0       	push   $0xf013acf4
f011d69f:	68 aa 03 00 00       	push   $0x3aa
f011d6a4:	68 da ac 13 f0       	push   $0xf013acda
f011d6a9:	e8 4d 2b fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d6ae:	e8 a8 f2 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011d6b3:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d6b6:	29 c2                	sub    %eax,%edx
f011d6b8:	89 d0                	mov    %edx,%eax
f011d6ba:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d6bf:	74 17                	je     f011d6d8 <test_kmalloc_firstfit2+0x334>
f011d6c1:	83 ec 04             	sub    $0x4,%esp
f011d6c4:	68 24 b1 13 f0       	push   $0xf013b124
f011d6c9:	68 ab 03 00 00       	push   $0x3ab
f011d6ce:	68 da ac 13 f0       	push   $0xf013acda
f011d6d3:	e8 23 2b fe ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011d6d8:	e8 7e f2 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011d6dd:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d6e0:	e8 57 66 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d6e5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011d6e8:	83 ec 0c             	sub    $0xc,%esp
f011d6eb:	68 00 08 00 00       	push   $0x800
f011d6f0:	e8 09 a1 fe ff       	call   f01077fe <kmalloc>
f011d6f5:	83 c4 10             	add    $0x10,%esp
f011d6f8:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] < (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011d6fe:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011d704:	89 c1                	mov    %eax,%ecx
f011d706:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011d70d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011d710:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d715:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011d718:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d71b:	ba 00 00 00 00       	mov    $0x0,%edx
f011d720:	f7 75 a4             	divl   -0x5c(%ebp)
f011d723:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d726:	29 d0                	sub    %edx,%eax
f011d728:	89 c3                	mov    %eax,%ebx
f011d72a:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011d731:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d736:	0f b6 d0             	movzbl %al,%edx
f011d739:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011d73c:	01 d0                	add    %edx,%eax
f011d73e:	48                   	dec    %eax
f011d73f:	89 45 98             	mov    %eax,-0x68(%ebp)
f011d742:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d745:	ba 00 00 00 00       	mov    $0x0,%edx
f011d74a:	f7 75 9c             	divl   -0x64(%ebp)
f011d74d:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d750:	29 d0                	sub    %edx,%eax
f011d752:	01 c3                	add    %eax,%ebx
f011d754:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011d75b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d760:	0f b6 c0             	movzbl %al,%eax
f011d763:	c1 e0 04             	shl    $0x4,%eax
f011d766:	89 c2                	mov    %eax,%edx
f011d768:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011d76b:	01 d0                	add    %edx,%eax
f011d76d:	48                   	dec    %eax
f011d76e:	89 45 90             	mov    %eax,-0x70(%ebp)
f011d771:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d774:	ba 00 00 00 00       	mov    $0x0,%edx
f011d779:	f7 75 94             	divl   -0x6c(%ebp)
f011d77c:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d77f:	29 d0                	sub    %edx,%eax
f011d781:	01 d8                	add    %ebx,%eax
f011d783:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011d788:	39 c1                	cmp    %eax,%ecx
f011d78a:	73 17                	jae    f011d7a3 <test_kmalloc_firstfit2+0x3ff>
f011d78c:	83 ec 04             	sub    $0x4,%esp
f011d78f:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011d794:	68 b1 03 00 00       	push   $0x3b1
f011d799:	68 da ac 13 f0       	push   $0xf013acda
f011d79e:	e8 58 2a fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d7a3:	e8 94 65 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d7a8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d7ab:	74 17                	je     f011d7c4 <test_kmalloc_firstfit2+0x420>
f011d7ad:	83 ec 04             	sub    $0x4,%esp
f011d7b0:	68 f4 ac 13 f0       	push   $0xf013acf4
f011d7b5:	68 b2 03 00 00       	push   $0x3b2
f011d7ba:	68 da ac 13 f0       	push   $0xf013acda
f011d7bf:	e8 37 2a fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011d7c4:	e8 92 f1 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011d7c9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d7cc:	29 c2                	sub    %eax,%edx
f011d7ce:	89 d0                	mov    %edx,%eax
f011d7d0:	83 f8 01             	cmp    $0x1,%eax
f011d7d3:	74 17                	je     f011d7ec <test_kmalloc_firstfit2+0x448>
f011d7d5:	83 ec 04             	sub    $0x4,%esp
f011d7d8:	68 24 b1 13 f0       	push   $0xf013b124
f011d7dd:	68 b3 03 00 00       	push   $0x3b3
f011d7e2:	68 da ac 13 f0       	push   $0xf013acda
f011d7e7:	e8 0f 2a fe ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011d7ec:	e8 6a f1 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011d7f1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d7f4:	e8 43 65 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d7f9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011d7fc:	83 ec 0c             	sub    $0xc,%esp
f011d7ff:	68 00 08 00 00       	push   $0x800
f011d804:	e8 f5 9f fe ff       	call   f01077fe <kmalloc>
f011d809:	83 c4 10             	add    $0x10,%esp
f011d80c:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011d812:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011d818:	89 c1                	mov    %eax,%ecx
f011d81a:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011d821:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011d824:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d829:	89 45 88             	mov    %eax,-0x78(%ebp)
f011d82c:	8b 45 88             	mov    -0x78(%ebp),%eax
f011d82f:	ba 00 00 00 00       	mov    $0x0,%edx
f011d834:	f7 75 8c             	divl   -0x74(%ebp)
f011d837:	8b 45 88             	mov    -0x78(%ebp),%eax
f011d83a:	29 d0                	sub    %edx,%eax
f011d83c:	89 c3                	mov    %eax,%ebx
f011d83e:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011d845:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d84a:	0f b6 d0             	movzbl %al,%edx
f011d84d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011d850:	01 d0                	add    %edx,%eax
f011d852:	48                   	dec    %eax
f011d853:	89 45 80             	mov    %eax,-0x80(%ebp)
f011d856:	8b 45 80             	mov    -0x80(%ebp),%eax
f011d859:	ba 00 00 00 00       	mov    $0x0,%edx
f011d85e:	f7 75 84             	divl   -0x7c(%ebp)
f011d861:	8b 45 80             	mov    -0x80(%ebp),%eax
f011d864:	29 d0                	sub    %edx,%eax
f011d866:	01 c3                	add    %eax,%ebx
f011d868:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011d86f:	10 00 00 
f011d872:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d877:	0f b6 c0             	movzbl %al,%eax
f011d87a:	c1 e0 04             	shl    $0x4,%eax
f011d87d:	89 c2                	mov    %eax,%edx
f011d87f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011d885:	01 d0                	add    %edx,%eax
f011d887:	48                   	dec    %eax
f011d888:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011d88e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d894:	ba 00 00 00 00       	mov    $0x0,%edx
f011d899:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011d89f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d8a5:	29 d0                	sub    %edx,%eax
f011d8a7:	01 d8                	add    %ebx,%eax
f011d8a9:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011d8ae:	39 c1                	cmp    %eax,%ecx
f011d8b0:	74 17                	je     f011d8c9 <test_kmalloc_firstfit2+0x525>
f011d8b2:	83 ec 04             	sub    $0x4,%esp
f011d8b5:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011d8ba:	68 b9 03 00 00       	push   $0x3b9
f011d8bf:	68 da ac 13 f0       	push   $0xf013acda
f011d8c4:	e8 32 29 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d8c9:	e8 6e 64 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d8ce:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d8d1:	74 17                	je     f011d8ea <test_kmalloc_firstfit2+0x546>
f011d8d3:	83 ec 04             	sub    $0x4,%esp
f011d8d6:	68 f4 ac 13 f0       	push   $0xf013acf4
f011d8db:	68 ba 03 00 00       	push   $0x3ba
f011d8e0:	68 da ac 13 f0       	push   $0xf013acda
f011d8e5:	e8 11 29 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011d8ea:	e8 6c f0 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011d8ef:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d8f2:	29 c2                	sub    %eax,%edx
f011d8f4:	89 d0                	mov    %edx,%eax
f011d8f6:	83 f8 01             	cmp    $0x1,%eax
f011d8f9:	74 17                	je     f011d912 <test_kmalloc_firstfit2+0x56e>
f011d8fb:	83 ec 04             	sub    $0x4,%esp
f011d8fe:	68 24 b1 13 f0       	push   $0xf013b124
f011d903:	68 bb 03 00 00       	push   $0x3bb
f011d908:	68 da ac 13 f0       	push   $0xf013acda
f011d90d:	e8 e9 28 fe ff       	call   f01001fb <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d912:	e8 44 f0 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011d917:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d91a:	e8 1d 64 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d91f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011d922:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011d928:	83 ec 0c             	sub    $0xc,%esp
f011d92b:	50                   	push   %eax
f011d92c:	e8 8f 9f fe ff       	call   f01078c0 <kfree>
f011d931:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d934:	e8 03 64 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d939:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d93c:	74 17                	je     f011d955 <test_kmalloc_firstfit2+0x5b1>
f011d93e:	83 ec 04             	sub    $0x4,%esp
f011d941:	68 f4 ac 13 f0       	push   $0xf013acf4
f011d946:	68 c1 03 00 00       	push   $0x3c1
f011d94b:	68 da ac 13 f0       	push   $0xf013acda
f011d950:	e8 a6 28 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong free: ");
f011d955:	e8 01 f0 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011d95a:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011d95d:	83 f8 01             	cmp    $0x1,%eax
f011d960:	74 17                	je     f011d979 <test_kmalloc_firstfit2+0x5d5>
f011d962:	83 ec 04             	sub    $0x4,%esp
f011d965:	68 37 b1 13 f0       	push   $0xf013b137
f011d96a:	68 c2 03 00 00       	push   $0x3c2
f011d96f:	68 da ac 13 f0       	push   $0xf013acda
f011d974:	e8 82 28 fe ff       	call   f01001fb <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011d979:	e8 dd ef fe ff       	call   f010c95b <sys_calculate_free_frames>
f011d97e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d981:	e8 b6 63 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d986:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011d989:	83 ec 0c             	sub    $0xc,%esp
f011d98c:	68 00 1c 00 00       	push   $0x1c00
f011d991:	e8 68 9e fe ff       	call   f01077fe <kmalloc>
f011d996:	83 c4 10             	add    $0x10,%esp
f011d999:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011d99f:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011d9a5:	89 c1                	mov    %eax,%ecx
f011d9a7:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011d9ae:	10 00 00 
f011d9b1:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011d9b7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d9bc:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011d9c2:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011d9c8:	ba 00 00 00 00       	mov    $0x0,%edx
f011d9cd:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011d9d3:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011d9d9:	29 d0                	sub    %edx,%eax
f011d9db:	89 c3                	mov    %eax,%ebx
f011d9dd:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011d9e4:	10 00 00 
f011d9e7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d9ec:	0f b6 d0             	movzbl %al,%edx
f011d9ef:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011d9f5:	01 d0                	add    %edx,%eax
f011d9f7:	48                   	dec    %eax
f011d9f8:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011d9fe:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011da04:	ba 00 00 00 00       	mov    $0x0,%edx
f011da09:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011da0f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011da15:	29 d0                	sub    %edx,%eax
f011da17:	01 c3                	add    %eax,%ebx
f011da19:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011da20:	10 00 00 
f011da23:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011da28:	0f b6 c0             	movzbl %al,%eax
f011da2b:	c1 e0 04             	shl    $0x4,%eax
f011da2e:	89 c2                	mov    %eax,%edx
f011da30:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011da36:	01 d0                	add    %edx,%eax
f011da38:	48                   	dec    %eax
f011da39:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011da3f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011da45:	ba 00 00 00 00       	mov    $0x0,%edx
f011da4a:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011da50:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011da56:	29 d0                	sub    %edx,%eax
f011da58:	01 d8                	add    %ebx,%eax
f011da5a:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011da5f:	39 c1                	cmp    %eax,%ecx
f011da61:	74 17                	je     f011da7a <test_kmalloc_firstfit2+0x6d6>
f011da63:	83 ec 04             	sub    $0x4,%esp
f011da66:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011da6b:	68 c8 03 00 00       	push   $0x3c8
f011da70:	68 da ac 13 f0       	push   $0xf013acda
f011da75:	e8 81 27 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011da7a:	e8 bd 62 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011da7f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011da82:	74 17                	je     f011da9b <test_kmalloc_firstfit2+0x6f7>
f011da84:	83 ec 04             	sub    $0x4,%esp
f011da87:	68 f4 ac 13 f0       	push   $0xf013acf4
f011da8c:	68 c9 03 00 00       	push   $0x3c9
f011da91:	68 da ac 13 f0       	push   $0xf013acda
f011da96:	e8 60 27 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: ");
f011da9b:	e8 bb ee fe ff       	call   f010c95b <sys_calculate_free_frames>
f011daa0:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011daa3:	29 c2                	sub    %eax,%edx
f011daa5:	89 d0                	mov    %edx,%eax
f011daa7:	83 f8 02             	cmp    $0x2,%eax
f011daaa:	74 17                	je     f011dac3 <test_kmalloc_firstfit2+0x71f>
f011daac:	83 ec 04             	sub    $0x4,%esp
f011daaf:	68 24 b1 13 f0       	push   $0xf013b124
f011dab4:	68 ca 03 00 00       	push   $0x3ca
f011dab9:	68 da ac 13 f0       	push   $0xf013acda
f011dabe:	e8 38 27 fe ff       	call   f01001fb <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011dac3:	e8 93 ee fe ff       	call   f010c95b <sys_calculate_free_frames>
f011dac8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dacb:	e8 6c 62 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011dad0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011dad3:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011dad9:	83 ec 0c             	sub    $0xc,%esp
f011dadc:	50                   	push   %eax
f011dadd:	e8 de 9d fe ff       	call   f01078c0 <kfree>
f011dae2:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dae5:	e8 52 62 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011daea:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011daed:	74 17                	je     f011db06 <test_kmalloc_firstfit2+0x762>
f011daef:	83 ec 04             	sub    $0x4,%esp
f011daf2:	68 f4 ac 13 f0       	push   $0xf013acf4
f011daf7:	68 d0 03 00 00       	push   $0x3d0
f011dafc:	68 da ac 13 f0       	push   $0xf013acda
f011db01:	e8 f5 26 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011db06:	e8 50 ee fe ff       	call   f010c95b <sys_calculate_free_frames>
f011db0b:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011db0e:	3d 00 02 00 00       	cmp    $0x200,%eax
f011db13:	74 17                	je     f011db2c <test_kmalloc_firstfit2+0x788>
f011db15:	83 ec 04             	sub    $0x4,%esp
f011db18:	68 37 b1 13 f0       	push   $0xf013b137
f011db1d:	68 d1 03 00 00       	push   $0x3d1
f011db22:	68 da ac 13 f0       	push   $0xf013acda
f011db27:	e8 cf 26 fe ff       	call   f01001fb <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011db2c:	e8 2a ee fe ff       	call   f010c95b <sys_calculate_free_frames>
f011db31:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011db34:	e8 03 62 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011db39:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011db3c:	83 ec 0c             	sub    $0xc,%esp
f011db3f:	68 00 fc 2f 00       	push   $0x2ffc00
f011db44:	e8 b5 9c fe ff       	call   f01077fe <kmalloc>
f011db49:	83 c4 10             	add    $0x10,%esp
f011db4c:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011db52:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011db58:	89 c1                	mov    %eax,%ecx
f011db5a:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011db61:	10 00 00 
f011db64:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011db6a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011db6f:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011db75:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011db7b:	ba 00 00 00 00       	mov    $0x0,%edx
f011db80:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011db86:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011db8c:	29 d0                	sub    %edx,%eax
f011db8e:	89 c3                	mov    %eax,%ebx
f011db90:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011db97:	10 00 00 
f011db9a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011db9f:	0f b6 d0             	movzbl %al,%edx
f011dba2:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011dba8:	01 d0                	add    %edx,%eax
f011dbaa:	48                   	dec    %eax
f011dbab:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011dbb1:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011dbb7:	ba 00 00 00 00       	mov    $0x0,%edx
f011dbbc:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011dbc2:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011dbc8:	29 d0                	sub    %edx,%eax
f011dbca:	01 c3                	add    %eax,%ebx
f011dbcc:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011dbd3:	10 00 00 
f011dbd6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011dbdb:	0f b6 c0             	movzbl %al,%eax
f011dbde:	c1 e0 04             	shl    $0x4,%eax
f011dbe1:	89 c2                	mov    %eax,%edx
f011dbe3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011dbe9:	01 d0                	add    %edx,%eax
f011dbeb:	48                   	dec    %eax
f011dbec:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011dbf2:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011dbf8:	ba 00 00 00 00       	mov    $0x0,%edx
f011dbfd:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011dc03:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011dc09:	29 d0                	sub    %edx,%eax
f011dc0b:	01 d8                	add    %ebx,%eax
f011dc0d:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011dc12:	39 c1                	cmp    %eax,%ecx
f011dc14:	74 17                	je     f011dc2d <test_kmalloc_firstfit2+0x889>
f011dc16:	83 ec 04             	sub    $0x4,%esp
f011dc19:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011dc1e:	68 d7 03 00 00       	push   $0x3d7
f011dc23:	68 da ac 13 f0       	push   $0xf013acda
f011dc28:	e8 ce 25 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dc2d:	e8 0a 61 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011dc32:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011dc35:	74 17                	je     f011dc4e <test_kmalloc_firstfit2+0x8aa>
f011dc37:	83 ec 04             	sub    $0x4,%esp
f011dc3a:	68 f4 ac 13 f0       	push   $0xf013acf4
f011dc3f:	68 d8 03 00 00       	push   $0x3d8
f011dc44:	68 da ac 13 f0       	push   $0xf013acda
f011dc49:	e8 ad 25 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011dc4e:	e8 08 ed fe ff       	call   f010c95b <sys_calculate_free_frames>
f011dc53:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011dc56:	29 c2                	sub    %eax,%edx
f011dc58:	89 d0                	mov    %edx,%eax
f011dc5a:	3d 00 03 00 00       	cmp    $0x300,%eax
f011dc5f:	74 17                	je     f011dc78 <test_kmalloc_firstfit2+0x8d4>
f011dc61:	83 ec 04             	sub    $0x4,%esp
f011dc64:	68 24 b1 13 f0       	push   $0xf013b124
f011dc69:	68 d9 03 00 00       	push   $0x3d9
f011dc6e:	68 da ac 13 f0       	push   $0xf013acda
f011dc73:	e8 83 25 fe ff       	call   f01001fb <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011dc78:	e8 de ec fe ff       	call   f010c95b <sys_calculate_free_frames>
f011dc7d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dc80:	e8 b7 60 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011dc85:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011dc88:	83 ec 0c             	sub    $0xc,%esp
f011dc8b:	68 00 18 20 00       	push   $0x201800
f011dc90:	e8 69 9b fe ff       	call   f01077fe <kmalloc>
f011dc95:	83 c4 10             	add    $0x10,%esp
f011dc98:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011dc9e:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011dca4:	89 c1                	mov    %eax,%ecx
f011dca6:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011dcad:	10 00 00 
f011dcb0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011dcb6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dcbb:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011dcc1:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011dcc7:	ba 00 00 00 00       	mov    $0x0,%edx
f011dccc:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011dcd2:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011dcd8:	29 d0                	sub    %edx,%eax
f011dcda:	89 c3                	mov    %eax,%ebx
f011dcdc:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011dce3:	10 00 00 
f011dce6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011dceb:	0f b6 d0             	movzbl %al,%edx
f011dcee:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011dcf4:	01 d0                	add    %edx,%eax
f011dcf6:	48                   	dec    %eax
f011dcf7:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011dcfd:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011dd03:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd08:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011dd0e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011dd14:	29 d0                	sub    %edx,%eax
f011dd16:	01 c3                	add    %eax,%ebx
f011dd18:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011dd1f:	10 00 00 
f011dd22:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011dd27:	0f b6 c0             	movzbl %al,%eax
f011dd2a:	c1 e0 04             	shl    $0x4,%eax
f011dd2d:	89 c2                	mov    %eax,%edx
f011dd2f:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011dd35:	01 d0                	add    %edx,%eax
f011dd37:	48                   	dec    %eax
f011dd38:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011dd3e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011dd44:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd49:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011dd4f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011dd55:	29 d0                	sub    %edx,%eax
f011dd57:	01 d8                	add    %ebx,%eax
f011dd59:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011dd5e:	39 c1                	cmp    %eax,%ecx
f011dd60:	74 17                	je     f011dd79 <test_kmalloc_firstfit2+0x9d5>
f011dd62:	83 ec 04             	sub    $0x4,%esp
f011dd65:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011dd6a:	68 df 03 00 00       	push   $0x3df
f011dd6f:	68 da ac 13 f0       	push   $0xf013acda
f011dd74:	e8 82 24 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dd79:	e8 be 5f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011dd7e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011dd81:	74 17                	je     f011dd9a <test_kmalloc_firstfit2+0x9f6>
f011dd83:	83 ec 04             	sub    $0x4,%esp
f011dd86:	68 f4 ac 13 f0       	push   $0xf013acf4
f011dd8b:	68 e0 03 00 00       	push   $0x3e0
f011dd90:	68 da ac 13 f0       	push   $0xf013acda
f011dd95:	e8 61 24 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011dd9a:	e8 bc eb fe ff       	call   f010c95b <sys_calculate_free_frames>
f011dd9f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011dda2:	29 c2                	sub    %eax,%edx
f011dda4:	89 d0                	mov    %edx,%eax
f011dda6:	3d 02 02 00 00       	cmp    $0x202,%eax
f011ddab:	74 17                	je     f011ddc4 <test_kmalloc_firstfit2+0xa20>
f011ddad:	83 ec 04             	sub    $0x4,%esp
f011ddb0:	68 24 b1 13 f0       	push   $0xf013b124
f011ddb5:	68 e1 03 00 00       	push   $0x3e1
f011ddba:	68 da ac 13 f0       	push   $0xf013acda
f011ddbf:	e8 37 24 fe ff       	call   f01001fb <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011ddc4:	e8 92 eb fe ff       	call   f010c95b <sys_calculate_free_frames>
f011ddc9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ddcc:	e8 6b 5f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ddd1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011ddd4:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011ddda:	83 ec 0c             	sub    $0xc,%esp
f011dddd:	50                   	push   %eax
f011ddde:	e8 dd 9a fe ff       	call   f01078c0 <kfree>
f011dde3:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dde6:	e8 51 5f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ddeb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ddee:	74 17                	je     f011de07 <test_kmalloc_firstfit2+0xa63>
f011ddf0:	83 ec 04             	sub    $0x4,%esp
f011ddf3:	68 f4 ac 13 f0       	push   $0xf013acf4
f011ddf8:	68 e7 03 00 00       	push   $0x3e7
f011ddfd:	68 da ac 13 f0       	push   $0xf013acda
f011de02:	e8 f4 23 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011de07:	e8 4f eb fe ff       	call   f010c95b <sys_calculate_free_frames>
f011de0c:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011de0f:	3d 00 03 00 00       	cmp    $0x300,%eax
f011de14:	74 17                	je     f011de2d <test_kmalloc_firstfit2+0xa89>
f011de16:	83 ec 04             	sub    $0x4,%esp
f011de19:	68 37 b1 13 f0       	push   $0xf013b137
f011de1e:	68 e8 03 00 00       	push   $0x3e8
f011de23:	68 da ac 13 f0       	push   $0xf013acda
f011de28:	e8 ce 23 fe ff       	call   f01001fb <_panic>

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB + 4 KB = 4 MB + 4 KB]
		freeFrames = sys_calculate_free_frames() ;
f011de2d:	e8 29 eb fe ff       	call   f010c95b <sys_calculate_free_frames>
f011de32:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011de35:	e8 02 5f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011de3a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011de3d:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011de43:	83 ec 0c             	sub    $0xc,%esp
f011de46:	50                   	push   %eax
f011de47:	e8 74 9a fe ff       	call   f01078c0 <kfree>
f011de4c:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011de4f:	e8 07 eb fe ff       	call   f010c95b <sys_calculate_free_frames>
f011de54:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011de57:	3d 00 02 00 00       	cmp    $0x200,%eax
f011de5c:	74 17                	je     f011de75 <test_kmalloc_firstfit2+0xad1>
f011de5e:	83 ec 04             	sub    $0x4,%esp
f011de61:	68 37 b1 13 f0       	push   $0xf013b137
f011de66:	68 ee 03 00 00       	push   $0x3ee
f011de6b:	68 da ac 13 f0       	push   $0xf013acda
f011de70:	e8 86 23 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011de75:	e8 c2 5e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011de7a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011de7d:	74 17                	je     f011de96 <test_kmalloc_firstfit2+0xaf2>
f011de7f:	83 ec 04             	sub    $0x4,%esp
f011de82:	68 f4 ac 13 f0       	push   $0xf013acf4
f011de87:	68 ef 03 00 00       	push   $0x3ef
f011de8c:	68 da ac 13 f0       	push   $0xf013acda
f011de91:	e8 65 23 fe ff       	call   f01001fb <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011de96:	e8 c0 ea fe ff       	call   f010c95b <sys_calculate_free_frames>
f011de9b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011de9e:	e8 99 5e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011dea3:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011dea6:	83 ec 0c             	sub    $0xc,%esp
f011dea9:	68 00 fc 4f 00       	push   $0x4ffc00
f011deae:	e8 4b 99 fe ff       	call   f01077fe <kmalloc>
f011deb3:	83 c4 10             	add    $0x10,%esp
f011deb6:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011debc:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011dec2:	89 c1                	mov    %eax,%ecx
f011dec4:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011decb:	10 00 00 
f011dece:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011ded4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ded9:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011dedf:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011dee5:	ba 00 00 00 00       	mov    $0x0,%edx
f011deea:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011def0:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011def6:	29 d0                	sub    %edx,%eax
f011def8:	89 c3                	mov    %eax,%ebx
f011defa:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011df01:	10 00 00 
f011df04:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011df09:	0f b6 d0             	movzbl %al,%edx
f011df0c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011df12:	01 d0                	add    %edx,%eax
f011df14:	48                   	dec    %eax
f011df15:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011df1b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011df21:	ba 00 00 00 00       	mov    $0x0,%edx
f011df26:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011df2c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011df32:	29 d0                	sub    %edx,%eax
f011df34:	01 c3                	add    %eax,%ebx
f011df36:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011df3d:	10 00 00 
f011df40:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011df45:	0f b6 c0             	movzbl %al,%eax
f011df48:	c1 e0 04             	shl    $0x4,%eax
f011df4b:	89 c2                	mov    %eax,%edx
f011df4d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011df53:	01 d0                	add    %edx,%eax
f011df55:	48                   	dec    %eax
f011df56:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011df5c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011df62:	ba 00 00 00 00       	mov    $0x0,%edx
f011df67:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011df6d:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011df73:	29 d0                	sub    %edx,%eax
f011df75:	01 d8                	add    %ebx,%eax
f011df77:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011df7c:	39 c1                	cmp    %eax,%ecx
f011df7e:	74 17                	je     f011df97 <test_kmalloc_firstfit2+0xbf3>
f011df80:	83 ec 04             	sub    $0x4,%esp
f011df83:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011df88:	68 f5 03 00 00       	push   $0x3f5
f011df8d:	68 da ac 13 f0       	push   $0xf013acda
f011df92:	e8 64 22 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011df97:	e8 a0 5d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011df9c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011df9f:	74 17                	je     f011dfb8 <test_kmalloc_firstfit2+0xc14>
f011dfa1:	83 ec 04             	sub    $0x4,%esp
f011dfa4:	68 f4 ac 13 f0       	push   $0xf013acf4
f011dfa9:	68 f6 03 00 00       	push   $0x3f6
f011dfae:	68 da ac 13 f0       	push   $0xf013acda
f011dfb3:	e8 43 22 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   5*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011dfb8:	e8 9e e9 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011dfbd:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011dfc0:	29 c2                	sub    %eax,%edx
f011dfc2:	89 d0                	mov    %edx,%eax
f011dfc4:	3d 00 05 00 00       	cmp    $0x500,%eax
f011dfc9:	74 17                	je     f011dfe2 <test_kmalloc_firstfit2+0xc3e>
f011dfcb:	83 ec 04             	sub    $0x4,%esp
f011dfce:	68 24 b1 13 f0       	push   $0xf013b124
f011dfd3:	68 f7 03 00 00       	push   $0x3f7
f011dfd8:	68 da ac 13 f0       	push   $0xf013acda
f011dfdd:	e8 19 22 fe ff       	call   f01001fb <_panic>
//		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
//		if ((sys_calculate_free_frames() - freeFrames) != 514) panic("Wrong free: ");

		//[FIRST FIT Case]
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011dfe2:	e8 74 e9 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011dfe7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dfea:	e8 4d 5d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011dfef:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega-kilo);
f011dff2:	83 ec 0c             	sub    $0xc,%esp
f011dff5:	68 00 fc 2f 00       	push   $0x2ffc00
f011dffa:	e8 ff 97 fe ff       	call   f01077fe <kmalloc>
f011dfff:	83 c4 10             	add    $0x10,%esp
f011e002:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011e008:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011e00e:	89 c1                	mov    %eax,%ecx
f011e010:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011e017:	10 00 00 
f011e01a:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011e020:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e025:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011e02b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e031:	ba 00 00 00 00       	mov    $0x0,%edx
f011e036:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011e03c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e042:	29 d0                	sub    %edx,%eax
f011e044:	89 c3                	mov    %eax,%ebx
f011e046:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011e04d:	10 00 00 
f011e050:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e055:	0f b6 d0             	movzbl %al,%edx
f011e058:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011e05e:	01 d0                	add    %edx,%eax
f011e060:	48                   	dec    %eax
f011e061:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011e067:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011e06d:	ba 00 00 00 00       	mov    $0x0,%edx
f011e072:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011e078:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011e07e:	29 d0                	sub    %edx,%eax
f011e080:	01 c3                	add    %eax,%ebx
f011e082:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011e089:	10 00 00 
f011e08c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e091:	0f b6 c0             	movzbl %al,%eax
f011e094:	c1 e0 04             	shl    $0x4,%eax
f011e097:	89 c2                	mov    %eax,%edx
f011e099:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011e09f:	01 d0                	add    %edx,%eax
f011e0a1:	48                   	dec    %eax
f011e0a2:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011e0a8:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011e0ae:	ba 00 00 00 00       	mov    $0x0,%edx
f011e0b3:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011e0b9:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011e0bf:	29 d0                	sub    %edx,%eax
f011e0c1:	01 d8                	add    %ebx,%eax
f011e0c3:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e0c8:	39 c1                	cmp    %eax,%ecx
f011e0ca:	74 17                	je     f011e0e3 <test_kmalloc_firstfit2+0xd3f>
f011e0cc:	83 ec 04             	sub    $0x4,%esp
f011e0cf:	68 f4 b0 13 f0       	push   $0xf013b0f4
f011e0d4:	68 05 04 00 00       	push   $0x405
f011e0d9:	68 da ac 13 f0       	push   $0xf013acda
f011e0de:	e8 18 21 fe ff       	call   f01001fb <_panic>
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e0e3:	e8 54 5c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011e0e8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e0eb:	74 17                	je     f011e104 <test_kmalloc_firstfit2+0xd60>
f011e0ed:	83 ec 04             	sub    $0x4,%esp
f011e0f0:	68 f4 ac 13 f0       	push   $0xf013acf4
f011e0f5:	68 06 04 00 00       	push   $0x406
f011e0fa:	68 da ac 13 f0       	push   $0xf013acda
f011e0ff:	e8 f7 20 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e104:	e8 52 e8 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011e109:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e10c:	29 c2                	sub    %eax,%edx
f011e10e:	89 d0                	mov    %edx,%eax
f011e110:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e115:	74 17                	je     f011e12e <test_kmalloc_firstfit2+0xd8a>
f011e117:	83 ec 04             	sub    $0x4,%esp
f011e11a:	68 24 b1 13 f0       	push   $0xf013b124
f011e11f:	68 07 04 00 00       	push   $0x407
f011e124:	68 da ac 13 f0       	push   $0xf013acda
f011e129:	e8 cd 20 fe ff       	call   f01001fb <_panic>
	}
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[9] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011e12e:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011e135:	10 00 00 
f011e138:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011e13e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e143:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011e149:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011e14f:	ba 00 00 00 00       	mov    $0x0,%edx
f011e154:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011e15a:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011e160:	29 d0                	sub    %edx,%eax
f011e162:	89 c1                	mov    %eax,%ecx
f011e164:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011e16b:	10 00 00 
f011e16e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e173:	0f b6 d0             	movzbl %al,%edx
f011e176:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011e17c:	01 d0                	add    %edx,%eax
f011e17e:	48                   	dec    %eax
f011e17f:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011e185:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011e18b:	ba 00 00 00 00       	mov    $0x0,%edx
f011e190:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011e196:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011e19c:	29 d0                	sub    %edx,%eax
f011e19e:	01 c1                	add    %eax,%ecx
f011e1a0:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011e1a7:	10 00 00 
f011e1aa:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e1af:	0f b6 c0             	movzbl %al,%eax
f011e1b2:	c1 e0 04             	shl    $0x4,%eax
f011e1b5:	89 c2                	mov    %eax,%edx
f011e1b7:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011e1bd:	01 d0                	add    %edx,%eax
f011e1bf:	48                   	dec    %eax
f011e1c0:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011e1c6:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011e1cc:	ba 00 00 00 00       	mov    $0x0,%edx
f011e1d1:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011e1d7:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011e1dd:	29 d0                	sub    %edx,%eax
f011e1df:	01 c8                	add    %ecx,%eax
f011e1e1:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011e1e6:	29 c2                	sub    %eax,%edx
f011e1e8:	89 d0                	mov    %edx,%eax
f011e1ea:	83 ec 0c             	sub    $0xc,%esp
f011e1ed:	50                   	push   %eax
f011e1ee:	e8 0b 96 fe ff       	call   f01077fe <kmalloc>
f011e1f3:	83 c4 10             	add    $0x10,%esp
f011e1f6:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if (ptr_allocations[9] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011e1fc:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011e202:	85 c0                	test   %eax,%eax
f011e204:	74 17                	je     f011e21d <test_kmalloc_firstfit2+0xe79>
f011e206:	83 ec 04             	sub    $0x4,%esp
f011e209:	68 24 b2 13 f0       	push   $0xf013b224
f011e20e:	68 0d 04 00 00       	push   $0x40d
f011e213:	68 da ac 13 f0       	push   $0xf013acda
f011e218:	e8 de 1f fe ff       	call   f01001fb <_panic>

		cprintf("Congratulations!! test FIRST FIT allocation (2) completed successfully.\n");
f011e21d:	83 ec 0c             	sub    $0xc,%esp
f011e220:	68 64 b3 13 f0       	push   $0xf013b364
f011e225:	e8 58 2a fe ff       	call   f0100c82 <cprintf>
f011e22a:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011e22d:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011e232:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011e235:	5b                   	pop    %ebx
f011e236:	5f                   	pop    %edi
f011e237:	5d                   	pop    %ebp
f011e238:	c3                   	ret    

f011e239 <test_kmalloc_worstfit>:

int test_kmalloc_worstfit()
{
f011e239:	55                   	push   %ebp
f011e23a:	89 e5                	mov    %esp,%ebp
f011e23c:	57                   	push   %edi
f011e23d:	53                   	push   %ebx
f011e23e:	81 ec 50 04 00 00    	sub    $0x450,%esp
	cprintf("==============================================\n");
f011e244:	83 ec 0c             	sub    $0xc,%esp
f011e247:	68 1c ac 13 f0       	push   $0xf013ac1c
f011e24c:	e8 31 2a fe ff       	call   f0100c82 <cprintf>
f011e251:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011e254:	83 ec 0c             	sub    $0xc,%esp
f011e257:	68 4c ac 13 f0       	push   $0xf013ac4c
f011e25c:	e8 21 2a fe ff       	call   f0100c82 <cprintf>
f011e261:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011e264:	83 ec 0c             	sub    $0xc,%esp
f011e267:	68 1c ac 13 f0       	push   $0xf013ac1c
f011e26c:	e8 11 2a fe ff       	call   f0100c82 <cprintf>
f011e271:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011e274:	8d 95 b4 fb ff ff    	lea    -0x44c(%ebp),%edx
f011e27a:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011e27f:	b8 00 00 00 00       	mov    $0x0,%eax
f011e284:	89 d7                	mov    %edx,%edi
f011e286:	f3 ab                	rep stos %eax,%es:(%edi)

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011e288:	e8 ce e6 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011e28d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011e290:	e8 a7 5a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011e295:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int count = 0;
f011e298:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int i;
	for(i = 0; i< 79 ;i++)
f011e29f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011e2a6:	eb 1f                	jmp    f011e2c7 <test_kmalloc_worstfit+0x8e>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011e2a8:	83 ec 0c             	sub    $0xc,%esp
f011e2ab:	68 00 00 20 00       	push   $0x200000
f011e2b0:	e8 49 95 fe ff       	call   f01077fe <kmalloc>
f011e2b5:	83 c4 10             	add    $0x10,%esp
f011e2b8:	89 c2                	mov    %eax,%edx
f011e2ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e2bd:	89 94 85 b4 fb ff ff 	mov    %edx,-0x44c(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int count = 0;
	int i;
	for(i = 0; i< 79 ;i++)
f011e2c4:	ff 45 f4             	incl   -0xc(%ebp)
f011e2c7:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f011e2cb:	7e db                	jle    f011e2a8 <test_kmalloc_worstfit+0x6f>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
f011e2cd:	83 ec 0c             	sub    $0xc,%esp
f011e2d0:	68 00 b0 1f 00       	push   $0x1fb000
f011e2d5:	e8 24 95 fe ff       	call   f01077fe <kmalloc>
f011e2da:	83 c4 10             	add    $0x10,%esp
f011e2dd:	89 85 f0 fc ff ff    	mov    %eax,-0x310(%ebp)

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011e2e3:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011e2e9:	89 c1                	mov    %eax,%ecx
f011e2eb:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011e2f2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011e2f5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e2fa:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011e2fd:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e300:	ba 00 00 00 00       	mov    $0x0,%edx
f011e305:	f7 75 e4             	divl   -0x1c(%ebp)
f011e308:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e30b:	29 d0                	sub    %edx,%eax
f011e30d:	89 c3                	mov    %eax,%ebx
f011e30f:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011e316:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e31b:	0f b6 d0             	movzbl %al,%edx
f011e31e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e321:	01 d0                	add    %edx,%eax
f011e323:	48                   	dec    %eax
f011e324:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011e327:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e32a:	ba 00 00 00 00       	mov    $0x0,%edx
f011e32f:	f7 75 dc             	divl   -0x24(%ebp)
f011e332:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e335:	29 d0                	sub    %edx,%eax
f011e337:	01 c3                	add    %eax,%ebx
f011e339:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011e340:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e345:	0f b6 c0             	movzbl %al,%eax
f011e348:	c1 e0 04             	shl    $0x4,%eax
f011e34b:	89 c2                	mov    %eax,%edx
f011e34d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011e350:	01 d0                	add    %edx,%eax
f011e352:	48                   	dec    %eax
f011e353:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011e356:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e359:	ba 00 00 00 00       	mov    $0x0,%edx
f011e35e:	f7 75 d4             	divl   -0x2c(%ebp)
f011e361:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e364:	29 d0                	sub    %edx,%eax
f011e366:	01 d8                	add    %ebx,%eax
f011e368:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e36d:	39 c1                	cmp    %eax,%ecx
f011e36f:	0f 85 c0 04 00 00    	jne    f011e835 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011e375:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011e37b:	89 c1                	mov    %eax,%ecx
f011e37d:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011e384:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011e387:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e38c:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011e38f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e392:	ba 00 00 00 00       	mov    $0x0,%edx
f011e397:	f7 75 cc             	divl   -0x34(%ebp)
f011e39a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e39d:	29 d0                	sub    %edx,%eax
f011e39f:	89 c3                	mov    %eax,%ebx
f011e3a1:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011e3a8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e3ad:	0f b6 d0             	movzbl %al,%edx
f011e3b0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011e3b3:	01 d0                	add    %edx,%eax
f011e3b5:	48                   	dec    %eax
f011e3b6:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011e3b9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e3bc:	ba 00 00 00 00       	mov    $0x0,%edx
f011e3c1:	f7 75 c4             	divl   -0x3c(%ebp)
f011e3c4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e3c7:	29 d0                	sub    %edx,%eax
f011e3c9:	01 c3                	add    %eax,%ebx
f011e3cb:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011e3d2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e3d7:	0f b6 c0             	movzbl %al,%eax
f011e3da:	c1 e0 04             	shl    $0x4,%eax
f011e3dd:	89 c2                	mov    %eax,%edx
f011e3df:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011e3e2:	01 d0                	add    %edx,%eax
f011e3e4:	48                   	dec    %eax
f011e3e5:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011e3e8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e3eb:	ba 00 00 00 00       	mov    $0x0,%edx
f011e3f0:	f7 75 bc             	divl   -0x44(%ebp)
f011e3f3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e3f6:	29 d0                	sub    %edx,%eax
f011e3f8:	01 d8                	add    %ebx,%eax
f011e3fa:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011e3ff:	39 c1                	cmp    %eax,%ecx
f011e401:	0f 85 2e 04 00 00    	jne    f011e835 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011e407:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
f011e40d:	89 c1                	mov    %eax,%ecx
f011e40f:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011e416:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011e419:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e41e:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011e421:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e424:	ba 00 00 00 00       	mov    $0x0,%edx
f011e429:	f7 75 b4             	divl   -0x4c(%ebp)
f011e42c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e42f:	29 d0                	sub    %edx,%eax
f011e431:	89 c3                	mov    %eax,%ebx
f011e433:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011e43a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e43f:	0f b6 d0             	movzbl %al,%edx
f011e442:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011e445:	01 d0                	add    %edx,%eax
f011e447:	48                   	dec    %eax
f011e448:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011e44b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e44e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e453:	f7 75 ac             	divl   -0x54(%ebp)
f011e456:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e459:	29 d0                	sub    %edx,%eax
f011e45b:	01 c3                	add    %eax,%ebx
f011e45d:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011e464:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e469:	0f b6 c0             	movzbl %al,%eax
f011e46c:	c1 e0 04             	shl    $0x4,%eax
f011e46f:	89 c2                	mov    %eax,%edx
f011e471:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011e474:	01 d0                	add    %edx,%eax
f011e476:	48                   	dec    %eax
f011e477:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011e47a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e47d:	ba 00 00 00 00       	mov    $0x0,%edx
f011e482:	f7 75 a4             	divl   -0x5c(%ebp)
f011e485:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e488:	29 d0                	sub    %edx,%eax
f011e48a:	01 d8                	add    %ebx,%eax
f011e48c:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011e491:	39 c1                	cmp    %eax,%ecx
f011e493:	0f 85 9c 03 00 00    	jne    f011e835 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011e499:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011e49f:	89 c1                	mov    %eax,%ecx
f011e4a1:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011e4a8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011e4ab:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e4b0:	89 45 98             	mov    %eax,-0x68(%ebp)
f011e4b3:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e4b6:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4bb:	f7 75 9c             	divl   -0x64(%ebp)
f011e4be:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e4c1:	29 d0                	sub    %edx,%eax
f011e4c3:	89 c3                	mov    %eax,%ebx
f011e4c5:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011e4cc:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e4d1:	0f b6 d0             	movzbl %al,%edx
f011e4d4:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011e4d7:	01 d0                	add    %edx,%eax
f011e4d9:	48                   	dec    %eax
f011e4da:	89 45 90             	mov    %eax,-0x70(%ebp)
f011e4dd:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e4e0:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4e5:	f7 75 94             	divl   -0x6c(%ebp)
f011e4e8:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e4eb:	29 d0                	sub    %edx,%eax
f011e4ed:	01 c3                	add    %eax,%ebx
f011e4ef:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011e4f6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e4fb:	0f b6 c0             	movzbl %al,%eax
f011e4fe:	c1 e0 04             	shl    $0x4,%eax
f011e501:	89 c2                	mov    %eax,%edx
f011e503:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011e506:	01 d0                	add    %edx,%eax
f011e508:	48                   	dec    %eax
f011e509:	89 45 88             	mov    %eax,-0x78(%ebp)
f011e50c:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e50f:	ba 00 00 00 00       	mov    $0x0,%edx
f011e514:	f7 75 8c             	divl   -0x74(%ebp)
f011e517:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e51a:	29 d0                	sub    %edx,%eax
f011e51c:	01 d8                	add    %ebx,%eax
f011e51e:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011e523:	39 c1                	cmp    %eax,%ecx
f011e525:	0f 85 0a 03 00 00    	jne    f011e835 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011e52b:	8b 85 f0 fb ff ff    	mov    -0x410(%ebp),%eax
f011e531:	89 c1                	mov    %eax,%ecx
f011e533:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011e53a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011e53d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e542:	89 45 80             	mov    %eax,-0x80(%ebp)
f011e545:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e548:	ba 00 00 00 00       	mov    $0x0,%edx
f011e54d:	f7 75 84             	divl   -0x7c(%ebp)
f011e550:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e553:	29 d0                	sub    %edx,%eax
f011e555:	89 c3                	mov    %eax,%ebx
f011e557:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011e55e:	10 00 00 
f011e561:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e566:	0f b6 d0             	movzbl %al,%edx
f011e569:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011e56f:	01 d0                	add    %edx,%eax
f011e571:	48                   	dec    %eax
f011e572:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011e578:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e57e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e583:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011e589:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e58f:	29 d0                	sub    %edx,%eax
f011e591:	01 c3                	add    %eax,%ebx
f011e593:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011e59a:	10 00 00 
f011e59d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e5a2:	0f b6 c0             	movzbl %al,%eax
f011e5a5:	c1 e0 04             	shl    $0x4,%eax
f011e5a8:	89 c2                	mov    %eax,%edx
f011e5aa:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011e5b0:	01 d0                	add    %edx,%eax
f011e5b2:	48                   	dec    %eax
f011e5b3:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011e5b9:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e5bf:	ba 00 00 00 00       	mov    $0x0,%edx
f011e5c4:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011e5ca:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e5d0:	29 d0                	sub    %edx,%eax
f011e5d2:	01 d8                	add    %ebx,%eax
f011e5d4:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011e5d9:	39 c1                	cmp    %eax,%ecx
f011e5db:	0f 85 54 02 00 00    	jne    f011e835 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011e5e1:	8b 85 04 fc ff ff    	mov    -0x3fc(%ebp),%eax
f011e5e7:	89 c1                	mov    %eax,%ecx
f011e5e9:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011e5f0:	10 00 00 
f011e5f3:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011e5f9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e5fe:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011e604:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e60a:	ba 00 00 00 00       	mov    $0x0,%edx
f011e60f:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011e615:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e61b:	29 d0                	sub    %edx,%eax
f011e61d:	89 c3                	mov    %eax,%ebx
f011e61f:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011e626:	10 00 00 
f011e629:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e62e:	0f b6 d0             	movzbl %al,%edx
f011e631:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011e637:	01 d0                	add    %edx,%eax
f011e639:	48                   	dec    %eax
f011e63a:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011e640:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e646:	ba 00 00 00 00       	mov    $0x0,%edx
f011e64b:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011e651:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e657:	29 d0                	sub    %edx,%eax
f011e659:	01 c3                	add    %eax,%ebx
f011e65b:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011e662:	10 00 00 
f011e665:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e66a:	0f b6 c0             	movzbl %al,%eax
f011e66d:	c1 e0 04             	shl    $0x4,%eax
f011e670:	89 c2                	mov    %eax,%edx
f011e672:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e678:	01 d0                	add    %edx,%eax
f011e67a:	48                   	dec    %eax
f011e67b:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011e681:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e687:	ba 00 00 00 00       	mov    $0x0,%edx
f011e68c:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011e692:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e698:	29 d0                	sub    %edx,%eax
f011e69a:	01 d8                	add    %ebx,%eax
f011e69c:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011e6a1:	39 c1                	cmp    %eax,%ecx
f011e6a3:	0f 85 8c 01 00 00    	jne    f011e835 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011e6a9:	8b 85 7c fc ff ff    	mov    -0x384(%ebp),%eax
f011e6af:	89 c1                	mov    %eax,%ecx
f011e6b1:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011e6b8:	10 00 00 
f011e6bb:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e6c1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e6c6:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011e6cc:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e6d2:	ba 00 00 00 00       	mov    $0x0,%edx
f011e6d7:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011e6dd:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e6e3:	29 d0                	sub    %edx,%eax
f011e6e5:	89 c3                	mov    %eax,%ebx
f011e6e7:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011e6ee:	10 00 00 
f011e6f1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e6f6:	0f b6 d0             	movzbl %al,%edx
f011e6f9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e6ff:	01 d0                	add    %edx,%eax
f011e701:	48                   	dec    %eax
f011e702:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011e708:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e70e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e713:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011e719:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e71f:	29 d0                	sub    %edx,%eax
f011e721:	01 c3                	add    %eax,%ebx
f011e723:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011e72a:	10 00 00 
f011e72d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e732:	0f b6 c0             	movzbl %al,%eax
f011e735:	c1 e0 04             	shl    $0x4,%eax
f011e738:	89 c2                	mov    %eax,%edx
f011e73a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011e740:	01 d0                	add    %edx,%eax
f011e742:	48                   	dec    %eax
f011e743:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011e749:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e74f:	ba 00 00 00 00       	mov    $0x0,%edx
f011e754:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011e75a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e760:	29 d0                	sub    %edx,%eax
f011e762:	01 d8                	add    %ebx,%eax
f011e764:	2d 00 c0 bf 03       	sub    $0x3bfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011e769:	39 c1                	cmp    %eax,%ecx
f011e76b:	0f 85 c4 00 00 00    	jne    f011e835 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
f011e771:	8b 85 f0 fc ff ff    	mov    -0x310(%ebp),%eax
f011e777:	89 c1                	mov    %eax,%ecx
f011e779:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011e780:	10 00 00 
f011e783:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011e789:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e78e:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011e794:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011e79a:	ba 00 00 00 00       	mov    $0x0,%edx
f011e79f:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011e7a5:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011e7ab:	29 d0                	sub    %edx,%eax
f011e7ad:	89 c3                	mov    %eax,%ebx
f011e7af:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011e7b6:	10 00 00 
f011e7b9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e7be:	0f b6 d0             	movzbl %al,%edx
f011e7c1:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011e7c7:	01 d0                	add    %edx,%eax
f011e7c9:	48                   	dec    %eax
f011e7ca:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011e7d0:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011e7d6:	ba 00 00 00 00       	mov    $0x0,%edx
f011e7db:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011e7e1:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011e7e7:	29 d0                	sub    %edx,%eax
f011e7e9:	01 c3                	add    %eax,%ebx
f011e7eb:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011e7f2:	10 00 00 
f011e7f5:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e7fa:	0f b6 c0             	movzbl %al,%eax
f011e7fd:	c1 e0 04             	shl    $0x4,%eax
f011e800:	89 c2                	mov    %eax,%edx
f011e802:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011e808:	01 d0                	add    %edx,%eax
f011e80a:	48                   	dec    %eax
f011e80b:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011e811:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011e817:	ba 00 00 00 00       	mov    $0x0,%edx
f011e81c:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011e822:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011e828:	29 d0                	sub    %edx,%eax
f011e82a:	01 d8                	add    %ebx,%eax
f011e82c:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011e831:	39 c1                	cmp    %eax,%ecx
f011e833:	74 17                	je     f011e84c <test_kmalloc_worstfit+0x613>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
		panic("Wrong allocation, Check worst fitting strategy is working correctly");
f011e835:	83 ec 04             	sub    $0x4,%esp
f011e838:	68 b0 b3 13 f0       	push   $0xf013b3b0
f011e83d:	68 31 04 00 00       	push   $0x431
f011e842:	68 da ac 13 f0       	push   $0xf013acda
f011e847:	e8 af 19 fe ff       	call   f01001fb <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e84c:	e8 eb 54 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011e851:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e854:	74 17                	je     f011e86d <test_kmalloc_worstfit+0x634>
f011e856:	83 ec 04             	sub    $0x4,%esp
f011e859:	68 f4 ac 13 f0       	push   $0xf013acf4
f011e85e:	68 33 04 00 00       	push   $0x433
f011e863:	68 da ac 13 f0       	push   $0xf013acda
f011e868:	e8 8e 19 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE)/(PAGE_SIZE) ) panic("Wrong allocation");
f011e86d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e870:	e8 e6 e0 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011e875:	29 c3                	sub    %eax,%ebx
f011e877:	89 d8                	mov    %ebx,%eax
f011e879:	3d fb 9f 00 00       	cmp    $0x9ffb,%eax
f011e87e:	74 17                	je     f011e897 <test_kmalloc_worstfit+0x65e>
f011e880:	83 ec 04             	sub    $0x4,%esp
f011e883:	68 97 af 13 f0       	push   $0xf013af97
f011e888:	68 34 04 00 00       	push   $0x434
f011e88d:	68 da ac 13 f0       	push   $0xf013acda
f011e892:	e8 64 19 fe ff       	call   f01001fb <_panic>

	//make memory holes
	freeFrames = sys_calculate_free_frames() ;
f011e897:	e8 bf e0 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011e89c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames() ;
f011e89f:	e8 98 54 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011e8a4:	89 45 ec             	mov    %eax,-0x14(%ebp)

	kfree(ptr_allocations[0]);		//Hole 1 = 2 M
f011e8a7:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011e8ad:	83 ec 0c             	sub    $0xc,%esp
f011e8b0:	50                   	push   %eax
f011e8b1:	e8 0a 90 fe ff       	call   f01078c0 <kfree>
f011e8b6:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		//Hole 2 = 4 M
f011e8b9:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011e8bf:	83 ec 0c             	sub    $0xc,%esp
f011e8c2:	50                   	push   %eax
f011e8c3:	e8 f8 8f fe ff       	call   f01078c0 <kfree>
f011e8c8:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011e8cb:	8b 85 c0 fb ff ff    	mov    -0x440(%ebp),%eax
f011e8d1:	83 ec 0c             	sub    $0xc,%esp
f011e8d4:	50                   	push   %eax
f011e8d5:	e8 e6 8f fe ff       	call   f01078c0 <kfree>
f011e8da:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		//Hole 3 = 6 M
f011e8dd:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011e8e3:	83 ec 0c             	sub    $0xc,%esp
f011e8e6:	50                   	push   %eax
f011e8e7:	e8 d4 8f fe ff       	call   f01078c0 <kfree>
f011e8ec:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011e8ef:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
f011e8f5:	83 ec 0c             	sub    $0xc,%esp
f011e8f8:	50                   	push   %eax
f011e8f9:	e8 c2 8f fe ff       	call   f01078c0 <kfree>
f011e8fe:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011e901:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
f011e907:	83 ec 0c             	sub    $0xc,%esp
f011e90a:	50                   	push   %eax
f011e90b:	e8 b0 8f fe ff       	call   f01078c0 <kfree>
f011e910:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[30]);		//Hole 4 = 10 M
f011e913:	8b 85 2c fc ff ff    	mov    -0x3d4(%ebp),%eax
f011e919:	83 ec 0c             	sub    $0xc,%esp
f011e91c:	50                   	push   %eax
f011e91d:	e8 9e 8f fe ff       	call   f01078c0 <kfree>
f011e922:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[31]);
f011e925:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f011e92b:	83 ec 0c             	sub    $0xc,%esp
f011e92e:	50                   	push   %eax
f011e92f:	e8 8c 8f fe ff       	call   f01078c0 <kfree>
f011e934:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[32]);
f011e937:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f011e93d:	83 ec 0c             	sub    $0xc,%esp
f011e940:	50                   	push   %eax
f011e941:	e8 7a 8f fe ff       	call   f01078c0 <kfree>
f011e946:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[33]);
f011e949:	8b 85 38 fc ff ff    	mov    -0x3c8(%ebp),%eax
f011e94f:	83 ec 0c             	sub    $0xc,%esp
f011e952:	50                   	push   %eax
f011e953:	e8 68 8f fe ff       	call   f01078c0 <kfree>
f011e958:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[34]);
f011e95b:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f011e961:	83 ec 0c             	sub    $0xc,%esp
f011e964:	50                   	push   %eax
f011e965:	e8 56 8f fe ff       	call   f01078c0 <kfree>
f011e96a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[70]); 	//Hole 5 = 8 M
f011e96d:	8b 85 cc fc ff ff    	mov    -0x334(%ebp),%eax
f011e973:	83 ec 0c             	sub    $0xc,%esp
f011e976:	50                   	push   %eax
f011e977:	e8 44 8f fe ff       	call   f01078c0 <kfree>
f011e97c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[71]);
f011e97f:	8b 85 d0 fc ff ff    	mov    -0x330(%ebp),%eax
f011e985:	83 ec 0c             	sub    $0xc,%esp
f011e988:	50                   	push   %eax
f011e989:	e8 32 8f fe ff       	call   f01078c0 <kfree>
f011e98e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[72]);
f011e991:	8b 85 d4 fc ff ff    	mov    -0x32c(%ebp),%eax
f011e997:	83 ec 0c             	sub    $0xc,%esp
f011e99a:	50                   	push   %eax
f011e99b:	e8 20 8f fe ff       	call   f01078c0 <kfree>
f011e9a0:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[73]);
f011e9a3:	8b 85 d8 fc ff ff    	mov    -0x328(%ebp),%eax
f011e9a9:	83 ec 0c             	sub    $0xc,%esp
f011e9ac:	50                   	push   %eax
f011e9ad:	e8 0e 8f fe ff       	call   f01078c0 <kfree>
f011e9b2:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e9b5:	e8 82 53 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011e9ba:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e9bd:	74 17                	je     f011e9d6 <test_kmalloc_worstfit+0x79d>
f011e9bf:	83 ec 04             	sub    $0x4,%esp
f011e9c2:	68 f4 ac 13 f0       	push   $0xf013acf4
f011e9c7:	68 4a 04 00 00       	push   $0x44a
f011e9cc:	68 da ac 13 f0       	push   $0xf013acda
f011e9d1:	e8 25 18 fe ff       	call   f01001fb <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((15*2*Mega))/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011e9d6:	e8 80 df fe ff       	call   f010c95b <sys_calculate_free_frames>
f011e9db:	89 c2                	mov    %eax,%edx
f011e9dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011e9e0:	29 c2                	sub    %eax,%edx
f011e9e2:	89 d0                	mov    %edx,%eax
f011e9e4:	3d 00 1e 00 00       	cmp    $0x1e00,%eax
f011e9e9:	74 17                	je     f011ea02 <test_kmalloc_worstfit+0x7c9>
f011e9eb:	83 ec 04             	sub    $0x4,%esp
f011e9ee:	68 a8 af 13 f0       	push   $0xf013afa8
f011e9f3:	68 4b 04 00 00       	push   $0x44b
f011e9f8:	68 da ac 13 f0       	push   $0xf013acda
f011e9fd:	e8 f9 17 fe ff       	call   f01001fb <_panic>

	// Test worst fit
	freeFrames = sys_calculate_free_frames() ;
f011ea02:	e8 54 df fe ff       	call   f010c95b <sys_calculate_free_frames>
f011ea07:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ea0a:	e8 2d 53 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ea0f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* tempAddress = kmalloc(Mega);		//Use Hole 4 -> Hole 4 = 9 M
f011ea12:	83 ec 0c             	sub    $0xc,%esp
f011ea15:	68 00 00 10 00       	push   $0x100000
f011ea1a:	e8 df 8d fe ff       	call   f01077fe <kmalloc>
f011ea1f:	83 c4 10             	add    $0x10,%esp
f011ea22:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03C00000)
f011ea28:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011ea2f:	10 00 00 
f011ea32:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011ea38:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ea3d:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011ea43:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011ea49:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea4e:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011ea54:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011ea5a:	29 d0                	sub    %edx,%eax
f011ea5c:	89 c1                	mov    %eax,%ecx
f011ea5e:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011ea65:	10 00 00 
f011ea68:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ea6d:	0f b6 d0             	movzbl %al,%edx
f011ea70:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011ea76:	01 d0                	add    %edx,%eax
f011ea78:	48                   	dec    %eax
f011ea79:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011ea7f:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011ea85:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea8a:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011ea90:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011ea96:	29 d0                	sub    %edx,%eax
f011ea98:	01 c1                	add    %eax,%ecx
f011ea9a:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011eaa1:	10 00 00 
f011eaa4:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011eaa9:	0f b6 c0             	movzbl %al,%eax
f011eaac:	c1 e0 04             	shl    $0x4,%eax
f011eaaf:	89 c2                	mov    %eax,%edx
f011eab1:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011eab7:	01 d0                	add    %edx,%eax
f011eab9:	48                   	dec    %eax
f011eaba:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011eac0:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011eac6:	ba 00 00 00 00       	mov    $0x0,%edx
f011eacb:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011ead1:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011ead7:	29 d0                	sub    %edx,%eax
f011ead9:	01 c8                	add    %ecx,%eax
f011eadb:	8d 90 00 40 c0 f9    	lea    -0x63fc000(%eax),%edx
f011eae1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011eae7:	39 c2                	cmp    %eax,%edx
f011eae9:	74 17                	je     f011eb02 <test_kmalloc_worstfit+0x8c9>
		panic("Worst Fit not working correctly");
f011eaeb:	83 ec 04             	sub    $0x4,%esp
f011eaee:	68 f4 b3 13 f0       	push   $0xf013b3f4
f011eaf3:	68 52 04 00 00       	push   $0x452
f011eaf8:	68 da ac 13 f0       	push   $0xf013acda
f011eafd:	e8 f9 16 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011eb02:	e8 35 52 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011eb07:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011eb0a:	74 17                	je     f011eb23 <test_kmalloc_worstfit+0x8ea>
f011eb0c:	83 ec 04             	sub    $0x4,%esp
f011eb0f:	68 f4 ac 13 f0       	push   $0xf013acf4
f011eb14:	68 53 04 00 00       	push   $0x453
f011eb19:	68 da ac 13 f0       	push   $0xf013acda
f011eb1e:	e8 d8 16 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  1*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011eb23:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011eb26:	e8 30 de fe ff       	call   f010c95b <sys_calculate_free_frames>
f011eb2b:	29 c3                	sub    %eax,%ebx
f011eb2d:	89 d8                	mov    %ebx,%eax
f011eb2f:	3d 00 01 00 00       	cmp    $0x100,%eax
f011eb34:	74 17                	je     f011eb4d <test_kmalloc_worstfit+0x914>
f011eb36:	83 ec 04             	sub    $0x4,%esp
f011eb39:	68 12 b2 13 f0       	push   $0xf013b212
f011eb3e:	68 54 04 00 00       	push   $0x454
f011eb43:	68 da ac 13 f0       	push   $0xf013acda
f011eb48:	e8 ae 16 fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011eb4d:	ff 45 e8             	incl   -0x18(%ebp)
f011eb50:	83 ec 08             	sub    $0x8,%esp
f011eb53:	ff 75 e8             	pushl  -0x18(%ebp)
f011eb56:	68 14 b4 13 f0       	push   $0xf013b414
f011eb5b:	e8 22 21 fe ff       	call   f0100c82 <cprintf>
f011eb60:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011eb63:	e8 f3 dd fe ff       	call   f010c95b <sys_calculate_free_frames>
f011eb68:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011eb6b:	e8 cc 51 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011eb70:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4 * Mega);			//Use Hole 4 -> Hole 4 = 5 M
f011eb73:	83 ec 0c             	sub    $0xc,%esp
f011eb76:	68 00 00 40 00       	push   $0x400000
f011eb7b:	e8 7e 8c fe ff       	call   f01077fe <kmalloc>
f011eb80:	83 c4 10             	add    $0x10,%esp
f011eb83:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03D00000)
f011eb89:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011eb90:	10 00 00 
f011eb93:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011eb99:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011eb9e:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011eba4:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011ebaa:	ba 00 00 00 00       	mov    $0x0,%edx
f011ebaf:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011ebb5:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011ebbb:	29 d0                	sub    %edx,%eax
f011ebbd:	89 c1                	mov    %eax,%ecx
f011ebbf:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011ebc6:	10 00 00 
f011ebc9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ebce:	0f b6 d0             	movzbl %al,%edx
f011ebd1:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011ebd7:	01 d0                	add    %edx,%eax
f011ebd9:	48                   	dec    %eax
f011ebda:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011ebe0:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011ebe6:	ba 00 00 00 00       	mov    $0x0,%edx
f011ebeb:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011ebf1:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011ebf7:	29 d0                	sub    %edx,%eax
f011ebf9:	01 c1                	add    %eax,%ecx
f011ebfb:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f011ec02:	10 00 00 
f011ec05:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ec0a:	0f b6 c0             	movzbl %al,%eax
f011ec0d:	c1 e0 04             	shl    $0x4,%eax
f011ec10:	89 c2                	mov    %eax,%edx
f011ec12:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011ec18:	01 d0                	add    %edx,%eax
f011ec1a:	48                   	dec    %eax
f011ec1b:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011ec21:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011ec27:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec2c:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011ec32:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011ec38:	29 d0                	sub    %edx,%eax
f011ec3a:	01 c8                	add    %ecx,%eax
f011ec3c:	8d 90 00 40 d0 f9    	lea    -0x62fc000(%eax),%edx
f011ec42:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ec48:	39 c2                	cmp    %eax,%edx
f011ec4a:	74 17                	je     f011ec63 <test_kmalloc_worstfit+0xa2a>
		panic("Worst Fit not working correctly");
f011ec4c:	83 ec 04             	sub    $0x4,%esp
f011ec4f:	68 f4 b3 13 f0       	push   $0xf013b3f4
f011ec54:	68 5b 04 00 00       	push   $0x45b
f011ec59:	68 da ac 13 f0       	push   $0xf013acda
f011ec5e:	e8 98 15 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ec63:	e8 d4 50 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ec68:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ec6b:	74 17                	je     f011ec84 <test_kmalloc_worstfit+0xa4b>
f011ec6d:	83 ec 04             	sub    $0x4,%esp
f011ec70:	68 f4 ac 13 f0       	push   $0xf013acf4
f011ec75:	68 5c 04 00 00       	push   $0x45c
f011ec7a:	68 da ac 13 f0       	push   $0xf013acda
f011ec7f:	e8 77 15 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ec84:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ec87:	e8 cf dc fe ff       	call   f010c95b <sys_calculate_free_frames>
f011ec8c:	29 c3                	sub    %eax,%ebx
f011ec8e:	89 d8                	mov    %ebx,%eax
f011ec90:	3d 00 04 00 00       	cmp    $0x400,%eax
f011ec95:	74 17                	je     f011ecae <test_kmalloc_worstfit+0xa75>
f011ec97:	83 ec 04             	sub    $0x4,%esp
f011ec9a:	68 12 b2 13 f0       	push   $0xf013b212
f011ec9f:	68 5d 04 00 00       	push   $0x45d
f011eca4:	68 da ac 13 f0       	push   $0xf013acda
f011eca9:	e8 4d 15 fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ecae:	ff 45 e8             	incl   -0x18(%ebp)
f011ecb1:	83 ec 08             	sub    $0x8,%esp
f011ecb4:	ff 75 e8             	pushl  -0x18(%ebp)
f011ecb7:	68 14 b4 13 f0       	push   $0xf013b414
f011ecbc:	e8 c1 1f fe ff       	call   f0100c82 <cprintf>
f011ecc1:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ecc4:	e8 92 dc fe ff       	call   f010c95b <sys_calculate_free_frames>
f011ecc9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011eccc:	e8 6b 50 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ecd1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(6*Mega); 			   //Use Hole 5 -> Hole 5 = 2 M
f011ecd4:	83 ec 0c             	sub    $0xc,%esp
f011ecd7:	68 00 00 60 00       	push   $0x600000
f011ecdc:	e8 1d 8b fe ff       	call   f01077fe <kmalloc>
f011ece1:	83 c4 10             	add    $0x10,%esp
f011ece4:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x08C00000)
f011ecea:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f011ecf1:	10 00 00 
f011ecf4:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011ecfa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ecff:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011ed05:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011ed0b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed10:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011ed16:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011ed1c:	29 d0                	sub    %edx,%eax
f011ed1e:	89 c1                	mov    %eax,%ecx
f011ed20:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011ed27:	10 00 00 
f011ed2a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ed2f:	0f b6 d0             	movzbl %al,%edx
f011ed32:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011ed38:	01 d0                	add    %edx,%eax
f011ed3a:	48                   	dec    %eax
f011ed3b:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011ed41:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011ed47:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed4c:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011ed52:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011ed58:	29 d0                	sub    %edx,%eax
f011ed5a:	01 c1                	add    %eax,%ecx
f011ed5c:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f011ed63:	10 00 00 
f011ed66:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ed6b:	0f b6 c0             	movzbl %al,%eax
f011ed6e:	c1 e0 04             	shl    $0x4,%eax
f011ed71:	89 c2                	mov    %eax,%edx
f011ed73:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011ed79:	01 d0                	add    %edx,%eax
f011ed7b:	48                   	dec    %eax
f011ed7c:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011ed82:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011ed88:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed8d:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011ed93:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011ed99:	29 d0                	sub    %edx,%eax
f011ed9b:	01 c8                	add    %ecx,%eax
f011ed9d:	8d 90 00 40 c0 fe    	lea    -0x13fc000(%eax),%edx
f011eda3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011eda9:	39 c2                	cmp    %eax,%edx
f011edab:	74 17                	je     f011edc4 <test_kmalloc_worstfit+0xb8b>
		panic("Worst Fit not working correctly");
f011edad:	83 ec 04             	sub    $0x4,%esp
f011edb0:	68 f4 b3 13 f0       	push   $0xf013b3f4
f011edb5:	68 64 04 00 00       	push   $0x464
f011edba:	68 da ac 13 f0       	push   $0xf013acda
f011edbf:	e8 37 14 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011edc4:	e8 73 4f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011edc9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011edcc:	74 17                	je     f011ede5 <test_kmalloc_worstfit+0xbac>
f011edce:	83 ec 04             	sub    $0x4,%esp
f011edd1:	68 f4 ac 13 f0       	push   $0xf013acf4
f011edd6:	68 65 04 00 00       	push   $0x465
f011eddb:	68 da ac 13 f0       	push   $0xf013acda
f011ede0:	e8 16 14 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  6*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ede5:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ede8:	e8 6e db fe ff       	call   f010c95b <sys_calculate_free_frames>
f011eded:	29 c3                	sub    %eax,%ebx
f011edef:	89 d8                	mov    %ebx,%eax
f011edf1:	3d 00 06 00 00       	cmp    $0x600,%eax
f011edf6:	74 17                	je     f011ee0f <test_kmalloc_worstfit+0xbd6>
f011edf8:	83 ec 04             	sub    $0x4,%esp
f011edfb:	68 12 b2 13 f0       	push   $0xf013b212
f011ee00:	68 66 04 00 00       	push   $0x466
f011ee05:	68 da ac 13 f0       	push   $0xf013acda
f011ee0a:	e8 ec 13 fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ee0f:	ff 45 e8             	incl   -0x18(%ebp)
f011ee12:	83 ec 08             	sub    $0x8,%esp
f011ee15:	ff 75 e8             	pushl  -0x18(%ebp)
f011ee18:	68 14 b4 13 f0       	push   $0xf013b414
f011ee1d:	e8 60 1e fe ff       	call   f0100c82 <cprintf>
f011ee22:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ee25:	e8 31 db fe ff       	call   f010c95b <sys_calculate_free_frames>
f011ee2a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ee2d:	e8 0a 4f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ee32:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(5*Mega); 			   //Use Hole 3 -> Hole 3 = 1 M
f011ee35:	83 ec 0c             	sub    $0xc,%esp
f011ee38:	68 00 00 50 00       	push   $0x500000
f011ee3d:	e8 bc 89 fe ff       	call   f01077fe <kmalloc>
f011ee42:	83 c4 10             	add    $0x10,%esp
f011ee45:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f011ee4b:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f011ee52:	10 00 00 
f011ee55:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011ee5b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ee60:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f011ee66:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011ee6c:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee71:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f011ee77:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011ee7d:	29 d0                	sub    %edx,%eax
f011ee7f:	89 c1                	mov    %eax,%ecx
f011ee81:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f011ee88:	10 00 00 
f011ee8b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ee90:	0f b6 d0             	movzbl %al,%edx
f011ee93:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011ee99:	01 d0                	add    %edx,%eax
f011ee9b:	48                   	dec    %eax
f011ee9c:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f011eea2:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011eea8:	ba 00 00 00 00       	mov    $0x0,%edx
f011eead:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f011eeb3:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011eeb9:	29 d0                	sub    %edx,%eax
f011eebb:	01 c1                	add    %eax,%ecx
f011eebd:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f011eec4:	10 00 00 
f011eec7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011eecc:	0f b6 c0             	movzbl %al,%eax
f011eecf:	c1 e0 04             	shl    $0x4,%eax
f011eed2:	89 c2                	mov    %eax,%edx
f011eed4:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011eeda:	01 d0                	add    %edx,%eax
f011eedc:	48                   	dec    %eax
f011eedd:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f011eee3:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011eee9:	ba 00 00 00 00       	mov    $0x0,%edx
f011eeee:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f011eef4:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011eefa:	29 d0                	sub    %edx,%eax
f011eefc:	01 c8                	add    %ecx,%eax
f011eefe:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f011ef04:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ef0a:	39 c2                	cmp    %eax,%edx
f011ef0c:	74 17                	je     f011ef25 <test_kmalloc_worstfit+0xcec>
		panic("Worst Fit not working correctly");
f011ef0e:	83 ec 04             	sub    $0x4,%esp
f011ef11:	68 f4 b3 13 f0       	push   $0xf013b3f4
f011ef16:	68 6d 04 00 00       	push   $0x46d
f011ef1b:	68 da ac 13 f0       	push   $0xf013acda
f011ef20:	e8 d6 12 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ef25:	e8 12 4e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ef2a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ef2d:	74 17                	je     f011ef46 <test_kmalloc_worstfit+0xd0d>
f011ef2f:	83 ec 04             	sub    $0x4,%esp
f011ef32:	68 f4 ac 13 f0       	push   $0xf013acf4
f011ef37:	68 6e 04 00 00       	push   $0x46e
f011ef3c:	68 da ac 13 f0       	push   $0xf013acda
f011ef41:	e8 b5 12 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  5*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ef46:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ef49:	e8 0d da fe ff       	call   f010c95b <sys_calculate_free_frames>
f011ef4e:	29 c3                	sub    %eax,%ebx
f011ef50:	89 d8                	mov    %ebx,%eax
f011ef52:	3d 00 05 00 00       	cmp    $0x500,%eax
f011ef57:	74 17                	je     f011ef70 <test_kmalloc_worstfit+0xd37>
f011ef59:	83 ec 04             	sub    $0x4,%esp
f011ef5c:	68 12 b2 13 f0       	push   $0xf013b212
f011ef61:	68 6f 04 00 00       	push   $0x46f
f011ef66:	68 da ac 13 f0       	push   $0xf013acda
f011ef6b:	e8 8b 12 fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ef70:	ff 45 e8             	incl   -0x18(%ebp)
f011ef73:	83 ec 08             	sub    $0x8,%esp
f011ef76:	ff 75 e8             	pushl  -0x18(%ebp)
f011ef79:	68 14 b4 13 f0       	push   $0xf013b414
f011ef7e:	e8 ff 1c fe ff       	call   f0100c82 <cprintf>
f011ef83:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ef86:	e8 d0 d9 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011ef8b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ef8e:	e8 a9 4d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ef93:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011ef96:	83 ec 0c             	sub    $0xc,%esp
f011ef99:	68 00 00 40 00       	push   $0x400000
f011ef9e:	e8 5b 88 fe ff       	call   f01077fe <kmalloc>
f011efa3:	83 c4 10             	add    $0x10,%esp
f011efa6:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x04100000)
f011efac:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f011efb3:	10 00 00 
f011efb6:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011efbc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011efc1:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f011efc7:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011efcd:	ba 00 00 00 00       	mov    $0x0,%edx
f011efd2:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f011efd8:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011efde:	29 d0                	sub    %edx,%eax
f011efe0:	89 c1                	mov    %eax,%ecx
f011efe2:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f011efe9:	10 00 00 
f011efec:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011eff1:	0f b6 d0             	movzbl %al,%edx
f011eff4:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011effa:	01 d0                	add    %edx,%eax
f011effc:	48                   	dec    %eax
f011effd:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f011f003:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011f009:	ba 00 00 00 00       	mov    $0x0,%edx
f011f00e:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f011f014:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011f01a:	29 d0                	sub    %edx,%eax
f011f01c:	01 c1                	add    %eax,%ecx
f011f01e:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f011f025:	10 00 00 
f011f028:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f02d:	0f b6 c0             	movzbl %al,%eax
f011f030:	c1 e0 04             	shl    $0x4,%eax
f011f033:	89 c2                	mov    %eax,%edx
f011f035:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011f03b:	01 d0                	add    %edx,%eax
f011f03d:	48                   	dec    %eax
f011f03e:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f011f044:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011f04a:	ba 00 00 00 00       	mov    $0x0,%edx
f011f04f:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f011f055:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011f05b:	29 d0                	sub    %edx,%eax
f011f05d:	01 c8                	add    %ecx,%eax
f011f05f:	8d 90 00 40 10 fa    	lea    -0x5efc000(%eax),%edx
f011f065:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f06b:	39 c2                	cmp    %eax,%edx
f011f06d:	74 17                	je     f011f086 <test_kmalloc_worstfit+0xe4d>
		panic("Worst Fit not working correctly");
f011f06f:	83 ec 04             	sub    $0x4,%esp
f011f072:	68 f4 b3 13 f0       	push   $0xf013b3f4
f011f077:	68 76 04 00 00       	push   $0x476
f011f07c:	68 da ac 13 f0       	push   $0xf013acda
f011f081:	e8 75 11 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f086:	e8 b1 4c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f08b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f08e:	74 17                	je     f011f0a7 <test_kmalloc_worstfit+0xe6e>
f011f090:	83 ec 04             	sub    $0x4,%esp
f011f093:	68 f4 ac 13 f0       	push   $0xf013acf4
f011f098:	68 77 04 00 00       	push   $0x477
f011f09d:	68 da ac 13 f0       	push   $0xf013acda
f011f0a2:	e8 54 11 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f0a7:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f0aa:	e8 ac d8 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011f0af:	29 c3                	sub    %eax,%ebx
f011f0b1:	89 d8                	mov    %ebx,%eax
f011f0b3:	3d 00 04 00 00       	cmp    $0x400,%eax
f011f0b8:	74 17                	je     f011f0d1 <test_kmalloc_worstfit+0xe98>
f011f0ba:	83 ec 04             	sub    $0x4,%esp
f011f0bd:	68 12 b2 13 f0       	push   $0xf013b212
f011f0c2:	68 78 04 00 00       	push   $0x478
f011f0c7:	68 da ac 13 f0       	push   $0xf013acda
f011f0cc:	e8 2a 11 fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f0d1:	ff 45 e8             	incl   -0x18(%ebp)
f011f0d4:	83 ec 08             	sub    $0x8,%esp
f011f0d7:	ff 75 e8             	pushl  -0x18(%ebp)
f011f0da:	68 14 b4 13 f0       	push   $0xf013b414
f011f0df:	e8 9e 1b fe ff       	call   f0100c82 <cprintf>
f011f0e4:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f0e7:	e8 6f d8 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011f0ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f0ef:	e8 48 4c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f0f4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2 * Mega); 			// Use Hole 2 -> Hole 2 = 2 M
f011f0f7:	83 ec 0c             	sub    $0xc,%esp
f011f0fa:	68 00 00 20 00       	push   $0x200000
f011f0ff:	e8 fa 86 fe ff       	call   f01077fe <kmalloc>
f011f104:	83 c4 10             	add    $0x10,%esp
f011f107:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011f10d:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f011f114:	10 00 00 
f011f117:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011f11d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f122:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f011f128:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011f12e:	ba 00 00 00 00       	mov    $0x0,%edx
f011f133:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f011f139:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011f13f:	29 d0                	sub    %edx,%eax
f011f141:	89 c1                	mov    %eax,%ecx
f011f143:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f011f14a:	10 00 00 
f011f14d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f152:	0f b6 d0             	movzbl %al,%edx
f011f155:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011f15b:	01 d0                	add    %edx,%eax
f011f15d:	48                   	dec    %eax
f011f15e:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f011f164:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011f16a:	ba 00 00 00 00       	mov    $0x0,%edx
f011f16f:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f011f175:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011f17b:	29 d0                	sub    %edx,%eax
f011f17d:	01 c1                	add    %eax,%ecx
f011f17f:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f011f186:	10 00 00 
f011f189:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f18e:	0f b6 c0             	movzbl %al,%eax
f011f191:	c1 e0 04             	shl    $0x4,%eax
f011f194:	89 c2                	mov    %eax,%edx
f011f196:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011f19c:	01 d0                	add    %edx,%eax
f011f19e:	48                   	dec    %eax
f011f19f:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f011f1a5:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011f1ab:	ba 00 00 00 00       	mov    $0x0,%edx
f011f1b0:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f011f1b6:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011f1bc:	29 d0                	sub    %edx,%eax
f011f1be:	01 c8                	add    %ecx,%eax
f011f1c0:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011f1c6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f1cc:	39 c2                	cmp    %eax,%edx
f011f1ce:	74 17                	je     f011f1e7 <test_kmalloc_worstfit+0xfae>
		panic("Worst Fit not working correctly");
f011f1d0:	83 ec 04             	sub    $0x4,%esp
f011f1d3:	68 f4 b3 13 f0       	push   $0xf013b3f4
f011f1d8:	68 7f 04 00 00       	push   $0x47f
f011f1dd:	68 da ac 13 f0       	push   $0xf013acda
f011f1e2:	e8 14 10 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f1e7:	e8 50 4b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f1ec:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f1ef:	74 17                	je     f011f208 <test_kmalloc_worstfit+0xfcf>
f011f1f1:	83 ec 04             	sub    $0x4,%esp
f011f1f4:	68 f4 ac 13 f0       	push   $0xf013acf4
f011f1f9:	68 80 04 00 00       	push   $0x480
f011f1fe:	68 da ac 13 f0       	push   $0xf013acda
f011f203:	e8 f3 0f fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  2*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f208:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f20b:	e8 4b d7 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011f210:	29 c3                	sub    %eax,%ebx
f011f212:	89 d8                	mov    %ebx,%eax
f011f214:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f219:	74 17                	je     f011f232 <test_kmalloc_worstfit+0xff9>
f011f21b:	83 ec 04             	sub    $0x4,%esp
f011f21e:	68 12 b2 13 f0       	push   $0xf013b212
f011f223:	68 81 04 00 00       	push   $0x481
f011f228:	68 da ac 13 f0       	push   $0xf013acda
f011f22d:	e8 c9 0f fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f232:	ff 45 e8             	incl   -0x18(%ebp)
f011f235:	83 ec 08             	sub    $0x8,%esp
f011f238:	ff 75 e8             	pushl  -0x18(%ebp)
f011f23b:	68 14 b4 13 f0       	push   $0xf013b414
f011f240:	e8 3d 1a fe ff       	call   f0100c82 <cprintf>
f011f245:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f248:	e8 0e d7 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011f24d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f250:	e8 e7 4a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f255:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(1*Mega + 512*kilo);    // Use Hole 1 -> Hole 1 = 0.5 M
f011f258:	83 ec 0c             	sub    $0xc,%esp
f011f25b:	68 00 00 18 00       	push   $0x180000
f011f260:	e8 99 85 fe ff       	call   f01077fe <kmalloc>
f011f265:	83 c4 10             	add    $0x10,%esp
f011f268:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f011f26e:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f011f275:	10 00 00 
f011f278:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011f27e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f283:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f011f289:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011f28f:	ba 00 00 00 00       	mov    $0x0,%edx
f011f294:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f011f29a:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011f2a0:	29 d0                	sub    %edx,%eax
f011f2a2:	89 c1                	mov    %eax,%ecx
f011f2a4:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f011f2ab:	10 00 00 
f011f2ae:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f2b3:	0f b6 d0             	movzbl %al,%edx
f011f2b6:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011f2bc:	01 d0                	add    %edx,%eax
f011f2be:	48                   	dec    %eax
f011f2bf:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f011f2c5:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011f2cb:	ba 00 00 00 00       	mov    $0x0,%edx
f011f2d0:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f011f2d6:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011f2dc:	29 d0                	sub    %edx,%eax
f011f2de:	01 c1                	add    %eax,%ecx
f011f2e0:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f011f2e7:	10 00 00 
f011f2ea:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f2ef:	0f b6 c0             	movzbl %al,%eax
f011f2f2:	c1 e0 04             	shl    $0x4,%eax
f011f2f5:	89 c2                	mov    %eax,%edx
f011f2f7:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011f2fd:	01 d0                	add    %edx,%eax
f011f2ff:	48                   	dec    %eax
f011f300:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f011f306:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011f30c:	ba 00 00 00 00       	mov    $0x0,%edx
f011f311:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f011f317:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011f31d:	29 d0                	sub    %edx,%eax
f011f31f:	01 c8                	add    %ecx,%eax
f011f321:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f011f327:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f32d:	39 c2                	cmp    %eax,%edx
f011f32f:	74 17                	je     f011f348 <test_kmalloc_worstfit+0x110f>
		panic("Worst Fit not working correctly");
f011f331:	83 ec 04             	sub    $0x4,%esp
f011f334:	68 f4 b3 13 f0       	push   $0xf013b3f4
f011f339:	68 88 04 00 00       	push   $0x488
f011f33e:	68 da ac 13 f0       	push   $0xf013acda
f011f343:	e8 b3 0e fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f348:	e8 ef 49 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f34d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f350:	74 17                	je     f011f369 <test_kmalloc_worstfit+0x1130>
f011f352:	83 ec 04             	sub    $0x4,%esp
f011f355:	68 f4 ac 13 f0       	push   $0xf013acf4
f011f35a:	68 89 04 00 00       	push   $0x489
f011f35f:	68 da ac 13 f0       	push   $0xf013acda
f011f364:	e8 92 0e fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (1*Mega + 512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f369:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f36c:	e8 ea d5 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011f371:	29 c3                	sub    %eax,%ebx
f011f373:	89 d8                	mov    %ebx,%eax
f011f375:	3d 80 01 00 00       	cmp    $0x180,%eax
f011f37a:	74 17                	je     f011f393 <test_kmalloc_worstfit+0x115a>
f011f37c:	83 ec 04             	sub    $0x4,%esp
f011f37f:	68 12 b2 13 f0       	push   $0xf013b212
f011f384:	68 8a 04 00 00       	push   $0x48a
f011f389:	68 da ac 13 f0       	push   $0xf013acda
f011f38e:	e8 68 0e fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f393:	ff 45 e8             	incl   -0x18(%ebp)
f011f396:	83 ec 08             	sub    $0x8,%esp
f011f399:	ff 75 e8             	pushl  -0x18(%ebp)
f011f39c:	68 14 b4 13 f0       	push   $0xf013b414
f011f3a1:	e8 dc 18 fe ff       	call   f0100c82 <cprintf>
f011f3a6:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f3a9:	e8 ad d5 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011f3ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f3b1:	e8 86 49 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f3b6:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 2 -> Hole 2 = 1.5 M
f011f3b9:	83 ec 0c             	sub    $0xc,%esp
f011f3bc:	68 00 00 08 00       	push   $0x80000
f011f3c1:	e8 38 84 fe ff       	call   f01077fe <kmalloc>
f011f3c6:	83 c4 10             	add    $0x10,%esp
f011f3c9:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00600000)
f011f3cf:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f011f3d6:	10 00 00 
f011f3d9:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011f3df:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f3e4:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f011f3ea:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011f3f0:	ba 00 00 00 00       	mov    $0x0,%edx
f011f3f5:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f011f3fb:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011f401:	29 d0                	sub    %edx,%eax
f011f403:	89 c1                	mov    %eax,%ecx
f011f405:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f011f40c:	10 00 00 
f011f40f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f414:	0f b6 d0             	movzbl %al,%edx
f011f417:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011f41d:	01 d0                	add    %edx,%eax
f011f41f:	48                   	dec    %eax
f011f420:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f011f426:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011f42c:	ba 00 00 00 00       	mov    $0x0,%edx
f011f431:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f011f437:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011f43d:	29 d0                	sub    %edx,%eax
f011f43f:	01 c1                	add    %eax,%ecx
f011f441:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f011f448:	10 00 00 
f011f44b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f450:	0f b6 c0             	movzbl %al,%eax
f011f453:	c1 e0 04             	shl    $0x4,%eax
f011f456:	89 c2                	mov    %eax,%edx
f011f458:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011f45e:	01 d0                	add    %edx,%eax
f011f460:	48                   	dec    %eax
f011f461:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f011f467:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011f46d:	ba 00 00 00 00       	mov    $0x0,%edx
f011f472:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f011f478:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011f47e:	29 d0                	sub    %edx,%eax
f011f480:	01 c8                	add    %ecx,%eax
f011f482:	8d 90 00 40 60 f6    	lea    -0x99fc000(%eax),%edx
f011f488:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f48e:	39 c2                	cmp    %eax,%edx
f011f490:	74 17                	je     f011f4a9 <test_kmalloc_worstfit+0x1270>
		panic("Worst Fit not working correctly");
f011f492:	83 ec 04             	sub    $0x4,%esp
f011f495:	68 f4 b3 13 f0       	push   $0xf013b3f4
f011f49a:	68 91 04 00 00       	push   $0x491
f011f49f:	68 da ac 13 f0       	push   $0xf013acda
f011f4a4:	e8 52 0d fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f4a9:	e8 8e 48 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f4ae:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f4b1:	74 17                	je     f011f4ca <test_kmalloc_worstfit+0x1291>
f011f4b3:	83 ec 04             	sub    $0x4,%esp
f011f4b6:	68 f4 ac 13 f0       	push   $0xf013acf4
f011f4bb:	68 92 04 00 00       	push   $0x492
f011f4c0:	68 da ac 13 f0       	push   $0xf013acda
f011f4c5:	e8 31 0d fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f4ca:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f4cd:	e8 89 d4 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011f4d2:	29 c3                	sub    %eax,%ebx
f011f4d4:	89 d8                	mov    %ebx,%eax
f011f4d6:	3d 80 00 00 00       	cmp    $0x80,%eax
f011f4db:	74 17                	je     f011f4f4 <test_kmalloc_worstfit+0x12bb>
f011f4dd:	83 ec 04             	sub    $0x4,%esp
f011f4e0:	68 12 b2 13 f0       	push   $0xf013b212
f011f4e5:	68 93 04 00 00       	push   $0x493
f011f4ea:	68 da ac 13 f0       	push   $0xf013acda
f011f4ef:	e8 07 0d fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f4f4:	ff 45 e8             	incl   -0x18(%ebp)
f011f4f7:	83 ec 08             	sub    $0x8,%esp
f011f4fa:	ff 75 e8             	pushl  -0x18(%ebp)
f011f4fd:	68 14 b4 13 f0       	push   $0xf013b414
f011f502:	e8 7b 17 fe ff       	call   f0100c82 <cprintf>
f011f507:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f50a:	e8 4c d4 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011f50f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f512:	e8 25 48 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f517:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use Hole 5 -> Hole 5 = 2 M - K
f011f51a:	83 ec 0c             	sub    $0xc,%esp
f011f51d:	68 00 04 00 00       	push   $0x400
f011f522:	e8 d7 82 fe ff       	call   f01077fe <kmalloc>
f011f527:	83 c4 10             	add    $0x10,%esp
f011f52a:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09200000)
f011f530:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f011f537:	10 00 00 
f011f53a:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011f540:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f545:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f011f54b:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011f551:	ba 00 00 00 00       	mov    $0x0,%edx
f011f556:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f011f55c:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011f562:	29 d0                	sub    %edx,%eax
f011f564:	89 c1                	mov    %eax,%ecx
f011f566:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f011f56d:	10 00 00 
f011f570:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f575:	0f b6 d0             	movzbl %al,%edx
f011f578:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011f57e:	01 d0                	add    %edx,%eax
f011f580:	48                   	dec    %eax
f011f581:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f011f587:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011f58d:	ba 00 00 00 00       	mov    $0x0,%edx
f011f592:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f011f598:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011f59e:	29 d0                	sub    %edx,%eax
f011f5a0:	01 c1                	add    %eax,%ecx
f011f5a2:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f011f5a9:	10 00 00 
f011f5ac:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f5b1:	0f b6 c0             	movzbl %al,%eax
f011f5b4:	c1 e0 04             	shl    $0x4,%eax
f011f5b7:	89 c2                	mov    %eax,%edx
f011f5b9:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011f5bf:	01 d0                	add    %edx,%eax
f011f5c1:	48                   	dec    %eax
f011f5c2:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f011f5c8:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011f5ce:	ba 00 00 00 00       	mov    $0x0,%edx
f011f5d3:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f011f5d9:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011f5df:	29 d0                	sub    %edx,%eax
f011f5e1:	01 c8                	add    %ecx,%eax
f011f5e3:	8d 90 00 40 20 ff    	lea    -0xdfc000(%eax),%edx
f011f5e9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f5ef:	39 c2                	cmp    %eax,%edx
f011f5f1:	74 17                	je     f011f60a <test_kmalloc_worstfit+0x13d1>
		panic("Worst Fit not working correctly");
f011f5f3:	83 ec 04             	sub    $0x4,%esp
f011f5f6:	68 f4 b3 13 f0       	push   $0xf013b3f4
f011f5fb:	68 9a 04 00 00       	push   $0x49a
f011f600:	68 da ac 13 f0       	push   $0xf013acda
f011f605:	e8 f1 0b fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f60a:	e8 2d 47 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f60f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f612:	74 17                	je     f011f62b <test_kmalloc_worstfit+0x13f2>
f011f614:	83 ec 04             	sub    $0x4,%esp
f011f617:	68 f4 ac 13 f0       	push   $0xf013acf4
f011f61c:	68 9b 04 00 00       	push   $0x49b
f011f621:	68 da ac 13 f0       	push   $0xf013acda
f011f626:	e8 d0 0b fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f62b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f62e:	e8 28 d3 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011f633:	29 c3                	sub    %eax,%ebx
f011f635:	89 d8                	mov    %ebx,%eax
f011f637:	83 f8 01             	cmp    $0x1,%eax
f011f63a:	74 17                	je     f011f653 <test_kmalloc_worstfit+0x141a>
f011f63c:	83 ec 04             	sub    $0x4,%esp
f011f63f:	68 12 b2 13 f0       	push   $0xf013b212
f011f644:	68 9c 04 00 00       	push   $0x49c
f011f649:	68 da ac 13 f0       	push   $0xf013acda
f011f64e:	e8 a8 0b fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f653:	ff 45 e8             	incl   -0x18(%ebp)
f011f656:	83 ec 08             	sub    $0x8,%esp
f011f659:	ff 75 e8             	pushl  -0x18(%ebp)
f011f65c:	68 14 b4 13 f0       	push   $0xf013b414
f011f661:	e8 1c 16 fe ff       	call   f0100c82 <cprintf>
f011f666:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f669:	e8 ed d2 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011f66e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f671:	e8 c6 46 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f676:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2*Mega - 4*kilo); 		// Use Hole 5 -> Hole 5 = 0
f011f679:	83 ec 0c             	sub    $0xc,%esp
f011f67c:	68 00 f0 1f 00       	push   $0x1ff000
f011f681:	e8 78 81 fe ff       	call   f01077fe <kmalloc>
f011f686:	83 c4 10             	add    $0x10,%esp
f011f689:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09201000)
f011f68f:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f011f696:	10 00 00 
f011f699:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011f69f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f6a4:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f011f6aa:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011f6b0:	ba 00 00 00 00       	mov    $0x0,%edx
f011f6b5:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f011f6bb:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011f6c1:	29 d0                	sub    %edx,%eax
f011f6c3:	89 c1                	mov    %eax,%ecx
f011f6c5:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f011f6cc:	10 00 00 
f011f6cf:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f6d4:	0f b6 d0             	movzbl %al,%edx
f011f6d7:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011f6dd:	01 d0                	add    %edx,%eax
f011f6df:	48                   	dec    %eax
f011f6e0:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f011f6e6:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011f6ec:	ba 00 00 00 00       	mov    $0x0,%edx
f011f6f1:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f011f6f7:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011f6fd:	29 d0                	sub    %edx,%eax
f011f6ff:	01 c1                	add    %eax,%ecx
f011f701:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f011f708:	10 00 00 
f011f70b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f710:	0f b6 c0             	movzbl %al,%eax
f011f713:	c1 e0 04             	shl    $0x4,%eax
f011f716:	89 c2                	mov    %eax,%edx
f011f718:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011f71e:	01 d0                	add    %edx,%eax
f011f720:	48                   	dec    %eax
f011f721:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f011f727:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011f72d:	ba 00 00 00 00       	mov    $0x0,%edx
f011f732:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f011f738:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011f73e:	29 d0                	sub    %edx,%eax
f011f740:	01 c8                	add    %ecx,%eax
f011f742:	8d 90 00 50 20 ff    	lea    -0xdfb000(%eax),%edx
f011f748:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f74e:	39 c2                	cmp    %eax,%edx
f011f750:	74 17                	je     f011f769 <test_kmalloc_worstfit+0x1530>
		panic("Worst Fit not working correctly");
f011f752:	83 ec 04             	sub    $0x4,%esp
f011f755:	68 f4 b3 13 f0       	push   $0xf013b3f4
f011f75a:	68 a3 04 00 00       	push   $0x4a3
f011f75f:	68 da ac 13 f0       	push   $0xf013acda
f011f764:	e8 92 0a fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f769:	e8 ce 45 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f76e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f771:	74 17                	je     f011f78a <test_kmalloc_worstfit+0x1551>
f011f773:	83 ec 04             	sub    $0x4,%esp
f011f776:	68 f4 ac 13 f0       	push   $0xf013acf4
f011f77b:	68 a4 04 00 00       	push   $0x4a4
f011f780:	68 da ac 13 f0       	push   $0xf013acda
f011f785:	e8 71 0a fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (2*Mega - 4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f78a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f78d:	e8 c9 d1 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011f792:	29 c3                	sub    %eax,%ebx
f011f794:	89 d8                	mov    %ebx,%eax
f011f796:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011f79b:	74 17                	je     f011f7b4 <test_kmalloc_worstfit+0x157b>
f011f79d:	83 ec 04             	sub    $0x4,%esp
f011f7a0:	68 12 b2 13 f0       	push   $0xf013b212
f011f7a5:	68 a5 04 00 00       	push   $0x4a5
f011f7aa:	68 da ac 13 f0       	push   $0xf013acda
f011f7af:	e8 47 0a fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f7b4:	ff 45 e8             	incl   -0x18(%ebp)
f011f7b7:	83 ec 08             	sub    $0x8,%esp
f011f7ba:	ff 75 e8             	pushl  -0x18(%ebp)
f011f7bd:	68 14 b4 13 f0       	push   $0xf013b414
f011f7c2:	e8 bb 14 fe ff       	call   f0100c82 <cprintf>
f011f7c7:	83 c4 10             	add    $0x10,%esp

	// Check that worst fit returns null in case all holes are not free
	freeFrames = sys_calculate_free_frames() ;
f011f7ca:	e8 8c d1 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011f7cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f7d2:	e8 65 45 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f7d7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 		//No Suitable hole
f011f7da:	83 ec 0c             	sub    $0xc,%esp
f011f7dd:	68 00 00 40 00       	push   $0x400000
f011f7e2:	e8 17 80 fe ff       	call   f01077fe <kmalloc>
f011f7e7:	83 c4 10             	add    $0x10,%esp
f011f7ea:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != 0x0)
f011f7f0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f7f6:	85 c0                	test   %eax,%eax
f011f7f8:	74 17                	je     f011f811 <test_kmalloc_worstfit+0x15d8>
		panic("Worst Fit not working correctly");
f011f7fa:	83 ec 04             	sub    $0x4,%esp
f011f7fd:	68 f4 b3 13 f0       	push   $0xf013b3f4
f011f802:	68 ad 04 00 00       	push   $0x4ad
f011f807:	68 da ac 13 f0       	push   $0xf013acda
f011f80c:	e8 ea 09 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f811:	e8 26 45 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f816:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f819:	74 17                	je     f011f832 <test_kmalloc_worstfit+0x15f9>
f011f81b:	83 ec 04             	sub    $0x4,%esp
f011f81e:	68 f4 ac 13 f0       	push   $0xf013acf4
f011f823:	68 ae 04 00 00       	push   $0x4ae
f011f828:	68 da ac 13 f0       	push   $0xf013acda
f011f82d:	e8 c9 09 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  0) panic("Wrong allocation:");
f011f832:	e8 24 d1 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011f837:	89 c2                	mov    %eax,%edx
f011f839:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011f83c:	39 c2                	cmp    %eax,%edx
f011f83e:	74 17                	je     f011f857 <test_kmalloc_worstfit+0x161e>
f011f840:	83 ec 04             	sub    $0x4,%esp
f011f843:	68 12 b2 13 f0       	push   $0xf013b212
f011f848:	68 af 04 00 00       	push   $0x4af
f011f84d:	68 da ac 13 f0       	push   $0xf013acda
f011f852:	e8 a4 09 fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f857:	ff 45 e8             	incl   -0x18(%ebp)
f011f85a:	83 ec 08             	sub    $0x8,%esp
f011f85d:	ff 75 e8             	pushl  -0x18(%ebp)
f011f860:	68 14 b4 13 f0       	push   $0xf013b414
f011f865:	e8 18 14 fe ff       	call   f0100c82 <cprintf>
f011f86a:	83 c4 10             	add    $0x10,%esp

	cprintf("Congratulations!! test Worst Fit completed successfully.\n");
f011f86d:	83 ec 0c             	sub    $0xc,%esp
f011f870:	68 28 b4 13 f0       	push   $0xf013b428
f011f875:	e8 08 14 fe ff       	call   f0100c82 <cprintf>
f011f87a:	83 c4 10             	add    $0x10,%esp


	return 1;
f011f87d:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011f882:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011f885:	5b                   	pop    %ebx
f011f886:	5f                   	pop    %edi
f011f887:	5d                   	pop    %ebp
f011f888:	c3                   	ret    

f011f889 <test_kfree>:

int test_kfree()
{
f011f889:	55                   	push   %ebp
f011f88a:	89 e5                	mov    %esp,%ebp
f011f88c:	57                   	push   %edi
f011f88d:	53                   	push   %ebx
f011f88e:	81 ec c0 02 00 00    	sub    $0x2c0,%esp
	cprintf("==============================================\n");
f011f894:	83 ec 0c             	sub    $0xc,%esp
f011f897:	68 1c ac 13 f0       	push   $0xf013ac1c
f011f89c:	e8 e1 13 fe ff       	call   f0100c82 <cprintf>
f011f8a1:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011f8a4:	83 ec 0c             	sub    $0xc,%esp
f011f8a7:	68 4c ac 13 f0       	push   $0xf013ac4c
f011f8ac:	e8 d1 13 fe ff       	call   f0100c82 <cprintf>
f011f8b1:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011f8b4:	83 ec 0c             	sub    $0xc,%esp
f011f8b7:	68 1c ac 13 f0       	push   $0xf013ac1c
f011f8bc:	e8 c1 13 fe ff       	call   f0100c82 <cprintf>
f011f8c1:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011f8c4:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f011f8c8:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f011f8cc:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f011f8d2:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f011f8d8:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f011f8df:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011f8e6:	e8 70 d0 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011f8eb:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011f8ee:	8d 95 e8 fd ff ff    	lea    -0x218(%ebp),%edx
f011f8f4:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f8f9:	b8 00 00 00 00       	mov    $0x0,%eax
f011f8fe:	89 d7                	mov    %edx,%edi
f011f900:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011f902:	8d 95 98 fd ff ff    	lea    -0x268(%ebp),%edx
f011f908:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f90d:	b8 00 00 00 00       	mov    $0x0,%eax
f011f912:	89 d7                	mov    %edx,%edi
f011f914:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f011f916:	8d 95 48 fd ff ff    	lea    -0x2b8(%ebp),%edx
f011f91c:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f921:	b8 00 00 00 00       	mov    $0x0,%eax
f011f926:	89 d7                	mov    %edx,%edi
f011f928:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011f92a:	e8 2c d0 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011f92f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f932:	e8 05 44 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f937:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011f93a:	83 ec 0c             	sub    $0xc,%esp
f011f93d:	68 00 fc 1f 00       	push   $0x1ffc00
f011f942:	e8 b7 7e fe ff       	call   f01077fe <kmalloc>
f011f947:	83 c4 10             	add    $0x10,%esp
f011f94a:	89 85 48 fd ff ff    	mov    %eax,-0x2b8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f950:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f011f956:	89 c1                	mov    %eax,%ecx
f011f958:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f011f95f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011f962:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f967:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f011f96a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011f96d:	ba 00 00 00 00       	mov    $0x0,%edx
f011f972:	f7 75 c8             	divl   -0x38(%ebp)
f011f975:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011f978:	29 d0                	sub    %edx,%eax
f011f97a:	89 c3                	mov    %eax,%ebx
f011f97c:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f011f983:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f988:	0f b6 d0             	movzbl %al,%edx
f011f98b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011f98e:	01 d0                	add    %edx,%eax
f011f990:	48                   	dec    %eax
f011f991:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011f994:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011f997:	ba 00 00 00 00       	mov    $0x0,%edx
f011f99c:	f7 75 c0             	divl   -0x40(%ebp)
f011f99f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011f9a2:	29 d0                	sub    %edx,%eax
f011f9a4:	01 c3                	add    %eax,%ebx
f011f9a6:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011f9ad:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f9b2:	0f b6 c0             	movzbl %al,%eax
f011f9b5:	c1 e0 04             	shl    $0x4,%eax
f011f9b8:	89 c2                	mov    %eax,%edx
f011f9ba:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011f9bd:	01 d0                	add    %edx,%eax
f011f9bf:	48                   	dec    %eax
f011f9c0:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011f9c3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011f9c6:	ba 00 00 00 00       	mov    $0x0,%edx
f011f9cb:	f7 75 b8             	divl   -0x48(%ebp)
f011f9ce:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011f9d1:	29 d0                	sub    %edx,%eax
f011f9d3:	01 d8                	add    %ebx,%eax
f011f9d5:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011f9da:	39 c1                	cmp    %eax,%ecx
f011f9dc:	74 17                	je     f011f9f5 <test_kfree+0x16c>
f011f9de:	83 ec 04             	sub    $0x4,%esp
f011f9e1:	68 c0 ad 13 f0       	push   $0xf013adc0
f011f9e6:	68 d7 04 00 00       	push   $0x4d7
f011f9eb:	68 da ac 13 f0       	push   $0xf013acda
f011f9f0:	e8 06 08 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f9f5:	e8 42 43 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f9fa:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f9fd:	74 17                	je     f011fa16 <test_kfree+0x18d>
f011f9ff:	83 ec 04             	sub    $0x4,%esp
f011fa02:	68 f4 ac 13 f0       	push   $0xf013acf4
f011fa07:	68 d8 04 00 00       	push   $0x4d8
f011fa0c:	68 da ac 13 f0       	push   $0xf013acda
f011fa11:	e8 e5 07 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fa16:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fa19:	e8 3d cf fe ff       	call   f010c95b <sys_calculate_free_frames>
f011fa1e:	29 c3                	sub    %eax,%ebx
f011fa20:	89 d8                	mov    %ebx,%eax
f011fa22:	3d 00 02 00 00       	cmp    $0x200,%eax
f011fa27:	74 17                	je     f011fa40 <test_kfree+0x1b7>
f011fa29:	83 ec 04             	sub    $0x4,%esp
f011fa2c:	68 5c ad 13 f0       	push   $0xf013ad5c
f011fa31:	68 d9 04 00 00       	push   $0x4d9
f011fa36:	68 da ac 13 f0       	push   $0xf013acda
f011fa3b:	e8 bb 07 fe ff       	call   f01001fb <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f011fa40:	c7 85 e8 fd ff ff ff 	movl   $0x1ffbff,-0x218(%ebp)
f011fa47:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011fa4a:	e8 0c cf fe ff       	call   f010c95b <sys_calculate_free_frames>
f011fa4f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fa52:	e8 e5 42 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011fa57:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011fa5a:	83 ec 0c             	sub    $0xc,%esp
f011fa5d:	68 00 fc 1f 00       	push   $0x1ffc00
f011fa62:	e8 97 7d fe ff       	call   f01077fe <kmalloc>
f011fa67:	83 c4 10             	add    $0x10,%esp
f011fa6a:	89 85 4c fd ff ff    	mov    %eax,-0x2b4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fa70:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f011fa76:	89 c1                	mov    %eax,%ecx
f011fa78:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f011fa7f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011fa82:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fa87:	89 45 ac             	mov    %eax,-0x54(%ebp)
f011fa8a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011fa8d:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa92:	f7 75 b0             	divl   -0x50(%ebp)
f011fa95:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011fa98:	29 d0                	sub    %edx,%eax
f011fa9a:	89 c3                	mov    %eax,%ebx
f011fa9c:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011faa3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011faa8:	0f b6 d0             	movzbl %al,%edx
f011faab:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011faae:	01 d0                	add    %edx,%eax
f011fab0:	48                   	dec    %eax
f011fab1:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f011fab4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011fab7:	ba 00 00 00 00       	mov    $0x0,%edx
f011fabc:	f7 75 a8             	divl   -0x58(%ebp)
f011fabf:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011fac2:	29 d0                	sub    %edx,%eax
f011fac4:	01 c3                	add    %eax,%ebx
f011fac6:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f011facd:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011fad2:	0f b6 c0             	movzbl %al,%eax
f011fad5:	c1 e0 04             	shl    $0x4,%eax
f011fad8:	89 c2                	mov    %eax,%edx
f011fada:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011fadd:	01 d0                	add    %edx,%eax
f011fadf:	48                   	dec    %eax
f011fae0:	89 45 9c             	mov    %eax,-0x64(%ebp)
f011fae3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011fae6:	ba 00 00 00 00       	mov    $0x0,%edx
f011faeb:	f7 75 a0             	divl   -0x60(%ebp)
f011faee:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011faf1:	29 d0                	sub    %edx,%eax
f011faf3:	01 d8                	add    %ebx,%eax
f011faf5:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011fafa:	39 c1                	cmp    %eax,%ecx
f011fafc:	74 17                	je     f011fb15 <test_kfree+0x28c>
f011fafe:	83 ec 04             	sub    $0x4,%esp
f011fb01:	68 c0 ad 13 f0       	push   $0xf013adc0
f011fb06:	68 e0 04 00 00       	push   $0x4e0
f011fb0b:	68 da ac 13 f0       	push   $0xf013acda
f011fb10:	e8 e6 06 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fb15:	e8 22 42 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011fb1a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fb1d:	74 17                	je     f011fb36 <test_kfree+0x2ad>
f011fb1f:	83 ec 04             	sub    $0x4,%esp
f011fb22:	68 f4 ac 13 f0       	push   $0xf013acf4
f011fb27:	68 e1 04 00 00       	push   $0x4e1
f011fb2c:	68 da ac 13 f0       	push   $0xf013acda
f011fb31:	e8 c5 06 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fb36:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fb39:	e8 1d ce fe ff       	call   f010c95b <sys_calculate_free_frames>
f011fb3e:	29 c3                	sub    %eax,%ebx
f011fb40:	89 d8                	mov    %ebx,%eax
f011fb42:	3d 00 02 00 00       	cmp    $0x200,%eax
f011fb47:	74 17                	je     f011fb60 <test_kfree+0x2d7>
f011fb49:	83 ec 04             	sub    $0x4,%esp
f011fb4c:	68 5c ad 13 f0       	push   $0xf013ad5c
f011fb51:	68 e2 04 00 00       	push   $0x4e2
f011fb56:	68 da ac 13 f0       	push   $0xf013acda
f011fb5b:	e8 9b 06 fe ff       	call   f01001fb <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f011fb60:	c7 85 ec fd ff ff ff 	movl   $0x1ffbff,-0x214(%ebp)
f011fb67:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011fb6a:	e8 ec cd fe ff       	call   f010c95b <sys_calculate_free_frames>
f011fb6f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fb72:	e8 c5 41 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011fb77:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011fb7a:	83 ec 0c             	sub    $0xc,%esp
f011fb7d:	68 00 08 00 00       	push   $0x800
f011fb82:	e8 77 7c fe ff       	call   f01077fe <kmalloc>
f011fb87:	83 c4 10             	add    $0x10,%esp
f011fb8a:	89 85 50 fd ff ff    	mov    %eax,-0x2b0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fb90:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f011fb96:	89 c1                	mov    %eax,%ecx
f011fb98:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f011fb9f:	8b 45 98             	mov    -0x68(%ebp),%eax
f011fba2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fba7:	89 45 94             	mov    %eax,-0x6c(%ebp)
f011fbaa:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011fbad:	ba 00 00 00 00       	mov    $0x0,%edx
f011fbb2:	f7 75 98             	divl   -0x68(%ebp)
f011fbb5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011fbb8:	29 d0                	sub    %edx,%eax
f011fbba:	89 c3                	mov    %eax,%ebx
f011fbbc:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f011fbc3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011fbc8:	0f b6 d0             	movzbl %al,%edx
f011fbcb:	8b 45 90             	mov    -0x70(%ebp),%eax
f011fbce:	01 d0                	add    %edx,%eax
f011fbd0:	48                   	dec    %eax
f011fbd1:	89 45 8c             	mov    %eax,-0x74(%ebp)
f011fbd4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011fbd7:	ba 00 00 00 00       	mov    $0x0,%edx
f011fbdc:	f7 75 90             	divl   -0x70(%ebp)
f011fbdf:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011fbe2:	29 d0                	sub    %edx,%eax
f011fbe4:	01 c3                	add    %eax,%ebx
f011fbe6:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f011fbed:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011fbf2:	0f b6 c0             	movzbl %al,%eax
f011fbf5:	c1 e0 04             	shl    $0x4,%eax
f011fbf8:	89 c2                	mov    %eax,%edx
f011fbfa:	8b 45 88             	mov    -0x78(%ebp),%eax
f011fbfd:	01 d0                	add    %edx,%eax
f011fbff:	48                   	dec    %eax
f011fc00:	89 45 84             	mov    %eax,-0x7c(%ebp)
f011fc03:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011fc06:	ba 00 00 00 00       	mov    $0x0,%edx
f011fc0b:	f7 75 88             	divl   -0x78(%ebp)
f011fc0e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011fc11:	29 d0                	sub    %edx,%eax
f011fc13:	01 d8                	add    %ebx,%eax
f011fc15:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011fc1a:	39 c1                	cmp    %eax,%ecx
f011fc1c:	74 17                	je     f011fc35 <test_kfree+0x3ac>
f011fc1e:	83 ec 04             	sub    $0x4,%esp
f011fc21:	68 c0 ad 13 f0       	push   $0xf013adc0
f011fc26:	68 e9 04 00 00       	push   $0x4e9
f011fc2b:	68 da ac 13 f0       	push   $0xf013acda
f011fc30:	e8 c6 05 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fc35:	e8 02 41 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011fc3a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fc3d:	74 17                	je     f011fc56 <test_kfree+0x3cd>
f011fc3f:	83 ec 04             	sub    $0x4,%esp
f011fc42:	68 f4 ac 13 f0       	push   $0xf013acf4
f011fc47:	68 ea 04 00 00       	push   $0x4ea
f011fc4c:	68 da ac 13 f0       	push   $0xf013acda
f011fc51:	e8 a5 05 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fc56:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fc59:	e8 fd cc fe ff       	call   f010c95b <sys_calculate_free_frames>
f011fc5e:	29 c3                	sub    %eax,%ebx
f011fc60:	89 d8                	mov    %ebx,%eax
f011fc62:	83 f8 01             	cmp    $0x1,%eax
f011fc65:	74 17                	je     f011fc7e <test_kfree+0x3f5>
f011fc67:	83 ec 04             	sub    $0x4,%esp
f011fc6a:	68 5c ad 13 f0       	push   $0xf013ad5c
f011fc6f:	68 eb 04 00 00       	push   $0x4eb
f011fc74:	68 da ac 13 f0       	push   $0xf013acda
f011fc79:	e8 7d 05 fe ff       	call   f01001fb <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f011fc7e:	c7 85 f0 fd ff ff ff 	movl   $0x7ff,-0x210(%ebp)
f011fc85:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f011fc88:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f011fc8e:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f011fc91:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fc98:	eb 0e                	jmp    f011fca8 <test_kfree+0x41f>
		{
			ptr[i] = 2 ;
f011fc9a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fc9d:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fca0:	01 d0                	add    %edx,%eax
f011fca2:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f011fca5:	ff 45 f4             	incl   -0xc(%ebp)
f011fca8:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f011fcae:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fcb1:	7f e7                	jg     f011fc9a <test_kfree+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011fcb3:	e8 a3 cc fe ff       	call   f010c95b <sys_calculate_free_frames>
f011fcb8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fcbb:	e8 7c 40 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011fcc0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011fcc3:	83 ec 0c             	sub    $0xc,%esp
f011fcc6:	68 00 08 00 00       	push   $0x800
f011fccb:	e8 2e 7b fe ff       	call   f01077fe <kmalloc>
f011fcd0:	83 c4 10             	add    $0x10,%esp
f011fcd3:	89 85 54 fd ff ff    	mov    %eax,-0x2ac(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fcd9:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f011fcdf:	89 c1                	mov    %eax,%ecx
f011fce1:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011fce8:	10 00 00 
f011fceb:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011fcf1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fcf6:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011fcfc:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011fd02:	ba 00 00 00 00       	mov    $0x0,%edx
f011fd07:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011fd0d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011fd13:	29 d0                	sub    %edx,%eax
f011fd15:	89 c3                	mov    %eax,%ebx
f011fd17:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011fd1e:	10 00 00 
f011fd21:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011fd26:	0f b6 d0             	movzbl %al,%edx
f011fd29:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011fd2f:	01 d0                	add    %edx,%eax
f011fd31:	48                   	dec    %eax
f011fd32:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011fd38:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011fd3e:	ba 00 00 00 00       	mov    $0x0,%edx
f011fd43:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011fd49:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011fd4f:	29 d0                	sub    %edx,%eax
f011fd51:	01 c3                	add    %eax,%ebx
f011fd53:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011fd5a:	10 00 00 
f011fd5d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011fd62:	0f b6 c0             	movzbl %al,%eax
f011fd65:	c1 e0 04             	shl    $0x4,%eax
f011fd68:	89 c2                	mov    %eax,%edx
f011fd6a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011fd70:	01 d0                	add    %edx,%eax
f011fd72:	48                   	dec    %eax
f011fd73:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011fd79:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011fd7f:	ba 00 00 00 00       	mov    $0x0,%edx
f011fd84:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011fd8a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011fd90:	29 d0                	sub    %edx,%eax
f011fd92:	01 d8                	add    %ebx,%eax
f011fd94:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011fd99:	39 c1                	cmp    %eax,%ecx
f011fd9b:	74 17                	je     f011fdb4 <test_kfree+0x52b>
f011fd9d:	83 ec 04             	sub    $0x4,%esp
f011fda0:	68 c0 ad 13 f0       	push   $0xf013adc0
f011fda5:	68 f7 04 00 00       	push   $0x4f7
f011fdaa:	68 da ac 13 f0       	push   $0xf013acda
f011fdaf:	e8 47 04 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fdb4:	e8 83 3f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011fdb9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fdbc:	74 17                	je     f011fdd5 <test_kfree+0x54c>
f011fdbe:	83 ec 04             	sub    $0x4,%esp
f011fdc1:	68 f4 ac 13 f0       	push   $0xf013acf4
f011fdc6:	68 f8 04 00 00       	push   $0x4f8
f011fdcb:	68 da ac 13 f0       	push   $0xf013acda
f011fdd0:	e8 26 04 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fdd5:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fdd8:	e8 7e cb fe ff       	call   f010c95b <sys_calculate_free_frames>
f011fddd:	29 c3                	sub    %eax,%ebx
f011fddf:	89 d8                	mov    %ebx,%eax
f011fde1:	83 f8 01             	cmp    $0x1,%eax
f011fde4:	74 17                	je     f011fdfd <test_kfree+0x574>
f011fde6:	83 ec 04             	sub    $0x4,%esp
f011fde9:	68 5c ad 13 f0       	push   $0xf013ad5c
f011fdee:	68 f9 04 00 00       	push   $0x4f9
f011fdf3:	68 da ac 13 f0       	push   $0xf013acda
f011fdf8:	e8 fe 03 fe ff       	call   f01001fb <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f011fdfd:	c7 85 f4 fd ff ff ff 	movl   $0x7ff,-0x20c(%ebp)
f011fe04:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f011fe07:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f011fe0d:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f011fe10:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fe17:	eb 0e                	jmp    f011fe27 <test_kfree+0x59e>
		{
			ptr[i] = 3 ;
f011fe19:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fe1c:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fe1f:	01 d0                	add    %edx,%eax
f011fe21:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011fe24:	ff 45 f4             	incl   -0xc(%ebp)
f011fe27:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f011fe2d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fe30:	7f e7                	jg     f011fe19 <test_kfree+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011fe32:	e8 24 cb fe ff       	call   f010c95b <sys_calculate_free_frames>
f011fe37:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fe3a:	e8 fd 3e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011fe3f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011fe42:	83 ec 0c             	sub    $0xc,%esp
f011fe45:	68 00 1c 00 00       	push   $0x1c00
f011fe4a:	e8 af 79 fe ff       	call   f01077fe <kmalloc>
f011fe4f:	83 c4 10             	add    $0x10,%esp
f011fe52:	89 85 58 fd ff ff    	mov    %eax,-0x2a8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fe58:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f011fe5e:	89 c1                	mov    %eax,%ecx
f011fe60:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011fe67:	10 00 00 
f011fe6a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011fe70:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fe75:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011fe7b:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011fe81:	ba 00 00 00 00       	mov    $0x0,%edx
f011fe86:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011fe8c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011fe92:	29 d0                	sub    %edx,%eax
f011fe94:	89 c3                	mov    %eax,%ebx
f011fe96:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011fe9d:	10 00 00 
f011fea0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011fea5:	0f b6 d0             	movzbl %al,%edx
f011fea8:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011feae:	01 d0                	add    %edx,%eax
f011feb0:	48                   	dec    %eax
f011feb1:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011feb7:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011febd:	ba 00 00 00 00       	mov    $0x0,%edx
f011fec2:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011fec8:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011fece:	29 d0                	sub    %edx,%eax
f011fed0:	01 c3                	add    %eax,%ebx
f011fed2:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011fed9:	10 00 00 
f011fedc:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011fee1:	0f b6 c0             	movzbl %al,%eax
f011fee4:	c1 e0 04             	shl    $0x4,%eax
f011fee7:	89 c2                	mov    %eax,%edx
f011fee9:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011feef:	01 d0                	add    %edx,%eax
f011fef1:	48                   	dec    %eax
f011fef2:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011fef8:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011fefe:	ba 00 00 00 00       	mov    $0x0,%edx
f011ff03:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011ff09:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011ff0f:	29 d0                	sub    %edx,%eax
f011ff11:	01 d8                	add    %ebx,%eax
f011ff13:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011ff18:	39 c1                	cmp    %eax,%ecx
f011ff1a:	74 17                	je     f011ff33 <test_kfree+0x6aa>
f011ff1c:	83 ec 04             	sub    $0x4,%esp
f011ff1f:	68 c0 ad 13 f0       	push   $0xf013adc0
f011ff24:	68 05 05 00 00       	push   $0x505
f011ff29:	68 da ac 13 f0       	push   $0xf013acda
f011ff2e:	e8 c8 02 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ff33:	e8 04 3e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ff38:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011ff3b:	74 17                	je     f011ff54 <test_kfree+0x6cb>
f011ff3d:	83 ec 04             	sub    $0x4,%esp
f011ff40:	68 f4 ac 13 f0       	push   $0xf013acf4
f011ff45:	68 06 05 00 00       	push   $0x506
f011ff4a:	68 da ac 13 f0       	push   $0xf013acda
f011ff4f:	e8 a7 02 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f011ff54:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011ff57:	e8 ff c9 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011ff5c:	29 c3                	sub    %eax,%ebx
f011ff5e:	89 d8                	mov    %ebx,%eax
f011ff60:	83 f8 02             	cmp    $0x2,%eax
f011ff63:	74 17                	je     f011ff7c <test_kfree+0x6f3>
f011ff65:	83 ec 04             	sub    $0x4,%esp
f011ff68:	68 5c ad 13 f0       	push   $0xf013ad5c
f011ff6d:	68 07 05 00 00       	push   $0x507
f011ff72:	68 da ac 13 f0       	push   $0xf013acda
f011ff77:	e8 7f 02 fe ff       	call   f01001fb <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f011ff7c:	c7 85 f8 fd ff ff ff 	movl   $0x1bff,-0x208(%ebp)
f011ff83:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f011ff86:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f011ff8c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011ff8f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011ff96:	eb 0e                	jmp    f011ffa6 <test_kfree+0x71d>
		{
			ptr[i] = 4 ;
f011ff98:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ff9b:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ff9e:	01 d0                	add    %edx,%eax
f011ffa0:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011ffa3:	ff 45 f4             	incl   -0xc(%ebp)
f011ffa6:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f011ffac:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011ffaf:	7f e7                	jg     f011ff98 <test_kfree+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011ffb1:	e8 a5 c9 fe ff       	call   f010c95b <sys_calculate_free_frames>
f011ffb6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ffb9:	e8 7e 3d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ffbe:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011ffc1:	83 ec 0c             	sub    $0xc,%esp
f011ffc4:	68 00 fc 2f 00       	push   $0x2ffc00
f011ffc9:	e8 30 78 fe ff       	call   f01077fe <kmalloc>
f011ffce:	83 c4 10             	add    $0x10,%esp
f011ffd1:	89 85 5c fd ff ff    	mov    %eax,-0x2a4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011ffd7:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f011ffdd:	89 c1                	mov    %eax,%ecx
f011ffdf:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011ffe6:	10 00 00 
f011ffe9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011ffef:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fff4:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011fffa:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0120000:	ba 00 00 00 00       	mov    $0x0,%edx
f0120005:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012000b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0120011:	29 d0                	sub    %edx,%eax
f0120013:	89 c3                	mov    %eax,%ebx
f0120015:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012001c:	10 00 00 
f012001f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120024:	0f b6 d0             	movzbl %al,%edx
f0120027:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012002d:	01 d0                	add    %edx,%eax
f012002f:	48                   	dec    %eax
f0120030:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0120036:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012003c:	ba 00 00 00 00       	mov    $0x0,%edx
f0120041:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0120047:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012004d:	29 d0                	sub    %edx,%eax
f012004f:	01 c3                	add    %eax,%ebx
f0120051:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0120058:	10 00 00 
f012005b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120060:	0f b6 c0             	movzbl %al,%eax
f0120063:	c1 e0 04             	shl    $0x4,%eax
f0120066:	89 c2                	mov    %eax,%edx
f0120068:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012006e:	01 d0                	add    %edx,%eax
f0120070:	48                   	dec    %eax
f0120071:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0120077:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012007d:	ba 00 00 00 00       	mov    $0x0,%edx
f0120082:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0120088:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012008e:	29 d0                	sub    %edx,%eax
f0120090:	01 d8                	add    %ebx,%eax
f0120092:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0120097:	39 c1                	cmp    %eax,%ecx
f0120099:	74 17                	je     f01200b2 <test_kfree+0x829>
f012009b:	83 ec 04             	sub    $0x4,%esp
f012009e:	68 c0 ad 13 f0       	push   $0xf013adc0
f01200a3:	68 13 05 00 00       	push   $0x513
f01200a8:	68 da ac 13 f0       	push   $0xf013acda
f01200ad:	e8 49 01 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01200b2:	e8 85 3c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01200b7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01200ba:	74 17                	je     f01200d3 <test_kfree+0x84a>
f01200bc:	83 ec 04             	sub    $0x4,%esp
f01200bf:	68 f4 ac 13 f0       	push   $0xf013acf4
f01200c4:	68 14 05 00 00       	push   $0x514
f01200c9:	68 da ac 13 f0       	push   $0xf013acda
f01200ce:	e8 28 01 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01200d3:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01200d6:	e8 80 c8 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01200db:	29 c3                	sub    %eax,%ebx
f01200dd:	89 d8                	mov    %ebx,%eax
f01200df:	3d 00 03 00 00       	cmp    $0x300,%eax
f01200e4:	74 17                	je     f01200fd <test_kfree+0x874>
f01200e6:	83 ec 04             	sub    $0x4,%esp
f01200e9:	68 5c ad 13 f0       	push   $0xf013ad5c
f01200ee:	68 15 05 00 00       	push   $0x515
f01200f3:	68 da ac 13 f0       	push   $0xf013acda
f01200f8:	e8 fe 00 fe ff       	call   f01001fb <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f01200fd:	c7 85 fc fd ff ff ff 	movl   $0x2ffbff,-0x204(%ebp)
f0120104:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0120107:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f012010d:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0120110:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120117:	eb 0e                	jmp    f0120127 <test_kfree+0x89e>
		{
			ptr[i] = 5 ;
f0120119:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012011c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012011f:	01 d0                	add    %edx,%eax
f0120121:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0120124:	ff 45 f4             	incl   -0xc(%ebp)
f0120127:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012012d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120130:	7f e7                	jg     f0120119 <test_kfree+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0120132:	e8 24 c8 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0120137:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012013a:	e8 fd 3b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012013f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0120142:	83 ec 0c             	sub    $0xc,%esp
f0120145:	68 00 fc 5f 00       	push   $0x5ffc00
f012014a:	e8 af 76 fe ff       	call   f01077fe <kmalloc>
f012014f:	83 c4 10             	add    $0x10,%esp
f0120152:	89 85 60 fd ff ff    	mov    %eax,-0x2a0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120158:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f012015e:	89 c1                	mov    %eax,%ecx
f0120160:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0120167:	10 00 00 
f012016a:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0120170:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120175:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012017b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0120181:	ba 00 00 00 00       	mov    $0x0,%edx
f0120186:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012018c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0120192:	29 d0                	sub    %edx,%eax
f0120194:	89 c3                	mov    %eax,%ebx
f0120196:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012019d:	10 00 00 
f01201a0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01201a5:	0f b6 d0             	movzbl %al,%edx
f01201a8:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01201ae:	01 d0                	add    %edx,%eax
f01201b0:	48                   	dec    %eax
f01201b1:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f01201b7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01201bd:	ba 00 00 00 00       	mov    $0x0,%edx
f01201c2:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f01201c8:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01201ce:	29 d0                	sub    %edx,%eax
f01201d0:	01 c3                	add    %eax,%ebx
f01201d2:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f01201d9:	10 00 00 
f01201dc:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01201e1:	0f b6 c0             	movzbl %al,%eax
f01201e4:	c1 e0 04             	shl    $0x4,%eax
f01201e7:	89 c2                	mov    %eax,%edx
f01201e9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01201ef:	01 d0                	add    %edx,%eax
f01201f1:	48                   	dec    %eax
f01201f2:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f01201f8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01201fe:	ba 00 00 00 00       	mov    $0x0,%edx
f0120203:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0120209:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012020f:	29 d0                	sub    %edx,%eax
f0120211:	01 d8                	add    %ebx,%eax
f0120213:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0120218:	39 c1                	cmp    %eax,%ecx
f012021a:	74 17                	je     f0120233 <test_kfree+0x9aa>
f012021c:	83 ec 04             	sub    $0x4,%esp
f012021f:	68 c0 ad 13 f0       	push   $0xf013adc0
f0120224:	68 21 05 00 00       	push   $0x521
f0120229:	68 da ac 13 f0       	push   $0xf013acda
f012022e:	e8 c8 ff fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120233:	e8 04 3b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120238:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012023b:	74 17                	je     f0120254 <test_kfree+0x9cb>
f012023d:	83 ec 04             	sub    $0x4,%esp
f0120240:	68 f4 ac 13 f0       	push   $0xf013acf4
f0120245:	68 22 05 00 00       	push   $0x522
f012024a:	68 da ac 13 f0       	push   $0xf013acda
f012024f:	e8 a7 ff fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120254:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120257:	e8 ff c6 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012025c:	29 c3                	sub    %eax,%ebx
f012025e:	89 d8                	mov    %ebx,%eax
f0120260:	3d 00 06 00 00       	cmp    $0x600,%eax
f0120265:	74 17                	je     f012027e <test_kfree+0x9f5>
f0120267:	83 ec 04             	sub    $0x4,%esp
f012026a:	68 5c ad 13 f0       	push   $0xf013ad5c
f012026f:	68 23 05 00 00       	push   $0x523
f0120274:	68 da ac 13 f0       	push   $0xf013acda
f0120279:	e8 7d ff fd ff       	call   f01001fb <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f012027e:	c7 85 00 fe ff ff ff 	movl   $0x5ffbff,-0x200(%ebp)
f0120285:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0120288:	e8 ce c6 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012028d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120290:	e8 a7 3a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120295:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0120298:	83 ec 0c             	sub    $0xc,%esp
f012029b:	68 00 38 00 00       	push   $0x3800
f01202a0:	e8 59 75 fe ff       	call   f01077fe <kmalloc>
f01202a5:	83 c4 10             	add    $0x10,%esp
f01202a8:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01202ae:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f01202b4:	89 c1                	mov    %eax,%ecx
f01202b6:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f01202bd:	10 00 00 
f01202c0:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01202c6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01202cb:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f01202d1:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01202d7:	ba 00 00 00 00       	mov    $0x0,%edx
f01202dc:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f01202e2:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01202e8:	29 d0                	sub    %edx,%eax
f01202ea:	89 c3                	mov    %eax,%ebx
f01202ec:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f01202f3:	10 00 00 
f01202f6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01202fb:	0f b6 d0             	movzbl %al,%edx
f01202fe:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0120304:	01 d0                	add    %edx,%eax
f0120306:	48                   	dec    %eax
f0120307:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012030d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0120313:	ba 00 00 00 00       	mov    $0x0,%edx
f0120318:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012031e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0120324:	29 d0                	sub    %edx,%eax
f0120326:	01 c3                	add    %eax,%ebx
f0120328:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012032f:	10 00 00 
f0120332:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120337:	0f b6 c0             	movzbl %al,%eax
f012033a:	c1 e0 04             	shl    $0x4,%eax
f012033d:	89 c2                	mov    %eax,%edx
f012033f:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0120345:	01 d0                	add    %edx,%eax
f0120347:	48                   	dec    %eax
f0120348:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012034e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0120354:	ba 00 00 00 00       	mov    $0x0,%edx
f0120359:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012035f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0120365:	29 d0                	sub    %edx,%eax
f0120367:	01 d8                	add    %ebx,%eax
f0120369:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012036e:	39 c1                	cmp    %eax,%ecx
f0120370:	74 17                	je     f0120389 <test_kfree+0xb00>
f0120372:	83 ec 04             	sub    $0x4,%esp
f0120375:	68 c0 ad 13 f0       	push   $0xf013adc0
f012037a:	68 2a 05 00 00       	push   $0x52a
f012037f:	68 da ac 13 f0       	push   $0xf013acda
f0120384:	e8 72 fe fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120389:	e8 ae 39 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012038e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120391:	74 17                	je     f01203aa <test_kfree+0xb21>
f0120393:	83 ec 04             	sub    $0x4,%esp
f0120396:	68 f4 ac 13 f0       	push   $0xf013acf4
f012039b:	68 2b 05 00 00       	push   $0x52b
f01203a0:	68 da ac 13 f0       	push   $0xf013acda
f01203a5:	e8 51 fe fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01203aa:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01203ad:	e8 a9 c5 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01203b2:	29 c3                	sub    %eax,%ebx
f01203b4:	89 d8                	mov    %ebx,%eax
f01203b6:	83 f8 04             	cmp    $0x4,%eax
f01203b9:	74 17                	je     f01203d2 <test_kfree+0xb49>
f01203bb:	83 ec 04             	sub    $0x4,%esp
f01203be:	68 5c ad 13 f0       	push   $0xf013ad5c
f01203c3:	68 2c 05 00 00       	push   $0x52c
f01203c8:	68 da ac 13 f0       	push   $0xf013acda
f01203cd:	e8 29 fe fd ff       	call   f01001fb <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f01203d2:	c7 85 04 fe ff ff ff 	movl   $0x37ff,-0x1fc(%ebp)
f01203d9:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f01203dc:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f01203e2:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01203e5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01203ec:	eb 0e                	jmp    f01203fc <test_kfree+0xb73>
		{
			ptr[i] = 7 ;
f01203ee:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01203f1:	8b 45 80             	mov    -0x80(%ebp),%eax
f01203f4:	01 d0                	add    %edx,%eax
f01203f6:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01203f9:	ff 45 f4             	incl   -0xc(%ebp)
f01203fc:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0120402:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120405:	7f e7                	jg     f01203ee <test_kfree+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0120407:	e8 4f c5 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012040c:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0120412:	e8 25 39 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120417:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f012041d:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f0120423:	83 ec 0c             	sub    $0xc,%esp
f0120426:	50                   	push   %eax
f0120427:	e8 94 74 fe ff       	call   f01078c0 <kfree>
f012042c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012042f:	e8 08 39 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120434:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f012043a:	74 17                	je     f0120453 <test_kfree+0xbca>
f012043c:	83 ec 04             	sub    $0x4,%esp
f012043f:	68 f4 ac 13 f0       	push   $0xf013acf4
f0120444:	68 3b 05 00 00       	push   $0x53b
f0120449:	68 da ac 13 f0       	push   $0xf013acda
f012044e:	e8 a8 fd fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0120453:	e8 03 c5 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0120458:	89 c2                	mov    %eax,%edx
f012045a:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120460:	29 c2                	sub    %eax,%edx
f0120462:	89 d0                	mov    %edx,%eax
f0120464:	3d 00 02 00 00       	cmp    $0x200,%eax
f0120469:	74 17                	je     f0120482 <test_kfree+0xbf9>
f012046b:	83 ec 04             	sub    $0x4,%esp
f012046e:	68 64 b4 13 f0       	push   $0xf013b464
f0120473:	68 3c 05 00 00       	push   $0x53c
f0120478:	68 da ac 13 f0       	push   $0xf013acda
f012047d:	e8 79 fd fd ff       	call   f01001fb <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120482:	e8 d4 c4 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0120487:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012048d:	e8 aa 38 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120492:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f0120498:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f012049e:	83 ec 0c             	sub    $0xc,%esp
f01204a1:	50                   	push   %eax
f01204a2:	e8 19 74 fe ff       	call   f01078c0 <kfree>
f01204a7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01204aa:	e8 8d 38 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01204af:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01204b5:	74 17                	je     f01204ce <test_kfree+0xc45>
f01204b7:	83 ec 04             	sub    $0x4,%esp
f01204ba:	68 f4 ac 13 f0       	push   $0xf013acf4
f01204bf:	68 42 05 00 00       	push   $0x542
f01204c4:	68 da ac 13 f0       	push   $0xf013acda
f01204c9:	e8 2d fd fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01204ce:	e8 88 c4 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01204d3:	89 c2                	mov    %eax,%edx
f01204d5:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01204db:	29 c2                	sub    %eax,%edx
f01204dd:	89 d0                	mov    %edx,%eax
f01204df:	83 f8 01             	cmp    $0x1,%eax
f01204e2:	74 17                	je     f01204fb <test_kfree+0xc72>
f01204e4:	83 ec 04             	sub    $0x4,%esp
f01204e7:	68 64 b4 13 f0       	push   $0xf013b464
f01204ec:	68 43 05 00 00       	push   $0x543
f01204f1:	68 da ac 13 f0       	push   $0xf013acda
f01204f6:	e8 00 fd fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01204fb:	e8 5b c4 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0120500:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120506:	e8 31 38 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012050b:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0120511:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f0120517:	83 ec 0c             	sub    $0xc,%esp
f012051a:	50                   	push   %eax
f012051b:	e8 a0 73 fe ff       	call   f01078c0 <kfree>
f0120520:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120523:	e8 14 38 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120528:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f012052e:	74 17                	je     f0120547 <test_kfree+0xcbe>
f0120530:	83 ec 04             	sub    $0x4,%esp
f0120533:	68 f4 ac 13 f0       	push   $0xf013acf4
f0120538:	68 49 05 00 00       	push   $0x549
f012053d:	68 da ac 13 f0       	push   $0xf013acda
f0120542:	e8 b4 fc fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0120547:	e8 0f c4 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012054c:	89 c2                	mov    %eax,%edx
f012054e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120554:	29 c2                	sub    %eax,%edx
f0120556:	89 d0                	mov    %edx,%eax
f0120558:	3d 00 02 00 00       	cmp    $0x200,%eax
f012055d:	74 17                	je     f0120576 <test_kfree+0xced>
f012055f:	83 ec 04             	sub    $0x4,%esp
f0120562:	68 64 b4 13 f0       	push   $0xf013b464
f0120567:	68 4a 05 00 00       	push   $0x54a
f012056c:	68 da ac 13 f0       	push   $0xf013acda
f0120571:	e8 85 fc fd ff       	call   f01001fb <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0120576:	e8 e0 c3 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012057b:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120581:	e8 b6 37 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120586:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f012058c:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f0120592:	83 ec 0c             	sub    $0xc,%esp
f0120595:	50                   	push   %eax
f0120596:	e8 25 73 fe ff       	call   f01078c0 <kfree>
f012059b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012059e:	e8 99 37 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01205a3:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01205a9:	74 17                	je     f01205c2 <test_kfree+0xd39>
f01205ab:	83 ec 04             	sub    $0x4,%esp
f01205ae:	68 f4 ac 13 f0       	push   $0xf013acf4
f01205b3:	68 50 05 00 00       	push   $0x550
f01205b8:	68 da ac 13 f0       	push   $0xf013acda
f01205bd:	e8 39 fc fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01205c2:	e8 94 c3 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01205c7:	89 c2                	mov    %eax,%edx
f01205c9:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01205cf:	29 c2                	sub    %eax,%edx
f01205d1:	89 d0                	mov    %edx,%eax
f01205d3:	3d 00 06 00 00       	cmp    $0x600,%eax
f01205d8:	74 17                	je     f01205f1 <test_kfree+0xd68>
f01205da:	83 ec 04             	sub    $0x4,%esp
f01205dd:	68 64 b4 13 f0       	push   $0xf013b464
f01205e2:	68 51 05 00 00       	push   $0x551
f01205e7:	68 da ac 13 f0       	push   $0xf013acda
f01205ec:	e8 0a fc fd ff       	call   f01001fb <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f01205f1:	83 ec 0c             	sub    $0xc,%esp
f01205f4:	68 9c b4 13 f0       	push   $0xf013b49c
f01205f9:	e8 84 06 fe ff       	call   f0100c82 <cprintf>
f01205fe:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f0120601:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0120607:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012060a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120611:	eb 1e                	jmp    f0120631 <test_kfree+0xda8>
		{
			sums[3] += ptr[i] ;
f0120613:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f0120619:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012061c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012061f:	01 c8                	add    %ecx,%eax
f0120621:	8a 00                	mov    (%eax),%al
f0120623:	0f be c0             	movsbl %al,%eax
f0120626:	01 d0                	add    %edx,%eax
f0120628:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012062e:	ff 45 f4             	incl   -0xc(%ebp)
f0120631:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120637:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012063a:	7f d7                	jg     f0120613 <test_kfree+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f012063c:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f0120642:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120648:	89 c1                	mov    %eax,%ecx
f012064a:	01 c9                	add    %ecx,%ecx
f012064c:	01 c8                	add    %ecx,%eax
f012064e:	39 c2                	cmp    %eax,%edx
f0120650:	74 17                	je     f0120669 <test_kfree+0xde0>
f0120652:	83 ec 04             	sub    $0x4,%esp
f0120655:	68 c0 b4 13 f0       	push   $0xf013b4c0
f012065a:	68 5e 05 00 00       	push   $0x55e
f012065f:	68 da ac 13 f0       	push   $0xf013acda
f0120664:	e8 92 fb fd ff       	call   f01001fb <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0120669:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f012066f:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0120672:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120679:	eb 1e                	jmp    f0120699 <test_kfree+0xe10>
		{
			sums[4] += ptr[i] ;
f012067b:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f0120681:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120684:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120687:	01 c8                	add    %ecx,%eax
f0120689:	8a 00                	mov    (%eax),%al
f012068b:	0f be c0             	movsbl %al,%eax
f012068e:	01 d0                	add    %edx,%eax
f0120690:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0120696:	ff 45 f4             	incl   -0xc(%ebp)
f0120699:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012069f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01206a2:	7f d7                	jg     f012067b <test_kfree+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f01206a4:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f01206aa:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f01206b0:	c1 e2 02             	shl    $0x2,%edx
f01206b3:	39 d0                	cmp    %edx,%eax
f01206b5:	74 17                	je     f01206ce <test_kfree+0xe45>
f01206b7:	83 ec 04             	sub    $0x4,%esp
f01206ba:	68 c0 b4 13 f0       	push   $0xf013b4c0
f01206bf:	68 66 05 00 00       	push   $0x566
f01206c4:	68 da ac 13 f0       	push   $0xf013acda
f01206c9:	e8 2d fb fd ff       	call   f01001fb <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f01206ce:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f01206d4:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01206d7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01206de:	eb 1e                	jmp    f01206fe <test_kfree+0xe75>
		{
			sums[5] += ptr[i] ;
f01206e0:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f01206e6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01206e9:	8b 45 80             	mov    -0x80(%ebp),%eax
f01206ec:	01 c8                	add    %ecx,%eax
f01206ee:	8a 00                	mov    (%eax),%al
f01206f0:	0f be c0             	movsbl %al,%eax
f01206f3:	01 d0                	add    %edx,%eax
f01206f5:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01206fb:	ff 45 f4             	incl   -0xc(%ebp)
f01206fe:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0120704:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120707:	7f d7                	jg     f01206e0 <test_kfree+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0120709:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f012070f:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f0120715:	89 d0                	mov    %edx,%eax
f0120717:	c1 e0 02             	shl    $0x2,%eax
f012071a:	01 d0                	add    %edx,%eax
f012071c:	39 c1                	cmp    %eax,%ecx
f012071e:	74 17                	je     f0120737 <test_kfree+0xeae>
f0120720:	83 ec 04             	sub    $0x4,%esp
f0120723:	68 c0 b4 13 f0       	push   $0xf013b4c0
f0120728:	68 6e 05 00 00       	push   $0x56e
f012072d:	68 da ac 13 f0       	push   $0xf013acda
f0120732:	e8 c4 fa fd ff       	call   f01001fb <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0120737:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f012073d:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0120740:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120747:	eb 1e                	jmp    f0120767 <test_kfree+0xede>
		{
			sums[7] += ptr[i] ;
f0120749:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f012074f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120752:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120755:	01 c8                	add    %ecx,%eax
f0120757:	8a 00                	mov    (%eax),%al
f0120759:	0f be c0             	movsbl %al,%eax
f012075c:	01 d0                	add    %edx,%eax
f012075e:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0120764:	ff 45 f4             	incl   -0xc(%ebp)
f0120767:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012076d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120770:	7f d7                	jg     f0120749 <test_kfree+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0120772:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f0120778:	8b 95 04 fe ff ff    	mov    -0x1fc(%ebp),%edx
f012077e:	89 d0                	mov    %edx,%eax
f0120780:	01 c0                	add    %eax,%eax
f0120782:	01 d0                	add    %edx,%eax
f0120784:	01 c0                	add    %eax,%eax
f0120786:	01 d0                	add    %edx,%eax
f0120788:	39 c1                	cmp    %eax,%ecx
f012078a:	74 17                	je     f01207a3 <test_kfree+0xf1a>
f012078c:	83 ec 04             	sub    $0x4,%esp
f012078f:	68 c0 b4 13 f0       	push   $0xf013b4c0
f0120794:	68 76 05 00 00       	push   $0x576
f0120799:	68 da ac 13 f0       	push   $0xf013acda
f012079e:	e8 58 fa fd ff       	call   f01001fb <_panic>
	}
	cprintf("\b\b\b30%");
f01207a3:	83 ec 0c             	sub    $0xc,%esp
f01207a6:	68 f3 b4 13 f0       	push   $0xf013b4f3
f01207ab:	e8 d2 04 fe ff       	call   f0100c82 <cprintf>
f01207b0:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f01207b3:	e8 a3 c1 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01207b8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01207bb:	e8 7c 35 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01207c0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f01207c3:	83 ec 0c             	sub    $0xc,%esp
f01207c6:	68 00 50 00 00       	push   $0x5000
f01207cb:	e8 2e 70 fe ff       	call   f01077fe <kmalloc>
f01207d0:	83 c4 10             	add    $0x10,%esp
f01207d3:	89 85 68 fd ff ff    	mov    %eax,-0x298(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01207d9:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f01207df:	89 c1                	mov    %eax,%ecx
f01207e1:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f01207e8:	10 00 00 
f01207eb:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01207f1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01207f6:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f01207fc:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0120802:	ba 00 00 00 00       	mov    $0x0,%edx
f0120807:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012080d:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0120813:	29 d0                	sub    %edx,%eax
f0120815:	89 c3                	mov    %eax,%ebx
f0120817:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f012081e:	10 00 00 
f0120821:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120826:	0f b6 d0             	movzbl %al,%edx
f0120829:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012082f:	01 d0                	add    %edx,%eax
f0120831:	48                   	dec    %eax
f0120832:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0120838:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012083e:	ba 00 00 00 00       	mov    $0x0,%edx
f0120843:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0120849:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012084f:	29 d0                	sub    %edx,%eax
f0120851:	01 c3                	add    %eax,%ebx
f0120853:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f012085a:	10 00 00 
f012085d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120862:	0f b6 c0             	movzbl %al,%eax
f0120865:	c1 e0 04             	shl    $0x4,%eax
f0120868:	89 c2                	mov    %eax,%edx
f012086a:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0120870:	01 d0                	add    %edx,%eax
f0120872:	48                   	dec    %eax
f0120873:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0120879:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012087f:	ba 00 00 00 00       	mov    $0x0,%edx
f0120884:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f012088a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0120890:	29 d0                	sub    %edx,%eax
f0120892:	01 d8                	add    %ebx,%eax
f0120894:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0120899:	39 c1                	cmp    %eax,%ecx
f012089b:	74 17                	je     f01208b4 <test_kfree+0x102b>
f012089d:	83 ec 04             	sub    $0x4,%esp
f01208a0:	68 c0 ad 13 f0       	push   $0xf013adc0
f01208a5:	68 80 05 00 00       	push   $0x580
f01208aa:	68 da ac 13 f0       	push   $0xf013acda
f01208af:	e8 47 f9 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01208b4:	e8 83 34 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01208b9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01208bc:	74 17                	je     f01208d5 <test_kfree+0x104c>
f01208be:	83 ec 04             	sub    $0x4,%esp
f01208c1:	68 f4 ac 13 f0       	push   $0xf013acf4
f01208c6:	68 81 05 00 00       	push   $0x581
f01208cb:	68 da ac 13 f0       	push   $0xf013acda
f01208d0:	e8 26 f9 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f01208d5:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01208d8:	e8 7e c0 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01208dd:	29 c3                	sub    %eax,%ebx
f01208df:	89 d8                	mov    %ebx,%eax
f01208e1:	83 f8 05             	cmp    $0x5,%eax
f01208e4:	74 17                	je     f01208fd <test_kfree+0x1074>
f01208e6:	83 ec 04             	sub    $0x4,%esp
f01208e9:	68 5c ad 13 f0       	push   $0xf013ad5c
f01208ee:	68 82 05 00 00       	push   $0x582
f01208f3:	68 da ac 13 f0       	push   $0xf013acda
f01208f8:	e8 fe f8 fd ff       	call   f01001fb <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f01208fd:	c7 85 08 fe ff ff ff 	movl   $0x4fff,-0x1f8(%ebp)
f0120904:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0120907:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f012090d:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0120910:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120917:	eb 0e                	jmp    f0120927 <test_kfree+0x109e>
		{
			ptr[i] = 8 ;
f0120919:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012091c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012091f:	01 d0                	add    %edx,%eax
f0120921:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0120924:	ff 45 f4             	incl   -0xc(%ebp)
f0120927:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012092d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120930:	7f e7                	jg     f0120919 <test_kfree+0x1090>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0120932:	e8 24 c0 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0120937:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012093a:	e8 fd 33 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012093f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0120942:	83 ec 0c             	sub    $0xc,%esp
f0120945:	68 00 00 10 00       	push   $0x100000
f012094a:	e8 af 6e fe ff       	call   f01077fe <kmalloc>
f012094f:	83 c4 10             	add    $0x10,%esp
f0120952:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120958:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012095e:	89 c1                	mov    %eax,%ecx
f0120960:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0120967:	10 00 00 
f012096a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0120970:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120975:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f012097b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0120981:	ba 00 00 00 00       	mov    $0x0,%edx
f0120986:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f012098c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0120992:	29 d0                	sub    %edx,%eax
f0120994:	89 c3                	mov    %eax,%ebx
f0120996:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f012099d:	10 00 00 
f01209a0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01209a5:	0f b6 d0             	movzbl %al,%edx
f01209a8:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01209ae:	01 d0                	add    %edx,%eax
f01209b0:	48                   	dec    %eax
f01209b1:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f01209b7:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01209bd:	ba 00 00 00 00       	mov    $0x0,%edx
f01209c2:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f01209c8:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01209ce:	29 d0                	sub    %edx,%eax
f01209d0:	01 c3                	add    %eax,%ebx
f01209d2:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f01209d9:	10 00 00 
f01209dc:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01209e1:	0f b6 c0             	movzbl %al,%eax
f01209e4:	c1 e0 04             	shl    $0x4,%eax
f01209e7:	89 c2                	mov    %eax,%edx
f01209e9:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01209ef:	01 d0                	add    %edx,%eax
f01209f1:	48                   	dec    %eax
f01209f2:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f01209f8:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01209fe:	ba 00 00 00 00       	mov    $0x0,%edx
f0120a03:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0120a09:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0120a0f:	29 d0                	sub    %edx,%eax
f0120a11:	01 d8                	add    %ebx,%eax
f0120a13:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0120a18:	39 c1                	cmp    %eax,%ecx
f0120a1a:	74 17                	je     f0120a33 <test_kfree+0x11aa>
f0120a1c:	83 ec 04             	sub    $0x4,%esp
f0120a1f:	68 c0 ad 13 f0       	push   $0xf013adc0
f0120a24:	68 8e 05 00 00       	push   $0x58e
f0120a29:	68 da ac 13 f0       	push   $0xf013acda
f0120a2e:	e8 c8 f7 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120a33:	e8 04 33 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120a38:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120a3b:	74 17                	je     f0120a54 <test_kfree+0x11cb>
f0120a3d:	83 ec 04             	sub    $0x4,%esp
f0120a40:	68 f4 ac 13 f0       	push   $0xf013acf4
f0120a45:	68 8f 05 00 00       	push   $0x58f
f0120a4a:	68 da ac 13 f0       	push   $0xf013acda
f0120a4f:	e8 a7 f7 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120a54:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120a57:	e8 ff be fe ff       	call   f010c95b <sys_calculate_free_frames>
f0120a5c:	29 c3                	sub    %eax,%ebx
f0120a5e:	89 d8                	mov    %ebx,%eax
f0120a60:	3d 00 01 00 00       	cmp    $0x100,%eax
f0120a65:	74 17                	je     f0120a7e <test_kfree+0x11f5>
f0120a67:	83 ec 04             	sub    $0x4,%esp
f0120a6a:	68 5c ad 13 f0       	push   $0xf013ad5c
f0120a6f:	68 90 05 00 00       	push   $0x590
f0120a74:	68 da ac 13 f0       	push   $0xf013acda
f0120a79:	e8 7d f7 fd ff       	call   f01001fb <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0120a7e:	c7 85 0c fe ff ff ff 	movl   $0xfffff,-0x1f4(%ebp)
f0120a85:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0120a88:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0120a8e:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0120a91:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120a98:	eb 0e                	jmp    f0120aa8 <test_kfree+0x121f>
		{
			ptr[i] = 9 ;
f0120a9a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120a9d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120aa0:	01 d0                	add    %edx,%eax
f0120aa2:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0120aa5:	ff 45 f4             	incl   -0xc(%ebp)
f0120aa8:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0120aae:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120ab1:	7f e7                	jg     f0120a9a <test_kfree+0x1211>
		{
			ptr[i] = 9 ;
		}

		if (isKHeapPlacementStrategyNEXTFIT())
f0120ab3:	e8 ac 66 ff ff       	call   f0117164 <isKHeapPlacementStrategyNEXTFIT>
f0120ab8:	84 c0                	test   %al,%al
f0120aba:	0f 84 ac 06 00 00    	je     f012116c <test_kfree+0x18e3>
		{
			//Allocate Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0120ac0:	e8 96 be fe ff       	call   f010c95b <sys_calculate_free_frames>
f0120ac5:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120ac8:	e8 6f 32 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120acd:	89 45 cc             	mov    %eax,-0x34(%ebp)
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f0120ad0:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0120ad7:	10 00 00 
f0120ada:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0120ae0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120ae5:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0120aeb:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0120af1:	ba 00 00 00 00       	mov    $0x0,%edx
f0120af6:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0120afc:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0120b02:	29 d0                	sub    %edx,%eax
f0120b04:	89 c1                	mov    %eax,%ecx
f0120b06:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0120b0d:	10 00 00 
f0120b10:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120b15:	0f b6 d0             	movzbl %al,%edx
f0120b18:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0120b1e:	01 d0                	add    %edx,%eax
f0120b20:	48                   	dec    %eax
f0120b21:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0120b27:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0120b2d:	ba 00 00 00 00       	mov    $0x0,%edx
f0120b32:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0120b38:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0120b3e:	29 d0                	sub    %edx,%eax
f0120b40:	01 c1                	add    %eax,%ecx
f0120b42:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0120b49:	10 00 00 
f0120b4c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120b51:	0f b6 c0             	movzbl %al,%eax
f0120b54:	c1 e0 04             	shl    $0x4,%eax
f0120b57:	89 c2                	mov    %eax,%edx
f0120b59:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0120b5f:	01 d0                	add    %edx,%eax
f0120b61:	48                   	dec    %eax
f0120b62:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0120b68:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0120b6e:	ba 00 00 00 00       	mov    $0x0,%edx
f0120b73:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0120b79:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0120b7f:	29 d0                	sub    %edx,%eax
f0120b81:	01 c8                	add    %ecx,%eax
f0120b83:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0120b88:	29 c2                	sub    %eax,%edx
f0120b8a:	89 d0                	mov    %edx,%eax
f0120b8c:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			ptr_allocations[10] = kmalloc(reqAllocatedSpace);
f0120b92:	83 ec 0c             	sub    $0xc,%esp
f0120b95:	ff b5 b4 fe ff ff    	pushl  -0x14c(%ebp)
f0120b9b:	e8 5e 6c fe ff       	call   f01077fe <kmalloc>
f0120ba0:	83 c4 10             	add    $0x10,%esp
f0120ba3:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
			if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120ba9:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0120baf:	89 c1                	mov    %eax,%ecx
f0120bb1:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f0120bb8:	10 00 00 
f0120bbb:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0120bc1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120bc6:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f0120bcc:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0120bd2:	ba 00 00 00 00       	mov    $0x0,%edx
f0120bd7:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f0120bdd:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0120be3:	29 d0                	sub    %edx,%eax
f0120be5:	89 c3                	mov    %eax,%ebx
f0120be7:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0120bee:	10 00 00 
f0120bf1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120bf6:	0f b6 d0             	movzbl %al,%edx
f0120bf9:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0120bff:	01 d0                	add    %edx,%eax
f0120c01:	48                   	dec    %eax
f0120c02:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0120c08:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0120c0e:	ba 00 00 00 00       	mov    $0x0,%edx
f0120c13:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0120c19:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0120c1f:	29 d0                	sub    %edx,%eax
f0120c21:	01 c3                	add    %eax,%ebx
f0120c23:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0120c2a:	10 00 00 
f0120c2d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120c32:	0f b6 c0             	movzbl %al,%eax
f0120c35:	c1 e0 04             	shl    $0x4,%eax
f0120c38:	89 c2                	mov    %eax,%edx
f0120c3a:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0120c40:	01 d0                	add    %edx,%eax
f0120c42:	48                   	dec    %eax
f0120c43:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0120c49:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0120c4f:	ba 00 00 00 00       	mov    $0x0,%edx
f0120c54:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0120c5a:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0120c60:	29 d0                	sub    %edx,%eax
f0120c62:	01 d8                	add    %ebx,%eax
f0120c64:	2d 00 f0 1e 09       	sub    $0x91ef000,%eax
f0120c69:	39 c1                	cmp    %eax,%ecx
f0120c6b:	74 17                	je     f0120c84 <test_kfree+0x13fb>
f0120c6d:	83 ec 04             	sub    $0x4,%esp
f0120c70:	68 c0 ad 13 f0       	push   $0xf013adc0
f0120c75:	68 9f 05 00 00       	push   $0x59f
f0120c7a:	68 da ac 13 f0       	push   $0xf013acda
f0120c7f:	e8 77 f5 fd ff       	call   f01001fb <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120c84:	e8 b3 30 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120c89:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120c8c:	74 17                	je     f0120ca5 <test_kfree+0x141c>
f0120c8e:	83 ec 04             	sub    $0x4,%esp
f0120c91:	68 f4 ac 13 f0       	push   $0xf013acf4
f0120c96:	68 a0 05 00 00       	push   $0x5a0
f0120c9b:	68 da ac 13 f0       	push   $0xf013acda
f0120ca0:	e8 56 f5 fd ff       	call   f01001fb <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120ca5:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120ca8:	e8 ae bc fe ff       	call   f010c95b <sys_calculate_free_frames>
f0120cad:	29 c3                	sub    %eax,%ebx
f0120caf:	89 da                	mov    %ebx,%edx
f0120cb1:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0120cb7:	c1 e8 0c             	shr    $0xc,%eax
f0120cba:	39 c2                	cmp    %eax,%edx
f0120cbc:	74 17                	je     f0120cd5 <test_kfree+0x144c>
f0120cbe:	83 ec 04             	sub    $0x4,%esp
f0120cc1:	68 5c ad 13 f0       	push   $0xf013ad5c
f0120cc6:	68 a1 05 00 00       	push   $0x5a1
f0120ccb:	68 da ac 13 f0       	push   $0xf013acda
f0120cd0:	e8 26 f5 fd ff       	call   f01001fb <_panic>
			lastIndices[10] = (reqAllocatedSpace)/sizeof(char) - 1;
f0120cd5:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0120cdb:	48                   	dec    %eax
f0120cdc:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
			ptr = (char*)ptr_allocations[10];
f0120ce2:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0120ce8:	89 45 80             	mov    %eax,-0x80(%ebp)
//				ptr[i] = 10;
//			}

			//Allocate in merged freed space FROM the beginning
			//3 MB
			freeFrames = sys_calculate_free_frames() ;
f0120ceb:	e8 6b bc fe ff       	call   f010c95b <sys_calculate_free_frames>
f0120cf0:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120cf3:	e8 44 30 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120cf8:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[11] = kmalloc(3*Mega);
f0120cfb:	83 ec 0c             	sub    $0xc,%esp
f0120cfe:	68 00 00 30 00       	push   $0x300000
f0120d03:	e8 f6 6a fe ff       	call   f01077fe <kmalloc>
f0120d08:	83 c4 10             	add    $0x10,%esp
f0120d0b:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120d11:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0120d17:	89 c1                	mov    %eax,%ecx
f0120d19:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0120d20:	10 00 00 
f0120d23:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0120d29:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120d2e:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0120d34:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0120d3a:	ba 00 00 00 00       	mov    $0x0,%edx
f0120d3f:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0120d45:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0120d4b:	29 d0                	sub    %edx,%eax
f0120d4d:	89 c3                	mov    %eax,%ebx
f0120d4f:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f0120d56:	10 00 00 
f0120d59:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120d5e:	0f b6 d0             	movzbl %al,%edx
f0120d61:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0120d67:	01 d0                	add    %edx,%eax
f0120d69:	48                   	dec    %eax
f0120d6a:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f0120d70:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0120d76:	ba 00 00 00 00       	mov    $0x0,%edx
f0120d7b:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f0120d81:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0120d87:	29 d0                	sub    %edx,%eax
f0120d89:	01 c3                	add    %eax,%ebx
f0120d8b:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f0120d92:	10 00 00 
f0120d95:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120d9a:	0f b6 c0             	movzbl %al,%eax
f0120d9d:	c1 e0 04             	shl    $0x4,%eax
f0120da0:	89 c2                	mov    %eax,%edx
f0120da2:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0120da8:	01 d0                	add    %edx,%eax
f0120daa:	48                   	dec    %eax
f0120dab:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f0120db1:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0120db7:	ba 00 00 00 00       	mov    $0x0,%edx
f0120dbc:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f0120dc2:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0120dc8:	29 d0                	sub    %edx,%eax
f0120dca:	01 d8                	add    %ebx,%eax
f0120dcc:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0120dd1:	39 c1                	cmp    %eax,%ecx
f0120dd3:	74 17                	je     f0120dec <test_kfree+0x1563>
f0120dd5:	83 ec 04             	sub    $0x4,%esp
f0120dd8:	68 c0 ad 13 f0       	push   $0xf013adc0
f0120ddd:	68 ae 05 00 00       	push   $0x5ae
f0120de2:	68 da ac 13 f0       	push   $0xf013acda
f0120de7:	e8 0f f4 fd ff       	call   f01001fb <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120dec:	e8 4b 2f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120df1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120df4:	74 17                	je     f0120e0d <test_kfree+0x1584>
f0120df6:	83 ec 04             	sub    $0x4,%esp
f0120df9:	68 f4 ac 13 f0       	push   $0xf013acf4
f0120dfe:	68 af 05 00 00       	push   $0x5af
f0120e03:	68 da ac 13 f0       	push   $0xf013acda
f0120e08:	e8 ee f3 fd ff       	call   f01001fb <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120e0d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120e10:	e8 46 bb fe ff       	call   f010c95b <sys_calculate_free_frames>
f0120e15:	29 c3                	sub    %eax,%ebx
f0120e17:	89 d8                	mov    %ebx,%eax
f0120e19:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120e1e:	74 17                	je     f0120e37 <test_kfree+0x15ae>
f0120e20:	83 ec 04             	sub    $0x4,%esp
f0120e23:	68 5c ad 13 f0       	push   $0xf013ad5c
f0120e28:	68 b0 05 00 00       	push   $0x5b0
f0120e2d:	68 da ac 13 f0       	push   $0xf013acda
f0120e32:	e8 c4 f3 fd ff       	call   f01001fb <_panic>
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
f0120e37:	c7 85 14 fe ff ff ff 	movl   $0x2fffff,-0x1ec(%ebp)
f0120e3e:	ff 2f 00 
			ptr = (char*)ptr_allocations[11];
f0120e41:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0120e47:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[11]; ++i)
f0120e4a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120e51:	eb 0e                	jmp    f0120e61 <test_kfree+0x15d8>
			{
				ptr[i] = 8 ;
f0120e53:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120e56:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120e59:	01 d0                	add    %edx,%eax
f0120e5b:	c6 00 08             	movb   $0x8,(%eax)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[11];
			for (i = 0; i < lastIndices[11]; ++i)
f0120e5e:	ff 45 f4             	incl   -0xc(%ebp)
f0120e61:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0120e67:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120e6a:	7f e7                	jg     f0120e53 <test_kfree+0x15ca>
			{
				ptr[i] = 8 ;
			}

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f0120e6c:	e8 ea ba fe ff       	call   f010c95b <sys_calculate_free_frames>
f0120e71:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120e74:	e8 c3 2e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120e79:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[12] = kmalloc(2*kilo);
f0120e7c:	83 ec 0c             	sub    $0xc,%esp
f0120e7f:	68 00 08 00 00       	push   $0x800
f0120e84:	e8 75 69 fe ff       	call   f01077fe <kmalloc>
f0120e89:	83 c4 10             	add    $0x10,%esp
f0120e8c:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120e92:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0120e98:	89 c1                	mov    %eax,%ecx
f0120e9a:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f0120ea1:	10 00 00 
f0120ea4:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0120eaa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120eaf:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f0120eb5:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0120ebb:	ba 00 00 00 00       	mov    $0x0,%edx
f0120ec0:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f0120ec6:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0120ecc:	29 d0                	sub    %edx,%eax
f0120ece:	89 c3                	mov    %eax,%ebx
f0120ed0:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0120ed7:	10 00 00 
f0120eda:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120edf:	0f b6 d0             	movzbl %al,%edx
f0120ee2:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0120ee8:	01 d0                	add    %edx,%eax
f0120eea:	48                   	dec    %eax
f0120eeb:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0120ef1:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0120ef7:	ba 00 00 00 00       	mov    $0x0,%edx
f0120efc:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0120f02:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0120f08:	29 d0                	sub    %edx,%eax
f0120f0a:	01 c3                	add    %eax,%ebx
f0120f0c:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f0120f13:	10 00 00 
f0120f16:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120f1b:	0f b6 c0             	movzbl %al,%eax
f0120f1e:	c1 e0 04             	shl    $0x4,%eax
f0120f21:	89 c2                	mov    %eax,%edx
f0120f23:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0120f29:	01 d0                	add    %edx,%eax
f0120f2b:	48                   	dec    %eax
f0120f2c:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f0120f32:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0120f38:	ba 00 00 00 00       	mov    $0x0,%edx
f0120f3d:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f0120f43:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0120f49:	29 d0                	sub    %edx,%eax
f0120f4b:	01 d8                	add    %ebx,%eax
f0120f4d:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0120f52:	39 c1                	cmp    %eax,%ecx
f0120f54:	74 17                	je     f0120f6d <test_kfree+0x16e4>
f0120f56:	83 ec 04             	sub    $0x4,%esp
f0120f59:	68 c0 ad 13 f0       	push   $0xf013adc0
f0120f5e:	68 bc 05 00 00       	push   $0x5bc
f0120f63:	68 da ac 13 f0       	push   $0xf013acda
f0120f68:	e8 8e f2 fd ff       	call   f01001fb <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120f6d:	e8 ca 2d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120f72:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120f75:	74 17                	je     f0120f8e <test_kfree+0x1705>
f0120f77:	83 ec 04             	sub    $0x4,%esp
f0120f7a:	68 f4 ac 13 f0       	push   $0xf013acf4
f0120f7f:	68 bd 05 00 00       	push   $0x5bd
f0120f84:	68 da ac 13 f0       	push   $0xf013acda
f0120f89:	e8 6d f2 fd ff       	call   f01001fb <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120f8e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120f91:	e8 c5 b9 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0120f96:	29 c3                	sub    %eax,%ebx
f0120f98:	89 d8                	mov    %ebx,%eax
f0120f9a:	83 f8 01             	cmp    $0x1,%eax
f0120f9d:	74 17                	je     f0120fb6 <test_kfree+0x172d>
f0120f9f:	83 ec 04             	sub    $0x4,%esp
f0120fa2:	68 5c ad 13 f0       	push   $0xf013ad5c
f0120fa7:	68 be 05 00 00       	push   $0x5be
f0120fac:	68 da ac 13 f0       	push   $0xf013acda
f0120fb1:	e8 45 f2 fd ff       	call   f01001fb <_panic>
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
f0120fb6:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f0120fbd:	07 00 00 
			ptr = (char*)ptr_allocations[12];
f0120fc0:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0120fc6:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[12]; ++i)
f0120fc9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120fd0:	eb 0e                	jmp    f0120fe0 <test_kfree+0x1757>
			{
				ptr[i] = 9 ;
f0120fd2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120fd5:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120fd8:	01 d0                	add    %edx,%eax
f0120fda:	c6 00 09             	movb   $0x9,(%eax)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[12];
			for (i = 0; i < lastIndices[12]; ++i)
f0120fdd:	ff 45 f4             	incl   -0xc(%ebp)
f0120fe0:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0120fe6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120fe9:	7f e7                	jg     f0120fd2 <test_kfree+0x1749>
			{
				ptr[i] = 9 ;
			}

			//1 MB
			freeFrames = sys_calculate_free_frames() ;
f0120feb:	e8 6b b9 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0120ff0:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120ff3:	e8 44 2d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120ff8:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[13] = kmalloc(1*Mega);
f0120ffb:	83 ec 0c             	sub    $0xc,%esp
f0120ffe:	68 00 00 10 00       	push   $0x100000
f0121003:	e8 f6 67 fe ff       	call   f01077fe <kmalloc>
f0121008:	83 c4 10             	add    $0x10,%esp
f012100b:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121011:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0121017:	89 c1                	mov    %eax,%ecx
f0121019:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f0121020:	10 00 00 
f0121023:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0121029:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012102e:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f0121034:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012103a:	ba 00 00 00 00       	mov    $0x0,%edx
f012103f:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f0121045:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012104b:	29 d0                	sub    %edx,%eax
f012104d:	89 c3                	mov    %eax,%ebx
f012104f:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f0121056:	10 00 00 
f0121059:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012105e:	0f b6 d0             	movzbl %al,%edx
f0121061:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0121067:	01 d0                	add    %edx,%eax
f0121069:	48                   	dec    %eax
f012106a:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f0121070:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0121076:	ba 00 00 00 00       	mov    $0x0,%edx
f012107b:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f0121081:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0121087:	29 d0                	sub    %edx,%eax
f0121089:	01 c3                	add    %eax,%ebx
f012108b:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f0121092:	10 00 00 
f0121095:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012109a:	0f b6 c0             	movzbl %al,%eax
f012109d:	c1 e0 04             	shl    $0x4,%eax
f01210a0:	89 c2                	mov    %eax,%edx
f01210a2:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01210a8:	01 d0                	add    %edx,%eax
f01210aa:	48                   	dec    %eax
f01210ab:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f01210b1:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01210b7:	ba 00 00 00 00       	mov    $0x0,%edx
f01210bc:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f01210c2:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01210c8:	29 d0                	sub    %edx,%eax
f01210ca:	01 d8                	add    %ebx,%eax
f01210cc:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f01210d1:	39 c1                	cmp    %eax,%ecx
f01210d3:	74 17                	je     f01210ec <test_kfree+0x1863>
f01210d5:	83 ec 04             	sub    $0x4,%esp
f01210d8:	68 c0 ad 13 f0       	push   $0xf013adc0
f01210dd:	68 ca 05 00 00       	push   $0x5ca
f01210e2:	68 da ac 13 f0       	push   $0xf013acda
f01210e7:	e8 0f f1 fd ff       	call   f01001fb <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01210ec:	e8 4b 2c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01210f1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01210f4:	74 17                	je     f012110d <test_kfree+0x1884>
f01210f6:	83 ec 04             	sub    $0x4,%esp
f01210f9:	68 f4 ac 13 f0       	push   $0xf013acf4
f01210fe:	68 cb 05 00 00       	push   $0x5cb
f0121103:	68 da ac 13 f0       	push   $0xf013acda
f0121108:	e8 ee f0 fd ff       	call   f01001fb <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012110d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121110:	e8 46 b8 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0121115:	29 c3                	sub    %eax,%ebx
f0121117:	89 d8                	mov    %ebx,%eax
f0121119:	3d 00 01 00 00       	cmp    $0x100,%eax
f012111e:	74 17                	je     f0121137 <test_kfree+0x18ae>
f0121120:	83 ec 04             	sub    $0x4,%esp
f0121123:	68 5c ad 13 f0       	push   $0xf013ad5c
f0121128:	68 cc 05 00 00       	push   $0x5cc
f012112d:	68 da ac 13 f0       	push   $0xf013acda
f0121132:	e8 c4 f0 fd ff       	call   f01001fb <_panic>
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
f0121137:	c7 85 1c fe ff ff ff 	movl   $0xfffff,-0x1e4(%ebp)
f012113e:	ff 0f 00 
			ptr = (char*)ptr_allocations[13];
f0121141:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0121147:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[13]; ++i)
f012114a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121151:	eb 0e                	jmp    f0121161 <test_kfree+0x18d8>
			{
				ptr[i] = 10 ;
f0121153:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121156:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121159:	01 d0                	add    %edx,%eax
f012115b:	c6 00 0a             	movb   $0xa,(%eax)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[13];
			for (i = 0; i < lastIndices[13]; ++i)
f012115e:	ff 45 f4             	incl   -0xc(%ebp)
f0121161:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0121167:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012116a:	7f e7                	jg     f0121153 <test_kfree+0x18ca>
			{
				ptr[i] = 10 ;
			}
		}
	}
	cprintf("\b\b\b45%");
f012116c:	83 ec 0c             	sub    $0xc,%esp
f012116f:	68 fa b4 13 f0       	push   $0xf013b4fa
f0121174:	e8 09 fb fd ff       	call   f0100c82 <cprintf>
f0121179:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f012117c:	e8 da b7 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0121181:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121184:	e8 b3 2b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121189:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f012118c:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0121192:	83 ec 0c             	sub    $0xc,%esp
f0121195:	50                   	push   %eax
f0121196:	e8 25 67 fe ff       	call   f01078c0 <kfree>
f012119b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012119e:	e8 99 2b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01211a3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01211a6:	74 17                	je     f01211bf <test_kfree+0x1936>
f01211a8:	83 ec 04             	sub    $0x4,%esp
f01211ab:	68 f4 ac 13 f0       	push   $0xf013acf4
f01211b0:	68 dd 05 00 00       	push   $0x5dd
f01211b5:	68 da ac 13 f0       	push   $0xf013acda
f01211ba:	e8 3c f0 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f01211bf:	e8 97 b7 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01211c4:	89 c2                	mov    %eax,%edx
f01211c6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01211c9:	29 c2                	sub    %eax,%edx
f01211cb:	89 d0                	mov    %edx,%eax
f01211cd:	83 f8 02             	cmp    $0x2,%eax
f01211d0:	74 17                	je     f01211e9 <test_kfree+0x1960>
f01211d2:	83 ec 04             	sub    $0x4,%esp
f01211d5:	68 64 b4 13 f0       	push   $0xf013b464
f01211da:	68 de 05 00 00       	push   $0x5de
f01211df:	68 da ac 13 f0       	push   $0xf013acda
f01211e4:	e8 12 f0 fd ff       	call   f01001fb <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f01211e9:	e8 6d b7 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01211ee:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01211f1:	e8 46 2b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01211f6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f01211f9:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f01211ff:	83 ec 0c             	sub    $0xc,%esp
f0121202:	50                   	push   %eax
f0121203:	e8 b8 66 fe ff       	call   f01078c0 <kfree>
f0121208:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012120b:	e8 2c 2b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121210:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121213:	74 17                	je     f012122c <test_kfree+0x19a3>
f0121215:	83 ec 04             	sub    $0x4,%esp
f0121218:	68 f4 ac 13 f0       	push   $0xf013acf4
f012121d:	68 e4 05 00 00       	push   $0x5e4
f0121222:	68 da ac 13 f0       	push   $0xf013acda
f0121227:	e8 cf ef fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012122c:	e8 2a b7 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0121231:	89 c2                	mov    %eax,%edx
f0121233:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121236:	29 c2                	sub    %eax,%edx
f0121238:	89 d0                	mov    %edx,%eax
f012123a:	3d 00 03 00 00       	cmp    $0x300,%eax
f012123f:	74 17                	je     f0121258 <test_kfree+0x19cf>
f0121241:	83 ec 04             	sub    $0x4,%esp
f0121244:	68 64 b4 13 f0       	push   $0xf013b464
f0121249:	68 e5 05 00 00       	push   $0x5e5
f012124e:	68 da ac 13 f0       	push   $0xf013acda
f0121253:	e8 a3 ef fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121258:	e8 fe b6 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012125d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121260:	e8 d7 2a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121265:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0121268:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f012126e:	83 ec 0c             	sub    $0xc,%esp
f0121271:	50                   	push   %eax
f0121272:	e8 49 66 fe ff       	call   f01078c0 <kfree>
f0121277:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012127a:	e8 bd 2a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012127f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121282:	74 17                	je     f012129b <test_kfree+0x1a12>
f0121284:	83 ec 04             	sub    $0x4,%esp
f0121287:	68 f4 ac 13 f0       	push   $0xf013acf4
f012128c:	68 eb 05 00 00       	push   $0x5eb
f0121291:	68 da ac 13 f0       	push   $0xf013acda
f0121296:	e8 60 ef fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f012129b:	e8 bb b6 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01212a0:	89 c2                	mov    %eax,%edx
f01212a2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01212a5:	29 c2                	sub    %eax,%edx
f01212a7:	89 d0                	mov    %edx,%eax
f01212a9:	83 f8 01             	cmp    $0x1,%eax
f01212ac:	74 17                	je     f01212c5 <test_kfree+0x1a3c>
f01212ae:	83 ec 04             	sub    $0x4,%esp
f01212b1:	68 64 b4 13 f0       	push   $0xf013b464
f01212b6:	68 ec 05 00 00       	push   $0x5ec
f01212bb:	68 da ac 13 f0       	push   $0xf013acda
f01212c0:	e8 36 ef fd ff       	call   f01001fb <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f01212c5:	e8 91 b6 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01212ca:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01212cd:	e8 6a 2a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01212d2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f01212d5:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f01212db:	83 ec 0c             	sub    $0xc,%esp
f01212de:	50                   	push   %eax
f01212df:	e8 dc 65 fe ff       	call   f01078c0 <kfree>
f01212e4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01212e7:	e8 50 2a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01212ec:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01212ef:	74 17                	je     f0121308 <test_kfree+0x1a7f>
f01212f1:	83 ec 04             	sub    $0x4,%esp
f01212f4:	68 f4 ac 13 f0       	push   $0xf013acf4
f01212f9:	68 f2 05 00 00       	push   $0x5f2
f01212fe:	68 da ac 13 f0       	push   $0xf013acda
f0121303:	e8 f3 ee fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0121308:	e8 4e b6 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012130d:	89 c2                	mov    %eax,%edx
f012130f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121312:	29 c2                	sub    %eax,%edx
f0121314:	89 d0                	mov    %edx,%eax
f0121316:	83 f8 04             	cmp    $0x4,%eax
f0121319:	74 17                	je     f0121332 <test_kfree+0x1aa9>
f012131b:	83 ec 04             	sub    $0x4,%esp
f012131e:	68 64 b4 13 f0       	push   $0xf013b464
f0121323:	68 f3 05 00 00       	push   $0x5f3
f0121328:	68 da ac 13 f0       	push   $0xf013acda
f012132d:	e8 c9 ee fd ff       	call   f01001fb <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0121332:	e8 24 b6 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0121337:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012133a:	e8 fd 29 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012133f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0121342:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0121348:	83 ec 0c             	sub    $0xc,%esp
f012134b:	50                   	push   %eax
f012134c:	e8 6f 65 fe ff       	call   f01078c0 <kfree>
f0121351:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121354:	e8 e3 29 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121359:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012135c:	74 17                	je     f0121375 <test_kfree+0x1aec>
f012135e:	83 ec 04             	sub    $0x4,%esp
f0121361:	68 f4 ac 13 f0       	push   $0xf013acf4
f0121366:	68 f9 05 00 00       	push   $0x5f9
f012136b:	68 da ac 13 f0       	push   $0xf013acda
f0121370:	e8 86 ee fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f0121375:	e8 e1 b5 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012137a:	89 c2                	mov    %eax,%edx
f012137c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012137f:	29 c2                	sub    %eax,%edx
f0121381:	89 d0                	mov    %edx,%eax
f0121383:	83 f8 05             	cmp    $0x5,%eax
f0121386:	74 17                	je     f012139f <test_kfree+0x1b16>
f0121388:	83 ec 04             	sub    $0x4,%esp
f012138b:	68 64 b4 13 f0       	push   $0xf013b464
f0121390:	68 fa 05 00 00       	push   $0x5fa
f0121395:	68 da ac 13 f0       	push   $0xf013acda
f012139a:	e8 5c ee fd ff       	call   f01001fb <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012139f:	e8 b7 b5 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01213a4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01213a7:	e8 90 29 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01213ac:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01213af:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f01213b5:	83 ec 0c             	sub    $0xc,%esp
f01213b8:	50                   	push   %eax
f01213b9:	e8 02 65 fe ff       	call   f01078c0 <kfree>
f01213be:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01213c1:	e8 76 29 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01213c6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01213c9:	74 17                	je     f01213e2 <test_kfree+0x1b59>
f01213cb:	83 ec 04             	sub    $0x4,%esp
f01213ce:	68 f4 ac 13 f0       	push   $0xf013acf4
f01213d3:	68 00 06 00 00       	push   $0x600
f01213d8:	68 da ac 13 f0       	push   $0xf013acda
f01213dd:	e8 19 ee fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f01213e2:	e8 74 b5 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01213e7:	89 c2                	mov    %eax,%edx
f01213e9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01213ec:	29 c2                	sub    %eax,%edx
f01213ee:	89 d0                	mov    %edx,%eax
f01213f0:	3d 00 01 00 00       	cmp    $0x100,%eax
f01213f5:	74 17                	je     f012140e <test_kfree+0x1b85>
f01213f7:	83 ec 04             	sub    $0x4,%esp
f01213fa:	68 64 b4 13 f0       	push   $0xf013b464
f01213ff:	68 01 06 00 00       	push   $0x601
f0121404:	68 da ac 13 f0       	push   $0xf013acda
f0121409:	e8 ed ed fd ff       	call   f01001fb <_panic>

		if (isKHeapPlacementStrategyNEXTFIT())
f012140e:	e8 51 5d ff ff       	call   f0117164 <isKHeapPlacementStrategyNEXTFIT>
f0121413:	84 c0                	test   %al,%al
f0121415:	0f 84 80 02 00 00    	je     f012169b <test_kfree+0x1e12>
		{
			//cprintf("FREE in NEXT FIT\n");
			//kfree Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f012141b:	e8 3b b5 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0121420:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121423:	e8 14 29 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121428:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[10]);
f012142b:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0121431:	83 ec 0c             	sub    $0xc,%esp
f0121434:	50                   	push   %eax
f0121435:	e8 86 64 fe ff       	call   f01078c0 <kfree>
f012143a:	83 c4 10             	add    $0x10,%esp
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f012143d:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f0121444:	10 00 00 
f0121447:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012144d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121452:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f0121458:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012145e:	ba 00 00 00 00       	mov    $0x0,%edx
f0121463:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f0121469:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012146f:	29 d0                	sub    %edx,%eax
f0121471:	89 c1                	mov    %eax,%ecx
f0121473:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f012147a:	10 00 00 
f012147d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121482:	0f b6 d0             	movzbl %al,%edx
f0121485:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012148b:	01 d0                	add    %edx,%eax
f012148d:	48                   	dec    %eax
f012148e:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f0121494:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012149a:	ba 00 00 00 00       	mov    $0x0,%edx
f012149f:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f01214a5:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01214ab:	29 d0                	sub    %edx,%eax
f01214ad:	01 c1                	add    %eax,%ecx
f01214af:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f01214b6:	10 00 00 
f01214b9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01214be:	0f b6 c0             	movzbl %al,%eax
f01214c1:	c1 e0 04             	shl    $0x4,%eax
f01214c4:	89 c2                	mov    %eax,%edx
f01214c6:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01214cc:	01 d0                	add    %edx,%eax
f01214ce:	48                   	dec    %eax
f01214cf:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f01214d5:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01214db:	ba 00 00 00 00       	mov    $0x0,%edx
f01214e0:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f01214e6:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01214ec:	29 d0                	sub    %edx,%eax
f01214ee:	01 c8                	add    %ecx,%eax
f01214f0:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f01214f5:	29 c2                	sub    %eax,%edx
f01214f7:	89 d0                	mov    %edx,%eax
f01214f9:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01214ff:	e8 38 28 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121504:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121507:	74 17                	je     f0121520 <test_kfree+0x1c97>
f0121509:	83 ec 04             	sub    $0x4,%esp
f012150c:	68 f4 ac 13 f0       	push   $0xf013acf4
f0121511:	68 0b 06 00 00       	push   $0x60b
f0121516:	68 da ac 13 f0       	push   $0xf013acda
f012151b:	e8 db ec fd ff       	call   f01001fb <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong kfree: pages in memory are not freed correctly");
f0121520:	e8 36 b4 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0121525:	89 c2                	mov    %eax,%edx
f0121527:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012152a:	29 c2                	sub    %eax,%edx
f012152c:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0121532:	c1 e8 0c             	shr    $0xc,%eax
f0121535:	39 c2                	cmp    %eax,%edx
f0121537:	74 17                	je     f0121550 <test_kfree+0x1cc7>
f0121539:	83 ec 04             	sub    $0x4,%esp
f012153c:	68 64 b4 13 f0       	push   $0xf013b464
f0121541:	68 0c 06 00 00       	push   $0x60c
f0121546:	68 da ac 13 f0       	push   $0xf013acda
f012154b:	e8 ab ec fd ff       	call   f01001fb <_panic>

			//kfree 3 MB
			freeFrames = sys_calculate_free_frames() ;
f0121550:	e8 06 b4 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0121555:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121558:	e8 df 27 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012155d:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[11]);
f0121560:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0121566:	83 ec 0c             	sub    $0xc,%esp
f0121569:	50                   	push   %eax
f012156a:	e8 51 63 fe ff       	call   f01078c0 <kfree>
f012156f:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121572:	e8 c5 27 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121577:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012157a:	74 17                	je     f0121593 <test_kfree+0x1d0a>
f012157c:	83 ec 04             	sub    $0x4,%esp
f012157f:	68 f4 ac 13 f0       	push   $0xf013acf4
f0121584:	68 12 06 00 00       	push   $0x612
f0121589:	68 da ac 13 f0       	push   $0xf013acda
f012158e:	e8 68 ec fd ff       	call   f01001fb <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121593:	e8 c3 b3 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0121598:	89 c2                	mov    %eax,%edx
f012159a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012159d:	29 c2                	sub    %eax,%edx
f012159f:	89 d0                	mov    %edx,%eax
f01215a1:	3d 00 03 00 00       	cmp    $0x300,%eax
f01215a6:	74 17                	je     f01215bf <test_kfree+0x1d36>
f01215a8:	83 ec 04             	sub    $0x4,%esp
f01215ab:	68 64 b4 13 f0       	push   $0xf013b464
f01215b0:	68 13 06 00 00       	push   $0x613
f01215b5:	68 da ac 13 f0       	push   $0xf013acda
f01215ba:	e8 3c ec fd ff       	call   f01001fb <_panic>

			//kfree 2 KB
			freeFrames = sys_calculate_free_frames() ;
f01215bf:	e8 97 b3 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01215c4:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01215c7:	e8 70 27 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01215cc:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[12]);
f01215cf:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f01215d5:	83 ec 0c             	sub    $0xc,%esp
f01215d8:	50                   	push   %eax
f01215d9:	e8 e2 62 fe ff       	call   f01078c0 <kfree>
f01215de:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01215e1:	e8 56 27 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01215e6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01215e9:	74 17                	je     f0121602 <test_kfree+0x1d79>
f01215eb:	83 ec 04             	sub    $0x4,%esp
f01215ee:	68 f4 ac 13 f0       	push   $0xf013acf4
f01215f3:	68 19 06 00 00       	push   $0x619
f01215f8:	68 da ac 13 f0       	push   $0xf013acda
f01215fd:	e8 f9 eb fd ff       	call   f01001fb <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0121602:	e8 54 b3 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0121607:	89 c2                	mov    %eax,%edx
f0121609:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012160c:	29 c2                	sub    %eax,%edx
f012160e:	89 d0                	mov    %edx,%eax
f0121610:	83 f8 01             	cmp    $0x1,%eax
f0121613:	74 17                	je     f012162c <test_kfree+0x1da3>
f0121615:	83 ec 04             	sub    $0x4,%esp
f0121618:	68 64 b4 13 f0       	push   $0xf013b464
f012161d:	68 1a 06 00 00       	push   $0x61a
f0121622:	68 da ac 13 f0       	push   $0xf013acda
f0121627:	e8 cf eb fd ff       	call   f01001fb <_panic>

			//kfree 1 MB
			freeFrames = sys_calculate_free_frames() ;
f012162c:	e8 2a b3 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0121631:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121634:	e8 03 27 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121639:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[13]);
f012163c:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0121642:	83 ec 0c             	sub    $0xc,%esp
f0121645:	50                   	push   %eax
f0121646:	e8 75 62 fe ff       	call   f01078c0 <kfree>
f012164b:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012164e:	e8 e9 26 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121653:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121656:	74 17                	je     f012166f <test_kfree+0x1de6>
f0121658:	83 ec 04             	sub    $0x4,%esp
f012165b:	68 f4 ac 13 f0       	push   $0xf013acf4
f0121660:	68 20 06 00 00       	push   $0x620
f0121665:	68 da ac 13 f0       	push   $0xf013acda
f012166a:	e8 8c eb fd ff       	call   f01001fb <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012166f:	e8 e7 b2 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0121674:	89 c2                	mov    %eax,%edx
f0121676:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121679:	29 c2                	sub    %eax,%edx
f012167b:	89 d0                	mov    %edx,%eax
f012167d:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121682:	74 17                	je     f012169b <test_kfree+0x1e12>
f0121684:	83 ec 04             	sub    $0x4,%esp
f0121687:	68 64 b4 13 f0       	push   $0xf013b464
f012168c:	68 21 06 00 00       	push   $0x621
f0121691:	68 da ac 13 f0       	push   $0xf013acda
f0121696:	e8 60 eb fd ff       	call   f01001fb <_panic>

		}
		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f012169b:	e8 bb b2 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01216a0:	89 c2                	mov    %eax,%edx
f01216a2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01216a5:	39 c2                	cmp    %eax,%edx
f01216a7:	74 17                	je     f01216c0 <test_kfree+0x1e37>
f01216a9:	83 ec 04             	sub    $0x4,%esp
f01216ac:	68 04 b5 13 f0       	push   $0xf013b504
f01216b1:	68 24 06 00 00       	push   $0x624
f01216b6:	68 da ac 13 f0       	push   $0xf013acda
f01216bb:	e8 3b eb fd ff       	call   f01001fb <_panic>
	}
	cprintf("\b\b\b60%");
f01216c0:	83 ec 0c             	sub    $0xc,%esp
f01216c3:	68 38 b5 13 f0       	push   $0xf013b538
f01216c8:	e8 b5 f5 fd ff       	call   f0100c82 <cprintf>
f01216cd:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01216d0:	83 ec 0c             	sub    $0xc,%esp
f01216d3:	6a 03                	push   $0x3
f01216d5:	e8 21 b7 fe ff       	call   f010cdfb <sys_bypassPageFault>
f01216da:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f01216dd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01216e4:	e9 82 00 00 00       	jmp    f012176b <test_kfree+0x1ee2>
		{
			ptr = (char *) ptr_allocations[i];
f01216e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01216ec:	8b 84 85 48 fd ff ff 	mov    -0x2b8(%ebp,%eax,4),%eax
f01216f3:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f01216f6:	8b 45 80             	mov    -0x80(%ebp),%eax
f01216f9:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01216fc:	e8 e8 b6 fe ff       	call   f010cde9 <sys_rcr2>
f0121701:	89 c2                	mov    %eax,%edx
f0121703:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121706:	39 c2                	cmp    %eax,%edx
f0121708:	74 17                	je     f0121721 <test_kfree+0x1e98>
f012170a:	83 ec 04             	sub    $0x4,%esp
f012170d:	68 40 b5 13 f0       	push   $0xf013b540
f0121712:	68 33 06 00 00       	push   $0x633
f0121717:	68 da ac 13 f0       	push   $0xf013acda
f012171c:	e8 da ea fd ff       	call   f01001fb <_panic>
			ptr[lastIndices[i]] = 10;
f0121721:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121724:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f012172b:	89 c2                	mov    %eax,%edx
f012172d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121730:	01 d0                	add    %edx,%eax
f0121732:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0121735:	e8 af b6 fe ff       	call   f010cde9 <sys_rcr2>
f012173a:	89 c2                	mov    %eax,%edx
f012173c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012173f:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f0121746:	89 c1                	mov    %eax,%ecx
f0121748:	8b 45 80             	mov    -0x80(%ebp),%eax
f012174b:	01 c8                	add    %ecx,%eax
f012174d:	39 c2                	cmp    %eax,%edx
f012174f:	74 17                	je     f0121768 <test_kfree+0x1edf>
f0121751:	83 ec 04             	sub    $0x4,%esp
f0121754:	68 40 b5 13 f0       	push   $0xf013b540
f0121759:	68 35 06 00 00       	push   $0x635
f012175e:	68 da ac 13 f0       	push   $0xf013acda
f0121763:	e8 93 ea fd ff       	call   f01001fb <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0121768:	ff 45 f4             	incl   -0xc(%ebp)
f012176b:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f012176f:	0f 8e 74 ff ff ff    	jle    f01216e9 <test_kfree+0x1e60>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0121775:	83 ec 0c             	sub    $0xc,%esp
f0121778:	6a 00                	push   $0x0
f012177a:	e8 7c b6 fe ff       	call   f010cdfb <sys_bypassPageFault>
f012177f:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0121782:	83 ec 0c             	sub    $0xc,%esp
f0121785:	68 85 b5 13 f0       	push   $0xf013b585
f012178a:	e8 f3 f4 fd ff       	call   f0100c82 <cprintf>
f012178f:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121792:	e8 c4 b1 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0121797:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012179a:	e8 9d 25 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012179f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f01217a2:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f01217a8:	83 ec 0c             	sub    $0xc,%esp
f01217ab:	50                   	push   %eax
f01217ac:	e8 0f 61 fe ff       	call   f01078c0 <kfree>
f01217b1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01217b4:	e8 83 25 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01217b9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01217bc:	74 17                	je     f01217d5 <test_kfree+0x1f4c>
f01217be:	83 ec 04             	sub    $0x4,%esp
f01217c1:	68 f4 ac 13 f0       	push   $0xf013acf4
f01217c6:	68 43 06 00 00       	push   $0x643
f01217cb:	68 da ac 13 f0       	push   $0xf013acda
f01217d0:	e8 26 ea fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01217d5:	e8 81 b1 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01217da:	89 c2                	mov    %eax,%edx
f01217dc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01217df:	39 c2                	cmp    %eax,%edx
f01217e1:	74 17                	je     f01217fa <test_kfree+0x1f71>
f01217e3:	83 ec 04             	sub    $0x4,%esp
f01217e6:	68 8c b5 13 f0       	push   $0xf013b58c
f01217eb:	68 44 06 00 00       	push   $0x644
f01217f0:	68 da ac 13 f0       	push   $0xf013acda
f01217f5:	e8 01 ea fd ff       	call   f01001fb <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01217fa:	e8 5c b1 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01217ff:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121802:	e8 35 25 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121807:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f012180a:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f0121810:	83 ec 0c             	sub    $0xc,%esp
f0121813:	50                   	push   %eax
f0121814:	e8 a7 60 fe ff       	call   f01078c0 <kfree>
f0121819:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012181c:	e8 1b 25 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121821:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121824:	74 17                	je     f012183d <test_kfree+0x1fb4>
f0121826:	83 ec 04             	sub    $0x4,%esp
f0121829:	68 f4 ac 13 f0       	push   $0xf013acf4
f012182e:	68 4a 06 00 00       	push   $0x64a
f0121833:	68 da ac 13 f0       	push   $0xf013acda
f0121838:	e8 be e9 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012183d:	e8 19 b1 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0121842:	89 c2                	mov    %eax,%edx
f0121844:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121847:	39 c2                	cmp    %eax,%edx
f0121849:	74 17                	je     f0121862 <test_kfree+0x1fd9>
f012184b:	83 ec 04             	sub    $0x4,%esp
f012184e:	68 8c b5 13 f0       	push   $0xf013b58c
f0121853:	68 4b 06 00 00       	push   $0x64b
f0121858:	68 da ac 13 f0       	push   $0xf013acda
f012185d:	e8 99 e9 fd ff       	call   f01001fb <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0121862:	e8 f4 b0 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0121867:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012186a:	e8 cd 24 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012186f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0121872:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0121878:	83 ec 0c             	sub    $0xc,%esp
f012187b:	50                   	push   %eax
f012187c:	e8 3f 60 fe ff       	call   f01078c0 <kfree>
f0121881:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121884:	e8 b3 24 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121889:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012188c:	74 17                	je     f01218a5 <test_kfree+0x201c>
f012188e:	83 ec 04             	sub    $0x4,%esp
f0121891:	68 f4 ac 13 f0       	push   $0xf013acf4
f0121896:	68 51 06 00 00       	push   $0x651
f012189b:	68 da ac 13 f0       	push   $0xf013acda
f01218a0:	e8 56 e9 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01218a5:	e8 b1 b0 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01218aa:	89 c2                	mov    %eax,%edx
f01218ac:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01218af:	39 c2                	cmp    %eax,%edx
f01218b1:	74 17                	je     f01218ca <test_kfree+0x2041>
f01218b3:	83 ec 04             	sub    $0x4,%esp
f01218b6:	68 8c b5 13 f0       	push   $0xf013b58c
f01218bb:	68 52 06 00 00       	push   $0x652
f01218c0:	68 da ac 13 f0       	push   $0xf013acda
f01218c5:	e8 31 e9 fd ff       	call   f01001fb <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01218ca:	e8 8c b0 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01218cf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01218d2:	e8 65 24 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01218d7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01218da:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f01218e0:	83 ec 0c             	sub    $0xc,%esp
f01218e3:	50                   	push   %eax
f01218e4:	e8 d7 5f fe ff       	call   f01078c0 <kfree>
f01218e9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01218ec:	e8 4b 24 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01218f1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01218f4:	74 17                	je     f012190d <test_kfree+0x2084>
f01218f6:	83 ec 04             	sub    $0x4,%esp
f01218f9:	68 f4 ac 13 f0       	push   $0xf013acf4
f01218fe:	68 58 06 00 00       	push   $0x658
f0121903:	68 da ac 13 f0       	push   $0xf013acda
f0121908:	e8 ee e8 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012190d:	e8 49 b0 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0121912:	89 c2                	mov    %eax,%edx
f0121914:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121917:	39 c2                	cmp    %eax,%edx
f0121919:	74 17                	je     f0121932 <test_kfree+0x20a9>
f012191b:	83 ec 04             	sub    $0x4,%esp
f012191e:	68 8c b5 13 f0       	push   $0xf013b58c
f0121923:	68 59 06 00 00       	push   $0x659
f0121928:	68 da ac 13 f0       	push   $0xf013acda
f012192d:	e8 c9 e8 fd ff       	call   f01001fb <_panic>

	}
	cprintf("\b\b\b85%");
f0121932:	83 ec 0c             	sub    $0xc,%esp
f0121935:	68 d3 b5 13 f0       	push   $0xf013b5d3
f012193a:	e8 43 f3 fd ff       	call   f0100c82 <cprintf>
f012193f:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0121942:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0121949:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0121950:	eb 48                	jmp    f012199a <test_kfree+0x2111>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0121952:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0121955:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f012195a:	83 ec 04             	sub    $0x4,%esp
f012195d:	8d 8d 44 fd ff ff    	lea    -0x2bc(%ebp),%ecx
f0121963:	51                   	push   %ecx
f0121964:	52                   	push   %edx
f0121965:	50                   	push   %eax
f0121966:	e8 6f 50 fe ff       	call   f01069da <get_page_table>
f012196b:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f012196e:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f0121974:	85 c0                	test   %eax,%eax
f0121976:	75 17                	jne    f012198f <test_kfree+0x2106>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0121978:	83 ec 04             	sub    $0x4,%esp
f012197b:	68 dc b5 13 f0       	push   $0xf013b5dc
f0121980:	68 67 06 00 00       	push   $0x667
f0121985:	68 da ac 13 f0       	push   $0xf013acda
f012198a:	e8 6c e8 fd ff       	call   f01001fb <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f012198f:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0121996:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f012199a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012199e:	78 b2                	js     f0121952 <test_kfree+0x20c9>
f01219a0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01219a4:	7f 09                	jg     f01219af <test_kfree+0x2126>
f01219a6:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f01219ad:	76 a3                	jbe    f0121952 <test_kfree+0x20c9>
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f01219af:	83 ec 0c             	sub    $0xc,%esp
f01219b2:	68 be ae 13 f0       	push   $0xf013aebe
f01219b7:	e8 c6 f2 fd ff       	call   f0100c82 <cprintf>
f01219bc:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f01219bf:	83 ec 0c             	sub    $0xc,%esp
f01219c2:	68 44 b6 13 f0       	push   $0xf013b644
f01219c7:	e8 b6 f2 fd ff       	call   f0100c82 <cprintf>
f01219cc:	83 c4 10             	add    $0x10,%esp

	return 1;
f01219cf:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01219d4:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01219d7:	5b                   	pop    %ebx
f01219d8:	5f                   	pop    %edi
f01219d9:	5d                   	pop    %ebp
f01219da:	c3                   	ret    

f01219db <test_kfree_bestfirstfit>:

int test_kfree_bestfirstfit()
{
f01219db:	55                   	push   %ebp
f01219dc:	89 e5                	mov    %esp,%ebp
f01219de:	57                   	push   %edi
f01219df:	53                   	push   %ebx
f01219e0:	81 ec 40 02 00 00    	sub    $0x240,%esp
	cprintf("==============================================\n");
f01219e6:	83 ec 0c             	sub    $0xc,%esp
f01219e9:	68 1c ac 13 f0       	push   $0xf013ac1c
f01219ee:	e8 8f f2 fd ff       	call   f0100c82 <cprintf>
f01219f3:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01219f6:	83 ec 0c             	sub    $0xc,%esp
f01219f9:	68 4c ac 13 f0       	push   $0xf013ac4c
f01219fe:	e8 7f f2 fd ff       	call   f0100c82 <cprintf>
f0121a03:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0121a06:	83 ec 0c             	sub    $0xc,%esp
f0121a09:	68 1c ac 13 f0       	push   $0xf013ac1c
f0121a0e:	e8 6f f2 fd ff       	call   f0100c82 <cprintf>
f0121a13:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0121a16:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0121a1a:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0121a1e:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0121a24:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0121a2a:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0121a31:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0121a38:	e8 1e af fe ff       	call   f010c95b <sys_calculate_free_frames>
f0121a3d:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0121a40:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0121a46:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121a4b:	b8 00 00 00 00       	mov    $0x0,%eax
f0121a50:	89 d7                	mov    %edx,%edi
f0121a52:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0121a54:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f0121a5a:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121a5f:	b8 00 00 00 00       	mov    $0x0,%eax
f0121a64:	89 d7                	mov    %edx,%edi
f0121a66:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0121a68:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0121a6e:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121a73:	b8 00 00 00 00       	mov    $0x0,%eax
f0121a78:	89 d7                	mov    %edx,%edi
f0121a7a:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121a7c:	e8 da ae fe ff       	call   f010c95b <sys_calculate_free_frames>
f0121a81:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121a84:	e8 b3 22 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121a89:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0121a8c:	83 ec 0c             	sub    $0xc,%esp
f0121a8f:	68 00 fc 1f 00       	push   $0x1ffc00
f0121a94:	e8 65 5d fe ff       	call   f01077fe <kmalloc>
f0121a99:	83 c4 10             	add    $0x10,%esp
f0121a9c:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121aa2:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0121aa8:	89 c1                	mov    %eax,%ecx
f0121aaa:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0121ab1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0121ab4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121ab9:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0121abc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0121abf:	ba 00 00 00 00       	mov    $0x0,%edx
f0121ac4:	f7 75 c8             	divl   -0x38(%ebp)
f0121ac7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0121aca:	29 d0                	sub    %edx,%eax
f0121acc:	89 c3                	mov    %eax,%ebx
f0121ace:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0121ad5:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121ada:	0f b6 d0             	movzbl %al,%edx
f0121add:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0121ae0:	01 d0                	add    %edx,%eax
f0121ae2:	48                   	dec    %eax
f0121ae3:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0121ae6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0121ae9:	ba 00 00 00 00       	mov    $0x0,%edx
f0121aee:	f7 75 c0             	divl   -0x40(%ebp)
f0121af1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0121af4:	29 d0                	sub    %edx,%eax
f0121af6:	01 c3                	add    %eax,%ebx
f0121af8:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0121aff:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121b04:	0f b6 c0             	movzbl %al,%eax
f0121b07:	c1 e0 04             	shl    $0x4,%eax
f0121b0a:	89 c2                	mov    %eax,%edx
f0121b0c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0121b0f:	01 d0                	add    %edx,%eax
f0121b11:	48                   	dec    %eax
f0121b12:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0121b15:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0121b18:	ba 00 00 00 00       	mov    $0x0,%edx
f0121b1d:	f7 75 b8             	divl   -0x48(%ebp)
f0121b20:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0121b23:	29 d0                	sub    %edx,%eax
f0121b25:	01 d8                	add    %ebx,%eax
f0121b27:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0121b2c:	39 c1                	cmp    %eax,%ecx
f0121b2e:	74 17                	je     f0121b47 <test_kfree_bestfirstfit+0x16c>
f0121b30:	83 ec 04             	sub    $0x4,%esp
f0121b33:	68 c0 ad 13 f0       	push   $0xf013adc0
f0121b38:	68 95 06 00 00       	push   $0x695
f0121b3d:	68 da ac 13 f0       	push   $0xf013acda
f0121b42:	e8 b4 e6 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121b47:	e8 f0 21 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121b4c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121b4f:	74 17                	je     f0121b68 <test_kfree_bestfirstfit+0x18d>
f0121b51:	83 ec 04             	sub    $0x4,%esp
f0121b54:	68 f4 ac 13 f0       	push   $0xf013acf4
f0121b59:	68 96 06 00 00       	push   $0x696
f0121b5e:	68 da ac 13 f0       	push   $0xf013acda
f0121b63:	e8 93 e6 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121b68:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121b6b:	e8 eb ad fe ff       	call   f010c95b <sys_calculate_free_frames>
f0121b70:	29 c3                	sub    %eax,%ebx
f0121b72:	89 d8                	mov    %ebx,%eax
f0121b74:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121b79:	74 17                	je     f0121b92 <test_kfree_bestfirstfit+0x1b7>
f0121b7b:	83 ec 04             	sub    $0x4,%esp
f0121b7e:	68 5c ad 13 f0       	push   $0xf013ad5c
f0121b83:	68 97 06 00 00       	push   $0x697
f0121b88:	68 da ac 13 f0       	push   $0xf013acda
f0121b8d:	e8 69 e6 fd ff       	call   f01001fb <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0121b92:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f0121b99:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121b9c:	e8 ba ad fe ff       	call   f010c95b <sys_calculate_free_frames>
f0121ba1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121ba4:	e8 93 21 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121ba9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0121bac:	83 ec 0c             	sub    $0xc,%esp
f0121baf:	68 00 fc 1f 00       	push   $0x1ffc00
f0121bb4:	e8 45 5c fe ff       	call   f01077fe <kmalloc>
f0121bb9:	83 c4 10             	add    $0x10,%esp
f0121bbc:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121bc2:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0121bc8:	89 c1                	mov    %eax,%ecx
f0121bca:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0121bd1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0121bd4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121bd9:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0121bdc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0121bdf:	ba 00 00 00 00       	mov    $0x0,%edx
f0121be4:	f7 75 b0             	divl   -0x50(%ebp)
f0121be7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0121bea:	29 d0                	sub    %edx,%eax
f0121bec:	89 c3                	mov    %eax,%ebx
f0121bee:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0121bf5:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121bfa:	0f b6 d0             	movzbl %al,%edx
f0121bfd:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0121c00:	01 d0                	add    %edx,%eax
f0121c02:	48                   	dec    %eax
f0121c03:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0121c06:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0121c09:	ba 00 00 00 00       	mov    $0x0,%edx
f0121c0e:	f7 75 a8             	divl   -0x58(%ebp)
f0121c11:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0121c14:	29 d0                	sub    %edx,%eax
f0121c16:	01 c3                	add    %eax,%ebx
f0121c18:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0121c1f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121c24:	0f b6 c0             	movzbl %al,%eax
f0121c27:	c1 e0 04             	shl    $0x4,%eax
f0121c2a:	89 c2                	mov    %eax,%edx
f0121c2c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0121c2f:	01 d0                	add    %edx,%eax
f0121c31:	48                   	dec    %eax
f0121c32:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0121c35:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0121c38:	ba 00 00 00 00       	mov    $0x0,%edx
f0121c3d:	f7 75 a0             	divl   -0x60(%ebp)
f0121c40:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0121c43:	29 d0                	sub    %edx,%eax
f0121c45:	01 d8                	add    %ebx,%eax
f0121c47:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0121c4c:	39 c1                	cmp    %eax,%ecx
f0121c4e:	74 17                	je     f0121c67 <test_kfree_bestfirstfit+0x28c>
f0121c50:	83 ec 04             	sub    $0x4,%esp
f0121c53:	68 c0 ad 13 f0       	push   $0xf013adc0
f0121c58:	68 9e 06 00 00       	push   $0x69e
f0121c5d:	68 da ac 13 f0       	push   $0xf013acda
f0121c62:	e8 94 e5 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121c67:	e8 d0 20 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121c6c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121c6f:	74 17                	je     f0121c88 <test_kfree_bestfirstfit+0x2ad>
f0121c71:	83 ec 04             	sub    $0x4,%esp
f0121c74:	68 f4 ac 13 f0       	push   $0xf013acf4
f0121c79:	68 9f 06 00 00       	push   $0x69f
f0121c7e:	68 da ac 13 f0       	push   $0xf013acda
f0121c83:	e8 73 e5 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121c88:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121c8b:	e8 cb ac fe ff       	call   f010c95b <sys_calculate_free_frames>
f0121c90:	29 c3                	sub    %eax,%ebx
f0121c92:	89 d8                	mov    %ebx,%eax
f0121c94:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121c99:	74 17                	je     f0121cb2 <test_kfree_bestfirstfit+0x2d7>
f0121c9b:	83 ec 04             	sub    $0x4,%esp
f0121c9e:	68 5c ad 13 f0       	push   $0xf013ad5c
f0121ca3:	68 a0 06 00 00       	push   $0x6a0
f0121ca8:	68 da ac 13 f0       	push   $0xf013acda
f0121cad:	e8 49 e5 fd ff       	call   f01001fb <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0121cb2:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f0121cb9:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121cbc:	e8 9a ac fe ff       	call   f010c95b <sys_calculate_free_frames>
f0121cc1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121cc4:	e8 73 20 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121cc9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0121ccc:	83 ec 0c             	sub    $0xc,%esp
f0121ccf:	68 00 08 00 00       	push   $0x800
f0121cd4:	e8 25 5b fe ff       	call   f01077fe <kmalloc>
f0121cd9:	83 c4 10             	add    $0x10,%esp
f0121cdc:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121ce2:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0121ce8:	89 c1                	mov    %eax,%ecx
f0121cea:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0121cf1:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121cf4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121cf9:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0121cfc:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0121cff:	ba 00 00 00 00       	mov    $0x0,%edx
f0121d04:	f7 75 98             	divl   -0x68(%ebp)
f0121d07:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0121d0a:	29 d0                	sub    %edx,%eax
f0121d0c:	89 c3                	mov    %eax,%ebx
f0121d0e:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0121d15:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121d1a:	0f b6 d0             	movzbl %al,%edx
f0121d1d:	8b 45 90             	mov    -0x70(%ebp),%eax
f0121d20:	01 d0                	add    %edx,%eax
f0121d22:	48                   	dec    %eax
f0121d23:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0121d26:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0121d29:	ba 00 00 00 00       	mov    $0x0,%edx
f0121d2e:	f7 75 90             	divl   -0x70(%ebp)
f0121d31:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0121d34:	29 d0                	sub    %edx,%eax
f0121d36:	01 c3                	add    %eax,%ebx
f0121d38:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0121d3f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121d44:	0f b6 c0             	movzbl %al,%eax
f0121d47:	c1 e0 04             	shl    $0x4,%eax
f0121d4a:	89 c2                	mov    %eax,%edx
f0121d4c:	8b 45 88             	mov    -0x78(%ebp),%eax
f0121d4f:	01 d0                	add    %edx,%eax
f0121d51:	48                   	dec    %eax
f0121d52:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0121d55:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0121d58:	ba 00 00 00 00       	mov    $0x0,%edx
f0121d5d:	f7 75 88             	divl   -0x78(%ebp)
f0121d60:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0121d63:	29 d0                	sub    %edx,%eax
f0121d65:	01 d8                	add    %ebx,%eax
f0121d67:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0121d6c:	39 c1                	cmp    %eax,%ecx
f0121d6e:	74 17                	je     f0121d87 <test_kfree_bestfirstfit+0x3ac>
f0121d70:	83 ec 04             	sub    $0x4,%esp
f0121d73:	68 c0 ad 13 f0       	push   $0xf013adc0
f0121d78:	68 a7 06 00 00       	push   $0x6a7
f0121d7d:	68 da ac 13 f0       	push   $0xf013acda
f0121d82:	e8 74 e4 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121d87:	e8 b0 1f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121d8c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121d8f:	74 17                	je     f0121da8 <test_kfree_bestfirstfit+0x3cd>
f0121d91:	83 ec 04             	sub    $0x4,%esp
f0121d94:	68 f4 ac 13 f0       	push   $0xf013acf4
f0121d99:	68 a8 06 00 00       	push   $0x6a8
f0121d9e:	68 da ac 13 f0       	push   $0xf013acda
f0121da3:	e8 53 e4 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121da8:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121dab:	e8 ab ab fe ff       	call   f010c95b <sys_calculate_free_frames>
f0121db0:	29 c3                	sub    %eax,%ebx
f0121db2:	89 d8                	mov    %ebx,%eax
f0121db4:	83 f8 01             	cmp    $0x1,%eax
f0121db7:	74 17                	je     f0121dd0 <test_kfree_bestfirstfit+0x3f5>
f0121db9:	83 ec 04             	sub    $0x4,%esp
f0121dbc:	68 5c ad 13 f0       	push   $0xf013ad5c
f0121dc1:	68 a9 06 00 00       	push   $0x6a9
f0121dc6:	68 da ac 13 f0       	push   $0xf013acda
f0121dcb:	e8 2b e4 fd ff       	call   f01001fb <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0121dd0:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f0121dd7:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0121dda:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0121de0:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0121de3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121dea:	eb 0e                	jmp    f0121dfa <test_kfree_bestfirstfit+0x41f>
		{
			ptr[i] = 2 ;
f0121dec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121def:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121df2:	01 d0                	add    %edx,%eax
f0121df4:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0121df7:	ff 45 f4             	incl   -0xc(%ebp)
f0121dfa:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0121e00:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121e03:	7f e7                	jg     f0121dec <test_kfree_bestfirstfit+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121e05:	e8 51 ab fe ff       	call   f010c95b <sys_calculate_free_frames>
f0121e0a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121e0d:	e8 2a 1f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121e12:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0121e15:	83 ec 0c             	sub    $0xc,%esp
f0121e18:	68 00 08 00 00       	push   $0x800
f0121e1d:	e8 dc 59 fe ff       	call   f01077fe <kmalloc>
f0121e22:	83 c4 10             	add    $0x10,%esp
f0121e25:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121e2b:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0121e31:	89 c1                	mov    %eax,%ecx
f0121e33:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0121e3a:	10 00 00 
f0121e3d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0121e43:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121e48:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0121e4e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0121e54:	ba 00 00 00 00       	mov    $0x0,%edx
f0121e59:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0121e5f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0121e65:	29 d0                	sub    %edx,%eax
f0121e67:	89 c3                	mov    %eax,%ebx
f0121e69:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0121e70:	10 00 00 
f0121e73:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121e78:	0f b6 d0             	movzbl %al,%edx
f0121e7b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0121e81:	01 d0                	add    %edx,%eax
f0121e83:	48                   	dec    %eax
f0121e84:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0121e8a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0121e90:	ba 00 00 00 00       	mov    $0x0,%edx
f0121e95:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0121e9b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0121ea1:	29 d0                	sub    %edx,%eax
f0121ea3:	01 c3                	add    %eax,%ebx
f0121ea5:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0121eac:	10 00 00 
f0121eaf:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121eb4:	0f b6 c0             	movzbl %al,%eax
f0121eb7:	c1 e0 04             	shl    $0x4,%eax
f0121eba:	89 c2                	mov    %eax,%edx
f0121ebc:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0121ec2:	01 d0                	add    %edx,%eax
f0121ec4:	48                   	dec    %eax
f0121ec5:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0121ecb:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0121ed1:	ba 00 00 00 00       	mov    $0x0,%edx
f0121ed6:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0121edc:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0121ee2:	29 d0                	sub    %edx,%eax
f0121ee4:	01 d8                	add    %ebx,%eax
f0121ee6:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0121eeb:	39 c1                	cmp    %eax,%ecx
f0121eed:	74 17                	je     f0121f06 <test_kfree_bestfirstfit+0x52b>
f0121eef:	83 ec 04             	sub    $0x4,%esp
f0121ef2:	68 c0 ad 13 f0       	push   $0xf013adc0
f0121ef7:	68 b5 06 00 00       	push   $0x6b5
f0121efc:	68 da ac 13 f0       	push   $0xf013acda
f0121f01:	e8 f5 e2 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121f06:	e8 31 1e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121f0b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121f0e:	74 17                	je     f0121f27 <test_kfree_bestfirstfit+0x54c>
f0121f10:	83 ec 04             	sub    $0x4,%esp
f0121f13:	68 f4 ac 13 f0       	push   $0xf013acf4
f0121f18:	68 b6 06 00 00       	push   $0x6b6
f0121f1d:	68 da ac 13 f0       	push   $0xf013acda
f0121f22:	e8 d4 e2 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121f27:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121f2a:	e8 2c aa fe ff       	call   f010c95b <sys_calculate_free_frames>
f0121f2f:	29 c3                	sub    %eax,%ebx
f0121f31:	89 d8                	mov    %ebx,%eax
f0121f33:	83 f8 01             	cmp    $0x1,%eax
f0121f36:	74 17                	je     f0121f4f <test_kfree_bestfirstfit+0x574>
f0121f38:	83 ec 04             	sub    $0x4,%esp
f0121f3b:	68 5c ad 13 f0       	push   $0xf013ad5c
f0121f40:	68 b7 06 00 00       	push   $0x6b7
f0121f45:	68 da ac 13 f0       	push   $0xf013acda
f0121f4a:	e8 ac e2 fd ff       	call   f01001fb <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0121f4f:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f0121f56:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0121f59:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0121f5f:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0121f62:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121f69:	eb 0e                	jmp    f0121f79 <test_kfree_bestfirstfit+0x59e>
		{
			ptr[i] = 3 ;
f0121f6b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121f6e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121f71:	01 d0                	add    %edx,%eax
f0121f73:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0121f76:	ff 45 f4             	incl   -0xc(%ebp)
f0121f79:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0121f7f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121f82:	7f e7                	jg     f0121f6b <test_kfree_bestfirstfit+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0121f84:	e8 d2 a9 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0121f89:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121f8c:	e8 ab 1d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121f91:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0121f94:	83 ec 0c             	sub    $0xc,%esp
f0121f97:	68 00 1c 00 00       	push   $0x1c00
f0121f9c:	e8 5d 58 fe ff       	call   f01077fe <kmalloc>
f0121fa1:	83 c4 10             	add    $0x10,%esp
f0121fa4:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121faa:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0121fb0:	89 c1                	mov    %eax,%ecx
f0121fb2:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0121fb9:	10 00 00 
f0121fbc:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0121fc2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121fc7:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0121fcd:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0121fd3:	ba 00 00 00 00       	mov    $0x0,%edx
f0121fd8:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0121fde:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0121fe4:	29 d0                	sub    %edx,%eax
f0121fe6:	89 c3                	mov    %eax,%ebx
f0121fe8:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0121fef:	10 00 00 
f0121ff2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121ff7:	0f b6 d0             	movzbl %al,%edx
f0121ffa:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0122000:	01 d0                	add    %edx,%eax
f0122002:	48                   	dec    %eax
f0122003:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0122009:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012200f:	ba 00 00 00 00       	mov    $0x0,%edx
f0122014:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012201a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0122020:	29 d0                	sub    %edx,%eax
f0122022:	01 c3                	add    %eax,%ebx
f0122024:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012202b:	10 00 00 
f012202e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0122033:	0f b6 c0             	movzbl %al,%eax
f0122036:	c1 e0 04             	shl    $0x4,%eax
f0122039:	89 c2                	mov    %eax,%edx
f012203b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0122041:	01 d0                	add    %edx,%eax
f0122043:	48                   	dec    %eax
f0122044:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012204a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0122050:	ba 00 00 00 00       	mov    $0x0,%edx
f0122055:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012205b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0122061:	29 d0                	sub    %edx,%eax
f0122063:	01 d8                	add    %ebx,%eax
f0122065:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012206a:	39 c1                	cmp    %eax,%ecx
f012206c:	74 17                	je     f0122085 <test_kfree_bestfirstfit+0x6aa>
f012206e:	83 ec 04             	sub    $0x4,%esp
f0122071:	68 c0 ad 13 f0       	push   $0xf013adc0
f0122076:	68 c3 06 00 00       	push   $0x6c3
f012207b:	68 da ac 13 f0       	push   $0xf013acda
f0122080:	e8 76 e1 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122085:	e8 b2 1c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012208a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012208d:	74 17                	je     f01220a6 <test_kfree_bestfirstfit+0x6cb>
f012208f:	83 ec 04             	sub    $0x4,%esp
f0122092:	68 f4 ac 13 f0       	push   $0xf013acf4
f0122097:	68 c4 06 00 00       	push   $0x6c4
f012209c:	68 da ac 13 f0       	push   $0xf013acda
f01220a1:	e8 55 e1 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01220a6:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01220a9:	e8 ad a8 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01220ae:	29 c3                	sub    %eax,%ebx
f01220b0:	89 d8                	mov    %ebx,%eax
f01220b2:	83 f8 02             	cmp    $0x2,%eax
f01220b5:	74 17                	je     f01220ce <test_kfree_bestfirstfit+0x6f3>
f01220b7:	83 ec 04             	sub    $0x4,%esp
f01220ba:	68 5c ad 13 f0       	push   $0xf013ad5c
f01220bf:	68 c5 06 00 00       	push   $0x6c5
f01220c4:	68 da ac 13 f0       	push   $0xf013acda
f01220c9:	e8 2d e1 fd ff       	call   f01001fb <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01220ce:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f01220d5:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01220d8:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01220de:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01220e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01220e8:	eb 0e                	jmp    f01220f8 <test_kfree_bestfirstfit+0x71d>
		{
			ptr[i] = 4 ;
f01220ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01220ed:	8b 45 80             	mov    -0x80(%ebp),%eax
f01220f0:	01 d0                	add    %edx,%eax
f01220f2:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01220f5:	ff 45 f4             	incl   -0xc(%ebp)
f01220f8:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01220fe:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122101:	7f e7                	jg     f01220ea <test_kfree_bestfirstfit+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122103:	e8 53 a8 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0122108:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012210b:	e8 2c 1c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122110:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0122113:	83 ec 0c             	sub    $0xc,%esp
f0122116:	68 00 fc 2f 00       	push   $0x2ffc00
f012211b:	e8 de 56 fe ff       	call   f01077fe <kmalloc>
f0122120:	83 c4 10             	add    $0x10,%esp
f0122123:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122129:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f012212f:	89 c1                	mov    %eax,%ecx
f0122131:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0122138:	10 00 00 
f012213b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0122141:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122146:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012214c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0122152:	ba 00 00 00 00       	mov    $0x0,%edx
f0122157:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012215d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0122163:	29 d0                	sub    %edx,%eax
f0122165:	89 c3                	mov    %eax,%ebx
f0122167:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012216e:	10 00 00 
f0122171:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0122176:	0f b6 d0             	movzbl %al,%edx
f0122179:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012217f:	01 d0                	add    %edx,%eax
f0122181:	48                   	dec    %eax
f0122182:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0122188:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012218e:	ba 00 00 00 00       	mov    $0x0,%edx
f0122193:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0122199:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012219f:	29 d0                	sub    %edx,%eax
f01221a1:	01 c3                	add    %eax,%ebx
f01221a3:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f01221aa:	10 00 00 
f01221ad:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01221b2:	0f b6 c0             	movzbl %al,%eax
f01221b5:	c1 e0 04             	shl    $0x4,%eax
f01221b8:	89 c2                	mov    %eax,%edx
f01221ba:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01221c0:	01 d0                	add    %edx,%eax
f01221c2:	48                   	dec    %eax
f01221c3:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01221c9:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01221cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01221d4:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01221da:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01221e0:	29 d0                	sub    %edx,%eax
f01221e2:	01 d8                	add    %ebx,%eax
f01221e4:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01221e9:	39 c1                	cmp    %eax,%ecx
f01221eb:	74 17                	je     f0122204 <test_kfree_bestfirstfit+0x829>
f01221ed:	83 ec 04             	sub    $0x4,%esp
f01221f0:	68 c0 ad 13 f0       	push   $0xf013adc0
f01221f5:	68 d1 06 00 00       	push   $0x6d1
f01221fa:	68 da ac 13 f0       	push   $0xf013acda
f01221ff:	e8 f7 df fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122204:	e8 33 1b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122209:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012220c:	74 17                	je     f0122225 <test_kfree_bestfirstfit+0x84a>
f012220e:	83 ec 04             	sub    $0x4,%esp
f0122211:	68 f4 ac 13 f0       	push   $0xf013acf4
f0122216:	68 d2 06 00 00       	push   $0x6d2
f012221b:	68 da ac 13 f0       	push   $0xf013acda
f0122220:	e8 d6 df fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122225:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122228:	e8 2e a7 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012222d:	29 c3                	sub    %eax,%ebx
f012222f:	89 d8                	mov    %ebx,%eax
f0122231:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122236:	74 17                	je     f012224f <test_kfree_bestfirstfit+0x874>
f0122238:	83 ec 04             	sub    $0x4,%esp
f012223b:	68 5c ad 13 f0       	push   $0xf013ad5c
f0122240:	68 d3 06 00 00       	push   $0x6d3
f0122245:	68 da ac 13 f0       	push   $0xf013acda
f012224a:	e8 ac df fd ff       	call   f01001fb <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012224f:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f0122256:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0122259:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f012225f:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0122262:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122269:	eb 0e                	jmp    f0122279 <test_kfree_bestfirstfit+0x89e>
		{
			ptr[i] = 5 ;
f012226b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012226e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122271:	01 d0                	add    %edx,%eax
f0122273:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0122276:	ff 45 f4             	incl   -0xc(%ebp)
f0122279:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012227f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122282:	7f e7                	jg     f012226b <test_kfree_bestfirstfit+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0122284:	e8 d2 a6 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0122289:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012228c:	e8 ab 1a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122291:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0122294:	83 ec 0c             	sub    $0xc,%esp
f0122297:	68 00 fc 5f 00       	push   $0x5ffc00
f012229c:	e8 5d 55 fe ff       	call   f01077fe <kmalloc>
f01222a1:	83 c4 10             	add    $0x10,%esp
f01222a4:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01222aa:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f01222b0:	89 c1                	mov    %eax,%ecx
f01222b2:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01222b9:	10 00 00 
f01222bc:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01222c2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01222c7:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01222cd:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01222d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01222d8:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01222de:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01222e4:	29 d0                	sub    %edx,%eax
f01222e6:	89 c3                	mov    %eax,%ebx
f01222e8:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01222ef:	10 00 00 
f01222f2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01222f7:	0f b6 d0             	movzbl %al,%edx
f01222fa:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0122300:	01 d0                	add    %edx,%eax
f0122302:	48                   	dec    %eax
f0122303:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0122309:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012230f:	ba 00 00 00 00       	mov    $0x0,%edx
f0122314:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012231a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0122320:	29 d0                	sub    %edx,%eax
f0122322:	01 c3                	add    %eax,%ebx
f0122324:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012232b:	10 00 00 
f012232e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0122333:	0f b6 c0             	movzbl %al,%eax
f0122336:	c1 e0 04             	shl    $0x4,%eax
f0122339:	89 c2                	mov    %eax,%edx
f012233b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0122341:	01 d0                	add    %edx,%eax
f0122343:	48                   	dec    %eax
f0122344:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012234a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0122350:	ba 00 00 00 00       	mov    $0x0,%edx
f0122355:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012235b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0122361:	29 d0                	sub    %edx,%eax
f0122363:	01 d8                	add    %ebx,%eax
f0122365:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012236a:	39 c1                	cmp    %eax,%ecx
f012236c:	74 17                	je     f0122385 <test_kfree_bestfirstfit+0x9aa>
f012236e:	83 ec 04             	sub    $0x4,%esp
f0122371:	68 c0 ad 13 f0       	push   $0xf013adc0
f0122376:	68 df 06 00 00       	push   $0x6df
f012237b:	68 da ac 13 f0       	push   $0xf013acda
f0122380:	e8 76 de fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122385:	e8 b2 19 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012238a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012238d:	74 17                	je     f01223a6 <test_kfree_bestfirstfit+0x9cb>
f012238f:	83 ec 04             	sub    $0x4,%esp
f0122392:	68 f4 ac 13 f0       	push   $0xf013acf4
f0122397:	68 e0 06 00 00       	push   $0x6e0
f012239c:	68 da ac 13 f0       	push   $0xf013acda
f01223a1:	e8 55 de fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01223a6:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01223a9:	e8 ad a5 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01223ae:	29 c3                	sub    %eax,%ebx
f01223b0:	89 d8                	mov    %ebx,%eax
f01223b2:	3d 00 06 00 00       	cmp    $0x600,%eax
f01223b7:	74 17                	je     f01223d0 <test_kfree_bestfirstfit+0x9f5>
f01223b9:	83 ec 04             	sub    $0x4,%esp
f01223bc:	68 5c ad 13 f0       	push   $0xf013ad5c
f01223c1:	68 e1 06 00 00       	push   $0x6e1
f01223c6:	68 da ac 13 f0       	push   $0xf013acda
f01223cb:	e8 2b de fd ff       	call   f01001fb <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f01223d0:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f01223d7:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01223da:	e8 7c a5 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01223df:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01223e2:	e8 55 19 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01223e7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01223ea:	83 ec 0c             	sub    $0xc,%esp
f01223ed:	68 00 38 00 00       	push   $0x3800
f01223f2:	e8 07 54 fe ff       	call   f01077fe <kmalloc>
f01223f7:	83 c4 10             	add    $0x10,%esp
f01223fa:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122400:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0122406:	89 c1                	mov    %eax,%ecx
f0122408:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012240f:	10 00 00 
f0122412:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0122418:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012241d:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0122423:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0122429:	ba 00 00 00 00       	mov    $0x0,%edx
f012242e:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0122434:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012243a:	29 d0                	sub    %edx,%eax
f012243c:	89 c3                	mov    %eax,%ebx
f012243e:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0122445:	10 00 00 
f0122448:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012244d:	0f b6 d0             	movzbl %al,%edx
f0122450:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0122456:	01 d0                	add    %edx,%eax
f0122458:	48                   	dec    %eax
f0122459:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012245f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0122465:	ba 00 00 00 00       	mov    $0x0,%edx
f012246a:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0122470:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0122476:	29 d0                	sub    %edx,%eax
f0122478:	01 c3                	add    %eax,%ebx
f012247a:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0122481:	10 00 00 
f0122484:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0122489:	0f b6 c0             	movzbl %al,%eax
f012248c:	c1 e0 04             	shl    $0x4,%eax
f012248f:	89 c2                	mov    %eax,%edx
f0122491:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0122497:	01 d0                	add    %edx,%eax
f0122499:	48                   	dec    %eax
f012249a:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f01224a0:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01224a6:	ba 00 00 00 00       	mov    $0x0,%edx
f01224ab:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f01224b1:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01224b7:	29 d0                	sub    %edx,%eax
f01224b9:	01 d8                	add    %ebx,%eax
f01224bb:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01224c0:	39 c1                	cmp    %eax,%ecx
f01224c2:	74 17                	je     f01224db <test_kfree_bestfirstfit+0xb00>
f01224c4:	83 ec 04             	sub    $0x4,%esp
f01224c7:	68 c0 ad 13 f0       	push   $0xf013adc0
f01224cc:	68 e8 06 00 00       	push   $0x6e8
f01224d1:	68 da ac 13 f0       	push   $0xf013acda
f01224d6:	e8 20 dd fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01224db:	e8 5c 18 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01224e0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01224e3:	74 17                	je     f01224fc <test_kfree_bestfirstfit+0xb21>
f01224e5:	83 ec 04             	sub    $0x4,%esp
f01224e8:	68 f4 ac 13 f0       	push   $0xf013acf4
f01224ed:	68 e9 06 00 00       	push   $0x6e9
f01224f2:	68 da ac 13 f0       	push   $0xf013acda
f01224f7:	e8 ff dc fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01224fc:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01224ff:	e8 57 a4 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0122504:	29 c3                	sub    %eax,%ebx
f0122506:	89 d8                	mov    %ebx,%eax
f0122508:	83 f8 04             	cmp    $0x4,%eax
f012250b:	74 17                	je     f0122524 <test_kfree_bestfirstfit+0xb49>
f012250d:	83 ec 04             	sub    $0x4,%esp
f0122510:	68 5c ad 13 f0       	push   $0xf013ad5c
f0122515:	68 ea 06 00 00       	push   $0x6ea
f012251a:	68 da ac 13 f0       	push   $0xf013acda
f012251f:	e8 d7 dc fd ff       	call   f01001fb <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0122524:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f012252b:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f012252e:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0122534:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0122537:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012253e:	eb 0e                	jmp    f012254e <test_kfree_bestfirstfit+0xb73>
		{
			ptr[i] = 7 ;
f0122540:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122543:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122546:	01 d0                	add    %edx,%eax
f0122548:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012254b:	ff 45 f4             	incl   -0xc(%ebp)
f012254e:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0122554:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122557:	7f e7                	jg     f0122540 <test_kfree_bestfirstfit+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0122559:	e8 fd a3 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012255e:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0122564:	e8 d3 17 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122569:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f012256f:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0122575:	83 ec 0c             	sub    $0xc,%esp
f0122578:	50                   	push   %eax
f0122579:	e8 42 53 fe ff       	call   f01078c0 <kfree>
f012257e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122581:	e8 b6 17 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122586:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f012258c:	74 17                	je     f01225a5 <test_kfree_bestfirstfit+0xbca>
f012258e:	83 ec 04             	sub    $0x4,%esp
f0122591:	68 f4 ac 13 f0       	push   $0xf013acf4
f0122596:	68 f9 06 00 00       	push   $0x6f9
f012259b:	68 da ac 13 f0       	push   $0xf013acda
f01225a0:	e8 56 dc fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01225a5:	e8 b1 a3 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01225aa:	89 c2                	mov    %eax,%edx
f01225ac:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01225b2:	29 c2                	sub    %eax,%edx
f01225b4:	89 d0                	mov    %edx,%eax
f01225b6:	3d 00 02 00 00       	cmp    $0x200,%eax
f01225bb:	74 17                	je     f01225d4 <test_kfree_bestfirstfit+0xbf9>
f01225bd:	83 ec 04             	sub    $0x4,%esp
f01225c0:	68 64 b4 13 f0       	push   $0xf013b464
f01225c5:	68 fa 06 00 00       	push   $0x6fa
f01225ca:	68 da ac 13 f0       	push   $0xf013acda
f01225cf:	e8 27 dc fd ff       	call   f01001fb <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01225d4:	e8 82 a3 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01225d9:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01225df:	e8 58 17 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01225e4:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f01225ea:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01225f0:	83 ec 0c             	sub    $0xc,%esp
f01225f3:	50                   	push   %eax
f01225f4:	e8 c7 52 fe ff       	call   f01078c0 <kfree>
f01225f9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01225fc:	e8 3b 17 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122601:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0122607:	74 17                	je     f0122620 <test_kfree_bestfirstfit+0xc45>
f0122609:	83 ec 04             	sub    $0x4,%esp
f012260c:	68 f4 ac 13 f0       	push   $0xf013acf4
f0122611:	68 00 07 00 00       	push   $0x700
f0122616:	68 da ac 13 f0       	push   $0xf013acda
f012261b:	e8 db db fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0122620:	e8 36 a3 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0122625:	89 c2                	mov    %eax,%edx
f0122627:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012262d:	29 c2                	sub    %eax,%edx
f012262f:	89 d0                	mov    %edx,%eax
f0122631:	83 f8 01             	cmp    $0x1,%eax
f0122634:	74 17                	je     f012264d <test_kfree_bestfirstfit+0xc72>
f0122636:	83 ec 04             	sub    $0x4,%esp
f0122639:	68 64 b4 13 f0       	push   $0xf013b464
f012263e:	68 01 07 00 00       	push   $0x701
f0122643:	68 da ac 13 f0       	push   $0xf013acda
f0122648:	e8 ae db fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012264d:	e8 09 a3 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0122652:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122658:	e8 df 16 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012265d:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0122663:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0122669:	83 ec 0c             	sub    $0xc,%esp
f012266c:	50                   	push   %eax
f012266d:	e8 4e 52 fe ff       	call   f01078c0 <kfree>
f0122672:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122675:	e8 c2 16 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012267a:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0122680:	74 17                	je     f0122699 <test_kfree_bestfirstfit+0xcbe>
f0122682:	83 ec 04             	sub    $0x4,%esp
f0122685:	68 f4 ac 13 f0       	push   $0xf013acf4
f012268a:	68 07 07 00 00       	push   $0x707
f012268f:	68 da ac 13 f0       	push   $0xf013acda
f0122694:	e8 62 db fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0122699:	e8 bd a2 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012269e:	89 c2                	mov    %eax,%edx
f01226a0:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01226a6:	29 c2                	sub    %eax,%edx
f01226a8:	89 d0                	mov    %edx,%eax
f01226aa:	3d 00 02 00 00       	cmp    $0x200,%eax
f01226af:	74 17                	je     f01226c8 <test_kfree_bestfirstfit+0xced>
f01226b1:	83 ec 04             	sub    $0x4,%esp
f01226b4:	68 64 b4 13 f0       	push   $0xf013b464
f01226b9:	68 08 07 00 00       	push   $0x708
f01226be:	68 da ac 13 f0       	push   $0xf013acda
f01226c3:	e8 33 db fd ff       	call   f01001fb <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01226c8:	e8 8e a2 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01226cd:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01226d3:	e8 64 16 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01226d8:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f01226de:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f01226e4:	83 ec 0c             	sub    $0xc,%esp
f01226e7:	50                   	push   %eax
f01226e8:	e8 d3 51 fe ff       	call   f01078c0 <kfree>
f01226ed:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01226f0:	e8 47 16 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01226f5:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01226fb:	74 17                	je     f0122714 <test_kfree_bestfirstfit+0xd39>
f01226fd:	83 ec 04             	sub    $0x4,%esp
f0122700:	68 f4 ac 13 f0       	push   $0xf013acf4
f0122705:	68 0e 07 00 00       	push   $0x70e
f012270a:	68 da ac 13 f0       	push   $0xf013acda
f012270f:	e8 e7 da fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122714:	e8 42 a2 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0122719:	89 c2                	mov    %eax,%edx
f012271b:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122721:	29 c2                	sub    %eax,%edx
f0122723:	89 d0                	mov    %edx,%eax
f0122725:	3d 00 06 00 00       	cmp    $0x600,%eax
f012272a:	74 17                	je     f0122743 <test_kfree_bestfirstfit+0xd68>
f012272c:	83 ec 04             	sub    $0x4,%esp
f012272f:	68 64 b4 13 f0       	push   $0xf013b464
f0122734:	68 0f 07 00 00       	push   $0x70f
f0122739:	68 da ac 13 f0       	push   $0xf013acda
f012273e:	e8 b8 da fd ff       	call   f01001fb <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0122743:	83 ec 0c             	sub    $0xc,%esp
f0122746:	68 9c b4 13 f0       	push   $0xf013b49c
f012274b:	e8 32 e5 fd ff       	call   f0100c82 <cprintf>
f0122750:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f0122753:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0122759:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012275c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122763:	eb 1e                	jmp    f0122783 <test_kfree_bestfirstfit+0xda8>
		{
			sums[3] += ptr[i] ;
f0122765:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f012276b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012276e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122771:	01 c8                	add    %ecx,%eax
f0122773:	8a 00                	mov    (%eax),%al
f0122775:	0f be c0             	movsbl %al,%eax
f0122778:	01 d0                	add    %edx,%eax
f012277a:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0122780:	ff 45 f4             	incl   -0xc(%ebp)
f0122783:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0122789:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012278c:	7f d7                	jg     f0122765 <test_kfree_bestfirstfit+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f012278e:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0122794:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012279a:	89 c1                	mov    %eax,%ecx
f012279c:	01 c9                	add    %ecx,%ecx
f012279e:	01 c8                	add    %ecx,%eax
f01227a0:	39 c2                	cmp    %eax,%edx
f01227a2:	74 17                	je     f01227bb <test_kfree_bestfirstfit+0xde0>
f01227a4:	83 ec 04             	sub    $0x4,%esp
f01227a7:	68 c0 b4 13 f0       	push   $0xf013b4c0
f01227ac:	68 1c 07 00 00       	push   $0x71c
f01227b1:	68 da ac 13 f0       	push   $0xf013acda
f01227b6:	e8 40 da fd ff       	call   f01001fb <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f01227bb:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01227c1:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01227c4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01227cb:	eb 1e                	jmp    f01227eb <test_kfree_bestfirstfit+0xe10>
		{
			sums[4] += ptr[i] ;
f01227cd:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f01227d3:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01227d6:	8b 45 80             	mov    -0x80(%ebp),%eax
f01227d9:	01 c8                	add    %ecx,%eax
f01227db:	8a 00                	mov    (%eax),%al
f01227dd:	0f be c0             	movsbl %al,%eax
f01227e0:	01 d0                	add    %edx,%eax
f01227e2:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01227e8:	ff 45 f4             	incl   -0xc(%ebp)
f01227eb:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01227f1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01227f4:	7f d7                	jg     f01227cd <test_kfree_bestfirstfit+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f01227f6:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01227fc:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0122802:	c1 e2 02             	shl    $0x2,%edx
f0122805:	39 d0                	cmp    %edx,%eax
f0122807:	74 17                	je     f0122820 <test_kfree_bestfirstfit+0xe45>
f0122809:	83 ec 04             	sub    $0x4,%esp
f012280c:	68 c0 b4 13 f0       	push   $0xf013b4c0
f0122811:	68 24 07 00 00       	push   $0x724
f0122816:	68 da ac 13 f0       	push   $0xf013acda
f012281b:	e8 db d9 fd ff       	call   f01001fb <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0122820:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122826:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0122829:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122830:	eb 1e                	jmp    f0122850 <test_kfree_bestfirstfit+0xe75>
		{
			sums[5] += ptr[i] ;
f0122832:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f0122838:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012283b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012283e:	01 c8                	add    %ecx,%eax
f0122840:	8a 00                	mov    (%eax),%al
f0122842:	0f be c0             	movsbl %al,%eax
f0122845:	01 d0                	add    %edx,%eax
f0122847:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012284d:	ff 45 f4             	incl   -0xc(%ebp)
f0122850:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0122856:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122859:	7f d7                	jg     f0122832 <test_kfree_bestfirstfit+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f012285b:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f0122861:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0122867:	89 d0                	mov    %edx,%eax
f0122869:	c1 e0 02             	shl    $0x2,%eax
f012286c:	01 d0                	add    %edx,%eax
f012286e:	39 c1                	cmp    %eax,%ecx
f0122870:	74 17                	je     f0122889 <test_kfree_bestfirstfit+0xeae>
f0122872:	83 ec 04             	sub    $0x4,%esp
f0122875:	68 c0 b4 13 f0       	push   $0xf013b4c0
f012287a:	68 2c 07 00 00       	push   $0x72c
f012287f:	68 da ac 13 f0       	push   $0xf013acda
f0122884:	e8 72 d9 fd ff       	call   f01001fb <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0122889:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012288f:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0122892:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122899:	eb 1e                	jmp    f01228b9 <test_kfree_bestfirstfit+0xede>
		{
			sums[7] += ptr[i] ;
f012289b:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f01228a1:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01228a4:	8b 45 80             	mov    -0x80(%ebp),%eax
f01228a7:	01 c8                	add    %ecx,%eax
f01228a9:	8a 00                	mov    (%eax),%al
f01228ab:	0f be c0             	movsbl %al,%eax
f01228ae:	01 d0                	add    %edx,%eax
f01228b0:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01228b6:	ff 45 f4             	incl   -0xc(%ebp)
f01228b9:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01228bf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01228c2:	7f d7                	jg     f012289b <test_kfree_bestfirstfit+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f01228c4:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f01228ca:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f01228d0:	89 d0                	mov    %edx,%eax
f01228d2:	01 c0                	add    %eax,%eax
f01228d4:	01 d0                	add    %edx,%eax
f01228d6:	01 c0                	add    %eax,%eax
f01228d8:	01 d0                	add    %edx,%eax
f01228da:	39 c1                	cmp    %eax,%ecx
f01228dc:	74 17                	je     f01228f5 <test_kfree_bestfirstfit+0xf1a>
f01228de:	83 ec 04             	sub    $0x4,%esp
f01228e1:	68 c0 b4 13 f0       	push   $0xf013b4c0
f01228e6:	68 34 07 00 00       	push   $0x734
f01228eb:	68 da ac 13 f0       	push   $0xf013acda
f01228f0:	e8 06 d9 fd ff       	call   f01001fb <_panic>
	}
	cprintf("\b\b\b30%");
f01228f5:	83 ec 0c             	sub    $0xc,%esp
f01228f8:	68 f3 b4 13 f0       	push   $0xf013b4f3
f01228fd:	e8 80 e3 fd ff       	call   f0100c82 <cprintf>
f0122902:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//Allocate in merged freed space
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122905:	e8 51 a0 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012290a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012290d:	e8 2a 14 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122912:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega);
f0122915:	83 ec 0c             	sub    $0xc,%esp
f0122918:	68 00 00 30 00       	push   $0x300000
f012291d:	e8 dc 4e fe ff       	call   f01077fe <kmalloc>
f0122922:	83 c4 10             	add    $0x10,%esp
f0122925:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012292b:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0122931:	89 c1                	mov    %eax,%ecx
f0122933:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012293a:	10 00 00 
f012293d:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0122943:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122948:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012294e:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0122954:	ba 00 00 00 00       	mov    $0x0,%edx
f0122959:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012295f:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0122965:	29 d0                	sub    %edx,%eax
f0122967:	89 c3                	mov    %eax,%ebx
f0122969:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0122970:	10 00 00 
f0122973:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0122978:	0f b6 d0             	movzbl %al,%edx
f012297b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0122981:	01 d0                	add    %edx,%eax
f0122983:	48                   	dec    %eax
f0122984:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f012298a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0122990:	ba 00 00 00 00       	mov    $0x0,%edx
f0122995:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f012299b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01229a1:	29 d0                	sub    %edx,%eax
f01229a3:	01 c3                	add    %eax,%ebx
f01229a5:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f01229ac:	10 00 00 
f01229af:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01229b4:	0f b6 c0             	movzbl %al,%eax
f01229b7:	c1 e0 04             	shl    $0x4,%eax
f01229ba:	89 c2                	mov    %eax,%edx
f01229bc:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01229c2:	01 d0                	add    %edx,%eax
f01229c4:	48                   	dec    %eax
f01229c5:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f01229cb:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01229d1:	ba 00 00 00 00       	mov    $0x0,%edx
f01229d6:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f01229dc:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01229e2:	29 d0                	sub    %edx,%eax
f01229e4:	01 d8                	add    %ebx,%eax
f01229e6:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01229eb:	39 c1                	cmp    %eax,%ecx
f01229ed:	74 17                	je     f0122a06 <test_kfree_bestfirstfit+0x102b>
f01229ef:	83 ec 04             	sub    $0x4,%esp
f01229f2:	68 c0 ad 13 f0       	push   $0xf013adc0
f01229f7:	68 3f 07 00 00       	push   $0x73f
f01229fc:	68 da ac 13 f0       	push   $0xf013acda
f0122a01:	e8 f5 d7 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122a06:	e8 31 13 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122a0b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122a0e:	74 17                	je     f0122a27 <test_kfree_bestfirstfit+0x104c>
f0122a10:	83 ec 04             	sub    $0x4,%esp
f0122a13:	68 f4 ac 13 f0       	push   $0xf013acf4
f0122a18:	68 40 07 00 00       	push   $0x740
f0122a1d:	68 da ac 13 f0       	push   $0xf013acda
f0122a22:	e8 d4 d7 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122a27:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122a2a:	e8 2c 9f fe ff       	call   f010c95b <sys_calculate_free_frames>
f0122a2f:	29 c3                	sub    %eax,%ebx
f0122a31:	89 d8                	mov    %ebx,%eax
f0122a33:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122a38:	74 17                	je     f0122a51 <test_kfree_bestfirstfit+0x1076>
f0122a3a:	83 ec 04             	sub    $0x4,%esp
f0122a3d:	68 5c ad 13 f0       	push   $0xf013ad5c
f0122a42:	68 41 07 00 00       	push   $0x741
f0122a47:	68 da ac 13 f0       	push   $0xf013acda
f0122a4c:	e8 aa d7 fd ff       	call   f01001fb <_panic>
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
f0122a51:	c7 85 88 fe ff ff ff 	movl   $0x2fffff,-0x178(%ebp)
f0122a58:	ff 2f 00 
		ptr = (char*)ptr_allocations[8];
f0122a5b:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0122a61:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0122a64:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122a6b:	eb 0e                	jmp    f0122a7b <test_kfree_bestfirstfit+0x10a0>
		{
			ptr[i] = 8 ;
f0122a6d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122a70:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122a73:	01 d0                	add    %edx,%eax
f0122a75:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0122a78:	ff 45 f4             	incl   -0xc(%ebp)
f0122a7b:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0122a81:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122a84:	7f e7                	jg     f0122a6d <test_kfree_bestfirstfit+0x1092>
		{
			ptr[i] = 8 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122a86:	e8 d0 9e fe ff       	call   f010c95b <sys_calculate_free_frames>
f0122a8b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122a8e:	e8 a9 12 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122a93:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(2*kilo);
f0122a96:	83 ec 0c             	sub    $0xc,%esp
f0122a99:	68 00 08 00 00       	push   $0x800
f0122a9e:	e8 5b 4d fe ff       	call   f01077fe <kmalloc>
f0122aa3:	83 c4 10             	add    $0x10,%esp
f0122aa6:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122aac:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0122ab2:	89 c1                	mov    %eax,%ecx
f0122ab4:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0122abb:	10 00 00 
f0122abe:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0122ac4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122ac9:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0122acf:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0122ad5:	ba 00 00 00 00       	mov    $0x0,%edx
f0122ada:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0122ae0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0122ae6:	29 d0                	sub    %edx,%eax
f0122ae8:	89 c3                	mov    %eax,%ebx
f0122aea:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0122af1:	10 00 00 
f0122af4:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0122af9:	0f b6 d0             	movzbl %al,%edx
f0122afc:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0122b02:	01 d0                	add    %edx,%eax
f0122b04:	48                   	dec    %eax
f0122b05:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0122b0b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0122b11:	ba 00 00 00 00       	mov    $0x0,%edx
f0122b16:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0122b1c:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0122b22:	29 d0                	sub    %edx,%eax
f0122b24:	01 c3                	add    %eax,%ebx
f0122b26:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0122b2d:	10 00 00 
f0122b30:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0122b35:	0f b6 c0             	movzbl %al,%eax
f0122b38:	c1 e0 04             	shl    $0x4,%eax
f0122b3b:	89 c2                	mov    %eax,%edx
f0122b3d:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0122b43:	01 d0                	add    %edx,%eax
f0122b45:	48                   	dec    %eax
f0122b46:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0122b4c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0122b52:	ba 00 00 00 00       	mov    $0x0,%edx
f0122b57:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0122b5d:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0122b63:	29 d0                	sub    %edx,%eax
f0122b65:	01 d8                	add    %ebx,%eax
f0122b67:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0122b6c:	39 c1                	cmp    %eax,%ecx
f0122b6e:	74 17                	je     f0122b87 <test_kfree_bestfirstfit+0x11ac>
f0122b70:	83 ec 04             	sub    $0x4,%esp
f0122b73:	68 c0 ad 13 f0       	push   $0xf013adc0
f0122b78:	68 4d 07 00 00       	push   $0x74d
f0122b7d:	68 da ac 13 f0       	push   $0xf013acda
f0122b82:	e8 74 d6 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122b87:	e8 b0 11 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122b8c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122b8f:	74 17                	je     f0122ba8 <test_kfree_bestfirstfit+0x11cd>
f0122b91:	83 ec 04             	sub    $0x4,%esp
f0122b94:	68 f4 ac 13 f0       	push   $0xf013acf4
f0122b99:	68 4e 07 00 00       	push   $0x74e
f0122b9e:	68 da ac 13 f0       	push   $0xf013acda
f0122ba3:	e8 53 d6 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122ba8:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122bab:	e8 ab 9d fe ff       	call   f010c95b <sys_calculate_free_frames>
f0122bb0:	29 c3                	sub    %eax,%ebx
f0122bb2:	89 d8                	mov    %ebx,%eax
f0122bb4:	83 f8 01             	cmp    $0x1,%eax
f0122bb7:	74 17                	je     f0122bd0 <test_kfree_bestfirstfit+0x11f5>
f0122bb9:	83 ec 04             	sub    $0x4,%esp
f0122bbc:	68 5c ad 13 f0       	push   $0xf013ad5c
f0122bc1:	68 4f 07 00 00       	push   $0x74f
f0122bc6:	68 da ac 13 f0       	push   $0xf013acda
f0122bcb:	e8 2b d6 fd ff       	call   f01001fb <_panic>
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
f0122bd0:	c7 85 8c fe ff ff ff 	movl   $0x7ff,-0x174(%ebp)
f0122bd7:	07 00 00 
		ptr = (char*)ptr_allocations[9];
f0122bda:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0122be0:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0122be3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122bea:	eb 0e                	jmp    f0122bfa <test_kfree_bestfirstfit+0x121f>
		{
			ptr[i] = 9 ;
f0122bec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122bef:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122bf2:	01 d0                	add    %edx,%eax
f0122bf4:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0122bf7:	ff 45 f4             	incl   -0xc(%ebp)
f0122bfa:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0122c00:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122c03:	7f e7                	jg     f0122bec <test_kfree_bestfirstfit+0x1211>
		{
			ptr[i] = 9 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0122c05:	e8 51 9d fe ff       	call   f010c95b <sys_calculate_free_frames>
f0122c0a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122c0d:	e8 2a 11 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122c12:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(1*Mega);
f0122c15:	83 ec 0c             	sub    $0xc,%esp
f0122c18:	68 00 00 10 00       	push   $0x100000
f0122c1d:	e8 dc 4b fe ff       	call   f01077fe <kmalloc>
f0122c22:	83 c4 10             	add    $0x10,%esp
f0122c25:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122c2b:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0122c31:	89 c1                	mov    %eax,%ecx
f0122c33:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0122c3a:	10 00 00 
f0122c3d:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0122c43:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122c48:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0122c4e:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0122c54:	ba 00 00 00 00       	mov    $0x0,%edx
f0122c59:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0122c5f:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0122c65:	29 d0                	sub    %edx,%eax
f0122c67:	89 c3                	mov    %eax,%ebx
f0122c69:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0122c70:	10 00 00 
f0122c73:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0122c78:	0f b6 d0             	movzbl %al,%edx
f0122c7b:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0122c81:	01 d0                	add    %edx,%eax
f0122c83:	48                   	dec    %eax
f0122c84:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0122c8a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0122c90:	ba 00 00 00 00       	mov    $0x0,%edx
f0122c95:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0122c9b:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0122ca1:	29 d0                	sub    %edx,%eax
f0122ca3:	01 c3                	add    %eax,%ebx
f0122ca5:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0122cac:	10 00 00 
f0122caf:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0122cb4:	0f b6 c0             	movzbl %al,%eax
f0122cb7:	c1 e0 04             	shl    $0x4,%eax
f0122cba:	89 c2                	mov    %eax,%edx
f0122cbc:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0122cc2:	01 d0                	add    %edx,%eax
f0122cc4:	48                   	dec    %eax
f0122cc5:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0122ccb:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0122cd1:	ba 00 00 00 00       	mov    $0x0,%edx
f0122cd6:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0122cdc:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0122ce2:	29 d0                	sub    %edx,%eax
f0122ce4:	01 d8                	add    %ebx,%eax
f0122ce6:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0122ceb:	39 c1                	cmp    %eax,%ecx
f0122ced:	74 17                	je     f0122d06 <test_kfree_bestfirstfit+0x132b>
f0122cef:	83 ec 04             	sub    $0x4,%esp
f0122cf2:	68 c0 ad 13 f0       	push   $0xf013adc0
f0122cf7:	68 5b 07 00 00       	push   $0x75b
f0122cfc:	68 da ac 13 f0       	push   $0xf013acda
f0122d01:	e8 f5 d4 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122d06:	e8 31 10 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122d0b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122d0e:	74 17                	je     f0122d27 <test_kfree_bestfirstfit+0x134c>
f0122d10:	83 ec 04             	sub    $0x4,%esp
f0122d13:	68 f4 ac 13 f0       	push   $0xf013acf4
f0122d18:	68 5c 07 00 00       	push   $0x75c
f0122d1d:	68 da ac 13 f0       	push   $0xf013acda
f0122d22:	e8 d4 d4 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122d27:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122d2a:	e8 2c 9c fe ff       	call   f010c95b <sys_calculate_free_frames>
f0122d2f:	29 c3                	sub    %eax,%ebx
f0122d31:	89 d8                	mov    %ebx,%eax
f0122d33:	3d 00 01 00 00       	cmp    $0x100,%eax
f0122d38:	74 17                	je     f0122d51 <test_kfree_bestfirstfit+0x1376>
f0122d3a:	83 ec 04             	sub    $0x4,%esp
f0122d3d:	68 5c ad 13 f0       	push   $0xf013ad5c
f0122d42:	68 5d 07 00 00       	push   $0x75d
f0122d47:	68 da ac 13 f0       	push   $0xf013acda
f0122d4c:	e8 aa d4 fd ff       	call   f01001fb <_panic>
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
f0122d51:	c7 85 90 fe ff ff ff 	movl   $0xfffff,-0x170(%ebp)
f0122d58:	ff 0f 00 
		ptr = (char*)ptr_allocations[10];
f0122d5b:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0122d61:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f0122d64:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122d6b:	eb 0e                	jmp    f0122d7b <test_kfree_bestfirstfit+0x13a0>
		{
			ptr[i] = 10 ;
f0122d6d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122d70:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122d73:	01 d0                	add    %edx,%eax
f0122d75:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f0122d78:	ff 45 f4             	incl   -0xc(%ebp)
f0122d7b:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0122d81:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122d84:	7f e7                	jg     f0122d6d <test_kfree_bestfirstfit+0x1392>
		{
			ptr[i] = 10 ;
		}
	}
	cprintf("\b\b\b45%");
f0122d86:	83 ec 0c             	sub    $0xc,%esp
f0122d89:	68 fa b4 13 f0       	push   $0xf013b4fa
f0122d8e:	e8 ef de fd ff       	call   f0100c82 <cprintf>
f0122d93:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0122d96:	e8 c0 9b fe ff       	call   f010c95b <sys_calculate_free_frames>
f0122d9b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122d9e:	e8 99 0f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122da3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0122da6:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0122dac:	83 ec 0c             	sub    $0xc,%esp
f0122daf:	50                   	push   %eax
f0122db0:	e8 0b 4b fe ff       	call   f01078c0 <kfree>
f0122db5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122db8:	e8 7f 0f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122dbd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122dc0:	74 17                	je     f0122dd9 <test_kfree_bestfirstfit+0x13fe>
f0122dc2:	83 ec 04             	sub    $0x4,%esp
f0122dc5:	68 f4 ac 13 f0       	push   $0xf013acf4
f0122dca:	68 6d 07 00 00       	push   $0x76d
f0122dcf:	68 da ac 13 f0       	push   $0xf013acda
f0122dd4:	e8 22 d4 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0122dd9:	e8 7d 9b fe ff       	call   f010c95b <sys_calculate_free_frames>
f0122dde:	89 c2                	mov    %eax,%edx
f0122de0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122de3:	29 c2                	sub    %eax,%edx
f0122de5:	89 d0                	mov    %edx,%eax
f0122de7:	83 f8 02             	cmp    $0x2,%eax
f0122dea:	74 17                	je     f0122e03 <test_kfree_bestfirstfit+0x1428>
f0122dec:	83 ec 04             	sub    $0x4,%esp
f0122def:	68 64 b4 13 f0       	push   $0xf013b464
f0122df4:	68 6e 07 00 00       	push   $0x76e
f0122df9:	68 da ac 13 f0       	push   $0xf013acda
f0122dfe:	e8 f8 d3 fd ff       	call   f01001fb <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122e03:	e8 53 9b fe ff       	call   f010c95b <sys_calculate_free_frames>
f0122e08:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122e0b:	e8 2c 0f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122e10:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0122e13:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122e19:	83 ec 0c             	sub    $0xc,%esp
f0122e1c:	50                   	push   %eax
f0122e1d:	e8 9e 4a fe ff       	call   f01078c0 <kfree>
f0122e22:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122e25:	e8 12 0f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122e2a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122e2d:	74 17                	je     f0122e46 <test_kfree_bestfirstfit+0x146b>
f0122e2f:	83 ec 04             	sub    $0x4,%esp
f0122e32:	68 f4 ac 13 f0       	push   $0xf013acf4
f0122e37:	68 74 07 00 00       	push   $0x774
f0122e3c:	68 da ac 13 f0       	push   $0xf013acda
f0122e41:	e8 b5 d3 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122e46:	e8 10 9b fe ff       	call   f010c95b <sys_calculate_free_frames>
f0122e4b:	89 c2                	mov    %eax,%edx
f0122e4d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122e50:	29 c2                	sub    %eax,%edx
f0122e52:	89 d0                	mov    %edx,%eax
f0122e54:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122e59:	74 17                	je     f0122e72 <test_kfree_bestfirstfit+0x1497>
f0122e5b:	83 ec 04             	sub    $0x4,%esp
f0122e5e:	68 64 b4 13 f0       	push   $0xf013b464
f0122e63:	68 75 07 00 00       	push   $0x775
f0122e68:	68 da ac 13 f0       	push   $0xf013acda
f0122e6d:	e8 89 d3 fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122e72:	e8 e4 9a fe ff       	call   f010c95b <sys_calculate_free_frames>
f0122e77:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122e7a:	e8 bd 0e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122e7f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0122e82:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0122e88:	83 ec 0c             	sub    $0xc,%esp
f0122e8b:	50                   	push   %eax
f0122e8c:	e8 2f 4a fe ff       	call   f01078c0 <kfree>
f0122e91:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122e94:	e8 a3 0e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122e99:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122e9c:	74 17                	je     f0122eb5 <test_kfree_bestfirstfit+0x14da>
f0122e9e:	83 ec 04             	sub    $0x4,%esp
f0122ea1:	68 f4 ac 13 f0       	push   $0xf013acf4
f0122ea6:	68 7b 07 00 00       	push   $0x77b
f0122eab:	68 da ac 13 f0       	push   $0xf013acda
f0122eb0:	e8 46 d3 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0122eb5:	e8 a1 9a fe ff       	call   f010c95b <sys_calculate_free_frames>
f0122eba:	89 c2                	mov    %eax,%edx
f0122ebc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122ebf:	29 c2                	sub    %eax,%edx
f0122ec1:	89 d0                	mov    %edx,%eax
f0122ec3:	83 f8 01             	cmp    $0x1,%eax
f0122ec6:	74 17                	je     f0122edf <test_kfree_bestfirstfit+0x1504>
f0122ec8:	83 ec 04             	sub    $0x4,%esp
f0122ecb:	68 64 b4 13 f0       	push   $0xf013b464
f0122ed0:	68 7c 07 00 00       	push   $0x77c
f0122ed5:	68 da ac 13 f0       	push   $0xf013acda
f0122eda:	e8 1c d3 fd ff       	call   f01001fb <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0122edf:	e8 77 9a fe ff       	call   f010c95b <sys_calculate_free_frames>
f0122ee4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122ee7:	e8 50 0e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122eec:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0122eef:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0122ef5:	83 ec 0c             	sub    $0xc,%esp
f0122ef8:	50                   	push   %eax
f0122ef9:	e8 c2 49 fe ff       	call   f01078c0 <kfree>
f0122efe:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122f01:	e8 36 0e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122f06:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122f09:	74 17                	je     f0122f22 <test_kfree_bestfirstfit+0x1547>
f0122f0b:	83 ec 04             	sub    $0x4,%esp
f0122f0e:	68 f4 ac 13 f0       	push   $0xf013acf4
f0122f13:	68 82 07 00 00       	push   $0x782
f0122f18:	68 da ac 13 f0       	push   $0xf013acda
f0122f1d:	e8 d9 d2 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0122f22:	e8 34 9a fe ff       	call   f010c95b <sys_calculate_free_frames>
f0122f27:	89 c2                	mov    %eax,%edx
f0122f29:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122f2c:	29 c2                	sub    %eax,%edx
f0122f2e:	89 d0                	mov    %edx,%eax
f0122f30:	83 f8 04             	cmp    $0x4,%eax
f0122f33:	74 17                	je     f0122f4c <test_kfree_bestfirstfit+0x1571>
f0122f35:	83 ec 04             	sub    $0x4,%esp
f0122f38:	68 64 b4 13 f0       	push   $0xf013b464
f0122f3d:	68 83 07 00 00       	push   $0x783
f0122f42:	68 da ac 13 f0       	push   $0xf013acda
f0122f47:	e8 af d2 fd ff       	call   f01001fb <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122f4c:	e8 0a 9a fe ff       	call   f010c95b <sys_calculate_free_frames>
f0122f51:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122f54:	e8 e3 0d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122f59:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0122f5c:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0122f62:	83 ec 0c             	sub    $0xc,%esp
f0122f65:	50                   	push   %eax
f0122f66:	e8 55 49 fe ff       	call   f01078c0 <kfree>
f0122f6b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122f6e:	e8 c9 0d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122f73:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122f76:	74 17                	je     f0122f8f <test_kfree_bestfirstfit+0x15b4>
f0122f78:	83 ec 04             	sub    $0x4,%esp
f0122f7b:	68 f4 ac 13 f0       	push   $0xf013acf4
f0122f80:	68 89 07 00 00       	push   $0x789
f0122f85:	68 da ac 13 f0       	push   $0xf013acda
f0122f8a:	e8 6c d2 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122f8f:	e8 c7 99 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0122f94:	89 c2                	mov    %eax,%edx
f0122f96:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122f99:	29 c2                	sub    %eax,%edx
f0122f9b:	89 d0                	mov    %edx,%eax
f0122f9d:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122fa2:	74 17                	je     f0122fbb <test_kfree_bestfirstfit+0x15e0>
f0122fa4:	83 ec 04             	sub    $0x4,%esp
f0122fa7:	68 64 b4 13 f0       	push   $0xf013b464
f0122fac:	68 8a 07 00 00       	push   $0x78a
f0122fb1:	68 da ac 13 f0       	push   $0xf013acda
f0122fb6:	e8 40 d2 fd ff       	call   f01001fb <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122fbb:	e8 9b 99 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0122fc0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122fc3:	e8 74 0d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122fc8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0122fcb:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0122fd1:	83 ec 0c             	sub    $0xc,%esp
f0122fd4:	50                   	push   %eax
f0122fd5:	e8 e6 48 fe ff       	call   f01078c0 <kfree>
f0122fda:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122fdd:	e8 5a 0d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122fe2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122fe5:	74 17                	je     f0122ffe <test_kfree_bestfirstfit+0x1623>
f0122fe7:	83 ec 04             	sub    $0x4,%esp
f0122fea:	68 f4 ac 13 f0       	push   $0xf013acf4
f0122fef:	68 90 07 00 00       	push   $0x790
f0122ff4:	68 da ac 13 f0       	push   $0xf013acda
f0122ff9:	e8 fd d1 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0122ffe:	e8 58 99 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0123003:	89 c2                	mov    %eax,%edx
f0123005:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123008:	29 c2                	sub    %eax,%edx
f012300a:	89 d0                	mov    %edx,%eax
f012300c:	83 f8 01             	cmp    $0x1,%eax
f012300f:	74 17                	je     f0123028 <test_kfree_bestfirstfit+0x164d>
f0123011:	83 ec 04             	sub    $0x4,%esp
f0123014:	68 64 b4 13 f0       	push   $0xf013b464
f0123019:	68 91 07 00 00       	push   $0x791
f012301e:	68 da ac 13 f0       	push   $0xf013acda
f0123023:	e8 d3 d1 fd ff       	call   f01001fb <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0123028:	e8 2e 99 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012302d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123030:	e8 07 0d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123035:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[10]);
f0123038:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012303e:	83 ec 0c             	sub    $0xc,%esp
f0123041:	50                   	push   %eax
f0123042:	e8 79 48 fe ff       	call   f01078c0 <kfree>
f0123047:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012304a:	e8 ed 0c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012304f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123052:	74 17                	je     f012306b <test_kfree_bestfirstfit+0x1690>
f0123054:	83 ec 04             	sub    $0x4,%esp
f0123057:	68 f4 ac 13 f0       	push   $0xf013acf4
f012305c:	68 97 07 00 00       	push   $0x797
f0123061:	68 da ac 13 f0       	push   $0xf013acda
f0123066:	e8 90 d1 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012306b:	e8 eb 98 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0123070:	89 c2                	mov    %eax,%edx
f0123072:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123075:	29 c2                	sub    %eax,%edx
f0123077:	89 d0                	mov    %edx,%eax
f0123079:	3d 00 01 00 00       	cmp    $0x100,%eax
f012307e:	74 17                	je     f0123097 <test_kfree_bestfirstfit+0x16bc>
f0123080:	83 ec 04             	sub    $0x4,%esp
f0123083:	68 64 b4 13 f0       	push   $0xf013b464
f0123088:	68 98 07 00 00       	push   $0x798
f012308d:	68 da ac 13 f0       	push   $0xf013acda
f0123092:	e8 64 d1 fd ff       	call   f01001fb <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0123097:	e8 bf 98 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012309c:	89 c2                	mov    %eax,%edx
f012309e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01230a1:	39 c2                	cmp    %eax,%edx
f01230a3:	74 17                	je     f01230bc <test_kfree_bestfirstfit+0x16e1>
f01230a5:	83 ec 04             	sub    $0x4,%esp
f01230a8:	68 04 b5 13 f0       	push   $0xf013b504
f01230ad:	68 9a 07 00 00       	push   $0x79a
f01230b2:	68 da ac 13 f0       	push   $0xf013acda
f01230b7:	e8 3f d1 fd ff       	call   f01001fb <_panic>
	}
	cprintf("\b\b\b60%");
f01230bc:	83 ec 0c             	sub    $0xc,%esp
f01230bf:	68 38 b5 13 f0       	push   $0xf013b538
f01230c4:	e8 b9 db fd ff       	call   f0100c82 <cprintf>
f01230c9:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01230cc:	83 ec 0c             	sub    $0xc,%esp
f01230cf:	6a 03                	push   $0x3
f01230d1:	e8 25 9d fe ff       	call   f010cdfb <sys_bypassPageFault>
f01230d6:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f01230d9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01230e0:	e9 82 00 00 00       	jmp    f0123167 <test_kfree_bestfirstfit+0x178c>
		{
			ptr = (char *) ptr_allocations[i];
f01230e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01230e8:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f01230ef:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f01230f2:	8b 45 80             	mov    -0x80(%ebp),%eax
f01230f5:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01230f8:	e8 ec 9c fe ff       	call   f010cde9 <sys_rcr2>
f01230fd:	89 c2                	mov    %eax,%edx
f01230ff:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123102:	39 c2                	cmp    %eax,%edx
f0123104:	74 17                	je     f012311d <test_kfree_bestfirstfit+0x1742>
f0123106:	83 ec 04             	sub    $0x4,%esp
f0123109:	68 40 b5 13 f0       	push   $0xf013b540
f012310e:	68 a9 07 00 00       	push   $0x7a9
f0123113:	68 da ac 13 f0       	push   $0xf013acda
f0123118:	e8 de d0 fd ff       	call   f01001fb <_panic>
			ptr[lastIndices[i]] = 10;
f012311d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123120:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0123127:	89 c2                	mov    %eax,%edx
f0123129:	8b 45 80             	mov    -0x80(%ebp),%eax
f012312c:	01 d0                	add    %edx,%eax
f012312e:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0123131:	e8 b3 9c fe ff       	call   f010cde9 <sys_rcr2>
f0123136:	89 c2                	mov    %eax,%edx
f0123138:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012313b:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0123142:	89 c1                	mov    %eax,%ecx
f0123144:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123147:	01 c8                	add    %ecx,%eax
f0123149:	39 c2                	cmp    %eax,%edx
f012314b:	74 17                	je     f0123164 <test_kfree_bestfirstfit+0x1789>
f012314d:	83 ec 04             	sub    $0x4,%esp
f0123150:	68 40 b5 13 f0       	push   $0xf013b540
f0123155:	68 ab 07 00 00       	push   $0x7ab
f012315a:	68 da ac 13 f0       	push   $0xf013acda
f012315f:	e8 97 d0 fd ff       	call   f01001fb <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0123164:	ff 45 f4             	incl   -0xc(%ebp)
f0123167:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f012316b:	0f 8e 74 ff ff ff    	jle    f01230e5 <test_kfree_bestfirstfit+0x170a>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0123171:	83 ec 0c             	sub    $0xc,%esp
f0123174:	6a 00                	push   $0x0
f0123176:	e8 80 9c fe ff       	call   f010cdfb <sys_bypassPageFault>
f012317b:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f012317e:	83 ec 0c             	sub    $0xc,%esp
f0123181:	68 85 b5 13 f0       	push   $0xf013b585
f0123186:	e8 f7 da fd ff       	call   f0100c82 <cprintf>
f012318b:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012318e:	e8 c8 97 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0123193:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123196:	e8 a1 0b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012319b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f012319e:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f01231a4:	83 ec 0c             	sub    $0xc,%esp
f01231a7:	50                   	push   %eax
f01231a8:	e8 13 47 fe ff       	call   f01078c0 <kfree>
f01231ad:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01231b0:	e8 87 0b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01231b5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01231b8:	74 17                	je     f01231d1 <test_kfree_bestfirstfit+0x17f6>
f01231ba:	83 ec 04             	sub    $0x4,%esp
f01231bd:	68 f4 ac 13 f0       	push   $0xf013acf4
f01231c2:	68 b9 07 00 00       	push   $0x7b9
f01231c7:	68 da ac 13 f0       	push   $0xf013acda
f01231cc:	e8 2a d0 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01231d1:	e8 85 97 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01231d6:	89 c2                	mov    %eax,%edx
f01231d8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01231db:	39 c2                	cmp    %eax,%edx
f01231dd:	74 17                	je     f01231f6 <test_kfree_bestfirstfit+0x181b>
f01231df:	83 ec 04             	sub    $0x4,%esp
f01231e2:	68 8c b5 13 f0       	push   $0xf013b58c
f01231e7:	68 ba 07 00 00       	push   $0x7ba
f01231ec:	68 da ac 13 f0       	push   $0xf013acda
f01231f1:	e8 05 d0 fd ff       	call   f01001fb <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01231f6:	e8 60 97 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01231fb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01231fe:	e8 39 0b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123203:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0123206:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f012320c:	83 ec 0c             	sub    $0xc,%esp
f012320f:	50                   	push   %eax
f0123210:	e8 ab 46 fe ff       	call   f01078c0 <kfree>
f0123215:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123218:	e8 1f 0b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012321d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123220:	74 17                	je     f0123239 <test_kfree_bestfirstfit+0x185e>
f0123222:	83 ec 04             	sub    $0x4,%esp
f0123225:	68 f4 ac 13 f0       	push   $0xf013acf4
f012322a:	68 c0 07 00 00       	push   $0x7c0
f012322f:	68 da ac 13 f0       	push   $0xf013acda
f0123234:	e8 c2 cf fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123239:	e8 1d 97 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012323e:	89 c2                	mov    %eax,%edx
f0123240:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123243:	39 c2                	cmp    %eax,%edx
f0123245:	74 17                	je     f012325e <test_kfree_bestfirstfit+0x1883>
f0123247:	83 ec 04             	sub    $0x4,%esp
f012324a:	68 8c b5 13 f0       	push   $0xf013b58c
f012324f:	68 c1 07 00 00       	push   $0x7c1
f0123254:	68 da ac 13 f0       	push   $0xf013acda
f0123259:	e8 9d cf fd ff       	call   f01001fb <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012325e:	e8 f8 96 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0123263:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123266:	e8 d1 0a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012326b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f012326e:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0123274:	83 ec 0c             	sub    $0xc,%esp
f0123277:	50                   	push   %eax
f0123278:	e8 43 46 fe ff       	call   f01078c0 <kfree>
f012327d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123280:	e8 b7 0a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123285:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123288:	74 17                	je     f01232a1 <test_kfree_bestfirstfit+0x18c6>
f012328a:	83 ec 04             	sub    $0x4,%esp
f012328d:	68 f4 ac 13 f0       	push   $0xf013acf4
f0123292:	68 c7 07 00 00       	push   $0x7c7
f0123297:	68 da ac 13 f0       	push   $0xf013acda
f012329c:	e8 5a cf fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01232a1:	e8 b5 96 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01232a6:	89 c2                	mov    %eax,%edx
f01232a8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01232ab:	39 c2                	cmp    %eax,%edx
f01232ad:	74 17                	je     f01232c6 <test_kfree_bestfirstfit+0x18eb>
f01232af:	83 ec 04             	sub    $0x4,%esp
f01232b2:	68 8c b5 13 f0       	push   $0xf013b58c
f01232b7:	68 c8 07 00 00       	push   $0x7c8
f01232bc:	68 da ac 13 f0       	push   $0xf013acda
f01232c1:	e8 35 cf fd ff       	call   f01001fb <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01232c6:	e8 90 96 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01232cb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01232ce:	e8 69 0a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01232d3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01232d6:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01232dc:	83 ec 0c             	sub    $0xc,%esp
f01232df:	50                   	push   %eax
f01232e0:	e8 db 45 fe ff       	call   f01078c0 <kfree>
f01232e5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01232e8:	e8 4f 0a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01232ed:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01232f0:	74 17                	je     f0123309 <test_kfree_bestfirstfit+0x192e>
f01232f2:	83 ec 04             	sub    $0x4,%esp
f01232f5:	68 f4 ac 13 f0       	push   $0xf013acf4
f01232fa:	68 ce 07 00 00       	push   $0x7ce
f01232ff:	68 da ac 13 f0       	push   $0xf013acda
f0123304:	e8 f2 ce fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123309:	e8 4d 96 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012330e:	89 c2                	mov    %eax,%edx
f0123310:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123313:	39 c2                	cmp    %eax,%edx
f0123315:	74 17                	je     f012332e <test_kfree_bestfirstfit+0x1953>
f0123317:	83 ec 04             	sub    $0x4,%esp
f012331a:	68 8c b5 13 f0       	push   $0xf013b58c
f012331f:	68 cf 07 00 00       	push   $0x7cf
f0123324:	68 da ac 13 f0       	push   $0xf013acda
f0123329:	e8 cd ce fd ff       	call   f01001fb <_panic>

	}
	cprintf("\b\b\b85%");
f012332e:	83 ec 0c             	sub    $0xc,%esp
f0123331:	68 d3 b5 13 f0       	push   $0xf013b5d3
f0123336:	e8 47 d9 fd ff       	call   f0100c82 <cprintf>
f012333b:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f012333e:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0123345:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012334c:	eb 48                	jmp    f0123396 <test_kfree_bestfirstfit+0x19bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f012334e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0123351:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0123356:	83 ec 04             	sub    $0x4,%esp
f0123359:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f012335f:	51                   	push   %ecx
f0123360:	52                   	push   %edx
f0123361:	50                   	push   %eax
f0123362:	e8 73 36 fe ff       	call   f01069da <get_page_table>
f0123367:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f012336a:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0123370:	85 c0                	test   %eax,%eax
f0123372:	75 17                	jne    f012338b <test_kfree_bestfirstfit+0x19b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0123374:	83 ec 04             	sub    $0x4,%esp
f0123377:	68 dc b5 13 f0       	push   $0xf013b5dc
f012337c:	68 dd 07 00 00       	push   $0x7dd
f0123381:	68 da ac 13 f0       	push   $0xf013acda
f0123386:	e8 70 ce fd ff       	call   f01001fb <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f012338b:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0123392:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0123396:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012339a:	78 b2                	js     f012334e <test_kfree_bestfirstfit+0x1973>
f012339c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01233a0:	7f 09                	jg     f01233ab <test_kfree_bestfirstfit+0x19d0>
f01233a2:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f01233a9:	76 a3                	jbe    f012334e <test_kfree_bestfirstfit+0x1973>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f01233ab:	83 ec 0c             	sub    $0xc,%esp
f01233ae:	68 be ae 13 f0       	push   $0xf013aebe
f01233b3:	e8 ca d8 fd ff       	call   f0100c82 <cprintf>
f01233b8:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f01233bb:	83 ec 0c             	sub    $0xc,%esp
f01233be:	68 44 b6 13 f0       	push   $0xf013b644
f01233c3:	e8 ba d8 fd ff       	call   f0100c82 <cprintf>
f01233c8:	83 c4 10             	add    $0x10,%esp

	return 1;
f01233cb:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01233d0:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01233d3:	5b                   	pop    %ebx
f01233d4:	5f                   	pop    %edi
f01233d5:	5d                   	pop    %ebp
f01233d6:	c3                   	ret    

f01233d7 <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f01233d7:	55                   	push   %ebp
f01233d8:	89 e5                	mov    %esp,%ebp
f01233da:	57                   	push   %edi
f01233db:	56                   	push   %esi
f01233dc:	53                   	push   %ebx
f01233dd:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
	cprintf("==============================================\n");
f01233e3:	83 ec 0c             	sub    $0xc,%esp
f01233e6:	68 1c ac 13 f0       	push   $0xf013ac1c
f01233eb:	e8 92 d8 fd ff       	call   f0100c82 <cprintf>
f01233f0:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01233f3:	83 ec 0c             	sub    $0xc,%esp
f01233f6:	68 4c ac 13 f0       	push   $0xf013ac4c
f01233fb:	e8 82 d8 fd ff       	call   f0100c82 <cprintf>
f0123400:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0123403:	83 ec 0c             	sub    $0xc,%esp
f0123406:	68 1c ac 13 f0       	push   $0xf013ac1c
f012340b:	e8 72 d8 fd ff       	call   f0100c82 <cprintf>
f0123410:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0123413:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f0123417:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f012341b:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f0123421:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f0123427:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012342e:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0123435:	e8 21 95 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012343a:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012343d:	8d 95 c4 fd ff ff    	lea    -0x23c(%ebp),%edx
f0123443:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123448:	b8 00 00 00 00       	mov    $0x0,%eax
f012344d:	89 d7                	mov    %edx,%edi
f012344f:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0123451:	8d 95 74 fd ff ff    	lea    -0x28c(%ebp),%edx
f0123457:	b9 14 00 00 00       	mov    $0x14,%ecx
f012345c:	b8 00 00 00 00       	mov    $0x0,%eax
f0123461:	89 d7                	mov    %edx,%edi
f0123463:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0123465:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f012346b:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123470:	b8 00 00 00 00       	mov    $0x0,%eax
f0123475:	89 d7                	mov    %edx,%edi
f0123477:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123479:	e8 dd 94 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012347e:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123481:	e8 b6 08 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123486:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0123489:	83 ec 0c             	sub    $0xc,%esp
f012348c:	68 00 fc 1f 00       	push   $0x1ffc00
f0123491:	e8 68 43 fe ff       	call   f01077fe <kmalloc>
f0123496:	83 c4 10             	add    $0x10,%esp
f0123499:	89 85 24 fd ff ff    	mov    %eax,-0x2dc(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012349f:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f01234a5:	89 c1                	mov    %eax,%ecx
f01234a7:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01234ae:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01234b1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01234b6:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01234b9:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01234bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01234c1:	f7 75 a0             	divl   -0x60(%ebp)
f01234c4:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01234c7:	29 d0                	sub    %edx,%eax
f01234c9:	89 c3                	mov    %eax,%ebx
f01234cb:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01234d2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01234d7:	0f b6 d0             	movzbl %al,%edx
f01234da:	8b 45 98             	mov    -0x68(%ebp),%eax
f01234dd:	01 d0                	add    %edx,%eax
f01234df:	48                   	dec    %eax
f01234e0:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01234e3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01234e6:	ba 00 00 00 00       	mov    $0x0,%edx
f01234eb:	f7 75 98             	divl   -0x68(%ebp)
f01234ee:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01234f1:	29 d0                	sub    %edx,%eax
f01234f3:	01 c3                	add    %eax,%ebx
f01234f5:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01234fc:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123501:	0f b6 c0             	movzbl %al,%eax
f0123504:	c1 e0 04             	shl    $0x4,%eax
f0123507:	89 c2                	mov    %eax,%edx
f0123509:	8b 45 90             	mov    -0x70(%ebp),%eax
f012350c:	01 d0                	add    %edx,%eax
f012350e:	48                   	dec    %eax
f012350f:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0123512:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0123515:	ba 00 00 00 00       	mov    $0x0,%edx
f012351a:	f7 75 90             	divl   -0x70(%ebp)
f012351d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0123520:	29 d0                	sub    %edx,%eax
f0123522:	01 d8                	add    %ebx,%eax
f0123524:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0123529:	39 c1                	cmp    %eax,%ecx
f012352b:	74 17                	je     f0123544 <test_kheap_phys_addr+0x16d>
f012352d:	83 ec 04             	sub    $0x4,%esp
f0123530:	68 c0 ad 13 f0       	push   $0xf013adc0
f0123535:	68 0a 08 00 00       	push   $0x80a
f012353a:	68 da ac 13 f0       	push   $0xf013acda
f012353f:	e8 b7 cc fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123544:	e8 f3 07 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123549:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012354c:	74 17                	je     f0123565 <test_kheap_phys_addr+0x18e>
f012354e:	83 ec 04             	sub    $0x4,%esp
f0123551:	68 f4 ac 13 f0       	push   $0xf013acf4
f0123556:	68 0b 08 00 00       	push   $0x80b
f012355b:	68 da ac 13 f0       	push   $0xf013acda
f0123560:	e8 96 cc fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123565:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123568:	e8 ee 93 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012356d:	29 c3                	sub    %eax,%ebx
f012356f:	89 d8                	mov    %ebx,%eax
f0123571:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123576:	74 17                	je     f012358f <test_kheap_phys_addr+0x1b8>
f0123578:	83 ec 04             	sub    $0x4,%esp
f012357b:	68 5c ad 13 f0       	push   $0xf013ad5c
f0123580:	68 0c 08 00 00       	push   $0x80c
f0123585:	68 da ac 13 f0       	push   $0xf013acda
f012358a:	e8 6c cc fd ff       	call   f01001fb <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012358f:	e8 c7 93 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0123594:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123597:	e8 a0 07 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012359c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012359f:	83 ec 0c             	sub    $0xc,%esp
f01235a2:	68 00 fc 1f 00       	push   $0x1ffc00
f01235a7:	e8 52 42 fe ff       	call   f01077fe <kmalloc>
f01235ac:	83 c4 10             	add    $0x10,%esp
f01235af:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01235b5:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f01235bb:	89 c1                	mov    %eax,%ecx
f01235bd:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01235c4:	8b 45 88             	mov    -0x78(%ebp),%eax
f01235c7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01235cc:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01235cf:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01235d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01235d7:	f7 75 88             	divl   -0x78(%ebp)
f01235da:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01235dd:	29 d0                	sub    %edx,%eax
f01235df:	89 c3                	mov    %eax,%ebx
f01235e1:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01235e8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01235ed:	0f b6 d0             	movzbl %al,%edx
f01235f0:	8b 45 80             	mov    -0x80(%ebp),%eax
f01235f3:	01 d0                	add    %edx,%eax
f01235f5:	48                   	dec    %eax
f01235f6:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01235fc:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0123602:	ba 00 00 00 00       	mov    $0x0,%edx
f0123607:	f7 75 80             	divl   -0x80(%ebp)
f012360a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0123610:	29 d0                	sub    %edx,%eax
f0123612:	01 c3                	add    %eax,%ebx
f0123614:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f012361b:	10 00 00 
f012361e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123623:	0f b6 c0             	movzbl %al,%eax
f0123626:	c1 e0 04             	shl    $0x4,%eax
f0123629:	89 c2                	mov    %eax,%edx
f012362b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0123631:	01 d0                	add    %edx,%eax
f0123633:	48                   	dec    %eax
f0123634:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f012363a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0123640:	ba 00 00 00 00       	mov    $0x0,%edx
f0123645:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f012364b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0123651:	29 d0                	sub    %edx,%eax
f0123653:	01 d8                	add    %ebx,%eax
f0123655:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012365a:	39 c1                	cmp    %eax,%ecx
f012365c:	74 17                	je     f0123675 <test_kheap_phys_addr+0x29e>
f012365e:	83 ec 04             	sub    $0x4,%esp
f0123661:	68 c0 ad 13 f0       	push   $0xf013adc0
f0123666:	68 12 08 00 00       	push   $0x812
f012366b:	68 da ac 13 f0       	push   $0xf013acda
f0123670:	e8 86 cb fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123675:	e8 c2 06 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012367a:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012367d:	74 17                	je     f0123696 <test_kheap_phys_addr+0x2bf>
f012367f:	83 ec 04             	sub    $0x4,%esp
f0123682:	68 f4 ac 13 f0       	push   $0xf013acf4
f0123687:	68 13 08 00 00       	push   $0x813
f012368c:	68 da ac 13 f0       	push   $0xf013acda
f0123691:	e8 65 cb fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123696:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123699:	e8 bd 92 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012369e:	29 c3                	sub    %eax,%ebx
f01236a0:	89 d8                	mov    %ebx,%eax
f01236a2:	3d 00 02 00 00       	cmp    $0x200,%eax
f01236a7:	74 17                	je     f01236c0 <test_kheap_phys_addr+0x2e9>
f01236a9:	83 ec 04             	sub    $0x4,%esp
f01236ac:	68 5c ad 13 f0       	push   $0xf013ad5c
f01236b1:	68 14 08 00 00       	push   $0x814
f01236b6:	68 da ac 13 f0       	push   $0xf013acda
f01236bb:	e8 3b cb fd ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01236c0:	e8 96 92 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01236c5:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01236c8:	e8 6f 06 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01236cd:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01236d0:	83 ec 0c             	sub    $0xc,%esp
f01236d3:	68 00 08 00 00       	push   $0x800
f01236d8:	e8 21 41 fe ff       	call   f01077fe <kmalloc>
f01236dd:	83 c4 10             	add    $0x10,%esp
f01236e0:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01236e6:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f01236ec:	89 c1                	mov    %eax,%ecx
f01236ee:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01236f5:	10 00 00 
f01236f8:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01236fe:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123703:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0123709:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012370f:	ba 00 00 00 00       	mov    $0x0,%edx
f0123714:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f012371a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0123720:	29 d0                	sub    %edx,%eax
f0123722:	89 c3                	mov    %eax,%ebx
f0123724:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f012372b:	10 00 00 
f012372e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123733:	0f b6 d0             	movzbl %al,%edx
f0123736:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012373c:	01 d0                	add    %edx,%eax
f012373e:	48                   	dec    %eax
f012373f:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0123745:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012374b:	ba 00 00 00 00       	mov    $0x0,%edx
f0123750:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0123756:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012375c:	29 d0                	sub    %edx,%eax
f012375e:	01 c3                	add    %eax,%ebx
f0123760:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0123767:	10 00 00 
f012376a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012376f:	0f b6 c0             	movzbl %al,%eax
f0123772:	c1 e0 04             	shl    $0x4,%eax
f0123775:	89 c2                	mov    %eax,%edx
f0123777:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012377d:	01 d0                	add    %edx,%eax
f012377f:	48                   	dec    %eax
f0123780:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0123786:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012378c:	ba 00 00 00 00       	mov    $0x0,%edx
f0123791:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0123797:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012379d:	29 d0                	sub    %edx,%eax
f012379f:	01 d8                	add    %ebx,%eax
f01237a1:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01237a6:	39 c1                	cmp    %eax,%ecx
f01237a8:	74 17                	je     f01237c1 <test_kheap_phys_addr+0x3ea>
f01237aa:	83 ec 04             	sub    $0x4,%esp
f01237ad:	68 c0 ad 13 f0       	push   $0xf013adc0
f01237b2:	68 1a 08 00 00       	push   $0x81a
f01237b7:	68 da ac 13 f0       	push   $0xf013acda
f01237bc:	e8 3a ca fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01237c1:	e8 76 05 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01237c6:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01237c9:	74 17                	je     f01237e2 <test_kheap_phys_addr+0x40b>
f01237cb:	83 ec 04             	sub    $0x4,%esp
f01237ce:	68 f4 ac 13 f0       	push   $0xf013acf4
f01237d3:	68 1b 08 00 00       	push   $0x81b
f01237d8:	68 da ac 13 f0       	push   $0xf013acda
f01237dd:	e8 19 ca fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01237e2:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01237e5:	e8 71 91 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01237ea:	29 c3                	sub    %eax,%ebx
f01237ec:	89 d8                	mov    %ebx,%eax
f01237ee:	83 f8 01             	cmp    $0x1,%eax
f01237f1:	74 17                	je     f012380a <test_kheap_phys_addr+0x433>
f01237f3:	83 ec 04             	sub    $0x4,%esp
f01237f6:	68 5c ad 13 f0       	push   $0xf013ad5c
f01237fb:	68 1c 08 00 00       	push   $0x81c
f0123800:	68 da ac 13 f0       	push   $0xf013acda
f0123805:	e8 f1 c9 fd ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012380a:	e8 4c 91 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012380f:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123812:	e8 25 05 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123817:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012381a:	83 ec 0c             	sub    $0xc,%esp
f012381d:	68 00 08 00 00       	push   $0x800
f0123822:	e8 d7 3f fe ff       	call   f01077fe <kmalloc>
f0123827:	83 c4 10             	add    $0x10,%esp
f012382a:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123830:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f0123836:	89 c1                	mov    %eax,%ecx
f0123838:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f012383f:	10 00 00 
f0123842:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0123848:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012384d:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0123853:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0123859:	ba 00 00 00 00       	mov    $0x0,%edx
f012385e:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0123864:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012386a:	29 d0                	sub    %edx,%eax
f012386c:	89 c3                	mov    %eax,%ebx
f012386e:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0123875:	10 00 00 
f0123878:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012387d:	0f b6 d0             	movzbl %al,%edx
f0123880:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0123886:	01 d0                	add    %edx,%eax
f0123888:	48                   	dec    %eax
f0123889:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f012388f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0123895:	ba 00 00 00 00       	mov    $0x0,%edx
f012389a:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01238a0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01238a6:	29 d0                	sub    %edx,%eax
f01238a8:	01 c3                	add    %eax,%ebx
f01238aa:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01238b1:	10 00 00 
f01238b4:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01238b9:	0f b6 c0             	movzbl %al,%eax
f01238bc:	c1 e0 04             	shl    $0x4,%eax
f01238bf:	89 c2                	mov    %eax,%edx
f01238c1:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01238c7:	01 d0                	add    %edx,%eax
f01238c9:	48                   	dec    %eax
f01238ca:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01238d0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01238d6:	ba 00 00 00 00       	mov    $0x0,%edx
f01238db:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01238e1:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01238e7:	29 d0                	sub    %edx,%eax
f01238e9:	01 d8                	add    %ebx,%eax
f01238eb:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01238f0:	39 c1                	cmp    %eax,%ecx
f01238f2:	74 17                	je     f012390b <test_kheap_phys_addr+0x534>
f01238f4:	83 ec 04             	sub    $0x4,%esp
f01238f7:	68 c0 ad 13 f0       	push   $0xf013adc0
f01238fc:	68 22 08 00 00       	push   $0x822
f0123901:	68 da ac 13 f0       	push   $0xf013acda
f0123906:	e8 f0 c8 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012390b:	e8 2c 04 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123910:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123913:	74 17                	je     f012392c <test_kheap_phys_addr+0x555>
f0123915:	83 ec 04             	sub    $0x4,%esp
f0123918:	68 f4 ac 13 f0       	push   $0xf013acf4
f012391d:	68 23 08 00 00       	push   $0x823
f0123922:	68 da ac 13 f0       	push   $0xf013acda
f0123927:	e8 cf c8 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012392c:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012392f:	e8 27 90 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0123934:	29 c3                	sub    %eax,%ebx
f0123936:	89 d8                	mov    %ebx,%eax
f0123938:	83 f8 01             	cmp    $0x1,%eax
f012393b:	74 17                	je     f0123954 <test_kheap_phys_addr+0x57d>
f012393d:	83 ec 04             	sub    $0x4,%esp
f0123940:	68 5c ad 13 f0       	push   $0xf013ad5c
f0123945:	68 24 08 00 00       	push   $0x824
f012394a:	68 da ac 13 f0       	push   $0xf013acda
f012394f:	e8 a7 c8 fd ff       	call   f01001fb <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0123954:	e8 02 90 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0123959:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012395c:	e8 db 03 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123961:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0123964:	83 ec 0c             	sub    $0xc,%esp
f0123967:	68 00 1c 00 00       	push   $0x1c00
f012396c:	e8 8d 3e fe ff       	call   f01077fe <kmalloc>
f0123971:	83 c4 10             	add    $0x10,%esp
f0123974:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012397a:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f0123980:	89 c1                	mov    %eax,%ecx
f0123982:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0123989:	10 00 00 
f012398c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0123992:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123997:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f012399d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01239a3:	ba 00 00 00 00       	mov    $0x0,%edx
f01239a8:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01239ae:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01239b4:	29 d0                	sub    %edx,%eax
f01239b6:	89 c3                	mov    %eax,%ebx
f01239b8:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f01239bf:	10 00 00 
f01239c2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01239c7:	0f b6 d0             	movzbl %al,%edx
f01239ca:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01239d0:	01 d0                	add    %edx,%eax
f01239d2:	48                   	dec    %eax
f01239d3:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01239d9:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01239df:	ba 00 00 00 00       	mov    $0x0,%edx
f01239e4:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01239ea:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01239f0:	29 d0                	sub    %edx,%eax
f01239f2:	01 c3                	add    %eax,%ebx
f01239f4:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01239fb:	10 00 00 
f01239fe:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123a03:	0f b6 c0             	movzbl %al,%eax
f0123a06:	c1 e0 04             	shl    $0x4,%eax
f0123a09:	89 c2                	mov    %eax,%edx
f0123a0b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0123a11:	01 d0                	add    %edx,%eax
f0123a13:	48                   	dec    %eax
f0123a14:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0123a1a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0123a20:	ba 00 00 00 00       	mov    $0x0,%edx
f0123a25:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0123a2b:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0123a31:	29 d0                	sub    %edx,%eax
f0123a33:	01 d8                	add    %ebx,%eax
f0123a35:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0123a3a:	39 c1                	cmp    %eax,%ecx
f0123a3c:	74 17                	je     f0123a55 <test_kheap_phys_addr+0x67e>
f0123a3e:	83 ec 04             	sub    $0x4,%esp
f0123a41:	68 c0 ad 13 f0       	push   $0xf013adc0
f0123a46:	68 2a 08 00 00       	push   $0x82a
f0123a4b:	68 da ac 13 f0       	push   $0xf013acda
f0123a50:	e8 a6 c7 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123a55:	e8 e2 02 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123a5a:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123a5d:	74 17                	je     f0123a76 <test_kheap_phys_addr+0x69f>
f0123a5f:	83 ec 04             	sub    $0x4,%esp
f0123a62:	68 f4 ac 13 f0       	push   $0xf013acf4
f0123a67:	68 2b 08 00 00       	push   $0x82b
f0123a6c:	68 da ac 13 f0       	push   $0xf013acda
f0123a71:	e8 85 c7 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123a76:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123a79:	e8 dd 8e fe ff       	call   f010c95b <sys_calculate_free_frames>
f0123a7e:	29 c3                	sub    %eax,%ebx
f0123a80:	89 d8                	mov    %ebx,%eax
f0123a82:	83 f8 02             	cmp    $0x2,%eax
f0123a85:	74 17                	je     f0123a9e <test_kheap_phys_addr+0x6c7>
f0123a87:	83 ec 04             	sub    $0x4,%esp
f0123a8a:	68 5c ad 13 f0       	push   $0xf013ad5c
f0123a8f:	68 2c 08 00 00       	push   $0x82c
f0123a94:	68 da ac 13 f0       	push   $0xf013acda
f0123a99:	e8 5d c7 fd ff       	call   f01001fb <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123a9e:	e8 b8 8e fe ff       	call   f010c95b <sys_calculate_free_frames>
f0123aa3:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123aa6:	e8 91 02 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123aab:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0123aae:	83 ec 0c             	sub    $0xc,%esp
f0123ab1:	68 00 fc 2f 00       	push   $0x2ffc00
f0123ab6:	e8 43 3d fe ff       	call   f01077fe <kmalloc>
f0123abb:	83 c4 10             	add    $0x10,%esp
f0123abe:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123ac4:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f0123aca:	89 c1                	mov    %eax,%ecx
f0123acc:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0123ad3:	10 00 00 
f0123ad6:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0123adc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123ae1:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0123ae7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0123aed:	ba 00 00 00 00       	mov    $0x0,%edx
f0123af2:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0123af8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0123afe:	29 d0                	sub    %edx,%eax
f0123b00:	89 c3                	mov    %eax,%ebx
f0123b02:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0123b09:	10 00 00 
f0123b0c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123b11:	0f b6 d0             	movzbl %al,%edx
f0123b14:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0123b1a:	01 d0                	add    %edx,%eax
f0123b1c:	48                   	dec    %eax
f0123b1d:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0123b23:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0123b29:	ba 00 00 00 00       	mov    $0x0,%edx
f0123b2e:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0123b34:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0123b3a:	29 d0                	sub    %edx,%eax
f0123b3c:	01 c3                	add    %eax,%ebx
f0123b3e:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0123b45:	10 00 00 
f0123b48:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123b4d:	0f b6 c0             	movzbl %al,%eax
f0123b50:	c1 e0 04             	shl    $0x4,%eax
f0123b53:	89 c2                	mov    %eax,%edx
f0123b55:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0123b5b:	01 d0                	add    %edx,%eax
f0123b5d:	48                   	dec    %eax
f0123b5e:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0123b64:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0123b6a:	ba 00 00 00 00       	mov    $0x0,%edx
f0123b6f:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0123b75:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0123b7b:	29 d0                	sub    %edx,%eax
f0123b7d:	01 d8                	add    %ebx,%eax
f0123b7f:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0123b84:	39 c1                	cmp    %eax,%ecx
f0123b86:	74 17                	je     f0123b9f <test_kheap_phys_addr+0x7c8>
f0123b88:	83 ec 04             	sub    $0x4,%esp
f0123b8b:	68 c0 ad 13 f0       	push   $0xf013adc0
f0123b90:	68 32 08 00 00       	push   $0x832
f0123b95:	68 da ac 13 f0       	push   $0xf013acda
f0123b9a:	e8 5c c6 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123b9f:	e8 98 01 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123ba4:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123ba7:	74 17                	je     f0123bc0 <test_kheap_phys_addr+0x7e9>
f0123ba9:	83 ec 04             	sub    $0x4,%esp
f0123bac:	68 f4 ac 13 f0       	push   $0xf013acf4
f0123bb1:	68 33 08 00 00       	push   $0x833
f0123bb6:	68 da ac 13 f0       	push   $0xf013acda
f0123bbb:	e8 3b c6 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123bc0:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123bc3:	e8 93 8d fe ff       	call   f010c95b <sys_calculate_free_frames>
f0123bc8:	29 c3                	sub    %eax,%ebx
f0123bca:	89 d8                	mov    %ebx,%eax
f0123bcc:	3d 00 03 00 00       	cmp    $0x300,%eax
f0123bd1:	74 17                	je     f0123bea <test_kheap_phys_addr+0x813>
f0123bd3:	83 ec 04             	sub    $0x4,%esp
f0123bd6:	68 5c ad 13 f0       	push   $0xf013ad5c
f0123bdb:	68 34 08 00 00       	push   $0x834
f0123be0:	68 da ac 13 f0       	push   $0xf013acda
f0123be5:	e8 11 c6 fd ff       	call   f01001fb <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0123bea:	e8 6c 8d fe ff       	call   f010c95b <sys_calculate_free_frames>
f0123bef:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123bf2:	e8 45 01 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123bf7:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0123bfa:	83 ec 0c             	sub    $0xc,%esp
f0123bfd:	68 00 fc 5f 00       	push   $0x5ffc00
f0123c02:	e8 f7 3b fe ff       	call   f01077fe <kmalloc>
f0123c07:	83 c4 10             	add    $0x10,%esp
f0123c0a:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123c10:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0123c16:	89 c1                	mov    %eax,%ecx
f0123c18:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0123c1f:	10 00 00 
f0123c22:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0123c28:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123c2d:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0123c33:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0123c39:	ba 00 00 00 00       	mov    $0x0,%edx
f0123c3e:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0123c44:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0123c4a:	29 d0                	sub    %edx,%eax
f0123c4c:	89 c3                	mov    %eax,%ebx
f0123c4e:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0123c55:	10 00 00 
f0123c58:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123c5d:	0f b6 d0             	movzbl %al,%edx
f0123c60:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0123c66:	01 d0                	add    %edx,%eax
f0123c68:	48                   	dec    %eax
f0123c69:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0123c6f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0123c75:	ba 00 00 00 00       	mov    $0x0,%edx
f0123c7a:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0123c80:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0123c86:	29 d0                	sub    %edx,%eax
f0123c88:	01 c3                	add    %eax,%ebx
f0123c8a:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0123c91:	10 00 00 
f0123c94:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123c99:	0f b6 c0             	movzbl %al,%eax
f0123c9c:	c1 e0 04             	shl    $0x4,%eax
f0123c9f:	89 c2                	mov    %eax,%edx
f0123ca1:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0123ca7:	01 d0                	add    %edx,%eax
f0123ca9:	48                   	dec    %eax
f0123caa:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0123cb0:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0123cb6:	ba 00 00 00 00       	mov    $0x0,%edx
f0123cbb:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0123cc1:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0123cc7:	29 d0                	sub    %edx,%eax
f0123cc9:	01 d8                	add    %ebx,%eax
f0123ccb:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0123cd0:	39 c1                	cmp    %eax,%ecx
f0123cd2:	74 17                	je     f0123ceb <test_kheap_phys_addr+0x914>
f0123cd4:	83 ec 04             	sub    $0x4,%esp
f0123cd7:	68 c0 ad 13 f0       	push   $0xf013adc0
f0123cdc:	68 3a 08 00 00       	push   $0x83a
f0123ce1:	68 da ac 13 f0       	push   $0xf013acda
f0123ce6:	e8 10 c5 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123ceb:	e8 4c 00 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123cf0:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123cf3:	74 17                	je     f0123d0c <test_kheap_phys_addr+0x935>
f0123cf5:	83 ec 04             	sub    $0x4,%esp
f0123cf8:	68 f4 ac 13 f0       	push   $0xf013acf4
f0123cfd:	68 3b 08 00 00       	push   $0x83b
f0123d02:	68 da ac 13 f0       	push   $0xf013acda
f0123d07:	e8 ef c4 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123d0c:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123d0f:	e8 47 8c fe ff       	call   f010c95b <sys_calculate_free_frames>
f0123d14:	29 c3                	sub    %eax,%ebx
f0123d16:	89 d8                	mov    %ebx,%eax
f0123d18:	3d 00 06 00 00       	cmp    $0x600,%eax
f0123d1d:	74 17                	je     f0123d36 <test_kheap_phys_addr+0x95f>
f0123d1f:	83 ec 04             	sub    $0x4,%esp
f0123d22:	68 5c ad 13 f0       	push   $0xf013ad5c
f0123d27:	68 3c 08 00 00       	push   $0x83c
f0123d2c:	68 da ac 13 f0       	push   $0xf013acda
f0123d31:	e8 c5 c4 fd ff       	call   f01001fb <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0123d36:	e8 20 8c fe ff       	call   f010c95b <sys_calculate_free_frames>
f0123d3b:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123d3e:	e8 f9 ff fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0123d43:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0123d46:	83 ec 0c             	sub    $0xc,%esp
f0123d49:	68 00 38 00 00       	push   $0x3800
f0123d4e:	e8 ab 3a fe ff       	call   f01077fe <kmalloc>
f0123d53:	83 c4 10             	add    $0x10,%esp
f0123d56:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123d5c:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0123d62:	89 c1                	mov    %eax,%ecx
f0123d64:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0123d6b:	10 00 00 
f0123d6e:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0123d74:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123d79:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0123d7f:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0123d85:	ba 00 00 00 00       	mov    $0x0,%edx
f0123d8a:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0123d90:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0123d96:	29 d0                	sub    %edx,%eax
f0123d98:	89 c3                	mov    %eax,%ebx
f0123d9a:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0123da1:	10 00 00 
f0123da4:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123da9:	0f b6 d0             	movzbl %al,%edx
f0123dac:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0123db2:	01 d0                	add    %edx,%eax
f0123db4:	48                   	dec    %eax
f0123db5:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0123dbb:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0123dc1:	ba 00 00 00 00       	mov    $0x0,%edx
f0123dc6:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0123dcc:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0123dd2:	29 d0                	sub    %edx,%eax
f0123dd4:	01 c3                	add    %eax,%ebx
f0123dd6:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0123ddd:	10 00 00 
f0123de0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123de5:	0f b6 c0             	movzbl %al,%eax
f0123de8:	c1 e0 04             	shl    $0x4,%eax
f0123deb:	89 c2                	mov    %eax,%edx
f0123ded:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0123df3:	01 d0                	add    %edx,%eax
f0123df5:	48                   	dec    %eax
f0123df6:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0123dfc:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0123e02:	ba 00 00 00 00       	mov    $0x0,%edx
f0123e07:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0123e0d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0123e13:	29 d0                	sub    %edx,%eax
f0123e15:	01 d8                	add    %ebx,%eax
f0123e17:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0123e1c:	39 c1                	cmp    %eax,%ecx
f0123e1e:	74 17                	je     f0123e37 <test_kheap_phys_addr+0xa60>
f0123e20:	83 ec 04             	sub    $0x4,%esp
f0123e23:	68 c0 ad 13 f0       	push   $0xf013adc0
f0123e28:	68 42 08 00 00       	push   $0x842
f0123e2d:	68 da ac 13 f0       	push   $0xf013acda
f0123e32:	e8 c4 c3 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123e37:	e8 00 ff fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0123e3c:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123e3f:	74 17                	je     f0123e58 <test_kheap_phys_addr+0xa81>
f0123e41:	83 ec 04             	sub    $0x4,%esp
f0123e44:	68 f4 ac 13 f0       	push   $0xf013acf4
f0123e49:	68 43 08 00 00       	push   $0x843
f0123e4e:	68 da ac 13 f0       	push   $0xf013acda
f0123e53:	e8 a3 c3 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123e58:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123e5b:	e8 fb 8a fe ff       	call   f010c95b <sys_calculate_free_frames>
f0123e60:	29 c3                	sub    %eax,%ebx
f0123e62:	89 d8                	mov    %ebx,%eax
f0123e64:	83 f8 04             	cmp    $0x4,%eax
f0123e67:	74 17                	je     f0123e80 <test_kheap_phys_addr+0xaa9>
f0123e69:	83 ec 04             	sub    $0x4,%esp
f0123e6c:	68 5c ad 13 f0       	push   $0xf013ad5c
f0123e71:	68 44 08 00 00       	push   $0x844
f0123e76:	68 da ac 13 f0       	push   $0xf013acda
f0123e7b:	e8 7b c3 fd ff       	call   f01001fb <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f0123e80:	89 e0                	mov    %esp,%eax
f0123e82:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0123e84:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0123e8b:	10 00 00 
f0123e8e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0123e94:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123e99:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0123e9f:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0123ea5:	ba 00 00 00 00       	mov    $0x0,%edx
f0123eaa:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0123eb0:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0123eb6:	29 d0                	sub    %edx,%eax
f0123eb8:	89 c1                	mov    %eax,%ecx
f0123eba:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f0123ec1:	10 00 00 
f0123ec4:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123ec9:	0f b6 d0             	movzbl %al,%edx
f0123ecc:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0123ed2:	01 d0                	add    %edx,%eax
f0123ed4:	48                   	dec    %eax
f0123ed5:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f0123edb:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0123ee1:	ba 00 00 00 00       	mov    $0x0,%edx
f0123ee6:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f0123eec:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0123ef2:	29 d0                	sub    %edx,%eax
f0123ef4:	01 c1                	add    %eax,%ecx
f0123ef6:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f0123efd:	10 00 00 
f0123f00:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123f05:	0f b6 c0             	movzbl %al,%eax
f0123f08:	c1 e0 04             	shl    $0x4,%eax
f0123f0b:	89 c2                	mov    %eax,%edx
f0123f0d:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0123f13:	01 d0                	add    %edx,%eax
f0123f15:	48                   	dec    %eax
f0123f16:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f0123f1c:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0123f22:	ba 00 00 00 00       	mov    $0x0,%edx
f0123f27:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f0123f2d:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0123f33:	29 d0                	sub    %edx,%eax
f0123f35:	01 c8                	add    %ecx,%eax
f0123f37:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0123f3c:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0123f42:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0123f49:	10 00 00 
f0123f4c:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0123f52:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123f57:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0123f5d:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0123f63:	ba 00 00 00 00       	mov    $0x0,%edx
f0123f68:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0123f6e:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0123f74:	29 d0                	sub    %edx,%eax
f0123f76:	89 c1                	mov    %eax,%ecx
f0123f78:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0123f7f:	10 00 00 
f0123f82:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123f87:	0f b6 d0             	movzbl %al,%edx
f0123f8a:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0123f90:	01 d0                	add    %edx,%eax
f0123f92:	48                   	dec    %eax
f0123f93:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0123f99:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0123f9f:	ba 00 00 00 00       	mov    $0x0,%edx
f0123fa4:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0123faa:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0123fb0:	29 d0                	sub    %edx,%eax
f0123fb2:	01 c1                	add    %eax,%ecx
f0123fb4:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0123fbb:	10 00 00 
f0123fbe:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123fc3:	0f b6 c0             	movzbl %al,%eax
f0123fc6:	c1 e0 04             	shl    $0x4,%eax
f0123fc9:	89 c2                	mov    %eax,%edx
f0123fcb:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0123fd1:	01 d0                	add    %edx,%eax
f0123fd3:	48                   	dec    %eax
f0123fd4:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0123fda:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0123fe0:	ba 00 00 00 00       	mov    $0x0,%edx
f0123fe5:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0123feb:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0123ff1:	29 d0                	sub    %edx,%eax
f0123ff3:	01 c8                	add    %ecx,%eax
f0123ff5:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0123ffa:	c1 e8 0c             	shr    $0xc,%eax
f0123ffd:	89 c2                	mov    %eax,%edx
f0123fff:	4a                   	dec    %edx
f0124000:	89 95 ac fe ff ff    	mov    %edx,-0x154(%ebp)
f0124006:	c1 e0 02             	shl    $0x2,%eax
f0124009:	8d 50 03             	lea    0x3(%eax),%edx
f012400c:	b8 10 00 00 00       	mov    $0x10,%eax
f0124011:	48                   	dec    %eax
f0124012:	01 d0                	add    %edx,%eax
f0124014:	bf 10 00 00 00       	mov    $0x10,%edi
f0124019:	ba 00 00 00 00       	mov    $0x0,%edx
f012401e:	f7 f7                	div    %edi
f0124020:	6b c0 10             	imul   $0x10,%eax,%eax
f0124023:	29 c4                	sub    %eax,%esp
f0124025:	89 e0                	mov    %esp,%eax
f0124027:	83 c0 03             	add    $0x3,%eax
f012402a:	c1 e8 02             	shr    $0x2,%eax
f012402d:	c1 e0 02             	shl    $0x2,%eax
f0124030:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f0124036:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f012403d:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f0124044:	10 00 00 
f0124047:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012404d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124052:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f0124058:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012405e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124063:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f0124069:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012406f:	29 d0                	sub    %edx,%eax
f0124071:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124076:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0124079:	eb 29                	jmp    f01240a4 <test_kheap_phys_addr+0xccd>
		{
			allPAs[i++] = kheap_physical_address(va);
f012407b:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f012407e:	8d 43 01             	lea    0x1(%ebx),%eax
f0124081:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0124084:	83 ec 0c             	sub    $0xc,%esp
f0124087:	ff 75 e0             	pushl  -0x20(%ebp)
f012408a:	e8 84 39 fe ff       	call   f0107a13 <kheap_physical_address>
f012408f:	83 c4 10             	add    $0x10,%esp
f0124092:	89 c2                	mov    %eax,%edx
f0124094:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012409a:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f012409d:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f01240a4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01240a7:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f01240ad:	72 cc                	jb     f012407b <test_kheap_phys_addr+0xca4>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f01240af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01240b2:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		i = 0;
f01240b8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01240bf:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f01240c6:	10 00 00 
f01240c9:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01240cf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01240d4:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f01240da:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01240e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01240e5:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f01240eb:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01240f1:	29 d0                	sub    %edx,%eax
f01240f3:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01240f8:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01240fb:	e9 ab 00 00 00       	jmp    f01241ab <test_kheap_phys_addr+0xdd4>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0124100:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0124105:	83 ec 04             	sub    $0x4,%esp
f0124108:	8d 95 20 fd ff ff    	lea    -0x2e0(%ebp),%edx
f012410e:	52                   	push   %edx
f012410f:	ff 75 e0             	pushl  -0x20(%ebp)
f0124112:	50                   	push   %eax
f0124113:	e8 c2 28 fe ff       	call   f01069da <get_page_table>
f0124118:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f012411b:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0124121:	85 c0                	test   %eax,%eax
f0124123:	75 17                	jne    f012413c <test_kheap_phys_addr+0xd65>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0124125:	83 ec 04             	sub    $0x4,%esp
f0124128:	68 7c b6 13 f0       	push   $0xf013b67c
f012412d:	68 59 08 00 00       	push   $0x859
f0124132:	68 da ac 13 f0       	push   $0xf013acda
f0124137:	e8 bf c0 fd ff       	call   f01001fb <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f012413c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012413f:	c1 e8 0c             	shr    $0xc,%eax
f0124142:	25 ff 03 00 00       	and    $0x3ff,%eax
f0124147:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012414a:	eb 4b                	jmp    f0124197 <test_kheap_phys_addr+0xdc0>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f012414c:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0124152:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0124155:	c1 e2 02             	shl    $0x2,%edx
f0124158:	01 d0                	add    %edx,%eax
f012415a:	8b 00                	mov    (%eax),%eax
f012415c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0124161:	89 c1                	mov    %eax,%ecx
f0124163:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0124169:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012416c:	8b 04 90             	mov    (%eax,%edx,4),%eax
f012416f:	39 c1                	cmp    %eax,%ecx
f0124171:	74 17                	je     f012418a <test_kheap_phys_addr+0xdb3>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0124173:	83 ec 04             	sub    $0x4,%esp
f0124176:	68 d5 b6 13 f0       	push   $0xf013b6d5
f012417b:	68 60 08 00 00       	push   $0x860
f0124180:	68 da ac 13 f0       	push   $0xf013acda
f0124185:	e8 71 c0 fd ff       	call   f01001fb <_panic>
				}
				va+=PAGE_SIZE;
f012418a:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124191:	ff 45 dc             	incl   -0x24(%ebp)
f0124194:	ff 45 e4             	incl   -0x1c(%ebp)
f0124197:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012419a:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f01241a0:	7d 09                	jge    f01241ab <test_kheap_phys_addr+0xdd4>
f01241a2:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f01241a9:	7e a1                	jle    f012414c <test_kheap_phys_addr+0xd75>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01241ab:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01241ae:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f01241b4:	0f 82 46 ff ff ff    	jb     f0124100 <test_kheap_phys_addr+0xd29>
f01241ba:	89 f4                	mov    %esi,%esp
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f01241bc:	83 ec 0c             	sub    $0xc,%esp
f01241bf:	68 f4 b6 13 f0       	push   $0xf013b6f4
f01241c4:	e8 b9 ca fd ff       	call   f0100c82 <cprintf>
f01241c9:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01241cc:	e8 8a 87 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01241d1:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01241d7:	e8 60 fb fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01241dc:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[0]);
f01241e2:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f01241e8:	83 ec 0c             	sub    $0xc,%esp
f01241eb:	50                   	push   %eax
f01241ec:	e8 cf 36 fe ff       	call   f01078c0 <kfree>
f01241f1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01241f4:	e8 43 fb fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01241f9:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f01241ff:	74 17                	je     f0124218 <test_kheap_phys_addr+0xe41>
f0124201:	83 ec 04             	sub    $0x4,%esp
f0124204:	68 f4 ac 13 f0       	push   $0xf013acf4
f0124209:	68 6e 08 00 00       	push   $0x86e
f012420e:	68 da ac 13 f0       	push   $0xf013acda
f0124213:	e8 e3 bf fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0124218:	e8 3e 87 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012421d:	89 c2                	mov    %eax,%edx
f012421f:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0124225:	29 c2                	sub    %eax,%edx
f0124227:	89 d0                	mov    %edx,%eax
f0124229:	3d 00 02 00 00       	cmp    $0x200,%eax
f012422e:	74 17                	je     f0124247 <test_kheap_phys_addr+0xe70>
f0124230:	83 ec 04             	sub    $0x4,%esp
f0124233:	68 64 b4 13 f0       	push   $0xf013b464
f0124238:	68 6f 08 00 00       	push   $0x86f
f012423d:	68 da ac 13 f0       	push   $0xf013acda
f0124242:	e8 b4 bf fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124247:	e8 0f 87 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012424c:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124252:	e8 e5 fa fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124257:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[1]);
f012425d:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0124263:	83 ec 0c             	sub    $0xc,%esp
f0124266:	50                   	push   %eax
f0124267:	e8 54 36 fe ff       	call   f01078c0 <kfree>
f012426c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012426f:	e8 c8 fa fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124274:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f012427a:	74 17                	je     f0124293 <test_kheap_phys_addr+0xebc>
f012427c:	83 ec 04             	sub    $0x4,%esp
f012427f:	68 f4 ac 13 f0       	push   $0xf013acf4
f0124284:	68 75 08 00 00       	push   $0x875
f0124289:	68 da ac 13 f0       	push   $0xf013acda
f012428e:	e8 68 bf fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0124293:	e8 c3 86 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0124298:	89 c2                	mov    %eax,%edx
f012429a:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01242a0:	29 c2                	sub    %eax,%edx
f01242a2:	89 d0                	mov    %edx,%eax
f01242a4:	3d 00 02 00 00       	cmp    $0x200,%eax
f01242a9:	74 17                	je     f01242c2 <test_kheap_phys_addr+0xeeb>
f01242ab:	83 ec 04             	sub    $0x4,%esp
f01242ae:	68 64 b4 13 f0       	push   $0xf013b464
f01242b3:	68 76 08 00 00       	push   $0x876
f01242b8:	68 da ac 13 f0       	push   $0xf013acda
f01242bd:	e8 39 bf fd ff       	call   f01001fb <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01242c2:	e8 94 86 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01242c7:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01242cd:	e8 6a fa fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01242d2:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[6]);
f01242d8:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f01242de:	83 ec 0c             	sub    $0xc,%esp
f01242e1:	50                   	push   %eax
f01242e2:	e8 d9 35 fe ff       	call   f01078c0 <kfree>
f01242e7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01242ea:	e8 4d fa fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01242ef:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f01242f5:	74 17                	je     f012430e <test_kheap_phys_addr+0xf37>
f01242f7:	83 ec 04             	sub    $0x4,%esp
f01242fa:	68 f4 ac 13 f0       	push   $0xf013acf4
f01242ff:	68 7c 08 00 00       	push   $0x87c
f0124304:	68 da ac 13 f0       	push   $0xf013acda
f0124309:	e8 ed be fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012430e:	e8 48 86 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0124313:	89 c2                	mov    %eax,%edx
f0124315:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012431b:	29 c2                	sub    %eax,%edx
f012431d:	89 d0                	mov    %edx,%eax
f012431f:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124324:	74 17                	je     f012433d <test_kheap_phys_addr+0xf66>
f0124326:	83 ec 04             	sub    $0x4,%esp
f0124329:	68 64 b4 13 f0       	push   $0xf013b464
f012432e:	68 7d 08 00 00       	push   $0x87d
f0124333:	68 da ac 13 f0       	push   $0xf013acda
f0124338:	e8 be be fd ff       	call   f01001fb <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f012433d:	89 e0                	mov    %esp,%eax
f012433f:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0124341:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f0124348:	10 00 00 
f012434b:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0124351:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124356:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f012435c:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0124362:	ba 00 00 00 00       	mov    $0x0,%edx
f0124367:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f012436d:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0124373:	29 d0                	sub    %edx,%eax
f0124375:	89 c1                	mov    %eax,%ecx
f0124377:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f012437e:	10 00 00 
f0124381:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124386:	0f b6 d0             	movzbl %al,%edx
f0124389:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012438f:	01 d0                	add    %edx,%eax
f0124391:	48                   	dec    %eax
f0124392:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f0124398:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012439e:	ba 00 00 00 00       	mov    $0x0,%edx
f01243a3:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f01243a9:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01243af:	29 d0                	sub    %edx,%eax
f01243b1:	01 c1                	add    %eax,%ecx
f01243b3:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f01243ba:	10 00 00 
f01243bd:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01243c2:	0f b6 c0             	movzbl %al,%eax
f01243c5:	c1 e0 04             	shl    $0x4,%eax
f01243c8:	89 c2                	mov    %eax,%edx
f01243ca:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01243d0:	01 d0                	add    %edx,%eax
f01243d2:	48                   	dec    %eax
f01243d3:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f01243d9:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01243df:	ba 00 00 00 00       	mov    $0x0,%edx
f01243e4:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f01243ea:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01243f0:	29 d0                	sub    %edx,%eax
f01243f2:	01 c8                	add    %ecx,%eax
f01243f4:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01243f9:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f01243ff:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f0124406:	10 00 00 
f0124409:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012440f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124414:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f012441a:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0124420:	ba 00 00 00 00       	mov    $0x0,%edx
f0124425:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f012442b:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0124431:	29 d0                	sub    %edx,%eax
f0124433:	89 c1                	mov    %eax,%ecx
f0124435:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f012443c:	10 00 00 
f012443f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124444:	0f b6 d0             	movzbl %al,%edx
f0124447:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012444d:	01 d0                	add    %edx,%eax
f012444f:	48                   	dec    %eax
f0124450:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f0124456:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012445c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124461:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f0124467:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012446d:	29 d0                	sub    %edx,%eax
f012446f:	01 c1                	add    %eax,%ecx
f0124471:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0124478:	10 00 00 
f012447b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124480:	0f b6 c0             	movzbl %al,%eax
f0124483:	c1 e0 04             	shl    $0x4,%eax
f0124486:	89 c2                	mov    %eax,%edx
f0124488:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012448e:	01 d0                	add    %edx,%eax
f0124490:	48                   	dec    %eax
f0124491:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0124497:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012449d:	ba 00 00 00 00       	mov    $0x0,%edx
f01244a2:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f01244a8:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01244ae:	29 d0                	sub    %edx,%eax
f01244b0:	01 c8                	add    %ecx,%eax
f01244b2:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f01244b7:	c1 e8 0c             	shr    $0xc,%eax
f01244ba:	89 c2                	mov    %eax,%edx
f01244bc:	4a                   	dec    %edx
f01244bd:	89 95 54 fe ff ff    	mov    %edx,-0x1ac(%ebp)
f01244c3:	c1 e0 02             	shl    $0x2,%eax
f01244c6:	8d 50 03             	lea    0x3(%eax),%edx
f01244c9:	b8 10 00 00 00       	mov    $0x10,%eax
f01244ce:	48                   	dec    %eax
f01244cf:	01 d0                	add    %edx,%eax
f01244d1:	bf 10 00 00 00       	mov    $0x10,%edi
f01244d6:	ba 00 00 00 00       	mov    $0x0,%edx
f01244db:	f7 f7                	div    %edi
f01244dd:	6b c0 10             	imul   $0x10,%eax,%eax
f01244e0:	29 c4                	sub    %eax,%esp
f01244e2:	89 e0                	mov    %esp,%eax
f01244e4:	83 c0 03             	add    $0x3,%eax
f01244e7:	c1 e8 02             	shr    $0x2,%eax
f01244ea:	c1 e0 02             	shl    $0x2,%eax
f01244ed:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		i = 0;
f01244f3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f01244fa:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0124501:	10 00 00 
f0124504:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012450a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012450f:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0124515:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012451b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124520:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0124526:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012452c:	29 d0                	sub    %edx,%eax
f012452e:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124533:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124536:	eb 29                	jmp    f0124561 <test_kheap_phys_addr+0x118a>
		{
			allPAs[i++] = kheap_physical_address(va);
f0124538:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f012453b:	8d 43 01             	lea    0x1(%ebx),%eax
f012453e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0124541:	83 ec 0c             	sub    $0xc,%esp
f0124544:	ff 75 d8             	pushl  -0x28(%ebp)
f0124547:	e8 c7 34 fe ff       	call   f0107a13 <kheap_physical_address>
f012454c:	83 c4 10             	add    $0x10,%esp
f012454f:	89 c2                	mov    %eax,%edx
f0124551:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0124557:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f012455a:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f0124561:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124564:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f012456a:	72 cc                	jb     f0124538 <test_kheap_phys_addr+0x1161>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f012456c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012456f:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		i = 0;
f0124575:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f012457c:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f0124583:	10 00 00 
f0124586:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012458c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124591:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0124597:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012459d:	ba 00 00 00 00       	mov    $0x0,%edx
f01245a2:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f01245a8:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01245ae:	29 d0                	sub    %edx,%eax
f01245b0:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01245b5:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01245b8:	e9 ab 00 00 00       	jmp    f0124668 <test_kheap_phys_addr+0x1291>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f01245bd:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01245c2:	83 ec 04             	sub    $0x4,%esp
f01245c5:	8d 95 1c fd ff ff    	lea    -0x2e4(%ebp),%edx
f01245cb:	52                   	push   %edx
f01245cc:	ff 75 d8             	pushl  -0x28(%ebp)
f01245cf:	50                   	push   %eax
f01245d0:	e8 05 24 fe ff       	call   f01069da <get_page_table>
f01245d5:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01245d8:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f01245de:	85 c0                	test   %eax,%eax
f01245e0:	75 17                	jne    f01245f9 <test_kheap_phys_addr+0x1222>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f01245e2:	83 ec 04             	sub    $0x4,%esp
f01245e5:	68 7c b6 13 f0       	push   $0xf013b67c
f01245ea:	68 93 08 00 00       	push   $0x893
f01245ef:	68 da ac 13 f0       	push   $0xf013acda
f01245f4:	e8 02 bc fd ff       	call   f01001fb <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f01245f9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01245fc:	c1 e8 0c             	shr    $0xc,%eax
f01245ff:	25 ff 03 00 00       	and    $0x3ff,%eax
f0124604:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0124607:	eb 4b                	jmp    f0124654 <test_kheap_phys_addr+0x127d>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0124609:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f012460f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0124612:	c1 e2 02             	shl    $0x2,%edx
f0124615:	01 d0                	add    %edx,%eax
f0124617:	8b 00                	mov    (%eax),%eax
f0124619:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f012461e:	89 c1                	mov    %eax,%ecx
f0124620:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0124626:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0124629:	8b 04 90             	mov    (%eax,%edx,4),%eax
f012462c:	39 c1                	cmp    %eax,%ecx
f012462e:	74 17                	je     f0124647 <test_kheap_phys_addr+0x1270>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0124630:	83 ec 04             	sub    $0x4,%esp
f0124633:	68 d5 b6 13 f0       	push   $0xf013b6d5
f0124638:	68 9a 08 00 00       	push   $0x89a
f012463d:	68 da ac 13 f0       	push   $0xf013acda
f0124642:	e8 b4 bb fd ff       	call   f01001fb <_panic>
				}
				va += PAGE_SIZE;
f0124647:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f012464e:	ff 45 d4             	incl   -0x2c(%ebp)
f0124651:	ff 45 e4             	incl   -0x1c(%ebp)
f0124654:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124657:	3b 85 44 fe ff ff    	cmp    -0x1bc(%ebp),%eax
f012465d:	7d 09                	jge    f0124668 <test_kheap_phys_addr+0x1291>
f012465f:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f0124666:	7e a1                	jle    f0124609 <test_kheap_phys_addr+0x1232>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124668:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012466b:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f0124671:	0f 82 46 ff ff ff    	jb     f01245bd <test_kheap_phys_addr+0x11e6>
f0124677:	89 f4                	mov    %esi,%esp
				va += PAGE_SIZE;
			}
		}
	}

	cprintf("\b\b\b80%");
f0124679:	83 ec 0c             	sub    $0xc,%esp
f012467c:	68 65 ae 13 f0       	push   $0xf013ae65
f0124681:	e8 fc c5 fd ff       	call   f0100c82 <cprintf>
f0124686:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f0124689:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f0124690:	10 00 00 
f0124693:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0124699:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012469e:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f01246a4:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01246aa:	ba 00 00 00 00       	mov    $0x0,%edx
f01246af:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f01246b5:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01246bb:	29 d0                	sub    %edx,%eax
f01246bd:	89 c1                	mov    %eax,%ecx
f01246bf:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f01246c6:	10 00 00 
f01246c9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01246ce:	0f b6 d0             	movzbl %al,%edx
f01246d1:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01246d7:	01 d0                	add    %edx,%eax
f01246d9:	48                   	dec    %eax
f01246da:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f01246e0:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01246e6:	ba 00 00 00 00       	mov    $0x0,%edx
f01246eb:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f01246f1:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01246f7:	29 d0                	sub    %edx,%eax
f01246f9:	01 c1                	add    %eax,%ecx
f01246fb:	c7 85 28 fe ff ff 00 	movl   $0x1000,-0x1d8(%ebp)
f0124702:	10 00 00 
f0124705:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012470a:	0f b6 c0             	movzbl %al,%eax
f012470d:	c1 e0 04             	shl    $0x4,%eax
f0124710:	89 c2                	mov    %eax,%edx
f0124712:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0124718:	01 d0                	add    %edx,%eax
f012471a:	48                   	dec    %eax
f012471b:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
f0124721:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0124727:	ba 00 00 00 00       	mov    $0x0,%edx
f012472c:	f7 b5 28 fe ff ff    	divl   -0x1d8(%ebp)
f0124732:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0124738:	29 d0                	sub    %edx,%eax
f012473a:	01 c8                	add    %ecx,%eax
f012473c:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
f0124741:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		i = 0;
f0124747:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f012474e:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0124754:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0124757:	eb 0a                	jmp    f0124763 <test_kheap_phys_addr+0x138c>
		{
			i++;
f0124759:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f012475c:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f0124763:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012476a:	76 ed                	jbe    f0124759 <test_kheap_phys_addr+0x1382>
		{
			i++;
		}
		int ii = i ;
f012476c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012476f:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
		i = 0;
f0124775:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f012477c:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0124782:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0124785:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f012478c:	e9 cc 00 00 00       	jmp    f012485d <test_kheap_phys_addr+0x1486>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f0124791:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0124794:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0124799:	83 ec 04             	sub    $0x4,%esp
f012479c:	8d 8d 18 fd ff ff    	lea    -0x2e8(%ebp),%ecx
f01247a2:	51                   	push   %ecx
f01247a3:	52                   	push   %edx
f01247a4:	50                   	push   %eax
f01247a5:	e8 30 22 fe ff       	call   f01069da <get_page_table>
f01247aa:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01247ad:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f01247b3:	85 c0                	test   %eax,%eax
f01247b5:	75 17                	jne    f01247ce <test_kheap_phys_addr+0x13f7>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f01247b7:	83 ec 04             	sub    $0x4,%esp
f01247ba:	68 7c b6 13 f0       	push   $0xf013b67c
f01247bf:	68 b6 08 00 00       	push   $0x8b6
f01247c4:	68 da ac 13 f0       	push   $0xf013acda
f01247c9:	e8 2d ba fd ff       	call   f01001fb <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f01247ce:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01247d5:	eb 67                	jmp    f012483e <test_kheap_phys_addr+0x1467>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f01247d7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01247da:	c1 e0 0c             	shl    $0xc,%eax
f01247dd:	89 c2                	mov    %eax,%edx
f01247df:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01247e5:	01 d0                	add    %edx,%eax
f01247e7:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f01247ed:	83 ec 0c             	sub    $0xc,%esp
f01247f0:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f01247f6:	e8 18 32 fe ff       	call   f0107a13 <kheap_physical_address>
f01247fb:	83 c4 10             	add    $0x10,%esp
f01247fe:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f0124804:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f012480a:	8b 55 cc             	mov    -0x34(%ebp),%edx
f012480d:	c1 e2 02             	shl    $0x2,%edx
f0124810:	01 d0                	add    %edx,%eax
f0124812:	8b 00                	mov    (%eax),%eax
f0124814:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0124819:	3b 85 14 fe ff ff    	cmp    -0x1ec(%ebp),%eax
f012481f:	74 17                	je     f0124838 <test_kheap_phys_addr+0x1461>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0124821:	83 ec 04             	sub    $0x4,%esp
f0124824:	68 d5 b6 13 f0       	push   $0xf013b6d5
f0124829:	68 c0 08 00 00       	push   $0x8c0
f012482e:	68 da ac 13 f0       	push   $0xf013acda
f0124833:	e8 c3 b9 fd ff       	call   f01001fb <_panic>
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0124838:	ff 45 cc             	incl   -0x34(%ebp)
f012483b:	ff 45 e4             	incl   -0x1c(%ebp)
f012483e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124841:	3b 85 1c fe ff ff    	cmp    -0x1e4(%ebp),%eax
f0124847:	7d 09                	jge    f0124852 <test_kheap_phys_addr+0x147b>
f0124849:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f0124850:	7e 85                	jle    f01247d7 <test_kheap_phys_addr+0x1400>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0124852:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f0124859:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f012485d:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0124861:	0f 88 2a ff ff ff    	js     f0124791 <test_kheap_phys_addr+0x13ba>
f0124867:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f012486b:	7f 0d                	jg     f012487a <test_kheap_phys_addr+0x14a3>
f012486d:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f0124874:	0f 86 17 ff ff ff    	jbe    f0124791 <test_kheap_phys_addr+0x13ba>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f012487a:	83 ec 0c             	sub    $0xc,%esp
f012487d:	68 be ae 13 f0       	push   $0xf013aebe
f0124882:	e8 fb c3 fd ff       	call   f0100c82 <cprintf>
f0124887:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f012488a:	83 ec 0c             	sub    $0xc,%esp
f012488d:	68 28 b7 13 f0       	push   $0xf013b728
f0124892:	e8 eb c3 fd ff       	call   f0100c82 <cprintf>
f0124897:	83 c4 10             	add    $0x10,%esp

	return 1;
f012489a:	b8 01 00 00 00       	mov    $0x1,%eax

}
f012489f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01248a2:	5b                   	pop    %ebx
f01248a3:	5e                   	pop    %esi
f01248a4:	5f                   	pop    %edi
f01248a5:	5d                   	pop    %ebp
f01248a6:	c3                   	ret    

f01248a7 <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f01248a7:	55                   	push   %ebp
f01248a8:	89 e5                	mov    %esp,%ebp
f01248aa:	57                   	push   %edi
f01248ab:	56                   	push   %esi
f01248ac:	53                   	push   %ebx
f01248ad:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
f01248b3:	89 e0                	mov    %esp,%eax
f01248b5:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f01248b7:	83 ec 0c             	sub    $0xc,%esp
f01248ba:	68 1c ac 13 f0       	push   $0xf013ac1c
f01248bf:	e8 be c3 fd ff       	call   f0100c82 <cprintf>
f01248c4:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01248c7:	83 ec 0c             	sub    $0xc,%esp
f01248ca:	68 4c ac 13 f0       	push   $0xf013ac4c
f01248cf:	e8 ae c3 fd ff       	call   f0100c82 <cprintf>
f01248d4:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01248d7:	83 ec 0c             	sub    $0xc,%esp
f01248da:	68 1c ac 13 f0       	push   $0xf013ac1c
f01248df:	e8 9e c3 fd ff       	call   f0100c82 <cprintf>
f01248e4:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01248e7:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f01248eb:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f01248ef:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f01248f5:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f01248fb:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f0124902:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0124909:	e8 4d 80 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012490e:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0124911:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0124917:	b9 14 00 00 00       	mov    $0x14,%ecx
f012491c:	b8 00 00 00 00       	mov    $0x0,%eax
f0124921:	89 d7                	mov    %edx,%edi
f0124923:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0124925:	8d 95 78 fd ff ff    	lea    -0x288(%ebp),%edx
f012492b:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124930:	b8 00 00 00 00       	mov    $0x0,%eax
f0124935:	89 d7                	mov    %edx,%edi
f0124937:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0124939:	8d 95 28 fd ff ff    	lea    -0x2d8(%ebp),%edx
f012493f:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124944:	b8 00 00 00 00       	mov    $0x0,%eax
f0124949:	89 d7                	mov    %edx,%edi
f012494b:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012494d:	e8 09 80 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0124952:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124955:	e8 e2 f3 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012495a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012495d:	83 ec 0c             	sub    $0xc,%esp
f0124960:	68 00 fc 1f 00       	push   $0x1ffc00
f0124965:	e8 94 2e fe ff       	call   f01077fe <kmalloc>
f012496a:	83 c4 10             	add    $0x10,%esp
f012496d:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124973:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0124979:	89 c1                	mov    %eax,%ecx
f012497b:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0124982:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0124985:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012498a:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012498d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0124990:	ba 00 00 00 00       	mov    $0x0,%edx
f0124995:	f7 75 b4             	divl   -0x4c(%ebp)
f0124998:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012499b:	29 d0                	sub    %edx,%eax
f012499d:	89 c3                	mov    %eax,%ebx
f012499f:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01249a6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01249ab:	0f b6 d0             	movzbl %al,%edx
f01249ae:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01249b1:	01 d0                	add    %edx,%eax
f01249b3:	48                   	dec    %eax
f01249b4:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01249b7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01249ba:	ba 00 00 00 00       	mov    $0x0,%edx
f01249bf:	f7 75 ac             	divl   -0x54(%ebp)
f01249c2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01249c5:	29 d0                	sub    %edx,%eax
f01249c7:	01 c3                	add    %eax,%ebx
f01249c9:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01249d0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01249d5:	0f b6 c0             	movzbl %al,%eax
f01249d8:	c1 e0 04             	shl    $0x4,%eax
f01249db:	89 c2                	mov    %eax,%edx
f01249dd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01249e0:	01 d0                	add    %edx,%eax
f01249e2:	48                   	dec    %eax
f01249e3:	89 45 a0             	mov    %eax,-0x60(%ebp)
f01249e6:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01249e9:	ba 00 00 00 00       	mov    $0x0,%edx
f01249ee:	f7 75 a4             	divl   -0x5c(%ebp)
f01249f1:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01249f4:	29 d0                	sub    %edx,%eax
f01249f6:	01 d8                	add    %ebx,%eax
f01249f8:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01249fd:	39 c1                	cmp    %eax,%ecx
f01249ff:	74 17                	je     f0124a18 <test_kheap_virt_addr+0x171>
f0124a01:	83 ec 04             	sub    $0x4,%esp
f0124a04:	68 c0 ad 13 f0       	push   $0xf013adc0
f0124a09:	68 ed 08 00 00       	push   $0x8ed
f0124a0e:	68 da ac 13 f0       	push   $0xf013acda
f0124a13:	e8 e3 b7 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124a18:	e8 1f f3 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124a1d:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124a20:	74 17                	je     f0124a39 <test_kheap_virt_addr+0x192>
f0124a22:	83 ec 04             	sub    $0x4,%esp
f0124a25:	68 f4 ac 13 f0       	push   $0xf013acf4
f0124a2a:	68 ee 08 00 00       	push   $0x8ee
f0124a2f:	68 da ac 13 f0       	push   $0xf013acda
f0124a34:	e8 c2 b7 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124a39:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124a3c:	e8 1a 7f fe ff       	call   f010c95b <sys_calculate_free_frames>
f0124a41:	29 c3                	sub    %eax,%ebx
f0124a43:	89 d8                	mov    %ebx,%eax
f0124a45:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124a4a:	74 17                	je     f0124a63 <test_kheap_virt_addr+0x1bc>
f0124a4c:	83 ec 04             	sub    $0x4,%esp
f0124a4f:	68 5c ad 13 f0       	push   $0xf013ad5c
f0124a54:	68 ef 08 00 00       	push   $0x8ef
f0124a59:	68 da ac 13 f0       	push   $0xf013acda
f0124a5e:	e8 98 b7 fd ff       	call   f01001fb <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124a63:	e8 f3 7e fe ff       	call   f010c95b <sys_calculate_free_frames>
f0124a68:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124a6b:	e8 cc f2 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124a70:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0124a73:	83 ec 0c             	sub    $0xc,%esp
f0124a76:	68 00 fc 1f 00       	push   $0x1ffc00
f0124a7b:	e8 7e 2d fe ff       	call   f01077fe <kmalloc>
f0124a80:	83 c4 10             	add    $0x10,%esp
f0124a83:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124a89:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f0124a8f:	89 c1                	mov    %eax,%ecx
f0124a91:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0124a98:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0124a9b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124aa0:	89 45 98             	mov    %eax,-0x68(%ebp)
f0124aa3:	8b 45 98             	mov    -0x68(%ebp),%eax
f0124aa6:	ba 00 00 00 00       	mov    $0x0,%edx
f0124aab:	f7 75 9c             	divl   -0x64(%ebp)
f0124aae:	8b 45 98             	mov    -0x68(%ebp),%eax
f0124ab1:	29 d0                	sub    %edx,%eax
f0124ab3:	89 c3                	mov    %eax,%ebx
f0124ab5:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0124abc:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124ac1:	0f b6 d0             	movzbl %al,%edx
f0124ac4:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0124ac7:	01 d0                	add    %edx,%eax
f0124ac9:	48                   	dec    %eax
f0124aca:	89 45 90             	mov    %eax,-0x70(%ebp)
f0124acd:	8b 45 90             	mov    -0x70(%ebp),%eax
f0124ad0:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ad5:	f7 75 94             	divl   -0x6c(%ebp)
f0124ad8:	8b 45 90             	mov    -0x70(%ebp),%eax
f0124adb:	29 d0                	sub    %edx,%eax
f0124add:	01 c3                	add    %eax,%ebx
f0124adf:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0124ae6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124aeb:	0f b6 c0             	movzbl %al,%eax
f0124aee:	c1 e0 04             	shl    $0x4,%eax
f0124af1:	89 c2                	mov    %eax,%edx
f0124af3:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0124af6:	01 d0                	add    %edx,%eax
f0124af8:	48                   	dec    %eax
f0124af9:	89 45 88             	mov    %eax,-0x78(%ebp)
f0124afc:	8b 45 88             	mov    -0x78(%ebp),%eax
f0124aff:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b04:	f7 75 8c             	divl   -0x74(%ebp)
f0124b07:	8b 45 88             	mov    -0x78(%ebp),%eax
f0124b0a:	29 d0                	sub    %edx,%eax
f0124b0c:	01 d8                	add    %ebx,%eax
f0124b0e:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0124b13:	39 c1                	cmp    %eax,%ecx
f0124b15:	74 17                	je     f0124b2e <test_kheap_virt_addr+0x287>
f0124b17:	83 ec 04             	sub    $0x4,%esp
f0124b1a:	68 c0 ad 13 f0       	push   $0xf013adc0
f0124b1f:	68 f5 08 00 00       	push   $0x8f5
f0124b24:	68 da ac 13 f0       	push   $0xf013acda
f0124b29:	e8 cd b6 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124b2e:	e8 09 f2 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124b33:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124b36:	74 17                	je     f0124b4f <test_kheap_virt_addr+0x2a8>
f0124b38:	83 ec 04             	sub    $0x4,%esp
f0124b3b:	68 f4 ac 13 f0       	push   $0xf013acf4
f0124b40:	68 f6 08 00 00       	push   $0x8f6
f0124b45:	68 da ac 13 f0       	push   $0xf013acda
f0124b4a:	e8 ac b6 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124b4f:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124b52:	e8 04 7e fe ff       	call   f010c95b <sys_calculate_free_frames>
f0124b57:	29 c3                	sub    %eax,%ebx
f0124b59:	89 d8                	mov    %ebx,%eax
f0124b5b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124b60:	74 17                	je     f0124b79 <test_kheap_virt_addr+0x2d2>
f0124b62:	83 ec 04             	sub    $0x4,%esp
f0124b65:	68 5c ad 13 f0       	push   $0xf013ad5c
f0124b6a:	68 f7 08 00 00       	push   $0x8f7
f0124b6f:	68 da ac 13 f0       	push   $0xf013acda
f0124b74:	e8 82 b6 fd ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0124b79:	e8 dd 7d fe ff       	call   f010c95b <sys_calculate_free_frames>
f0124b7e:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124b81:	e8 b6 f1 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124b86:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0124b89:	83 ec 0c             	sub    $0xc,%esp
f0124b8c:	68 00 08 00 00       	push   $0x800
f0124b91:	e8 68 2c fe ff       	call   f01077fe <kmalloc>
f0124b96:	83 c4 10             	add    $0x10,%esp
f0124b99:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124b9f:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f0124ba5:	89 c1                	mov    %eax,%ecx
f0124ba7:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0124bae:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0124bb1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124bb6:	89 45 80             	mov    %eax,-0x80(%ebp)
f0124bb9:	8b 45 80             	mov    -0x80(%ebp),%eax
f0124bbc:	ba 00 00 00 00       	mov    $0x0,%edx
f0124bc1:	f7 75 84             	divl   -0x7c(%ebp)
f0124bc4:	8b 45 80             	mov    -0x80(%ebp),%eax
f0124bc7:	29 d0                	sub    %edx,%eax
f0124bc9:	89 c3                	mov    %eax,%ebx
f0124bcb:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0124bd2:	10 00 00 
f0124bd5:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124bda:	0f b6 d0             	movzbl %al,%edx
f0124bdd:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0124be3:	01 d0                	add    %edx,%eax
f0124be5:	48                   	dec    %eax
f0124be6:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0124bec:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0124bf2:	ba 00 00 00 00       	mov    $0x0,%edx
f0124bf7:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0124bfd:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0124c03:	29 d0                	sub    %edx,%eax
f0124c05:	01 c3                	add    %eax,%ebx
f0124c07:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0124c0e:	10 00 00 
f0124c11:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124c16:	0f b6 c0             	movzbl %al,%eax
f0124c19:	c1 e0 04             	shl    $0x4,%eax
f0124c1c:	89 c2                	mov    %eax,%edx
f0124c1e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0124c24:	01 d0                	add    %edx,%eax
f0124c26:	48                   	dec    %eax
f0124c27:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0124c2d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0124c33:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c38:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0124c3e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0124c44:	29 d0                	sub    %edx,%eax
f0124c46:	01 d8                	add    %ebx,%eax
f0124c48:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0124c4d:	39 c1                	cmp    %eax,%ecx
f0124c4f:	74 17                	je     f0124c68 <test_kheap_virt_addr+0x3c1>
f0124c51:	83 ec 04             	sub    $0x4,%esp
f0124c54:	68 c0 ad 13 f0       	push   $0xf013adc0
f0124c59:	68 fd 08 00 00       	push   $0x8fd
f0124c5e:	68 da ac 13 f0       	push   $0xf013acda
f0124c63:	e8 93 b5 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124c68:	e8 cf f0 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124c6d:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124c70:	74 17                	je     f0124c89 <test_kheap_virt_addr+0x3e2>
f0124c72:	83 ec 04             	sub    $0x4,%esp
f0124c75:	68 f4 ac 13 f0       	push   $0xf013acf4
f0124c7a:	68 fe 08 00 00       	push   $0x8fe
f0124c7f:	68 da ac 13 f0       	push   $0xf013acda
f0124c84:	e8 72 b5 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124c89:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124c8c:	e8 ca 7c fe ff       	call   f010c95b <sys_calculate_free_frames>
f0124c91:	29 c3                	sub    %eax,%ebx
f0124c93:	89 d8                	mov    %ebx,%eax
f0124c95:	83 f8 01             	cmp    $0x1,%eax
f0124c98:	74 17                	je     f0124cb1 <test_kheap_virt_addr+0x40a>
f0124c9a:	83 ec 04             	sub    $0x4,%esp
f0124c9d:	68 5c ad 13 f0       	push   $0xf013ad5c
f0124ca2:	68 ff 08 00 00       	push   $0x8ff
f0124ca7:	68 da ac 13 f0       	push   $0xf013acda
f0124cac:	e8 4a b5 fd ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0124cb1:	e8 a5 7c fe ff       	call   f010c95b <sys_calculate_free_frames>
f0124cb6:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124cb9:	e8 7e f0 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124cbe:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0124cc1:	83 ec 0c             	sub    $0xc,%esp
f0124cc4:	68 00 08 00 00       	push   $0x800
f0124cc9:	e8 30 2b fe ff       	call   f01077fe <kmalloc>
f0124cce:	83 c4 10             	add    $0x10,%esp
f0124cd1:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124cd7:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f0124cdd:	89 c1                	mov    %eax,%ecx
f0124cdf:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0124ce6:	10 00 00 
f0124ce9:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0124cef:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124cf4:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0124cfa:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0124d00:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d05:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0124d0b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0124d11:	29 d0                	sub    %edx,%eax
f0124d13:	89 c3                	mov    %eax,%ebx
f0124d15:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0124d1c:	10 00 00 
f0124d1f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124d24:	0f b6 d0             	movzbl %al,%edx
f0124d27:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0124d2d:	01 d0                	add    %edx,%eax
f0124d2f:	48                   	dec    %eax
f0124d30:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0124d36:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0124d3c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d41:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0124d47:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0124d4d:	29 d0                	sub    %edx,%eax
f0124d4f:	01 c3                	add    %eax,%ebx
f0124d51:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0124d58:	10 00 00 
f0124d5b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124d60:	0f b6 c0             	movzbl %al,%eax
f0124d63:	c1 e0 04             	shl    $0x4,%eax
f0124d66:	89 c2                	mov    %eax,%edx
f0124d68:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0124d6e:	01 d0                	add    %edx,%eax
f0124d70:	48                   	dec    %eax
f0124d71:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0124d77:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0124d7d:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d82:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0124d88:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0124d8e:	29 d0                	sub    %edx,%eax
f0124d90:	01 d8                	add    %ebx,%eax
f0124d92:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0124d97:	39 c1                	cmp    %eax,%ecx
f0124d99:	74 17                	je     f0124db2 <test_kheap_virt_addr+0x50b>
f0124d9b:	83 ec 04             	sub    $0x4,%esp
f0124d9e:	68 c0 ad 13 f0       	push   $0xf013adc0
f0124da3:	68 05 09 00 00       	push   $0x905
f0124da8:	68 da ac 13 f0       	push   $0xf013acda
f0124dad:	e8 49 b4 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124db2:	e8 85 ef fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124db7:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124dba:	74 17                	je     f0124dd3 <test_kheap_virt_addr+0x52c>
f0124dbc:	83 ec 04             	sub    $0x4,%esp
f0124dbf:	68 f4 ac 13 f0       	push   $0xf013acf4
f0124dc4:	68 06 09 00 00       	push   $0x906
f0124dc9:	68 da ac 13 f0       	push   $0xf013acda
f0124dce:	e8 28 b4 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124dd3:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124dd6:	e8 80 7b fe ff       	call   f010c95b <sys_calculate_free_frames>
f0124ddb:	29 c3                	sub    %eax,%ebx
f0124ddd:	89 d8                	mov    %ebx,%eax
f0124ddf:	83 f8 01             	cmp    $0x1,%eax
f0124de2:	74 17                	je     f0124dfb <test_kheap_virt_addr+0x554>
f0124de4:	83 ec 04             	sub    $0x4,%esp
f0124de7:	68 5c ad 13 f0       	push   $0xf013ad5c
f0124dec:	68 07 09 00 00       	push   $0x907
f0124df1:	68 da ac 13 f0       	push   $0xf013acda
f0124df6:	e8 00 b4 fd ff       	call   f01001fb <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0124dfb:	e8 5b 7b fe ff       	call   f010c95b <sys_calculate_free_frames>
f0124e00:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124e03:	e8 34 ef fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124e08:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0124e0b:	83 ec 0c             	sub    $0xc,%esp
f0124e0e:	68 00 1c 00 00       	push   $0x1c00
f0124e13:	e8 e6 29 fe ff       	call   f01077fe <kmalloc>
f0124e18:	83 c4 10             	add    $0x10,%esp
f0124e1b:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124e21:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f0124e27:	89 c1                	mov    %eax,%ecx
f0124e29:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0124e30:	10 00 00 
f0124e33:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0124e39:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124e3e:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0124e44:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0124e4a:	ba 00 00 00 00       	mov    $0x0,%edx
f0124e4f:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0124e55:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0124e5b:	29 d0                	sub    %edx,%eax
f0124e5d:	89 c3                	mov    %eax,%ebx
f0124e5f:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0124e66:	10 00 00 
f0124e69:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124e6e:	0f b6 d0             	movzbl %al,%edx
f0124e71:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0124e77:	01 d0                	add    %edx,%eax
f0124e79:	48                   	dec    %eax
f0124e7a:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0124e80:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0124e86:	ba 00 00 00 00       	mov    $0x0,%edx
f0124e8b:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0124e91:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0124e97:	29 d0                	sub    %edx,%eax
f0124e99:	01 c3                	add    %eax,%ebx
f0124e9b:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0124ea2:	10 00 00 
f0124ea5:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124eaa:	0f b6 c0             	movzbl %al,%eax
f0124ead:	c1 e0 04             	shl    $0x4,%eax
f0124eb0:	89 c2                	mov    %eax,%edx
f0124eb2:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0124eb8:	01 d0                	add    %edx,%eax
f0124eba:	48                   	dec    %eax
f0124ebb:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0124ec1:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0124ec7:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ecc:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0124ed2:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0124ed8:	29 d0                	sub    %edx,%eax
f0124eda:	01 d8                	add    %ebx,%eax
f0124edc:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0124ee1:	39 c1                	cmp    %eax,%ecx
f0124ee3:	74 17                	je     f0124efc <test_kheap_virt_addr+0x655>
f0124ee5:	83 ec 04             	sub    $0x4,%esp
f0124ee8:	68 c0 ad 13 f0       	push   $0xf013adc0
f0124eed:	68 0d 09 00 00       	push   $0x90d
f0124ef2:	68 da ac 13 f0       	push   $0xf013acda
f0124ef7:	e8 ff b2 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124efc:	e8 3b ee fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124f01:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124f04:	74 17                	je     f0124f1d <test_kheap_virt_addr+0x676>
f0124f06:	83 ec 04             	sub    $0x4,%esp
f0124f09:	68 f4 ac 13 f0       	push   $0xf013acf4
f0124f0e:	68 0e 09 00 00       	push   $0x90e
f0124f13:	68 da ac 13 f0       	push   $0xf013acda
f0124f18:	e8 de b2 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124f1d:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124f20:	e8 36 7a fe ff       	call   f010c95b <sys_calculate_free_frames>
f0124f25:	29 c3                	sub    %eax,%ebx
f0124f27:	89 d8                	mov    %ebx,%eax
f0124f29:	83 f8 02             	cmp    $0x2,%eax
f0124f2c:	74 17                	je     f0124f45 <test_kheap_virt_addr+0x69e>
f0124f2e:	83 ec 04             	sub    $0x4,%esp
f0124f31:	68 5c ad 13 f0       	push   $0xf013ad5c
f0124f36:	68 0f 09 00 00       	push   $0x90f
f0124f3b:	68 da ac 13 f0       	push   $0xf013acda
f0124f40:	e8 b6 b2 fd ff       	call   f01001fb <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0124f45:	e8 11 7a fe ff       	call   f010c95b <sys_calculate_free_frames>
f0124f4a:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124f4d:	e8 ea ed fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124f52:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0124f55:	83 ec 0c             	sub    $0xc,%esp
f0124f58:	68 00 fc 2f 00       	push   $0x2ffc00
f0124f5d:	e8 9c 28 fe ff       	call   f01077fe <kmalloc>
f0124f62:	83 c4 10             	add    $0x10,%esp
f0124f65:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124f6b:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0124f71:	89 c1                	mov    %eax,%ecx
f0124f73:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0124f7a:	10 00 00 
f0124f7d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0124f83:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124f88:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0124f8e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0124f94:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f99:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0124f9f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0124fa5:	29 d0                	sub    %edx,%eax
f0124fa7:	89 c3                	mov    %eax,%ebx
f0124fa9:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0124fb0:	10 00 00 
f0124fb3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124fb8:	0f b6 d0             	movzbl %al,%edx
f0124fbb:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0124fc1:	01 d0                	add    %edx,%eax
f0124fc3:	48                   	dec    %eax
f0124fc4:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0124fca:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0124fd0:	ba 00 00 00 00       	mov    $0x0,%edx
f0124fd5:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0124fdb:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0124fe1:	29 d0                	sub    %edx,%eax
f0124fe3:	01 c3                	add    %eax,%ebx
f0124fe5:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0124fec:	10 00 00 
f0124fef:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124ff4:	0f b6 c0             	movzbl %al,%eax
f0124ff7:	c1 e0 04             	shl    $0x4,%eax
f0124ffa:	89 c2                	mov    %eax,%edx
f0124ffc:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0125002:	01 d0                	add    %edx,%eax
f0125004:	48                   	dec    %eax
f0125005:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012500b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125011:	ba 00 00 00 00       	mov    $0x0,%edx
f0125016:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012501c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125022:	29 d0                	sub    %edx,%eax
f0125024:	01 d8                	add    %ebx,%eax
f0125026:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012502b:	39 c1                	cmp    %eax,%ecx
f012502d:	74 17                	je     f0125046 <test_kheap_virt_addr+0x79f>
f012502f:	83 ec 04             	sub    $0x4,%esp
f0125032:	68 c0 ad 13 f0       	push   $0xf013adc0
f0125037:	68 15 09 00 00       	push   $0x915
f012503c:	68 da ac 13 f0       	push   $0xf013acda
f0125041:	e8 b5 b1 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125046:	e8 f1 ec fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012504b:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012504e:	74 17                	je     f0125067 <test_kheap_virt_addr+0x7c0>
f0125050:	83 ec 04             	sub    $0x4,%esp
f0125053:	68 f4 ac 13 f0       	push   $0xf013acf4
f0125058:	68 16 09 00 00       	push   $0x916
f012505d:	68 da ac 13 f0       	push   $0xf013acda
f0125062:	e8 94 b1 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125067:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012506a:	e8 ec 78 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012506f:	29 c3                	sub    %eax,%ebx
f0125071:	89 d8                	mov    %ebx,%eax
f0125073:	3d 00 03 00 00       	cmp    $0x300,%eax
f0125078:	74 17                	je     f0125091 <test_kheap_virt_addr+0x7ea>
f012507a:	83 ec 04             	sub    $0x4,%esp
f012507d:	68 5c ad 13 f0       	push   $0xf013ad5c
f0125082:	68 17 09 00 00       	push   $0x917
f0125087:	68 da ac 13 f0       	push   $0xf013acda
f012508c:	e8 6a b1 fd ff       	call   f01001fb <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0125091:	e8 c5 78 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0125096:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125099:	e8 9e ec fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012509e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01250a1:	83 ec 0c             	sub    $0xc,%esp
f01250a4:	68 00 fc 5f 00       	push   $0x5ffc00
f01250a9:	e8 50 27 fe ff       	call   f01077fe <kmalloc>
f01250ae:	83 c4 10             	add    $0x10,%esp
f01250b1:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01250b7:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f01250bd:	89 c1                	mov    %eax,%ecx
f01250bf:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f01250c6:	10 00 00 
f01250c9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01250cf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01250d4:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f01250da:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01250e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01250e5:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f01250eb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01250f1:	29 d0                	sub    %edx,%eax
f01250f3:	89 c3                	mov    %eax,%ebx
f01250f5:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f01250fc:	10 00 00 
f01250ff:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0125104:	0f b6 d0             	movzbl %al,%edx
f0125107:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012510d:	01 d0                	add    %edx,%eax
f012510f:	48                   	dec    %eax
f0125110:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0125116:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012511c:	ba 00 00 00 00       	mov    $0x0,%edx
f0125121:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0125127:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012512d:	29 d0                	sub    %edx,%eax
f012512f:	01 c3                	add    %eax,%ebx
f0125131:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0125138:	10 00 00 
f012513b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0125140:	0f b6 c0             	movzbl %al,%eax
f0125143:	c1 e0 04             	shl    $0x4,%eax
f0125146:	89 c2                	mov    %eax,%edx
f0125148:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012514e:	01 d0                	add    %edx,%eax
f0125150:	48                   	dec    %eax
f0125151:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0125157:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012515d:	ba 00 00 00 00       	mov    $0x0,%edx
f0125162:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0125168:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012516e:	29 d0                	sub    %edx,%eax
f0125170:	01 d8                	add    %ebx,%eax
f0125172:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0125177:	39 c1                	cmp    %eax,%ecx
f0125179:	74 17                	je     f0125192 <test_kheap_virt_addr+0x8eb>
f012517b:	83 ec 04             	sub    $0x4,%esp
f012517e:	68 c0 ad 13 f0       	push   $0xf013adc0
f0125183:	68 1d 09 00 00       	push   $0x91d
f0125188:	68 da ac 13 f0       	push   $0xf013acda
f012518d:	e8 69 b0 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125192:	e8 a5 eb fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0125197:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012519a:	74 17                	je     f01251b3 <test_kheap_virt_addr+0x90c>
f012519c:	83 ec 04             	sub    $0x4,%esp
f012519f:	68 f4 ac 13 f0       	push   $0xf013acf4
f01251a4:	68 1e 09 00 00       	push   $0x91e
f01251a9:	68 da ac 13 f0       	push   $0xf013acda
f01251ae:	e8 48 b0 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01251b3:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01251b6:	e8 a0 77 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01251bb:	29 c3                	sub    %eax,%ebx
f01251bd:	89 d8                	mov    %ebx,%eax
f01251bf:	3d 00 06 00 00       	cmp    $0x600,%eax
f01251c4:	74 17                	je     f01251dd <test_kheap_virt_addr+0x936>
f01251c6:	83 ec 04             	sub    $0x4,%esp
f01251c9:	68 5c ad 13 f0       	push   $0xf013ad5c
f01251ce:	68 1f 09 00 00       	push   $0x91f
f01251d3:	68 da ac 13 f0       	push   $0xf013acda
f01251d8:	e8 1e b0 fd ff       	call   f01001fb <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01251dd:	e8 79 77 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01251e2:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01251e5:	e8 52 eb fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01251ea:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01251ed:	83 ec 0c             	sub    $0xc,%esp
f01251f0:	68 00 38 00 00       	push   $0x3800
f01251f5:	e8 04 26 fe ff       	call   f01077fe <kmalloc>
f01251fa:	83 c4 10             	add    $0x10,%esp
f01251fd:	89 85 44 fd ff ff    	mov    %eax,-0x2bc(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125203:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f0125209:	89 c1                	mov    %eax,%ecx
f012520b:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0125212:	10 00 00 
f0125215:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012521b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125220:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0125226:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012522c:	ba 00 00 00 00       	mov    $0x0,%edx
f0125231:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0125237:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012523d:	29 d0                	sub    %edx,%eax
f012523f:	89 c3                	mov    %eax,%ebx
f0125241:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f0125248:	10 00 00 
f012524b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0125250:	0f b6 d0             	movzbl %al,%edx
f0125253:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0125259:	01 d0                	add    %edx,%eax
f012525b:	48                   	dec    %eax
f012525c:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f0125262:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0125268:	ba 00 00 00 00       	mov    $0x0,%edx
f012526d:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f0125273:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0125279:	29 d0                	sub    %edx,%eax
f012527b:	01 c3                	add    %eax,%ebx
f012527d:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0125284:	10 00 00 
f0125287:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012528c:	0f b6 c0             	movzbl %al,%eax
f012528f:	c1 e0 04             	shl    $0x4,%eax
f0125292:	89 c2                	mov    %eax,%edx
f0125294:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012529a:	01 d0                	add    %edx,%eax
f012529c:	48                   	dec    %eax
f012529d:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f01252a3:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01252a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01252ae:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f01252b4:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01252ba:	29 d0                	sub    %edx,%eax
f01252bc:	01 d8                	add    %ebx,%eax
f01252be:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01252c3:	39 c1                	cmp    %eax,%ecx
f01252c5:	74 17                	je     f01252de <test_kheap_virt_addr+0xa37>
f01252c7:	83 ec 04             	sub    $0x4,%esp
f01252ca:	68 c0 ad 13 f0       	push   $0xf013adc0
f01252cf:	68 25 09 00 00       	push   $0x925
f01252d4:	68 da ac 13 f0       	push   $0xf013acda
f01252d9:	e8 1d af fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01252de:	e8 59 ea fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01252e3:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01252e6:	74 17                	je     f01252ff <test_kheap_virt_addr+0xa58>
f01252e8:	83 ec 04             	sub    $0x4,%esp
f01252eb:	68 f4 ac 13 f0       	push   $0xf013acf4
f01252f0:	68 26 09 00 00       	push   $0x926
f01252f5:	68 da ac 13 f0       	push   $0xf013acda
f01252fa:	e8 fc ae fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01252ff:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125302:	e8 54 76 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0125307:	29 c3                	sub    %eax,%ebx
f0125309:	89 d8                	mov    %ebx,%eax
f012530b:	83 f8 04             	cmp    $0x4,%eax
f012530e:	74 17                	je     f0125327 <test_kheap_virt_addr+0xa80>
f0125310:	83 ec 04             	sub    $0x4,%esp
f0125313:	68 5c ad 13 f0       	push   $0xf013ad5c
f0125318:	68 27 09 00 00       	push   $0x927
f012531d:	68 da ac 13 f0       	push   $0xf013acda
f0125322:	e8 d4 ae fd ff       	call   f01001fb <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ (INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE] ;
f0125327:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f012532e:	10 00 00 
f0125331:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0125337:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012533c:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0125342:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0125348:	ba 00 00 00 00       	mov    $0x0,%edx
f012534d:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0125353:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0125359:	29 d0                	sub    %edx,%eax
f012535b:	89 c1                	mov    %eax,%ecx
f012535d:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0125364:	10 00 00 
f0125367:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012536c:	0f b6 d0             	movzbl %al,%edx
f012536f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0125375:	01 d0                	add    %edx,%eax
f0125377:	48                   	dec    %eax
f0125378:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f012537e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0125384:	ba 00 00 00 00       	mov    $0x0,%edx
f0125389:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f012538f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0125395:	29 d0                	sub    %edx,%eax
f0125397:	01 c1                	add    %eax,%ecx
f0125399:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f01253a0:	10 00 00 
f01253a3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01253a8:	0f b6 c0             	movzbl %al,%eax
f01253ab:	c1 e0 04             	shl    $0x4,%eax
f01253ae:	89 c2                	mov    %eax,%edx
f01253b0:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01253b6:	01 d0                	add    %edx,%eax
f01253b8:	48                   	dec    %eax
f01253b9:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f01253bf:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01253c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01253ca:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f01253d0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01253d6:	29 d0                	sub    %edx,%eax
f01253d8:	01 c1                	add    %eax,%ecx
f01253da:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f01253e1:	10 00 00 
f01253e4:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01253ea:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01253ef:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f01253f5:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01253fb:	ba 00 00 00 00       	mov    $0x0,%edx
f0125400:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0125406:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012540c:	29 d0                	sub    %edx,%eax
f012540e:	29 c1                	sub    %eax,%ecx
f0125410:	89 c8                	mov    %ecx,%eax
f0125412:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0125417:	c1 e8 0c             	shr    $0xc,%eax
f012541a:	89 c2                	mov    %eax,%edx
f012541c:	4a                   	dec    %edx
f012541d:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
f0125423:	c1 e0 02             	shl    $0x2,%eax
f0125426:	8d 50 03             	lea    0x3(%eax),%edx
f0125429:	b8 10 00 00 00       	mov    $0x10,%eax
f012542e:	48                   	dec    %eax
f012542f:	01 d0                	add    %edx,%eax
f0125431:	bf 10 00 00 00       	mov    $0x10,%edi
f0125436:	ba 00 00 00 00       	mov    $0x0,%edx
f012543b:	f7 f7                	div    %edi
f012543d:	6b c0 10             	imul   $0x10,%eax,%eax
f0125440:	29 c4                	sub    %eax,%esp
f0125442:	89 e0                	mov    %esp,%eax
f0125444:	83 c0 03             	add    $0x3,%eax
f0125447:	c1 e8 02             	shr    $0x2,%eax
f012544a:	c1 e0 02             	shl    $0x2,%eax
f012544d:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+(INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE ;
f0125453:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012545a:	10 00 00 
f012545d:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0125463:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125468:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012546e:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125474:	ba 00 00 00 00       	mov    $0x0,%edx
f0125479:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012547f:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125485:	29 d0                	sub    %edx,%eax
f0125487:	89 c1                	mov    %eax,%ecx
f0125489:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0125490:	10 00 00 
f0125493:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0125498:	0f b6 d0             	movzbl %al,%edx
f012549b:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01254a1:	01 d0                	add    %edx,%eax
f01254a3:	48                   	dec    %eax
f01254a4:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f01254aa:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01254b0:	ba 00 00 00 00       	mov    $0x0,%edx
f01254b5:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f01254bb:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01254c1:	29 d0                	sub    %edx,%eax
f01254c3:	01 c1                	add    %eax,%ecx
f01254c5:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f01254cc:	10 00 00 
f01254cf:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01254d4:	0f b6 c0             	movzbl %al,%eax
f01254d7:	c1 e0 04             	shl    $0x4,%eax
f01254da:	89 c2                	mov    %eax,%edx
f01254dc:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01254e2:	01 d0                	add    %edx,%eax
f01254e4:	48                   	dec    %eax
f01254e5:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f01254eb:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01254f1:	ba 00 00 00 00       	mov    $0x0,%edx
f01254f6:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f01254fc:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0125502:	29 d0                	sub    %edx,%eax
f0125504:	01 c1                	add    %eax,%ecx
f0125506:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012550d:	10 00 00 
f0125510:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0125516:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012551b:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0125521:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0125527:	ba 00 00 00 00       	mov    $0x0,%edx
f012552c:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0125532:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0125538:	29 d0                	sub    %edx,%eax
f012553a:	29 c1                	sub    %eax,%ecx
f012553c:	89 c8                	mov    %ecx,%eax
f012553e:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0125543:	c1 e8 0c             	shr    $0xc,%eax
f0125546:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f012554c:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0125553:	10 00 00 
f0125556:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012555c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125561:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0125567:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012556d:	ba 00 00 00 00       	mov    $0x0,%edx
f0125572:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0125578:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012557e:	29 d0                	sub    %edx,%eax
f0125580:	89 c1                	mov    %eax,%ecx
f0125582:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0125589:	10 00 00 
f012558c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0125591:	0f b6 d0             	movzbl %al,%edx
f0125594:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012559a:	01 d0                	add    %edx,%eax
f012559c:	48                   	dec    %eax
f012559d:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f01255a3:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01255a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01255ae:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f01255b4:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01255ba:	29 d0                	sub    %edx,%eax
f01255bc:	01 c1                	add    %eax,%ecx
f01255be:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f01255c5:	10 00 00 
f01255c8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01255cd:	0f b6 c0             	movzbl %al,%eax
f01255d0:	c1 e0 04             	shl    $0x4,%eax
f01255d3:	89 c2                	mov    %eax,%edx
f01255d5:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01255db:	01 d0                	add    %edx,%eax
f01255dd:	48                   	dec    %eax
f01255de:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f01255e4:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01255ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01255ef:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f01255f5:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01255fb:	29 d0                	sub    %edx,%eax
f01255fd:	01 c8                	add    %ecx,%eax
f01255ff:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0125604:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int i = 0;
f012560a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0125611:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f0125618:	10 00 00 
f012561b:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0125621:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125626:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f012562c:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0125632:	ba 00 00 00 00       	mov    $0x0,%edx
f0125637:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f012563d:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0125643:	29 d0                	sub    %edx,%eax
f0125645:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012564a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012564d:	e9 21 01 00 00       	jmp    f0125773 <test_kheap_virt_addr+0xecc>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0125652:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0125657:	83 ec 04             	sub    $0x4,%esp
f012565a:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0125660:	52                   	push   %edx
f0125661:	ff 75 e4             	pushl  -0x1c(%ebp)
f0125664:	50                   	push   %eax
f0125665:	e8 70 13 fe ff       	call   f01069da <get_page_table>
f012566a:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f012566d:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0125673:	85 c0                	test   %eax,%eax
f0125675:	75 17                	jne    f012568e <test_kheap_virt_addr+0xde7>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0125677:	83 ec 04             	sub    $0x4,%esp
f012567a:	68 7c b6 13 f0       	push   $0xf013b67c
f012567f:	68 38 09 00 00       	push   $0x938
f0125684:	68 da ac 13 f0       	push   $0xf013acda
f0125689:	e8 6d ab fd ff       	call   f01001fb <_panic>

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f012568e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125691:	c1 e8 0c             	shr    $0xc,%eax
f0125694:	25 ff 03 00 00       	and    $0x3ff,%eax
f0125699:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012569c:	e9 ba 00 00 00       	jmp    f012575b <test_kheap_virt_addr+0xeb4>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f01256a1:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f01256a7:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01256aa:	c1 e2 02             	shl    $0x2,%edx
f01256ad:	01 d0                	add    %edx,%eax
f01256af:	8b 00                	mov    (%eax),%eax
f01256b1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01256b6:	89 c1                	mov    %eax,%ecx
f01256b8:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01256be:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01256c1:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01256c4:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01256ca:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01256cd:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01256d0:	83 ec 0c             	sub    $0xc,%esp
f01256d3:	50                   	push   %eax
f01256d4:	e8 0e 23 fe ff       	call   f01079e7 <kheap_virtual_address>
f01256d9:	83 c4 10             	add    $0x10,%esp
f01256dc:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
				//cprintf("va to check = %x\n", va);
				if (retrievedVA != (va))
f01256e2:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01256e8:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01256eb:	74 61                	je     f012574e <test_kheap_virt_addr+0xea7>
				{
					cprintf("\nretrievedVA = %x, Actual VA = %x, table entry = %x, khep_pa = %x\n",retrievedVA, va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
f01256ed:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01256f3:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01256f6:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01256f9:	8b 95 24 fd ff ff    	mov    -0x2dc(%ebp),%edx
f01256ff:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f0125702:	c1 e1 02             	shl    $0x2,%ecx
f0125705:	01 ca                	add    %ecx,%edx
f0125707:	8b 12                	mov    (%edx),%edx
f0125709:	89 d1                	mov    %edx,%ecx
f012570b:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f0125711:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0125714:	c1 e2 0c             	shl    $0xc,%edx
f0125717:	89 d3                	mov    %edx,%ebx
f0125719:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012571c:	01 da                	add    %ebx,%edx
f012571e:	83 ec 0c             	sub    $0xc,%esp
f0125721:	50                   	push   %eax
f0125722:	51                   	push   %ecx
f0125723:	52                   	push   %edx
f0125724:	ff b5 84 fe ff ff    	pushl  -0x17c(%ebp)
f012572a:	68 70 b7 13 f0       	push   $0xf013b770
f012572f:	e8 4e b5 fd ff       	call   f0100c82 <cprintf>
f0125734:	83 c4 20             	add    $0x20,%esp
					panic("Wrong kheap_virtual_address");
f0125737:	83 ec 04             	sub    $0x4,%esp
f012573a:	68 b3 b7 13 f0       	push   $0xf013b7b3
f012573f:	68 42 09 00 00       	push   $0x942
f0125744:	68 da ac 13 f0       	push   $0xf013acda
f0125749:	e8 ad aa fd ff       	call   f01001fb <_panic>
				}
				va+=PAGE_SIZE;
f012574e:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f0125755:	ff 45 dc             	incl   -0x24(%ebp)
f0125758:	ff 45 e0             	incl   -0x20(%ebp)
f012575b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012575e:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f0125764:	7d 0d                	jge    f0125773 <test_kheap_virt_addr+0xecc>
f0125766:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f012576d:	0f 8e 2e ff ff ff    	jle    f01256a1 <test_kheap_virt_addr+0xdfa>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0125773:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125776:	3b 85 90 fe ff ff    	cmp    -0x170(%ebp),%eax
f012577c:	0f 82 d0 fe ff ff    	jb     f0125652 <test_kheap_virt_addr+0xdab>
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f0125782:	83 ec 0c             	sub    $0xc,%esp
f0125785:	68 d0 b7 13 f0       	push   $0xf013b7d0
f012578a:	e8 f3 b4 fd ff       	call   f0100c82 <cprintf>
f012578f:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0125792:	e8 c4 71 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0125797:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012579d:	e8 9a e5 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01257a2:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[0]);
f01257a8:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f01257ae:	83 ec 0c             	sub    $0xc,%esp
f01257b1:	50                   	push   %eax
f01257b2:	e8 09 21 fe ff       	call   f01078c0 <kfree>
f01257b7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01257ba:	e8 7d e5 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01257bf:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f01257c5:	74 17                	je     f01257de <test_kheap_virt_addr+0xf37>
f01257c7:	83 ec 04             	sub    $0x4,%esp
f01257ca:	68 f4 ac 13 f0       	push   $0xf013acf4
f01257cf:	68 50 09 00 00       	push   $0x950
f01257d4:	68 da ac 13 f0       	push   $0xf013acda
f01257d9:	e8 1d aa fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01257de:	e8 78 71 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01257e3:	89 c2                	mov    %eax,%edx
f01257e5:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01257eb:	29 c2                	sub    %eax,%edx
f01257ed:	89 d0                	mov    %edx,%eax
f01257ef:	3d 00 02 00 00       	cmp    $0x200,%eax
f01257f4:	74 17                	je     f012580d <test_kheap_virt_addr+0xf66>
f01257f6:	83 ec 04             	sub    $0x4,%esp
f01257f9:	68 64 b4 13 f0       	push   $0xf013b464
f01257fe:	68 51 09 00 00       	push   $0x951
f0125803:	68 da ac 13 f0       	push   $0xf013acda
f0125808:	e8 ee a9 fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012580d:	e8 49 71 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0125812:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125818:	e8 1f e5 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012581d:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[1]);
f0125823:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f0125829:	83 ec 0c             	sub    $0xc,%esp
f012582c:	50                   	push   %eax
f012582d:	e8 8e 20 fe ff       	call   f01078c0 <kfree>
f0125832:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125835:	e8 02 e5 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012583a:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0125840:	74 17                	je     f0125859 <test_kheap_virt_addr+0xfb2>
f0125842:	83 ec 04             	sub    $0x4,%esp
f0125845:	68 f4 ac 13 f0       	push   $0xf013acf4
f012584a:	68 57 09 00 00       	push   $0x957
f012584f:	68 da ac 13 f0       	push   $0xf013acda
f0125854:	e8 a2 a9 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0125859:	e8 fd 70 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012585e:	89 c2                	mov    %eax,%edx
f0125860:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0125866:	29 c2                	sub    %eax,%edx
f0125868:	89 d0                	mov    %edx,%eax
f012586a:	3d 00 02 00 00       	cmp    $0x200,%eax
f012586f:	74 17                	je     f0125888 <test_kheap_virt_addr+0xfe1>
f0125871:	83 ec 04             	sub    $0x4,%esp
f0125874:	68 64 b4 13 f0       	push   $0xf013b464
f0125879:	68 58 09 00 00       	push   $0x958
f012587e:	68 da ac 13 f0       	push   $0xf013acda
f0125883:	e8 73 a9 fd ff       	call   f01001fb <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0125888:	e8 ce 70 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012588d:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125893:	e8 a4 e4 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0125898:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[6]);
f012589e:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f01258a4:	83 ec 0c             	sub    $0xc,%esp
f01258a7:	50                   	push   %eax
f01258a8:	e8 13 20 fe ff       	call   f01078c0 <kfree>
f01258ad:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01258b0:	e8 87 e4 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01258b5:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f01258bb:	74 17                	je     f01258d4 <test_kheap_virt_addr+0x102d>
f01258bd:	83 ec 04             	sub    $0x4,%esp
f01258c0:	68 f4 ac 13 f0       	push   $0xf013acf4
f01258c5:	68 5e 09 00 00       	push   $0x95e
f01258ca:	68 da ac 13 f0       	push   $0xf013acda
f01258cf:	e8 27 a9 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01258d4:	e8 82 70 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01258d9:	89 c2                	mov    %eax,%edx
f01258db:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01258e1:	29 c2                	sub    %eax,%edx
f01258e3:	89 d0                	mov    %edx,%eax
f01258e5:	3d 00 06 00 00       	cmp    $0x600,%eax
f01258ea:	74 17                	je     f0125903 <test_kheap_virt_addr+0x105c>
f01258ec:	83 ec 04             	sub    $0x4,%esp
f01258ef:	68 64 b4 13 f0       	push   $0xf013b464
f01258f4:	68 5f 09 00 00       	push   $0x95f
f01258f9:	68 da ac 13 f0       	push   $0xf013acda
f01258fe:	e8 f8 a8 fd ff       	call   f01001fb <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0125903:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f012590a:	10 00 00 
f012590d:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0125913:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125918:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f012591e:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0125924:	ba 00 00 00 00       	mov    $0x0,%edx
f0125929:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f012592f:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0125935:	29 d0                	sub    %edx,%eax
f0125937:	89 c1                	mov    %eax,%ecx
f0125939:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f0125940:	10 00 00 
f0125943:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0125948:	0f b6 d0             	movzbl %al,%edx
f012594b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0125951:	01 d0                	add    %edx,%eax
f0125953:	48                   	dec    %eax
f0125954:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f012595a:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0125960:	ba 00 00 00 00       	mov    $0x0,%edx
f0125965:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f012596b:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0125971:	29 d0                	sub    %edx,%eax
f0125973:	01 c1                	add    %eax,%ecx
f0125975:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f012597c:	10 00 00 
f012597f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0125984:	0f b6 c0             	movzbl %al,%eax
f0125987:	c1 e0 04             	shl    $0x4,%eax
f012598a:	89 c2                	mov    %eax,%edx
f012598c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0125992:	01 d0                	add    %edx,%eax
f0125994:	48                   	dec    %eax
f0125995:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f012599b:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01259a1:	ba 00 00 00 00       	mov    $0x0,%edx
f01259a6:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f01259ac:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01259b2:	29 d0                	sub    %edx,%eax
f01259b4:	01 c8                	add    %ecx,%eax
f01259b6:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01259bb:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		int i = 0;
f01259c1:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
f01259c8:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f01259cf:	10 00 00 
f01259d2:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01259d8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01259dd:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f01259e3:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01259e9:	ba 00 00 00 00       	mov    $0x0,%edx
f01259ee:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f01259f4:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01259fa:	29 d0                	sub    %edx,%eax
f01259fc:	89 c1                	mov    %eax,%ecx
f01259fe:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f0125a05:	10 00 00 
f0125a08:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0125a0d:	0f b6 d0             	movzbl %al,%edx
f0125a10:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0125a16:	01 d0                	add    %edx,%eax
f0125a18:	48                   	dec    %eax
f0125a19:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f0125a1f:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0125a25:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a2a:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f0125a30:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0125a36:	29 d0                	sub    %edx,%eax
f0125a38:	01 c1                	add    %eax,%ecx
f0125a3a:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0125a41:	10 00 00 
f0125a44:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0125a49:	0f b6 c0             	movzbl %al,%eax
f0125a4c:	c1 e0 04             	shl    $0x4,%eax
f0125a4f:	89 c2                	mov    %eax,%edx
f0125a51:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0125a57:	01 d0                	add    %edx,%eax
f0125a59:	48                   	dec    %eax
f0125a5a:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0125a60:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0125a66:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a6b:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0125a71:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0125a77:	29 d0                	sub    %edx,%eax
f0125a79:	01 c1                	add    %eax,%ecx
f0125a7b:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f0125a82:	10 00 00 
f0125a85:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0125a8b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125a90:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f0125a96:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0125a9c:	ba 00 00 00 00       	mov    $0x0,%edx
f0125aa1:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f0125aa7:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0125aad:	29 d0                	sub    %edx,%eax
f0125aaf:	29 c1                	sub    %eax,%ecx
f0125ab1:	89 c8                	mov    %ecx,%eax
f0125ab3:	05 00 40 00 00       	add    $0x4000,%eax
f0125ab8:	c1 e8 0c             	shr    $0xc,%eax
f0125abb:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0125ac1:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125ac7:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125aca:	eb 41                	jmp    f0125b0d <test_kheap_virt_addr+0x1266>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125acc:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125ad2:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0125ad5:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125ad8:	83 ec 0c             	sub    $0xc,%esp
f0125adb:	50                   	push   %eax
f0125adc:	e8 06 1f fe ff       	call   f01079e7 <kheap_virtual_address>
f0125ae1:	83 c4 10             	add    $0x10,%esp
f0125ae4:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if (retrievedVA != 0)
f0125aea:	83 bd 38 fe ff ff 00 	cmpl   $0x0,-0x1c8(%ebp)
f0125af1:	74 17                	je     f0125b0a <test_kheap_virt_addr+0x1263>
			{
				panic("Wrong kheap_virtual_address");
f0125af3:	83 ec 04             	sub    $0x4,%esp
f0125af6:	68 b3 b7 13 f0       	push   $0xf013b7b3
f0125afb:	68 70 09 00 00       	push   $0x970
f0125b00:	68 da ac 13 f0       	push   $0xf013acda
f0125b05:	e8 f1 a6 fd ff       	call   f01001fb <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0125b0a:	ff 45 d8             	incl   -0x28(%ebp)
f0125b0d:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125b13:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f0125b19:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125b1c:	39 c2                	cmp    %eax,%edx
f0125b1e:	77 ac                	ja     f0125acc <test_kheap_virt_addr+0x1225>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0125b20:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125b26:	05 00 04 00 00       	add    $0x400,%eax
f0125b2b:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125b2e:	e9 83 00 00 00       	jmp    f0125bb6 <test_kheap_virt_addr+0x130f>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125b33:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125b39:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0125b3c:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125b3f:	83 ec 0c             	sub    $0xc,%esp
f0125b42:	50                   	push   %eax
f0125b43:	e8 9f 1e fe ff       	call   f01079e7 <kheap_virtual_address>
f0125b48:	83 c4 10             	add    $0x10,%esp
f0125b4b:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0125b51:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f0125b58:	10 00 00 
f0125b5b:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0125b61:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125b66:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f0125b6c:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125b72:	ba 00 00 00 00       	mov    $0x0,%edx
f0125b77:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f0125b7d:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125b83:	29 d0                	sub    %edx,%eax
f0125b85:	89 c2                	mov    %eax,%edx
f0125b87:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125b8a:	c1 e0 0c             	shl    $0xc,%eax
f0125b8d:	01 d0                	add    %edx,%eax
f0125b8f:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0125b94:	3b 85 34 fe ff ff    	cmp    -0x1cc(%ebp),%eax
f0125b9a:	74 17                	je     f0125bb3 <test_kheap_virt_addr+0x130c>
			{
				panic("Wrong kheap_virtual_address");
f0125b9c:	83 ec 04             	sub    $0x4,%esp
f0125b9f:	68 b3 b7 13 f0       	push   $0xf013b7b3
f0125ba4:	68 7a 09 00 00       	push   $0x97a
f0125ba9:	68 da ac 13 f0       	push   $0xf013acda
f0125bae:	e8 48 a6 fd ff       	call   f01001fb <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0125bb3:	ff 45 d8             	incl   -0x28(%ebp)
f0125bb6:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125bbc:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f0125bc2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125bc5:	39 c2                	cmp    %eax,%edx
f0125bc7:	0f 87 66 ff ff ff    	ja     f0125b33 <test_kheap_virt_addr+0x128c>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0125bcd:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125bd3:	05 04 07 00 00       	add    $0x704,%eax
f0125bd8:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125bdb:	eb 41                	jmp    f0125c1e <test_kheap_virt_addr+0x1377>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125bdd:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125be3:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0125be6:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125be9:	83 ec 0c             	sub    $0xc,%esp
f0125bec:	50                   	push   %eax
f0125bed:	e8 f5 1d fe ff       	call   f01079e7 <kheap_virtual_address>
f0125bf2:	83 c4 10             	add    $0x10,%esp
f0125bf5:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
			if (retrievedVA != 0)
f0125bfb:	83 bd 28 fe ff ff 00 	cmpl   $0x0,-0x1d8(%ebp)
f0125c02:	74 17                	je     f0125c1b <test_kheap_virt_addr+0x1374>
			{
				panic("Wrong kheap_virtual_address");
f0125c04:	83 ec 04             	sub    $0x4,%esp
f0125c07:	68 b3 b7 13 f0       	push   $0xf013b7b3
f0125c0c:	68 83 09 00 00       	push   $0x983
f0125c11:	68 da ac 13 f0       	push   $0xf013acda
f0125c16:	e8 e0 a5 fd ff       	call   f01001fb <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0125c1b:	ff 45 d8             	incl   -0x28(%ebp)
f0125c1e:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125c24:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f0125c2a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125c2d:	39 c2                	cmp    %eax,%edx
f0125c2f:	77 ac                	ja     f0125bdd <test_kheap_virt_addr+0x1336>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0125c31:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125c37:	05 04 0d 00 00       	add    $0xd04,%eax
f0125c3c:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125c3f:	e9 83 00 00 00       	jmp    f0125cc7 <test_kheap_virt_addr+0x1420>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125c44:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125c4a:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0125c4d:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125c50:	83 ec 0c             	sub    $0xc,%esp
f0125c53:	50                   	push   %eax
f0125c54:	e8 8e 1d fe ff       	call   f01079e7 <kheap_virtual_address>
f0125c59:	83 c4 10             	add    $0x10,%esp
f0125c5c:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0125c62:	c7 85 20 fe ff ff 00 	movl   $0x1000,-0x1e0(%ebp)
f0125c69:	10 00 00 
f0125c6c:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0125c72:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125c77:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
f0125c7d:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0125c83:	ba 00 00 00 00       	mov    $0x0,%edx
f0125c88:	f7 b5 20 fe ff ff    	divl   -0x1e0(%ebp)
f0125c8e:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0125c94:	29 d0                	sub    %edx,%eax
f0125c96:	89 c2                	mov    %eax,%edx
f0125c98:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125c9b:	c1 e0 0c             	shl    $0xc,%eax
f0125c9e:	01 d0                	add    %edx,%eax
f0125ca0:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0125ca5:	3b 85 24 fe ff ff    	cmp    -0x1dc(%ebp),%eax
f0125cab:	74 17                	je     f0125cc4 <test_kheap_virt_addr+0x141d>
			{
				panic("Wrong kheap_virtual_address");
f0125cad:	83 ec 04             	sub    $0x4,%esp
f0125cb0:	68 b3 b7 13 f0       	push   $0xf013b7b3
f0125cb5:	68 8c 09 00 00       	push   $0x98c
f0125cba:	68 da ac 13 f0       	push   $0xf013acda
f0125cbf:	e8 37 a5 fd ff       	call   f01001fb <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0125cc4:	ff 45 d8             	incl   -0x28(%ebp)
f0125cc7:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125ccd:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f0125cd3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125cd6:	39 c2                	cmp    %eax,%edx
f0125cd8:	0f 87 66 ff ff ff    	ja     f0125c44 <test_kheap_virt_addr+0x139d>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f0125cde:	83 ec 0c             	sub    $0xc,%esp
f0125ce1:	68 65 ae 13 f0       	push   $0xf013ae65
f0125ce6:	e8 97 af fd ff       	call   f0100c82 <cprintf>
f0125ceb:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0125cee:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f0125cf5:	eb 54                	jmp    f0125d4b <test_kheap_virt_addr+0x14a4>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f0125cf7:	83 ec 0c             	sub    $0xc,%esp
f0125cfa:	ff 75 d4             	pushl  -0x2c(%ebp)
f0125cfd:	e8 e5 1c fe ff       	call   f01079e7 <kheap_virtual_address>
f0125d02:	83 c4 10             	add    $0x10,%esp
f0125d05:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
			if (retrievedVA != 0)
f0125d0b:	83 bd 18 fe ff ff 00 	cmpl   $0x0,-0x1e8(%ebp)
f0125d12:	74 30                	je     f0125d44 <test_kheap_virt_addr+0x149d>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f0125d14:	83 ec 04             	sub    $0x4,%esp
f0125d17:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f0125d1d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0125d20:	68 01 b8 13 f0       	push   $0xf013b801
f0125d25:	e8 58 af fd ff       	call   f0100c82 <cprintf>
f0125d2a:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f0125d2d:	83 ec 04             	sub    $0x4,%esp
f0125d30:	68 b3 b7 13 f0       	push   $0xf013b7b3
f0125d35:	68 9c 09 00 00       	push   $0x99c
f0125d3a:	68 da ac 13 f0       	push   $0xf013acda
f0125d3f:	e8 b7 a4 fd ff       	call   f01001fb <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0125d44:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0125d4b:	b8 bc 7c 65 00       	mov    $0x657cbc,%eax
f0125d50:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f0125d53:	72 a2                	jb     f0125cf7 <test_kheap_virt_addr+0x1450>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0125d55:	83 ec 0c             	sub    $0xc,%esp
f0125d58:	68 be ae 13 f0       	push   $0xf013aebe
f0125d5d:	e8 20 af fd ff       	call   f0100c82 <cprintf>
f0125d62:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f0125d65:	83 ec 0c             	sub    $0xc,%esp
f0125d68:	68 20 b8 13 f0       	push   $0xf013b820
f0125d6d:	e8 10 af fd ff       	call   f0100c82 <cprintf>
f0125d72:	83 c4 10             	add    $0x10,%esp

	return 1;
f0125d75:	b8 01 00 00 00       	mov    $0x1,%eax
f0125d7a:	89 f4                	mov    %esi,%esp

}
f0125d7c:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0125d7f:	5b                   	pop    %ebx
f0125d80:	5e                   	pop    %esi
f0125d81:	5f                   	pop    %edi
f0125d82:	5d                   	pop    %ebp
f0125d83:	c3                   	ret    

f0125d84 <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f0125d84:	55                   	push   %ebp
f0125d85:	89 e5                	mov    %esp,%ebp
f0125d87:	57                   	push   %edi
f0125d88:	56                   	push   %esi
f0125d89:	53                   	push   %ebx
f0125d8a:	81 ec ac 00 00 00    	sub    $0xac,%esp
	if (firstCall)
f0125d90:	a0 cf 1c 19 f0       	mov    0xf0191ccf,%al
f0125d95:	84 c0                	test   %al,%al
f0125d97:	74 56                	je     f0125def <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f0125d99:	c6 05 cf 1c 19 f0 00 	movb   $0x0,0xf0191ccf
		initFreeFrames = sys_calculate_free_frames() ;
f0125da0:	e8 b6 6b fe ff       	call   f010c95b <sys_calculate_free_frames>
f0125da5:	a3 b8 7c 65 f0       	mov    %eax,0xf0657cb8
		initFreeDiskFrames = pf_calculate_free_frames() ;
f0125daa:	e8 8d df fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0125daf:	a3 b4 7c 65 f0       	mov    %eax,0xf0657cb4
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f0125db4:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0125dba:	bb 7d b9 13 f0       	mov    $0xf013b97d,%ebx
f0125dbf:	ba 11 00 00 00       	mov    $0x11,%edx
f0125dc4:	89 c7                	mov    %eax,%edi
f0125dc6:	89 de                	mov    %ebx,%esi
f0125dc8:	89 d1                	mov    %edx,%ecx
f0125dca:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0125dcc:	8d 95 65 ff ff ff    	lea    -0x9b(%ebp),%edx
f0125dd2:	b9 53 00 00 00       	mov    $0x53,%ecx
f0125dd7:	b0 00                	mov    $0x0,%al
f0125dd9:	89 d7                	mov    %edx,%edi
f0125ddb:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f0125ddd:	83 ec 0c             	sub    $0xc,%esp
f0125de0:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0125de6:	50                   	push   %eax
f0125de7:	e8 f8 ae fd ff       	call   f0100ce4 <execute_command>
f0125dec:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f0125def:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f0125df6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0125dfd:	a1 f4 7a 65 f0       	mov    0xf0657af4,%eax
f0125e02:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0125e05:	eb 2d                	jmp    f0125e34 <test_three_creation_functions+0xb0>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f0125e07:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0125e0a:	05 5c 05 00 00       	add    $0x55c,%eax
f0125e0f:	83 ec 08             	sub    $0x8,%esp
f0125e12:	68 67 b8 13 f0       	push   $0xf013b867
f0125e17:	50                   	push   %eax
f0125e18:	e8 79 af 00 00       	call   f0130d96 <strcmp>
f0125e1d:	83 c4 10             	add    $0x10,%esp
f0125e20:	85 c0                	test   %eax,%eax
f0125e22:	75 08                	jne    f0125e2c <test_three_creation_functions+0xa8>
			{
				e = ptr_env ;
f0125e24:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0125e27:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f0125e2a:	eb 2f                	jmp    f0125e5b <test_three_creation_functions+0xd7>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0125e2c:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f0125e31:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0125e34:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0125e38:	74 08                	je     f0125e42 <test_three_creation_functions+0xbe>
f0125e3a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0125e3d:	8b 40 44             	mov    0x44(%eax),%eax
f0125e40:	eb 05                	jmp    f0125e47 <test_three_creation_functions+0xc3>
f0125e42:	b8 00 00 00 00       	mov    $0x0,%eax
f0125e47:	a3 fc 7a 65 f0       	mov    %eax,0xf0657afc
f0125e4c:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f0125e51:	85 c0                	test   %eax,%eax
f0125e53:	75 b2                	jne    f0125e07 <test_three_creation_functions+0x83>
f0125e55:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0125e59:	75 ac                	jne    f0125e07 <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f0125e5b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125e5e:	8b 80 34 05 00 00    	mov    0x534(%eax),%eax
f0125e64:	85 c0                	test   %eax,%eax
f0125e66:	74 17                	je     f0125e7f <test_three_creation_functions+0xfb>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f0125e68:	83 ec 04             	sub    $0x4,%esp
f0125e6b:	68 70 b8 13 f0       	push   $0xf013b870
f0125e70:	68 c6 09 00 00       	push   $0x9c6
f0125e75:	68 da ac 13 f0       	push   $0xf013acda
f0125e7a:	e8 7c a3 fd ff       	call   f01001fb <_panic>

		int pagesInWS = env_page_ws_get_size(e);
f0125e7f:	83 ec 0c             	sub    $0xc,%esp
f0125e82:	ff 75 e4             	pushl  -0x1c(%ebp)
f0125e85:	e8 fc 1e fe ff       	call   f0107d86 <env_page_ws_get_size>
f0125e8a:	83 c4 10             	add    $0x10,%esp
f0125e8d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int curFreeFrames = sys_calculate_free_frames() ;
f0125e90:	e8 c6 6a fe ff       	call   f010c95b <sys_calculate_free_frames>
f0125e95:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f0125e98:	e8 9f de fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0125e9d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125ea0:	a1 b4 7c 65 f0       	mov    0xf0657cb4,%eax
f0125ea5:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f0125ea8:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0125eab:	74 17                	je     f0125ec4 <test_three_creation_functions+0x140>
f0125ead:	83 ec 04             	sub    $0x4,%esp
f0125eb0:	68 f4 ac 13 f0       	push   $0xf013acf4
f0125eb5:	68 cc 09 00 00       	push   $0x9cc
f0125eba:	68 da ac 13 f0       	push   $0xf013acda
f0125ebf:	e8 37 a3 fd ff       	call   f01001fb <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125ec4:	a1 b8 7c 65 f0       	mov    0xf0657cb8,%eax
f0125ec9:	2b 45 d8             	sub    -0x28(%ebp),%eax
f0125ecc:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0125ecf:	83 c2 15             	add    $0x15,%edx
f0125ed2:	39 d0                	cmp    %edx,%eax
f0125ed4:	74 17                	je     f0125eed <test_three_creation_functions+0x169>
f0125ed6:	83 ec 04             	sub    $0x4,%esp
f0125ed9:	68 5c ad 13 f0       	push   $0xf013ad5c
f0125ede:	68 ce 09 00 00       	push   $0x9ce
f0125ee3:	68 da ac 13 f0       	push   $0xf013acda
f0125ee8:	e8 0e a3 fd ff       	call   f01001fb <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f0125eed:	83 ec 0c             	sub    $0xc,%esp
f0125ef0:	68 00 10 00 00       	push   $0x1000
f0125ef5:	e8 04 19 fe ff       	call   f01077fe <kmalloc>
f0125efa:	83 c4 10             	add    $0x10,%esp
f0125efd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f0125f00:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0125f07:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0125f0a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125f0f:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0125f12:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0125f15:	ba 00 00 00 00       	mov    $0x0,%edx
f0125f1a:	f7 75 cc             	divl   -0x34(%ebp)
f0125f1d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0125f20:	29 d0                	sub    %edx,%eax
f0125f22:	89 c1                	mov    %eax,%ecx
f0125f24:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0125f2b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0125f30:	0f b6 d0             	movzbl %al,%edx
f0125f33:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0125f36:	01 d0                	add    %edx,%eax
f0125f38:	48                   	dec    %eax
f0125f39:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0125f3c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0125f3f:	ba 00 00 00 00       	mov    $0x0,%edx
f0125f44:	f7 75 c4             	divl   -0x3c(%ebp)
f0125f47:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0125f4a:	29 d0                	sub    %edx,%eax
f0125f4c:	01 c1                	add    %eax,%ecx
f0125f4e:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0125f55:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0125f5a:	0f b6 c0             	movzbl %al,%eax
f0125f5d:	c1 e0 04             	shl    $0x4,%eax
f0125f60:	89 c2                	mov    %eax,%edx
f0125f62:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0125f65:	01 d0                	add    %edx,%eax
f0125f67:	48                   	dec    %eax
f0125f68:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0125f6b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0125f6e:	ba 00 00 00 00       	mov    $0x0,%edx
f0125f73:	f7 75 bc             	divl   -0x44(%ebp)
f0125f76:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0125f79:	29 d0                	sub    %edx,%eax
f0125f7b:	01 c8                	add    %ecx,%eax
f0125f7d:	8d 90 00 90 01 f6    	lea    -0x9fe7000(%eax),%edx
f0125f83:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0125f86:	39 c2                	cmp    %eax,%edx
f0125f88:	74 17                	je     f0125fa1 <test_three_creation_functions+0x21d>
f0125f8a:	83 ec 04             	sub    $0x4,%esp
f0125f8d:	68 c0 b8 13 f0       	push   $0xf013b8c0
f0125f92:	68 d2 09 00 00       	push   $0x9d2
f0125f97:	68 da ac 13 f0       	push   $0xf013acda
f0125f9c:	e8 5a a2 fd ff       	call   f01001fb <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f0125fa1:	83 ec 0c             	sub    $0xc,%esp
f0125fa4:	68 30 b9 13 f0       	push   $0xf013b930
f0125fa9:	e8 d4 ac fd ff       	call   f0100c82 <cprintf>
f0125fae:	83 c4 10             	add    $0x10,%esp

	return 1;
f0125fb1:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0125fb6:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0125fb9:	5b                   	pop    %ebx
f0125fba:	5e                   	pop    %esi
f0125fbb:	5f                   	pop    %edi
f0125fbc:	5d                   	pop    %ebp
f0125fbd:	c3                   	ret    

f0125fbe <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f0125fbe:	55                   	push   %ebp
f0125fbf:	89 e5                	mov    %esp,%ebp
f0125fc1:	57                   	push   %edi
f0125fc2:	53                   	push   %ebx
f0125fc3:	81 ec 40 02 00 00    	sub    $0x240,%esp
	char minByte = 1<<7;
f0125fc9:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0125fcd:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0125fd1:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0125fd7:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0125fdd:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0125fe4:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0125feb:	e8 6b 69 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0125ff0:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0125ff3:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0125ff9:	b9 14 00 00 00       	mov    $0x14,%ecx
f0125ffe:	b8 00 00 00 00       	mov    $0x0,%eax
f0126003:	89 d7                	mov    %edx,%edi
f0126005:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0126007:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f012600d:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126012:	b8 00 00 00 00       	mov    $0x0,%eax
f0126017:	89 d7                	mov    %edx,%edi
f0126019:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f012601b:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0126021:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126026:	b8 00 00 00 00       	mov    $0x0,%eax
f012602b:	89 d7                	mov    %edx,%edi
f012602d:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012602f:	e8 27 69 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0126034:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126037:	e8 00 dd fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012603c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012603f:	83 ec 0c             	sub    $0xc,%esp
f0126042:	68 00 fc 1f 00       	push   $0x1ffc00
f0126047:	e8 b2 17 fe ff       	call   f01077fe <kmalloc>
f012604c:	83 c4 10             	add    $0x10,%esp
f012604f:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126055:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f012605b:	89 c1                	mov    %eax,%ecx
f012605d:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0126064:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126067:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012606c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f012606f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0126072:	ba 00 00 00 00       	mov    $0x0,%edx
f0126077:	f7 75 c8             	divl   -0x38(%ebp)
f012607a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012607d:	29 d0                	sub    %edx,%eax
f012607f:	89 c3                	mov    %eax,%ebx
f0126081:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0126088:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012608d:	0f b6 d0             	movzbl %al,%edx
f0126090:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126093:	01 d0                	add    %edx,%eax
f0126095:	48                   	dec    %eax
f0126096:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0126099:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012609c:	ba 00 00 00 00       	mov    $0x0,%edx
f01260a1:	f7 75 c0             	divl   -0x40(%ebp)
f01260a4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01260a7:	29 d0                	sub    %edx,%eax
f01260a9:	01 c3                	add    %eax,%ebx
f01260ab:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01260b2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01260b7:	0f b6 c0             	movzbl %al,%eax
f01260ba:	c1 e0 04             	shl    $0x4,%eax
f01260bd:	89 c2                	mov    %eax,%edx
f01260bf:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01260c2:	01 d0                	add    %edx,%eax
f01260c4:	48                   	dec    %eax
f01260c5:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01260c8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01260cb:	ba 00 00 00 00       	mov    $0x0,%edx
f01260d0:	f7 75 b8             	divl   -0x48(%ebp)
f01260d3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01260d6:	29 d0                	sub    %edx,%eax
f01260d8:	01 d8                	add    %ebx,%eax
f01260da:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01260df:	39 c1                	cmp    %eax,%ecx
f01260e1:	74 17                	je     f01260fa <test_kfreeall+0x13c>
f01260e3:	83 ec 04             	sub    $0x4,%esp
f01260e6:	68 c0 ad 13 f0       	push   $0xf013adc0
f01260eb:	68 f9 09 00 00       	push   $0x9f9
f01260f0:	68 da ac 13 f0       	push   $0xf013acda
f01260f5:	e8 01 a1 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01260fa:	e8 3d dc fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01260ff:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126102:	74 17                	je     f012611b <test_kfreeall+0x15d>
f0126104:	83 ec 04             	sub    $0x4,%esp
f0126107:	68 f4 ac 13 f0       	push   $0xf013acf4
f012610c:	68 fa 09 00 00       	push   $0x9fa
f0126111:	68 da ac 13 f0       	push   $0xf013acda
f0126116:	e8 e0 a0 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012611b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012611e:	e8 38 68 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0126123:	29 c3                	sub    %eax,%ebx
f0126125:	89 d8                	mov    %ebx,%eax
f0126127:	3d 00 02 00 00       	cmp    $0x200,%eax
f012612c:	74 17                	je     f0126145 <test_kfreeall+0x187>
f012612e:	83 ec 04             	sub    $0x4,%esp
f0126131:	68 5c ad 13 f0       	push   $0xf013ad5c
f0126136:	68 fb 09 00 00       	push   $0x9fb
f012613b:	68 da ac 13 f0       	push   $0xf013acda
f0126140:	e8 b6 a0 fd ff       	call   f01001fb <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0126145:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f012614c:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012614f:	e8 07 68 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0126154:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126157:	e8 e0 db fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012615c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012615f:	83 ec 0c             	sub    $0xc,%esp
f0126162:	68 00 fc 1f 00       	push   $0x1ffc00
f0126167:	e8 92 16 fe ff       	call   f01077fe <kmalloc>
f012616c:	83 c4 10             	add    $0x10,%esp
f012616f:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126175:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f012617b:	89 c1                	mov    %eax,%ecx
f012617d:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0126184:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0126187:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012618c:	89 45 ac             	mov    %eax,-0x54(%ebp)
f012618f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0126192:	ba 00 00 00 00       	mov    $0x0,%edx
f0126197:	f7 75 b0             	divl   -0x50(%ebp)
f012619a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012619d:	29 d0                	sub    %edx,%eax
f012619f:	89 c3                	mov    %eax,%ebx
f01261a1:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01261a8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01261ad:	0f b6 d0             	movzbl %al,%edx
f01261b0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01261b3:	01 d0                	add    %edx,%eax
f01261b5:	48                   	dec    %eax
f01261b6:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01261b9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01261bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01261c1:	f7 75 a8             	divl   -0x58(%ebp)
f01261c4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01261c7:	29 d0                	sub    %edx,%eax
f01261c9:	01 c3                	add    %eax,%ebx
f01261cb:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01261d2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01261d7:	0f b6 c0             	movzbl %al,%eax
f01261da:	c1 e0 04             	shl    $0x4,%eax
f01261dd:	89 c2                	mov    %eax,%edx
f01261df:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01261e2:	01 d0                	add    %edx,%eax
f01261e4:	48                   	dec    %eax
f01261e5:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01261e8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01261eb:	ba 00 00 00 00       	mov    $0x0,%edx
f01261f0:	f7 75 a0             	divl   -0x60(%ebp)
f01261f3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01261f6:	29 d0                	sub    %edx,%eax
f01261f8:	01 d8                	add    %ebx,%eax
f01261fa:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01261ff:	39 c1                	cmp    %eax,%ecx
f0126201:	74 17                	je     f012621a <test_kfreeall+0x25c>
f0126203:	83 ec 04             	sub    $0x4,%esp
f0126206:	68 c0 ad 13 f0       	push   $0xf013adc0
f012620b:	68 02 0a 00 00       	push   $0xa02
f0126210:	68 da ac 13 f0       	push   $0xf013acda
f0126215:	e8 e1 9f fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012621a:	e8 1d db fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012621f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126222:	74 17                	je     f012623b <test_kfreeall+0x27d>
f0126224:	83 ec 04             	sub    $0x4,%esp
f0126227:	68 f4 ac 13 f0       	push   $0xf013acf4
f012622c:	68 03 0a 00 00       	push   $0xa03
f0126231:	68 da ac 13 f0       	push   $0xf013acda
f0126236:	e8 c0 9f fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012623b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012623e:	e8 18 67 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0126243:	29 c3                	sub    %eax,%ebx
f0126245:	89 d8                	mov    %ebx,%eax
f0126247:	3d 00 02 00 00       	cmp    $0x200,%eax
f012624c:	74 17                	je     f0126265 <test_kfreeall+0x2a7>
f012624e:	83 ec 04             	sub    $0x4,%esp
f0126251:	68 5c ad 13 f0       	push   $0xf013ad5c
f0126256:	68 04 0a 00 00       	push   $0xa04
f012625b:	68 da ac 13 f0       	push   $0xf013acda
f0126260:	e8 96 9f fd ff       	call   f01001fb <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0126265:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f012626c:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012626f:	e8 e7 66 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0126274:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126277:	e8 c0 da fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012627c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012627f:	83 ec 0c             	sub    $0xc,%esp
f0126282:	68 00 08 00 00       	push   $0x800
f0126287:	e8 72 15 fe ff       	call   f01077fe <kmalloc>
f012628c:	83 c4 10             	add    $0x10,%esp
f012628f:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126295:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f012629b:	89 c1                	mov    %eax,%ecx
f012629d:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01262a4:	8b 45 98             	mov    -0x68(%ebp),%eax
f01262a7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01262ac:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01262af:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01262b2:	ba 00 00 00 00       	mov    $0x0,%edx
f01262b7:	f7 75 98             	divl   -0x68(%ebp)
f01262ba:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01262bd:	29 d0                	sub    %edx,%eax
f01262bf:	89 c3                	mov    %eax,%ebx
f01262c1:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01262c8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01262cd:	0f b6 d0             	movzbl %al,%edx
f01262d0:	8b 45 90             	mov    -0x70(%ebp),%eax
f01262d3:	01 d0                	add    %edx,%eax
f01262d5:	48                   	dec    %eax
f01262d6:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01262d9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01262dc:	ba 00 00 00 00       	mov    $0x0,%edx
f01262e1:	f7 75 90             	divl   -0x70(%ebp)
f01262e4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01262e7:	29 d0                	sub    %edx,%eax
f01262e9:	01 c3                	add    %eax,%ebx
f01262eb:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01262f2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01262f7:	0f b6 c0             	movzbl %al,%eax
f01262fa:	c1 e0 04             	shl    $0x4,%eax
f01262fd:	89 c2                	mov    %eax,%edx
f01262ff:	8b 45 88             	mov    -0x78(%ebp),%eax
f0126302:	01 d0                	add    %edx,%eax
f0126304:	48                   	dec    %eax
f0126305:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0126308:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012630b:	ba 00 00 00 00       	mov    $0x0,%edx
f0126310:	f7 75 88             	divl   -0x78(%ebp)
f0126313:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0126316:	29 d0                	sub    %edx,%eax
f0126318:	01 d8                	add    %ebx,%eax
f012631a:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012631f:	39 c1                	cmp    %eax,%ecx
f0126321:	74 17                	je     f012633a <test_kfreeall+0x37c>
f0126323:	83 ec 04             	sub    $0x4,%esp
f0126326:	68 c0 ad 13 f0       	push   $0xf013adc0
f012632b:	68 0b 0a 00 00       	push   $0xa0b
f0126330:	68 da ac 13 f0       	push   $0xf013acda
f0126335:	e8 c1 9e fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012633a:	e8 fd d9 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012633f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126342:	74 17                	je     f012635b <test_kfreeall+0x39d>
f0126344:	83 ec 04             	sub    $0x4,%esp
f0126347:	68 f4 ac 13 f0       	push   $0xf013acf4
f012634c:	68 0c 0a 00 00       	push   $0xa0c
f0126351:	68 da ac 13 f0       	push   $0xf013acda
f0126356:	e8 a0 9e fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012635b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012635e:	e8 f8 65 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0126363:	29 c3                	sub    %eax,%ebx
f0126365:	89 d8                	mov    %ebx,%eax
f0126367:	83 f8 01             	cmp    $0x1,%eax
f012636a:	74 17                	je     f0126383 <test_kfreeall+0x3c5>
f012636c:	83 ec 04             	sub    $0x4,%esp
f012636f:	68 5c ad 13 f0       	push   $0xf013ad5c
f0126374:	68 0d 0a 00 00       	push   $0xa0d
f0126379:	68 da ac 13 f0       	push   $0xf013acda
f012637e:	e8 78 9e fd ff       	call   f01001fb <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0126383:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f012638a:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f012638d:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0126393:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0126396:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012639d:	eb 0e                	jmp    f01263ad <test_kfreeall+0x3ef>
		{
			ptr[i] = 2 ;
f012639f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01263a2:	8b 45 80             	mov    -0x80(%ebp),%eax
f01263a5:	01 d0                	add    %edx,%eax
f01263a7:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01263aa:	ff 45 f4             	incl   -0xc(%ebp)
f01263ad:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01263b3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01263b6:	7f e7                	jg     f012639f <test_kfreeall+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01263b8:	e8 9e 65 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01263bd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01263c0:	e8 77 d9 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01263c5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01263c8:	83 ec 0c             	sub    $0xc,%esp
f01263cb:	68 00 08 00 00       	push   $0x800
f01263d0:	e8 29 14 fe ff       	call   f01077fe <kmalloc>
f01263d5:	83 c4 10             	add    $0x10,%esp
f01263d8:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01263de:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01263e4:	89 c1                	mov    %eax,%ecx
f01263e6:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01263ed:	10 00 00 
f01263f0:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01263f6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01263fb:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0126401:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0126407:	ba 00 00 00 00       	mov    $0x0,%edx
f012640c:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0126412:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0126418:	29 d0                	sub    %edx,%eax
f012641a:	89 c3                	mov    %eax,%ebx
f012641c:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0126423:	10 00 00 
f0126426:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012642b:	0f b6 d0             	movzbl %al,%edx
f012642e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0126434:	01 d0                	add    %edx,%eax
f0126436:	48                   	dec    %eax
f0126437:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012643d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0126443:	ba 00 00 00 00       	mov    $0x0,%edx
f0126448:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012644e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0126454:	29 d0                	sub    %edx,%eax
f0126456:	01 c3                	add    %eax,%ebx
f0126458:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012645f:	10 00 00 
f0126462:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0126467:	0f b6 c0             	movzbl %al,%eax
f012646a:	c1 e0 04             	shl    $0x4,%eax
f012646d:	89 c2                	mov    %eax,%edx
f012646f:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0126475:	01 d0                	add    %edx,%eax
f0126477:	48                   	dec    %eax
f0126478:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012647e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0126484:	ba 00 00 00 00       	mov    $0x0,%edx
f0126489:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012648f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0126495:	29 d0                	sub    %edx,%eax
f0126497:	01 d8                	add    %ebx,%eax
f0126499:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012649e:	39 c1                	cmp    %eax,%ecx
f01264a0:	74 17                	je     f01264b9 <test_kfreeall+0x4fb>
f01264a2:	83 ec 04             	sub    $0x4,%esp
f01264a5:	68 c0 ad 13 f0       	push   $0xf013adc0
f01264aa:	68 19 0a 00 00       	push   $0xa19
f01264af:	68 da ac 13 f0       	push   $0xf013acda
f01264b4:	e8 42 9d fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01264b9:	e8 7e d8 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01264be:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01264c1:	74 17                	je     f01264da <test_kfreeall+0x51c>
f01264c3:	83 ec 04             	sub    $0x4,%esp
f01264c6:	68 f4 ac 13 f0       	push   $0xf013acf4
f01264cb:	68 1a 0a 00 00       	push   $0xa1a
f01264d0:	68 da ac 13 f0       	push   $0xf013acda
f01264d5:	e8 21 9d fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01264da:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01264dd:	e8 79 64 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01264e2:	29 c3                	sub    %eax,%ebx
f01264e4:	89 d8                	mov    %ebx,%eax
f01264e6:	83 f8 01             	cmp    $0x1,%eax
f01264e9:	74 17                	je     f0126502 <test_kfreeall+0x544>
f01264eb:	83 ec 04             	sub    $0x4,%esp
f01264ee:	68 5c ad 13 f0       	push   $0xf013ad5c
f01264f3:	68 1b 0a 00 00       	push   $0xa1b
f01264f8:	68 da ac 13 f0       	push   $0xf013acda
f01264fd:	e8 f9 9c fd ff       	call   f01001fb <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0126502:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f0126509:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012650c:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0126512:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0126515:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012651c:	eb 0e                	jmp    f012652c <test_kfreeall+0x56e>
		{
			ptr[i] = 3 ;
f012651e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126521:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126524:	01 d0                	add    %edx,%eax
f0126526:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0126529:	ff 45 f4             	incl   -0xc(%ebp)
f012652c:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0126532:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126535:	7f e7                	jg     f012651e <test_kfreeall+0x560>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0126537:	e8 1f 64 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012653c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012653f:	e8 f8 d7 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126544:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0126547:	83 ec 0c             	sub    $0xc,%esp
f012654a:	68 00 1c 00 00       	push   $0x1c00
f012654f:	e8 aa 12 fe ff       	call   f01077fe <kmalloc>
f0126554:	83 c4 10             	add    $0x10,%esp
f0126557:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012655d:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0126563:	89 c1                	mov    %eax,%ecx
f0126565:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012656c:	10 00 00 
f012656f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0126575:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012657a:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0126580:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126586:	ba 00 00 00 00       	mov    $0x0,%edx
f012658b:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0126591:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126597:	29 d0                	sub    %edx,%eax
f0126599:	89 c3                	mov    %eax,%ebx
f012659b:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01265a2:	10 00 00 
f01265a5:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01265aa:	0f b6 d0             	movzbl %al,%edx
f01265ad:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01265b3:	01 d0                	add    %edx,%eax
f01265b5:	48                   	dec    %eax
f01265b6:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f01265bc:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01265c2:	ba 00 00 00 00       	mov    $0x0,%edx
f01265c7:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f01265cd:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01265d3:	29 d0                	sub    %edx,%eax
f01265d5:	01 c3                	add    %eax,%ebx
f01265d7:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f01265de:	10 00 00 
f01265e1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01265e6:	0f b6 c0             	movzbl %al,%eax
f01265e9:	c1 e0 04             	shl    $0x4,%eax
f01265ec:	89 c2                	mov    %eax,%edx
f01265ee:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01265f4:	01 d0                	add    %edx,%eax
f01265f6:	48                   	dec    %eax
f01265f7:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f01265fd:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0126603:	ba 00 00 00 00       	mov    $0x0,%edx
f0126608:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012660e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0126614:	29 d0                	sub    %edx,%eax
f0126616:	01 d8                	add    %ebx,%eax
f0126618:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012661d:	39 c1                	cmp    %eax,%ecx
f012661f:	74 17                	je     f0126638 <test_kfreeall+0x67a>
f0126621:	83 ec 04             	sub    $0x4,%esp
f0126624:	68 c0 ad 13 f0       	push   $0xf013adc0
f0126629:	68 27 0a 00 00       	push   $0xa27
f012662e:	68 da ac 13 f0       	push   $0xf013acda
f0126633:	e8 c3 9b fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126638:	e8 ff d6 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012663d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126640:	74 17                	je     f0126659 <test_kfreeall+0x69b>
f0126642:	83 ec 04             	sub    $0x4,%esp
f0126645:	68 f4 ac 13 f0       	push   $0xf013acf4
f012664a:	68 28 0a 00 00       	push   $0xa28
f012664f:	68 da ac 13 f0       	push   $0xf013acda
f0126654:	e8 a2 9b fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126659:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012665c:	e8 fa 62 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0126661:	29 c3                	sub    %eax,%ebx
f0126663:	89 d8                	mov    %ebx,%eax
f0126665:	83 f8 02             	cmp    $0x2,%eax
f0126668:	74 17                	je     f0126681 <test_kfreeall+0x6c3>
f012666a:	83 ec 04             	sub    $0x4,%esp
f012666d:	68 5c ad 13 f0       	push   $0xf013ad5c
f0126672:	68 29 0a 00 00       	push   $0xa29
f0126677:	68 da ac 13 f0       	push   $0xf013acda
f012667c:	e8 7a 9b fd ff       	call   f01001fb <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0126681:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f0126688:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f012668b:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0126691:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0126694:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012669b:	eb 0e                	jmp    f01266ab <test_kfreeall+0x6ed>
		{
			ptr[i] = 4 ;
f012669d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01266a0:	8b 45 80             	mov    -0x80(%ebp),%eax
f01266a3:	01 d0                	add    %edx,%eax
f01266a5:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01266a8:	ff 45 f4             	incl   -0xc(%ebp)
f01266ab:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01266b1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01266b4:	7f e7                	jg     f012669d <test_kfreeall+0x6df>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01266b6:	e8 a0 62 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01266bb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01266be:	e8 79 d6 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01266c3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01266c6:	83 ec 0c             	sub    $0xc,%esp
f01266c9:	68 00 fc 2f 00       	push   $0x2ffc00
f01266ce:	e8 2b 11 fe ff       	call   f01077fe <kmalloc>
f01266d3:	83 c4 10             	add    $0x10,%esp
f01266d6:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01266dc:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01266e2:	89 c1                	mov    %eax,%ecx
f01266e4:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f01266eb:	10 00 00 
f01266ee:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01266f4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01266f9:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f01266ff:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0126705:	ba 00 00 00 00       	mov    $0x0,%edx
f012670a:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0126710:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0126716:	29 d0                	sub    %edx,%eax
f0126718:	89 c3                	mov    %eax,%ebx
f012671a:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0126721:	10 00 00 
f0126724:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0126729:	0f b6 d0             	movzbl %al,%edx
f012672c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0126732:	01 d0                	add    %edx,%eax
f0126734:	48                   	dec    %eax
f0126735:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012673b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0126741:	ba 00 00 00 00       	mov    $0x0,%edx
f0126746:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012674c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0126752:	29 d0                	sub    %edx,%eax
f0126754:	01 c3                	add    %eax,%ebx
f0126756:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012675d:	10 00 00 
f0126760:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0126765:	0f b6 c0             	movzbl %al,%eax
f0126768:	c1 e0 04             	shl    $0x4,%eax
f012676b:	89 c2                	mov    %eax,%edx
f012676d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0126773:	01 d0                	add    %edx,%eax
f0126775:	48                   	dec    %eax
f0126776:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012677c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0126782:	ba 00 00 00 00       	mov    $0x0,%edx
f0126787:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012678d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0126793:	29 d0                	sub    %edx,%eax
f0126795:	01 d8                	add    %ebx,%eax
f0126797:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012679c:	39 c1                	cmp    %eax,%ecx
f012679e:	74 17                	je     f01267b7 <test_kfreeall+0x7f9>
f01267a0:	83 ec 04             	sub    $0x4,%esp
f01267a3:	68 c0 ad 13 f0       	push   $0xf013adc0
f01267a8:	68 35 0a 00 00       	push   $0xa35
f01267ad:	68 da ac 13 f0       	push   $0xf013acda
f01267b2:	e8 44 9a fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01267b7:	e8 80 d5 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01267bc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01267bf:	74 17                	je     f01267d8 <test_kfreeall+0x81a>
f01267c1:	83 ec 04             	sub    $0x4,%esp
f01267c4:	68 f4 ac 13 f0       	push   $0xf013acf4
f01267c9:	68 36 0a 00 00       	push   $0xa36
f01267ce:	68 da ac 13 f0       	push   $0xf013acda
f01267d3:	e8 23 9a fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01267d8:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01267db:	e8 7b 61 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01267e0:	29 c3                	sub    %eax,%ebx
f01267e2:	89 d8                	mov    %ebx,%eax
f01267e4:	3d 00 03 00 00       	cmp    $0x300,%eax
f01267e9:	74 17                	je     f0126802 <test_kfreeall+0x844>
f01267eb:	83 ec 04             	sub    $0x4,%esp
f01267ee:	68 5c ad 13 f0       	push   $0xf013ad5c
f01267f3:	68 37 0a 00 00       	push   $0xa37
f01267f8:	68 da ac 13 f0       	push   $0xf013acda
f01267fd:	e8 f9 99 fd ff       	call   f01001fb <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0126802:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f0126809:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f012680c:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0126812:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0126815:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012681c:	eb 0e                	jmp    f012682c <test_kfreeall+0x86e>
		{
			ptr[i] = 5 ;
f012681e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126821:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126824:	01 d0                	add    %edx,%eax
f0126826:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0126829:	ff 45 f4             	incl   -0xc(%ebp)
f012682c:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0126832:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126835:	7f e7                	jg     f012681e <test_kfreeall+0x860>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0126837:	e8 1f 61 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012683c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012683f:	e8 f8 d4 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126844:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0126847:	83 ec 0c             	sub    $0xc,%esp
f012684a:	68 00 fc 5f 00       	push   $0x5ffc00
f012684f:	e8 aa 0f fe ff       	call   f01077fe <kmalloc>
f0126854:	83 c4 10             	add    $0x10,%esp
f0126857:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012685d:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0126863:	89 c1                	mov    %eax,%ecx
f0126865:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012686c:	10 00 00 
f012686f:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0126875:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012687a:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0126880:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0126886:	ba 00 00 00 00       	mov    $0x0,%edx
f012688b:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0126891:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0126897:	29 d0                	sub    %edx,%eax
f0126899:	89 c3                	mov    %eax,%ebx
f012689b:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01268a2:	10 00 00 
f01268a5:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01268aa:	0f b6 d0             	movzbl %al,%edx
f01268ad:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01268b3:	01 d0                	add    %edx,%eax
f01268b5:	48                   	dec    %eax
f01268b6:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f01268bc:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01268c2:	ba 00 00 00 00       	mov    $0x0,%edx
f01268c7:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f01268cd:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01268d3:	29 d0                	sub    %edx,%eax
f01268d5:	01 c3                	add    %eax,%ebx
f01268d7:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f01268de:	10 00 00 
f01268e1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01268e6:	0f b6 c0             	movzbl %al,%eax
f01268e9:	c1 e0 04             	shl    $0x4,%eax
f01268ec:	89 c2                	mov    %eax,%edx
f01268ee:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01268f4:	01 d0                	add    %edx,%eax
f01268f6:	48                   	dec    %eax
f01268f7:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f01268fd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0126903:	ba 00 00 00 00       	mov    $0x0,%edx
f0126908:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012690e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0126914:	29 d0                	sub    %edx,%eax
f0126916:	01 d8                	add    %ebx,%eax
f0126918:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012691d:	39 c1                	cmp    %eax,%ecx
f012691f:	74 17                	je     f0126938 <test_kfreeall+0x97a>
f0126921:	83 ec 04             	sub    $0x4,%esp
f0126924:	68 c0 ad 13 f0       	push   $0xf013adc0
f0126929:	68 43 0a 00 00       	push   $0xa43
f012692e:	68 da ac 13 f0       	push   $0xf013acda
f0126933:	e8 c3 98 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126938:	e8 ff d3 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012693d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126940:	74 17                	je     f0126959 <test_kfreeall+0x99b>
f0126942:	83 ec 04             	sub    $0x4,%esp
f0126945:	68 f4 ac 13 f0       	push   $0xf013acf4
f012694a:	68 44 0a 00 00       	push   $0xa44
f012694f:	68 da ac 13 f0       	push   $0xf013acda
f0126954:	e8 a2 98 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126959:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012695c:	e8 fa 5f fe ff       	call   f010c95b <sys_calculate_free_frames>
f0126961:	29 c3                	sub    %eax,%ebx
f0126963:	89 d8                	mov    %ebx,%eax
f0126965:	3d 00 06 00 00       	cmp    $0x600,%eax
f012696a:	74 17                	je     f0126983 <test_kfreeall+0x9c5>
f012696c:	83 ec 04             	sub    $0x4,%esp
f012696f:	68 5c ad 13 f0       	push   $0xf013ad5c
f0126974:	68 45 0a 00 00       	push   $0xa45
f0126979:	68 da ac 13 f0       	push   $0xf013acda
f012697e:	e8 78 98 fd ff       	call   f01001fb <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0126983:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f012698a:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012698d:	e8 c9 5f fe ff       	call   f010c95b <sys_calculate_free_frames>
f0126992:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126995:	e8 a2 d3 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012699a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012699d:	83 ec 0c             	sub    $0xc,%esp
f01269a0:	68 00 38 00 00       	push   $0x3800
f01269a5:	e8 54 0e fe ff       	call   f01077fe <kmalloc>
f01269aa:	83 c4 10             	add    $0x10,%esp
f01269ad:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01269b3:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01269b9:	89 c1                	mov    %eax,%ecx
f01269bb:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f01269c2:	10 00 00 
f01269c5:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01269cb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01269d0:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f01269d6:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01269dc:	ba 00 00 00 00       	mov    $0x0,%edx
f01269e1:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f01269e7:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01269ed:	29 d0                	sub    %edx,%eax
f01269ef:	89 c3                	mov    %eax,%ebx
f01269f1:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f01269f8:	10 00 00 
f01269fb:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0126a00:	0f b6 d0             	movzbl %al,%edx
f0126a03:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0126a09:	01 d0                	add    %edx,%eax
f0126a0b:	48                   	dec    %eax
f0126a0c:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0126a12:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0126a18:	ba 00 00 00 00       	mov    $0x0,%edx
f0126a1d:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0126a23:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0126a29:	29 d0                	sub    %edx,%eax
f0126a2b:	01 c3                	add    %eax,%ebx
f0126a2d:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0126a34:	10 00 00 
f0126a37:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0126a3c:	0f b6 c0             	movzbl %al,%eax
f0126a3f:	c1 e0 04             	shl    $0x4,%eax
f0126a42:	89 c2                	mov    %eax,%edx
f0126a44:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0126a4a:	01 d0                	add    %edx,%eax
f0126a4c:	48                   	dec    %eax
f0126a4d:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0126a53:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0126a59:	ba 00 00 00 00       	mov    $0x0,%edx
f0126a5e:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0126a64:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0126a6a:	29 d0                	sub    %edx,%eax
f0126a6c:	01 d8                	add    %ebx,%eax
f0126a6e:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0126a73:	39 c1                	cmp    %eax,%ecx
f0126a75:	74 17                	je     f0126a8e <test_kfreeall+0xad0>
f0126a77:	83 ec 04             	sub    $0x4,%esp
f0126a7a:	68 c0 ad 13 f0       	push   $0xf013adc0
f0126a7f:	68 4c 0a 00 00       	push   $0xa4c
f0126a84:	68 da ac 13 f0       	push   $0xf013acda
f0126a89:	e8 6d 97 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126a8e:	e8 a9 d2 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126a93:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126a96:	74 17                	je     f0126aaf <test_kfreeall+0xaf1>
f0126a98:	83 ec 04             	sub    $0x4,%esp
f0126a9b:	68 f4 ac 13 f0       	push   $0xf013acf4
f0126aa0:	68 4d 0a 00 00       	push   $0xa4d
f0126aa5:	68 da ac 13 f0       	push   $0xf013acda
f0126aaa:	e8 4c 97 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126aaf:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126ab2:	e8 a4 5e fe ff       	call   f010c95b <sys_calculate_free_frames>
f0126ab7:	29 c3                	sub    %eax,%ebx
f0126ab9:	89 d8                	mov    %ebx,%eax
f0126abb:	83 f8 04             	cmp    $0x4,%eax
f0126abe:	74 17                	je     f0126ad7 <test_kfreeall+0xb19>
f0126ac0:	83 ec 04             	sub    $0x4,%esp
f0126ac3:	68 5c ad 13 f0       	push   $0xf013ad5c
f0126ac8:	68 4e 0a 00 00       	push   $0xa4e
f0126acd:	68 da ac 13 f0       	push   $0xf013acda
f0126ad2:	e8 24 97 fd ff       	call   f01001fb <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0126ad7:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f0126ade:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0126ae1:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0126ae7:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0126aea:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126af1:	eb 0e                	jmp    f0126b01 <test_kfreeall+0xb43>
		{
			ptr[i] = 7 ;
f0126af3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126af6:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126af9:	01 d0                	add    %edx,%eax
f0126afb:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0126afe:	ff 45 f4             	incl   -0xc(%ebp)
f0126b01:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0126b07:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126b0a:	7f e7                	jg     f0126af3 <test_kfreeall+0xb35>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0126b0c:	e8 4a 5e fe ff       	call   f010c95b <sys_calculate_free_frames>
f0126b11:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0126b17:	e8 20 d2 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126b1c:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0126b22:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0126b28:	83 ec 0c             	sub    $0xc,%esp
f0126b2b:	50                   	push   %eax
f0126b2c:	e8 8f 0d fe ff       	call   f01078c0 <kfree>
f0126b31:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126b34:	e8 03 d2 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126b39:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0126b3f:	74 17                	je     f0126b58 <test_kfreeall+0xb9a>
f0126b41:	83 ec 04             	sub    $0x4,%esp
f0126b44:	68 f4 ac 13 f0       	push   $0xf013acf4
f0126b49:	68 5d 0a 00 00       	push   $0xa5d
f0126b4e:	68 da ac 13 f0       	push   $0xf013acda
f0126b53:	e8 a3 96 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0126b58:	e8 fe 5d fe ff       	call   f010c95b <sys_calculate_free_frames>
f0126b5d:	89 c2                	mov    %eax,%edx
f0126b5f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0126b65:	29 c2                	sub    %eax,%edx
f0126b67:	89 d0                	mov    %edx,%eax
f0126b69:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126b6e:	74 17                	je     f0126b87 <test_kfreeall+0xbc9>
f0126b70:	83 ec 04             	sub    $0x4,%esp
f0126b73:	68 64 b4 13 f0       	push   $0xf013b464
f0126b78:	68 5e 0a 00 00       	push   $0xa5e
f0126b7d:	68 da ac 13 f0       	push   $0xf013acda
f0126b82:	e8 74 96 fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126b87:	e8 cf 5d fe ff       	call   f010c95b <sys_calculate_free_frames>
f0126b8c:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126b92:	e8 a5 d1 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126b97:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0126b9d:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0126ba3:	83 ec 0c             	sub    $0xc,%esp
f0126ba6:	50                   	push   %eax
f0126ba7:	e8 14 0d fe ff       	call   f01078c0 <kfree>
f0126bac:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126baf:	e8 88 d1 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126bb4:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0126bba:	74 17                	je     f0126bd3 <test_kfreeall+0xc15>
f0126bbc:	83 ec 04             	sub    $0x4,%esp
f0126bbf:	68 f4 ac 13 f0       	push   $0xf013acf4
f0126bc4:	68 64 0a 00 00       	push   $0xa64
f0126bc9:	68 da ac 13 f0       	push   $0xf013acda
f0126bce:	e8 28 96 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0126bd3:	e8 83 5d fe ff       	call   f010c95b <sys_calculate_free_frames>
f0126bd8:	89 c2                	mov    %eax,%edx
f0126bda:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0126be0:	29 c2                	sub    %eax,%edx
f0126be2:	89 d0                	mov    %edx,%eax
f0126be4:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126be9:	74 17                	je     f0126c02 <test_kfreeall+0xc44>
f0126beb:	83 ec 04             	sub    $0x4,%esp
f0126bee:	68 64 b4 13 f0       	push   $0xf013b464
f0126bf3:	68 65 0a 00 00       	push   $0xa65
f0126bf8:	68 da ac 13 f0       	push   $0xf013acda
f0126bfd:	e8 f9 95 fd ff       	call   f01001fb <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0126c02:	e8 54 5d fe ff       	call   f010c95b <sys_calculate_free_frames>
f0126c07:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126c0d:	e8 2a d1 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126c12:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0126c18:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0126c1e:	83 ec 0c             	sub    $0xc,%esp
f0126c21:	50                   	push   %eax
f0126c22:	e8 99 0c fe ff       	call   f01078c0 <kfree>
f0126c27:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126c2a:	e8 0d d1 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126c2f:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0126c35:	74 17                	je     f0126c4e <test_kfreeall+0xc90>
f0126c37:	83 ec 04             	sub    $0x4,%esp
f0126c3a:	68 f4 ac 13 f0       	push   $0xf013acf4
f0126c3f:	68 6b 0a 00 00       	push   $0xa6b
f0126c44:	68 da ac 13 f0       	push   $0xf013acda
f0126c49:	e8 ad 95 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0126c4e:	e8 08 5d fe ff       	call   f010c95b <sys_calculate_free_frames>
f0126c53:	89 c2                	mov    %eax,%edx
f0126c55:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0126c5b:	29 c2                	sub    %eax,%edx
f0126c5d:	89 d0                	mov    %edx,%eax
f0126c5f:	3d 00 06 00 00       	cmp    $0x600,%eax
f0126c64:	74 17                	je     f0126c7d <test_kfreeall+0xcbf>
f0126c66:	83 ec 04             	sub    $0x4,%esp
f0126c69:	68 64 b4 13 f0       	push   $0xf013b464
f0126c6e:	68 6c 0a 00 00       	push   $0xa6c
f0126c73:	68 da ac 13 f0       	push   $0xf013acda
f0126c78:	e8 7e 95 fd ff       	call   f01001fb <_panic>


	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0126c7d:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0126c83:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0126c86:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126c8d:	eb 1e                	jmp    f0126cad <test_kfreeall+0xcef>
		{
			sums[2] += ptr[i] ;
f0126c8f:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f0126c95:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126c98:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126c9b:	01 c8                	add    %ecx,%eax
f0126c9d:	8a 00                	mov    (%eax),%al
f0126c9f:	0f be c0             	movsbl %al,%eax
f0126ca2:	01 d0                	add    %edx,%eax
f0126ca4:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0126caa:	ff 45 f4             	incl   -0xc(%ebp)
f0126cad:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0126cb3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126cb6:	7f d7                	jg     f0126c8f <test_kfreeall+0xcd1>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0126cb8:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f0126cbe:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0126cc4:	01 c0                	add    %eax,%eax
f0126cc6:	39 c2                	cmp    %eax,%edx
f0126cc8:	74 17                	je     f0126ce1 <test_kfreeall+0xd23>
f0126cca:	83 ec 04             	sub    $0x4,%esp
f0126ccd:	68 c0 b4 13 f0       	push   $0xf013b4c0
f0126cd2:	68 78 0a 00 00       	push   $0xa78
f0126cd7:	68 da ac 13 f0       	push   $0xf013acda
f0126cdc:	e8 1a 95 fd ff       	call   f01001fb <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0126ce1:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0126ce7:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0126cea:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126cf1:	eb 1e                	jmp    f0126d11 <test_kfreeall+0xd53>
		{
			sums[3] += ptr[i] ;
f0126cf3:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0126cf9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126cfc:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126cff:	01 c8                	add    %ecx,%eax
f0126d01:	8a 00                	mov    (%eax),%al
f0126d03:	0f be c0             	movsbl %al,%eax
f0126d06:	01 d0                	add    %edx,%eax
f0126d08:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0126d0e:	ff 45 f4             	incl   -0xc(%ebp)
f0126d11:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0126d17:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126d1a:	7f d7                	jg     f0126cf3 <test_kfreeall+0xd35>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0126d1c:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0126d22:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0126d28:	89 c1                	mov    %eax,%ecx
f0126d2a:	01 c9                	add    %ecx,%ecx
f0126d2c:	01 c8                	add    %ecx,%eax
f0126d2e:	39 c2                	cmp    %eax,%edx
f0126d30:	74 17                	je     f0126d49 <test_kfreeall+0xd8b>
f0126d32:	83 ec 04             	sub    $0x4,%esp
f0126d35:	68 c0 b4 13 f0       	push   $0xf013b4c0
f0126d3a:	68 80 0a 00 00       	push   $0xa80
f0126d3f:	68 da ac 13 f0       	push   $0xf013acda
f0126d44:	e8 b2 94 fd ff       	call   f01001fb <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0126d49:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0126d4f:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0126d52:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126d59:	eb 1e                	jmp    f0126d79 <test_kfreeall+0xdbb>
		{
			sums[4] += ptr[i] ;
f0126d5b:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0126d61:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126d64:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126d67:	01 c8                	add    %ecx,%eax
f0126d69:	8a 00                	mov    (%eax),%al
f0126d6b:	0f be c0             	movsbl %al,%eax
f0126d6e:	01 d0                	add    %edx,%eax
f0126d70:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0126d76:	ff 45 f4             	incl   -0xc(%ebp)
f0126d79:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0126d7f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126d82:	7f d7                	jg     f0126d5b <test_kfreeall+0xd9d>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0126d84:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0126d8a:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0126d90:	c1 e2 02             	shl    $0x2,%edx
f0126d93:	39 d0                	cmp    %edx,%eax
f0126d95:	74 17                	je     f0126dae <test_kfreeall+0xdf0>
f0126d97:	83 ec 04             	sub    $0x4,%esp
f0126d9a:	68 c0 b4 13 f0       	push   $0xf013b4c0
f0126d9f:	68 88 0a 00 00       	push   $0xa88
f0126da4:	68 da ac 13 f0       	push   $0xf013acda
f0126da9:	e8 4d 94 fd ff       	call   f01001fb <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0126dae:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0126db4:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0126db7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126dbe:	eb 1e                	jmp    f0126dde <test_kfreeall+0xe20>
		{
			sums[5] += ptr[i] ;
f0126dc0:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f0126dc6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126dc9:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126dcc:	01 c8                	add    %ecx,%eax
f0126dce:	8a 00                	mov    (%eax),%al
f0126dd0:	0f be c0             	movsbl %al,%eax
f0126dd3:	01 d0                	add    %edx,%eax
f0126dd5:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0126ddb:	ff 45 f4             	incl   -0xc(%ebp)
f0126dde:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0126de4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126de7:	7f d7                	jg     f0126dc0 <test_kfreeall+0xe02>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0126de9:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f0126def:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0126df5:	89 d0                	mov    %edx,%eax
f0126df7:	c1 e0 02             	shl    $0x2,%eax
f0126dfa:	01 d0                	add    %edx,%eax
f0126dfc:	39 c1                	cmp    %eax,%ecx
f0126dfe:	74 17                	je     f0126e17 <test_kfreeall+0xe59>
f0126e00:	83 ec 04             	sub    $0x4,%esp
f0126e03:	68 c0 b4 13 f0       	push   $0xf013b4c0
f0126e08:	68 90 0a 00 00       	push   $0xa90
f0126e0d:	68 da ac 13 f0       	push   $0xf013acda
f0126e12:	e8 e4 93 fd ff       	call   f01001fb <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0126e17:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0126e1d:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0126e20:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126e27:	eb 1e                	jmp    f0126e47 <test_kfreeall+0xe89>
		{
			sums[7] += ptr[i] ;
f0126e29:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f0126e2f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126e32:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126e35:	01 c8                	add    %ecx,%eax
f0126e37:	8a 00                	mov    (%eax),%al
f0126e39:	0f be c0             	movsbl %al,%eax
f0126e3c:	01 d0                	add    %edx,%eax
f0126e3e:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0126e44:	ff 45 f4             	incl   -0xc(%ebp)
f0126e47:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0126e4d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126e50:	7f d7                	jg     f0126e29 <test_kfreeall+0xe6b>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0126e52:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f0126e58:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0126e5e:	89 d0                	mov    %edx,%eax
f0126e60:	01 c0                	add    %eax,%eax
f0126e62:	01 d0                	add    %edx,%eax
f0126e64:	01 c0                	add    %eax,%eax
f0126e66:	01 d0                	add    %edx,%eax
f0126e68:	39 c1                	cmp    %eax,%ecx
f0126e6a:	74 17                	je     f0126e83 <test_kfreeall+0xec5>
f0126e6c:	83 ec 04             	sub    $0x4,%esp
f0126e6f:	68 c0 b4 13 f0       	push   $0xf013b4c0
f0126e74:	68 98 0a 00 00       	push   $0xa98
f0126e79:	68 da ac 13 f0       	push   $0xf013acda
f0126e7e:	e8 78 93 fd ff       	call   f01001fb <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0126e83:	e8 d3 5a fe ff       	call   f010c95b <sys_calculate_free_frames>
f0126e88:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126e8b:	e8 ac ce fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126e90:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0126e93:	83 ec 0c             	sub    $0xc,%esp
f0126e96:	68 00 50 00 00       	push   $0x5000
f0126e9b:	e8 5e 09 fe ff       	call   f01077fe <kmalloc>
f0126ea0:	83 c4 10             	add    $0x10,%esp
f0126ea3:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126ea9:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0126eaf:	89 c1                	mov    %eax,%ecx
f0126eb1:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0126eb8:	10 00 00 
f0126ebb:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0126ec1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126ec6:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0126ecc:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0126ed2:	ba 00 00 00 00       	mov    $0x0,%edx
f0126ed7:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0126edd:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0126ee3:	29 d0                	sub    %edx,%eax
f0126ee5:	89 c3                	mov    %eax,%ebx
f0126ee7:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0126eee:	10 00 00 
f0126ef1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0126ef6:	0f b6 d0             	movzbl %al,%edx
f0126ef9:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0126eff:	01 d0                	add    %edx,%eax
f0126f01:	48                   	dec    %eax
f0126f02:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0126f08:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0126f0e:	ba 00 00 00 00       	mov    $0x0,%edx
f0126f13:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0126f19:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0126f1f:	29 d0                	sub    %edx,%eax
f0126f21:	01 c3                	add    %eax,%ebx
f0126f23:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0126f2a:	10 00 00 
f0126f2d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0126f32:	0f b6 c0             	movzbl %al,%eax
f0126f35:	c1 e0 04             	shl    $0x4,%eax
f0126f38:	89 c2                	mov    %eax,%edx
f0126f3a:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0126f40:	01 d0                	add    %edx,%eax
f0126f42:	48                   	dec    %eax
f0126f43:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0126f49:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0126f4f:	ba 00 00 00 00       	mov    $0x0,%edx
f0126f54:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0126f5a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0126f60:	29 d0                	sub    %edx,%eax
f0126f62:	01 d8                	add    %ebx,%eax
f0126f64:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0126f69:	39 c1                	cmp    %eax,%ecx
f0126f6b:	74 17                	je     f0126f84 <test_kfreeall+0xfc6>
f0126f6d:	83 ec 04             	sub    $0x4,%esp
f0126f70:	68 c0 ad 13 f0       	push   $0xf013adc0
f0126f75:	68 a1 0a 00 00       	push   $0xaa1
f0126f7a:	68 da ac 13 f0       	push   $0xf013acda
f0126f7f:	e8 77 92 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126f84:	e8 b3 cd fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126f89:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126f8c:	74 17                	je     f0126fa5 <test_kfreeall+0xfe7>
f0126f8e:	83 ec 04             	sub    $0x4,%esp
f0126f91:	68 f4 ac 13 f0       	push   $0xf013acf4
f0126f96:	68 a2 0a 00 00       	push   $0xaa2
f0126f9b:	68 da ac 13 f0       	push   $0xf013acda
f0126fa0:	e8 56 92 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126fa5:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126fa8:	e8 ae 59 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0126fad:	29 c3                	sub    %eax,%ebx
f0126faf:	89 d8                	mov    %ebx,%eax
f0126fb1:	83 f8 05             	cmp    $0x5,%eax
f0126fb4:	74 17                	je     f0126fcd <test_kfreeall+0x100f>
f0126fb6:	83 ec 04             	sub    $0x4,%esp
f0126fb9:	68 5c ad 13 f0       	push   $0xf013ad5c
f0126fbe:	68 a3 0a 00 00       	push   $0xaa3
f0126fc3:	68 da ac 13 f0       	push   $0xf013acda
f0126fc8:	e8 2e 92 fd ff       	call   f01001fb <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0126fcd:	c7 85 88 fe ff ff ff 	movl   $0x4fff,-0x178(%ebp)
f0126fd4:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0126fd7:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0126fdd:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0126fe0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126fe7:	eb 0e                	jmp    f0126ff7 <test_kfreeall+0x1039>
		{
			ptr[i] = 8 ;
f0126fe9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126fec:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126fef:	01 d0                	add    %edx,%eax
f0126ff1:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0126ff4:	ff 45 f4             	incl   -0xc(%ebp)
f0126ff7:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0126ffd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127000:	7f e7                	jg     f0126fe9 <test_kfreeall+0x102b>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0127002:	e8 54 59 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0127007:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012700a:	e8 2d cd fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012700f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0127012:	83 ec 0c             	sub    $0xc,%esp
f0127015:	68 00 00 10 00       	push   $0x100000
f012701a:	e8 df 07 fe ff       	call   f01077fe <kmalloc>
f012701f:	83 c4 10             	add    $0x10,%esp
f0127022:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127028:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f012702e:	89 c1                	mov    %eax,%ecx
f0127030:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0127037:	10 00 00 
f012703a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0127040:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127045:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f012704b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0127051:	ba 00 00 00 00       	mov    $0x0,%edx
f0127056:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f012705c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0127062:	29 d0                	sub    %edx,%eax
f0127064:	89 c3                	mov    %eax,%ebx
f0127066:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f012706d:	10 00 00 
f0127070:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127075:	0f b6 d0             	movzbl %al,%edx
f0127078:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012707e:	01 d0                	add    %edx,%eax
f0127080:	48                   	dec    %eax
f0127081:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0127087:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012708d:	ba 00 00 00 00       	mov    $0x0,%edx
f0127092:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0127098:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012709e:	29 d0                	sub    %edx,%eax
f01270a0:	01 c3                	add    %eax,%ebx
f01270a2:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f01270a9:	10 00 00 
f01270ac:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01270b1:	0f b6 c0             	movzbl %al,%eax
f01270b4:	c1 e0 04             	shl    $0x4,%eax
f01270b7:	89 c2                	mov    %eax,%edx
f01270b9:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01270bf:	01 d0                	add    %edx,%eax
f01270c1:	48                   	dec    %eax
f01270c2:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f01270c8:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01270ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01270d3:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f01270d9:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01270df:	29 d0                	sub    %edx,%eax
f01270e1:	01 d8                	add    %ebx,%eax
f01270e3:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f01270e8:	39 c1                	cmp    %eax,%ecx
f01270ea:	74 17                	je     f0127103 <test_kfreeall+0x1145>
f01270ec:	83 ec 04             	sub    $0x4,%esp
f01270ef:	68 c0 ad 13 f0       	push   $0xf013adc0
f01270f4:	68 af 0a 00 00       	push   $0xaaf
f01270f9:	68 da ac 13 f0       	push   $0xf013acda
f01270fe:	e8 f8 90 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127103:	e8 34 cc fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127108:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012710b:	74 17                	je     f0127124 <test_kfreeall+0x1166>
f012710d:	83 ec 04             	sub    $0x4,%esp
f0127110:	68 f4 ac 13 f0       	push   $0xf013acf4
f0127115:	68 b0 0a 00 00       	push   $0xab0
f012711a:	68 da ac 13 f0       	push   $0xf013acda
f012711f:	e8 d7 90 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127124:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127127:	e8 2f 58 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012712c:	29 c3                	sub    %eax,%ebx
f012712e:	89 d8                	mov    %ebx,%eax
f0127130:	3d 00 01 00 00       	cmp    $0x100,%eax
f0127135:	74 17                	je     f012714e <test_kfreeall+0x1190>
f0127137:	83 ec 04             	sub    $0x4,%esp
f012713a:	68 5c ad 13 f0       	push   $0xf013ad5c
f012713f:	68 b1 0a 00 00       	push   $0xab1
f0127144:	68 da ac 13 f0       	push   $0xf013acda
f0127149:	e8 ad 90 fd ff       	call   f01001fb <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f012714e:	c7 85 8c fe ff ff ff 	movl   $0xfffff,-0x174(%ebp)
f0127155:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0127158:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f012715e:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0127161:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127168:	eb 0e                	jmp    f0127178 <test_kfreeall+0x11ba>
		{
			ptr[i] = 9 ;
f012716a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012716d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127170:	01 d0                	add    %edx,%eax
f0127172:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0127175:	ff 45 f4             	incl   -0xc(%ebp)
f0127178:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012717e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127181:	7f e7                	jg     f012716a <test_kfreeall+0x11ac>
		}
	}

	//kfree entire kernel heap
	{
		freeFrames = sys_calculate_free_frames() ;
f0127183:	e8 d3 57 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0127188:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012718b:	e8 ac cb fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127190:	89 45 cc             	mov    %eax,-0x34(%ebp)

		kfreeall();
f0127193:	e8 c6 08 fe ff       	call   f0107a5e <kfreeall>

		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127198:	e8 9f cb fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012719d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01271a0:	74 17                	je     f01271b9 <test_kfreeall+0x11fb>
f01271a2:	83 ec 04             	sub    $0x4,%esp
f01271a5:	68 f4 ac 13 f0       	push   $0xf013acf4
f01271aa:	68 c1 0a 00 00       	push   $0xac1
f01271af:	68 da ac 13 f0       	push   $0xf013acda
f01271b4:	e8 42 90 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE+ 2 + 3*Mega/4096 + 1 + 1 + 4 + 5 + 256) panic("Wrong kfree: pages in memory are not freed correctly");
f01271b9:	e8 9d 57 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01271be:	89 c2                	mov    %eax,%edx
f01271c0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01271c3:	89 d1                	mov    %edx,%ecx
f01271c5:	29 c1                	sub    %eax,%ecx
f01271c7:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01271ce:	10 00 00 
f01271d1:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01271d7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01271dc:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f01271e2:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01271e8:	ba 00 00 00 00       	mov    $0x0,%edx
f01271ed:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f01271f3:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01271f9:	29 d0                	sub    %edx,%eax
f01271fb:	89 c3                	mov    %eax,%ebx
f01271fd:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0127204:	10 00 00 
f0127207:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012720c:	0f b6 d0             	movzbl %al,%edx
f012720f:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0127215:	01 d0                	add    %edx,%eax
f0127217:	48                   	dec    %eax
f0127218:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012721e:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0127224:	ba 00 00 00 00       	mov    $0x0,%edx
f0127229:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012722f:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0127235:	29 d0                	sub    %edx,%eax
f0127237:	01 c3                	add    %eax,%ebx
f0127239:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0127240:	10 00 00 
f0127243:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127248:	0f b6 c0             	movzbl %al,%eax
f012724b:	c1 e0 04             	shl    $0x4,%eax
f012724e:	89 c2                	mov    %eax,%edx
f0127250:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0127256:	01 d0                	add    %edx,%eax
f0127258:	48                   	dec    %eax
f0127259:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012725f:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0127265:	ba 00 00 00 00       	mov    $0x0,%edx
f012726a:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0127270:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0127276:	29 d0                	sub    %edx,%eax
f0127278:	01 d8                	add    %ebx,%eax
f012727a:	05 00 40 00 00       	add    $0x4000,%eax
f012727f:	c1 e8 0c             	shr    $0xc,%eax
f0127282:	05 0d 04 00 00       	add    $0x40d,%eax
f0127287:	39 c1                	cmp    %eax,%ecx
f0127289:	74 17                	je     f01272a2 <test_kfreeall+0x12e4>
f012728b:	83 ec 04             	sub    $0x4,%esp
f012728e:	68 64 b4 13 f0       	push   $0xf013b464
f0127293:	68 c2 0a 00 00       	push   $0xac2
f0127298:	68 da ac 13 f0       	push   $0xf013acda
f012729d:	e8 59 8f fd ff       	call   f01001fb <_panic>

	//Check memory access after kfreeall
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01272a2:	83 ec 0c             	sub    $0xc,%esp
f01272a5:	6a 03                	push   $0x3
f01272a7:	e8 4f 5b fe ff       	call   f010cdfb <sys_bypassPageFault>
f01272ac:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f01272af:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01272b6:	e9 82 00 00 00       	jmp    f012733d <test_kfreeall+0x137f>
		{
			ptr = (char *) ptr_allocations[i];
f01272bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01272be:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f01272c5:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f01272c8:	8b 45 80             	mov    -0x80(%ebp),%eax
f01272cb:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01272ce:	e8 16 5b fe ff       	call   f010cde9 <sys_rcr2>
f01272d3:	89 c2                	mov    %eax,%edx
f01272d5:	8b 45 80             	mov    -0x80(%ebp),%eax
f01272d8:	39 c2                	cmp    %eax,%edx
f01272da:	74 17                	je     f01272f3 <test_kfreeall+0x1335>
f01272dc:	83 ec 04             	sub    $0x4,%esp
f01272df:	68 40 b5 13 f0       	push   $0xf013b540
f01272e4:	68 d0 0a 00 00       	push   $0xad0
f01272e9:	68 da ac 13 f0       	push   $0xf013acda
f01272ee:	e8 08 8f fd ff       	call   f01001fb <_panic>
			ptr[lastIndices[i]] = 10;
f01272f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01272f6:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f01272fd:	89 c2                	mov    %eax,%edx
f01272ff:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127302:	01 d0                	add    %edx,%eax
f0127304:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0127307:	e8 dd 5a fe ff       	call   f010cde9 <sys_rcr2>
f012730c:	89 c2                	mov    %eax,%edx
f012730e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127311:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0127318:	89 c1                	mov    %eax,%ecx
f012731a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012731d:	01 c8                	add    %ecx,%eax
f012731f:	39 c2                	cmp    %eax,%edx
f0127321:	74 17                	je     f012733a <test_kfreeall+0x137c>
f0127323:	83 ec 04             	sub    $0x4,%esp
f0127326:	68 40 b5 13 f0       	push   $0xf013b540
f012732b:	68 d2 0a 00 00       	push   $0xad2
f0127330:	68 da ac 13 f0       	push   $0xf013acda
f0127335:	e8 c1 8e fd ff       	call   f01001fb <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f012733a:	ff 45 f4             	incl   -0xc(%ebp)
f012733d:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0127341:	0f 8e 74 ff ff ff    	jle    f01272bb <test_kfreeall+0x12fd>
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}
		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0127347:	83 ec 0c             	sub    $0xc,%esp
f012734a:	6a 00                	push   $0x0
f012734c:	e8 aa 5a fe ff       	call   f010cdfb <sys_bypassPageFault>
f0127351:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfreeall
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0127354:	e8 02 56 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0127359:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012735c:	e8 db c9 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127361:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(4*Mega);
f0127364:	83 ec 0c             	sub    $0xc,%esp
f0127367:	68 00 00 40 00       	push   $0x400000
f012736c:	e8 8d 04 fe ff       	call   f01077fe <kmalloc>
f0127371:	83 c4 10             	add    $0x10,%esp
f0127374:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (KERNEL_HEAP_START)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f012737a:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0127380:	3d 00 00 00 f6       	cmp    $0xf6000000,%eax
f0127385:	74 17                	je     f012739e <test_kfreeall+0x13e0>
f0127387:	83 ec 04             	sub    $0x4,%esp
f012738a:	68 e4 b9 13 f0       	push   $0xf013b9e4
f012738f:	68 de 0a 00 00       	push   $0xade
f0127394:	68 da ac 13 f0       	push   $0xf013acda
f0127399:	e8 5d 8e fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012739e:	e8 99 c9 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01273a3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01273a6:	74 17                	je     f01273bf <test_kfreeall+0x1401>
f01273a8:	83 ec 04             	sub    $0x4,%esp
f01273ab:	68 f4 ac 13 f0       	push   $0xf013acf4
f01273b0:	68 df 0a 00 00       	push   $0xadf
f01273b5:	68 da ac 13 f0       	push   $0xf013acda
f01273ba:	e8 3c 8e fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f01273bf:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01273c2:	e8 94 55 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01273c7:	29 c3                	sub    %eax,%ebx
f01273c9:	89 d8                	mov    %ebx,%eax
f01273cb:	3d 00 04 00 00       	cmp    $0x400,%eax
f01273d0:	74 17                	je     f01273e9 <test_kfreeall+0x142b>
f01273d2:	83 ec 04             	sub    $0x4,%esp
f01273d5:	68 5c ad 13 f0       	push   $0xf013ad5c
f01273da:	68 e0 0a 00 00       	push   $0xae0
f01273df:	68 da ac 13 f0       	push   $0xf013acda
f01273e4:	e8 12 8e fd ff       	call   f01001fb <_panic>

		//12 KB
		freeFrames = sys_calculate_free_frames() ;
f01273e9:	e8 6d 55 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01273ee:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01273f1:	e8 46 c9 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01273f6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[11] = kmalloc(12*kilo);
f01273f9:	83 ec 0c             	sub    $0xc,%esp
f01273fc:	68 00 30 00 00       	push   $0x3000
f0127401:	e8 f8 03 fe ff       	call   f01077fe <kmalloc>
f0127406:	83 c4 10             	add    $0x10,%esp
f0127409:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		if ((uint32) ptr_allocations[11] != (KERNEL_HEAP_START + 4*Mega)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f012740f:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0127415:	3d 00 00 40 f6       	cmp    $0xf6400000,%eax
f012741a:	74 17                	je     f0127433 <test_kfreeall+0x1475>
f012741c:	83 ec 04             	sub    $0x4,%esp
f012741f:	68 e4 b9 13 f0       	push   $0xf013b9e4
f0127424:	68 e6 0a 00 00       	push   $0xae6
f0127429:	68 da ac 13 f0       	push   $0xf013acda
f012742e:	e8 c8 8d fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127433:	e8 04 c9 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127438:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012743b:	74 17                	je     f0127454 <test_kfreeall+0x1496>
f012743d:	83 ec 04             	sub    $0x4,%esp
f0127440:	68 f4 ac 13 f0       	push   $0xf013acf4
f0127445:	68 e7 0a 00 00       	push   $0xae7
f012744a:	68 da ac 13 f0       	push   $0xf013acda
f012744f:	e8 a7 8d fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 3) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127454:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127457:	e8 ff 54 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012745c:	29 c3                	sub    %eax,%ebx
f012745e:	89 d8                	mov    %ebx,%eax
f0127460:	83 f8 03             	cmp    $0x3,%eax
f0127463:	74 17                	je     f012747c <test_kfreeall+0x14be>
f0127465:	83 ec 04             	sub    $0x4,%esp
f0127468:	68 5c ad 13 f0       	push   $0xf013ad5c
f012746d:	68 e8 0a 00 00       	push   $0xae8
f0127472:	68 da ac 13 f0       	push   $0xf013acda
f0127477:	e8 7f 8d fd ff       	call   f01001fb <_panic>
	}

	//kfree one of the newly allocated space
	{
		//kfree 12 KB
		freeFrames = sys_calculate_free_frames() ;
f012747c:	e8 da 54 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0127481:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127484:	e8 b3 c8 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127489:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[11]);
f012748c:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0127492:	83 ec 0c             	sub    $0xc,%esp
f0127495:	50                   	push   %eax
f0127496:	e8 25 04 fe ff       	call   f01078c0 <kfree>
f012749b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012749e:	e8 99 c8 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01274a3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01274a6:	74 17                	je     f01274bf <test_kfreeall+0x1501>
f01274a8:	83 ec 04             	sub    $0x4,%esp
f01274ab:	68 f4 ac 13 f0       	push   $0xf013acf4
f01274b0:	68 f2 0a 00 00       	push   $0xaf2
f01274b5:	68 da ac 13 f0       	push   $0xf013acda
f01274ba:	e8 3c 8d fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01274bf:	e8 97 54 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01274c4:	89 c2                	mov    %eax,%edx
f01274c6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01274c9:	29 c2                	sub    %eax,%edx
f01274cb:	89 d0                	mov    %edx,%eax
f01274cd:	83 f8 03             	cmp    $0x3,%eax
f01274d0:	74 17                	je     f01274e9 <test_kfreeall+0x152b>
f01274d2:	83 ec 04             	sub    $0x4,%esp
f01274d5:	68 8c b5 13 f0       	push   $0xf013b58c
f01274da:	68 f3 0a 00 00       	push   $0xaf3
f01274df:	68 da ac 13 f0       	push   $0xf013acda
f01274e4:	e8 12 8d fd ff       	call   f01001fb <_panic>
	}

	//kfree non-exist item
	{
		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01274e9:	e8 6d 54 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01274ee:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01274f1:	e8 46 c8 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01274f6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f01274f9:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01274ff:	83 ec 0c             	sub    $0xc,%esp
f0127502:	50                   	push   %eax
f0127503:	e8 b8 03 fe ff       	call   f01078c0 <kfree>
f0127508:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012750b:	e8 2c c8 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127510:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127513:	74 17                	je     f012752c <test_kfreeall+0x156e>
f0127515:	83 ec 04             	sub    $0x4,%esp
f0127518:	68 f4 ac 13 f0       	push   $0xf013acf4
f012751d:	68 fc 0a 00 00       	push   $0xafc
f0127522:	68 da ac 13 f0       	push   $0xf013acda
f0127527:	e8 cf 8c fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012752c:	e8 2a 54 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0127531:	89 c2                	mov    %eax,%edx
f0127533:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127536:	39 c2                	cmp    %eax,%edx
f0127538:	74 17                	je     f0127551 <test_kfreeall+0x1593>
f012753a:	83 ec 04             	sub    $0x4,%esp
f012753d:	68 8c b5 13 f0       	push   $0xf013b58c
f0127542:	68 fd 0a 00 00       	push   $0xafd
f0127547:	68 da ac 13 f0       	push   $0xf013acda
f012754c:	e8 aa 8c fd ff       	call   f01001fb <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0127551:	e8 05 54 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0127556:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127559:	e8 de c7 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012755e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0127561:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0127567:	83 ec 0c             	sub    $0xc,%esp
f012756a:	50                   	push   %eax
f012756b:	e8 50 03 fe ff       	call   f01078c0 <kfree>
f0127570:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127573:	e8 c4 c7 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127578:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012757b:	74 17                	je     f0127594 <test_kfreeall+0x15d6>
f012757d:	83 ec 04             	sub    $0x4,%esp
f0127580:	68 f4 ac 13 f0       	push   $0xf013acf4
f0127585:	68 03 0b 00 00       	push   $0xb03
f012758a:	68 da ac 13 f0       	push   $0xf013acda
f012758f:	e8 67 8c fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127594:	e8 c2 53 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0127599:	89 c2                	mov    %eax,%edx
f012759b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012759e:	39 c2                	cmp    %eax,%edx
f01275a0:	74 17                	je     f01275b9 <test_kfreeall+0x15fb>
f01275a2:	83 ec 04             	sub    $0x4,%esp
f01275a5:	68 8c b5 13 f0       	push   $0xf013b58c
f01275aa:	68 04 0b 00 00       	push   $0xb04
f01275af:	68 da ac 13 f0       	push   $0xf013acda
f01275b4:	e8 42 8c fd ff       	call   f01001fb <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01275b9:	e8 9d 53 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01275be:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01275c1:	e8 76 c7 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01275c6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01275c9:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01275cf:	83 ec 0c             	sub    $0xc,%esp
f01275d2:	50                   	push   %eax
f01275d3:	e8 e8 02 fe ff       	call   f01078c0 <kfree>
f01275d8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01275db:	e8 5c c7 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01275e0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01275e3:	74 17                	je     f01275fc <test_kfreeall+0x163e>
f01275e5:	83 ec 04             	sub    $0x4,%esp
f01275e8:	68 f4 ac 13 f0       	push   $0xf013acf4
f01275ed:	68 0a 0b 00 00       	push   $0xb0a
f01275f2:	68 da ac 13 f0       	push   $0xf013acda
f01275f7:	e8 ff 8b fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01275fc:	e8 5a 53 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0127601:	89 c2                	mov    %eax,%edx
f0127603:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127606:	39 c2                	cmp    %eax,%edx
f0127608:	74 17                	je     f0127621 <test_kfreeall+0x1663>
f012760a:	83 ec 04             	sub    $0x4,%esp
f012760d:	68 8c b5 13 f0       	push   $0xf013b58c
f0127612:	68 0b 0b 00 00       	push   $0xb0b
f0127617:	68 da ac 13 f0       	push   $0xf013acda
f012761c:	e8 da 8b fd ff       	call   f01001fb <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0127621:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0127628:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012762f:	eb 48                	jmp    f0127679 <test_kfreeall+0x16bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0127631:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0127634:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0127639:	83 ec 04             	sub    $0x4,%esp
f012763c:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f0127642:	51                   	push   %ecx
f0127643:	52                   	push   %edx
f0127644:	50                   	push   %eax
f0127645:	e8 90 f3 fd ff       	call   f01069da <get_page_table>
f012764a:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f012764d:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0127653:	85 c0                	test   %eax,%eax
f0127655:	75 17                	jne    f012766e <test_kfreeall+0x16b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0127657:	83 ec 04             	sub    $0x4,%esp
f012765a:	68 dc b5 13 f0       	push   $0xf013b5dc
f012765f:	68 18 0b 00 00       	push   $0xb18
f0127664:	68 da ac 13 f0       	push   $0xf013acda
f0127669:	e8 8d 8b fd ff       	call   f01001fb <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f012766e:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0127675:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0127679:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012767d:	78 b2                	js     f0127631 <test_kfreeall+0x1673>
f012767f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0127683:	7f 09                	jg     f012768e <test_kfreeall+0x16d0>
f0127685:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f012768c:	76 a3                	jbe    f0127631 <test_kfreeall+0x1673>
			}
		}
	}


	cprintf("\nCongratulations!! your modification is run successfully.\n");
f012768e:	83 ec 0c             	sub    $0xc,%esp
f0127691:	68 38 ba 13 f0       	push   $0xf013ba38
f0127696:	e8 e7 95 fd ff       	call   f0100c82 <cprintf>
f012769b:	83 c4 10             	add    $0x10,%esp

	return 1;
f012769e:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01276a3:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01276a6:	5b                   	pop    %ebx
f01276a7:	5f                   	pop    %edi
f01276a8:	5d                   	pop    %ebp
f01276a9:	c3                   	ret    

f01276aa <test_kexpand>:


extern void kexpand(uint32 newSize) ;

int test_kexpand()
{
f01276aa:	55                   	push   %ebp
f01276ab:	89 e5                	mov    %esp,%ebp
f01276ad:	57                   	push   %edi
f01276ae:	53                   	push   %ebx
f01276af:	81 ec 90 01 00 00    	sub    $0x190,%esp
	char minByte = 1<<7;
f01276b5:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f01276b9:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f01276bd:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f01276c3:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f01276c9:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f01276d0:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01276d7:	e8 7f 52 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01276dc:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01276df:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f01276e5:	b9 14 00 00 00       	mov    $0x14,%ecx
f01276ea:	b8 00 00 00 00       	mov    $0x0,%eax
f01276ef:	89 d7                	mov    %edx,%edi
f01276f1:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f01276f3:	8d 95 6c fe ff ff    	lea    -0x194(%ebp),%edx
f01276f9:	b9 14 00 00 00       	mov    $0x14,%ecx
f01276fe:	b8 00 00 00 00       	mov    $0x0,%eax
f0127703:	89 d7                	mov    %edx,%edi
f0127705:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127707:	e8 4f 52 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012770c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012770f:	e8 28 c6 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127714:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0127717:	83 ec 0c             	sub    $0xc,%esp
f012771a:	68 00 fc 1f 00       	push   $0x1ffc00
f012771f:	e8 da 00 fe ff       	call   f01077fe <kmalloc>
f0127724:	83 c4 10             	add    $0x10,%esp
f0127727:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012772d:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0127733:	89 c1                	mov    %eax,%ecx
f0127735:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f012773c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012773f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127744:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0127747:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012774a:	ba 00 00 00 00       	mov    $0x0,%edx
f012774f:	f7 75 d4             	divl   -0x2c(%ebp)
f0127752:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127755:	29 d0                	sub    %edx,%eax
f0127757:	89 c3                	mov    %eax,%ebx
f0127759:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0127760:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127765:	0f b6 d0             	movzbl %al,%edx
f0127768:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012776b:	01 d0                	add    %edx,%eax
f012776d:	48                   	dec    %eax
f012776e:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0127771:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127774:	ba 00 00 00 00       	mov    $0x0,%edx
f0127779:	f7 75 cc             	divl   -0x34(%ebp)
f012777c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012777f:	29 d0                	sub    %edx,%eax
f0127781:	01 c3                	add    %eax,%ebx
f0127783:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f012778a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012778f:	0f b6 c0             	movzbl %al,%eax
f0127792:	c1 e0 04             	shl    $0x4,%eax
f0127795:	89 c2                	mov    %eax,%edx
f0127797:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012779a:	01 d0                	add    %edx,%eax
f012779c:	48                   	dec    %eax
f012779d:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01277a0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01277a3:	ba 00 00 00 00       	mov    $0x0,%edx
f01277a8:	f7 75 c4             	divl   -0x3c(%ebp)
f01277ab:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01277ae:	29 d0                	sub    %edx,%eax
f01277b0:	01 d8                	add    %ebx,%eax
f01277b2:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01277b7:	39 c1                	cmp    %eax,%ecx
f01277b9:	74 17                	je     f01277d2 <test_kexpand+0x128>
f01277bb:	83 ec 04             	sub    $0x4,%esp
f01277be:	68 c0 ad 13 f0       	push   $0xf013adc0
f01277c3:	68 43 0b 00 00       	push   $0xb43
f01277c8:	68 da ac 13 f0       	push   $0xf013acda
f01277cd:	e8 29 8a fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01277d2:	e8 65 c5 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01277d7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01277da:	74 17                	je     f01277f3 <test_kexpand+0x149>
f01277dc:	83 ec 04             	sub    $0x4,%esp
f01277df:	68 f4 ac 13 f0       	push   $0xf013acf4
f01277e4:	68 44 0b 00 00       	push   $0xb44
f01277e9:	68 da ac 13 f0       	push   $0xf013acda
f01277ee:	e8 08 8a fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01277f3:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01277f6:	e8 60 51 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01277fb:	29 c3                	sub    %eax,%ebx
f01277fd:	89 d8                	mov    %ebx,%eax
f01277ff:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127804:	74 17                	je     f012781d <test_kexpand+0x173>
f0127806:	83 ec 04             	sub    $0x4,%esp
f0127809:	68 5c ad 13 f0       	push   $0xf013ad5c
f012780e:	68 45 0b 00 00       	push   $0xb45
f0127813:	68 da ac 13 f0       	push   $0xf013acda
f0127818:	e8 de 89 fd ff       	call   f01001fb <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f012781d:	c7 85 bc fe ff ff ff 	movl   $0x1ffbff,-0x144(%ebp)
f0127824:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127827:	e8 2f 51 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012782c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012782f:	e8 08 c5 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127834:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0127837:	83 ec 0c             	sub    $0xc,%esp
f012783a:	68 00 fc 1f 00       	push   $0x1ffc00
f012783f:	e8 ba ff fd ff       	call   f01077fe <kmalloc>
f0127844:	83 c4 10             	add    $0x10,%esp
f0127847:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012784d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0127853:	89 c1                	mov    %eax,%ecx
f0127855:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f012785c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012785f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127864:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0127867:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012786a:	ba 00 00 00 00       	mov    $0x0,%edx
f012786f:	f7 75 bc             	divl   -0x44(%ebp)
f0127872:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127875:	29 d0                	sub    %edx,%eax
f0127877:	89 c3                	mov    %eax,%ebx
f0127879:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0127880:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127885:	0f b6 d0             	movzbl %al,%edx
f0127888:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012788b:	01 d0                	add    %edx,%eax
f012788d:	48                   	dec    %eax
f012788e:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0127891:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127894:	ba 00 00 00 00       	mov    $0x0,%edx
f0127899:	f7 75 b4             	divl   -0x4c(%ebp)
f012789c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012789f:	29 d0                	sub    %edx,%eax
f01278a1:	01 c3                	add    %eax,%ebx
f01278a3:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01278aa:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01278af:	0f b6 c0             	movzbl %al,%eax
f01278b2:	c1 e0 04             	shl    $0x4,%eax
f01278b5:	89 c2                	mov    %eax,%edx
f01278b7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01278ba:	01 d0                	add    %edx,%eax
f01278bc:	48                   	dec    %eax
f01278bd:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01278c0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01278c3:	ba 00 00 00 00       	mov    $0x0,%edx
f01278c8:	f7 75 ac             	divl   -0x54(%ebp)
f01278cb:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01278ce:	29 d0                	sub    %edx,%eax
f01278d0:	01 d8                	add    %ebx,%eax
f01278d2:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01278d7:	39 c1                	cmp    %eax,%ecx
f01278d9:	74 17                	je     f01278f2 <test_kexpand+0x248>
f01278db:	83 ec 04             	sub    $0x4,%esp
f01278de:	68 c0 ad 13 f0       	push   $0xf013adc0
f01278e3:	68 4c 0b 00 00       	push   $0xb4c
f01278e8:	68 da ac 13 f0       	push   $0xf013acda
f01278ed:	e8 09 89 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01278f2:	e8 45 c4 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01278f7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01278fa:	74 17                	je     f0127913 <test_kexpand+0x269>
f01278fc:	83 ec 04             	sub    $0x4,%esp
f01278ff:	68 f4 ac 13 f0       	push   $0xf013acf4
f0127904:	68 4d 0b 00 00       	push   $0xb4d
f0127909:	68 da ac 13 f0       	push   $0xf013acda
f012790e:	e8 e8 88 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127913:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127916:	e8 40 50 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012791b:	29 c3                	sub    %eax,%ebx
f012791d:	89 d8                	mov    %ebx,%eax
f012791f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127924:	74 17                	je     f012793d <test_kexpand+0x293>
f0127926:	83 ec 04             	sub    $0x4,%esp
f0127929:	68 5c ad 13 f0       	push   $0xf013ad5c
f012792e:	68 4e 0b 00 00       	push   $0xb4e
f0127933:	68 da ac 13 f0       	push   $0xf013acda
f0127938:	e8 be 88 fd ff       	call   f01001fb <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f012793d:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f0127944:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127947:	e8 0f 50 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012794c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012794f:	e8 e8 c3 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127954:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0127957:	83 ec 0c             	sub    $0xc,%esp
f012795a:	68 00 08 00 00       	push   $0x800
f012795f:	e8 9a fe fd ff       	call   f01077fe <kmalloc>
f0127964:	83 c4 10             	add    $0x10,%esp
f0127967:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012796d:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0127973:	89 c1                	mov    %eax,%ecx
f0127975:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012797c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012797f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127984:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0127987:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012798a:	ba 00 00 00 00       	mov    $0x0,%edx
f012798f:	f7 75 a4             	divl   -0x5c(%ebp)
f0127992:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0127995:	29 d0                	sub    %edx,%eax
f0127997:	89 c3                	mov    %eax,%ebx
f0127999:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f01279a0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01279a5:	0f b6 d0             	movzbl %al,%edx
f01279a8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01279ab:	01 d0                	add    %edx,%eax
f01279ad:	48                   	dec    %eax
f01279ae:	89 45 98             	mov    %eax,-0x68(%ebp)
f01279b1:	8b 45 98             	mov    -0x68(%ebp),%eax
f01279b4:	ba 00 00 00 00       	mov    $0x0,%edx
f01279b9:	f7 75 9c             	divl   -0x64(%ebp)
f01279bc:	8b 45 98             	mov    -0x68(%ebp),%eax
f01279bf:	29 d0                	sub    %edx,%eax
f01279c1:	01 c3                	add    %eax,%ebx
f01279c3:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01279ca:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01279cf:	0f b6 c0             	movzbl %al,%eax
f01279d2:	c1 e0 04             	shl    $0x4,%eax
f01279d5:	89 c2                	mov    %eax,%edx
f01279d7:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01279da:	01 d0                	add    %edx,%eax
f01279dc:	48                   	dec    %eax
f01279dd:	89 45 90             	mov    %eax,-0x70(%ebp)
f01279e0:	8b 45 90             	mov    -0x70(%ebp),%eax
f01279e3:	ba 00 00 00 00       	mov    $0x0,%edx
f01279e8:	f7 75 94             	divl   -0x6c(%ebp)
f01279eb:	8b 45 90             	mov    -0x70(%ebp),%eax
f01279ee:	29 d0                	sub    %edx,%eax
f01279f0:	01 d8                	add    %ebx,%eax
f01279f2:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01279f7:	39 c1                	cmp    %eax,%ecx
f01279f9:	74 17                	je     f0127a12 <test_kexpand+0x368>
f01279fb:	83 ec 04             	sub    $0x4,%esp
f01279fe:	68 c0 ad 13 f0       	push   $0xf013adc0
f0127a03:	68 55 0b 00 00       	push   $0xb55
f0127a08:	68 da ac 13 f0       	push   $0xf013acda
f0127a0d:	e8 e9 87 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127a12:	e8 25 c3 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127a17:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127a1a:	74 17                	je     f0127a33 <test_kexpand+0x389>
f0127a1c:	83 ec 04             	sub    $0x4,%esp
f0127a1f:	68 f4 ac 13 f0       	push   $0xf013acf4
f0127a24:	68 56 0b 00 00       	push   $0xb56
f0127a29:	68 da ac 13 f0       	push   $0xf013acda
f0127a2e:	e8 c8 87 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127a33:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127a36:	e8 20 4f fe ff       	call   f010c95b <sys_calculate_free_frames>
f0127a3b:	29 c3                	sub    %eax,%ebx
f0127a3d:	89 d8                	mov    %ebx,%eax
f0127a3f:	83 f8 01             	cmp    $0x1,%eax
f0127a42:	74 17                	je     f0127a5b <test_kexpand+0x3b1>
f0127a44:	83 ec 04             	sub    $0x4,%esp
f0127a47:	68 5c ad 13 f0       	push   $0xf013ad5c
f0127a4c:	68 57 0b 00 00       	push   $0xb57
f0127a51:	68 da ac 13 f0       	push   $0xf013acda
f0127a56:	e8 a0 87 fd ff       	call   f01001fb <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0127a5b:	c7 85 c4 fe ff ff ff 	movl   $0x7ff,-0x13c(%ebp)
f0127a62:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0127a65:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0127a6b:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0127a6e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127a75:	eb 0e                	jmp    f0127a85 <test_kexpand+0x3db>
		{
			ptr[i] = 2 ;
f0127a77:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127a7a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127a7d:	01 d0                	add    %edx,%eax
f0127a7f:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0127a82:	ff 45 f4             	incl   -0xc(%ebp)
f0127a85:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0127a8b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127a8e:	7f e7                	jg     f0127a77 <test_kexpand+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127a90:	e8 c6 4e fe ff       	call   f010c95b <sys_calculate_free_frames>
f0127a95:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127a98:	e8 9f c2 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127a9d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0127aa0:	83 ec 0c             	sub    $0xc,%esp
f0127aa3:	68 00 08 00 00       	push   $0x800
f0127aa8:	e8 51 fd fd ff       	call   f01077fe <kmalloc>
f0127aad:	83 c4 10             	add    $0x10,%esp
f0127ab0:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127ab6:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0127abc:	89 c1                	mov    %eax,%ecx
f0127abe:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0127ac5:	8b 45 88             	mov    -0x78(%ebp),%eax
f0127ac8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127acd:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0127ad0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0127ad3:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ad8:	f7 75 88             	divl   -0x78(%ebp)
f0127adb:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0127ade:	29 d0                	sub    %edx,%eax
f0127ae0:	89 c3                	mov    %eax,%ebx
f0127ae2:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0127ae9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127aee:	0f b6 d0             	movzbl %al,%edx
f0127af1:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127af4:	01 d0                	add    %edx,%eax
f0127af6:	48                   	dec    %eax
f0127af7:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0127afd:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0127b03:	ba 00 00 00 00       	mov    $0x0,%edx
f0127b08:	f7 75 80             	divl   -0x80(%ebp)
f0127b0b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0127b11:	29 d0                	sub    %edx,%eax
f0127b13:	01 c3                	add    %eax,%ebx
f0127b15:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0127b1c:	10 00 00 
f0127b1f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127b24:	0f b6 c0             	movzbl %al,%eax
f0127b27:	c1 e0 04             	shl    $0x4,%eax
f0127b2a:	89 c2                	mov    %eax,%edx
f0127b2c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0127b32:	01 d0                	add    %edx,%eax
f0127b34:	48                   	dec    %eax
f0127b35:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0127b3b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0127b41:	ba 00 00 00 00       	mov    $0x0,%edx
f0127b46:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0127b4c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0127b52:	29 d0                	sub    %edx,%eax
f0127b54:	01 d8                	add    %ebx,%eax
f0127b56:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0127b5b:	39 c1                	cmp    %eax,%ecx
f0127b5d:	74 17                	je     f0127b76 <test_kexpand+0x4cc>
f0127b5f:	83 ec 04             	sub    $0x4,%esp
f0127b62:	68 c0 ad 13 f0       	push   $0xf013adc0
f0127b67:	68 63 0b 00 00       	push   $0xb63
f0127b6c:	68 da ac 13 f0       	push   $0xf013acda
f0127b71:	e8 85 86 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127b76:	e8 c1 c1 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127b7b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127b7e:	74 17                	je     f0127b97 <test_kexpand+0x4ed>
f0127b80:	83 ec 04             	sub    $0x4,%esp
f0127b83:	68 f4 ac 13 f0       	push   $0xf013acf4
f0127b88:	68 64 0b 00 00       	push   $0xb64
f0127b8d:	68 da ac 13 f0       	push   $0xf013acda
f0127b92:	e8 64 86 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127b97:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127b9a:	e8 bc 4d fe ff       	call   f010c95b <sys_calculate_free_frames>
f0127b9f:	29 c3                	sub    %eax,%ebx
f0127ba1:	89 d8                	mov    %ebx,%eax
f0127ba3:	83 f8 01             	cmp    $0x1,%eax
f0127ba6:	74 17                	je     f0127bbf <test_kexpand+0x515>
f0127ba8:	83 ec 04             	sub    $0x4,%esp
f0127bab:	68 5c ad 13 f0       	push   $0xf013ad5c
f0127bb0:	68 65 0b 00 00       	push   $0xb65
f0127bb5:	68 da ac 13 f0       	push   $0xf013acda
f0127bba:	e8 3c 86 fd ff       	call   f01001fb <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0127bbf:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f0127bc6:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0127bc9:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0127bcf:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0127bd2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127bd9:	eb 0e                	jmp    f0127be9 <test_kexpand+0x53f>
		{
			ptr[i] = 3 ;
f0127bdb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127bde:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127be1:	01 d0                	add    %edx,%eax
f0127be3:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0127be6:	ff 45 f4             	incl   -0xc(%ebp)
f0127be9:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0127bef:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127bf2:	7f e7                	jg     f0127bdb <test_kexpand+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0127bf4:	e8 62 4d fe ff       	call   f010c95b <sys_calculate_free_frames>
f0127bf9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127bfc:	e8 3b c1 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127c01:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0127c04:	83 ec 0c             	sub    $0xc,%esp
f0127c07:	68 00 1c 00 00       	push   $0x1c00
f0127c0c:	e8 ed fb fd ff       	call   f01077fe <kmalloc>
f0127c11:	83 c4 10             	add    $0x10,%esp
f0127c14:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127c1a:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0127c20:	89 c1                	mov    %eax,%ecx
f0127c22:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0127c29:	10 00 00 
f0127c2c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0127c32:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127c37:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0127c3d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0127c43:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c48:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0127c4e:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0127c54:	29 d0                	sub    %edx,%eax
f0127c56:	89 c3                	mov    %eax,%ebx
f0127c58:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0127c5f:	10 00 00 
f0127c62:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127c67:	0f b6 d0             	movzbl %al,%edx
f0127c6a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0127c70:	01 d0                	add    %edx,%eax
f0127c72:	48                   	dec    %eax
f0127c73:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0127c79:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0127c7f:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c84:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0127c8a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0127c90:	29 d0                	sub    %edx,%eax
f0127c92:	01 c3                	add    %eax,%ebx
f0127c94:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0127c9b:	10 00 00 
f0127c9e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127ca3:	0f b6 c0             	movzbl %al,%eax
f0127ca6:	c1 e0 04             	shl    $0x4,%eax
f0127ca9:	89 c2                	mov    %eax,%edx
f0127cab:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0127cb1:	01 d0                	add    %edx,%eax
f0127cb3:	48                   	dec    %eax
f0127cb4:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0127cba:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0127cc0:	ba 00 00 00 00       	mov    $0x0,%edx
f0127cc5:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0127ccb:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0127cd1:	29 d0                	sub    %edx,%eax
f0127cd3:	01 d8                	add    %ebx,%eax
f0127cd5:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0127cda:	39 c1                	cmp    %eax,%ecx
f0127cdc:	74 17                	je     f0127cf5 <test_kexpand+0x64b>
f0127cde:	83 ec 04             	sub    $0x4,%esp
f0127ce1:	68 c0 ad 13 f0       	push   $0xf013adc0
f0127ce6:	68 71 0b 00 00       	push   $0xb71
f0127ceb:	68 da ac 13 f0       	push   $0xf013acda
f0127cf0:	e8 06 85 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127cf5:	e8 42 c0 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127cfa:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127cfd:	74 17                	je     f0127d16 <test_kexpand+0x66c>
f0127cff:	83 ec 04             	sub    $0x4,%esp
f0127d02:	68 f4 ac 13 f0       	push   $0xf013acf4
f0127d07:	68 72 0b 00 00       	push   $0xb72
f0127d0c:	68 da ac 13 f0       	push   $0xf013acda
f0127d11:	e8 e5 84 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127d16:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127d19:	e8 3d 4c fe ff       	call   f010c95b <sys_calculate_free_frames>
f0127d1e:	29 c3                	sub    %eax,%ebx
f0127d20:	89 d8                	mov    %ebx,%eax
f0127d22:	83 f8 02             	cmp    $0x2,%eax
f0127d25:	74 17                	je     f0127d3e <test_kexpand+0x694>
f0127d27:	83 ec 04             	sub    $0x4,%esp
f0127d2a:	68 5c ad 13 f0       	push   $0xf013ad5c
f0127d2f:	68 73 0b 00 00       	push   $0xb73
f0127d34:	68 da ac 13 f0       	push   $0xf013acda
f0127d39:	e8 bd 84 fd ff       	call   f01001fb <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0127d3e:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f0127d45:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0127d48:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0127d4e:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0127d51:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127d58:	eb 0e                	jmp    f0127d68 <test_kexpand+0x6be>
		{
			ptr[i] = 4 ;
f0127d5a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127d5d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127d60:	01 d0                	add    %edx,%eax
f0127d62:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0127d65:	ff 45 f4             	incl   -0xc(%ebp)
f0127d68:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0127d6e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127d71:	7f e7                	jg     f0127d5a <test_kexpand+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0127d73:	e8 e3 4b fe ff       	call   f010c95b <sys_calculate_free_frames>
f0127d78:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127d7b:	e8 bc bf fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127d80:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0127d83:	83 ec 0c             	sub    $0xc,%esp
f0127d86:	68 00 fc 2f 00       	push   $0x2ffc00
f0127d8b:	e8 6e fa fd ff       	call   f01077fe <kmalloc>
f0127d90:	83 c4 10             	add    $0x10,%esp
f0127d93:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127d99:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0127d9f:	89 c1                	mov    %eax,%ecx
f0127da1:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0127da8:	10 00 00 
f0127dab:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0127db1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127db6:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0127dbc:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0127dc2:	ba 00 00 00 00       	mov    $0x0,%edx
f0127dc7:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0127dcd:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0127dd3:	29 d0                	sub    %edx,%eax
f0127dd5:	89 c3                	mov    %eax,%ebx
f0127dd7:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0127dde:	10 00 00 
f0127de1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127de6:	0f b6 d0             	movzbl %al,%edx
f0127de9:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0127def:	01 d0                	add    %edx,%eax
f0127df1:	48                   	dec    %eax
f0127df2:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0127df8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0127dfe:	ba 00 00 00 00       	mov    $0x0,%edx
f0127e03:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0127e09:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0127e0f:	29 d0                	sub    %edx,%eax
f0127e11:	01 c3                	add    %eax,%ebx
f0127e13:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0127e1a:	10 00 00 
f0127e1d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127e22:	0f b6 c0             	movzbl %al,%eax
f0127e25:	c1 e0 04             	shl    $0x4,%eax
f0127e28:	89 c2                	mov    %eax,%edx
f0127e2a:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0127e30:	01 d0                	add    %edx,%eax
f0127e32:	48                   	dec    %eax
f0127e33:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0127e39:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0127e3f:	ba 00 00 00 00       	mov    $0x0,%edx
f0127e44:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0127e4a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0127e50:	29 d0                	sub    %edx,%eax
f0127e52:	01 d8                	add    %ebx,%eax
f0127e54:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0127e59:	39 c1                	cmp    %eax,%ecx
f0127e5b:	74 17                	je     f0127e74 <test_kexpand+0x7ca>
f0127e5d:	83 ec 04             	sub    $0x4,%esp
f0127e60:	68 c0 ad 13 f0       	push   $0xf013adc0
f0127e65:	68 7f 0b 00 00       	push   $0xb7f
f0127e6a:	68 da ac 13 f0       	push   $0xf013acda
f0127e6f:	e8 87 83 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127e74:	e8 c3 be fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127e79:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127e7c:	74 17                	je     f0127e95 <test_kexpand+0x7eb>
f0127e7e:	83 ec 04             	sub    $0x4,%esp
f0127e81:	68 f4 ac 13 f0       	push   $0xf013acf4
f0127e86:	68 80 0b 00 00       	push   $0xb80
f0127e8b:	68 da ac 13 f0       	push   $0xf013acda
f0127e90:	e8 66 83 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127e95:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127e98:	e8 be 4a fe ff       	call   f010c95b <sys_calculate_free_frames>
f0127e9d:	29 c3                	sub    %eax,%ebx
f0127e9f:	89 d8                	mov    %ebx,%eax
f0127ea1:	3d 00 03 00 00       	cmp    $0x300,%eax
f0127ea6:	74 17                	je     f0127ebf <test_kexpand+0x815>
f0127ea8:	83 ec 04             	sub    $0x4,%esp
f0127eab:	68 5c ad 13 f0       	push   $0xf013ad5c
f0127eb0:	68 81 0b 00 00       	push   $0xb81
f0127eb5:	68 da ac 13 f0       	push   $0xf013acda
f0127eba:	e8 3c 83 fd ff       	call   f01001fb <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0127ebf:	c7 85 d0 fe ff ff ff 	movl   $0x2ffbff,-0x130(%ebp)
f0127ec6:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0127ec9:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0127ecf:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0127ed2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127ed9:	eb 0e                	jmp    f0127ee9 <test_kexpand+0x83f>
		{
			ptr[i] = 5 ;
f0127edb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127ede:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127ee1:	01 d0                	add    %edx,%eax
f0127ee3:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0127ee6:	ff 45 f4             	incl   -0xc(%ebp)
f0127ee9:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0127eef:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127ef2:	7f e7                	jg     f0127edb <test_kexpand+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0127ef4:	e8 62 4a fe ff       	call   f010c95b <sys_calculate_free_frames>
f0127ef9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127efc:	e8 3b be fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127f01:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0127f04:	83 ec 0c             	sub    $0xc,%esp
f0127f07:	68 00 00 60 00       	push   $0x600000
f0127f0c:	e8 ed f8 fd ff       	call   f01077fe <kmalloc>
f0127f11:	83 c4 10             	add    $0x10,%esp
f0127f14:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127f1a:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0127f20:	89 c1                	mov    %eax,%ecx
f0127f22:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0127f29:	10 00 00 
f0127f2c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0127f32:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127f37:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0127f3d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0127f43:	ba 00 00 00 00       	mov    $0x0,%edx
f0127f48:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0127f4e:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0127f54:	29 d0                	sub    %edx,%eax
f0127f56:	89 c3                	mov    %eax,%ebx
f0127f58:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0127f5f:	10 00 00 
f0127f62:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127f67:	0f b6 d0             	movzbl %al,%edx
f0127f6a:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0127f70:	01 d0                	add    %edx,%eax
f0127f72:	48                   	dec    %eax
f0127f73:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0127f79:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0127f7f:	ba 00 00 00 00       	mov    $0x0,%edx
f0127f84:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0127f8a:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0127f90:	29 d0                	sub    %edx,%eax
f0127f92:	01 c3                	add    %eax,%ebx
f0127f94:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0127f9b:	10 00 00 
f0127f9e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127fa3:	0f b6 c0             	movzbl %al,%eax
f0127fa6:	c1 e0 04             	shl    $0x4,%eax
f0127fa9:	89 c2                	mov    %eax,%edx
f0127fab:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0127fb1:	01 d0                	add    %edx,%eax
f0127fb3:	48                   	dec    %eax
f0127fb4:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0127fba:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0127fc0:	ba 00 00 00 00       	mov    $0x0,%edx
f0127fc5:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0127fcb:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0127fd1:	29 d0                	sub    %edx,%eax
f0127fd3:	01 d8                	add    %ebx,%eax
f0127fd5:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0127fda:	39 c1                	cmp    %eax,%ecx
f0127fdc:	74 17                	je     f0127ff5 <test_kexpand+0x94b>
f0127fde:	83 ec 04             	sub    $0x4,%esp
f0127fe1:	68 c0 ad 13 f0       	push   $0xf013adc0
f0127fe6:	68 8d 0b 00 00       	push   $0xb8d
f0127feb:	68 da ac 13 f0       	push   $0xf013acda
f0127ff0:	e8 06 82 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127ff5:	e8 42 bd fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127ffa:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127ffd:	74 17                	je     f0128016 <test_kexpand+0x96c>
f0127fff:	83 ec 04             	sub    $0x4,%esp
f0128002:	68 f4 ac 13 f0       	push   $0xf013acf4
f0128007:	68 8e 0b 00 00       	push   $0xb8e
f012800c:	68 da ac 13 f0       	push   $0xf013acda
f0128011:	e8 e5 81 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128016:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128019:	e8 3d 49 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012801e:	29 c3                	sub    %eax,%ebx
f0128020:	89 d8                	mov    %ebx,%eax
f0128022:	3d 00 06 00 00       	cmp    $0x600,%eax
f0128027:	74 17                	je     f0128040 <test_kexpand+0x996>
f0128029:	83 ec 04             	sub    $0x4,%esp
f012802c:	68 5c ad 13 f0       	push   $0xf013ad5c
f0128031:	68 8f 0b 00 00       	push   $0xb8f
f0128036:	68 da ac 13 f0       	push   $0xf013acda
f012803b:	e8 bb 81 fd ff       	call   f01001fb <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0128040:	c7 85 d4 fe ff ff ff 	movl   $0x17ffff,-0x12c(%ebp)
f0128047:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f012804a:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0128050:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0128056:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012805d:	eb 1a                	jmp    f0128079 <test_kexpand+0x9cf>
		{
			arr[i] = i ;
f012805f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128062:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128069:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012806f:	01 c2                	add    %eax,%edx
f0128071:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128074:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0128076:	ff 45 f4             	incl   -0xc(%ebp)
f0128079:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012807f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128082:	7d db                	jge    f012805f <test_kexpand+0x9b5>
			arr[i] = i ;
		}
	}

	//Expand last allocated variable to 7 MB instead of 6 MB
	int newLastIndex = (7*Mega)/sizeof(uint32) - 1;
f0128084:	c7 85 24 ff ff ff ff 	movl   $0x1bffff,-0xdc(%ebp)
f012808b:	ff 1b 00 
	{
		freeFrames = sys_calculate_free_frames() ;
f012808e:	e8 c8 48 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0128093:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128096:	e8 a1 bc fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012809b:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(7*Mega) ;
f012809e:	83 ec 0c             	sub    $0xc,%esp
f01280a1:	68 00 00 70 00       	push   $0x700000
f01280a6:	e8 ed f9 fd ff       	call   f0107a98 <kexpand>
f01280ab:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01280ae:	e8 89 bc fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01280b3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01280b6:	74 19                	je     f01280d1 <test_kexpand+0xa27>
f01280b8:	68 74 ba 13 f0       	push   $0xf013ba74
f01280bd:	68 a5 ba 13 f0       	push   $0xf013baa5
f01280c2:	68 a0 0b 00 00       	push   $0xba0
f01280c7:	68 da ac 13 f0       	push   $0xf013acda
f01280cc:	e8 2a 81 fd ff       	call   f01001fb <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 256) ;
f01280d1:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01280d4:	e8 82 48 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01280d9:	29 c3                	sub    %eax,%ebx
f01280db:	89 d8                	mov    %ebx,%eax
f01280dd:	3d 00 01 00 00       	cmp    $0x100,%eax
f01280e2:	74 19                	je     f01280fd <test_kexpand+0xa53>
f01280e4:	68 bc ba 13 f0       	push   $0xf013babc
f01280e9:	68 a5 ba 13 f0       	push   $0xf013baa5
f01280ee:	68 a1 0b 00 00       	push   $0xba1
f01280f3:	68 da ac 13 f0       	push   $0xf013acda
f01280f8:	e8 fe 80 fd ff       	call   f01001fb <_panic>

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f01280fd:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0128103:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0128106:	eb 1a                	jmp    f0128122 <test_kexpand+0xa78>
		{
			arr[i] = i ;
f0128108:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012810b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128112:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128118:	01 c2                	add    %eax,%edx
f012811a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012811d:	89 02                	mov    %eax,(%edx)
		kexpand(7*Mega) ;

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
		assert(freeFrames - sys_calculate_free_frames() == 256) ;

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f012811f:	ff 45 f4             	incl   -0xc(%ebp)
f0128122:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128125:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f012812b:	7c db                	jl     f0128108 <test_kexpand+0xa5e>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f012812d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128134:	eb 37                	jmp    f012816d <test_kexpand+0xac3>
		{
			assert(arr[i] ==i);
f0128136:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128139:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128140:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128146:	01 d0                	add    %edx,%eax
f0128148:	8b 10                	mov    (%eax),%edx
f012814a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012814d:	39 c2                	cmp    %eax,%edx
f012814f:	74 19                	je     f012816a <test_kexpand+0xac0>
f0128151:	68 ec ba 13 f0       	push   $0xf013baec
f0128156:	68 a5 ba 13 f0       	push   $0xf013baa5
f012815b:	68 ad 0b 00 00       	push   $0xbad
f0128160:	68 da ac 13 f0       	push   $0xf013acda
f0128165:	e8 91 80 fd ff       	call   f01001fb <_panic>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f012816a:	ff 45 f4             	incl   -0xc(%ebp)
f012816d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128170:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0128176:	7c be                	jl     f0128136 <test_kexpand+0xa8c>
		}
	}

	//Expand it again to 10 MB instead of 7 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128178:	e8 de 47 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012817d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128180:	e8 b7 bb fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128185:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(10*Mega) ;
f0128188:	83 ec 0c             	sub    $0xc,%esp
f012818b:	68 00 00 a0 00       	push   $0xa00000
f0128190:	e8 03 f9 fd ff       	call   f0107a98 <kexpand>
f0128195:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128198:	e8 9f bb fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012819d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01281a0:	74 19                	je     f01281bb <test_kexpand+0xb11>
f01281a2:	68 74 ba 13 f0       	push   $0xf013ba74
f01281a7:	68 a5 ba 13 f0       	push   $0xf013baa5
f01281ac:	68 b8 0b 00 00       	push   $0xbb8
f01281b1:	68 da ac 13 f0       	push   $0xf013acda
f01281b6:	e8 40 80 fd ff       	call   f01001fb <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 768) ;
f01281bb:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01281be:	e8 98 47 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01281c3:	29 c3                	sub    %eax,%ebx
f01281c5:	89 d8                	mov    %ebx,%eax
f01281c7:	3d 00 03 00 00       	cmp    $0x300,%eax
f01281cc:	74 19                	je     f01281e7 <test_kexpand+0xb3d>
f01281ce:	68 f8 ba 13 f0       	push   $0xf013baf8
f01281d3:	68 a5 ba 13 f0       	push   $0xf013baa5
f01281d8:	68 b9 0b 00 00       	push   $0xbb9
f01281dd:	68 da ac 13 f0       	push   $0xf013acda
f01281e2:	e8 14 80 fd ff       	call   f01001fb <_panic>


	//Allocate after expanding last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f01281e7:	e8 6f 47 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01281ec:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01281ef:	e8 48 bb fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01281f4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f01281f7:	83 ec 0c             	sub    $0xc,%esp
f01281fa:	68 00 00 40 00       	push   $0x400000
f01281ff:	e8 fa f5 fd ff       	call   f01077fe <kmalloc>
f0128204:	83 c4 10             	add    $0x10,%esp
f0128207:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)

		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 10*Mega)) panic("Wrong start address after kexpand()... ");
f012820d:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0128213:	89 c1                	mov    %eax,%ecx
f0128215:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f012821c:	10 00 00 
f012821f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0128225:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012822a:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0128230:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128236:	ba 00 00 00 00       	mov    $0x0,%edx
f012823b:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0128241:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128247:	29 d0                	sub    %edx,%eax
f0128249:	89 c3                	mov    %eax,%ebx
f012824b:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0128252:	10 00 00 
f0128255:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012825a:	0f b6 d0             	movzbl %al,%edx
f012825d:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0128263:	01 d0                	add    %edx,%eax
f0128265:	48                   	dec    %eax
f0128266:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f012826c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128272:	ba 00 00 00 00       	mov    $0x0,%edx
f0128277:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f012827d:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128283:	29 d0                	sub    %edx,%eax
f0128285:	01 c3                	add    %eax,%ebx
f0128287:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f012828e:	10 00 00 
f0128291:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128296:	0f b6 c0             	movzbl %al,%eax
f0128299:	c1 e0 04             	shl    $0x4,%eax
f012829c:	89 c2                	mov    %eax,%edx
f012829e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01282a4:	01 d0                	add    %edx,%eax
f01282a6:	48                   	dec    %eax
f01282a7:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01282ad:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01282b3:	ba 00 00 00 00       	mov    $0x0,%edx
f01282b8:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01282be:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01282c4:	29 d0                	sub    %edx,%eax
f01282c6:	01 d8                	add    %ebx,%eax
f01282c8:	2d 00 80 ef 08       	sub    $0x8ef8000,%eax
f01282cd:	39 c1                	cmp    %eax,%ecx
f01282cf:	74 17                	je     f01282e8 <test_kexpand+0xc3e>
f01282d1:	83 ec 04             	sub    $0x4,%esp
f01282d4:	68 28 bb 13 f0       	push   $0xf013bb28
f01282d9:	68 c4 0b 00 00       	push   $0xbc4
f01282de:	68 da ac 13 f0       	push   $0xf013acda
f01282e3:	e8 13 7f fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01282e8:	e8 4f ba fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01282ed:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01282f0:	74 17                	je     f0128309 <test_kexpand+0xc5f>
f01282f2:	83 ec 04             	sub    $0x4,%esp
f01282f5:	68 f4 ac 13 f0       	push   $0xf013acf4
f01282fa:	68 c5 0b 00 00       	push   $0xbc5
f01282ff:	68 da ac 13 f0       	push   $0xf013acda
f0128304:	e8 f2 7e fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128309:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012830c:	e8 4a 46 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0128311:	29 c3                	sub    %eax,%ebx
f0128313:	89 d8                	mov    %ebx,%eax
f0128315:	3d 00 04 00 00       	cmp    $0x400,%eax
f012831a:	74 17                	je     f0128333 <test_kexpand+0xc89>
f012831c:	83 ec 04             	sub    $0x4,%esp
f012831f:	68 5c ad 13 f0       	push   $0xf013ad5c
f0128324:	68 c6 0b 00 00       	push   $0xbc6
f0128329:	68 da ac 13 f0       	push   $0xf013acda
f012832e:	e8 c8 7e fd ff       	call   f01001fb <_panic>
	}

	//kfree the expanded variable
	{
		//kfree 10 MB (expanded)
		freeFrames = sys_calculate_free_frames() ;
f0128333:	e8 23 46 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0128338:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012833b:	e8 fc b9 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128340:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0128343:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0128349:	83 ec 0c             	sub    $0xc,%esp
f012834c:	50                   	push   %eax
f012834d:	e8 6e f5 fd ff       	call   f01078c0 <kfree>
f0128352:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128355:	e8 e2 b9 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012835a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012835d:	74 17                	je     f0128376 <test_kexpand+0xccc>
f012835f:	83 ec 04             	sub    $0x4,%esp
f0128362:	68 f4 ac 13 f0       	push   $0xf013acf4
f0128367:	68 cf 0b 00 00       	push   $0xbcf
f012836c:	68 da ac 13 f0       	push   $0xf013acda
f0128371:	e8 85 7e fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 10*Mega/PAGE_SIZE) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0128376:	e8 e0 45 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012837b:	89 c2                	mov    %eax,%edx
f012837d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0128380:	29 c2                	sub    %eax,%edx
f0128382:	89 d0                	mov    %edx,%eax
f0128384:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f0128389:	74 17                	je     f01283a2 <test_kexpand+0xcf8>
f012838b:	83 ec 04             	sub    $0x4,%esp
f012838e:	68 8c b5 13 f0       	push   $0xf013b58c
f0128393:	68 d0 0b 00 00       	push   $0xbd0
f0128398:	68 da ac 13 f0       	push   $0xf013acda
f012839d:	e8 59 7e fd ff       	call   f01001fb <_panic>
	}

	//Expand last allocated variable to 4 MB + 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f01283a2:	e8 b4 45 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01283a7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01283aa:	e8 8d b9 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01283af:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(4*Mega + 20*kilo) ;
f01283b2:	83 ec 0c             	sub    $0xc,%esp
f01283b5:	68 00 50 40 00       	push   $0x405000
f01283ba:	e8 d9 f6 fd ff       	call   f0107a98 <kexpand>
f01283bf:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01283c2:	e8 75 b9 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01283c7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01283ca:	74 19                	je     f01283e5 <test_kexpand+0xd3b>
f01283cc:	68 74 ba 13 f0       	push   $0xf013ba74
f01283d1:	68 a5 ba 13 f0       	push   $0xf013baa5
f01283d6:	68 da 0b 00 00       	push   $0xbda
f01283db:	68 da ac 13 f0       	push   $0xf013acda
f01283e0:	e8 16 7e fd ff       	call   f01001fb <_panic>
		assert(freeFrames - sys_calculate_free_frames()  == 5) ;
f01283e5:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01283e8:	e8 6e 45 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01283ed:	29 c3                	sub    %eax,%ebx
f01283ef:	89 d8                	mov    %ebx,%eax
f01283f1:	83 f8 05             	cmp    $0x5,%eax
f01283f4:	74 19                	je     f012840f <test_kexpand+0xd65>
f01283f6:	68 50 bb 13 f0       	push   $0xf013bb50
f01283fb:	68 a5 ba 13 f0       	push   $0xf013baa5
f0128400:	68 db 0b 00 00       	push   $0xbdb
f0128405:	68 da ac 13 f0       	push   $0xf013acda
f012840a:	e8 ec 7d fd ff       	call   f01001fb <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f012840f:	83 ec 0c             	sub    $0xc,%esp
f0128412:	68 38 ba 13 f0       	push   $0xf013ba38
f0128417:	e8 66 88 fd ff       	call   f0100c82 <cprintf>
f012841c:	83 c4 10             	add    $0x10,%esp

	return 1;
f012841f:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0128424:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0128427:	5b                   	pop    %ebx
f0128428:	5f                   	pop    %edi
f0128429:	5d                   	pop    %ebp
f012842a:	c3                   	ret    

f012842b <test_kshrink>:

extern void kshrink(uint32 newSize) ;

int test_kshrink()
{
f012842b:	55                   	push   %ebp
f012842c:	89 e5                	mov    %esp,%ebp
f012842e:	57                   	push   %edi
f012842f:	53                   	push   %ebx
f0128430:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	char minByte = 1<<7;
f0128436:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f012843a:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f012843e:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0128444:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f012844a:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0128451:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0128458:	e8 fe 44 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012845d:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0128460:	8d 95 a4 fe ff ff    	lea    -0x15c(%ebp),%edx
f0128466:	b9 14 00 00 00       	mov    $0x14,%ecx
f012846b:	b8 00 00 00 00       	mov    $0x0,%eax
f0128470:	89 d7                	mov    %edx,%edi
f0128472:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f0128474:	8d 95 54 fe ff ff    	lea    -0x1ac(%ebp),%edx
f012847a:	b9 14 00 00 00       	mov    $0x14,%ecx
f012847f:	b8 00 00 00 00       	mov    $0x0,%eax
f0128484:	89 d7                	mov    %edx,%edi
f0128486:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128488:	e8 ce 44 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012848d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128490:	e8 a7 b8 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128495:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0128498:	83 ec 0c             	sub    $0xc,%esp
f012849b:	68 00 fc 1f 00       	push   $0x1ffc00
f01284a0:	e8 59 f3 fd ff       	call   f01077fe <kmalloc>
f01284a5:	83 c4 10             	add    $0x10,%esp
f01284a8:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01284ae:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01284b4:	89 c1                	mov    %eax,%ecx
f01284b6:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f01284bd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01284c0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01284c5:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01284c8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01284cb:	ba 00 00 00 00       	mov    $0x0,%edx
f01284d0:	f7 75 d4             	divl   -0x2c(%ebp)
f01284d3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01284d6:	29 d0                	sub    %edx,%eax
f01284d8:	89 c3                	mov    %eax,%ebx
f01284da:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01284e1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01284e6:	0f b6 d0             	movzbl %al,%edx
f01284e9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01284ec:	01 d0                	add    %edx,%eax
f01284ee:	48                   	dec    %eax
f01284ef:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01284f2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01284f5:	ba 00 00 00 00       	mov    $0x0,%edx
f01284fa:	f7 75 cc             	divl   -0x34(%ebp)
f01284fd:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0128500:	29 d0                	sub    %edx,%eax
f0128502:	01 c3                	add    %eax,%ebx
f0128504:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f012850b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128510:	0f b6 c0             	movzbl %al,%eax
f0128513:	c1 e0 04             	shl    $0x4,%eax
f0128516:	89 c2                	mov    %eax,%edx
f0128518:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012851b:	01 d0                	add    %edx,%eax
f012851d:	48                   	dec    %eax
f012851e:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0128521:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0128524:	ba 00 00 00 00       	mov    $0x0,%edx
f0128529:	f7 75 c4             	divl   -0x3c(%ebp)
f012852c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012852f:	29 d0                	sub    %edx,%eax
f0128531:	01 d8                	add    %ebx,%eax
f0128533:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0128538:	39 c1                	cmp    %eax,%ecx
f012853a:	74 17                	je     f0128553 <test_kshrink+0x128>
f012853c:	83 ec 04             	sub    $0x4,%esp
f012853f:	68 c0 ad 13 f0       	push   $0xf013adc0
f0128544:	68 01 0c 00 00       	push   $0xc01
f0128549:	68 da ac 13 f0       	push   $0xf013acda
f012854e:	e8 a8 7c fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128553:	e8 e4 b7 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128558:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012855b:	74 17                	je     f0128574 <test_kshrink+0x149>
f012855d:	83 ec 04             	sub    $0x4,%esp
f0128560:	68 f4 ac 13 f0       	push   $0xf013acf4
f0128565:	68 02 0c 00 00       	push   $0xc02
f012856a:	68 da ac 13 f0       	push   $0xf013acda
f012856f:	e8 87 7c fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128574:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128577:	e8 df 43 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012857c:	29 c3                	sub    %eax,%ebx
f012857e:	89 d8                	mov    %ebx,%eax
f0128580:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128585:	74 17                	je     f012859e <test_kshrink+0x173>
f0128587:	83 ec 04             	sub    $0x4,%esp
f012858a:	68 5c ad 13 f0       	push   $0xf013ad5c
f012858f:	68 03 0c 00 00       	push   $0xc03
f0128594:	68 da ac 13 f0       	push   $0xf013acda
f0128599:	e8 5d 7c fd ff       	call   f01001fb <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f012859e:	c7 85 a4 fe ff ff ff 	movl   $0x1ffbff,-0x15c(%ebp)
f01285a5:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01285a8:	e8 ae 43 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01285ad:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01285b0:	e8 87 b7 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01285b5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01285b8:	83 ec 0c             	sub    $0xc,%esp
f01285bb:	68 00 fc 1f 00       	push   $0x1ffc00
f01285c0:	e8 39 f2 fd ff       	call   f01077fe <kmalloc>
f01285c5:	83 c4 10             	add    $0x10,%esp
f01285c8:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01285ce:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01285d4:	89 c1                	mov    %eax,%ecx
f01285d6:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f01285dd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01285e0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01285e5:	89 45 b8             	mov    %eax,-0x48(%ebp)
f01285e8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01285eb:	ba 00 00 00 00       	mov    $0x0,%edx
f01285f0:	f7 75 bc             	divl   -0x44(%ebp)
f01285f3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01285f6:	29 d0                	sub    %edx,%eax
f01285f8:	89 c3                	mov    %eax,%ebx
f01285fa:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0128601:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128606:	0f b6 d0             	movzbl %al,%edx
f0128609:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012860c:	01 d0                	add    %edx,%eax
f012860e:	48                   	dec    %eax
f012860f:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0128612:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0128615:	ba 00 00 00 00       	mov    $0x0,%edx
f012861a:	f7 75 b4             	divl   -0x4c(%ebp)
f012861d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0128620:	29 d0                	sub    %edx,%eax
f0128622:	01 c3                	add    %eax,%ebx
f0128624:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012862b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128630:	0f b6 c0             	movzbl %al,%eax
f0128633:	c1 e0 04             	shl    $0x4,%eax
f0128636:	89 c2                	mov    %eax,%edx
f0128638:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012863b:	01 d0                	add    %edx,%eax
f012863d:	48                   	dec    %eax
f012863e:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0128641:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128644:	ba 00 00 00 00       	mov    $0x0,%edx
f0128649:	f7 75 ac             	divl   -0x54(%ebp)
f012864c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012864f:	29 d0                	sub    %edx,%eax
f0128651:	01 d8                	add    %ebx,%eax
f0128653:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0128658:	39 c1                	cmp    %eax,%ecx
f012865a:	74 17                	je     f0128673 <test_kshrink+0x248>
f012865c:	83 ec 04             	sub    $0x4,%esp
f012865f:	68 c0 ad 13 f0       	push   $0xf013adc0
f0128664:	68 0a 0c 00 00       	push   $0xc0a
f0128669:	68 da ac 13 f0       	push   $0xf013acda
f012866e:	e8 88 7b fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128673:	e8 c4 b6 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128678:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012867b:	74 17                	je     f0128694 <test_kshrink+0x269>
f012867d:	83 ec 04             	sub    $0x4,%esp
f0128680:	68 f4 ac 13 f0       	push   $0xf013acf4
f0128685:	68 0b 0c 00 00       	push   $0xc0b
f012868a:	68 da ac 13 f0       	push   $0xf013acda
f012868f:	e8 67 7b fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128694:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128697:	e8 bf 42 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012869c:	29 c3                	sub    %eax,%ebx
f012869e:	89 d8                	mov    %ebx,%eax
f01286a0:	3d 00 02 00 00       	cmp    $0x200,%eax
f01286a5:	74 17                	je     f01286be <test_kshrink+0x293>
f01286a7:	83 ec 04             	sub    $0x4,%esp
f01286aa:	68 5c ad 13 f0       	push   $0xf013ad5c
f01286af:	68 0c 0c 00 00       	push   $0xc0c
f01286b4:	68 da ac 13 f0       	push   $0xf013acda
f01286b9:	e8 3d 7b fd ff       	call   f01001fb <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01286be:	c7 85 a8 fe ff ff ff 	movl   $0x1ffbff,-0x158(%ebp)
f01286c5:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01286c8:	e8 8e 42 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01286cd:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01286d0:	e8 67 b6 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01286d5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01286d8:	83 ec 0c             	sub    $0xc,%esp
f01286db:	68 00 08 00 00       	push   $0x800
f01286e0:	e8 19 f1 fd ff       	call   f01077fe <kmalloc>
f01286e5:	83 c4 10             	add    $0x10,%esp
f01286e8:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01286ee:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01286f4:	89 c1                	mov    %eax,%ecx
f01286f6:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01286fd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0128700:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128705:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0128708:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012870b:	ba 00 00 00 00       	mov    $0x0,%edx
f0128710:	f7 75 a4             	divl   -0x5c(%ebp)
f0128713:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0128716:	29 d0                	sub    %edx,%eax
f0128718:	89 c3                	mov    %eax,%ebx
f012871a:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0128721:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128726:	0f b6 d0             	movzbl %al,%edx
f0128729:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012872c:	01 d0                	add    %edx,%eax
f012872e:	48                   	dec    %eax
f012872f:	89 45 98             	mov    %eax,-0x68(%ebp)
f0128732:	8b 45 98             	mov    -0x68(%ebp),%eax
f0128735:	ba 00 00 00 00       	mov    $0x0,%edx
f012873a:	f7 75 9c             	divl   -0x64(%ebp)
f012873d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0128740:	29 d0                	sub    %edx,%eax
f0128742:	01 c3                	add    %eax,%ebx
f0128744:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012874b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128750:	0f b6 c0             	movzbl %al,%eax
f0128753:	c1 e0 04             	shl    $0x4,%eax
f0128756:	89 c2                	mov    %eax,%edx
f0128758:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012875b:	01 d0                	add    %edx,%eax
f012875d:	48                   	dec    %eax
f012875e:	89 45 90             	mov    %eax,-0x70(%ebp)
f0128761:	8b 45 90             	mov    -0x70(%ebp),%eax
f0128764:	ba 00 00 00 00       	mov    $0x0,%edx
f0128769:	f7 75 94             	divl   -0x6c(%ebp)
f012876c:	8b 45 90             	mov    -0x70(%ebp),%eax
f012876f:	29 d0                	sub    %edx,%eax
f0128771:	01 d8                	add    %ebx,%eax
f0128773:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0128778:	39 c1                	cmp    %eax,%ecx
f012877a:	74 17                	je     f0128793 <test_kshrink+0x368>
f012877c:	83 ec 04             	sub    $0x4,%esp
f012877f:	68 c0 ad 13 f0       	push   $0xf013adc0
f0128784:	68 13 0c 00 00       	push   $0xc13
f0128789:	68 da ac 13 f0       	push   $0xf013acda
f012878e:	e8 68 7a fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128793:	e8 a4 b5 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128798:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012879b:	74 17                	je     f01287b4 <test_kshrink+0x389>
f012879d:	83 ec 04             	sub    $0x4,%esp
f01287a0:	68 f4 ac 13 f0       	push   $0xf013acf4
f01287a5:	68 14 0c 00 00       	push   $0xc14
f01287aa:	68 da ac 13 f0       	push   $0xf013acda
f01287af:	e8 47 7a fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01287b4:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01287b7:	e8 9f 41 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01287bc:	29 c3                	sub    %eax,%ebx
f01287be:	89 d8                	mov    %ebx,%eax
f01287c0:	83 f8 01             	cmp    $0x1,%eax
f01287c3:	74 17                	je     f01287dc <test_kshrink+0x3b1>
f01287c5:	83 ec 04             	sub    $0x4,%esp
f01287c8:	68 5c ad 13 f0       	push   $0xf013ad5c
f01287cd:	68 15 0c 00 00       	push   $0xc15
f01287d2:	68 da ac 13 f0       	push   $0xf013acda
f01287d7:	e8 1f 7a fd ff       	call   f01001fb <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01287dc:	c7 85 ac fe ff ff ff 	movl   $0x7ff,-0x154(%ebp)
f01287e3:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01287e6:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01287ec:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01287ef:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01287f6:	eb 0e                	jmp    f0128806 <test_kshrink+0x3db>
		{
			ptr[i] = 2 ;
f01287f8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01287fb:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01287fe:	01 d0                	add    %edx,%eax
f0128800:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0128803:	ff 45 f4             	incl   -0xc(%ebp)
f0128806:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012880c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012880f:	7f e7                	jg     f01287f8 <test_kshrink+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0128811:	e8 45 41 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0128816:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128819:	e8 1e b5 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012881e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0128821:	83 ec 0c             	sub    $0xc,%esp
f0128824:	68 00 08 00 00       	push   $0x800
f0128829:	e8 d0 ef fd ff       	call   f01077fe <kmalloc>
f012882e:	83 c4 10             	add    $0x10,%esp
f0128831:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128837:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012883d:	89 c1                	mov    %eax,%ecx
f012883f:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0128846:	8b 45 88             	mov    -0x78(%ebp),%eax
f0128849:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012884e:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0128851:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0128854:	ba 00 00 00 00       	mov    $0x0,%edx
f0128859:	f7 75 88             	divl   -0x78(%ebp)
f012885c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012885f:	29 d0                	sub    %edx,%eax
f0128861:	89 c3                	mov    %eax,%ebx
f0128863:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f012886a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012886f:	0f b6 d0             	movzbl %al,%edx
f0128872:	8b 45 80             	mov    -0x80(%ebp),%eax
f0128875:	01 d0                	add    %edx,%eax
f0128877:	48                   	dec    %eax
f0128878:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f012887e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0128884:	ba 00 00 00 00       	mov    $0x0,%edx
f0128889:	f7 75 80             	divl   -0x80(%ebp)
f012888c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0128892:	29 d0                	sub    %edx,%eax
f0128894:	01 c3                	add    %eax,%ebx
f0128896:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f012889d:	10 00 00 
f01288a0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01288a5:	0f b6 c0             	movzbl %al,%eax
f01288a8:	c1 e0 04             	shl    $0x4,%eax
f01288ab:	89 c2                	mov    %eax,%edx
f01288ad:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01288b3:	01 d0                	add    %edx,%eax
f01288b5:	48                   	dec    %eax
f01288b6:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01288bc:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01288c2:	ba 00 00 00 00       	mov    $0x0,%edx
f01288c7:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01288cd:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01288d3:	29 d0                	sub    %edx,%eax
f01288d5:	01 d8                	add    %ebx,%eax
f01288d7:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01288dc:	39 c1                	cmp    %eax,%ecx
f01288de:	74 17                	je     f01288f7 <test_kshrink+0x4cc>
f01288e0:	83 ec 04             	sub    $0x4,%esp
f01288e3:	68 c0 ad 13 f0       	push   $0xf013adc0
f01288e8:	68 21 0c 00 00       	push   $0xc21
f01288ed:	68 da ac 13 f0       	push   $0xf013acda
f01288f2:	e8 04 79 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01288f7:	e8 40 b4 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01288fc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01288ff:	74 17                	je     f0128918 <test_kshrink+0x4ed>
f0128901:	83 ec 04             	sub    $0x4,%esp
f0128904:	68 f4 ac 13 f0       	push   $0xf013acf4
f0128909:	68 22 0c 00 00       	push   $0xc22
f012890e:	68 da ac 13 f0       	push   $0xf013acda
f0128913:	e8 e3 78 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128918:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012891b:	e8 3b 40 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0128920:	29 c3                	sub    %eax,%ebx
f0128922:	89 d8                	mov    %ebx,%eax
f0128924:	83 f8 01             	cmp    $0x1,%eax
f0128927:	74 17                	je     f0128940 <test_kshrink+0x515>
f0128929:	83 ec 04             	sub    $0x4,%esp
f012892c:	68 5c ad 13 f0       	push   $0xf013ad5c
f0128931:	68 23 0c 00 00       	push   $0xc23
f0128936:	68 da ac 13 f0       	push   $0xf013acda
f012893b:	e8 bb 78 fd ff       	call   f01001fb <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0128940:	c7 85 b0 fe ff ff ff 	movl   $0x7ff,-0x150(%ebp)
f0128947:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012894a:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0128950:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0128953:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012895a:	eb 0e                	jmp    f012896a <test_kshrink+0x53f>
		{
			ptr[i] = 3 ;
f012895c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012895f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128962:	01 d0                	add    %edx,%eax
f0128964:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0128967:	ff 45 f4             	incl   -0xc(%ebp)
f012896a:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0128970:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128973:	7f e7                	jg     f012895c <test_kshrink+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0128975:	e8 e1 3f fe ff       	call   f010c95b <sys_calculate_free_frames>
f012897a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012897d:	e8 ba b3 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128982:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0128985:	83 ec 0c             	sub    $0xc,%esp
f0128988:	68 00 1c 00 00       	push   $0x1c00
f012898d:	e8 6c ee fd ff       	call   f01077fe <kmalloc>
f0128992:	83 c4 10             	add    $0x10,%esp
f0128995:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012899b:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01289a1:	89 c1                	mov    %eax,%ecx
f01289a3:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01289aa:	10 00 00 
f01289ad:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01289b3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01289b8:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01289be:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01289c4:	ba 00 00 00 00       	mov    $0x0,%edx
f01289c9:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01289cf:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01289d5:	29 d0                	sub    %edx,%eax
f01289d7:	89 c3                	mov    %eax,%ebx
f01289d9:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01289e0:	10 00 00 
f01289e3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01289e8:	0f b6 d0             	movzbl %al,%edx
f01289eb:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01289f1:	01 d0                	add    %edx,%eax
f01289f3:	48                   	dec    %eax
f01289f4:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01289fa:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0128a00:	ba 00 00 00 00       	mov    $0x0,%edx
f0128a05:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0128a0b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0128a11:	29 d0                	sub    %edx,%eax
f0128a13:	01 c3                	add    %eax,%ebx
f0128a15:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0128a1c:	10 00 00 
f0128a1f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128a24:	0f b6 c0             	movzbl %al,%eax
f0128a27:	c1 e0 04             	shl    $0x4,%eax
f0128a2a:	89 c2                	mov    %eax,%edx
f0128a2c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0128a32:	01 d0                	add    %edx,%eax
f0128a34:	48                   	dec    %eax
f0128a35:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0128a3b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128a41:	ba 00 00 00 00       	mov    $0x0,%edx
f0128a46:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0128a4c:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128a52:	29 d0                	sub    %edx,%eax
f0128a54:	01 d8                	add    %ebx,%eax
f0128a56:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0128a5b:	39 c1                	cmp    %eax,%ecx
f0128a5d:	74 17                	je     f0128a76 <test_kshrink+0x64b>
f0128a5f:	83 ec 04             	sub    $0x4,%esp
f0128a62:	68 c0 ad 13 f0       	push   $0xf013adc0
f0128a67:	68 2f 0c 00 00       	push   $0xc2f
f0128a6c:	68 da ac 13 f0       	push   $0xf013acda
f0128a71:	e8 85 77 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128a76:	e8 c1 b2 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128a7b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128a7e:	74 17                	je     f0128a97 <test_kshrink+0x66c>
f0128a80:	83 ec 04             	sub    $0x4,%esp
f0128a83:	68 f4 ac 13 f0       	push   $0xf013acf4
f0128a88:	68 30 0c 00 00       	push   $0xc30
f0128a8d:	68 da ac 13 f0       	push   $0xf013acda
f0128a92:	e8 64 77 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128a97:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128a9a:	e8 bc 3e fe ff       	call   f010c95b <sys_calculate_free_frames>
f0128a9f:	29 c3                	sub    %eax,%ebx
f0128aa1:	89 d8                	mov    %ebx,%eax
f0128aa3:	83 f8 02             	cmp    $0x2,%eax
f0128aa6:	74 17                	je     f0128abf <test_kshrink+0x694>
f0128aa8:	83 ec 04             	sub    $0x4,%esp
f0128aab:	68 5c ad 13 f0       	push   $0xf013ad5c
f0128ab0:	68 31 0c 00 00       	push   $0xc31
f0128ab5:	68 da ac 13 f0       	push   $0xf013acda
f0128aba:	e8 3c 77 fd ff       	call   f01001fb <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0128abf:	c7 85 b4 fe ff ff ff 	movl   $0x1bff,-0x14c(%ebp)
f0128ac6:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0128ac9:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0128acf:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0128ad2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128ad9:	eb 0e                	jmp    f0128ae9 <test_kshrink+0x6be>
		{
			ptr[i] = 4 ;
f0128adb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128ade:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128ae1:	01 d0                	add    %edx,%eax
f0128ae3:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0128ae6:	ff 45 f4             	incl   -0xc(%ebp)
f0128ae9:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0128aef:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128af2:	7f e7                	jg     f0128adb <test_kshrink+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0128af4:	e8 62 3e fe ff       	call   f010c95b <sys_calculate_free_frames>
f0128af9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128afc:	e8 3b b2 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128b01:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0128b04:	83 ec 0c             	sub    $0xc,%esp
f0128b07:	68 00 fc 2f 00       	push   $0x2ffc00
f0128b0c:	e8 ed ec fd ff       	call   f01077fe <kmalloc>
f0128b11:	83 c4 10             	add    $0x10,%esp
f0128b14:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128b1a:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0128b20:	89 c1                	mov    %eax,%ecx
f0128b22:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0128b29:	10 00 00 
f0128b2c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0128b32:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128b37:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0128b3d:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128b43:	ba 00 00 00 00       	mov    $0x0,%edx
f0128b48:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0128b4e:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128b54:	29 d0                	sub    %edx,%eax
f0128b56:	89 c3                	mov    %eax,%ebx
f0128b58:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0128b5f:	10 00 00 
f0128b62:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128b67:	0f b6 d0             	movzbl %al,%edx
f0128b6a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0128b70:	01 d0                	add    %edx,%eax
f0128b72:	48                   	dec    %eax
f0128b73:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0128b79:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128b7f:	ba 00 00 00 00       	mov    $0x0,%edx
f0128b84:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0128b8a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128b90:	29 d0                	sub    %edx,%eax
f0128b92:	01 c3                	add    %eax,%ebx
f0128b94:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0128b9b:	10 00 00 
f0128b9e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128ba3:	0f b6 c0             	movzbl %al,%eax
f0128ba6:	c1 e0 04             	shl    $0x4,%eax
f0128ba9:	89 c2                	mov    %eax,%edx
f0128bab:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0128bb1:	01 d0                	add    %edx,%eax
f0128bb3:	48                   	dec    %eax
f0128bb4:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0128bba:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0128bc0:	ba 00 00 00 00       	mov    $0x0,%edx
f0128bc5:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0128bcb:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0128bd1:	29 d0                	sub    %edx,%eax
f0128bd3:	01 d8                	add    %ebx,%eax
f0128bd5:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0128bda:	39 c1                	cmp    %eax,%ecx
f0128bdc:	74 17                	je     f0128bf5 <test_kshrink+0x7ca>
f0128bde:	83 ec 04             	sub    $0x4,%esp
f0128be1:	68 c0 ad 13 f0       	push   $0xf013adc0
f0128be6:	68 3d 0c 00 00       	push   $0xc3d
f0128beb:	68 da ac 13 f0       	push   $0xf013acda
f0128bf0:	e8 06 76 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128bf5:	e8 42 b1 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128bfa:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128bfd:	74 17                	je     f0128c16 <test_kshrink+0x7eb>
f0128bff:	83 ec 04             	sub    $0x4,%esp
f0128c02:	68 f4 ac 13 f0       	push   $0xf013acf4
f0128c07:	68 3e 0c 00 00       	push   $0xc3e
f0128c0c:	68 da ac 13 f0       	push   $0xf013acda
f0128c11:	e8 e5 75 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128c16:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128c19:	e8 3d 3d fe ff       	call   f010c95b <sys_calculate_free_frames>
f0128c1e:	29 c3                	sub    %eax,%ebx
f0128c20:	89 d8                	mov    %ebx,%eax
f0128c22:	3d 00 03 00 00       	cmp    $0x300,%eax
f0128c27:	74 17                	je     f0128c40 <test_kshrink+0x815>
f0128c29:	83 ec 04             	sub    $0x4,%esp
f0128c2c:	68 5c ad 13 f0       	push   $0xf013ad5c
f0128c31:	68 3f 0c 00 00       	push   $0xc3f
f0128c36:	68 da ac 13 f0       	push   $0xf013acda
f0128c3b:	e8 bb 75 fd ff       	call   f01001fb <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0128c40:	c7 85 b8 fe ff ff ff 	movl   $0x2ffbff,-0x148(%ebp)
f0128c47:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0128c4a:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0128c50:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0128c53:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128c5a:	eb 0e                	jmp    f0128c6a <test_kshrink+0x83f>
		{
			ptr[i] = 5 ;
f0128c5c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128c5f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128c62:	01 d0                	add    %edx,%eax
f0128c64:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0128c67:	ff 45 f4             	incl   -0xc(%ebp)
f0128c6a:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0128c70:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128c73:	7f e7                	jg     f0128c5c <test_kshrink+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0128c75:	e8 e1 3c fe ff       	call   f010c95b <sys_calculate_free_frames>
f0128c7a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128c7d:	e8 ba b0 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128c82:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0128c85:	83 ec 0c             	sub    $0xc,%esp
f0128c88:	68 00 00 60 00       	push   $0x600000
f0128c8d:	e8 6c eb fd ff       	call   f01077fe <kmalloc>
f0128c92:	83 c4 10             	add    $0x10,%esp
f0128c95:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128c9b:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0128ca1:	89 c1                	mov    %eax,%ecx
f0128ca3:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0128caa:	10 00 00 
f0128cad:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0128cb3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128cb8:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0128cbe:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128cc4:	ba 00 00 00 00       	mov    $0x0,%edx
f0128cc9:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0128ccf:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128cd5:	29 d0                	sub    %edx,%eax
f0128cd7:	89 c3                	mov    %eax,%ebx
f0128cd9:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0128ce0:	10 00 00 
f0128ce3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128ce8:	0f b6 d0             	movzbl %al,%edx
f0128ceb:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0128cf1:	01 d0                	add    %edx,%eax
f0128cf3:	48                   	dec    %eax
f0128cf4:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0128cfa:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128d00:	ba 00 00 00 00       	mov    $0x0,%edx
f0128d05:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0128d0b:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128d11:	29 d0                	sub    %edx,%eax
f0128d13:	01 c3                	add    %eax,%ebx
f0128d15:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0128d1c:	10 00 00 
f0128d1f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128d24:	0f b6 c0             	movzbl %al,%eax
f0128d27:	c1 e0 04             	shl    $0x4,%eax
f0128d2a:	89 c2                	mov    %eax,%edx
f0128d2c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0128d32:	01 d0                	add    %edx,%eax
f0128d34:	48                   	dec    %eax
f0128d35:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0128d3b:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128d41:	ba 00 00 00 00       	mov    $0x0,%edx
f0128d46:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0128d4c:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128d52:	29 d0                	sub    %edx,%eax
f0128d54:	01 d8                	add    %ebx,%eax
f0128d56:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0128d5b:	39 c1                	cmp    %eax,%ecx
f0128d5d:	74 17                	je     f0128d76 <test_kshrink+0x94b>
f0128d5f:	83 ec 04             	sub    $0x4,%esp
f0128d62:	68 c0 ad 13 f0       	push   $0xf013adc0
f0128d67:	68 4b 0c 00 00       	push   $0xc4b
f0128d6c:	68 da ac 13 f0       	push   $0xf013acda
f0128d71:	e8 85 74 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128d76:	e8 c1 af fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128d7b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128d7e:	74 17                	je     f0128d97 <test_kshrink+0x96c>
f0128d80:	83 ec 04             	sub    $0x4,%esp
f0128d83:	68 f4 ac 13 f0       	push   $0xf013acf4
f0128d88:	68 4c 0c 00 00       	push   $0xc4c
f0128d8d:	68 da ac 13 f0       	push   $0xf013acda
f0128d92:	e8 64 74 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128d97:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128d9a:	e8 bc 3b fe ff       	call   f010c95b <sys_calculate_free_frames>
f0128d9f:	29 c3                	sub    %eax,%ebx
f0128da1:	89 d8                	mov    %ebx,%eax
f0128da3:	3d 00 06 00 00       	cmp    $0x600,%eax
f0128da8:	74 17                	je     f0128dc1 <test_kshrink+0x996>
f0128daa:	83 ec 04             	sub    $0x4,%esp
f0128dad:	68 5c ad 13 f0       	push   $0xf013ad5c
f0128db2:	68 4d 0c 00 00       	push   $0xc4d
f0128db7:	68 da ac 13 f0       	push   $0xf013acda
f0128dbc:	e8 3a 74 fd ff       	call   f01001fb <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0128dc1:	c7 85 bc fe ff ff ff 	movl   $0x17ffff,-0x144(%ebp)
f0128dc8:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0128dcb:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0128dd1:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0128dd7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128dde:	eb 1a                	jmp    f0128dfa <test_kshrink+0x9cf>
		{
			arr[i] = i ;
f0128de0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128de3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128dea:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128df0:	01 c2                	add    %eax,%edx
f0128df2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128df5:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0128df7:	ff 45 f4             	incl   -0xc(%ebp)
f0128dfa:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0128e00:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128e03:	7d db                	jge    f0128de0 <test_kshrink+0x9b5>
		}
	}

	//Shrink last allocated variable to 5 MB instead of 6 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128e05:	e8 51 3b fe ff       	call   f010c95b <sys_calculate_free_frames>
f0128e0a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128e0d:	e8 2a af fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128e12:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(5*Mega) ;
f0128e15:	83 ec 0c             	sub    $0xc,%esp
f0128e18:	68 00 00 50 00       	push   $0x500000
f0128e1d:	e8 59 ec fd ff       	call   f0107a7b <kshrink>
f0128e22:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128e25:	e8 12 af fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128e2a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128e2d:	74 19                	je     f0128e48 <test_kshrink+0xa1d>
f0128e2f:	68 74 ba 13 f0       	push   $0xf013ba74
f0128e34:	68 a5 ba 13 f0       	push   $0xf013baa5
f0128e39:	68 5d 0c 00 00       	push   $0xc5d
f0128e3e:	68 da ac 13 f0       	push   $0xf013acda
f0128e43:	e8 b3 73 fd ff       	call   f01001fb <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 256) ;
f0128e48:	e8 0e 3b fe ff       	call   f010c95b <sys_calculate_free_frames>
f0128e4d:	89 c2                	mov    %eax,%edx
f0128e4f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0128e52:	29 c2                	sub    %eax,%edx
f0128e54:	89 d0                	mov    %edx,%eax
f0128e56:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128e5b:	74 19                	je     f0128e76 <test_kshrink+0xa4b>
f0128e5d:	68 80 bb 13 f0       	push   $0xf013bb80
f0128e62:	68 a5 ba 13 f0       	push   $0xf013baa5
f0128e67:	68 5e 0c 00 00       	push   $0xc5e
f0128e6c:	68 da ac 13 f0       	push   $0xf013acda
f0128e71:	e8 85 73 fd ff       	call   f01001fb <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
f0128e76:	c7 85 24 ff ff ff ff 	movl   $0x13ffff,-0xdc(%ebp)
f0128e7d:	ff 13 00 
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0128e80:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128e87:	eb 37                	jmp    f0128ec0 <test_kshrink+0xa95>
		{
			assert(arr[i] == i);
f0128e89:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128e8c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128e93:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128e99:	01 d0                	add    %edx,%eax
f0128e9b:	8b 10                	mov    (%eax),%edx
f0128e9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128ea0:	39 c2                	cmp    %eax,%edx
f0128ea2:	74 19                	je     f0128ebd <test_kshrink+0xa92>
f0128ea4:	68 b0 bb 13 f0       	push   $0xf013bbb0
f0128ea9:	68 a5 ba 13 f0       	push   $0xf013baa5
f0128eae:	68 66 0c 00 00       	push   $0xc66
f0128eb3:	68 da ac 13 f0       	push   $0xf013acda
f0128eb8:	e8 3e 73 fd ff       	call   f01001fb <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0128ebd:	ff 45 f4             	incl   -0xc(%ebp)
f0128ec0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128ec3:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0128ec9:	7e be                	jle    f0128e89 <test_kshrink+0xa5e>
			assert(arr[i] == i);
		}

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0128ecb:	83 ec 0c             	sub    $0xc,%esp
f0128ece:	6a 03                	push   $0x3
f0128ed0:	e8 26 3f fe ff       	call   f010cdfb <sys_bypassPageFault>
f0128ed5:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[6];
f0128ed8:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0128ede:	89 45 8c             	mov    %eax,-0x74(%ebp)
		ptr[5*Mega] = 10;
f0128ee1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128ee4:	05 00 00 50 00       	add    $0x500000,%eax
f0128ee9:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega])) ;
f0128eec:	e8 f8 3e fe ff       	call   f010cde9 <sys_rcr2>
f0128ef1:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0128ef4:	81 c2 00 00 50 00    	add    $0x500000,%edx
f0128efa:	39 d0                	cmp    %edx,%eax
f0128efc:	74 19                	je     f0128f17 <test_kshrink+0xaec>
f0128efe:	68 bc bb 13 f0       	push   $0xf013bbbc
f0128f03:	68 a5 ba 13 f0       	push   $0xf013baa5
f0128f08:	68 6f 0c 00 00       	push   $0xc6f
f0128f0d:	68 da ac 13 f0       	push   $0xf013acda
f0128f12:	e8 e4 72 fd ff       	call   f01001fb <_panic>

		ptr[5*Mega+4*kilo] = 10;
f0128f17:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128f1a:	05 00 10 50 00       	add    $0x501000,%eax
f0128f1f:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega+4*kilo])) ;
f0128f22:	e8 c2 3e fe ff       	call   f010cde9 <sys_rcr2>
f0128f27:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0128f2a:	81 c2 00 10 50 00    	add    $0x501000,%edx
f0128f30:	39 d0                	cmp    %edx,%eax
f0128f32:	74 19                	je     f0128f4d <test_kshrink+0xb22>
f0128f34:	68 e4 bb 13 f0       	push   $0xf013bbe4
f0128f39:	68 a5 ba 13 f0       	push   $0xf013baa5
f0128f3e:	68 72 0c 00 00       	push   $0xc72
f0128f43:	68 da ac 13 f0       	push   $0xf013acda
f0128f48:	e8 ae 72 fd ff       	call   f01001fb <_panic>

		ptr[6*Mega - kilo] = 10;
f0128f4d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128f50:	05 00 fc 5f 00       	add    $0x5ffc00,%eax
f0128f55:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[6*Mega - kilo])) ;
f0128f58:	e8 8c 3e fe ff       	call   f010cde9 <sys_rcr2>
f0128f5d:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0128f60:	81 c2 00 fc 5f 00    	add    $0x5ffc00,%edx
f0128f66:	39 d0                	cmp    %edx,%eax
f0128f68:	74 19                	je     f0128f83 <test_kshrink+0xb58>
f0128f6a:	68 10 bc 13 f0       	push   $0xf013bc10
f0128f6f:	68 a5 ba 13 f0       	push   $0xf013baa5
f0128f74:	68 75 0c 00 00       	push   $0xc75
f0128f79:	68 da ac 13 f0       	push   $0xf013acda
f0128f7e:	e8 78 72 fd ff       	call   f01001fb <_panic>

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0128f83:	83 ec 0c             	sub    $0xc,%esp
f0128f86:	6a 00                	push   $0x0
f0128f88:	e8 6e 3e fe ff       	call   f010cdfb <sys_bypassPageFault>
f0128f8d:	83 c4 10             	add    $0x10,%esp
	}

	//Shrink it again to 2 MB instead of 5 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128f90:	e8 c6 39 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0128f95:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128f98:	e8 9f ad fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128f9d:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(2*Mega) ;
f0128fa0:	83 ec 0c             	sub    $0xc,%esp
f0128fa3:	68 00 00 20 00       	push   $0x200000
f0128fa8:	e8 ce ea fd ff       	call   f0107a7b <kshrink>
f0128fad:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128fb0:	e8 87 ad fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128fb5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128fb8:	74 19                	je     f0128fd3 <test_kshrink+0xba8>
f0128fba:	68 74 ba 13 f0       	push   $0xf013ba74
f0128fbf:	68 a5 ba 13 f0       	push   $0xf013baa5
f0128fc4:	68 82 0c 00 00       	push   $0xc82
f0128fc9:	68 da ac 13 f0       	push   $0xf013acda
f0128fce:	e8 28 72 fd ff       	call   f01001fb <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 768) ;
f0128fd3:	e8 83 39 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0128fd8:	89 c2                	mov    %eax,%edx
f0128fda:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0128fdd:	29 c2                	sub    %eax,%edx
f0128fdf:	89 d0                	mov    %edx,%eax
f0128fe1:	3d 00 03 00 00       	cmp    $0x300,%eax
f0128fe6:	74 19                	je     f0129001 <test_kshrink+0xbd6>
f0128fe8:	68 3c bc 13 f0       	push   $0xf013bc3c
f0128fed:	68 a5 ba 13 f0       	push   $0xf013baa5
f0128ff2:	68 83 0c 00 00       	push   $0xc83
f0128ff7:	68 da ac 13 f0       	push   $0xf013acda
f0128ffc:	e8 fa 71 fd ff       	call   f01001fb <_panic>


	//Allocate after shrinking last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0129001:	e8 55 39 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0129006:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129009:	e8 2e ad fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012900e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0129011:	83 ec 0c             	sub    $0xc,%esp
f0129014:	68 00 00 40 00       	push   $0x400000
f0129019:	e8 e0 e7 fd ff       	call   f01077fe <kmalloc>
f012901e:	83 c4 10             	add    $0x10,%esp
f0129021:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		cprintf("ACTUAL = %x, DESIRED = %x\n", (uint32) ptr_allocations[7] ,(ACTUAL_START + 7*Mega + 16*kilo + 2*Mega));
f0129027:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f012902e:	10 00 00 
f0129031:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0129037:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012903c:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0129042:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129048:	ba 00 00 00 00       	mov    $0x0,%edx
f012904d:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0129053:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129059:	29 d0                	sub    %edx,%eax
f012905b:	89 c1                	mov    %eax,%ecx
f012905d:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0129064:	10 00 00 
f0129067:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012906c:	0f b6 d0             	movzbl %al,%edx
f012906f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0129075:	01 d0                	add    %edx,%eax
f0129077:	48                   	dec    %eax
f0129078:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f012907e:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129084:	ba 00 00 00 00       	mov    $0x0,%edx
f0129089:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f012908f:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129095:	29 d0                	sub    %edx,%eax
f0129097:	01 c1                	add    %eax,%ecx
f0129099:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01290a0:	10 00 00 
f01290a3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01290a8:	0f b6 c0             	movzbl %al,%eax
f01290ab:	c1 e0 04             	shl    $0x4,%eax
f01290ae:	89 c2                	mov    %eax,%edx
f01290b0:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01290b6:	01 d0                	add    %edx,%eax
f01290b8:	48                   	dec    %eax
f01290b9:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01290bf:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01290c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01290ca:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01290d0:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01290d6:	29 d0                	sub    %edx,%eax
f01290d8:	01 c8                	add    %ecx,%eax
f01290da:	8d 90 00 80 90 f6    	lea    -0x96f8000(%eax),%edx
f01290e0:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01290e6:	83 ec 04             	sub    $0x4,%esp
f01290e9:	52                   	push   %edx
f01290ea:	50                   	push   %eax
f01290eb:	68 6c bc 13 f0       	push   $0xf013bc6c
f01290f0:	e8 8d 7b fd ff       	call   f0100c82 <cprintf>
f01290f5:	83 c4 10             	add    $0x10,%esp
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 2*Mega)) panic("Wrong start address after kshrink()... check the updating of your data structures");
f01290f8:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01290fe:	89 c1                	mov    %eax,%ecx
f0129100:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0129107:	10 00 00 
f012910a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0129110:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129115:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f012911b:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0129121:	ba 00 00 00 00       	mov    $0x0,%edx
f0129126:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f012912c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0129132:	29 d0                	sub    %edx,%eax
f0129134:	89 c3                	mov    %eax,%ebx
f0129136:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f012913d:	10 00 00 
f0129140:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129145:	0f b6 d0             	movzbl %al,%edx
f0129148:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012914e:	01 d0                	add    %edx,%eax
f0129150:	48                   	dec    %eax
f0129151:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0129157:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012915d:	ba 00 00 00 00       	mov    $0x0,%edx
f0129162:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0129168:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012916e:	29 d0                	sub    %edx,%eax
f0129170:	01 c3                	add    %eax,%ebx
f0129172:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0129179:	10 00 00 
f012917c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129181:	0f b6 c0             	movzbl %al,%eax
f0129184:	c1 e0 04             	shl    $0x4,%eax
f0129187:	89 c2                	mov    %eax,%edx
f0129189:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012918f:	01 d0                	add    %edx,%eax
f0129191:	48                   	dec    %eax
f0129192:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0129198:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012919e:	ba 00 00 00 00       	mov    $0x0,%edx
f01291a3:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f01291a9:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01291af:	29 d0                	sub    %edx,%eax
f01291b1:	01 d8                	add    %ebx,%eax
f01291b3:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f01291b8:	39 c1                	cmp    %eax,%ecx
f01291ba:	74 17                	je     f01291d3 <test_kshrink+0xda8>
f01291bc:	83 ec 04             	sub    $0x4,%esp
f01291bf:	68 88 bc 13 f0       	push   $0xf013bc88
f01291c4:	68 8e 0c 00 00       	push   $0xc8e
f01291c9:	68 da ac 13 f0       	push   $0xf013acda
f01291ce:	e8 28 70 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01291d3:	e8 64 ab fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01291d8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01291db:	74 17                	je     f01291f4 <test_kshrink+0xdc9>
f01291dd:	83 ec 04             	sub    $0x4,%esp
f01291e0:	68 f4 ac 13 f0       	push   $0xf013acf4
f01291e5:	68 8f 0c 00 00       	push   $0xc8f
f01291ea:	68 da ac 13 f0       	push   $0xf013acda
f01291ef:	e8 07 70 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f01291f4:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01291f7:	e8 5f 37 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01291fc:	29 c3                	sub    %eax,%ebx
f01291fe:	89 d8                	mov    %ebx,%eax
f0129200:	3d 00 04 00 00       	cmp    $0x400,%eax
f0129205:	74 17                	je     f012921e <test_kshrink+0xdf3>
f0129207:	83 ec 04             	sub    $0x4,%esp
f012920a:	68 5c ad 13 f0       	push   $0xf013ad5c
f012920f:	68 90 0c 00 00       	push   $0xc90
f0129214:	68 da ac 13 f0       	push   $0xf013acda
f0129219:	e8 dd 6f fd ff       	call   f01001fb <_panic>


	//kfree the shrunk variable
	{
		//kfree 2 MB (shrunk)
		freeFrames = sys_calculate_free_frames() ;
f012921e:	e8 38 37 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0129223:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129226:	e8 11 ab fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012922b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f012922e:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0129234:	83 ec 0c             	sub    $0xc,%esp
f0129237:	50                   	push   %eax
f0129238:	e8 83 e6 fd ff       	call   f01078c0 <kfree>
f012923d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129240:	e8 f7 aa fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129245:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129248:	74 17                	je     f0129261 <test_kshrink+0xe36>
f012924a:	83 ec 04             	sub    $0x4,%esp
f012924d:	68 f4 ac 13 f0       	push   $0xf013acf4
f0129252:	68 9a 0c 00 00       	push   $0xc9a
f0129257:	68 da ac 13 f0       	push   $0xf013acda
f012925c:	e8 9a 6f fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0129261:	e8 f5 36 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0129266:	89 c2                	mov    %eax,%edx
f0129268:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012926b:	29 c2                	sub    %eax,%edx
f012926d:	89 d0                	mov    %edx,%eax
f012926f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129274:	74 17                	je     f012928d <test_kshrink+0xe62>
f0129276:	83 ec 04             	sub    $0x4,%esp
f0129279:	68 8c b5 13 f0       	push   $0xf013b58c
f012927e:	68 9b 0c 00 00       	push   $0xc9b
f0129283:	68 da ac 13 f0       	push   $0xf013acda
f0129288:	e8 6e 6f fd ff       	call   f01001fb <_panic>
	}

	//Shrink last allocated variable to 4 MB - 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f012928d:	e8 c9 36 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0129292:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129295:	e8 a2 aa fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012929a:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(4*Mega - 20*kilo) ;
f012929d:	83 ec 0c             	sub    $0xc,%esp
f01292a0:	68 00 b0 3f 00       	push   $0x3fb000
f01292a5:	e8 d1 e7 fd ff       	call   f0107a7b <kshrink>
f01292aa:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01292ad:	e8 8a aa fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01292b2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01292b5:	74 19                	je     f01292d0 <test_kshrink+0xea5>
f01292b7:	68 74 ba 13 f0       	push   $0xf013ba74
f01292bc:	68 a5 ba 13 f0       	push   $0xf013baa5
f01292c1:	68 a5 0c 00 00       	push   $0xca5
f01292c6:	68 da ac 13 f0       	push   $0xf013acda
f01292cb:	e8 2b 6f fd ff       	call   f01001fb <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 5) ;
f01292d0:	e8 86 36 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01292d5:	89 c2                	mov    %eax,%edx
f01292d7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01292da:	29 c2                	sub    %eax,%edx
f01292dc:	89 d0                	mov    %edx,%eax
f01292de:	83 f8 05             	cmp    $0x5,%eax
f01292e1:	74 19                	je     f01292fc <test_kshrink+0xed1>
f01292e3:	68 dc bc 13 f0       	push   $0xf013bcdc
f01292e8:	68 a5 ba 13 f0       	push   $0xf013baa5
f01292ed:	68 a6 0c 00 00       	push   $0xca6
f01292f2:	68 da ac 13 f0       	push   $0xf013acda
f01292f7:	e8 ff 6e fd ff       	call   f01001fb <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f01292fc:	83 ec 0c             	sub    $0xc,%esp
f01292ff:	68 38 ba 13 f0       	push   $0xf013ba38
f0129304:	e8 79 79 fd ff       	call   f0100c82 <cprintf>
f0129309:	83 c4 10             	add    $0x10,%esp

	return 1;
f012930c:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0129311:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0129314:	5b                   	pop    %ebx
f0129315:	5f                   	pop    %edi
f0129316:	5d                   	pop    %ebp
f0129317:	c3                   	ret    

f0129318 <test_kfreelast>:


int test_kfreelast()
{
f0129318:	55                   	push   %ebp
f0129319:	89 e5                	mov    %esp,%ebp
f012931b:	57                   	push   %edi
f012931c:	53                   	push   %ebx
f012931d:	81 ec 90 02 00 00    	sub    $0x290,%esp
	char minByte = 1<<7;
f0129323:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f0129327:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f012932b:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f0129331:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f0129337:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f012933e:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0129345:	e8 11 36 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012934a:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//malloc some spaces
	int i, ce, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012934d:	8d 95 0c fe ff ff    	lea    -0x1f4(%ebp),%edx
f0129353:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129358:	b8 00 00 00 00       	mov    $0x0,%eax
f012935d:	89 d7                	mov    %edx,%edi
f012935f:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0129361:	8d 95 bc fd ff ff    	lea    -0x244(%ebp),%edx
f0129367:	b9 14 00 00 00       	mov    $0x14,%ecx
f012936c:	b8 00 00 00 00       	mov    $0x0,%eax
f0129371:	89 d7                	mov    %edx,%edi
f0129373:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0129375:	8d 95 6c fd ff ff    	lea    -0x294(%ebp),%edx
f012937b:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129380:	b8 00 00 00 00       	mov    $0x0,%eax
f0129385:	89 d7                	mov    %edx,%edi
f0129387:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129389:	e8 cd 35 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012938e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129391:	e8 a6 a9 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129396:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0129399:	83 ec 0c             	sub    $0xc,%esp
f012939c:	68 00 fc 1f 00       	push   $0x1ffc00
f01293a1:	e8 58 e4 fd ff       	call   f01077fe <kmalloc>
f01293a6:	83 c4 10             	add    $0x10,%esp
f01293a9:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01293af:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f01293b5:	89 c1                	mov    %eax,%ecx
f01293b7:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01293be:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01293c1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01293c6:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01293c9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01293cc:	ba 00 00 00 00       	mov    $0x0,%edx
f01293d1:	f7 75 cc             	divl   -0x34(%ebp)
f01293d4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01293d7:	29 d0                	sub    %edx,%eax
f01293d9:	89 c3                	mov    %eax,%ebx
f01293db:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01293e2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01293e7:	0f b6 d0             	movzbl %al,%edx
f01293ea:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01293ed:	01 d0                	add    %edx,%eax
f01293ef:	48                   	dec    %eax
f01293f0:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01293f3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01293f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01293fb:	f7 75 c4             	divl   -0x3c(%ebp)
f01293fe:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0129401:	29 d0                	sub    %edx,%eax
f0129403:	01 c3                	add    %eax,%ebx
f0129405:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f012940c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129411:	0f b6 c0             	movzbl %al,%eax
f0129414:	c1 e0 04             	shl    $0x4,%eax
f0129417:	89 c2                	mov    %eax,%edx
f0129419:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012941c:	01 d0                	add    %edx,%eax
f012941e:	48                   	dec    %eax
f012941f:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0129422:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0129425:	ba 00 00 00 00       	mov    $0x0,%edx
f012942a:	f7 75 bc             	divl   -0x44(%ebp)
f012942d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0129430:	29 d0                	sub    %edx,%eax
f0129432:	01 d8                	add    %ebx,%eax
f0129434:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0129439:	39 c1                	cmp    %eax,%ecx
f012943b:	74 17                	je     f0129454 <test_kfreelast+0x13c>
f012943d:	83 ec 04             	sub    $0x4,%esp
f0129440:	68 c0 ad 13 f0       	push   $0xf013adc0
f0129445:	68 ca 0c 00 00       	push   $0xcca
f012944a:	68 da ac 13 f0       	push   $0xf013acda
f012944f:	e8 a7 6d fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129454:	e8 e3 a8 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129459:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012945c:	74 17                	je     f0129475 <test_kfreelast+0x15d>
f012945e:	83 ec 04             	sub    $0x4,%esp
f0129461:	68 f4 ac 13 f0       	push   $0xf013acf4
f0129466:	68 cb 0c 00 00       	push   $0xccb
f012946b:	68 da ac 13 f0       	push   $0xf013acda
f0129470:	e8 86 6d fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129475:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129478:	e8 de 34 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012947d:	29 c3                	sub    %eax,%ebx
f012947f:	89 d8                	mov    %ebx,%eax
f0129481:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129486:	74 17                	je     f012949f <test_kfreelast+0x187>
f0129488:	83 ec 04             	sub    $0x4,%esp
f012948b:	68 5c ad 13 f0       	push   $0xf013ad5c
f0129490:	68 cc 0c 00 00       	push   $0xccc
f0129495:	68 da ac 13 f0       	push   $0xf013acda
f012949a:	e8 5c 6d fd ff       	call   f01001fb <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f012949f:	c7 85 0c fe ff ff ff 	movl   $0x1ffbff,-0x1f4(%ebp)
f01294a6:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01294a9:	e8 ad 34 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01294ae:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01294b1:	e8 86 a8 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01294b6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01294b9:	83 ec 0c             	sub    $0xc,%esp
f01294bc:	68 00 fc 1f 00       	push   $0x1ffc00
f01294c1:	e8 38 e3 fd ff       	call   f01077fe <kmalloc>
f01294c6:	83 c4 10             	add    $0x10,%esp
f01294c9:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01294cf:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f01294d5:	89 c1                	mov    %eax,%ecx
f01294d7:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01294de:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01294e1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01294e6:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01294e9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01294ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01294f1:	f7 75 b4             	divl   -0x4c(%ebp)
f01294f4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01294f7:	29 d0                	sub    %edx,%eax
f01294f9:	89 c3                	mov    %eax,%ebx
f01294fb:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0129502:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129507:	0f b6 d0             	movzbl %al,%edx
f012950a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012950d:	01 d0                	add    %edx,%eax
f012950f:	48                   	dec    %eax
f0129510:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0129513:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0129516:	ba 00 00 00 00       	mov    $0x0,%edx
f012951b:	f7 75 ac             	divl   -0x54(%ebp)
f012951e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0129521:	29 d0                	sub    %edx,%eax
f0129523:	01 c3                	add    %eax,%ebx
f0129525:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012952c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129531:	0f b6 c0             	movzbl %al,%eax
f0129534:	c1 e0 04             	shl    $0x4,%eax
f0129537:	89 c2                	mov    %eax,%edx
f0129539:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012953c:	01 d0                	add    %edx,%eax
f012953e:	48                   	dec    %eax
f012953f:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0129542:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0129545:	ba 00 00 00 00       	mov    $0x0,%edx
f012954a:	f7 75 a4             	divl   -0x5c(%ebp)
f012954d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0129550:	29 d0                	sub    %edx,%eax
f0129552:	01 d8                	add    %ebx,%eax
f0129554:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0129559:	39 c1                	cmp    %eax,%ecx
f012955b:	74 17                	je     f0129574 <test_kfreelast+0x25c>
f012955d:	83 ec 04             	sub    $0x4,%esp
f0129560:	68 c0 ad 13 f0       	push   $0xf013adc0
f0129565:	68 d3 0c 00 00       	push   $0xcd3
f012956a:	68 da ac 13 f0       	push   $0xf013acda
f012956f:	e8 87 6c fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129574:	e8 c3 a7 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129579:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012957c:	74 17                	je     f0129595 <test_kfreelast+0x27d>
f012957e:	83 ec 04             	sub    $0x4,%esp
f0129581:	68 f4 ac 13 f0       	push   $0xf013acf4
f0129586:	68 d4 0c 00 00       	push   $0xcd4
f012958b:	68 da ac 13 f0       	push   $0xf013acda
f0129590:	e8 66 6c fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129595:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129598:	e8 be 33 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012959d:	29 c3                	sub    %eax,%ebx
f012959f:	89 d8                	mov    %ebx,%eax
f01295a1:	3d 00 02 00 00       	cmp    $0x200,%eax
f01295a6:	74 17                	je     f01295bf <test_kfreelast+0x2a7>
f01295a8:	83 ec 04             	sub    $0x4,%esp
f01295ab:	68 5c ad 13 f0       	push   $0xf013ad5c
f01295b0:	68 d5 0c 00 00       	push   $0xcd5
f01295b5:	68 da ac 13 f0       	push   $0xf013acda
f01295ba:	e8 3c 6c fd ff       	call   f01001fb <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01295bf:	c7 85 10 fe ff ff ff 	movl   $0x1ffbff,-0x1f0(%ebp)
f01295c6:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01295c9:	e8 8d 33 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01295ce:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01295d1:	e8 66 a7 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01295d6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01295d9:	83 ec 0c             	sub    $0xc,%esp
f01295dc:	68 00 08 00 00       	push   $0x800
f01295e1:	e8 18 e2 fd ff       	call   f01077fe <kmalloc>
f01295e6:	83 c4 10             	add    $0x10,%esp
f01295e9:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01295ef:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f01295f5:	89 c1                	mov    %eax,%ecx
f01295f7:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f01295fe:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129601:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129606:	89 45 98             	mov    %eax,-0x68(%ebp)
f0129609:	8b 45 98             	mov    -0x68(%ebp),%eax
f012960c:	ba 00 00 00 00       	mov    $0x0,%edx
f0129611:	f7 75 9c             	divl   -0x64(%ebp)
f0129614:	8b 45 98             	mov    -0x68(%ebp),%eax
f0129617:	29 d0                	sub    %edx,%eax
f0129619:	89 c3                	mov    %eax,%ebx
f012961b:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0129622:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129627:	0f b6 d0             	movzbl %al,%edx
f012962a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012962d:	01 d0                	add    %edx,%eax
f012962f:	48                   	dec    %eax
f0129630:	89 45 90             	mov    %eax,-0x70(%ebp)
f0129633:	8b 45 90             	mov    -0x70(%ebp),%eax
f0129636:	ba 00 00 00 00       	mov    $0x0,%edx
f012963b:	f7 75 94             	divl   -0x6c(%ebp)
f012963e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0129641:	29 d0                	sub    %edx,%eax
f0129643:	01 c3                	add    %eax,%ebx
f0129645:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012964c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129651:	0f b6 c0             	movzbl %al,%eax
f0129654:	c1 e0 04             	shl    $0x4,%eax
f0129657:	89 c2                	mov    %eax,%edx
f0129659:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012965c:	01 d0                	add    %edx,%eax
f012965e:	48                   	dec    %eax
f012965f:	89 45 88             	mov    %eax,-0x78(%ebp)
f0129662:	8b 45 88             	mov    -0x78(%ebp),%eax
f0129665:	ba 00 00 00 00       	mov    $0x0,%edx
f012966a:	f7 75 8c             	divl   -0x74(%ebp)
f012966d:	8b 45 88             	mov    -0x78(%ebp),%eax
f0129670:	29 d0                	sub    %edx,%eax
f0129672:	01 d8                	add    %ebx,%eax
f0129674:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0129679:	39 c1                	cmp    %eax,%ecx
f012967b:	74 17                	je     f0129694 <test_kfreelast+0x37c>
f012967d:	83 ec 04             	sub    $0x4,%esp
f0129680:	68 c0 ad 13 f0       	push   $0xf013adc0
f0129685:	68 dc 0c 00 00       	push   $0xcdc
f012968a:	68 da ac 13 f0       	push   $0xf013acda
f012968f:	e8 67 6b fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129694:	e8 a3 a6 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129699:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012969c:	74 17                	je     f01296b5 <test_kfreelast+0x39d>
f012969e:	83 ec 04             	sub    $0x4,%esp
f01296a1:	68 f4 ac 13 f0       	push   $0xf013acf4
f01296a6:	68 dd 0c 00 00       	push   $0xcdd
f01296ab:	68 da ac 13 f0       	push   $0xf013acda
f01296b0:	e8 46 6b fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01296b5:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01296b8:	e8 9e 32 fe ff       	call   f010c95b <sys_calculate_free_frames>
f01296bd:	29 c3                	sub    %eax,%ebx
f01296bf:	89 d8                	mov    %ebx,%eax
f01296c1:	83 f8 01             	cmp    $0x1,%eax
f01296c4:	74 17                	je     f01296dd <test_kfreelast+0x3c5>
f01296c6:	83 ec 04             	sub    $0x4,%esp
f01296c9:	68 5c ad 13 f0       	push   $0xf013ad5c
f01296ce:	68 de 0c 00 00       	push   $0xcde
f01296d3:	68 da ac 13 f0       	push   $0xf013acda
f01296d8:	e8 1e 6b fd ff       	call   f01001fb <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01296dd:	c7 85 14 fe ff ff ff 	movl   $0x7ff,-0x1ec(%ebp)
f01296e4:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01296e7:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f01296ed:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01296f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01296f7:	eb 0e                	jmp    f0129707 <test_kfreelast+0x3ef>
		{
			ptr[i] = 2 ;
f01296f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01296fc:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01296ff:	01 d0                	add    %edx,%eax
f0129701:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0129704:	ff 45 f4             	incl   -0xc(%ebp)
f0129707:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012970d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129710:	7f e7                	jg     f01296f9 <test_kfreelast+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129712:	e8 44 32 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0129717:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012971a:	e8 1d a6 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012971f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0129722:	83 ec 0c             	sub    $0xc,%esp
f0129725:	68 00 08 00 00       	push   $0x800
f012972a:	e8 cf e0 fd ff       	call   f01077fe <kmalloc>
f012972f:	83 c4 10             	add    $0x10,%esp
f0129732:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129738:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012973e:	89 c1                	mov    %eax,%ecx
f0129740:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0129747:	8b 45 80             	mov    -0x80(%ebp),%eax
f012974a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012974f:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0129755:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012975b:	ba 00 00 00 00       	mov    $0x0,%edx
f0129760:	f7 75 80             	divl   -0x80(%ebp)
f0129763:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0129769:	29 d0                	sub    %edx,%eax
f012976b:	89 c3                	mov    %eax,%ebx
f012976d:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0129774:	10 00 00 
f0129777:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012977c:	0f b6 d0             	movzbl %al,%edx
f012977f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0129785:	01 d0                	add    %edx,%eax
f0129787:	48                   	dec    %eax
f0129788:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f012978e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0129794:	ba 00 00 00 00       	mov    $0x0,%edx
f0129799:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f012979f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01297a5:	29 d0                	sub    %edx,%eax
f01297a7:	01 c3                	add    %eax,%ebx
f01297a9:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01297b0:	10 00 00 
f01297b3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01297b8:	0f b6 c0             	movzbl %al,%eax
f01297bb:	c1 e0 04             	shl    $0x4,%eax
f01297be:	89 c2                	mov    %eax,%edx
f01297c0:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01297c6:	01 d0                	add    %edx,%eax
f01297c8:	48                   	dec    %eax
f01297c9:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01297cf:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01297d5:	ba 00 00 00 00       	mov    $0x0,%edx
f01297da:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01297e0:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01297e6:	29 d0                	sub    %edx,%eax
f01297e8:	01 d8                	add    %ebx,%eax
f01297ea:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01297ef:	39 c1                	cmp    %eax,%ecx
f01297f1:	74 17                	je     f012980a <test_kfreelast+0x4f2>
f01297f3:	83 ec 04             	sub    $0x4,%esp
f01297f6:	68 c0 ad 13 f0       	push   $0xf013adc0
f01297fb:	68 ea 0c 00 00       	push   $0xcea
f0129800:	68 da ac 13 f0       	push   $0xf013acda
f0129805:	e8 f1 69 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012980a:	e8 2d a5 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012980f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129812:	74 17                	je     f012982b <test_kfreelast+0x513>
f0129814:	83 ec 04             	sub    $0x4,%esp
f0129817:	68 f4 ac 13 f0       	push   $0xf013acf4
f012981c:	68 eb 0c 00 00       	push   $0xceb
f0129821:	68 da ac 13 f0       	push   $0xf013acda
f0129826:	e8 d0 69 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012982b:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012982e:	e8 28 31 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0129833:	29 c3                	sub    %eax,%ebx
f0129835:	89 d8                	mov    %ebx,%eax
f0129837:	83 f8 01             	cmp    $0x1,%eax
f012983a:	74 17                	je     f0129853 <test_kfreelast+0x53b>
f012983c:	83 ec 04             	sub    $0x4,%esp
f012983f:	68 5c ad 13 f0       	push   $0xf013ad5c
f0129844:	68 ec 0c 00 00       	push   $0xcec
f0129849:	68 da ac 13 f0       	push   $0xf013acda
f012984e:	e8 a8 69 fd ff       	call   f01001fb <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0129853:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f012985a:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012985d:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0129863:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0129866:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012986d:	eb 0e                	jmp    f012987d <test_kfreelast+0x565>
		{
			ptr[i] = 3 ;
f012986f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129872:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129875:	01 d0                	add    %edx,%eax
f0129877:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012987a:	ff 45 f4             	incl   -0xc(%ebp)
f012987d:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129883:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129886:	7f e7                	jg     f012986f <test_kfreelast+0x557>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0129888:	e8 ce 30 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012988d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129890:	e8 a7 a4 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129895:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0129898:	83 ec 0c             	sub    $0xc,%esp
f012989b:	68 00 1c 00 00       	push   $0x1c00
f01298a0:	e8 59 df fd ff       	call   f01077fe <kmalloc>
f01298a5:	83 c4 10             	add    $0x10,%esp
f01298a8:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01298ae:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f01298b4:	89 c1                	mov    %eax,%ecx
f01298b6:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01298bd:	10 00 00 
f01298c0:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01298c6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01298cb:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01298d1:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01298d7:	ba 00 00 00 00       	mov    $0x0,%edx
f01298dc:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01298e2:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01298e8:	29 d0                	sub    %edx,%eax
f01298ea:	89 c3                	mov    %eax,%ebx
f01298ec:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01298f3:	10 00 00 
f01298f6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01298fb:	0f b6 d0             	movzbl %al,%edx
f01298fe:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0129904:	01 d0                	add    %edx,%eax
f0129906:	48                   	dec    %eax
f0129907:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f012990d:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0129913:	ba 00 00 00 00       	mov    $0x0,%edx
f0129918:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f012991e:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0129924:	29 d0                	sub    %edx,%eax
f0129926:	01 c3                	add    %eax,%ebx
f0129928:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f012992f:	10 00 00 
f0129932:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129937:	0f b6 c0             	movzbl %al,%eax
f012993a:	c1 e0 04             	shl    $0x4,%eax
f012993d:	89 c2                	mov    %eax,%edx
f012993f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0129945:	01 d0                	add    %edx,%eax
f0129947:	48                   	dec    %eax
f0129948:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f012994e:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0129954:	ba 00 00 00 00       	mov    $0x0,%edx
f0129959:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f012995f:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0129965:	29 d0                	sub    %edx,%eax
f0129967:	01 d8                	add    %ebx,%eax
f0129969:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012996e:	39 c1                	cmp    %eax,%ecx
f0129970:	74 17                	je     f0129989 <test_kfreelast+0x671>
f0129972:	83 ec 04             	sub    $0x4,%esp
f0129975:	68 c0 ad 13 f0       	push   $0xf013adc0
f012997a:	68 f8 0c 00 00       	push   $0xcf8
f012997f:	68 da ac 13 f0       	push   $0xf013acda
f0129984:	e8 72 68 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129989:	e8 ae a3 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012998e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129991:	74 17                	je     f01299aa <test_kfreelast+0x692>
f0129993:	83 ec 04             	sub    $0x4,%esp
f0129996:	68 f4 ac 13 f0       	push   $0xf013acf4
f012999b:	68 f9 0c 00 00       	push   $0xcf9
f01299a0:	68 da ac 13 f0       	push   $0xf013acda
f01299a5:	e8 51 68 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01299aa:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01299ad:	e8 a9 2f fe ff       	call   f010c95b <sys_calculate_free_frames>
f01299b2:	29 c3                	sub    %eax,%ebx
f01299b4:	89 d8                	mov    %ebx,%eax
f01299b6:	83 f8 02             	cmp    $0x2,%eax
f01299b9:	74 17                	je     f01299d2 <test_kfreelast+0x6ba>
f01299bb:	83 ec 04             	sub    $0x4,%esp
f01299be:	68 5c ad 13 f0       	push   $0xf013ad5c
f01299c3:	68 fa 0c 00 00       	push   $0xcfa
f01299c8:	68 da ac 13 f0       	push   $0xf013acda
f01299cd:	e8 29 68 fd ff       	call   f01001fb <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01299d2:	c7 85 1c fe ff ff ff 	movl   $0x1bff,-0x1e4(%ebp)
f01299d9:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01299dc:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f01299e2:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01299e5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01299ec:	eb 0e                	jmp    f01299fc <test_kfreelast+0x6e4>
		{
			ptr[i] = 4 ;
f01299ee:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01299f1:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01299f4:	01 d0                	add    %edx,%eax
f01299f6:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01299f9:	ff 45 f4             	incl   -0xc(%ebp)
f01299fc:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0129a02:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129a05:	7f e7                	jg     f01299ee <test_kfreelast+0x6d6>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0129a07:	e8 4f 2f fe ff       	call   f010c95b <sys_calculate_free_frames>
f0129a0c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129a0f:	e8 28 a3 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129a14:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0129a17:	83 ec 0c             	sub    $0xc,%esp
f0129a1a:	68 00 fc 2f 00       	push   $0x2ffc00
f0129a1f:	e8 da dd fd ff       	call   f01077fe <kmalloc>
f0129a24:	83 c4 10             	add    $0x10,%esp
f0129a27:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129a2d:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f0129a33:	89 c1                	mov    %eax,%ecx
f0129a35:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0129a3c:	10 00 00 
f0129a3f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0129a45:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129a4a:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0129a50:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0129a56:	ba 00 00 00 00       	mov    $0x0,%edx
f0129a5b:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0129a61:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0129a67:	29 d0                	sub    %edx,%eax
f0129a69:	89 c3                	mov    %eax,%ebx
f0129a6b:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0129a72:	10 00 00 
f0129a75:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129a7a:	0f b6 d0             	movzbl %al,%edx
f0129a7d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0129a83:	01 d0                	add    %edx,%eax
f0129a85:	48                   	dec    %eax
f0129a86:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0129a8c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0129a92:	ba 00 00 00 00       	mov    $0x0,%edx
f0129a97:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0129a9d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0129aa3:	29 d0                	sub    %edx,%eax
f0129aa5:	01 c3                	add    %eax,%ebx
f0129aa7:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0129aae:	10 00 00 
f0129ab1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129ab6:	0f b6 c0             	movzbl %al,%eax
f0129ab9:	c1 e0 04             	shl    $0x4,%eax
f0129abc:	89 c2                	mov    %eax,%edx
f0129abe:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0129ac4:	01 d0                	add    %edx,%eax
f0129ac6:	48                   	dec    %eax
f0129ac7:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0129acd:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0129ad3:	ba 00 00 00 00       	mov    $0x0,%edx
f0129ad8:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0129ade:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0129ae4:	29 d0                	sub    %edx,%eax
f0129ae6:	01 d8                	add    %ebx,%eax
f0129ae8:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0129aed:	39 c1                	cmp    %eax,%ecx
f0129aef:	74 17                	je     f0129b08 <test_kfreelast+0x7f0>
f0129af1:	83 ec 04             	sub    $0x4,%esp
f0129af4:	68 c0 ad 13 f0       	push   $0xf013adc0
f0129af9:	68 06 0d 00 00       	push   $0xd06
f0129afe:	68 da ac 13 f0       	push   $0xf013acda
f0129b03:	e8 f3 66 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129b08:	e8 2f a2 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129b0d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129b10:	74 17                	je     f0129b29 <test_kfreelast+0x811>
f0129b12:	83 ec 04             	sub    $0x4,%esp
f0129b15:	68 f4 ac 13 f0       	push   $0xf013acf4
f0129b1a:	68 07 0d 00 00       	push   $0xd07
f0129b1f:	68 da ac 13 f0       	push   $0xf013acda
f0129b24:	e8 d2 66 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129b29:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129b2c:	e8 2a 2e fe ff       	call   f010c95b <sys_calculate_free_frames>
f0129b31:	29 c3                	sub    %eax,%ebx
f0129b33:	89 d8                	mov    %ebx,%eax
f0129b35:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129b3a:	74 17                	je     f0129b53 <test_kfreelast+0x83b>
f0129b3c:	83 ec 04             	sub    $0x4,%esp
f0129b3f:	68 5c ad 13 f0       	push   $0xf013ad5c
f0129b44:	68 08 0d 00 00       	push   $0xd08
f0129b49:	68 da ac 13 f0       	push   $0xf013acda
f0129b4e:	e8 a8 66 fd ff       	call   f01001fb <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0129b53:	c7 85 20 fe ff ff ff 	movl   $0x2ffbff,-0x1e0(%ebp)
f0129b5a:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0129b5d:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f0129b63:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0129b66:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129b6d:	eb 0e                	jmp    f0129b7d <test_kfreelast+0x865>
		{
			ptr[i] = 5 ;
f0129b6f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129b72:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129b75:	01 d0                	add    %edx,%eax
f0129b77:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0129b7a:	ff 45 f4             	incl   -0xc(%ebp)
f0129b7d:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0129b83:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129b86:	7f e7                	jg     f0129b6f <test_kfreelast+0x857>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0129b88:	e8 ce 2d fe ff       	call   f010c95b <sys_calculate_free_frames>
f0129b8d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129b90:	e8 a7 a1 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129b95:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0129b98:	83 ec 0c             	sub    $0xc,%esp
f0129b9b:	68 00 fc 5f 00       	push   $0x5ffc00
f0129ba0:	e8 59 dc fd ff       	call   f01077fe <kmalloc>
f0129ba5:	83 c4 10             	add    $0x10,%esp
f0129ba8:	89 85 84 fd ff ff    	mov    %eax,-0x27c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129bae:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f0129bb4:	89 c1                	mov    %eax,%ecx
f0129bb6:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0129bbd:	10 00 00 
f0129bc0:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0129bc6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129bcb:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0129bd1:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0129bd7:	ba 00 00 00 00       	mov    $0x0,%edx
f0129bdc:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0129be2:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0129be8:	29 d0                	sub    %edx,%eax
f0129bea:	89 c3                	mov    %eax,%ebx
f0129bec:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0129bf3:	10 00 00 
f0129bf6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129bfb:	0f b6 d0             	movzbl %al,%edx
f0129bfe:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0129c04:	01 d0                	add    %edx,%eax
f0129c06:	48                   	dec    %eax
f0129c07:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0129c0d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0129c13:	ba 00 00 00 00       	mov    $0x0,%edx
f0129c18:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0129c1e:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0129c24:	29 d0                	sub    %edx,%eax
f0129c26:	01 c3                	add    %eax,%ebx
f0129c28:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0129c2f:	10 00 00 
f0129c32:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129c37:	0f b6 c0             	movzbl %al,%eax
f0129c3a:	c1 e0 04             	shl    $0x4,%eax
f0129c3d:	89 c2                	mov    %eax,%edx
f0129c3f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0129c45:	01 d0                	add    %edx,%eax
f0129c47:	48                   	dec    %eax
f0129c48:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0129c4e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0129c54:	ba 00 00 00 00       	mov    $0x0,%edx
f0129c59:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0129c5f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0129c65:	29 d0                	sub    %edx,%eax
f0129c67:	01 d8                	add    %ebx,%eax
f0129c69:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0129c6e:	39 c1                	cmp    %eax,%ecx
f0129c70:	74 17                	je     f0129c89 <test_kfreelast+0x971>
f0129c72:	83 ec 04             	sub    $0x4,%esp
f0129c75:	68 c0 ad 13 f0       	push   $0xf013adc0
f0129c7a:	68 14 0d 00 00       	push   $0xd14
f0129c7f:	68 da ac 13 f0       	push   $0xf013acda
f0129c84:	e8 72 65 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129c89:	e8 ae a0 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129c8e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129c91:	74 17                	je     f0129caa <test_kfreelast+0x992>
f0129c93:	83 ec 04             	sub    $0x4,%esp
f0129c96:	68 f4 ac 13 f0       	push   $0xf013acf4
f0129c9b:	68 15 0d 00 00       	push   $0xd15
f0129ca0:	68 da ac 13 f0       	push   $0xf013acda
f0129ca5:	e8 51 65 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129caa:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129cad:	e8 a9 2c fe ff       	call   f010c95b <sys_calculate_free_frames>
f0129cb2:	29 c3                	sub    %eax,%ebx
f0129cb4:	89 d8                	mov    %ebx,%eax
f0129cb6:	3d 00 06 00 00       	cmp    $0x600,%eax
f0129cbb:	74 17                	je     f0129cd4 <test_kfreelast+0x9bc>
f0129cbd:	83 ec 04             	sub    $0x4,%esp
f0129cc0:	68 5c ad 13 f0       	push   $0xf013ad5c
f0129cc5:	68 16 0d 00 00       	push   $0xd16
f0129cca:	68 da ac 13 f0       	push   $0xf013acda
f0129ccf:	e8 27 65 fd ff       	call   f01001fb <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0129cd4:	c7 85 24 fe ff ff ff 	movl   $0x5ffbff,-0x1dc(%ebp)
f0129cdb:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0129cde:	e8 78 2c fe ff       	call   f010c95b <sys_calculate_free_frames>
f0129ce3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129ce6:	e8 51 a0 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129ceb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0129cee:	83 ec 0c             	sub    $0xc,%esp
f0129cf1:	68 00 38 00 00       	push   $0x3800
f0129cf6:	e8 03 db fd ff       	call   f01077fe <kmalloc>
f0129cfb:	83 c4 10             	add    $0x10,%esp
f0129cfe:	89 85 88 fd ff ff    	mov    %eax,-0x278(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129d04:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f0129d0a:	89 c1                	mov    %eax,%ecx
f0129d0c:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0129d13:	10 00 00 
f0129d16:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0129d1c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129d21:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0129d27:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129d2d:	ba 00 00 00 00       	mov    $0x0,%edx
f0129d32:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0129d38:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129d3e:	29 d0                	sub    %edx,%eax
f0129d40:	89 c3                	mov    %eax,%ebx
f0129d42:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0129d49:	10 00 00 
f0129d4c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129d51:	0f b6 d0             	movzbl %al,%edx
f0129d54:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0129d5a:	01 d0                	add    %edx,%eax
f0129d5c:	48                   	dec    %eax
f0129d5d:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0129d63:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129d69:	ba 00 00 00 00       	mov    $0x0,%edx
f0129d6e:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0129d74:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129d7a:	29 d0                	sub    %edx,%eax
f0129d7c:	01 c3                	add    %eax,%ebx
f0129d7e:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0129d85:	10 00 00 
f0129d88:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129d8d:	0f b6 c0             	movzbl %al,%eax
f0129d90:	c1 e0 04             	shl    $0x4,%eax
f0129d93:	89 c2                	mov    %eax,%edx
f0129d95:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0129d9b:	01 d0                	add    %edx,%eax
f0129d9d:	48                   	dec    %eax
f0129d9e:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0129da4:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0129daa:	ba 00 00 00 00       	mov    $0x0,%edx
f0129daf:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0129db5:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0129dbb:	29 d0                	sub    %edx,%eax
f0129dbd:	01 d8                	add    %ebx,%eax
f0129dbf:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0129dc4:	39 c1                	cmp    %eax,%ecx
f0129dc6:	74 17                	je     f0129ddf <test_kfreelast+0xac7>
f0129dc8:	83 ec 04             	sub    $0x4,%esp
f0129dcb:	68 c0 ad 13 f0       	push   $0xf013adc0
f0129dd0:	68 1d 0d 00 00       	push   $0xd1d
f0129dd5:	68 da ac 13 f0       	push   $0xf013acda
f0129dda:	e8 1c 64 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129ddf:	e8 58 9f fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129de4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129de7:	74 17                	je     f0129e00 <test_kfreelast+0xae8>
f0129de9:	83 ec 04             	sub    $0x4,%esp
f0129dec:	68 f4 ac 13 f0       	push   $0xf013acf4
f0129df1:	68 1e 0d 00 00       	push   $0xd1e
f0129df6:	68 da ac 13 f0       	push   $0xf013acda
f0129dfb:	e8 fb 63 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129e00:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129e03:	e8 53 2b fe ff       	call   f010c95b <sys_calculate_free_frames>
f0129e08:	29 c3                	sub    %eax,%ebx
f0129e0a:	89 d8                	mov    %ebx,%eax
f0129e0c:	83 f8 04             	cmp    $0x4,%eax
f0129e0f:	74 17                	je     f0129e28 <test_kfreelast+0xb10>
f0129e11:	83 ec 04             	sub    $0x4,%esp
f0129e14:	68 5c ad 13 f0       	push   $0xf013ad5c
f0129e19:	68 1f 0d 00 00       	push   $0xd1f
f0129e1e:	68 da ac 13 f0       	push   $0xf013acda
f0129e23:	e8 d3 63 fd ff       	call   f01001fb <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0129e28:	c7 85 28 fe ff ff ff 	movl   $0x37ff,-0x1d8(%ebp)
f0129e2f:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0129e32:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f0129e38:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0129e3b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129e42:	eb 0e                	jmp    f0129e52 <test_kfreelast+0xb3a>
		{
			ptr[i] = 7 ;
f0129e44:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129e47:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129e4a:	01 d0                	add    %edx,%eax
f0129e4c:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0129e4f:	ff 45 f4             	incl   -0xc(%ebp)
f0129e52:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0129e58:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129e5b:	7f e7                	jg     f0129e44 <test_kfreelast+0xb2c>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0129e5d:	e8 f9 2a fe ff       	call   f010c95b <sys_calculate_free_frames>
f0129e62:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0129e68:	e8 cf 9e fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129e6d:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[0]);
f0129e73:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0129e79:	83 ec 0c             	sub    $0xc,%esp
f0129e7c:	50                   	push   %eax
f0129e7d:	e8 3e da fd ff       	call   f01078c0 <kfree>
f0129e82:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129e85:	e8 b2 9e fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129e8a:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f0129e90:	74 17                	je     f0129ea9 <test_kfreelast+0xb91>
f0129e92:	83 ec 04             	sub    $0x4,%esp
f0129e95:	68 f4 ac 13 f0       	push   $0xf013acf4
f0129e9a:	68 2e 0d 00 00       	push   $0xd2e
f0129e9f:	68 da ac 13 f0       	push   $0xf013acda
f0129ea4:	e8 52 63 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0129ea9:	e8 ad 2a fe ff       	call   f010c95b <sys_calculate_free_frames>
f0129eae:	89 c2                	mov    %eax,%edx
f0129eb0:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0129eb6:	29 c2                	sub    %eax,%edx
f0129eb8:	89 d0                	mov    %edx,%eax
f0129eba:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129ebf:	74 17                	je     f0129ed8 <test_kfreelast+0xbc0>
f0129ec1:	83 ec 04             	sub    $0x4,%esp
f0129ec4:	68 64 b4 13 f0       	push   $0xf013b464
f0129ec9:	68 2f 0d 00 00       	push   $0xd2f
f0129ece:	68 da ac 13 f0       	push   $0xf013acda
f0129ed3:	e8 23 63 fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129ed8:	e8 7e 2a fe ff       	call   f010c95b <sys_calculate_free_frames>
f0129edd:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129ee3:	e8 54 9e fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129ee8:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[1]);
f0129eee:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0129ef4:	83 ec 0c             	sub    $0xc,%esp
f0129ef7:	50                   	push   %eax
f0129ef8:	e8 c3 d9 fd ff       	call   f01078c0 <kfree>
f0129efd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129f00:	e8 37 9e fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129f05:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f0129f0b:	74 17                	je     f0129f24 <test_kfreelast+0xc0c>
f0129f0d:	83 ec 04             	sub    $0x4,%esp
f0129f10:	68 f4 ac 13 f0       	push   $0xf013acf4
f0129f15:	68 35 0d 00 00       	push   $0xd35
f0129f1a:	68 da ac 13 f0       	push   $0xf013acda
f0129f1f:	e8 d7 62 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0129f24:	e8 32 2a fe ff       	call   f010c95b <sys_calculate_free_frames>
f0129f29:	89 c2                	mov    %eax,%edx
f0129f2b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0129f31:	29 c2                	sub    %eax,%edx
f0129f33:	89 d0                	mov    %edx,%eax
f0129f35:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129f3a:	74 17                	je     f0129f53 <test_kfreelast+0xc3b>
f0129f3c:	83 ec 04             	sub    $0x4,%esp
f0129f3f:	68 64 b4 13 f0       	push   $0xf013b464
f0129f44:	68 36 0d 00 00       	push   $0xd36
f0129f49:	68 da ac 13 f0       	push   $0xf013acda
f0129f4e:	e8 a8 62 fd ff       	call   f01001fb <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0129f53:	e8 03 2a fe ff       	call   f010c95b <sys_calculate_free_frames>
f0129f58:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129f5e:	e8 d9 9d fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129f63:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[6]);
f0129f69:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f0129f6f:	83 ec 0c             	sub    $0xc,%esp
f0129f72:	50                   	push   %eax
f0129f73:	e8 48 d9 fd ff       	call   f01078c0 <kfree>
f0129f78:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129f7b:	e8 bc 9d fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129f80:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f0129f86:	74 17                	je     f0129f9f <test_kfreelast+0xc87>
f0129f88:	83 ec 04             	sub    $0x4,%esp
f0129f8b:	68 f4 ac 13 f0       	push   $0xf013acf4
f0129f90:	68 3c 0d 00 00       	push   $0xd3c
f0129f95:	68 da ac 13 f0       	push   $0xf013acda
f0129f9a:	e8 5c 62 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0129f9f:	e8 b7 29 fe ff       	call   f010c95b <sys_calculate_free_frames>
f0129fa4:	89 c2                	mov    %eax,%edx
f0129fa6:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0129fac:	29 c2                	sub    %eax,%edx
f0129fae:	89 d0                	mov    %edx,%eax
f0129fb0:	3d 00 06 00 00       	cmp    $0x600,%eax
f0129fb5:	74 17                	je     f0129fce <test_kfreelast+0xcb6>
f0129fb7:	83 ec 04             	sub    $0x4,%esp
f0129fba:	68 64 b4 13 f0       	push   $0xf013b464
f0129fbf:	68 3d 0d 00 00       	push   $0xd3d
f0129fc4:	68 da ac 13 f0       	push   $0xf013acda
f0129fc9:	e8 2d 62 fd ff       	call   f01001fb <_panic>
	}

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0129fce:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0129fd4:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0129fd7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129fde:	eb 1e                	jmp    f0129ffe <test_kfreelast+0xce6>
		{
			sums[2] += ptr[i] ;
f0129fe0:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f0129fe6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129fe9:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129fec:	01 c8                	add    %ecx,%eax
f0129fee:	8a 00                	mov    (%eax),%al
f0129ff0:	0f be c0             	movsbl %al,%eax
f0129ff3:	01 d0                	add    %edx,%eax
f0129ff5:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0129ffb:	ff 45 f4             	incl   -0xc(%ebp)
f0129ffe:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012a004:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a007:	7f d7                	jg     f0129fe0 <test_kfreelast+0xcc8>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f012a009:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012a00f:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012a015:	01 c0                	add    %eax,%eax
f012a017:	39 c2                	cmp    %eax,%edx
f012a019:	74 17                	je     f012a032 <test_kfreelast+0xd1a>
f012a01b:	83 ec 04             	sub    $0x4,%esp
f012a01e:	68 c0 b4 13 f0       	push   $0xf013b4c0
f012a023:	68 48 0d 00 00       	push   $0xd48
f012a028:	68 da ac 13 f0       	push   $0xf013acda
f012a02d:	e8 c9 61 fd ff       	call   f01001fb <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f012a032:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012a038:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012a03b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a042:	eb 1e                	jmp    f012a062 <test_kfreelast+0xd4a>
		{
			sums[3] += ptr[i] ;
f012a044:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012a04a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a04d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a050:	01 c8                	add    %ecx,%eax
f012a052:	8a 00                	mov    (%eax),%al
f012a054:	0f be c0             	movsbl %al,%eax
f012a057:	01 d0                	add    %edx,%eax
f012a059:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012a05f:	ff 45 f4             	incl   -0xc(%ebp)
f012a062:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012a068:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a06b:	7f d7                	jg     f012a044 <test_kfreelast+0xd2c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f012a06d:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012a073:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012a079:	89 c1                	mov    %eax,%ecx
f012a07b:	01 c9                	add    %ecx,%ecx
f012a07d:	01 c8                	add    %ecx,%eax
f012a07f:	39 c2                	cmp    %eax,%edx
f012a081:	74 17                	je     f012a09a <test_kfreelast+0xd82>
f012a083:	83 ec 04             	sub    $0x4,%esp
f012a086:	68 c0 b4 13 f0       	push   $0xf013b4c0
f012a08b:	68 50 0d 00 00       	push   $0xd50
f012a090:	68 da ac 13 f0       	push   $0xf013acda
f012a095:	e8 61 61 fd ff       	call   f01001fb <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f012a09a:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012a0a0:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012a0a3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a0aa:	eb 1e                	jmp    f012a0ca <test_kfreelast+0xdb2>
		{
			sums[4] += ptr[i] ;
f012a0ac:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012a0b2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a0b5:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a0b8:	01 c8                	add    %ecx,%eax
f012a0ba:	8a 00                	mov    (%eax),%al
f012a0bc:	0f be c0             	movsbl %al,%eax
f012a0bf:	01 d0                	add    %edx,%eax
f012a0c1:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012a0c7:	ff 45 f4             	incl   -0xc(%ebp)
f012a0ca:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012a0d0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a0d3:	7f d7                	jg     f012a0ac <test_kfreelast+0xd94>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f012a0d5:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f012a0db:	8b 95 1c fe ff ff    	mov    -0x1e4(%ebp),%edx
f012a0e1:	c1 e2 02             	shl    $0x2,%edx
f012a0e4:	39 d0                	cmp    %edx,%eax
f012a0e6:	74 17                	je     f012a0ff <test_kfreelast+0xde7>
f012a0e8:	83 ec 04             	sub    $0x4,%esp
f012a0eb:	68 c0 b4 13 f0       	push   $0xf013b4c0
f012a0f0:	68 58 0d 00 00       	push   $0xd58
f012a0f5:	68 da ac 13 f0       	push   $0xf013acda
f012a0fa:	e8 fc 60 fd ff       	call   f01001fb <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f012a0ff:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012a105:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012a108:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a10f:	eb 1e                	jmp    f012a12f <test_kfreelast+0xe17>
		{
			sums[5] += ptr[i] ;
f012a111:	8b 95 d0 fd ff ff    	mov    -0x230(%ebp),%edx
f012a117:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a11a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a11d:	01 c8                	add    %ecx,%eax
f012a11f:	8a 00                	mov    (%eax),%al
f012a121:	0f be c0             	movsbl %al,%eax
f012a124:	01 d0                	add    %edx,%eax
f012a126:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012a12c:	ff 45 f4             	incl   -0xc(%ebp)
f012a12f:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012a135:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a138:	7f d7                	jg     f012a111 <test_kfreelast+0xdf9>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f012a13a:	8b 8d d0 fd ff ff    	mov    -0x230(%ebp),%ecx
f012a140:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f012a146:	89 d0                	mov    %edx,%eax
f012a148:	c1 e0 02             	shl    $0x2,%eax
f012a14b:	01 d0                	add    %edx,%eax
f012a14d:	39 c1                	cmp    %eax,%ecx
f012a14f:	74 17                	je     f012a168 <test_kfreelast+0xe50>
f012a151:	83 ec 04             	sub    $0x4,%esp
f012a154:	68 c0 b4 13 f0       	push   $0xf013b4c0
f012a159:	68 60 0d 00 00       	push   $0xd60
f012a15e:	68 da ac 13 f0       	push   $0xf013acda
f012a163:	e8 93 60 fd ff       	call   f01001fb <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f012a168:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012a16e:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012a171:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a178:	eb 1e                	jmp    f012a198 <test_kfreelast+0xe80>
		{
			sums[7] += ptr[i] ;
f012a17a:	8b 95 d8 fd ff ff    	mov    -0x228(%ebp),%edx
f012a180:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a183:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a186:	01 c8                	add    %ecx,%eax
f012a188:	8a 00                	mov    (%eax),%al
f012a18a:	0f be c0             	movsbl %al,%eax
f012a18d:	01 d0                	add    %edx,%eax
f012a18f:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012a195:	ff 45 f4             	incl   -0xc(%ebp)
f012a198:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012a19e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a1a1:	7f d7                	jg     f012a17a <test_kfreelast+0xe62>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f012a1a3:	8b 8d d8 fd ff ff    	mov    -0x228(%ebp),%ecx
f012a1a9:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f012a1af:	89 d0                	mov    %edx,%eax
f012a1b1:	01 c0                	add    %eax,%eax
f012a1b3:	01 d0                	add    %edx,%eax
f012a1b5:	01 c0                	add    %eax,%eax
f012a1b7:	01 d0                	add    %edx,%eax
f012a1b9:	39 c1                	cmp    %eax,%ecx
f012a1bb:	74 17                	je     f012a1d4 <test_kfreelast+0xebc>
f012a1bd:	83 ec 04             	sub    $0x4,%esp
f012a1c0:	68 c0 b4 13 f0       	push   $0xf013b4c0
f012a1c5:	68 68 0d 00 00       	push   $0xd68
f012a1ca:	68 da ac 13 f0       	push   $0xf013acda
f012a1cf:	e8 27 60 fd ff       	call   f01001fb <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f012a1d4:	e8 82 27 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012a1d9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a1dc:	e8 5b 9b fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a1e1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f012a1e4:	83 ec 0c             	sub    $0xc,%esp
f012a1e7:	68 00 50 00 00       	push   $0x5000
f012a1ec:	e8 0d d6 fd ff       	call   f01077fe <kmalloc>
f012a1f1:	83 c4 10             	add    $0x10,%esp
f012a1f4:	89 85 8c fd ff ff    	mov    %eax,-0x274(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a1fa:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012a200:	89 c1                	mov    %eax,%ecx
f012a202:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f012a209:	10 00 00 
f012a20c:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012a212:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a217:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f012a21d:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012a223:	ba 00 00 00 00       	mov    $0x0,%edx
f012a228:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f012a22e:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012a234:	29 d0                	sub    %edx,%eax
f012a236:	89 c3                	mov    %eax,%ebx
f012a238:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f012a23f:	10 00 00 
f012a242:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012a247:	0f b6 d0             	movzbl %al,%edx
f012a24a:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012a250:	01 d0                	add    %edx,%eax
f012a252:	48                   	dec    %eax
f012a253:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f012a259:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012a25f:	ba 00 00 00 00       	mov    $0x0,%edx
f012a264:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f012a26a:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012a270:	29 d0                	sub    %edx,%eax
f012a272:	01 c3                	add    %eax,%ebx
f012a274:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f012a27b:	10 00 00 
f012a27e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012a283:	0f b6 c0             	movzbl %al,%eax
f012a286:	c1 e0 04             	shl    $0x4,%eax
f012a289:	89 c2                	mov    %eax,%edx
f012a28b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012a291:	01 d0                	add    %edx,%eax
f012a293:	48                   	dec    %eax
f012a294:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f012a29a:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012a2a0:	ba 00 00 00 00       	mov    $0x0,%edx
f012a2a5:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f012a2ab:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012a2b1:	29 d0                	sub    %edx,%eax
f012a2b3:	01 d8                	add    %ebx,%eax
f012a2b5:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012a2ba:	39 c1                	cmp    %eax,%ecx
f012a2bc:	74 17                	je     f012a2d5 <test_kfreelast+0xfbd>
f012a2be:	83 ec 04             	sub    $0x4,%esp
f012a2c1:	68 c0 ad 13 f0       	push   $0xf013adc0
f012a2c6:	68 71 0d 00 00       	push   $0xd71
f012a2cb:	68 da ac 13 f0       	push   $0xf013acda
f012a2d0:	e8 26 5f fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a2d5:	e8 62 9a fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a2da:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a2dd:	74 17                	je     f012a2f6 <test_kfreelast+0xfde>
f012a2df:	83 ec 04             	sub    $0x4,%esp
f012a2e2:	68 f4 ac 13 f0       	push   $0xf013acf4
f012a2e7:	68 72 0d 00 00       	push   $0xd72
f012a2ec:	68 da ac 13 f0       	push   $0xf013acda
f012a2f1:	e8 05 5f fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a2f6:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a2f9:	e8 5d 26 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012a2fe:	29 c3                	sub    %eax,%ebx
f012a300:	89 d8                	mov    %ebx,%eax
f012a302:	83 f8 05             	cmp    $0x5,%eax
f012a305:	74 17                	je     f012a31e <test_kfreelast+0x1006>
f012a307:	83 ec 04             	sub    $0x4,%esp
f012a30a:	68 5c ad 13 f0       	push   $0xf013ad5c
f012a30f:	68 73 0d 00 00       	push   $0xd73
f012a314:	68 da ac 13 f0       	push   $0xf013acda
f012a319:	e8 dd 5e fd ff       	call   f01001fb <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f012a31e:	c7 85 2c fe ff ff ff 	movl   $0x4fff,-0x1d4(%ebp)
f012a325:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f012a328:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012a32e:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f012a331:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a338:	eb 0e                	jmp    f012a348 <test_kfreelast+0x1030>
		{
			ptr[i] = 8 ;
f012a33a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a33d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a340:	01 d0                	add    %edx,%eax
f012a342:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f012a345:	ff 45 f4             	incl   -0xc(%ebp)
f012a348:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012a34e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a351:	7f e7                	jg     f012a33a <test_kfreelast+0x1022>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012a353:	e8 03 26 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012a358:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a35b:	e8 dc 99 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a360:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f012a363:	83 ec 0c             	sub    $0xc,%esp
f012a366:	68 00 00 10 00       	push   $0x100000
f012a36b:	e8 8e d4 fd ff       	call   f01077fe <kmalloc>
f012a370:	83 c4 10             	add    $0x10,%esp
f012a373:	89 85 90 fd ff ff    	mov    %eax,-0x270(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a379:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012a37f:	89 c1                	mov    %eax,%ecx
f012a381:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f012a388:	10 00 00 
f012a38b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012a391:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a396:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f012a39c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012a3a2:	ba 00 00 00 00       	mov    $0x0,%edx
f012a3a7:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f012a3ad:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012a3b3:	29 d0                	sub    %edx,%eax
f012a3b5:	89 c3                	mov    %eax,%ebx
f012a3b7:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f012a3be:	10 00 00 
f012a3c1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012a3c6:	0f b6 d0             	movzbl %al,%edx
f012a3c9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012a3cf:	01 d0                	add    %edx,%eax
f012a3d1:	48                   	dec    %eax
f012a3d2:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f012a3d8:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012a3de:	ba 00 00 00 00       	mov    $0x0,%edx
f012a3e3:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f012a3e9:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012a3ef:	29 d0                	sub    %edx,%eax
f012a3f1:	01 c3                	add    %eax,%ebx
f012a3f3:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f012a3fa:	10 00 00 
f012a3fd:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012a402:	0f b6 c0             	movzbl %al,%eax
f012a405:	c1 e0 04             	shl    $0x4,%eax
f012a408:	89 c2                	mov    %eax,%edx
f012a40a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012a410:	01 d0                	add    %edx,%eax
f012a412:	48                   	dec    %eax
f012a413:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f012a419:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012a41f:	ba 00 00 00 00       	mov    $0x0,%edx
f012a424:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f012a42a:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012a430:	29 d0                	sub    %edx,%eax
f012a432:	01 d8                	add    %ebx,%eax
f012a434:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012a439:	39 c1                	cmp    %eax,%ecx
f012a43b:	74 17                	je     f012a454 <test_kfreelast+0x113c>
f012a43d:	83 ec 04             	sub    $0x4,%esp
f012a440:	68 c0 ad 13 f0       	push   $0xf013adc0
f012a445:	68 7f 0d 00 00       	push   $0xd7f
f012a44a:	68 da ac 13 f0       	push   $0xf013acda
f012a44f:	e8 a7 5d fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a454:	e8 e3 98 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a459:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a45c:	74 17                	je     f012a475 <test_kfreelast+0x115d>
f012a45e:	83 ec 04             	sub    $0x4,%esp
f012a461:	68 f4 ac 13 f0       	push   $0xf013acf4
f012a466:	68 80 0d 00 00       	push   $0xd80
f012a46b:	68 da ac 13 f0       	push   $0xf013acda
f012a470:	e8 86 5d fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a475:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a478:	e8 de 24 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012a47d:	29 c3                	sub    %eax,%ebx
f012a47f:	89 d8                	mov    %ebx,%eax
f012a481:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a486:	74 17                	je     f012a49f <test_kfreelast+0x1187>
f012a488:	83 ec 04             	sub    $0x4,%esp
f012a48b:	68 5c ad 13 f0       	push   $0xf013ad5c
f012a490:	68 81 0d 00 00       	push   $0xd81
f012a495:	68 da ac 13 f0       	push   $0xf013acda
f012a49a:	e8 5c 5d fd ff       	call   f01001fb <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f012a49f:	c7 85 30 fe ff ff ff 	movl   $0xfffff,-0x1d0(%ebp)
f012a4a6:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f012a4a9:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012a4af:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f012a4b2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a4b9:	eb 0e                	jmp    f012a4c9 <test_kfreelast+0x11b1>
		{
			ptr[i] = 9 ;
f012a4bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a4be:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a4c1:	01 d0                	add    %edx,%eax
f012a4c3:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f012a4c6:	ff 45 f4             	incl   -0xc(%ebp)
f012a4c9:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012a4cf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a4d2:	7f e7                	jg     f012a4bb <test_kfreelast+0x11a3>
		{
			ptr[i] = 9 ;
		}
	}

	ce = 0;
f012a4d4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kfree last allocated space
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012a4db:	e8 7b 24 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012a4e0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a4e3:	e8 54 98 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a4e8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012a4eb:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012a4f1:	83 ec 0c             	sub    $0xc,%esp
f012a4f4:	50                   	push   %eax
f012a4f5:	e8 c6 d3 fd ff       	call   f01078c0 <kfree>
f012a4fa:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a4fd:	e8 3a 98 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a502:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a505:	74 17                	je     f012a51e <test_kfreelast+0x1206>
f012a507:	83 ec 04             	sub    $0x4,%esp
f012a50a:	68 f4 ac 13 f0       	push   $0xf013acf4
f012a50f:	68 91 0d 00 00       	push   $0xd91
f012a514:	68 da ac 13 f0       	push   $0xf013acda
f012a519:	e8 dd 5c fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f012a51e:	e8 38 24 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012a523:	89 c2                	mov    %eax,%edx
f012a525:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a528:	29 c2                	sub    %eax,%edx
f012a52a:	89 d0                	mov    %edx,%eax
f012a52c:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a531:	74 17                	je     f012a54a <test_kfreelast+0x1232>
f012a533:	83 ec 04             	sub    $0x4,%esp
f012a536:	68 64 b4 13 f0       	push   $0xf013b464
f012a53b:	68 92 0d 00 00       	push   $0xd92
f012a540:	68 da ac 13 f0       	push   $0xf013acda
f012a545:	e8 b1 5c fd ff       	call   f01001fb <_panic>
	}

	//Allocate after kfree last [25%]
	{
		//30 KB
		freeFrames = sys_calculate_free_frames() ;
f012a54a:	e8 0c 24 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012a54f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a552:	e8 e5 97 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a557:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[10] = kmalloc(30*kilo);
f012a55a:	83 ec 0c             	sub    $0xc,%esp
f012a55d:	68 00 78 00 00       	push   $0x7800
f012a562:	e8 97 d2 fd ff       	call   f01077fe <kmalloc>
f012a567:	83 c4 10             	add    $0x10,%esp
f012a56a:	89 85 94 fd ff ff    	mov    %eax,-0x26c(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a570:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012a576:	89 c1                	mov    %eax,%ecx
f012a578:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f012a57f:	10 00 00 
f012a582:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012a588:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a58d:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f012a593:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012a599:	ba 00 00 00 00       	mov    $0x0,%edx
f012a59e:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f012a5a4:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012a5aa:	29 d0                	sub    %edx,%eax
f012a5ac:	89 c3                	mov    %eax,%ebx
f012a5ae:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f012a5b5:	10 00 00 
f012a5b8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012a5bd:	0f b6 d0             	movzbl %al,%edx
f012a5c0:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012a5c6:	01 d0                	add    %edx,%eax
f012a5c8:	48                   	dec    %eax
f012a5c9:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f012a5cf:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012a5d5:	ba 00 00 00 00       	mov    $0x0,%edx
f012a5da:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f012a5e0:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012a5e6:	29 d0                	sub    %edx,%eax
f012a5e8:	01 c3                	add    %eax,%ebx
f012a5ea:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f012a5f1:	10 00 00 
f012a5f4:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012a5f9:	0f b6 c0             	movzbl %al,%eax
f012a5fc:	c1 e0 04             	shl    $0x4,%eax
f012a5ff:	89 c2                	mov    %eax,%edx
f012a601:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012a607:	01 d0                	add    %edx,%eax
f012a609:	48                   	dec    %eax
f012a60a:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f012a610:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012a616:	ba 00 00 00 00       	mov    $0x0,%edx
f012a61b:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f012a621:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012a627:	29 d0                	sub    %edx,%eax
f012a629:	01 d8                	add    %ebx,%eax
f012a62b:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012a630:	39 c1                	cmp    %eax,%ecx
f012a632:	74 17                	je     f012a64b <test_kfreelast+0x1333>
f012a634:	83 ec 04             	sub    $0x4,%esp
f012a637:	68 c0 ad 13 f0       	push   $0xf013adc0
f012a63c:	68 9b 0d 00 00       	push   $0xd9b
f012a641:	68 da ac 13 f0       	push   $0xf013acda
f012a646:	e8 b0 5b fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a64b:	e8 ec 96 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a650:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a653:	74 17                	je     f012a66c <test_kfreelast+0x1354>
f012a655:	83 ec 04             	sub    $0x4,%esp
f012a658:	68 f4 ac 13 f0       	push   $0xf013acf4
f012a65d:	68 9c 0d 00 00       	push   $0xd9c
f012a662:	68 da ac 13 f0       	push   $0xf013acda
f012a667:	e8 8f 5b fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a66c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a66f:	e8 e7 22 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012a674:	29 c3                	sub    %eax,%ebx
f012a676:	89 d8                	mov    %ebx,%eax
f012a678:	83 f8 08             	cmp    $0x8,%eax
f012a67b:	74 17                	je     f012a694 <test_kfreelast+0x137c>
f012a67d:	83 ec 04             	sub    $0x4,%esp
f012a680:	68 5c ad 13 f0       	push   $0xf013ad5c
f012a685:	68 9d 0d 00 00       	push   $0xd9d
f012a68a:	68 da ac 13 f0       	push   $0xf013acda
f012a68f:	e8 67 5b fd ff       	call   f01001fb <_panic>
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
f012a694:	c7 85 34 fe ff ff ff 	movl   $0x77ff,-0x1cc(%ebp)
f012a69b:	77 00 00 
		ptr = (char*)ptr_allocations[10];
f012a69e:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012a6a4:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f012a6a7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a6ae:	eb 0e                	jmp    f012a6be <test_kfreelast+0x13a6>
		{
			ptr[i] = 10 ;
f012a6b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a6b3:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a6b6:	01 d0                	add    %edx,%eax
f012a6b8:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f012a6bb:	ff 45 f4             	incl   -0xc(%ebp)
f012a6be:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012a6c4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a6c7:	7f e7                	jg     f012a6b0 <test_kfreelast+0x1398>
		{
			ptr[i] = 10 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012a6c9:	e8 8d 22 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012a6ce:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a6d1:	e8 66 96 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a6d6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[11] = kmalloc(1*Mega);
f012a6d9:	83 ec 0c             	sub    $0xc,%esp
f012a6dc:	68 00 00 10 00       	push   $0x100000
f012a6e1:	e8 18 d1 fd ff       	call   f01077fe <kmalloc>
f012a6e6:	83 c4 10             	add    $0x10,%esp
f012a6e9:	89 85 98 fd ff ff    	mov    %eax,-0x268(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a6ef:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012a6f5:	89 c1                	mov    %eax,%ecx
f012a6f7:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f012a6fe:	10 00 00 
f012a701:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012a707:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a70c:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f012a712:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a718:	ba 00 00 00 00       	mov    $0x0,%edx
f012a71d:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f012a723:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a729:	29 d0                	sub    %edx,%eax
f012a72b:	89 c3                	mov    %eax,%ebx
f012a72d:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f012a734:	10 00 00 
f012a737:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012a73c:	0f b6 d0             	movzbl %al,%edx
f012a73f:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012a745:	01 d0                	add    %edx,%eax
f012a747:	48                   	dec    %eax
f012a748:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f012a74e:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a754:	ba 00 00 00 00       	mov    $0x0,%edx
f012a759:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f012a75f:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a765:	29 d0                	sub    %edx,%eax
f012a767:	01 c3                	add    %eax,%ebx
f012a769:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f012a770:	10 00 00 
f012a773:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012a778:	0f b6 c0             	movzbl %al,%eax
f012a77b:	c1 e0 04             	shl    $0x4,%eax
f012a77e:	89 c2                	mov    %eax,%edx
f012a780:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012a786:	01 d0                	add    %edx,%eax
f012a788:	48                   	dec    %eax
f012a789:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f012a78f:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012a795:	ba 00 00 00 00       	mov    $0x0,%edx
f012a79a:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f012a7a0:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012a7a6:	29 d0                	sub    %edx,%eax
f012a7a8:	01 d8                	add    %ebx,%eax
f012a7aa:	2d 00 70 2e 09       	sub    $0x92e7000,%eax
f012a7af:	39 c1                	cmp    %eax,%ecx
f012a7b1:	74 17                	je     f012a7ca <test_kfreelast+0x14b2>
f012a7b3:	83 ec 04             	sub    $0x4,%esp
f012a7b6:	68 c0 ad 13 f0       	push   $0xf013adc0
f012a7bb:	68 a9 0d 00 00       	push   $0xda9
f012a7c0:	68 da ac 13 f0       	push   $0xf013acda
f012a7c5:	e8 31 5a fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a7ca:	e8 6d 95 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a7cf:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a7d2:	74 17                	je     f012a7eb <test_kfreelast+0x14d3>
f012a7d4:	83 ec 04             	sub    $0x4,%esp
f012a7d7:	68 f4 ac 13 f0       	push   $0xf013acf4
f012a7dc:	68 aa 0d 00 00       	push   $0xdaa
f012a7e1:	68 da ac 13 f0       	push   $0xf013acda
f012a7e6:	e8 10 5a fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a7eb:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a7ee:	e8 68 21 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012a7f3:	29 c3                	sub    %eax,%ebx
f012a7f5:	89 d8                	mov    %ebx,%eax
f012a7f7:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a7fc:	74 17                	je     f012a815 <test_kfreelast+0x14fd>
f012a7fe:	83 ec 04             	sub    $0x4,%esp
f012a801:	68 5c ad 13 f0       	push   $0xf013ad5c
f012a806:	68 ab 0d 00 00       	push   $0xdab
f012a80b:	68 da ac 13 f0       	push   $0xf013acda
f012a810:	e8 e6 59 fd ff       	call   f01001fb <_panic>
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
f012a815:	c7 85 38 fe ff ff ff 	movl   $0xfffff,-0x1c8(%ebp)
f012a81c:	ff 0f 00 
		ptr = (char*)ptr_allocations[11];
f012a81f:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012a825:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f012a828:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a82f:	eb 0e                	jmp    f012a83f <test_kfreelast+0x1527>
		{
			ptr[i] = 11 ;
f012a831:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a834:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a837:	01 d0                	add    %edx,%eax
f012a839:	c6 00 0b             	movb   $0xb,(%eax)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f012a83c:	ff 45 f4             	incl   -0xc(%ebp)
f012a83f:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f012a845:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a848:	7f e7                	jg     f012a831 <test_kfreelast+0x1519>
		{
			ptr[i] = 11 ;
		}
	}
	ce += 25;
f012a84a:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
	cprintf("\nkfreelast: current evaluation = %d%\n", ce);
f012a84e:	83 ec 08             	sub    $0x8,%esp
f012a851:	ff 75 f0             	pushl  -0x10(%ebp)
f012a854:	68 0c bd 13 f0       	push   $0xf013bd0c
f012a859:	e8 24 64 fd ff       	call   f0100c82 <cprintf>
f012a85e:	83 c4 10             	add    $0x10,%esp

	int f = 0;
f012a861:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	//kfree last allocated two spaces
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012a868:	e8 ee 20 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012a86d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a870:	e8 c7 94 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a875:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[11]);
f012a878:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012a87e:	83 ec 0c             	sub    $0xc,%esp
f012a881:	50                   	push   %eax
f012a882:	e8 39 d0 fd ff       	call   f01078c0 <kfree>
f012a887:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a88a:	e8 ad 94 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a88f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a892:	74 1d                	je     f012a8b1 <test_kfreelast+0x1599>
f012a894:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a898:	75 17                	jne    f012a8b1 <test_kfreelast+0x1599>
f012a89a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a8a1:	83 ec 0c             	sub    $0xc,%esp
f012a8a4:	68 34 bd 13 f0       	push   $0xf013bd34
f012a8a9:	e8 d4 63 fd ff       	call   f0100c82 <cprintf>
f012a8ae:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 256) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a8b1:	e8 a5 20 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012a8b6:	89 c2                	mov    %eax,%edx
f012a8b8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a8bb:	29 c2                	sub    %eax,%edx
f012a8bd:	89 d0                	mov    %edx,%eax
f012a8bf:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a8c4:	74 1d                	je     f012a8e3 <test_kfreelast+0x15cb>
f012a8c6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a8ca:	75 17                	jne    f012a8e3 <test_kfreelast+0x15cb>
f012a8cc:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a8d3:	83 ec 0c             	sub    $0xc,%esp
f012a8d6:	68 a0 bd 13 f0       	push   $0xf013bda0
f012a8db:	e8 a2 63 fd ff       	call   f0100c82 <cprintf>
f012a8e0:	83 c4 10             	add    $0x10,%esp

		//kfree 30 KB
		freeFrames = sys_calculate_free_frames() ;
f012a8e3:	e8 73 20 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012a8e8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a8eb:	e8 4c 94 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a8f0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[10]);
f012a8f3:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012a8f9:	83 ec 0c             	sub    $0xc,%esp
f012a8fc:	50                   	push   %eax
f012a8fd:	e8 be cf fd ff       	call   f01078c0 <kfree>
f012a902:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a905:	e8 32 94 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a90a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a90d:	74 1d                	je     f012a92c <test_kfreelast+0x1614>
f012a90f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a913:	75 17                	jne    f012a92c <test_kfreelast+0x1614>
f012a915:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a91c:	83 ec 0c             	sub    $0xc,%esp
f012a91f:	68 34 bd 13 f0       	push   $0xf013bd34
f012a924:	e8 59 63 fd ff       	call   f0100c82 <cprintf>
f012a929:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 8) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a92c:	e8 2a 20 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012a931:	89 c2                	mov    %eax,%edx
f012a933:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a936:	29 c2                	sub    %eax,%edx
f012a938:	89 d0                	mov    %edx,%eax
f012a93a:	83 f8 08             	cmp    $0x8,%eax
f012a93d:	74 1d                	je     f012a95c <test_kfreelast+0x1644>
f012a93f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a943:	75 17                	jne    f012a95c <test_kfreelast+0x1644>
f012a945:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a94c:	83 ec 0c             	sub    $0xc,%esp
f012a94f:	68 a0 bd 13 f0       	push   $0xf013bda0
f012a954:	e8 29 63 fd ff       	call   f0100c82 <cprintf>
f012a959:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfree last allocated two spaces (in order) [10%]
	{
		//10 KB
		freeFrames = sys_calculate_free_frames() ;
f012a95c:	e8 fa 1f fe ff       	call   f010c95b <sys_calculate_free_frames>
f012a961:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a964:	e8 d3 93 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a969:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[12] = kmalloc(10*kilo);
f012a96c:	83 ec 0c             	sub    $0xc,%esp
f012a96f:	68 00 28 00 00       	push   $0x2800
f012a974:	e8 85 ce fd ff       	call   f01077fe <kmalloc>
f012a979:	83 c4 10             	add    $0x10,%esp
f012a97c:	89 85 9c fd ff ff    	mov    %eax,-0x264(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012a982:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012a988:	89 c1                	mov    %eax,%ecx
f012a98a:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f012a991:	10 00 00 
f012a994:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012a99a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a99f:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f012a9a5:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012a9ab:	ba 00 00 00 00       	mov    $0x0,%edx
f012a9b0:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f012a9b6:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012a9bc:	29 d0                	sub    %edx,%eax
f012a9be:	89 c3                	mov    %eax,%ebx
f012a9c0:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f012a9c7:	10 00 00 
f012a9ca:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012a9cf:	0f b6 d0             	movzbl %al,%edx
f012a9d2:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012a9d8:	01 d0                	add    %edx,%eax
f012a9da:	48                   	dec    %eax
f012a9db:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f012a9e1:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012a9e7:	ba 00 00 00 00       	mov    $0x0,%edx
f012a9ec:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f012a9f2:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012a9f8:	29 d0                	sub    %edx,%eax
f012a9fa:	01 c3                	add    %eax,%ebx
f012a9fc:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f012aa03:	10 00 00 
f012aa06:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012aa0b:	0f b6 c0             	movzbl %al,%eax
f012aa0e:	c1 e0 04             	shl    $0x4,%eax
f012aa11:	89 c2                	mov    %eax,%edx
f012aa13:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012aa19:	01 d0                	add    %edx,%eax
f012aa1b:	48                   	dec    %eax
f012aa1c:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f012aa22:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012aa28:	ba 00 00 00 00       	mov    $0x0,%edx
f012aa2d:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f012aa33:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012aa39:	29 d0                	sub    %edx,%eax
f012aa3b:	01 d8                	add    %ebx,%eax
f012aa3d:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012aa42:	39 c1                	cmp    %eax,%ecx
f012aa44:	74 1d                	je     f012aa63 <test_kfreelast+0x174b>
f012aa46:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aa4a:	75 17                	jne    f012aa63 <test_kfreelast+0x174b>
f012aa4c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aa53:	83 ec 0c             	sub    $0xc,%esp
f012aa56:	68 d8 bd 13 f0       	push   $0xf013bdd8
f012aa5b:	e8 22 62 fd ff       	call   f0100c82 <cprintf>
f012aa60:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012aa63:	e8 d4 92 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012aa68:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012aa6b:	74 1d                	je     f012aa8a <test_kfreelast+0x1772>
f012aa6d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aa71:	75 17                	jne    f012aa8a <test_kfreelast+0x1772>
f012aa73:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aa7a:	83 ec 0c             	sub    $0xc,%esp
f012aa7d:	68 34 bd 13 f0       	push   $0xf013bd34
f012aa82:	e8 fb 61 fd ff       	call   f0100c82 <cprintf>
f012aa87:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012aa8a:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012aa8d:	e8 c9 1e fe ff       	call   f010c95b <sys_calculate_free_frames>
f012aa92:	29 c3                	sub    %eax,%ebx
f012aa94:	89 d8                	mov    %ebx,%eax
f012aa96:	83 f8 03             	cmp    $0x3,%eax
f012aa99:	74 1d                	je     f012aab8 <test_kfreelast+0x17a0>
f012aa9b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aa9f:	75 17                	jne    f012aab8 <test_kfreelast+0x17a0>
f012aaa1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aaa8:	83 ec 0c             	sub    $0xc,%esp
f012aaab:	68 40 be 13 f0       	push   $0xf013be40
f012aab0:	e8 cd 61 fd ff       	call   f0100c82 <cprintf>
f012aab5:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
f012aab8:	c7 85 3c fe ff ff ff 	movl   $0x27ff,-0x1c4(%ebp)
f012aabf:	27 00 00 
		ptr = (char*)ptr_allocations[12];
f012aac2:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012aac8:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012aacb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012aad2:	eb 0e                	jmp    f012aae2 <test_kfreelast+0x17ca>
		{
			ptr[i] = 12 ;
f012aad4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012aad7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012aada:	01 d0                	add    %edx,%eax
f012aadc:	c6 00 0c             	movb   $0xc,(%eax)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012aadf:	ff 45 f4             	incl   -0xc(%ebp)
f012aae2:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012aae8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012aaeb:	7f e7                	jg     f012aad4 <test_kfreelast+0x17bc>
		{
			ptr[i] = 12 ;
		}
	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012aaed:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aaf1:	75 17                	jne    f012ab0a <test_kfreelast+0x17f2>
f012aaf3:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012aaf7:	83 ec 08             	sub    $0x8,%esp
f012aafa:	ff 75 f0             	pushl  -0x10(%ebp)
f012aafd:	68 0c bd 13 f0       	push   $0xf013bd0c
f012ab02:	e8 7b 61 fd ff       	call   f0100c82 <cprintf>
f012ab07:	83 c4 10             	add    $0x10,%esp
f012ab0a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
f012ab11:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012ab17:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012ab1a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ab21:	eb 1e                	jmp    f012ab41 <test_kfreelast+0x1829>
		{
			sums[12] += ptr[i] ;
f012ab23:	8b 95 ec fd ff ff    	mov    -0x214(%ebp),%edx
f012ab29:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012ab2c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ab2f:	01 c8                	add    %ecx,%eax
f012ab31:	8a 00                	mov    (%eax),%al
f012ab33:	0f be c0             	movsbl %al,%eax
f012ab36:	01 d0                	add    %edx,%eax
f012ab38:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012ab3e:	ff 45 f4             	incl   -0xc(%ebp)
f012ab41:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012ab47:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ab4a:	7f d7                	jg     f012ab23 <test_kfreelast+0x180b>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012ab4c:	8b 8d ec fd ff ff    	mov    -0x214(%ebp),%ecx
f012ab52:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f012ab58:	89 d0                	mov    %edx,%eax
f012ab5a:	01 c0                	add    %eax,%eax
f012ab5c:	01 d0                	add    %edx,%eax
f012ab5e:	c1 e0 02             	shl    $0x2,%eax
f012ab61:	39 c1                	cmp    %eax,%ecx
f012ab63:	74 1d                	je     f012ab82 <test_kfreelast+0x186a>
f012ab65:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ab69:	75 17                	jne    f012ab82 <test_kfreelast+0x186a>
f012ab6b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ab72:	83 ec 0c             	sub    $0xc,%esp
f012ab75:	68 84 be 13 f0       	push   $0xf013be84
f012ab7a:	e8 03 61 fd ff       	call   f0100c82 <cprintf>
f012ab7f:	83 c4 10             	add    $0x10,%esp


		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012ab82:	83 ec 0c             	sub    $0xc,%esp
f012ab85:	6a 03                	push   $0x3
f012ab87:	e8 6f 22 fe ff       	call   f010cdfb <sys_bypassPageFault>
f012ab8c:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[12] + 12*kilo;
f012ab8f:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012ab95:	05 00 30 00 00       	add    $0x3000,%eax
f012ab9a:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 30*kilo; ++i)
f012ab9d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012aba4:	eb 3c                	jmp    f012abe2 <test_kfreelast+0x18ca>
		{
			ptr[i] = 10;
f012aba6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012aba9:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012abac:	01 d0                	add    %edx,%eax
f012abae:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012abb1:	e8 33 22 fe ff       	call   f010cde9 <sys_rcr2>
f012abb6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012abb9:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012abbc:	01 ca                	add    %ecx,%edx
f012abbe:	39 d0                	cmp    %edx,%eax
f012abc0:	74 1d                	je     f012abdf <test_kfreelast+0x18c7>
f012abc2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012abc6:	75 17                	jne    f012abdf <test_kfreelast+0x18c7>
f012abc8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012abcf:	83 ec 0c             	sub    $0xc,%esp
f012abd2:	68 b8 be 13 f0       	push   $0xf013beb8
f012abd7:	e8 a6 60 fd ff       	call   f0100c82 <cprintf>
f012abdc:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[12] + 12*kilo;

		for (i = 0; i < 30*kilo; ++i)
f012abdf:	ff 45 f4             	incl   -0xc(%ebp)
f012abe2:	81 7d f4 ff 77 00 00 	cmpl   $0x77ff,-0xc(%ebp)
f012abe9:	7e bb                	jle    f012aba6 <test_kfreelast+0x188e>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012abeb:	83 ec 0c             	sub    $0xc,%esp
f012abee:	6a 00                	push   $0x0
f012abf0:	e8 06 22 fe ff       	call   f010cdfb <sys_bypassPageFault>
f012abf5:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012abf8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012abfc:	75 17                	jne    f012ac15 <test_kfreelast+0x18fd>
f012abfe:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012ac02:	83 ec 08             	sub    $0x8,%esp
f012ac05:	ff 75 f0             	pushl  -0x10(%ebp)
f012ac08:	68 0c bd 13 f0       	push   $0xf013bd0c
f012ac0d:	e8 70 60 fd ff       	call   f0100c82 <cprintf>
f012ac12:	83 c4 10             	add    $0x10,%esp
f012ac15:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree last allocated three spaces [but with different order]
	{
		//kfree 10 KB
		freeFrames = sys_calculate_free_frames() ;
f012ac1c:	e8 3a 1d fe ff       	call   f010c95b <sys_calculate_free_frames>
f012ac21:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ac24:	e8 13 91 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012ac29:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[12]);
f012ac2c:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012ac32:	83 ec 0c             	sub    $0xc,%esp
f012ac35:	50                   	push   %eax
f012ac36:	e8 85 cc fd ff       	call   f01078c0 <kfree>
f012ac3b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ac3e:	e8 f9 90 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012ac43:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ac46:	74 1d                	je     f012ac65 <test_kfreelast+0x194d>
f012ac48:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ac4c:	75 17                	jne    f012ac65 <test_kfreelast+0x194d>
f012ac4e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ac55:	83 ec 0c             	sub    $0xc,%esp
f012ac58:	68 34 bd 13 f0       	push   $0xf013bd34
f012ac5d:	e8 20 60 fd ff       	call   f0100c82 <cprintf>
f012ac62:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012ac65:	e8 f1 1c fe ff       	call   f010c95b <sys_calculate_free_frames>
f012ac6a:	89 c2                	mov    %eax,%edx
f012ac6c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ac6f:	29 c2                	sub    %eax,%edx
f012ac71:	89 d0                	mov    %edx,%eax
f012ac73:	83 f8 03             	cmp    $0x3,%eax
f012ac76:	74 1d                	je     f012ac95 <test_kfreelast+0x197d>
f012ac78:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ac7c:	75 17                	jne    f012ac95 <test_kfreelast+0x197d>
f012ac7e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ac85:	83 ec 0c             	sub    $0xc,%esp
f012ac88:	68 a0 bd 13 f0       	push   $0xf013bda0
f012ac8d:	e8 f0 5f fd ff       	call   f0100c82 <cprintf>
f012ac92:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012ac95:	e8 c1 1c fe ff       	call   f010c95b <sys_calculate_free_frames>
f012ac9a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ac9d:	e8 9a 90 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012aca2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[7]);
f012aca5:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012acab:	83 ec 0c             	sub    $0xc,%esp
f012acae:	50                   	push   %eax
f012acaf:	e8 0c cc fd ff       	call   f01078c0 <kfree>
f012acb4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012acb7:	e8 80 90 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012acbc:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012acbf:	74 1d                	je     f012acde <test_kfreelast+0x19c6>
f012acc1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012acc5:	75 17                	jne    f012acde <test_kfreelast+0x19c6>
f012acc7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012acce:	83 ec 0c             	sub    $0xc,%esp
f012acd1:	68 34 bd 13 f0       	push   $0xf013bd34
f012acd6:	e8 a7 5f fd ff       	call   f0100c82 <cprintf>
f012acdb:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 4) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012acde:	e8 78 1c fe ff       	call   f010c95b <sys_calculate_free_frames>
f012ace3:	89 c2                	mov    %eax,%edx
f012ace5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ace8:	29 c2                	sub    %eax,%edx
f012acea:	89 d0                	mov    %edx,%eax
f012acec:	83 f8 04             	cmp    $0x4,%eax
f012acef:	74 1d                	je     f012ad0e <test_kfreelast+0x19f6>
f012acf1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012acf5:	75 17                	jne    f012ad0e <test_kfreelast+0x19f6>
f012acf7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012acfe:	83 ec 0c             	sub    $0xc,%esp
f012ad01:	68 a0 bd 13 f0       	push   $0xf013bda0
f012ad06:	e8 77 5f fd ff       	call   f0100c82 <cprintf>
f012ad0b:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012ad0e:	e8 48 1c fe ff       	call   f010c95b <sys_calculate_free_frames>
f012ad13:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ad16:	e8 21 90 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012ad1b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012ad1e:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012ad24:	83 ec 0c             	sub    $0xc,%esp
f012ad27:	50                   	push   %eax
f012ad28:	e8 93 cb fd ff       	call   f01078c0 <kfree>
f012ad2d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ad30:	e8 07 90 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012ad35:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ad38:	74 1d                	je     f012ad57 <test_kfreelast+0x1a3f>
f012ad3a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ad3e:	75 17                	jne    f012ad57 <test_kfreelast+0x1a3f>
f012ad40:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ad47:	83 ec 0c             	sub    $0xc,%esp
f012ad4a:	68 34 bd 13 f0       	push   $0xf013bd34
f012ad4f:	e8 2e 5f fd ff       	call   f0100c82 <cprintf>
f012ad54:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 5) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012ad57:	e8 ff 1b fe ff       	call   f010c95b <sys_calculate_free_frames>
f012ad5c:	89 c2                	mov    %eax,%edx
f012ad5e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ad61:	29 c2                	sub    %eax,%edx
f012ad63:	89 d0                	mov    %edx,%eax
f012ad65:	83 f8 05             	cmp    $0x5,%eax
f012ad68:	74 1d                	je     f012ad87 <test_kfreelast+0x1a6f>
f012ad6a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ad6e:	75 17                	jne    f012ad87 <test_kfreelast+0x1a6f>
f012ad70:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ad77:	83 ec 0c             	sub    $0xc,%esp
f012ad7a:	68 a0 bd 13 f0       	push   $0xf013bda0
f012ad7f:	e8 fe 5e fd ff       	call   f0100c82 <cprintf>
f012ad84:	83 c4 10             	add    $0x10,%esp


	//Allocate after kfree last allocated 3 spaces with different order [25%]
	{
		//50 KB
		freeFrames = sys_calculate_free_frames() ;
f012ad87:	e8 cf 1b fe ff       	call   f010c95b <sys_calculate_free_frames>
f012ad8c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ad8f:	e8 a8 8f fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012ad94:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[13] = kmalloc(50*kilo);
f012ad97:	83 ec 0c             	sub    $0xc,%esp
f012ad9a:	68 00 c8 00 00       	push   $0xc800
f012ad9f:	e8 5a ca fd ff       	call   f01077fe <kmalloc>
f012ada4:	83 c4 10             	add    $0x10,%esp
f012ada7:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012adad:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012adb3:	89 c1                	mov    %eax,%ecx
f012adb5:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f012adbc:	10 00 00 
f012adbf:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012adc5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012adca:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f012add0:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012add6:	ba 00 00 00 00       	mov    $0x0,%edx
f012addb:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f012ade1:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012ade7:	29 d0                	sub    %edx,%eax
f012ade9:	89 c3                	mov    %eax,%ebx
f012adeb:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f012adf2:	10 00 00 
f012adf5:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012adfa:	0f b6 d0             	movzbl %al,%edx
f012adfd:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012ae03:	01 d0                	add    %edx,%eax
f012ae05:	48                   	dec    %eax
f012ae06:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f012ae0c:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012ae12:	ba 00 00 00 00       	mov    $0x0,%edx
f012ae17:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f012ae1d:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012ae23:	29 d0                	sub    %edx,%eax
f012ae25:	01 c3                	add    %eax,%ebx
f012ae27:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f012ae2e:	10 00 00 
f012ae31:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012ae36:	0f b6 c0             	movzbl %al,%eax
f012ae39:	c1 e0 04             	shl    $0x4,%eax
f012ae3c:	89 c2                	mov    %eax,%edx
f012ae3e:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012ae44:	01 d0                	add    %edx,%eax
f012ae46:	48                   	dec    %eax
f012ae47:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f012ae4d:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012ae53:	ba 00 00 00 00       	mov    $0x0,%edx
f012ae58:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f012ae5e:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012ae64:	29 d0                	sub    %edx,%eax
f012ae66:	01 d8                	add    %ebx,%eax
f012ae68:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012ae6d:	39 c1                	cmp    %eax,%ecx
f012ae6f:	74 1d                	je     f012ae8e <test_kfreelast+0x1b76>
f012ae71:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ae75:	75 17                	jne    f012ae8e <test_kfreelast+0x1b76>
f012ae77:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ae7e:	83 ec 0c             	sub    $0xc,%esp
f012ae81:	68 d8 bd 13 f0       	push   $0xf013bdd8
f012ae86:	e8 f7 5d fd ff       	call   f0100c82 <cprintf>
f012ae8b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ae8e:	e8 a9 8e fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012ae93:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ae96:	74 1d                	je     f012aeb5 <test_kfreelast+0x1b9d>
f012ae98:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ae9c:	75 17                	jne    f012aeb5 <test_kfreelast+0x1b9d>
f012ae9e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aea5:	83 ec 0c             	sub    $0xc,%esp
f012aea8:	68 34 bd 13 f0       	push   $0xf013bd34
f012aead:	e8 d0 5d fd ff       	call   f0100c82 <cprintf>
f012aeb2:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012aeb5:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012aeb8:	e8 9e 1a fe ff       	call   f010c95b <sys_calculate_free_frames>
f012aebd:	29 c3                	sub    %eax,%ebx
f012aebf:	89 d8                	mov    %ebx,%eax
f012aec1:	83 f8 0d             	cmp    $0xd,%eax
f012aec4:	74 1d                	je     f012aee3 <test_kfreelast+0x1bcb>
f012aec6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aeca:	75 17                	jne    f012aee3 <test_kfreelast+0x1bcb>
f012aecc:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aed3:	83 ec 0c             	sub    $0xc,%esp
f012aed6:	68 40 be 13 f0       	push   $0xf013be40
f012aedb:	e8 a2 5d fd ff       	call   f0100c82 <cprintf>
f012aee0:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
f012aee3:	c7 85 40 fe ff ff ff 	movl   $0xc7ff,-0x1c0(%ebp)
f012aeea:	c7 00 00 
		ptr = (char*)ptr_allocations[13];
f012aeed:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012aef3:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f012aef6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012aefd:	eb 0e                	jmp    f012af0d <test_kfreelast+0x1bf5>
		{
			ptr[i] = 13 ;
f012aeff:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012af02:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012af05:	01 d0                	add    %edx,%eax
f012af07:	c6 00 0d             	movb   $0xd,(%eax)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f012af0a:	ff 45 f4             	incl   -0xc(%ebp)
f012af0d:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012af13:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012af16:	7f e7                	jg     f012aeff <test_kfreelast+0x1be7>
		{
			ptr[i] = 13 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012af18:	e8 3e 1a fe ff       	call   f010c95b <sys_calculate_free_frames>
f012af1d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012af20:	e8 17 8e fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012af25:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[14] = kmalloc(3*Mega-kilo);
f012af28:	83 ec 0c             	sub    $0xc,%esp
f012af2b:	68 00 fc 2f 00       	push   $0x2ffc00
f012af30:	e8 c9 c8 fd ff       	call   f01077fe <kmalloc>
f012af35:	83 c4 10             	add    $0x10,%esp
f012af38:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012af3e:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012af44:	89 c1                	mov    %eax,%ecx
f012af46:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f012af4d:	10 00 00 
f012af50:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012af56:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012af5b:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f012af61:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012af67:	ba 00 00 00 00       	mov    $0x0,%edx
f012af6c:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f012af72:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012af78:	29 d0                	sub    %edx,%eax
f012af7a:	89 c3                	mov    %eax,%ebx
f012af7c:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f012af83:	10 00 00 
f012af86:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012af8b:	0f b6 d0             	movzbl %al,%edx
f012af8e:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012af94:	01 d0                	add    %edx,%eax
f012af96:	48                   	dec    %eax
f012af97:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f012af9d:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012afa3:	ba 00 00 00 00       	mov    $0x0,%edx
f012afa8:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f012afae:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012afb4:	29 d0                	sub    %edx,%eax
f012afb6:	01 c3                	add    %eax,%ebx
f012afb8:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f012afbf:	10 00 00 
f012afc2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012afc7:	0f b6 c0             	movzbl %al,%eax
f012afca:	c1 e0 04             	shl    $0x4,%eax
f012afcd:	89 c2                	mov    %eax,%edx
f012afcf:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012afd5:	01 d0                	add    %edx,%eax
f012afd7:	48                   	dec    %eax
f012afd8:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f012afde:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012afe4:	ba 00 00 00 00       	mov    $0x0,%edx
f012afe9:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f012afef:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012aff5:	29 d0                	sub    %edx,%eax
f012aff7:	01 d8                	add    %ebx,%eax
f012aff9:	2d 00 b0 8e 09       	sub    $0x98eb000,%eax
f012affe:	39 c1                	cmp    %eax,%ecx
f012b000:	74 1d                	je     f012b01f <test_kfreelast+0x1d07>
f012b002:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b006:	75 17                	jne    f012b01f <test_kfreelast+0x1d07>
f012b008:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b00f:	83 ec 0c             	sub    $0xc,%esp
f012b012:	68 d8 bd 13 f0       	push   $0xf013bdd8
f012b017:	e8 66 5c fd ff       	call   f0100c82 <cprintf>
f012b01c:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b01f:	e8 18 8d fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b024:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b027:	74 1d                	je     f012b046 <test_kfreelast+0x1d2e>
f012b029:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b02d:	75 17                	jne    f012b046 <test_kfreelast+0x1d2e>
f012b02f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b036:	83 ec 0c             	sub    $0xc,%esp
f012b039:	68 34 bd 13 f0       	push   $0xf013bd34
f012b03e:	e8 3f 5c fd ff       	call   f0100c82 <cprintf>
f012b043:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012b046:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b049:	e8 0d 19 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012b04e:	29 c3                	sub    %eax,%ebx
f012b050:	89 d8                	mov    %ebx,%eax
f012b052:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b057:	74 1d                	je     f012b076 <test_kfreelast+0x1d5e>
f012b059:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b05d:	75 17                	jne    f012b076 <test_kfreelast+0x1d5e>
f012b05f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b066:	83 ec 0c             	sub    $0xc,%esp
f012b069:	68 40 be 13 f0       	push   $0xf013be40
f012b06e:	e8 0f 5c fd ff       	call   f0100c82 <cprintf>
f012b073:	83 c4 10             	add    $0x10,%esp
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
f012b076:	c7 85 44 fe ff ff ff 	movl   $0x2ffbff,-0x1bc(%ebp)
f012b07d:	fb 2f 00 
		ptr = (char*)ptr_allocations[14];
f012b080:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012b086:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012b089:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b090:	eb 0e                	jmp    f012b0a0 <test_kfreelast+0x1d88>
		{
			ptr[i] = 14 ;
f012b092:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b095:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b098:	01 d0                	add    %edx,%eax
f012b09a:	c6 00 0e             	movb   $0xe,(%eax)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012b09d:	ff 45 f4             	incl   -0xc(%ebp)
f012b0a0:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012b0a6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b0a9:	7f e7                	jg     f012b092 <test_kfreelast+0x1d7a>
		{
			ptr[i] = 14 ;
		}
	}

	if (!f) {ce += 25;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b0ab:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b0af:	75 17                	jne    f012b0c8 <test_kfreelast+0x1db0>
f012b0b1:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
f012b0b5:	83 ec 08             	sub    $0x8,%esp
f012b0b8:	ff 75 f0             	pushl  -0x10(%ebp)
f012b0bb:	68 0c bd 13 f0       	push   $0xf013bd0c
f012b0c0:	e8 bd 5b fd ff       	call   f0100c82 <cprintf>
f012b0c5:	83 c4 10             	add    $0x10,%esp
f012b0c8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree one of the newly allocated space that override a previously allocated one
	{
		//kfree 50 KB
		freeFrames = sys_calculate_free_frames() ;
f012b0cf:	e8 87 18 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012b0d4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b0d7:	e8 60 8c fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b0dc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[13]);
f012b0df:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012b0e5:	83 ec 0c             	sub    $0xc,%esp
f012b0e8:	50                   	push   %eax
f012b0e9:	e8 d2 c7 fd ff       	call   f01078c0 <kfree>
f012b0ee:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b0f1:	e8 46 8c fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b0f6:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b0f9:	74 1d                	je     f012b118 <test_kfreelast+0x1e00>
f012b0fb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b0ff:	75 17                	jne    f012b118 <test_kfreelast+0x1e00>
f012b101:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b108:	83 ec 0c             	sub    $0xc,%esp
f012b10b:	68 34 bd 13 f0       	push   $0xf013bd34
f012b110:	e8 6d 5b fd ff       	call   f0100c82 <cprintf>
f012b115:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 13) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b118:	e8 3e 18 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012b11d:	89 c2                	mov    %eax,%edx
f012b11f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b122:	29 c2                	sub    %eax,%edx
f012b124:	89 d0                	mov    %edx,%eax
f012b126:	83 f8 0d             	cmp    $0xd,%eax
f012b129:	74 1d                	je     f012b148 <test_kfreelast+0x1e30>
f012b12b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b12f:	75 17                	jne    f012b148 <test_kfreelast+0x1e30>
f012b131:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b138:	83 ec 0c             	sub    $0xc,%esp
f012b13b:	68 a0 bd 13 f0       	push   $0xf013bda0
f012b140:	e8 3d 5b fd ff       	call   f0100c82 <cprintf>
f012b145:	83 c4 10             	add    $0x10,%esp
	{
		//50 KB

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012b148:	83 ec 0c             	sub    $0xc,%esp
f012b14b:	6a 03                	push   $0x3
f012b14d:	e8 a9 1c fe ff       	call   f010cdfb <sys_bypassPageFault>
f012b152:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[13];
f012b155:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012b15b:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 50*kilo; ++i)
f012b15e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b165:	eb 3c                	jmp    f012b1a3 <test_kfreelast+0x1e8b>
		{
			ptr[i] = 10;
f012b167:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b16a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b16d:	01 d0                	add    %edx,%eax
f012b16f:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012b172:	e8 72 1c fe ff       	call   f010cde9 <sys_rcr2>
f012b177:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b17a:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012b17d:	01 ca                	add    %ecx,%edx
f012b17f:	39 d0                	cmp    %edx,%eax
f012b181:	74 1d                	je     f012b1a0 <test_kfreelast+0x1e88>
f012b183:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b187:	75 17                	jne    f012b1a0 <test_kfreelast+0x1e88>
f012b189:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b190:	83 ec 0c             	sub    $0xc,%esp
f012b193:	68 b8 be 13 f0       	push   $0xf013beb8
f012b198:	e8 e5 5a fd ff       	call   f0100c82 <cprintf>
f012b19d:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[13];

		for (i = 0; i < 50*kilo; ++i)
f012b1a0:	ff 45 f4             	incl   -0xc(%ebp)
f012b1a3:	81 7d f4 ff c7 00 00 	cmpl   $0xc7ff,-0xc(%ebp)
f012b1aa:	7e bb                	jle    f012b167 <test_kfreelast+0x1e4f>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012b1ac:	83 ec 0c             	sub    $0xc,%esp
f012b1af:	6a 00                	push   $0x0
f012b1b1:	e8 45 1c fe ff       	call   f010cdfb <sys_bypassPageFault>
f012b1b6:	83 c4 10             	add    $0x10,%esp


		//3 MB
		ptr = (char*)ptr_allocations[14];
f012b1b9:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012b1bf:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012b1c2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b1c9:	eb 1e                	jmp    f012b1e9 <test_kfreelast+0x1ed1>
		{
			sums[14] += ptr[i] ;
f012b1cb:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012b1d1:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b1d4:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b1d7:	01 c8                	add    %ecx,%eax
f012b1d9:	8a 00                	mov    (%eax),%al
f012b1db:	0f be c0             	movsbl %al,%eax
f012b1de:	01 d0                	add    %edx,%eax
f012b1e0:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		sys_bypassPageFault(0);


		//3 MB
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012b1e6:	ff 45 f4             	incl   -0xc(%ebp)
f012b1e9:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012b1ef:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b1f2:	7f d7                	jg     f012b1cb <test_kfreelast+0x1eb3>
		{
			sums[14] += ptr[i] ;
		}
		if (sums[14] != 14*lastIndices[14])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012b1f4:	8b 8d f4 fd ff ff    	mov    -0x20c(%ebp),%ecx
f012b1fa:	8b 95 44 fe ff ff    	mov    -0x1bc(%ebp),%edx
f012b200:	89 d0                	mov    %edx,%eax
f012b202:	01 c0                	add    %eax,%eax
f012b204:	01 d0                	add    %edx,%eax
f012b206:	01 c0                	add    %eax,%eax
f012b208:	01 d0                	add    %edx,%eax
f012b20a:	01 c0                	add    %eax,%eax
f012b20c:	39 c1                	cmp    %eax,%ecx
f012b20e:	74 1d                	je     f012b22d <test_kfreelast+0x1f15>
f012b210:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b214:	75 17                	jne    f012b22d <test_kfreelast+0x1f15>
f012b216:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b21d:	83 ec 0c             	sub    $0xc,%esp
f012b220:	68 84 be 13 f0       	push   $0xf013be84
f012b225:	e8 58 5a fd ff       	call   f0100c82 <cprintf>
f012b22a:	83 c4 10             	add    $0x10,%esp
	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b22d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b231:	75 17                	jne    f012b24a <test_kfreelast+0x1f32>
f012b233:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012b237:	83 ec 08             	sub    $0x8,%esp
f012b23a:	ff 75 f0             	pushl  -0x10(%ebp)
f012b23d:	68 0c bd 13 f0       	push   $0xf013bd0c
f012b242:	e8 3b 5a fd ff       	call   f0100c82 <cprintf>
f012b247:	83 c4 10             	add    $0x10,%esp
f012b24a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree all remaining allocations
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f012b251:	e8 05 17 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012b256:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b259:	e8 de 8a fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b25e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[4]);
f012b261:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012b267:	83 ec 0c             	sub    $0xc,%esp
f012b26a:	50                   	push   %eax
f012b26b:	e8 50 c6 fd ff       	call   f01078c0 <kfree>
f012b270:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b273:	e8 c4 8a fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b278:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b27b:	74 1d                	je     f012b29a <test_kfreelast+0x1f82>
f012b27d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b281:	75 17                	jne    f012b29a <test_kfreelast+0x1f82>
f012b283:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b28a:	83 ec 0c             	sub    $0xc,%esp
f012b28d:	68 34 bd 13 f0       	push   $0xf013bd34
f012b292:	e8 eb 59 fd ff       	call   f0100c82 <cprintf>
f012b297:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 2) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b29a:	e8 bc 16 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012b29f:	89 c2                	mov    %eax,%edx
f012b2a1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b2a4:	29 c2                	sub    %eax,%edx
f012b2a6:	89 d0                	mov    %edx,%eax
f012b2a8:	83 f8 02             	cmp    $0x2,%eax
f012b2ab:	74 1d                	je     f012b2ca <test_kfreelast+0x1fb2>
f012b2ad:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b2b1:	75 17                	jne    f012b2ca <test_kfreelast+0x1fb2>
f012b2b3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b2ba:	83 ec 0c             	sub    $0xc,%esp
f012b2bd:	68 a0 bd 13 f0       	push   $0xf013bda0
f012b2c2:	e8 bb 59 fd ff       	call   f0100c82 <cprintf>
f012b2c7:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012b2ca:	e8 8c 16 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012b2cf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b2d2:	e8 65 8a fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b2d7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[14]);
f012b2da:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012b2e0:	83 ec 0c             	sub    $0xc,%esp
f012b2e3:	50                   	push   %eax
f012b2e4:	e8 d7 c5 fd ff       	call   f01078c0 <kfree>
f012b2e9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b2ec:	e8 4b 8a fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b2f1:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b2f4:	74 1d                	je     f012b313 <test_kfreelast+0x1ffb>
f012b2f6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b2fa:	75 17                	jne    f012b313 <test_kfreelast+0x1ffb>
f012b2fc:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b303:	83 ec 0c             	sub    $0xc,%esp
f012b306:	68 34 bd 13 f0       	push   $0xf013bd34
f012b30b:	e8 72 59 fd ff       	call   f0100c82 <cprintf>
f012b310:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b313:	e8 43 16 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012b318:	89 c2                	mov    %eax,%edx
f012b31a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b31d:	29 c2                	sub    %eax,%edx
f012b31f:	89 d0                	mov    %edx,%eax
f012b321:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b326:	74 1d                	je     f012b345 <test_kfreelast+0x202d>
f012b328:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b32c:	75 17                	jne    f012b345 <test_kfreelast+0x202d>
f012b32e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b335:	83 ec 0c             	sub    $0xc,%esp
f012b338:	68 a0 bd 13 f0       	push   $0xf013bda0
f012b33d:	e8 40 59 fd ff       	call   f0100c82 <cprintf>
f012b342:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012b345:	e8 11 16 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012b34a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b34d:	e8 ea 89 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b352:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[5]);
f012b355:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012b35b:	83 ec 0c             	sub    $0xc,%esp
f012b35e:	50                   	push   %eax
f012b35f:	e8 5c c5 fd ff       	call   f01078c0 <kfree>
f012b364:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b367:	e8 d0 89 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b36c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b36f:	74 1d                	je     f012b38e <test_kfreelast+0x2076>
f012b371:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b375:	75 17                	jne    f012b38e <test_kfreelast+0x2076>
f012b377:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b37e:	83 ec 0c             	sub    $0xc,%esp
f012b381:	68 34 bd 13 f0       	push   $0xf013bd34
f012b386:	e8 f7 58 fd ff       	call   f0100c82 <cprintf>
f012b38b:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b38e:	e8 c8 15 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012b393:	89 c2                	mov    %eax,%edx
f012b395:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b398:	29 c2                	sub    %eax,%edx
f012b39a:	89 d0                	mov    %edx,%eax
f012b39c:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b3a1:	74 1d                	je     f012b3c0 <test_kfreelast+0x20a8>
f012b3a3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b3a7:	75 17                	jne    f012b3c0 <test_kfreelast+0x20a8>
f012b3a9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b3b0:	83 ec 0c             	sub    $0xc,%esp
f012b3b3:	68 a0 bd 13 f0       	push   $0xf013bda0
f012b3b8:	e8 c5 58 fd ff       	call   f0100c82 <cprintf>
f012b3bd:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012b3c0:	e8 96 15 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012b3c5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b3c8:	e8 6f 89 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b3cd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012b3d0:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012b3d6:	83 ec 0c             	sub    $0xc,%esp
f012b3d9:	50                   	push   %eax
f012b3da:	e8 e1 c4 fd ff       	call   f01078c0 <kfree>
f012b3df:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b3e2:	e8 55 89 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b3e7:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b3ea:	74 1d                	je     f012b409 <test_kfreelast+0x20f1>
f012b3ec:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b3f0:	75 17                	jne    f012b409 <test_kfreelast+0x20f1>
f012b3f2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b3f9:	83 ec 0c             	sub    $0xc,%esp
f012b3fc:	68 34 bd 13 f0       	push   $0xf013bd34
f012b401:	e8 7c 58 fd ff       	call   f0100c82 <cprintf>
f012b406:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b409:	e8 4d 15 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012b40e:	89 c2                	mov    %eax,%edx
f012b410:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b413:	29 c2                	sub    %eax,%edx
f012b415:	89 d0                	mov    %edx,%eax
f012b417:	83 f8 01             	cmp    $0x1,%eax
f012b41a:	74 1d                	je     f012b439 <test_kfreelast+0x2121>
f012b41c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b420:	75 17                	jne    f012b439 <test_kfreelast+0x2121>
f012b422:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b429:	83 ec 0c             	sub    $0xc,%esp
f012b42c:	68 a0 bd 13 f0       	push   $0xf013bda0
f012b431:	e8 4c 58 fd ff       	call   f0100c82 <cprintf>
f012b436:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012b439:	e8 1d 15 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012b43e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b441:	e8 f6 88 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b446:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[3]);
f012b449:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012b44f:	83 ec 0c             	sub    $0xc,%esp
f012b452:	50                   	push   %eax
f012b453:	e8 68 c4 fd ff       	call   f01078c0 <kfree>
f012b458:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b45b:	e8 dc 88 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b460:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b463:	74 1d                	je     f012b482 <test_kfreelast+0x216a>
f012b465:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b469:	75 17                	jne    f012b482 <test_kfreelast+0x216a>
f012b46b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b472:	83 ec 0c             	sub    $0xc,%esp
f012b475:	68 34 bd 13 f0       	push   $0xf013bd34
f012b47a:	e8 03 58 fd ff       	call   f0100c82 <cprintf>
f012b47f:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b482:	e8 d4 14 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012b487:	89 c2                	mov    %eax,%edx
f012b489:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b48c:	29 c2                	sub    %eax,%edx
f012b48e:	89 d0                	mov    %edx,%eax
f012b490:	83 f8 01             	cmp    $0x1,%eax
f012b493:	74 1d                	je     f012b4b2 <test_kfreelast+0x219a>
f012b495:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b499:	75 17                	jne    f012b4b2 <test_kfreelast+0x219a>
f012b49b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b4a2:	83 ec 0c             	sub    $0xc,%esp
f012b4a5:	68 a0 bd 13 f0       	push   $0xf013bda0
f012b4aa:	e8 d3 57 fd ff       	call   f0100c82 <cprintf>
f012b4af:	83 c4 10             	add    $0x10,%esp

		if(start_freeFrames != (sys_calculate_free_frames())) if (!f) {f=1; cprintf("\nWrong kfree: not all pages removed correctly at end");}
f012b4b2:	e8 a4 14 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012b4b7:	89 c2                	mov    %eax,%edx
f012b4b9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012b4bc:	39 c2                	cmp    %eax,%edx
f012b4be:	74 1d                	je     f012b4dd <test_kfreelast+0x21c5>
f012b4c0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b4c4:	75 17                	jne    f012b4dd <test_kfreelast+0x21c5>
f012b4c6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b4cd:	83 ec 0c             	sub    $0xc,%esp
f012b4d0:	68 00 bf 13 f0       	push   $0xf013bf00
f012b4d5:	e8 a8 57 fd ff       	call   f0100c82 <cprintf>
f012b4da:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012b4dd:	83 ec 0c             	sub    $0xc,%esp
f012b4e0:	6a 03                	push   $0x3
f012b4e2:	e8 14 19 fe ff       	call   f010cdfb <sys_bypassPageFault>
f012b4e7:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 15; ++i)
f012b4ea:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b4f1:	e9 8e 00 00 00       	jmp    f012b584 <test_kfreelast+0x226c>
		{
			ptr = (char *) ptr_allocations[i];
f012b4f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012b4f9:	8b 84 85 6c fd ff ff 	mov    -0x294(%ebp,%eax,4),%eax
f012b500:	89 45 84             	mov    %eax,-0x7c(%ebp)
			ptr[0] = 10;
f012b503:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b506:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012b509:	e8 db 18 fe ff       	call   f010cde9 <sys_rcr2>
f012b50e:	89 c2                	mov    %eax,%edx
f012b510:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b513:	39 c2                	cmp    %eax,%edx
f012b515:	74 1d                	je     f012b534 <test_kfreelast+0x221c>
f012b517:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b51b:	75 17                	jne    f012b534 <test_kfreelast+0x221c>
f012b51d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b524:	83 ec 0c             	sub    $0xc,%esp
f012b527:	68 b8 be 13 f0       	push   $0xf013beb8
f012b52c:	e8 51 57 fd ff       	call   f0100c82 <cprintf>
f012b531:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f012b534:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012b537:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012b53e:	89 c2                	mov    %eax,%edx
f012b540:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b543:	01 d0                	add    %edx,%eax
f012b545:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012b548:	e8 9c 18 fe ff       	call   f010cde9 <sys_rcr2>
f012b54d:	89 c2                	mov    %eax,%edx
f012b54f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012b552:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012b559:	89 c1                	mov    %eax,%ecx
f012b55b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b55e:	01 c8                	add    %ecx,%eax
f012b560:	39 c2                	cmp    %eax,%edx
f012b562:	74 1d                	je     f012b581 <test_kfreelast+0x2269>
f012b564:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b568:	75 17                	jne    f012b581 <test_kfreelast+0x2269>
f012b56a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b571:	83 ec 0c             	sub    $0xc,%esp
f012b574:	68 b8 be 13 f0       	push   $0xf013beb8
f012b579:	e8 04 57 fd ff       	call   f0100c82 <cprintf>
f012b57e:	83 c4 10             	add    $0x10,%esp
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 15; ++i)
f012b581:	ff 45 f4             	incl   -0xc(%ebp)
f012b584:	83 7d f4 0e          	cmpl   $0xe,-0xc(%ebp)
f012b588:	0f 8e 68 ff ff ff    	jle    f012b4f6 <test_kfreelast+0x21de>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012b58e:	83 ec 0c             	sub    $0xc,%esp
f012b591:	6a 00                	push   $0x0
f012b593:	e8 63 18 fe ff       	call   f010cdfb <sys_bypassPageFault>
f012b598:	83 c4 10             	add    $0x10,%esp
	}

	//kfree non-exist item
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012b59b:	e8 bb 13 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012b5a0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b5a3:	e8 94 87 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b5a8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[0]);
f012b5ab:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012b5b1:	83 ec 0c             	sub    $0xc,%esp
f012b5b4:	50                   	push   %eax
f012b5b5:	e8 06 c3 fd ff       	call   f01078c0 <kfree>
f012b5ba:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b5bd:	e8 7a 87 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b5c2:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b5c5:	74 1d                	je     f012b5e4 <test_kfreelast+0x22cc>
f012b5c7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b5cb:	75 17                	jne    f012b5e4 <test_kfreelast+0x22cc>
f012b5cd:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b5d4:	83 ec 0c             	sub    $0xc,%esp
f012b5d7:	68 34 bd 13 f0       	push   $0xf013bd34
f012b5dc:	e8 a1 56 fd ff       	call   f0100c82 <cprintf>
f012b5e1:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012b5e4:	e8 72 13 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012b5e9:	89 c2                	mov    %eax,%edx
f012b5eb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b5ee:	39 c2                	cmp    %eax,%edx
f012b5f0:	74 1d                	je     f012b60f <test_kfreelast+0x22f7>
f012b5f2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b5f6:	75 17                	jne    f012b60f <test_kfreelast+0x22f7>
f012b5f8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b5ff:	83 ec 0c             	sub    $0xc,%esp
f012b602:	68 38 bf 13 f0       	push   $0xf013bf38
f012b607:	e8 76 56 fd ff       	call   f0100c82 <cprintf>
f012b60c:	83 c4 10             	add    $0x10,%esp

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012b60f:	e8 47 13 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012b614:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b617:	e8 20 87 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b61c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012b61f:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012b625:	83 ec 0c             	sub    $0xc,%esp
f012b628:	50                   	push   %eax
f012b629:	e8 92 c2 fd ff       	call   f01078c0 <kfree>
f012b62e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b631:	e8 06 87 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b636:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b639:	74 1d                	je     f012b658 <test_kfreelast+0x2340>
f012b63b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b63f:	75 17                	jne    f012b658 <test_kfreelast+0x2340>
f012b641:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b648:	83 ec 0c             	sub    $0xc,%esp
f012b64b:	68 34 bd 13 f0       	push   $0xf013bd34
f012b650:	e8 2d 56 fd ff       	call   f0100c82 <cprintf>
f012b655:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012b658:	e8 fe 12 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012b65d:	89 c2                	mov    %eax,%edx
f012b65f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b662:	39 c2                	cmp    %eax,%edx
f012b664:	74 1d                	je     f012b683 <test_kfreelast+0x236b>
f012b666:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b66a:	75 17                	jne    f012b683 <test_kfreelast+0x236b>
f012b66c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b673:	83 ec 0c             	sub    $0xc,%esp
f012b676:	68 38 bf 13 f0       	push   $0xf013bf38
f012b67b:	e8 02 56 fd ff       	call   f0100c82 <cprintf>
f012b680:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012b683:	e8 d3 12 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012b688:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b68b:	e8 ac 86 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b690:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012b693:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012b699:	83 ec 0c             	sub    $0xc,%esp
f012b69c:	50                   	push   %eax
f012b69d:	e8 1e c2 fd ff       	call   f01078c0 <kfree>
f012b6a2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b6a5:	e8 92 86 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b6aa:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b6ad:	74 1d                	je     f012b6cc <test_kfreelast+0x23b4>
f012b6af:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b6b3:	75 17                	jne    f012b6cc <test_kfreelast+0x23b4>
f012b6b5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b6bc:	83 ec 0c             	sub    $0xc,%esp
f012b6bf:	68 34 bd 13 f0       	push   $0xf013bd34
f012b6c4:	e8 b9 55 fd ff       	call   f0100c82 <cprintf>
f012b6c9:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012b6cc:	e8 8a 12 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012b6d1:	89 c2                	mov    %eax,%edx
f012b6d3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b6d6:	39 c2                	cmp    %eax,%edx
f012b6d8:	74 1d                	je     f012b6f7 <test_kfreelast+0x23df>
f012b6da:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b6de:	75 17                	jne    f012b6f7 <test_kfreelast+0x23df>
f012b6e0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b6e7:	83 ec 0c             	sub    $0xc,%esp
f012b6ea:	68 38 bf 13 f0       	push   $0xf013bf38
f012b6ef:	e8 8e 55 fd ff       	call   f0100c82 <cprintf>
f012b6f4:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012b6f7:	e8 5f 12 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012b6fc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b6ff:	e8 38 86 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b704:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012b707:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012b70d:	83 ec 0c             	sub    $0xc,%esp
f012b710:	50                   	push   %eax
f012b711:	e8 aa c1 fd ff       	call   f01078c0 <kfree>
f012b716:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b719:	e8 1e 86 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b71e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b721:	74 1d                	je     f012b740 <test_kfreelast+0x2428>
f012b723:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b727:	75 17                	jne    f012b740 <test_kfreelast+0x2428>
f012b729:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b730:	83 ec 0c             	sub    $0xc,%esp
f012b733:	68 34 bd 13 f0       	push   $0xf013bd34
f012b738:	e8 45 55 fd ff       	call   f0100c82 <cprintf>
f012b73d:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012b740:	e8 16 12 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012b745:	89 c2                	mov    %eax,%edx
f012b747:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b74a:	39 c2                	cmp    %eax,%edx
f012b74c:	74 1d                	je     f012b76b <test_kfreelast+0x2453>
f012b74e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b752:	75 17                	jne    f012b76b <test_kfreelast+0x2453>
f012b754:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b75b:	83 ec 0c             	sub    $0xc,%esp
f012b75e:	68 38 bf 13 f0       	push   $0xf013bf38
f012b763:	e8 1a 55 fd ff       	call   f0100c82 <cprintf>
f012b768:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b76b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b76f:	75 17                	jne    f012b788 <test_kfreelast+0x2470>
f012b771:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012b775:	83 ec 08             	sub    $0x8,%esp
f012b778:	ff 75 f0             	pushl  -0x10(%ebp)
f012b77b:	68 0c bd 13 f0       	push   $0xf013bd0c
f012b780:	e8 fd 54 fd ff       	call   f0100c82 <cprintf>
f012b785:	83 c4 10             	add    $0x10,%esp
f012b788:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//cprintf("\nCongratulations!! your modification is run successfully.\n");

	return 1;
f012b78f:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012b794:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012b797:	5b                   	pop    %ebx
f012b798:	5f                   	pop    %edi
f012b799:	5d                   	pop    %ebp
f012b79a:	c3                   	ret    

f012b79b <test_krealloc>:

int test_krealloc() {
f012b79b:	55                   	push   %ebp
f012b79c:	89 e5                	mov    %esp,%ebp
f012b79e:	57                   	push   %edi
f012b79f:	53                   	push   %ebx
f012b7a0:	81 ec 50 02 00 00    	sub    $0x250,%esp
	cprintf("==============================================\n");
f012b7a6:	83 ec 0c             	sub    $0xc,%esp
f012b7a9:	68 1c ac 13 f0       	push   $0xf013ac1c
f012b7ae:	e8 cf 54 fd ff       	call   f0100c82 <cprintf>
f012b7b3:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012b7b6:	83 ec 0c             	sub    $0xc,%esp
f012b7b9:	68 4c ac 13 f0       	push   $0xf013ac4c
f012b7be:	e8 bf 54 fd ff       	call   f0100c82 <cprintf>
f012b7c3:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012b7c6:	83 ec 0c             	sub    $0xc,%esp
f012b7c9:	68 1c ac 13 f0       	push   $0xf013ac1c
f012b7ce:	e8 af 54 fd ff       	call   f0100c82 <cprintf>
f012b7d3:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012b7d6:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012b7da:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012b7de:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012b7e4:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012b7ea:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012b7f1:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012b7f8:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f012b7fe:	b9 14 00 00 00       	mov    $0x14,%ecx
f012b803:	b8 00 00 00 00       	mov    $0x0,%eax
f012b808:	89 d7                	mov    %edx,%edi
f012b80a:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012b80c:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012b813:	8d 95 08 fe ff ff    	lea    -0x1f8(%ebp),%edx
f012b819:	b9 14 00 00 00       	mov    $0x14,%ecx
f012b81e:	b8 00 00 00 00       	mov    $0x0,%eax
f012b823:	89 d7                	mov    %edx,%edi
f012b825:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012b827:	8d 95 b8 fd ff ff    	lea    -0x248(%ebp),%edx
f012b82d:	b9 14 00 00 00       	mov    $0x14,%ecx
f012b832:	b8 00 00 00 00       	mov    $0x0,%eax
f012b837:	89 d7                	mov    %edx,%edi
f012b839:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012b83b:	e8 1b 11 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012b840:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012b843:	83 ec 08             	sub    $0x8,%esp
f012b846:	68 00 fc 0f 00       	push   $0xffc00
f012b84b:	6a 00                	push   $0x0
f012b84d:	e8 63 c2 fd ff       	call   f0107ab5 <krealloc>
f012b852:	83 c4 10             	add    $0x10,%esp
f012b855:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012b85b:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012b861:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b866:	77 17                	ja     f012b87f <test_krealloc+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b868:	83 ec 04             	sub    $0x4,%esp
f012b86b:	68 80 bf 13 f0       	push   $0xf013bf80
f012b870:	68 e2 0e 00 00       	push   $0xee2
f012b875:	68 da ac 13 f0       	push   $0xf013acda
f012b87a:	e8 7c 49 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012b87f:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012b885:	89 c1                	mov    %eax,%ecx
f012b887:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012b88e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012b891:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b896:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012b899:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012b89c:	ba 00 00 00 00       	mov    $0x0,%edx
f012b8a1:	f7 75 b4             	divl   -0x4c(%ebp)
f012b8a4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012b8a7:	29 d0                	sub    %edx,%eax
f012b8a9:	89 c3                	mov    %eax,%ebx
f012b8ab:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012b8b2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012b8b7:	0f b6 d0             	movzbl %al,%edx
f012b8ba:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012b8bd:	01 d0                	add    %edx,%eax
f012b8bf:	48                   	dec    %eax
f012b8c0:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012b8c3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012b8c6:	ba 00 00 00 00       	mov    $0x0,%edx
f012b8cb:	f7 75 ac             	divl   -0x54(%ebp)
f012b8ce:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012b8d1:	29 d0                	sub    %edx,%eax
f012b8d3:	01 c3                	add    %eax,%ebx
f012b8d5:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012b8dc:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012b8e1:	0f b6 c0             	movzbl %al,%eax
f012b8e4:	c1 e0 04             	shl    $0x4,%eax
f012b8e7:	89 c2                	mov    %eax,%edx
f012b8e9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012b8ec:	01 d0                	add    %edx,%eax
f012b8ee:	48                   	dec    %eax
f012b8ef:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012b8f2:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012b8f5:	ba 00 00 00 00       	mov    $0x0,%edx
f012b8fa:	f7 75 a4             	divl   -0x5c(%ebp)
f012b8fd:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012b900:	29 d0                	sub    %edx,%eax
f012b902:	01 d8                	add    %ebx,%eax
f012b904:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012b909:	39 c1                	cmp    %eax,%ecx
f012b90b:	74 17                	je     f012b924 <test_krealloc+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012b90d:	83 ec 04             	sub    $0x4,%esp
f012b910:	68 bc bf 13 f0       	push   $0xf013bfbc
f012b915:	68 e4 0e 00 00       	push   $0xee4
f012b91a:	68 da ac 13 f0       	push   $0xf013acda
f012b91f:	e8 d7 48 fd ff       	call   f01001fb <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012b924:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b927:	e8 2f 10 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012b92c:	29 c3                	sub    %eax,%ebx
f012b92e:	89 d8                	mov    %ebx,%eax
f012b930:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b935:	74 17                	je     f012b94e <test_krealloc+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012b937:	83 ec 04             	sub    $0x4,%esp
f012b93a:	68 ee bf 13 f0       	push   $0xf013bfee
f012b93f:	68 e7 0e 00 00       	push   $0xee7
f012b944:	68 da ac 13 f0       	push   $0xf013acda
f012b949:	e8 ad 48 fd ff       	call   f01001fb <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012b94e:	c7 85 08 fe ff ff ff 	movl   $0xffbff,-0x1f8(%ebp)
f012b955:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012b958:	e8 fe 0f fe ff       	call   f010c95b <sys_calculate_free_frames>
f012b95d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012b960:	83 ec 08             	sub    $0x8,%esp
f012b963:	68 00 fc 0f 00       	push   $0xffc00
f012b968:	6a 00                	push   $0x0
f012b96a:	e8 46 c1 fd ff       	call   f0107ab5 <krealloc>
f012b96f:	83 c4 10             	add    $0x10,%esp
f012b972:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012b978:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b97e:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012b983:	77 17                	ja     f012b99c <test_krealloc+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b985:	83 ec 04             	sub    $0x4,%esp
f012b988:	68 80 bf 13 f0       	push   $0xf013bf80
f012b98d:	68 ef 0e 00 00       	push   $0xeef
f012b992:	68 da ac 13 f0       	push   $0xf013acda
f012b997:	e8 5f 48 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012b99c:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b9a2:	89 c1                	mov    %eax,%ecx
f012b9a4:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012b9ab:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012b9ae:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b9b3:	89 45 98             	mov    %eax,-0x68(%ebp)
f012b9b6:	8b 45 98             	mov    -0x68(%ebp),%eax
f012b9b9:	ba 00 00 00 00       	mov    $0x0,%edx
f012b9be:	f7 75 9c             	divl   -0x64(%ebp)
f012b9c1:	8b 45 98             	mov    -0x68(%ebp),%eax
f012b9c4:	29 d0                	sub    %edx,%eax
f012b9c6:	89 c3                	mov    %eax,%ebx
f012b9c8:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012b9cf:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012b9d4:	0f b6 d0             	movzbl %al,%edx
f012b9d7:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012b9da:	01 d0                	add    %edx,%eax
f012b9dc:	48                   	dec    %eax
f012b9dd:	89 45 90             	mov    %eax,-0x70(%ebp)
f012b9e0:	8b 45 90             	mov    -0x70(%ebp),%eax
f012b9e3:	ba 00 00 00 00       	mov    $0x0,%edx
f012b9e8:	f7 75 94             	divl   -0x6c(%ebp)
f012b9eb:	8b 45 90             	mov    -0x70(%ebp),%eax
f012b9ee:	29 d0                	sub    %edx,%eax
f012b9f0:	01 c3                	add    %eax,%ebx
f012b9f2:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012b9f9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012b9fe:	0f b6 c0             	movzbl %al,%eax
f012ba01:	c1 e0 04             	shl    $0x4,%eax
f012ba04:	89 c2                	mov    %eax,%edx
f012ba06:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012ba09:	01 d0                	add    %edx,%eax
f012ba0b:	48                   	dec    %eax
f012ba0c:	89 45 88             	mov    %eax,-0x78(%ebp)
f012ba0f:	8b 45 88             	mov    -0x78(%ebp),%eax
f012ba12:	ba 00 00 00 00       	mov    $0x0,%edx
f012ba17:	f7 75 8c             	divl   -0x74(%ebp)
f012ba1a:	8b 45 88             	mov    -0x78(%ebp),%eax
f012ba1d:	29 d0                	sub    %edx,%eax
f012ba1f:	01 d8                	add    %ebx,%eax
f012ba21:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012ba26:	39 c1                	cmp    %eax,%ecx
f012ba28:	74 17                	je     f012ba41 <test_krealloc+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012ba2a:	83 ec 04             	sub    $0x4,%esp
f012ba2d:	68 bc bf 13 f0       	push   $0xf013bfbc
f012ba32:	68 f1 0e 00 00       	push   $0xef1
f012ba37:	68 da ac 13 f0       	push   $0xf013acda
f012ba3c:	e8 ba 47 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012ba41:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ba44:	e8 12 0f fe ff       	call   f010c95b <sys_calculate_free_frames>
f012ba49:	29 c3                	sub    %eax,%ebx
f012ba4b:	89 d8                	mov    %ebx,%eax
f012ba4d:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ba52:	74 17                	je     f012ba6b <test_krealloc+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012ba54:	83 ec 04             	sub    $0x4,%esp
f012ba57:	68 ee bf 13 f0       	push   $0xf013bfee
f012ba5c:	68 f3 0e 00 00       	push   $0xef3
f012ba61:	68 da ac 13 f0       	push   $0xf013acda
f012ba66:	e8 90 47 fd ff       	call   f01001fb <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012ba6b:	c7 85 0c fe ff ff ff 	movl   $0xffbff,-0x1f4(%ebp)
f012ba72:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012ba75:	e8 e1 0e fe ff       	call   f010c95b <sys_calculate_free_frames>
f012ba7a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012ba7d:	83 ec 08             	sub    $0x8,%esp
f012ba80:	68 00 fc 0f 00       	push   $0xffc00
f012ba85:	6a 00                	push   $0x0
f012ba87:	e8 29 c0 fd ff       	call   f0107ab5 <krealloc>
f012ba8c:	83 c4 10             	add    $0x10,%esp
f012ba8f:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012ba95:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012ba9b:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012baa0:	77 17                	ja     f012bab9 <test_krealloc+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012baa2:	83 ec 04             	sub    $0x4,%esp
f012baa5:	68 80 bf 13 f0       	push   $0xf013bf80
f012baaa:	68 fb 0e 00 00       	push   $0xefb
f012baaf:	68 da ac 13 f0       	push   $0xf013acda
f012bab4:	e8 42 47 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012bab9:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012babf:	89 c1                	mov    %eax,%ecx
f012bac1:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012bac8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bacb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bad0:	89 45 80             	mov    %eax,-0x80(%ebp)
f012bad3:	8b 45 80             	mov    -0x80(%ebp),%eax
f012bad6:	ba 00 00 00 00       	mov    $0x0,%edx
f012badb:	f7 75 84             	divl   -0x7c(%ebp)
f012bade:	8b 45 80             	mov    -0x80(%ebp),%eax
f012bae1:	29 d0                	sub    %edx,%eax
f012bae3:	89 c3                	mov    %eax,%ebx
f012bae5:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012baec:	10 00 00 
f012baef:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012baf4:	0f b6 d0             	movzbl %al,%edx
f012baf7:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012bafd:	01 d0                	add    %edx,%eax
f012baff:	48                   	dec    %eax
f012bb00:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012bb06:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012bb0c:	ba 00 00 00 00       	mov    $0x0,%edx
f012bb11:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012bb17:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012bb1d:	29 d0                	sub    %edx,%eax
f012bb1f:	01 c3                	add    %eax,%ebx
f012bb21:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012bb28:	10 00 00 
f012bb2b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012bb30:	0f b6 c0             	movzbl %al,%eax
f012bb33:	c1 e0 04             	shl    $0x4,%eax
f012bb36:	89 c2                	mov    %eax,%edx
f012bb38:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012bb3e:	01 d0                	add    %edx,%eax
f012bb40:	48                   	dec    %eax
f012bb41:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012bb47:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012bb4d:	ba 00 00 00 00       	mov    $0x0,%edx
f012bb52:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012bb58:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012bb5e:	29 d0                	sub    %edx,%eax
f012bb60:	01 d8                	add    %ebx,%eax
f012bb62:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012bb67:	39 c1                	cmp    %eax,%ecx
f012bb69:	74 17                	je     f012bb82 <test_krealloc+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012bb6b:	83 ec 04             	sub    $0x4,%esp
f012bb6e:	68 bc bf 13 f0       	push   $0xf013bfbc
f012bb73:	68 fd 0e 00 00       	push   $0xefd
f012bb78:	68 da ac 13 f0       	push   $0xf013acda
f012bb7d:	e8 79 46 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012bb82:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bb85:	e8 d1 0d fe ff       	call   f010c95b <sys_calculate_free_frames>
f012bb8a:	29 c3                	sub    %eax,%ebx
f012bb8c:	89 d8                	mov    %ebx,%eax
f012bb8e:	3d 00 01 00 00       	cmp    $0x100,%eax
f012bb93:	74 17                	je     f012bbac <test_krealloc+0x411>
			panic("krealloc: Wrong allocation: ");
f012bb95:	83 ec 04             	sub    $0x4,%esp
f012bb98:	68 ee bf 13 f0       	push   $0xf013bfee
f012bb9d:	68 ff 0e 00 00       	push   $0xeff
f012bba2:	68 da ac 13 f0       	push   $0xf013acda
f012bba7:	e8 4f 46 fd ff       	call   f01001fb <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012bbac:	c7 85 10 fe ff ff ff 	movl   $0x3feff,-0x1f0(%ebp)
f012bbb3:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012bbb6:	e8 a0 0d fe ff       	call   f010c95b <sys_calculate_free_frames>
f012bbbb:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012bbbe:	83 ec 08             	sub    $0x8,%esp
f012bbc1:	68 00 fc 0f 00       	push   $0xffc00
f012bbc6:	6a 00                	push   $0x0
f012bbc8:	e8 e8 be fd ff       	call   f0107ab5 <krealloc>
f012bbcd:	83 c4 10             	add    $0x10,%esp
f012bbd0:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012bbd6:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012bbdc:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012bbe1:	77 17                	ja     f012bbfa <test_krealloc+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bbe3:	83 ec 04             	sub    $0x4,%esp
f012bbe6:	68 80 bf 13 f0       	push   $0xf013bf80
f012bbeb:	68 06 0f 00 00       	push   $0xf06
f012bbf0:	68 da ac 13 f0       	push   $0xf013acda
f012bbf5:	e8 01 46 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012bbfa:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012bc00:	89 c1                	mov    %eax,%ecx
f012bc02:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012bc09:	10 00 00 
f012bc0c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012bc12:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bc17:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012bc1d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012bc23:	ba 00 00 00 00       	mov    $0x0,%edx
f012bc28:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012bc2e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012bc34:	29 d0                	sub    %edx,%eax
f012bc36:	89 c3                	mov    %eax,%ebx
f012bc38:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012bc3f:	10 00 00 
f012bc42:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012bc47:	0f b6 d0             	movzbl %al,%edx
f012bc4a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012bc50:	01 d0                	add    %edx,%eax
f012bc52:	48                   	dec    %eax
f012bc53:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012bc59:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012bc5f:	ba 00 00 00 00       	mov    $0x0,%edx
f012bc64:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012bc6a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012bc70:	29 d0                	sub    %edx,%eax
f012bc72:	01 c3                	add    %eax,%ebx
f012bc74:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012bc7b:	10 00 00 
f012bc7e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012bc83:	0f b6 c0             	movzbl %al,%eax
f012bc86:	c1 e0 04             	shl    $0x4,%eax
f012bc89:	89 c2                	mov    %eax,%edx
f012bc8b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012bc91:	01 d0                	add    %edx,%eax
f012bc93:	48                   	dec    %eax
f012bc94:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012bc9a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012bca0:	ba 00 00 00 00       	mov    $0x0,%edx
f012bca5:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012bcab:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012bcb1:	29 d0                	sub    %edx,%eax
f012bcb3:	01 d8                	add    %ebx,%eax
f012bcb5:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012bcba:	39 c1                	cmp    %eax,%ecx
f012bcbc:	74 17                	je     f012bcd5 <test_krealloc+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012bcbe:	83 ec 04             	sub    $0x4,%esp
f012bcc1:	68 bc bf 13 f0       	push   $0xf013bfbc
f012bcc6:	68 08 0f 00 00       	push   $0xf08
f012bccb:	68 da ac 13 f0       	push   $0xf013acda
f012bcd0:	e8 26 45 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012bcd5:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bcd8:	e8 7e 0c fe ff       	call   f010c95b <sys_calculate_free_frames>
f012bcdd:	29 c3                	sub    %eax,%ebx
f012bcdf:	89 d8                	mov    %ebx,%eax
f012bce1:	3d 00 01 00 00       	cmp    $0x100,%eax
f012bce6:	74 17                	je     f012bcff <test_krealloc+0x564>
			panic("krealloc: Wrong allocation: ");
f012bce8:	83 ec 04             	sub    $0x4,%esp
f012bceb:	68 ee bf 13 f0       	push   $0xf013bfee
f012bcf0:	68 0a 0f 00 00       	push   $0xf0a
f012bcf5:	68 da ac 13 f0       	push   $0xf013acda
f012bcfa:	e8 fc 44 fd ff       	call   f01001fb <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012bcff:	c7 85 14 fe ff ff ff 	movl   $0x3feff,-0x1ec(%ebp)
f012bd06:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012bd09:	e8 4d 0c fe ff       	call   f010c95b <sys_calculate_free_frames>
f012bd0e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012bd11:	83 ec 08             	sub    $0x8,%esp
f012bd14:	68 00 fc 1f 00       	push   $0x1ffc00
f012bd19:	6a 00                	push   $0x0
f012bd1b:	e8 95 bd fd ff       	call   f0107ab5 <krealloc>
f012bd20:	83 c4 10             	add    $0x10,%esp
f012bd23:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012bd29:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012bd2f:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012bd34:	77 17                	ja     f012bd4d <test_krealloc+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bd36:	83 ec 04             	sub    $0x4,%esp
f012bd39:	68 80 bf 13 f0       	push   $0xf013bf80
f012bd3e:	68 11 0f 00 00       	push   $0xf11
f012bd43:	68 da ac 13 f0       	push   $0xf013acda
f012bd48:	e8 ae 44 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012bd4d:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012bd53:	89 c1                	mov    %eax,%ecx
f012bd55:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012bd5c:	10 00 00 
f012bd5f:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012bd65:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bd6a:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012bd70:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012bd76:	ba 00 00 00 00       	mov    $0x0,%edx
f012bd7b:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012bd81:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012bd87:	29 d0                	sub    %edx,%eax
f012bd89:	89 c3                	mov    %eax,%ebx
f012bd8b:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012bd92:	10 00 00 
f012bd95:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012bd9a:	0f b6 d0             	movzbl %al,%edx
f012bd9d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012bda3:	01 d0                	add    %edx,%eax
f012bda5:	48                   	dec    %eax
f012bda6:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012bdac:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012bdb2:	ba 00 00 00 00       	mov    $0x0,%edx
f012bdb7:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012bdbd:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012bdc3:	29 d0                	sub    %edx,%eax
f012bdc5:	01 c3                	add    %eax,%ebx
f012bdc7:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012bdce:	10 00 00 
f012bdd1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012bdd6:	0f b6 c0             	movzbl %al,%eax
f012bdd9:	c1 e0 04             	shl    $0x4,%eax
f012bddc:	89 c2                	mov    %eax,%edx
f012bdde:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012bde4:	01 d0                	add    %edx,%eax
f012bde6:	48                   	dec    %eax
f012bde7:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012bded:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012bdf3:	ba 00 00 00 00       	mov    $0x0,%edx
f012bdf8:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012bdfe:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012be04:	29 d0                	sub    %edx,%eax
f012be06:	01 d8                	add    %ebx,%eax
f012be08:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012be0d:	39 c1                	cmp    %eax,%ecx
f012be0f:	74 17                	je     f012be28 <test_krealloc+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012be11:	83 ec 04             	sub    $0x4,%esp
f012be14:	68 bc bf 13 f0       	push   $0xf013bfbc
f012be19:	68 13 0f 00 00       	push   $0xf13
f012be1e:	68 da ac 13 f0       	push   $0xf013acda
f012be23:	e8 d3 43 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012be28:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012be2b:	e8 2b 0b fe ff       	call   f010c95b <sys_calculate_free_frames>
f012be30:	29 c3                	sub    %eax,%ebx
f012be32:	89 d8                	mov    %ebx,%eax
f012be34:	3d 00 02 00 00       	cmp    $0x200,%eax
f012be39:	74 17                	je     f012be52 <test_krealloc+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012be3b:	83 ec 04             	sub    $0x4,%esp
f012be3e:	68 ee bf 13 f0       	push   $0xf013bfee
f012be43:	68 15 0f 00 00       	push   $0xf15
f012be48:	68 da ac 13 f0       	push   $0xf013acda
f012be4d:	e8 a9 43 fd ff       	call   f01001fb <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012be52:	c7 85 18 fe ff ff ff 	movl   $0xffdff,-0x1e8(%ebp)
f012be59:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012be5c:	e8 fa 0a fe ff       	call   f010c95b <sys_calculate_free_frames>
f012be61:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012be64:	83 ec 08             	sub    $0x8,%esp
f012be67:	68 00 fc 1f 00       	push   $0x1ffc00
f012be6c:	6a 00                	push   $0x0
f012be6e:	e8 42 bc fd ff       	call   f0107ab5 <krealloc>
f012be73:	83 c4 10             	add    $0x10,%esp
f012be76:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012be7c:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012be82:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012be87:	77 17                	ja     f012bea0 <test_krealloc+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012be89:	83 ec 04             	sub    $0x4,%esp
f012be8c:	68 80 bf 13 f0       	push   $0xf013bf80
f012be91:	68 1c 0f 00 00       	push   $0xf1c
f012be96:	68 da ac 13 f0       	push   $0xf013acda
f012be9b:	e8 5b 43 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012bea0:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012bea6:	89 c1                	mov    %eax,%ecx
f012bea8:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012beaf:	10 00 00 
f012beb2:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012beb8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bebd:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012bec3:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012bec9:	ba 00 00 00 00       	mov    $0x0,%edx
f012bece:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012bed4:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012beda:	29 d0                	sub    %edx,%eax
f012bedc:	89 c3                	mov    %eax,%ebx
f012bede:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012bee5:	10 00 00 
f012bee8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012beed:	0f b6 d0             	movzbl %al,%edx
f012bef0:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012bef6:	01 d0                	add    %edx,%eax
f012bef8:	48                   	dec    %eax
f012bef9:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012beff:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012bf05:	ba 00 00 00 00       	mov    $0x0,%edx
f012bf0a:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012bf10:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012bf16:	29 d0                	sub    %edx,%eax
f012bf18:	01 c3                	add    %eax,%ebx
f012bf1a:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012bf21:	10 00 00 
f012bf24:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012bf29:	0f b6 c0             	movzbl %al,%eax
f012bf2c:	c1 e0 04             	shl    $0x4,%eax
f012bf2f:	89 c2                	mov    %eax,%edx
f012bf31:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012bf37:	01 d0                	add    %edx,%eax
f012bf39:	48                   	dec    %eax
f012bf3a:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012bf40:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012bf46:	ba 00 00 00 00       	mov    $0x0,%edx
f012bf4b:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012bf51:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012bf57:	29 d0                	sub    %edx,%eax
f012bf59:	01 d8                	add    %ebx,%eax
f012bf5b:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012bf60:	39 c1                	cmp    %eax,%ecx
f012bf62:	74 17                	je     f012bf7b <test_krealloc+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012bf64:	83 ec 04             	sub    $0x4,%esp
f012bf67:	68 bc bf 13 f0       	push   $0xf013bfbc
f012bf6c:	68 1e 0f 00 00       	push   $0xf1e
f012bf71:	68 da ac 13 f0       	push   $0xf013acda
f012bf76:	e8 80 42 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012bf7b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bf7e:	e8 d8 09 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012bf83:	29 c3                	sub    %eax,%ebx
f012bf85:	89 d8                	mov    %ebx,%eax
f012bf87:	3d 00 02 00 00       	cmp    $0x200,%eax
f012bf8c:	74 17                	je     f012bfa5 <test_krealloc+0x80a>
			panic("krealloc: Wrong allocation: ");
f012bf8e:	83 ec 04             	sub    $0x4,%esp
f012bf91:	68 ee bf 13 f0       	push   $0xf013bfee
f012bf96:	68 20 0f 00 00       	push   $0xf20
f012bf9b:	68 da ac 13 f0       	push   $0xf013acda
f012bfa0:	e8 56 42 fd ff       	call   f01001fb <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012bfa5:	c7 85 1c fe ff ff ff 	movl   $0xffdff,-0x1e4(%ebp)
f012bfac:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012bfaf:	e8 a7 09 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012bfb4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012bfb7:	83 ec 08             	sub    $0x8,%esp
f012bfba:	68 00 fc 2f 00       	push   $0x2ffc00
f012bfbf:	6a 00                	push   $0x0
f012bfc1:	e8 ef ba fd ff       	call   f0107ab5 <krealloc>
f012bfc6:	83 c4 10             	add    $0x10,%esp
f012bfc9:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012bfcf:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012bfd5:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012bfda:	77 17                	ja     f012bff3 <test_krealloc+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bfdc:	83 ec 04             	sub    $0x4,%esp
f012bfdf:	68 80 bf 13 f0       	push   $0xf013bf80
f012bfe4:	68 27 0f 00 00       	push   $0xf27
f012bfe9:	68 da ac 13 f0       	push   $0xf013acda
f012bfee:	e8 08 42 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012bff3:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012bff9:	89 c1                	mov    %eax,%ecx
f012bffb:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012c002:	10 00 00 
f012c005:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c00b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c010:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012c016:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c01c:	ba 00 00 00 00       	mov    $0x0,%edx
f012c021:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012c027:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c02d:	29 d0                	sub    %edx,%eax
f012c02f:	89 c3                	mov    %eax,%ebx
f012c031:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012c038:	10 00 00 
f012c03b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012c040:	0f b6 d0             	movzbl %al,%edx
f012c043:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012c049:	01 d0                	add    %edx,%eax
f012c04b:	48                   	dec    %eax
f012c04c:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012c052:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012c058:	ba 00 00 00 00       	mov    $0x0,%edx
f012c05d:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012c063:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012c069:	29 d0                	sub    %edx,%eax
f012c06b:	01 c3                	add    %eax,%ebx
f012c06d:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012c074:	10 00 00 
f012c077:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012c07c:	0f b6 c0             	movzbl %al,%eax
f012c07f:	c1 e0 04             	shl    $0x4,%eax
f012c082:	89 c2                	mov    %eax,%edx
f012c084:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012c08a:	01 d0                	add    %edx,%eax
f012c08c:	48                   	dec    %eax
f012c08d:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012c093:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012c099:	ba 00 00 00 00       	mov    $0x0,%edx
f012c09e:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012c0a4:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012c0aa:	29 d0                	sub    %edx,%eax
f012c0ac:	01 d8                	add    %ebx,%eax
f012c0ae:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012c0b3:	39 c1                	cmp    %eax,%ecx
f012c0b5:	74 17                	je     f012c0ce <test_krealloc+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012c0b7:	83 ec 04             	sub    $0x4,%esp
f012c0ba:	68 bc bf 13 f0       	push   $0xf013bfbc
f012c0bf:	68 29 0f 00 00       	push   $0xf29
f012c0c4:	68 da ac 13 f0       	push   $0xf013acda
f012c0c9:	e8 2d 41 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012c0ce:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c0d1:	e8 85 08 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012c0d6:	29 c3                	sub    %eax,%ebx
f012c0d8:	89 d8                	mov    %ebx,%eax
f012c0da:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c0df:	74 17                	je     f012c0f8 <test_krealloc+0x95d>
			panic("Wrong allocation: ");
f012c0e1:	83 ec 04             	sub    $0x4,%esp
f012c0e4:	68 24 b1 13 f0       	push   $0xf013b124
f012c0e9:	68 2b 0f 00 00       	push   $0xf2b
f012c0ee:	68 da ac 13 f0       	push   $0xf013acda
f012c0f3:	e8 03 41 fd ff       	call   f01001fb <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012c0f8:	c7 85 20 fe ff ff 7f 	movl   $0x5ff7f,-0x1e0(%ebp)
f012c0ff:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012c102:	e8 54 08 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012c107:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012c10a:	83 ec 08             	sub    $0x8,%esp
f012c10d:	68 00 fc 2f 00       	push   $0x2ffc00
f012c112:	6a 00                	push   $0x0
f012c114:	e8 9c b9 fd ff       	call   f0107ab5 <krealloc>
f012c119:	83 c4 10             	add    $0x10,%esp
f012c11c:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012c122:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c128:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012c12d:	77 17                	ja     f012c146 <test_krealloc+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c12f:	83 ec 04             	sub    $0x4,%esp
f012c132:	68 80 bf 13 f0       	push   $0xf013bf80
f012c137:	68 32 0f 00 00       	push   $0xf32
f012c13c:	68 da ac 13 f0       	push   $0xf013acda
f012c141:	e8 b5 40 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012c146:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c14c:	89 c1                	mov    %eax,%ecx
f012c14e:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012c155:	10 00 00 
f012c158:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012c15e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c163:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012c169:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012c16f:	ba 00 00 00 00       	mov    $0x0,%edx
f012c174:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012c17a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012c180:	29 d0                	sub    %edx,%eax
f012c182:	89 c3                	mov    %eax,%ebx
f012c184:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012c18b:	10 00 00 
f012c18e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012c193:	0f b6 d0             	movzbl %al,%edx
f012c196:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012c19c:	01 d0                	add    %edx,%eax
f012c19e:	48                   	dec    %eax
f012c19f:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012c1a5:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012c1ab:	ba 00 00 00 00       	mov    $0x0,%edx
f012c1b0:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012c1b6:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012c1bc:	29 d0                	sub    %edx,%eax
f012c1be:	01 c3                	add    %eax,%ebx
f012c1c0:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012c1c7:	10 00 00 
f012c1ca:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012c1cf:	0f b6 c0             	movzbl %al,%eax
f012c1d2:	c1 e0 04             	shl    $0x4,%eax
f012c1d5:	89 c2                	mov    %eax,%edx
f012c1d7:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012c1dd:	01 d0                	add    %edx,%eax
f012c1df:	48                   	dec    %eax
f012c1e0:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012c1e6:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012c1ec:	ba 00 00 00 00       	mov    $0x0,%edx
f012c1f1:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012c1f7:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012c1fd:	29 d0                	sub    %edx,%eax
f012c1ff:	01 d8                	add    %ebx,%eax
f012c201:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012c206:	39 c1                	cmp    %eax,%ecx
f012c208:	74 17                	je     f012c221 <test_krealloc+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012c20a:	83 ec 04             	sub    $0x4,%esp
f012c20d:	68 bc bf 13 f0       	push   $0xf013bfbc
f012c212:	68 34 0f 00 00       	push   $0xf34
f012c217:	68 da ac 13 f0       	push   $0xf013acda
f012c21c:	e8 da 3f fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012c221:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c224:	e8 32 07 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012c229:	29 c3                	sub    %eax,%ebx
f012c22b:	89 d8                	mov    %ebx,%eax
f012c22d:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c232:	74 17                	je     f012c24b <test_krealloc+0xab0>
			panic("krealloc: Wrong allocation: ");
f012c234:	83 ec 04             	sub    $0x4,%esp
f012c237:	68 ee bf 13 f0       	push   $0xf013bfee
f012c23c:	68 36 0f 00 00       	push   $0xf36
f012c241:	68 da ac 13 f0       	push   $0xf013acda
f012c246:	e8 b0 3f fd ff       	call   f01001fb <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012c24b:	c7 85 24 fe ff ff 7f 	movl   $0x5ff7f,-0x1dc(%ebp)
f012c252:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012c255:	e8 01 07 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012c25a:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012c25d:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012c264:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012c267:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c26d:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012c273:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012c279:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012c27c:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012c27e:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012c284:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012c28a:	01 c2                	add    %eax,%edx
f012c28c:	8a 45 ce             	mov    -0x32(%ebp),%al
f012c28f:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012c291:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c297:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012c29d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012c2a4:	eb 11                	jmp    f012c2b7 <test_krealloc+0xb1c>
			ptr[i] = 2;
f012c2a6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012c2a9:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c2af:	01 d0                	add    %edx,%eax
f012c2b1:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012c2b4:	ff 45 f4             	incl   -0xc(%ebp)
f012c2b7:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012c2bd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012c2c0:	7d e4                	jge    f012c2a6 <test_krealloc+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012c2c2:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c2c8:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012c2ce:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c2d4:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012c2da:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012c2e0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c2e7:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c2ed:	01 d0                	add    %edx,%eax
f012c2ef:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012c2f5:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c2fb:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012c301:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012c308:	eb 1b                	jmp    f012c325 <test_krealloc+0xb8a>
			intArr[i] = 4;
f012c30a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012c30d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c314:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c31a:	01 d0                	add    %edx,%eax
f012c31c:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012c322:	ff 45 f0             	incl   -0x10(%ebp)
f012c325:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012c32b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012c32e:	7d da                	jge    f012c30a <test_krealloc+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012c330:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c336:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012c33c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012c343:	eb 17                	jmp    f012c35c <test_krealloc+0xbc1>
			shortArr[i] = 5;
f012c345:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012c348:	01 c0                	add    %eax,%eax
f012c34a:	89 c2                	mov    %eax,%edx
f012c34c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c352:	01 d0                	add    %edx,%eax
f012c354:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012c359:	ff 45 ec             	incl   -0x14(%ebp)
f012c35c:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012c362:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012c365:	7d de                	jge    f012c345 <test_krealloc+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012c367:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c36d:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012c373:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c379:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012c37e:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012c384:	01 c0                	add    %eax,%eax
f012c386:	89 c2                	mov    %eax,%edx
f012c388:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c38e:	01 d0                	add    %edx,%eax
f012c390:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012c395:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c39b:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012c3a1:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012c3a8:	eb 49                	jmp    f012c3f3 <test_krealloc+0xc58>
			structArr[i].a = 7;
f012c3aa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c3ad:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c3b4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c3ba:	01 d0                	add    %edx,%eax
f012c3bc:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012c3bf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c3c2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c3c9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c3cf:	01 d0                	add    %edx,%eax
f012c3d1:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012c3d7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c3da:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c3e1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c3e7:	01 d0                	add    %edx,%eax
f012c3e9:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012c3f0:	ff 45 e8             	incl   -0x18(%ebp)
f012c3f3:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c3f9:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012c3fc:	7d ac                	jge    f012c3aa <test_krealloc+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012c3fe:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c404:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012c40a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c410:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012c413:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c419:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012c41f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c425:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012c42c:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c432:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c439:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c43f:	01 d0                	add    %edx,%eax
f012c441:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012c444:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c44a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c451:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c457:	01 d0                	add    %edx,%eax
f012c459:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012c45f:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c465:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c46c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c472:	01 d0                	add    %edx,%eax
f012c474:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012c47b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012c481:	8a 00                	mov    (%eax),%al
f012c483:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012c486:	75 17                	jne    f012c49f <test_krealloc+0xd04>
f012c488:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012c48e:	89 c2                	mov    %eax,%edx
f012c490:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012c496:	01 d0                	add    %edx,%eax
f012c498:	8a 00                	mov    (%eax),%al
f012c49a:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012c49d:	74 17                	je     f012c4b6 <test_krealloc+0xd1b>
			panic(
f012c49f:	83 ec 04             	sub    $0x4,%esp
f012c4a2:	68 0c c0 13 f0       	push   $0xf013c00c
f012c4a7:	68 79 0f 00 00       	push   $0xf79
f012c4ac:	68 da ac 13 f0       	push   $0xf013acda
f012c4b1:	e8 45 3d fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012c4b6:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c4bc:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012c4c2:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c4c8:	8a 00                	mov    (%eax),%al
f012c4ca:	3c 02                	cmp    $0x2,%al
f012c4cc:	75 16                	jne    f012c4e4 <test_krealloc+0xd49>
f012c4ce:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012c4d4:	89 c2                	mov    %eax,%edx
f012c4d6:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c4dc:	01 d0                	add    %edx,%eax
f012c4de:	8a 00                	mov    (%eax),%al
f012c4e0:	3c 02                	cmp    $0x2,%al
f012c4e2:	74 20                	je     f012c504 <test_krealloc+0xd69>
			panic(
f012c4e4:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c4ea:	8a 00                	mov    (%eax),%al
f012c4ec:	0f be c0             	movsbl %al,%eax
f012c4ef:	50                   	push   %eax
f012c4f0:	68 4c c0 13 f0       	push   $0xf013c04c
f012c4f5:	68 7f 0f 00 00       	push   $0xf7f
f012c4fa:	68 da ac 13 f0       	push   $0xf013acda
f012c4ff:	e8 f7 3c fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012c504:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c50a:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012c510:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c516:	8b 00                	mov    (%eax),%eax
f012c518:	83 f8 03             	cmp    $0x3,%eax
f012c51b:	75 1c                	jne    f012c539 <test_krealloc+0xd9e>
f012c51d:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012c523:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c52a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c530:	01 d0                	add    %edx,%eax
f012c532:	8b 00                	mov    (%eax),%eax
f012c534:	83 f8 03             	cmp    $0x3,%eax
f012c537:	74 17                	je     f012c550 <test_krealloc+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012c539:	83 ec 04             	sub    $0x4,%esp
f012c53c:	68 98 c0 13 f0       	push   $0xf013c098
f012c541:	68 83 0f 00 00       	push   $0xf83
f012c546:	68 da ac 13 f0       	push   $0xf013acda
f012c54b:	e8 ab 3c fd ff       	call   f01001fb <_panic>

		intArr = (int*) ptr_allocations[3];
f012c550:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c556:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012c55c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c562:	8b 00                	mov    (%eax),%eax
f012c564:	83 f8 04             	cmp    $0x4,%eax
f012c567:	75 1c                	jne    f012c585 <test_krealloc+0xdea>
f012c569:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012c56f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c576:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c57c:	01 d0                	add    %edx,%eax
f012c57e:	8b 00                	mov    (%eax),%eax
f012c580:	83 f8 04             	cmp    $0x4,%eax
f012c583:	74 17                	je     f012c59c <test_krealloc+0xe01>
			panic(
f012c585:	83 ec 04             	sub    $0x4,%esp
f012c588:	68 0c c0 13 f0       	push   $0xf013c00c
f012c58d:	68 88 0f 00 00       	push   $0xf88
f012c592:	68 da ac 13 f0       	push   $0xf013acda
f012c597:	e8 5f 3c fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012c59c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c5a2:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012c5a8:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c5ae:	66 8b 00             	mov    (%eax),%ax
f012c5b1:	66 83 f8 05          	cmp    $0x5,%ax
f012c5b5:	75 1b                	jne    f012c5d2 <test_krealloc+0xe37>
f012c5b7:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012c5bd:	01 c0                	add    %eax,%eax
f012c5bf:	89 c2                	mov    %eax,%edx
f012c5c1:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c5c7:	01 d0                	add    %edx,%eax
f012c5c9:	66 8b 00             	mov    (%eax),%ax
f012c5cc:	66 83 f8 05          	cmp    $0x5,%ax
f012c5d0:	74 17                	je     f012c5e9 <test_krealloc+0xe4e>
			panic(
f012c5d2:	83 ec 04             	sub    $0x4,%esp
f012c5d5:	68 0c c0 13 f0       	push   $0xf013c00c
f012c5da:	68 8d 0f 00 00       	push   $0xf8d
f012c5df:	68 da ac 13 f0       	push   $0xf013acda
f012c5e4:	e8 12 3c fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012c5e9:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c5ef:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012c5f5:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c5fb:	66 8b 00             	mov    (%eax),%ax
f012c5fe:	66 83 f8 06          	cmp    $0x6,%ax
f012c602:	75 1b                	jne    f012c61f <test_krealloc+0xe84>
f012c604:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012c60a:	01 c0                	add    %eax,%eax
f012c60c:	89 c2                	mov    %eax,%edx
f012c60e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c614:	01 d0                	add    %edx,%eax
f012c616:	66 8b 00             	mov    (%eax),%ax
f012c619:	66 83 f8 06          	cmp    $0x6,%ax
f012c61d:	74 17                	je     f012c636 <test_krealloc+0xe9b>
			panic(
f012c61f:	83 ec 04             	sub    $0x4,%esp
f012c622:	68 0c c0 13 f0       	push   $0xf013c00c
f012c627:	68 92 0f 00 00       	push   $0xf92
f012c62c:	68 da ac 13 f0       	push   $0xf013acda
f012c631:	e8 c5 3b fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012c636:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c63c:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012c642:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c648:	8a 00                	mov    (%eax),%al
f012c64a:	3c 07                	cmp    $0x7,%al
f012c64c:	75 1b                	jne    f012c669 <test_krealloc+0xece>
f012c64e:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c654:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c65b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c661:	01 d0                	add    %edx,%eax
f012c663:	8a 00                	mov    (%eax),%al
f012c665:	3c 07                	cmp    $0x7,%al
f012c667:	74 17                	je     f012c680 <test_krealloc+0xee5>
			panic(
f012c669:	83 ec 04             	sub    $0x4,%esp
f012c66c:	68 0c c0 13 f0       	push   $0xf013c00c
f012c671:	68 97 0f 00 00       	push   $0xf97
f012c676:	68 da ac 13 f0       	push   $0xf013acda
f012c67b:	e8 7b 3b fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012c680:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c686:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c68a:	66 83 f8 07          	cmp    $0x7,%ax
f012c68e:	75 1f                	jne    f012c6af <test_krealloc+0xf14>
f012c690:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c696:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c69d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c6a3:	01 d0                	add    %edx,%eax
f012c6a5:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c6a9:	66 83 f8 07          	cmp    $0x7,%ax
f012c6ad:	74 17                	je     f012c6c6 <test_krealloc+0xf2b>
			panic(
f012c6af:	83 ec 04             	sub    $0x4,%esp
f012c6b2:	68 0c c0 13 f0       	push   $0xf013c00c
f012c6b7:	68 9a 0f 00 00       	push   $0xf9a
f012c6bc:	68 da ac 13 f0       	push   $0xf013acda
f012c6c1:	e8 35 3b fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012c6c6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c6cc:	8b 40 04             	mov    0x4(%eax),%eax
f012c6cf:	83 f8 07             	cmp    $0x7,%eax
f012c6d2:	75 1d                	jne    f012c6f1 <test_krealloc+0xf56>
f012c6d4:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c6da:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c6e1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c6e7:	01 d0                	add    %edx,%eax
f012c6e9:	8b 40 04             	mov    0x4(%eax),%eax
f012c6ec:	83 f8 07             	cmp    $0x7,%eax
f012c6ef:	74 17                	je     f012c708 <test_krealloc+0xf6d>
			panic(
f012c6f1:	83 ec 04             	sub    $0x4,%esp
f012c6f4:	68 0c c0 13 f0       	push   $0xf013c00c
f012c6f9:	68 9d 0f 00 00       	push   $0xf9d
f012c6fe:	68 da ac 13 f0       	push   $0xf013acda
f012c703:	e8 f3 3a fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012c708:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c70e:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012c714:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c71a:	8a 00                	mov    (%eax),%al
f012c71c:	3c 08                	cmp    $0x8,%al
f012c71e:	75 1b                	jne    f012c73b <test_krealloc+0xfa0>
f012c720:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c726:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c72d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c733:	01 d0                	add    %edx,%eax
f012c735:	8a 00                	mov    (%eax),%al
f012c737:	3c 08                	cmp    $0x8,%al
f012c739:	74 17                	je     f012c752 <test_krealloc+0xfb7>
			panic(
f012c73b:	83 ec 04             	sub    $0x4,%esp
f012c73e:	68 0c c0 13 f0       	push   $0xf013c00c
f012c743:	68 a2 0f 00 00       	push   $0xfa2
f012c748:	68 da ac 13 f0       	push   $0xf013acda
f012c74d:	e8 a9 3a fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012c752:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c758:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c75c:	66 83 f8 08          	cmp    $0x8,%ax
f012c760:	75 1f                	jne    f012c781 <test_krealloc+0xfe6>
f012c762:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c768:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c76f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c775:	01 d0                	add    %edx,%eax
f012c777:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c77b:	66 83 f8 08          	cmp    $0x8,%ax
f012c77f:	74 17                	je     f012c798 <test_krealloc+0xffd>
			panic(
f012c781:	83 ec 04             	sub    $0x4,%esp
f012c784:	68 0c c0 13 f0       	push   $0xf013c00c
f012c789:	68 a5 0f 00 00       	push   $0xfa5
f012c78e:	68 da ac 13 f0       	push   $0xf013acda
f012c793:	e8 63 3a fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012c798:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c79e:	8b 40 04             	mov    0x4(%eax),%eax
f012c7a1:	83 f8 08             	cmp    $0x8,%eax
f012c7a4:	75 1d                	jne    f012c7c3 <test_krealloc+0x1028>
f012c7a6:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c7ac:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c7b3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c7b9:	01 d0                	add    %edx,%eax
f012c7bb:	8b 40 04             	mov    0x4(%eax),%eax
f012c7be:	83 f8 08             	cmp    $0x8,%eax
f012c7c1:	74 17                	je     f012c7da <test_krealloc+0x103f>
			panic(
f012c7c3:	83 ec 04             	sub    $0x4,%esp
f012c7c6:	68 0c c0 13 f0       	push   $0xf013c00c
f012c7cb:	68 a8 0f 00 00       	push   $0xfa8
f012c7d0:	68 da ac 13 f0       	push   $0xf013acda
f012c7d5:	e8 21 3a fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012c7da:	e8 7c 01 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012c7df:	89 c2                	mov    %eax,%edx
f012c7e1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c7e4:	39 c2                	cmp    %eax,%edx
f012c7e6:	74 17                	je     f012c7ff <test_krealloc+0x1064>
			panic(
f012c7e8:	83 ec 04             	sub    $0x4,%esp
f012c7eb:	68 cc c0 13 f0       	push   $0xf013c0cc
f012c7f0:	68 ac 0f 00 00       	push   $0xfac
f012c7f5:	68 da ac 13 f0       	push   $0xf013acda
f012c7fa:	e8 fc 39 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012c7ff:	83 ec 0c             	sub    $0xc,%esp
f012c802:	68 18 c1 13 f0       	push   $0xf013c118
f012c807:	e8 76 44 fd ff       	call   f0100c82 <cprintf>
f012c80c:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012c80f:	e8 47 01 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012c814:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c817:	e8 20 75 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012c81c:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012c822:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c828:	83 ec 08             	sub    $0x8,%esp
f012c82b:	6a 00                	push   $0x0
f012c82d:	50                   	push   %eax
f012c82e:	e8 82 b2 fd ff       	call   f0107ab5 <krealloc>
f012c833:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c836:	e8 01 75 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012c83b:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012c841:	74 17                	je     f012c85a <test_krealloc+0x10bf>
			panic(
f012c843:	83 ec 04             	sub    $0x4,%esp
f012c846:	68 3c c1 13 f0       	push   $0xf013c13c
f012c84b:	68 b9 0f 00 00       	push   $0xfb9
f012c850:	68 da ac 13 f0       	push   $0xf013acda
f012c855:	e8 a1 39 fd ff       	call   f01001fb <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012c85a:	e8 fc 00 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012c85f:	89 c2                	mov    %eax,%edx
f012c861:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c864:	29 c2                	sub    %eax,%edx
f012c866:	89 d0                	mov    %edx,%eax
f012c868:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c86d:	74 17                	je     f012c886 <test_krealloc+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012c86f:	83 ec 04             	sub    $0x4,%esp
f012c872:	68 b0 c1 13 f0       	push   $0xf013c1b0
f012c877:	68 bb 0f 00 00       	push   $0xfbb
f012c87c:	68 da ac 13 f0       	push   $0xf013acda
f012c881:	e8 75 39 fd ff       	call   f01001fb <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012c886:	e8 d0 00 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012c88b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c88e:	e8 a9 74 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012c893:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012c899:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c89f:	83 ec 08             	sub    $0x8,%esp
f012c8a2:	6a 00                	push   $0x0
f012c8a4:	50                   	push   %eax
f012c8a5:	e8 0b b2 fd ff       	call   f0107ab5 <krealloc>
f012c8aa:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c8ad:	e8 8a 74 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012c8b2:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012c8b8:	74 17                	je     f012c8d1 <test_krealloc+0x1136>
			panic(
f012c8ba:	83 ec 04             	sub    $0x4,%esp
f012c8bd:	68 3c c1 13 f0       	push   $0xf013c13c
f012c8c2:	68 c4 0f 00 00       	push   $0xfc4
f012c8c7:	68 da ac 13 f0       	push   $0xf013acda
f012c8cc:	e8 2a 39 fd ff       	call   f01001fb <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012c8d1:	e8 85 00 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012c8d6:	89 c2                	mov    %eax,%edx
f012c8d8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c8db:	29 c2                	sub    %eax,%edx
f012c8dd:	89 d0                	mov    %edx,%eax
f012c8df:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c8e4:	74 17                	je     f012c8fd <test_krealloc+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012c8e6:	83 ec 04             	sub    $0x4,%esp
f012c8e9:	68 b0 c1 13 f0       	push   $0xf013c1b0
f012c8ee:	68 c6 0f 00 00       	push   $0xfc6
f012c8f3:	68 da ac 13 f0       	push   $0xf013acda
f012c8f8:	e8 fe 38 fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012c8fd:	e8 59 00 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012c902:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c905:	e8 32 74 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012c90a:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012c910:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c916:	83 ec 08             	sub    $0x8,%esp
f012c919:	6a 00                	push   $0x0
f012c91b:	50                   	push   %eax
f012c91c:	e8 94 b1 fd ff       	call   f0107ab5 <krealloc>
f012c921:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c924:	e8 13 74 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012c929:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012c92f:	74 17                	je     f012c948 <test_krealloc+0x11ad>
			panic(
f012c931:	83 ec 04             	sub    $0x4,%esp
f012c934:	68 f4 ac 13 f0       	push   $0xf013acf4
f012c939:	68 ce 0f 00 00       	push   $0xfce
f012c93e:	68 da ac 13 f0       	push   $0xf013acda
f012c943:	e8 b3 38 fd ff       	call   f01001fb <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012c948:	e8 0e 00 fe ff       	call   f010c95b <sys_calculate_free_frames>
f012c94d:	89 c2                	mov    %eax,%edx
f012c94f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c952:	29 c2                	sub    %eax,%edx
f012c954:	89 d0                	mov    %edx,%eax
f012c956:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c95b:	74 17                	je     f012c974 <test_krealloc+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012c95d:	83 ec 04             	sub    $0x4,%esp
f012c960:	68 b0 c1 13 f0       	push   $0xf013c1b0
f012c965:	68 d0 0f 00 00       	push   $0xfd0
f012c96a:	68 da ac 13 f0       	push   $0xf013acda
f012c96f:	e8 87 38 fd ff       	call   f01001fb <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012c974:	e8 e2 ff fd ff       	call   f010c95b <sys_calculate_free_frames>
f012c979:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c97c:	e8 bb 73 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012c981:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012c987:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c98d:	83 ec 08             	sub    $0x8,%esp
f012c990:	6a 00                	push   $0x0
f012c992:	50                   	push   %eax
f012c993:	e8 1d b1 fd ff       	call   f0107ab5 <krealloc>
f012c998:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c99b:	e8 9c 73 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012c9a0:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012c9a6:	74 17                	je     f012c9bf <test_krealloc+0x1224>
			panic(
f012c9a8:	83 ec 04             	sub    $0x4,%esp
f012c9ab:	68 3c c1 13 f0       	push   $0xf013c13c
f012c9b0:	68 d8 0f 00 00       	push   $0xfd8
f012c9b5:	68 da ac 13 f0       	push   $0xf013acda
f012c9ba:	e8 3c 38 fd ff       	call   f01001fb <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012c9bf:	e8 97 ff fd ff       	call   f010c95b <sys_calculate_free_frames>
f012c9c4:	89 c2                	mov    %eax,%edx
f012c9c6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c9c9:	29 c2                	sub    %eax,%edx
f012c9cb:	89 d0                	mov    %edx,%eax
f012c9cd:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c9d2:	74 17                	je     f012c9eb <test_krealloc+0x1250>
			panic(
f012c9d4:	83 ec 04             	sub    $0x4,%esp
f012c9d7:	68 e4 c1 13 f0       	push   $0xf013c1e4
f012c9dc:	68 db 0f 00 00       	push   $0xfdb
f012c9e1:	68 da ac 13 f0       	push   $0xf013acda
f012c9e6:	e8 10 38 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012c9eb:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012c9f2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012c9f9:	eb 48                	jmp    f012ca43 <test_krealloc+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012c9fb:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012c9fe:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f012ca03:	83 ec 04             	sub    $0x4,%esp
f012ca06:	8d 8d b4 fd ff ff    	lea    -0x24c(%ebp),%ecx
f012ca0c:	51                   	push   %ecx
f012ca0d:	52                   	push   %edx
f012ca0e:	50                   	push   %eax
f012ca0f:	e8 c6 9f fd ff       	call   f01069da <get_page_table>
f012ca14:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012ca17:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f012ca1d:	85 c0                	test   %eax,%eax
f012ca1f:	75 17                	jne    f012ca38 <test_krealloc+0x129d>
					panic(
f012ca21:	83 ec 04             	sub    $0x4,%esp
f012ca24:	68 dc b5 13 f0       	push   $0xf013b5dc
f012ca29:	68 e7 0f 00 00       	push   $0xfe7
f012ca2e:	68 da ac 13 f0       	push   $0xf013acda
f012ca33:	e8 c3 37 fd ff       	call   f01001fb <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012ca38:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012ca3f:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012ca43:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012ca47:	78 b2                	js     f012c9fb <test_krealloc+0x1260>
f012ca49:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012ca4d:	7f 09                	jg     f012ca58 <test_krealloc+0x12bd>
f012ca4f:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012ca56:	76 a3                	jbe    f012c9fb <test_krealloc+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012ca58:	83 ec 0c             	sub    $0xc,%esp
f012ca5b:	68 23 c2 13 f0       	push   $0xf013c223
f012ca60:	e8 1d 42 fd ff       	call   f0100c82 <cprintf>
f012ca65:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012ca68:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ca6e:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012ca74:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012ca7b:	eb 21                	jmp    f012ca9e <test_krealloc+0x1303>
			sums[0] += ptr[i];
f012ca7d:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012ca83:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012ca86:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012ca8c:	01 c8                	add    %ecx,%eax
f012ca8e:	8a 00                	mov    (%eax),%al
f012ca90:	0f be c0             	movsbl %al,%eax
f012ca93:	01 d0                	add    %edx,%eax
f012ca95:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012ca9b:	ff 45 dc             	incl   -0x24(%ebp)
f012ca9e:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012caa4:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012caa7:	7d d4                	jge    f012ca7d <test_krealloc+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012caa9:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012caaf:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012cab5:	42                   	inc    %edx
f012cab6:	01 d2                	add    %edx,%edx
f012cab8:	39 d0                	cmp    %edx,%eax
f012caba:	74 17                	je     f012cad3 <test_krealloc+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012cabc:	83 ec 04             	sub    $0x4,%esp
f012cabf:	68 2c c2 13 f0       	push   $0xf013c22c
f012cac4:	68 f9 0f 00 00       	push   $0xff9
f012cac9:	68 da ac 13 f0       	push   $0xf013acda
f012cace:	e8 28 37 fd ff       	call   f01001fb <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012cad3:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012cad9:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012cadf:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012cae6:	eb 25                	jmp    f012cb0d <test_krealloc+0x1372>
			sums[1] += intArr[i];
f012cae8:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012caee:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012caf1:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012caf8:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012cafe:	01 c8                	add    %ecx,%eax
f012cb00:	8b 00                	mov    (%eax),%eax
f012cb02:	01 d0                	add    %edx,%eax
f012cb04:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012cb0a:	ff 45 dc             	incl   -0x24(%ebp)
f012cb0d:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012cb13:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012cb16:	7d d0                	jge    f012cae8 <test_krealloc+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012cb18:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f012cb1e:	8b 95 14 fe ff ff    	mov    -0x1ec(%ebp),%edx
f012cb24:	42                   	inc    %edx
f012cb25:	c1 e2 02             	shl    $0x2,%edx
f012cb28:	39 d0                	cmp    %edx,%eax
f012cb2a:	74 17                	je     f012cb43 <test_krealloc+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012cb2c:	83 ec 04             	sub    $0x4,%esp
f012cb2f:	68 2c c2 13 f0       	push   $0xf013c22c
f012cb34:	68 03 10 00 00       	push   $0x1003
f012cb39:	68 da ac 13 f0       	push   $0xf013acda
f012cb3e:	e8 b8 36 fd ff       	call   f01001fb <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012cb43:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cb49:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012cb4f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012cb56:	eb 24                	jmp    f012cb7c <test_krealloc+0x13e1>
			sums[2] += shortArr[i];
f012cb58:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012cb5e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012cb61:	01 c0                	add    %eax,%eax
f012cb63:	89 c1                	mov    %eax,%ecx
f012cb65:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cb6b:	01 c8                	add    %ecx,%eax
f012cb6d:	66 8b 00             	mov    (%eax),%ax
f012cb70:	98                   	cwtl   
f012cb71:	01 d0                	add    %edx,%eax
f012cb73:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012cb79:	ff 45 dc             	incl   -0x24(%ebp)
f012cb7c:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012cb82:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012cb85:	7d d1                	jge    f012cb58 <test_krealloc+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012cb87:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012cb8d:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012cb93:	8d 48 01             	lea    0x1(%eax),%ecx
f012cb96:	89 c8                	mov    %ecx,%eax
f012cb98:	c1 e0 02             	shl    $0x2,%eax
f012cb9b:	01 c8                	add    %ecx,%eax
f012cb9d:	39 c2                	cmp    %eax,%edx
f012cb9f:	74 17                	je     f012cbb8 <test_krealloc+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012cba1:	83 ec 04             	sub    $0x4,%esp
f012cba4:	68 2c c2 13 f0       	push   $0xf013c22c
f012cba9:	68 0d 10 00 00       	push   $0x100d
f012cbae:	68 da ac 13 f0       	push   $0xf013acda
f012cbb3:	e8 43 36 fd ff       	call   f01001fb <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012cbb8:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cbbe:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012cbc4:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012cbcb:	eb 70                	jmp    f012cc3d <test_krealloc+0x14a2>
			sums[3] += structArr[i].a;
f012cbcd:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012cbd3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012cbd6:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012cbdd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cbe3:	01 c8                	add    %ecx,%eax
f012cbe5:	8a 00                	mov    (%eax),%al
f012cbe7:	0f be c0             	movsbl %al,%eax
f012cbea:	01 d0                	add    %edx,%eax
f012cbec:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
			sums[4] += structArr[i].b;
f012cbf2:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012cbf8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012cbfb:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012cc02:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cc08:	01 c8                	add    %ecx,%eax
f012cc0a:	66 8b 40 02          	mov    0x2(%eax),%ax
f012cc0e:	98                   	cwtl   
f012cc0f:	01 d0                	add    %edx,%eax
f012cc11:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
			sums[5] += structArr[i].c;
f012cc17:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012cc1d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012cc20:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012cc27:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cc2d:	01 c8                	add    %ecx,%eax
f012cc2f:	8b 40 04             	mov    0x4(%eax),%eax
f012cc32:	01 d0                	add    %edx,%eax
f012cc34:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012cc3a:	ff 45 dc             	incl   -0x24(%ebp)
f012cc3d:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cc43:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012cc46:	7d 85                	jge    f012cbcd <test_krealloc+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012cc48:	8b 8d c4 fd ff ff    	mov    -0x23c(%ebp),%ecx
f012cc4e:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cc54:	8d 50 01             	lea    0x1(%eax),%edx
f012cc57:	89 d0                	mov    %edx,%eax
f012cc59:	01 c0                	add    %eax,%eax
f012cc5b:	01 d0                	add    %edx,%eax
f012cc5d:	01 c0                	add    %eax,%eax
f012cc5f:	01 d0                	add    %edx,%eax
f012cc61:	39 c1                	cmp    %eax,%ecx
f012cc63:	75 3a                	jne    f012cc9f <test_krealloc+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012cc65:	8b 8d c8 fd ff ff    	mov    -0x238(%ebp),%ecx
f012cc6b:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cc71:	8d 50 01             	lea    0x1(%eax),%edx
f012cc74:	89 d0                	mov    %edx,%eax
f012cc76:	01 c0                	add    %eax,%eax
f012cc78:	01 d0                	add    %edx,%eax
f012cc7a:	01 c0                	add    %eax,%eax
f012cc7c:	01 d0                	add    %edx,%eax
f012cc7e:	39 c1                	cmp    %eax,%ecx
f012cc80:	75 1d                	jne    f012cc9f <test_krealloc+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012cc82:	8b 8d cc fd ff ff    	mov    -0x234(%ebp),%ecx
f012cc88:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cc8e:	8d 50 01             	lea    0x1(%eax),%edx
f012cc91:	89 d0                	mov    %edx,%eax
f012cc93:	01 c0                	add    %eax,%eax
f012cc95:	01 d0                	add    %edx,%eax
f012cc97:	01 c0                	add    %eax,%eax
f012cc99:	01 d0                	add    %edx,%eax
f012cc9b:	39 c1                	cmp    %eax,%ecx
f012cc9d:	74 17                	je     f012ccb6 <test_krealloc+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012cc9f:	83 ec 04             	sub    $0x4,%esp
f012cca2:	68 2c c2 13 f0       	push   $0xf013c22c
f012cca7:	68 1b 10 00 00       	push   $0x101b
f012ccac:	68 da ac 13 f0       	push   $0xf013acda
f012ccb1:	e8 45 35 fd ff       	call   f01001fb <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012ccb6:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012ccbd:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012ccc0:	e8 96 fc fd ff       	call   f010c95b <sys_calculate_free_frames>
f012ccc5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012ccc8:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ccce:	83 ec 08             	sub    $0x8,%esp
f012ccd1:	68 00 3c 00 00       	push   $0x3c00
f012ccd6:	50                   	push   %eax
f012ccd7:	e8 d9 ad fd ff       	call   f0107ab5 <krealloc>
f012ccdc:	83 c4 10             	add    $0x10,%esp
f012ccdf:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cce5:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012cceb:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ccf0:	77 17                	ja     f012cd09 <test_krealloc+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ccf2:	83 ec 04             	sub    $0x4,%esp
f012ccf5:	68 80 bf 13 f0       	push   $0xf013bf80
f012ccfa:	68 27 10 00 00       	push   $0x1027
f012ccff:	68 da ac 13 f0       	push   $0xf013acda
f012cd04:	e8 f2 34 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[1])
f012cd09:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cd0f:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012cd15:	74 17                	je     f012cd2e <test_krealloc+0x1593>
			panic(
f012cd17:	83 ec 04             	sub    $0x4,%esp
f012cd1a:	68 64 c2 13 f0       	push   $0xf013c264
f012cd1f:	68 2a 10 00 00       	push   $0x102a
f012cd24:	68 da ac 13 f0       	push   $0xf013acda
f012cd29:	e8 cd 34 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012cd2e:	e8 28 fc fd ff       	call   f010c95b <sys_calculate_free_frames>
f012cd33:	89 c2                	mov    %eax,%edx
f012cd35:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cd38:	39 c2                	cmp    %eax,%edx
f012cd3a:	74 17                	je     f012cd53 <test_krealloc+0x15b8>
			panic(
f012cd3c:	83 ec 04             	sub    $0x4,%esp
f012cd3f:	68 d0 c2 13 f0       	push   $0xf013c2d0
f012cd44:	68 2d 10 00 00       	push   $0x102d
f012cd49:	68 da ac 13 f0       	push   $0xf013acda
f012cd4e:	e8 a8 34 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012cd53:	e8 03 fc fd ff       	call   f010c95b <sys_calculate_free_frames>
f012cd58:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012cd5b:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cd61:	83 ec 08             	sub    $0x8,%esp
f012cd64:	68 00 fc 0f 00       	push   $0xffc00
f012cd69:	50                   	push   %eax
f012cd6a:	e8 46 ad fd ff       	call   f0107ab5 <krealloc>
f012cd6f:	83 c4 10             	add    $0x10,%esp
f012cd72:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cd78:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012cd7e:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cd83:	77 17                	ja     f012cd9c <test_krealloc+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cd85:	83 ec 04             	sub    $0x4,%esp
f012cd88:	68 80 bf 13 f0       	push   $0xf013bf80
f012cd8d:	68 33 10 00 00       	push   $0x1033
f012cd92:	68 da ac 13 f0       	push   $0xf013acda
f012cd97:	e8 5f 34 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[4])
f012cd9c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cda2:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012cda8:	74 17                	je     f012cdc1 <test_krealloc+0x1626>
			panic(
f012cdaa:	83 ec 04             	sub    $0x4,%esp
f012cdad:	68 64 c2 13 f0       	push   $0xf013c264
f012cdb2:	68 36 10 00 00       	push   $0x1036
f012cdb7:	68 da ac 13 f0       	push   $0xf013acda
f012cdbc:	e8 3a 34 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012cdc1:	e8 95 fb fd ff       	call   f010c95b <sys_calculate_free_frames>
f012cdc6:	89 c2                	mov    %eax,%edx
f012cdc8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cdcb:	39 c2                	cmp    %eax,%edx
f012cdcd:	74 17                	je     f012cde6 <test_krealloc+0x164b>
			panic(
f012cdcf:	83 ec 04             	sub    $0x4,%esp
f012cdd2:	68 d0 c2 13 f0       	push   $0xf013c2d0
f012cdd7:	68 39 10 00 00       	push   $0x1039
f012cddc:	68 da ac 13 f0       	push   $0xf013acda
f012cde1:	e8 15 34 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012cde6:	e8 70 fb fd ff       	call   f010c95b <sys_calculate_free_frames>
f012cdeb:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012cdee:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cdf4:	83 ec 08             	sub    $0x8,%esp
f012cdf7:	68 00 fc 0f 00       	push   $0xffc00
f012cdfc:	50                   	push   %eax
f012cdfd:	e8 b3 ac fd ff       	call   f0107ab5 <krealloc>
f012ce02:	83 c4 10             	add    $0x10,%esp
f012ce05:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ce0b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012ce11:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ce16:	77 17                	ja     f012ce2f <test_krealloc+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ce18:	83 ec 04             	sub    $0x4,%esp
f012ce1b:	68 80 bf 13 f0       	push   $0xf013bf80
f012ce20:	68 3f 10 00 00       	push   $0x103f
f012ce25:	68 da ac 13 f0       	push   $0xf013acda
f012ce2a:	e8 cc 33 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[1])
f012ce2f:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ce35:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012ce3b:	74 17                	je     f012ce54 <test_krealloc+0x16b9>
			panic(
f012ce3d:	83 ec 04             	sub    $0x4,%esp
f012ce40:	68 64 c2 13 f0       	push   $0xf013c264
f012ce45:	68 42 10 00 00       	push   $0x1042
f012ce4a:	68 da ac 13 f0       	push   $0xf013acda
f012ce4f:	e8 a7 33 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012ce54:	e8 02 fb fd ff       	call   f010c95b <sys_calculate_free_frames>
f012ce59:	89 c2                	mov    %eax,%edx
f012ce5b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ce5e:	39 c2                	cmp    %eax,%edx
f012ce60:	74 17                	je     f012ce79 <test_krealloc+0x16de>
			panic(
f012ce62:	83 ec 04             	sub    $0x4,%esp
f012ce65:	68 d0 c2 13 f0       	push   $0xf013c2d0
f012ce6a:	68 45 10 00 00       	push   $0x1045
f012ce6f:	68 da ac 13 f0       	push   $0xf013acda
f012ce74:	e8 82 33 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012ce79:	e8 dd fa fd ff       	call   f010c95b <sys_calculate_free_frames>
f012ce7e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012ce81:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012ce87:	83 ec 08             	sub    $0x8,%esp
f012ce8a:	68 00 fc 0f 00       	push   $0xffc00
f012ce8f:	50                   	push   %eax
f012ce90:	e8 20 ac fd ff       	call   f0107ab5 <krealloc>
f012ce95:	83 c4 10             	add    $0x10,%esp
f012ce98:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ce9e:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012cea4:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cea9:	77 17                	ja     f012cec2 <test_krealloc+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ceab:	83 ec 04             	sub    $0x4,%esp
f012ceae:	68 80 bf 13 f0       	push   $0xf013bf80
f012ceb3:	68 4d 10 00 00       	push   $0x104d
f012ceb8:	68 da ac 13 f0       	push   $0xf013acda
f012cebd:	e8 39 33 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[3])
f012cec2:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012cec8:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012cece:	74 17                	je     f012cee7 <test_krealloc+0x174c>
			panic(
f012ced0:	83 ec 04             	sub    $0x4,%esp
f012ced3:	68 14 c3 13 f0       	push   $0xf013c314
f012ced8:	68 50 10 00 00       	push   $0x1050
f012cedd:	68 da ac 13 f0       	push   $0xf013acda
f012cee2:	e8 14 33 fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012cee7:	e8 6f fa fd ff       	call   f010c95b <sys_calculate_free_frames>
f012ceec:	89 c2                	mov    %eax,%edx
f012ceee:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cef1:	39 c2                	cmp    %eax,%edx
f012cef3:	74 17                	je     f012cf0c <test_krealloc+0x1771>
			panic(
f012cef5:	83 ec 04             	sub    $0x4,%esp
f012cef8:	68 d0 c2 13 f0       	push   $0xf013c2d0
f012cefd:	68 53 10 00 00       	push   $0x1053
f012cf02:	68 da ac 13 f0       	push   $0xf013acda
f012cf07:	e8 ef 32 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012cf0c:	83 ec 0c             	sub    $0xc,%esp
f012cf0f:	68 f3 b4 13 f0       	push   $0xf013b4f3
f012cf14:	e8 69 3d fd ff       	call   f0100c82 <cprintf>
f012cf19:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012cf1c:	e8 3a fa fd ff       	call   f010c95b <sys_calculate_free_frames>
f012cf21:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1],
f012cf24:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cf2a:	83 ec 08             	sub    $0x8,%esp
f012cf2d:	68 00 18 10 00       	push   $0x101800
f012cf32:	50                   	push   %eax
f012cf33:	e8 7d ab fd ff       	call   f0107ab5 <krealloc>
f012cf38:	83 c4 10             	add    $0x10,%esp
f012cf3b:	89 45 bc             	mov    %eax,-0x44(%ebp)
				(1 * Mega - kilo) + (7 * kilo));
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cf3e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012cf41:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cf46:	77 17                	ja     f012cf5f <test_krealloc+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cf48:	83 ec 04             	sub    $0x4,%esp
f012cf4b:	68 80 bf 13 f0       	push   $0xf013bf80
f012cf50:	68 5c 10 00 00       	push   $0x105c
f012cf55:	68 da ac 13 f0       	push   $0xf013acda
f012cf5a:	e8 9c 32 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[1])
f012cf5f:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cf65:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012cf68:	74 17                	je     f012cf81 <test_krealloc+0x17e6>
			panic(
f012cf6a:	83 ec 04             	sub    $0x4,%esp
f012cf6d:	68 74 c3 13 f0       	push   $0xf013c374
f012cf72:	68 5f 10 00 00       	push   $0x105f
f012cf77:	68 da ac 13 f0       	push   $0xf013acda
f012cf7c:	e8 7a 32 fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012cf81:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cf84:	e8 d2 f9 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012cf89:	29 c3                	sub    %eax,%ebx
f012cf8b:	89 d8                	mov    %ebx,%eax
f012cf8d:	83 f8 02             	cmp    $0x2,%eax
f012cf90:	74 17                	je     f012cfa9 <test_krealloc+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012cf92:	83 ec 04             	sub    $0x4,%esp
f012cf95:	68 f0 c3 13 f0       	push   $0xf013c3f0
f012cf9a:	68 61 10 00 00       	push   $0x1061
f012cf9f:	68 da ac 13 f0       	push   $0xf013acda
f012cfa4:	e8 52 32 fd ff       	call   f01001fb <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012cfa9:	e8 ad f9 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012cfae:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012cfb1:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cfb7:	83 ec 08             	sub    $0x8,%esp
f012cfba:	68 00 fc 3f 00       	push   $0x3ffc00
f012cfbf:	50                   	push   %eax
f012cfc0:	e8 f0 aa fd ff       	call   f0107ab5 <krealloc>
f012cfc5:	83 c4 10             	add    $0x10,%esp
f012cfc8:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cfcb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012cfce:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cfd3:	77 17                	ja     f012cfec <test_krealloc+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cfd5:	83 ec 04             	sub    $0x4,%esp
f012cfd8:	68 80 bf 13 f0       	push   $0xf013bf80
f012cfdd:	68 67 10 00 00       	push   $0x1067
f012cfe2:	68 da ac 13 f0       	push   $0xf013acda
f012cfe7:	e8 0f 32 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[4])
f012cfec:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cff2:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012cff5:	74 17                	je     f012d00e <test_krealloc+0x1873>
			panic(
f012cff7:	83 ec 04             	sub    $0x4,%esp
f012cffa:	68 74 c3 13 f0       	push   $0xf013c374
f012cfff:	68 6a 10 00 00       	push   $0x106a
f012d004:	68 da ac 13 f0       	push   $0xf013acda
f012d009:	e8 ed 31 fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012d00e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d011:	e8 45 f9 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012d016:	29 c3                	sub    %eax,%ebx
f012d018:	89 d8                	mov    %ebx,%eax
f012d01a:	3d 00 02 00 00       	cmp    $0x200,%eax
f012d01f:	74 17                	je     f012d038 <test_krealloc+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012d021:	83 ec 04             	sub    $0x4,%esp
f012d024:	68 f0 c3 13 f0       	push   $0xf013c3f0
f012d029:	68 6d 10 00 00       	push   $0x106d
f012d02e:	68 da ac 13 f0       	push   $0xf013acda
f012d033:	e8 c3 31 fd ff       	call   f01001fb <_panic>


	}
	cprintf("\b\b\b60%");
f012d038:	83 ec 0c             	sub    $0xc,%esp
f012d03b:	68 38 b5 13 f0       	push   $0xf013b538
f012d040:	e8 3d 3c fd ff       	call   f0100c82 <cprintf>
f012d045:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012d048:	e8 0e f9 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012d04d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012d050:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d056:	83 ec 08             	sub    $0x8,%esp
f012d059:	68 00 fc 9f 00       	push   $0x9ffc00
f012d05e:	50                   	push   %eax
f012d05f:	e8 51 aa fd ff       	call   f0107ab5 <krealloc>
f012d064:	83 c4 10             	add    $0x10,%esp
f012d067:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d06a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d06d:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d072:	77 17                	ja     f012d08b <test_krealloc+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d074:	83 ec 04             	sub    $0x4,%esp
f012d077:	68 80 bf 13 f0       	push   $0xf013bf80
f012d07c:	68 78 10 00 00       	push   $0x1078
f012d081:	68 da ac 13 f0       	push   $0xf013acda
f012d086:	e8 70 31 fd ff       	call   f01001fb <_panic>
		if ((uint32) newAddress != ACTUAL_START + (14 * Mega))
f012d08b:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012d092:	10 00 00 
f012d095:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012d09b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d0a0:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012d0a6:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012d0ac:	ba 00 00 00 00       	mov    $0x0,%edx
f012d0b1:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012d0b7:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012d0bd:	29 d0                	sub    %edx,%eax
f012d0bf:	89 c1                	mov    %eax,%ecx
f012d0c1:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012d0c8:	10 00 00 
f012d0cb:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012d0d0:	0f b6 d0             	movzbl %al,%edx
f012d0d3:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012d0d9:	01 d0                	add    %edx,%eax
f012d0db:	48                   	dec    %eax
f012d0dc:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012d0e2:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012d0e8:	ba 00 00 00 00       	mov    $0x0,%edx
f012d0ed:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012d0f3:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012d0f9:	29 d0                	sub    %edx,%eax
f012d0fb:	01 c1                	add    %eax,%ecx
f012d0fd:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012d104:	10 00 00 
f012d107:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012d10c:	0f b6 c0             	movzbl %al,%eax
f012d10f:	c1 e0 04             	shl    $0x4,%eax
f012d112:	89 c2                	mov    %eax,%edx
f012d114:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012d11a:	01 d0                	add    %edx,%eax
f012d11c:	48                   	dec    %eax
f012d11d:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012d123:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012d129:	ba 00 00 00 00       	mov    $0x0,%edx
f012d12e:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012d134:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012d13a:	29 d0                	sub    %edx,%eax
f012d13c:	01 c8                	add    %ecx,%eax
f012d13e:	8d 90 00 40 e0 f6    	lea    -0x91fc000(%eax),%edx
f012d144:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d147:	39 c2                	cmp    %eax,%edx
f012d149:	74 18                	je     f012d163 <test_krealloc+0x19c8>
			panic(
f012d14b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d14e:	50                   	push   %eax
f012d14f:	68 24 c4 13 f0       	push   $0xf013c424
f012d154:	68 7c 10 00 00       	push   $0x107c
f012d159:	68 da ac 13 f0       	push   $0xf013acda
f012d15e:	e8 98 30 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012d163:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d169:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d16c:	75 17                	jne    f012d185 <test_krealloc+0x19ea>
			panic(
f012d16e:	83 ec 04             	sub    $0x4,%esp
f012d171:	68 68 c4 13 f0       	push   $0xf013c468
f012d176:	68 7f 10 00 00       	push   $0x107f
f012d17b:	68 da ac 13 f0       	push   $0xf013acda
f012d180:	e8 76 30 fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012d185:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d188:	e8 ce f7 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012d18d:	29 c3                	sub    %eax,%ebx
f012d18f:	89 d8                	mov    %ebx,%eax
f012d191:	3d 00 06 00 00       	cmp    $0x600,%eax
f012d196:	74 17                	je     f012d1af <test_krealloc+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012d198:	83 ec 04             	sub    $0x4,%esp
f012d19b:	68 f0 c3 13 f0       	push   $0xf013c3f0
f012d1a0:	68 82 10 00 00       	push   $0x1082
f012d1a5:	68 da ac 13 f0       	push   $0xf013acda
f012d1aa:	e8 4c 30 fd ff       	call   f01001fb <_panic>

		ptr_allocations[4] = newAddress;
f012d1af:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d1b2:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 6 MB
		freeFrames = sys_calculate_free_frames();
f012d1b8:	e8 9e f7 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012d1bd:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (6 * Mega - kilo));
f012d1c0:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d1c6:	83 ec 08             	sub    $0x8,%esp
f012d1c9:	68 00 fc 5f 00       	push   $0x5ffc00
f012d1ce:	50                   	push   %eax
f012d1cf:	e8 e1 a8 fd ff       	call   f0107ab5 <krealloc>
f012d1d4:	83 c4 10             	add    $0x10,%esp
f012d1d7:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d1da:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d1dd:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d1e2:	77 17                	ja     f012d1fb <test_krealloc+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d1e4:	83 ec 04             	sub    $0x4,%esp
f012d1e7:	68 80 bf 13 f0       	push   $0xf013bf80
f012d1ec:	68 8b 10 00 00       	push   $0x108b
f012d1f1:	68 da ac 13 f0       	push   $0xf013acda
f012d1f6:	e8 00 30 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[6])
f012d1fb:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d201:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d204:	74 17                	je     f012d21d <test_krealloc+0x1a82>
			panic(
f012d206:	83 ec 04             	sub    $0x4,%esp
f012d209:	68 74 c3 13 f0       	push   $0xf013c374
f012d20e:	68 8e 10 00 00       	push   $0x108e
f012d213:	68 da ac 13 f0       	push   $0xf013acda
f012d218:	e8 de 2f fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 768)
f012d21d:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d220:	e8 36 f7 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012d225:	29 c3                	sub    %eax,%ebx
f012d227:	89 d8                	mov    %ebx,%eax
f012d229:	3d 00 03 00 00       	cmp    $0x300,%eax
f012d22e:	74 17                	je     f012d247 <test_krealloc+0x1aac>
			panic("krealloc: pages in memory are not loaded correctly");
f012d230:	83 ec 04             	sub    $0x4,%esp
f012d233:	68 f0 c3 13 f0       	push   $0xf013c3f0
f012d238:	68 91 10 00 00       	push   $0x1091
f012d23d:	68 da ac 13 f0       	push   $0xf013acda
f012d242:	e8 b4 2f fd ff       	call   f01001fb <_panic>

		//Reallocate 1st 3 MB (already reallocated to 6 MB) to 20 MB. It should return new VA

		freeFrames = sys_calculate_free_frames();
f012d247:	e8 0f f7 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012d24c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012d24f:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d255:	83 ec 08             	sub    $0x8,%esp
f012d258:	68 00 fc 3f 01       	push   $0x13ffc00
f012d25d:	50                   	push   %eax
f012d25e:	e8 52 a8 fd ff       	call   f0107ab5 <krealloc>
f012d263:	83 c4 10             	add    $0x10,%esp
f012d266:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d269:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d26c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d271:	77 17                	ja     f012d28a <test_krealloc+0x1aef>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d273:	83 ec 04             	sub    $0x4,%esp
f012d276:	68 80 bf 13 f0       	push   $0xf013bf80
f012d27b:	68 98 10 00 00       	push   $0x1098
f012d280:	68 da ac 13 f0       	push   $0xf013acda
f012d285:	e8 71 2f fd ff       	call   f01001fb <_panic>
		if (newAddress == ptr_allocations[6])
f012d28a:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d290:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d293:	75 17                	jne    f012d2ac <test_krealloc+0x1b11>
			panic(
f012d295:	83 ec 04             	sub    $0x4,%esp
f012d298:	68 68 c4 13 f0       	push   $0xf013c468
f012d29d:	68 9b 10 00 00       	push   $0x109b
f012d2a2:	68 da ac 13 f0       	push   $0xf013acda
f012d2a7:	e8 4f 2f fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		if ((uint32) newAddress != ACTUAL_START + (24 * Mega))
f012d2ac:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012d2b3:	10 00 00 
f012d2b6:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012d2bc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d2c1:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012d2c7:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012d2cd:	ba 00 00 00 00       	mov    $0x0,%edx
f012d2d2:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012d2d8:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012d2de:	29 d0                	sub    %edx,%eax
f012d2e0:	89 c1                	mov    %eax,%ecx
f012d2e2:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012d2e9:	10 00 00 
f012d2ec:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012d2f1:	0f b6 d0             	movzbl %al,%edx
f012d2f4:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012d2fa:	01 d0                	add    %edx,%eax
f012d2fc:	48                   	dec    %eax
f012d2fd:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012d303:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d309:	ba 00 00 00 00       	mov    $0x0,%edx
f012d30e:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012d314:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d31a:	29 d0                	sub    %edx,%eax
f012d31c:	01 c1                	add    %eax,%ecx
f012d31e:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012d325:	10 00 00 
f012d328:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012d32d:	0f b6 c0             	movzbl %al,%eax
f012d330:	c1 e0 04             	shl    $0x4,%eax
f012d333:	89 c2                	mov    %eax,%edx
f012d335:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012d33b:	01 d0                	add    %edx,%eax
f012d33d:	48                   	dec    %eax
f012d33e:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012d344:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d34a:	ba 00 00 00 00       	mov    $0x0,%edx
f012d34f:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012d355:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d35b:	29 d0                	sub    %edx,%eax
f012d35d:	01 c8                	add    %ecx,%eax
f012d35f:	8d 90 00 40 80 f7    	lea    -0x87fc000(%eax),%edx
f012d365:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d368:	39 c2                	cmp    %eax,%edx
f012d36a:	74 17                	je     f012d383 <test_krealloc+0x1be8>
			panic("krealloc: Wrong start address for reallocated space");
f012d36c:	83 ec 04             	sub    $0x4,%esp
f012d36f:	68 ec c4 13 f0       	push   $0xf013c4ec
f012d374:	68 9d 10 00 00       	push   $0x109d
f012d379:	68 da ac 13 f0       	push   $0xf013acda
f012d37e:	e8 78 2e fd ff       	call   f01001fb <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 3584)
f012d383:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d386:	e8 d0 f5 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012d38b:	29 c3                	sub    %eax,%ebx
f012d38d:	89 d8                	mov    %ebx,%eax
f012d38f:	3d 00 0e 00 00       	cmp    $0xe00,%eax
f012d394:	74 17                	je     f012d3ad <test_krealloc+0x1c12>
			panic("krealloc: pages in memory are not loaded correctly");
f012d396:	83 ec 04             	sub    $0x4,%esp
f012d399:	68 f0 c3 13 f0       	push   $0xf013c3f0
f012d39e:	68 a0 10 00 00       	push   $0x10a0
f012d3a3:	68 da ac 13 f0       	push   $0xf013acda
f012d3a8:	e8 4e 2e fd ff       	call   f01001fb <_panic>

		ptr_allocations[6] = newAddress;
f012d3ad:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d3b0:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012d3b6:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d3bc:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012d3c2:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012d3c9:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d3cc:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d3d3:	eb 21                	jmp    f012d3f6 <test_krealloc+0x1c5b>
			sums[0] += ptr[i];
f012d3d5:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d3db:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012d3de:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d3e4:	01 c8                	add    %ecx,%eax
f012d3e6:	8a 00                	mov    (%eax),%al
f012d3e8:	0f be c0             	movsbl %al,%eax
f012d3eb:	01 d0                	add    %edx,%eax
f012d3ed:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d3f3:	ff 45 d8             	incl   -0x28(%ebp)
f012d3f6:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012d3fc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d3ff:	7d d4                	jge    f012d3d5 <test_krealloc+0x1c3a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012d401:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012d407:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012d40d:	42                   	inc    %edx
f012d40e:	01 d2                	add    %edx,%edx
f012d410:	39 d0                	cmp    %edx,%eax
f012d412:	74 17                	je     f012d42b <test_krealloc+0x1c90>
			panic("krealloc: invalid read after re-allocations");
f012d414:	83 ec 04             	sub    $0x4,%esp
f012d417:	68 20 c5 13 f0       	push   $0xf013c520
f012d41c:	68 ae 10 00 00       	push   $0x10ae
f012d421:	68 da ac 13 f0       	push   $0xf013acda
f012d426:	e8 d0 2d fd ff       	call   f01001fb <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012d42b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d431:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012d437:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012d43e:	00 00 00 
		sums[1] = 0;
f012d441:	c7 85 bc fd ff ff 00 	movl   $0x0,-0x244(%ebp)
f012d448:	00 00 00 
		sums[2] = 0;
f012d44b:	c7 85 c0 fd ff ff 00 	movl   $0x0,-0x240(%ebp)
f012d452:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012d455:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d45c:	eb 70                	jmp    f012d4ce <test_krealloc+0x1d33>
			sums[0] += structArr[i].a;
f012d45e:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d464:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d467:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d46e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d474:	01 c8                	add    %ecx,%eax
f012d476:	8a 00                	mov    (%eax),%al
f012d478:	0f be c0             	movsbl %al,%eax
f012d47b:	01 d0                	add    %edx,%eax
f012d47d:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
			sums[1] += structArr[i].b;
f012d483:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012d489:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d48c:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d493:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d499:	01 c8                	add    %ecx,%eax
f012d49b:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d49f:	98                   	cwtl   
f012d4a0:	01 d0                	add    %edx,%eax
f012d4a2:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
			sums[2] += structArr[i].c;
f012d4a8:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012d4ae:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d4b1:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d4b8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d4be:	01 c8                	add    %ecx,%eax
f012d4c0:	8b 40 04             	mov    0x4(%eax),%eax
f012d4c3:	01 d0                	add    %edx,%eax
f012d4c5:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012d4cb:	ff 45 d8             	incl   -0x28(%ebp)
f012d4ce:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d4d4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d4d7:	7d 85                	jge    f012d45e <test_krealloc+0x1cc3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012d4d9:	8b 8d b8 fd ff ff    	mov    -0x248(%ebp),%ecx
f012d4df:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d4e5:	8d 50 01             	lea    0x1(%eax),%edx
f012d4e8:	89 d0                	mov    %edx,%eax
f012d4ea:	01 c0                	add    %eax,%eax
f012d4ec:	01 d0                	add    %edx,%eax
f012d4ee:	01 c0                	add    %eax,%eax
f012d4f0:	01 d0                	add    %edx,%eax
f012d4f2:	39 c1                	cmp    %eax,%ecx
f012d4f4:	75 3a                	jne    f012d530 <test_krealloc+0x1d95>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012d4f6:	8b 8d bc fd ff ff    	mov    -0x244(%ebp),%ecx
f012d4fc:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d502:	8d 50 01             	lea    0x1(%eax),%edx
f012d505:	89 d0                	mov    %edx,%eax
f012d507:	01 c0                	add    %eax,%eax
f012d509:	01 d0                	add    %edx,%eax
f012d50b:	01 c0                	add    %eax,%eax
f012d50d:	01 d0                	add    %edx,%eax
f012d50f:	39 c1                	cmp    %eax,%ecx
f012d511:	75 1d                	jne    f012d530 <test_krealloc+0x1d95>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012d513:	8b 8d c0 fd ff ff    	mov    -0x240(%ebp),%ecx
f012d519:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d51f:	8d 50 01             	lea    0x1(%eax),%edx
f012d522:	89 d0                	mov    %edx,%eax
f012d524:	01 c0                	add    %eax,%eax
f012d526:	01 d0                	add    %edx,%eax
f012d528:	01 c0                	add    %eax,%eax
f012d52a:	01 d0                	add    %edx,%eax
f012d52c:	39 c1                	cmp    %eax,%ecx
f012d52e:	74 17                	je     f012d547 <test_krealloc+0x1dac>
			panic("krealloc: invalid read after re-allocations");
f012d530:	83 ec 04             	sub    $0x4,%esp
f012d533:	68 20 c5 13 f0       	push   $0xf013c520
f012d538:	68 c0 10 00 00       	push   $0x10c0
f012d53d:	68 da ac 13 f0       	push   $0xf013acda
f012d542:	e8 b4 2c fd ff       	call   f01001fb <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012d547:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d54d:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012d553:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012d55a:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012d55d:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d564:	eb 24                	jmp    f012d58a <test_krealloc+0x1def>
			sums[0] += shortArr[i];
f012d566:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d56c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d56f:	01 c0                	add    %eax,%eax
f012d571:	89 c1                	mov    %eax,%ecx
f012d573:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d579:	01 c8                	add    %ecx,%eax
f012d57b:	66 8b 00             	mov    (%eax),%ax
f012d57e:	98                   	cwtl   
f012d57f:	01 d0                	add    %edx,%eax
f012d581:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012d587:	ff 45 d8             	incl   -0x28(%ebp)
f012d58a:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d590:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d593:	7d d1                	jge    f012d566 <test_krealloc+0x1dcb>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012d595:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d59b:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d5a1:	8d 48 01             	lea    0x1(%eax),%ecx
f012d5a4:	89 c8                	mov    %ecx,%eax
f012d5a6:	c1 e0 02             	shl    $0x2,%eax
f012d5a9:	01 c8                	add    %ecx,%eax
f012d5ab:	39 c2                	cmp    %eax,%edx
f012d5ad:	74 17                	je     f012d5c6 <test_krealloc+0x1e2b>
			panic("krealloc: invalid read after re-allocations");
f012d5af:	83 ec 04             	sub    $0x4,%esp
f012d5b2:	68 20 c5 13 f0       	push   $0xf013c520
f012d5b7:	68 ca 10 00 00       	push   $0x10ca
f012d5bc:	68 da ac 13 f0       	push   $0xf013acda
f012d5c1:	e8 35 2c fd ff       	call   f01001fb <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012d5c6:	e8 90 f3 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012d5cb:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d5ce:	e8 69 67 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012d5d3:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012d5d9:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d5df:	83 ec 08             	sub    $0x8,%esp
f012d5e2:	6a 00                	push   $0x0
f012d5e4:	50                   	push   %eax
f012d5e5:	e8 cb a4 fd ff       	call   f0107ab5 <krealloc>
f012d5ea:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d5ed:	e8 4a 67 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012d5f2:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d5f8:	74 17                	je     f012d611 <test_krealloc+0x1e76>
			panic(
f012d5fa:	83 ec 04             	sub    $0x4,%esp
f012d5fd:	68 f4 ac 13 f0       	push   $0xf013acf4
f012d602:	68 d2 10 00 00       	push   $0x10d2
f012d607:	68 da ac 13 f0       	push   $0xf013acda
f012d60c:	e8 ea 2b fd ff       	call   f01001fb <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012d611:	e8 45 f3 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012d616:	89 c2                	mov    %eax,%edx
f012d618:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d61b:	29 c2                	sub    %eax,%edx
f012d61d:	89 d0                	mov    %edx,%eax
f012d61f:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012d624:	74 17                	je     f012d63d <test_krealloc+0x1ea2>
			panic("krealloc: pages in memory are not freed correctly");
f012d626:	83 ec 04             	sub    $0x4,%esp
f012d629:	68 b0 c1 13 f0       	push   $0xf013c1b0
f012d62e:	68 d4 10 00 00       	push   $0x10d4
f012d633:	68 da ac 13 f0       	push   $0xf013acda
f012d638:	e8 be 2b fd ff       	call   f01001fb <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012d63d:	e8 19 f3 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012d642:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d645:	e8 f2 66 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012d64a:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012d650:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d656:	83 ec 0c             	sub    $0xc,%esp
f012d659:	50                   	push   %eax
f012d65a:	e8 61 a2 fd ff       	call   f01078c0 <kfree>
f012d65f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d662:	e8 d5 66 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012d667:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d66d:	74 17                	je     f012d686 <test_krealloc+0x1eeb>
			panic(
f012d66f:	83 ec 04             	sub    $0x4,%esp
f012d672:	68 f4 ac 13 f0       	push   $0xf013acf4
f012d677:	68 dc 10 00 00       	push   $0x10dc
f012d67c:	68 da ac 13 f0       	push   $0xf013acda
f012d681:	e8 75 2b fd ff       	call   f01001fb <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012d686:	e8 d0 f2 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012d68b:	89 c2                	mov    %eax,%edx
f012d68d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d690:	29 c2                	sub    %eax,%edx
f012d692:	89 d0                	mov    %edx,%eax
f012d694:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012d699:	74 17                	je     f012d6b2 <test_krealloc+0x1f17>
			panic("krealloc: pages in memory are not freed correctly");
f012d69b:	83 ec 04             	sub    $0x4,%esp
f012d69e:	68 b0 c1 13 f0       	push   $0xf013c1b0
f012d6a3:	68 de 10 00 00       	push   $0x10de
f012d6a8:	68 da ac 13 f0       	push   $0xf013acda
f012d6ad:	e8 49 2b fd ff       	call   f01001fb <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d6b2:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012d6b9:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012d6c0:	eb 48                	jmp    f012d70a <test_krealloc+0x1f6f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012d6c2:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012d6c5:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f012d6ca:	83 ec 04             	sub    $0x4,%esp
f012d6cd:	8d 8d b0 fd ff ff    	lea    -0x250(%ebp),%ecx
f012d6d3:	51                   	push   %ecx
f012d6d4:	52                   	push   %edx
f012d6d5:	50                   	push   %eax
f012d6d6:	e8 ff 92 fd ff       	call   f01069da <get_page_table>
f012d6db:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012d6de:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f012d6e4:	85 c0                	test   %eax,%eax
f012d6e6:	75 17                	jne    f012d6ff <test_krealloc+0x1f64>
					panic(
f012d6e8:	83 ec 04             	sub    $0x4,%esp
f012d6eb:	68 dc b5 13 f0       	push   $0xf013b5dc
f012d6f0:	68 eb 10 00 00       	push   $0x10eb
f012d6f5:	68 da ac 13 f0       	push   $0xf013acda
f012d6fa:	e8 fc 2a fd ff       	call   f01001fb <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d6ff:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012d706:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012d70a:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012d70e:	78 b2                	js     f012d6c2 <test_krealloc+0x1f27>
f012d710:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012d714:	7f 09                	jg     f012d71f <test_krealloc+0x1f84>
f012d716:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012d71d:	76 a3                	jbe    f012d6c2 <test_krealloc+0x1f27>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012d71f:	83 ec 0c             	sub    $0xc,%esp
f012d722:	68 be ae 13 f0       	push   $0xf013aebe
f012d727:	e8 56 35 fd ff       	call   f0100c82 <cprintf>
f012d72c:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc completed successfully.\n");
f012d72f:	83 ec 0c             	sub    $0xc,%esp
f012d732:	68 4c c5 13 f0       	push   $0xf013c54c
f012d737:	e8 46 35 fd ff       	call   f0100c82 <cprintf>
f012d73c:	83 c4 10             	add    $0x10,%esp
	return 0;
f012d73f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012d744:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012d747:	5b                   	pop    %ebx
f012d748:	5f                   	pop    %edi
f012d749:	5d                   	pop    %ebp
f012d74a:	c3                   	ret    

f012d74b <test_krealloc_BF>:


int test_krealloc_BF() {
f012d74b:	55                   	push   %ebp
f012d74c:	89 e5                	mov    %esp,%ebp
f012d74e:	57                   	push   %edi
f012d74f:	53                   	push   %ebx
f012d750:	81 ec 60 02 00 00    	sub    $0x260,%esp
	cprintf("==============================================\n");
f012d756:	83 ec 0c             	sub    $0xc,%esp
f012d759:	68 1c ac 13 f0       	push   $0xf013ac1c
f012d75e:	e8 1f 35 fd ff       	call   f0100c82 <cprintf>
f012d763:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012d766:	83 ec 0c             	sub    $0xc,%esp
f012d769:	68 4c ac 13 f0       	push   $0xf013ac4c
f012d76e:	e8 0f 35 fd ff       	call   f0100c82 <cprintf>
f012d773:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012d776:	83 ec 0c             	sub    $0xc,%esp
f012d779:	68 1c ac 13 f0       	push   $0xf013ac1c
f012d77e:	e8 ff 34 fd ff       	call   f0100c82 <cprintf>
f012d783:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012d786:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012d78a:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012d78e:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012d794:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012d79a:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012d7a1:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012d7a8:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f012d7ae:	b9 14 00 00 00       	mov    $0x14,%ecx
f012d7b3:	b8 00 00 00 00       	mov    $0x0,%eax
f012d7b8:	89 d7                	mov    %edx,%edi
f012d7ba:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012d7bc:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012d7c3:	8d 95 f0 fd ff ff    	lea    -0x210(%ebp),%edx
f012d7c9:	b9 14 00 00 00       	mov    $0x14,%ecx
f012d7ce:	b8 00 00 00 00       	mov    $0x0,%eax
f012d7d3:	89 d7                	mov    %edx,%edi
f012d7d5:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012d7d7:	8d 95 a0 fd ff ff    	lea    -0x260(%ebp),%edx
f012d7dd:	b9 14 00 00 00       	mov    $0x14,%ecx
f012d7e2:	b8 00 00 00 00       	mov    $0x0,%eax
f012d7e7:	89 d7                	mov    %edx,%edi
f012d7e9:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012d7eb:	e8 6b f1 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012d7f0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012d7f3:	83 ec 08             	sub    $0x8,%esp
f012d7f6:	68 00 fc 0f 00       	push   $0xffc00
f012d7fb:	6a 00                	push   $0x0
f012d7fd:	e8 b3 a2 fd ff       	call   f0107ab5 <krealloc>
f012d802:	83 c4 10             	add    $0x10,%esp
f012d805:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012d80b:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012d811:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d816:	77 17                	ja     f012d82f <test_krealloc_BF+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d818:	83 ec 04             	sub    $0x4,%esp
f012d81b:	68 80 bf 13 f0       	push   $0xf013bf80
f012d820:	68 1a 11 00 00       	push   $0x111a
f012d825:	68 da ac 13 f0       	push   $0xf013acda
f012d82a:	e8 cc 29 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012d82f:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012d835:	89 c1                	mov    %eax,%ecx
f012d837:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012d83e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012d841:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d846:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012d849:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012d84c:	ba 00 00 00 00       	mov    $0x0,%edx
f012d851:	f7 75 b4             	divl   -0x4c(%ebp)
f012d854:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012d857:	29 d0                	sub    %edx,%eax
f012d859:	89 c3                	mov    %eax,%ebx
f012d85b:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012d862:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012d867:	0f b6 d0             	movzbl %al,%edx
f012d86a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012d86d:	01 d0                	add    %edx,%eax
f012d86f:	48                   	dec    %eax
f012d870:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012d873:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012d876:	ba 00 00 00 00       	mov    $0x0,%edx
f012d87b:	f7 75 ac             	divl   -0x54(%ebp)
f012d87e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012d881:	29 d0                	sub    %edx,%eax
f012d883:	01 c3                	add    %eax,%ebx
f012d885:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012d88c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012d891:	0f b6 c0             	movzbl %al,%eax
f012d894:	c1 e0 04             	shl    $0x4,%eax
f012d897:	89 c2                	mov    %eax,%edx
f012d899:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012d89c:	01 d0                	add    %edx,%eax
f012d89e:	48                   	dec    %eax
f012d89f:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012d8a2:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012d8a5:	ba 00 00 00 00       	mov    $0x0,%edx
f012d8aa:	f7 75 a4             	divl   -0x5c(%ebp)
f012d8ad:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012d8b0:	29 d0                	sub    %edx,%eax
f012d8b2:	01 d8                	add    %ebx,%eax
f012d8b4:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012d8b9:	39 c1                	cmp    %eax,%ecx
f012d8bb:	74 17                	je     f012d8d4 <test_krealloc_BF+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012d8bd:	83 ec 04             	sub    $0x4,%esp
f012d8c0:	68 bc bf 13 f0       	push   $0xf013bfbc
f012d8c5:	68 1c 11 00 00       	push   $0x111c
f012d8ca:	68 da ac 13 f0       	push   $0xf013acda
f012d8cf:	e8 27 29 fd ff       	call   f01001fb <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012d8d4:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d8d7:	e8 7f f0 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012d8dc:	29 c3                	sub    %eax,%ebx
f012d8de:	89 d8                	mov    %ebx,%eax
f012d8e0:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d8e5:	74 17                	je     f012d8fe <test_krealloc_BF+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012d8e7:	83 ec 04             	sub    $0x4,%esp
f012d8ea:	68 ee bf 13 f0       	push   $0xf013bfee
f012d8ef:	68 1f 11 00 00       	push   $0x111f
f012d8f4:	68 da ac 13 f0       	push   $0xf013acda
f012d8f9:	e8 fd 28 fd ff       	call   f01001fb <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012d8fe:	c7 85 f0 fd ff ff ff 	movl   $0xffbff,-0x210(%ebp)
f012d905:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012d908:	e8 4e f0 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012d90d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012d910:	83 ec 08             	sub    $0x8,%esp
f012d913:	68 00 fc 0f 00       	push   $0xffc00
f012d918:	6a 00                	push   $0x0
f012d91a:	e8 96 a1 fd ff       	call   f0107ab5 <krealloc>
f012d91f:	83 c4 10             	add    $0x10,%esp
f012d922:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012d928:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012d92e:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012d933:	77 17                	ja     f012d94c <test_krealloc_BF+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d935:	83 ec 04             	sub    $0x4,%esp
f012d938:	68 80 bf 13 f0       	push   $0xf013bf80
f012d93d:	68 27 11 00 00       	push   $0x1127
f012d942:	68 da ac 13 f0       	push   $0xf013acda
f012d947:	e8 af 28 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012d94c:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012d952:	89 c1                	mov    %eax,%ecx
f012d954:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012d95b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012d95e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d963:	89 45 98             	mov    %eax,-0x68(%ebp)
f012d966:	8b 45 98             	mov    -0x68(%ebp),%eax
f012d969:	ba 00 00 00 00       	mov    $0x0,%edx
f012d96e:	f7 75 9c             	divl   -0x64(%ebp)
f012d971:	8b 45 98             	mov    -0x68(%ebp),%eax
f012d974:	29 d0                	sub    %edx,%eax
f012d976:	89 c3                	mov    %eax,%ebx
f012d978:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012d97f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012d984:	0f b6 d0             	movzbl %al,%edx
f012d987:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012d98a:	01 d0                	add    %edx,%eax
f012d98c:	48                   	dec    %eax
f012d98d:	89 45 90             	mov    %eax,-0x70(%ebp)
f012d990:	8b 45 90             	mov    -0x70(%ebp),%eax
f012d993:	ba 00 00 00 00       	mov    $0x0,%edx
f012d998:	f7 75 94             	divl   -0x6c(%ebp)
f012d99b:	8b 45 90             	mov    -0x70(%ebp),%eax
f012d99e:	29 d0                	sub    %edx,%eax
f012d9a0:	01 c3                	add    %eax,%ebx
f012d9a2:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012d9a9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012d9ae:	0f b6 c0             	movzbl %al,%eax
f012d9b1:	c1 e0 04             	shl    $0x4,%eax
f012d9b4:	89 c2                	mov    %eax,%edx
f012d9b6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012d9b9:	01 d0                	add    %edx,%eax
f012d9bb:	48                   	dec    %eax
f012d9bc:	89 45 88             	mov    %eax,-0x78(%ebp)
f012d9bf:	8b 45 88             	mov    -0x78(%ebp),%eax
f012d9c2:	ba 00 00 00 00       	mov    $0x0,%edx
f012d9c7:	f7 75 8c             	divl   -0x74(%ebp)
f012d9ca:	8b 45 88             	mov    -0x78(%ebp),%eax
f012d9cd:	29 d0                	sub    %edx,%eax
f012d9cf:	01 d8                	add    %ebx,%eax
f012d9d1:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012d9d6:	39 c1                	cmp    %eax,%ecx
f012d9d8:	74 17                	je     f012d9f1 <test_krealloc_BF+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012d9da:	83 ec 04             	sub    $0x4,%esp
f012d9dd:	68 bc bf 13 f0       	push   $0xf013bfbc
f012d9e2:	68 29 11 00 00       	push   $0x1129
f012d9e7:	68 da ac 13 f0       	push   $0xf013acda
f012d9ec:	e8 0a 28 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012d9f1:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d9f4:	e8 62 ef fd ff       	call   f010c95b <sys_calculate_free_frames>
f012d9f9:	29 c3                	sub    %eax,%ebx
f012d9fb:	89 d8                	mov    %ebx,%eax
f012d9fd:	3d 00 01 00 00       	cmp    $0x100,%eax
f012da02:	74 17                	je     f012da1b <test_krealloc_BF+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012da04:	83 ec 04             	sub    $0x4,%esp
f012da07:	68 ee bf 13 f0       	push   $0xf013bfee
f012da0c:	68 2b 11 00 00       	push   $0x112b
f012da11:	68 da ac 13 f0       	push   $0xf013acda
f012da16:	e8 e0 27 fd ff       	call   f01001fb <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012da1b:	c7 85 f4 fd ff ff ff 	movl   $0xffbff,-0x20c(%ebp)
f012da22:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012da25:	e8 31 ef fd ff       	call   f010c95b <sys_calculate_free_frames>
f012da2a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012da2d:	83 ec 08             	sub    $0x8,%esp
f012da30:	68 00 fc 0f 00       	push   $0xffc00
f012da35:	6a 00                	push   $0x0
f012da37:	e8 79 a0 fd ff       	call   f0107ab5 <krealloc>
f012da3c:	83 c4 10             	add    $0x10,%esp
f012da3f:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012da45:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012da4b:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012da50:	77 17                	ja     f012da69 <test_krealloc_BF+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012da52:	83 ec 04             	sub    $0x4,%esp
f012da55:	68 80 bf 13 f0       	push   $0xf013bf80
f012da5a:	68 33 11 00 00       	push   $0x1133
f012da5f:	68 da ac 13 f0       	push   $0xf013acda
f012da64:	e8 92 27 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012da69:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012da6f:	89 c1                	mov    %eax,%ecx
f012da71:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012da78:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012da7b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012da80:	89 45 80             	mov    %eax,-0x80(%ebp)
f012da83:	8b 45 80             	mov    -0x80(%ebp),%eax
f012da86:	ba 00 00 00 00       	mov    $0x0,%edx
f012da8b:	f7 75 84             	divl   -0x7c(%ebp)
f012da8e:	8b 45 80             	mov    -0x80(%ebp),%eax
f012da91:	29 d0                	sub    %edx,%eax
f012da93:	89 c3                	mov    %eax,%ebx
f012da95:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012da9c:	10 00 00 
f012da9f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012daa4:	0f b6 d0             	movzbl %al,%edx
f012daa7:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012daad:	01 d0                	add    %edx,%eax
f012daaf:	48                   	dec    %eax
f012dab0:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012dab6:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012dabc:	ba 00 00 00 00       	mov    $0x0,%edx
f012dac1:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012dac7:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012dacd:	29 d0                	sub    %edx,%eax
f012dacf:	01 c3                	add    %eax,%ebx
f012dad1:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012dad8:	10 00 00 
f012dadb:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012dae0:	0f b6 c0             	movzbl %al,%eax
f012dae3:	c1 e0 04             	shl    $0x4,%eax
f012dae6:	89 c2                	mov    %eax,%edx
f012dae8:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012daee:	01 d0                	add    %edx,%eax
f012daf0:	48                   	dec    %eax
f012daf1:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012daf7:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012dafd:	ba 00 00 00 00       	mov    $0x0,%edx
f012db02:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012db08:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012db0e:	29 d0                	sub    %edx,%eax
f012db10:	01 d8                	add    %ebx,%eax
f012db12:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012db17:	39 c1                	cmp    %eax,%ecx
f012db19:	74 17                	je     f012db32 <test_krealloc_BF+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012db1b:	83 ec 04             	sub    $0x4,%esp
f012db1e:	68 bc bf 13 f0       	push   $0xf013bfbc
f012db23:	68 35 11 00 00       	push   $0x1135
f012db28:	68 da ac 13 f0       	push   $0xf013acda
f012db2d:	e8 c9 26 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012db32:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012db35:	e8 21 ee fd ff       	call   f010c95b <sys_calculate_free_frames>
f012db3a:	29 c3                	sub    %eax,%ebx
f012db3c:	89 d8                	mov    %ebx,%eax
f012db3e:	3d 00 01 00 00       	cmp    $0x100,%eax
f012db43:	74 17                	je     f012db5c <test_krealloc_BF+0x411>
			panic("krealloc: Wrong allocation: ");
f012db45:	83 ec 04             	sub    $0x4,%esp
f012db48:	68 ee bf 13 f0       	push   $0xf013bfee
f012db4d:	68 37 11 00 00       	push   $0x1137
f012db52:	68 da ac 13 f0       	push   $0xf013acda
f012db57:	e8 9f 26 fd ff       	call   f01001fb <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012db5c:	c7 85 f8 fd ff ff ff 	movl   $0x3feff,-0x208(%ebp)
f012db63:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012db66:	e8 f0 ed fd ff       	call   f010c95b <sys_calculate_free_frames>
f012db6b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012db6e:	83 ec 08             	sub    $0x8,%esp
f012db71:	68 00 fc 0f 00       	push   $0xffc00
f012db76:	6a 00                	push   $0x0
f012db78:	e8 38 9f fd ff       	call   f0107ab5 <krealloc>
f012db7d:	83 c4 10             	add    $0x10,%esp
f012db80:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012db86:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012db8c:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012db91:	77 17                	ja     f012dbaa <test_krealloc_BF+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012db93:	83 ec 04             	sub    $0x4,%esp
f012db96:	68 80 bf 13 f0       	push   $0xf013bf80
f012db9b:	68 3e 11 00 00       	push   $0x113e
f012dba0:	68 da ac 13 f0       	push   $0xf013acda
f012dba5:	e8 51 26 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012dbaa:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012dbb0:	89 c1                	mov    %eax,%ecx
f012dbb2:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012dbb9:	10 00 00 
f012dbbc:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012dbc2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012dbc7:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012dbcd:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012dbd3:	ba 00 00 00 00       	mov    $0x0,%edx
f012dbd8:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012dbde:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012dbe4:	29 d0                	sub    %edx,%eax
f012dbe6:	89 c3                	mov    %eax,%ebx
f012dbe8:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012dbef:	10 00 00 
f012dbf2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012dbf7:	0f b6 d0             	movzbl %al,%edx
f012dbfa:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012dc00:	01 d0                	add    %edx,%eax
f012dc02:	48                   	dec    %eax
f012dc03:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012dc09:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012dc0f:	ba 00 00 00 00       	mov    $0x0,%edx
f012dc14:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012dc1a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012dc20:	29 d0                	sub    %edx,%eax
f012dc22:	01 c3                	add    %eax,%ebx
f012dc24:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012dc2b:	10 00 00 
f012dc2e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012dc33:	0f b6 c0             	movzbl %al,%eax
f012dc36:	c1 e0 04             	shl    $0x4,%eax
f012dc39:	89 c2                	mov    %eax,%edx
f012dc3b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012dc41:	01 d0                	add    %edx,%eax
f012dc43:	48                   	dec    %eax
f012dc44:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012dc4a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012dc50:	ba 00 00 00 00       	mov    $0x0,%edx
f012dc55:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012dc5b:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012dc61:	29 d0                	sub    %edx,%eax
f012dc63:	01 d8                	add    %ebx,%eax
f012dc65:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012dc6a:	39 c1                	cmp    %eax,%ecx
f012dc6c:	74 17                	je     f012dc85 <test_krealloc_BF+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012dc6e:	83 ec 04             	sub    $0x4,%esp
f012dc71:	68 bc bf 13 f0       	push   $0xf013bfbc
f012dc76:	68 40 11 00 00       	push   $0x1140
f012dc7b:	68 da ac 13 f0       	push   $0xf013acda
f012dc80:	e8 76 25 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012dc85:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dc88:	e8 ce ec fd ff       	call   f010c95b <sys_calculate_free_frames>
f012dc8d:	29 c3                	sub    %eax,%ebx
f012dc8f:	89 d8                	mov    %ebx,%eax
f012dc91:	3d 00 01 00 00       	cmp    $0x100,%eax
f012dc96:	74 17                	je     f012dcaf <test_krealloc_BF+0x564>
			panic("krealloc: Wrong allocation: ");
f012dc98:	83 ec 04             	sub    $0x4,%esp
f012dc9b:	68 ee bf 13 f0       	push   $0xf013bfee
f012dca0:	68 42 11 00 00       	push   $0x1142
f012dca5:	68 da ac 13 f0       	push   $0xf013acda
f012dcaa:	e8 4c 25 fd ff       	call   f01001fb <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012dcaf:	c7 85 fc fd ff ff ff 	movl   $0x3feff,-0x204(%ebp)
f012dcb6:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012dcb9:	e8 9d ec fd ff       	call   f010c95b <sys_calculate_free_frames>
f012dcbe:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012dcc1:	83 ec 08             	sub    $0x8,%esp
f012dcc4:	68 00 fc 1f 00       	push   $0x1ffc00
f012dcc9:	6a 00                	push   $0x0
f012dccb:	e8 e5 9d fd ff       	call   f0107ab5 <krealloc>
f012dcd0:	83 c4 10             	add    $0x10,%esp
f012dcd3:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012dcd9:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012dcdf:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012dce4:	77 17                	ja     f012dcfd <test_krealloc_BF+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dce6:	83 ec 04             	sub    $0x4,%esp
f012dce9:	68 80 bf 13 f0       	push   $0xf013bf80
f012dcee:	68 49 11 00 00       	push   $0x1149
f012dcf3:	68 da ac 13 f0       	push   $0xf013acda
f012dcf8:	e8 fe 24 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012dcfd:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012dd03:	89 c1                	mov    %eax,%ecx
f012dd05:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012dd0c:	10 00 00 
f012dd0f:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012dd15:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012dd1a:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012dd20:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012dd26:	ba 00 00 00 00       	mov    $0x0,%edx
f012dd2b:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012dd31:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012dd37:	29 d0                	sub    %edx,%eax
f012dd39:	89 c3                	mov    %eax,%ebx
f012dd3b:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012dd42:	10 00 00 
f012dd45:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012dd4a:	0f b6 d0             	movzbl %al,%edx
f012dd4d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012dd53:	01 d0                	add    %edx,%eax
f012dd55:	48                   	dec    %eax
f012dd56:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012dd5c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012dd62:	ba 00 00 00 00       	mov    $0x0,%edx
f012dd67:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012dd6d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012dd73:	29 d0                	sub    %edx,%eax
f012dd75:	01 c3                	add    %eax,%ebx
f012dd77:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012dd7e:	10 00 00 
f012dd81:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012dd86:	0f b6 c0             	movzbl %al,%eax
f012dd89:	c1 e0 04             	shl    $0x4,%eax
f012dd8c:	89 c2                	mov    %eax,%edx
f012dd8e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012dd94:	01 d0                	add    %edx,%eax
f012dd96:	48                   	dec    %eax
f012dd97:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012dd9d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012dda3:	ba 00 00 00 00       	mov    $0x0,%edx
f012dda8:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012ddae:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012ddb4:	29 d0                	sub    %edx,%eax
f012ddb6:	01 d8                	add    %ebx,%eax
f012ddb8:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012ddbd:	39 c1                	cmp    %eax,%ecx
f012ddbf:	74 17                	je     f012ddd8 <test_krealloc_BF+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012ddc1:	83 ec 04             	sub    $0x4,%esp
f012ddc4:	68 bc bf 13 f0       	push   $0xf013bfbc
f012ddc9:	68 4b 11 00 00       	push   $0x114b
f012ddce:	68 da ac 13 f0       	push   $0xf013acda
f012ddd3:	e8 23 24 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012ddd8:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dddb:	e8 7b eb fd ff       	call   f010c95b <sys_calculate_free_frames>
f012dde0:	29 c3                	sub    %eax,%ebx
f012dde2:	89 d8                	mov    %ebx,%eax
f012dde4:	3d 00 02 00 00       	cmp    $0x200,%eax
f012dde9:	74 17                	je     f012de02 <test_krealloc_BF+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012ddeb:	83 ec 04             	sub    $0x4,%esp
f012ddee:	68 ee bf 13 f0       	push   $0xf013bfee
f012ddf3:	68 4d 11 00 00       	push   $0x114d
f012ddf8:	68 da ac 13 f0       	push   $0xf013acda
f012ddfd:	e8 f9 23 fd ff       	call   f01001fb <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012de02:	c7 85 00 fe ff ff ff 	movl   $0xffdff,-0x200(%ebp)
f012de09:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012de0c:	e8 4a eb fd ff       	call   f010c95b <sys_calculate_free_frames>
f012de11:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012de14:	83 ec 08             	sub    $0x8,%esp
f012de17:	68 00 fc 1f 00       	push   $0x1ffc00
f012de1c:	6a 00                	push   $0x0
f012de1e:	e8 92 9c fd ff       	call   f0107ab5 <krealloc>
f012de23:	83 c4 10             	add    $0x10,%esp
f012de26:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012de2c:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012de32:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012de37:	77 17                	ja     f012de50 <test_krealloc_BF+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012de39:	83 ec 04             	sub    $0x4,%esp
f012de3c:	68 80 bf 13 f0       	push   $0xf013bf80
f012de41:	68 54 11 00 00       	push   $0x1154
f012de46:	68 da ac 13 f0       	push   $0xf013acda
f012de4b:	e8 ab 23 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012de50:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012de56:	89 c1                	mov    %eax,%ecx
f012de58:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012de5f:	10 00 00 
f012de62:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012de68:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012de6d:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012de73:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012de79:	ba 00 00 00 00       	mov    $0x0,%edx
f012de7e:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012de84:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012de8a:	29 d0                	sub    %edx,%eax
f012de8c:	89 c3                	mov    %eax,%ebx
f012de8e:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012de95:	10 00 00 
f012de98:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012de9d:	0f b6 d0             	movzbl %al,%edx
f012dea0:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012dea6:	01 d0                	add    %edx,%eax
f012dea8:	48                   	dec    %eax
f012dea9:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012deaf:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012deb5:	ba 00 00 00 00       	mov    $0x0,%edx
f012deba:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012dec0:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012dec6:	29 d0                	sub    %edx,%eax
f012dec8:	01 c3                	add    %eax,%ebx
f012deca:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012ded1:	10 00 00 
f012ded4:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012ded9:	0f b6 c0             	movzbl %al,%eax
f012dedc:	c1 e0 04             	shl    $0x4,%eax
f012dedf:	89 c2                	mov    %eax,%edx
f012dee1:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012dee7:	01 d0                	add    %edx,%eax
f012dee9:	48                   	dec    %eax
f012deea:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012def0:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012def6:	ba 00 00 00 00       	mov    $0x0,%edx
f012defb:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012df01:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012df07:	29 d0                	sub    %edx,%eax
f012df09:	01 d8                	add    %ebx,%eax
f012df0b:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012df10:	39 c1                	cmp    %eax,%ecx
f012df12:	74 17                	je     f012df2b <test_krealloc_BF+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012df14:	83 ec 04             	sub    $0x4,%esp
f012df17:	68 bc bf 13 f0       	push   $0xf013bfbc
f012df1c:	68 56 11 00 00       	push   $0x1156
f012df21:	68 da ac 13 f0       	push   $0xf013acda
f012df26:	e8 d0 22 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012df2b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012df2e:	e8 28 ea fd ff       	call   f010c95b <sys_calculate_free_frames>
f012df33:	29 c3                	sub    %eax,%ebx
f012df35:	89 d8                	mov    %ebx,%eax
f012df37:	3d 00 02 00 00       	cmp    $0x200,%eax
f012df3c:	74 17                	je     f012df55 <test_krealloc_BF+0x80a>
			panic("krealloc: Wrong allocation: ");
f012df3e:	83 ec 04             	sub    $0x4,%esp
f012df41:	68 ee bf 13 f0       	push   $0xf013bfee
f012df46:	68 58 11 00 00       	push   $0x1158
f012df4b:	68 da ac 13 f0       	push   $0xf013acda
f012df50:	e8 a6 22 fd ff       	call   f01001fb <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012df55:	c7 85 04 fe ff ff ff 	movl   $0xffdff,-0x1fc(%ebp)
f012df5c:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012df5f:	e8 f7 e9 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012df64:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012df67:	83 ec 08             	sub    $0x8,%esp
f012df6a:	68 00 fc 2f 00       	push   $0x2ffc00
f012df6f:	6a 00                	push   $0x0
f012df71:	e8 3f 9b fd ff       	call   f0107ab5 <krealloc>
f012df76:	83 c4 10             	add    $0x10,%esp
f012df79:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012df7f:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012df85:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012df8a:	77 17                	ja     f012dfa3 <test_krealloc_BF+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012df8c:	83 ec 04             	sub    $0x4,%esp
f012df8f:	68 80 bf 13 f0       	push   $0xf013bf80
f012df94:	68 5f 11 00 00       	push   $0x115f
f012df99:	68 da ac 13 f0       	push   $0xf013acda
f012df9e:	e8 58 22 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012dfa3:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012dfa9:	89 c1                	mov    %eax,%ecx
f012dfab:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012dfb2:	10 00 00 
f012dfb5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012dfbb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012dfc0:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012dfc6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012dfcc:	ba 00 00 00 00       	mov    $0x0,%edx
f012dfd1:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012dfd7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012dfdd:	29 d0                	sub    %edx,%eax
f012dfdf:	89 c3                	mov    %eax,%ebx
f012dfe1:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012dfe8:	10 00 00 
f012dfeb:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012dff0:	0f b6 d0             	movzbl %al,%edx
f012dff3:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012dff9:	01 d0                	add    %edx,%eax
f012dffb:	48                   	dec    %eax
f012dffc:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012e002:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012e008:	ba 00 00 00 00       	mov    $0x0,%edx
f012e00d:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012e013:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012e019:	29 d0                	sub    %edx,%eax
f012e01b:	01 c3                	add    %eax,%ebx
f012e01d:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012e024:	10 00 00 
f012e027:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012e02c:	0f b6 c0             	movzbl %al,%eax
f012e02f:	c1 e0 04             	shl    $0x4,%eax
f012e032:	89 c2                	mov    %eax,%edx
f012e034:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012e03a:	01 d0                	add    %edx,%eax
f012e03c:	48                   	dec    %eax
f012e03d:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012e043:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012e049:	ba 00 00 00 00       	mov    $0x0,%edx
f012e04e:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012e054:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012e05a:	29 d0                	sub    %edx,%eax
f012e05c:	01 d8                	add    %ebx,%eax
f012e05e:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012e063:	39 c1                	cmp    %eax,%ecx
f012e065:	74 17                	je     f012e07e <test_krealloc_BF+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012e067:	83 ec 04             	sub    $0x4,%esp
f012e06a:	68 bc bf 13 f0       	push   $0xf013bfbc
f012e06f:	68 61 11 00 00       	push   $0x1161
f012e074:	68 da ac 13 f0       	push   $0xf013acda
f012e079:	e8 7d 21 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012e07e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e081:	e8 d5 e8 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012e086:	29 c3                	sub    %eax,%ebx
f012e088:	89 d8                	mov    %ebx,%eax
f012e08a:	3d 00 03 00 00       	cmp    $0x300,%eax
f012e08f:	74 17                	je     f012e0a8 <test_krealloc_BF+0x95d>
			panic("Wrong allocation: ");
f012e091:	83 ec 04             	sub    $0x4,%esp
f012e094:	68 24 b1 13 f0       	push   $0xf013b124
f012e099:	68 63 11 00 00       	push   $0x1163
f012e09e:	68 da ac 13 f0       	push   $0xf013acda
f012e0a3:	e8 53 21 fd ff       	call   f01001fb <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012e0a8:	c7 85 08 fe ff ff 7f 	movl   $0x5ff7f,-0x1f8(%ebp)
f012e0af:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012e0b2:	e8 a4 e8 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012e0b7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012e0ba:	83 ec 08             	sub    $0x8,%esp
f012e0bd:	68 00 fc 2f 00       	push   $0x2ffc00
f012e0c2:	6a 00                	push   $0x0
f012e0c4:	e8 ec 99 fd ff       	call   f0107ab5 <krealloc>
f012e0c9:	83 c4 10             	add    $0x10,%esp
f012e0cc:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012e0d2:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e0d8:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012e0dd:	77 17                	ja     f012e0f6 <test_krealloc_BF+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e0df:	83 ec 04             	sub    $0x4,%esp
f012e0e2:	68 80 bf 13 f0       	push   $0xf013bf80
f012e0e7:	68 6a 11 00 00       	push   $0x116a
f012e0ec:	68 da ac 13 f0       	push   $0xf013acda
f012e0f1:	e8 05 21 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012e0f6:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e0fc:	89 c1                	mov    %eax,%ecx
f012e0fe:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012e105:	10 00 00 
f012e108:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012e10e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e113:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012e119:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012e11f:	ba 00 00 00 00       	mov    $0x0,%edx
f012e124:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012e12a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012e130:	29 d0                	sub    %edx,%eax
f012e132:	89 c3                	mov    %eax,%ebx
f012e134:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012e13b:	10 00 00 
f012e13e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012e143:	0f b6 d0             	movzbl %al,%edx
f012e146:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012e14c:	01 d0                	add    %edx,%eax
f012e14e:	48                   	dec    %eax
f012e14f:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012e155:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012e15b:	ba 00 00 00 00       	mov    $0x0,%edx
f012e160:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012e166:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012e16c:	29 d0                	sub    %edx,%eax
f012e16e:	01 c3                	add    %eax,%ebx
f012e170:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012e177:	10 00 00 
f012e17a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012e17f:	0f b6 c0             	movzbl %al,%eax
f012e182:	c1 e0 04             	shl    $0x4,%eax
f012e185:	89 c2                	mov    %eax,%edx
f012e187:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012e18d:	01 d0                	add    %edx,%eax
f012e18f:	48                   	dec    %eax
f012e190:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012e196:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012e19c:	ba 00 00 00 00       	mov    $0x0,%edx
f012e1a1:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012e1a7:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012e1ad:	29 d0                	sub    %edx,%eax
f012e1af:	01 d8                	add    %ebx,%eax
f012e1b1:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012e1b6:	39 c1                	cmp    %eax,%ecx
f012e1b8:	74 17                	je     f012e1d1 <test_krealloc_BF+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012e1ba:	83 ec 04             	sub    $0x4,%esp
f012e1bd:	68 bc bf 13 f0       	push   $0xf013bfbc
f012e1c2:	68 6c 11 00 00       	push   $0x116c
f012e1c7:	68 da ac 13 f0       	push   $0xf013acda
f012e1cc:	e8 2a 20 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012e1d1:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e1d4:	e8 82 e7 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012e1d9:	29 c3                	sub    %eax,%ebx
f012e1db:	89 d8                	mov    %ebx,%eax
f012e1dd:	3d 00 03 00 00       	cmp    $0x300,%eax
f012e1e2:	74 17                	je     f012e1fb <test_krealloc_BF+0xab0>
			panic("krealloc: Wrong allocation: ");
f012e1e4:	83 ec 04             	sub    $0x4,%esp
f012e1e7:	68 ee bf 13 f0       	push   $0xf013bfee
f012e1ec:	68 6e 11 00 00       	push   $0x116e
f012e1f1:	68 da ac 13 f0       	push   $0xf013acda
f012e1f6:	e8 00 20 fd ff       	call   f01001fb <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012e1fb:	c7 85 0c fe ff ff 7f 	movl   $0x5ff7f,-0x1f4(%ebp)
f012e202:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012e205:	e8 51 e7 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012e20a:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012e20d:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012e214:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012e217:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012e21d:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012e223:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012e229:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012e22c:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012e22e:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012e234:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012e23a:	01 c2                	add    %eax,%edx
f012e23c:	8a 45 ce             	mov    -0x32(%ebp),%al
f012e23f:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012e241:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e247:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012e24d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e254:	eb 11                	jmp    f012e267 <test_krealloc_BF+0xb1c>
			ptr[i] = 2;
f012e256:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e259:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e25f:	01 d0                	add    %edx,%eax
f012e261:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012e264:	ff 45 f4             	incl   -0xc(%ebp)
f012e267:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012e26d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012e270:	7d e4                	jge    f012e256 <test_krealloc_BF+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012e272:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e278:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012e27e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e284:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012e28a:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012e290:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e297:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e29d:	01 d0                	add    %edx,%eax
f012e29f:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012e2a5:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e2ab:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012e2b1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012e2b8:	eb 1b                	jmp    f012e2d5 <test_krealloc_BF+0xb8a>
			intArr[i] = 4;
f012e2ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e2bd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e2c4:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e2ca:	01 d0                	add    %edx,%eax
f012e2cc:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012e2d2:	ff 45 f0             	incl   -0x10(%ebp)
f012e2d5:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012e2db:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012e2de:	7d da                	jge    f012e2ba <test_krealloc_BF+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012e2e0:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e2e6:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012e2ec:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012e2f3:	eb 17                	jmp    f012e30c <test_krealloc_BF+0xbc1>
			shortArr[i] = 5;
f012e2f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012e2f8:	01 c0                	add    %eax,%eax
f012e2fa:	89 c2                	mov    %eax,%edx
f012e2fc:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e302:	01 d0                	add    %edx,%eax
f012e304:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012e309:	ff 45 ec             	incl   -0x14(%ebp)
f012e30c:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012e312:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012e315:	7d de                	jge    f012e2f5 <test_krealloc_BF+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012e317:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e31d:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012e323:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e329:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012e32e:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012e334:	01 c0                	add    %eax,%eax
f012e336:	89 c2                	mov    %eax,%edx
f012e338:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e33e:	01 d0                	add    %edx,%eax
f012e340:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012e345:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e34b:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012e351:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012e358:	eb 49                	jmp    f012e3a3 <test_krealloc_BF+0xc58>
			structArr[i].a = 7;
f012e35a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e35d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e364:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e36a:	01 d0                	add    %edx,%eax
f012e36c:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012e36f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e372:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e379:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e37f:	01 d0                	add    %edx,%eax
f012e381:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012e387:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e38a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e391:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e397:	01 d0                	add    %edx,%eax
f012e399:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012e3a0:	ff 45 e8             	incl   -0x18(%ebp)
f012e3a3:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e3a9:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012e3ac:	7d ac                	jge    f012e35a <test_krealloc_BF+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012e3ae:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e3b4:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012e3ba:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e3c0:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012e3c3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e3c9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012e3cf:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e3d5:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012e3dc:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e3e2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e3e9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e3ef:	01 d0                	add    %edx,%eax
f012e3f1:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012e3f4:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e3fa:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e401:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e407:	01 d0                	add    %edx,%eax
f012e409:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012e40f:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e415:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e41c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e422:	01 d0                	add    %edx,%eax
f012e424:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012e42b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012e431:	8a 00                	mov    (%eax),%al
f012e433:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012e436:	75 17                	jne    f012e44f <test_krealloc_BF+0xd04>
f012e438:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012e43e:	89 c2                	mov    %eax,%edx
f012e440:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012e446:	01 d0                	add    %edx,%eax
f012e448:	8a 00                	mov    (%eax),%al
f012e44a:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012e44d:	74 17                	je     f012e466 <test_krealloc_BF+0xd1b>
			panic(
f012e44f:	83 ec 04             	sub    $0x4,%esp
f012e452:	68 0c c0 13 f0       	push   $0xf013c00c
f012e457:	68 b1 11 00 00       	push   $0x11b1
f012e45c:	68 da ac 13 f0       	push   $0xf013acda
f012e461:	e8 95 1d fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012e466:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e46c:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012e472:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e478:	8a 00                	mov    (%eax),%al
f012e47a:	3c 02                	cmp    $0x2,%al
f012e47c:	75 16                	jne    f012e494 <test_krealloc_BF+0xd49>
f012e47e:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012e484:	89 c2                	mov    %eax,%edx
f012e486:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e48c:	01 d0                	add    %edx,%eax
f012e48e:	8a 00                	mov    (%eax),%al
f012e490:	3c 02                	cmp    $0x2,%al
f012e492:	74 20                	je     f012e4b4 <test_krealloc_BF+0xd69>
			panic(
f012e494:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e49a:	8a 00                	mov    (%eax),%al
f012e49c:	0f be c0             	movsbl %al,%eax
f012e49f:	50                   	push   %eax
f012e4a0:	68 4c c0 13 f0       	push   $0xf013c04c
f012e4a5:	68 b7 11 00 00       	push   $0x11b7
f012e4aa:	68 da ac 13 f0       	push   $0xf013acda
f012e4af:	e8 47 1d fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012e4b4:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e4ba:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012e4c0:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e4c6:	8b 00                	mov    (%eax),%eax
f012e4c8:	83 f8 03             	cmp    $0x3,%eax
f012e4cb:	75 1c                	jne    f012e4e9 <test_krealloc_BF+0xd9e>
f012e4cd:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012e4d3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e4da:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e4e0:	01 d0                	add    %edx,%eax
f012e4e2:	8b 00                	mov    (%eax),%eax
f012e4e4:	83 f8 03             	cmp    $0x3,%eax
f012e4e7:	74 17                	je     f012e500 <test_krealloc_BF+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012e4e9:	83 ec 04             	sub    $0x4,%esp
f012e4ec:	68 98 c0 13 f0       	push   $0xf013c098
f012e4f1:	68 bb 11 00 00       	push   $0x11bb
f012e4f6:	68 da ac 13 f0       	push   $0xf013acda
f012e4fb:	e8 fb 1c fd ff       	call   f01001fb <_panic>

		intArr = (int*) ptr_allocations[3];
f012e500:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e506:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012e50c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e512:	8b 00                	mov    (%eax),%eax
f012e514:	83 f8 04             	cmp    $0x4,%eax
f012e517:	75 1c                	jne    f012e535 <test_krealloc_BF+0xdea>
f012e519:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012e51f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e526:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e52c:	01 d0                	add    %edx,%eax
f012e52e:	8b 00                	mov    (%eax),%eax
f012e530:	83 f8 04             	cmp    $0x4,%eax
f012e533:	74 17                	je     f012e54c <test_krealloc_BF+0xe01>
			panic(
f012e535:	83 ec 04             	sub    $0x4,%esp
f012e538:	68 0c c0 13 f0       	push   $0xf013c00c
f012e53d:	68 c0 11 00 00       	push   $0x11c0
f012e542:	68 da ac 13 f0       	push   $0xf013acda
f012e547:	e8 af 1c fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012e54c:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e552:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012e558:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e55e:	66 8b 00             	mov    (%eax),%ax
f012e561:	66 83 f8 05          	cmp    $0x5,%ax
f012e565:	75 1b                	jne    f012e582 <test_krealloc_BF+0xe37>
f012e567:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012e56d:	01 c0                	add    %eax,%eax
f012e56f:	89 c2                	mov    %eax,%edx
f012e571:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e577:	01 d0                	add    %edx,%eax
f012e579:	66 8b 00             	mov    (%eax),%ax
f012e57c:	66 83 f8 05          	cmp    $0x5,%ax
f012e580:	74 17                	je     f012e599 <test_krealloc_BF+0xe4e>
			panic(
f012e582:	83 ec 04             	sub    $0x4,%esp
f012e585:	68 0c c0 13 f0       	push   $0xf013c00c
f012e58a:	68 c5 11 00 00       	push   $0x11c5
f012e58f:	68 da ac 13 f0       	push   $0xf013acda
f012e594:	e8 62 1c fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012e599:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e59f:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012e5a5:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e5ab:	66 8b 00             	mov    (%eax),%ax
f012e5ae:	66 83 f8 06          	cmp    $0x6,%ax
f012e5b2:	75 1b                	jne    f012e5cf <test_krealloc_BF+0xe84>
f012e5b4:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012e5ba:	01 c0                	add    %eax,%eax
f012e5bc:	89 c2                	mov    %eax,%edx
f012e5be:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e5c4:	01 d0                	add    %edx,%eax
f012e5c6:	66 8b 00             	mov    (%eax),%ax
f012e5c9:	66 83 f8 06          	cmp    $0x6,%ax
f012e5cd:	74 17                	je     f012e5e6 <test_krealloc_BF+0xe9b>
			panic(
f012e5cf:	83 ec 04             	sub    $0x4,%esp
f012e5d2:	68 0c c0 13 f0       	push   $0xf013c00c
f012e5d7:	68 ca 11 00 00       	push   $0x11ca
f012e5dc:	68 da ac 13 f0       	push   $0xf013acda
f012e5e1:	e8 15 1c fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012e5e6:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e5ec:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012e5f2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e5f8:	8a 00                	mov    (%eax),%al
f012e5fa:	3c 07                	cmp    $0x7,%al
f012e5fc:	75 1b                	jne    f012e619 <test_krealloc_BF+0xece>
f012e5fe:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e604:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e60b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e611:	01 d0                	add    %edx,%eax
f012e613:	8a 00                	mov    (%eax),%al
f012e615:	3c 07                	cmp    $0x7,%al
f012e617:	74 17                	je     f012e630 <test_krealloc_BF+0xee5>
			panic(
f012e619:	83 ec 04             	sub    $0x4,%esp
f012e61c:	68 0c c0 13 f0       	push   $0xf013c00c
f012e621:	68 cf 11 00 00       	push   $0x11cf
f012e626:	68 da ac 13 f0       	push   $0xf013acda
f012e62b:	e8 cb 1b fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012e630:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e636:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e63a:	66 83 f8 07          	cmp    $0x7,%ax
f012e63e:	75 1f                	jne    f012e65f <test_krealloc_BF+0xf14>
f012e640:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e646:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e64d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e653:	01 d0                	add    %edx,%eax
f012e655:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e659:	66 83 f8 07          	cmp    $0x7,%ax
f012e65d:	74 17                	je     f012e676 <test_krealloc_BF+0xf2b>
			panic(
f012e65f:	83 ec 04             	sub    $0x4,%esp
f012e662:	68 0c c0 13 f0       	push   $0xf013c00c
f012e667:	68 d2 11 00 00       	push   $0x11d2
f012e66c:	68 da ac 13 f0       	push   $0xf013acda
f012e671:	e8 85 1b fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012e676:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e67c:	8b 40 04             	mov    0x4(%eax),%eax
f012e67f:	83 f8 07             	cmp    $0x7,%eax
f012e682:	75 1d                	jne    f012e6a1 <test_krealloc_BF+0xf56>
f012e684:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e68a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e691:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e697:	01 d0                	add    %edx,%eax
f012e699:	8b 40 04             	mov    0x4(%eax),%eax
f012e69c:	83 f8 07             	cmp    $0x7,%eax
f012e69f:	74 17                	je     f012e6b8 <test_krealloc_BF+0xf6d>
			panic(
f012e6a1:	83 ec 04             	sub    $0x4,%esp
f012e6a4:	68 0c c0 13 f0       	push   $0xf013c00c
f012e6a9:	68 d5 11 00 00       	push   $0x11d5
f012e6ae:	68 da ac 13 f0       	push   $0xf013acda
f012e6b3:	e8 43 1b fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012e6b8:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e6be:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012e6c4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e6ca:	8a 00                	mov    (%eax),%al
f012e6cc:	3c 08                	cmp    $0x8,%al
f012e6ce:	75 1b                	jne    f012e6eb <test_krealloc_BF+0xfa0>
f012e6d0:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e6d6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e6dd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e6e3:	01 d0                	add    %edx,%eax
f012e6e5:	8a 00                	mov    (%eax),%al
f012e6e7:	3c 08                	cmp    $0x8,%al
f012e6e9:	74 17                	je     f012e702 <test_krealloc_BF+0xfb7>
			panic(
f012e6eb:	83 ec 04             	sub    $0x4,%esp
f012e6ee:	68 0c c0 13 f0       	push   $0xf013c00c
f012e6f3:	68 da 11 00 00       	push   $0x11da
f012e6f8:	68 da ac 13 f0       	push   $0xf013acda
f012e6fd:	e8 f9 1a fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012e702:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e708:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e70c:	66 83 f8 08          	cmp    $0x8,%ax
f012e710:	75 1f                	jne    f012e731 <test_krealloc_BF+0xfe6>
f012e712:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e718:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e71f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e725:	01 d0                	add    %edx,%eax
f012e727:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e72b:	66 83 f8 08          	cmp    $0x8,%ax
f012e72f:	74 17                	je     f012e748 <test_krealloc_BF+0xffd>
			panic(
f012e731:	83 ec 04             	sub    $0x4,%esp
f012e734:	68 0c c0 13 f0       	push   $0xf013c00c
f012e739:	68 dd 11 00 00       	push   $0x11dd
f012e73e:	68 da ac 13 f0       	push   $0xf013acda
f012e743:	e8 b3 1a fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012e748:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e74e:	8b 40 04             	mov    0x4(%eax),%eax
f012e751:	83 f8 08             	cmp    $0x8,%eax
f012e754:	75 1d                	jne    f012e773 <test_krealloc_BF+0x1028>
f012e756:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e75c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e763:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e769:	01 d0                	add    %edx,%eax
f012e76b:	8b 40 04             	mov    0x4(%eax),%eax
f012e76e:	83 f8 08             	cmp    $0x8,%eax
f012e771:	74 17                	je     f012e78a <test_krealloc_BF+0x103f>
			panic(
f012e773:	83 ec 04             	sub    $0x4,%esp
f012e776:	68 0c c0 13 f0       	push   $0xf013c00c
f012e77b:	68 e0 11 00 00       	push   $0x11e0
f012e780:	68 da ac 13 f0       	push   $0xf013acda
f012e785:	e8 71 1a fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012e78a:	e8 cc e1 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012e78f:	89 c2                	mov    %eax,%edx
f012e791:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e794:	39 c2                	cmp    %eax,%edx
f012e796:	74 17                	je     f012e7af <test_krealloc_BF+0x1064>
			panic(
f012e798:	83 ec 04             	sub    $0x4,%esp
f012e79b:	68 cc c0 13 f0       	push   $0xf013c0cc
f012e7a0:	68 e4 11 00 00       	push   $0x11e4
f012e7a5:	68 da ac 13 f0       	push   $0xf013acda
f012e7aa:	e8 4c 1a fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012e7af:	83 ec 0c             	sub    $0xc,%esp
f012e7b2:	68 18 c1 13 f0       	push   $0xf013c118
f012e7b7:	e8 c6 24 fd ff       	call   f0100c82 <cprintf>
f012e7bc:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012e7bf:	e8 97 e1 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012e7c4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e7c7:	e8 70 55 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012e7cc:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012e7d2:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012e7d8:	83 ec 08             	sub    $0x8,%esp
f012e7db:	6a 00                	push   $0x0
f012e7dd:	50                   	push   %eax
f012e7de:	e8 d2 92 fd ff       	call   f0107ab5 <krealloc>
f012e7e3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e7e6:	e8 51 55 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012e7eb:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e7f1:	74 17                	je     f012e80a <test_krealloc_BF+0x10bf>
			panic(
f012e7f3:	83 ec 04             	sub    $0x4,%esp
f012e7f6:	68 3c c1 13 f0       	push   $0xf013c13c
f012e7fb:	68 f1 11 00 00       	push   $0x11f1
f012e800:	68 da ac 13 f0       	push   $0xf013acda
f012e805:	e8 f1 19 fd ff       	call   f01001fb <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012e80a:	e8 4c e1 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012e80f:	89 c2                	mov    %eax,%edx
f012e811:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e814:	29 c2                	sub    %eax,%edx
f012e816:	89 d0                	mov    %edx,%eax
f012e818:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e81d:	74 17                	je     f012e836 <test_krealloc_BF+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012e81f:	83 ec 04             	sub    $0x4,%esp
f012e822:	68 b0 c1 13 f0       	push   $0xf013c1b0
f012e827:	68 f3 11 00 00       	push   $0x11f3
f012e82c:	68 da ac 13 f0       	push   $0xf013acda
f012e831:	e8 c5 19 fd ff       	call   f01001fb <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012e836:	e8 20 e1 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012e83b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e83e:	e8 f9 54 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012e843:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012e849:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e84f:	83 ec 08             	sub    $0x8,%esp
f012e852:	6a 00                	push   $0x0
f012e854:	50                   	push   %eax
f012e855:	e8 5b 92 fd ff       	call   f0107ab5 <krealloc>
f012e85a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e85d:	e8 da 54 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012e862:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e868:	74 17                	je     f012e881 <test_krealloc_BF+0x1136>
			panic(
f012e86a:	83 ec 04             	sub    $0x4,%esp
f012e86d:	68 3c c1 13 f0       	push   $0xf013c13c
f012e872:	68 fc 11 00 00       	push   $0x11fc
f012e877:	68 da ac 13 f0       	push   $0xf013acda
f012e87c:	e8 7a 19 fd ff       	call   f01001fb <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012e881:	e8 d5 e0 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012e886:	89 c2                	mov    %eax,%edx
f012e888:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e88b:	29 c2                	sub    %eax,%edx
f012e88d:	89 d0                	mov    %edx,%eax
f012e88f:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e894:	74 17                	je     f012e8ad <test_krealloc_BF+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012e896:	83 ec 04             	sub    $0x4,%esp
f012e899:	68 b0 c1 13 f0       	push   $0xf013c1b0
f012e89e:	68 fe 11 00 00       	push   $0x11fe
f012e8a3:	68 da ac 13 f0       	push   $0xf013acda
f012e8a8:	e8 4e 19 fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012e8ad:	e8 a9 e0 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012e8b2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e8b5:	e8 82 54 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012e8ba:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012e8c0:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e8c6:	83 ec 08             	sub    $0x8,%esp
f012e8c9:	6a 00                	push   $0x0
f012e8cb:	50                   	push   %eax
f012e8cc:	e8 e4 91 fd ff       	call   f0107ab5 <krealloc>
f012e8d1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e8d4:	e8 63 54 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012e8d9:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e8df:	74 17                	je     f012e8f8 <test_krealloc_BF+0x11ad>
			panic(
f012e8e1:	83 ec 04             	sub    $0x4,%esp
f012e8e4:	68 f4 ac 13 f0       	push   $0xf013acf4
f012e8e9:	68 06 12 00 00       	push   $0x1206
f012e8ee:	68 da ac 13 f0       	push   $0xf013acda
f012e8f3:	e8 03 19 fd ff       	call   f01001fb <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012e8f8:	e8 5e e0 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012e8fd:	89 c2                	mov    %eax,%edx
f012e8ff:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e902:	29 c2                	sub    %eax,%edx
f012e904:	89 d0                	mov    %edx,%eax
f012e906:	3d 00 02 00 00       	cmp    $0x200,%eax
f012e90b:	74 17                	je     f012e924 <test_krealloc_BF+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012e90d:	83 ec 04             	sub    $0x4,%esp
f012e910:	68 b0 c1 13 f0       	push   $0xf013c1b0
f012e915:	68 08 12 00 00       	push   $0x1208
f012e91a:	68 da ac 13 f0       	push   $0xf013acda
f012e91f:	e8 d7 18 fd ff       	call   f01001fb <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012e924:	e8 32 e0 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012e929:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e92c:	e8 0b 54 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012e931:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012e937:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e93d:	83 ec 08             	sub    $0x8,%esp
f012e940:	6a 00                	push   $0x0
f012e942:	50                   	push   %eax
f012e943:	e8 6d 91 fd ff       	call   f0107ab5 <krealloc>
f012e948:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e94b:	e8 ec 53 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012e950:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e956:	74 17                	je     f012e96f <test_krealloc_BF+0x1224>
			panic(
f012e958:	83 ec 04             	sub    $0x4,%esp
f012e95b:	68 3c c1 13 f0       	push   $0xf013c13c
f012e960:	68 10 12 00 00       	push   $0x1210
f012e965:	68 da ac 13 f0       	push   $0xf013acda
f012e96a:	e8 8c 18 fd ff       	call   f01001fb <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012e96f:	e8 e7 df fd ff       	call   f010c95b <sys_calculate_free_frames>
f012e974:	89 c2                	mov    %eax,%edx
f012e976:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e979:	29 c2                	sub    %eax,%edx
f012e97b:	89 d0                	mov    %edx,%eax
f012e97d:	3d 00 03 00 00       	cmp    $0x300,%eax
f012e982:	74 17                	je     f012e99b <test_krealloc_BF+0x1250>
			panic(
f012e984:	83 ec 04             	sub    $0x4,%esp
f012e987:	68 e4 c1 13 f0       	push   $0xf013c1e4
f012e98c:	68 13 12 00 00       	push   $0x1213
f012e991:	68 da ac 13 f0       	push   $0xf013acda
f012e996:	e8 60 18 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012e99b:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012e9a2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012e9a9:	eb 48                	jmp    f012e9f3 <test_krealloc_BF+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012e9ab:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012e9ae:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f012e9b3:	83 ec 04             	sub    $0x4,%esp
f012e9b6:	8d 8d 9c fd ff ff    	lea    -0x264(%ebp),%ecx
f012e9bc:	51                   	push   %ecx
f012e9bd:	52                   	push   %edx
f012e9be:	50                   	push   %eax
f012e9bf:	e8 16 80 fd ff       	call   f01069da <get_page_table>
f012e9c4:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012e9c7:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012e9cd:	85 c0                	test   %eax,%eax
f012e9cf:	75 17                	jne    f012e9e8 <test_krealloc_BF+0x129d>
					panic(
f012e9d1:	83 ec 04             	sub    $0x4,%esp
f012e9d4:	68 dc b5 13 f0       	push   $0xf013b5dc
f012e9d9:	68 1f 12 00 00       	push   $0x121f
f012e9de:	68 da ac 13 f0       	push   $0xf013acda
f012e9e3:	e8 13 18 fd ff       	call   f01001fb <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012e9e8:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012e9ef:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012e9f3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e9f7:	78 b2                	js     f012e9ab <test_krealloc_BF+0x1260>
f012e9f9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e9fd:	7f 09                	jg     f012ea08 <test_krealloc_BF+0x12bd>
f012e9ff:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012ea06:	76 a3                	jbe    f012e9ab <test_krealloc_BF+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012ea08:	83 ec 0c             	sub    $0xc,%esp
f012ea0b:	68 23 c2 13 f0       	push   $0xf013c223
f012ea10:	e8 6d 22 fd ff       	call   f0100c82 <cprintf>
f012ea15:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012ea18:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ea1e:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012ea24:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012ea2b:	eb 21                	jmp    f012ea4e <test_krealloc_BF+0x1303>
			sums[0] += ptr[i];
f012ea2d:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012ea33:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012ea36:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012ea3c:	01 c8                	add    %ecx,%eax
f012ea3e:	8a 00                	mov    (%eax),%al
f012ea40:	0f be c0             	movsbl %al,%eax
f012ea43:	01 d0                	add    %edx,%eax
f012ea45:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012ea4b:	ff 45 dc             	incl   -0x24(%ebp)
f012ea4e:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012ea54:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012ea57:	7d d4                	jge    f012ea2d <test_krealloc_BF+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012ea59:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012ea5f:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012ea65:	42                   	inc    %edx
f012ea66:	01 d2                	add    %edx,%edx
f012ea68:	39 d0                	cmp    %edx,%eax
f012ea6a:	74 17                	je     f012ea83 <test_krealloc_BF+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012ea6c:	83 ec 04             	sub    $0x4,%esp
f012ea6f:	68 2c c2 13 f0       	push   $0xf013c22c
f012ea74:	68 31 12 00 00       	push   $0x1231
f012ea79:	68 da ac 13 f0       	push   $0xf013acda
f012ea7e:	e8 78 17 fd ff       	call   f01001fb <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012ea83:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012ea89:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012ea8f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012ea96:	eb 25                	jmp    f012eabd <test_krealloc_BF+0x1372>
			sums[1] += intArr[i];
f012ea98:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012ea9e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012eaa1:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012eaa8:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012eaae:	01 c8                	add    %ecx,%eax
f012eab0:	8b 00                	mov    (%eax),%eax
f012eab2:	01 d0                	add    %edx,%eax
f012eab4:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012eaba:	ff 45 dc             	incl   -0x24(%ebp)
f012eabd:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012eac3:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012eac6:	7d d0                	jge    f012ea98 <test_krealloc_BF+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012eac8:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012eace:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012ead4:	42                   	inc    %edx
f012ead5:	c1 e2 02             	shl    $0x2,%edx
f012ead8:	39 d0                	cmp    %edx,%eax
f012eada:	74 17                	je     f012eaf3 <test_krealloc_BF+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012eadc:	83 ec 04             	sub    $0x4,%esp
f012eadf:	68 2c c2 13 f0       	push   $0xf013c22c
f012eae4:	68 3b 12 00 00       	push   $0x123b
f012eae9:	68 da ac 13 f0       	push   $0xf013acda
f012eaee:	e8 08 17 fd ff       	call   f01001fb <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012eaf3:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012eaf9:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012eaff:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012eb06:	eb 24                	jmp    f012eb2c <test_krealloc_BF+0x13e1>
			sums[2] += shortArr[i];
f012eb08:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012eb0e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012eb11:	01 c0                	add    %eax,%eax
f012eb13:	89 c1                	mov    %eax,%ecx
f012eb15:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012eb1b:	01 c8                	add    %ecx,%eax
f012eb1d:	66 8b 00             	mov    (%eax),%ax
f012eb20:	98                   	cwtl   
f012eb21:	01 d0                	add    %edx,%eax
f012eb23:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012eb29:	ff 45 dc             	incl   -0x24(%ebp)
f012eb2c:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012eb32:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012eb35:	7d d1                	jge    f012eb08 <test_krealloc_BF+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012eb37:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012eb3d:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012eb43:	8d 48 01             	lea    0x1(%eax),%ecx
f012eb46:	89 c8                	mov    %ecx,%eax
f012eb48:	c1 e0 02             	shl    $0x2,%eax
f012eb4b:	01 c8                	add    %ecx,%eax
f012eb4d:	39 c2                	cmp    %eax,%edx
f012eb4f:	74 17                	je     f012eb68 <test_krealloc_BF+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012eb51:	83 ec 04             	sub    $0x4,%esp
f012eb54:	68 2c c2 13 f0       	push   $0xf013c22c
f012eb59:	68 45 12 00 00       	push   $0x1245
f012eb5e:	68 da ac 13 f0       	push   $0xf013acda
f012eb63:	e8 93 16 fd ff       	call   f01001fb <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012eb68:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012eb6e:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012eb74:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012eb7b:	eb 70                	jmp    f012ebed <test_krealloc_BF+0x14a2>
			sums[3] += structArr[i].a;
f012eb7d:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f012eb83:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012eb86:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012eb8d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012eb93:	01 c8                	add    %ecx,%eax
f012eb95:	8a 00                	mov    (%eax),%al
f012eb97:	0f be c0             	movsbl %al,%eax
f012eb9a:	01 d0                	add    %edx,%eax
f012eb9c:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
			sums[4] += structArr[i].b;
f012eba2:	8b 95 b0 fd ff ff    	mov    -0x250(%ebp),%edx
f012eba8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ebab:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012ebb2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ebb8:	01 c8                	add    %ecx,%eax
f012ebba:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ebbe:	98                   	cwtl   
f012ebbf:	01 d0                	add    %edx,%eax
f012ebc1:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
			sums[5] += structArr[i].c;
f012ebc7:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f012ebcd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ebd0:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012ebd7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ebdd:	01 c8                	add    %ecx,%eax
f012ebdf:	8b 40 04             	mov    0x4(%eax),%eax
f012ebe2:	01 d0                	add    %edx,%eax
f012ebe4:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012ebea:	ff 45 dc             	incl   -0x24(%ebp)
f012ebed:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ebf3:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012ebf6:	7d 85                	jge    f012eb7d <test_krealloc_BF+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012ebf8:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f012ebfe:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ec04:	8d 50 01             	lea    0x1(%eax),%edx
f012ec07:	89 d0                	mov    %edx,%eax
f012ec09:	01 c0                	add    %eax,%eax
f012ec0b:	01 d0                	add    %edx,%eax
f012ec0d:	01 c0                	add    %eax,%eax
f012ec0f:	01 d0                	add    %edx,%eax
f012ec11:	39 c1                	cmp    %eax,%ecx
f012ec13:	75 3a                	jne    f012ec4f <test_krealloc_BF+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012ec15:	8b 8d b0 fd ff ff    	mov    -0x250(%ebp),%ecx
f012ec1b:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ec21:	8d 50 01             	lea    0x1(%eax),%edx
f012ec24:	89 d0                	mov    %edx,%eax
f012ec26:	01 c0                	add    %eax,%eax
f012ec28:	01 d0                	add    %edx,%eax
f012ec2a:	01 c0                	add    %eax,%eax
f012ec2c:	01 d0                	add    %edx,%eax
f012ec2e:	39 c1                	cmp    %eax,%ecx
f012ec30:	75 1d                	jne    f012ec4f <test_krealloc_BF+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012ec32:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f012ec38:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ec3e:	8d 50 01             	lea    0x1(%eax),%edx
f012ec41:	89 d0                	mov    %edx,%eax
f012ec43:	01 c0                	add    %eax,%eax
f012ec45:	01 d0                	add    %edx,%eax
f012ec47:	01 c0                	add    %eax,%eax
f012ec49:	01 d0                	add    %edx,%eax
f012ec4b:	39 c1                	cmp    %eax,%ecx
f012ec4d:	74 17                	je     f012ec66 <test_krealloc_BF+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012ec4f:	83 ec 04             	sub    $0x4,%esp
f012ec52:	68 2c c2 13 f0       	push   $0xf013c22c
f012ec57:	68 53 12 00 00       	push   $0x1253
f012ec5c:	68 da ac 13 f0       	push   $0xf013acda
f012ec61:	e8 95 15 fd ff       	call   f01001fb <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012ec66:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012ec6d:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012ec70:	e8 e6 dc fd ff       	call   f010c95b <sys_calculate_free_frames>
f012ec75:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012ec78:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ec7e:	83 ec 08             	sub    $0x8,%esp
f012ec81:	68 00 3c 00 00       	push   $0x3c00
f012ec86:	50                   	push   %eax
f012ec87:	e8 29 8e fd ff       	call   f0107ab5 <krealloc>
f012ec8c:	83 c4 10             	add    $0x10,%esp
f012ec8f:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ec95:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012ec9b:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012eca0:	77 17                	ja     f012ecb9 <test_krealloc_BF+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012eca2:	83 ec 04             	sub    $0x4,%esp
f012eca5:	68 80 bf 13 f0       	push   $0xf013bf80
f012ecaa:	68 5f 12 00 00       	push   $0x125f
f012ecaf:	68 da ac 13 f0       	push   $0xf013acda
f012ecb4:	e8 42 15 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[1])
f012ecb9:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ecbf:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012ecc5:	74 17                	je     f012ecde <test_krealloc_BF+0x1593>
			panic(
f012ecc7:	83 ec 04             	sub    $0x4,%esp
f012ecca:	68 64 c2 13 f0       	push   $0xf013c264
f012eccf:	68 62 12 00 00       	push   $0x1262
f012ecd4:	68 da ac 13 f0       	push   $0xf013acda
f012ecd9:	e8 1d 15 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012ecde:	e8 78 dc fd ff       	call   f010c95b <sys_calculate_free_frames>
f012ece3:	89 c2                	mov    %eax,%edx
f012ece5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ece8:	39 c2                	cmp    %eax,%edx
f012ecea:	74 17                	je     f012ed03 <test_krealloc_BF+0x15b8>
			panic(
f012ecec:	83 ec 04             	sub    $0x4,%esp
f012ecef:	68 d0 c2 13 f0       	push   $0xf013c2d0
f012ecf4:	68 65 12 00 00       	push   $0x1265
f012ecf9:	68 da ac 13 f0       	push   $0xf013acda
f012ecfe:	e8 f8 14 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012ed03:	e8 53 dc fd ff       	call   f010c95b <sys_calculate_free_frames>
f012ed08:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012ed0b:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ed11:	83 ec 08             	sub    $0x8,%esp
f012ed14:	68 00 fc 0f 00       	push   $0xffc00
f012ed19:	50                   	push   %eax
f012ed1a:	e8 96 8d fd ff       	call   f0107ab5 <krealloc>
f012ed1f:	83 c4 10             	add    $0x10,%esp
f012ed22:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ed28:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012ed2e:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ed33:	77 17                	ja     f012ed4c <test_krealloc_BF+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ed35:	83 ec 04             	sub    $0x4,%esp
f012ed38:	68 80 bf 13 f0       	push   $0xf013bf80
f012ed3d:	68 6b 12 00 00       	push   $0x126b
f012ed42:	68 da ac 13 f0       	push   $0xf013acda
f012ed47:	e8 af 14 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[4])
f012ed4c:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ed52:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012ed58:	74 17                	je     f012ed71 <test_krealloc_BF+0x1626>
			panic(
f012ed5a:	83 ec 04             	sub    $0x4,%esp
f012ed5d:	68 64 c2 13 f0       	push   $0xf013c264
f012ed62:	68 6e 12 00 00       	push   $0x126e
f012ed67:	68 da ac 13 f0       	push   $0xf013acda
f012ed6c:	e8 8a 14 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012ed71:	e8 e5 db fd ff       	call   f010c95b <sys_calculate_free_frames>
f012ed76:	89 c2                	mov    %eax,%edx
f012ed78:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ed7b:	39 c2                	cmp    %eax,%edx
f012ed7d:	74 17                	je     f012ed96 <test_krealloc_BF+0x164b>
			panic(
f012ed7f:	83 ec 04             	sub    $0x4,%esp
f012ed82:	68 d0 c2 13 f0       	push   $0xf013c2d0
f012ed87:	68 71 12 00 00       	push   $0x1271
f012ed8c:	68 da ac 13 f0       	push   $0xf013acda
f012ed91:	e8 65 14 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012ed96:	e8 c0 db fd ff       	call   f010c95b <sys_calculate_free_frames>
f012ed9b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012ed9e:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012eda4:	83 ec 08             	sub    $0x8,%esp
f012eda7:	68 00 fc 0f 00       	push   $0xffc00
f012edac:	50                   	push   %eax
f012edad:	e8 03 8d fd ff       	call   f0107ab5 <krealloc>
f012edb2:	83 c4 10             	add    $0x10,%esp
f012edb5:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012edbb:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012edc1:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012edc6:	77 17                	ja     f012eddf <test_krealloc_BF+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012edc8:	83 ec 04             	sub    $0x4,%esp
f012edcb:	68 80 bf 13 f0       	push   $0xf013bf80
f012edd0:	68 77 12 00 00       	push   $0x1277
f012edd5:	68 da ac 13 f0       	push   $0xf013acda
f012edda:	e8 1c 14 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[1])
f012eddf:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ede5:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012edeb:	74 17                	je     f012ee04 <test_krealloc_BF+0x16b9>
			panic(
f012eded:	83 ec 04             	sub    $0x4,%esp
f012edf0:	68 64 c2 13 f0       	push   $0xf013c264
f012edf5:	68 7a 12 00 00       	push   $0x127a
f012edfa:	68 da ac 13 f0       	push   $0xf013acda
f012edff:	e8 f7 13 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012ee04:	e8 52 db fd ff       	call   f010c95b <sys_calculate_free_frames>
f012ee09:	89 c2                	mov    %eax,%edx
f012ee0b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ee0e:	39 c2                	cmp    %eax,%edx
f012ee10:	74 17                	je     f012ee29 <test_krealloc_BF+0x16de>
			panic(
f012ee12:	83 ec 04             	sub    $0x4,%esp
f012ee15:	68 d0 c2 13 f0       	push   $0xf013c2d0
f012ee1a:	68 7d 12 00 00       	push   $0x127d
f012ee1f:	68 da ac 13 f0       	push   $0xf013acda
f012ee24:	e8 d2 13 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012ee29:	e8 2d db fd ff       	call   f010c95b <sys_calculate_free_frames>
f012ee2e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012ee31:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012ee37:	83 ec 08             	sub    $0x8,%esp
f012ee3a:	68 00 fc 0f 00       	push   $0xffc00
f012ee3f:	50                   	push   %eax
f012ee40:	e8 70 8c fd ff       	call   f0107ab5 <krealloc>
f012ee45:	83 c4 10             	add    $0x10,%esp
f012ee48:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ee4e:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012ee54:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ee59:	77 17                	ja     f012ee72 <test_krealloc_BF+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ee5b:	83 ec 04             	sub    $0x4,%esp
f012ee5e:	68 80 bf 13 f0       	push   $0xf013bf80
f012ee63:	68 85 12 00 00       	push   $0x1285
f012ee68:	68 da ac 13 f0       	push   $0xf013acda
f012ee6d:	e8 89 13 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[3])
f012ee72:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012ee78:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012ee7e:	74 17                	je     f012ee97 <test_krealloc_BF+0x174c>
			panic(
f012ee80:	83 ec 04             	sub    $0x4,%esp
f012ee83:	68 14 c3 13 f0       	push   $0xf013c314
f012ee88:	68 88 12 00 00       	push   $0x1288
f012ee8d:	68 da ac 13 f0       	push   $0xf013acda
f012ee92:	e8 64 13 fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012ee97:	e8 bf da fd ff       	call   f010c95b <sys_calculate_free_frames>
f012ee9c:	89 c2                	mov    %eax,%edx
f012ee9e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012eea1:	39 c2                	cmp    %eax,%edx
f012eea3:	74 17                	je     f012eebc <test_krealloc_BF+0x1771>
			panic(
f012eea5:	83 ec 04             	sub    $0x4,%esp
f012eea8:	68 d0 c2 13 f0       	push   $0xf013c2d0
f012eead:	68 8b 12 00 00       	push   $0x128b
f012eeb2:	68 da ac 13 f0       	push   $0xf013acda
f012eeb7:	e8 3f 13 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012eebc:	83 ec 0c             	sub    $0xc,%esp
f012eebf:	68 f3 b4 13 f0       	push   $0xf013b4f3
f012eec4:	e8 b9 1d fd ff       	call   f0100c82 <cprintf>
f012eec9:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012eecc:	e8 8a da fd ff       	call   f010c95b <sys_calculate_free_frames>
f012eed1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], (1 * Mega - kilo) + (7 * kilo));
f012eed4:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012eeda:	83 ec 08             	sub    $0x8,%esp
f012eedd:	68 00 18 10 00       	push   $0x101800
f012eee2:	50                   	push   %eax
f012eee3:	e8 cd 8b fd ff       	call   f0107ab5 <krealloc>
f012eee8:	83 c4 10             	add    $0x10,%esp
f012eeeb:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012eeee:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012eef1:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012eef6:	77 17                	ja     f012ef0f <test_krealloc_BF+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012eef8:	83 ec 04             	sub    $0x4,%esp
f012eefb:	68 80 bf 13 f0       	push   $0xf013bf80
f012ef00:	68 93 12 00 00       	push   $0x1293
f012ef05:	68 da ac 13 f0       	push   $0xf013acda
f012ef0a:	e8 ec 12 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[1])
f012ef0f:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ef15:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012ef18:	74 17                	je     f012ef31 <test_krealloc_BF+0x17e6>
			panic(
f012ef1a:	83 ec 04             	sub    $0x4,%esp
f012ef1d:	68 74 c3 13 f0       	push   $0xf013c374
f012ef22:	68 96 12 00 00       	push   $0x1296
f012ef27:	68 da ac 13 f0       	push   $0xf013acda
f012ef2c:	e8 ca 12 fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012ef31:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ef34:	e8 22 da fd ff       	call   f010c95b <sys_calculate_free_frames>
f012ef39:	29 c3                	sub    %eax,%ebx
f012ef3b:	89 d8                	mov    %ebx,%eax
f012ef3d:	83 f8 02             	cmp    $0x2,%eax
f012ef40:	74 17                	je     f012ef59 <test_krealloc_BF+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012ef42:	83 ec 04             	sub    $0x4,%esp
f012ef45:	68 f0 c3 13 f0       	push   $0xf013c3f0
f012ef4a:	68 98 12 00 00       	push   $0x1298
f012ef4f:	68 da ac 13 f0       	push   $0xf013acda
f012ef54:	e8 a2 12 fd ff       	call   f01001fb <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012ef59:	e8 fd d9 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012ef5e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012ef61:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ef67:	83 ec 08             	sub    $0x8,%esp
f012ef6a:	68 00 fc 3f 00       	push   $0x3ffc00
f012ef6f:	50                   	push   %eax
f012ef70:	e8 40 8b fd ff       	call   f0107ab5 <krealloc>
f012ef75:	83 c4 10             	add    $0x10,%esp
f012ef78:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ef7b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ef7e:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ef83:	77 17                	ja     f012ef9c <test_krealloc_BF+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ef85:	83 ec 04             	sub    $0x4,%esp
f012ef88:	68 80 bf 13 f0       	push   $0xf013bf80
f012ef8d:	68 9e 12 00 00       	push   $0x129e
f012ef92:	68 da ac 13 f0       	push   $0xf013acda
f012ef97:	e8 5f 12 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[4])
f012ef9c:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012efa2:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012efa5:	74 17                	je     f012efbe <test_krealloc_BF+0x1873>
			panic(
f012efa7:	83 ec 04             	sub    $0x4,%esp
f012efaa:	68 74 c3 13 f0       	push   $0xf013c374
f012efaf:	68 a1 12 00 00       	push   $0x12a1
f012efb4:	68 da ac 13 f0       	push   $0xf013acda
f012efb9:	e8 3d 12 fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012efbe:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012efc1:	e8 95 d9 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012efc6:	29 c3                	sub    %eax,%ebx
f012efc8:	89 d8                	mov    %ebx,%eax
f012efca:	3d 00 02 00 00       	cmp    $0x200,%eax
f012efcf:	74 17                	je     f012efe8 <test_krealloc_BF+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012efd1:	83 ec 04             	sub    $0x4,%esp
f012efd4:	68 f0 c3 13 f0       	push   $0xf013c3f0
f012efd9:	68 a4 12 00 00       	push   $0x12a4
f012efde:	68 da ac 13 f0       	push   $0xf013acda
f012efe3:	e8 13 12 fd ff       	call   f01001fb <_panic>


	}
	cprintf("\b\b\b60%");
f012efe8:	83 ec 0c             	sub    $0xc,%esp
f012efeb:	68 38 b5 13 f0       	push   $0xf013b538
f012eff0:	e8 8d 1c fd ff       	call   f0100c82 <cprintf>
f012eff5:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012eff8:	e8 5e d9 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012effd:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012f000:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f006:	83 ec 08             	sub    $0x8,%esp
f012f009:	68 00 fc 9f 00       	push   $0x9ffc00
f012f00e:	50                   	push   %eax
f012f00f:	e8 a1 8a fd ff       	call   f0107ab5 <krealloc>
f012f014:	83 c4 10             	add    $0x10,%esp
f012f017:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f01a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f01d:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f022:	77 17                	ja     f012f03b <test_krealloc_BF+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f024:	83 ec 04             	sub    $0x4,%esp
f012f027:	68 80 bf 13 f0       	push   $0xf013bf80
f012f02c:	68 af 12 00 00       	push   $0x12af
f012f031:	68 da ac 13 f0       	push   $0xf013acda
f012f036:	e8 c0 11 fd ff       	call   f01001fb <_panic>
		if ((uint32) newAddress != ACTUAL_START + (11 * Mega))
f012f03b:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012f042:	10 00 00 
f012f045:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012f04b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f050:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012f056:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012f05c:	ba 00 00 00 00       	mov    $0x0,%edx
f012f061:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012f067:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012f06d:	29 d0                	sub    %edx,%eax
f012f06f:	89 c1                	mov    %eax,%ecx
f012f071:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012f078:	10 00 00 
f012f07b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012f080:	0f b6 d0             	movzbl %al,%edx
f012f083:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012f089:	01 d0                	add    %edx,%eax
f012f08b:	48                   	dec    %eax
f012f08c:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012f092:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012f098:	ba 00 00 00 00       	mov    $0x0,%edx
f012f09d:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012f0a3:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012f0a9:	29 d0                	sub    %edx,%eax
f012f0ab:	01 c1                	add    %eax,%ecx
f012f0ad:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012f0b4:	10 00 00 
f012f0b7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012f0bc:	0f b6 c0             	movzbl %al,%eax
f012f0bf:	c1 e0 04             	shl    $0x4,%eax
f012f0c2:	89 c2                	mov    %eax,%edx
f012f0c4:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012f0ca:	01 d0                	add    %edx,%eax
f012f0cc:	48                   	dec    %eax
f012f0cd:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012f0d3:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012f0d9:	ba 00 00 00 00       	mov    $0x0,%edx
f012f0de:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012f0e4:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012f0ea:	29 d0                	sub    %edx,%eax
f012f0ec:	01 c8                	add    %ecx,%eax
f012f0ee:	8d 90 00 40 b0 f6    	lea    -0x94fc000(%eax),%edx
f012f0f4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f0f7:	39 c2                	cmp    %eax,%edx
f012f0f9:	74 18                	je     f012f113 <test_krealloc_BF+0x19c8>
			panic(
f012f0fb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f0fe:	50                   	push   %eax
f012f0ff:	68 24 c4 13 f0       	push   $0xf013c424
f012f104:	68 b3 12 00 00       	push   $0x12b3
f012f109:	68 da ac 13 f0       	push   $0xf013acda
f012f10e:	e8 e8 10 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012f113:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f119:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f11c:	75 17                	jne    f012f135 <test_krealloc_BF+0x19ea>
			panic(
f012f11e:	83 ec 04             	sub    $0x4,%esp
f012f121:	68 68 c4 13 f0       	push   $0xf013c468
f012f126:	68 b6 12 00 00       	push   $0x12b6
f012f12b:	68 da ac 13 f0       	push   $0xf013acda
f012f130:	e8 c6 10 fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012f135:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f138:	e8 1e d8 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012f13d:	29 c3                	sub    %eax,%ebx
f012f13f:	89 d8                	mov    %ebx,%eax
f012f141:	3d 00 06 00 00       	cmp    $0x600,%eax
f012f146:	74 17                	je     f012f15f <test_krealloc_BF+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012f148:	83 ec 04             	sub    $0x4,%esp
f012f14b:	68 f0 c3 13 f0       	push   $0xf013c3f0
f012f150:	68 b9 12 00 00       	push   $0x12b9
f012f155:	68 da ac 13 f0       	push   $0xf013acda
f012f15a:	e8 9c 10 fd ff       	call   f01001fb <_panic>

		ptr_allocations[4] = newAddress;
f012f15f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f162:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 4 MB
		freeFrames = sys_calculate_free_frames();
f012f168:	e8 ee d7 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012f16d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (4 * Mega - kilo));
f012f170:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f176:	83 ec 08             	sub    $0x8,%esp
f012f179:	68 00 fc 3f 00       	push   $0x3ffc00
f012f17e:	50                   	push   %eax
f012f17f:	e8 31 89 fd ff       	call   f0107ab5 <krealloc>
f012f184:	83 c4 10             	add    $0x10,%esp
f012f187:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f18a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f18d:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f192:	77 17                	ja     f012f1ab <test_krealloc_BF+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f194:	83 ec 04             	sub    $0x4,%esp
f012f197:	68 80 bf 13 f0       	push   $0xf013bf80
f012f19c:	68 c2 12 00 00       	push   $0x12c2
f012f1a1:	68 da ac 13 f0       	push   $0xf013acda
f012f1a6:	e8 50 10 fd ff       	call   f01001fb <_panic>
		if (newAddress == ptr_allocations[6])
f012f1ab:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f1b1:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f1b4:	75 17                	jne    f012f1cd <test_krealloc_BF+0x1a82>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012f1b6:	83 ec 04             	sub    $0x4,%esp
f012f1b9:	68 68 c4 13 f0       	push   $0xf013c468
f012f1be:	68 c4 12 00 00       	push   $0x12c4
f012f1c3:	68 da ac 13 f0       	push   $0xf013acda
f012f1c8:	e8 2e 10 fd ff       	call   f01001fb <_panic>
		if ((uint32)newAddress != ACTUAL_START + 4 * Mega) panic("krealloc: Wrong start address for allocated space");
f012f1cd:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012f1d4:	10 00 00 
f012f1d7:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012f1dd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f1e2:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012f1e8:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012f1ee:	ba 00 00 00 00       	mov    $0x0,%edx
f012f1f3:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012f1f9:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012f1ff:	29 d0                	sub    %edx,%eax
f012f201:	89 c1                	mov    %eax,%ecx
f012f203:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012f20a:	10 00 00 
f012f20d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012f212:	0f b6 d0             	movzbl %al,%edx
f012f215:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012f21b:	01 d0                	add    %edx,%eax
f012f21d:	48                   	dec    %eax
f012f21e:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012f224:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012f22a:	ba 00 00 00 00       	mov    $0x0,%edx
f012f22f:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012f235:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012f23b:	29 d0                	sub    %edx,%eax
f012f23d:	01 c1                	add    %eax,%ecx
f012f23f:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012f246:	10 00 00 
f012f249:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012f24e:	0f b6 c0             	movzbl %al,%eax
f012f251:	c1 e0 04             	shl    $0x4,%eax
f012f254:	89 c2                	mov    %eax,%edx
f012f256:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012f25c:	01 d0                	add    %edx,%eax
f012f25e:	48                   	dec    %eax
f012f25f:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012f265:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012f26b:	ba 00 00 00 00       	mov    $0x0,%edx
f012f270:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012f276:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012f27c:	29 d0                	sub    %edx,%eax
f012f27e:	01 c8                	add    %ecx,%eax
f012f280:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f012f286:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f289:	39 c2                	cmp    %eax,%edx
f012f28b:	74 17                	je     f012f2a4 <test_krealloc_BF+0x1b59>
f012f28d:	83 ec 04             	sub    $0x4,%esp
f012f290:	68 bc bf 13 f0       	push   $0xf013bfbc
f012f295:	68 c5 12 00 00       	push   $0x12c5
f012f29a:	68 da ac 13 f0       	push   $0xf013acda
f012f29f:	e8 57 0f fd ff       	call   f01001fb <_panic>

		//1 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 256)
f012f2a4:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f2a7:	e8 af d6 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012f2ac:	29 c3                	sub    %eax,%ebx
f012f2ae:	89 d8                	mov    %ebx,%eax
f012f2b0:	3d 00 01 00 00       	cmp    $0x100,%eax
f012f2b5:	74 17                	je     f012f2ce <test_krealloc_BF+0x1b83>
			panic("krealloc: pages in memory are not loaded correctly");
f012f2b7:	83 ec 04             	sub    $0x4,%esp
f012f2ba:	68 f0 c3 13 f0       	push   $0xf013c3f0
f012f2bf:	68 c9 12 00 00       	push   $0x12c9
f012f2c4:	68 da ac 13 f0       	push   $0xf013acda
f012f2c9:	e8 2d 0f fd ff       	call   f01001fb <_panic>
		ptr_allocations[6] = newAddress;
f012f2ce:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f2d1:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		//Reallocate 1st 3 MB (already reallocated to 4 MB) to 20 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012f2d7:	e8 7f d6 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012f2dc:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012f2df:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f2e5:	83 ec 08             	sub    $0x8,%esp
f012f2e8:	68 00 fc 3f 01       	push   $0x13ffc00
f012f2ed:	50                   	push   %eax
f012f2ee:	e8 c2 87 fd ff       	call   f0107ab5 <krealloc>
f012f2f3:	83 c4 10             	add    $0x10,%esp
f012f2f6:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f2f9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f2fc:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f301:	77 17                	ja     f012f31a <test_krealloc_BF+0x1bcf>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f303:	83 ec 04             	sub    $0x4,%esp
f012f306:	68 80 bf 13 f0       	push   $0xf013bf80
f012f30b:	68 cf 12 00 00       	push   $0x12cf
f012f310:	68 da ac 13 f0       	push   $0xf013acda
f012f315:	e8 e1 0e fd ff       	call   f01001fb <_panic>
		if (newAddress == ptr_allocations[6])
f012f31a:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f320:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f323:	75 17                	jne    f012f33c <test_krealloc_BF+0x1bf1>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012f325:	83 ec 04             	sub    $0x4,%esp
f012f328:	68 68 c4 13 f0       	push   $0xf013c468
f012f32d:	68 d1 12 00 00       	push   $0x12d1
f012f332:	68 da ac 13 f0       	push   $0xf013acda
f012f337:	e8 bf 0e fd ff       	call   f01001fb <_panic>
		if ((uint32) newAddress != ACTUAL_START + (21 * Mega))
f012f33c:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f012f343:	10 00 00 
f012f346:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012f34c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f351:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f012f357:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012f35d:	ba 00 00 00 00       	mov    $0x0,%edx
f012f362:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f012f368:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012f36e:	29 d0                	sub    %edx,%eax
f012f370:	89 c1                	mov    %eax,%ecx
f012f372:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f012f379:	10 00 00 
f012f37c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012f381:	0f b6 d0             	movzbl %al,%edx
f012f384:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012f38a:	01 d0                	add    %edx,%eax
f012f38c:	48                   	dec    %eax
f012f38d:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f012f393:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012f399:	ba 00 00 00 00       	mov    $0x0,%edx
f012f39e:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f012f3a4:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012f3aa:	29 d0                	sub    %edx,%eax
f012f3ac:	01 c1                	add    %eax,%ecx
f012f3ae:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f012f3b5:	10 00 00 
f012f3b8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012f3bd:	0f b6 c0             	movzbl %al,%eax
f012f3c0:	c1 e0 04             	shl    $0x4,%eax
f012f3c3:	89 c2                	mov    %eax,%edx
f012f3c5:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012f3cb:	01 d0                	add    %edx,%eax
f012f3cd:	48                   	dec    %eax
f012f3ce:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f012f3d4:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012f3da:	ba 00 00 00 00       	mov    $0x0,%edx
f012f3df:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f012f3e5:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012f3eb:	29 d0                	sub    %edx,%eax
f012f3ed:	01 c8                	add    %ecx,%eax
f012f3ef:	8d 90 00 40 50 f7    	lea    -0x8afc000(%eax),%edx
f012f3f5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f3f8:	39 c2                	cmp    %eax,%edx
f012f3fa:	74 17                	je     f012f413 <test_krealloc_BF+0x1cc8>
			panic("krealloc: Wrong start address for reallocated space\n");
f012f3fc:	83 ec 04             	sub    $0x4,%esp
f012f3ff:	68 88 c5 13 f0       	push   $0xf013c588
f012f404:	68 d3 12 00 00       	push   $0x12d3
f012f409:	68 da ac 13 f0       	push   $0xf013acda
f012f40e:	e8 e8 0d fd ff       	call   f01001fb <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != (16 * Mega) / PAGE_SIZE)
f012f413:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f416:	e8 40 d5 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012f41b:	29 c3                	sub    %eax,%ebx
f012f41d:	89 d8                	mov    %ebx,%eax
f012f41f:	3d 00 10 00 00       	cmp    $0x1000,%eax
f012f424:	74 17                	je     f012f43d <test_krealloc_BF+0x1cf2>
			panic("krealloc: pages in memory are not loaded correctly");
f012f426:	83 ec 04             	sub    $0x4,%esp
f012f429:	68 f0 c3 13 f0       	push   $0xf013c3f0
f012f42e:	68 d6 12 00 00       	push   $0x12d6
f012f433:	68 da ac 13 f0       	push   $0xf013acda
f012f438:	e8 be 0d fd ff       	call   f01001fb <_panic>

		ptr_allocations[6] = newAddress;
f012f43d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f440:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012f446:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f44c:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012f452:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012f459:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f45c:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012f463:	eb 21                	jmp    f012f486 <test_krealloc_BF+0x1d3b>
			sums[0] += ptr[i];
f012f465:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f46b:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012f46e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012f474:	01 c8                	add    %ecx,%eax
f012f476:	8a 00                	mov    (%eax),%al
f012f478:	0f be c0             	movsbl %al,%eax
f012f47b:	01 d0                	add    %edx,%eax
f012f47d:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f483:	ff 45 d8             	incl   -0x28(%ebp)
f012f486:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012f48c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012f48f:	7d d4                	jge    f012f465 <test_krealloc_BF+0x1d1a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012f491:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012f497:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012f49d:	42                   	inc    %edx
f012f49e:	01 d2                	add    %edx,%edx
f012f4a0:	39 d0                	cmp    %edx,%eax
f012f4a2:	74 17                	je     f012f4bb <test_krealloc_BF+0x1d70>
			panic("krealloc: invalid read after re-allocations");
f012f4a4:	83 ec 04             	sub    $0x4,%esp
f012f4a7:	68 20 c5 13 f0       	push   $0xf013c520
f012f4ac:	68 e4 12 00 00       	push   $0x12e4
f012f4b1:	68 da ac 13 f0       	push   $0xf013acda
f012f4b6:	e8 40 0d fd ff       	call   f01001fb <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012f4bb:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f4c1:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012f4c7:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012f4ce:	00 00 00 
		sums[1] = 0;
f012f4d1:	c7 85 a4 fd ff ff 00 	movl   $0x0,-0x25c(%ebp)
f012f4d8:	00 00 00 
		sums[2] = 0;
f012f4db:	c7 85 a8 fd ff ff 00 	movl   $0x0,-0x258(%ebp)
f012f4e2:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012f4e5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012f4ec:	eb 70                	jmp    f012f55e <test_krealloc_BF+0x1e13>
			sums[0] += structArr[i].a;
f012f4ee:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f4f4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f4f7:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f4fe:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f504:	01 c8                	add    %ecx,%eax
f012f506:	8a 00                	mov    (%eax),%al
f012f508:	0f be c0             	movsbl %al,%eax
f012f50b:	01 d0                	add    %edx,%eax
f012f50d:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
			sums[1] += structArr[i].b;
f012f513:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012f519:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f51c:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f523:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f529:	01 c8                	add    %ecx,%eax
f012f52b:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f52f:	98                   	cwtl   
f012f530:	01 d0                	add    %edx,%eax
f012f532:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
			sums[2] += structArr[i].c;
f012f538:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012f53e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f541:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f548:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f54e:	01 c8                	add    %ecx,%eax
f012f550:	8b 40 04             	mov    0x4(%eax),%eax
f012f553:	01 d0                	add    %edx,%eax
f012f555:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012f55b:	ff 45 d8             	incl   -0x28(%ebp)
f012f55e:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f564:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012f567:	7d 85                	jge    f012f4ee <test_krealloc_BF+0x1da3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012f569:	8b 8d a0 fd ff ff    	mov    -0x260(%ebp),%ecx
f012f56f:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f575:	8d 50 01             	lea    0x1(%eax),%edx
f012f578:	89 d0                	mov    %edx,%eax
f012f57a:	01 c0                	add    %eax,%eax
f012f57c:	01 d0                	add    %edx,%eax
f012f57e:	01 c0                	add    %eax,%eax
f012f580:	01 d0                	add    %edx,%eax
f012f582:	39 c1                	cmp    %eax,%ecx
f012f584:	75 3a                	jne    f012f5c0 <test_krealloc_BF+0x1e75>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012f586:	8b 8d a4 fd ff ff    	mov    -0x25c(%ebp),%ecx
f012f58c:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f592:	8d 50 01             	lea    0x1(%eax),%edx
f012f595:	89 d0                	mov    %edx,%eax
f012f597:	01 c0                	add    %eax,%eax
f012f599:	01 d0                	add    %edx,%eax
f012f59b:	01 c0                	add    %eax,%eax
f012f59d:	01 d0                	add    %edx,%eax
f012f59f:	39 c1                	cmp    %eax,%ecx
f012f5a1:	75 1d                	jne    f012f5c0 <test_krealloc_BF+0x1e75>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012f5a3:	8b 8d a8 fd ff ff    	mov    -0x258(%ebp),%ecx
f012f5a9:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f5af:	8d 50 01             	lea    0x1(%eax),%edx
f012f5b2:	89 d0                	mov    %edx,%eax
f012f5b4:	01 c0                	add    %eax,%eax
f012f5b6:	01 d0                	add    %edx,%eax
f012f5b8:	01 c0                	add    %eax,%eax
f012f5ba:	01 d0                	add    %edx,%eax
f012f5bc:	39 c1                	cmp    %eax,%ecx
f012f5be:	74 17                	je     f012f5d7 <test_krealloc_BF+0x1e8c>
			panic("krealloc: invalid read after re-allocations");
f012f5c0:	83 ec 04             	sub    $0x4,%esp
f012f5c3:	68 20 c5 13 f0       	push   $0xf013c520
f012f5c8:	68 f6 12 00 00       	push   $0x12f6
f012f5cd:	68 da ac 13 f0       	push   $0xf013acda
f012f5d2:	e8 24 0c fd ff       	call   f01001fb <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012f5d7:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f5dd:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012f5e3:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012f5ea:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012f5ed:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012f5f4:	eb 24                	jmp    f012f61a <test_krealloc_BF+0x1ecf>
			sums[0] += shortArr[i];
f012f5f6:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f5fc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f5ff:	01 c0                	add    %eax,%eax
f012f601:	89 c1                	mov    %eax,%ecx
f012f603:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f609:	01 c8                	add    %ecx,%eax
f012f60b:	66 8b 00             	mov    (%eax),%ax
f012f60e:	98                   	cwtl   
f012f60f:	01 d0                	add    %edx,%eax
f012f611:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012f617:	ff 45 d8             	incl   -0x28(%ebp)
f012f61a:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f620:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012f623:	7d d1                	jge    f012f5f6 <test_krealloc_BF+0x1eab>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012f625:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f62b:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f631:	8d 48 01             	lea    0x1(%eax),%ecx
f012f634:	89 c8                	mov    %ecx,%eax
f012f636:	c1 e0 02             	shl    $0x2,%eax
f012f639:	01 c8                	add    %ecx,%eax
f012f63b:	39 c2                	cmp    %eax,%edx
f012f63d:	74 17                	je     f012f656 <test_krealloc_BF+0x1f0b>
			panic("krealloc: invalid read after re-allocations");
f012f63f:	83 ec 04             	sub    $0x4,%esp
f012f642:	68 20 c5 13 f0       	push   $0xf013c520
f012f647:	68 00 13 00 00       	push   $0x1300
f012f64c:	68 da ac 13 f0       	push   $0xf013acda
f012f651:	e8 a5 0b fd ff       	call   f01001fb <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012f656:	e8 00 d3 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012f65b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f65e:	e8 d9 46 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012f663:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012f669:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f66f:	83 ec 08             	sub    $0x8,%esp
f012f672:	6a 00                	push   $0x0
f012f674:	50                   	push   %eax
f012f675:	e8 3b 84 fd ff       	call   f0107ab5 <krealloc>
f012f67a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f67d:	e8 ba 46 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012f682:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f688:	74 17                	je     f012f6a1 <test_krealloc_BF+0x1f56>
			panic(
f012f68a:	83 ec 04             	sub    $0x4,%esp
f012f68d:	68 f4 ac 13 f0       	push   $0xf013acf4
f012f692:	68 08 13 00 00       	push   $0x1308
f012f697:	68 da ac 13 f0       	push   $0xf013acda
f012f69c:	e8 5a 0b fd ff       	call   f01001fb <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012f6a1:	e8 b5 d2 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012f6a6:	89 c2                	mov    %eax,%edx
f012f6a8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f6ab:	29 c2                	sub    %eax,%edx
f012f6ad:	89 d0                	mov    %edx,%eax
f012f6af:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012f6b4:	74 17                	je     f012f6cd <test_krealloc_BF+0x1f82>
			panic("krealloc: pages in memory are not freed correctly");
f012f6b6:	83 ec 04             	sub    $0x4,%esp
f012f6b9:	68 b0 c1 13 f0       	push   $0xf013c1b0
f012f6be:	68 0a 13 00 00       	push   $0x130a
f012f6c3:	68 da ac 13 f0       	push   $0xf013acda
f012f6c8:	e8 2e 0b fd ff       	call   f01001fb <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012f6cd:	e8 89 d2 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012f6d2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f6d5:	e8 62 46 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012f6da:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012f6e0:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f6e6:	83 ec 0c             	sub    $0xc,%esp
f012f6e9:	50                   	push   %eax
f012f6ea:	e8 d1 81 fd ff       	call   f01078c0 <kfree>
f012f6ef:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f6f2:	e8 45 46 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012f6f7:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f6fd:	74 17                	je     f012f716 <test_krealloc_BF+0x1fcb>
			panic(
f012f6ff:	83 ec 04             	sub    $0x4,%esp
f012f702:	68 f4 ac 13 f0       	push   $0xf013acf4
f012f707:	68 12 13 00 00       	push   $0x1312
f012f70c:	68 da ac 13 f0       	push   $0xf013acda
f012f711:	e8 e5 0a fd ff       	call   f01001fb <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012f716:	e8 40 d2 fd ff       	call   f010c95b <sys_calculate_free_frames>
f012f71b:	89 c2                	mov    %eax,%edx
f012f71d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f720:	29 c2                	sub    %eax,%edx
f012f722:	89 d0                	mov    %edx,%eax
f012f724:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012f729:	74 17                	je     f012f742 <test_krealloc_BF+0x1ff7>
			panic("krealloc: pages in memory are not freed correctly");
f012f72b:	83 ec 04             	sub    $0x4,%esp
f012f72e:	68 b0 c1 13 f0       	push   $0xf013c1b0
f012f733:	68 14 13 00 00       	push   $0x1314
f012f738:	68 da ac 13 f0       	push   $0xf013acda
f012f73d:	e8 b9 0a fd ff       	call   f01001fb <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012f742:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012f749:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012f750:	eb 48                	jmp    f012f79a <test_krealloc_BF+0x204f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012f752:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012f755:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f012f75a:	83 ec 04             	sub    $0x4,%esp
f012f75d:	8d 8d 98 fd ff ff    	lea    -0x268(%ebp),%ecx
f012f763:	51                   	push   %ecx
f012f764:	52                   	push   %edx
f012f765:	50                   	push   %eax
f012f766:	e8 6f 72 fd ff       	call   f01069da <get_page_table>
f012f76b:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012f76e:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012f774:	85 c0                	test   %eax,%eax
f012f776:	75 17                	jne    f012f78f <test_krealloc_BF+0x2044>
					panic(
f012f778:	83 ec 04             	sub    $0x4,%esp
f012f77b:	68 dc b5 13 f0       	push   $0xf013b5dc
f012f780:	68 21 13 00 00       	push   $0x1321
f012f785:	68 da ac 13 f0       	push   $0xf013acda
f012f78a:	e8 6c 0a fd ff       	call   f01001fb <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012f78f:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012f796:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012f79a:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012f79e:	78 b2                	js     f012f752 <test_krealloc_BF+0x2007>
f012f7a0:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012f7a4:	7f 09                	jg     f012f7af <test_krealloc_BF+0x2064>
f012f7a6:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012f7ad:	76 a3                	jbe    f012f752 <test_krealloc_BF+0x2007>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012f7af:	83 ec 0c             	sub    $0xc,%esp
f012f7b2:	68 be ae 13 f0       	push   $0xf013aebe
f012f7b7:	e8 c6 14 fd ff       	call   f0100c82 <cprintf>
f012f7bc:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc BF completed successfully.\n");
f012f7bf:	83 ec 0c             	sub    $0xc,%esp
f012f7c2:	68 c0 c5 13 f0       	push   $0xf013c5c0
f012f7c7:	e8 b6 14 fd ff       	call   f0100c82 <cprintf>
f012f7cc:	83 c4 10             	add    $0x10,%esp
	return 0;
f012f7cf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f7d4:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012f7d7:	5b                   	pop    %ebx
f012f7d8:	5f                   	pop    %edi
f012f7d9:	5d                   	pop    %ebp
f012f7da:	c3                   	ret    

f012f7db <test_initialize_dyn_block_system>:

//2022
int test_initialize_dyn_block_system(int freeFrames_before, int freeDiskFrames_before, int freeFrames_after, int freeDiskFrames_after)
{
f012f7db:	55                   	push   %ebp
f012f7dc:	89 e5                	mov    %esp,%ebp
f012f7de:	83 ec 28             	sub    $0x28,%esp
		panic("USE_KHEAP = 0 & it shall be 1. Go to 'inc/memlayout.h' and set USE_KHEAP by 1. Then, repeat the test again.");
	if(STATIC_MEMBLOCK_ALLOC != 0)
		panic("STATIC_MEMBLOCK_ALLOC = 1 & it shall be 0. Go to 'inc/dynamic_allocator.h' and set STATIC_MEMBLOCK_ALLOC by 0. Then, repeat the test again.");

	//Check MAX_MEM_BLOCK_CNT
	if(MAX_MEM_BLOCK_CNT != ((0xFFFFF000-0xF6000000)/4096))
f012f7e1:	a1 04 7b 65 f0       	mov    0xf0657b04,%eax
f012f7e6:	3d ff 9f 00 00       	cmp    $0x9fff,%eax
f012f7eb:	74 17                	je     f012f804 <test_initialize_dyn_block_system+0x29>
	{
		panic("Wrong initialize: MAX_MEM_BLOCK_CNT is not set with the correct size of the array");
f012f7ed:	83 ec 04             	sub    $0x4,%esp
f012f7f0:	68 00 c6 13 f0       	push   $0xf013c600
f012f7f5:	68 39 13 00 00       	push   $0x1339
f012f7fa:	68 da ac 13 f0       	push   $0xf013acda
f012f7ff:	e8 f7 09 fd ff       	call   f01001fb <_panic>
	}

	//Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != MAX_MEM_BLOCK_CNT-1)
f012f804:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f012f809:	8b 15 04 7b 65 f0    	mov    0xf0657b04,%edx
f012f80f:	4a                   	dec    %edx
f012f810:	39 d0                	cmp    %edx,%eax
f012f812:	74 17                	je     f012f82b <test_initialize_dyn_block_system+0x50>
	{
		panic("Wrong initialize: Wrong size for the AvailableMemBlocksList");
f012f814:	83 ec 04             	sub    $0x4,%esp
f012f817:	68 54 c6 13 f0       	push   $0xf013c654
f012f81c:	68 3f 13 00 00       	push   $0x133f
f012f821:	68 da ac 13 f0       	push   $0xf013acda
f012f826:	e8 d0 09 fd ff       	call   f01001fb <_panic>
	}

	//Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f012f82b:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f012f830:	85 c0                	test   %eax,%eax
f012f832:	74 17                	je     f012f84b <test_initialize_dyn_block_system+0x70>
	{
		panic("Wrong initialize: Wrong size for the AllocMemBlocksList");
f012f834:	83 ec 04             	sub    $0x4,%esp
f012f837:	68 90 c6 13 f0       	push   $0xf013c690
f012f83c:	68 45 13 00 00       	push   $0x1345
f012f841:	68 da ac 13 f0       	push   $0xf013acda
f012f846:	e8 b0 09 fd ff       	call   f01001fb <_panic>
	}

	//Check number of nodes in FreeMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 1)
f012f84b:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f012f850:	83 f8 01             	cmp    $0x1,%eax
f012f853:	74 17                	je     f012f86c <test_initialize_dyn_block_system+0x91>
	{
		panic("Wrong initialize: Wrong size for the FreeMemBlocksList");
f012f855:	83 ec 04             	sub    $0x4,%esp
f012f858:	68 c8 c6 13 f0       	push   $0xf013c6c8
f012f85d:	68 4b 13 00 00       	push   $0x134b
f012f862:	68 da ac 13 f0       	push   $0xf013acda
f012f867:	e8 8f 09 fd ff       	call   f01001fb <_panic>
	}

	//Check content of FreeMemBlocksList
	struct MemBlock* block = LIST_FIRST(&FreeMemBlocksList);
f012f86c:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f012f871:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(block == NULL || block->size != (KERNEL_HEAP_MAX-0xF6000000-DYNAMIC_ALLOCATOR_DS) || block->sva != 0xF6000000+DYNAMIC_ALLOCATOR_DS)
f012f874:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012f878:	74 66                	je     f012f8e0 <test_initialize_dyn_block_system+0x105>
f012f87a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f87d:	8b 48 0c             	mov    0xc(%eax),%ecx
f012f880:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f012f887:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012f88a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f88f:	89 45 e8             	mov    %eax,-0x18(%ebp)
f012f892:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f895:	ba 00 00 00 00       	mov    $0x0,%edx
f012f89a:	f7 75 ec             	divl   -0x14(%ebp)
f012f89d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f8a0:	29 d0                	sub    %edx,%eax
f012f8a2:	ba 00 f0 ff 09       	mov    $0x9fff000,%edx
f012f8a7:	29 c2                	sub    %eax,%edx
f012f8a9:	89 d0                	mov    %edx,%eax
f012f8ab:	39 c1                	cmp    %eax,%ecx
f012f8ad:	75 31                	jne    f012f8e0 <test_initialize_dyn_block_system+0x105>
f012f8af:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f8b2:	8b 48 08             	mov    0x8(%eax),%ecx
f012f8b5:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f012f8bc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012f8bf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f8c4:	89 45 e0             	mov    %eax,-0x20(%ebp)
f012f8c7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012f8ca:	ba 00 00 00 00       	mov    $0x0,%edx
f012f8cf:	f7 75 e4             	divl   -0x1c(%ebp)
f012f8d2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012f8d5:	29 d0                	sub    %edx,%eax
f012f8d7:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012f8dc:	39 c1                	cmp    %eax,%ecx
f012f8de:	74 17                	je     f012f8f7 <test_initialize_dyn_block_system+0x11c>
	{
		panic("Wrong initialize: Wrong content for the FreeMemBlocksList.");
f012f8e0:	83 ec 04             	sub    $0x4,%esp
f012f8e3:	68 00 c7 13 f0       	push   $0xf013c700
f012f8e8:	68 52 13 00 00       	push   $0x1352
f012f8ed:	68 da ac 13 f0       	push   $0xf013acda
f012f8f2:	e8 04 09 fd ff       	call   f01001fb <_panic>
	}

	//Check number of disk and memory frames
	if ((freeDiskFrames_after - freeDiskFrames_before) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012f8f7:	8b 45 14             	mov    0x14(%ebp),%eax
f012f8fa:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012f8fd:	74 17                	je     f012f916 <test_initialize_dyn_block_system+0x13b>
f012f8ff:	83 ec 04             	sub    $0x4,%esp
f012f902:	68 f4 ac 13 f0       	push   $0xf013acf4
f012f907:	68 56 13 00 00       	push   $0x1356
f012f90c:	68 da ac 13 f0       	push   $0xf013acda
f012f911:	e8 e5 08 fd ff       	call   f01001fb <_panic>
	if ((freeFrames_before - freeFrames_after) != 160) panic("Wrong allocation: pages are not loaded successfully into memory %d", (freeFrames_before - freeFrames_after));
f012f916:	8b 45 08             	mov    0x8(%ebp),%eax
f012f919:	2b 45 10             	sub    0x10(%ebp),%eax
f012f91c:	3d a0 00 00 00       	cmp    $0xa0,%eax
f012f921:	74 1b                	je     f012f93e <test_initialize_dyn_block_system+0x163>
f012f923:	8b 45 08             	mov    0x8(%ebp),%eax
f012f926:	2b 45 10             	sub    0x10(%ebp),%eax
f012f929:	50                   	push   %eax
f012f92a:	68 3c c7 13 f0       	push   $0xf013c73c
f012f92f:	68 57 13 00 00       	push   $0x1357
f012f934:	68 da ac 13 f0       	push   $0xf013acda
f012f939:	e8 bd 08 fd ff       	call   f01001fb <_panic>

	//Checking permissions on the allocated spaces
	{
		uint32 a = 0xF6000000;
f012f93e:	c7 45 f4 00 00 00 f6 	movl   $0xf6000000,-0xc(%ebp)
		while(1)
		{
			if (CB(ptr_page_directory, a, 0)!=1 || CB(ptr_page_directory, a, 1)!=1 || CB(ptr_page_directory, a, 2)!=0)
f012f945:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f012f94a:	83 ec 04             	sub    $0x4,%esp
f012f94d:	6a 00                	push   $0x0
f012f94f:	ff 75 f4             	pushl  -0xc(%ebp)
f012f952:	50                   	push   %eax
f012f953:	e8 e9 5f fe ff       	call   f0115941 <CB>
f012f958:	83 c4 10             	add    $0x10,%esp
f012f95b:	83 f8 01             	cmp    $0x1,%eax
f012f95e:	75 35                	jne    f012f995 <test_initialize_dyn_block_system+0x1ba>
f012f960:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f012f965:	83 ec 04             	sub    $0x4,%esp
f012f968:	6a 01                	push   $0x1
f012f96a:	ff 75 f4             	pushl  -0xc(%ebp)
f012f96d:	50                   	push   %eax
f012f96e:	e8 ce 5f fe ff       	call   f0115941 <CB>
f012f973:	83 c4 10             	add    $0x10,%esp
f012f976:	83 f8 01             	cmp    $0x1,%eax
f012f979:	75 1a                	jne    f012f995 <test_initialize_dyn_block_system+0x1ba>
f012f97b:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f012f980:	83 ec 04             	sub    $0x4,%esp
f012f983:	6a 02                	push   $0x2
f012f985:	ff 75 f4             	pushl  -0xc(%ebp)
f012f988:	50                   	push   %eax
f012f989:	e8 b3 5f fe ff       	call   f0115941 <CB>
f012f98e:	83 c4 10             	add    $0x10,%esp
f012f991:	85 c0                	test   %eax,%eax
f012f993:	74 17                	je     f012f9ac <test_initialize_dyn_block_system+0x1d1>
				panic("Wrong initialize: Wrong permissions - pages mapped with wrong permissions. Check them again.");
f012f995:	83 ec 04             	sub    $0x4,%esp
f012f998:	68 80 c7 13 f0       	push   $0xf013c780
f012f99d:	68 5f 13 00 00       	push   $0x135f
f012f9a2:	68 da ac 13 f0       	push   $0xf013acda
f012f9a7:	e8 4f 08 fd ff       	call   f01001fb <_panic>

			a+=4096;
f012f9ac:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
			if(a == (0xF6000000+DYNAMIC_ALLOCATOR_DS))
f012f9b3:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f012f9ba:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f9bd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f9c2:	89 45 d8             	mov    %eax,-0x28(%ebp)
f012f9c5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f9c8:	ba 00 00 00 00       	mov    $0x0,%edx
f012f9cd:	f7 75 dc             	divl   -0x24(%ebp)
f012f9d0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f9d3:	29 d0                	sub    %edx,%eax
f012f9d5:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012f9da:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012f9dd:	74 05                	je     f012f9e4 <test_initialize_dyn_block_system+0x209>
				break;
		}
f012f9df:	e9 61 ff ff ff       	jmp    f012f945 <test_initialize_dyn_block_system+0x16a>
			if (CB(ptr_page_directory, a, 0)!=1 || CB(ptr_page_directory, a, 1)!=1 || CB(ptr_page_directory, a, 2)!=0)
				panic("Wrong initialize: Wrong permissions - pages mapped with wrong permissions. Check them again.");

			a+=4096;
			if(a == (0xF6000000+DYNAMIC_ALLOCATOR_DS))
				break;
f012f9e4:	90                   	nop
		}
	}

	//===============================================//
	cprintf("\nCongratulations!! test initialize_dyn_block_system of KHEAP completed successfully.\n");
f012f9e5:	83 ec 0c             	sub    $0xc,%esp
f012f9e8:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012f9ed:	e8 90 12 fd ff       	call   f0100c82 <cprintf>
f012f9f2:	83 c4 10             	add    $0x10,%esp
	return 0;
f012f9f5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f9fa:	c9                   	leave  
f012f9fb:	c3                   	ret    

f012f9fc <nearest_pow2_ceil>:
#include <kern/cpu/sched.h>
#include <kern/disk/pagefile_manager.h>
#include <kern/mem/memory_manager.h>
#include "../cons/console.h"

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f012f9fc:	55                   	push   %ebp
f012f9fd:	89 e5                	mov    %esp,%ebp
f012f9ff:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012fa02:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012fa06:	77 07                	ja     f012fa0f <nearest_pow2_ceil+0x13>
f012fa08:	b8 01 00 00 00       	mov    $0x1,%eax
f012fa0d:	eb 20                	jmp    f012fa2f <nearest_pow2_ceil+0x33>
    int power = 2;
f012fa0f:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012fa16:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012fa19:	eb 08                	jmp    f012fa23 <nearest_pow2_ceil+0x27>
    	power <<= 1;
f012fa1b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fa1e:	01 c0                	add    %eax,%eax
f012fa20:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    int power = 2;
    x--;
    while (x >>= 1) {
f012fa23:	d1 6d 08             	shrl   0x8(%ebp)
f012fa26:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012fa2a:	75 ef                	jne    f012fa1b <nearest_pow2_ceil+0x1f>
    	power <<= 1;
    }
    return power;
f012fa2c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012fa2f:	c9                   	leave  
f012fa30:	c3                   	ret    

f012fa31 <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f012fa31:	55                   	push   %ebp
f012fa32:	89 e5                	mov    %esp,%ebp
f012fa34:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012fa37:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012fa3b:	77 07                	ja     f012fa44 <log2_ceil+0x13>
f012fa3d:	b8 01 00 00 00       	mov    $0x1,%eax
f012fa42:	eb 1b                	jmp    f012fa5f <log2_ceil+0x2e>
    //int power = 2;
    int bits_cnt = 2 ;
f012fa44:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012fa4b:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012fa4e:	eb 03                	jmp    f012fa53 <log2_ceil+0x22>
    	//power <<= 1;
    	bits_cnt++ ;
f012fa50:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    //int power = 2;
    int bits_cnt = 2 ;
    x--;
    while (x >>= 1) {
f012fa53:	d1 6d 08             	shrl   0x8(%ebp)
f012fa56:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012fa5a:	75 f4                	jne    f012fa50 <log2_ceil+0x1f>
    	//power <<= 1;
    	bits_cnt++ ;
    }
    return bits_cnt;
f012fa5c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012fa5f:	c9                   	leave  
f012fa60:	c3                   	ret    

f012fa61 <detect_loop_in_FrameInfo_list>:
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f012fa61:	55                   	push   %ebp
f012fa62:	89 e5                	mov    %esp,%ebp
f012fa64:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f012fa67:	8b 45 08             	mov    0x8(%ebp),%eax
f012fa6a:	8b 00                	mov    (%eax),%eax
f012fa6c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f012fa6f:	8b 45 08             	mov    0x8(%ebp),%eax
f012fa72:	8b 00                	mov    (%eax),%eax
f012fa74:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f012fa77:	eb 52                	jmp    f012facb <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f012fa79:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fa7c:	8b 00                	mov    (%eax),%eax
f012fa7e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f012fa81:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fa84:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012fa87:	75 12                	jne    f012fa9b <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f012fa89:	83 ec 0c             	sub    $0xc,%esp
f012fa8c:	68 38 c8 13 f0       	push   $0xf013c838
f012fa91:	e8 ec 11 fd ff       	call   f0100c82 <cprintf>
f012fa96:	83 c4 10             	add    $0x10,%esp
			break;
f012fa99:	eb 3f                	jmp    f012fada <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f012fa9b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012fa9f:	74 38                	je     f012fad9 <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f012faa1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012faa4:	8b 00                	mov    (%eax),%eax
f012faa6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f012faa9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012faac:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012faaf:	75 12                	jne    f012fac3 <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f012fab1:	83 ec 0c             	sub    $0xc,%esp
f012fab4:	68 54 c8 13 f0       	push   $0xf013c854
f012fab9:	e8 c4 11 fd ff       	call   f0100c82 <cprintf>
f012fabe:	83 c4 10             	add    $0x10,%esp
			break;
f012fac1:	eb 17                	jmp    f012fada <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f012fac3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fac6:	8b 00                	mov    (%eax),%eax
f012fac8:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f012facb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012facf:	74 09                	je     f012fada <detect_loop_in_FrameInfo_list+0x79>
f012fad1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012fad5:	75 a2                	jne    f012fa79 <detect_loop_in_FrameInfo_list+0x18>
f012fad7:	eb 01                	jmp    f012fada <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f012fad9:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f012fada:	83 ec 0c             	sub    $0xc,%esp
f012fadd:	68 6b c8 13 f0       	push   $0xf013c86b
f012fae2:	e8 9b 11 fd ff       	call   f0100c82 <cprintf>
f012fae7:	83 c4 10             	add    $0x10,%esp
}
f012faea:	90                   	nop
f012faeb:	c9                   	leave  
f012faec:	c3                   	ret    

f012faed <scarce_memory>:

void scarce_memory()
{
f012faed:	55                   	push   %ebp
f012faee:	89 e5                	mov    %esp,%ebp
f012faf0:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f012faf3:	a1 f0 7a 65 f0       	mov    0xf0657af0,%eax
f012faf8:	ba 64 00 00 00       	mov    $0x64,%edx
f012fafd:	29 c2                	sub    %eax,%edx
f012faff:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f012fb04:	0f af c2             	imul   %edx,%eax
f012fb07:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012fb0c:	f7 e2                	mul    %edx
f012fb0e:	89 d0                	mov    %edx,%eax
f012fb10:	c1 e8 05             	shr    $0x5,%eax
f012fb13:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f012fb16:	a1 f0 7a 65 f0       	mov    0xf0657af0,%eax
f012fb1b:	ba 64 00 00 00       	mov    $0x64,%edx
f012fb20:	29 c2                	sub    %eax,%edx
f012fb22:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f012fb27:	89 d1                	mov    %edx,%ecx
f012fb29:	0f af c8             	imul   %eax,%ecx
f012fb2c:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012fb31:	f7 e1                	mul    %ecx
f012fb33:	c1 ea 05             	shr    $0x5,%edx
f012fb36:	89 d0                	mov    %edx,%eax
f012fb38:	c1 e0 02             	shl    $0x2,%eax
f012fb3b:	01 d0                	add    %edx,%eax
f012fb3d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012fb44:	01 d0                	add    %edx,%eax
f012fb46:	c1 e0 02             	shl    $0x2,%eax
f012fb49:	29 c1                	sub    %eax,%ecx
f012fb4b:	89 ca                	mov    %ecx,%edx
f012fb4d:	85 d2                	test   %edx,%edx
f012fb4f:	74 03                	je     f012fb54 <scarce_memory+0x67>
		total_size_tobe_allocated++;
f012fb51:	ff 45 f4             	incl   -0xc(%ebp)

	uint32 size_of_already_allocated = number_of_frames - LIST_SIZE(&free_frame_list) ;
f012fb54:	8b 15 10 7b 65 f0    	mov    0xf0657b10,%edx
f012fb5a:	a1 24 7b 65 f0       	mov    0xf0657b24,%eax
f012fb5f:	29 c2                	sub    %eax,%edx
f012fb61:	89 d0                	mov    %edx,%eax
f012fb63:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f012fb66:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fb69:	2b 45 ec             	sub    -0x14(%ebp),%eax
f012fb6c:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
f012fb6f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012fb76:	eb 12                	jmp    f012fb8a <scarce_memory+0x9d>
	{
		allocate_frame(&ptr_tmp_FI) ;
f012fb78:	83 ec 0c             	sub    $0xc,%esp
f012fb7b:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f012fb7e:	50                   	push   %eax
f012fb7f:	e8 97 6c fd ff       	call   f010681b <allocate_frame>
f012fb84:	83 c4 10             	add    $0x10,%esp
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012fb87:	ff 45 f0             	incl   -0x10(%ebp)
f012fb8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fb8d:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012fb90:	76 e6                	jbe    f012fb78 <scarce_memory+0x8b>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f012fb92:	90                   	nop
f012fb93:	c9                   	leave  
f012fb94:	c3                   	ret    

f012fb95 <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f012fb95:	55                   	push   %ebp
f012fb96:	89 e5                	mov    %esp,%ebp
f012fb98:	83 ec 38             	sub    $0x38,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f012fb9b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f012fba2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f012fba9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f012fbb0:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012fbb4:	0f 85 d0 01 00 00    	jne    f012fd8a <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f5>
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012fbba:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012fbc1:	e9 de 00 00 00       	jmp    f012fca4 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x10f>
		{
			struct Env * ptr_ready_env = NULL;
f012fbc6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012fbcd:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f012fbd2:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012fbd5:	c1 e2 04             	shl    $0x4,%edx
f012fbd8:	01 d0                	add    %edx,%eax
f012fbda:	8b 00                	mov    (%eax),%eax
f012fbdc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012fbdf:	e9 85 00 00 00       	jmp    f012fc69 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xd4>
			{
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f012fbe4:	83 ec 0c             	sub    $0xc,%esp
f012fbe7:	ff 75 e4             	pushl  -0x1c(%ebp)
f012fbea:	e8 97 81 fd ff       	call   f0107d86 <env_page_ws_get_size>
f012fbef:	83 c4 10             	add    $0x10,%esp
f012fbf2:	89 45 d0             	mov    %eax,-0x30(%ebp)
				int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012fbf5:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fbfa:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f012fc00:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012fc03:	0f af c2             	imul   %edx,%eax
f012fc06:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012fc0b:	f7 e2                	mul    %edx
f012fc0d:	89 d0                	mov    %edx,%eax
f012fc0f:	c1 e8 05             	shr    $0x5,%eax
f012fc12:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012fc15:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fc1a:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f012fc20:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012fc23:	89 d1                	mov    %edx,%ecx
f012fc25:	0f af c8             	imul   %eax,%ecx
f012fc28:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012fc2d:	f7 e1                	mul    %ecx
f012fc2f:	c1 ea 05             	shr    $0x5,%edx
f012fc32:	89 d0                	mov    %edx,%eax
f012fc34:	c1 e0 02             	shl    $0x2,%eax
f012fc37:	01 d0                	add    %edx,%eax
f012fc39:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012fc40:	01 d0                	add    %edx,%eax
f012fc42:	c1 e0 02             	shl    $0x2,%eax
f012fc45:	29 c1                	sub    %eax,%ecx
f012fc47:	89 ca                	mov    %ecx,%edx
f012fc49:	85 d2                	test   %edx,%edx
f012fc4b:	74 03                	je     f012fc50 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xbb>
					num_of_pages_to_be_removed++;
f012fc4d:	ff 45 e0             	incl   -0x20(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f012fc50:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012fc53:	01 45 f4             	add    %eax,-0xc(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
		{
			struct Env * ptr_ready_env = NULL;
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012fc56:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f012fc5b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012fc5e:	c1 e2 04             	shl    $0x4,%edx
f012fc61:	01 d0                	add    %edx,%eax
f012fc63:	8b 40 08             	mov    0x8(%eax),%eax
f012fc66:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012fc69:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f012fc6e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012fc71:	c1 e2 04             	shl    $0x4,%edx
f012fc74:	01 d0                	add    %edx,%eax
f012fc76:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012fc7a:	74 08                	je     f012fc84 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xef>
f012fc7c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012fc7f:	8b 52 44             	mov    0x44(%edx),%edx
f012fc82:	eb 05                	jmp    f012fc89 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xf4>
f012fc84:	ba 00 00 00 00       	mov    $0x0,%edx
f012fc89:	89 50 08             	mov    %edx,0x8(%eax)
f012fc8c:	8b 40 08             	mov    0x8(%eax),%eax
f012fc8f:	85 c0                	test   %eax,%eax
f012fc91:	0f 85 4d ff ff ff    	jne    f012fbe4 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
f012fc97:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012fc9b:	0f 85 43 ff ff ff    	jne    f012fbe4 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
	uint32 no_of_pages_tobe_removed_from_ready = 0;
	uint32 no_of_pages_tobe_removed_from_exit = 0;
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012fca1:	ff 45 e8             	incl   -0x18(%ebp)
f012fca4:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012fca9:	0f b6 c0             	movzbl %al,%eax
f012fcac:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012fcaf:	0f 8f 11 ff ff ff    	jg     f012fbc6 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x31>
					num_of_pages_to_be_removed++;
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
f012fcb5:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012fcbc:	a1 f4 7a 65 f0       	mov    0xf0657af4,%eax
f012fcc1:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012fcc4:	eb 19                	jmp    f012fcdf <calc_no_pages_tobe_removed_from_ready_exit_queues+0x14a>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
f012fcc6:	83 ec 0c             	sub    $0xc,%esp
f012fcc9:	ff 75 dc             	pushl  -0x24(%ebp)
f012fccc:	e8 b5 80 fd ff       	call   f0107d86 <env_page_ws_get_size>
f012fcd1:	83 c4 10             	add    $0x10,%esp
f012fcd4:	01 45 f0             	add    %eax,-0x10(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012fcd7:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f012fcdc:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012fcdf:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012fce3:	74 08                	je     f012fced <calc_no_pages_tobe_removed_from_ready_exit_queues+0x158>
f012fce5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012fce8:	8b 40 44             	mov    0x44(%eax),%eax
f012fceb:	eb 05                	jmp    f012fcf2 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x15d>
f012fced:	b8 00 00 00 00       	mov    $0x0,%eax
f012fcf2:	a3 fc 7a 65 f0       	mov    %eax,0xf0657afc
f012fcf7:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f012fcfc:	85 c0                	test   %eax,%eax
f012fcfe:	75 c6                	jne    f012fcc6 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x131>
f012fd00:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012fd04:	75 c0                	jne    f012fcc6 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x131>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
		}

		if(curenv != NULL)
f012fd06:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fd0b:	85 c0                	test   %eax,%eax
f012fd0d:	0f 84 ec 00 00 00    	je     f012fdff <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26a>
		{
			int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012fd13:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fd18:	83 ec 0c             	sub    $0xc,%esp
f012fd1b:	50                   	push   %eax
f012fd1c:	e8 65 80 fd ff       	call   f0107d86 <env_page_ws_get_size>
f012fd21:	83 c4 10             	add    $0x10,%esp
f012fd24:	89 45 cc             	mov    %eax,-0x34(%ebp)
			int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012fd27:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fd2c:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f012fd32:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012fd35:	0f af c2             	imul   %edx,%eax
f012fd38:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012fd3d:	f7 e2                	mul    %edx
f012fd3f:	89 d0                	mov    %edx,%eax
f012fd41:	c1 e8 05             	shr    $0x5,%eax
f012fd44:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012fd47:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fd4c:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f012fd52:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012fd55:	89 d1                	mov    %edx,%ecx
f012fd57:	0f af c8             	imul   %eax,%ecx
f012fd5a:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012fd5f:	f7 e1                	mul    %ecx
f012fd61:	c1 ea 05             	shr    $0x5,%edx
f012fd64:	89 d0                	mov    %edx,%eax
f012fd66:	c1 e0 02             	shl    $0x2,%eax
f012fd69:	01 d0                	add    %edx,%eax
f012fd6b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012fd72:	01 d0                	add    %edx,%eax
f012fd74:	c1 e0 02             	shl    $0x2,%eax
f012fd77:	29 c1                	sub    %eax,%ecx
f012fd79:	89 ca                	mov    %ecx,%edx
f012fd7b:	85 d2                	test   %edx,%edx
f012fd7d:	74 03                	je     f012fd82 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1ed>
				num_of_pages_to_be_removed++;
f012fd7f:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012fd82:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012fd85:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012fd88:	eb 75                	jmp    f012fdff <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26a>
		}
	}
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
		int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012fd8a:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fd8f:	83 ec 0c             	sub    $0xc,%esp
f012fd92:	50                   	push   %eax
f012fd93:	e8 ee 7f fd ff       	call   f0107d86 <env_page_ws_get_size>
f012fd98:	83 c4 10             	add    $0x10,%esp
f012fd9b:	89 45 c8             	mov    %eax,-0x38(%ebp)
		int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012fd9e:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fda3:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f012fda9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012fdac:	0f af c2             	imul   %edx,%eax
f012fdaf:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012fdb4:	f7 e2                	mul    %edx
f012fdb6:	89 d0                	mov    %edx,%eax
f012fdb8:	c1 e8 05             	shr    $0x5,%eax
f012fdbb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012fdbe:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fdc3:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f012fdc9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012fdcc:	89 d1                	mov    %edx,%ecx
f012fdce:	0f af c8             	imul   %eax,%ecx
f012fdd1:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012fdd6:	f7 e1                	mul    %ecx
f012fdd8:	c1 ea 05             	shr    $0x5,%edx
f012fddb:	89 d0                	mov    %edx,%eax
f012fddd:	c1 e0 02             	shl    $0x2,%eax
f012fde0:	01 d0                	add    %edx,%eax
f012fde2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012fde9:	01 d0                	add    %edx,%eax
f012fdeb:	c1 e0 02             	shl    $0x2,%eax
f012fdee:	29 c1                	sub    %eax,%ecx
f012fdf0:	89 ca                	mov    %ecx,%edx
f012fdf2:	85 d2                	test   %edx,%edx
f012fdf4:	74 03                	je     f012fdf9 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x264>
			num_of_pages_to_be_removed++;
f012fdf6:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012fdf9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012fdfc:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f012fdff:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012fe02:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fe05:	01 c2                	add    %eax,%edx
f012fe07:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fe0a:	01 d0                	add    %edx,%eax
}
f012fe0c:	c9                   	leave  
f012fe0d:	c3                   	ret    

f012fe0e <schenv>:


void schenv()
{
f012fe0e:	55                   	push   %ebp
f012fe0f:	89 e5                	mov    %esp,%ebp
f012fe11:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f012fe14:	c6 05 a8 7b 65 f0 00 	movb   $0x0,0xf0657ba8
	__ne = NULL;
f012fe1b:	c7 05 38 7b 65 f0 00 	movl   $0x0,0xf0657b38
f012fe22:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f012fe25:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012fe2c:	eb 3f                	jmp    f012fe6d <schenv+0x5f>
	{
		if (queue_size(&(env_ready_queues[i])))
f012fe2e:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f012fe33:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fe36:	c1 e2 04             	shl    $0x4,%edx
f012fe39:	01 d0                	add    %edx,%eax
f012fe3b:	83 ec 0c             	sub    $0xc,%esp
f012fe3e:	50                   	push   %eax
f012fe3f:	e8 b5 45 fd ff       	call   f01043f9 <queue_size>
f012fe44:	83 c4 10             	add    $0x10,%esp
f012fe47:	85 c0                	test   %eax,%eax
f012fe49:	74 1f                	je     f012fe6a <schenv+0x5c>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f012fe4b:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f012fe50:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fe53:	c1 e2 04             	shl    $0x4,%edx
f012fe56:	01 d0                	add    %edx,%eax
f012fe58:	8b 40 04             	mov    0x4(%eax),%eax
f012fe5b:	a3 38 7b 65 f0       	mov    %eax,0xf0657b38
			__nl = i;
f012fe60:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fe63:	a2 a8 7b 65 f0       	mov    %al,0xf0657ba8
			break;
f012fe68:	eb 10                	jmp    f012fe7a <schenv+0x6c>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f012fe6a:	ff 45 f4             	incl   -0xc(%ebp)
f012fe6d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012fe72:	0f b6 c0             	movzbl %al,%eax
f012fe75:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012fe78:	7f b4                	jg     f012fe2e <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f012fe7a:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fe7f:	85 c0                	test   %eax,%eax
f012fe81:	0f 84 86 00 00 00    	je     f012ff0d <schenv+0xff>
	{
		if (__ne != NULL)
f012fe87:	a1 38 7b 65 f0       	mov    0xf0657b38,%eax
f012fe8c:	85 c0                	test   %eax,%eax
f012fe8e:	74 4b                	je     f012fedb <schenv+0xcd>
		{
			if ((__pl + 1) < __nl)
f012fe90:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f012fe95:	0f b6 c0             	movzbl %al,%eax
f012fe98:	8d 50 01             	lea    0x1(%eax),%edx
f012fe9b:	a0 a8 7b 65 f0       	mov    0xf0657ba8,%al
f012fea0:	0f b6 c0             	movzbl %al,%eax
f012fea3:	39 c2                	cmp    %eax,%edx
f012fea5:	7d 66                	jge    f012ff0d <schenv+0xff>
			{
				__ne = curenv;
f012fea7:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012feac:	a3 38 7b 65 f0       	mov    %eax,0xf0657b38
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012feb1:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f012feb6:	0f b6 c0             	movzbl %al,%eax
f012feb9:	8a 15 80 7b 65 f0    	mov    0xf0657b80,%dl
f012febf:	0f b6 d2             	movzbl %dl,%edx
f012fec2:	4a                   	dec    %edx
f012fec3:	39 d0                	cmp    %edx,%eax
f012fec5:	7d 08                	jge    f012fecf <schenv+0xc1>
f012fec7:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f012fecc:	40                   	inc    %eax
f012fecd:	eb 05                	jmp    f012fed4 <schenv+0xc6>
f012fecf:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f012fed4:	a2 a8 7b 65 f0       	mov    %al,0xf0657ba8
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f012fed9:	eb 32                	jmp    f012ff0d <schenv+0xff>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f012fedb:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fee0:	a3 38 7b 65 f0       	mov    %eax,0xf0657b38
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012fee5:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f012feea:	0f b6 c0             	movzbl %al,%eax
f012feed:	8a 15 80 7b 65 f0    	mov    0xf0657b80,%dl
f012fef3:	0f b6 d2             	movzbl %dl,%edx
f012fef6:	4a                   	dec    %edx
f012fef7:	39 d0                	cmp    %edx,%eax
f012fef9:	7d 08                	jge    f012ff03 <schenv+0xf5>
f012fefb:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f012ff00:	40                   	inc    %eax
f012ff01:	eb 05                	jmp    f012ff08 <schenv+0xfa>
f012ff03:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f012ff08:	a2 a8 7b 65 f0       	mov    %al,0xf0657ba8
		}
	}
}
f012ff0d:	90                   	nop
f012ff0e:	c9                   	leave  
f012ff0f:	c3                   	ret    

f012ff10 <chksch>:

void chksch(uint8 onoff)
{
f012ff10:	55                   	push   %ebp
f012ff11:	89 e5                	mov    %esp,%ebp
f012ff13:	83 ec 04             	sub    $0x4,%esp
f012ff16:	8b 45 08             	mov    0x8(%ebp),%eax
f012ff19:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f012ff1c:	c7 05 94 7b 65 f0 00 	movl   $0x0,0xf0657b94
f012ff23:	00 00 00 
	__ne = NULL;
f012ff26:	c7 05 38 7b 65 f0 00 	movl   $0x0,0xf0657b38
f012ff2d:	00 00 00 
	__pl = 0 ;
f012ff30:	c6 05 e0 7a 65 f0 00 	movb   $0x0,0xf0657ae0
	__nl = 0 ;
f012ff37:	c6 05 a8 7b 65 f0 00 	movb   $0x0,0xf0657ba8
	__chkstatus = onoff;
f012ff3e:	8a 45 fc             	mov    -0x4(%ebp),%al
f012ff41:	a2 34 7b 65 f0       	mov    %al,0xf0657b34
}
f012ff46:	90                   	nop
f012ff47:	c9                   	leave  
f012ff48:	c3                   	ret    

f012ff49 <chk1>:
void chk1()
{
f012ff49:	55                   	push   %ebp
f012ff4a:	89 e5                	mov    %esp,%ebp
f012ff4c:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f012ff4f:	a0 34 7b 65 f0       	mov    0xf0657b34,%al
f012ff54:	84 c0                	test   %al,%al
f012ff56:	74 2b                	je     f012ff83 <chk1+0x3a>
		return ;
	__pe = curenv;
f012ff58:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012ff5d:	a3 94 7b 65 f0       	mov    %eax,0xf0657b94
	__pl = __nl ;
f012ff62:	a0 a8 7b 65 f0       	mov    0xf0657ba8,%al
f012ff67:	a2 e0 7a 65 f0       	mov    %al,0xf0657ae0
	if (__pe == NULL)
f012ff6c:	a1 94 7b 65 f0       	mov    0xf0657b94,%eax
f012ff71:	85 c0                	test   %eax,%eax
f012ff73:	75 07                	jne    f012ff7c <chk1+0x33>
	{
		__pl = 0;
f012ff75:	c6 05 e0 7a 65 f0 00 	movb   $0x0,0xf0657ae0
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f012ff7c:	e8 8d fe ff ff       	call   f012fe0e <schenv>
f012ff81:	eb 01                	jmp    f012ff84 <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f012ff83:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f012ff84:	c9                   	leave  
f012ff85:	c3                   	ret    

f012ff86 <chk2>:
void chk2(struct Env* __se)
{
f012ff86:	55                   	push   %ebp
f012ff87:	89 e5                	mov    %esp,%ebp
f012ff89:	53                   	push   %ebx
f012ff8a:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f012ff8d:	a0 34 7b 65 f0       	mov    0xf0657b34,%al
f012ff92:	84 c0                	test   %al,%al
f012ff94:	0f 84 43 02 00 00    	je     f01301dd <chk2+0x257>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f012ff9a:	a1 38 7b 65 f0       	mov    0xf0657b38,%eax
f012ff9f:	39 45 08             	cmp    %eax,0x8(%ebp)
f012ffa2:	74 19                	je     f012ffbd <chk2+0x37>
f012ffa4:	68 85 c8 13 f0       	push   $0xf013c885
f012ffa9:	68 92 c8 13 f0       	push   $0xf013c892
f012ffae:	68 c0 00 00 00       	push   $0xc0
f012ffb3:	68 a7 c8 13 f0       	push   $0xf013c8a7
f012ffb8:	e8 ad 02 fd ff       	call   f010026a <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f012ffbd:	a1 38 7b 65 f0       	mov    0xf0657b38,%eax
f012ffc2:	85 c0                	test   %eax,%eax
f012ffc4:	0f 84 25 01 00 00    	je     f01300ef <chk2+0x169>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f012ffca:	8b 15 2c 7b 65 f0    	mov    0xf0657b2c,%edx
f012ffd0:	a0 a8 7b 65 f0       	mov    0xf0657ba8,%al
f012ffd5:	0f b6 c0             	movzbl %al,%eax
f012ffd8:	01 d0                	add    %edx,%eax
f012ffda:	8a 00                	mov    (%eax),%al
f012ffdc:	0f b6 d8             	movzbl %al,%ebx
f012ffdf:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f012ffe4:	99                   	cltd   
f012ffe5:	f7 fb                	idiv   %ebx
f012ffe7:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f012ffed:	8b 15 2c 7b 65 f0    	mov    0xf0657b2c,%edx
f012fff3:	a0 a8 7b 65 f0       	mov    0xf0657ba8,%al
f012fff8:	0f b6 c0             	movzbl %al,%eax
f012fffb:	01 d0                	add    %edx,%eax
f012fffd:	8a 00                	mov    (%eax),%al
f012ffff:	0f b6 d8             	movzbl %al,%ebx
f0130002:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0130007:	99                   	cltd   
f0130008:	f7 fb                	idiv   %ebx
f013000a:	89 c3                	mov    %eax,%ebx
f013000c:	89 c8                	mov    %ecx,%eax
f013000e:	99                   	cltd   
f013000f:	f7 fb                	idiv   %ebx
f0130011:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		upper = upper % 2 == 1? upper+1 : upper ;
f0130015:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0130019:	83 e0 01             	and    $0x1,%eax
f013001c:	66 85 c0             	test   %ax,%ax
f013001f:	74 07                	je     f0130028 <chk2+0xa2>
f0130021:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0130025:	40                   	inc    %eax
f0130026:	eb 04                	jmp    f013002c <chk2+0xa6>
f0130028:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f013002c:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f0130030:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f0130034:	89 d0                	mov    %edx,%eax
f0130036:	c1 e0 02             	shl    $0x2,%eax
f0130039:	01 d0                	add    %edx,%eax
f013003b:	01 c0                	add    %eax,%eax
f013003d:	01 d0                	add    %edx,%eax
f013003f:	c1 e0 02             	shl    $0x2,%eax
f0130042:	01 d0                	add    %edx,%eax
f0130044:	01 c0                	add    %eax,%eax
f0130046:	89 c1                	mov    %eax,%ecx
f0130048:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f013004d:	f7 e9                	imul   %ecx
f013004f:	c1 fa 05             	sar    $0x5,%edx
f0130052:	89 c8                	mov    %ecx,%eax
f0130054:	c1 f8 1f             	sar    $0x1f,%eax
f0130057:	29 c2                	sub    %eax,%edx
f0130059:	89 d0                	mov    %edx,%eax
f013005b:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0();
f013005f:	e8 66 42 fd ff       	call   f01042ca <kclock_read_cnt0>
f0130064:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f0130068:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f013006c:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f0130070:	76 0a                	jbe    f013007c <chk2+0xf6>
f0130072:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f0130076:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f013007a:	76 19                	jbe    f0130095 <chk2+0x10f>
f013007c:	68 c0 c8 13 f0       	push   $0xf013c8c0
f0130081:	68 92 c8 13 f0       	push   $0xf013c892
f0130086:	68 ca 00 00 00       	push   $0xca
f013008b:	68 a7 c8 13 f0       	push   $0xf013c8a7
f0130090:	e8 d5 01 fd ff       	call   f010026a <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f0130095:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f013009c:	eb 44                	jmp    f01300e2 <chk2+0x15c>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f013009e:	a1 38 7b 65 f0       	mov    0xf0657b38,%eax
f01300a3:	8b 40 4c             	mov    0x4c(%eax),%eax
f01300a6:	89 c2                	mov    %eax,%edx
f01300a8:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f01300ad:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01300b0:	c1 e1 04             	shl    $0x4,%ecx
f01300b3:	01 c8                	add    %ecx,%eax
f01300b5:	83 ec 08             	sub    $0x8,%esp
f01300b8:	52                   	push   %edx
f01300b9:	50                   	push   %eax
f01300ba:	e8 0c 45 fd ff       	call   f01045cb <find_env_in_queue>
f01300bf:	83 c4 10             	add    $0x10,%esp
f01300c2:	85 c0                	test   %eax,%eax
f01300c4:	74 19                	je     f01300df <chk2+0x159>
f01300c6:	68 e4 c8 13 f0       	push   $0xf013c8e4
f01300cb:	68 92 c8 13 f0       	push   $0xf013c892
f01300d0:	68 ce 00 00 00       	push   $0xce
f01300d5:	68 a7 c8 13 f0       	push   $0xf013c8a7
f01300da:	e8 8b 01 fd ff       	call   f010026a <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f01300df:	ff 45 f4             	incl   -0xc(%ebp)
f01300e2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01300e7:	0f b6 c0             	movzbl %al,%eax
f01300ea:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01300ed:	7f af                	jg     f013009e <chk2+0x118>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f01300ef:	a1 94 7b 65 f0       	mov    0xf0657b94,%eax
f01300f4:	85 c0                	test   %eax,%eax
f01300f6:	0f 84 e2 00 00 00    	je     f01301de <chk2+0x258>
f01300fc:	8b 15 94 7b 65 f0    	mov    0xf0657b94,%edx
f0130102:	a1 38 7b 65 f0       	mov    0xf0657b38,%eax
f0130107:	39 c2                	cmp    %eax,%edx
f0130109:	0f 84 cf 00 00 00    	je     f01301de <chk2+0x258>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f013010f:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f0130114:	0f b6 c0             	movzbl %al,%eax
f0130117:	8a 15 80 7b 65 f0    	mov    0xf0657b80,%dl
f013011d:	0f b6 d2             	movzbl %dl,%edx
f0130120:	4a                   	dec    %edx
f0130121:	39 d0                	cmp    %edx,%eax
f0130123:	74 08                	je     f013012d <chk2+0x1a7>
f0130125:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f013012a:	40                   	inc    %eax
f013012b:	eb 05                	jmp    f0130132 <chk2+0x1ac>
f013012d:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f0130132:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f0130135:	a1 94 7b 65 f0       	mov    0xf0657b94,%eax
f013013a:	8b 40 4c             	mov    0x4c(%eax),%eax
f013013d:	89 c2                	mov    %eax,%edx
f013013f:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0130144:	0f b6 4d e9          	movzbl -0x17(%ebp),%ecx
f0130148:	c1 e1 04             	shl    $0x4,%ecx
f013014b:	01 c8                	add    %ecx,%eax
f013014d:	83 ec 08             	sub    $0x8,%esp
f0130150:	52                   	push   %edx
f0130151:	50                   	push   %eax
f0130152:	e8 74 44 fd ff       	call   f01045cb <find_env_in_queue>
f0130157:	83 c4 10             	add    $0x10,%esp
f013015a:	85 c0                	test   %eax,%eax
f013015c:	75 19                	jne    f0130177 <chk2+0x1f1>
f013015e:	68 24 c9 13 f0       	push   $0xf013c924
f0130163:	68 92 c8 13 f0       	push   $0xf013c892
f0130168:	68 d4 00 00 00       	push   $0xd4
f013016d:	68 a7 c8 13 f0       	push   $0xf013c8a7
f0130172:	e8 f3 00 fd ff       	call   f010026a <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f0130177:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f013017e:	eb 4e                	jmp    f01301ce <chk2+0x248>
		{
			if (i == __tl) continue;
f0130180:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f0130184:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130187:	74 41                	je     f01301ca <chk2+0x244>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f0130189:	a1 94 7b 65 f0       	mov    0xf0657b94,%eax
f013018e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0130191:	89 c2                	mov    %eax,%edx
f0130193:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0130198:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f013019b:	c1 e1 04             	shl    $0x4,%ecx
f013019e:	01 c8                	add    %ecx,%eax
f01301a0:	83 ec 08             	sub    $0x8,%esp
f01301a3:	52                   	push   %edx
f01301a4:	50                   	push   %eax
f01301a5:	e8 21 44 fd ff       	call   f01045cb <find_env_in_queue>
f01301aa:	83 c4 10             	add    $0x10,%esp
f01301ad:	85 c0                	test   %eax,%eax
f01301af:	74 1a                	je     f01301cb <chk2+0x245>
f01301b1:	68 68 c9 13 f0       	push   $0xf013c968
f01301b6:	68 92 c8 13 f0       	push   $0xf013c892
f01301bb:	68 d8 00 00 00       	push   $0xd8
f01301c0:	68 a7 c8 13 f0       	push   $0xf013c8a7
f01301c5:	e8 a0 00 fd ff       	call   f010026a <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f01301ca:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f01301cb:	ff 45 f0             	incl   -0x10(%ebp)
f01301ce:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01301d3:	0f b6 c0             	movzbl %al,%eax
f01301d6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01301d9:	7f a5                	jg     f0130180 <chk2+0x1fa>
f01301db:	eb 01                	jmp    f01301de <chk2+0x258>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f01301dd:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f01301de:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01301e1:	c9                   	leave  
f01301e2:	c3                   	ret    

f01301e3 <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f01301e3:	55                   	push   %ebp
f01301e4:	89 e5                	mov    %esp,%ebp
f01301e6:	83 ec 18             	sub    $0x18,%esp

	//2016
	// check phys mem
	#if USE_KHEAP
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f01301e9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01301f0:	eb 40                	jmp    f0130232 <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f01301f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01301f5:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f01301fb:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0130200:	83 ec 08             	sub    $0x8,%esp
f0130203:	52                   	push   %edx
f0130204:	50                   	push   %eax
f0130205:	e8 9b 01 00 00       	call   f01303a5 <check_va2pa>
f013020a:	83 c4 10             	add    $0x10,%esp
f013020d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130210:	74 19                	je     f013022b <check_boot_pgdir+0x48>
f0130212:	68 a8 c9 13 f0       	push   $0xf013c9a8
f0130217:	68 92 c8 13 f0       	push   $0xf013c892
f013021c:	68 fa 00 00 00       	push   $0xfa
f0130221:	68 a7 c8 13 f0       	push   $0xf013c8a7
f0130226:	e8 d0 ff fc ff       	call   f01001fb <_panic>

	//2016
	// check phys mem
	#if USE_KHEAP
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f013022b:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0130232:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130235:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f013023b:	a1 78 7b 65 f0       	mov    0xf0657b78,%eax
f0130240:	39 c2                	cmp    %eax,%edx
f0130242:	72 ae                	jb     f01301f2 <check_boot_pgdir+0xf>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0130244:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f013024b:	eb 74                	jmp    f01302c1 <check_boot_pgdir+0xde>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f013024d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130250:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f0130256:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f013025b:	83 ec 08             	sub    $0x8,%esp
f013025e:	52                   	push   %edx
f013025f:	50                   	push   %eax
f0130260:	e8 40 01 00 00       	call   f01303a5 <check_va2pa>
f0130265:	83 c4 10             	add    $0x10,%esp
f0130268:	c7 45 f0 00 90 18 f0 	movl   $0xf0189000,-0x10(%ebp)
f013026f:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f0130276:	77 17                	ja     f013028f <check_boot_pgdir+0xac>
f0130278:	ff 75 f0             	pushl  -0x10(%ebp)
f013027b:	68 e0 c9 13 f0       	push   $0xf013c9e0
f0130280:	68 04 01 00 00       	push   $0x104
f0130285:	68 a7 c8 13 f0       	push   $0xf013c8a7
f013028a:	e8 6c ff fc ff       	call   f01001fb <_panic>
f013028f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0130292:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f0130298:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013029b:	01 ca                	add    %ecx,%edx
f013029d:	39 d0                	cmp    %edx,%eax
f013029f:	74 19                	je     f01302ba <check_boot_pgdir+0xd7>
f01302a1:	68 14 ca 13 f0       	push   $0xf013ca14
f01302a6:	68 92 c8 13 f0       	push   $0xf013c892
f01302ab:	68 04 01 00 00       	push   $0x104
f01302b0:	68 a7 c8 13 f0       	push   $0xf013c8a7
f01302b5:	e8 41 ff fc ff       	call   f01001fb <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f01302ba:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01302c1:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f01302c8:	76 83                	jbe    f013024d <check_boot_pgdir+0x6a>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f01302ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01302d1:	e9 af 00 00 00       	jmp    f0130385 <check_boot_pgdir+0x1a2>
		switch (i) {
f01302d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01302d9:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f01302de:	74 11                	je     f01302f1 <check_boot_pgdir+0x10e>
f01302e0:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f01302e5:	72 36                	jb     f013031d <check_boot_pgdir+0x13a>
f01302e7:	2d bd 03 00 00       	sub    $0x3bd,%eax
f01302ec:	83 f8 02             	cmp    $0x2,%eax
f01302ef:	77 2c                	ja     f013031d <check_boot_pgdir+0x13a>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f01302f1:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01302f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01302f9:	c1 e2 02             	shl    $0x2,%edx
f01302fc:	01 d0                	add    %edx,%eax
f01302fe:	8b 00                	mov    (%eax),%eax
f0130300:	85 c0                	test   %eax,%eax
f0130302:	75 7a                	jne    f013037e <check_boot_pgdir+0x19b>
f0130304:	68 96 ca 13 f0       	push   $0xf013ca96
f0130309:	68 92 c8 13 f0       	push   $0xf013c892
f013030e:	68 0f 01 00 00       	push   $0x10f
f0130313:	68 a7 c8 13 f0       	push   $0xf013c8a7
f0130318:	e8 de fe fc ff       	call   f01001fb <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f013031d:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f0130324:	76 2c                	jbe    f0130352 <check_boot_pgdir+0x16f>
				assert(ptr_page_directory[i]);
f0130326:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f013032b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013032e:	c1 e2 02             	shl    $0x2,%edx
f0130331:	01 d0                	add    %edx,%eax
f0130333:	8b 00                	mov    (%eax),%eax
f0130335:	85 c0                	test   %eax,%eax
f0130337:	75 48                	jne    f0130381 <check_boot_pgdir+0x19e>
f0130339:	68 96 ca 13 f0       	push   $0xf013ca96
f013033e:	68 92 c8 13 f0       	push   $0xf013c892
f0130343:	68 13 01 00 00       	push   $0x113
f0130348:	68 a7 c8 13 f0       	push   $0xf013c8a7
f013034d:	e8 a9 fe fc ff       	call   f01001fb <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f0130352:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0130357:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013035a:	c1 e2 02             	shl    $0x2,%edx
f013035d:	01 d0                	add    %edx,%eax
f013035f:	8b 00                	mov    (%eax),%eax
f0130361:	85 c0                	test   %eax,%eax
f0130363:	74 1c                	je     f0130381 <check_boot_pgdir+0x19e>
f0130365:	68 ac ca 13 f0       	push   $0xf013caac
f013036a:	68 92 c8 13 f0       	push   $0xf013c892
f013036f:	68 15 01 00 00       	push   $0x115
f0130374:	68 a7 c8 13 f0       	push   $0xf013c8a7
f0130379:	e8 7d fe fc ff       	call   f01001fb <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f013037e:	90                   	nop
f013037f:	eb 01                	jmp    f0130382 <check_boot_pgdir+0x19f>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f0130381:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0130382:	ff 45 f4             	incl   -0xc(%ebp)
f0130385:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f013038c:	0f 86 44 ff ff ff    	jbe    f01302d6 <check_boot_pgdir+0xf3>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f0130392:	83 ec 0c             	sub    $0xc,%esp
f0130395:	68 c8 ca 13 f0       	push   $0xf013cac8
f013039a:	e8 e3 08 fd ff       	call   f0100c82 <cprintf>
f013039f:	83 c4 10             	add    $0x10,%esp
}
f01303a2:	90                   	nop
f01303a3:	c9                   	leave  
f01303a4:	c3                   	ret    

f01303a5 <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f01303a5:	55                   	push   %ebp
f01303a6:	89 e5                	mov    %esp,%ebp
f01303a8:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f01303ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f01303ae:	c1 e8 16             	shr    $0x16,%eax
f01303b1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01303b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01303bb:	01 d0                	add    %edx,%eax
f01303bd:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f01303c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01303c3:	8b 00                	mov    (%eax),%eax
f01303c5:	83 e0 01             	and    $0x1,%eax
f01303c8:	85 c0                	test   %eax,%eax
f01303ca:	75 0a                	jne    f01303d6 <check_va2pa+0x31>
		return ~0;
f01303cc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01303d1:	e9 87 00 00 00       	jmp    f013045d <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f01303d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01303d9:	8b 00                	mov    (%eax),%eax
f01303db:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01303e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01303e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01303e6:	c1 e8 0c             	shr    $0xc,%eax
f01303e9:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01303ec:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f01303f1:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01303f4:	72 17                	jb     f013040d <check_va2pa+0x68>
f01303f6:	ff 75 f0             	pushl  -0x10(%ebp)
f01303f9:	68 e8 ca 13 f0       	push   $0xf013cae8
f01303fe:	68 2b 01 00 00       	push   $0x12b
f0130403:	68 a7 c8 13 f0       	push   $0xf013c8a7
f0130408:	e8 ee fd fc ff       	call   f01001fb <_panic>
f013040d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130410:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0130415:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f0130418:	8b 45 0c             	mov    0xc(%ebp),%eax
f013041b:	c1 e8 0c             	shr    $0xc,%eax
f013041e:	25 ff 03 00 00       	and    $0x3ff,%eax
f0130423:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f013042a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013042d:	01 d0                	add    %edx,%eax
f013042f:	8b 00                	mov    (%eax),%eax
f0130431:	83 e0 01             	and    $0x1,%eax
f0130434:	85 c0                	test   %eax,%eax
f0130436:	75 07                	jne    f013043f <check_va2pa+0x9a>
		return ~0;
f0130438:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f013043d:	eb 1e                	jmp    f013045d <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f013043f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130442:	c1 e8 0c             	shr    $0xc,%eax
f0130445:	25 ff 03 00 00       	and    $0x3ff,%eax
f013044a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130451:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0130454:	01 d0                	add    %edx,%eax
f0130456:	8b 00                	mov    (%eax),%eax
f0130458:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f013045d:	c9                   	leave  
f013045e:	c3                   	ret    

f013045f <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f013045f:	55                   	push   %ebp
f0130460:	89 e5                	mov    %esp,%ebp
f0130462:	53                   	push   %ebx
f0130463:	83 ec 14             	sub    $0x14,%esp
f0130466:	8b 45 10             	mov    0x10(%ebp),%eax
f0130469:	89 45 f0             	mov    %eax,-0x10(%ebp)
f013046c:	8b 45 14             	mov    0x14(%ebp),%eax
f013046f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f0130472:	8b 45 18             	mov    0x18(%ebp),%eax
f0130475:	ba 00 00 00 00       	mov    $0x0,%edx
f013047a:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f013047d:	77 55                	ja     f01304d4 <printnum+0x75>
f013047f:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f0130482:	72 05                	jb     f0130489 <printnum+0x2a>
f0130484:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130487:	77 4b                	ja     f01304d4 <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f0130489:	8b 45 1c             	mov    0x1c(%ebp),%eax
f013048c:	8d 58 ff             	lea    -0x1(%eax),%ebx
f013048f:	8b 45 18             	mov    0x18(%ebp),%eax
f0130492:	ba 00 00 00 00       	mov    $0x0,%edx
f0130497:	52                   	push   %edx
f0130498:	50                   	push   %eax
f0130499:	ff 75 f4             	pushl  -0xc(%ebp)
f013049c:	ff 75 f0             	pushl  -0x10(%ebp)
f013049f:	e8 0c 28 00 00       	call   f0132cb0 <__udivdi3>
f01304a4:	83 c4 10             	add    $0x10,%esp
f01304a7:	83 ec 04             	sub    $0x4,%esp
f01304aa:	ff 75 20             	pushl  0x20(%ebp)
f01304ad:	53                   	push   %ebx
f01304ae:	ff 75 18             	pushl  0x18(%ebp)
f01304b1:	52                   	push   %edx
f01304b2:	50                   	push   %eax
f01304b3:	ff 75 0c             	pushl  0xc(%ebp)
f01304b6:	ff 75 08             	pushl  0x8(%ebp)
f01304b9:	e8 a1 ff ff ff       	call   f013045f <printnum>
f01304be:	83 c4 20             	add    $0x20,%esp
f01304c1:	eb 1a                	jmp    f01304dd <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f01304c3:	83 ec 08             	sub    $0x8,%esp
f01304c6:	ff 75 0c             	pushl  0xc(%ebp)
f01304c9:	ff 75 20             	pushl  0x20(%ebp)
f01304cc:	8b 45 08             	mov    0x8(%ebp),%eax
f01304cf:	ff d0                	call   *%eax
f01304d1:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f01304d4:	ff 4d 1c             	decl   0x1c(%ebp)
f01304d7:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f01304db:	7f e6                	jg     f01304c3 <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f01304dd:	8b 4d 18             	mov    0x18(%ebp),%ecx
f01304e0:	bb 00 00 00 00       	mov    $0x0,%ebx
f01304e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01304e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01304eb:	53                   	push   %ebx
f01304ec:	51                   	push   %ecx
f01304ed:	52                   	push   %edx
f01304ee:	50                   	push   %eax
f01304ef:	e8 cc 28 00 00       	call   f0132dc0 <__umoddi3>
f01304f4:	83 c4 10             	add    $0x10,%esp
f01304f7:	05 34 cd 13 f0       	add    $0xf013cd34,%eax
f01304fc:	8a 00                	mov    (%eax),%al
f01304fe:	0f be c0             	movsbl %al,%eax
f0130501:	83 ec 08             	sub    $0x8,%esp
f0130504:	ff 75 0c             	pushl  0xc(%ebp)
f0130507:	50                   	push   %eax
f0130508:	8b 45 08             	mov    0x8(%ebp),%eax
f013050b:	ff d0                	call   *%eax
f013050d:	83 c4 10             	add    $0x10,%esp
}
f0130510:	90                   	nop
f0130511:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0130514:	c9                   	leave  
f0130515:	c3                   	ret    

f0130516 <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f0130516:	55                   	push   %ebp
f0130517:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0130519:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f013051d:	7e 1c                	jle    f013053b <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f013051f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130522:	8b 00                	mov    (%eax),%eax
f0130524:	8d 50 08             	lea    0x8(%eax),%edx
f0130527:	8b 45 08             	mov    0x8(%ebp),%eax
f013052a:	89 10                	mov    %edx,(%eax)
f013052c:	8b 45 08             	mov    0x8(%ebp),%eax
f013052f:	8b 00                	mov    (%eax),%eax
f0130531:	83 e8 08             	sub    $0x8,%eax
f0130534:	8b 50 04             	mov    0x4(%eax),%edx
f0130537:	8b 00                	mov    (%eax),%eax
f0130539:	eb 40                	jmp    f013057b <getuint+0x65>
	else if (lflag)
f013053b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f013053f:	74 1e                	je     f013055f <getuint+0x49>
		return va_arg(*ap, unsigned long);
f0130541:	8b 45 08             	mov    0x8(%ebp),%eax
f0130544:	8b 00                	mov    (%eax),%eax
f0130546:	8d 50 04             	lea    0x4(%eax),%edx
f0130549:	8b 45 08             	mov    0x8(%ebp),%eax
f013054c:	89 10                	mov    %edx,(%eax)
f013054e:	8b 45 08             	mov    0x8(%ebp),%eax
f0130551:	8b 00                	mov    (%eax),%eax
f0130553:	83 e8 04             	sub    $0x4,%eax
f0130556:	8b 00                	mov    (%eax),%eax
f0130558:	ba 00 00 00 00       	mov    $0x0,%edx
f013055d:	eb 1c                	jmp    f013057b <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f013055f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130562:	8b 00                	mov    (%eax),%eax
f0130564:	8d 50 04             	lea    0x4(%eax),%edx
f0130567:	8b 45 08             	mov    0x8(%ebp),%eax
f013056a:	89 10                	mov    %edx,(%eax)
f013056c:	8b 45 08             	mov    0x8(%ebp),%eax
f013056f:	8b 00                	mov    (%eax),%eax
f0130571:	83 e8 04             	sub    $0x4,%eax
f0130574:	8b 00                	mov    (%eax),%eax
f0130576:	ba 00 00 00 00       	mov    $0x0,%edx
}
f013057b:	5d                   	pop    %ebp
f013057c:	c3                   	ret    

f013057d <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f013057d:	55                   	push   %ebp
f013057e:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0130580:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0130584:	7e 1c                	jle    f01305a2 <getint+0x25>
		return va_arg(*ap, long long);
f0130586:	8b 45 08             	mov    0x8(%ebp),%eax
f0130589:	8b 00                	mov    (%eax),%eax
f013058b:	8d 50 08             	lea    0x8(%eax),%edx
f013058e:	8b 45 08             	mov    0x8(%ebp),%eax
f0130591:	89 10                	mov    %edx,(%eax)
f0130593:	8b 45 08             	mov    0x8(%ebp),%eax
f0130596:	8b 00                	mov    (%eax),%eax
f0130598:	83 e8 08             	sub    $0x8,%eax
f013059b:	8b 50 04             	mov    0x4(%eax),%edx
f013059e:	8b 00                	mov    (%eax),%eax
f01305a0:	eb 38                	jmp    f01305da <getint+0x5d>
	else if (lflag)
f01305a2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01305a6:	74 1a                	je     f01305c2 <getint+0x45>
		return va_arg(*ap, long);
f01305a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01305ab:	8b 00                	mov    (%eax),%eax
f01305ad:	8d 50 04             	lea    0x4(%eax),%edx
f01305b0:	8b 45 08             	mov    0x8(%ebp),%eax
f01305b3:	89 10                	mov    %edx,(%eax)
f01305b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01305b8:	8b 00                	mov    (%eax),%eax
f01305ba:	83 e8 04             	sub    $0x4,%eax
f01305bd:	8b 00                	mov    (%eax),%eax
f01305bf:	99                   	cltd   
f01305c0:	eb 18                	jmp    f01305da <getint+0x5d>
	else
		return va_arg(*ap, int);
f01305c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01305c5:	8b 00                	mov    (%eax),%eax
f01305c7:	8d 50 04             	lea    0x4(%eax),%edx
f01305ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01305cd:	89 10                	mov    %edx,(%eax)
f01305cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01305d2:	8b 00                	mov    (%eax),%eax
f01305d4:	83 e8 04             	sub    $0x4,%eax
f01305d7:	8b 00                	mov    (%eax),%eax
f01305d9:	99                   	cltd   
}
f01305da:	5d                   	pop    %ebp
f01305db:	c3                   	ret    

f01305dc <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f01305dc:	55                   	push   %ebp
f01305dd:	89 e5                	mov    %esp,%ebp
f01305df:	56                   	push   %esi
f01305e0:	53                   	push   %ebx
f01305e1:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f01305e4:	eb 17                	jmp    f01305fd <vprintfmt+0x21>
			if (ch == '\0')
f01305e6:	85 db                	test   %ebx,%ebx
f01305e8:	0f 84 af 03 00 00    	je     f013099d <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f01305ee:	83 ec 08             	sub    $0x8,%esp
f01305f1:	ff 75 0c             	pushl  0xc(%ebp)
f01305f4:	53                   	push   %ebx
f01305f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01305f8:	ff d0                	call   *%eax
f01305fa:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f01305fd:	8b 45 10             	mov    0x10(%ebp),%eax
f0130600:	8d 50 01             	lea    0x1(%eax),%edx
f0130603:	89 55 10             	mov    %edx,0x10(%ebp)
f0130606:	8a 00                	mov    (%eax),%al
f0130608:	0f b6 d8             	movzbl %al,%ebx
f013060b:	83 fb 25             	cmp    $0x25,%ebx
f013060e:	75 d6                	jne    f01305e6 <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f0130610:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f0130614:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f013061b:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f0130622:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f0130629:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f0130630:	8b 45 10             	mov    0x10(%ebp),%eax
f0130633:	8d 50 01             	lea    0x1(%eax),%edx
f0130636:	89 55 10             	mov    %edx,0x10(%ebp)
f0130639:	8a 00                	mov    (%eax),%al
f013063b:	0f b6 d8             	movzbl %al,%ebx
f013063e:	8d 43 dd             	lea    -0x23(%ebx),%eax
f0130641:	83 f8 55             	cmp    $0x55,%eax
f0130644:	0f 87 2b 03 00 00    	ja     f0130975 <vprintfmt+0x399>
f013064a:	8b 04 85 58 cd 13 f0 	mov    -0xfec32a8(,%eax,4),%eax
f0130651:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f0130653:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f0130657:	eb d7                	jmp    f0130630 <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f0130659:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f013065d:	eb d1                	jmp    f0130630 <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f013065f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f0130666:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0130669:	89 d0                	mov    %edx,%eax
f013066b:	c1 e0 02             	shl    $0x2,%eax
f013066e:	01 d0                	add    %edx,%eax
f0130670:	01 c0                	add    %eax,%eax
f0130672:	01 d8                	add    %ebx,%eax
f0130674:	83 e8 30             	sub    $0x30,%eax
f0130677:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f013067a:	8b 45 10             	mov    0x10(%ebp),%eax
f013067d:	8a 00                	mov    (%eax),%al
f013067f:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f0130682:	83 fb 2f             	cmp    $0x2f,%ebx
f0130685:	7e 3e                	jle    f01306c5 <vprintfmt+0xe9>
f0130687:	83 fb 39             	cmp    $0x39,%ebx
f013068a:	7f 39                	jg     f01306c5 <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f013068c:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f013068f:	eb d5                	jmp    f0130666 <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f0130691:	8b 45 14             	mov    0x14(%ebp),%eax
f0130694:	83 c0 04             	add    $0x4,%eax
f0130697:	89 45 14             	mov    %eax,0x14(%ebp)
f013069a:	8b 45 14             	mov    0x14(%ebp),%eax
f013069d:	83 e8 04             	sub    $0x4,%eax
f01306a0:	8b 00                	mov    (%eax),%eax
f01306a2:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f01306a5:	eb 1f                	jmp    f01306c6 <vprintfmt+0xea>

		case '.':
			if (width < 0)
f01306a7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01306ab:	79 83                	jns    f0130630 <vprintfmt+0x54>
				width = 0;
f01306ad:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f01306b4:	e9 77 ff ff ff       	jmp    f0130630 <vprintfmt+0x54>

		case '#':
			altflag = 1;
f01306b9:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f01306c0:	e9 6b ff ff ff       	jmp    f0130630 <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f01306c5:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f01306c6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01306ca:	0f 89 60 ff ff ff    	jns    f0130630 <vprintfmt+0x54>
				width = precision, precision = -1;
f01306d0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01306d3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01306d6:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f01306dd:	e9 4e ff ff ff       	jmp    f0130630 <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f01306e2:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f01306e5:	e9 46 ff ff ff       	jmp    f0130630 <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f01306ea:	8b 45 14             	mov    0x14(%ebp),%eax
f01306ed:	83 c0 04             	add    $0x4,%eax
f01306f0:	89 45 14             	mov    %eax,0x14(%ebp)
f01306f3:	8b 45 14             	mov    0x14(%ebp),%eax
f01306f6:	83 e8 04             	sub    $0x4,%eax
f01306f9:	8b 00                	mov    (%eax),%eax
f01306fb:	83 ec 08             	sub    $0x8,%esp
f01306fe:	ff 75 0c             	pushl  0xc(%ebp)
f0130701:	50                   	push   %eax
f0130702:	8b 45 08             	mov    0x8(%ebp),%eax
f0130705:	ff d0                	call   *%eax
f0130707:	83 c4 10             	add    $0x10,%esp
			break;
f013070a:	e9 89 02 00 00       	jmp    f0130998 <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f013070f:	8b 45 14             	mov    0x14(%ebp),%eax
f0130712:	83 c0 04             	add    $0x4,%eax
f0130715:	89 45 14             	mov    %eax,0x14(%ebp)
f0130718:	8b 45 14             	mov    0x14(%ebp),%eax
f013071b:	83 e8 04             	sub    $0x4,%eax
f013071e:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f0130720:	85 db                	test   %ebx,%ebx
f0130722:	79 02                	jns    f0130726 <vprintfmt+0x14a>
				err = -err;
f0130724:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f0130726:	83 fb 64             	cmp    $0x64,%ebx
f0130729:	7f 0b                	jg     f0130736 <vprintfmt+0x15a>
f013072b:	8b 34 9d a0 cb 13 f0 	mov    -0xfec3460(,%ebx,4),%esi
f0130732:	85 f6                	test   %esi,%esi
f0130734:	75 19                	jne    f013074f <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f0130736:	53                   	push   %ebx
f0130737:	68 45 cd 13 f0       	push   $0xf013cd45
f013073c:	ff 75 0c             	pushl  0xc(%ebp)
f013073f:	ff 75 08             	pushl  0x8(%ebp)
f0130742:	e8 5e 02 00 00       	call   f01309a5 <printfmt>
f0130747:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f013074a:	e9 49 02 00 00       	jmp    f0130998 <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f013074f:	56                   	push   %esi
f0130750:	68 4e cd 13 f0       	push   $0xf013cd4e
f0130755:	ff 75 0c             	pushl  0xc(%ebp)
f0130758:	ff 75 08             	pushl  0x8(%ebp)
f013075b:	e8 45 02 00 00       	call   f01309a5 <printfmt>
f0130760:	83 c4 10             	add    $0x10,%esp
			break;
f0130763:	e9 30 02 00 00       	jmp    f0130998 <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f0130768:	8b 45 14             	mov    0x14(%ebp),%eax
f013076b:	83 c0 04             	add    $0x4,%eax
f013076e:	89 45 14             	mov    %eax,0x14(%ebp)
f0130771:	8b 45 14             	mov    0x14(%ebp),%eax
f0130774:	83 e8 04             	sub    $0x4,%eax
f0130777:	8b 30                	mov    (%eax),%esi
f0130779:	85 f6                	test   %esi,%esi
f013077b:	75 05                	jne    f0130782 <vprintfmt+0x1a6>
				p = "(null)";
f013077d:	be 51 cd 13 f0       	mov    $0xf013cd51,%esi
			if (width > 0 && padc != '-')
f0130782:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130786:	7e 6d                	jle    f01307f5 <vprintfmt+0x219>
f0130788:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f013078c:	74 67                	je     f01307f5 <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f013078e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0130791:	83 ec 08             	sub    $0x8,%esp
f0130794:	50                   	push   %eax
f0130795:	56                   	push   %esi
f0130796:	e8 12 05 00 00       	call   f0130cad <strnlen>
f013079b:	83 c4 10             	add    $0x10,%esp
f013079e:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f01307a1:	eb 16                	jmp    f01307b9 <vprintfmt+0x1dd>
					putch(padc, putdat);
f01307a3:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f01307a7:	83 ec 08             	sub    $0x8,%esp
f01307aa:	ff 75 0c             	pushl  0xc(%ebp)
f01307ad:	50                   	push   %eax
f01307ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01307b1:	ff d0                	call   *%eax
f01307b3:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f01307b6:	ff 4d e4             	decl   -0x1c(%ebp)
f01307b9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01307bd:	7f e4                	jg     f01307a3 <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f01307bf:	eb 34                	jmp    f01307f5 <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f01307c1:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01307c5:	74 1c                	je     f01307e3 <vprintfmt+0x207>
f01307c7:	83 fb 1f             	cmp    $0x1f,%ebx
f01307ca:	7e 05                	jle    f01307d1 <vprintfmt+0x1f5>
f01307cc:	83 fb 7e             	cmp    $0x7e,%ebx
f01307cf:	7e 12                	jle    f01307e3 <vprintfmt+0x207>
					putch('?', putdat);
f01307d1:	83 ec 08             	sub    $0x8,%esp
f01307d4:	ff 75 0c             	pushl  0xc(%ebp)
f01307d7:	6a 3f                	push   $0x3f
f01307d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01307dc:	ff d0                	call   *%eax
f01307de:	83 c4 10             	add    $0x10,%esp
f01307e1:	eb 0f                	jmp    f01307f2 <vprintfmt+0x216>
				else
					putch(ch, putdat);
f01307e3:	83 ec 08             	sub    $0x8,%esp
f01307e6:	ff 75 0c             	pushl  0xc(%ebp)
f01307e9:	53                   	push   %ebx
f01307ea:	8b 45 08             	mov    0x8(%ebp),%eax
f01307ed:	ff d0                	call   *%eax
f01307ef:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f01307f2:	ff 4d e4             	decl   -0x1c(%ebp)
f01307f5:	89 f0                	mov    %esi,%eax
f01307f7:	8d 70 01             	lea    0x1(%eax),%esi
f01307fa:	8a 00                	mov    (%eax),%al
f01307fc:	0f be d8             	movsbl %al,%ebx
f01307ff:	85 db                	test   %ebx,%ebx
f0130801:	74 24                	je     f0130827 <vprintfmt+0x24b>
f0130803:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0130807:	78 b8                	js     f01307c1 <vprintfmt+0x1e5>
f0130809:	ff 4d e0             	decl   -0x20(%ebp)
f013080c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0130810:	79 af                	jns    f01307c1 <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f0130812:	eb 13                	jmp    f0130827 <vprintfmt+0x24b>
				putch(' ', putdat);
f0130814:	83 ec 08             	sub    $0x8,%esp
f0130817:	ff 75 0c             	pushl  0xc(%ebp)
f013081a:	6a 20                	push   $0x20
f013081c:	8b 45 08             	mov    0x8(%ebp),%eax
f013081f:	ff d0                	call   *%eax
f0130821:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f0130824:	ff 4d e4             	decl   -0x1c(%ebp)
f0130827:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f013082b:	7f e7                	jg     f0130814 <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f013082d:	e9 66 01 00 00       	jmp    f0130998 <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f0130832:	83 ec 08             	sub    $0x8,%esp
f0130835:	ff 75 e8             	pushl  -0x18(%ebp)
f0130838:	8d 45 14             	lea    0x14(%ebp),%eax
f013083b:	50                   	push   %eax
f013083c:	e8 3c fd ff ff       	call   f013057d <getint>
f0130841:	83 c4 10             	add    $0x10,%esp
f0130844:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130847:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f013084a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013084d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130850:	85 d2                	test   %edx,%edx
f0130852:	79 23                	jns    f0130877 <vprintfmt+0x29b>
				putch('-', putdat);
f0130854:	83 ec 08             	sub    $0x8,%esp
f0130857:	ff 75 0c             	pushl  0xc(%ebp)
f013085a:	6a 2d                	push   $0x2d
f013085c:	8b 45 08             	mov    0x8(%ebp),%eax
f013085f:	ff d0                	call   *%eax
f0130861:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f0130864:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130867:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013086a:	f7 d8                	neg    %eax
f013086c:	83 d2 00             	adc    $0x0,%edx
f013086f:	f7 da                	neg    %edx
f0130871:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130874:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f0130877:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f013087e:	e9 bc 00 00 00       	jmp    f013093f <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f0130883:	83 ec 08             	sub    $0x8,%esp
f0130886:	ff 75 e8             	pushl  -0x18(%ebp)
f0130889:	8d 45 14             	lea    0x14(%ebp),%eax
f013088c:	50                   	push   %eax
f013088d:	e8 84 fc ff ff       	call   f0130516 <getuint>
f0130892:	83 c4 10             	add    $0x10,%esp
f0130895:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130898:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f013089b:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f01308a2:	e9 98 00 00 00       	jmp    f013093f <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f01308a7:	83 ec 08             	sub    $0x8,%esp
f01308aa:	ff 75 0c             	pushl  0xc(%ebp)
f01308ad:	6a 58                	push   $0x58
f01308af:	8b 45 08             	mov    0x8(%ebp),%eax
f01308b2:	ff d0                	call   *%eax
f01308b4:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f01308b7:	83 ec 08             	sub    $0x8,%esp
f01308ba:	ff 75 0c             	pushl  0xc(%ebp)
f01308bd:	6a 58                	push   $0x58
f01308bf:	8b 45 08             	mov    0x8(%ebp),%eax
f01308c2:	ff d0                	call   *%eax
f01308c4:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f01308c7:	83 ec 08             	sub    $0x8,%esp
f01308ca:	ff 75 0c             	pushl  0xc(%ebp)
f01308cd:	6a 58                	push   $0x58
f01308cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01308d2:	ff d0                	call   *%eax
f01308d4:	83 c4 10             	add    $0x10,%esp
			break;
f01308d7:	e9 bc 00 00 00       	jmp    f0130998 <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f01308dc:	83 ec 08             	sub    $0x8,%esp
f01308df:	ff 75 0c             	pushl  0xc(%ebp)
f01308e2:	6a 30                	push   $0x30
f01308e4:	8b 45 08             	mov    0x8(%ebp),%eax
f01308e7:	ff d0                	call   *%eax
f01308e9:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f01308ec:	83 ec 08             	sub    $0x8,%esp
f01308ef:	ff 75 0c             	pushl  0xc(%ebp)
f01308f2:	6a 78                	push   $0x78
f01308f4:	8b 45 08             	mov    0x8(%ebp),%eax
f01308f7:	ff d0                	call   *%eax
f01308f9:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f01308fc:	8b 45 14             	mov    0x14(%ebp),%eax
f01308ff:	83 c0 04             	add    $0x4,%eax
f0130902:	89 45 14             	mov    %eax,0x14(%ebp)
f0130905:	8b 45 14             	mov    0x14(%ebp),%eax
f0130908:	83 e8 04             	sub    $0x4,%eax
f013090b:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f013090d:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130910:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f0130917:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f013091e:	eb 1f                	jmp    f013093f <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f0130920:	83 ec 08             	sub    $0x8,%esp
f0130923:	ff 75 e8             	pushl  -0x18(%ebp)
f0130926:	8d 45 14             	lea    0x14(%ebp),%eax
f0130929:	50                   	push   %eax
f013092a:	e8 e7 fb ff ff       	call   f0130516 <getuint>
f013092f:	83 c4 10             	add    $0x10,%esp
f0130932:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130935:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f0130938:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f013093f:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f0130943:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0130946:	83 ec 04             	sub    $0x4,%esp
f0130949:	52                   	push   %edx
f013094a:	ff 75 e4             	pushl  -0x1c(%ebp)
f013094d:	50                   	push   %eax
f013094e:	ff 75 f4             	pushl  -0xc(%ebp)
f0130951:	ff 75 f0             	pushl  -0x10(%ebp)
f0130954:	ff 75 0c             	pushl  0xc(%ebp)
f0130957:	ff 75 08             	pushl  0x8(%ebp)
f013095a:	e8 00 fb ff ff       	call   f013045f <printnum>
f013095f:	83 c4 20             	add    $0x20,%esp
			break;
f0130962:	eb 34                	jmp    f0130998 <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f0130964:	83 ec 08             	sub    $0x8,%esp
f0130967:	ff 75 0c             	pushl  0xc(%ebp)
f013096a:	53                   	push   %ebx
f013096b:	8b 45 08             	mov    0x8(%ebp),%eax
f013096e:	ff d0                	call   *%eax
f0130970:	83 c4 10             	add    $0x10,%esp
			break;
f0130973:	eb 23                	jmp    f0130998 <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f0130975:	83 ec 08             	sub    $0x8,%esp
f0130978:	ff 75 0c             	pushl  0xc(%ebp)
f013097b:	6a 25                	push   $0x25
f013097d:	8b 45 08             	mov    0x8(%ebp),%eax
f0130980:	ff d0                	call   *%eax
f0130982:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f0130985:	ff 4d 10             	decl   0x10(%ebp)
f0130988:	eb 03                	jmp    f013098d <vprintfmt+0x3b1>
f013098a:	ff 4d 10             	decl   0x10(%ebp)
f013098d:	8b 45 10             	mov    0x10(%ebp),%eax
f0130990:	48                   	dec    %eax
f0130991:	8a 00                	mov    (%eax),%al
f0130993:	3c 25                	cmp    $0x25,%al
f0130995:	75 f3                	jne    f013098a <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f0130997:	90                   	nop
		}
	}
f0130998:	e9 47 fc ff ff       	jmp    f01305e4 <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f013099d:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f013099e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01309a1:	5b                   	pop    %ebx
f01309a2:	5e                   	pop    %esi
f01309a3:	5d                   	pop    %ebp
f01309a4:	c3                   	ret    

f01309a5 <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f01309a5:	55                   	push   %ebp
f01309a6:	89 e5                	mov    %esp,%ebp
f01309a8:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f01309ab:	8d 45 10             	lea    0x10(%ebp),%eax
f01309ae:	83 c0 04             	add    $0x4,%eax
f01309b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f01309b4:	8b 45 10             	mov    0x10(%ebp),%eax
f01309b7:	ff 75 f4             	pushl  -0xc(%ebp)
f01309ba:	50                   	push   %eax
f01309bb:	ff 75 0c             	pushl  0xc(%ebp)
f01309be:	ff 75 08             	pushl  0x8(%ebp)
f01309c1:	e8 16 fc ff ff       	call   f01305dc <vprintfmt>
f01309c6:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f01309c9:	90                   	nop
f01309ca:	c9                   	leave  
f01309cb:	c3                   	ret    

f01309cc <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f01309cc:	55                   	push   %ebp
f01309cd:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f01309cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01309d2:	8b 40 08             	mov    0x8(%eax),%eax
f01309d5:	8d 50 01             	lea    0x1(%eax),%edx
f01309d8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01309db:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f01309de:	8b 45 0c             	mov    0xc(%ebp),%eax
f01309e1:	8b 10                	mov    (%eax),%edx
f01309e3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01309e6:	8b 40 04             	mov    0x4(%eax),%eax
f01309e9:	39 c2                	cmp    %eax,%edx
f01309eb:	73 12                	jae    f01309ff <sprintputch+0x33>
		*b->buf++ = ch;
f01309ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f01309f0:	8b 00                	mov    (%eax),%eax
f01309f2:	8d 48 01             	lea    0x1(%eax),%ecx
f01309f5:	8b 55 0c             	mov    0xc(%ebp),%edx
f01309f8:	89 0a                	mov    %ecx,(%edx)
f01309fa:	8b 55 08             	mov    0x8(%ebp),%edx
f01309fd:	88 10                	mov    %dl,(%eax)
}
f01309ff:	90                   	nop
f0130a00:	5d                   	pop    %ebp
f0130a01:	c3                   	ret    

f0130a02 <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f0130a02:	55                   	push   %ebp
f0130a03:	89 e5                	mov    %esp,%ebp
f0130a05:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f0130a08:	8b 45 08             	mov    0x8(%ebp),%eax
f0130a0b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0130a0e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130a11:	8d 50 ff             	lea    -0x1(%eax),%edx
f0130a14:	8b 45 08             	mov    0x8(%ebp),%eax
f0130a17:	01 d0                	add    %edx,%eax
f0130a19:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130a1c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f0130a23:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130a27:	74 06                	je     f0130a2f <vsnprintf+0x2d>
f0130a29:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130a2d:	7f 07                	jg     f0130a36 <vsnprintf+0x34>
		return -E_INVAL;
f0130a2f:	b8 03 00 00 00       	mov    $0x3,%eax
f0130a34:	eb 20                	jmp    f0130a56 <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f0130a36:	ff 75 14             	pushl  0x14(%ebp)
f0130a39:	ff 75 10             	pushl  0x10(%ebp)
f0130a3c:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0130a3f:	50                   	push   %eax
f0130a40:	68 cc 09 13 f0       	push   $0xf01309cc
f0130a45:	e8 92 fb ff ff       	call   f01305dc <vprintfmt>
f0130a4a:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f0130a4d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0130a50:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f0130a53:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0130a56:	c9                   	leave  
f0130a57:	c3                   	ret    

f0130a58 <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f0130a58:	55                   	push   %ebp
f0130a59:	89 e5                	mov    %esp,%ebp
f0130a5b:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f0130a5e:	8d 45 10             	lea    0x10(%ebp),%eax
f0130a61:	83 c0 04             	add    $0x4,%eax
f0130a64:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f0130a67:	8b 45 10             	mov    0x10(%ebp),%eax
f0130a6a:	ff 75 f4             	pushl  -0xc(%ebp)
f0130a6d:	50                   	push   %eax
f0130a6e:	ff 75 0c             	pushl  0xc(%ebp)
f0130a71:	ff 75 08             	pushl  0x8(%ebp)
f0130a74:	e8 89 ff ff ff       	call   f0130a02 <vsnprintf>
f0130a79:	83 c4 10             	add    $0x10,%esp
f0130a7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f0130a7f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0130a82:	c9                   	leave  
f0130a83:	c3                   	ret    

f0130a84 <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f0130a84:	55                   	push   %ebp
f0130a85:	89 e5                	mov    %esp,%ebp
f0130a87:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f0130a8a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130a8e:	74 13                	je     f0130aa3 <readline+0x1f>
		cprintf("%s", prompt);
f0130a90:	83 ec 08             	sub    $0x8,%esp
f0130a93:	ff 75 08             	pushl  0x8(%ebp)
f0130a96:	68 b0 ce 13 f0       	push   $0xf013ceb0
f0130a9b:	e8 e2 01 fd ff       	call   f0100c82 <cprintf>
f0130aa0:	83 c4 10             	add    $0x10,%esp

	i = 0;
f0130aa3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f0130aaa:	83 ec 0c             	sub    $0xc,%esp
f0130aad:	6a 00                	push   $0x0
f0130aaf:	e8 7b 01 fd ff       	call   f0100c2f <iscons>
f0130ab4:	83 c4 10             	add    $0x10,%esp
f0130ab7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f0130aba:	e8 57 01 fd ff       	call   f0100c16 <getchar>
f0130abf:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f0130ac2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0130ac6:	79 22                	jns    f0130aea <readline+0x66>
			if (c != -E_EOF)
f0130ac8:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f0130acc:	0f 84 ad 00 00 00    	je     f0130b7f <readline+0xfb>
				cprintf("read error: %e\n", c);
f0130ad2:	83 ec 08             	sub    $0x8,%esp
f0130ad5:	ff 75 ec             	pushl  -0x14(%ebp)
f0130ad8:	68 b3 ce 13 f0       	push   $0xf013ceb3
f0130add:	e8 a0 01 fd ff       	call   f0100c82 <cprintf>
f0130ae2:	83 c4 10             	add    $0x10,%esp
			return;
f0130ae5:	e9 95 00 00 00       	jmp    f0130b7f <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f0130aea:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f0130aee:	7e 34                	jle    f0130b24 <readline+0xa0>
f0130af0:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f0130af7:	7f 2b                	jg     f0130b24 <readline+0xa0>
			if (echoing)
f0130af9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130afd:	74 0e                	je     f0130b0d <readline+0x89>
				cputchar(c);
f0130aff:	83 ec 0c             	sub    $0xc,%esp
f0130b02:	ff 75 ec             	pushl  -0x14(%ebp)
f0130b05:	e8 f5 00 fd ff       	call   f0100bff <cputchar>
f0130b0a:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0130b0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130b10:	8d 50 01             	lea    0x1(%eax),%edx
f0130b13:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0130b16:	89 c2                	mov    %eax,%edx
f0130b18:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130b1b:	01 d0                	add    %edx,%eax
f0130b1d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0130b20:	88 10                	mov    %dl,(%eax)
f0130b22:	eb 56                	jmp    f0130b7a <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f0130b24:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f0130b28:	75 1f                	jne    f0130b49 <readline+0xc5>
f0130b2a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130b2e:	7e 19                	jle    f0130b49 <readline+0xc5>
			if (echoing)
f0130b30:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130b34:	74 0e                	je     f0130b44 <readline+0xc0>
				cputchar(c);
f0130b36:	83 ec 0c             	sub    $0xc,%esp
f0130b39:	ff 75 ec             	pushl  -0x14(%ebp)
f0130b3c:	e8 be 00 fd ff       	call   f0100bff <cputchar>
f0130b41:	83 c4 10             	add    $0x10,%esp

			i--;
f0130b44:	ff 4d f4             	decl   -0xc(%ebp)
f0130b47:	eb 31                	jmp    f0130b7a <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f0130b49:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f0130b4d:	74 0a                	je     f0130b59 <readline+0xd5>
f0130b4f:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f0130b53:	0f 85 61 ff ff ff    	jne    f0130aba <readline+0x36>
			if (echoing)
f0130b59:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130b5d:	74 0e                	je     f0130b6d <readline+0xe9>
				cputchar(c);
f0130b5f:	83 ec 0c             	sub    $0xc,%esp
f0130b62:	ff 75 ec             	pushl  -0x14(%ebp)
f0130b65:	e8 95 00 fd ff       	call   f0100bff <cputchar>
f0130b6a:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f0130b6d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130b70:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130b73:	01 d0                	add    %edx,%eax
f0130b75:	c6 00 00             	movb   $0x0,(%eax)
			return;
f0130b78:	eb 06                	jmp    f0130b80 <readline+0xfc>
		}
	}
f0130b7a:	e9 3b ff ff ff       	jmp    f0130aba <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f0130b7f:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f0130b80:	c9                   	leave  
f0130b81:	c3                   	ret    

f0130b82 <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f0130b82:	55                   	push   %ebp
f0130b83:	89 e5                	mov    %esp,%ebp
f0130b85:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f0130b88:	e8 4f bf fd ff       	call   f010cadc <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f0130b8d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130b91:	74 13                	je     f0130ba6 <atomic_readline+0x24>
		cprintf("%s", prompt);
f0130b93:	83 ec 08             	sub    $0x8,%esp
f0130b96:	ff 75 08             	pushl  0x8(%ebp)
f0130b99:	68 b0 ce 13 f0       	push   $0xf013ceb0
f0130b9e:	e8 df 00 fd ff       	call   f0100c82 <cprintf>
f0130ba3:	83 c4 10             	add    $0x10,%esp

	i = 0;
f0130ba6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f0130bad:	83 ec 0c             	sub    $0xc,%esp
f0130bb0:	6a 00                	push   $0x0
f0130bb2:	e8 78 00 fd ff       	call   f0100c2f <iscons>
f0130bb7:	83 c4 10             	add    $0x10,%esp
f0130bba:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f0130bbd:	e8 54 00 fd ff       	call   f0100c16 <getchar>
f0130bc2:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f0130bc5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0130bc9:	79 23                	jns    f0130bee <atomic_readline+0x6c>
			if (c != -E_EOF)
f0130bcb:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f0130bcf:	74 13                	je     f0130be4 <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f0130bd1:	83 ec 08             	sub    $0x8,%esp
f0130bd4:	ff 75 ec             	pushl  -0x14(%ebp)
f0130bd7:	68 b3 ce 13 f0       	push   $0xf013ceb3
f0130bdc:	e8 a1 00 fd ff       	call   f0100c82 <cprintf>
f0130be1:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f0130be4:	e8 0d bf fd ff       	call   f010caf6 <sys_enable_interrupt>
			return;
f0130be9:	e9 9a 00 00 00       	jmp    f0130c88 <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f0130bee:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f0130bf2:	7e 34                	jle    f0130c28 <atomic_readline+0xa6>
f0130bf4:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f0130bfb:	7f 2b                	jg     f0130c28 <atomic_readline+0xa6>
			if (echoing)
f0130bfd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130c01:	74 0e                	je     f0130c11 <atomic_readline+0x8f>
				cputchar(c);
f0130c03:	83 ec 0c             	sub    $0xc,%esp
f0130c06:	ff 75 ec             	pushl  -0x14(%ebp)
f0130c09:	e8 f1 ff fc ff       	call   f0100bff <cputchar>
f0130c0e:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0130c11:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130c14:	8d 50 01             	lea    0x1(%eax),%edx
f0130c17:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0130c1a:	89 c2                	mov    %eax,%edx
f0130c1c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130c1f:	01 d0                	add    %edx,%eax
f0130c21:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0130c24:	88 10                	mov    %dl,(%eax)
f0130c26:	eb 5b                	jmp    f0130c83 <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f0130c28:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f0130c2c:	75 1f                	jne    f0130c4d <atomic_readline+0xcb>
f0130c2e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130c32:	7e 19                	jle    f0130c4d <atomic_readline+0xcb>
			if (echoing)
f0130c34:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130c38:	74 0e                	je     f0130c48 <atomic_readline+0xc6>
				cputchar(c);
f0130c3a:	83 ec 0c             	sub    $0xc,%esp
f0130c3d:	ff 75 ec             	pushl  -0x14(%ebp)
f0130c40:	e8 ba ff fc ff       	call   f0100bff <cputchar>
f0130c45:	83 c4 10             	add    $0x10,%esp
			i--;
f0130c48:	ff 4d f4             	decl   -0xc(%ebp)
f0130c4b:	eb 36                	jmp    f0130c83 <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f0130c4d:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f0130c51:	74 0a                	je     f0130c5d <atomic_readline+0xdb>
f0130c53:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f0130c57:	0f 85 60 ff ff ff    	jne    f0130bbd <atomic_readline+0x3b>
			if (echoing)
f0130c5d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130c61:	74 0e                	je     f0130c71 <atomic_readline+0xef>
				cputchar(c);
f0130c63:	83 ec 0c             	sub    $0xc,%esp
f0130c66:	ff 75 ec             	pushl  -0x14(%ebp)
f0130c69:	e8 91 ff fc ff       	call   f0100bff <cputchar>
f0130c6e:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f0130c71:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130c74:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130c77:	01 d0                	add    %edx,%eax
f0130c79:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f0130c7c:	e8 75 be fd ff       	call   f010caf6 <sys_enable_interrupt>
			return;
f0130c81:	eb 05                	jmp    f0130c88 <atomic_readline+0x106>
		}
	}
f0130c83:	e9 35 ff ff ff       	jmp    f0130bbd <atomic_readline+0x3b>
}
f0130c88:	c9                   	leave  
f0130c89:	c3                   	ret    

f0130c8a <strlen>:

#include <inc/string.h>

int
strlen(const char *s)
{
f0130c8a:	55                   	push   %ebp
f0130c8b:	89 e5                	mov    %esp,%ebp
f0130c8d:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f0130c90:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0130c97:	eb 06                	jmp    f0130c9f <strlen+0x15>
		n++;
f0130c99:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f0130c9c:	ff 45 08             	incl   0x8(%ebp)
f0130c9f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ca2:	8a 00                	mov    (%eax),%al
f0130ca4:	84 c0                	test   %al,%al
f0130ca6:	75 f1                	jne    f0130c99 <strlen+0xf>
		n++;
	return n;
f0130ca8:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0130cab:	c9                   	leave  
f0130cac:	c3                   	ret    

f0130cad <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f0130cad:	55                   	push   %ebp
f0130cae:	89 e5                	mov    %esp,%ebp
f0130cb0:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f0130cb3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0130cba:	eb 09                	jmp    f0130cc5 <strnlen+0x18>
		n++;
f0130cbc:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f0130cbf:	ff 45 08             	incl   0x8(%ebp)
f0130cc2:	ff 4d 0c             	decl   0xc(%ebp)
f0130cc5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130cc9:	74 09                	je     f0130cd4 <strnlen+0x27>
f0130ccb:	8b 45 08             	mov    0x8(%ebp),%eax
f0130cce:	8a 00                	mov    (%eax),%al
f0130cd0:	84 c0                	test   %al,%al
f0130cd2:	75 e8                	jne    f0130cbc <strnlen+0xf>
		n++;
	return n;
f0130cd4:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0130cd7:	c9                   	leave  
f0130cd8:	c3                   	ret    

f0130cd9 <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f0130cd9:	55                   	push   %ebp
f0130cda:	89 e5                	mov    %esp,%ebp
f0130cdc:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f0130cdf:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ce2:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f0130ce5:	90                   	nop
f0130ce6:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ce9:	8d 50 01             	lea    0x1(%eax),%edx
f0130cec:	89 55 08             	mov    %edx,0x8(%ebp)
f0130cef:	8b 55 0c             	mov    0xc(%ebp),%edx
f0130cf2:	8d 4a 01             	lea    0x1(%edx),%ecx
f0130cf5:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0130cf8:	8a 12                	mov    (%edx),%dl
f0130cfa:	88 10                	mov    %dl,(%eax)
f0130cfc:	8a 00                	mov    (%eax),%al
f0130cfe:	84 c0                	test   %al,%al
f0130d00:	75 e4                	jne    f0130ce6 <strcpy+0xd>
		/* do nothing */;
	return ret;
f0130d02:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0130d05:	c9                   	leave  
f0130d06:	c3                   	ret    

f0130d07 <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f0130d07:	55                   	push   %ebp
f0130d08:	89 e5                	mov    %esp,%ebp
f0130d0a:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f0130d0d:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d10:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f0130d13:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0130d1a:	eb 1f                	jmp    f0130d3b <strncpy+0x34>
		*dst++ = *src;
f0130d1c:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d1f:	8d 50 01             	lea    0x1(%eax),%edx
f0130d22:	89 55 08             	mov    %edx,0x8(%ebp)
f0130d25:	8b 55 0c             	mov    0xc(%ebp),%edx
f0130d28:	8a 12                	mov    (%edx),%dl
f0130d2a:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f0130d2c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130d2f:	8a 00                	mov    (%eax),%al
f0130d31:	84 c0                	test   %al,%al
f0130d33:	74 03                	je     f0130d38 <strncpy+0x31>
			src++;
f0130d35:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f0130d38:	ff 45 fc             	incl   -0x4(%ebp)
f0130d3b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130d3e:	3b 45 10             	cmp    0x10(%ebp),%eax
f0130d41:	72 d9                	jb     f0130d1c <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f0130d43:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0130d46:	c9                   	leave  
f0130d47:	c3                   	ret    

f0130d48 <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f0130d48:	55                   	push   %ebp
f0130d49:	89 e5                	mov    %esp,%ebp
f0130d4b:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f0130d4e:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d51:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f0130d54:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130d58:	74 30                	je     f0130d8a <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f0130d5a:	eb 16                	jmp    f0130d72 <strlcpy+0x2a>
			*dst++ = *src++;
f0130d5c:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d5f:	8d 50 01             	lea    0x1(%eax),%edx
f0130d62:	89 55 08             	mov    %edx,0x8(%ebp)
f0130d65:	8b 55 0c             	mov    0xc(%ebp),%edx
f0130d68:	8d 4a 01             	lea    0x1(%edx),%ecx
f0130d6b:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0130d6e:	8a 12                	mov    (%edx),%dl
f0130d70:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f0130d72:	ff 4d 10             	decl   0x10(%ebp)
f0130d75:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130d79:	74 09                	je     f0130d84 <strlcpy+0x3c>
f0130d7b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130d7e:	8a 00                	mov    (%eax),%al
f0130d80:	84 c0                	test   %al,%al
f0130d82:	75 d8                	jne    f0130d5c <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f0130d84:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d87:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f0130d8a:	8b 55 08             	mov    0x8(%ebp),%edx
f0130d8d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130d90:	29 c2                	sub    %eax,%edx
f0130d92:	89 d0                	mov    %edx,%eax
}
f0130d94:	c9                   	leave  
f0130d95:	c3                   	ret    

f0130d96 <strcmp>:

int
strcmp(const char *p, const char *q)
{
f0130d96:	55                   	push   %ebp
f0130d97:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f0130d99:	eb 06                	jmp    f0130da1 <strcmp+0xb>
		p++, q++;
f0130d9b:	ff 45 08             	incl   0x8(%ebp)
f0130d9e:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f0130da1:	8b 45 08             	mov    0x8(%ebp),%eax
f0130da4:	8a 00                	mov    (%eax),%al
f0130da6:	84 c0                	test   %al,%al
f0130da8:	74 0e                	je     f0130db8 <strcmp+0x22>
f0130daa:	8b 45 08             	mov    0x8(%ebp),%eax
f0130dad:	8a 10                	mov    (%eax),%dl
f0130daf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130db2:	8a 00                	mov    (%eax),%al
f0130db4:	38 c2                	cmp    %al,%dl
f0130db6:	74 e3                	je     f0130d9b <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f0130db8:	8b 45 08             	mov    0x8(%ebp),%eax
f0130dbb:	8a 00                	mov    (%eax),%al
f0130dbd:	0f b6 d0             	movzbl %al,%edx
f0130dc0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130dc3:	8a 00                	mov    (%eax),%al
f0130dc5:	0f b6 c0             	movzbl %al,%eax
f0130dc8:	29 c2                	sub    %eax,%edx
f0130dca:	89 d0                	mov    %edx,%eax
}
f0130dcc:	5d                   	pop    %ebp
f0130dcd:	c3                   	ret    

f0130dce <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f0130dce:	55                   	push   %ebp
f0130dcf:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f0130dd1:	eb 09                	jmp    f0130ddc <strncmp+0xe>
		n--, p++, q++;
f0130dd3:	ff 4d 10             	decl   0x10(%ebp)
f0130dd6:	ff 45 08             	incl   0x8(%ebp)
f0130dd9:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f0130ddc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130de0:	74 17                	je     f0130df9 <strncmp+0x2b>
f0130de2:	8b 45 08             	mov    0x8(%ebp),%eax
f0130de5:	8a 00                	mov    (%eax),%al
f0130de7:	84 c0                	test   %al,%al
f0130de9:	74 0e                	je     f0130df9 <strncmp+0x2b>
f0130deb:	8b 45 08             	mov    0x8(%ebp),%eax
f0130dee:	8a 10                	mov    (%eax),%dl
f0130df0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130df3:	8a 00                	mov    (%eax),%al
f0130df5:	38 c2                	cmp    %al,%dl
f0130df7:	74 da                	je     f0130dd3 <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f0130df9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130dfd:	75 07                	jne    f0130e06 <strncmp+0x38>
		return 0;
f0130dff:	b8 00 00 00 00       	mov    $0x0,%eax
f0130e04:	eb 14                	jmp    f0130e1a <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f0130e06:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e09:	8a 00                	mov    (%eax),%al
f0130e0b:	0f b6 d0             	movzbl %al,%edx
f0130e0e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130e11:	8a 00                	mov    (%eax),%al
f0130e13:	0f b6 c0             	movzbl %al,%eax
f0130e16:	29 c2                	sub    %eax,%edx
f0130e18:	89 d0                	mov    %edx,%eax
}
f0130e1a:	5d                   	pop    %ebp
f0130e1b:	c3                   	ret    

f0130e1c <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f0130e1c:	55                   	push   %ebp
f0130e1d:	89 e5                	mov    %esp,%ebp
f0130e1f:	83 ec 04             	sub    $0x4,%esp
f0130e22:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130e25:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f0130e28:	eb 12                	jmp    f0130e3c <strchr+0x20>
		if (*s == c)
f0130e2a:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e2d:	8a 00                	mov    (%eax),%al
f0130e2f:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0130e32:	75 05                	jne    f0130e39 <strchr+0x1d>
			return (char *) s;
f0130e34:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e37:	eb 11                	jmp    f0130e4a <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f0130e39:	ff 45 08             	incl   0x8(%ebp)
f0130e3c:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e3f:	8a 00                	mov    (%eax),%al
f0130e41:	84 c0                	test   %al,%al
f0130e43:	75 e5                	jne    f0130e2a <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f0130e45:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0130e4a:	c9                   	leave  
f0130e4b:	c3                   	ret    

f0130e4c <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f0130e4c:	55                   	push   %ebp
f0130e4d:	89 e5                	mov    %esp,%ebp
f0130e4f:	83 ec 04             	sub    $0x4,%esp
f0130e52:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130e55:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f0130e58:	eb 0d                	jmp    f0130e67 <strfind+0x1b>
		if (*s == c)
f0130e5a:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e5d:	8a 00                	mov    (%eax),%al
f0130e5f:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0130e62:	74 0e                	je     f0130e72 <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f0130e64:	ff 45 08             	incl   0x8(%ebp)
f0130e67:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e6a:	8a 00                	mov    (%eax),%al
f0130e6c:	84 c0                	test   %al,%al
f0130e6e:	75 ea                	jne    f0130e5a <strfind+0xe>
f0130e70:	eb 01                	jmp    f0130e73 <strfind+0x27>
		if (*s == c)
			break;
f0130e72:	90                   	nop
	return (char *) s;
f0130e73:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0130e76:	c9                   	leave  
f0130e77:	c3                   	ret    

f0130e78 <memset>:


void *
memset(void *v, int c, uint32 n)
{
f0130e78:	55                   	push   %ebp
f0130e79:	89 e5                	mov    %esp,%ebp
f0130e7b:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f0130e7e:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e81:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f0130e84:	8b 45 10             	mov    0x10(%ebp),%eax
f0130e87:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f0130e8a:	eb 0e                	jmp    f0130e9a <memset+0x22>
		*p++ = c;
f0130e8c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130e8f:	8d 50 01             	lea    0x1(%eax),%edx
f0130e92:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0130e95:	8b 55 0c             	mov    0xc(%ebp),%edx
f0130e98:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f0130e9a:	ff 4d f8             	decl   -0x8(%ebp)
f0130e9d:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0130ea1:	79 e9                	jns    f0130e8c <memset+0x14>
		*p++ = c;

	return v;
f0130ea3:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0130ea6:	c9                   	leave  
f0130ea7:	c3                   	ret    

f0130ea8 <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f0130ea8:	55                   	push   %ebp
f0130ea9:	89 e5                	mov    %esp,%ebp
f0130eab:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f0130eae:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130eb1:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0130eb4:	8b 45 08             	mov    0x8(%ebp),%eax
f0130eb7:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f0130eba:	eb 16                	jmp    f0130ed2 <memcpy+0x2a>
		*d++ = *s++;
f0130ebc:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130ebf:	8d 50 01             	lea    0x1(%eax),%edx
f0130ec2:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0130ec5:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0130ec8:	8d 4a 01             	lea    0x1(%edx),%ecx
f0130ecb:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f0130ece:	8a 12                	mov    (%edx),%dl
f0130ed0:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f0130ed2:	8b 45 10             	mov    0x10(%ebp),%eax
f0130ed5:	8d 50 ff             	lea    -0x1(%eax),%edx
f0130ed8:	89 55 10             	mov    %edx,0x10(%ebp)
f0130edb:	85 c0                	test   %eax,%eax
f0130edd:	75 dd                	jne    f0130ebc <memcpy+0x14>
		*d++ = *s++;

	return dst;
f0130edf:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0130ee2:	c9                   	leave  
f0130ee3:	c3                   	ret    

f0130ee4 <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f0130ee4:	55                   	push   %ebp
f0130ee5:	89 e5                	mov    %esp,%ebp
f0130ee7:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f0130eea:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130eed:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0130ef0:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ef3:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f0130ef6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130ef9:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0130efc:	73 50                	jae    f0130f4e <memmove+0x6a>
f0130efe:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0130f01:	8b 45 10             	mov    0x10(%ebp),%eax
f0130f04:	01 d0                	add    %edx,%eax
f0130f06:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0130f09:	76 43                	jbe    f0130f4e <memmove+0x6a>
		s += n;
f0130f0b:	8b 45 10             	mov    0x10(%ebp),%eax
f0130f0e:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f0130f11:	8b 45 10             	mov    0x10(%ebp),%eax
f0130f14:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f0130f17:	eb 10                	jmp    f0130f29 <memmove+0x45>
			*--d = *--s;
f0130f19:	ff 4d f8             	decl   -0x8(%ebp)
f0130f1c:	ff 4d fc             	decl   -0x4(%ebp)
f0130f1f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130f22:	8a 10                	mov    (%eax),%dl
f0130f24:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130f27:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f0130f29:	8b 45 10             	mov    0x10(%ebp),%eax
f0130f2c:	8d 50 ff             	lea    -0x1(%eax),%edx
f0130f2f:	89 55 10             	mov    %edx,0x10(%ebp)
f0130f32:	85 c0                	test   %eax,%eax
f0130f34:	75 e3                	jne    f0130f19 <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f0130f36:	eb 23                	jmp    f0130f5b <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f0130f38:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130f3b:	8d 50 01             	lea    0x1(%eax),%edx
f0130f3e:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0130f41:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0130f44:	8d 4a 01             	lea    0x1(%edx),%ecx
f0130f47:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f0130f4a:	8a 12                	mov    (%edx),%dl
f0130f4c:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f0130f4e:	8b 45 10             	mov    0x10(%ebp),%eax
f0130f51:	8d 50 ff             	lea    -0x1(%eax),%edx
f0130f54:	89 55 10             	mov    %edx,0x10(%ebp)
f0130f57:	85 c0                	test   %eax,%eax
f0130f59:	75 dd                	jne    f0130f38 <memmove+0x54>
			*d++ = *s++;

	return dst;
f0130f5b:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0130f5e:	c9                   	leave  
f0130f5f:	c3                   	ret    

f0130f60 <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f0130f60:	55                   	push   %ebp
f0130f61:	89 e5                	mov    %esp,%ebp
f0130f63:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f0130f66:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f69:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f0130f6c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130f6f:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f0130f72:	eb 2a                	jmp    f0130f9e <memcmp+0x3e>
		if (*s1 != *s2)
f0130f74:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130f77:	8a 10                	mov    (%eax),%dl
f0130f79:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130f7c:	8a 00                	mov    (%eax),%al
f0130f7e:	38 c2                	cmp    %al,%dl
f0130f80:	74 16                	je     f0130f98 <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f0130f82:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130f85:	8a 00                	mov    (%eax),%al
f0130f87:	0f b6 d0             	movzbl %al,%edx
f0130f8a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130f8d:	8a 00                	mov    (%eax),%al
f0130f8f:	0f b6 c0             	movzbl %al,%eax
f0130f92:	29 c2                	sub    %eax,%edx
f0130f94:	89 d0                	mov    %edx,%eax
f0130f96:	eb 18                	jmp    f0130fb0 <memcmp+0x50>
		s1++, s2++;
f0130f98:	ff 45 fc             	incl   -0x4(%ebp)
f0130f9b:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f0130f9e:	8b 45 10             	mov    0x10(%ebp),%eax
f0130fa1:	8d 50 ff             	lea    -0x1(%eax),%edx
f0130fa4:	89 55 10             	mov    %edx,0x10(%ebp)
f0130fa7:	85 c0                	test   %eax,%eax
f0130fa9:	75 c9                	jne    f0130f74 <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f0130fab:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0130fb0:	c9                   	leave  
f0130fb1:	c3                   	ret    

f0130fb2 <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f0130fb2:	55                   	push   %ebp
f0130fb3:	89 e5                	mov    %esp,%ebp
f0130fb5:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f0130fb8:	8b 55 08             	mov    0x8(%ebp),%edx
f0130fbb:	8b 45 10             	mov    0x10(%ebp),%eax
f0130fbe:	01 d0                	add    %edx,%eax
f0130fc0:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f0130fc3:	eb 15                	jmp    f0130fda <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f0130fc5:	8b 45 08             	mov    0x8(%ebp),%eax
f0130fc8:	8a 00                	mov    (%eax),%al
f0130fca:	0f b6 d0             	movzbl %al,%edx
f0130fcd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130fd0:	0f b6 c0             	movzbl %al,%eax
f0130fd3:	39 c2                	cmp    %eax,%edx
f0130fd5:	74 0d                	je     f0130fe4 <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f0130fd7:	ff 45 08             	incl   0x8(%ebp)
f0130fda:	8b 45 08             	mov    0x8(%ebp),%eax
f0130fdd:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f0130fe0:	72 e3                	jb     f0130fc5 <memfind+0x13>
f0130fe2:	eb 01                	jmp    f0130fe5 <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f0130fe4:	90                   	nop
	return (void *) s;
f0130fe5:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0130fe8:	c9                   	leave  
f0130fe9:	c3                   	ret    

f0130fea <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f0130fea:	55                   	push   %ebp
f0130feb:	89 e5                	mov    %esp,%ebp
f0130fed:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f0130ff0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f0130ff7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0130ffe:	eb 03                	jmp    f0131003 <strtol+0x19>
		s++;
f0131000:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0131003:	8b 45 08             	mov    0x8(%ebp),%eax
f0131006:	8a 00                	mov    (%eax),%al
f0131008:	3c 20                	cmp    $0x20,%al
f013100a:	74 f4                	je     f0131000 <strtol+0x16>
f013100c:	8b 45 08             	mov    0x8(%ebp),%eax
f013100f:	8a 00                	mov    (%eax),%al
f0131011:	3c 09                	cmp    $0x9,%al
f0131013:	74 eb                	je     f0131000 <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f0131015:	8b 45 08             	mov    0x8(%ebp),%eax
f0131018:	8a 00                	mov    (%eax),%al
f013101a:	3c 2b                	cmp    $0x2b,%al
f013101c:	75 05                	jne    f0131023 <strtol+0x39>
		s++;
f013101e:	ff 45 08             	incl   0x8(%ebp)
f0131021:	eb 13                	jmp    f0131036 <strtol+0x4c>
	else if (*s == '-')
f0131023:	8b 45 08             	mov    0x8(%ebp),%eax
f0131026:	8a 00                	mov    (%eax),%al
f0131028:	3c 2d                	cmp    $0x2d,%al
f013102a:	75 0a                	jne    f0131036 <strtol+0x4c>
		s++, neg = 1;
f013102c:	ff 45 08             	incl   0x8(%ebp)
f013102f:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f0131036:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f013103a:	74 06                	je     f0131042 <strtol+0x58>
f013103c:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f0131040:	75 20                	jne    f0131062 <strtol+0x78>
f0131042:	8b 45 08             	mov    0x8(%ebp),%eax
f0131045:	8a 00                	mov    (%eax),%al
f0131047:	3c 30                	cmp    $0x30,%al
f0131049:	75 17                	jne    f0131062 <strtol+0x78>
f013104b:	8b 45 08             	mov    0x8(%ebp),%eax
f013104e:	40                   	inc    %eax
f013104f:	8a 00                	mov    (%eax),%al
f0131051:	3c 78                	cmp    $0x78,%al
f0131053:	75 0d                	jne    f0131062 <strtol+0x78>
		s += 2, base = 16;
f0131055:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f0131059:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f0131060:	eb 28                	jmp    f013108a <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f0131062:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131066:	75 15                	jne    f013107d <strtol+0x93>
f0131068:	8b 45 08             	mov    0x8(%ebp),%eax
f013106b:	8a 00                	mov    (%eax),%al
f013106d:	3c 30                	cmp    $0x30,%al
f013106f:	75 0c                	jne    f013107d <strtol+0x93>
		s++, base = 8;
f0131071:	ff 45 08             	incl   0x8(%ebp)
f0131074:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f013107b:	eb 0d                	jmp    f013108a <strtol+0xa0>
	else if (base == 0)
f013107d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131081:	75 07                	jne    f013108a <strtol+0xa0>
		base = 10;
f0131083:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f013108a:	8b 45 08             	mov    0x8(%ebp),%eax
f013108d:	8a 00                	mov    (%eax),%al
f013108f:	3c 2f                	cmp    $0x2f,%al
f0131091:	7e 19                	jle    f01310ac <strtol+0xc2>
f0131093:	8b 45 08             	mov    0x8(%ebp),%eax
f0131096:	8a 00                	mov    (%eax),%al
f0131098:	3c 39                	cmp    $0x39,%al
f013109a:	7f 10                	jg     f01310ac <strtol+0xc2>
			dig = *s - '0';
f013109c:	8b 45 08             	mov    0x8(%ebp),%eax
f013109f:	8a 00                	mov    (%eax),%al
f01310a1:	0f be c0             	movsbl %al,%eax
f01310a4:	83 e8 30             	sub    $0x30,%eax
f01310a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01310aa:	eb 42                	jmp    f01310ee <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f01310ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01310af:	8a 00                	mov    (%eax),%al
f01310b1:	3c 60                	cmp    $0x60,%al
f01310b3:	7e 19                	jle    f01310ce <strtol+0xe4>
f01310b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01310b8:	8a 00                	mov    (%eax),%al
f01310ba:	3c 7a                	cmp    $0x7a,%al
f01310bc:	7f 10                	jg     f01310ce <strtol+0xe4>
			dig = *s - 'a' + 10;
f01310be:	8b 45 08             	mov    0x8(%ebp),%eax
f01310c1:	8a 00                	mov    (%eax),%al
f01310c3:	0f be c0             	movsbl %al,%eax
f01310c6:	83 e8 57             	sub    $0x57,%eax
f01310c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01310cc:	eb 20                	jmp    f01310ee <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f01310ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01310d1:	8a 00                	mov    (%eax),%al
f01310d3:	3c 40                	cmp    $0x40,%al
f01310d5:	7e 39                	jle    f0131110 <strtol+0x126>
f01310d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01310da:	8a 00                	mov    (%eax),%al
f01310dc:	3c 5a                	cmp    $0x5a,%al
f01310de:	7f 30                	jg     f0131110 <strtol+0x126>
			dig = *s - 'A' + 10;
f01310e0:	8b 45 08             	mov    0x8(%ebp),%eax
f01310e3:	8a 00                	mov    (%eax),%al
f01310e5:	0f be c0             	movsbl %al,%eax
f01310e8:	83 e8 37             	sub    $0x37,%eax
f01310eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f01310ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01310f1:	3b 45 10             	cmp    0x10(%ebp),%eax
f01310f4:	7d 19                	jge    f013110f <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f01310f6:	ff 45 08             	incl   0x8(%ebp)
f01310f9:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01310fc:	0f af 45 10          	imul   0x10(%ebp),%eax
f0131100:	89 c2                	mov    %eax,%edx
f0131102:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131105:	01 d0                	add    %edx,%eax
f0131107:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f013110a:	e9 7b ff ff ff       	jmp    f013108a <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f013110f:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f0131110:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0131114:	74 08                	je     f013111e <strtol+0x134>
		*endptr = (char *) s;
f0131116:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131119:	8b 55 08             	mov    0x8(%ebp),%edx
f013111c:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f013111e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131122:	74 07                	je     f013112b <strtol+0x141>
f0131124:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131127:	f7 d8                	neg    %eax
f0131129:	eb 03                	jmp    f013112e <strtol+0x144>
f013112b:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f013112e:	c9                   	leave  
f013112f:	c3                   	ret    

f0131130 <ltostr>:

void
ltostr(long value, char *str)
{
f0131130:	55                   	push   %ebp
f0131131:	89 e5                	mov    %esp,%ebp
f0131133:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f0131136:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f013113d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f0131144:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131148:	79 13                	jns    f013115d <ltostr+0x2d>
	{
		neg = 1;
f013114a:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f0131151:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131154:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f0131157:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f013115a:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f013115d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131160:	b9 0a 00 00 00       	mov    $0xa,%ecx
f0131165:	99                   	cltd   
f0131166:	f7 f9                	idiv   %ecx
f0131168:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f013116b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013116e:	8d 50 01             	lea    0x1(%eax),%edx
f0131171:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0131174:	89 c2                	mov    %eax,%edx
f0131176:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131179:	01 d0                	add    %edx,%eax
f013117b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f013117e:	83 c2 30             	add    $0x30,%edx
f0131181:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f0131183:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0131186:	b8 67 66 66 66       	mov    $0x66666667,%eax
f013118b:	f7 e9                	imul   %ecx
f013118d:	c1 fa 02             	sar    $0x2,%edx
f0131190:	89 c8                	mov    %ecx,%eax
f0131192:	c1 f8 1f             	sar    $0x1f,%eax
f0131195:	29 c2                	sub    %eax,%edx
f0131197:	89 d0                	mov    %edx,%eax
f0131199:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f013119c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f013119f:	b8 67 66 66 66       	mov    $0x66666667,%eax
f01311a4:	f7 e9                	imul   %ecx
f01311a6:	c1 fa 02             	sar    $0x2,%edx
f01311a9:	89 c8                	mov    %ecx,%eax
f01311ab:	c1 f8 1f             	sar    $0x1f,%eax
f01311ae:	29 c2                	sub    %eax,%edx
f01311b0:	89 d0                	mov    %edx,%eax
f01311b2:	c1 e0 02             	shl    $0x2,%eax
f01311b5:	01 d0                	add    %edx,%eax
f01311b7:	01 c0                	add    %eax,%eax
f01311b9:	29 c1                	sub    %eax,%ecx
f01311bb:	89 ca                	mov    %ecx,%edx
f01311bd:	85 d2                	test   %edx,%edx
f01311bf:	75 9c                	jne    f013115d <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f01311c1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f01311c8:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01311cb:	48                   	dec    %eax
f01311cc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f01311cf:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01311d3:	74 3d                	je     f0131212 <ltostr+0xe2>
		start = 1 ;
f01311d5:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f01311dc:	eb 34                	jmp    f0131212 <ltostr+0xe2>
	{
		char tmp = str[start] ;
f01311de:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01311e1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01311e4:	01 d0                	add    %edx,%eax
f01311e6:	8a 00                	mov    (%eax),%al
f01311e8:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f01311eb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01311ee:	8b 45 0c             	mov    0xc(%ebp),%eax
f01311f1:	01 c2                	add    %eax,%edx
f01311f3:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f01311f6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01311f9:	01 c8                	add    %ecx,%eax
f01311fb:	8a 00                	mov    (%eax),%al
f01311fd:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f01311ff:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131202:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131205:	01 c2                	add    %eax,%edx
f0131207:	8a 45 eb             	mov    -0x15(%ebp),%al
f013120a:	88 02                	mov    %al,(%edx)
		start++ ;
f013120c:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f013120f:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f0131212:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131215:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0131218:	7c c4                	jl     f01311de <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f013121a:	8b 55 f8             	mov    -0x8(%ebp),%edx
f013121d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131220:	01 d0                	add    %edx,%eax
f0131222:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f0131225:	90                   	nop
f0131226:	c9                   	leave  
f0131227:	c3                   	ret    

f0131228 <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f0131228:	55                   	push   %ebp
f0131229:	89 e5                	mov    %esp,%ebp
f013122b:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f013122e:	ff 75 08             	pushl  0x8(%ebp)
f0131231:	e8 54 fa ff ff       	call   f0130c8a <strlen>
f0131236:	83 c4 04             	add    $0x4,%esp
f0131239:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f013123c:	ff 75 0c             	pushl  0xc(%ebp)
f013123f:	e8 46 fa ff ff       	call   f0130c8a <strlen>
f0131244:	83 c4 04             	add    $0x4,%esp
f0131247:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f013124a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f0131251:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0131258:	eb 17                	jmp    f0131271 <strcconcat+0x49>
		final[s] = str1[s] ;
f013125a:	8b 55 fc             	mov    -0x4(%ebp),%edx
f013125d:	8b 45 10             	mov    0x10(%ebp),%eax
f0131260:	01 c2                	add    %eax,%edx
f0131262:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0131265:	8b 45 08             	mov    0x8(%ebp),%eax
f0131268:	01 c8                	add    %ecx,%eax
f013126a:	8a 00                	mov    (%eax),%al
f013126c:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f013126e:	ff 45 fc             	incl   -0x4(%ebp)
f0131271:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131274:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0131277:	7c e1                	jl     f013125a <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f0131279:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f0131280:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f0131287:	eb 1f                	jmp    f01312a8 <strcconcat+0x80>
		final[s++] = str2[i] ;
f0131289:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013128c:	8d 50 01             	lea    0x1(%eax),%edx
f013128f:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0131292:	89 c2                	mov    %eax,%edx
f0131294:	8b 45 10             	mov    0x10(%ebp),%eax
f0131297:	01 c2                	add    %eax,%edx
f0131299:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f013129c:	8b 45 0c             	mov    0xc(%ebp),%eax
f013129f:	01 c8                	add    %ecx,%eax
f01312a1:	8a 00                	mov    (%eax),%al
f01312a3:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f01312a5:	ff 45 f8             	incl   -0x8(%ebp)
f01312a8:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01312ab:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01312ae:	7c d9                	jl     f0131289 <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f01312b0:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01312b3:	8b 45 10             	mov    0x10(%ebp),%eax
f01312b6:	01 d0                	add    %edx,%eax
f01312b8:	c6 00 00             	movb   $0x0,(%eax)
}
f01312bb:	90                   	nop
f01312bc:	c9                   	leave  
f01312bd:	c3                   	ret    

f01312be <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f01312be:	55                   	push   %ebp
f01312bf:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f01312c1:	8b 45 14             	mov    0x14(%ebp),%eax
f01312c4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f01312ca:	8b 45 14             	mov    0x14(%ebp),%eax
f01312cd:	8b 00                	mov    (%eax),%eax
f01312cf:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01312d6:	8b 45 10             	mov    0x10(%ebp),%eax
f01312d9:	01 d0                	add    %edx,%eax
f01312db:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f01312e1:	eb 0c                	jmp    f01312ef <strsplit+0x31>
			*string++ = 0;
f01312e3:	8b 45 08             	mov    0x8(%ebp),%eax
f01312e6:	8d 50 01             	lea    0x1(%eax),%edx
f01312e9:	89 55 08             	mov    %edx,0x8(%ebp)
f01312ec:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f01312ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01312f2:	8a 00                	mov    (%eax),%al
f01312f4:	84 c0                	test   %al,%al
f01312f6:	74 18                	je     f0131310 <strsplit+0x52>
f01312f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01312fb:	8a 00                	mov    (%eax),%al
f01312fd:	0f be c0             	movsbl %al,%eax
f0131300:	50                   	push   %eax
f0131301:	ff 75 0c             	pushl  0xc(%ebp)
f0131304:	e8 13 fb ff ff       	call   f0130e1c <strchr>
f0131309:	83 c4 08             	add    $0x8,%esp
f013130c:	85 c0                	test   %eax,%eax
f013130e:	75 d3                	jne    f01312e3 <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f0131310:	8b 45 08             	mov    0x8(%ebp),%eax
f0131313:	8a 00                	mov    (%eax),%al
f0131315:	84 c0                	test   %al,%al
f0131317:	74 5a                	je     f0131373 <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f0131319:	8b 45 14             	mov    0x14(%ebp),%eax
f013131c:	8b 00                	mov    (%eax),%eax
f013131e:	83 f8 0f             	cmp    $0xf,%eax
f0131321:	75 07                	jne    f013132a <strsplit+0x6c>
		{
			return 0;
f0131323:	b8 00 00 00 00       	mov    $0x0,%eax
f0131328:	eb 66                	jmp    f0131390 <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f013132a:	8b 45 14             	mov    0x14(%ebp),%eax
f013132d:	8b 00                	mov    (%eax),%eax
f013132f:	8d 48 01             	lea    0x1(%eax),%ecx
f0131332:	8b 55 14             	mov    0x14(%ebp),%edx
f0131335:	89 0a                	mov    %ecx,(%edx)
f0131337:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f013133e:	8b 45 10             	mov    0x10(%ebp),%eax
f0131341:	01 c2                	add    %eax,%edx
f0131343:	8b 45 08             	mov    0x8(%ebp),%eax
f0131346:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f0131348:	eb 03                	jmp    f013134d <strsplit+0x8f>
			string++;
f013134a:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f013134d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131350:	8a 00                	mov    (%eax),%al
f0131352:	84 c0                	test   %al,%al
f0131354:	74 8b                	je     f01312e1 <strsplit+0x23>
f0131356:	8b 45 08             	mov    0x8(%ebp),%eax
f0131359:	8a 00                	mov    (%eax),%al
f013135b:	0f be c0             	movsbl %al,%eax
f013135e:	50                   	push   %eax
f013135f:	ff 75 0c             	pushl  0xc(%ebp)
f0131362:	e8 b5 fa ff ff       	call   f0130e1c <strchr>
f0131367:	83 c4 08             	add    $0x8,%esp
f013136a:	85 c0                	test   %eax,%eax
f013136c:	74 dc                	je     f013134a <strsplit+0x8c>
			string++;
	}
f013136e:	e9 6e ff ff ff       	jmp    f01312e1 <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f0131373:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f0131374:	8b 45 14             	mov    0x14(%ebp),%eax
f0131377:	8b 00                	mov    (%eax),%eax
f0131379:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0131380:	8b 45 10             	mov    0x10(%ebp),%eax
f0131383:	01 d0                	add    %edx,%eax
f0131385:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f013138b:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0131390:	c9                   	leave  
f0131391:	c3                   	ret    

f0131392 <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f0131392:	55                   	push   %ebp
f0131393:	89 e5                	mov    %esp,%ebp
f0131395:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f0131398:	90                   	nop
f0131399:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01313a0:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01313a3:	89 c2                	mov    %eax,%edx
f01313a5:	ec                   	in     (%dx),%al
f01313a6:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f01313a9:	8a 45 f7             	mov    -0x9(%ebp),%al
f01313ac:	0f b6 c0             	movzbl %al,%eax
f01313af:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01313b2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01313b5:	25 c0 00 00 00       	and    $0xc0,%eax
f01313ba:	83 f8 40             	cmp    $0x40,%eax
f01313bd:	75 da                	jne    f0131399 <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f01313bf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01313c3:	74 11                	je     f01313d6 <ide_wait_ready+0x44>
f01313c5:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01313c8:	83 e0 21             	and    $0x21,%eax
f01313cb:	85 c0                	test   %eax,%eax
f01313cd:	74 07                	je     f01313d6 <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f01313cf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01313d4:	eb 05                	jmp    f01313db <ide_wait_ready+0x49>
	}
	return 0;
f01313d6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01313db:	c9                   	leave  
f01313dc:	c3                   	ret    

f01313dd <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f01313dd:	55                   	push   %ebp
f01313de:	89 e5                	mov    %esp,%ebp
f01313e0:	57                   	push   %edi
f01313e1:	53                   	push   %ebx
f01313e2:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f01313e5:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f01313ec:	76 16                	jbe    f0131404 <ide_read+0x27>
f01313ee:	68 c3 ce 13 f0       	push   $0xf013cec3
f01313f3:	68 d0 ce 13 f0       	push   $0xf013ced0
f01313f8:	6a 25                	push   $0x25
f01313fa:	68 e5 ce 13 f0       	push   $0xf013cee5
f01313ff:	e8 f7 ed fc ff       	call   f01001fb <_panic>

	ide_wait_ready(0);
f0131404:	83 ec 0c             	sub    $0xc,%esp
f0131407:	6a 00                	push   $0x0
f0131409:	e8 84 ff ff ff       	call   f0131392 <ide_wait_ready>
f013140e:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f0131411:	8b 45 10             	mov    0x10(%ebp),%eax
f0131414:	0f b6 c0             	movzbl %al,%eax
f0131417:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f013141e:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0131421:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0131424:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131427:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0131428:	8b 45 08             	mov    0x8(%ebp),%eax
f013142b:	0f b6 c0             	movzbl %al,%eax
f013142e:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0131435:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0131438:	8a 45 d3             	mov    -0x2d(%ebp),%al
f013143b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f013143e:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f013143f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131442:	c1 e8 08             	shr    $0x8,%eax
f0131445:	0f b6 c0             	movzbl %al,%eax
f0131448:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f013144f:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0131452:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0131455:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131458:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0131459:	8b 45 08             	mov    0x8(%ebp),%eax
f013145c:	c1 e8 10             	shr    $0x10,%eax
f013145f:	0f b6 c0             	movzbl %al,%eax
f0131462:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0131469:	88 45 d5             	mov    %al,-0x2b(%ebp)
f013146c:	8a 45 d5             	mov    -0x2b(%ebp),%al
f013146f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0131472:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0131473:	a1 ac 7a 65 f0       	mov    0xf0657aac,%eax
f0131478:	83 e0 01             	and    $0x1,%eax
f013147b:	c1 e0 04             	shl    $0x4,%eax
f013147e:	88 c2                	mov    %al,%dl
f0131480:	8b 45 08             	mov    0x8(%ebp),%eax
f0131483:	c1 e8 18             	shr    $0x18,%eax
f0131486:	83 e0 0f             	and    $0xf,%eax
f0131489:	09 d0                	or     %edx,%eax
f013148b:	83 c8 e0             	or     $0xffffffe0,%eax
f013148e:	0f b6 c0             	movzbl %al,%eax
f0131491:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0131498:	88 45 d6             	mov    %al,-0x2a(%ebp)
f013149b:	8a 45 d6             	mov    -0x2a(%ebp),%al
f013149e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01314a1:	ee                   	out    %al,(%dx)
f01314a2:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f01314a9:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f01314ad:	8a 45 d7             	mov    -0x29(%ebp),%al
f01314b0:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01314b3:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f01314b4:	eb 55                	jmp    f013150b <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f01314b6:	83 ec 0c             	sub    $0xc,%esp
f01314b9:	6a 01                	push   $0x1
f01314bb:	e8 d2 fe ff ff       	call   f0131392 <ide_wait_ready>
f01314c0:	83 c4 10             	add    $0x10,%esp
f01314c3:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01314c6:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01314ca:	79 05                	jns    f01314d1 <ide_read+0xf4>
			return r;
f01314cc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01314cf:	eb 45                	jmp    f0131516 <ide_read+0x139>
f01314d1:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f01314d8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01314db:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01314de:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f01314e5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01314e8:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f01314eb:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01314ee:	89 cb                	mov    %ecx,%ebx
f01314f0:	89 df                	mov    %ebx,%edi
f01314f2:	89 c1                	mov    %eax,%ecx
f01314f4:	fc                   	cld    
f01314f5:	f2 6d                	repnz insl (%dx),%es:(%edi)
f01314f7:	89 c8                	mov    %ecx,%eax
f01314f9:	89 fb                	mov    %edi,%ebx
f01314fb:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f01314fe:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0131501:	ff 4d 10             	decl   0x10(%ebp)
f0131504:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f013150b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f013150f:	75 a5                	jne    f01314b6 <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f0131511:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131516:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0131519:	5b                   	pop    %ebx
f013151a:	5f                   	pop    %edi
f013151b:	5d                   	pop    %ebp
f013151c:	c3                   	ret    

f013151d <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f013151d:	55                   	push   %ebp
f013151e:	89 e5                	mov    %esp,%ebp
f0131520:	56                   	push   %esi
f0131521:	53                   	push   %ebx
f0131522:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f0131525:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f013152c:	76 16                	jbe    f0131544 <ide_write+0x27>
f013152e:	68 c3 ce 13 f0       	push   $0xf013cec3
f0131533:	68 d0 ce 13 f0       	push   $0xf013ced0
f0131538:	6a 3e                	push   $0x3e
f013153a:	68 e5 ce 13 f0       	push   $0xf013cee5
f013153f:	e8 b7 ec fc ff       	call   f01001fb <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f0131544:	83 ec 0c             	sub    $0xc,%esp
f0131547:	6a 00                	push   $0x0
f0131549:	e8 44 fe ff ff       	call   f0131392 <ide_wait_ready>
f013154e:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f0131551:	8b 45 10             	mov    0x10(%ebp),%eax
f0131554:	0f b6 c0             	movzbl %al,%eax
f0131557:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f013155e:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0131561:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0131564:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131567:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0131568:	8b 45 08             	mov    0x8(%ebp),%eax
f013156b:	0f b6 c0             	movzbl %al,%eax
f013156e:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0131575:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0131578:	8a 45 d3             	mov    -0x2d(%ebp),%al
f013157b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f013157e:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f013157f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131582:	c1 e8 08             	shr    $0x8,%eax
f0131585:	0f b6 c0             	movzbl %al,%eax
f0131588:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f013158f:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0131592:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0131595:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131598:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0131599:	8b 45 08             	mov    0x8(%ebp),%eax
f013159c:	c1 e8 10             	shr    $0x10,%eax
f013159f:	0f b6 c0             	movzbl %al,%eax
f01315a2:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f01315a9:	88 45 d5             	mov    %al,-0x2b(%ebp)
f01315ac:	8a 45 d5             	mov    -0x2b(%ebp),%al
f01315af:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01315b2:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f01315b3:	a1 ac 7a 65 f0       	mov    0xf0657aac,%eax
f01315b8:	83 e0 01             	and    $0x1,%eax
f01315bb:	c1 e0 04             	shl    $0x4,%eax
f01315be:	88 c2                	mov    %al,%dl
f01315c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01315c3:	c1 e8 18             	shr    $0x18,%eax
f01315c6:	83 e0 0f             	and    $0xf,%eax
f01315c9:	09 d0                	or     %edx,%eax
f01315cb:	83 c8 e0             	or     $0xffffffe0,%eax
f01315ce:	0f b6 c0             	movzbl %al,%eax
f01315d1:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f01315d8:	88 45 d6             	mov    %al,-0x2a(%ebp)
f01315db:	8a 45 d6             	mov    -0x2a(%ebp),%al
f01315de:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01315e1:	ee                   	out    %al,(%dx)
f01315e2:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f01315e9:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f01315ed:	8a 45 d7             	mov    -0x29(%ebp),%al
f01315f0:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01315f3:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f01315f4:	eb 55                	jmp    f013164b <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f01315f6:	83 ec 0c             	sub    $0xc,%esp
f01315f9:	6a 01                	push   $0x1
f01315fb:	e8 92 fd ff ff       	call   f0131392 <ide_wait_ready>
f0131600:	83 c4 10             	add    $0x10,%esp
f0131603:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0131606:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f013160a:	79 05                	jns    f0131611 <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f013160c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f013160f:	eb 45                	jmp    f0131656 <ide_write+0x139>
f0131611:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0131618:	8b 45 0c             	mov    0xc(%ebp),%eax
f013161b:	89 45 cc             	mov    %eax,-0x34(%ebp)
f013161e:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f0131625:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131628:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f013162b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f013162e:	89 cb                	mov    %ecx,%ebx
f0131630:	89 de                	mov    %ebx,%esi
f0131632:	89 c1                	mov    %eax,%ecx
f0131634:	fc                   	cld    
f0131635:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f0131637:	89 c8                	mov    %ecx,%eax
f0131639:	89 f3                	mov    %esi,%ebx
f013163b:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f013163e:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0131641:	ff 4d 10             	decl   0x10(%ebp)
f0131644:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f013164b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f013164f:	75 a5                	jne    f01315f6 <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f0131651:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131656:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0131659:	5b                   	pop    %ebx
f013165a:	5e                   	pop    %esi
f013165b:	5d                   	pop    %ebp
f013165c:	c3                   	ret    

f013165d <print_mem_block_lists>:
//===========================
// PRINT MEM BLOCK LISTS:
//===========================

void print_mem_block_lists()
{
f013165d:	55                   	push   %ebp
f013165e:	89 e5                	mov    %esp,%ebp
f0131660:	83 ec 18             	sub    $0x18,%esp
	cprintf("\n=========================================\n");
f0131663:	83 ec 0c             	sub    $0xc,%esp
f0131666:	68 f0 ce 13 f0       	push   $0xf013cef0
f013166b:	e8 12 f6 fc ff       	call   f0100c82 <cprintf>
f0131670:	83 c4 10             	add    $0x10,%esp
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
f0131673:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nFreeMemBlocksList:\n");
f013167a:	83 ec 0c             	sub    $0xc,%esp
f013167d:	68 1c cf 13 f0       	push   $0xf013cf1c
f0131682:	e8 fb f5 fc ff       	call   f0100c82 <cprintf>
f0131687:	83 c4 10             	add    $0x10,%esp
	uint8 sorted = 1 ;
f013168a:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &FreeMemBlocksList)
f013168e:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f0131693:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131696:	eb 56                	jmp    f01316ee <print_mem_block_lists+0x91>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f0131698:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013169c:	74 1c                	je     f01316ba <print_mem_block_lists+0x5d>
f013169e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316a1:	8b 50 08             	mov    0x8(%eax),%edx
f01316a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01316a7:	8b 48 08             	mov    0x8(%eax),%ecx
f01316aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01316ad:	8b 40 0c             	mov    0xc(%eax),%eax
f01316b0:	01 c8                	add    %ecx,%eax
f01316b2:	39 c2                	cmp    %eax,%edx
f01316b4:	73 04                	jae    f01316ba <print_mem_block_lists+0x5d>
			sorted = 0 ;
f01316b6:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f01316ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316bd:	8b 50 08             	mov    0x8(%eax),%edx
f01316c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316c3:	8b 40 0c             	mov    0xc(%eax),%eax
f01316c6:	01 c2                	add    %eax,%edx
f01316c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316cb:	8b 40 08             	mov    0x8(%eax),%eax
f01316ce:	83 ec 04             	sub    $0x4,%esp
f01316d1:	52                   	push   %edx
f01316d2:	50                   	push   %eax
f01316d3:	68 31 cf 13 f0       	push   $0xf013cf31
f01316d8:	e8 a5 f5 fc ff       	call   f0100c82 <cprintf>
f01316dd:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f01316e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	cprintf("\n=========================================\n");
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
	cprintf("\nFreeMemBlocksList:\n");
	uint8 sorted = 1 ;
	LIST_FOREACH(blk, &FreeMemBlocksList)
f01316e6:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f01316eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01316ee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01316f2:	74 07                	je     f01316fb <print_mem_block_lists+0x9e>
f01316f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316f7:	8b 00                	mov    (%eax),%eax
f01316f9:	eb 05                	jmp    f0131700 <print_mem_block_lists+0xa3>
f01316fb:	b8 00 00 00 00       	mov    $0x0,%eax
f0131700:	a3 6c 7b 65 f0       	mov    %eax,0xf0657b6c
f0131705:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f013170a:	85 c0                	test   %eax,%eax
f013170c:	75 8a                	jne    f0131698 <print_mem_block_lists+0x3b>
f013170e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131712:	75 84                	jne    f0131698 <print_mem_block_lists+0x3b>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;
f0131714:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f0131718:	75 10                	jne    f013172a <print_mem_block_lists+0xcd>
f013171a:	83 ec 0c             	sub    $0xc,%esp
f013171d:	68 40 cf 13 f0       	push   $0xf013cf40
f0131722:	e8 5b f5 fc ff       	call   f0100c82 <cprintf>
f0131727:	83 c4 10             	add    $0x10,%esp

	lastBlk = NULL ;
f013172a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nAllocMemBlocksList:\n");
f0131731:	83 ec 0c             	sub    $0xc,%esp
f0131734:	68 64 cf 13 f0       	push   $0xf013cf64
f0131739:	e8 44 f5 fc ff       	call   f0100c82 <cprintf>
f013173e:	83 c4 10             	add    $0x10,%esp
	sorted = 1 ;
f0131741:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &AllocMemBlocksList)
f0131745:	a1 c8 7a 65 f0       	mov    0xf0657ac8,%eax
f013174a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013174d:	eb 56                	jmp    f01317a5 <print_mem_block_lists+0x148>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f013174f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131753:	74 1c                	je     f0131771 <print_mem_block_lists+0x114>
f0131755:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131758:	8b 50 08             	mov    0x8(%eax),%edx
f013175b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013175e:	8b 48 08             	mov    0x8(%eax),%ecx
f0131761:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131764:	8b 40 0c             	mov    0xc(%eax),%eax
f0131767:	01 c8                	add    %ecx,%eax
f0131769:	39 c2                	cmp    %eax,%edx
f013176b:	73 04                	jae    f0131771 <print_mem_block_lists+0x114>
			sorted = 0 ;
f013176d:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f0131771:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131774:	8b 50 08             	mov    0x8(%eax),%edx
f0131777:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013177a:	8b 40 0c             	mov    0xc(%eax),%eax
f013177d:	01 c2                	add    %eax,%edx
f013177f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131782:	8b 40 08             	mov    0x8(%eax),%eax
f0131785:	83 ec 04             	sub    $0x4,%esp
f0131788:	52                   	push   %edx
f0131789:	50                   	push   %eax
f013178a:	68 31 cf 13 f0       	push   $0xf013cf31
f013178f:	e8 ee f4 fc ff       	call   f0100c82 <cprintf>
f0131794:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f0131797:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013179a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;

	lastBlk = NULL ;
	cprintf("\nAllocMemBlocksList:\n");
	sorted = 1 ;
	LIST_FOREACH(blk, &AllocMemBlocksList)
f013179d:	a1 d0 7a 65 f0       	mov    0xf0657ad0,%eax
f01317a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01317a5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01317a9:	74 07                	je     f01317b2 <print_mem_block_lists+0x155>
f01317ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01317ae:	8b 00                	mov    (%eax),%eax
f01317b0:	eb 05                	jmp    f01317b7 <print_mem_block_lists+0x15a>
f01317b2:	b8 00 00 00 00       	mov    $0x0,%eax
f01317b7:	a3 d0 7a 65 f0       	mov    %eax,0xf0657ad0
f01317bc:	a1 d0 7a 65 f0       	mov    0xf0657ad0,%eax
f01317c1:	85 c0                	test   %eax,%eax
f01317c3:	75 8a                	jne    f013174f <print_mem_block_lists+0xf2>
f01317c5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01317c9:	75 84                	jne    f013174f <print_mem_block_lists+0xf2>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nAllocMemBlocksList is NOT SORTED!!\n") ;
f01317cb:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f01317cf:	75 10                	jne    f01317e1 <print_mem_block_lists+0x184>
f01317d1:	83 ec 0c             	sub    $0xc,%esp
f01317d4:	68 7c cf 13 f0       	push   $0xf013cf7c
f01317d9:	e8 a4 f4 fc ff       	call   f0100c82 <cprintf>
f01317de:	83 c4 10             	add    $0x10,%esp
	cprintf("\n=========================================\n");
f01317e1:	83 ec 0c             	sub    $0xc,%esp
f01317e4:	68 f0 ce 13 f0       	push   $0xf013cef0
f01317e9:	e8 94 f4 fc ff       	call   f0100c82 <cprintf>
f01317ee:	83 c4 10             	add    $0x10,%esp

}
f01317f1:	90                   	nop
f01317f2:	c9                   	leave  
f01317f3:	c3                   	ret    

f01317f4 <initialize_MemBlocksList>:

//===============================
// [1] INITIALIZE AVAILABLE LIST:
//===============================
void initialize_MemBlocksList(uint32 numOfBlocks)
{
f01317f4:	55                   	push   %ebp
f01317f5:	89 e5                	mov    %esp,%ebp
f01317f7:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");
	LIST_INIT(&AvailableMemBlocksList);
f01317fa:	c7 05 98 7b 65 f0 00 	movl   $0x0,0xf0657b98
f0131801:	00 00 00 
f0131804:	c7 05 9c 7b 65 f0 00 	movl   $0x0,0xf0657b9c
f013180b:	00 00 00 
f013180e:	c7 05 a4 7b 65 f0 00 	movl   $0x0,0xf0657ba4
f0131815:	00 00 00 

	for(int y=0;y<numOfBlocks;y++)
f0131818:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f013181f:	e9 9e 00 00 00       	jmp    f01318c2 <initialize_MemBlocksList+0xce>
	{
		LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[y]));
f0131824:	a1 d8 7a 65 f0       	mov    0xf0657ad8,%eax
f0131829:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013182c:	c1 e2 04             	shl    $0x4,%edx
f013182f:	01 d0                	add    %edx,%eax
f0131831:	85 c0                	test   %eax,%eax
f0131833:	75 14                	jne    f0131849 <initialize_MemBlocksList+0x55>
f0131835:	83 ec 04             	sub    $0x4,%esp
f0131838:	68 a4 cf 13 f0       	push   $0xf013cfa4
f013183d:	6a 46                	push   $0x46
f013183f:	68 c7 cf 13 f0       	push   $0xf013cfc7
f0131844:	e8 b2 e9 fc ff       	call   f01001fb <_panic>
f0131849:	a1 d8 7a 65 f0       	mov    0xf0657ad8,%eax
f013184e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131851:	c1 e2 04             	shl    $0x4,%edx
f0131854:	01 d0                	add    %edx,%eax
f0131856:	8b 15 98 7b 65 f0    	mov    0xf0657b98,%edx
f013185c:	89 10                	mov    %edx,(%eax)
f013185e:	8b 00                	mov    (%eax),%eax
f0131860:	85 c0                	test   %eax,%eax
f0131862:	74 18                	je     f013187c <initialize_MemBlocksList+0x88>
f0131864:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f0131869:	8b 15 d8 7a 65 f0    	mov    0xf0657ad8,%edx
f013186f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0131872:	c1 e1 04             	shl    $0x4,%ecx
f0131875:	01 ca                	add    %ecx,%edx
f0131877:	89 50 04             	mov    %edx,0x4(%eax)
f013187a:	eb 12                	jmp    f013188e <initialize_MemBlocksList+0x9a>
f013187c:	a1 d8 7a 65 f0       	mov    0xf0657ad8,%eax
f0131881:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131884:	c1 e2 04             	shl    $0x4,%edx
f0131887:	01 d0                	add    %edx,%eax
f0131889:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f013188e:	a1 d8 7a 65 f0       	mov    0xf0657ad8,%eax
f0131893:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131896:	c1 e2 04             	shl    $0x4,%edx
f0131899:	01 d0                	add    %edx,%eax
f013189b:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f01318a0:	a1 d8 7a 65 f0       	mov    0xf0657ad8,%eax
f01318a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01318a8:	c1 e2 04             	shl    $0x4,%edx
f01318ab:	01 d0                	add    %edx,%eax
f01318ad:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01318b4:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f01318b9:	40                   	inc    %eax
f01318ba:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");
	LIST_INIT(&AvailableMemBlocksList);

	for(int y=0;y<numOfBlocks;y++)
f01318bf:	ff 45 f4             	incl   -0xc(%ebp)
f01318c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01318c5:	3b 45 08             	cmp    0x8(%ebp),%eax
f01318c8:	0f 82 56 ff ff ff    	jb     f0131824 <initialize_MemBlocksList+0x30>
	{
		LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[y]));
	}
}
f01318ce:	90                   	nop
f01318cf:	c9                   	leave  
f01318d0:	c3                   	ret    

f01318d1 <find_block>:

//===============================
// [2] FIND BLOCK:
//===============================
struct MemBlock *find_block(struct MemBlock_List *blockList, uint32 va)
{
f01318d1:	55                   	push   %ebp
f01318d2:	89 e5                	mov    %esp,%ebp
f01318d4:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");
	struct MemBlock *point;

	LIST_FOREACH(point,blockList)
f01318d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01318da:	8b 00                	mov    (%eax),%eax
f01318dc:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01318df:	eb 19                	jmp    f01318fa <find_block+0x29>
	{
		if(va==point->sva)
f01318e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01318e4:	8b 40 08             	mov    0x8(%eax),%eax
f01318e7:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01318ea:	75 05                	jne    f01318f1 <find_block+0x20>
		   return point;
f01318ec:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01318ef:	eb 36                	jmp    f0131927 <find_block+0x56>
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");
	struct MemBlock *point;

	LIST_FOREACH(point,blockList)
f01318f1:	8b 45 08             	mov    0x8(%ebp),%eax
f01318f4:	8b 40 08             	mov    0x8(%eax),%eax
f01318f7:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01318fa:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01318fe:	74 07                	je     f0131907 <find_block+0x36>
f0131900:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131903:	8b 00                	mov    (%eax),%eax
f0131905:	eb 05                	jmp    f013190c <find_block+0x3b>
f0131907:	b8 00 00 00 00       	mov    $0x0,%eax
f013190c:	8b 55 08             	mov    0x8(%ebp),%edx
f013190f:	89 42 08             	mov    %eax,0x8(%edx)
f0131912:	8b 45 08             	mov    0x8(%ebp),%eax
f0131915:	8b 40 08             	mov    0x8(%eax),%eax
f0131918:	85 c0                	test   %eax,%eax
f013191a:	75 c5                	jne    f01318e1 <find_block+0x10>
f013191c:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131920:	75 bf                	jne    f01318e1 <find_block+0x10>
	{
		if(va==point->sva)
		   return point;
	}
	return NULL;
f0131922:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131927:	c9                   	leave  
f0131928:	c3                   	ret    

f0131929 <insert_sorted_allocList>:

//=========================================
// [3] INSERT BLOCK IN ALLOC LIST [SORTED]:
//=========================================
void insert_sorted_allocList(struct MemBlock *blockToInsert)
{
f0131929:	55                   	push   %ebp
f013192a:	89 e5                	mov    %esp,%ebp
f013192c:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_allocList
	// Write your code here, remove the panic and write your code
	//panic("insert_sorted_allocList() is not implemented yet...!!");
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
f013192f:	a1 c8 7a 65 f0       	mov    0xf0657ac8,%eax
f0131934:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;
f0131937:	a1 cc 7a 65 f0       	mov    0xf0657acc,%eax
f013193c:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
f013193f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131942:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0131945:	74 24                	je     f013196b <insert_sorted_allocList+0x42>
f0131947:	8b 45 08             	mov    0x8(%ebp),%eax
f013194a:	8b 50 08             	mov    0x8(%eax),%edx
f013194d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131950:	8b 40 08             	mov    0x8(%eax),%eax
f0131953:	39 c2                	cmp    %eax,%edx
f0131955:	76 14                	jbe    f013196b <insert_sorted_allocList+0x42>
f0131957:	8b 45 08             	mov    0x8(%ebp),%eax
f013195a:	8b 50 08             	mov    0x8(%eax),%edx
f013195d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131960:	8b 40 08             	mov    0x8(%eax),%eax
f0131963:	39 c2                	cmp    %eax,%edx
f0131965:	0f 82 60 01 00 00    	jb     f0131acb <insert_sorted_allocList+0x1a2>
	{
		if(head == NULL )
f013196b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013196f:	75 65                	jne    f01319d6 <insert_sorted_allocList+0xad>
		{
			LIST_INSERT_HEAD(&AllocMemBlocksList, blockToInsert);
f0131971:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131975:	75 14                	jne    f013198b <insert_sorted_allocList+0x62>
f0131977:	83 ec 04             	sub    $0x4,%esp
f013197a:	68 a4 cf 13 f0       	push   $0xf013cfa4
f013197f:	6a 6b                	push   $0x6b
f0131981:	68 c7 cf 13 f0       	push   $0xf013cfc7
f0131986:	e8 70 e8 fc ff       	call   f01001fb <_panic>
f013198b:	8b 15 c8 7a 65 f0    	mov    0xf0657ac8,%edx
f0131991:	8b 45 08             	mov    0x8(%ebp),%eax
f0131994:	89 10                	mov    %edx,(%eax)
f0131996:	8b 45 08             	mov    0x8(%ebp),%eax
f0131999:	8b 00                	mov    (%eax),%eax
f013199b:	85 c0                	test   %eax,%eax
f013199d:	74 0d                	je     f01319ac <insert_sorted_allocList+0x83>
f013199f:	a1 c8 7a 65 f0       	mov    0xf0657ac8,%eax
f01319a4:	8b 55 08             	mov    0x8(%ebp),%edx
f01319a7:	89 50 04             	mov    %edx,0x4(%eax)
f01319aa:	eb 08                	jmp    f01319b4 <insert_sorted_allocList+0x8b>
f01319ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01319af:	a3 cc 7a 65 f0       	mov    %eax,0xf0657acc
f01319b4:	8b 45 08             	mov    0x8(%ebp),%eax
f01319b7:	a3 c8 7a 65 f0       	mov    %eax,0xf0657ac8
f01319bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01319bf:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01319c6:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f01319cb:	40                   	inc    %eax
f01319cc:	a3 d4 7a 65 f0       	mov    %eax,0xf0657ad4
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f01319d1:	e9 dc 01 00 00       	jmp    f0131bb2 <insert_sorted_allocList+0x289>
		{
			LIST_INSERT_HEAD(&AllocMemBlocksList, blockToInsert);
		}
		else if (blockToInsert->sva <= head->sva)
f01319d6:	8b 45 08             	mov    0x8(%ebp),%eax
f01319d9:	8b 50 08             	mov    0x8(%eax),%edx
f01319dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01319df:	8b 40 08             	mov    0x8(%eax),%eax
f01319e2:	39 c2                	cmp    %eax,%edx
f01319e4:	77 6c                	ja     f0131a52 <insert_sorted_allocList+0x129>
		{
			LIST_INSERT_BEFORE(&AllocMemBlocksList,head, blockToInsert);
f01319e6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01319ea:	74 06                	je     f01319f2 <insert_sorted_allocList+0xc9>
f01319ec:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01319f0:	75 14                	jne    f0131a06 <insert_sorted_allocList+0xdd>
f01319f2:	83 ec 04             	sub    $0x4,%esp
f01319f5:	68 e0 cf 13 f0       	push   $0xf013cfe0
f01319fa:	6a 6f                	push   $0x6f
f01319fc:	68 c7 cf 13 f0       	push   $0xf013cfc7
f0131a01:	e8 f5 e7 fc ff       	call   f01001fb <_panic>
f0131a06:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131a09:	8b 50 04             	mov    0x4(%eax),%edx
f0131a0c:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a0f:	89 50 04             	mov    %edx,0x4(%eax)
f0131a12:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a15:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131a18:	89 10                	mov    %edx,(%eax)
f0131a1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131a1d:	8b 40 04             	mov    0x4(%eax),%eax
f0131a20:	85 c0                	test   %eax,%eax
f0131a22:	74 0d                	je     f0131a31 <insert_sorted_allocList+0x108>
f0131a24:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131a27:	8b 40 04             	mov    0x4(%eax),%eax
f0131a2a:	8b 55 08             	mov    0x8(%ebp),%edx
f0131a2d:	89 10                	mov    %edx,(%eax)
f0131a2f:	eb 08                	jmp    f0131a39 <insert_sorted_allocList+0x110>
f0131a31:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a34:	a3 c8 7a 65 f0       	mov    %eax,0xf0657ac8
f0131a39:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131a3c:	8b 55 08             	mov    0x8(%ebp),%edx
f0131a3f:	89 50 04             	mov    %edx,0x4(%eax)
f0131a42:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f0131a47:	40                   	inc    %eax
f0131a48:	a3 d4 7a 65 f0       	mov    %eax,0xf0657ad4
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0131a4d:	e9 60 01 00 00       	jmp    f0131bb2 <insert_sorted_allocList+0x289>
		}
		else if (blockToInsert->sva <= head->sva)
		{
			LIST_INSERT_BEFORE(&AllocMemBlocksList,head, blockToInsert);
		}
		else if (blockToInsert->sva >= tail->sva )
f0131a52:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a55:	8b 50 08             	mov    0x8(%eax),%edx
f0131a58:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131a5b:	8b 40 08             	mov    0x8(%eax),%eax
f0131a5e:	39 c2                	cmp    %eax,%edx
f0131a60:	0f 82 4c 01 00 00    	jb     f0131bb2 <insert_sorted_allocList+0x289>
		{
			LIST_INSERT_TAIL(&AllocMemBlocksList, blockToInsert);
f0131a66:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131a6a:	75 14                	jne    f0131a80 <insert_sorted_allocList+0x157>
f0131a6c:	83 ec 04             	sub    $0x4,%esp
f0131a6f:	68 18 d0 13 f0       	push   $0xf013d018
f0131a74:	6a 73                	push   $0x73
f0131a76:	68 c7 cf 13 f0       	push   $0xf013cfc7
f0131a7b:	e8 7b e7 fc ff       	call   f01001fb <_panic>
f0131a80:	8b 15 cc 7a 65 f0    	mov    0xf0657acc,%edx
f0131a86:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a89:	89 50 04             	mov    %edx,0x4(%eax)
f0131a8c:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a8f:	8b 40 04             	mov    0x4(%eax),%eax
f0131a92:	85 c0                	test   %eax,%eax
f0131a94:	74 0c                	je     f0131aa2 <insert_sorted_allocList+0x179>
f0131a96:	a1 cc 7a 65 f0       	mov    0xf0657acc,%eax
f0131a9b:	8b 55 08             	mov    0x8(%ebp),%edx
f0131a9e:	89 10                	mov    %edx,(%eax)
f0131aa0:	eb 08                	jmp    f0131aaa <insert_sorted_allocList+0x181>
f0131aa2:	8b 45 08             	mov    0x8(%ebp),%eax
f0131aa5:	a3 c8 7a 65 f0       	mov    %eax,0xf0657ac8
f0131aaa:	8b 45 08             	mov    0x8(%ebp),%eax
f0131aad:	a3 cc 7a 65 f0       	mov    %eax,0xf0657acc
f0131ab2:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ab5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131abb:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f0131ac0:	40                   	inc    %eax
f0131ac1:	a3 d4 7a 65 f0       	mov    %eax,0xf0657ad4
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0131ac6:	e9 e7 00 00 00       	jmp    f0131bb2 <insert_sorted_allocList+0x289>
			LIST_INSERT_TAIL(&AllocMemBlocksList, blockToInsert);
		}
	}
	else
	{
		struct MemBlock *current_block = head;
f0131acb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131ace:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct MemBlock *next_block = NULL;
f0131ad1:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		LIST_FOREACH (current_block, &AllocMemBlocksList)
f0131ad8:	a1 c8 7a 65 f0       	mov    0xf0657ac8,%eax
f0131add:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131ae0:	e9 9d 00 00 00       	jmp    f0131b82 <insert_sorted_allocList+0x259>
		{
			next_block = LIST_NEXT(current_block);
f0131ae5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ae8:	8b 00                	mov    (%eax),%eax
f0131aea:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (blockToInsert->sva > current_block->sva && blockToInsert->sva < next_block->sva)
f0131aed:	8b 45 08             	mov    0x8(%ebp),%eax
f0131af0:	8b 50 08             	mov    0x8(%eax),%edx
f0131af3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131af6:	8b 40 08             	mov    0x8(%eax),%eax
f0131af9:	39 c2                	cmp    %eax,%edx
f0131afb:	76 7d                	jbe    f0131b7a <insert_sorted_allocList+0x251>
f0131afd:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b00:	8b 50 08             	mov    0x8(%eax),%edx
f0131b03:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131b06:	8b 40 08             	mov    0x8(%eax),%eax
f0131b09:	39 c2                	cmp    %eax,%edx
f0131b0b:	73 6d                	jae    f0131b7a <insert_sorted_allocList+0x251>
			{
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
f0131b0d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131b11:	74 06                	je     f0131b19 <insert_sorted_allocList+0x1f0>
f0131b13:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131b17:	75 14                	jne    f0131b2d <insert_sorted_allocList+0x204>
f0131b19:	83 ec 04             	sub    $0x4,%esp
f0131b1c:	68 3c d0 13 f0       	push   $0xf013d03c
f0131b21:	6a 7f                	push   $0x7f
f0131b23:	68 c7 cf 13 f0       	push   $0xf013cfc7
f0131b28:	e8 ce e6 fc ff       	call   f01001fb <_panic>
f0131b2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b30:	8b 10                	mov    (%eax),%edx
f0131b32:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b35:	89 10                	mov    %edx,(%eax)
f0131b37:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b3a:	8b 00                	mov    (%eax),%eax
f0131b3c:	85 c0                	test   %eax,%eax
f0131b3e:	74 0b                	je     f0131b4b <insert_sorted_allocList+0x222>
f0131b40:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b43:	8b 00                	mov    (%eax),%eax
f0131b45:	8b 55 08             	mov    0x8(%ebp),%edx
f0131b48:	89 50 04             	mov    %edx,0x4(%eax)
f0131b4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b4e:	8b 55 08             	mov    0x8(%ebp),%edx
f0131b51:	89 10                	mov    %edx,(%eax)
f0131b53:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b56:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131b59:	89 50 04             	mov    %edx,0x4(%eax)
f0131b5c:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b5f:	8b 00                	mov    (%eax),%eax
f0131b61:	85 c0                	test   %eax,%eax
f0131b63:	75 08                	jne    f0131b6d <insert_sorted_allocList+0x244>
f0131b65:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b68:	a3 cc 7a 65 f0       	mov    %eax,0xf0657acc
f0131b6d:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f0131b72:	40                   	inc    %eax
f0131b73:	a3 d4 7a 65 f0       	mov    %eax,0xf0657ad4
				break;
f0131b78:	eb 39                	jmp    f0131bb3 <insert_sorted_allocList+0x28a>
	}
	else
	{
		struct MemBlock *current_block = head;
		struct MemBlock *next_block = NULL;
		LIST_FOREACH (current_block, &AllocMemBlocksList)
f0131b7a:	a1 d0 7a 65 f0       	mov    0xf0657ad0,%eax
f0131b7f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131b82:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131b86:	74 07                	je     f0131b8f <insert_sorted_allocList+0x266>
f0131b88:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b8b:	8b 00                	mov    (%eax),%eax
f0131b8d:	eb 05                	jmp    f0131b94 <insert_sorted_allocList+0x26b>
f0131b8f:	b8 00 00 00 00       	mov    $0x0,%eax
f0131b94:	a3 d0 7a 65 f0       	mov    %eax,0xf0657ad0
f0131b99:	a1 d0 7a 65 f0       	mov    0xf0657ad0,%eax
f0131b9e:	85 c0                	test   %eax,%eax
f0131ba0:	0f 85 3f ff ff ff    	jne    f0131ae5 <insert_sorted_allocList+0x1bc>
f0131ba6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131baa:	0f 85 35 ff ff ff    	jne    f0131ae5 <insert_sorted_allocList+0x1bc>
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
				break;
			}
		}
	}
}
f0131bb0:	eb 01                	jmp    f0131bb3 <insert_sorted_allocList+0x28a>
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0131bb2:	90                   	nop
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
				break;
			}
		}
	}
}
f0131bb3:	90                   	nop
f0131bb4:	c9                   	leave  
f0131bb5:	c3                   	ret    

f0131bb6 <alloc_block_FF>:

//=========================================
// [4] ALLOCATE BLOCK BY FIRST FIT:
//=========================================
struct MemBlock *alloc_block_FF(uint32 size)
{
f0131bb6:	55                   	push   %ebp
f0131bb7:	89 e5                	mov    %esp,%ebp
f0131bb9:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	struct MemBlock *point;
	LIST_FOREACH(point,&FreeMemBlocksList)
f0131bbc:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f0131bc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131bc4:	e9 85 01 00 00       	jmp    f0131d4e <alloc_block_FF+0x198>
	{
		if(size <= point->size)
f0131bc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131bcc:	8b 40 0c             	mov    0xc(%eax),%eax
f0131bcf:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131bd2:	0f 82 6e 01 00 00    	jb     f0131d46 <alloc_block_FF+0x190>
		{
		   if(size == point->size){
f0131bd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131bdb:	8b 40 0c             	mov    0xc(%eax),%eax
f0131bde:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131be1:	0f 85 8a 00 00 00    	jne    f0131c71 <alloc_block_FF+0xbb>
			   LIST_REMOVE(&FreeMemBlocksList,point);
f0131be7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131beb:	75 17                	jne    f0131c04 <alloc_block_FF+0x4e>
f0131bed:	83 ec 04             	sub    $0x4,%esp
f0131bf0:	68 70 d0 13 f0       	push   $0xf013d070
f0131bf5:	68 93 00 00 00       	push   $0x93
f0131bfa:	68 c7 cf 13 f0       	push   $0xf013cfc7
f0131bff:	e8 f7 e5 fc ff       	call   f01001fb <_panic>
f0131c04:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c07:	8b 00                	mov    (%eax),%eax
f0131c09:	85 c0                	test   %eax,%eax
f0131c0b:	74 10                	je     f0131c1d <alloc_block_FF+0x67>
f0131c0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c10:	8b 00                	mov    (%eax),%eax
f0131c12:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131c15:	8b 52 04             	mov    0x4(%edx),%edx
f0131c18:	89 50 04             	mov    %edx,0x4(%eax)
f0131c1b:	eb 0b                	jmp    f0131c28 <alloc_block_FF+0x72>
f0131c1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c20:	8b 40 04             	mov    0x4(%eax),%eax
f0131c23:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f0131c28:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c2b:	8b 40 04             	mov    0x4(%eax),%eax
f0131c2e:	85 c0                	test   %eax,%eax
f0131c30:	74 0f                	je     f0131c41 <alloc_block_FF+0x8b>
f0131c32:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c35:	8b 40 04             	mov    0x4(%eax),%eax
f0131c38:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131c3b:	8b 12                	mov    (%edx),%edx
f0131c3d:	89 10                	mov    %edx,(%eax)
f0131c3f:	eb 0a                	jmp    f0131c4b <alloc_block_FF+0x95>
f0131c41:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c44:	8b 00                	mov    (%eax),%eax
f0131c46:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f0131c4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c4e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131c54:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c57:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131c5e:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f0131c63:	48                   	dec    %eax
f0131c64:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
			   return  point;
f0131c69:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c6c:	e9 10 01 00 00       	jmp    f0131d81 <alloc_block_FF+0x1cb>
			   break;
		   }
		   else if (size < point->size){
f0131c71:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c74:	8b 40 0c             	mov    0xc(%eax),%eax
f0131c77:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131c7a:	0f 86 c6 00 00 00    	jbe    f0131d46 <alloc_block_FF+0x190>
			   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0131c80:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f0131c85:	89 45 f0             	mov    %eax,-0x10(%ebp)
			   ReturnedBlock->sva = point->sva;
f0131c88:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c8b:	8b 50 08             	mov    0x8(%eax),%edx
f0131c8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131c91:	89 50 08             	mov    %edx,0x8(%eax)
			   ReturnedBlock->size = size;
f0131c94:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131c97:	8b 55 08             	mov    0x8(%ebp),%edx
f0131c9a:	89 50 0c             	mov    %edx,0xc(%eax)
			   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0131c9d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131ca1:	75 17                	jne    f0131cba <alloc_block_FF+0x104>
f0131ca3:	83 ec 04             	sub    $0x4,%esp
f0131ca6:	68 70 d0 13 f0       	push   $0xf013d070
f0131cab:	68 9b 00 00 00       	push   $0x9b
f0131cb0:	68 c7 cf 13 f0       	push   $0xf013cfc7
f0131cb5:	e8 41 e5 fc ff       	call   f01001fb <_panic>
f0131cba:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131cbd:	8b 00                	mov    (%eax),%eax
f0131cbf:	85 c0                	test   %eax,%eax
f0131cc1:	74 10                	je     f0131cd3 <alloc_block_FF+0x11d>
f0131cc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131cc6:	8b 00                	mov    (%eax),%eax
f0131cc8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131ccb:	8b 52 04             	mov    0x4(%edx),%edx
f0131cce:	89 50 04             	mov    %edx,0x4(%eax)
f0131cd1:	eb 0b                	jmp    f0131cde <alloc_block_FF+0x128>
f0131cd3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131cd6:	8b 40 04             	mov    0x4(%eax),%eax
f0131cd9:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f0131cde:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131ce1:	8b 40 04             	mov    0x4(%eax),%eax
f0131ce4:	85 c0                	test   %eax,%eax
f0131ce6:	74 0f                	je     f0131cf7 <alloc_block_FF+0x141>
f0131ce8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131ceb:	8b 40 04             	mov    0x4(%eax),%eax
f0131cee:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131cf1:	8b 12                	mov    (%edx),%edx
f0131cf3:	89 10                	mov    %edx,(%eax)
f0131cf5:	eb 0a                	jmp    f0131d01 <alloc_block_FF+0x14b>
f0131cf7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131cfa:	8b 00                	mov    (%eax),%eax
f0131cfc:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f0131d01:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131d04:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131d0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131d0d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131d14:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0131d19:	48                   	dec    %eax
f0131d1a:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
			   point->sva += size;
f0131d1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d22:	8b 50 08             	mov    0x8(%eax),%edx
f0131d25:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d28:	01 c2                	add    %eax,%edx
f0131d2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d2d:	89 50 08             	mov    %edx,0x8(%eax)
			   point->size -= size;
f0131d30:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d33:	8b 40 0c             	mov    0xc(%eax),%eax
f0131d36:	2b 45 08             	sub    0x8(%ebp),%eax
f0131d39:	89 c2                	mov    %eax,%edx
f0131d3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d3e:	89 50 0c             	mov    %edx,0xc(%eax)
			   return ReturnedBlock;
f0131d41:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131d44:	eb 3b                	jmp    f0131d81 <alloc_block_FF+0x1cb>
struct MemBlock *alloc_block_FF(uint32 size)
{
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	struct MemBlock *point;
	LIST_FOREACH(point,&FreeMemBlocksList)
f0131d46:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f0131d4b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131d4e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131d52:	74 07                	je     f0131d5b <alloc_block_FF+0x1a5>
f0131d54:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d57:	8b 00                	mov    (%eax),%eax
f0131d59:	eb 05                	jmp    f0131d60 <alloc_block_FF+0x1aa>
f0131d5b:	b8 00 00 00 00       	mov    $0x0,%eax
f0131d60:	a3 6c 7b 65 f0       	mov    %eax,0xf0657b6c
f0131d65:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f0131d6a:	85 c0                	test   %eax,%eax
f0131d6c:	0f 85 57 fe ff ff    	jne    f0131bc9 <alloc_block_FF+0x13>
f0131d72:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131d76:	0f 85 4d fe ff ff    	jne    f0131bc9 <alloc_block_FF+0x13>
			   return ReturnedBlock;
			   break;
		   }
		}
	}
	return NULL;
f0131d7c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131d81:	c9                   	leave  
f0131d82:	c3                   	ret    

f0131d83 <alloc_block_BF>:

//=========================================
// [5] ALLOCATE BLOCK BY BEST FIT:
//=========================================
struct MemBlock *alloc_block_BF(uint32 size)
{
f0131d83:	55                   	push   %ebp
f0131d84:	89 e5                	mov    %esp,%ebp
f0131d86:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_BF
	// Write your code here, remove the panic and write your code
	struct MemBlock *currentMemBlock;
	uint32 minSize;
	uint32 svaOfMinSize;
	bool isFound = 1==0;
f0131d89:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	LIST_FOREACH(currentMemBlock,&FreeMemBlocksList)
f0131d90:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f0131d95:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131d98:	e9 df 00 00 00       	jmp    f0131e7c <alloc_block_BF+0xf9>
	{
		if(size <= currentMemBlock->size)
f0131d9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131da0:	8b 40 0c             	mov    0xc(%eax),%eax
f0131da3:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131da6:	0f 82 c8 00 00 00    	jb     f0131e74 <alloc_block_BF+0xf1>
		{
		   if(size == currentMemBlock->size)
f0131dac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131daf:	8b 40 0c             	mov    0xc(%eax),%eax
f0131db2:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131db5:	0f 85 8a 00 00 00    	jne    f0131e45 <alloc_block_BF+0xc2>
		   {
			   LIST_REMOVE(&FreeMemBlocksList,currentMemBlock);
f0131dbb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131dbf:	75 17                	jne    f0131dd8 <alloc_block_BF+0x55>
f0131dc1:	83 ec 04             	sub    $0x4,%esp
f0131dc4:	68 70 d0 13 f0       	push   $0xf013d070
f0131dc9:	68 b7 00 00 00       	push   $0xb7
f0131dce:	68 c7 cf 13 f0       	push   $0xf013cfc7
f0131dd3:	e8 23 e4 fc ff       	call   f01001fb <_panic>
f0131dd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ddb:	8b 00                	mov    (%eax),%eax
f0131ddd:	85 c0                	test   %eax,%eax
f0131ddf:	74 10                	je     f0131df1 <alloc_block_BF+0x6e>
f0131de1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131de4:	8b 00                	mov    (%eax),%eax
f0131de6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131de9:	8b 52 04             	mov    0x4(%edx),%edx
f0131dec:	89 50 04             	mov    %edx,0x4(%eax)
f0131def:	eb 0b                	jmp    f0131dfc <alloc_block_BF+0x79>
f0131df1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131df4:	8b 40 04             	mov    0x4(%eax),%eax
f0131df7:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f0131dfc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131dff:	8b 40 04             	mov    0x4(%eax),%eax
f0131e02:	85 c0                	test   %eax,%eax
f0131e04:	74 0f                	je     f0131e15 <alloc_block_BF+0x92>
f0131e06:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e09:	8b 40 04             	mov    0x4(%eax),%eax
f0131e0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131e0f:	8b 12                	mov    (%edx),%edx
f0131e11:	89 10                	mov    %edx,(%eax)
f0131e13:	eb 0a                	jmp    f0131e1f <alloc_block_BF+0x9c>
f0131e15:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e18:	8b 00                	mov    (%eax),%eax
f0131e1a:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f0131e1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e22:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131e28:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e2b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131e32:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f0131e37:	48                   	dec    %eax
f0131e38:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
			   return currentMemBlock;
f0131e3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e40:	e9 4d 01 00 00       	jmp    f0131f92 <alloc_block_BF+0x20f>
		   }
		   else if (size < currentMemBlock->size && currentMemBlock->size < minSize)
f0131e45:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e48:	8b 40 0c             	mov    0xc(%eax),%eax
f0131e4b:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131e4e:	76 24                	jbe    f0131e74 <alloc_block_BF+0xf1>
f0131e50:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e53:	8b 40 0c             	mov    0xc(%eax),%eax
f0131e56:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0131e59:	73 19                	jae    f0131e74 <alloc_block_BF+0xf1>
		   {
			   isFound = 1==1;
f0131e5b:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
			   minSize = currentMemBlock->size;
f0131e62:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e65:	8b 40 0c             	mov    0xc(%eax),%eax
f0131e68:	89 45 f0             	mov    %eax,-0x10(%ebp)
			   svaOfMinSize = currentMemBlock->sva;
f0131e6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e6e:	8b 40 08             	mov    0x8(%eax),%eax
f0131e71:	89 45 ec             	mov    %eax,-0x14(%ebp)
	// Write your code here, remove the panic and write your code
	struct MemBlock *currentMemBlock;
	uint32 minSize;
	uint32 svaOfMinSize;
	bool isFound = 1==0;
	LIST_FOREACH(currentMemBlock,&FreeMemBlocksList)
f0131e74:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f0131e79:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131e7c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131e80:	74 07                	je     f0131e89 <alloc_block_BF+0x106>
f0131e82:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e85:	8b 00                	mov    (%eax),%eax
f0131e87:	eb 05                	jmp    f0131e8e <alloc_block_BF+0x10b>
f0131e89:	b8 00 00 00 00       	mov    $0x0,%eax
f0131e8e:	a3 6c 7b 65 f0       	mov    %eax,0xf0657b6c
f0131e93:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f0131e98:	85 c0                	test   %eax,%eax
f0131e9a:	0f 85 fd fe ff ff    	jne    f0131d9d <alloc_block_BF+0x1a>
f0131ea0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131ea4:	0f 85 f3 fe ff ff    	jne    f0131d9d <alloc_block_BF+0x1a>
			   minSize = currentMemBlock->size;
			   svaOfMinSize = currentMemBlock->sva;
		   }
		}
	}
	if(isFound)
f0131eaa:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0131eae:	0f 84 d9 00 00 00    	je     f0131f8d <alloc_block_BF+0x20a>
	{
		struct MemBlock * foundBlock = LIST_FIRST(&AvailableMemBlocksList);
f0131eb4:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f0131eb9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		foundBlock->sva = svaOfMinSize;
f0131ebc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131ebf:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131ec2:	89 50 08             	mov    %edx,0x8(%eax)
		foundBlock->size = size;
f0131ec5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131ec8:	8b 55 08             	mov    0x8(%ebp),%edx
f0131ecb:	89 50 0c             	mov    %edx,0xc(%eax)
		LIST_REMOVE(&AvailableMemBlocksList,foundBlock);
f0131ece:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0131ed2:	75 17                	jne    f0131eeb <alloc_block_BF+0x168>
f0131ed4:	83 ec 04             	sub    $0x4,%esp
f0131ed7:	68 70 d0 13 f0       	push   $0xf013d070
f0131edc:	68 c7 00 00 00       	push   $0xc7
f0131ee1:	68 c7 cf 13 f0       	push   $0xf013cfc7
f0131ee6:	e8 10 e3 fc ff       	call   f01001fb <_panic>
f0131eeb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131eee:	8b 00                	mov    (%eax),%eax
f0131ef0:	85 c0                	test   %eax,%eax
f0131ef2:	74 10                	je     f0131f04 <alloc_block_BF+0x181>
f0131ef4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131ef7:	8b 00                	mov    (%eax),%eax
f0131ef9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0131efc:	8b 52 04             	mov    0x4(%edx),%edx
f0131eff:	89 50 04             	mov    %edx,0x4(%eax)
f0131f02:	eb 0b                	jmp    f0131f0f <alloc_block_BF+0x18c>
f0131f04:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131f07:	8b 40 04             	mov    0x4(%eax),%eax
f0131f0a:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f0131f0f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131f12:	8b 40 04             	mov    0x4(%eax),%eax
f0131f15:	85 c0                	test   %eax,%eax
f0131f17:	74 0f                	je     f0131f28 <alloc_block_BF+0x1a5>
f0131f19:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131f1c:	8b 40 04             	mov    0x4(%eax),%eax
f0131f1f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0131f22:	8b 12                	mov    (%edx),%edx
f0131f24:	89 10                	mov    %edx,(%eax)
f0131f26:	eb 0a                	jmp    f0131f32 <alloc_block_BF+0x1af>
f0131f28:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131f2b:	8b 00                	mov    (%eax),%eax
f0131f2d:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f0131f32:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131f35:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131f3b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131f3e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131f45:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0131f4a:	48                   	dec    %eax
f0131f4b:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
		struct MemBlock *cMemBlock = find_block(&FreeMemBlocksList, svaOfMinSize);
f0131f50:	83 ec 08             	sub    $0x8,%esp
f0131f53:	ff 75 ec             	pushl  -0x14(%ebp)
f0131f56:	68 64 7b 65 f0       	push   $0xf0657b64
f0131f5b:	e8 71 f9 ff ff       	call   f01318d1 <find_block>
f0131f60:	83 c4 10             	add    $0x10,%esp
f0131f63:	89 45 e0             	mov    %eax,-0x20(%ebp)
		cMemBlock->sva += size;
f0131f66:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0131f69:	8b 50 08             	mov    0x8(%eax),%edx
f0131f6c:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f6f:	01 c2                	add    %eax,%edx
f0131f71:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0131f74:	89 50 08             	mov    %edx,0x8(%eax)
		cMemBlock->size -= size;
f0131f77:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0131f7a:	8b 40 0c             	mov    0xc(%eax),%eax
f0131f7d:	2b 45 08             	sub    0x8(%ebp),%eax
f0131f80:	89 c2                	mov    %eax,%edx
f0131f82:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0131f85:	89 50 0c             	mov    %edx,0xc(%eax)
		return foundBlock;
f0131f88:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131f8b:	eb 05                	jmp    f0131f92 <alloc_block_BF+0x20f>
	}
	return NULL;
f0131f8d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131f92:	c9                   	leave  
f0131f93:	c3                   	ret    

f0131f94 <alloc_block_NF>:
uint32 svaOfNF = 0;
//=========================================
// [7] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
struct MemBlock *alloc_block_NF(uint32 size)
{
f0131f94:	55                   	push   %ebp
f0131f95:	89 e5                	mov    %esp,%ebp
f0131f97:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your codestruct MemBlock *point;
	struct MemBlock *point;
	if(svaOfNF == 0)
f0131f9a:	a1 b0 7a 65 f0       	mov    0xf0657ab0,%eax
f0131f9f:	85 c0                	test   %eax,%eax
f0131fa1:	0f 85 de 01 00 00    	jne    f0132185 <alloc_block_NF+0x1f1>
	{
		LIST_FOREACH(point,&FreeMemBlocksList)
f0131fa7:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f0131fac:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131faf:	e9 9e 01 00 00       	jmp    f0132152 <alloc_block_NF+0x1be>
		{
			if(size <= point->size)
f0131fb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fb7:	8b 40 0c             	mov    0xc(%eax),%eax
f0131fba:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131fbd:	0f 82 87 01 00 00    	jb     f013214a <alloc_block_NF+0x1b6>
			{
			   if(size == point->size){
f0131fc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fc6:	8b 40 0c             	mov    0xc(%eax),%eax
f0131fc9:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131fcc:	0f 85 95 00 00 00    	jne    f0132067 <alloc_block_NF+0xd3>
				   LIST_REMOVE(&FreeMemBlocksList,point);
f0131fd2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131fd6:	75 17                	jne    f0131fef <alloc_block_NF+0x5b>
f0131fd8:	83 ec 04             	sub    $0x4,%esp
f0131fdb:	68 70 d0 13 f0       	push   $0xf013d070
f0131fe0:	68 e0 00 00 00       	push   $0xe0
f0131fe5:	68 c7 cf 13 f0       	push   $0xf013cfc7
f0131fea:	e8 0c e2 fc ff       	call   f01001fb <_panic>
f0131fef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ff2:	8b 00                	mov    (%eax),%eax
f0131ff4:	85 c0                	test   %eax,%eax
f0131ff6:	74 10                	je     f0132008 <alloc_block_NF+0x74>
f0131ff8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ffb:	8b 00                	mov    (%eax),%eax
f0131ffd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132000:	8b 52 04             	mov    0x4(%edx),%edx
f0132003:	89 50 04             	mov    %edx,0x4(%eax)
f0132006:	eb 0b                	jmp    f0132013 <alloc_block_NF+0x7f>
f0132008:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013200b:	8b 40 04             	mov    0x4(%eax),%eax
f013200e:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f0132013:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132016:	8b 40 04             	mov    0x4(%eax),%eax
f0132019:	85 c0                	test   %eax,%eax
f013201b:	74 0f                	je     f013202c <alloc_block_NF+0x98>
f013201d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132020:	8b 40 04             	mov    0x4(%eax),%eax
f0132023:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132026:	8b 12                	mov    (%edx),%edx
f0132028:	89 10                	mov    %edx,(%eax)
f013202a:	eb 0a                	jmp    f0132036 <alloc_block_NF+0xa2>
f013202c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013202f:	8b 00                	mov    (%eax),%eax
f0132031:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f0132036:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132039:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013203f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132042:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132049:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f013204e:	48                   	dec    %eax
f013204f:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
				   svaOfNF = point->sva;
f0132054:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132057:	8b 40 08             	mov    0x8(%eax),%eax
f013205a:	a3 b0 7a 65 f0       	mov    %eax,0xf0657ab0
				   return  point;
f013205f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132062:	e9 f8 04 00 00       	jmp    f013255f <alloc_block_NF+0x5cb>
				   break;
			   }
			   else if (size < point->size){
f0132067:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013206a:	8b 40 0c             	mov    0xc(%eax),%eax
f013206d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132070:	0f 86 d4 00 00 00    	jbe    f013214a <alloc_block_NF+0x1b6>
				   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0132076:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f013207b:	89 45 f0             	mov    %eax,-0x10(%ebp)
				   ReturnedBlock->sva = point->sva;
f013207e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132081:	8b 50 08             	mov    0x8(%eax),%edx
f0132084:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132087:	89 50 08             	mov    %edx,0x8(%eax)
				   ReturnedBlock->size = size;
f013208a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013208d:	8b 55 08             	mov    0x8(%ebp),%edx
f0132090:	89 50 0c             	mov    %edx,0xc(%eax)
				   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0132093:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132097:	75 17                	jne    f01320b0 <alloc_block_NF+0x11c>
f0132099:	83 ec 04             	sub    $0x4,%esp
f013209c:	68 70 d0 13 f0       	push   $0xf013d070
f01320a1:	68 e9 00 00 00       	push   $0xe9
f01320a6:	68 c7 cf 13 f0       	push   $0xf013cfc7
f01320ab:	e8 4b e1 fc ff       	call   f01001fb <_panic>
f01320b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01320b3:	8b 00                	mov    (%eax),%eax
f01320b5:	85 c0                	test   %eax,%eax
f01320b7:	74 10                	je     f01320c9 <alloc_block_NF+0x135>
f01320b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01320bc:	8b 00                	mov    (%eax),%eax
f01320be:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01320c1:	8b 52 04             	mov    0x4(%edx),%edx
f01320c4:	89 50 04             	mov    %edx,0x4(%eax)
f01320c7:	eb 0b                	jmp    f01320d4 <alloc_block_NF+0x140>
f01320c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01320cc:	8b 40 04             	mov    0x4(%eax),%eax
f01320cf:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f01320d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01320d7:	8b 40 04             	mov    0x4(%eax),%eax
f01320da:	85 c0                	test   %eax,%eax
f01320dc:	74 0f                	je     f01320ed <alloc_block_NF+0x159>
f01320de:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01320e1:	8b 40 04             	mov    0x4(%eax),%eax
f01320e4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01320e7:	8b 12                	mov    (%edx),%edx
f01320e9:	89 10                	mov    %edx,(%eax)
f01320eb:	eb 0a                	jmp    f01320f7 <alloc_block_NF+0x163>
f01320ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01320f0:	8b 00                	mov    (%eax),%eax
f01320f2:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f01320f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01320fa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132100:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132103:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013210a:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f013210f:	48                   	dec    %eax
f0132110:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
				   svaOfNF = ReturnedBlock->sva;
f0132115:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132118:	8b 40 08             	mov    0x8(%eax),%eax
f013211b:	a3 b0 7a 65 f0       	mov    %eax,0xf0657ab0
				   point->sva += size;
f0132120:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132123:	8b 50 08             	mov    0x8(%eax),%edx
f0132126:	8b 45 08             	mov    0x8(%ebp),%eax
f0132129:	01 c2                	add    %eax,%edx
f013212b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013212e:	89 50 08             	mov    %edx,0x8(%eax)
				   point->size -= size;
f0132131:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132134:	8b 40 0c             	mov    0xc(%eax),%eax
f0132137:	2b 45 08             	sub    0x8(%ebp),%eax
f013213a:	89 c2                	mov    %eax,%edx
f013213c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013213f:	89 50 0c             	mov    %edx,0xc(%eax)
				   return ReturnedBlock;
f0132142:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132145:	e9 15 04 00 00       	jmp    f013255f <alloc_block_NF+0x5cb>
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your codestruct MemBlock *point;
	struct MemBlock *point;
	if(svaOfNF == 0)
	{
		LIST_FOREACH(point,&FreeMemBlocksList)
f013214a:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f013214f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132152:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132156:	74 07                	je     f013215f <alloc_block_NF+0x1cb>
f0132158:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013215b:	8b 00                	mov    (%eax),%eax
f013215d:	eb 05                	jmp    f0132164 <alloc_block_NF+0x1d0>
f013215f:	b8 00 00 00 00       	mov    $0x0,%eax
f0132164:	a3 6c 7b 65 f0       	mov    %eax,0xf0657b6c
f0132169:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f013216e:	85 c0                	test   %eax,%eax
f0132170:	0f 85 3e fe ff ff    	jne    f0131fb4 <alloc_block_NF+0x20>
f0132176:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013217a:	0f 85 34 fe ff ff    	jne    f0131fb4 <alloc_block_NF+0x20>
f0132180:	e9 d5 03 00 00       	jmp    f013255a <alloc_block_NF+0x5c6>
			}
		}
	}
	else
	{
		LIST_FOREACH(point, &FreeMemBlocksList)
f0132185:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f013218a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013218d:	e9 b1 01 00 00       	jmp    f0132343 <alloc_block_NF+0x3af>
		{
			if(point->sva >= svaOfNF)
f0132192:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132195:	8b 50 08             	mov    0x8(%eax),%edx
f0132198:	a1 b0 7a 65 f0       	mov    0xf0657ab0,%eax
f013219d:	39 c2                	cmp    %eax,%edx
f013219f:	0f 82 96 01 00 00    	jb     f013233b <alloc_block_NF+0x3a7>
			{
				if(size <= point->size)
f01321a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01321a8:	8b 40 0c             	mov    0xc(%eax),%eax
f01321ab:	3b 45 08             	cmp    0x8(%ebp),%eax
f01321ae:	0f 82 87 01 00 00    	jb     f013233b <alloc_block_NF+0x3a7>
				{
				   if(size == point->size){
f01321b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01321b7:	8b 40 0c             	mov    0xc(%eax),%eax
f01321ba:	3b 45 08             	cmp    0x8(%ebp),%eax
f01321bd:	0f 85 95 00 00 00    	jne    f0132258 <alloc_block_NF+0x2c4>
					   LIST_REMOVE(&FreeMemBlocksList,point);
f01321c3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01321c7:	75 17                	jne    f01321e0 <alloc_block_NF+0x24c>
f01321c9:	83 ec 04             	sub    $0x4,%esp
f01321cc:	68 70 d0 13 f0       	push   $0xf013d070
f01321d1:	68 fc 00 00 00       	push   $0xfc
f01321d6:	68 c7 cf 13 f0       	push   $0xf013cfc7
f01321db:	e8 1b e0 fc ff       	call   f01001fb <_panic>
f01321e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01321e3:	8b 00                	mov    (%eax),%eax
f01321e5:	85 c0                	test   %eax,%eax
f01321e7:	74 10                	je     f01321f9 <alloc_block_NF+0x265>
f01321e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01321ec:	8b 00                	mov    (%eax),%eax
f01321ee:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01321f1:	8b 52 04             	mov    0x4(%edx),%edx
f01321f4:	89 50 04             	mov    %edx,0x4(%eax)
f01321f7:	eb 0b                	jmp    f0132204 <alloc_block_NF+0x270>
f01321f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01321fc:	8b 40 04             	mov    0x4(%eax),%eax
f01321ff:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f0132204:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132207:	8b 40 04             	mov    0x4(%eax),%eax
f013220a:	85 c0                	test   %eax,%eax
f013220c:	74 0f                	je     f013221d <alloc_block_NF+0x289>
f013220e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132211:	8b 40 04             	mov    0x4(%eax),%eax
f0132214:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132217:	8b 12                	mov    (%edx),%edx
f0132219:	89 10                	mov    %edx,(%eax)
f013221b:	eb 0a                	jmp    f0132227 <alloc_block_NF+0x293>
f013221d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132220:	8b 00                	mov    (%eax),%eax
f0132222:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f0132227:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013222a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132230:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132233:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013223a:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f013223f:	48                   	dec    %eax
f0132240:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
					   svaOfNF = point->sva;
f0132245:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132248:	8b 40 08             	mov    0x8(%eax),%eax
f013224b:	a3 b0 7a 65 f0       	mov    %eax,0xf0657ab0
					   return  point;
f0132250:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132253:	e9 07 03 00 00       	jmp    f013255f <alloc_block_NF+0x5cb>
				   }
				   else if (size < point->size){
f0132258:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013225b:	8b 40 0c             	mov    0xc(%eax),%eax
f013225e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132261:	0f 86 d4 00 00 00    	jbe    f013233b <alloc_block_NF+0x3a7>
					   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0132267:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f013226c:	89 45 e8             	mov    %eax,-0x18(%ebp)
					   ReturnedBlock->sva = point->sva;
f013226f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132272:	8b 50 08             	mov    0x8(%eax),%edx
f0132275:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132278:	89 50 08             	mov    %edx,0x8(%eax)
					   ReturnedBlock->size = size;
f013227b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013227e:	8b 55 08             	mov    0x8(%ebp),%edx
f0132281:	89 50 0c             	mov    %edx,0xc(%eax)
					   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0132284:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132288:	75 17                	jne    f01322a1 <alloc_block_NF+0x30d>
f013228a:	83 ec 04             	sub    $0x4,%esp
f013228d:	68 70 d0 13 f0       	push   $0xf013d070
f0132292:	68 04 01 00 00       	push   $0x104
f0132297:	68 c7 cf 13 f0       	push   $0xf013cfc7
f013229c:	e8 5a df fc ff       	call   f01001fb <_panic>
f01322a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01322a4:	8b 00                	mov    (%eax),%eax
f01322a6:	85 c0                	test   %eax,%eax
f01322a8:	74 10                	je     f01322ba <alloc_block_NF+0x326>
f01322aa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01322ad:	8b 00                	mov    (%eax),%eax
f01322af:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01322b2:	8b 52 04             	mov    0x4(%edx),%edx
f01322b5:	89 50 04             	mov    %edx,0x4(%eax)
f01322b8:	eb 0b                	jmp    f01322c5 <alloc_block_NF+0x331>
f01322ba:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01322bd:	8b 40 04             	mov    0x4(%eax),%eax
f01322c0:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f01322c5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01322c8:	8b 40 04             	mov    0x4(%eax),%eax
f01322cb:	85 c0                	test   %eax,%eax
f01322cd:	74 0f                	je     f01322de <alloc_block_NF+0x34a>
f01322cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01322d2:	8b 40 04             	mov    0x4(%eax),%eax
f01322d5:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01322d8:	8b 12                	mov    (%edx),%edx
f01322da:	89 10                	mov    %edx,(%eax)
f01322dc:	eb 0a                	jmp    f01322e8 <alloc_block_NF+0x354>
f01322de:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01322e1:	8b 00                	mov    (%eax),%eax
f01322e3:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f01322e8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01322eb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01322f1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01322f4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01322fb:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0132300:	48                   	dec    %eax
f0132301:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
					   svaOfNF = ReturnedBlock->sva;
f0132306:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132309:	8b 40 08             	mov    0x8(%eax),%eax
f013230c:	a3 b0 7a 65 f0       	mov    %eax,0xf0657ab0
					   point->sva += size;
f0132311:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132314:	8b 50 08             	mov    0x8(%eax),%edx
f0132317:	8b 45 08             	mov    0x8(%ebp),%eax
f013231a:	01 c2                	add    %eax,%edx
f013231c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013231f:	89 50 08             	mov    %edx,0x8(%eax)
					   point->size -= size;
f0132322:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132325:	8b 40 0c             	mov    0xc(%eax),%eax
f0132328:	2b 45 08             	sub    0x8(%ebp),%eax
f013232b:	89 c2                	mov    %eax,%edx
f013232d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132330:	89 50 0c             	mov    %edx,0xc(%eax)
					   return ReturnedBlock;
f0132333:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132336:	e9 24 02 00 00       	jmp    f013255f <alloc_block_NF+0x5cb>
			}
		}
	}
	else
	{
		LIST_FOREACH(point, &FreeMemBlocksList)
f013233b:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f0132340:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132343:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132347:	74 07                	je     f0132350 <alloc_block_NF+0x3bc>
f0132349:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013234c:	8b 00                	mov    (%eax),%eax
f013234e:	eb 05                	jmp    f0132355 <alloc_block_NF+0x3c1>
f0132350:	b8 00 00 00 00       	mov    $0x0,%eax
f0132355:	a3 6c 7b 65 f0       	mov    %eax,0xf0657b6c
f013235a:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f013235f:	85 c0                	test   %eax,%eax
f0132361:	0f 85 2b fe ff ff    	jne    f0132192 <alloc_block_NF+0x1fe>
f0132367:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013236b:	0f 85 21 fe ff ff    	jne    f0132192 <alloc_block_NF+0x1fe>
					   return ReturnedBlock;
				   }
				}
			}
		}
		LIST_FOREACH(point, &FreeMemBlocksList)
f0132371:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f0132376:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132379:	e9 ae 01 00 00       	jmp    f013252c <alloc_block_NF+0x598>
		{
			if(point->sva < svaOfNF)
f013237e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132381:	8b 50 08             	mov    0x8(%eax),%edx
f0132384:	a1 b0 7a 65 f0       	mov    0xf0657ab0,%eax
f0132389:	39 c2                	cmp    %eax,%edx
f013238b:	0f 83 93 01 00 00    	jae    f0132524 <alloc_block_NF+0x590>
			{
				if(size <= point->size)
f0132391:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132394:	8b 40 0c             	mov    0xc(%eax),%eax
f0132397:	3b 45 08             	cmp    0x8(%ebp),%eax
f013239a:	0f 82 84 01 00 00    	jb     f0132524 <alloc_block_NF+0x590>
				{
				   if(size == point->size){
f01323a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323a3:	8b 40 0c             	mov    0xc(%eax),%eax
f01323a6:	3b 45 08             	cmp    0x8(%ebp),%eax
f01323a9:	0f 85 95 00 00 00    	jne    f0132444 <alloc_block_NF+0x4b0>
					   LIST_REMOVE(&FreeMemBlocksList,point);
f01323af:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01323b3:	75 17                	jne    f01323cc <alloc_block_NF+0x438>
f01323b5:	83 ec 04             	sub    $0x4,%esp
f01323b8:	68 70 d0 13 f0       	push   $0xf013d070
f01323bd:	68 14 01 00 00       	push   $0x114
f01323c2:	68 c7 cf 13 f0       	push   $0xf013cfc7
f01323c7:	e8 2f de fc ff       	call   f01001fb <_panic>
f01323cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323cf:	8b 00                	mov    (%eax),%eax
f01323d1:	85 c0                	test   %eax,%eax
f01323d3:	74 10                	je     f01323e5 <alloc_block_NF+0x451>
f01323d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323d8:	8b 00                	mov    (%eax),%eax
f01323da:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01323dd:	8b 52 04             	mov    0x4(%edx),%edx
f01323e0:	89 50 04             	mov    %edx,0x4(%eax)
f01323e3:	eb 0b                	jmp    f01323f0 <alloc_block_NF+0x45c>
f01323e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323e8:	8b 40 04             	mov    0x4(%eax),%eax
f01323eb:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f01323f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323f3:	8b 40 04             	mov    0x4(%eax),%eax
f01323f6:	85 c0                	test   %eax,%eax
f01323f8:	74 0f                	je     f0132409 <alloc_block_NF+0x475>
f01323fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323fd:	8b 40 04             	mov    0x4(%eax),%eax
f0132400:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132403:	8b 12                	mov    (%edx),%edx
f0132405:	89 10                	mov    %edx,(%eax)
f0132407:	eb 0a                	jmp    f0132413 <alloc_block_NF+0x47f>
f0132409:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013240c:	8b 00                	mov    (%eax),%eax
f013240e:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f0132413:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132416:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013241c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013241f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132426:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f013242b:	48                   	dec    %eax
f013242c:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
					   svaOfNF = point->sva;
f0132431:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132434:	8b 40 08             	mov    0x8(%eax),%eax
f0132437:	a3 b0 7a 65 f0       	mov    %eax,0xf0657ab0
					   return  point;
f013243c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013243f:	e9 1b 01 00 00       	jmp    f013255f <alloc_block_NF+0x5cb>
				   }
				   else if (size < point->size){
f0132444:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132447:	8b 40 0c             	mov    0xc(%eax),%eax
f013244a:	3b 45 08             	cmp    0x8(%ebp),%eax
f013244d:	0f 86 d1 00 00 00    	jbe    f0132524 <alloc_block_NF+0x590>
					   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0132453:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f0132458:	89 45 ec             	mov    %eax,-0x14(%ebp)
					   ReturnedBlock->sva = point->sva;
f013245b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013245e:	8b 50 08             	mov    0x8(%eax),%edx
f0132461:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132464:	89 50 08             	mov    %edx,0x8(%eax)
					   ReturnedBlock->size = size;
f0132467:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013246a:	8b 55 08             	mov    0x8(%ebp),%edx
f013246d:	89 50 0c             	mov    %edx,0xc(%eax)
					   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0132470:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0132474:	75 17                	jne    f013248d <alloc_block_NF+0x4f9>
f0132476:	83 ec 04             	sub    $0x4,%esp
f0132479:	68 70 d0 13 f0       	push   $0xf013d070
f013247e:	68 1c 01 00 00       	push   $0x11c
f0132483:	68 c7 cf 13 f0       	push   $0xf013cfc7
f0132488:	e8 6e dd fc ff       	call   f01001fb <_panic>
f013248d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132490:	8b 00                	mov    (%eax),%eax
f0132492:	85 c0                	test   %eax,%eax
f0132494:	74 10                	je     f01324a6 <alloc_block_NF+0x512>
f0132496:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132499:	8b 00                	mov    (%eax),%eax
f013249b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f013249e:	8b 52 04             	mov    0x4(%edx),%edx
f01324a1:	89 50 04             	mov    %edx,0x4(%eax)
f01324a4:	eb 0b                	jmp    f01324b1 <alloc_block_NF+0x51d>
f01324a6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01324a9:	8b 40 04             	mov    0x4(%eax),%eax
f01324ac:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f01324b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01324b4:	8b 40 04             	mov    0x4(%eax),%eax
f01324b7:	85 c0                	test   %eax,%eax
f01324b9:	74 0f                	je     f01324ca <alloc_block_NF+0x536>
f01324bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01324be:	8b 40 04             	mov    0x4(%eax),%eax
f01324c1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01324c4:	8b 12                	mov    (%edx),%edx
f01324c6:	89 10                	mov    %edx,(%eax)
f01324c8:	eb 0a                	jmp    f01324d4 <alloc_block_NF+0x540>
f01324ca:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01324cd:	8b 00                	mov    (%eax),%eax
f01324cf:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f01324d4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01324d7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01324dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01324e0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01324e7:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f01324ec:	48                   	dec    %eax
f01324ed:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
					   svaOfNF = ReturnedBlock->sva;
f01324f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01324f5:	8b 40 08             	mov    0x8(%eax),%eax
f01324f8:	a3 b0 7a 65 f0       	mov    %eax,0xf0657ab0
					   point->sva += size;
f01324fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132500:	8b 50 08             	mov    0x8(%eax),%edx
f0132503:	8b 45 08             	mov    0x8(%ebp),%eax
f0132506:	01 c2                	add    %eax,%edx
f0132508:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013250b:	89 50 08             	mov    %edx,0x8(%eax)
					   point->size -= size;
f013250e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132511:	8b 40 0c             	mov    0xc(%eax),%eax
f0132514:	2b 45 08             	sub    0x8(%ebp),%eax
f0132517:	89 c2                	mov    %eax,%edx
f0132519:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013251c:	89 50 0c             	mov    %edx,0xc(%eax)
					   return ReturnedBlock;
f013251f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132522:	eb 3b                	jmp    f013255f <alloc_block_NF+0x5cb>
					   return ReturnedBlock;
				   }
				}
			}
		}
		LIST_FOREACH(point, &FreeMemBlocksList)
f0132524:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f0132529:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013252c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132530:	74 07                	je     f0132539 <alloc_block_NF+0x5a5>
f0132532:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132535:	8b 00                	mov    (%eax),%eax
f0132537:	eb 05                	jmp    f013253e <alloc_block_NF+0x5aa>
f0132539:	b8 00 00 00 00       	mov    $0x0,%eax
f013253e:	a3 6c 7b 65 f0       	mov    %eax,0xf0657b6c
f0132543:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f0132548:	85 c0                	test   %eax,%eax
f013254a:	0f 85 2e fe ff ff    	jne    f013237e <alloc_block_NF+0x3ea>
f0132550:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132554:	0f 85 24 fe ff ff    	jne    f013237e <alloc_block_NF+0x3ea>
				   }
				}
			}
		}
	}
	return NULL;
f013255a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f013255f:	c9                   	leave  
f0132560:	c3                   	ret    

f0132561 <insert_sorted_with_merge_freeList>:

//===================================================
// [8] INSERT BLOCK (SORTED WITH MERGE) IN FREE LIST:
//===================================================
void insert_sorted_with_merge_freeList(struct MemBlock *blockToInsert)
{
f0132561:	55                   	push   %ebp
f0132562:	89 e5                	mov    %esp,%ebp
f0132564:	83 ec 18             	sub    $0x18,%esp
	//cprintf("BEFORE INSERT with MERGE: insert [%x, %x)\n=====================\n", blockToInsert->sva, blockToInsert->sva + blockToInsert->size);
	//print_mem_block_lists() ;

	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_with_merge_freeList
	// Write your code here, remove the panic and write your code
	struct MemBlock *head = LIST_FIRST(&FreeMemBlocksList) ;
f0132567:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f013256c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;
f013256f:	a1 68 7b 65 f0       	mov    0xf0657b68,%eax
f0132574:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
f0132577:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f013257c:	85 c0                	test   %eax,%eax
f013257e:	74 14                	je     f0132594 <insert_sorted_with_merge_freeList+0x33>
f0132580:	8b 45 08             	mov    0x8(%ebp),%eax
f0132583:	8b 50 08             	mov    0x8(%eax),%edx
f0132586:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132589:	8b 40 08             	mov    0x8(%eax),%eax
f013258c:	39 c2                	cmp    %eax,%edx
f013258e:	0f 87 9b 01 00 00    	ja     f013272f <insert_sorted_with_merge_freeList+0x1ce>
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
f0132594:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132598:	75 17                	jne    f01325b1 <insert_sorted_with_merge_freeList+0x50>
f013259a:	83 ec 04             	sub    $0x4,%esp
f013259d:	68 a4 cf 13 f0       	push   $0xf013cfa4
f01325a2:	68 38 01 00 00       	push   $0x138
f01325a7:	68 c7 cf 13 f0       	push   $0xf013cfc7
f01325ac:	e8 4a dc fc ff       	call   f01001fb <_panic>
f01325b1:	8b 15 64 7b 65 f0    	mov    0xf0657b64,%edx
f01325b7:	8b 45 08             	mov    0x8(%ebp),%eax
f01325ba:	89 10                	mov    %edx,(%eax)
f01325bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01325bf:	8b 00                	mov    (%eax),%eax
f01325c1:	85 c0                	test   %eax,%eax
f01325c3:	74 0d                	je     f01325d2 <insert_sorted_with_merge_freeList+0x71>
f01325c5:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f01325ca:	8b 55 08             	mov    0x8(%ebp),%edx
f01325cd:	89 50 04             	mov    %edx,0x4(%eax)
f01325d0:	eb 08                	jmp    f01325da <insert_sorted_with_merge_freeList+0x79>
f01325d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01325d5:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f01325da:	8b 45 08             	mov    0x8(%ebp),%eax
f01325dd:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f01325e2:	8b 45 08             	mov    0x8(%ebp),%eax
f01325e5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01325ec:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f01325f1:	40                   	inc    %eax
f01325f2:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f01325f7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01325fb:	0f 84 a8 06 00 00    	je     f0132ca9 <insert_sorted_with_merge_freeList+0x748>
f0132601:	8b 45 08             	mov    0x8(%ebp),%eax
f0132604:	8b 50 08             	mov    0x8(%eax),%edx
f0132607:	8b 45 08             	mov    0x8(%ebp),%eax
f013260a:	8b 40 0c             	mov    0xc(%eax),%eax
f013260d:	01 c2                	add    %eax,%edx
f013260f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132612:	8b 40 08             	mov    0x8(%eax),%eax
f0132615:	39 c2                	cmp    %eax,%edx
f0132617:	0f 85 8c 06 00 00    	jne    f0132ca9 <insert_sorted_with_merge_freeList+0x748>
		{
			blockToInsert->size += head->size;
f013261d:	8b 45 08             	mov    0x8(%ebp),%eax
f0132620:	8b 50 0c             	mov    0xc(%eax),%edx
f0132623:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132626:	8b 40 0c             	mov    0xc(%eax),%eax
f0132629:	01 c2                	add    %eax,%edx
f013262b:	8b 45 08             	mov    0x8(%ebp),%eax
f013262e:	89 50 0c             	mov    %edx,0xc(%eax)
			LIST_REMOVE(&FreeMemBlocksList, head);
f0132631:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132635:	75 17                	jne    f013264e <insert_sorted_with_merge_freeList+0xed>
f0132637:	83 ec 04             	sub    $0x4,%esp
f013263a:	68 70 d0 13 f0       	push   $0xf013d070
f013263f:	68 3c 01 00 00       	push   $0x13c
f0132644:	68 c7 cf 13 f0       	push   $0xf013cfc7
f0132649:	e8 ad db fc ff       	call   f01001fb <_panic>
f013264e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132651:	8b 00                	mov    (%eax),%eax
f0132653:	85 c0                	test   %eax,%eax
f0132655:	74 10                	je     f0132667 <insert_sorted_with_merge_freeList+0x106>
f0132657:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013265a:	8b 00                	mov    (%eax),%eax
f013265c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f013265f:	8b 52 04             	mov    0x4(%edx),%edx
f0132662:	89 50 04             	mov    %edx,0x4(%eax)
f0132665:	eb 0b                	jmp    f0132672 <insert_sorted_with_merge_freeList+0x111>
f0132667:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013266a:	8b 40 04             	mov    0x4(%eax),%eax
f013266d:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f0132672:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132675:	8b 40 04             	mov    0x4(%eax),%eax
f0132678:	85 c0                	test   %eax,%eax
f013267a:	74 0f                	je     f013268b <insert_sorted_with_merge_freeList+0x12a>
f013267c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013267f:	8b 40 04             	mov    0x4(%eax),%eax
f0132682:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132685:	8b 12                	mov    (%edx),%edx
f0132687:	89 10                	mov    %edx,(%eax)
f0132689:	eb 0a                	jmp    f0132695 <insert_sorted_with_merge_freeList+0x134>
f013268b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013268e:	8b 00                	mov    (%eax),%eax
f0132690:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f0132695:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132698:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013269e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01326a1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01326a8:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f01326ad:	48                   	dec    %eax
f01326ae:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
			head->size = 0;
f01326b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01326b6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
			head->sva = 0;
f01326bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01326c0:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&AvailableMemBlocksList, head);
f01326c7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01326cb:	75 17                	jne    f01326e4 <insert_sorted_with_merge_freeList+0x183>
f01326cd:	83 ec 04             	sub    $0x4,%esp
f01326d0:	68 a4 cf 13 f0       	push   $0xf013cfa4
f01326d5:	68 3f 01 00 00       	push   $0x13f
f01326da:	68 c7 cf 13 f0       	push   $0xf013cfc7
f01326df:	e8 17 db fc ff       	call   f01001fb <_panic>
f01326e4:	8b 15 98 7b 65 f0    	mov    0xf0657b98,%edx
f01326ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01326ed:	89 10                	mov    %edx,(%eax)
f01326ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01326f2:	8b 00                	mov    (%eax),%eax
f01326f4:	85 c0                	test   %eax,%eax
f01326f6:	74 0d                	je     f0132705 <insert_sorted_with_merge_freeList+0x1a4>
f01326f8:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f01326fd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132700:	89 50 04             	mov    %edx,0x4(%eax)
f0132703:	eb 08                	jmp    f013270d <insert_sorted_with_merge_freeList+0x1ac>
f0132705:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132708:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f013270d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132710:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f0132715:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132718:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013271f:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0132724:	40                   	inc    %eax
f0132725:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f013272a:	e9 7a 05 00 00       	jmp    f0132ca9 <insert_sorted_with_merge_freeList+0x748>
			head->size = 0;
			head->sva = 0;
			LIST_INSERT_HEAD(&AvailableMemBlocksList, head);
		}
	}
	else if (blockToInsert->sva >= tail->sva)
f013272f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132732:	8b 50 08             	mov    0x8(%eax),%edx
f0132735:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132738:	8b 40 08             	mov    0x8(%eax),%eax
f013273b:	39 c2                	cmp    %eax,%edx
f013273d:	0f 82 14 01 00 00    	jb     f0132857 <insert_sorted_with_merge_freeList+0x2f6>
	{
		if(tail->sva + tail->size == blockToInsert->sva)
f0132743:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132746:	8b 50 08             	mov    0x8(%eax),%edx
f0132749:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013274c:	8b 40 0c             	mov    0xc(%eax),%eax
f013274f:	01 c2                	add    %eax,%edx
f0132751:	8b 45 08             	mov    0x8(%ebp),%eax
f0132754:	8b 40 08             	mov    0x8(%eax),%eax
f0132757:	39 c2                	cmp    %eax,%edx
f0132759:	0f 85 90 00 00 00    	jne    f01327ef <insert_sorted_with_merge_freeList+0x28e>
		{
			tail->size += blockToInsert->size;
f013275f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132762:	8b 50 0c             	mov    0xc(%eax),%edx
f0132765:	8b 45 08             	mov    0x8(%ebp),%eax
f0132768:	8b 40 0c             	mov    0xc(%eax),%eax
f013276b:	01 c2                	add    %eax,%edx
f013276d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132770:	89 50 0c             	mov    %edx,0xc(%eax)
			blockToInsert->size = 0;
f0132773:	8b 45 08             	mov    0x8(%ebp),%eax
f0132776:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
			blockToInsert->sva = 0;
f013277d:	8b 45 08             	mov    0x8(%ebp),%eax
f0132780:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f0132787:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013278b:	75 17                	jne    f01327a4 <insert_sorted_with_merge_freeList+0x243>
f013278d:	83 ec 04             	sub    $0x4,%esp
f0132790:	68 a4 cf 13 f0       	push   $0xf013cfa4
f0132795:	68 49 01 00 00       	push   $0x149
f013279a:	68 c7 cf 13 f0       	push   $0xf013cfc7
f013279f:	e8 57 da fc ff       	call   f01001fb <_panic>
f01327a4:	8b 15 98 7b 65 f0    	mov    0xf0657b98,%edx
f01327aa:	8b 45 08             	mov    0x8(%ebp),%eax
f01327ad:	89 10                	mov    %edx,(%eax)
f01327af:	8b 45 08             	mov    0x8(%ebp),%eax
f01327b2:	8b 00                	mov    (%eax),%eax
f01327b4:	85 c0                	test   %eax,%eax
f01327b6:	74 0d                	je     f01327c5 <insert_sorted_with_merge_freeList+0x264>
f01327b8:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f01327bd:	8b 55 08             	mov    0x8(%ebp),%edx
f01327c0:	89 50 04             	mov    %edx,0x4(%eax)
f01327c3:	eb 08                	jmp    f01327cd <insert_sorted_with_merge_freeList+0x26c>
f01327c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01327c8:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f01327cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01327d0:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f01327d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01327d8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01327df:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f01327e4:	40                   	inc    %eax
f01327e5:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f01327ea:	e9 bb 04 00 00       	jmp    f0132caa <insert_sorted_with_merge_freeList+0x749>
			blockToInsert->size = 0;
			blockToInsert->sva = 0;
			LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
		}
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, blockToInsert);
f01327ef:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01327f3:	75 17                	jne    f013280c <insert_sorted_with_merge_freeList+0x2ab>
f01327f5:	83 ec 04             	sub    $0x4,%esp
f01327f8:	68 18 d0 13 f0       	push   $0xf013d018
f01327fd:	68 4c 01 00 00       	push   $0x14c
f0132802:	68 c7 cf 13 f0       	push   $0xf013cfc7
f0132807:	e8 ef d9 fc ff       	call   f01001fb <_panic>
f013280c:	8b 15 68 7b 65 f0    	mov    0xf0657b68,%edx
f0132812:	8b 45 08             	mov    0x8(%ebp),%eax
f0132815:	89 50 04             	mov    %edx,0x4(%eax)
f0132818:	8b 45 08             	mov    0x8(%ebp),%eax
f013281b:	8b 40 04             	mov    0x4(%eax),%eax
f013281e:	85 c0                	test   %eax,%eax
f0132820:	74 0c                	je     f013282e <insert_sorted_with_merge_freeList+0x2cd>
f0132822:	a1 68 7b 65 f0       	mov    0xf0657b68,%eax
f0132827:	8b 55 08             	mov    0x8(%ebp),%edx
f013282a:	89 10                	mov    %edx,(%eax)
f013282c:	eb 08                	jmp    f0132836 <insert_sorted_with_merge_freeList+0x2d5>
f013282e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132831:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f0132836:	8b 45 08             	mov    0x8(%ebp),%eax
f0132839:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f013283e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132841:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132847:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f013284c:	40                   	inc    %eax
f013284d:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0132852:	e9 53 04 00 00       	jmp    f0132caa <insert_sorted_with_merge_freeList+0x749>
	}
	else
	{
		struct MemBlock *currentBlock;
		struct MemBlock *nextBlock;
		LIST_FOREACH(currentBlock, &FreeMemBlocksList)
f0132857:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f013285c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013285f:	e9 15 04 00 00       	jmp    f0132c79 <insert_sorted_with_merge_freeList+0x718>
		{
			nextBlock = LIST_NEXT(currentBlock);
f0132864:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132867:	8b 00                	mov    (%eax),%eax
f0132869:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if(blockToInsert->sva > currentBlock->sva && blockToInsert->sva < nextBlock->sva)
f013286c:	8b 45 08             	mov    0x8(%ebp),%eax
f013286f:	8b 50 08             	mov    0x8(%eax),%edx
f0132872:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132875:	8b 40 08             	mov    0x8(%eax),%eax
f0132878:	39 c2                	cmp    %eax,%edx
f013287a:	0f 86 f1 03 00 00    	jbe    f0132c71 <insert_sorted_with_merge_freeList+0x710>
f0132880:	8b 45 08             	mov    0x8(%ebp),%eax
f0132883:	8b 50 08             	mov    0x8(%eax),%edx
f0132886:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132889:	8b 40 08             	mov    0x8(%eax),%eax
f013288c:	39 c2                	cmp    %eax,%edx
f013288e:	0f 83 dd 03 00 00    	jae    f0132c71 <insert_sorted_with_merge_freeList+0x710>
			{
				if(currentBlock->sva + currentBlock->size == blockToInsert->sva)
f0132894:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132897:	8b 50 08             	mov    0x8(%eax),%edx
f013289a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013289d:	8b 40 0c             	mov    0xc(%eax),%eax
f01328a0:	01 c2                	add    %eax,%edx
f01328a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01328a5:	8b 40 08             	mov    0x8(%eax),%eax
f01328a8:	39 c2                	cmp    %eax,%edx
f01328aa:	0f 85 b9 01 00 00    	jne    f0132a69 <insert_sorted_with_merge_freeList+0x508>
				{
					if(blockToInsert->sva + blockToInsert->size == nextBlock->sva)
f01328b0:	8b 45 08             	mov    0x8(%ebp),%eax
f01328b3:	8b 50 08             	mov    0x8(%eax),%edx
f01328b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01328b9:	8b 40 0c             	mov    0xc(%eax),%eax
f01328bc:	01 c2                	add    %eax,%edx
f01328be:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01328c1:	8b 40 08             	mov    0x8(%eax),%eax
f01328c4:	39 c2                	cmp    %eax,%edx
f01328c6:	0f 85 0d 01 00 00    	jne    f01329d9 <insert_sorted_with_merge_freeList+0x478>
					{
						currentBlock->size += nextBlock->size;
f01328cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328cf:	8b 50 0c             	mov    0xc(%eax),%edx
f01328d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01328d5:	8b 40 0c             	mov    0xc(%eax),%eax
f01328d8:	01 c2                	add    %eax,%edx
f01328da:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328dd:	89 50 0c             	mov    %edx,0xc(%eax)
						LIST_REMOVE(&FreeMemBlocksList, nextBlock);
f01328e0:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01328e4:	75 17                	jne    f01328fd <insert_sorted_with_merge_freeList+0x39c>
f01328e6:	83 ec 04             	sub    $0x4,%esp
f01328e9:	68 70 d0 13 f0       	push   $0xf013d070
f01328ee:	68 5c 01 00 00       	push   $0x15c
f01328f3:	68 c7 cf 13 f0       	push   $0xf013cfc7
f01328f8:	e8 fe d8 fc ff       	call   f01001fb <_panic>
f01328fd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132900:	8b 00                	mov    (%eax),%eax
f0132902:	85 c0                	test   %eax,%eax
f0132904:	74 10                	je     f0132916 <insert_sorted_with_merge_freeList+0x3b5>
f0132906:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132909:	8b 00                	mov    (%eax),%eax
f013290b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f013290e:	8b 52 04             	mov    0x4(%edx),%edx
f0132911:	89 50 04             	mov    %edx,0x4(%eax)
f0132914:	eb 0b                	jmp    f0132921 <insert_sorted_with_merge_freeList+0x3c0>
f0132916:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132919:	8b 40 04             	mov    0x4(%eax),%eax
f013291c:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f0132921:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132924:	8b 40 04             	mov    0x4(%eax),%eax
f0132927:	85 c0                	test   %eax,%eax
f0132929:	74 0f                	je     f013293a <insert_sorted_with_merge_freeList+0x3d9>
f013292b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013292e:	8b 40 04             	mov    0x4(%eax),%eax
f0132931:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132934:	8b 12                	mov    (%edx),%edx
f0132936:	89 10                	mov    %edx,(%eax)
f0132938:	eb 0a                	jmp    f0132944 <insert_sorted_with_merge_freeList+0x3e3>
f013293a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013293d:	8b 00                	mov    (%eax),%eax
f013293f:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f0132944:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132947:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013294d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132950:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132957:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f013295c:	48                   	dec    %eax
f013295d:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
						nextBlock->sva = 0;
f0132962:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132965:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
						nextBlock->size = 0;
f013296c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013296f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
						LIST_INSERT_HEAD(&AvailableMemBlocksList, nextBlock);
f0132976:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f013297a:	75 17                	jne    f0132993 <insert_sorted_with_merge_freeList+0x432>
f013297c:	83 ec 04             	sub    $0x4,%esp
f013297f:	68 a4 cf 13 f0       	push   $0xf013cfa4
f0132984:	68 5f 01 00 00       	push   $0x15f
f0132989:	68 c7 cf 13 f0       	push   $0xf013cfc7
f013298e:	e8 68 d8 fc ff       	call   f01001fb <_panic>
f0132993:	8b 15 98 7b 65 f0    	mov    0xf0657b98,%edx
f0132999:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013299c:	89 10                	mov    %edx,(%eax)
f013299e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01329a1:	8b 00                	mov    (%eax),%eax
f01329a3:	85 c0                	test   %eax,%eax
f01329a5:	74 0d                	je     f01329b4 <insert_sorted_with_merge_freeList+0x453>
f01329a7:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f01329ac:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01329af:	89 50 04             	mov    %edx,0x4(%eax)
f01329b2:	eb 08                	jmp    f01329bc <insert_sorted_with_merge_freeList+0x45b>
f01329b4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01329b7:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f01329bc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01329bf:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f01329c4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01329c7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01329ce:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f01329d3:	40                   	inc    %eax
f01329d4:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
					}
					currentBlock->size += blockToInsert->size;
f01329d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329dc:	8b 50 0c             	mov    0xc(%eax),%edx
f01329df:	8b 45 08             	mov    0x8(%ebp),%eax
f01329e2:	8b 40 0c             	mov    0xc(%eax),%eax
f01329e5:	01 c2                	add    %eax,%edx
f01329e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329ea:	89 50 0c             	mov    %edx,0xc(%eax)
					blockToInsert->sva = 0;
f01329ed:	8b 45 08             	mov    0x8(%ebp),%eax
f01329f0:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					blockToInsert->size = 0;
f01329f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01329fa:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f0132a01:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132a05:	75 17                	jne    f0132a1e <insert_sorted_with_merge_freeList+0x4bd>
f0132a07:	83 ec 04             	sub    $0x4,%esp
f0132a0a:	68 a4 cf 13 f0       	push   $0xf013cfa4
f0132a0f:	68 64 01 00 00       	push   $0x164
f0132a14:	68 c7 cf 13 f0       	push   $0xf013cfc7
f0132a19:	e8 dd d7 fc ff       	call   f01001fb <_panic>
f0132a1e:	8b 15 98 7b 65 f0    	mov    0xf0657b98,%edx
f0132a24:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a27:	89 10                	mov    %edx,(%eax)
f0132a29:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a2c:	8b 00                	mov    (%eax),%eax
f0132a2e:	85 c0                	test   %eax,%eax
f0132a30:	74 0d                	je     f0132a3f <insert_sorted_with_merge_freeList+0x4de>
f0132a32:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f0132a37:	8b 55 08             	mov    0x8(%ebp),%edx
f0132a3a:	89 50 04             	mov    %edx,0x4(%eax)
f0132a3d:	eb 08                	jmp    f0132a47 <insert_sorted_with_merge_freeList+0x4e6>
f0132a3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a42:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f0132a47:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a4a:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f0132a4f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a52:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132a59:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0132a5e:	40                   	inc    %eax
f0132a5f:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
					break;
f0132a64:	e9 41 02 00 00       	jmp    f0132caa <insert_sorted_with_merge_freeList+0x749>
				}
				else if(blockToInsert->sva + blockToInsert->size == nextBlock->sva)
f0132a69:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a6c:	8b 50 08             	mov    0x8(%eax),%edx
f0132a6f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a72:	8b 40 0c             	mov    0xc(%eax),%eax
f0132a75:	01 c2                	add    %eax,%edx
f0132a77:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132a7a:	8b 40 08             	mov    0x8(%eax),%eax
f0132a7d:	39 c2                	cmp    %eax,%edx
f0132a7f:	0f 85 7c 01 00 00    	jne    f0132c01 <insert_sorted_with_merge_freeList+0x6a0>
				{
					LIST_INSERT_BEFORE(&FreeMemBlocksList, nextBlock, blockToInsert);
f0132a85:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132a89:	74 06                	je     f0132a91 <insert_sorted_with_merge_freeList+0x530>
f0132a8b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132a8f:	75 17                	jne    f0132aa8 <insert_sorted_with_merge_freeList+0x547>
f0132a91:	83 ec 04             	sub    $0x4,%esp
f0132a94:	68 e0 cf 13 f0       	push   $0xf013cfe0
f0132a99:	68 69 01 00 00       	push   $0x169
f0132a9e:	68 c7 cf 13 f0       	push   $0xf013cfc7
f0132aa3:	e8 53 d7 fc ff       	call   f01001fb <_panic>
f0132aa8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132aab:	8b 50 04             	mov    0x4(%eax),%edx
f0132aae:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ab1:	89 50 04             	mov    %edx,0x4(%eax)
f0132ab4:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ab7:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132aba:	89 10                	mov    %edx,(%eax)
f0132abc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132abf:	8b 40 04             	mov    0x4(%eax),%eax
f0132ac2:	85 c0                	test   %eax,%eax
f0132ac4:	74 0d                	je     f0132ad3 <insert_sorted_with_merge_freeList+0x572>
f0132ac6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132ac9:	8b 40 04             	mov    0x4(%eax),%eax
f0132acc:	8b 55 08             	mov    0x8(%ebp),%edx
f0132acf:	89 10                	mov    %edx,(%eax)
f0132ad1:	eb 08                	jmp    f0132adb <insert_sorted_with_merge_freeList+0x57a>
f0132ad3:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ad6:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f0132adb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132ade:	8b 55 08             	mov    0x8(%ebp),%edx
f0132ae1:	89 50 04             	mov    %edx,0x4(%eax)
f0132ae4:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f0132ae9:	40                   	inc    %eax
f0132aea:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
					blockToInsert->size += nextBlock->size;
f0132aef:	8b 45 08             	mov    0x8(%ebp),%eax
f0132af2:	8b 50 0c             	mov    0xc(%eax),%edx
f0132af5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132af8:	8b 40 0c             	mov    0xc(%eax),%eax
f0132afb:	01 c2                	add    %eax,%edx
f0132afd:	8b 45 08             	mov    0x8(%ebp),%eax
f0132b00:	89 50 0c             	mov    %edx,0xc(%eax)
					LIST_REMOVE(&FreeMemBlocksList, nextBlock);
f0132b03:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132b07:	75 17                	jne    f0132b20 <insert_sorted_with_merge_freeList+0x5bf>
f0132b09:	83 ec 04             	sub    $0x4,%esp
f0132b0c:	68 70 d0 13 f0       	push   $0xf013d070
f0132b11:	68 6b 01 00 00       	push   $0x16b
f0132b16:	68 c7 cf 13 f0       	push   $0xf013cfc7
f0132b1b:	e8 db d6 fc ff       	call   f01001fb <_panic>
f0132b20:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b23:	8b 00                	mov    (%eax),%eax
f0132b25:	85 c0                	test   %eax,%eax
f0132b27:	74 10                	je     f0132b39 <insert_sorted_with_merge_freeList+0x5d8>
f0132b29:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b2c:	8b 00                	mov    (%eax),%eax
f0132b2e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132b31:	8b 52 04             	mov    0x4(%edx),%edx
f0132b34:	89 50 04             	mov    %edx,0x4(%eax)
f0132b37:	eb 0b                	jmp    f0132b44 <insert_sorted_with_merge_freeList+0x5e3>
f0132b39:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b3c:	8b 40 04             	mov    0x4(%eax),%eax
f0132b3f:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f0132b44:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b47:	8b 40 04             	mov    0x4(%eax),%eax
f0132b4a:	85 c0                	test   %eax,%eax
f0132b4c:	74 0f                	je     f0132b5d <insert_sorted_with_merge_freeList+0x5fc>
f0132b4e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b51:	8b 40 04             	mov    0x4(%eax),%eax
f0132b54:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132b57:	8b 12                	mov    (%edx),%edx
f0132b59:	89 10                	mov    %edx,(%eax)
f0132b5b:	eb 0a                	jmp    f0132b67 <insert_sorted_with_merge_freeList+0x606>
f0132b5d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b60:	8b 00                	mov    (%eax),%eax
f0132b62:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f0132b67:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b6a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132b70:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b73:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132b7a:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f0132b7f:	48                   	dec    %eax
f0132b80:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
					nextBlock->sva = 0;
f0132b85:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b88:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					nextBlock->size = 0;
f0132b8f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b92:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					LIST_INSERT_HEAD(&AvailableMemBlocksList, nextBlock);
f0132b99:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132b9d:	75 17                	jne    f0132bb6 <insert_sorted_with_merge_freeList+0x655>
f0132b9f:	83 ec 04             	sub    $0x4,%esp
f0132ba2:	68 a4 cf 13 f0       	push   $0xf013cfa4
f0132ba7:	68 6e 01 00 00       	push   $0x16e
f0132bac:	68 c7 cf 13 f0       	push   $0xf013cfc7
f0132bb1:	e8 45 d6 fc ff       	call   f01001fb <_panic>
f0132bb6:	8b 15 98 7b 65 f0    	mov    0xf0657b98,%edx
f0132bbc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132bbf:	89 10                	mov    %edx,(%eax)
f0132bc1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132bc4:	8b 00                	mov    (%eax),%eax
f0132bc6:	85 c0                	test   %eax,%eax
f0132bc8:	74 0d                	je     f0132bd7 <insert_sorted_with_merge_freeList+0x676>
f0132bca:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f0132bcf:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132bd2:	89 50 04             	mov    %edx,0x4(%eax)
f0132bd5:	eb 08                	jmp    f0132bdf <insert_sorted_with_merge_freeList+0x67e>
f0132bd7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132bda:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f0132bdf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132be2:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f0132be7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132bea:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132bf1:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0132bf6:	40                   	inc    %eax
f0132bf7:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
					break;
f0132bfc:	e9 a9 00 00 00       	jmp    f0132caa <insert_sorted_with_merge_freeList+0x749>
				}
				else
				{
					LIST_INSERT_AFTER(&FreeMemBlocksList, currentBlock, blockToInsert);
f0132c01:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132c05:	74 06                	je     f0132c0d <insert_sorted_with_merge_freeList+0x6ac>
f0132c07:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132c0b:	75 17                	jne    f0132c24 <insert_sorted_with_merge_freeList+0x6c3>
f0132c0d:	83 ec 04             	sub    $0x4,%esp
f0132c10:	68 3c d0 13 f0       	push   $0xf013d03c
f0132c15:	68 73 01 00 00       	push   $0x173
f0132c1a:	68 c7 cf 13 f0       	push   $0xf013cfc7
f0132c1f:	e8 d7 d5 fc ff       	call   f01001fb <_panic>
f0132c24:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c27:	8b 10                	mov    (%eax),%edx
f0132c29:	8b 45 08             	mov    0x8(%ebp),%eax
f0132c2c:	89 10                	mov    %edx,(%eax)
f0132c2e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132c31:	8b 00                	mov    (%eax),%eax
f0132c33:	85 c0                	test   %eax,%eax
f0132c35:	74 0b                	je     f0132c42 <insert_sorted_with_merge_freeList+0x6e1>
f0132c37:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c3a:	8b 00                	mov    (%eax),%eax
f0132c3c:	8b 55 08             	mov    0x8(%ebp),%edx
f0132c3f:	89 50 04             	mov    %edx,0x4(%eax)
f0132c42:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c45:	8b 55 08             	mov    0x8(%ebp),%edx
f0132c48:	89 10                	mov    %edx,(%eax)
f0132c4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0132c4d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132c50:	89 50 04             	mov    %edx,0x4(%eax)
f0132c53:	8b 45 08             	mov    0x8(%ebp),%eax
f0132c56:	8b 00                	mov    (%eax),%eax
f0132c58:	85 c0                	test   %eax,%eax
f0132c5a:	75 08                	jne    f0132c64 <insert_sorted_with_merge_freeList+0x703>
f0132c5c:	8b 45 08             	mov    0x8(%ebp),%eax
f0132c5f:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f0132c64:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f0132c69:	40                   	inc    %eax
f0132c6a:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
					break;
f0132c6f:	eb 39                	jmp    f0132caa <insert_sorted_with_merge_freeList+0x749>
	}
	else
	{
		struct MemBlock *currentBlock;
		struct MemBlock *nextBlock;
		LIST_FOREACH(currentBlock, &FreeMemBlocksList)
f0132c71:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f0132c76:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132c79:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132c7d:	74 07                	je     f0132c86 <insert_sorted_with_merge_freeList+0x725>
f0132c7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c82:	8b 00                	mov    (%eax),%eax
f0132c84:	eb 05                	jmp    f0132c8b <insert_sorted_with_merge_freeList+0x72a>
f0132c86:	b8 00 00 00 00       	mov    $0x0,%eax
f0132c8b:	a3 6c 7b 65 f0       	mov    %eax,0xf0657b6c
f0132c90:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f0132c95:	85 c0                	test   %eax,%eax
f0132c97:	0f 85 c7 fb ff ff    	jne    f0132864 <insert_sorted_with_merge_freeList+0x303>
f0132c9d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132ca1:	0f 85 bd fb ff ff    	jne    f0132864 <insert_sorted_with_merge_freeList+0x303>
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0132ca7:	eb 01                	jmp    f0132caa <insert_sorted_with_merge_freeList+0x749>
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f0132ca9:	90                   	nop
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0132caa:	90                   	nop
f0132cab:	c9                   	leave  
f0132cac:	c3                   	ret    
f0132cad:	66 90                	xchg   %ax,%ax
f0132caf:	90                   	nop

f0132cb0 <__udivdi3>:
f0132cb0:	55                   	push   %ebp
f0132cb1:	57                   	push   %edi
f0132cb2:	56                   	push   %esi
f0132cb3:	53                   	push   %ebx
f0132cb4:	83 ec 1c             	sub    $0x1c,%esp
f0132cb7:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f0132cbb:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f0132cbf:	8b 7c 24 38          	mov    0x38(%esp),%edi
f0132cc3:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f0132cc7:	89 ca                	mov    %ecx,%edx
f0132cc9:	89 f8                	mov    %edi,%eax
f0132ccb:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f0132ccf:	85 f6                	test   %esi,%esi
f0132cd1:	75 2d                	jne    f0132d00 <__udivdi3+0x50>
f0132cd3:	39 cf                	cmp    %ecx,%edi
f0132cd5:	77 65                	ja     f0132d3c <__udivdi3+0x8c>
f0132cd7:	89 fd                	mov    %edi,%ebp
f0132cd9:	85 ff                	test   %edi,%edi
f0132cdb:	75 0b                	jne    f0132ce8 <__udivdi3+0x38>
f0132cdd:	b8 01 00 00 00       	mov    $0x1,%eax
f0132ce2:	31 d2                	xor    %edx,%edx
f0132ce4:	f7 f7                	div    %edi
f0132ce6:	89 c5                	mov    %eax,%ebp
f0132ce8:	31 d2                	xor    %edx,%edx
f0132cea:	89 c8                	mov    %ecx,%eax
f0132cec:	f7 f5                	div    %ebp
f0132cee:	89 c1                	mov    %eax,%ecx
f0132cf0:	89 d8                	mov    %ebx,%eax
f0132cf2:	f7 f5                	div    %ebp
f0132cf4:	89 cf                	mov    %ecx,%edi
f0132cf6:	89 fa                	mov    %edi,%edx
f0132cf8:	83 c4 1c             	add    $0x1c,%esp
f0132cfb:	5b                   	pop    %ebx
f0132cfc:	5e                   	pop    %esi
f0132cfd:	5f                   	pop    %edi
f0132cfe:	5d                   	pop    %ebp
f0132cff:	c3                   	ret    
f0132d00:	39 ce                	cmp    %ecx,%esi
f0132d02:	77 28                	ja     f0132d2c <__udivdi3+0x7c>
f0132d04:	0f bd fe             	bsr    %esi,%edi
f0132d07:	83 f7 1f             	xor    $0x1f,%edi
f0132d0a:	75 40                	jne    f0132d4c <__udivdi3+0x9c>
f0132d0c:	39 ce                	cmp    %ecx,%esi
f0132d0e:	72 0a                	jb     f0132d1a <__udivdi3+0x6a>
f0132d10:	3b 44 24 08          	cmp    0x8(%esp),%eax
f0132d14:	0f 87 9e 00 00 00    	ja     f0132db8 <__udivdi3+0x108>
f0132d1a:	b8 01 00 00 00       	mov    $0x1,%eax
f0132d1f:	89 fa                	mov    %edi,%edx
f0132d21:	83 c4 1c             	add    $0x1c,%esp
f0132d24:	5b                   	pop    %ebx
f0132d25:	5e                   	pop    %esi
f0132d26:	5f                   	pop    %edi
f0132d27:	5d                   	pop    %ebp
f0132d28:	c3                   	ret    
f0132d29:	8d 76 00             	lea    0x0(%esi),%esi
f0132d2c:	31 ff                	xor    %edi,%edi
f0132d2e:	31 c0                	xor    %eax,%eax
f0132d30:	89 fa                	mov    %edi,%edx
f0132d32:	83 c4 1c             	add    $0x1c,%esp
f0132d35:	5b                   	pop    %ebx
f0132d36:	5e                   	pop    %esi
f0132d37:	5f                   	pop    %edi
f0132d38:	5d                   	pop    %ebp
f0132d39:	c3                   	ret    
f0132d3a:	66 90                	xchg   %ax,%ax
f0132d3c:	89 d8                	mov    %ebx,%eax
f0132d3e:	f7 f7                	div    %edi
f0132d40:	31 ff                	xor    %edi,%edi
f0132d42:	89 fa                	mov    %edi,%edx
f0132d44:	83 c4 1c             	add    $0x1c,%esp
f0132d47:	5b                   	pop    %ebx
f0132d48:	5e                   	pop    %esi
f0132d49:	5f                   	pop    %edi
f0132d4a:	5d                   	pop    %ebp
f0132d4b:	c3                   	ret    
f0132d4c:	bd 20 00 00 00       	mov    $0x20,%ebp
f0132d51:	89 eb                	mov    %ebp,%ebx
f0132d53:	29 fb                	sub    %edi,%ebx
f0132d55:	89 f9                	mov    %edi,%ecx
f0132d57:	d3 e6                	shl    %cl,%esi
f0132d59:	89 c5                	mov    %eax,%ebp
f0132d5b:	88 d9                	mov    %bl,%cl
f0132d5d:	d3 ed                	shr    %cl,%ebp
f0132d5f:	89 e9                	mov    %ebp,%ecx
f0132d61:	09 f1                	or     %esi,%ecx
f0132d63:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f0132d67:	89 f9                	mov    %edi,%ecx
f0132d69:	d3 e0                	shl    %cl,%eax
f0132d6b:	89 c5                	mov    %eax,%ebp
f0132d6d:	89 d6                	mov    %edx,%esi
f0132d6f:	88 d9                	mov    %bl,%cl
f0132d71:	d3 ee                	shr    %cl,%esi
f0132d73:	89 f9                	mov    %edi,%ecx
f0132d75:	d3 e2                	shl    %cl,%edx
f0132d77:	8b 44 24 08          	mov    0x8(%esp),%eax
f0132d7b:	88 d9                	mov    %bl,%cl
f0132d7d:	d3 e8                	shr    %cl,%eax
f0132d7f:	09 c2                	or     %eax,%edx
f0132d81:	89 d0                	mov    %edx,%eax
f0132d83:	89 f2                	mov    %esi,%edx
f0132d85:	f7 74 24 0c          	divl   0xc(%esp)
f0132d89:	89 d6                	mov    %edx,%esi
f0132d8b:	89 c3                	mov    %eax,%ebx
f0132d8d:	f7 e5                	mul    %ebp
f0132d8f:	39 d6                	cmp    %edx,%esi
f0132d91:	72 19                	jb     f0132dac <__udivdi3+0xfc>
f0132d93:	74 0b                	je     f0132da0 <__udivdi3+0xf0>
f0132d95:	89 d8                	mov    %ebx,%eax
f0132d97:	31 ff                	xor    %edi,%edi
f0132d99:	e9 58 ff ff ff       	jmp    f0132cf6 <__udivdi3+0x46>
f0132d9e:	66 90                	xchg   %ax,%ax
f0132da0:	8b 54 24 08          	mov    0x8(%esp),%edx
f0132da4:	89 f9                	mov    %edi,%ecx
f0132da6:	d3 e2                	shl    %cl,%edx
f0132da8:	39 c2                	cmp    %eax,%edx
f0132daa:	73 e9                	jae    f0132d95 <__udivdi3+0xe5>
f0132dac:	8d 43 ff             	lea    -0x1(%ebx),%eax
f0132daf:	31 ff                	xor    %edi,%edi
f0132db1:	e9 40 ff ff ff       	jmp    f0132cf6 <__udivdi3+0x46>
f0132db6:	66 90                	xchg   %ax,%ax
f0132db8:	31 c0                	xor    %eax,%eax
f0132dba:	e9 37 ff ff ff       	jmp    f0132cf6 <__udivdi3+0x46>
f0132dbf:	90                   	nop

f0132dc0 <__umoddi3>:
f0132dc0:	55                   	push   %ebp
f0132dc1:	57                   	push   %edi
f0132dc2:	56                   	push   %esi
f0132dc3:	53                   	push   %ebx
f0132dc4:	83 ec 1c             	sub    $0x1c,%esp
f0132dc7:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f0132dcb:	8b 74 24 34          	mov    0x34(%esp),%esi
f0132dcf:	8b 7c 24 38          	mov    0x38(%esp),%edi
f0132dd3:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f0132dd7:	89 44 24 0c          	mov    %eax,0xc(%esp)
f0132ddb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f0132ddf:	89 f3                	mov    %esi,%ebx
f0132de1:	89 fa                	mov    %edi,%edx
f0132de3:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f0132de7:	89 34 24             	mov    %esi,(%esp)
f0132dea:	85 c0                	test   %eax,%eax
f0132dec:	75 1a                	jne    f0132e08 <__umoddi3+0x48>
f0132dee:	39 f7                	cmp    %esi,%edi
f0132df0:	0f 86 a2 00 00 00    	jbe    f0132e98 <__umoddi3+0xd8>
f0132df6:	89 c8                	mov    %ecx,%eax
f0132df8:	89 f2                	mov    %esi,%edx
f0132dfa:	f7 f7                	div    %edi
f0132dfc:	89 d0                	mov    %edx,%eax
f0132dfe:	31 d2                	xor    %edx,%edx
f0132e00:	83 c4 1c             	add    $0x1c,%esp
f0132e03:	5b                   	pop    %ebx
f0132e04:	5e                   	pop    %esi
f0132e05:	5f                   	pop    %edi
f0132e06:	5d                   	pop    %ebp
f0132e07:	c3                   	ret    
f0132e08:	39 f0                	cmp    %esi,%eax
f0132e0a:	0f 87 ac 00 00 00    	ja     f0132ebc <__umoddi3+0xfc>
f0132e10:	0f bd e8             	bsr    %eax,%ebp
f0132e13:	83 f5 1f             	xor    $0x1f,%ebp
f0132e16:	0f 84 ac 00 00 00    	je     f0132ec8 <__umoddi3+0x108>
f0132e1c:	bf 20 00 00 00       	mov    $0x20,%edi
f0132e21:	29 ef                	sub    %ebp,%edi
f0132e23:	89 fe                	mov    %edi,%esi
f0132e25:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f0132e29:	89 e9                	mov    %ebp,%ecx
f0132e2b:	d3 e0                	shl    %cl,%eax
f0132e2d:	89 d7                	mov    %edx,%edi
f0132e2f:	89 f1                	mov    %esi,%ecx
f0132e31:	d3 ef                	shr    %cl,%edi
f0132e33:	09 c7                	or     %eax,%edi
f0132e35:	89 e9                	mov    %ebp,%ecx
f0132e37:	d3 e2                	shl    %cl,%edx
f0132e39:	89 14 24             	mov    %edx,(%esp)
f0132e3c:	89 d8                	mov    %ebx,%eax
f0132e3e:	d3 e0                	shl    %cl,%eax
f0132e40:	89 c2                	mov    %eax,%edx
f0132e42:	8b 44 24 08          	mov    0x8(%esp),%eax
f0132e46:	d3 e0                	shl    %cl,%eax
f0132e48:	89 44 24 04          	mov    %eax,0x4(%esp)
f0132e4c:	8b 44 24 08          	mov    0x8(%esp),%eax
f0132e50:	89 f1                	mov    %esi,%ecx
f0132e52:	d3 e8                	shr    %cl,%eax
f0132e54:	09 d0                	or     %edx,%eax
f0132e56:	d3 eb                	shr    %cl,%ebx
f0132e58:	89 da                	mov    %ebx,%edx
f0132e5a:	f7 f7                	div    %edi
f0132e5c:	89 d3                	mov    %edx,%ebx
f0132e5e:	f7 24 24             	mull   (%esp)
f0132e61:	89 c6                	mov    %eax,%esi
f0132e63:	89 d1                	mov    %edx,%ecx
f0132e65:	39 d3                	cmp    %edx,%ebx
f0132e67:	0f 82 87 00 00 00    	jb     f0132ef4 <__umoddi3+0x134>
f0132e6d:	0f 84 91 00 00 00    	je     f0132f04 <__umoddi3+0x144>
f0132e73:	8b 54 24 04          	mov    0x4(%esp),%edx
f0132e77:	29 f2                	sub    %esi,%edx
f0132e79:	19 cb                	sbb    %ecx,%ebx
f0132e7b:	89 d8                	mov    %ebx,%eax
f0132e7d:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f0132e81:	d3 e0                	shl    %cl,%eax
f0132e83:	89 e9                	mov    %ebp,%ecx
f0132e85:	d3 ea                	shr    %cl,%edx
f0132e87:	09 d0                	or     %edx,%eax
f0132e89:	89 e9                	mov    %ebp,%ecx
f0132e8b:	d3 eb                	shr    %cl,%ebx
f0132e8d:	89 da                	mov    %ebx,%edx
f0132e8f:	83 c4 1c             	add    $0x1c,%esp
f0132e92:	5b                   	pop    %ebx
f0132e93:	5e                   	pop    %esi
f0132e94:	5f                   	pop    %edi
f0132e95:	5d                   	pop    %ebp
f0132e96:	c3                   	ret    
f0132e97:	90                   	nop
f0132e98:	89 fd                	mov    %edi,%ebp
f0132e9a:	85 ff                	test   %edi,%edi
f0132e9c:	75 0b                	jne    f0132ea9 <__umoddi3+0xe9>
f0132e9e:	b8 01 00 00 00       	mov    $0x1,%eax
f0132ea3:	31 d2                	xor    %edx,%edx
f0132ea5:	f7 f7                	div    %edi
f0132ea7:	89 c5                	mov    %eax,%ebp
f0132ea9:	89 f0                	mov    %esi,%eax
f0132eab:	31 d2                	xor    %edx,%edx
f0132ead:	f7 f5                	div    %ebp
f0132eaf:	89 c8                	mov    %ecx,%eax
f0132eb1:	f7 f5                	div    %ebp
f0132eb3:	89 d0                	mov    %edx,%eax
f0132eb5:	e9 44 ff ff ff       	jmp    f0132dfe <__umoddi3+0x3e>
f0132eba:	66 90                	xchg   %ax,%ax
f0132ebc:	89 c8                	mov    %ecx,%eax
f0132ebe:	89 f2                	mov    %esi,%edx
f0132ec0:	83 c4 1c             	add    $0x1c,%esp
f0132ec3:	5b                   	pop    %ebx
f0132ec4:	5e                   	pop    %esi
f0132ec5:	5f                   	pop    %edi
f0132ec6:	5d                   	pop    %ebp
f0132ec7:	c3                   	ret    
f0132ec8:	3b 04 24             	cmp    (%esp),%eax
f0132ecb:	72 06                	jb     f0132ed3 <__umoddi3+0x113>
f0132ecd:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f0132ed1:	77 0f                	ja     f0132ee2 <__umoddi3+0x122>
f0132ed3:	89 f2                	mov    %esi,%edx
f0132ed5:	29 f9                	sub    %edi,%ecx
f0132ed7:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f0132edb:	89 14 24             	mov    %edx,(%esp)
f0132ede:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f0132ee2:	8b 44 24 04          	mov    0x4(%esp),%eax
f0132ee6:	8b 14 24             	mov    (%esp),%edx
f0132ee9:	83 c4 1c             	add    $0x1c,%esp
f0132eec:	5b                   	pop    %ebx
f0132eed:	5e                   	pop    %esi
f0132eee:	5f                   	pop    %edi
f0132eef:	5d                   	pop    %ebp
f0132ef0:	c3                   	ret    
f0132ef1:	8d 76 00             	lea    0x0(%esi),%esi
f0132ef4:	2b 04 24             	sub    (%esp),%eax
f0132ef7:	19 fa                	sbb    %edi,%edx
f0132ef9:	89 d1                	mov    %edx,%ecx
f0132efb:	89 c6                	mov    %eax,%esi
f0132efd:	e9 71 ff ff ff       	jmp    f0132e73 <__umoddi3+0xb3>
f0132f02:	66 90                	xchg   %ax,%ax
f0132f04:	39 44 24 04          	cmp    %eax,0x4(%esp)
f0132f08:	72 ea                	jb     f0132ef4 <__umoddi3+0x134>
f0132f0a:	89 d9                	mov    %ebx,%ecx
f0132f0c:	e9 62 ff ff ff       	jmp    f0132e73 <__umoddi3+0xb3>
