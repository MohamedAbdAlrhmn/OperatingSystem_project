
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 30 19 00 	lgdtl  0x193018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc 2f 19 f0       	mov    $0xf0192fbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 5c ad 89 f0 01 	movl   $0x1,0xf089ad5c
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 30 ad 89 f0 01 	movl   $0x1,0xf089ad30
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
void print_welcome_message();
//=======================================

//First ever function called in FOS kernel
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 18             	sub    $0x18,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba bc ae 89 f0       	mov    $0xf089aebc,%edx
f010006a:	b8 9c a1 89 f0       	mov    $0xf089a19c,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 9c a1 89 f0       	push   $0xf089a19c
f010007e:	e8 4e 1a 03 00       	call   f0131ad1 <memset>
f0100083:	83 c4 10             	add    $0x10,%esp

	/*2022*/
	scheduler_status = SCH_UNINITIALIZED;
f0100086:	c7 05 58 ad 89 f0 ff 	movl   $0xffffffff,0xf089ad58
f010008d:	ff ff ff 

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100090:	e8 c5 0b 00 00       	call   f0100c5a <console_initialize>

	//print welcome message
	print_welcome_message();
f0100095:	e8 f2 00 00 00       	call   f010018c <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f010009a:	e8 6d 61 00 00       	call   f010620c <detect_memory>
	initialize_kernel_VM();
f010009f:	e8 f9 5c 00 00       	call   f0105d9d <initialize_kernel_VM>
	initialize_paging();
f01000a4:	e8 7a 64 00 00       	call   f0106523 <initialize_paging>
	//	page_check();

	// Lab 3 user environment initialization functions
	env_init();
f01000a9:	e8 42 a1 00 00       	call   f010a1f0 <env_init>
	idt_init();
f01000ae:	e8 fa b6 00 00       	call   f010b7ad <idt_init>

	//Project initializations

	setPageReplacmentAlgorithmCLOCK();
f01000b3:	e8 2d e2 00 00       	call   f010e2e5 <setPageReplacmentAlgorithmCLOCK>
	setUHeapPlacementStrategyFIRSTFIT();
f01000b8:	e8 92 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
	setKHeapPlacementStrategyFIRSTFIT();
f01000bd:	e8 7d ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>

#if USE_KHEAP
	//2022:
	{
		int freeFrames_before = sys_calculate_free_frames() ;
f01000c2:	e8 d0 d0 00 00       	call   f010d197 <sys_calculate_free_frames>
f01000c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		int freeDiskFrames_before = pf_calculate_free_frames() ;
f01000ca:	e8 f9 3c 00 00       	call   f0103dc8 <pf_calculate_free_frames>
f01000cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		initialize_dyn_block_system();
f01000d2:	e8 f8 7a 00 00       	call   f0107bcf <initialize_dyn_block_system>
		int freeFrames_after = sys_calculate_free_frames() ;
f01000d7:	e8 bb d0 00 00       	call   f010d197 <sys_calculate_free_frames>
f01000dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
		int freeDiskFrames_after = pf_calculate_free_frames() ;
f01000df:	e8 e4 3c 00 00       	call   f0103dc8 <pf_calculate_free_frames>
f01000e4:	89 45 e8             	mov    %eax,-0x18(%ebp)
		test_initialize_dyn_block_system(freeFrames_before, freeDiskFrames_before, freeFrames_after, freeDiskFrames_after);
f01000e7:	ff 75 e8             	pushl  -0x18(%ebp)
f01000ea:	ff 75 ec             	pushl  -0x14(%ebp)
f01000ed:	ff 75 f0             	pushl  -0x10(%ebp)
f01000f0:	ff 75 f4             	pushl  -0xc(%ebp)
f01000f3:	e8 3c 03 03 00       	call   f0130434 <test_initialize_dyn_block_system>
f01000f8:	83 c4 10             	add    $0x10,%esp
	}
	MAX_SHARES = (KERNEL_SHARES_ARR_INIT_SIZE) / sizeof(struct Share);
f01000fb:	c7 05 28 ad 89 f0 61 	movl   $0x61,0xf089ad28
f0100102:	00 00 00 
	MAX_SEMAPHORES = (KERNEL_SEMAPHORES_ARR_INIT_SIZE) / sizeof(struct Semaphore);
f0100105:	c7 05 b4 ac 89 f0 59 	movl   $0x59,0xf089acb4
f010010c:	00 00 00 
#endif
	create_shares_array(MAX_SHARES);
f010010f:	a1 28 ad 89 f0       	mov    0xf089ad28,%eax
f0100114:	83 ec 0c             	sub    $0xc,%esp
f0100117:	50                   	push   %eax
f0100118:	e8 e0 6f 00 00       	call   f01070fd <create_shares_array>
f010011d:	83 c4 10             	add    $0x10,%esp
	create_semaphores_array(MAX_SEMAPHORES);
f0100120:	a1 b4 ac 89 f0       	mov    0xf089acb4,%eax
f0100125:	83 ec 0c             	sub    $0xc,%esp
f0100128:	50                   	push   %eax
f0100129:	e8 e7 e5 00 00       	call   f010e715 <create_semaphores_array>
f010012e:	83 c4 10             	add    $0x10,%esp



	enableBuffering(0);
f0100131:	83 ec 0c             	sub    $0xc,%esp
f0100134:	6a 00                	push   $0x0
f0100136:	e8 b7 e2 00 00       	call   f010e3f2 <enableBuffering>
f010013b:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0) ;
f010013e:	83 ec 0c             	sub    $0xc,%esp
f0100141:	6a 00                	push   $0x0
f0100143:	e8 92 e2 00 00       	call   f010e3da <enableModifiedBuffer>
f0100148:	83 c4 10             	add    $0x10,%esp
	setModifiedBufferLength(1000);
f010014b:	83 ec 0c             	sub    $0xc,%esp
f010014e:	68 e8 03 00 00       	push   $0x3e8
f0100153:	e8 b2 e2 00 00       	call   f010e40a <setModifiedBufferLength>
f0100158:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f010015b:	e8 b7 5a 00 00       	call   f0105c17 <pic_init>
	sched_init() ;
f0100160:	e8 60 47 00 00       	call   f01048c5 <sched_init>
	//Project initializations

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f0100165:	83 ec 0c             	sub    $0xc,%esp
f0100168:	68 80 3b 13 f0       	push   $0xf0133b80
f010016d:	e8 9c 0b 00 00       	call   f0100d0e <cprintf>
f0100172:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f0100175:	83 ec 0c             	sub    $0xc,%esp
f0100178:	68 ac 3b 13 f0       	push   $0xf0133bac
f010017d:	e8 8c 0b 00 00       	call   f0100d0e <cprintf>
f0100182:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f0100185:	e8 aa 0b 00 00       	call   f0100d34 <run_command_prompt>
	}
f010018a:	eb d9                	jmp    f0100165 <FOS_initialize+0x106>

f010018c <print_welcome_message>:
}


void print_welcome_message()
{
f010018c:	55                   	push   %ebp
f010018d:	89 e5                	mov    %esp,%ebp
f010018f:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f0100192:	83 ec 0c             	sub    $0xc,%esp
f0100195:	68 d1 3b 13 f0       	push   $0xf0133bd1
f010019a:	e8 6f 0b 00 00       	call   f0100d0e <cprintf>
f010019f:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01001a2:	83 ec 0c             	sub    $0xc,%esp
f01001a5:	68 d8 3b 13 f0       	push   $0xf0133bd8
f01001aa:	e8 5f 0b 00 00       	call   f0100d0e <cprintf>
f01001af:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01001b2:	83 ec 0c             	sub    $0xc,%esp
f01001b5:	68 20 3c 13 f0       	push   $0xf0133c20
f01001ba:	e8 4f 0b 00 00       	call   f0100d0e <cprintf>
f01001bf:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f01001c2:	83 ec 0c             	sub    $0xc,%esp
f01001c5:	68 68 3c 13 f0       	push   $0xf0133c68
f01001ca:	e8 3f 0b 00 00       	call   f0100d0e <cprintf>
f01001cf:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01001d2:	83 ec 0c             	sub    $0xc,%esp
f01001d5:	68 20 3c 13 f0       	push   $0xf0133c20
f01001da:	e8 2f 0b 00 00       	call   f0100d0e <cprintf>
f01001df:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01001e2:	83 ec 0c             	sub    $0xc,%esp
f01001e5:	68 d8 3b 13 f0       	push   $0xf0133bd8
f01001ea:	e8 1f 0b 00 00       	call   f0100d0e <cprintf>
f01001ef:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f01001f2:	83 ec 0c             	sub    $0xc,%esp
f01001f5:	68 ad 3c 13 f0       	push   $0xf0133cad
f01001fa:	e8 0f 0b 00 00       	call   f0100d0e <cprintf>
f01001ff:	83 c4 10             	add    $0x10,%esp
}
f0100202:	90                   	nop
f0100203:	c9                   	leave  
f0100204:	c3                   	ret    

f0100205 <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f0100205:	55                   	push   %ebp
f0100206:	89 e5                	mov    %esp,%ebp
f0100208:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010020b:	8b 45 10             	mov    0x10(%ebp),%eax
f010020e:	a3 a0 a1 89 f0       	mov    %eax,0xf089a1a0

	va_start(ap, fmt);
f0100213:	8d 45 10             	lea    0x10(%ebp),%eax
f0100216:	83 c0 04             	add    $0x4,%eax
f0100219:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010021c:	83 ec 04             	sub    $0x4,%esp
f010021f:	ff 75 0c             	pushl  0xc(%ebp)
f0100222:	ff 75 08             	pushl  0x8(%ebp)
f0100225:	68 b2 3c 13 f0       	push   $0xf0133cb2
f010022a:	e8 df 0a 00 00       	call   f0100d0e <cprintf>
f010022f:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100232:	8b 45 10             	mov    0x10(%ebp),%eax
f0100235:	83 ec 08             	sub    $0x8,%esp
f0100238:	ff 75 f4             	pushl  -0xc(%ebp)
f010023b:	50                   	push   %eax
f010023c:	e8 a4 0a 00 00       	call   f0100ce5 <vcprintf>
f0100241:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100244:	83 ec 0c             	sub    $0xc,%esp
f0100247:	68 cb 3c 13 f0       	push   $0xf0133ccb
f010024c:	e8 bd 0a 00 00       	call   f0100d0e <cprintf>
f0100251:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f0100254:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f0100259:	85 c0                	test   %eax,%eax
f010025b:	74 12                	je     f010026f <_panic+0x6a>
f010025d:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f0100262:	8b 40 54             	mov    0x54(%eax),%eax
f0100265:	83 f8 02             	cmp    $0x2,%eax
f0100268:	75 05                	jne    f010026f <_panic+0x6a>
	{
		//2015
		env_exit();
f010026a:	e8 76 9e 00 00       	call   f010a0e5 <env_exit>
		//env_run_cmd_prmpt() ;
	}

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010026f:	a1 58 ad 89 f0       	mov    0xf089ad58,%eax
f0100274:	83 f8 ff             	cmp    $0xffffffff,%eax
f0100277:	74 1b                	je     f0100294 <_panic+0x8f>
	{
		cprintf("scheduler_status=%d\n", scheduler_status);
f0100279:	a1 58 ad 89 f0       	mov    0xf089ad58,%eax
f010027e:	83 ec 08             	sub    $0x8,%esp
f0100281:	50                   	push   %eax
f0100282:	68 cd 3c 13 f0       	push   $0xf0133ccd
f0100287:	e8 82 0a 00 00       	call   f0100d0e <cprintf>
f010028c:	83 c4 10             	add    $0x10,%esp
		//2015
		fos_scheduler();
f010028f:	e8 92 44 00 00       	call   f0104726 <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f0100294:	c7 05 f4 a3 89 f0 00 	movl   $0x0,0xf089a3f4
f010029b:	00 00 00 
		lcr3(phys_page_directory);
f010029e:	a1 ac ad 89 f0       	mov    0xf089adac,%eax
f01002a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01002a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01002a9:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f01002ac:	83 ec 0c             	sub    $0xc,%esp
f01002af:	6a 00                	push   $0x0
f01002b1:	e8 7e 0a 00 00       	call   f0100d34 <run_command_prompt>
f01002b6:	83 c4 10             	add    $0x10,%esp
f01002b9:	eb f1                	jmp    f01002ac <_panic+0xa7>

f01002bb <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f01002bb:	55                   	push   %ebp
f01002bc:	89 e5                	mov    %esp,%ebp
f01002be:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01002c1:	8b 45 10             	mov    0x10(%ebp),%eax
f01002c4:	a3 a0 a1 89 f0       	mov    %eax,0xf089a1a0

	va_start(ap, fmt);
f01002c9:	8d 45 10             	lea    0x10(%ebp),%eax
f01002cc:	83 c0 04             	add    $0x4,%eax
f01002cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01002d2:	83 ec 04             	sub    $0x4,%esp
f01002d5:	ff 75 0c             	pushl  0xc(%ebp)
f01002d8:	ff 75 08             	pushl  0x8(%ebp)
f01002db:	68 b2 3c 13 f0       	push   $0xf0133cb2
f01002e0:	e8 29 0a 00 00       	call   f0100d0e <cprintf>
f01002e5:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01002e8:	8b 45 10             	mov    0x10(%ebp),%eax
f01002eb:	83 ec 08             	sub    $0x8,%esp
f01002ee:	ff 75 f4             	pushl  -0xc(%ebp)
f01002f1:	50                   	push   %eax
f01002f2:	e8 ee 09 00 00       	call   f0100ce5 <vcprintf>
f01002f7:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01002fa:	83 ec 0c             	sub    $0xc,%esp
f01002fd:	68 cb 3c 13 f0       	push   $0xf0133ccb
f0100302:	e8 07 0a 00 00       	call   f0100d0e <cprintf>
f0100307:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010030a:	a1 58 ad 89 f0       	mov    0xf089ad58,%eax
f010030f:	83 f8 ff             	cmp    $0xffffffff,%eax
f0100312:	74 27                	je     f010033b <_panic_all+0x80>
	{
		//exit all ready env's
		sched_exit_all_ready_envs();
f0100314:	e8 c2 51 00 00       	call   f01054db <sched_exit_all_ready_envs>
		if (curenv != NULL)
f0100319:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010031e:	85 c0                	test   %eax,%eax
f0100320:	74 14                	je     f0100336 <_panic_all+0x7b>
		{
			//cprintf("exit curenv...........\n");
			sched_exit_env(curenv->env_id);
f0100322:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f0100327:	8b 40 4c             	mov    0x4c(%eax),%eax
f010032a:	83 ec 0c             	sub    $0xc,%esp
f010032d:	50                   	push   %eax
f010032e:	e8 6f 4f 00 00       	call   f01052a2 <sched_exit_env>
f0100333:	83 c4 10             	add    $0x10,%esp
			//env_run_cmd_prmpt() ;
		}

		fos_scheduler();
f0100336:	e8 eb 43 00 00       	call   f0104726 <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f010033b:	c7 05 f4 a3 89 f0 00 	movl   $0x0,0xf089a3f4
f0100342:	00 00 00 
		lcr3(phys_page_directory);
f0100345:	a1 ac ad 89 f0       	mov    0xf089adac,%eax
f010034a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010034d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100350:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f0100353:	83 ec 0c             	sub    $0xc,%esp
f0100356:	6a 00                	push   $0x0
f0100358:	e8 d7 09 00 00       	call   f0100d34 <run_command_prompt>
f010035d:	83 c4 10             	add    $0x10,%esp
f0100360:	eb f1                	jmp    f0100353 <_panic_all+0x98>

f0100362 <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f0100362:	55                   	push   %ebp
f0100363:	89 e5                	mov    %esp,%ebp
f0100365:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100368:	8b 45 10             	mov    0x10(%ebp),%eax
f010036b:	a3 a0 a1 89 f0       	mov    %eax,0xf089a1a0

	va_start(ap, fmt);
f0100370:	8d 45 10             	lea    0x10(%ebp),%eax
f0100373:	83 c0 04             	add    $0x4,%eax
f0100376:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f0100379:	83 ec 04             	sub    $0x4,%esp
f010037c:	ff 75 0c             	pushl  0xc(%ebp)
f010037f:	ff 75 08             	pushl  0x8(%ebp)
f0100382:	68 b2 3c 13 f0       	push   $0xf0133cb2
f0100387:	e8 82 09 00 00       	call   f0100d0e <cprintf>
f010038c:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f010038f:	8b 45 10             	mov    0x10(%ebp),%eax
f0100392:	83 ec 08             	sub    $0x8,%esp
f0100395:	ff 75 f4             	pushl  -0xc(%ebp)
f0100398:	50                   	push   %eax
f0100399:	e8 47 09 00 00       	call   f0100ce5 <vcprintf>
f010039e:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01003a1:	83 ec 0c             	sub    $0xc,%esp
f01003a4:	68 cb 3c 13 f0       	push   $0xf0133ccb
f01003a9:	e8 60 09 00 00       	call   f0100d0e <cprintf>
f01003ae:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01003b1:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f01003b6:	85 c0                	test   %eax,%eax
f01003b8:	74 28                	je     f01003e2 <_panic_into_prompt+0x80>
f01003ba:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f01003bf:	8b 40 54             	mov    0x54(%eax),%eax
f01003c2:	83 f8 02             	cmp    $0x2,%eax
f01003c5:	75 1b                	jne    f01003e2 <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f01003c7:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f01003cc:	83 ec 0c             	sub    $0xc,%esp
f01003cf:	50                   	push   %eax
f01003d0:	e8 85 47 00 00       	call   f0104b5a <sched_insert_exit>
f01003d5:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f01003d8:	c7 05 f4 a3 89 f0 00 	movl   $0x0,0xf089a3f4
f01003df:	00 00 00 
	}

	lcr3(phys_page_directory);
f01003e2:	a1 ac ad 89 f0       	mov    0xf089adac,%eax
f01003e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01003ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01003ed:	0f 22 d8             	mov    %eax,%cr3

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f01003f0:	a1 58 ad 89 f0       	mov    0xf089ad58,%eax
f01003f5:	83 f8 ff             	cmp    $0xffffffff,%eax
f01003f8:	74 0a                	je     f0100404 <_panic_into_prompt+0xa2>
	{
		scheduler_status = SCH_STOPPED;
f01003fa:	c7 05 58 ad 89 f0 00 	movl   $0x0,0xf089ad58
f0100401:	00 00 00 
	}
	while (1)
		run_command_prompt(NULL);
f0100404:	83 ec 0c             	sub    $0xc,%esp
f0100407:	6a 00                	push   $0x0
f0100409:	e8 26 09 00 00       	call   f0100d34 <run_command_prompt>
f010040e:	83 c4 10             	add    $0x10,%esp
f0100411:	eb f1                	jmp    f0100404 <_panic_into_prompt+0xa2>

f0100413 <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f0100413:	55                   	push   %ebp
f0100414:	89 e5                	mov    %esp,%ebp
f0100416:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0100419:	8d 45 10             	lea    0x10(%ebp),%eax
f010041c:	83 c0 04             	add    $0x4,%eax
f010041f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f0100422:	83 ec 04             	sub    $0x4,%esp
f0100425:	ff 75 0c             	pushl  0xc(%ebp)
f0100428:	ff 75 08             	pushl  0x8(%ebp)
f010042b:	68 e2 3c 13 f0       	push   $0xf0133ce2
f0100430:	e8 d9 08 00 00       	call   f0100d0e <cprintf>
f0100435:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100438:	8b 45 10             	mov    0x10(%ebp),%eax
f010043b:	83 ec 08             	sub    $0x8,%esp
f010043e:	ff 75 f4             	pushl  -0xc(%ebp)
f0100441:	50                   	push   %eax
f0100442:	e8 9e 08 00 00       	call   f0100ce5 <vcprintf>
f0100447:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010044a:	83 ec 0c             	sub    $0xc,%esp
f010044d:	68 cb 3c 13 f0       	push   $0xf0133ccb
f0100452:	e8 b7 08 00 00       	call   f0100d0e <cprintf>
f0100457:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f010045a:	90                   	nop
f010045b:	c9                   	leave  
f010045c:	c3                   	ret    

f010045d <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f010045d:	55                   	push   %ebp
f010045e:	89 e5                	mov    %esp,%ebp
f0100460:	83 ec 10             	sub    $0x10,%esp
f0100463:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010046a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010046d:	89 c2                	mov    %eax,%edx
f010046f:	ec                   	in     (%dx),%al
f0100470:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0100473:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f0100476:	0f b6 c0             	movzbl %al,%eax
f0100479:	83 e0 01             	and    $0x1,%eax
f010047c:	85 c0                	test   %eax,%eax
f010047e:	75 07                	jne    f0100487 <serial_proc_data+0x2a>
		return -1;
f0100480:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100485:	eb 16                	jmp    f010049d <serial_proc_data+0x40>
f0100487:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010048e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100491:	89 c2                	mov    %eax,%edx
f0100493:	ec                   	in     (%dx),%al
f0100494:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f0100497:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f010049a:	0f b6 c0             	movzbl %al,%eax
}
f010049d:	c9                   	leave  
f010049e:	c3                   	ret    

f010049f <serial_intr>:

void
serial_intr(void)
{
f010049f:	55                   	push   %ebp
f01004a0:	89 e5                	mov    %esp,%ebp
f01004a2:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f01004a5:	a1 c0 a1 89 f0       	mov    0xf089a1c0,%eax
f01004aa:	85 c0                	test   %eax,%eax
f01004ac:	74 10                	je     f01004be <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f01004ae:	83 ec 0c             	sub    $0xc,%esp
f01004b1:	68 5d 04 10 f0       	push   $0xf010045d
f01004b6:	e8 e4 05 00 00       	call   f0100a9f <cons_intr>
f01004bb:	83 c4 10             	add    $0x10,%esp
}
f01004be:	90                   	nop
f01004bf:	c9                   	leave  
f01004c0:	c3                   	ret    

f01004c1 <serial_init>:

void
serial_init(void)
{
f01004c1:	55                   	push   %ebp
f01004c2:	89 e5                	mov    %esp,%ebp
f01004c4:	83 ec 40             	sub    $0x40,%esp
f01004c7:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f01004ce:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01004d2:	8a 45 ce             	mov    -0x32(%ebp),%al
f01004d5:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01004d8:	ee                   	out    %al,(%dx)
f01004d9:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f01004e0:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f01004e4:	8a 45 cf             	mov    -0x31(%ebp),%al
f01004e7:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01004ea:	ee                   	out    %al,(%dx)
f01004eb:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f01004f2:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f01004f6:	8a 45 d0             	mov    -0x30(%ebp),%al
f01004f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01004fc:	ee                   	out    %al,(%dx)
f01004fd:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f0100504:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f0100508:	8a 45 d1             	mov    -0x2f(%ebp),%al
f010050b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010050e:	ee                   	out    %al,(%dx)
f010050f:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f0100516:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f010051a:	8a 45 d2             	mov    -0x2e(%ebp),%al
f010051d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0100520:	ee                   	out    %al,(%dx)
f0100521:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f0100528:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f010052c:	8a 45 d3             	mov    -0x2d(%ebp),%al
f010052f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100532:	ee                   	out    %al,(%dx)
f0100533:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f010053a:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f010053e:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0100541:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100544:	ee                   	out    %al,(%dx)
f0100545:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010054c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010054f:	89 c2                	mov    %eax,%edx
f0100551:	ec                   	in     (%dx),%al
f0100552:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f0100555:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f0100558:	3c ff                	cmp    $0xff,%al
f010055a:	0f 95 c0             	setne  %al
f010055d:	0f b6 c0             	movzbl %al,%eax
f0100560:	a3 c0 a1 89 f0       	mov    %eax,0xf089a1c0
f0100565:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010056c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010056f:	89 c2                	mov    %eax,%edx
f0100571:	ec                   	in     (%dx),%al
f0100572:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0100575:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f010057c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010057f:	89 c2                	mov    %eax,%edx
f0100581:	ec                   	in     (%dx),%al
f0100582:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f0100585:	90                   	nop
f0100586:	c9                   	leave  
f0100587:	c3                   	ret    

f0100588 <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f0100588:	55                   	push   %ebp
f0100589:	89 e5                	mov    %esp,%ebp
f010058b:	83 ec 20             	sub    $0x20,%esp
f010058e:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f0100595:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100598:	89 c2                	mov    %eax,%edx
f010059a:	ec                   	in     (%dx),%al
f010059b:	88 45 ec             	mov    %al,-0x14(%ebp)
f010059e:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f01005a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01005a8:	89 c2                	mov    %eax,%edx
f01005aa:	ec                   	in     (%dx),%al
f01005ab:	88 45 ed             	mov    %al,-0x13(%ebp)
f01005ae:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f01005b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01005b8:	89 c2                	mov    %eax,%edx
f01005ba:	ec                   	in     (%dx),%al
f01005bb:	88 45 ee             	mov    %al,-0x12(%ebp)
f01005be:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f01005c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01005c8:	89 c2                	mov    %eax,%edx
f01005ca:	ec                   	in     (%dx),%al
f01005cb:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f01005ce:	90                   	nop
f01005cf:	c9                   	leave  
f01005d0:	c3                   	ret    

f01005d1 <lpt_putc>:

static void
lpt_putc(int c)
{
f01005d1:	55                   	push   %ebp
f01005d2:	89 e5                	mov    %esp,%ebp
f01005d4:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01005d7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01005de:	eb 08                	jmp    f01005e8 <lpt_putc+0x17>
		delay();
f01005e0:	e8 a3 ff ff ff       	call   f0100588 <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01005e5:	ff 45 fc             	incl   -0x4(%ebp)
f01005e8:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f01005ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01005f2:	89 c2                	mov    %eax,%edx
f01005f4:	ec                   	in     (%dx),%al
f01005f5:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f01005f8:	8a 45 eb             	mov    -0x15(%ebp),%al
f01005fb:	84 c0                	test   %al,%al
f01005fd:	78 09                	js     f0100608 <lpt_putc+0x37>
f01005ff:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f0100606:	7e d8                	jle    f01005e0 <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f0100608:	8b 45 08             	mov    0x8(%ebp),%eax
f010060b:	0f b6 c0             	movzbl %al,%eax
f010060e:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f0100615:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100618:	8a 45 e8             	mov    -0x18(%ebp),%al
f010061b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010061e:	ee                   	out    %al,(%dx)
f010061f:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f0100626:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f010062a:	8a 45 e9             	mov    -0x17(%ebp),%al
f010062d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100630:	ee                   	out    %al,(%dx)
f0100631:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f0100638:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f010063c:	8a 45 ea             	mov    -0x16(%ebp),%al
f010063f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100642:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f0100643:	90                   	nop
f0100644:	c9                   	leave  
f0100645:	c3                   	ret    

f0100646 <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f0100646:	55                   	push   %ebp
f0100647:	89 e5                	mov    %esp,%ebp
f0100649:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f010064c:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f0100653:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100656:	66 8b 00             	mov    (%eax),%ax
f0100659:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f010065d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100660:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100665:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100668:	66 8b 00             	mov    (%eax),%ax
f010066b:	66 3d 5a a5          	cmp    $0xa55a,%ax
f010066f:	74 13                	je     f0100684 <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f0100671:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f0100678:	c7 05 c4 a1 89 f0 b4 	movl   $0x3b4,0xf089a1c4
f010067f:	03 00 00 
f0100682:	eb 14                	jmp    f0100698 <cga_init+0x52>
	} else {
		*cp = was;
f0100684:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0100687:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f010068b:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f010068e:	c7 05 c4 a1 89 f0 d4 	movl   $0x3d4,0xf089a1c4
f0100695:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f0100698:	a1 c4 a1 89 f0       	mov    0xf089a1c4,%eax
f010069d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01006a0:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f01006a4:	8a 45 e0             	mov    -0x20(%ebp),%al
f01006a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01006aa:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f01006ab:	a1 c4 a1 89 f0       	mov    0xf089a1c4,%eax
f01006b0:	40                   	inc    %eax
f01006b1:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01006b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01006b7:	89 c2                	mov    %eax,%edx
f01006b9:	ec                   	in     (%dx),%al
f01006ba:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f01006bd:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01006c0:	0f b6 c0             	movzbl %al,%eax
f01006c3:	c1 e0 08             	shl    $0x8,%eax
f01006c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f01006c9:	a1 c4 a1 89 f0       	mov    0xf089a1c4,%eax
f01006ce:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01006d1:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01006d5:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01006d8:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01006db:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f01006dc:	a1 c4 a1 89 f0       	mov    0xf089a1c4,%eax
f01006e1:	40                   	inc    %eax
f01006e2:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01006e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01006e8:	89 c2                	mov    %eax,%edx
f01006ea:	ec                   	in     (%dx),%al
f01006eb:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f01006ee:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01006f1:	0f b6 c0             	movzbl %al,%eax
f01006f4:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f01006f7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01006fa:	a3 c8 a1 89 f0       	mov    %eax,0xf089a1c8
	crt_pos = pos;
f01006ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100702:	66 a3 cc a1 89 f0    	mov    %ax,0xf089a1cc
}
f0100708:	90                   	nop
f0100709:	c9                   	leave  
f010070a:	c3                   	ret    

f010070b <cga_putc>:



void
cga_putc(int c)
{
f010070b:	55                   	push   %ebp
f010070c:	89 e5                	mov    %esp,%ebp
f010070e:	53                   	push   %ebx
f010070f:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f0100712:	8b 45 08             	mov    0x8(%ebp),%eax
f0100715:	b0 00                	mov    $0x0,%al
f0100717:	85 c0                	test   %eax,%eax
f0100719:	75 07                	jne    f0100722 <cga_putc+0x17>
		c |= 0x0700;
f010071b:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f0100722:	8b 45 08             	mov    0x8(%ebp),%eax
f0100725:	0f b6 c0             	movzbl %al,%eax
f0100728:	83 f8 09             	cmp    $0x9,%eax
f010072b:	0f 84 94 00 00 00    	je     f01007c5 <cga_putc+0xba>
f0100731:	83 f8 09             	cmp    $0x9,%eax
f0100734:	7f 0a                	jg     f0100740 <cga_putc+0x35>
f0100736:	83 f8 08             	cmp    $0x8,%eax
f0100739:	74 14                	je     f010074f <cga_putc+0x44>
f010073b:	e9 c8 00 00 00       	jmp    f0100808 <cga_putc+0xfd>
f0100740:	83 f8 0a             	cmp    $0xa,%eax
f0100743:	74 49                	je     f010078e <cga_putc+0x83>
f0100745:	83 f8 0d             	cmp    $0xd,%eax
f0100748:	74 53                	je     f010079d <cga_putc+0x92>
f010074a:	e9 b9 00 00 00       	jmp    f0100808 <cga_putc+0xfd>
	case '\b':
		if (crt_pos > 0) {
f010074f:	66 a1 cc a1 89 f0    	mov    0xf089a1cc,%ax
f0100755:	66 85 c0             	test   %ax,%ax
f0100758:	0f 84 d0 00 00 00    	je     f010082e <cga_putc+0x123>
			crt_pos--;
f010075e:	66 a1 cc a1 89 f0    	mov    0xf089a1cc,%ax
f0100764:	48                   	dec    %eax
f0100765:	66 a3 cc a1 89 f0    	mov    %ax,0xf089a1cc
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f010076b:	8b 15 c8 a1 89 f0    	mov    0xf089a1c8,%edx
f0100771:	66 a1 cc a1 89 f0    	mov    0xf089a1cc,%ax
f0100777:	0f b7 c0             	movzwl %ax,%eax
f010077a:	01 c0                	add    %eax,%eax
f010077c:	01 c2                	add    %eax,%edx
f010077e:	8b 45 08             	mov    0x8(%ebp),%eax
f0100781:	b0 00                	mov    $0x0,%al
f0100783:	83 c8 20             	or     $0x20,%eax
f0100786:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f0100789:	e9 a0 00 00 00       	jmp    f010082e <cga_putc+0x123>
	case '\n':
		crt_pos += CRT_COLS;
f010078e:	66 a1 cc a1 89 f0    	mov    0xf089a1cc,%ax
f0100794:	83 c0 50             	add    $0x50,%eax
f0100797:	66 a3 cc a1 89 f0    	mov    %ax,0xf089a1cc
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f010079d:	66 8b 0d cc a1 89 f0 	mov    0xf089a1cc,%cx
f01007a4:	66 a1 cc a1 89 f0    	mov    0xf089a1cc,%ax
f01007aa:	bb 50 00 00 00       	mov    $0x50,%ebx
f01007af:	ba 00 00 00 00       	mov    $0x0,%edx
f01007b4:	66 f7 f3             	div    %bx
f01007b7:	89 d0                	mov    %edx,%eax
f01007b9:	29 c1                	sub    %eax,%ecx
f01007bb:	89 c8                	mov    %ecx,%eax
f01007bd:	66 a3 cc a1 89 f0    	mov    %ax,0xf089a1cc
		break;
f01007c3:	eb 6a                	jmp    f010082f <cga_putc+0x124>
	case '\t':
		cons_putc(' ');
f01007c5:	83 ec 0c             	sub    $0xc,%esp
f01007c8:	6a 20                	push   $0x20
f01007ca:	e8 69 04 00 00       	call   f0100c38 <cons_putc>
f01007cf:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007d2:	83 ec 0c             	sub    $0xc,%esp
f01007d5:	6a 20                	push   $0x20
f01007d7:	e8 5c 04 00 00       	call   f0100c38 <cons_putc>
f01007dc:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007df:	83 ec 0c             	sub    $0xc,%esp
f01007e2:	6a 20                	push   $0x20
f01007e4:	e8 4f 04 00 00       	call   f0100c38 <cons_putc>
f01007e9:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007ec:	83 ec 0c             	sub    $0xc,%esp
f01007ef:	6a 20                	push   $0x20
f01007f1:	e8 42 04 00 00       	call   f0100c38 <cons_putc>
f01007f6:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007f9:	83 ec 0c             	sub    $0xc,%esp
f01007fc:	6a 20                	push   $0x20
f01007fe:	e8 35 04 00 00       	call   f0100c38 <cons_putc>
f0100803:	83 c4 10             	add    $0x10,%esp
		break;
f0100806:	eb 27                	jmp    f010082f <cga_putc+0x124>
	default:
		crt_buf[crt_pos++] = c;		/* write the character */
f0100808:	8b 0d c8 a1 89 f0    	mov    0xf089a1c8,%ecx
f010080e:	66 a1 cc a1 89 f0    	mov    0xf089a1cc,%ax
f0100814:	8d 50 01             	lea    0x1(%eax),%edx
f0100817:	66 89 15 cc a1 89 f0 	mov    %dx,0xf089a1cc
f010081e:	0f b7 c0             	movzwl %ax,%eax
f0100821:	01 c0                	add    %eax,%eax
f0100823:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0100826:	8b 45 08             	mov    0x8(%ebp),%eax
f0100829:	66 89 02             	mov    %ax,(%edx)
		break;
f010082c:	eb 01                	jmp    f010082f <cga_putc+0x124>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f010082e:	90                   	nop
		crt_buf[crt_pos++] = c;		/* write the character */
		break;
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f010082f:	66 a1 cc a1 89 f0    	mov    0xf089a1cc,%ax
f0100835:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100839:	76 58                	jbe    f0100893 <cga_putc+0x188>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f010083b:	a1 c8 a1 89 f0       	mov    0xf089a1c8,%eax
f0100840:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f0100846:	a1 c8 a1 89 f0       	mov    0xf089a1c8,%eax
f010084b:	83 ec 04             	sub    $0x4,%esp
f010084e:	68 00 0f 00 00       	push   $0xf00
f0100853:	52                   	push   %edx
f0100854:	50                   	push   %eax
f0100855:	e8 a7 12 03 00       	call   f0131b01 <memcpy>
f010085a:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f010085d:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f0100864:	eb 15                	jmp    f010087b <cga_putc+0x170>
			crt_buf[i] = 0x0700 | ' ';
f0100866:	8b 15 c8 a1 89 f0    	mov    0xf089a1c8,%edx
f010086c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010086f:	01 c0                	add    %eax,%eax
f0100871:	01 d0                	add    %edx,%eax
f0100873:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f0100878:	ff 45 f4             	incl   -0xc(%ebp)
f010087b:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f0100882:	7e e2                	jle    f0100866 <cga_putc+0x15b>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f0100884:	66 a1 cc a1 89 f0    	mov    0xf089a1cc,%ax
f010088a:	83 e8 50             	sub    $0x50,%eax
f010088d:	66 a3 cc a1 89 f0    	mov    %ax,0xf089a1cc
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f0100893:	a1 c4 a1 89 f0       	mov    0xf089a1c4,%eax
f0100898:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010089b:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010089f:	8a 45 e0             	mov    -0x20(%ebp),%al
f01008a2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01008a5:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f01008a6:	66 a1 cc a1 89 f0    	mov    0xf089a1cc,%ax
f01008ac:	66 c1 e8 08          	shr    $0x8,%ax
f01008b0:	0f b6 c0             	movzbl %al,%eax
f01008b3:	8b 15 c4 a1 89 f0    	mov    0xf089a1c4,%edx
f01008b9:	42                   	inc    %edx
f01008ba:	89 55 ec             	mov    %edx,-0x14(%ebp)
f01008bd:	88 45 e1             	mov    %al,-0x1f(%ebp)
f01008c0:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01008c3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01008c6:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f01008c7:	a1 c4 a1 89 f0       	mov    0xf089a1c4,%eax
f01008cc:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01008cf:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f01008d3:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01008d6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01008d9:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f01008da:	66 a1 cc a1 89 f0    	mov    0xf089a1cc,%ax
f01008e0:	0f b6 c0             	movzbl %al,%eax
f01008e3:	8b 15 c4 a1 89 f0    	mov    0xf089a1c4,%edx
f01008e9:	42                   	inc    %edx
f01008ea:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f01008ed:	88 45 e3             	mov    %al,-0x1d(%ebp)
f01008f0:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01008f3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01008f6:	ee                   	out    %al,(%dx)
}
f01008f7:	90                   	nop
f01008f8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01008fb:	c9                   	leave  
f01008fc:	c3                   	ret    

f01008fd <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f01008fd:	55                   	push   %ebp
f01008fe:	89 e5                	mov    %esp,%ebp
f0100900:	83 ec 28             	sub    $0x28,%esp
f0100903:	c7 45 e4 64 00 00 00 	movl   $0x64,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010090a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010090d:	89 c2                	mov    %eax,%edx
f010090f:	ec                   	in     (%dx),%al
f0100910:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100913:	8a 45 e3             	mov    -0x1d(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f0100916:	0f b6 c0             	movzbl %al,%eax
f0100919:	83 e0 01             	and    $0x1,%eax
f010091c:	85 c0                	test   %eax,%eax
f010091e:	75 0a                	jne    f010092a <kbd_proc_data+0x2d>
		return -1;
f0100920:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100925:	e9 54 01 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
f010092a:	c7 45 ec 60 00 00 00 	movl   $0x60,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100931:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100934:	89 c2                	mov    %eax,%edx
f0100936:	ec                   	in     (%dx),%al
f0100937:	88 45 e2             	mov    %al,-0x1e(%ebp)
	return data;
f010093a:	8a 45 e2             	mov    -0x1e(%ebp),%al

	data = inb(KBDATAP);
f010093d:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f0100940:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f0100944:	75 17                	jne    f010095d <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f0100946:	a1 e8 a3 89 f0       	mov    0xf089a3e8,%eax
f010094b:	83 c8 40             	or     $0x40,%eax
f010094e:	a3 e8 a3 89 f0       	mov    %eax,0xf089a3e8
		return 0;
f0100953:	b8 00 00 00 00       	mov    $0x0,%eax
f0100958:	e9 21 01 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
	} else if (data & 0x80) {
f010095d:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100960:	84 c0                	test   %al,%al
f0100962:	79 44                	jns    f01009a8 <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f0100964:	a1 e8 a3 89 f0       	mov    0xf089a3e8,%eax
f0100969:	83 e0 40             	and    $0x40,%eax
f010096c:	85 c0                	test   %eax,%eax
f010096e:	75 08                	jne    f0100978 <kbd_proc_data+0x7b>
f0100970:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100973:	83 e0 7f             	and    $0x7f,%eax
f0100976:	eb 03                	jmp    f010097b <kbd_proc_data+0x7e>
f0100978:	8a 45 f3             	mov    -0xd(%ebp),%al
f010097b:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f010097e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100982:	8a 80 20 30 19 f0    	mov    -0xfe6cfe0(%eax),%al
f0100988:	83 c8 40             	or     $0x40,%eax
f010098b:	0f b6 c0             	movzbl %al,%eax
f010098e:	f7 d0                	not    %eax
f0100990:	89 c2                	mov    %eax,%edx
f0100992:	a1 e8 a3 89 f0       	mov    0xf089a3e8,%eax
f0100997:	21 d0                	and    %edx,%eax
f0100999:	a3 e8 a3 89 f0       	mov    %eax,0xf089a3e8
		return 0;
f010099e:	b8 00 00 00 00       	mov    $0x0,%eax
f01009a3:	e9 d6 00 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
	} else if (shift & E0ESC) {
f01009a8:	a1 e8 a3 89 f0       	mov    0xf089a3e8,%eax
f01009ad:	83 e0 40             	and    $0x40,%eax
f01009b0:	85 c0                	test   %eax,%eax
f01009b2:	74 11                	je     f01009c5 <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f01009b4:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f01009b8:	a1 e8 a3 89 f0       	mov    0xf089a3e8,%eax
f01009bd:	83 e0 bf             	and    $0xffffffbf,%eax
f01009c0:	a3 e8 a3 89 f0       	mov    %eax,0xf089a3e8
	}

	shift |= shiftcode[data];
f01009c5:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009c9:	8a 80 20 30 19 f0    	mov    -0xfe6cfe0(%eax),%al
f01009cf:	0f b6 d0             	movzbl %al,%edx
f01009d2:	a1 e8 a3 89 f0       	mov    0xf089a3e8,%eax
f01009d7:	09 d0                	or     %edx,%eax
f01009d9:	a3 e8 a3 89 f0       	mov    %eax,0xf089a3e8
	shift ^= togglecode[data];
f01009de:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009e2:	8a 80 20 31 19 f0    	mov    -0xfe6cee0(%eax),%al
f01009e8:	0f b6 d0             	movzbl %al,%edx
f01009eb:	a1 e8 a3 89 f0       	mov    0xf089a3e8,%eax
f01009f0:	31 d0                	xor    %edx,%eax
f01009f2:	a3 e8 a3 89 f0       	mov    %eax,0xf089a3e8

	c = charcode[shift & (CTL | SHIFT)][data];
f01009f7:	a1 e8 a3 89 f0       	mov    0xf089a3e8,%eax
f01009fc:	83 e0 03             	and    $0x3,%eax
f01009ff:	8b 14 85 20 35 19 f0 	mov    -0xfe6cae0(,%eax,4),%edx
f0100a06:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a0a:	01 d0                	add    %edx,%eax
f0100a0c:	8a 00                	mov    (%eax),%al
f0100a0e:	0f b6 c0             	movzbl %al,%eax
f0100a11:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shift & CAPSLOCK) {
f0100a14:	a1 e8 a3 89 f0       	mov    0xf089a3e8,%eax
f0100a19:	83 e0 08             	and    $0x8,%eax
f0100a1c:	85 c0                	test   %eax,%eax
f0100a1e:	74 22                	je     f0100a42 <kbd_proc_data+0x145>
		if ('a' <= c && c <= 'z')
f0100a20:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100a24:	7e 0c                	jle    f0100a32 <kbd_proc_data+0x135>
f0100a26:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100a2a:	7f 06                	jg     f0100a32 <kbd_proc_data+0x135>
			c += 'A' - 'a';
f0100a2c:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f0100a30:	eb 10                	jmp    f0100a42 <kbd_proc_data+0x145>
		else if ('A' <= c && c <= 'Z')
f0100a32:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100a36:	7e 0a                	jle    f0100a42 <kbd_proc_data+0x145>
f0100a38:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f0100a3c:	7f 04                	jg     f0100a42 <kbd_proc_data+0x145>
			c += 'a' - 'A';
f0100a3e:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100a42:	a1 e8 a3 89 f0       	mov    0xf089a3e8,%eax
f0100a47:	f7 d0                	not    %eax
f0100a49:	83 e0 06             	and    $0x6,%eax
f0100a4c:	85 c0                	test   %eax,%eax
f0100a4e:	75 2b                	jne    f0100a7b <kbd_proc_data+0x17e>
f0100a50:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100a57:	75 22                	jne    f0100a7b <kbd_proc_data+0x17e>
		cprintf("Rebooting!\n");
f0100a59:	83 ec 0c             	sub    $0xc,%esp
f0100a5c:	68 fd 3c 13 f0       	push   $0xf0133cfd
f0100a61:	e8 a8 02 00 00       	call   f0100d0e <cprintf>
f0100a66:	83 c4 10             	add    $0x10,%esp
f0100a69:	c7 45 e8 92 00 00 00 	movl   $0x92,-0x18(%ebp)
f0100a70:	c6 45 e1 03          	movb   $0x3,-0x1f(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100a74:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100a77:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100a7a:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f0100a7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100a7e:	c9                   	leave  
f0100a7f:	c3                   	ret    

f0100a80 <kbd_intr>:

void
kbd_intr(void)
{
f0100a80:	55                   	push   %ebp
f0100a81:	89 e5                	mov    %esp,%ebp
f0100a83:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f0100a86:	83 ec 0c             	sub    $0xc,%esp
f0100a89:	68 fd 08 10 f0       	push   $0xf01008fd
f0100a8e:	e8 0c 00 00 00       	call   f0100a9f <cons_intr>
f0100a93:	83 c4 10             	add    $0x10,%esp
}
f0100a96:	90                   	nop
f0100a97:	c9                   	leave  
f0100a98:	c3                   	ret    

f0100a99 <kbd_init>:

void
kbd_init(void)
{
f0100a99:	55                   	push   %ebp
f0100a9a:	89 e5                	mov    %esp,%ebp
}
f0100a9c:	90                   	nop
f0100a9d:	5d                   	pop    %ebp
f0100a9e:	c3                   	ret    

f0100a9f <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f0100a9f:	55                   	push   %ebp
f0100aa0:	89 e5                	mov    %esp,%ebp
f0100aa2:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f0100aa5:	eb 35                	jmp    f0100adc <cons_intr+0x3d>
		if (c == 0)
f0100aa7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100aab:	75 02                	jne    f0100aaf <cons_intr+0x10>
			continue;
f0100aad:	eb 2d                	jmp    f0100adc <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f0100aaf:	a1 e4 a3 89 f0       	mov    0xf089a3e4,%eax
f0100ab4:	8d 50 01             	lea    0x1(%eax),%edx
f0100ab7:	89 15 e4 a3 89 f0    	mov    %edx,0xf089a3e4
f0100abd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100ac0:	88 90 e0 a1 89 f0    	mov    %dl,-0xf765e20(%eax)
		if (cons.wpos == CONSBUFSIZE)
f0100ac6:	a1 e4 a3 89 f0       	mov    0xf089a3e4,%eax
f0100acb:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100ad0:	75 0a                	jne    f0100adc <cons_intr+0x3d>
			cons.wpos = 0;
f0100ad2:	c7 05 e4 a3 89 f0 00 	movl   $0x0,0xf089a3e4
f0100ad9:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f0100adc:	8b 45 08             	mov    0x8(%ebp),%eax
f0100adf:	ff d0                	call   *%eax
f0100ae1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100ae4:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100ae8:	75 bd                	jne    f0100aa7 <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100aea:	90                   	nop
f0100aeb:	c9                   	leave  
f0100aec:	c3                   	ret    

f0100aed <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100aed:	55                   	push   %ebp
f0100aee:	89 e5                	mov    %esp,%ebp
f0100af0:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100af3:	e8 a7 f9 ff ff       	call   f010049f <serial_intr>
	kbd_intr();
f0100af8:	e8 83 ff ff ff       	call   f0100a80 <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100afd:	8b 15 e0 a3 89 f0    	mov    0xf089a3e0,%edx
f0100b03:	a1 e4 a3 89 f0       	mov    0xf089a3e4,%eax
f0100b08:	39 c2                	cmp    %eax,%edx
f0100b0a:	74 35                	je     f0100b41 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100b0c:	a1 e0 a3 89 f0       	mov    0xf089a3e0,%eax
f0100b11:	8d 50 01             	lea    0x1(%eax),%edx
f0100b14:	89 15 e0 a3 89 f0    	mov    %edx,0xf089a3e0
f0100b1a:	8a 80 e0 a1 89 f0    	mov    -0xf765e20(%eax),%al
f0100b20:	0f b6 c0             	movzbl %al,%eax
f0100b23:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100b26:	a1 e0 a3 89 f0       	mov    0xf089a3e0,%eax
f0100b2b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b30:	75 0a                	jne    f0100b3c <cons_getc+0x4f>
			cons.rpos = 0;
f0100b32:	c7 05 e0 a3 89 f0 00 	movl   $0x0,0xf089a3e0
f0100b39:	00 00 00 
		return c;
f0100b3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100b3f:	eb 05                	jmp    f0100b46 <cons_getc+0x59>
	}
	return 0;
f0100b41:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100b46:	c9                   	leave  
f0100b47:	c3                   	ret    

f0100b48 <cons_getc2>:
// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100b48:	55                   	push   %ebp
f0100b49:	89 e5                	mov    %esp,%ebp
f0100b4b:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100b4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100b55:	a1 c0 a1 89 f0       	mov    0xf089a1c0,%eax
f0100b5a:	85 c0                	test   %eax,%eax
f0100b5c:	74 41                	je     f0100b9f <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100b5e:	e8 fa f8 ff ff       	call   f010045d <serial_proc_data>
f0100b63:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100b66:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100b6a:	74 33                	je     f0100b9f <cons_getc2+0x57>
				if (c1 == 0)
f0100b6c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100b70:	74 2d                	je     f0100b9f <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100b72:	a1 e4 a3 89 f0       	mov    0xf089a3e4,%eax
f0100b77:	8d 50 01             	lea    0x1(%eax),%edx
f0100b7a:	89 15 e4 a3 89 f0    	mov    %edx,0xf089a3e4
f0100b80:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100b83:	88 90 e0 a1 89 f0    	mov    %dl,-0xf765e20(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100b89:	a1 e4 a3 89 f0       	mov    0xf089a3e4,%eax
f0100b8e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b93:	75 0a                	jne    f0100b9f <cons_getc2+0x57>
						cons.wpos = 0;
f0100b95:	c7 05 e4 a3 89 f0 00 	movl   $0x0,0xf089a3e4
f0100b9c:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100b9f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100ba6:	e8 52 fd ff ff       	call   f01008fd <kbd_proc_data>
f0100bab:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100bae:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100bb2:	74 33                	je     f0100be7 <cons_getc2+0x9f>
			if (c2 == 0)
f0100bb4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100bb8:	74 2d                	je     f0100be7 <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100bba:	a1 e4 a3 89 f0       	mov    0xf089a3e4,%eax
f0100bbf:	8d 50 01             	lea    0x1(%eax),%edx
f0100bc2:	89 15 e4 a3 89 f0    	mov    %edx,0xf089a3e4
f0100bc8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100bcb:	88 90 e0 a1 89 f0    	mov    %dl,-0xf765e20(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100bd1:	a1 e4 a3 89 f0       	mov    0xf089a3e4,%eax
f0100bd6:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100bdb:	75 0a                	jne    f0100be7 <cons_getc2+0x9f>
					cons.wpos = 0;
f0100bdd:	c7 05 e4 a3 89 f0 00 	movl   $0x0,0xf089a3e4
f0100be4:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100be7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100beb:	7e 44                	jle    f0100c31 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100bed:	8b 15 e0 a3 89 f0    	mov    0xf089a3e0,%edx
f0100bf3:	a1 e4 a3 89 f0       	mov    0xf089a3e4,%eax
f0100bf8:	39 c2                	cmp    %eax,%edx
f0100bfa:	74 35                	je     f0100c31 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100bfc:	a1 e0 a3 89 f0       	mov    0xf089a3e0,%eax
f0100c01:	8d 50 01             	lea    0x1(%eax),%edx
f0100c04:	89 15 e0 a3 89 f0    	mov    %edx,0xf089a3e0
f0100c0a:	8a 80 e0 a1 89 f0    	mov    -0xf765e20(%eax),%al
f0100c10:	0f b6 c0             	movzbl %al,%eax
f0100c13:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100c16:	a1 e0 a3 89 f0       	mov    0xf089a3e0,%eax
f0100c1b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100c20:	75 0a                	jne    f0100c2c <cons_getc2+0xe4>
				cons.rpos = 0;
f0100c22:	c7 05 e0 a3 89 f0 00 	movl   $0x0,0xf089a3e0
f0100c29:	00 00 00 
			return c;
f0100c2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100c2f:	eb 05                	jmp    f0100c36 <cons_getc2+0xee>
		}
	}
	return 0;
f0100c31:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100c36:	c9                   	leave  
f0100c37:	c3                   	ret    

f0100c38 <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100c38:	55                   	push   %ebp
f0100c39:	89 e5                	mov    %esp,%ebp
f0100c3b:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100c3e:	ff 75 08             	pushl  0x8(%ebp)
f0100c41:	e8 8b f9 ff ff       	call   f01005d1 <lpt_putc>
f0100c46:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100c49:	83 ec 0c             	sub    $0xc,%esp
f0100c4c:	ff 75 08             	pushl  0x8(%ebp)
f0100c4f:	e8 b7 fa ff ff       	call   f010070b <cga_putc>
f0100c54:	83 c4 10             	add    $0x10,%esp
}
f0100c57:	90                   	nop
f0100c58:	c9                   	leave  
f0100c59:	c3                   	ret    

f0100c5a <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100c5a:	55                   	push   %ebp
f0100c5b:	89 e5                	mov    %esp,%ebp
f0100c5d:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100c60:	e8 e1 f9 ff ff       	call   f0100646 <cga_init>
	kbd_init();
f0100c65:	e8 2f fe ff ff       	call   f0100a99 <kbd_init>
	serial_init();
f0100c6a:	e8 52 f8 ff ff       	call   f01004c1 <serial_init>

	if (!serial_exists)
f0100c6f:	a1 c0 a1 89 f0       	mov    0xf089a1c0,%eax
f0100c74:	85 c0                	test   %eax,%eax
f0100c76:	75 10                	jne    f0100c88 <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100c78:	83 ec 0c             	sub    $0xc,%esp
f0100c7b:	68 09 3d 13 f0       	push   $0xf0133d09
f0100c80:	e8 89 00 00 00       	call   f0100d0e <cprintf>
f0100c85:	83 c4 10             	add    $0x10,%esp
}
f0100c88:	90                   	nop
f0100c89:	c9                   	leave  
f0100c8a:	c3                   	ret    

f0100c8b <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100c8b:	55                   	push   %ebp
f0100c8c:	89 e5                	mov    %esp,%ebp
f0100c8e:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100c91:	83 ec 0c             	sub    $0xc,%esp
f0100c94:	ff 75 08             	pushl  0x8(%ebp)
f0100c97:	e8 9c ff ff ff       	call   f0100c38 <cons_putc>
f0100c9c:	83 c4 10             	add    $0x10,%esp
}
f0100c9f:	90                   	nop
f0100ca0:	c9                   	leave  
f0100ca1:	c3                   	ret    

f0100ca2 <getchar>:

int
getchar(void)
{
f0100ca2:	55                   	push   %ebp
f0100ca3:	89 e5                	mov    %esp,%ebp
f0100ca5:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100ca8:	e8 40 fe ff ff       	call   f0100aed <cons_getc>
f0100cad:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100cb0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100cb4:	74 f2                	je     f0100ca8 <getchar+0x6>
		/* do nothing */;
	return c;
f0100cb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100cb9:	c9                   	leave  
f0100cba:	c3                   	ret    

f0100cbb <iscons>:

int
iscons(int fdnum)
{
f0100cbb:	55                   	push   %ebp
f0100cbc:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100cbe:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100cc3:	5d                   	pop    %ebp
f0100cc4:	c3                   	ret    

f0100cc5 <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f0100cc5:	55                   	push   %ebp
f0100cc6:	89 e5                	mov    %esp,%ebp
f0100cc8:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100ccb:	83 ec 0c             	sub    $0xc,%esp
f0100cce:	ff 75 08             	pushl  0x8(%ebp)
f0100cd1:	e8 b5 ff ff ff       	call   f0100c8b <cputchar>
f0100cd6:	83 c4 10             	add    $0x10,%esp
	*cnt++;
f0100cd9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100cdc:	83 c0 04             	add    $0x4,%eax
f0100cdf:	89 45 0c             	mov    %eax,0xc(%ebp)
}
f0100ce2:	90                   	nop
f0100ce3:	c9                   	leave  
f0100ce4:	c3                   	ret    

f0100ce5 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100ce5:	55                   	push   %ebp
f0100ce6:	89 e5                	mov    %esp,%ebp
f0100ce8:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100ceb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100cf2:	ff 75 0c             	pushl  0xc(%ebp)
f0100cf5:	ff 75 08             	pushl  0x8(%ebp)
f0100cf8:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100cfb:	50                   	push   %eax
f0100cfc:	68 c5 0c 10 f0       	push   $0xf0100cc5
f0100d01:	e8 2f 05 03 00       	call   f0131235 <vprintfmt>
f0100d06:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100d09:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100d0c:	c9                   	leave  
f0100d0d:	c3                   	ret    

f0100d0e <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100d0e:	55                   	push   %ebp
f0100d0f:	89 e5                	mov    %esp,%ebp
f0100d11:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0100d14:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100d17:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0100d1a:	8b 45 08             	mov    0x8(%ebp),%eax
f0100d1d:	83 ec 08             	sub    $0x8,%esp
f0100d20:	ff 75 f4             	pushl  -0xc(%ebp)
f0100d23:	50                   	push   %eax
f0100d24:	e8 bc ff ff ff       	call   f0100ce5 <vcprintf>
f0100d29:	83 c4 10             	add    $0x10,%esp
f0100d2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0100d2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100d32:	c9                   	leave  
f0100d33:	c3                   	ret    

f0100d34 <run_command_prompt>:

//TODO: [PROJECT MS1] [COMMAND PROMPT] auto-complete

//invoke the command prompt
void run_command_prompt()
{
f0100d34:	55                   	push   %ebp
f0100d35:	89 e5                	mov    %esp,%ebp
f0100d37:	81 ec 08 04 00 00    	sub    $0x408,%esp
	char command_line[1024];

	while (1==1)
	{
		//get command line
		readline("FOS> ", command_line);
f0100d3d:	83 ec 08             	sub    $0x8,%esp
f0100d40:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100d46:	50                   	push   %eax
f0100d47:	68 26 3d 13 f0       	push   $0xf0133d26
f0100d4c:	e8 8c 09 03 00       	call   f01316dd <readline>
f0100d51:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0100d54:	83 ec 0c             	sub    $0xc,%esp
f0100d57:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100d5d:	50                   	push   %eax
f0100d5e:	e8 0d 00 00 00       	call   f0100d70 <execute_command>
f0100d63:	83 c4 10             	add    $0x10,%esp
f0100d66:	85 c0                	test   %eax,%eax
f0100d68:	78 02                	js     f0100d6c <run_command_prompt+0x38>
				break;
	}
f0100d6a:	eb d1                	jmp    f0100d3d <run_command_prompt+0x9>
		readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0100d6c:	90                   	nop
	}
}
f0100d6d:	90                   	nop
f0100d6e:	c9                   	leave  
f0100d6f:	c3                   	ret    

f0100d70 <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0100d70:	55                   	push   %ebp
f0100d71:	89 e5                	mov    %esp,%ebp
f0100d73:	81 ec a8 00 00 00    	sub    $0xa8,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];
	char *auto_fun[MAX_ARGUMENTS];

	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0100d79:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0100d7c:	50                   	push   %eax
f0100d7d:	8d 45 a0             	lea    -0x60(%ebp),%eax
f0100d80:	50                   	push   %eax
f0100d81:	68 2c 3d 13 f0       	push   $0xf0133d2c
f0100d86:	ff 75 08             	pushl  0x8(%ebp)
f0100d89:	e8 89 11 03 00       	call   f0131f17 <strsplit>
f0100d8e:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0100d91:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0100d94:	85 c0                	test   %eax,%eax
f0100d96:	75 0a                	jne    f0100da2 <execute_command+0x32>
		return 0;
f0100d98:	b8 00 00 00 00       	mov    $0x0,%eax
f0100d9d:	e9 37 01 00 00       	jmp    f0100ed9 <execute_command+0x169>

	// Lookup in the commands array and execute the command
	int command_found = 0;
f0100da2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int i ;
	int count = 0;
f0100da9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100db0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0100db7:	e9 8c 00 00 00       	jmp    f0100e48 <execute_command+0xd8>
	{
		if (strcmp(arguments[0], commands[i].name) == 0)
f0100dbc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100dbf:	89 d0                	mov    %edx,%eax
f0100dc1:	01 c0                	add    %eax,%eax
f0100dc3:	01 d0                	add    %edx,%eax
f0100dc5:	c1 e0 02             	shl    $0x2,%eax
f0100dc8:	05 40 35 19 f0       	add    $0xf0193540,%eax
f0100dcd:	8b 10                	mov    (%eax),%edx
f0100dcf:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100dd2:	83 ec 08             	sub    $0x8,%esp
f0100dd5:	52                   	push   %edx
f0100dd6:	50                   	push   %eax
f0100dd7:	e8 13 0c 03 00       	call   f01319ef <strcmp>
f0100ddc:	83 c4 10             	add    $0x10,%esp
f0100ddf:	85 c0                	test   %eax,%eax
f0100de1:	75 09                	jne    f0100dec <execute_command+0x7c>
		{
			command_found = 1;
f0100de3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
			break;
f0100dea:	eb 6c                	jmp    f0100e58 <execute_command+0xe8>
		}
		else if (strncmp(arguments[0], commands[i].name,strlen(arguments[0])) == 0)
f0100dec:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100def:	83 ec 0c             	sub    $0xc,%esp
f0100df2:	50                   	push   %eax
f0100df3:	e8 eb 0a 03 00       	call   f01318e3 <strlen>
f0100df8:	83 c4 10             	add    $0x10,%esp
f0100dfb:	89 c1                	mov    %eax,%ecx
f0100dfd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e00:	89 d0                	mov    %edx,%eax
f0100e02:	01 c0                	add    %eax,%eax
f0100e04:	01 d0                	add    %edx,%eax
f0100e06:	c1 e0 02             	shl    $0x2,%eax
f0100e09:	05 40 35 19 f0       	add    $0xf0193540,%eax
f0100e0e:	8b 10                	mov    (%eax),%edx
f0100e10:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100e13:	83 ec 04             	sub    $0x4,%esp
f0100e16:	51                   	push   %ecx
f0100e17:	52                   	push   %edx
f0100e18:	50                   	push   %eax
f0100e19:	e8 09 0c 03 00       	call   f0131a27 <strncmp>
f0100e1e:	83 c4 10             	add    $0x10,%esp
f0100e21:	85 c0                	test   %eax,%eax
f0100e23:	75 20                	jne    f0100e45 <execute_command+0xd5>
		{
			auto_fun[count] = commands[i].name;
f0100e25:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e28:	89 d0                	mov    %edx,%eax
f0100e2a:	01 c0                	add    %eax,%eax
f0100e2c:	01 d0                	add    %edx,%eax
f0100e2e:	c1 e0 02             	shl    $0x2,%eax
f0100e31:	05 40 35 19 f0       	add    $0xf0193540,%eax
f0100e36:	8b 10                	mov    (%eax),%edx
f0100e38:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100e3b:	89 94 85 60 ff ff ff 	mov    %edx,-0xa0(%ebp,%eax,4)
			count++;
f0100e42:	ff 45 ec             	incl   -0x14(%ebp)

	// Lookup in the commands array and execute the command
	int command_found = 0;
	int i ;
	int count = 0;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100e45:	ff 45 f0             	incl   -0x10(%ebp)
f0100e48:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e4b:	a1 ac 38 19 f0       	mov    0xf01938ac,%eax
f0100e50:	39 c2                	cmp    %eax,%edx
f0100e52:	0f 82 64 ff ff ff    	jb     f0100dbc <execute_command+0x4c>
			auto_fun[count] = commands[i].name;
			count++;
		}
	}

	if(command_found)
f0100e58:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100e5c:	74 2b                	je     f0100e89 <execute_command+0x119>
	{
		int return_value;
		return_value = commands[i].function_to_execute(number_of_arguments, arguments);
f0100e5e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e61:	89 d0                	mov    %edx,%eax
f0100e63:	01 c0                	add    %eax,%eax
f0100e65:	01 d0                	add    %edx,%eax
f0100e67:	c1 e0 02             	shl    $0x2,%eax
f0100e6a:	05 48 35 19 f0       	add    $0xf0193548,%eax
f0100e6f:	8b 00                	mov    (%eax),%eax
f0100e71:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0100e74:	83 ec 08             	sub    $0x8,%esp
f0100e77:	8d 4d a0             	lea    -0x60(%ebp),%ecx
f0100e7a:	51                   	push   %ecx
f0100e7b:	52                   	push   %edx
f0100e7c:	ff d0                	call   *%eax
f0100e7e:	83 c4 10             	add    $0x10,%esp
f0100e81:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		return return_value;
f0100e84:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100e87:	eb 50                	jmp    f0100ed9 <execute_command+0x169>
	}
	else if (count == 0)
f0100e89:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0100e8d:	75 16                	jne    f0100ea5 <execute_command+0x135>
	{
		//if not found, then it's unknown command
		cprintf("Unknown command '%s'\n", arguments[0]);
f0100e8f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100e92:	83 ec 08             	sub    $0x8,%esp
f0100e95:	50                   	push   %eax
f0100e96:	68 31 3d 13 f0       	push   $0xf0133d31
f0100e9b:	e8 6e fe ff ff       	call   f0100d0e <cprintf>
f0100ea0:	83 c4 10             	add    $0x10,%esp
f0100ea3:	eb 2f                	jmp    f0100ed4 <execute_command+0x164>
	}
	else
	{
		int loop;
		for(loop = 0; loop < count; loop++)
f0100ea5:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0100eac:	eb 1e                	jmp    f0100ecc <execute_command+0x15c>
			cprintf("%s\n", auto_fun[loop]);
f0100eae:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100eb1:	8b 84 85 60 ff ff ff 	mov    -0xa0(%ebp,%eax,4),%eax
f0100eb8:	83 ec 08             	sub    $0x8,%esp
f0100ebb:	50                   	push   %eax
f0100ebc:	68 47 3d 13 f0       	push   $0xf0133d47
f0100ec1:	e8 48 fe ff ff       	call   f0100d0e <cprintf>
f0100ec6:	83 c4 10             	add    $0x10,%esp
		cprintf("Unknown command '%s'\n", arguments[0]);
	}
	else
	{
		int loop;
		for(loop = 0; loop < count; loop++)
f0100ec9:	ff 45 e8             	incl   -0x18(%ebp)
f0100ecc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100ecf:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0100ed2:	7c da                	jl     f0100eae <execute_command+0x13e>
			cprintf("%s\n", auto_fun[loop]);
	}
	return 0;
f0100ed4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100ed9:	c9                   	leave  
f0100eda:	c3                   	ret    

f0100edb <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0100edb:	55                   	push   %ebp
f0100edc:	89 e5                	mov    %esp,%ebp
f0100ede:	c7 05 5c ad 89 f0 00 	movl   $0x0,0xf089ad5c
f0100ee5:	00 00 00 
f0100ee8:	90                   	nop
f0100ee9:	5d                   	pop    %ebp
f0100eea:	c3                   	ret    

f0100eeb <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0100eeb:	55                   	push   %ebp
f0100eec:	89 e5                	mov    %esp,%ebp
f0100eee:	c7 05 5c ad 89 f0 01 	movl   $0x1,0xf089ad5c
f0100ef5:	00 00 00 
f0100ef8:	90                   	nop
f0100ef9:	5d                   	pop    %ebp
f0100efa:	c3                   	ret    

f0100efb <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0100efb:	55                   	push   %ebp
f0100efc:	89 e5                	mov    %esp,%ebp
f0100efe:	c7 05 5c ad 89 f0 02 	movl   $0x2,0xf089ad5c
f0100f05:	00 00 00 
f0100f08:	90                   	nop
f0100f09:	5d                   	pop    %ebp
f0100f0a:	c3                   	ret    

f0100f0b <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0100f0b:	55                   	push   %ebp
f0100f0c:	89 e5                	mov    %esp,%ebp
f0100f0e:	c7 05 5c ad 89 f0 03 	movl   $0x3,0xf089ad5c
f0100f15:	00 00 00 
f0100f18:	90                   	nop
f0100f19:	5d                   	pop    %ebp
f0100f1a:	c3                   	ret    

f0100f1b <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0100f1b:	55                   	push   %ebp
f0100f1c:	89 e5                	mov    %esp,%ebp
f0100f1e:	c7 05 5c ad 89 f0 04 	movl   $0x4,0xf089ad5c
f0100f25:	00 00 00 
f0100f28:	90                   	nop
f0100f29:	5d                   	pop    %ebp
f0100f2a:	c3                   	ret    

f0100f2b <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0100f2b:	55                   	push   %ebp
f0100f2c:	89 e5                	mov    %esp,%ebp
f0100f2e:	a1 5c ad 89 f0       	mov    0xf089ad5c,%eax
f0100f33:	85 c0                	test   %eax,%eax
f0100f35:	75 04                	jne    f0100f3b <isKHeapPlacementStrategyCONTALLOC+0x10>
f0100f37:	b0 01                	mov    $0x1,%al
f0100f39:	eb 02                	jmp    f0100f3d <isKHeapPlacementStrategyCONTALLOC+0x12>
f0100f3b:	b0 00                	mov    $0x0,%al
f0100f3d:	5d                   	pop    %ebp
f0100f3e:	c3                   	ret    

f0100f3f <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100f3f:	55                   	push   %ebp
f0100f40:	89 e5                	mov    %esp,%ebp
f0100f42:	a1 5c ad 89 f0       	mov    0xf089ad5c,%eax
f0100f47:	83 f8 01             	cmp    $0x1,%eax
f0100f4a:	75 04                	jne    f0100f50 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0100f4c:	b0 01                	mov    $0x1,%al
f0100f4e:	eb 02                	jmp    f0100f52 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0100f50:	b0 00                	mov    $0x0,%al
f0100f52:	5d                   	pop    %ebp
f0100f53:	c3                   	ret    

f0100f54 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0100f54:	55                   	push   %ebp
f0100f55:	89 e5                	mov    %esp,%ebp
f0100f57:	a1 5c ad 89 f0       	mov    0xf089ad5c,%eax
f0100f5c:	83 f8 02             	cmp    $0x2,%eax
f0100f5f:	75 04                	jne    f0100f65 <isKHeapPlacementStrategyBESTFIT+0x11>
f0100f61:	b0 01                	mov    $0x1,%al
f0100f63:	eb 02                	jmp    f0100f67 <isKHeapPlacementStrategyBESTFIT+0x13>
f0100f65:	b0 00                	mov    $0x0,%al
f0100f67:	5d                   	pop    %ebp
f0100f68:	c3                   	ret    

f0100f69 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0100f69:	55                   	push   %ebp
f0100f6a:	89 e5                	mov    %esp,%ebp
f0100f6c:	a1 5c ad 89 f0       	mov    0xf089ad5c,%eax
f0100f71:	83 f8 03             	cmp    $0x3,%eax
f0100f74:	75 04                	jne    f0100f7a <isKHeapPlacementStrategyNEXTFIT+0x11>
f0100f76:	b0 01                	mov    $0x1,%al
f0100f78:	eb 02                	jmp    f0100f7c <isKHeapPlacementStrategyNEXTFIT+0x13>
f0100f7a:	b0 00                	mov    $0x0,%al
f0100f7c:	5d                   	pop    %ebp
f0100f7d:	c3                   	ret    

f0100f7e <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f0100f7e:	55                   	push   %ebp
f0100f7f:	89 e5                	mov    %esp,%ebp
f0100f81:	a1 5c ad 89 f0       	mov    0xf089ad5c,%eax
f0100f86:	83 f8 04             	cmp    $0x4,%eax
f0100f89:	75 04                	jne    f0100f8f <isKHeapPlacementStrategyWORSTFIT+0x11>
f0100f8b:	b0 01                	mov    $0x1,%al
f0100f8d:	eb 02                	jmp    f0100f91 <isKHeapPlacementStrategyWORSTFIT+0x13>
f0100f8f:	b0 00                	mov    $0x0,%al
f0100f91:	5d                   	pop    %ebp
f0100f92:	c3                   	ret    

f0100f93 <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f0100f93:	55                   	push   %ebp
f0100f94:	89 e5                	mov    %esp,%ebp
f0100f96:	c7 05 30 ad 89 f0 01 	movl   $0x1,0xf089ad30
f0100f9d:	00 00 00 
f0100fa0:	90                   	nop
f0100fa1:	5d                   	pop    %ebp
f0100fa2:	c3                   	ret    

f0100fa3 <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f0100fa3:	55                   	push   %ebp
f0100fa4:	89 e5                	mov    %esp,%ebp
f0100fa6:	c7 05 30 ad 89 f0 02 	movl   $0x2,0xf089ad30
f0100fad:	00 00 00 
f0100fb0:	90                   	nop
f0100fb1:	5d                   	pop    %ebp
f0100fb2:	c3                   	ret    

f0100fb3 <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f0100fb3:	55                   	push   %ebp
f0100fb4:	89 e5                	mov    %esp,%ebp
f0100fb6:	c7 05 30 ad 89 f0 03 	movl   $0x3,0xf089ad30
f0100fbd:	00 00 00 
f0100fc0:	90                   	nop
f0100fc1:	5d                   	pop    %ebp
f0100fc2:	c3                   	ret    

f0100fc3 <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f0100fc3:	55                   	push   %ebp
f0100fc4:	89 e5                	mov    %esp,%ebp
f0100fc6:	c7 05 30 ad 89 f0 04 	movl   $0x4,0xf089ad30
f0100fcd:	00 00 00 
f0100fd0:	90                   	nop
f0100fd1:	5d                   	pop    %ebp
f0100fd2:	c3                   	ret    

f0100fd3 <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100fd3:	55                   	push   %ebp
f0100fd4:	89 e5                	mov    %esp,%ebp
f0100fd6:	a1 30 ad 89 f0       	mov    0xf089ad30,%eax
f0100fdb:	83 f8 01             	cmp    $0x1,%eax
f0100fde:	75 04                	jne    f0100fe4 <isUHeapPlacementStrategyFIRSTFIT+0x11>
f0100fe0:	b0 01                	mov    $0x1,%al
f0100fe2:	eb 02                	jmp    f0100fe6 <isUHeapPlacementStrategyFIRSTFIT+0x13>
f0100fe4:	b0 00                	mov    $0x0,%al
f0100fe6:	5d                   	pop    %ebp
f0100fe7:	c3                   	ret    

f0100fe8 <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f0100fe8:	55                   	push   %ebp
f0100fe9:	89 e5                	mov    %esp,%ebp
f0100feb:	a1 30 ad 89 f0       	mov    0xf089ad30,%eax
f0100ff0:	83 f8 02             	cmp    $0x2,%eax
f0100ff3:	75 04                	jne    f0100ff9 <isUHeapPlacementStrategyBESTFIT+0x11>
f0100ff5:	b0 01                	mov    $0x1,%al
f0100ff7:	eb 02                	jmp    f0100ffb <isUHeapPlacementStrategyBESTFIT+0x13>
f0100ff9:	b0 00                	mov    $0x0,%al
f0100ffb:	5d                   	pop    %ebp
f0100ffc:	c3                   	ret    

f0100ffd <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0100ffd:	55                   	push   %ebp
f0100ffe:	89 e5                	mov    %esp,%ebp
f0101000:	a1 30 ad 89 f0       	mov    0xf089ad30,%eax
f0101005:	83 f8 03             	cmp    $0x3,%eax
f0101008:	75 04                	jne    f010100e <isUHeapPlacementStrategyNEXTFIT+0x11>
f010100a:	b0 01                	mov    $0x1,%al
f010100c:	eb 02                	jmp    f0101010 <isUHeapPlacementStrategyNEXTFIT+0x13>
f010100e:	b0 00                	mov    $0x0,%al
f0101010:	5d                   	pop    %ebp
f0101011:	c3                   	ret    

f0101012 <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f0101012:	55                   	push   %ebp
f0101013:	89 e5                	mov    %esp,%ebp
f0101015:	a1 30 ad 89 f0       	mov    0xf089ad30,%eax
f010101a:	83 f8 04             	cmp    $0x4,%eax
f010101d:	75 04                	jne    f0101023 <isUHeapPlacementStrategyWORSTFIT+0x11>
f010101f:	b0 01                	mov    $0x1,%al
f0101021:	eb 02                	jmp    f0101025 <isUHeapPlacementStrategyWORSTFIT+0x13>
f0101023:	b0 00                	mov    $0x0,%al
f0101025:	5d                   	pop    %ebp
f0101026:	c3                   	ret    

f0101027 <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0101027:	55                   	push   %ebp
f0101028:	89 e5                	mov    %esp,%ebp
f010102a:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f010102d:	8b 45 08             	mov    0x8(%ebp),%eax
f0101030:	c1 e8 0c             	shr    $0xc,%eax
f0101033:	89 c2                	mov    %eax,%edx
f0101035:	a1 10 ad 89 f0       	mov    0xf089ad10,%eax
f010103a:	39 c2                	cmp    %eax,%edx
f010103c:	72 14                	jb     f0101052 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f010103e:	83 ec 04             	sub    $0x4,%esp
f0101041:	68 4c 3d 13 f0       	push   $0xf0133d4c
f0101046:	6a 55                	push   $0x55
f0101048:	68 74 3d 13 f0       	push   $0xf0133d74
f010104d:	e8 b3 f1 ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f0101052:	8b 15 54 ad 89 f0    	mov    0xf089ad54,%edx
f0101058:	8b 45 08             	mov    0x8(%ebp),%eax
f010105b:	c1 e8 0c             	shr    $0xc,%eax
f010105e:	89 c1                	mov    %eax,%ecx
f0101060:	89 c8                	mov    %ecx,%eax
f0101062:	01 c0                	add    %eax,%eax
f0101064:	01 c8                	add    %ecx,%eax
f0101066:	c1 e0 03             	shl    $0x3,%eax
f0101069:	01 d0                	add    %edx,%eax
}
f010106b:	c9                   	leave  
f010106c:	c3                   	ret    

f010106d <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f010106d:	55                   	push   %ebp
f010106e:	89 e5                	mov    %esp,%ebp
f0101070:	53                   	push   %ebx
f0101071:	83 ec 14             	sub    $0x14,%esp
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0101074:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010107b:	eb 3b                	jmp    f01010b8 <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f010107d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101080:	89 d0                	mov    %edx,%eax
f0101082:	01 c0                	add    %eax,%eax
f0101084:	01 d0                	add    %edx,%eax
f0101086:	c1 e0 02             	shl    $0x2,%eax
f0101089:	05 44 35 19 f0       	add    $0xf0193544,%eax
f010108e:	8b 10                	mov    (%eax),%edx
f0101090:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101093:	89 c8                	mov    %ecx,%eax
f0101095:	01 c0                	add    %eax,%eax
f0101097:	01 c8                	add    %ecx,%eax
f0101099:	c1 e0 02             	shl    $0x2,%eax
f010109c:	05 40 35 19 f0       	add    $0xf0193540,%eax
f01010a1:	8b 00                	mov    (%eax),%eax
f01010a3:	83 ec 04             	sub    $0x4,%esp
f01010a6:	52                   	push   %edx
f01010a7:	50                   	push   %eax
f01010a8:	68 ee 4b 13 f0       	push   $0xf0134bee
f01010ad:	e8 5c fc ff ff       	call   f0100d0e <cprintf>
f01010b2:	83 c4 10             	add    $0x10,%esp

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f01010b5:	ff 45 f4             	incl   -0xc(%ebp)
f01010b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01010bb:	a1 ac 38 19 f0       	mov    0xf01938ac,%eax
f01010c0:	39 c2                	cmp    %eax,%edx
f01010c2:	72 b9                	jb     f010107d <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f01010c4:	83 ec 0c             	sub    $0xc,%esp
f01010c7:	68 f7 4b 13 f0       	push   $0xf0134bf7
f01010cc:	e8 3d fc ff ff       	call   f0100d0e <cprintf>
f01010d1:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f01010d4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01010db:	eb 42                	jmp    f010111f <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f01010dd:	8b 0d 14 3d 19 f0    	mov    0xf0193d14,%ecx
f01010e3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01010e6:	89 d0                	mov    %edx,%eax
f01010e8:	01 c0                	add    %eax,%eax
f01010ea:	01 d0                	add    %edx,%eax
f01010ec:	c1 e0 02             	shl    $0x2,%eax
f01010ef:	01 c8                	add    %ecx,%eax
f01010f1:	8b 50 04             	mov    0x4(%eax),%edx
f01010f4:	8b 1d 14 3d 19 f0    	mov    0xf0193d14,%ebx
f01010fa:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01010fd:	89 c8                	mov    %ecx,%eax
f01010ff:	01 c0                	add    %eax,%eax
f0101101:	01 c8                	add    %ecx,%eax
f0101103:	c1 e0 02             	shl    $0x2,%eax
f0101106:	01 d8                	add    %ebx,%eax
f0101108:	8b 00                	mov    (%eax),%eax
f010110a:	83 ec 04             	sub    $0x4,%esp
f010110d:	52                   	push   %edx
f010110e:	50                   	push   %eax
f010110f:	68 0c 4c 13 f0       	push   $0xf0134c0c
f0101114:	e8 f5 fb ff ff       	call   f0100d0e <cprintf>
f0101119:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f010111c:	ff 45 f4             	incl   -0xc(%ebp)
f010111f:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f0101124:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0101127:	7c b4                	jl     f01010dd <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f0101129:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010112e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0101131:	c9                   	leave  
f0101132:	c3                   	ret    

f0101133 <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f0101133:	55                   	push   %ebp
f0101134:	89 e5                	mov    %esp,%ebp
f0101136:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f0101139:	83 ec 0c             	sub    $0xc,%esp
f010113c:	68 28 4c 13 f0       	push   $0xf0134c28
f0101141:	e8 c8 fb ff ff       	call   f0100d0e <cprintf>
f0101146:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f0101149:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f010114e:	83 ec 04             	sub    $0x4,%esp
f0101151:	50                   	push   %eax
f0101152:	68 0c 00 10 f0       	push   $0xf010000c
f0101157:	68 44 4c 13 f0       	push   $0xf0134c44
f010115c:	e8 ad fb ff ff       	call   f0100d0e <cprintf>
f0101161:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f0101164:	b8 69 3b 13 00       	mov    $0x133b69,%eax
f0101169:	83 ec 04             	sub    $0x4,%esp
f010116c:	50                   	push   %eax
f010116d:	68 69 3b 13 f0       	push   $0xf0133b69
f0101172:	68 80 4c 13 f0       	push   $0xf0134c80
f0101177:	e8 92 fb ff ff       	call   f0100d0e <cprintf>
f010117c:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f010117f:	b8 9c a1 89 00       	mov    $0x89a19c,%eax
f0101184:	83 ec 04             	sub    $0x4,%esp
f0101187:	50                   	push   %eax
f0101188:	68 9c a1 89 f0       	push   $0xf089a19c
f010118d:	68 bc 4c 13 f0       	push   $0xf0134cbc
f0101192:	e8 77 fb ff ff       	call   f0100d0e <cprintf>
f0101197:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f010119a:	b8 bc ae 89 00       	mov    $0x89aebc,%eax
f010119f:	83 ec 04             	sub    $0x4,%esp
f01011a2:	50                   	push   %eax
f01011a3:	68 bc ae 89 f0       	push   $0xf089aebc
f01011a8:	68 04 4d 13 f0       	push   $0xf0134d04
f01011ad:	e8 5c fb ff ff       	call   f0100d0e <cprintf>
f01011b2:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f01011b5:	b8 bc ae 89 f0       	mov    $0xf089aebc,%eax
f01011ba:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f01011c0:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f01011c5:	29 c2                	sub    %eax,%edx
f01011c7:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f01011c9:	85 c0                	test   %eax,%eax
f01011cb:	79 05                	jns    f01011d2 <command_kernel_info+0x9f>
f01011cd:	05 ff 03 00 00       	add    $0x3ff,%eax
f01011d2:	c1 f8 0a             	sar    $0xa,%eax
f01011d5:	83 ec 08             	sub    $0x8,%esp
f01011d8:	50                   	push   %eax
f01011d9:	68 40 4d 13 f0       	push   $0xf0134d40
f01011de:	e8 2b fb ff ff       	call   f0100d0e <cprintf>
f01011e3:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f01011e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01011eb:	c9                   	leave  
f01011ec:	c3                   	ret    

f01011ed <command_kernel_base_info>:

//===========================================================================
//Lab3.Examples
//=============
int command_kernel_base_info(int number_of_arguments, char **arguments)
{
f01011ed:	55                   	push   %ebp
f01011ee:	89 e5                	mov    %esp,%ebp
f01011f0:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "ikb"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011f3:	83 ec 04             	sub    $0x4,%esp
f01011f6:	68 6c 4d 13 f0       	push   $0xf0134d6c
f01011fb:	68 b0 00 00 00       	push   $0xb0
f0101200:	68 8d 4d 13 f0       	push   $0xf0134d8d
f0101205:	e8 fb ef ff ff       	call   f0100205 <_panic>

f010120a <command_del_kernel_base>:
	return 0;
}


int command_del_kernel_base(int number_of_arguments, char **arguments)
{
f010120a:	55                   	push   %ebp
f010120b:	89 e5                	mov    %esp,%ebp
f010120d:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "dkb"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101210:	83 ec 04             	sub    $0x4,%esp
f0101213:	68 6c 4d 13 f0       	push   $0xf0134d6c
f0101218:	68 ba 00 00 00       	push   $0xba
f010121d:	68 8d 4d 13 f0       	push   $0xf0134d8d
f0101222:	e8 de ef ff ff       	call   f0100205 <_panic>

f0101227 <command_share_page>:

	return 0;
}

int command_share_page(int number_of_arguments, char **arguments)
{
f0101227:	55                   	push   %ebp
f0101228:	89 e5                	mov    %esp,%ebp
f010122a:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "shr"
	//Comment the following line
	panic("Function is not implemented yet!");
f010122d:	83 ec 04             	sub    $0x4,%esp
f0101230:	68 6c 4d 13 f0       	push   $0xf0134d6c
f0101235:	68 c3 00 00 00       	push   $0xc3
f010123a:	68 8d 4d 13 f0       	push   $0xf0134d8d
f010123f:	e8 c1 ef ff ff       	call   f0100205 <_panic>

f0101244 <command_show_mapping>:

//===========================================================================
//Lab4.Hands.On
//=============
int command_show_mapping(int number_of_arguments, char **arguments)
{
f0101244:	55                   	push   %ebp
f0101245:	89 e5                	mov    %esp,%ebp
f0101247:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sm"
	//Comment the following line
	panic("Function is not implemented yet!");
f010124a:	83 ec 04             	sub    $0x4,%esp
f010124d:	68 6c 4d 13 f0       	push   $0xf0134d6c
f0101252:	68 cf 00 00 00       	push   $0xcf
f0101257:	68 8d 4d 13 f0       	push   $0xf0134d8d
f010125c:	e8 a4 ef ff ff       	call   f0100205 <_panic>

f0101261 <command_set_permission>:

	return 0 ;
}

int command_set_permission(int number_of_arguments, char **arguments)
{
f0101261:	55                   	push   %ebp
f0101262:	89 e5                	mov    %esp,%ebp
f0101264:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101267:	83 ec 04             	sub    $0x4,%esp
f010126a:	68 6c 4d 13 f0       	push   $0xf0134d6c
f010126f:	68 d8 00 00 00       	push   $0xd8
f0101274:	68 8d 4d 13 f0       	push   $0xf0134d8d
f0101279:	e8 87 ef ff ff       	call   f0100205 <_panic>

f010127e <command_share_range>:

	return 0 ;
}

int command_share_range(int number_of_arguments, char **arguments)
{
f010127e:	55                   	push   %ebp
f010127f:	89 e5                	mov    %esp,%ebp
f0101281:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sr"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101284:	83 ec 04             	sub    $0x4,%esp
f0101287:	68 6c 4d 13 f0       	push   $0xf0134d6c
f010128c:	68 e1 00 00 00       	push   $0xe1
f0101291:	68 8d 4d 13 f0       	push   $0xf0134d8d
f0101296:	e8 6a ef ff ff       	call   f0100205 <_panic>

f010129b <command_nr>:
//===========================================================================
//Lab5.Examples
//==============
//[1] Number of references on the given physical address
int command_nr(int number_of_arguments, char **arguments)
{
f010129b:	55                   	push   %ebp
f010129c:	89 e5                	mov    %esp,%ebp
f010129e:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "nr"
	//Comment the following line
	panic("Function is not implemented yet!");
f01012a1:	83 ec 04             	sub    $0x4,%esp
f01012a4:	68 6c 4d 13 f0       	push   $0xf0134d6c
f01012a9:	68 ee 00 00 00       	push   $0xee
f01012ae:	68 8d 4d 13 f0       	push   $0xf0134d8d
f01012b3:	e8 4d ef ff ff       	call   f0100205 <_panic>

f01012b8 <command_ap>:
	return 0;
}

//[2] Allocate Page: If the given user virtual address is mapped, do nothing. Else, allocate a single frame and map it to a given virtual address in the user space
int command_ap(int number_of_arguments, char **arguments)
{
f01012b8:	55                   	push   %ebp
f01012b9:	89 e5                	mov    %esp,%ebp
f01012bb:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "ap"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f01012be:	8b 45 0c             	mov    0xc(%ebp),%eax
f01012c1:	83 c0 04             	add    $0x4,%eax
f01012c4:	8b 00                	mov    (%eax),%eax
f01012c6:	83 ec 04             	sub    $0x4,%esp
f01012c9:	6a 10                	push   $0x10
f01012cb:	6a 00                	push   $0x0
f01012cd:	50                   	push   %eax
f01012ce:	e8 70 09 03 00       	call   f0131c43 <strtol>
f01012d3:	83 c4 10             	add    $0x10,%esp
f01012d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct FrameInfo* ptr_frame_info;
	int ret = allocate_frame(&ptr_frame_info) ;
f01012d9:	83 ec 0c             	sub    $0xc,%esp
f01012dc:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01012df:	50                   	push   %eax
f01012e0:	e8 0d 56 00 00       	call   f01068f2 <allocate_frame>
f01012e5:	83 c4 10             	add    $0x10,%esp
f01012e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	map_frame(ptr_page_directory, ptr_frame_info, va, PERM_USER | PERM_WRITEABLE);
f01012eb:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01012ee:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f01012f3:	6a 06                	push   $0x6
f01012f5:	ff 75 f4             	pushl  -0xc(%ebp)
f01012f8:	52                   	push   %edx
f01012f9:	50                   	push   %eax
f01012fa:	e8 42 5a 00 00       	call   f0106d41 <map_frame>
f01012ff:	83 c4 10             	add    $0x10,%esp

	return 0 ;
f0101302:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101307:	c9                   	leave  
f0101308:	c3                   	ret    

f0101309 <command_fp>:

//[3] Free Page: Un-map a single page at the given virtual address in the user space
int command_fp(int number_of_arguments, char **arguments)
{
f0101309:	55                   	push   %ebp
f010130a:	89 e5                	mov    %esp,%ebp
f010130c:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "fp"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f010130f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101312:	83 c0 04             	add    $0x4,%eax
f0101315:	8b 00                	mov    (%eax),%eax
f0101317:	83 ec 04             	sub    $0x4,%esp
f010131a:	6a 10                	push   $0x10
f010131c:	6a 00                	push   $0x0
f010131e:	50                   	push   %eax
f010131f:	e8 1f 09 03 00       	call   f0131c43 <strtol>
f0101324:	83 c4 10             	add    $0x10,%esp
f0101327:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// Un-map the page at this address
	unmap_frame(ptr_page_directory, va);
f010132a:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f010132f:	83 ec 08             	sub    $0x8,%esp
f0101332:	ff 75 f4             	pushl  -0xc(%ebp)
f0101335:	50                   	push   %eax
f0101336:	e8 3b 5b 00 00       	call   f0106e76 <unmap_frame>
f010133b:	83 c4 10             	add    $0x10,%esp

	return 0;
f010133e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101343:	c9                   	leave  
f0101344:	c3                   	ret    

f0101345 <command_asp>:
//===========================================================================
//Lab5.Hands-on
//==============
//[1] Allocate Shared Pages
int command_asp(int number_of_arguments, char **arguments)
{
f0101345:	55                   	push   %ebp
f0101346:	89 e5                	mov    %esp,%ebp
f0101348:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "asp"
	//Comment the following line
	panic("Function is not implemented yet!");
f010134b:	83 ec 04             	sub    $0x4,%esp
f010134e:	68 6c 4d 13 f0       	push   $0xf0134d6c
f0101353:	68 18 01 00 00       	push   $0x118
f0101358:	68 8d 4d 13 f0       	push   $0xf0134d8d
f010135d:	e8 a3 ee ff ff       	call   f0100205 <_panic>

f0101362 <command_cfp>:
}


//[2] Count Free Pages in Range
int command_cfp(int number_of_arguments, char **arguments)
{
f0101362:	55                   	push   %ebp
f0101363:	89 e5                	mov    %esp,%ebp
f0101365:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "cfp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101368:	83 ec 04             	sub    $0x4,%esp
f010136b:	68 6c 4d 13 f0       	push   $0xf0134d6c
f0101370:	68 23 01 00 00       	push   $0x123
f0101375:	68 8d 4d 13 f0       	push   $0xf0134d8d
f010137a:	e8 86 ee ff ff       	call   f0100205 <_panic>

f010137f <command_ft>:

//===========================================================================
//Lab6.Examples
//=============
int command_ft(int number_of_arguments, char **arguments)
{
f010137f:	55                   	push   %ebp
f0101380:	89 e5                	mov    %esp,%ebp
	//TODO: LAB6 Example: fill this function. corresponding command name is "ft"
	//Comment the following line

	return 0;
f0101382:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101387:	5d                   	pop    %ebp
f0101388:	c3                   	ret    

f0101389 <command_writeusermem>:

//*****************************************************************************************//
//***************************** PROJECT HELPERS COMMAND ***********************************//
//*****************************************************************************************//
int command_writeusermem(int number_of_arguments, char **arguments)
{
f0101389:	55                   	push   %ebp
f010138a:	89 e5                	mov    %esp,%ebp
f010138c:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 3)
f010138f:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0101393:	75 37                	jne    f01013cc <command_writeusermem+0x43>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f0101395:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101398:	83 c0 04             	add    $0x4,%eax
f010139b:	8b 00                	mov    (%eax),%eax
f010139d:	83 ec 04             	sub    $0x4,%esp
f01013a0:	6a 10                	push   $0x10
f01013a2:	6a 00                	push   $0x0
f01013a4:	50                   	push   %eax
f01013a5:	e8 99 08 03 00       	call   f0131c43 <strtol>
f01013aa:	83 c4 10             	add    $0x10,%esp
f01013ad:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address) ;
f01013b0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01013b3:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*ptr = arguments[2][0];
f01013b6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013b9:	83 c0 08             	add    $0x8,%eax
f01013bc:	8b 00                	mov    (%eax),%eax
f01013be:	8a 00                	mov    (%eax),%al
f01013c0:	88 c2                	mov    %al,%dl
f01013c2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01013c5:	88 10                	mov    %dl,(%eax)
f01013c7:	e9 b9 00 00 00       	jmp    f0101485 <command_writeusermem+0xfc>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 4)
f01013cc:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01013d0:	0f 85 9f 00 00 00    	jne    f0101475 <command_writeusermem+0xec>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01013d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013d9:	83 c0 04             	add    $0x4,%eax
f01013dc:	8b 00                	mov    (%eax),%eax
f01013de:	83 ec 04             	sub    $0x4,%esp
f01013e1:	6a 0a                	push   $0xa
f01013e3:	6a 00                	push   $0x0
f01013e5:	50                   	push   %eax
f01013e6:	e8 58 08 03 00       	call   f0131c43 <strtol>
f01013eb:	83 c4 10             	add    $0x10,%esp
f01013ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f01013f1:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f01013f8:	83 ec 04             	sub    $0x4,%esp
f01013fb:	6a 00                	push   $0x0
f01013fd:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101400:	50                   	push   %eax
f0101401:	ff 75 f4             	pushl  -0xc(%ebp)
f0101404:	e8 fb 8c 00 00       	call   f010a104 <envid2env>
f0101409:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f010140c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010140f:	83 c0 08             	add    $0x8,%eax
f0101412:	8b 00                	mov    (%eax),%eax
f0101414:	83 ec 04             	sub    $0x4,%esp
f0101417:	6a 10                	push   $0x10
f0101419:	6a 00                	push   $0x0
f010141b:	50                   	push   %eax
f010141c:	e8 22 08 03 00       	call   f0131c43 <strtol>
f0101421:	83 c4 10             	add    $0x10,%esp
f0101424:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f0101427:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010142a:	85 c0                	test   %eax,%eax
f010142c:	75 07                	jne    f0101435 <command_writeusermem+0xac>
f010142e:	b8 00 00 00 00       	mov    $0x0,%eax
f0101433:	eb 55                	jmp    f010148a <command_writeusermem+0x101>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101435:	0f 20 d8             	mov    %cr3,%eax
f0101438:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f010143b:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f010143e:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32) (env->env_cr3));
f0101441:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101444:	8b 40 60             	mov    0x60(%eax),%eax
f0101447:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010144a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010144d:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0101450:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101453:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		*ptr = arguments[3][0];
f0101456:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101459:	83 c0 0c             	add    $0xc,%eax
f010145c:	8b 00                	mov    (%eax),%eax
f010145e:	8a 00                	mov    (%eax),%al
f0101460:	88 c2                	mov    %al,%dl
f0101462:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101465:	88 10                	mov    %dl,(%eax)
f0101467:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010146a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010146d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101470:	0f 22 d8             	mov    %eax,%cr3
f0101473:	eb 10                	jmp    f0101485 <command_writeusermem+0xfc>
		lcr3(oldDir);
	}
	else
	{
		cprintf("wum command: invalid number of arguments\n") ;
f0101475:	83 ec 0c             	sub    $0xc,%esp
f0101478:	68 a4 4d 13 f0       	push   $0xf0134da4
f010147d:	e8 8c f8 ff ff       	call   f0100d0e <cprintf>
f0101482:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101485:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010148a:	c9                   	leave  
f010148b:	c3                   	ret    

f010148c <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f010148c:	55                   	push   %ebp
f010148d:	89 e5                	mov    %esp,%ebp
f010148f:	83 ec 28             	sub    $0x28,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101492:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101495:	83 c0 04             	add    $0x4,%eax
f0101498:	8b 00                	mov    (%eax),%eax
f010149a:	83 ec 04             	sub    $0x4,%esp
f010149d:	6a 10                	push   $0x10
f010149f:	6a 00                	push   $0x0
f01014a1:	50                   	push   %eax
f01014a2:	e8 9c 07 03 00       	call   f0131c43 <strtol>
f01014a7:	83 c4 10             	add    $0x10,%esp
f01014aa:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01014af:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f01014b2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014b5:	83 c0 08             	add    $0x8,%eax
f01014b8:	8b 00                	mov    (%eax),%eax
f01014ba:	83 ec 04             	sub    $0x4,%esp
f01014bd:	6a 0a                	push   $0xa
f01014bf:	6a 00                	push   $0x0
f01014c1:	50                   	push   %eax
f01014c2:	e8 7c 07 03 00       	call   f0131c43 <strtol>
f01014c7:	83 c4 10             	add    $0x10,%esp
f01014ca:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int c, i=0;
f01014cd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int stringLen = strlen(arguments[3]);
f01014d4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014d7:	83 c0 0c             	add    $0xc,%eax
f01014da:	8b 00                	mov    (%eax),%eax
f01014dc:	83 ec 0c             	sub    $0xc,%esp
f01014df:	50                   	push   %eax
f01014e0:	e8 fe 03 03 00       	call   f01318e3 <strlen>
f01014e5:	83 c4 10             	add    $0x10,%esp
f01014e8:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	for(c=0; c<size; c++)
f01014eb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01014f2:	eb 30                	jmp    f0101524 <command_writemem_k+0x98>
	{
		for(i=0;i < stringLen; i++)
f01014f4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01014fb:	eb 1c                	jmp    f0101519 <command_writemem_k+0x8d>
		{
			*address = arguments[3][i];
f01014fd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101500:	83 c0 0c             	add    $0xc,%eax
f0101503:	8b 10                	mov    (%eax),%edx
f0101505:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101508:	01 d0                	add    %edx,%eax
f010150a:	8a 00                	mov    (%eax),%al
f010150c:	88 c2                	mov    %al,%dl
f010150e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101511:	88 10                	mov    %dl,(%eax)
			address++;
f0101513:	ff 45 f4             	incl   -0xc(%ebp)
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
	{
		for(i=0;i < stringLen; i++)
f0101516:	ff 45 ec             	incl   -0x14(%ebp)
f0101519:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010151c:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010151f:	7c dc                	jl     f01014fd <command_writemem_k+0x71>
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
f0101521:	ff 45 f0             	incl   -0x10(%ebp)
f0101524:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101527:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010152a:	7c c8                	jl     f01014f4 <command_writemem_k+0x68>
		{
			*address = arguments[3][i];
			address++;
		}
	}
	return 0;
f010152c:	b8 00 00 00 00       	mov    $0x0,%eax


}
f0101531:	c9                   	leave  
f0101532:	c3                   	ret    

f0101533 <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f0101533:	55                   	push   %ebp
f0101534:	89 e5                	mov    %esp,%ebp
f0101536:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 2)
f0101539:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010153d:	75 42                	jne    f0101581 <command_readusermem+0x4e>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f010153f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101542:	83 c0 04             	add    $0x4,%eax
f0101545:	8b 00                	mov    (%eax),%eax
f0101547:	83 ec 04             	sub    $0x4,%esp
f010154a:	6a 10                	push   $0x10
f010154c:	6a 00                	push   $0x0
f010154e:	50                   	push   %eax
f010154f:	e8 ef 06 03 00       	call   f0131c43 <strtol>
f0101554:	83 c4 10             	add    $0x10,%esp
f0101557:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address ) ;
f010155a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010155d:	89 45 d8             	mov    %eax,-0x28(%ebp)

		cprintf("value at address %x = %c\n", ptr, *ptr);
f0101560:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101563:	8a 00                	mov    (%eax),%al
f0101565:	0f b6 c0             	movzbl %al,%eax
f0101568:	83 ec 04             	sub    $0x4,%esp
f010156b:	50                   	push   %eax
f010156c:	ff 75 d8             	pushl  -0x28(%ebp)
f010156f:	68 ce 4d 13 f0       	push   $0xf0134dce
f0101574:	e8 95 f7 ff ff       	call   f0100d0e <cprintf>
f0101579:	83 c4 10             	add    $0x10,%esp
f010157c:	e9 c4 00 00 00       	jmp    f0101645 <command_readusermem+0x112>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 3)
f0101581:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0101585:	0f 85 aa 00 00 00    	jne    f0101635 <command_readusermem+0x102>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f010158b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010158e:	83 c0 04             	add    $0x4,%eax
f0101591:	8b 00                	mov    (%eax),%eax
f0101593:	83 ec 04             	sub    $0x4,%esp
f0101596:	6a 0a                	push   $0xa
f0101598:	6a 00                	push   $0x0
f010159a:	50                   	push   %eax
f010159b:	e8 a3 06 03 00       	call   f0131c43 <strtol>
f01015a0:	83 c4 10             	add    $0x10,%esp
f01015a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f01015a6:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f01015ad:	83 ec 04             	sub    $0x4,%esp
f01015b0:	6a 00                	push   $0x0
f01015b2:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01015b5:	50                   	push   %eax
f01015b6:	ff 75 f4             	pushl  -0xc(%ebp)
f01015b9:	e8 46 8b 00 00       	call   f010a104 <envid2env>
f01015be:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f01015c1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01015c4:	83 c0 08             	add    $0x8,%eax
f01015c7:	8b 00                	mov    (%eax),%eax
f01015c9:	83 ec 04             	sub    $0x4,%esp
f01015cc:	6a 10                	push   $0x10
f01015ce:	6a 00                	push   $0x0
f01015d0:	50                   	push   %eax
f01015d1:	e8 6d 06 03 00       	call   f0131c43 <strtol>
f01015d6:	83 c4 10             	add    $0x10,%esp
f01015d9:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f01015dc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01015df:	85 c0                	test   %eax,%eax
f01015e1:	75 07                	jne    f01015ea <command_readusermem+0xb7>
f01015e3:	b8 00 00 00 00       	mov    $0x0,%eax
f01015e8:	eb 60                	jmp    f010164a <command_readusermem+0x117>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01015ea:	0f 20 d8             	mov    %cr3,%eax
f01015ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f01015f0:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f01015f3:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32)( env->env_cr3));
f01015f6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01015f9:	8b 40 60             	mov    0x60(%eax),%eax
f01015fc:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01015ff:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101602:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0101605:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101608:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		cprintf("value at address %x = %c\n", address, *ptr);
f010160b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010160e:	8a 00                	mov    (%eax),%al
f0101610:	0f b6 c0             	movzbl %al,%eax
f0101613:	83 ec 04             	sub    $0x4,%esp
f0101616:	50                   	push   %eax
f0101617:	ff 75 f0             	pushl  -0x10(%ebp)
f010161a:	68 ce 4d 13 f0       	push   $0xf0134dce
f010161f:	e8 ea f6 ff ff       	call   f0100d0e <cprintf>
f0101624:	83 c4 10             	add    $0x10,%esp
f0101627:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010162a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010162d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101630:	0f 22 d8             	mov    %eax,%cr3
f0101633:	eb 10                	jmp    f0101645 <command_readusermem+0x112>

		lcr3(oldDir);
	}
	else
	{
		cprintf("rum command: invalid number of arguments\n") ;
f0101635:	83 ec 0c             	sub    $0xc,%esp
f0101638:	68 e8 4d 13 f0       	push   $0xf0134de8
f010163d:	e8 cc f6 ff ff       	call   f0100d0e <cprintf>
f0101642:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101645:	b8 00 00 00 00       	mov    $0x0,%eax

}
f010164a:	c9                   	leave  
f010164b:	c3                   	ret    

f010164c <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f010164c:	55                   	push   %ebp
f010164d:	89 e5                	mov    %esp,%ebp
f010164f:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101652:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101655:	83 c0 04             	add    $0x4,%eax
f0101658:	8b 00                	mov    (%eax),%eax
f010165a:	83 ec 04             	sub    $0x4,%esp
f010165d:	6a 10                	push   $0x10
f010165f:	6a 00                	push   $0x0
f0101661:	50                   	push   %eax
f0101662:	e8 dc 05 03 00       	call   f0131c43 <strtol>
f0101667:	83 c4 10             	add    $0x10,%esp
f010166a:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010166f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f0101672:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101675:	83 c0 08             	add    $0x8,%eax
f0101678:	8b 00                	mov    (%eax),%eax
f010167a:	83 ec 04             	sub    $0x4,%esp
f010167d:	6a 0a                	push   $0xa
f010167f:	6a 00                	push   $0x0
f0101681:	50                   	push   %eax
f0101682:	e8 bc 05 03 00       	call   f0131c43 <strtol>
f0101687:	83 c4 10             	add    $0x10,%esp
f010168a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int i=0;
f010168d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for(;i < size; i++)
f0101694:	eb 22                	jmp    f01016b8 <command_readmem_k+0x6c>
	{
		cprintf("%c",*address++);
f0101696:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101699:	8d 50 01             	lea    0x1(%eax),%edx
f010169c:	89 55 f4             	mov    %edx,-0xc(%ebp)
f010169f:	8a 00                	mov    (%eax),%al
f01016a1:	0f b6 c0             	movzbl %al,%eax
f01016a4:	83 ec 08             	sub    $0x8,%esp
f01016a7:	50                   	push   %eax
f01016a8:	68 12 4e 13 f0       	push   $0xf0134e12
f01016ad:	e8 5c f6 ff ff       	call   f0100d0e <cprintf>
f01016b2:	83 c4 10             	add    $0x10,%esp
int command_readmem_k(int number_of_arguments, char **arguments)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int i=0;
	for(;i < size; i++)
f01016b5:	ff 45 f0             	incl   -0x10(%ebp)
f01016b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01016bb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01016be:	7c d6                	jl     f0101696 <command_readmem_k+0x4a>
	{
		cprintf("%c",*address++);
	}
	cprintf("\n");
f01016c0:	83 ec 0c             	sub    $0xc,%esp
f01016c3:	68 15 4e 13 f0       	push   $0xf0134e15
f01016c8:	e8 41 f6 ff ff       	call   f0100d0e <cprintf>
f01016cd:	83 c4 10             	add    $0x10,%esp
	return 0;
f01016d0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01016d5:	c9                   	leave  
f01016d6:	c3                   	ret    

f01016d7 <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f01016d7:	55                   	push   %ebp
f01016d8:	89 e5                	mov    %esp,%ebp
f01016da:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01016dd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016e0:	83 c0 04             	add    $0x4,%eax
f01016e3:	8b 00                	mov    (%eax),%eax
f01016e5:	83 ec 04             	sub    $0x4,%esp
f01016e8:	6a 0a                	push   $0xa
f01016ea:	6a 00                	push   $0x0
f01016ec:	50                   	push   %eax
f01016ed:	e8 51 05 03 00       	call   f0131c43 <strtol>
f01016f2:	83 c4 10             	add    $0x10,%esp
f01016f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f01016f8:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f01016ff:	83 ec 04             	sub    $0x4,%esp
f0101702:	6a 00                	push   $0x0
f0101704:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101707:	50                   	push   %eax
f0101708:	ff 75 ec             	pushl  -0x14(%ebp)
f010170b:	e8 f4 89 00 00       	call   f010a104 <envid2env>
f0101710:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0101713:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101716:	83 c0 08             	add    $0x8,%eax
f0101719:	8b 00                	mov    (%eax),%eax
f010171b:	83 ec 04             	sub    $0x4,%esp
f010171e:	6a 10                	push   $0x10
f0101720:	6a 00                	push   $0x0
f0101722:	50                   	push   %eax
f0101723:	e8 1b 05 03 00       	call   f0131c43 <strtol>
f0101728:	83 c4 10             	add    $0x10,%esp
f010172b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f010172e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101731:	83 c0 0c             	add    $0xc,%eax
f0101734:	8b 00                	mov    (%eax),%eax
f0101736:	83 ec 04             	sub    $0x4,%esp
f0101739:	6a 0a                	push   $0xa
f010173b:	6a 00                	push   $0x0
f010173d:	50                   	push   %eax
f010173e:	e8 00 05 03 00       	call   f0131c43 <strtol>
f0101743:	83 c4 10             	add    $0x10,%esp
f0101746:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f0101749:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010174c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f010174f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101752:	85 c0                	test   %eax,%eax
f0101754:	75 07                	jne    f010175d <command_readuserblock+0x86>
f0101756:	b8 00 00 00 00       	mov    $0x0,%eax
f010175b:	eb 65                	jmp    f01017c2 <command_readuserblock+0xeb>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f010175d:	0f 20 d8             	mov    %cr3,%eax
f0101760:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f0101763:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f0101766:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0101769:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010176c:	8b 40 60             	mov    0x60(%eax),%eax
f010176f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101772:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101775:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f0101778:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010177f:	eb 28                	jmp    f01017a9 <command_readuserblock+0xd2>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f0101781:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101784:	8a 00                	mov    (%eax),%al
f0101786:	0f b6 d0             	movzbl %al,%edx
f0101789:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010178c:	8a 00                	mov    (%eax),%al
f010178e:	0f b6 c0             	movzbl %al,%eax
f0101791:	52                   	push   %edx
f0101792:	50                   	push   %eax
f0101793:	ff 75 f4             	pushl  -0xc(%ebp)
f0101796:	68 17 4e 13 f0       	push   $0xf0134e17
f010179b:	e8 6e f5 ff ff       	call   f0100d0e <cprintf>
f01017a0:	83 c4 10             	add    $0x10,%esp
		ptr++;
f01017a3:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f01017a6:	ff 45 f0             	incl   -0x10(%ebp)
f01017a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01017ac:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01017af:	7c d0                	jl     f0101781 <command_readuserblock+0xaa>
f01017b1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01017b4:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01017b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01017ba:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f01017bd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01017c2:	c9                   	leave  
f01017c3:	c3                   	ret    

f01017c4 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f01017c4:	55                   	push   %ebp
f01017c5:	89 e5                	mov    %esp,%ebp
f01017c7:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01017ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f01017cd:	83 c0 04             	add    $0x4,%eax
f01017d0:	8b 00                	mov    (%eax),%eax
f01017d2:	83 ec 04             	sub    $0x4,%esp
f01017d5:	6a 0a                	push   $0xa
f01017d7:	6a 00                	push   $0x0
f01017d9:	50                   	push   %eax
f01017da:	e8 64 04 03 00       	call   f0131c43 <strtol>
f01017df:	83 c4 10             	add    $0x10,%esp
f01017e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f01017e5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f01017ec:	83 ec 04             	sub    $0x4,%esp
f01017ef:	6a 00                	push   $0x0
f01017f1:	8d 45 d8             	lea    -0x28(%ebp),%eax
f01017f4:	50                   	push   %eax
f01017f5:	ff 75 f4             	pushl  -0xc(%ebp)
f01017f8:	e8 07 89 00 00       	call   f010a104 <envid2env>
f01017fd:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0101800:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101803:	85 c0                	test   %eax,%eax
f0101805:	75 0a                	jne    f0101811 <command_remove_table+0x4d>
f0101807:	b8 00 00 00 00       	mov    $0x0,%eax
f010180c:	e9 c7 00 00 00       	jmp    f01018d8 <command_remove_table+0x114>

	uint32 address = strtol(arguments[2], NULL, 16);
f0101811:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101814:	83 c0 08             	add    $0x8,%eax
f0101817:	8b 00                	mov    (%eax),%eax
f0101819:	83 ec 04             	sub    $0x4,%esp
f010181c:	6a 10                	push   $0x10
f010181e:	6a 00                	push   $0x0
f0101820:	50                   	push   %eax
f0101821:	e8 1d 04 03 00       	call   f0131c43 <strtol>
f0101826:	83 c4 10             	add    $0x10,%esp
f0101829:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f010182c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010182f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f0101832:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101835:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101838:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010183b:	c1 ea 16             	shr    $0x16,%edx
f010183e:	c1 e2 02             	shl    $0x2,%edx
f0101841:	01 d0                	add    %edx,%eax
f0101843:	8b 00                	mov    (%eax),%eax
f0101845:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010184a:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//remove the table
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(va))
f010184d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101850:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f0101855:	77 1c                	ja     f0101873 <command_remove_table+0xaf>
	{
		kfree((void*)kheap_virtual_address(table_pa));
f0101857:	83 ec 0c             	sub    $0xc,%esp
f010185a:	ff 75 e8             	pushl  -0x18(%ebp)
f010185d:	e8 1b 67 00 00       	call   f0107f7d <kheap_virtual_address>
f0101862:	83 c4 10             	add    $0x10,%esp
f0101865:	83 ec 0c             	sub    $0xc,%esp
f0101868:	50                   	push   %eax
f0101869:	e8 e8 65 00 00       	call   f0107e56 <kfree>
f010186e:	83 c4 10             	add    $0x10,%esp
f0101871:	eb 28                	jmp    f010189b <command_remove_table+0xd7>
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f0101873:	83 ec 0c             	sub    $0xc,%esp
f0101876:	ff 75 e8             	pushl  -0x18(%ebp)
f0101879:	e8 a9 f7 ff ff       	call   f0101027 <to_frame_info>
f010187e:	83 c4 10             	add    $0x10,%esp
f0101881:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f0101884:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101887:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f010188d:	83 ec 0c             	sub    $0xc,%esp
f0101890:	ff 75 e4             	pushl  -0x1c(%ebp)
f0101893:	e8 6f 51 00 00       	call   f0106a07 <free_frame>
f0101898:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f010189b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010189e:	c1 e8 16             	shr    $0x16,%eax
f01018a1:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f01018a4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01018a7:	8b 40 5c             	mov    0x5c(%eax),%eax
f01018aa:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01018ad:	c1 e2 02             	shl    $0x2,%edx
f01018b0:	01 c2                	add    %eax,%edx
f01018b2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01018b5:	8b 40 5c             	mov    0x5c(%eax),%eax
f01018b8:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f01018bb:	c1 e1 02             	shl    $0x2,%ecx
f01018be:	01 c8                	add    %ecx,%eax
f01018c0:	8b 00                	mov    (%eax),%eax
f01018c2:	83 e0 fe             	and    $0xfffffffe,%eax
f01018c5:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01018c7:	0f 20 d8             	mov    %cr3,%eax
f01018ca:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01018cd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01018d0:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f01018d3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01018d8:	c9                   	leave  
f01018d9:	c3                   	ret    

f01018da <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f01018da:	55                   	push   %ebp
f01018db:	89 e5                	mov    %esp,%ebp
f01018dd:	83 ec 28             	sub    $0x28,%esp
	if (number_of_arguments < 3 || number_of_arguments > 4)
f01018e0:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f01018e4:	7e 06                	jle    f01018ec <command_allocuserpage+0x12>
f01018e6:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01018ea:	7e 1a                	jle    f0101906 <command_allocuserpage+0x2c>
	{
		cprintf("aup command: invalid number of arguments\n") ;
f01018ec:	83 ec 0c             	sub    $0xc,%esp
f01018ef:	68 28 4e 13 f0       	push   $0xf0134e28
f01018f4:	e8 15 f4 ff ff       	call   f0100d0e <cprintf>
f01018f9:	83 c4 10             	add    $0x10,%esp
		return 0;
f01018fc:	b8 00 00 00 00       	mov    $0x0,%eax
f0101901:	e9 46 01 00 00       	jmp    f0101a4c <command_allocuserpage+0x172>
	}
	int32 envId = strtol(arguments[1],NULL, 10);
f0101906:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101909:	83 c0 04             	add    $0x4,%eax
f010190c:	8b 00                	mov    (%eax),%eax
f010190e:	83 ec 04             	sub    $0x4,%esp
f0101911:	6a 0a                	push   $0xa
f0101913:	6a 00                	push   $0x0
f0101915:	50                   	push   %eax
f0101916:	e8 28 03 03 00       	call   f0131c43 <strtol>
f010191b:	83 c4 10             	add    $0x10,%esp
f010191e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct Env* env = NULL;
f0101921:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	envid2env(envId, &env, 0 );
f0101928:	83 ec 04             	sub    $0x4,%esp
f010192b:	6a 00                	push   $0x0
f010192d:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0101930:	50                   	push   %eax
f0101931:	ff 75 f0             	pushl  -0x10(%ebp)
f0101934:	e8 cb 87 00 00       	call   f010a104 <envid2env>
f0101939:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f010193c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010193f:	85 c0                	test   %eax,%eax
f0101941:	75 0a                	jne    f010194d <command_allocuserpage+0x73>
f0101943:	b8 00 00 00 00       	mov    $0x0,%eax
f0101948:	e9 ff 00 00 00       	jmp    f0101a4c <command_allocuserpage+0x172>

	uint32 va = strtol(arguments[2], NULL, 16);
f010194d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101950:	83 c0 08             	add    $0x8,%eax
f0101953:	8b 00                	mov    (%eax),%eax
f0101955:	83 ec 04             	sub    $0x4,%esp
f0101958:	6a 10                	push   $0x10
f010195a:	6a 00                	push   $0x0
f010195c:	50                   	push   %eax
f010195d:	e8 e1 02 03 00       	call   f0131c43 <strtol>
f0101962:	83 c4 10             	add    $0x10,%esp
f0101965:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f0101968:	83 ec 0c             	sub    $0xc,%esp
f010196b:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010196e:	50                   	push   %eax
f010196f:	e8 7e 4f 00 00       	call   f01068f2 <allocate_frame>
f0101974:	83 c4 10             	add    $0x10,%esp
f0101977:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f010197a:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f010197e:	75 1a                	jne    f010199a <command_allocuserpage+0xc0>
	{
		cprintf("ERROR: no enough memory\n");
f0101980:	83 ec 0c             	sub    $0xc,%esp
f0101983:	68 52 4e 13 f0       	push   $0xf0134e52
f0101988:	e8 81 f3 ff ff       	call   f0100d0e <cprintf>
f010198d:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101990:	b8 00 00 00 00       	mov    $0x0,%eax
f0101995:	e9 b2 00 00 00       	jmp    f0101a4c <command_allocuserpage+0x172>
	}

	if (number_of_arguments == 3)
f010199a:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010199e:	75 1d                	jne    f01019bd <command_allocuserpage+0xe3>
	{
		// Map this frame to the given user virtual address with PERM_WRITEABLE
		map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f01019a0:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01019a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01019a6:	8b 40 5c             	mov    0x5c(%eax),%eax
f01019a9:	6a 06                	push   $0x6
f01019ab:	ff 75 ec             	pushl  -0x14(%ebp)
f01019ae:	52                   	push   %edx
f01019af:	50                   	push   %eax
f01019b0:	e8 8c 53 00 00       	call   f0106d41 <map_frame>
f01019b5:	83 c4 10             	add    $0x10,%esp
f01019b8:	e9 8a 00 00 00       	jmp    f0101a47 <command_allocuserpage+0x16d>
	}
	else if (number_of_arguments == 4)
f01019bd:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01019c1:	0f 85 80 00 00 00    	jne    f0101a47 <command_allocuserpage+0x16d>
	{
		// Map this frame to the given user virtual address with the given permission
		uint32 rw ;
		if (arguments[3][0] == 'r' || arguments[3][0] == 'R')
f01019c7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019ca:	83 c0 0c             	add    $0xc,%eax
f01019cd:	8b 00                	mov    (%eax),%eax
f01019cf:	8a 00                	mov    (%eax),%al
f01019d1:	3c 72                	cmp    $0x72,%al
f01019d3:	74 0e                	je     f01019e3 <command_allocuserpage+0x109>
f01019d5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019d8:	83 c0 0c             	add    $0xc,%eax
f01019db:	8b 00                	mov    (%eax),%eax
f01019dd:	8a 00                	mov    (%eax),%al
f01019df:	3c 52                	cmp    $0x52,%al
f01019e1:	75 09                	jne    f01019ec <command_allocuserpage+0x112>
			rw = 0 ;
f01019e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01019ea:	eb 3c                	jmp    f0101a28 <command_allocuserpage+0x14e>
		else if (arguments[3][0] == 'w' || arguments[3][0] == 'W')
f01019ec:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019ef:	83 c0 0c             	add    $0xc,%eax
f01019f2:	8b 00                	mov    (%eax),%eax
f01019f4:	8a 00                	mov    (%eax),%al
f01019f6:	3c 77                	cmp    $0x77,%al
f01019f8:	74 0e                	je     f0101a08 <command_allocuserpage+0x12e>
f01019fa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019fd:	83 c0 0c             	add    $0xc,%eax
f0101a00:	8b 00                	mov    (%eax),%eax
f0101a02:	8a 00                	mov    (%eax),%al
f0101a04:	3c 57                	cmp    $0x57,%al
f0101a06:	75 09                	jne    f0101a11 <command_allocuserpage+0x137>
			rw = PERM_WRITEABLE ;
f0101a08:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101a0f:	eb 17                	jmp    f0101a28 <command_allocuserpage+0x14e>
		else
		{
			cprintf("aup command: wrong permission (r/w)... will continue as writable\n") ;
f0101a11:	83 ec 0c             	sub    $0xc,%esp
f0101a14:	68 6c 4e 13 f0       	push   $0xf0134e6c
f0101a19:	e8 f0 f2 ff ff       	call   f0100d0e <cprintf>
f0101a1e:	83 c4 10             	add    $0x10,%esp
			rw = PERM_WRITEABLE ;
f0101a21:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
		}

		map_frame(env->env_page_directory, ptr_FrameInfo, va, rw | PERM_USER);
f0101a28:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101a2b:	83 c8 04             	or     $0x4,%eax
f0101a2e:	89 c1                	mov    %eax,%ecx
f0101a30:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101a33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101a36:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101a39:	51                   	push   %ecx
f0101a3a:	ff 75 ec             	pushl  -0x14(%ebp)
f0101a3d:	52                   	push   %edx
f0101a3e:	50                   	push   %eax
f0101a3f:	e8 fd 52 00 00       	call   f0106d41 <map_frame>
f0101a44:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101a47:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101a4c:	c9                   	leave  
f0101a4d:	c3                   	ret    

f0101a4e <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f0101a4e:	55                   	push   %ebp
f0101a4f:	89 e5                	mov    %esp,%ebp
f0101a51:	56                   	push   %esi
f0101a52:	53                   	push   %ebx
f0101a53:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f0101a56:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0101a59:	83 ec 0c             	sub    $0xc,%esp
f0101a5c:	50                   	push   %eax
f0101a5d:	e8 79 55 00 00       	call   f0106fdb <calculate_available_frames>
f0101a62:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101a65:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101a68:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101a6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f0101a6e:	8b 75 ec             	mov    -0x14(%ebp),%esi
f0101a71:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0101a74:	01 de                	add    %ebx,%esi
f0101a76:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101a79:	01 f3                	add    %esi,%ebx
f0101a7b:	83 ec 0c             	sub    $0xc,%esp
f0101a7e:	51                   	push   %ecx
f0101a7f:	52                   	push   %edx
f0101a80:	50                   	push   %eax
f0101a81:	53                   	push   %ebx
f0101a82:	68 b0 4e 13 f0       	push   $0xf0134eb0
f0101a87:	e8 82 f2 ff ff       	call   f0100d0e <cprintf>
f0101a8c:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0101a8f:	a1 74 ad 89 f0       	mov    0xf089ad74,%eax
f0101a94:	83 ec 08             	sub    $0x8,%esp
f0101a97:	50                   	push   %eax
f0101a98:	68 08 4f 13 f0       	push   $0xf0134f08
f0101a9d:	e8 6c f2 ff ff       	call   f0100d0e <cprintf>
f0101aa2:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101aa5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101aaa:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0101aad:	5b                   	pop    %ebx
f0101aae:	5e                   	pop    %esi
f0101aaf:	5d                   	pop    %ebp
f0101ab0:	c3                   	ret    

f0101ab1 <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f0101ab1:	55                   	push   %ebp
f0101ab2:	89 e5                	mov    %esp,%ebp
f0101ab4:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f0101ab7:	c7 45 f4 88 13 00 00 	movl   $0x1388,-0xc(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f0101abe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f0101ac5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
#if USE_KHEAP
	{
		switch (number_of_arguments)
f0101acc:	8b 45 08             	mov    0x8(%ebp),%eax
f0101acf:	83 f8 04             	cmp    $0x4,%eax
f0101ad2:	0f 84 94 00 00 00    	je     f0101b6c <CreateEnv+0xbb>
f0101ad8:	83 f8 05             	cmp    $0x5,%eax
f0101adb:	74 0e                	je     f0101aeb <CreateEnv+0x3a>
f0101add:	83 f8 03             	cmp    $0x3,%eax
f0101ae0:	0f 84 ec 00 00 00    	je     f0101bd2 <CreateEnv+0x121>
f0101ae6:	e9 2f 01 00 00       	jmp    f0101c1a <CreateEnv+0x169>
		{
		case 5:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101aeb:	83 ec 0c             	sub    $0xc,%esp
f0101aee:	6a 02                	push   $0x2
f0101af0:	e8 48 c8 00 00       	call   f010e33d <isPageReplacmentAlgorithmLRU>
f0101af5:	83 c4 10             	add    $0x10,%esp
f0101af8:	85 c0                	test   %eax,%eax
f0101afa:	75 1a                	jne    f0101b16 <CreateEnv+0x65>
			{
				cprintf("ERROR: Current Replacement is NOT LRU LISTS, invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0101afc:	83 ec 0c             	sub    $0xc,%esp
f0101aff:	68 44 4f 13 f0       	push   $0xf0134f44
f0101b04:	e8 05 f2 ff ff       	call   f0100d0e <cprintf>
f0101b09:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101b0c:	b8 00 00 00 00       	mov    $0x0,%eax
f0101b11:	e9 d5 01 00 00       	jmp    f0101ceb <CreateEnv+0x23a>
			}
			percent_WS_pages_to_remove = strtol(arguments[4], NULL, 10);
f0101b16:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b19:	83 c0 10             	add    $0x10,%eax
f0101b1c:	8b 00                	mov    (%eax),%eax
f0101b1e:	83 ec 04             	sub    $0x4,%esp
f0101b21:	6a 0a                	push   $0xa
f0101b23:	6a 00                	push   $0x0
f0101b25:	50                   	push   %eax
f0101b26:	e8 18 01 03 00       	call   f0131c43 <strtol>
f0101b2b:	83 c4 10             	add    $0x10,%esp
f0101b2e:	89 45 ec             	mov    %eax,-0x14(%ebp)
			LRUSecondListSize = strtol(arguments[3], NULL, 10);
f0101b31:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b34:	83 c0 0c             	add    $0xc,%eax
f0101b37:	8b 00                	mov    (%eax),%eax
f0101b39:	83 ec 04             	sub    $0x4,%esp
f0101b3c:	6a 0a                	push   $0xa
f0101b3e:	6a 00                	push   $0x0
f0101b40:	50                   	push   %eax
f0101b41:	e8 fd 00 03 00       	call   f0131c43 <strtol>
f0101b46:	83 c4 10             	add    $0x10,%esp
f0101b49:	89 45 f0             	mov    %eax,-0x10(%ebp)
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101b4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b4f:	83 c0 08             	add    $0x8,%eax
f0101b52:	8b 00                	mov    (%eax),%eax
f0101b54:	83 ec 04             	sub    $0x4,%esp
f0101b57:	6a 0a                	push   $0xa
f0101b59:	6a 00                	push   $0x0
f0101b5b:	50                   	push   %eax
f0101b5c:	e8 e2 00 03 00       	call   f0131c43 <strtol>
f0101b61:	83 c4 10             	add    $0x10,%esp
f0101b64:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101b67:	e9 c8 00 00 00       	jmp    f0101c34 <CreateEnv+0x183>
		case 4:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101b6c:	83 ec 0c             	sub    $0xc,%esp
f0101b6f:	6a 02                	push   $0x2
f0101b71:	e8 c7 c7 00 00       	call   f010e33d <isPageReplacmentAlgorithmLRU>
f0101b76:	83 c4 10             	add    $0x10,%esp
f0101b79:	85 c0                	test   %eax,%eax
f0101b7b:	75 1d                	jne    f0101b9a <CreateEnv+0xe9>
			{
				percent_WS_pages_to_remove = strtol(arguments[3], NULL, 10);
f0101b7d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b80:	83 c0 0c             	add    $0xc,%eax
f0101b83:	8b 00                	mov    (%eax),%eax
f0101b85:	83 ec 04             	sub    $0x4,%esp
f0101b88:	6a 0a                	push   $0xa
f0101b8a:	6a 00                	push   $0x0
f0101b8c:	50                   	push   %eax
f0101b8d:	e8 b1 00 03 00       	call   f0131c43 <strtol>
f0101b92:	83 c4 10             	add    $0x10,%esp
f0101b95:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0101b98:	eb 1b                	jmp    f0101bb5 <CreateEnv+0x104>
			}
			else
			{
				LRUSecondListSize = strtol(arguments[3], NULL, 10);
f0101b9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b9d:	83 c0 0c             	add    $0xc,%eax
f0101ba0:	8b 00                	mov    (%eax),%eax
f0101ba2:	83 ec 04             	sub    $0x4,%esp
f0101ba5:	6a 0a                	push   $0xa
f0101ba7:	6a 00                	push   $0x0
f0101ba9:	50                   	push   %eax
f0101baa:	e8 94 00 03 00       	call   f0131c43 <strtol>
f0101baf:	83 c4 10             	add    $0x10,%esp
f0101bb2:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101bb5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101bb8:	83 c0 08             	add    $0x8,%eax
f0101bbb:	8b 00                	mov    (%eax),%eax
f0101bbd:	83 ec 04             	sub    $0x4,%esp
f0101bc0:	6a 0a                	push   $0xa
f0101bc2:	6a 00                	push   $0x0
f0101bc4:	50                   	push   %eax
f0101bc5:	e8 79 00 03 00       	call   f0131c43 <strtol>
f0101bca:	83 c4 10             	add    $0x10,%esp
f0101bcd:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101bd0:	eb 62                	jmp    f0101c34 <CreateEnv+0x183>
		case 3:
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101bd2:	83 ec 0c             	sub    $0xc,%esp
f0101bd5:	6a 02                	push   $0x2
f0101bd7:	e8 61 c7 00 00       	call   f010e33d <isPageReplacmentAlgorithmLRU>
f0101bdc:	83 c4 10             	add    $0x10,%esp
f0101bdf:	85 c0                	test   %eax,%eax
f0101be1:	74 1a                	je     f0101bfd <CreateEnv+0x14c>
			{
				cprintf("ERROR: Current Replacement is LRU LISTS, Please specify a working set size in the 3rd arg and LRU second list size in the 4th arg, aborting.\n");
f0101be3:	83 ec 0c             	sub    $0xc,%esp
f0101be6:	68 04 50 13 f0       	push   $0xf0135004
f0101beb:	e8 1e f1 ff ff       	call   f0100d0e <cprintf>
f0101bf0:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101bf3:	b8 00 00 00 00       	mov    $0x0,%eax
f0101bf8:	e9 ee 00 00 00       	jmp    f0101ceb <CreateEnv+0x23a>
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101bfd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101c00:	83 c0 08             	add    $0x8,%eax
f0101c03:	8b 00                	mov    (%eax),%eax
f0101c05:	83 ec 04             	sub    $0x4,%esp
f0101c08:	6a 0a                	push   $0xa
f0101c0a:	6a 00                	push   $0x0
f0101c0c:	50                   	push   %eax
f0101c0d:	e8 31 00 03 00       	call   f0131c43 <strtol>
f0101c12:	83 c4 10             	add    $0x10,%esp
f0101c15:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101c18:	eb 1a                	jmp    f0101c34 <CreateEnv+0x183>
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0101c1a:	83 ec 0c             	sub    $0xc,%esp
f0101c1d:	68 94 50 13 f0       	push   $0xf0135094
f0101c22:	e8 e7 f0 ff ff       	call   f0100d0e <cprintf>
f0101c27:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101c2a:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c2f:	e9 b7 00 00 00       	jmp    f0101ceb <CreateEnv+0x23a>

			break;
		}
		if(pageWSSize > __PWS_MAX_SIZE)
f0101c34:	81 7d f4 88 13 00 00 	cmpl   $0x1388,-0xc(%ebp)
f0101c3b:	76 1f                	jbe    f0101c5c <CreateEnv+0x1ab>
		{
			cprintf("ERROR: size of WS must be less than or equal to %d... aborting", __PWS_MAX_SIZE);
f0101c3d:	83 ec 08             	sub    $0x8,%esp
f0101c40:	68 88 13 00 00       	push   $0x1388
f0101c45:	68 2c 51 13 f0       	push   $0xf013512c
f0101c4a:	e8 bf f0 ff ff       	call   f0100d0e <cprintf>
f0101c4f:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101c52:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c57:	e9 8f 00 00 00       	jmp    f0101ceb <CreateEnv+0x23a>
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101c5c:	83 ec 0c             	sub    $0xc,%esp
f0101c5f:	6a 02                	push   $0x2
f0101c61:	e8 d7 c6 00 00       	call   f010e33d <isPageReplacmentAlgorithmLRU>
f0101c66:	83 c4 10             	add    $0x10,%esp
f0101c69:	85 c0                	test   %eax,%eax
f0101c6b:	74 20                	je     f0101c8d <CreateEnv+0x1dc>
		{
			if (LRUSecondListSize > pageWSSize - 1)
f0101c6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101c70:	48                   	dec    %eax
f0101c71:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0101c74:	73 17                	jae    f0101c8d <CreateEnv+0x1dc>
			{
				cprintf("ERROR: size of LRU second list can't equal/exceed the size of the page WS... aborting\n");
f0101c76:	83 ec 0c             	sub    $0xc,%esp
f0101c79:	68 6c 51 13 f0       	push   $0xf013516c
f0101c7e:	e8 8b f0 ff ff       	call   f0100d0e <cprintf>
f0101c83:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101c86:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c8b:	eb 5e                	jmp    f0101ceb <CreateEnv+0x23a>
			}
		}
		assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101c8d:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f0101c91:	76 19                	jbe    f0101cac <CreateEnv+0x1fb>
f0101c93:	68 c4 51 13 f0       	push   $0xf01351c4
f0101c98:	68 09 52 13 f0       	push   $0xf0135209
f0101c9d:	68 5a 02 00 00       	push   $0x25a
f0101ca2:	68 8d 4d 13 f0       	push   $0xf0134d8d
f0101ca7:	e8 59 e5 ff ff       	call   f0100205 <_panic>
		{
			LRUSecondListSize = __LRU_SNDLST_SIZE;
		}
	}
#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101cac:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f0101cb0:	76 19                	jbe    f0101ccb <CreateEnv+0x21a>
f0101cb2:	68 c4 51 13 f0       	push   $0xf01351c4
f0101cb7:	68 09 52 13 f0       	push   $0xf0135209
f0101cbc:	68 71 02 00 00       	push   $0x271
f0101cc1:	68 8d 4d 13 f0       	push   $0xf0134d8d
f0101cc6:	e8 3a e5 ff ff       	call   f0100205 <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0101ccb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101cce:	83 c0 04             	add    $0x4,%eax
f0101cd1:	8b 00                	mov    (%eax),%eax
f0101cd3:	ff 75 ec             	pushl  -0x14(%ebp)
f0101cd6:	ff 75 f0             	pushl  -0x10(%ebp)
f0101cd9:	ff 75 f4             	pushl  -0xc(%ebp)
f0101cdc:	50                   	push   %eax
f0101cdd:	e8 7b 77 00 00       	call   f010945d <env_create>
f0101ce2:	83 c4 10             	add    $0x10,%esp
f0101ce5:	89 45 e8             	mov    %eax,-0x18(%ebp)

	return env;
f0101ce8:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0101ceb:	c9                   	leave  
f0101cec:	c3                   	ret    

f0101ced <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f0101ced:	55                   	push   %ebp
f0101cee:	89 e5                	mov    %esp,%ebp
f0101cf0:	83 ec 18             	sub    $0x18,%esp
	//[1] Create and initialize a new environment for the program to be run
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101cf3:	83 ec 08             	sub    $0x8,%esp
f0101cf6:	ff 75 0c             	pushl  0xc(%ebp)
f0101cf9:	ff 75 08             	pushl  0x8(%ebp)
f0101cfc:	e8 b0 fd ff ff       	call   f0101ab1 <CreateEnv>
f0101d01:	83 c4 10             	add    $0x10,%esp
f0101d04:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0101d07:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101d0b:	75 07                	jne    f0101d14 <command_run_program+0x27>
f0101d0d:	b8 00 00 00 00       	mov    $0x0,%eax
f0101d12:	eb 46                	jmp    f0101d5a <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101d14:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d17:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101d1a:	83 ec 08             	sub    $0x8,%esp
f0101d1d:	50                   	push   %eax
f0101d1e:	68 1e 52 13 f0       	push   $0xf013521e
f0101d23:	e8 e6 ef ff ff       	call   f0100d0e <cprintf>
f0101d28:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0101d2b:	c7 05 74 ad 89 f0 00 	movl   $0x0,0xf089ad74
f0101d32:	00 00 00 

	//[2] Run the created environment by adding it to the "ready" queue then invoke the scheduler to execute it
	sched_new_env(env);
f0101d35:	83 ec 0c             	sub    $0xc,%esp
f0101d38:	ff 75 f4             	pushl  -0xc(%ebp)
f0101d3b:	e8 c4 34 00 00       	call   f0105204 <sched_new_env>
f0101d40:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f0101d43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d46:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101d49:	83 ec 0c             	sub    $0xc,%esp
f0101d4c:	50                   	push   %eax
f0101d4d:	e8 cf 34 00 00       	call   f0105221 <sched_run_env>
f0101d52:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101d55:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d5a:	c9                   	leave  
f0101d5b:	c3                   	ret    

f0101d5c <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f0101d5c:	55                   	push   %ebp
f0101d5d:	89 e5                	mov    %esp,%ebp
f0101d5f:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101d62:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d65:	83 c0 04             	add    $0x4,%eax
f0101d68:	8b 00                	mov    (%eax),%eax
f0101d6a:	83 ec 04             	sub    $0x4,%esp
f0101d6d:	6a 0a                	push   $0xa
f0101d6f:	6a 00                	push   $0x0
f0101d71:	50                   	push   %eax
f0101d72:	e8 cc fe 02 00       	call   f0131c43 <strtol>
f0101d77:	83 c4 10             	add    $0x10,%esp
f0101d7a:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f0101d7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d80:	83 ec 0c             	sub    $0xc,%esp
f0101d83:	50                   	push   %eax
f0101d84:	e8 b6 38 00 00       	call   f010563f <sched_kill_env>
f0101d89:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101d8c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d91:	c9                   	leave  
f0101d92:	c3                   	ret    

f0101d93 <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f0101d93:	55                   	push   %ebp
f0101d94:	89 e5                	mov    %esp,%ebp
f0101d96:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101d99:	83 ec 08             	sub    $0x8,%esp
f0101d9c:	ff 75 0c             	pushl  0xc(%ebp)
f0101d9f:	ff 75 08             	pushl  0x8(%ebp)
f0101da2:	e8 0a fd ff ff       	call   f0101ab1 <CreateEnv>
f0101da7:	83 c4 10             	add    $0x10,%esp
f0101daa:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f0101dad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101db1:	75 07                	jne    f0101dba <commnad_load_env+0x27>
		return 0 ;
f0101db3:	b8 00 00 00 00       	mov    $0x0,%eax
f0101db8:	eb 2a                	jmp    f0101de4 <commnad_load_env+0x51>

	sched_new_env(env) ;
f0101dba:	83 ec 0c             	sub    $0xc,%esp
f0101dbd:	ff 75 f4             	pushl  -0xc(%ebp)
f0101dc0:	e8 3f 34 00 00       	call   f0105204 <sched_new_env>
f0101dc5:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101dc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101dcb:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101dce:	83 ec 08             	sub    $0x8,%esp
f0101dd1:	50                   	push   %eax
f0101dd2:	68 1e 52 13 f0       	push   $0xf013521e
f0101dd7:	e8 32 ef ff ff       	call   f0100d0e <cprintf>
f0101ddc:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ddf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101de4:	c9                   	leave  
f0101de5:	c3                   	ret    

f0101de6 <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f0101de6:	55                   	push   %ebp
f0101de7:	89 e5                	mov    %esp,%ebp
f0101de9:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f0101dec:	c7 05 74 ad 89 f0 00 	movl   $0x0,0xf089ad74
f0101df3:	00 00 00 
	sched_run_all();
f0101df6:	e8 51 30 00 00       	call   f0104e4c <sched_run_all>

	return 0 ;
f0101dfb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e00:	c9                   	leave  
f0101e01:	c3                   	ret    

f0101e02 <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0101e02:	55                   	push   %ebp
f0101e03:	89 e5                	mov    %esp,%ebp
f0101e05:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f0101e08:	e8 35 2e 00 00       	call   f0104c42 <sched_print_all>

	return 0 ;
f0101e0d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e12:	c9                   	leave  
f0101e13:	c3                   	ret    

f0101e14 <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0101e14:	55                   	push   %ebp
f0101e15:	89 e5                	mov    %esp,%ebp
f0101e17:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f0101e1a:	e8 a0 30 00 00       	call   f0104ebf <sched_kill_all>

	return 0 ;
f0101e1f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e24:	c9                   	leave  
f0101e25:	c3                   	ret    

f0101e26 <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0101e26:	55                   	push   %ebp
f0101e27:	89 e5                	mov    %esp,%ebp
f0101e29:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f0101e2c:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0101e30:	7f 1a                	jg     f0101e4c <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101e32:	83 ec 0c             	sub    $0xc,%esp
f0101e35:	68 34 52 13 f0       	push   $0xf0135234
f0101e3a:	e8 cf ee ff ff       	call   f0100d0e <cprintf>
f0101e3f:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101e42:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e47:	e9 83 00 00 00       	jmp    f0101ecf <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f0101e4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101e4f:	83 c0 04             	add    $0x4,%eax
f0101e52:	8b 00                	mov    (%eax),%eax
f0101e54:	83 ec 04             	sub    $0x4,%esp
f0101e57:	6a 0a                	push   $0xa
f0101e59:	6a 00                	push   $0x0
f0101e5b:	50                   	push   %eax
f0101e5c:	e8 e2 fd 02 00       	call   f0131c43 <strtol>
f0101e61:	83 c4 10             	add    $0x10,%esp
f0101e64:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f0101e67:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0101e6b:	75 20                	jne    f0101e8d <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101e6d:	83 ec 0c             	sub    $0xc,%esp
f0101e70:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e73:	e8 3a c4 00 00       	call   f010e2b2 <setPageReplacmentAlgorithmLRU>
f0101e78:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f0101e7b:	83 ec 0c             	sub    $0xc,%esp
f0101e7e:	68 94 52 13 f0       	push   $0xf0135294
f0101e83:	e8 86 ee ff ff       	call   f0100d0e <cprintf>
f0101e88:	83 c4 10             	add    $0x10,%esp
f0101e8b:	eb 3d                	jmp    f0101eca <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f0101e8d:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0101e91:	75 20                	jne    f0101eb3 <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101e93:	83 ec 0c             	sub    $0xc,%esp
f0101e96:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e99:	e8 14 c4 00 00       	call   f010e2b2 <setPageReplacmentAlgorithmLRU>
f0101e9e:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f0101ea1:	83 ec 0c             	sub    $0xc,%esp
f0101ea4:	68 d8 52 13 f0       	push   $0xf01352d8
f0101ea9:	e8 60 ee ff ff       	call   f0100d0e <cprintf>
f0101eae:	83 c4 10             	add    $0x10,%esp
f0101eb1:	eb 17                	jmp    f0101eca <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101eb3:	83 ec 0c             	sub    $0xc,%esp
f0101eb6:	68 18 53 13 f0       	push   $0xf0135318
f0101ebb:	e8 4e ee ff ff       	call   f0100d0e <cprintf>
f0101ec0:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101ec3:	b8 00 00 00 00       	mov    $0x0,%eax
f0101ec8:	eb 05                	jmp    f0101ecf <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f0101eca:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101ecf:	c9                   	leave  
f0101ed0:	c3                   	ret    

f0101ed1 <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f0101ed1:	55                   	push   %ebp
f0101ed2:	89 e5                	mov    %esp,%ebp
f0101ed4:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f0101ed7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101eda:	83 c0 04             	add    $0x4,%eax
f0101edd:	8b 00                	mov    (%eax),%eax
f0101edf:	83 ec 04             	sub    $0x4,%esp
f0101ee2:	6a 0a                	push   $0xa
f0101ee4:	6a 00                	push   $0x0
f0101ee6:	50                   	push   %eax
f0101ee7:	e8 57 fd 02 00       	call   f0131c43 <strtol>
f0101eec:	83 c4 10             	add    $0x10,%esp
f0101eef:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f0101ef2:	83 ec 0c             	sub    $0xc,%esp
f0101ef5:	ff 75 f4             	pushl  -0xc(%ebp)
f0101ef8:	e8 28 c4 00 00       	call   f010e325 <setPageReplacmentAlgorithmNchanceCLOCK>
f0101efd:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f0101f00:	83 ec 0c             	sub    $0xc,%esp
f0101f03:	68 6c 53 13 f0       	push   $0xf013536c
f0101f08:	e8 01 ee ff ff       	call   f0100d0e <cprintf>
f0101f0d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f10:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f15:	c9                   	leave  
f0101f16:	c3                   	ret    

f0101f17 <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f0101f17:	55                   	push   %ebp
f0101f18:	89 e5                	mov    %esp,%ebp
f0101f1a:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0101f1d:	e8 c3 c3 00 00       	call   f010e2e5 <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f0101f22:	83 ec 0c             	sub    $0xc,%esp
f0101f25:	68 a0 53 13 f0       	push   $0xf01353a0
f0101f2a:	e8 df ed ff ff       	call   f0100d0e <cprintf>
f0101f2f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f32:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f37:	c9                   	leave  
f0101f38:	c3                   	ret    

f0101f39 <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0101f39:	55                   	push   %ebp
f0101f3a:	89 e5                	mov    %esp,%ebp
f0101f3c:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f0101f3f:	e8 b1 c3 00 00       	call   f010e2f5 <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0101f44:	83 ec 0c             	sub    $0xc,%esp
f0101f47:	68 cc 53 13 f0       	push   $0xf01353cc
f0101f4c:	e8 bd ed ff ff       	call   f0100d0e <cprintf>
f0101f51:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f54:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f59:	c9                   	leave  
f0101f5a:	c3                   	ret    

f0101f5b <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0101f5b:	55                   	push   %ebp
f0101f5c:	89 e5                	mov    %esp,%ebp
f0101f5e:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f0101f61:	e8 9f c3 00 00       	call   f010e305 <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0101f66:	83 ec 0c             	sub    $0xc,%esp
f0101f69:	68 f4 53 13 f0       	push   $0xf01353f4
f0101f6e:	e8 9b ed ff ff       	call   f0100d0e <cprintf>
f0101f73:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f76:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f7b:	c9                   	leave  
f0101f7c:	c3                   	ret    

f0101f7d <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0101f7d:	55                   	push   %ebp
f0101f7e:	89 e5                	mov    %esp,%ebp
f0101f80:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f0101f83:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101f86:	83 c0 04             	add    $0x4,%eax
f0101f89:	8b 00                	mov    (%eax),%eax
f0101f8b:	83 ec 04             	sub    $0x4,%esp
f0101f8e:	6a 0a                	push   $0xa
f0101f90:	6a 00                	push   $0x0
f0101f92:	50                   	push   %eax
f0101f93:	e8 ab fc 02 00       	call   f0131c43 <strtol>
f0101f98:	83 c4 10             	add    $0x10,%esp
f0101f9b:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f0101f9e:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0101fa2:	83 ec 0c             	sub    $0xc,%esp
f0101fa5:	50                   	push   %eax
f0101fa6:	e8 67 28 00 00       	call   f0104812 <sched_init_RR>
f0101fab:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f0101fae:	a1 2c ad 89 f0       	mov    0xf089ad2c,%eax
f0101fb3:	8a 00                	mov    (%eax),%al
f0101fb5:	0f b6 c0             	movzbl %al,%eax
f0101fb8:	83 ec 08             	sub    $0x8,%esp
f0101fbb:	50                   	push   %eax
f0101fbc:	68 28 54 13 f0       	push   $0xf0135428
f0101fc1:	e8 48 ed ff ff       	call   f0100d0e <cprintf>
f0101fc6:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101fc9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101fce:	c9                   	leave  
f0101fcf:	c3                   	ret    

f0101fd0 <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f0101fd0:	55                   	push   %ebp
f0101fd1:	89 e5                	mov    %esp,%ebp
f0101fd3:	53                   	push   %ebx
f0101fd4:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0101fd7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101fda:	83 c0 04             	add    $0x4,%eax
f0101fdd:	8b 00                	mov    (%eax),%eax
f0101fdf:	83 ec 04             	sub    $0x4,%esp
f0101fe2:	6a 0a                	push   $0xa
f0101fe4:	6a 00                	push   $0x0
f0101fe6:	50                   	push   %eax
f0101fe7:	e8 57 fc 02 00       	call   f0131c43 <strtol>
f0101fec:	83 c4 10             	add    $0x10,%esp
f0101fef:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0101ff2:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101ff9:	eb 2e                	jmp    f0102029 <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f0101ffb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101ffe:	8d 58 fe             	lea    -0x2(%eax),%ebx
f0102001:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102004:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010200b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010200e:	01 d0                	add    %edx,%eax
f0102010:	8b 00                	mov    (%eax),%eax
f0102012:	83 ec 04             	sub    $0x4,%esp
f0102015:	6a 0a                	push   $0xa
f0102017:	6a 00                	push   $0x0
f0102019:	50                   	push   %eax
f010201a:	e8 24 fc 02 00       	call   f0131c43 <strtol>
f010201f:	83 c4 10             	add    $0x10,%esp
f0102022:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0102026:	ff 45 f4             	incl   -0xc(%ebp)
f0102029:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010202c:	3b 45 08             	cmp    0x8(%ebp),%eax
f010202f:	7c ca                	jl     f0101ffb <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f0102031:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f0102035:	83 ec 08             	sub    $0x8,%esp
f0102038:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f010203b:	52                   	push   %edx
f010203c:	50                   	push   %eax
f010203d:	e8 5b 28 00 00       	call   f010489d <sched_init_MLFQ>
f0102042:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f0102045:	83 ec 0c             	sub    $0xc,%esp
f0102048:	68 60 54 13 f0       	push   $0xf0135460
f010204d:	e8 bc ec ff ff       	call   f0100d0e <cprintf>
f0102052:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0102055:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010205c:	eb 24                	jmp    f0102082 <command_sch_MLFQ+0xb2>
	{
		cprintf("%d   ", quantums[i]) ;
f010205e:	8b 15 2c ad 89 f0    	mov    0xf089ad2c,%edx
f0102064:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102067:	01 d0                	add    %edx,%eax
f0102069:	8a 00                	mov    (%eax),%al
f010206b:	0f b6 c0             	movzbl %al,%eax
f010206e:	83 ec 08             	sub    $0x8,%esp
f0102071:	50                   	push   %eax
f0102072:	68 8d 54 13 f0       	push   $0xf013548d
f0102077:	e8 92 ec ff ff       	call   f0100d0e <cprintf>
f010207c:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f010207f:	ff 45 f0             	incl   -0x10(%ebp)
f0102082:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0102087:	0f b6 c0             	movzbl %al,%eax
f010208a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010208d:	7f cf                	jg     f010205e <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f010208f:	83 ec 0c             	sub    $0xc,%esp
f0102092:	68 15 4e 13 f0       	push   $0xf0134e15
f0102097:	e8 72 ec ff ff       	call   f0100d0e <cprintf>
f010209c:	83 c4 10             	add    $0x10,%esp
	return 0;
f010209f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01020a4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01020a7:	c9                   	leave  
f01020a8:	c3                   	ret    

f01020a9 <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f01020a9:	55                   	push   %ebp
f01020aa:	89 e5                	mov    %esp,%ebp
f01020ac:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f01020af:	e8 8d 23 00 00       	call   f0104441 <isSchedMethodMLFQ>
f01020b4:	85 c0                	test   %eax,%eax
f01020b6:	74 5c                	je     f0102114 <command_print_sch_method+0x6b>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f01020b8:	83 ec 0c             	sub    $0xc,%esp
f01020bb:	68 94 54 13 f0       	push   $0xf0135494
f01020c0:	e8 49 ec ff ff       	call   f0100d0e <cprintf>
f01020c5:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f01020c8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01020cf:	eb 24                	jmp    f01020f5 <command_print_sch_method+0x4c>
		{
			cprintf("%d   ", quantums[i]) ;
f01020d1:	8b 15 2c ad 89 f0    	mov    0xf089ad2c,%edx
f01020d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01020da:	01 d0                	add    %edx,%eax
f01020dc:	8a 00                	mov    (%eax),%al
f01020de:	0f b6 c0             	movzbl %al,%eax
f01020e1:	83 ec 08             	sub    $0x8,%esp
f01020e4:	50                   	push   %eax
f01020e5:	68 8d 54 13 f0       	push   $0xf013548d
f01020ea:	e8 1f ec ff ff       	call   f0100d0e <cprintf>
f01020ef:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f01020f2:	ff 45 f4             	incl   -0xc(%ebp)
f01020f5:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01020fa:	0f b6 c0             	movzbl %al,%eax
f01020fd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0102100:	7f cf                	jg     f01020d1 <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f0102102:	83 ec 0c             	sub    $0xc,%esp
f0102105:	68 15 4e 13 f0       	push   $0xf0134e15
f010210a:	e8 ff eb ff ff       	call   f0100d0e <cprintf>
f010210f:	83 c4 10             	add    $0x10,%esp
f0102112:	eb 36                	jmp    f010214a <command_print_sch_method+0xa1>
	}
	else if (isSchedMethodRR())
f0102114:	e8 0e 23 00 00       	call   f0104427 <isSchedMethodRR>
f0102119:	85 c0                	test   %eax,%eax
f010211b:	74 1d                	je     f010213a <command_print_sch_method+0x91>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f010211d:	a1 2c ad 89 f0       	mov    0xf089ad2c,%eax
f0102122:	8a 00                	mov    (%eax),%al
f0102124:	0f b6 c0             	movzbl %al,%eax
f0102127:	83 ec 08             	sub    $0x8,%esp
f010212a:	50                   	push   %eax
f010212b:	68 c8 54 13 f0       	push   $0xf01354c8
f0102130:	e8 d9 eb ff ff       	call   f0100d0e <cprintf>
f0102135:	83 c4 10             	add    $0x10,%esp
f0102138:	eb 10                	jmp    f010214a <command_print_sch_method+0xa1>
	}

	else
		cprintf("Current scheduler method is UNDEFINED\n");
f010213a:	83 ec 0c             	sub    $0xc,%esp
f010213d:	68 04 55 13 f0       	push   $0xf0135504
f0102142:	e8 c7 eb ff ff       	call   f0100d0e <cprintf>
f0102147:	83 c4 10             	add    $0x10,%esp

	return 0;
f010214a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010214f:	c9                   	leave  
f0102150:	c3                   	ret    

f0102151 <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f0102151:	55                   	push   %ebp
f0102152:	89 e5                	mov    %esp,%ebp
f0102154:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f0102157:	8b 45 0c             	mov    0xc(%ebp),%eax
f010215a:	83 c0 04             	add    $0x4,%eax
f010215d:	8b 00                	mov    (%eax),%eax
f010215f:	83 ec 04             	sub    $0x4,%esp
f0102162:	6a 0a                	push   $0xa
f0102164:	6a 00                	push   $0x0
f0102166:	50                   	push   %eax
f0102167:	e8 d7 fa 02 00       	call   f0131c43 <strtol>
f010216c:	83 c4 10             	add    $0x10,%esp
f010216f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f0102172:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102175:	0f b6 c0             	movzbl %al,%eax
f0102178:	83 ec 0c             	sub    $0xc,%esp
f010217b:	50                   	push   %eax
f010217c:	e8 e8 e9 02 00       	call   f0130b69 <chksch>
f0102181:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f0102184:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102188:	75 12                	jne    f010219c <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f010218a:	83 ec 0c             	sub    $0xc,%esp
f010218d:	68 2c 55 13 f0       	push   $0xf013552c
f0102192:	e8 77 eb ff ff       	call   f0100d0e <cprintf>
f0102197:	83 c4 10             	add    $0x10,%esp
f010219a:	eb 16                	jmp    f01021b2 <command_sch_test+0x61>
	else if (status == 1)
f010219c:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01021a0:	75 10                	jne    f01021b2 <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f01021a2:	83 ec 0c             	sub    $0xc,%esp
f01021a5:	68 54 55 13 f0       	push   $0xf0135554
f01021aa:	e8 5f eb ff ff       	call   f0100d0e <cprintf>
f01021af:	83 c4 10             	add    $0x10,%esp
	return 0;
f01021b2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01021b7:	c9                   	leave  
f01021b8:	c3                   	ret    

f01021b9 <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f01021b9:	55                   	push   %ebp
f01021ba:	89 e5                	mov    %esp,%ebp
f01021bc:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f01021bf:	e8 8f c1 00 00       	call   f010e353 <isPageReplacmentAlgorithmCLOCK>
f01021c4:	85 c0                	test   %eax,%eax
f01021c6:	74 15                	je     f01021dd <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f01021c8:	83 ec 0c             	sub    $0xc,%esp
f01021cb:	68 78 55 13 f0       	push   $0xf0135578
f01021d0:	e8 39 eb ff ff       	call   f0100d0e <cprintf>
f01021d5:	83 c4 10             	add    $0x10,%esp
f01021d8:	e9 8c 00 00 00       	jmp    f0102269 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f01021dd:	83 ec 0c             	sub    $0xc,%esp
f01021e0:	6a 01                	push   $0x1
f01021e2:	e8 56 c1 00 00       	call   f010e33d <isPageReplacmentAlgorithmLRU>
f01021e7:	83 c4 10             	add    $0x10,%esp
f01021ea:	85 c0                	test   %eax,%eax
f01021ec:	74 12                	je     f0102200 <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f01021ee:	83 ec 0c             	sub    $0xc,%esp
f01021f1:	68 a0 55 13 f0       	push   $0xf01355a0
f01021f6:	e8 13 eb ff ff       	call   f0100d0e <cprintf>
f01021fb:	83 c4 10             	add    $0x10,%esp
f01021fe:	eb 69                	jmp    f0102269 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0102200:	83 ec 0c             	sub    $0xc,%esp
f0102203:	6a 02                	push   $0x2
f0102205:	e8 33 c1 00 00       	call   f010e33d <isPageReplacmentAlgorithmLRU>
f010220a:	83 c4 10             	add    $0x10,%esp
f010220d:	85 c0                	test   %eax,%eax
f010220f:	74 12                	je     f0102223 <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f0102211:	83 ec 0c             	sub    $0xc,%esp
f0102214:	68 e0 55 13 f0       	push   $0xf01355e0
f0102219:	e8 f0 ea ff ff       	call   f0100d0e <cprintf>
f010221e:	83 c4 10             	add    $0x10,%esp
f0102221:	eb 46                	jmp    f0102269 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f0102223:	e8 46 c1 00 00       	call   f010e36e <isPageReplacmentAlgorithmFIFO>
f0102228:	85 c0                	test   %eax,%eax
f010222a:	74 12                	je     f010223e <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f010222c:	83 ec 0c             	sub    $0xc,%esp
f010222f:	68 1c 56 13 f0       	push   $0xf013561c
f0102234:	e8 d5 ea ff ff       	call   f0100d0e <cprintf>
f0102239:	83 c4 10             	add    $0x10,%esp
f010223c:	eb 2b                	jmp    f0102269 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f010223e:	e8 46 c1 00 00       	call   f010e389 <isPageReplacmentAlgorithmModifiedCLOCK>
f0102243:	85 c0                	test   %eax,%eax
f0102245:	74 12                	je     f0102259 <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f0102247:	83 ec 0c             	sub    $0xc,%esp
f010224a:	68 40 56 13 f0       	push   $0xf0135640
f010224f:	e8 ba ea ff ff       	call   f0100d0e <cprintf>
f0102254:	83 c4 10             	add    $0x10,%esp
f0102257:	eb 10                	jmp    f0102269 <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f0102259:	83 ec 0c             	sub    $0xc,%esp
f010225c:	68 70 56 13 f0       	push   $0xf0135670
f0102261:	e8 a8 ea ff ff       	call   f0100d0e <cprintf>
f0102266:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102269:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010226e:	c9                   	leave  
f010226f:	c3                   	ret    

f0102270 <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f0102270:	55                   	push   %ebp
f0102271:	89 e5                	mov    %esp,%ebp
f0102273:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f0102276:	e8 18 ed ff ff       	call   f0100f93 <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f010227b:	83 ec 0c             	sub    $0xc,%esp
f010227e:	68 9c 56 13 f0       	push   $0xf013569c
f0102283:	e8 86 ea ff ff       	call   f0100d0e <cprintf>
f0102288:	83 c4 10             	add    $0x10,%esp
	return 0;
f010228b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102290:	c9                   	leave  
f0102291:	c3                   	ret    

f0102292 <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0102292:	55                   	push   %ebp
f0102293:	89 e5                	mov    %esp,%ebp
f0102295:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f0102298:	e8 06 ed ff ff       	call   f0100fa3 <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f010229d:	83 ec 0c             	sub    $0xc,%esp
f01022a0:	68 cc 56 13 f0       	push   $0xf01356cc
f01022a5:	e8 64 ea ff ff       	call   f0100d0e <cprintf>
f01022aa:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022ad:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022b2:	c9                   	leave  
f01022b3:	c3                   	ret    

f01022b4 <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f01022b4:	55                   	push   %ebp
f01022b5:	89 e5                	mov    %esp,%ebp
f01022b7:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f01022ba:	e8 f4 ec ff ff       	call   f0100fb3 <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f01022bf:	83 ec 0c             	sub    $0xc,%esp
f01022c2:	68 fc 56 13 f0       	push   $0xf01356fc
f01022c7:	e8 42 ea ff ff       	call   f0100d0e <cprintf>
f01022cc:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022cf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022d4:	c9                   	leave  
f01022d5:	c3                   	ret    

f01022d6 <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f01022d6:	55                   	push   %ebp
f01022d7:	89 e5                	mov    %esp,%ebp
f01022d9:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f01022dc:	e8 e2 ec ff ff       	call   f0100fc3 <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f01022e1:	83 ec 0c             	sub    $0xc,%esp
f01022e4:	68 2c 57 13 f0       	push   $0xf013572c
f01022e9:	e8 20 ea ff ff       	call   f0100d0e <cprintf>
f01022ee:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022f1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022f6:	c9                   	leave  
f01022f7:	c3                   	ret    

f01022f8 <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f01022f8:	55                   	push   %ebp
f01022f9:	89 e5                	mov    %esp,%ebp
f01022fb:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f01022fe:	e8 d0 ec ff ff       	call   f0100fd3 <isUHeapPlacementStrategyFIRSTFIT>
f0102303:	84 c0                	test   %al,%al
f0102305:	74 12                	je     f0102319 <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f0102307:	83 ec 0c             	sub    $0xc,%esp
f010230a:	68 5c 57 13 f0       	push   $0xf013575c
f010230f:	e8 fa e9 ff ff       	call   f0100d0e <cprintf>
f0102314:	83 c4 10             	add    $0x10,%esp
f0102317:	eb 61                	jmp    f010237a <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f0102319:	e8 ca ec ff ff       	call   f0100fe8 <isUHeapPlacementStrategyBESTFIT>
f010231e:	84 c0                	test   %al,%al
f0102320:	74 12                	je     f0102334 <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f0102322:	83 ec 0c             	sub    $0xc,%esp
f0102325:	68 88 57 13 f0       	push   $0xf0135788
f010232a:	e8 df e9 ff ff       	call   f0100d0e <cprintf>
f010232f:	83 c4 10             	add    $0x10,%esp
f0102332:	eb 46                	jmp    f010237a <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f0102334:	e8 c4 ec ff ff       	call   f0100ffd <isUHeapPlacementStrategyNEXTFIT>
f0102339:	84 c0                	test   %al,%al
f010233b:	74 12                	je     f010234f <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f010233d:	83 ec 0c             	sub    $0xc,%esp
f0102340:	68 b4 57 13 f0       	push   $0xf01357b4
f0102345:	e8 c4 e9 ff ff       	call   f0100d0e <cprintf>
f010234a:	83 c4 10             	add    $0x10,%esp
f010234d:	eb 2b                	jmp    f010237a <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f010234f:	e8 be ec ff ff       	call   f0101012 <isUHeapPlacementStrategyWORSTFIT>
f0102354:	84 c0                	test   %al,%al
f0102356:	74 12                	je     f010236a <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f0102358:	83 ec 0c             	sub    $0xc,%esp
f010235b:	68 e0 57 13 f0       	push   $0xf01357e0
f0102360:	e8 a9 e9 ff ff       	call   f0100d0e <cprintf>
f0102365:	83 c4 10             	add    $0x10,%esp
f0102368:	eb 10                	jmp    f010237a <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f010236a:	83 ec 0c             	sub    $0xc,%esp
f010236d:	68 0c 58 13 f0       	push   $0xf013580c
f0102372:	e8 97 e9 ff ff       	call   f0100d0e <cprintf>
f0102377:	83 c4 10             	add    $0x10,%esp

	return 0;
f010237a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010237f:	c9                   	leave  
f0102380:	c3                   	ret    

f0102381 <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f0102381:	55                   	push   %ebp
f0102382:	89 e5                	mov    %esp,%ebp
f0102384:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f0102387:	e8 4f eb ff ff       	call   f0100edb <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f010238c:	83 ec 0c             	sub    $0xc,%esp
f010238f:	68 38 58 13 f0       	push   $0xf0135838
f0102394:	e8 75 e9 ff ff       	call   f0100d0e <cprintf>
f0102399:	83 c4 10             	add    $0x10,%esp
	return 0;
f010239c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023a1:	c9                   	leave  
f01023a2:	c3                   	ret    

f01023a3 <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f01023a3:	55                   	push   %ebp
f01023a4:	89 e5                	mov    %esp,%ebp
f01023a6:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f01023a9:	e8 3d eb ff ff       	call   f0100eeb <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f01023ae:	83 ec 0c             	sub    $0xc,%esp
f01023b1:	68 38 58 13 f0       	push   $0xf0135838
f01023b6:	e8 53 e9 ff ff       	call   f0100d0e <cprintf>
f01023bb:	83 c4 10             	add    $0x10,%esp
	return 0;
f01023be:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023c3:	c9                   	leave  
f01023c4:	c3                   	ret    

f01023c5 <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f01023c5:	55                   	push   %ebp
f01023c6:	89 e5                	mov    %esp,%ebp
f01023c8:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f01023cb:	e8 2b eb ff ff       	call   f0100efb <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f01023d0:	83 ec 0c             	sub    $0xc,%esp
f01023d3:	68 6c 58 13 f0       	push   $0xf013586c
f01023d8:	e8 31 e9 ff ff       	call   f0100d0e <cprintf>
f01023dd:	83 c4 10             	add    $0x10,%esp
	return 0;
f01023e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023e5:	c9                   	leave  
f01023e6:	c3                   	ret    

f01023e7 <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f01023e7:	55                   	push   %ebp
f01023e8:	89 e5                	mov    %esp,%ebp
f01023ea:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f01023ed:	e8 19 eb ff ff       	call   f0100f0b <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f01023f2:	83 ec 0c             	sub    $0xc,%esp
f01023f5:	68 9c 58 13 f0       	push   $0xf013589c
f01023fa:	e8 0f e9 ff ff       	call   f0100d0e <cprintf>
f01023ff:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102402:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102407:	c9                   	leave  
f0102408:	c3                   	ret    

f0102409 <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0102409:	55                   	push   %ebp
f010240a:	89 e5                	mov    %esp,%ebp
f010240c:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f010240f:	e8 07 eb ff ff       	call   f0100f1b <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f0102414:	83 ec 0c             	sub    $0xc,%esp
f0102417:	68 cc 58 13 f0       	push   $0xf01358cc
f010241c:	e8 ed e8 ff ff       	call   f0100d0e <cprintf>
f0102421:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102424:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102429:	c9                   	leave  
f010242a:	c3                   	ret    

f010242b <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f010242b:	55                   	push   %ebp
f010242c:	89 e5                	mov    %esp,%ebp
f010242e:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f0102431:	e8 f5 ea ff ff       	call   f0100f2b <isKHeapPlacementStrategyCONTALLOC>
f0102436:	84 c0                	test   %al,%al
f0102438:	74 12                	je     f010244c <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f010243a:	83 ec 0c             	sub    $0xc,%esp
f010243d:	68 00 59 13 f0       	push   $0xf0135900
f0102442:	e8 c7 e8 ff ff       	call   f0100d0e <cprintf>
f0102447:	83 c4 10             	add    $0x10,%esp
f010244a:	eb 7c                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f010244c:	e8 ee ea ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f0102451:	84 c0                	test   %al,%al
f0102453:	74 12                	je     f0102467 <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0102455:	83 ec 0c             	sub    $0xc,%esp
f0102458:	68 3c 59 13 f0       	push   $0xf013593c
f010245d:	e8 ac e8 ff ff       	call   f0100d0e <cprintf>
f0102462:	83 c4 10             	add    $0x10,%esp
f0102465:	eb 61                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f0102467:	e8 e8 ea ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f010246c:	84 c0                	test   %al,%al
f010246e:	74 12                	je     f0102482 <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f0102470:	83 ec 0c             	sub    $0xc,%esp
f0102473:	68 6c 59 13 f0       	push   $0xf013596c
f0102478:	e8 91 e8 ff ff       	call   f0100d0e <cprintf>
f010247d:	83 c4 10             	add    $0x10,%esp
f0102480:	eb 46                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f0102482:	e8 e2 ea ff ff       	call   f0100f69 <isKHeapPlacementStrategyNEXTFIT>
f0102487:	84 c0                	test   %al,%al
f0102489:	74 12                	je     f010249d <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f010248b:	83 ec 0c             	sub    $0xc,%esp
f010248e:	68 98 59 13 f0       	push   $0xf0135998
f0102493:	e8 76 e8 ff ff       	call   f0100d0e <cprintf>
f0102498:	83 c4 10             	add    $0x10,%esp
f010249b:	eb 2b                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f010249d:	e8 dc ea ff ff       	call   f0100f7e <isKHeapPlacementStrategyWORSTFIT>
f01024a2:	84 c0                	test   %al,%al
f01024a4:	74 12                	je     f01024b8 <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f01024a6:	83 ec 0c             	sub    $0xc,%esp
f01024a9:	68 c4 59 13 f0       	push   $0xf01359c4
f01024ae:	e8 5b e8 ff ff       	call   f0100d0e <cprintf>
f01024b3:	83 c4 10             	add    $0x10,%esp
f01024b6:	eb 10                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f01024b8:	83 ec 0c             	sub    $0xc,%esp
f01024bb:	68 f4 59 13 f0       	push   $0xf01359f4
f01024c0:	e8 49 e8 ff ff       	call   f0100d0e <cprintf>
f01024c5:	83 c4 10             	add    $0x10,%esp

	return 0;
f01024c8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024cd:	c9                   	leave  
f01024ce:	c3                   	ret    

f01024cf <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f01024cf:	55                   	push   %ebp
f01024d0:	89 e5                	mov    %esp,%ebp
f01024d2:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01024d5:	e8 26 bf 00 00       	call   f010e400 <isBufferingEnabled>
f01024da:	84 c0                	test   %al,%al
f01024dc:	75 12                	jne    f01024f0 <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f01024de:	83 ec 0c             	sub    $0xc,%esp
f01024e1:	68 24 5a 13 f0       	push   $0xf0135a24
f01024e6:	e8 23 e8 ff ff       	call   f0100d0e <cprintf>
f01024eb:	83 c4 10             	add    $0x10,%esp
f01024ee:	eb 1d                	jmp    f010250d <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f01024f0:	83 ec 0c             	sub    $0xc,%esp
f01024f3:	6a 00                	push   $0x0
f01024f5:	e8 e0 be 00 00       	call   f010e3da <enableModifiedBuffer>
f01024fa:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f01024fd:	83 ec 0c             	sub    $0xc,%esp
f0102500:	68 60 5a 13 f0       	push   $0xf0135a60
f0102505:	e8 04 e8 ff ff       	call   f0100d0e <cprintf>
f010250a:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f010250d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102512:	c9                   	leave  
f0102513:	c3                   	ret    

f0102514 <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f0102514:	55                   	push   %ebp
f0102515:	89 e5                	mov    %esp,%ebp
f0102517:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010251a:	e8 e1 be 00 00       	call   f010e400 <isBufferingEnabled>
f010251f:	84 c0                	test   %al,%al
f0102521:	75 12                	jne    f0102535 <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f0102523:	83 ec 0c             	sub    $0xc,%esp
f0102526:	68 24 5a 13 f0       	push   $0xf0135a24
f010252b:	e8 de e7 ff ff       	call   f0100d0e <cprintf>
f0102530:	83 c4 10             	add    $0x10,%esp
f0102533:	eb 1d                	jmp    f0102552 <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f0102535:	83 ec 0c             	sub    $0xc,%esp
f0102538:	6a 01                	push   $0x1
f010253a:	e8 9b be 00 00       	call   f010e3da <enableModifiedBuffer>
f010253f:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f0102542:	83 ec 0c             	sub    $0xc,%esp
f0102545:	68 84 5a 13 f0       	push   $0xf0135a84
f010254a:	e8 bf e7 ff ff       	call   f0100d0e <cprintf>
f010254f:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102552:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102557:	c9                   	leave  
f0102558:	c3                   	ret    

f0102559 <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f0102559:	55                   	push   %ebp
f010255a:	89 e5                	mov    %esp,%ebp
f010255c:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f010255f:	83 ec 0c             	sub    $0xc,%esp
f0102562:	6a 00                	push   $0x0
f0102564:	e8 89 be 00 00       	call   f010e3f2 <enableBuffering>
f0102569:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f010256c:	83 ec 0c             	sub    $0xc,%esp
f010256f:	6a 00                	push   $0x0
f0102571:	e8 64 be 00 00       	call   f010e3da <enableModifiedBuffer>
f0102576:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f0102579:	83 ec 0c             	sub    $0xc,%esp
f010257c:	68 a4 5a 13 f0       	push   $0xf0135aa4
f0102581:	e8 88 e7 ff ff       	call   f0100d0e <cprintf>
f0102586:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102589:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010258e:	c9                   	leave  
f010258f:	c3                   	ret    

f0102590 <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f0102590:	55                   	push   %ebp
f0102591:	89 e5                	mov    %esp,%ebp
f0102593:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f0102596:	83 ec 0c             	sub    $0xc,%esp
f0102599:	6a 01                	push   $0x1
f010259b:	e8 52 be 00 00       	call   f010e3f2 <enableBuffering>
f01025a0:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f01025a3:	83 ec 0c             	sub    $0xc,%esp
f01025a6:	6a 01                	push   $0x1
f01025a8:	e8 2d be 00 00       	call   f010e3da <enableModifiedBuffer>
f01025ad:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f01025b0:	e8 63 be 00 00       	call   f010e418 <getModifiedBufferLength>
f01025b5:	85 c0                	test   %eax,%eax
f01025b7:	75 59                	jne    f0102612 <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f01025b9:	83 ec 0c             	sub    $0xc,%esp
f01025bc:	68 c0 5a 13 f0       	push   $0xf0135ac0
f01025c1:	e8 48 e7 ff ff       	call   f0100d0e <cprintf>
f01025c6:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f01025c9:	83 ec 08             	sub    $0x8,%esp
f01025cc:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01025cf:	50                   	push   %eax
f01025d0:	68 f0 5a 13 f0       	push   $0xf0135af0
f01025d5:	e8 03 f1 02 00       	call   f01316dd <readline>
f01025da:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f01025dd:	83 ec 04             	sub    $0x4,%esp
f01025e0:	6a 0a                	push   $0xa
f01025e2:	6a 00                	push   $0x0
f01025e4:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01025e7:	50                   	push   %eax
f01025e8:	e8 56 f6 02 00       	call   f0131c43 <strtol>
f01025ed:	83 c4 10             	add    $0x10,%esp
f01025f0:	83 ec 0c             	sub    $0xc,%esp
f01025f3:	50                   	push   %eax
f01025f4:	e8 11 be 00 00       	call   f010e40a <setModifiedBufferLength>
f01025f9:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01025fc:	e8 17 be 00 00       	call   f010e418 <getModifiedBufferLength>
f0102601:	83 ec 08             	sub    $0x8,%esp
f0102604:	50                   	push   %eax
f0102605:	68 1c 5b 13 f0       	push   $0xf0135b1c
f010260a:	e8 ff e6 ff ff       	call   f0100d0e <cprintf>
f010260f:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f0102612:	83 ec 0c             	sub    $0xc,%esp
f0102615:	68 41 5b 13 f0       	push   $0xf0135b41
f010261a:	e8 ef e6 ff ff       	call   f0100d0e <cprintf>
f010261f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102622:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102627:	c9                   	leave  
f0102628:	c3                   	ret    

f0102629 <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0102629:	55                   	push   %ebp
f010262a:	89 e5                	mov    %esp,%ebp
f010262c:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010262f:	e8 cc bd 00 00       	call   f010e400 <isBufferingEnabled>
f0102634:	84 c0                	test   %al,%al
f0102636:	75 12                	jne    f010264a <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f0102638:	83 ec 0c             	sub    $0xc,%esp
f010263b:	68 5c 5b 13 f0       	push   $0xf0135b5c
f0102640:	e8 c9 e6 ff ff       	call   f0100d0e <cprintf>
f0102645:	83 c4 10             	add    $0x10,%esp
f0102648:	eb 19                	jmp    f0102663 <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f010264a:	e8 99 bd 00 00       	call   f010e3e8 <isModifiedBufferEnabled>
f010264f:	84 c0                	test   %al,%al
f0102651:	75 10                	jne    f0102663 <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f0102653:	83 ec 0c             	sub    $0xc,%esp
f0102656:	68 ac 5b 13 f0       	push   $0xf0135bac
f010265b:	e8 ae e6 ff ff       	call   f0100d0e <cprintf>
f0102660:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f0102663:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102666:	83 c0 04             	add    $0x4,%eax
f0102669:	8b 00                	mov    (%eax),%eax
f010266b:	83 ec 04             	sub    $0x4,%esp
f010266e:	6a 0a                	push   $0xa
f0102670:	6a 00                	push   $0x0
f0102672:	50                   	push   %eax
f0102673:	e8 cb f5 02 00       	call   f0131c43 <strtol>
f0102678:	83 c4 10             	add    $0x10,%esp
f010267b:	83 ec 0c             	sub    $0xc,%esp
f010267e:	50                   	push   %eax
f010267f:	e8 86 bd 00 00       	call   f010e40a <setModifiedBufferLength>
f0102684:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0102687:	e8 8c bd 00 00       	call   f010e418 <getModifiedBufferLength>
f010268c:	83 ec 08             	sub    $0x8,%esp
f010268f:	50                   	push   %eax
f0102690:	68 1c 5b 13 f0       	push   $0xf0135b1c
f0102695:	e8 74 e6 ff ff       	call   f0100d0e <cprintf>
f010269a:	83 c4 10             	add    $0x10,%esp
	return 0;
f010269d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026a2:	c9                   	leave  
f01026a3:	c3                   	ret    

f01026a4 <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f01026a4:	55                   	push   %ebp
f01026a5:	89 e5                	mov    %esp,%ebp
f01026a7:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01026aa:	e8 51 bd 00 00       	call   f010e400 <isBufferingEnabled>
f01026af:	84 c0                	test   %al,%al
f01026b1:	75 12                	jne    f01026c5 <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f01026b3:	83 ec 0c             	sub    $0xc,%esp
f01026b6:	68 5c 5b 13 f0       	push   $0xf0135b5c
f01026bb:	e8 4e e6 ff ff       	call   f0100d0e <cprintf>
f01026c0:	83 c4 10             	add    $0x10,%esp
f01026c3:	eb 19                	jmp    f01026de <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f01026c5:	e8 1e bd 00 00       	call   f010e3e8 <isModifiedBufferEnabled>
f01026ca:	84 c0                	test   %al,%al
f01026cc:	75 10                	jne    f01026de <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f01026ce:	83 ec 0c             	sub    $0xc,%esp
f01026d1:	68 ac 5b 13 f0       	push   $0xf0135bac
f01026d6:	e8 33 e6 ff ff       	call   f0100d0e <cprintf>
f01026db:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f01026de:	e8 35 bd 00 00       	call   f010e418 <getModifiedBufferLength>
f01026e3:	83 ec 08             	sub    $0x8,%esp
f01026e6:	50                   	push   %eax
f01026e7:	68 f2 5b 13 f0       	push   $0xf0135bf2
f01026ec:	e8 1d e6 ff ff       	call   f0100d0e <cprintf>
f01026f1:	83 c4 10             	add    $0x10,%esp
	return 0;
f01026f4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026f9:	c9                   	leave  
f01026fa:	c3                   	ret    

f01026fb <command_test_kmalloc>:

/*TESTING Commands*/
int command_test_kmalloc(int number_of_arguments, char **arguments)
{
f01026fb:	55                   	push   %ebp
f01026fc:	89 e5                	mov    %esp,%ebp
f01026fe:	83 ec 18             	sub    $0x18,%esp
	int testNum = 0 ;
f0102701:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (number_of_arguments==2)
f0102708:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010270c:	75 1b                	jne    f0102729 <command_test_kmalloc+0x2e>
		testNum = strtol(arguments[1], NULL, 10);
f010270e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102711:	83 c0 04             	add    $0x4,%eax
f0102714:	8b 00                	mov    (%eax),%eax
f0102716:	83 ec 04             	sub    $0x4,%esp
f0102719:	6a 0a                	push   $0xa
f010271b:	6a 00                	push   $0x0
f010271d:	50                   	push   %eax
f010271e:	e8 20 f5 02 00       	call   f0131c43 <strtol>
f0102723:	83 c4 10             	add    $0x10,%esp
f0102726:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (isKHeapPlacementStrategyCONTALLOC())
f0102729:	e8 fd e7 ff ff       	call   f0100f2b <isKHeapPlacementStrategyCONTALLOC>
f010272e:	84 c0                	test   %al,%al
f0102730:	74 0a                	je     f010273c <command_test_kmalloc+0x41>
		test_kmalloc();
f0102732:	e8 9b 56 01 00       	call   f0117dd2 <test_kmalloc>
f0102737:	e9 e8 00 00 00       	jmp    f0102824 <command_test_kmalloc+0x129>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f010273c:	e8 fe e7 ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f0102741:	84 c0                	test   %al,%al
f0102743:	74 44                	je     f0102789 <command_test_kmalloc+0x8e>
	{
		if (testNum == 0)
f0102745:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102749:	75 1a                	jne    f0102765 <command_test_kmalloc+0x6a>
		{
			cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f010274b:	83 ec 0c             	sub    $0xc,%esp
f010274e:	68 10 5c 13 f0       	push   $0xf0135c10
f0102753:	e8 b6 e5 ff ff       	call   f0100d0e <cprintf>
f0102758:	83 c4 10             	add    $0x10,%esp
			return 0;
f010275b:	b8 00 00 00 00       	mov    $0x0,%eax
f0102760:	e9 c4 00 00 00       	jmp    f0102829 <command_test_kmalloc+0x12e>
		}
		//Test FIRST FIT allocation
		if (testNum == 1)
f0102765:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102769:	75 0a                	jne    f0102775 <command_test_kmalloc+0x7a>
			test_kmalloc_firstfit1();
f010276b:	e8 eb a4 01 00       	call   f011cc5b <test_kmalloc_firstfit1>
f0102770:	e9 af 00 00 00       	jmp    f0102824 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f0102775:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102779:	0f 85 a5 00 00 00    	jne    f0102824 <command_test_kmalloc+0x129>
			test_kmalloc_firstfit2();
f010277f:	e8 79 b8 01 00       	call   f011dffd <test_kmalloc_firstfit2>
f0102784:	e9 9b 00 00 00       	jmp    f0102824 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyBESTFIT())
f0102789:	e8 c6 e7 ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f010278e:	84 c0                	test   %al,%al
f0102790:	74 44                	je     f01027d6 <command_test_kmalloc+0xdb>
	{
		if (testNum == 0)
f0102792:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102796:	75 17                	jne    f01027af <command_test_kmalloc+0xb4>
		{
			cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0102798:	83 ec 0c             	sub    $0xc,%esp
f010279b:	68 60 5c 13 f0       	push   $0xf0135c60
f01027a0:	e8 69 e5 ff ff       	call   f0100d0e <cprintf>
f01027a5:	83 c4 10             	add    $0x10,%esp
			return 0;
f01027a8:	b8 00 00 00 00       	mov    $0x0,%eax
f01027ad:	eb 7a                	jmp    f0102829 <command_test_kmalloc+0x12e>
		}
		if (testNum == 1)
f01027af:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01027b3:	75 07                	jne    f01027bc <command_test_kmalloc+0xc1>
			test_kmalloc();
f01027b5:	e8 18 56 01 00       	call   f0117dd2 <test_kmalloc>
f01027ba:	eb 68                	jmp    f0102824 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f01027bc:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f01027c0:	75 07                	jne    f01027c9 <command_test_kmalloc+0xce>
			test_kmalloc_bestfit1();
f01027c2:	e8 5e 7f 01 00       	call   f011a725 <test_kmalloc_bestfit1>
f01027c7:	eb 5b                	jmp    f0102824 <command_test_kmalloc+0x129>
		else if (testNum == 3)
f01027c9:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f01027cd:	75 55                	jne    f0102824 <command_test_kmalloc+0x129>
			test_kmalloc_bestfit2();
f01027cf:	e8 a7 91 01 00       	call   f011b97b <test_kmalloc_bestfit2>
f01027d4:	eb 4e                	jmp    f0102824 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyNEXTFIT())
f01027d6:	e8 8e e7 ff ff       	call   f0100f69 <isKHeapPlacementStrategyNEXTFIT>
f01027db:	84 c0                	test   %al,%al
f01027dd:	74 37                	je     f0102816 <command_test_kmalloc+0x11b>
	{
		if (testNum == 0)
f01027df:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01027e3:	75 17                	jne    f01027fc <command_test_kmalloc+0x101>
		{
			cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f01027e5:	83 ec 0c             	sub    $0xc,%esp
f01027e8:	68 b0 5c 13 f0       	push   $0xf0135cb0
f01027ed:	e8 1c e5 ff ff       	call   f0100d0e <cprintf>
f01027f2:	83 c4 10             	add    $0x10,%esp
			return 0;
f01027f5:	b8 00 00 00 00       	mov    $0x0,%eax
f01027fa:	eb 2d                	jmp    f0102829 <command_test_kmalloc+0x12e>
		}
		//Test cont. allocation
		if (testNum == 1)
f01027fc:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102800:	75 07                	jne    f0102809 <command_test_kmalloc+0x10e>
			test_kmalloc();
f0102802:	e8 cb 55 01 00       	call   f0117dd2 <test_kmalloc>
f0102807:	eb 1b                	jmp    f0102824 <command_test_kmalloc+0x129>
		//Test nextfit strategy
		else if (testNum == 2)
f0102809:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010280d:	75 15                	jne    f0102824 <command_test_kmalloc+0x129>
			test_kmalloc_nextfit();
f010280f:	e8 1c 68 01 00       	call   f0119030 <test_kmalloc_nextfit>
f0102814:	eb 0e                	jmp    f0102824 <command_test_kmalloc+0x129>

	}
	else if (isKHeapPlacementStrategyWORSTFIT())
f0102816:	e8 63 e7 ff ff       	call   f0100f7e <isKHeapPlacementStrategyWORSTFIT>
f010281b:	84 c0                	test   %al,%al
f010281d:	74 05                	je     f0102824 <command_test_kmalloc+0x129>
		test_kmalloc_worstfit();
f010281f:	e8 6e c6 01 00       	call   f011ee92 <test_kmalloc_worstfit>
	return 0;
f0102824:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102829:	c9                   	leave  
f010282a:	c3                   	ret    

f010282b <command_test_kfree>:
int command_test_kfree(int number_of_arguments, char **arguments)
{
f010282b:	55                   	push   %ebp
f010282c:	89 e5                	mov    %esp,%ebp
f010282e:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f0102831:	e8 1e e7 ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f0102836:	84 c0                	test   %al,%al
f0102838:	75 09                	jne    f0102843 <command_test_kfree+0x18>
f010283a:	e8 00 e7 ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f010283f:	84 c0                	test   %al,%al
f0102841:	74 07                	je     f010284a <command_test_kfree+0x1f>
	{
		test_kfree_bestfirstfit();
f0102843:	e8 ec fd 01 00       	call   f0122634 <test_kfree_bestfirstfit>
f0102848:	eb 05                	jmp    f010284f <command_test_kfree+0x24>
	}
	else //NEXT & CONT
	{
		test_kfree();
f010284a:	e8 93 dc 01 00       	call   f01204e2 <test_kfree>
	}
	return 0;
f010284f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102854:	c9                   	leave  
f0102855:	c3                   	ret    

f0102856 <command_test_kheap_phys_addr>:
int command_test_kheap_phys_addr(int number_of_arguments, char **arguments)
{
f0102856:	55                   	push   %ebp
f0102857:	89 e5                	mov    %esp,%ebp
f0102859:	83 ec 08             	sub    $0x8,%esp
	test_kheap_phys_addr();
f010285c:	e8 cf 17 02 00       	call   f0124030 <test_kheap_phys_addr>
	return 0;
f0102861:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102866:	c9                   	leave  
f0102867:	c3                   	ret    

f0102868 <command_test_kheap_virt_addr>:
int command_test_kheap_virt_addr(int number_of_arguments, char **arguments)
{
f0102868:	55                   	push   %ebp
f0102869:	89 e5                	mov    %esp,%ebp
f010286b:	83 ec 08             	sub    $0x8,%esp
	test_kheap_virt_addr();
f010286e:	e8 8d 2c 02 00       	call   f0125500 <test_kheap_virt_addr>
	return 0;
f0102873:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102878:	c9                   	leave  
f0102879:	c3                   	ret    

f010287a <command_test_three_creation_functions>:
int command_test_three_creation_functions(int number_of_arguments, char **arguments)
{
f010287a:	55                   	push   %ebp
f010287b:	89 e5                	mov    %esp,%ebp
f010287d:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f0102880:	e8 58 41 02 00       	call   f01269dd <test_three_creation_functions>
	return 0;
f0102885:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010288a:	c9                   	leave  
f010288b:	c3                   	ret    

f010288c <command_test_krealloc>:

int command_test_krealloc(int number_of_arguments, char **arguments) {
f010288c:	55                   	push   %ebp
f010288d:	89 e5                	mov    %esp,%ebp
f010288f:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyNEXTFIT())
f0102892:	e8 d2 e6 ff ff       	call   f0100f69 <isKHeapPlacementStrategyNEXTFIT>
f0102897:	84 c0                	test   %al,%al
f0102899:	74 07                	je     f01028a2 <command_test_krealloc+0x16>
		test_krealloc();
f010289b:	e8 54 9b 02 00       	call   f012c3f4 <test_krealloc>
f01028a0:	eb 0e                	jmp    f01028b0 <command_test_krealloc+0x24>
	else if (isKHeapPlacementStrategyBESTFIT())
f01028a2:	e8 ad e6 ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f01028a7:	84 c0                	test   %al,%al
f01028a9:	74 05                	je     f01028b0 <command_test_krealloc+0x24>
		test_krealloc_BF();
f01028ab:	e8 f4 ba 02 00       	call   f012e3a4 <test_krealloc_BF>
	return 0;
f01028b0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028b5:	c9                   	leave  
f01028b6:	c3                   	ret    

f01028b7 <command_test_priority1>:

int command_test_priority1(int number_of_arguments, char **arguments)
{
f01028b7:	55                   	push   %ebp
f01028b8:	89 e5                	mov    %esp,%ebp
f01028ba:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f01028bd:	e8 25 41 01 00       	call   f01169e7 <test_priority_normal_and_higher>
	return 0;
f01028c2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028c7:	c9                   	leave  
f01028c8:	c3                   	ret    

f01028c9 <command_test_priority2>:

int command_test_priority2(int number_of_arguments, char **arguments)
{
f01028c9:	55                   	push   %ebp
f01028ca:	89 e5                	mov    %esp,%ebp
f01028cc:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f01028cf:	e8 f9 4a 01 00       	call   f01173cd <test_priority_normal_and_lower>
	return 0;
f01028d4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028d9:	c9                   	leave  
f01028da:	c3                   	ret    

f01028db <command_test_kfreeall>:

int command_test_kfreeall(int number_of_arguments, char **arguments)
{
f01028db:	55                   	push   %ebp
f01028dc:	89 e5                	mov    %esp,%ebp
f01028de:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f01028e1:	e8 31 43 02 00       	call   f0126c17 <test_kfreeall>
	return 0;
f01028e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028eb:	c9                   	leave  
f01028ec:	c3                   	ret    

f01028ed <command_test_kexpand>:

int command_test_kexpand(int number_of_arguments, char **arguments)
{
f01028ed:	55                   	push   %ebp
f01028ee:	89 e5                	mov    %esp,%ebp
f01028f0:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f01028f3:	e8 0b 5a 02 00       	call   f0128303 <test_kexpand>
	return 0;
f01028f8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028fd:	c9                   	leave  
f01028fe:	c3                   	ret    

f01028ff <command_test_kshrink>:

int command_test_kshrink(int number_of_arguments, char **arguments)
{
f01028ff:	55                   	push   %ebp
f0102900:	89 e5                	mov    %esp,%ebp
f0102902:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f0102905:	e8 7a 67 02 00       	call   f0129084 <test_kshrink>
	return 0;
f010290a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010290f:	c9                   	leave  
f0102910:	c3                   	ret    

f0102911 <command_test_kfreelast>:

int command_test_kfreelast(int number_of_arguments, char **arguments)
{
f0102911:	55                   	push   %ebp
f0102912:	89 e5                	mov    %esp,%ebp
f0102914:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f0102917:	e8 55 76 02 00       	call   f0129f71 <test_kfreelast>
	return 0;
f010291c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102921:	c9                   	leave  
f0102922:	c3                   	ret    

f0102923 <command_test_sc_MLFQ>:

int command_test_sc_MLFQ(int number_of_arguments, char **arguments)
{
f0102923:	55                   	push   %ebp
f0102924:	89 e5                	mov    %esp,%ebp
f0102926:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f0102929:	8b 45 0c             	mov    0xc(%ebp),%eax
f010292c:	83 c0 04             	add    $0x4,%eax
f010292f:	8b 00                	mov    (%eax),%eax
f0102931:	83 ec 04             	sub    $0x4,%esp
f0102934:	6a 0a                	push   $0xa
f0102936:	6a 00                	push   $0x0
f0102938:	50                   	push   %eax
f0102939:	e8 05 f3 02 00       	call   f0131c43 <strtol>
f010293e:	83 c4 10             	add    $0x10,%esp
f0102941:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f0102944:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f010294b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f0102952:	a1 f4 ac 89 f0       	mov    0xf089acf4,%eax
f0102957:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010295a:	eb 3d                	jmp    f0102999 <command_test_sc_MLFQ+0x76>
	{
		if (strcmp(e->prog_name, "tmlfq_2") == 0)
f010295c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010295f:	05 5c 05 00 00       	add    $0x55c,%eax
f0102964:	83 ec 08             	sub    $0x8,%esp
f0102967:	68 fe 5c 13 f0       	push   $0xf0135cfe
f010296c:	50                   	push   %eax
f010296d:	e8 7d f0 02 00       	call   f01319ef <strcmp>
f0102972:	83 c4 10             	add    $0x10,%esp
f0102975:	85 c0                	test   %eax,%eax
f0102977:	75 12                	jne    f010298b <command_test_sc_MLFQ+0x68>
		{
			if (firstTime)
f0102979:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010297d:	74 07                	je     f0102986 <command_test_sc_MLFQ+0x63>
				firstTime = 0;
f010297f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cnt++ ;
f0102986:	ff 45 f4             	incl   -0xc(%ebp)
f0102989:	eb 06                	jmp    f0102991 <command_test_sc_MLFQ+0x6e>
		}
		else if (!firstTime)
f010298b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010298f:	74 31                	je     f01029c2 <command_test_sc_MLFQ+0x9f>
{
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f0102991:	a1 fc ac 89 f0       	mov    0xf089acfc,%eax
f0102996:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102999:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010299d:	74 08                	je     f01029a7 <command_test_sc_MLFQ+0x84>
f010299f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01029a2:	8b 40 44             	mov    0x44(%eax),%eax
f01029a5:	eb 05                	jmp    f01029ac <command_test_sc_MLFQ+0x89>
f01029a7:	b8 00 00 00 00       	mov    $0x0,%eax
f01029ac:	a3 fc ac 89 f0       	mov    %eax,0xf089acfc
f01029b1:	a1 fc ac 89 f0       	mov    0xf089acfc,%eax
f01029b6:	85 c0                	test   %eax,%eax
f01029b8:	75 a2                	jne    f010295c <command_test_sc_MLFQ+0x39>
f01029ba:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01029be:	75 9c                	jne    f010295c <command_test_sc_MLFQ+0x39>
f01029c0:	eb 01                	jmp    f01029c3 <command_test_sc_MLFQ+0xa0>
			if (firstTime)
				firstTime = 0;
			cnt++ ;
		}
		else if (!firstTime)
			break;
f01029c2:	90                   	nop
	}
	if(cnt == numOfSlave2)
f01029c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01029c6:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01029c9:	75 12                	jne    f01029dd <command_test_sc_MLFQ+0xba>
	{
		cprintf("Congratulations... MLFQScenario# completed successfully\n");
f01029cb:	83 ec 0c             	sub    $0xc,%esp
f01029ce:	68 08 5d 13 f0       	push   $0xf0135d08
f01029d3:	e8 36 e3 ff ff       	call   f0100d0e <cprintf>
f01029d8:	83 c4 10             	add    $0x10,%esp
f01029db:	eb 17                	jmp    f01029f4 <command_test_sc_MLFQ+0xd1>
	}
	else
	{
		panic("MLFQScenario# failed\n");
f01029dd:	83 ec 04             	sub    $0x4,%esp
f01029e0:	68 41 5d 13 f0       	push   $0xf0135d41
f01029e5:	68 8b 04 00 00       	push   $0x48b
f01029ea:	68 8d 4d 13 f0       	push   $0xf0134d8d
f01029ef:	e8 11 d8 ff ff       	call   f0100205 <_panic>
	}
	return 0;
f01029f4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01029f9:	c9                   	leave  
f01029fa:	c3                   	ret    

f01029fb <command_test_autocomplete>:


/*2022*/
int command_test_autocomplete(int number_of_arguments, char **arguments)
{
f01029fb:	55                   	push   %ebp
f01029fc:	89 e5                	mov    %esp,%ebp
f01029fe:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f0102a01:	e8 dd ec 00 00       	call   f01116e3 <TestAutoCompleteCommand>
f0102a06:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f0102a09:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a0e:	c9                   	leave  
f0102a0f:	c3                   	ret    

f0102a10 <command_test_lists>:
int command_test_lists(int number_of_arguments, char **arguments)
{
f0102a10:	55                   	push   %ebp
f0102a11:	89 e5                	mov    %esp,%ebp
f0102a13:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102a16:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102a1a:	74 1a                	je     f0102a36 <command_test_lists+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstlsts <testname>\n") ;
f0102a1c:	83 ec 0c             	sub    $0xc,%esp
f0102a1f:	68 58 5d 13 f0       	push   $0xf0135d58
f0102a24:	e8 e5 e2 ff ff       	call   f0100d0e <cprintf>
f0102a29:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102a2c:	b8 00 00 00 00       	mov    $0x0,%eax
f0102a31:	e9 82 01 00 00       	jmp    f0102bb8 <command_test_lists+0x1a8>
	}
	// Test 1 Example for initialize_MemBlocksList: tstlsts init 5
	if(strcmp(arguments[1], "init") == 0)
f0102a36:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a39:	83 c0 04             	add    $0x4,%eax
f0102a3c:	8b 00                	mov    (%eax),%eax
f0102a3e:	83 ec 08             	sub    $0x8,%esp
f0102a41:	68 90 5d 13 f0       	push   $0xf0135d90
f0102a46:	50                   	push   %eax
f0102a47:	e8 a3 ef 02 00       	call   f01319ef <strcmp>
f0102a4c:	83 c4 10             	add    $0x10,%esp
f0102a4f:	85 c0                	test   %eax,%eax
f0102a51:	75 0a                	jne    f0102a5d <command_test_lists+0x4d>
	{
		test_initialize_MemBlocksList();
f0102a53:	e8 35 c2 00 00       	call   f010ec8d <test_initialize_MemBlocksList>
f0102a58:	e9 56 01 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 2 Example for insert_sorted: tstlsts insrt
	else if(strcmp(arguments[1], "insrt") == 0)
f0102a5d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a60:	83 c0 04             	add    $0x4,%eax
f0102a63:	8b 00                	mov    (%eax),%eax
f0102a65:	83 ec 08             	sub    $0x8,%esp
f0102a68:	68 95 5d 13 f0       	push   $0xf0135d95
f0102a6d:	50                   	push   %eax
f0102a6e:	e8 7c ef 02 00       	call   f01319ef <strcmp>
f0102a73:	83 c4 10             	add    $0x10,%esp
f0102a76:	85 c0                	test   %eax,%eax
f0102a78:	75 0a                	jne    f0102a84 <command_test_lists+0x74>
	{
		test_insert_sorted_allocList();
f0102a7a:	e8 22 c3 00 00       	call   f010eda1 <test_insert_sorted_allocList>
f0102a7f:	e9 2f 01 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 3 Example for find_block: tstlsts find
	else if(strcmp(arguments[1], "find") == 0)
f0102a84:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a87:	83 c0 04             	add    $0x4,%eax
f0102a8a:	8b 00                	mov    (%eax),%eax
f0102a8c:	83 ec 08             	sub    $0x8,%esp
f0102a8f:	68 9b 5d 13 f0       	push   $0xf0135d9b
f0102a94:	50                   	push   %eax
f0102a95:	e8 55 ef 02 00       	call   f01319ef <strcmp>
f0102a9a:	83 c4 10             	add    $0x10,%esp
f0102a9d:	85 c0                	test   %eax,%eax
f0102a9f:	75 0a                	jne    f0102aab <command_test_lists+0x9b>
	{
		test_find_block();
f0102aa1:	e8 b9 c7 00 00       	call   f010f25f <test_find_block>
f0102aa6:	e9 08 01 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 4 Example for alloc_block_FF: tstlsts FF
	else if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102aab:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102aae:	83 c0 04             	add    $0x4,%eax
f0102ab1:	8b 00                	mov    (%eax),%eax
f0102ab3:	83 ec 08             	sub    $0x8,%esp
f0102ab6:	68 a0 5d 13 f0       	push   $0xf0135da0
f0102abb:	50                   	push   %eax
f0102abc:	e8 2e ef 02 00       	call   f01319ef <strcmp>
f0102ac1:	83 c4 10             	add    $0x10,%esp
f0102ac4:	85 c0                	test   %eax,%eax
f0102ac6:	74 1d                	je     f0102ae5 <command_test_lists+0xd5>
f0102ac8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102acb:	83 c0 04             	add    $0x4,%eax
f0102ace:	8b 00                	mov    (%eax),%eax
f0102ad0:	83 ec 08             	sub    $0x8,%esp
f0102ad3:	68 a3 5d 13 f0       	push   $0xf0135da3
f0102ad8:	50                   	push   %eax
f0102ad9:	e8 11 ef 02 00       	call   f01319ef <strcmp>
f0102ade:	83 c4 10             	add    $0x10,%esp
f0102ae1:	85 c0                	test   %eax,%eax
f0102ae3:	75 0a                	jne    f0102aef <command_test_lists+0xdf>
	{
		test_alloc_block_FF();
f0102ae5:	e8 d0 ca 00 00       	call   f010f5ba <test_alloc_block_FF>
f0102aea:	e9 c4 00 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 5 Example for alloc_block_BF: tstlsts BF
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102aef:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102af2:	83 c0 04             	add    $0x4,%eax
f0102af5:	8b 00                	mov    (%eax),%eax
f0102af7:	83 ec 08             	sub    $0x8,%esp
f0102afa:	68 a6 5d 13 f0       	push   $0xf0135da6
f0102aff:	50                   	push   %eax
f0102b00:	e8 ea ee 02 00       	call   f01319ef <strcmp>
f0102b05:	83 c4 10             	add    $0x10,%esp
f0102b08:	85 c0                	test   %eax,%eax
f0102b0a:	74 1d                	je     f0102b29 <command_test_lists+0x119>
f0102b0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b0f:	83 c0 04             	add    $0x4,%eax
f0102b12:	8b 00                	mov    (%eax),%eax
f0102b14:	83 ec 08             	sub    $0x8,%esp
f0102b17:	68 a9 5d 13 f0       	push   $0xf0135da9
f0102b1c:	50                   	push   %eax
f0102b1d:	e8 cd ee 02 00       	call   f01319ef <strcmp>
f0102b22:	83 c4 10             	add    $0x10,%esp
f0102b25:	85 c0                	test   %eax,%eax
f0102b27:	75 0a                	jne    f0102b33 <command_test_lists+0x123>
	{
		test_alloc_block_BF();
f0102b29:	e8 0a cf 00 00       	call   f010fa38 <test_alloc_block_BF>
f0102b2e:	e9 80 00 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 6 Example for alloc_block_NF: tstlsts NF
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102b33:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b36:	83 c0 04             	add    $0x4,%eax
f0102b39:	8b 00                	mov    (%eax),%eax
f0102b3b:	83 ec 08             	sub    $0x8,%esp
f0102b3e:	68 ac 5d 13 f0       	push   $0xf0135dac
f0102b43:	50                   	push   %eax
f0102b44:	e8 a6 ee 02 00       	call   f01319ef <strcmp>
f0102b49:	83 c4 10             	add    $0x10,%esp
f0102b4c:	85 c0                	test   %eax,%eax
f0102b4e:	74 1d                	je     f0102b6d <command_test_lists+0x15d>
f0102b50:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b53:	83 c0 04             	add    $0x4,%eax
f0102b56:	8b 00                	mov    (%eax),%eax
f0102b58:	83 ec 08             	sub    $0x8,%esp
f0102b5b:	68 af 5d 13 f0       	push   $0xf0135daf
f0102b60:	50                   	push   %eax
f0102b61:	e8 89 ee 02 00       	call   f01319ef <strcmp>
f0102b66:	83 c4 10             	add    $0x10,%esp
f0102b69:	85 c0                	test   %eax,%eax
f0102b6b:	75 07                	jne    f0102b74 <command_test_lists+0x164>
	{
		test_alloc_block_NF();
f0102b6d:	e8 4d d5 00 00       	call   f01100bf <test_alloc_block_NF>
f0102b72:	eb 3f                	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 7 Example for alloc_block_NF: tstlsts merge
	else if(strcmp(arguments[1], "MERGE") == 0 || strcmp(arguments[1], "merge") == 0)
f0102b74:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b77:	83 c0 04             	add    $0x4,%eax
f0102b7a:	8b 00                	mov    (%eax),%eax
f0102b7c:	83 ec 08             	sub    $0x8,%esp
f0102b7f:	68 b2 5d 13 f0       	push   $0xf0135db2
f0102b84:	50                   	push   %eax
f0102b85:	e8 65 ee 02 00       	call   f01319ef <strcmp>
f0102b8a:	83 c4 10             	add    $0x10,%esp
f0102b8d:	85 c0                	test   %eax,%eax
f0102b8f:	74 1d                	je     f0102bae <command_test_lists+0x19e>
f0102b91:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b94:	83 c0 04             	add    $0x4,%eax
f0102b97:	8b 00                	mov    (%eax),%eax
f0102b99:	83 ec 08             	sub    $0x8,%esp
f0102b9c:	68 b8 5d 13 f0       	push   $0xf0135db8
f0102ba1:	50                   	push   %eax
f0102ba2:	e8 48 ee 02 00       	call   f01319ef <strcmp>
f0102ba7:	83 c4 10             	add    $0x10,%esp
f0102baa:	85 c0                	test   %eax,%eax
f0102bac:	75 05                	jne    f0102bb3 <command_test_lists+0x1a3>
	{
		test_insert_sorted_with_merge_freeList();
f0102bae:	e8 9a dd 00 00       	call   f011094d <test_insert_sorted_with_merge_freeList>
	}
	return 0;
f0102bb3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102bb8:	c9                   	leave  
f0102bb9:	c3                   	ret    

f0102bba <command_test_chunks>:

int command_test_chunks(int number_of_arguments, char **arguments)
{
f0102bba:	55                   	push   %ebp
f0102bbb:	89 e5                	mov    %esp,%ebp
f0102bbd:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102bc0:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102bc4:	74 1a                	je     f0102be0 <command_test_chunks+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstchunk <testname>\n") ;
f0102bc6:	83 ec 0c             	sub    $0xc,%esp
f0102bc9:	68 c0 5d 13 f0       	push   $0xf0135dc0
f0102bce:	e8 3b e1 ff ff       	call   f0100d0e <cprintf>
f0102bd3:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102bd6:	b8 00 00 00 00       	mov    $0x0,%eax
f0102bdb:	e9 e1 00 00 00       	jmp    f0102cc1 <command_test_chunks+0x107>
	}
	// CUT-PASTE Test
	if(strcmp(arguments[1], "cutpaste") == 0)
f0102be0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102be3:	83 c0 04             	add    $0x4,%eax
f0102be6:	8b 00                	mov    (%eax),%eax
f0102be8:	83 ec 08             	sub    $0x8,%esp
f0102beb:	68 f9 5d 13 f0       	push   $0xf0135df9
f0102bf0:	50                   	push   %eax
f0102bf1:	e8 f9 ed 02 00       	call   f01319ef <strcmp>
f0102bf6:	83 c4 10             	add    $0x10,%esp
f0102bf9:	85 c0                	test   %eax,%eax
f0102bfb:	75 0a                	jne    f0102c07 <command_test_chunks+0x4d>
	{
		test_cut_paste_pages();
f0102bfd:	e8 75 f5 00 00       	call   f0112177 <test_cut_paste_pages>
f0102c02:	e9 b5 00 00 00       	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// COPY-PASTE Test
	else if(strcmp(arguments[1], "copypaste") == 0)
f0102c07:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c0a:	83 c0 04             	add    $0x4,%eax
f0102c0d:	8b 00                	mov    (%eax),%eax
f0102c0f:	83 ec 08             	sub    $0x8,%esp
f0102c12:	68 02 5e 13 f0       	push   $0xf0135e02
f0102c17:	50                   	push   %eax
f0102c18:	e8 d2 ed 02 00       	call   f01319ef <strcmp>
f0102c1d:	83 c4 10             	add    $0x10,%esp
f0102c20:	85 c0                	test   %eax,%eax
f0102c22:	75 0a                	jne    f0102c2e <command_test_chunks+0x74>
	{
		test_copy_paste_chunk();
f0102c24:	e8 99 ff 00 00       	call   f0112bc2 <test_copy_paste_chunk>
f0102c29:	e9 8e 00 00 00       	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// SHARE Test
	else if(strcmp(arguments[1], "share") == 0)
f0102c2e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c31:	83 c0 04             	add    $0x4,%eax
f0102c34:	8b 00                	mov    (%eax),%eax
f0102c36:	83 ec 08             	sub    $0x8,%esp
f0102c39:	68 0c 5e 13 f0       	push   $0xf0135e0c
f0102c3e:	50                   	push   %eax
f0102c3f:	e8 ab ed 02 00       	call   f01319ef <strcmp>
f0102c44:	83 c4 10             	add    $0x10,%esp
f0102c47:	85 c0                	test   %eax,%eax
f0102c49:	75 07                	jne    f0102c52 <command_test_chunks+0x98>
	{
		test_share_chunk();
f0102c4b:	e8 70 10 01 00       	call   f0113cc0 <test_share_chunk>
f0102c50:	eb 6a                	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// ALLOCATE Test
	else if(strcmp(arguments[1], "allocate") == 0)
f0102c52:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c55:	83 c0 04             	add    $0x4,%eax
f0102c58:	8b 00                	mov    (%eax),%eax
f0102c5a:	83 ec 08             	sub    $0x8,%esp
f0102c5d:	68 12 5e 13 f0       	push   $0xf0135e12
f0102c62:	50                   	push   %eax
f0102c63:	e8 87 ed 02 00       	call   f01319ef <strcmp>
f0102c68:	83 c4 10             	add    $0x10,%esp
f0102c6b:	85 c0                	test   %eax,%eax
f0102c6d:	75 07                	jne    f0102c76 <command_test_chunks+0xbc>
	{
		test_allocate_chunk();
f0102c6f:	e8 74 1a 01 00       	call   f01146e8 <test_allocate_chunk>
f0102c74:	eb 46                	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// REQUIRED SPACE Test
	else if(strcmp(arguments[1], "required_space") == 0)
f0102c76:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c79:	83 c0 04             	add    $0x4,%eax
f0102c7c:	8b 00                	mov    (%eax),%eax
f0102c7e:	83 ec 08             	sub    $0x8,%esp
f0102c81:	68 1b 5e 13 f0       	push   $0xf0135e1b
f0102c86:	50                   	push   %eax
f0102c87:	e8 63 ed 02 00       	call   f01319ef <strcmp>
f0102c8c:	83 c4 10             	add    $0x10,%esp
f0102c8f:	85 c0                	test   %eax,%eax
f0102c91:	75 07                	jne    f0102c9a <command_test_chunks+0xe0>
	{
		test_calculate_required_frames();
f0102c93:	e8 ff 22 01 00       	call   f0114f97 <test_calculate_required_frames>
f0102c98:	eb 22                	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// ALLOCATED SPACE Test
	else if(strcmp(arguments[1], "allocated_space") == 0)
f0102c9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c9d:	83 c0 04             	add    $0x4,%eax
f0102ca0:	8b 00                	mov    (%eax),%eax
f0102ca2:	83 ec 08             	sub    $0x8,%esp
f0102ca5:	68 2a 5e 13 f0       	push   $0xf0135e2a
f0102caa:	50                   	push   %eax
f0102cab:	e8 3f ed 02 00       	call   f01319ef <strcmp>
f0102cb0:	83 c4 10             	add    $0x10,%esp
f0102cb3:	85 c0                	test   %eax,%eax
f0102cb5:	75 05                	jne    f0102cbc <command_test_chunks+0x102>
	{
		test_calculate_allocated_space();
f0102cb7:	e8 4f 2b 01 00       	call   f011580b <test_calculate_allocated_space>
	}
	return 0;
f0102cbc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102cc1:	c9                   	leave  
f0102cc2:	c3                   	ret    

f0102cc3 <command_test_paging_manipulation>:

int command_test_paging_manipulation(int number_of_arguments, char **arguments)
{
f0102cc3:	55                   	push   %ebp
f0102cc4:	89 e5                	mov    %esp,%ebp
f0102cc6:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102cc9:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102ccd:	74 1a                	je     f0102ce9 <command_test_paging_manipulation+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstpg <testname>\n") ;
f0102ccf:	83 ec 0c             	sub    $0xc,%esp
f0102cd2:	68 3c 5e 13 f0       	push   $0xf0135e3c
f0102cd7:	e8 32 e0 ff ff       	call   f0100d0e <cprintf>
f0102cdc:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102cdf:	b8 00 00 00 00       	mov    $0x0,%eax
f0102ce4:	e9 e1 00 00 00       	jmp    f0102dca <command_test_paging_manipulation+0x107>
	}
	// Test 1.1-Set/Clear permissions: tstpg scperm1
	if(strcmp(arguments[1], "scperm1") == 0)
f0102ce9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cec:	83 c0 04             	add    $0x4,%eax
f0102cef:	8b 00                	mov    (%eax),%eax
f0102cf1:	83 ec 08             	sub    $0x8,%esp
f0102cf4:	68 72 5e 13 f0       	push   $0xf0135e72
f0102cf9:	50                   	push   %eax
f0102cfa:	e8 f0 ec 02 00       	call   f01319ef <strcmp>
f0102cff:	83 c4 10             	add    $0x10,%esp
f0102d02:	85 c0                	test   %eax,%eax
f0102d04:	75 0a                	jne    f0102d10 <command_test_paging_manipulation+0x4d>
	{
		test_pt_set_page_permissions();
f0102d06:	e8 5d eb 00 00       	call   f0111868 <test_pt_set_page_permissions>
f0102d0b:	e9 b5 00 00 00       	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 1.2-Set/Clear permissions: tstpg scperm2
	else if(strcmp(arguments[1], "scperm2") == 0)
f0102d10:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d13:	83 c0 04             	add    $0x4,%eax
f0102d16:	8b 00                	mov    (%eax),%eax
f0102d18:	83 ec 08             	sub    $0x8,%esp
f0102d1b:	68 7a 5e 13 f0       	push   $0xf0135e7a
f0102d20:	50                   	push   %eax
f0102d21:	e8 c9 ec 02 00       	call   f01319ef <strcmp>
f0102d26:	83 c4 10             	add    $0x10,%esp
f0102d29:	85 c0                	test   %eax,%eax
f0102d2b:	75 0a                	jne    f0102d37 <command_test_paging_manipulation+0x74>
	{
		test_pt_set_page_permissions_invalid_va();
f0102d2d:	e8 99 ed 00 00       	call   f0111acb <test_pt_set_page_permissions_invalid_va>
f0102d32:	e9 8e 00 00 00       	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 2-Get permissions: tstpg getperm
	else if(strcmp(arguments[1], "getperm") == 0)
f0102d37:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d3a:	83 c0 04             	add    $0x4,%eax
f0102d3d:	8b 00                	mov    (%eax),%eax
f0102d3f:	83 ec 08             	sub    $0x8,%esp
f0102d42:	68 82 5e 13 f0       	push   $0xf0135e82
f0102d47:	50                   	push   %eax
f0102d48:	e8 a2 ec 02 00       	call   f01319ef <strcmp>
f0102d4d:	83 c4 10             	add    $0x10,%esp
f0102d50:	85 c0                	test   %eax,%eax
f0102d52:	75 07                	jne    f0102d5b <command_test_paging_manipulation+0x98>
	{
		test_pt_get_page_permissions();
f0102d54:	e8 bb ed 00 00       	call   f0111b14 <test_pt_get_page_permissions>
f0102d59:	eb 6a                	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 3.1-Clear entry: tstpg clear1
	else if(strcmp(arguments[1], "clear1") == 0)
f0102d5b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d5e:	83 c0 04             	add    $0x4,%eax
f0102d61:	8b 00                	mov    (%eax),%eax
f0102d63:	83 ec 08             	sub    $0x8,%esp
f0102d66:	68 8a 5e 13 f0       	push   $0xf0135e8a
f0102d6b:	50                   	push   %eax
f0102d6c:	e8 7e ec 02 00       	call   f01319ef <strcmp>
f0102d71:	83 c4 10             	add    $0x10,%esp
f0102d74:	85 c0                	test   %eax,%eax
f0102d76:	75 07                	jne    f0102d7f <command_test_paging_manipulation+0xbc>
	{
		test_pt_clear_page_table_entry();
f0102d78:	e8 db ee 00 00       	call   f0111c58 <test_pt_clear_page_table_entry>
f0102d7d:	eb 46                	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 3.2-Clear entry: tstpg clear2
	else if(strcmp(arguments[1], "clear2") == 0)
f0102d7f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d82:	83 c0 04             	add    $0x4,%eax
f0102d85:	8b 00                	mov    (%eax),%eax
f0102d87:	83 ec 08             	sub    $0x8,%esp
f0102d8a:	68 91 5e 13 f0       	push   $0xf0135e91
f0102d8f:	50                   	push   %eax
f0102d90:	e8 5a ec 02 00       	call   f01319ef <strcmp>
f0102d95:	83 c4 10             	add    $0x10,%esp
f0102d98:	85 c0                	test   %eax,%eax
f0102d9a:	75 07                	jne    f0102da3 <command_test_paging_manipulation+0xe0>
	{
		test_pt_clear_page_table_entry_invalid_va();
f0102d9c:	e8 10 f0 00 00       	call   f0111db1 <test_pt_clear_page_table_entry_invalid_va>
f0102da1:	eb 22                	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 4-Convert virtual to physical: tstpg v2p
	else if(strcmp(arguments[1], "v2p") == 0)
f0102da3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102da6:	83 c0 04             	add    $0x4,%eax
f0102da9:	8b 00                	mov    (%eax),%eax
f0102dab:	83 ec 08             	sub    $0x8,%esp
f0102dae:	68 98 5e 13 f0       	push   $0xf0135e98
f0102db3:	50                   	push   %eax
f0102db4:	e8 36 ec 02 00       	call   f01319ef <strcmp>
f0102db9:	83 c4 10             	add    $0x10,%esp
f0102dbc:	85 c0                	test   %eax,%eax
f0102dbe:	75 05                	jne    f0102dc5 <command_test_paging_manipulation+0x102>
	{
		test_virtual_to_physical();
f0102dc0:	e8 24 f0 00 00       	call   f0111de9 <test_virtual_to_physical>
	}
	return 0;
f0102dc5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102dca:	c9                   	leave  
f0102dcb:	c3                   	ret    

f0102dcc <command_test_kheap>:

int command_test_kheap(int number_of_arguments, char **arguments)
{
f0102dcc:	55                   	push   %ebp
f0102dcd:	89 e5                	mov    %esp,%ebp
f0102dcf:	83 ec 18             	sub    $0x18,%esp
	// Parameters Validation Checking
	if (strcmp(arguments[2], "kmalloc") == 0 && number_of_arguments != 4)
f0102dd2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102dd5:	83 c0 08             	add    $0x8,%eax
f0102dd8:	8b 00                	mov    (%eax),%eax
f0102dda:	83 ec 08             	sub    $0x8,%esp
f0102ddd:	68 9c 5e 13 f0       	push   $0xf0135e9c
f0102de2:	50                   	push   %eax
f0102de3:	e8 07 ec 02 00       	call   f01319ef <strcmp>
f0102de8:	83 c4 10             	add    $0x10,%esp
f0102deb:	85 c0                	test   %eax,%eax
f0102ded:	75 20                	jne    f0102e0f <command_test_kheap+0x43>
f0102def:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102df3:	74 1a                	je     f0102e0f <command_test_kheap+0x43>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> kmalloc <1 or 2 or 3>\n") ;
f0102df5:	83 ec 0c             	sub    $0xc,%esp
f0102df8:	68 a4 5e 13 f0       	push   $0xf0135ea4
f0102dfd:	e8 0c df ff ff       	call   f0100d0e <cprintf>
f0102e02:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102e05:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e0a:	e9 33 03 00 00       	jmp    f0103142 <command_test_kheap+0x376>
	}
	if (strcmp(arguments[2], "kmalloc") != 0 && number_of_arguments != 3)
f0102e0f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e12:	83 c0 08             	add    $0x8,%eax
f0102e15:	8b 00                	mov    (%eax),%eax
f0102e17:	83 ec 08             	sub    $0x8,%esp
f0102e1a:	68 9c 5e 13 f0       	push   $0xf0135e9c
f0102e1f:	50                   	push   %eax
f0102e20:	e8 ca eb 02 00       	call   f01319ef <strcmp>
f0102e25:	83 c4 10             	add    $0x10,%esp
f0102e28:	85 c0                	test   %eax,%eax
f0102e2a:	74 20                	je     f0102e4c <command_test_kheap+0x80>
f0102e2c:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102e30:	74 1a                	je     f0102e4c <command_test_kheap+0x80>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> <testname>\n") ;
f0102e32:	83 ec 0c             	sub    $0xc,%esp
f0102e35:	68 f4 5e 13 f0       	push   $0xf0135ef4
f0102e3a:	e8 cf de ff ff       	call   f0100d0e <cprintf>
f0102e3f:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102e42:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e47:	e9 f6 02 00 00       	jmp    f0103142 <command_test_kheap+0x376>
	}

	// Setting Strategy
	if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102e4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e4f:	83 c0 04             	add    $0x4,%eax
f0102e52:	8b 00                	mov    (%eax),%eax
f0102e54:	83 ec 08             	sub    $0x8,%esp
f0102e57:	68 a0 5d 13 f0       	push   $0xf0135da0
f0102e5c:	50                   	push   %eax
f0102e5d:	e8 8d eb 02 00       	call   f01319ef <strcmp>
f0102e62:	83 c4 10             	add    $0x10,%esp
f0102e65:	85 c0                	test   %eax,%eax
f0102e67:	74 1d                	je     f0102e86 <command_test_kheap+0xba>
f0102e69:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e6c:	83 c0 04             	add    $0x4,%eax
f0102e6f:	8b 00                	mov    (%eax),%eax
f0102e71:	83 ec 08             	sub    $0x8,%esp
f0102e74:	68 a3 5d 13 f0       	push   $0xf0135da3
f0102e79:	50                   	push   %eax
f0102e7a:	e8 70 eb 02 00       	call   f01319ef <strcmp>
f0102e7f:	83 c4 10             	add    $0x10,%esp
f0102e82:	85 c0                	test   %eax,%eax
f0102e84:	75 1a                	jne    f0102ea0 <command_test_kheap+0xd4>
	{
		setKHeapPlacementStrategyFIRSTFIT();
f0102e86:	e8 60 e0 ff ff       	call   f0100eeb <setKHeapPlacementStrategyFIRSTFIT>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0102e8b:	83 ec 0c             	sub    $0xc,%esp
f0102e8e:	68 3c 59 13 f0       	push   $0xf013593c
f0102e93:	e8 76 de ff ff       	call   f0100d0e <cprintf>
f0102e98:	83 c4 10             	add    $0x10,%esp
f0102e9b:	e9 a0 00 00 00       	jmp    f0102f40 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102ea0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ea3:	83 c0 04             	add    $0x4,%eax
f0102ea6:	8b 00                	mov    (%eax),%eax
f0102ea8:	83 ec 08             	sub    $0x8,%esp
f0102eab:	68 a6 5d 13 f0       	push   $0xf0135da6
f0102eb0:	50                   	push   %eax
f0102eb1:	e8 39 eb 02 00       	call   f01319ef <strcmp>
f0102eb6:	83 c4 10             	add    $0x10,%esp
f0102eb9:	85 c0                	test   %eax,%eax
f0102ebb:	74 1d                	je     f0102eda <command_test_kheap+0x10e>
f0102ebd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ec0:	83 c0 04             	add    $0x4,%eax
f0102ec3:	8b 00                	mov    (%eax),%eax
f0102ec5:	83 ec 08             	sub    $0x8,%esp
f0102ec8:	68 a9 5d 13 f0       	push   $0xf0135da9
f0102ecd:	50                   	push   %eax
f0102ece:	e8 1c eb 02 00       	call   f01319ef <strcmp>
f0102ed3:	83 c4 10             	add    $0x10,%esp
f0102ed6:	85 c0                	test   %eax,%eax
f0102ed8:	75 17                	jne    f0102ef1 <command_test_kheap+0x125>
	{
		setKHeapPlacementStrategyBESTFIT();
f0102eda:	e8 1c e0 ff ff       	call   f0100efb <setKHeapPlacementStrategyBESTFIT>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f0102edf:	83 ec 0c             	sub    $0xc,%esp
f0102ee2:	68 6c 59 13 f0       	push   $0xf013596c
f0102ee7:	e8 22 de ff ff       	call   f0100d0e <cprintf>
f0102eec:	83 c4 10             	add    $0x10,%esp
f0102eef:	eb 4f                	jmp    f0102f40 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102ef1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ef4:	83 c0 04             	add    $0x4,%eax
f0102ef7:	8b 00                	mov    (%eax),%eax
f0102ef9:	83 ec 08             	sub    $0x8,%esp
f0102efc:	68 ac 5d 13 f0       	push   $0xf0135dac
f0102f01:	50                   	push   %eax
f0102f02:	e8 e8 ea 02 00       	call   f01319ef <strcmp>
f0102f07:	83 c4 10             	add    $0x10,%esp
f0102f0a:	85 c0                	test   %eax,%eax
f0102f0c:	74 1d                	je     f0102f2b <command_test_kheap+0x15f>
f0102f0e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f11:	83 c0 04             	add    $0x4,%eax
f0102f14:	8b 00                	mov    (%eax),%eax
f0102f16:	83 ec 08             	sub    $0x8,%esp
f0102f19:	68 af 5d 13 f0       	push   $0xf0135daf
f0102f1e:	50                   	push   %eax
f0102f1f:	e8 cb ea 02 00       	call   f01319ef <strcmp>
f0102f24:	83 c4 10             	add    $0x10,%esp
f0102f27:	85 c0                	test   %eax,%eax
f0102f29:	75 15                	jne    f0102f40 <command_test_kheap+0x174>
	{
		setKHeapPlacementStrategyNEXTFIT();
f0102f2b:	e8 db df ff ff       	call   f0100f0b <setKHeapPlacementStrategyNEXTFIT>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f0102f30:	83 ec 0c             	sub    $0xc,%esp
f0102f33:	68 98 59 13 f0       	push   $0xf0135998
f0102f38:	e8 d1 dd ff ff       	call   f0100d0e <cprintf>
f0102f3d:	83 c4 10             	add    $0x10,%esp
	}

	// Test 1-kmalloc: tstkheap FF kmalloc 1
	if(strcmp(arguments[2], "kmalloc") == 0)
f0102f40:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f43:	83 c0 08             	add    $0x8,%eax
f0102f46:	8b 00                	mov    (%eax),%eax
f0102f48:	83 ec 08             	sub    $0x8,%esp
f0102f4b:	68 9c 5e 13 f0       	push   $0xf0135e9c
f0102f50:	50                   	push   %eax
f0102f51:	e8 99 ea 02 00       	call   f01319ef <strcmp>
f0102f56:	83 c4 10             	add    $0x10,%esp
f0102f59:	85 c0                	test   %eax,%eax
f0102f5b:	0f 85 13 01 00 00    	jne    f0103074 <command_test_kheap+0x2a8>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f0102f61:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f64:	83 c0 0c             	add    $0xc,%eax
f0102f67:	8b 00                	mov    (%eax),%eax
f0102f69:	83 ec 04             	sub    $0x4,%esp
f0102f6c:	6a 0a                	push   $0xa
f0102f6e:	6a 00                	push   $0x0
f0102f70:	50                   	push   %eax
f0102f71:	e8 cd ec 02 00       	call   f0131c43 <strtol>
f0102f76:	83 c4 10             	add    $0x10,%esp
f0102f79:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f0102f7c:	e8 be df ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f0102f81:	84 c0                	test   %al,%al
f0102f83:	74 54                	je     f0102fd9 <command_test_kheap+0x20d>
		{
			if (testNum == 0)
f0102f85:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102f89:	75 1a                	jne    f0102fa5 <command_test_kheap+0x1d9>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f0102f8b:	83 ec 0c             	sub    $0xc,%esp
f0102f8e:	68 10 5c 13 f0       	push   $0xf0135c10
f0102f93:	e8 76 dd ff ff       	call   f0100d0e <cprintf>
f0102f98:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102f9b:	b8 00 00 00 00       	mov    $0x0,%eax
f0102fa0:	e9 9d 01 00 00       	jmp    f0103142 <command_test_kheap+0x376>
			}
			//Test FIRST FIT allocation
			if (testNum == 1)
f0102fa5:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102fa9:	75 0a                	jne    f0102fb5 <command_test_kheap+0x1e9>
				test_kmalloc();
f0102fab:	e8 22 4e 01 00       	call   f0117dd2 <test_kmalloc>
f0102fb0:	e9 b5 00 00 00       	jmp    f010306a <command_test_kheap+0x29e>
			else if (testNum == 2)
f0102fb5:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102fb9:	75 0a                	jne    f0102fc5 <command_test_kheap+0x1f9>
				test_kmalloc_firstfit1();
f0102fbb:	e8 9b 9c 01 00       	call   f011cc5b <test_kmalloc_firstfit1>
f0102fc0:	e9 a5 00 00 00       	jmp    f010306a <command_test_kheap+0x29e>
			else if (testNum == 3)
f0102fc5:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102fc9:	0f 85 9b 00 00 00    	jne    f010306a <command_test_kheap+0x29e>
				test_kmalloc_firstfit2();
f0102fcf:	e8 29 b0 01 00       	call   f011dffd <test_kmalloc_firstfit2>
f0102fd4:	e9 91 00 00 00       	jmp    f010306a <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyBESTFIT())
f0102fd9:	e8 76 df ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f0102fde:	84 c0                	test   %al,%al
f0102fe0:	74 47                	je     f0103029 <command_test_kheap+0x25d>
		{
			if (testNum == 0)
f0102fe2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102fe6:	75 1a                	jne    f0103002 <command_test_kheap+0x236>
			{
				cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0102fe8:	83 ec 0c             	sub    $0xc,%esp
f0102feb:	68 60 5c 13 f0       	push   $0xf0135c60
f0102ff0:	e8 19 dd ff ff       	call   f0100d0e <cprintf>
f0102ff5:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102ff8:	b8 00 00 00 00       	mov    $0x0,%eax
f0102ffd:	e9 40 01 00 00       	jmp    f0103142 <command_test_kheap+0x376>
			}
			if (testNum == 1)
f0103002:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0103006:	75 07                	jne    f010300f <command_test_kheap+0x243>
				test_kmalloc();
f0103008:	e8 c5 4d 01 00       	call   f0117dd2 <test_kmalloc>
f010300d:	eb 5b                	jmp    f010306a <command_test_kheap+0x29e>
			else if (testNum == 2)
f010300f:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0103013:	75 07                	jne    f010301c <command_test_kheap+0x250>
				test_kmalloc_bestfit1();
f0103015:	e8 0b 77 01 00       	call   f011a725 <test_kmalloc_bestfit1>
f010301a:	eb 4e                	jmp    f010306a <command_test_kheap+0x29e>
			else if (testNum == 3)
f010301c:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0103020:	75 48                	jne    f010306a <command_test_kheap+0x29e>
				test_kmalloc_bestfit2();
f0103022:	e8 54 89 01 00       	call   f011b97b <test_kmalloc_bestfit2>
f0103027:	eb 41                	jmp    f010306a <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyNEXTFIT())
f0103029:	e8 3b df ff ff       	call   f0100f69 <isKHeapPlacementStrategyNEXTFIT>
f010302e:	84 c0                	test   %al,%al
f0103030:	74 38                	je     f010306a <command_test_kheap+0x29e>
		{
			if (testNum == 0)
f0103032:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103036:	75 1a                	jne    f0103052 <command_test_kheap+0x286>
			{
				cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0103038:	83 ec 0c             	sub    $0xc,%esp
f010303b:	68 b0 5c 13 f0       	push   $0xf0135cb0
f0103040:	e8 c9 dc ff ff       	call   f0100d0e <cprintf>
f0103045:	83 c4 10             	add    $0x10,%esp
				return 0;
f0103048:	b8 00 00 00 00       	mov    $0x0,%eax
f010304d:	e9 f0 00 00 00       	jmp    f0103142 <command_test_kheap+0x376>
			}
			//Test cont. allocation
			if (testNum == 1)
f0103052:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0103056:	75 07                	jne    f010305f <command_test_kheap+0x293>
				test_kmalloc();
f0103058:	e8 75 4d 01 00       	call   f0117dd2 <test_kmalloc>
f010305d:	eb 0b                	jmp    f010306a <command_test_kheap+0x29e>
			//Test nextfit strategy
			else if (testNum == 2)
f010305f:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0103063:	75 05                	jne    f010306a <command_test_kheap+0x29e>
				test_kmalloc_nextfit();
f0103065:	e8 c6 5f 01 00       	call   f0119030 <test_kmalloc_nextfit>
		}
		return 0;
f010306a:	b8 00 00 00 00       	mov    $0x0,%eax
f010306f:	e9 ce 00 00 00       	jmp    f0103142 <command_test_kheap+0x376>
	}
	// Test 2-kfree: tstkheap FF kfree
	else if(strcmp(arguments[2], "kfree") == 0)
f0103074:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103077:	83 c0 08             	add    $0x8,%eax
f010307a:	8b 00                	mov    (%eax),%eax
f010307c:	83 ec 08             	sub    $0x8,%esp
f010307f:	68 38 5f 13 f0       	push   $0xf0135f38
f0103084:	50                   	push   %eax
f0103085:	e8 65 e9 02 00       	call   f01319ef <strcmp>
f010308a:	83 c4 10             	add    $0x10,%esp
f010308d:	85 c0                	test   %eax,%eax
f010308f:	75 28                	jne    f01030b9 <command_test_kheap+0x2ed>
	{
		if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f0103091:	e8 be de ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f0103096:	84 c0                	test   %al,%al
f0103098:	75 09                	jne    f01030a3 <command_test_kheap+0x2d7>
f010309a:	e8 a0 de ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f010309f:	84 c0                	test   %al,%al
f01030a1:	74 07                	je     f01030aa <command_test_kheap+0x2de>
		{
			test_kfree_bestfirstfit();
f01030a3:	e8 8c f5 01 00       	call   f0122634 <test_kfree_bestfirstfit>
f01030a8:	eb 05                	jmp    f01030af <command_test_kheap+0x2e3>
		}
		else //NEXT & CONT
		{
			test_kfree();
f01030aa:	e8 33 d4 01 00       	call   f01204e2 <test_kfree>
		}
		return 0;
f01030af:	b8 00 00 00 00       	mov    $0x0,%eax
f01030b4:	e9 89 00 00 00       	jmp    f0103142 <command_test_kheap+0x376>
	}
	// Test 3-kphysaddr: tstkheap FF kphysaddr
	else if(strcmp(arguments[2], "kphysaddr") == 0)
f01030b9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030bc:	83 c0 08             	add    $0x8,%eax
f01030bf:	8b 00                	mov    (%eax),%eax
f01030c1:	83 ec 08             	sub    $0x8,%esp
f01030c4:	68 3e 5f 13 f0       	push   $0xf0135f3e
f01030c9:	50                   	push   %eax
f01030ca:	e8 20 e9 02 00       	call   f01319ef <strcmp>
f01030cf:	83 c4 10             	add    $0x10,%esp
f01030d2:	85 c0                	test   %eax,%eax
f01030d4:	75 0c                	jne    f01030e2 <command_test_kheap+0x316>
	{
		test_kheap_phys_addr();
f01030d6:	e8 55 0f 02 00       	call   f0124030 <test_kheap_phys_addr>
		return 0;
f01030db:	b8 00 00 00 00       	mov    $0x0,%eax
f01030e0:	eb 60                	jmp    f0103142 <command_test_kheap+0x376>
	}
	// Test 4-kvirtaddr: tstkheap FF kvirtaddr
	else if(strcmp(arguments[2], "kvirtaddr") == 0)
f01030e2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030e5:	83 c0 08             	add    $0x8,%eax
f01030e8:	8b 00                	mov    (%eax),%eax
f01030ea:	83 ec 08             	sub    $0x8,%esp
f01030ed:	68 48 5f 13 f0       	push   $0xf0135f48
f01030f2:	50                   	push   %eax
f01030f3:	e8 f7 e8 02 00       	call   f01319ef <strcmp>
f01030f8:	83 c4 10             	add    $0x10,%esp
f01030fb:	85 c0                	test   %eax,%eax
f01030fd:	75 0c                	jne    f010310b <command_test_kheap+0x33f>
	{
		test_kheap_virt_addr();
f01030ff:	e8 fc 23 02 00       	call   f0125500 <test_kheap_virt_addr>
		return 0;
f0103104:	b8 00 00 00 00       	mov    $0x0,%eax
f0103109:	eb 37                	jmp    f0103142 <command_test_kheap+0x376>
	}
	// Test 5-krealloc: tstkheap BF krealloc
	else if(strcmp(arguments[2], "krealloc") == 0)
f010310b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010310e:	83 c0 08             	add    $0x8,%eax
f0103111:	8b 00                	mov    (%eax),%eax
f0103113:	83 ec 08             	sub    $0x8,%esp
f0103116:	68 52 5f 13 f0       	push   $0xf0135f52
f010311b:	50                   	push   %eax
f010311c:	e8 ce e8 02 00       	call   f01319ef <strcmp>
f0103121:	83 c4 10             	add    $0x10,%esp
f0103124:	85 c0                	test   %eax,%eax
f0103126:	75 15                	jne    f010313d <command_test_kheap+0x371>
	{
		if (isKHeapPlacementStrategyBESTFIT())
f0103128:	e8 27 de ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f010312d:	84 c0                	test   %al,%al
f010312f:	74 05                	je     f0103136 <command_test_kheap+0x36a>
		{
			test_krealloc_BF();
f0103131:	e8 6e b2 02 00       	call   f012e3a4 <test_krealloc_BF>
		}
		return 0;
f0103136:	b8 00 00 00 00       	mov    $0x0,%eax
f010313b:	eb 05                	jmp    f0103142 <command_test_kheap+0x376>
	}
	return 0;
f010313d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103142:	c9                   	leave  
f0103143:	c3                   	ret    

f0103144 <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f0103144:	55                   	push   %ebp
f0103145:	89 e5                	mov    %esp,%ebp
f0103147:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f010314a:	8b 45 08             	mov    0x8(%ebp),%eax
f010314d:	05 00 14 00 00       	add    $0x1400,%eax
f0103152:	c1 e0 03             	shl    $0x3,%eax
f0103155:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103158:	83 ec 04             	sub    $0x4,%esp
f010315b:	6a 08                	push   $0x8
f010315d:	ff 75 0c             	pushl  0xc(%ebp)
f0103160:	ff 75 f4             	pushl  -0xc(%ebp)
f0103163:	e8 ce ee 02 00       	call   f0132036 <ide_read>
f0103168:	83 c4 10             	add    $0x10,%esp
f010316b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f010316e:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103171:	c9                   	leave  
f0103172:	c3                   	ret    

f0103173 <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f0103173:	55                   	push   %ebp
f0103174:	89 e5                	mov    %esp,%ebp
f0103176:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0103179:	8b 45 08             	mov    0x8(%ebp),%eax
f010317c:	05 00 14 00 00       	add    $0x1400,%eax
f0103181:	c1 e0 03             	shl    $0x3,%eax
f0103184:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103187:	83 ec 04             	sub    $0x4,%esp
f010318a:	6a 08                	push   $0x8
f010318c:	ff 75 0c             	pushl  0xc(%ebp)
f010318f:	ff 75 f4             	pushl  -0xc(%ebp)
f0103192:	e8 df ef 02 00       	call   f0132176 <ide_write>
f0103197:	83 c4 10             	add    $0x10,%esp
f010319a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f010319d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01031a1:	74 14                	je     f01031b7 <write_disk_page+0x44>
		panic("Error writing on disk\n");
f01031a3:	83 ec 04             	sub    $0x4,%esp
f01031a6:	68 5c 5f 13 f0       	push   $0xf0135f5c
f01031ab:	6a 2e                	push   $0x2e
f01031ad:	68 73 5f 13 f0       	push   $0xf0135f73
f01031b2:	e8 4e d0 ff ff       	call   f0100205 <_panic>
	return success;
f01031b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01031ba:	c9                   	leave  
f01031bb:	c3                   	ret    

f01031bc <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f01031bc:	55                   	push   %ebp
f01031bd:	89 e5                	mov    %esp,%ebp
f01031bf:	53                   	push   %ebx
f01031c0:	83 ec 14             	sub    $0x14,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f01031c3:	c7 05 b8 ad 89 f0 00 	movl   $0x0,0xf089adb8
f01031ca:	00 00 00 
f01031cd:	c7 05 bc ad 89 f0 00 	movl   $0x0,0xf089adbc
f01031d4:	00 00 00 
f01031d7:	c7 05 c4 ad 89 f0 00 	movl   $0x0,0xf089adc4
f01031de:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f01031e1:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f01031e8:	e9 e8 00 00 00       	jmp    f01032d5 <initialize_disk_page_file+0x119>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f01031ed:	8b 0d dc ac 89 f0    	mov    0xf089acdc,%ecx
f01031f3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01031f6:	89 d0                	mov    %edx,%eax
f01031f8:	01 c0                	add    %eax,%eax
f01031fa:	01 d0                	add    %edx,%eax
f01031fc:	c1 e0 03             	shl    $0x3,%eax
f01031ff:	01 c8                	add    %ecx,%eax
f0103201:	83 ec 0c             	sub    $0xc,%esp
f0103204:	50                   	push   %eax
f0103205:	e8 cd 36 00 00       	call   f01068d7 <initialize_frame_info>
f010320a:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f010320d:	8b 0d dc ac 89 f0    	mov    0xf089acdc,%ecx
f0103213:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103216:	89 d0                	mov    %edx,%eax
f0103218:	01 c0                	add    %eax,%eax
f010321a:	01 d0                	add    %edx,%eax
f010321c:	c1 e0 03             	shl    $0x3,%eax
f010321f:	01 c8                	add    %ecx,%eax
f0103221:	85 c0                	test   %eax,%eax
f0103223:	75 14                	jne    f0103239 <initialize_disk_page_file+0x7d>
f0103225:	83 ec 04             	sub    $0x4,%esp
f0103228:	68 90 5f 13 f0       	push   $0xf0135f90
f010322d:	6a 59                	push   $0x59
f010322f:	68 73 5f 13 f0       	push   $0xf0135f73
f0103234:	e8 cc cf ff ff       	call   f0100205 <_panic>
f0103239:	8b 0d dc ac 89 f0    	mov    0xf089acdc,%ecx
f010323f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103242:	89 d0                	mov    %edx,%eax
f0103244:	01 c0                	add    %eax,%eax
f0103246:	01 d0                	add    %edx,%eax
f0103248:	c1 e0 03             	shl    $0x3,%eax
f010324b:	01 c8                	add    %ecx,%eax
f010324d:	8b 15 b8 ad 89 f0    	mov    0xf089adb8,%edx
f0103253:	89 10                	mov    %edx,(%eax)
f0103255:	8b 00                	mov    (%eax),%eax
f0103257:	85 c0                	test   %eax,%eax
f0103259:	74 1f                	je     f010327a <initialize_disk_page_file+0xbe>
f010325b:	8b 15 b8 ad 89 f0    	mov    0xf089adb8,%edx
f0103261:	8b 1d dc ac 89 f0    	mov    0xf089acdc,%ebx
f0103267:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010326a:	89 c8                	mov    %ecx,%eax
f010326c:	01 c0                	add    %eax,%eax
f010326e:	01 c8                	add    %ecx,%eax
f0103270:	c1 e0 03             	shl    $0x3,%eax
f0103273:	01 d8                	add    %ebx,%eax
f0103275:	89 42 04             	mov    %eax,0x4(%edx)
f0103278:	eb 19                	jmp    f0103293 <initialize_disk_page_file+0xd7>
f010327a:	8b 0d dc ac 89 f0    	mov    0xf089acdc,%ecx
f0103280:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103283:	89 d0                	mov    %edx,%eax
f0103285:	01 c0                	add    %eax,%eax
f0103287:	01 d0                	add    %edx,%eax
f0103289:	c1 e0 03             	shl    $0x3,%eax
f010328c:	01 c8                	add    %ecx,%eax
f010328e:	a3 bc ad 89 f0       	mov    %eax,0xf089adbc
f0103293:	8b 0d dc ac 89 f0    	mov    0xf089acdc,%ecx
f0103299:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010329c:	89 d0                	mov    %edx,%eax
f010329e:	01 c0                	add    %eax,%eax
f01032a0:	01 d0                	add    %edx,%eax
f01032a2:	c1 e0 03             	shl    $0x3,%eax
f01032a5:	01 c8                	add    %ecx,%eax
f01032a7:	a3 b8 ad 89 f0       	mov    %eax,0xf089adb8
f01032ac:	8b 0d dc ac 89 f0    	mov    0xf089acdc,%ecx
f01032b2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01032b5:	89 d0                	mov    %edx,%eax
f01032b7:	01 c0                	add    %eax,%eax
f01032b9:	01 d0                	add    %edx,%eax
f01032bb:	c1 e0 03             	shl    $0x3,%eax
f01032be:	01 c8                	add    %ecx,%eax
f01032c0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01032c7:	a1 c4 ad 89 f0       	mov    0xf089adc4,%eax
f01032cc:	40                   	inc    %eax
f01032cd:	a3 c4 ad 89 f0       	mov    %eax,0xf089adc4
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f01032d2:	ff 45 f4             	incl   -0xc(%ebp)
f01032d5:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f01032dc:	0f 8e 0b ff ff ff    	jle    f01031ed <initialize_disk_page_file+0x31>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f01032e2:	90                   	nop
f01032e3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01032e6:	c9                   	leave  
f01032e7:	c3                   	ret    

f01032e8 <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f01032e8:	55                   	push   %ebp
f01032e9:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f01032eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01032ee:	8b 15 dc ac 89 f0    	mov    0xf089acdc,%edx
f01032f4:	29 d0                	sub    %edx,%eax
f01032f6:	c1 f8 03             	sar    $0x3,%eax
f01032f9:	89 c2                	mov    %eax,%edx
f01032fb:	89 d0                	mov    %edx,%eax
f01032fd:	c1 e0 02             	shl    $0x2,%eax
f0103300:	01 d0                	add    %edx,%eax
f0103302:	c1 e0 02             	shl    $0x2,%eax
f0103305:	01 d0                	add    %edx,%eax
f0103307:	c1 e0 02             	shl    $0x2,%eax
f010330a:	01 d0                	add    %edx,%eax
f010330c:	89 c1                	mov    %eax,%ecx
f010330e:	c1 e1 08             	shl    $0x8,%ecx
f0103311:	01 c8                	add    %ecx,%eax
f0103313:	89 c1                	mov    %eax,%ecx
f0103315:	c1 e1 10             	shl    $0x10,%ecx
f0103318:	01 c8                	add    %ecx,%eax
f010331a:	01 c0                	add    %eax,%eax
f010331c:	01 d0                	add    %edx,%eax
}
f010331e:	5d                   	pop    %ebp
f010331f:	c3                   	ret    

f0103320 <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f0103320:	55                   	push   %ebp
f0103321:	89 e5                	mov    %esp,%ebp
f0103323:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct FrameInfo *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f0103326:	a1 b8 ad 89 f0       	mov    0xf089adb8,%eax
f010332b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f010332e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103332:	75 0a                	jne    f010333e <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f0103334:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103339:	e9 a7 00 00 00       	jmp    f01033e5 <allocate_disk_frame+0xc5>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f010333e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103342:	75 14                	jne    f0103358 <allocate_disk_frame+0x38>
f0103344:	83 ec 04             	sub    $0x4,%esp
f0103347:	68 b3 5f 13 f0       	push   $0xf0135fb3
f010334c:	6a 78                	push   $0x78
f010334e:	68 73 5f 13 f0       	push   $0xf0135f73
f0103353:	e8 ad ce ff ff       	call   f0100205 <_panic>
f0103358:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010335b:	8b 00                	mov    (%eax),%eax
f010335d:	85 c0                	test   %eax,%eax
f010335f:	74 10                	je     f0103371 <allocate_disk_frame+0x51>
f0103361:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103364:	8b 00                	mov    (%eax),%eax
f0103366:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103369:	8b 52 04             	mov    0x4(%edx),%edx
f010336c:	89 50 04             	mov    %edx,0x4(%eax)
f010336f:	eb 0b                	jmp    f010337c <allocate_disk_frame+0x5c>
f0103371:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103374:	8b 40 04             	mov    0x4(%eax),%eax
f0103377:	a3 bc ad 89 f0       	mov    %eax,0xf089adbc
f010337c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010337f:	8b 40 04             	mov    0x4(%eax),%eax
f0103382:	85 c0                	test   %eax,%eax
f0103384:	74 0f                	je     f0103395 <allocate_disk_frame+0x75>
f0103386:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103389:	8b 40 04             	mov    0x4(%eax),%eax
f010338c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010338f:	8b 12                	mov    (%edx),%edx
f0103391:	89 10                	mov    %edx,(%eax)
f0103393:	eb 0a                	jmp    f010339f <allocate_disk_frame+0x7f>
f0103395:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103398:	8b 00                	mov    (%eax),%eax
f010339a:	a3 b8 ad 89 f0       	mov    %eax,0xf089adb8
f010339f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01033a2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01033a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01033ab:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01033b2:	a1 c4 ad 89 f0       	mov    0xf089adc4,%eax
f01033b7:	48                   	dec    %eax
f01033b8:	a3 c4 ad 89 f0       	mov    %eax,0xf089adc4
	initialize_frame_info(ptr_frame_info);
f01033bd:	83 ec 0c             	sub    $0xc,%esp
f01033c0:	ff 75 f4             	pushl  -0xc(%ebp)
f01033c3:	e8 0f 35 00 00       	call   f01068d7 <initialize_frame_info>
f01033c8:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f01033cb:	83 ec 0c             	sub    $0xc,%esp
f01033ce:	ff 75 f4             	pushl  -0xc(%ebp)
f01033d1:	e8 12 ff ff ff       	call   f01032e8 <to_disk_frame_number>
f01033d6:	83 c4 10             	add    $0x10,%esp
f01033d9:	89 c2                	mov    %eax,%edx
f01033db:	8b 45 08             	mov    0x8(%ebp),%eax
f01033de:	89 10                	mov    %edx,(%eax)
	return 0;
f01033e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01033e5:	c9                   	leave  
f01033e6:	c3                   	ret    

f01033e7 <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f01033e7:	55                   	push   %ebp
f01033e8:	89 e5                	mov    %esp,%ebp
f01033ea:	53                   	push   %ebx
f01033eb:	83 ec 04             	sub    $0x4,%esp
	// Fill this function in
	if(dfn == 0) return;
f01033ee:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01033f2:	0f 84 ca 00 00 00    	je     f01034c2 <free_disk_frame+0xdb>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f01033f8:	8b 0d dc ac 89 f0    	mov    0xf089acdc,%ecx
f01033fe:	8b 55 08             	mov    0x8(%ebp),%edx
f0103401:	89 d0                	mov    %edx,%eax
f0103403:	01 c0                	add    %eax,%eax
f0103405:	01 d0                	add    %edx,%eax
f0103407:	c1 e0 03             	shl    $0x3,%eax
f010340a:	01 c8                	add    %ecx,%eax
f010340c:	85 c0                	test   %eax,%eax
f010340e:	75 17                	jne    f0103427 <free_disk_frame+0x40>
f0103410:	83 ec 04             	sub    $0x4,%esp
f0103413:	68 90 5f 13 f0       	push   $0xf0135f90
f0103418:	68 85 00 00 00       	push   $0x85
f010341d:	68 73 5f 13 f0       	push   $0xf0135f73
f0103422:	e8 de cd ff ff       	call   f0100205 <_panic>
f0103427:	8b 0d dc ac 89 f0    	mov    0xf089acdc,%ecx
f010342d:	8b 55 08             	mov    0x8(%ebp),%edx
f0103430:	89 d0                	mov    %edx,%eax
f0103432:	01 c0                	add    %eax,%eax
f0103434:	01 d0                	add    %edx,%eax
f0103436:	c1 e0 03             	shl    $0x3,%eax
f0103439:	01 c8                	add    %ecx,%eax
f010343b:	8b 15 b8 ad 89 f0    	mov    0xf089adb8,%edx
f0103441:	89 10                	mov    %edx,(%eax)
f0103443:	8b 00                	mov    (%eax),%eax
f0103445:	85 c0                	test   %eax,%eax
f0103447:	74 1f                	je     f0103468 <free_disk_frame+0x81>
f0103449:	8b 15 b8 ad 89 f0    	mov    0xf089adb8,%edx
f010344f:	8b 1d dc ac 89 f0    	mov    0xf089acdc,%ebx
f0103455:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0103458:	89 c8                	mov    %ecx,%eax
f010345a:	01 c0                	add    %eax,%eax
f010345c:	01 c8                	add    %ecx,%eax
f010345e:	c1 e0 03             	shl    $0x3,%eax
f0103461:	01 d8                	add    %ebx,%eax
f0103463:	89 42 04             	mov    %eax,0x4(%edx)
f0103466:	eb 19                	jmp    f0103481 <free_disk_frame+0x9a>
f0103468:	8b 0d dc ac 89 f0    	mov    0xf089acdc,%ecx
f010346e:	8b 55 08             	mov    0x8(%ebp),%edx
f0103471:	89 d0                	mov    %edx,%eax
f0103473:	01 c0                	add    %eax,%eax
f0103475:	01 d0                	add    %edx,%eax
f0103477:	c1 e0 03             	shl    $0x3,%eax
f010347a:	01 c8                	add    %ecx,%eax
f010347c:	a3 bc ad 89 f0       	mov    %eax,0xf089adbc
f0103481:	8b 0d dc ac 89 f0    	mov    0xf089acdc,%ecx
f0103487:	8b 55 08             	mov    0x8(%ebp),%edx
f010348a:	89 d0                	mov    %edx,%eax
f010348c:	01 c0                	add    %eax,%eax
f010348e:	01 d0                	add    %edx,%eax
f0103490:	c1 e0 03             	shl    $0x3,%eax
f0103493:	01 c8                	add    %ecx,%eax
f0103495:	a3 b8 ad 89 f0       	mov    %eax,0xf089adb8
f010349a:	8b 0d dc ac 89 f0    	mov    0xf089acdc,%ecx
f01034a0:	8b 55 08             	mov    0x8(%ebp),%edx
f01034a3:	89 d0                	mov    %edx,%eax
f01034a5:	01 c0                	add    %eax,%eax
f01034a7:	01 d0                	add    %edx,%eax
f01034a9:	c1 e0 03             	shl    $0x3,%eax
f01034ac:	01 c8                	add    %ecx,%eax
f01034ae:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01034b5:	a1 c4 ad 89 f0       	mov    0xf089adc4,%eax
f01034ba:	40                   	inc    %eax
f01034bb:	a3 c4 ad 89 f0       	mov    %eax,0xf089adc4
f01034c0:	eb 01                	jmp    f01034c3 <free_disk_frame+0xdc>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f01034c2:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f01034c3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01034c6:	c9                   	leave  
f01034c7:	c3                   	ret    

f01034c8 <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f01034c8:	55                   	push   %ebp
f01034c9:	89 e5                	mov    %esp,%ebp
f01034cb:	53                   	push   %ebx
f01034cc:	83 ec 14             	sub    $0x14,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f01034cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01034d2:	c1 e8 16             	shr    $0x16,%eax
f01034d5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01034dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01034df:	01 d0                	add    %edx,%eax
f01034e1:	8b 00                	mov    (%eax),%eax
f01034e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f01034e6:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f01034ed:	77 1d                	ja     f010350c <get_disk_page_table+0x44>
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
f01034ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01034f2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01034f7:	83 ec 0c             	sub    $0xc,%esp
f01034fa:	50                   	push   %eax
f01034fb:	e8 7d 4a 00 00       	call   f0107f7d <kheap_virtual_address>
f0103500:	83 c4 10             	add    $0x10,%esp
f0103503:	89 c2                	mov    %eax,%edx
f0103505:	8b 45 14             	mov    0x14(%ebp),%eax
f0103508:	89 10                	mov    %edx,(%eax)
f010350a:	eb 44                	jmp    f0103550 <get_disk_page_table+0x88>
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f010350c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010350f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103514:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103517:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010351a:	c1 e8 0c             	shr    $0xc,%eax
f010351d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103520:	a1 10 ad 89 f0       	mov    0xf089ad10,%eax
f0103525:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103528:	72 17                	jb     f0103541 <get_disk_page_table+0x79>
f010352a:	ff 75 f0             	pushl  -0x10(%ebp)
f010352d:	68 d4 5f 13 f0       	push   $0xf0135fd4
f0103532:	68 92 00 00 00       	push   $0x92
f0103537:	68 73 5f 13 f0       	push   $0xf0135f73
f010353c:	e8 c4 cc ff ff       	call   f0100205 <_panic>
f0103541:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103544:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103549:	89 c2                	mov    %eax,%edx
f010354b:	8b 45 14             	mov    0x14(%ebp),%eax
f010354e:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f0103550:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103554:	0f 85 80 00 00 00    	jne    f01035da <get_disk_page_table+0x112>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f010355a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010355e:	74 6a                	je     f01035ca <get_disk_page_table+0x102>
		{

#if USE_KHEAP
			{
				*ptr_disk_page_table = (uint32*)kmalloc(PAGE_SIZE);
f0103560:	83 ec 0c             	sub    $0xc,%esp
f0103563:	68 00 10 00 00       	push   $0x1000
f0103568:	e8 1e 48 00 00       	call   f0107d8b <kmalloc>
f010356d:	83 c4 10             	add    $0x10,%esp
f0103570:	89 c2                	mov    %eax,%edx
f0103572:	8b 45 14             	mov    0x14(%ebp),%eax
f0103575:	89 10                	mov    %edx,(%eax)
				if(*ptr_disk_page_table == NULL)
f0103577:	8b 45 14             	mov    0x14(%ebp),%eax
f010357a:	8b 00                	mov    (%eax),%eax
f010357c:	85 c0                	test   %eax,%eax
f010357e:	75 07                	jne    f0103587 <get_disk_page_table+0xbf>
				{
					return E_NO_VM;
f0103580:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103585:	eb 58                	jmp    f01035df <get_disk_page_table+0x117>
				}
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f0103587:	8b 45 0c             	mov    0xc(%ebp),%eax
f010358a:	c1 e8 16             	shr    $0x16,%eax
f010358d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103594:	8b 45 08             	mov    0x8(%ebp),%eax
f0103597:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f010359a:	8b 45 14             	mov    0x14(%ebp),%eax
f010359d:	8b 00                	mov    (%eax),%eax
f010359f:	83 ec 0c             	sub    $0xc,%esp
f01035a2:	50                   	push   %eax
f01035a3:	e8 01 4a 00 00       	call   f0107fa9 <kheap_physical_address>
f01035a8:	83 c4 10             	add    $0x10,%esp
f01035ab:	83 c8 01             	or     $0x1,%eax
f01035ae:	89 03                	mov    %eax,(%ebx)
				ptr_frame_info->references = 1;
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f01035b0:	8b 45 14             	mov    0x14(%ebp),%eax
f01035b3:	8b 00                	mov    (%eax),%eax
f01035b5:	83 ec 04             	sub    $0x4,%esp
f01035b8:	68 00 10 00 00       	push   $0x1000
f01035bd:	6a 00                	push   $0x0
f01035bf:	50                   	push   %eax
f01035c0:	e8 0c e5 02 00       	call   f0131ad1 <memset>
f01035c5:	83 c4 10             	add    $0x10,%esp
f01035c8:	eb 10                	jmp    f01035da <get_disk_page_table+0x112>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f01035ca:	8b 45 14             	mov    0x14(%ebp),%eax
f01035cd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f01035d3:	b8 00 00 00 00       	mov    $0x0,%eax
f01035d8:	eb 05                	jmp    f01035df <get_disk_page_table+0x117>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f01035da:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01035df:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01035e2:	c9                   	leave  
f01035e3:	c3                   	ret    

f01035e4 <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f01035e4:	55                   	push   %ebp
f01035e5:	89 e5                	mov    %esp,%ebp
f01035e7:	83 ec 28             	sub    $0x28,%esp
f01035ea:	8b 45 10             	mov    0x10(%ebp),%eax
f01035ed:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f01035f0:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f01035f4:	74 75                	je     f010366b <pf_add_empty_env_page+0x87>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f01035f6:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f01035fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103600:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103605:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103608:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010360b:	ba 00 00 00 00       	mov    $0x0,%edx
f0103610:	f7 75 f4             	divl   -0xc(%ebp)
f0103613:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103616:	29 d0                	sub    %edx,%eax
f0103618:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010361b:	73 32                	jae    f010364f <pf_add_empty_env_page+0x6b>
f010361d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103620:	8b 90 58 05 00 00    	mov    0x558(%eax),%edx
f0103626:	b8 00 00 00 00       	mov    $0x0,%eax
f010362b:	29 d0                	sub    %edx,%eax
f010362d:	c1 e0 0c             	shl    $0xc,%eax
f0103630:	2d 00 20 40 11       	sub    $0x11402000,%eax
f0103635:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103638:	76 15                	jbe    f010364f <pf_add_empty_env_page+0x6b>
			ptr_env->nNewPageAdded++ ;
f010363a:	8b 45 08             	mov    0x8(%ebp),%eax
f010363d:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f0103643:	8d 50 01             	lea    0x1(%eax),%edx
f0103646:	8b 45 08             	mov    0x8(%ebp),%eax
f0103649:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f010364f:	a1 60 ad 89 f0       	mov    0xf089ad60,%eax
f0103654:	83 ec 04             	sub    $0x4,%esp
f0103657:	50                   	push   %eax
f0103658:	ff 75 0c             	pushl  0xc(%ebp)
f010365b:	ff 75 08             	pushl  0x8(%ebp)
f010365e:	e8 b2 00 00 00       	call   f0103715 <pf_add_env_page>
f0103663:	83 c4 10             	add    $0x10,%esp
f0103666:	e9 a8 00 00 00       	jmp    f0103713 <pf_add_empty_env_page+0x12f>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010366b:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103672:	76 19                	jbe    f010368d <pf_add_empty_env_page+0xa9>
f0103674:	68 04 60 13 f0       	push   $0xf0136004
f0103679:	68 2a 60 13 f0       	push   $0xf013602a
f010367e:	68 d1 00 00 00       	push   $0xd1
f0103683:	68 73 5f 13 f0       	push   $0xf0135f73
f0103688:	e8 78 cb ff ff       	call   f0100205 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010368d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103690:	83 c0 64             	add    $0x64,%eax
f0103693:	83 ec 08             	sub    $0x8,%esp
f0103696:	50                   	push   %eax
f0103697:	ff 75 08             	pushl  0x8(%ebp)
f010369a:	e8 10 06 00 00       	call   f0103caf <get_disk_page_directory>
f010369f:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f01036a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01036a5:	8b 40 64             	mov    0x64(%eax),%eax
f01036a8:	8d 55 ec             	lea    -0x14(%ebp),%edx
f01036ab:	52                   	push   %edx
f01036ac:	6a 01                	push   $0x1
f01036ae:	ff 75 0c             	pushl  0xc(%ebp)
f01036b1:	50                   	push   %eax
f01036b2:	e8 11 fe ff ff       	call   f01034c8 <get_disk_page_table>
f01036b7:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01036ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01036bd:	8b 55 0c             	mov    0xc(%ebp),%edx
f01036c0:	c1 ea 0c             	shr    $0xc,%edx
f01036c3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01036c9:	c1 e2 02             	shl    $0x2,%edx
f01036cc:	01 d0                	add    %edx,%eax
f01036ce:	8b 00                	mov    (%eax),%eax
f01036d0:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f01036d3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01036d6:	85 c0                	test   %eax,%eax
f01036d8:	75 34                	jne    f010370e <pf_add_empty_env_page+0x12a>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f01036da:	83 ec 0c             	sub    $0xc,%esp
f01036dd:	8d 45 e8             	lea    -0x18(%ebp),%eax
f01036e0:	50                   	push   %eax
f01036e1:	e8 3a fc ff ff       	call   f0103320 <allocate_disk_frame>
f01036e6:	83 c4 10             	add    $0x10,%esp
f01036e9:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01036ec:	75 07                	jne    f01036f5 <pf_add_empty_env_page+0x111>
f01036ee:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01036f3:	eb 1e                	jmp    f0103713 <pf_add_empty_env_page+0x12f>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f01036f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01036f8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01036fb:	c1 ea 0c             	shr    $0xc,%edx
f01036fe:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103704:	c1 e2 02             	shl    $0x2,%edx
f0103707:	01 c2                	add    %eax,%edx
f0103709:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010370c:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f010370e:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0103713:	c9                   	leave  
f0103714:	c3                   	ret    

f0103715 <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f0103715:	55                   	push   %ebp
f0103716:	89 e5                	mov    %esp,%ebp
f0103718:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010371b:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103722:	76 19                	jbe    f010373d <pf_add_env_page+0x28>
f0103724:	68 04 60 13 f0       	push   $0xf0136004
f0103729:	68 2a 60 13 f0       	push   $0xf013602a
f010372e:	68 e6 00 00 00       	push   $0xe6
f0103733:	68 73 5f 13 f0       	push   $0xf0135f73
f0103738:	e8 c8 ca ff ff       	call   f0100205 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010373d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103740:	83 c0 64             	add    $0x64,%eax
f0103743:	83 ec 08             	sub    $0x8,%esp
f0103746:	50                   	push   %eax
f0103747:	ff 75 08             	pushl  0x8(%ebp)
f010374a:	e8 60 05 00 00       	call   f0103caf <get_disk_page_directory>
f010374f:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103752:	8b 45 08             	mov    0x8(%ebp),%eax
f0103755:	8b 40 64             	mov    0x64(%eax),%eax
f0103758:	8d 55 f0             	lea    -0x10(%ebp),%edx
f010375b:	52                   	push   %edx
f010375c:	6a 01                	push   $0x1
f010375e:	ff 75 0c             	pushl  0xc(%ebp)
f0103761:	50                   	push   %eax
f0103762:	e8 61 fd ff ff       	call   f01034c8 <get_disk_page_table>
f0103767:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010376a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010376d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103770:	c1 ea 0c             	shr    $0xc,%edx
f0103773:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103779:	c1 e2 02             	shl    $0x2,%edx
f010377c:	01 d0                	add    %edx,%eax
f010377e:	8b 00                	mov    (%eax),%eax
f0103780:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f0103783:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103786:	85 c0                	test   %eax,%eax
f0103788:	75 34                	jne    f01037be <pf_add_env_page+0xa9>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010378a:	83 ec 0c             	sub    $0xc,%esp
f010378d:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0103790:	50                   	push   %eax
f0103791:	e8 8a fb ff ff       	call   f0103320 <allocate_disk_frame>
f0103796:	83 c4 10             	add    $0x10,%esp
f0103799:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010379c:	75 07                	jne    f01037a5 <pf_add_env_page+0x90>
f010379e:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01037a3:	eb 31                	jmp    f01037d6 <pf_add_env_page+0xc1>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f01037a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01037a8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01037ab:	c1 ea 0c             	shr    $0xc,%edx
f01037ae:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01037b4:	c1 e2 02             	shl    $0x2,%edx
f01037b7:	01 c2                	add    %eax,%edx
f01037b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01037bc:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f01037be:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01037c1:	83 ec 08             	sub    $0x8,%esp
f01037c4:	ff 75 10             	pushl  0x10(%ebp)
f01037c7:	50                   	push   %eax
f01037c8:	e8 a6 f9 ff ff       	call   f0103173 <write_disk_page>
f01037cd:	83 c4 10             	add    $0x10,%esp
f01037d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f01037d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01037d6:	c9                   	leave  
f01037d7:	c3                   	ret    

f01037d8 <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f01037d8:	55                   	push   %ebp
f01037d9:	89 e5                	mov    %esp,%ebp
f01037db:	83 ec 38             	sub    $0x38,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f01037de:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f01037e5:	76 19                	jbe    f0103800 <pf_update_env_page+0x28>
f01037e7:	68 04 60 13 f0       	push   $0xf0136004
f01037ec:	68 2a 60 13 f0       	push   $0xf013602a
f01037f1:	68 08 01 00 00       	push   $0x108
f01037f6:	68 73 5f 13 f0       	push   $0xf0135f73
f01037fb:	e8 05 ca ff ff       	call   f0100205 <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103800:	8b 45 08             	mov    0x8(%ebp),%eax
f0103803:	83 c0 64             	add    $0x64,%eax
f0103806:	83 ec 08             	sub    $0x8,%esp
f0103809:	50                   	push   %eax
f010380a:	ff 75 08             	pushl  0x8(%ebp)
f010380d:	e8 9d 04 00 00       	call   f0103caf <get_disk_page_directory>
f0103812:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103815:	8b 45 08             	mov    0x8(%ebp),%eax
f0103818:	8b 40 64             	mov    0x64(%eax),%eax
f010381b:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010381e:	52                   	push   %edx
f010381f:	6a 00                	push   $0x0
f0103821:	ff 75 0c             	pushl  0xc(%ebp)
f0103824:	50                   	push   %eax
f0103825:	e8 9e fc ff ff       	call   f01034c8 <get_disk_page_table>
f010382a:	83 c4 10             	add    $0x10,%esp

	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f010382d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103830:	85 c0                	test   %eax,%eax
f0103832:	74 29                	je     f010385d <pf_update_env_page+0x85>
f0103834:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103837:	85 c0                	test   %eax,%eax
f0103839:	0f 84 43 01 00 00    	je     f0103982 <pf_update_env_page+0x1aa>
f010383f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103842:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103845:	c1 ea 0c             	shr    $0xc,%edx
f0103848:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010384e:	c1 e2 02             	shl    $0x2,%edx
f0103851:	01 d0                	add    %edx,%eax
f0103853:	8b 00                	mov    (%eax),%eax
f0103855:	85 c0                	test   %eax,%eax
f0103857:	0f 85 25 01 00 00    	jne    f0103982 <pf_update_env_page+0x1aa>
	{
		uint32 VA = (uint32)virtual_address ;
f010385d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103860:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f0103863:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103866:	85 c0                	test   %eax,%eax
f0103868:	79 09                	jns    f0103873 <pf_update_env_page+0x9b>
f010386a:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f0103871:	76 38                	jbe    f01038ab <pf_update_env_page+0xd3>
f0103873:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f010387a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010387d:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103882:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103885:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103888:	ba 00 00 00 00       	mov    $0x0,%edx
f010388d:	f7 75 f0             	divl   -0x10(%ebp)
f0103890:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103893:	29 d0                	sub    %edx,%eax
f0103895:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0103898:	0f 87 cd 00 00 00    	ja     f010396b <pf_update_env_page+0x193>
f010389e:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f01038a5:	0f 87 c0 00 00 00    	ja     f010396b <pf_update_env_page+0x193>
		{
			uint32 *ptr_table ;
			struct FrameInfo* ptr_fi = get_frame_info(ptr_env->env_page_directory, virtual_address, &ptr_table);
f01038ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01038ae:	8b 40 5c             	mov    0x5c(%eax),%eax
f01038b1:	83 ec 04             	sub    $0x4,%esp
f01038b4:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f01038b7:	52                   	push   %edx
f01038b8:	ff 75 0c             	pushl  0xc(%ebp)
f01038bb:	50                   	push   %eax
f01038bc:	e8 45 35 00 00       	call   f0106e06 <get_frame_info>
f01038c1:	83 c4 10             	add    $0x10,%esp
f01038c4:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//if VA already mapped on the same modified_page_frame_info, then write it directly from the VA
			if (ptr_fi == modified_page_frame_info)
f01038c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01038ca:	3b 45 10             	cmp    0x10(%ebp),%eax
f01038cd:	75 52                	jne    f0103921 <pf_update_env_page+0x149>
			{
				ret = pf_add_env_page(ptr_env, VA, (void*)virtual_address) ;
f01038cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01038d2:	83 ec 04             	sub    $0x4,%esp
f01038d5:	50                   	push   %eax
f01038d6:	ff 75 f4             	pushl  -0xc(%ebp)
f01038d9:	ff 75 08             	pushl  0x8(%ebp)
f01038dc:	e8 34 fe ff ff       	call   f0103715 <pf_add_env_page>
f01038e1:	83 c4 10             	add    $0x10,%esp
f01038e4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f01038e7:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f01038eb:	75 17                	jne    f0103904 <pf_update_env_page+0x12c>
				{
					panic("pf_update_env_page: page file out of space!") ;
f01038ed:	83 ec 04             	sub    $0x4,%esp
f01038f0:	68 40 60 13 f0       	push   $0xf0136040
f01038f5:	68 1d 01 00 00       	push   $0x11d
f01038fa:	68 73 5f 13 f0       	push   $0xf0135f73
f01038ff:	e8 01 c9 ff ff       	call   f0100205 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0103904:	8b 45 08             	mov    0x8(%ebp),%eax
f0103907:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f010390d:	8d 50 01             	lea    0x1(%eax),%edx
f0103910:	8b 45 08             	mov    0x8(%ebp),%eax
f0103913:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
				return ret ;
f0103919:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010391c:	e9 17 01 00 00       	jmp    f0103a38 <pf_update_env_page+0x260>
			}
			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f0103921:	83 ec 04             	sub    $0x4,%esp
f0103924:	6a 00                	push   $0x0
f0103926:	ff 75 f4             	pushl  -0xc(%ebp)
f0103929:	ff 75 08             	pushl  0x8(%ebp)
f010392c:	e8 b3 fc ff ff       	call   f01035e4 <pf_add_empty_env_page>
f0103931:	83 c4 10             	add    $0x10,%esp
f0103934:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f0103937:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f010393b:	75 17                	jne    f0103954 <pf_update_env_page+0x17c>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f010393d:	83 ec 04             	sub    $0x4,%esp
f0103940:	68 6c 60 13 f0       	push   $0xf013606c
f0103945:	68 28 01 00 00       	push   $0x128
f010394a:	68 73 5f 13 f0       	push   $0xf0135f73
f010394f:	e8 b1 c8 ff ff       	call   f0100205 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0103954:	8b 45 08             	mov    0x8(%ebp),%eax
f0103957:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f010395d:	8d 50 01             	lea    0x1(%eax),%edx
f0103960:	8b 45 08             	mov    0x8(%ebp),%eax
f0103963:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
	{
		uint32 VA = (uint32)virtual_address ;
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
		{
f0103969:	eb 17                	jmp    f0103982 <pf_update_env_page+0x1aa>
				ptr_env->nNewPageAdded++ ;
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f010396b:	83 ec 04             	sub    $0x4,%esp
f010396e:	68 b8 60 13 f0       	push   $0xf01360b8
f0103973:	68 2f 01 00 00       	push   $0x12f
f0103978:	68 73 5f 13 f0       	push   $0xf0135f73
f010397d:	e8 83 c8 ff ff       	call   f0100205 <_panic>
		}
	}
	//2022 END========================================

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103982:	8b 45 08             	mov    0x8(%ebp),%eax
f0103985:	8b 40 64             	mov    0x64(%eax),%eax
f0103988:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010398b:	52                   	push   %edx
f010398c:	6a 00                	push   $0x0
f010398e:	ff 75 0c             	pushl  0xc(%ebp)
f0103991:	50                   	push   %eax
f0103992:	e8 31 fb ff ff       	call   f01034c8 <get_disk_page_table>
f0103997:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010399a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010399d:	8b 55 0c             	mov    0xc(%ebp),%edx
f01039a0:	c1 ea 0c             	shr    $0xc,%edx
f01039a3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01039a9:	c1 e2 02             	shl    $0x2,%edx
f01039ac:	01 d0                	add    %edx,%eax
f01039ae:	8b 00                	mov    (%eax),%eax
f01039b0:	89 45 e0             	mov    %eax,-0x20(%ebp)
#if USE_KHEAP
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unused VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(ptr_env->env_page_directory, modified_page_frame_info, USER_LIMIT, 0);
f01039b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01039b6:	8b 40 5c             	mov    0x5c(%eax),%eax
f01039b9:	6a 00                	push   $0x0
f01039bb:	68 00 00 80 ef       	push   $0xef800000
f01039c0:	ff 75 10             	pushl  0x10(%ebp)
f01039c3:	50                   	push   %eax
f01039c4:	e8 78 33 00 00       	call   f0106d41 <map_frame>
f01039c9:	83 c4 10             	add    $0x10,%esp
		ret = write_disk_page(dfn, (void*)ROUNDDOWN(USER_LIMIT, PAGE_SIZE));
f01039cc:	c7 45 dc 00 00 80 ef 	movl   $0xef800000,-0x24(%ebp)
f01039d3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01039d6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01039db:	83 ec 08             	sub    $0x8,%esp
f01039de:	50                   	push   %eax
f01039df:	ff 75 e0             	pushl  -0x20(%ebp)
f01039e2:	e8 8c f7 ff ff       	call   f0103173 <write_disk_page>
f01039e7:	83 c4 10             	add    $0x10,%esp
f01039ea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// TEMPORARILY increase the references to prevent unmap_frame from removing the frame
		modified_page_frame_info->references += 1;
f01039ed:	8b 45 10             	mov    0x10(%ebp),%eax
f01039f0:	8b 40 08             	mov    0x8(%eax),%eax
f01039f3:	40                   	inc    %eax
f01039f4:	8b 55 10             	mov    0x10(%ebp),%edx
f01039f7:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(ptr_env->env_page_directory, USER_LIMIT);
f01039fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01039fe:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103a01:	83 ec 08             	sub    $0x8,%esp
f0103a04:	68 00 00 80 ef       	push   $0xef800000
f0103a09:	50                   	push   %eax
f0103a0a:	e8 67 34 00 00       	call   f0106e76 <unmap_frame>
f0103a0f:	83 c4 10             	add    $0x10,%esp
		// Return it to its original status
		modified_page_frame_info->references -= 1;
f0103a12:	8b 45 10             	mov    0x10(%ebp),%eax
f0103a15:	8b 40 08             	mov    0x8(%eax),%eax
f0103a18:	48                   	dec    %eax
f0103a19:	8b 55 10             	mov    0x10(%ebp),%edx
f0103a1c:	66 89 42 08          	mov    %ax,0x8(%edx)
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f0103a20:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a23:	8b 80 50 05 00 00    	mov    0x550(%eax),%eax
f0103a29:	8d 50 01             	lea    0x1(%eax),%edx
f0103a2c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a2f:	89 90 50 05 00 00    	mov    %edx,0x550(%eax)
	//======================

	return ret;
f0103a35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f0103a38:	c9                   	leave  
f0103a39:	c3                   	ret    

f0103a3a <pf_read_env_page>:

int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f0103a3a:	55                   	push   %ebp
f0103a3b:	89 e5                	mov    %esp,%ebp
f0103a3d:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f0103a40:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103a43:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103a46:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103a49:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103a4e:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103a51:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a54:	8b 40 64             	mov    0x64(%eax),%eax
f0103a57:	85 c0                	test   %eax,%eax
f0103a59:	75 0a                	jne    f0103a65 <pf_read_env_page+0x2b>
f0103a5b:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103a60:	e9 90 00 00 00       	jmp    f0103af5 <pf_read_env_page+0xbb>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f0103a65:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103a68:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a6b:	8b 40 64             	mov    0x64(%eax),%eax
f0103a6e:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f0103a71:	51                   	push   %ecx
f0103a72:	6a 00                	push   $0x0
f0103a74:	52                   	push   %edx
f0103a75:	50                   	push   %eax
f0103a76:	e8 4d fa ff ff       	call   f01034c8 <get_disk_page_table>
f0103a7b:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103a7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103a81:	85 c0                	test   %eax,%eax
f0103a83:	75 07                	jne    f0103a8c <pf_read_env_page+0x52>
f0103a85:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103a8a:	eb 69                	jmp    f0103af5 <pf_read_env_page+0xbb>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103a8c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103a8f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103a92:	c1 ea 0c             	shr    $0xc,%edx
f0103a95:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103a9b:	c1 e2 02             	shl    $0x2,%edx
f0103a9e:	01 d0                	add    %edx,%eax
f0103aa0:	8b 00                	mov    (%eax),%eax
f0103aa2:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103aa5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103aa9:	75 07                	jne    f0103ab2 <pf_read_env_page+0x78>
f0103aab:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103ab0:	eb 43                	jmp    f0103af5 <pf_read_env_page+0xbb>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f0103ab2:	83 ec 08             	sub    $0x8,%esp
f0103ab5:	ff 75 0c             	pushl  0xc(%ebp)
f0103ab8:	ff 75 f0             	pushl  -0x10(%ebp)
f0103abb:	e8 84 f6 ff ff       	call   f0103144 <read_disk_page>
f0103ac0:	83 c4 10             	add    $0x10,%esp
f0103ac3:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f0103ac6:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103ac9:	8b 45 08             	mov    0x8(%ebp),%eax
f0103acc:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103acf:	6a 40                	push   $0x40
f0103ad1:	6a 00                	push   $0x0
f0103ad3:	52                   	push   %edx
f0103ad4:	50                   	push   %eax
f0103ad5:	e8 d9 45 00 00       	call   f01080b3 <pt_set_page_permissions>
f0103ada:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f0103add:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ae0:	8b 80 4c 05 00 00    	mov    0x54c(%eax),%eax
f0103ae6:	8d 50 01             	lea    0x1(%eax),%edx
f0103ae9:	8b 45 08             	mov    0x8(%ebp),%eax
f0103aec:	89 90 4c 05 00 00    	mov    %edx,0x54c(%eax)
	//======================

	return disk_read_error;
f0103af2:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f0103af5:	c9                   	leave  
f0103af6:	c3                   	ret    

f0103af7 <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f0103af7:	55                   	push   %ebp
f0103af8:	89 e5                	mov    %esp,%ebp
f0103afa:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103afd:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b00:	8b 40 64             	mov    0x64(%eax),%eax
f0103b03:	85 c0                	test   %eax,%eax
f0103b05:	74 62                	je     f0103b69 <pf_remove_env_page+0x72>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103b07:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b0a:	8b 40 64             	mov    0x64(%eax),%eax
f0103b0d:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103b10:	52                   	push   %edx
f0103b11:	6a 00                	push   $0x0
f0103b13:	ff 75 0c             	pushl  0xc(%ebp)
f0103b16:	50                   	push   %eax
f0103b17:	e8 ac f9 ff ff       	call   f01034c8 <get_disk_page_table>
f0103b1c:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f0103b1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b22:	85 c0                	test   %eax,%eax
f0103b24:	74 46                	je     f0103b6c <pf_remove_env_page+0x75>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103b26:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b29:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103b2c:	c1 ea 0c             	shr    $0xc,%edx
f0103b2f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103b35:	c1 e2 02             	shl    $0x2,%edx
f0103b38:	01 d0                	add    %edx,%eax
f0103b3a:	8b 00                	mov    (%eax),%eax
f0103b3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f0103b3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b42:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103b45:	c1 ea 0c             	shr    $0xc,%edx
f0103b48:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103b4e:	c1 e2 02             	shl    $0x2,%edx
f0103b51:	01 d0                	add    %edx,%eax
f0103b53:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0103b59:	83 ec 0c             	sub    $0xc,%esp
f0103b5c:	ff 75 f4             	pushl  -0xc(%ebp)
f0103b5f:	e8 83 f8 ff ff       	call   f01033e7 <free_disk_frame>
f0103b64:	83 c4 10             	add    $0x10,%esp
f0103b67:	eb 04                	jmp    f0103b6d <pf_remove_env_page+0x76>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103b69:	90                   	nop
f0103b6a:	eb 01                	jmp    f0103b6d <pf_remove_env_page+0x76>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f0103b6c:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103b6d:	c9                   	leave  
f0103b6e:	c3                   	ret    

f0103b6f <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f0103b6f:	55                   	push   %ebp
f0103b70:	89 e5                	mov    %esp,%ebp
f0103b72:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103b75:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103b7c:	e9 b8 00 00 00       	jmp    f0103c39 <pf_free_env+0xca>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f0103b81:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b84:	8b 40 64             	mov    0x64(%eax),%eax
f0103b87:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103b8a:	c1 e2 02             	shl    $0x2,%edx
f0103b8d:	01 d0                	add    %edx,%eax
f0103b8f:	8b 00                	mov    (%eax),%eax
f0103b91:	83 e0 01             	and    $0x1,%eax
f0103b94:	85 c0                	test   %eax,%eax
f0103b96:	0f 84 99 00 00 00    	je     f0103c35 <pf_free_env+0xc6>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f0103b9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b9f:	8b 40 64             	mov    0x64(%eax),%eax
f0103ba2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103ba5:	c1 e2 02             	shl    $0x2,%edx
f0103ba8:	01 d0                	add    %edx,%eax
f0103baa:	8b 00                	mov    (%eax),%eax
f0103bac:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103bb1:	89 45 ec             	mov    %eax,-0x14(%ebp)
		uint32 *pt;
#if USE_KHEAP
		{
			pt = (uint32*) kheap_virtual_address(pa);
f0103bb4:	83 ec 0c             	sub    $0xc,%esp
f0103bb7:	ff 75 ec             	pushl  -0x14(%ebp)
f0103bba:	e8 be 43 00 00       	call   f0107f7d <kheap_virtual_address>
f0103bbf:	83 c4 10             	add    $0x10,%esp
f0103bc2:	89 45 e8             	mov    %eax,-0x18(%ebp)
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103bc5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0103bcc:	eb 3a                	jmp    f0103c08 <pf_free_env+0x99>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f0103bce:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103bd1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103bd8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103bdb:	01 d0                	add    %edx,%eax
f0103bdd:	8b 00                	mov    (%eax),%eax
f0103bdf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			pt[pteno] = 0;
f0103be2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103be5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103bec:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103bef:	01 d0                	add    %edx,%eax
f0103bf1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f0103bf7:	83 ec 0c             	sub    $0xc,%esp
f0103bfa:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103bfd:	e8 e5 f7 ff ff       	call   f01033e7 <free_disk_frame>
f0103c02:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103c05:	ff 45 f0             	incl   -0x10(%ebp)
f0103c08:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f0103c0f:	76 bd                	jbe    f0103bce <pf_free_env+0x5f>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f0103c11:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c14:	8b 40 64             	mov    0x64(%eax),%eax
f0103c17:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c1a:	c1 e2 02             	shl    $0x2,%edx
f0103c1d:	01 d0                	add    %edx,%eax
f0103c1f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
#if USE_KHEAP
		{
			kfree(pt);
f0103c25:	83 ec 0c             	sub    $0xc,%esp
f0103c28:	ff 75 e8             	pushl  -0x18(%ebp)
f0103c2b:	e8 26 42 00 00       	call   f0107e56 <kfree>
f0103c30:	83 c4 10             	add    $0x10,%esp
f0103c33:	eb 01                	jmp    f0103c36 <pf_free_env+0xc7>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f0103c35:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103c36:	ff 45 f4             	incl   -0xc(%ebp)
f0103c39:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103c40:	0f 86 3b ff ff ff    	jbe    f0103b81 <pf_free_env+0x12>
	}

	// free the disk page directory of the environment
#if USE_KHEAP
	{
		kfree(ptr_env->disk_env_pgdir);
f0103c46:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c49:	8b 40 64             	mov    0x64(%eax),%eax
f0103c4c:	83 ec 0c             	sub    $0xc,%esp
f0103c4f:	50                   	push   %eax
f0103c50:	e8 01 42 00 00       	call   f0107e56 <kfree>
f0103c55:	83 c4 10             	add    $0x10,%esp
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f0103c58:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c5b:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	ptr_env->disk_env_pgdir_PA = 0;
f0103c62:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c65:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f0103c6c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c6f:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103c72:	85 c0                	test   %eax,%eax
f0103c74:	74 36                	je     f0103cac <pf_free_env+0x13d>
		return;
	__pf_remove_env_all_tables(ptr_env);
f0103c76:	83 ec 0c             	sub    $0xc,%esp
f0103c79:	ff 75 08             	pushl  0x8(%ebp)
f0103c7c:	e8 05 03 00 00       	call   f0103f86 <__pf_remove_env_all_tables>
f0103c81:	83 c4 10             	add    $0x10,%esp


#if USE_KHEAP
	{
		kfree(ptr_env->disk_env_tabledir);
f0103c84:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c87:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103c8a:	83 ec 0c             	sub    $0xc,%esp
f0103c8d:	50                   	push   %eax
f0103c8e:	e8 c3 41 00 00       	call   f0107e56 <kfree>
f0103c93:	83 c4 10             	add    $0x10,%esp
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f0103c96:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c99:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	ptr_env->disk_env_tabledir_PA = 0;
f0103ca0:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ca3:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
f0103caa:	eb 01                	jmp    f0103cad <pf_free_env+0x13e>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f0103cac:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f0103cad:	c9                   	leave  
f0103cae:	c3                   	ret    

f0103caf <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f0103caf:	55                   	push   %ebp
f0103cb0:	89 e5                	mov    %esp,%ebp
f0103cb2:	83 ec 08             	sub    $0x8,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f0103cb5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103cb8:	8b 50 64             	mov    0x64(%eax),%edx
f0103cbb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cbe:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f0103cc0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cc3:	8b 00                	mov    (%eax),%eax
f0103cc5:	85 c0                	test   %eax,%eax
f0103cc7:	75 58                	jne    f0103d21 <get_disk_page_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
#if USE_KHEAP
		{
			*ptr_disk_page_directory = kmalloc(PAGE_SIZE);
f0103cc9:	83 ec 0c             	sub    $0xc,%esp
f0103ccc:	68 00 10 00 00       	push   $0x1000
f0103cd1:	e8 b5 40 00 00       	call   f0107d8b <kmalloc>
f0103cd6:	83 c4 10             	add    $0x10,%esp
f0103cd9:	89 c2                	mov    %eax,%edx
f0103cdb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cde:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_page_directory == NULL)
f0103ce0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103ce3:	8b 00                	mov    (%eax),%eax
f0103ce5:	85 c0                	test   %eax,%eax
f0103ce7:	75 07                	jne    f0103cf0 <get_disk_page_directory+0x41>
			{
				return E_NO_VM;
f0103ce9:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103cee:	eb 36                	jmp    f0103d26 <get_disk_page_directory+0x77>
			}
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
f0103cf0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cf3:	8b 00                	mov    (%eax),%eax
f0103cf5:	83 ec 0c             	sub    $0xc,%esp
f0103cf8:	50                   	push   %eax
f0103cf9:	e8 ab 42 00 00       	call   f0107fa9 <kheap_physical_address>
f0103cfe:	83 c4 10             	add    $0x10,%esp
f0103d01:	89 c2                	mov    %eax,%edx
f0103d03:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d06:	89 50 68             	mov    %edx,0x68(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f0103d09:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d0c:	8b 00                	mov    (%eax),%eax
f0103d0e:	83 ec 04             	sub    $0x4,%esp
f0103d11:	68 00 10 00 00       	push   $0x1000
f0103d16:	6a 00                	push   $0x0
f0103d18:	50                   	push   %eax
f0103d19:	e8 b3 dd 02 00       	call   f0131ad1 <memset>
f0103d1e:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103d21:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103d26:	c9                   	leave  
f0103d27:	c3                   	ret    

f0103d28 <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f0103d28:	55                   	push   %ebp
f0103d29:	89 e5                	mov    %esp,%ebp
f0103d2b:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f0103d2e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103d35:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103d3c:	eb 78                	jmp    f0103db6 <pf_calculate_allocated_pages+0x8e>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f0103d3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d41:	8b 40 64             	mov    0x64(%eax),%eax
f0103d44:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103d47:	c1 e2 02             	shl    $0x2,%edx
f0103d4a:	01 d0                	add    %edx,%eax
f0103d4c:	8b 00                	mov    (%eax),%eax
f0103d4e:	83 e0 01             	and    $0x1,%eax
f0103d51:	85 c0                	test   %eax,%eax
f0103d53:	74 5d                	je     f0103db2 <pf_calculate_allocated_pages+0x8a>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f0103d55:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d58:	8b 40 64             	mov    0x64(%eax),%eax
f0103d5b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103d5e:	c1 e2 02             	shl    $0x2,%edx
f0103d61:	01 d0                	add    %edx,%eax
f0103d63:	8b 00                	mov    (%eax),%eax
f0103d65:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103d6a:	89 45 e8             	mov    %eax,-0x18(%ebp)
#if USE_KHEAP
		{
			pt = (uint32*) kheap_virtual_address(pa);
f0103d6d:	83 ec 0c             	sub    $0xc,%esp
f0103d70:	ff 75 e8             	pushl  -0x18(%ebp)
f0103d73:	e8 05 42 00 00       	call   f0107f7d <kheap_virtual_address>
f0103d78:	83 c4 10             	add    $0x10,%esp
f0103d7b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103d7e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0103d85:	eb 20                	jmp    f0103da7 <pf_calculate_allocated_pages+0x7f>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f0103d87:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103d8a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103d91:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103d94:	01 d0                	add    %edx,%eax
f0103d96:	8b 00                	mov    (%eax),%eax
f0103d98:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if(dfn != 0)
f0103d9b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0103d9f:	74 03                	je     f0103da4 <pf_calculate_allocated_pages+0x7c>
				counter ++;
f0103da1:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103da4:	ff 45 ec             	incl   -0x14(%ebp)
f0103da7:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f0103dae:	76 d7                	jbe    f0103d87 <pf_calculate_allocated_pages+0x5f>
f0103db0:	eb 01                	jmp    f0103db3 <pf_calculate_allocated_pages+0x8b>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f0103db2:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103db3:	ff 45 f4             	incl   -0xc(%ebp)
f0103db6:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103dbd:	0f 86 7b ff ff ff    	jbe    f0103d3e <pf_calculate_allocated_pages+0x16>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f0103dc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103dc6:	c9                   	leave  
f0103dc7:	c3                   	ret    

f0103dc8 <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f0103dc8:	55                   	push   %ebp
f0103dc9:	89 e5                	mov    %esp,%ebp
f0103dcb:	83 ec 10             	sub    $0x10,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f0103dce:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103dd5:	a1 b8 ad 89 f0       	mov    0xf089adb8,%eax
f0103dda:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103ddd:	eb 0b                	jmp    f0103dea <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f0103ddf:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103de2:	a1 c0 ad 89 f0       	mov    0xf089adc0,%eax
f0103de7:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103dea:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103dee:	74 07                	je     f0103df7 <pf_calculate_free_frames+0x2f>
f0103df0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0103df3:	8b 00                	mov    (%eax),%eax
f0103df5:	eb 05                	jmp    f0103dfc <pf_calculate_free_frames+0x34>
f0103df7:	b8 00 00 00 00       	mov    $0x0,%eax
f0103dfc:	a3 c0 ad 89 f0       	mov    %eax,0xf089adc0
f0103e01:	a1 c0 ad 89 f0       	mov    0xf089adc0,%eax
f0103e06:	85 c0                	test   %eax,%eax
f0103e08:	75 d5                	jne    f0103ddf <pf_calculate_free_frames+0x17>
f0103e0a:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103e0e:	75 cf                	jne    f0103ddf <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f0103e10:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0103e13:	c9                   	leave  
f0103e14:	c3                   	ret    

f0103e15 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f0103e15:	55                   	push   %ebp
f0103e16:	89 e5                	mov    %esp,%ebp
f0103e18:	83 ec 08             	sub    $0x8,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f0103e1b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e1e:	8b 50 6c             	mov    0x6c(%eax),%edx
f0103e21:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e24:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f0103e26:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e29:	8b 00                	mov    (%eax),%eax
f0103e2b:	85 c0                	test   %eax,%eax
f0103e2d:	75 58                	jne    f0103e87 <get_disk_table_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
#if USE_KHEAP
		{
			*ptr_disk_table_directory = kmalloc(PAGE_SIZE);
f0103e2f:	83 ec 0c             	sub    $0xc,%esp
f0103e32:	68 00 10 00 00       	push   $0x1000
f0103e37:	e8 4f 3f 00 00       	call   f0107d8b <kmalloc>
f0103e3c:	83 c4 10             	add    $0x10,%esp
f0103e3f:	89 c2                	mov    %eax,%edx
f0103e41:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e44:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_table_directory == NULL)
f0103e46:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e49:	8b 00                	mov    (%eax),%eax
f0103e4b:	85 c0                	test   %eax,%eax
f0103e4d:	75 07                	jne    f0103e56 <get_disk_table_directory+0x41>
			{
				return E_NO_VM;
f0103e4f:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103e54:	eb 36                	jmp    f0103e8c <get_disk_table_directory+0x77>
			}
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
f0103e56:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e59:	8b 00                	mov    (%eax),%eax
f0103e5b:	83 ec 0c             	sub    $0xc,%esp
f0103e5e:	50                   	push   %eax
f0103e5f:	e8 45 41 00 00       	call   f0107fa9 <kheap_physical_address>
f0103e64:	83 c4 10             	add    $0x10,%esp
f0103e67:	89 c2                	mov    %eax,%edx
f0103e69:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e6c:	89 50 70             	mov    %edx,0x70(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f0103e6f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e72:	8b 00                	mov    (%eax),%eax
f0103e74:	83 ec 04             	sub    $0x4,%esp
f0103e77:	68 00 10 00 00       	push   $0x1000
f0103e7c:	6a 00                	push   $0x0
f0103e7e:	50                   	push   %eax
f0103e7f:	e8 4d dc 02 00       	call   f0131ad1 <memset>
f0103e84:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103e87:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103e8c:	c9                   	leave  
f0103e8d:	c3                   	ret    

f0103e8e <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103e8e:	55                   	push   %ebp
f0103e8f:	89 e5                	mov    %esp,%ebp
f0103e91:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f0103e94:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103e9b:	76 19                	jbe    f0103eb6 <__pf_write_env_table+0x28>
f0103e9d:	68 04 60 13 f0       	push   $0xf0136004
f0103ea2:	68 2a 60 13 f0       	push   $0xf013602a
f0103ea7:	68 5a 02 00 00       	push   $0x25a
f0103eac:	68 73 5f 13 f0       	push   $0xf0135f73
f0103eb1:	e8 4f c3 ff ff       	call   f0100205 <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f0103eb6:	8b 45 08             	mov    0x8(%ebp),%eax
f0103eb9:	83 c0 6c             	add    $0x6c,%eax
f0103ebc:	83 ec 08             	sub    $0x8,%esp
f0103ebf:	50                   	push   %eax
f0103ec0:	ff 75 08             	pushl  0x8(%ebp)
f0103ec3:	e8 4d ff ff ff       	call   f0103e15 <get_disk_table_directory>
f0103ec8:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103ecb:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ece:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103ed1:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103ed4:	c1 ea 16             	shr    $0x16,%edx
f0103ed7:	c1 e2 02             	shl    $0x2,%edx
f0103eda:	01 d0                	add    %edx,%eax
f0103edc:	8b 00                	mov    (%eax),%eax
f0103ede:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f0103ee1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103ee4:	85 c0                	test   %eax,%eax
f0103ee6:	75 31                	jne    f0103f19 <__pf_write_env_table+0x8b>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103ee8:	83 ec 0c             	sub    $0xc,%esp
f0103eeb:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0103eee:	50                   	push   %eax
f0103eef:	e8 2c f4 ff ff       	call   f0103320 <allocate_disk_frame>
f0103ef4:	83 c4 10             	add    $0x10,%esp
f0103ef7:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103efa:	75 07                	jne    f0103f03 <__pf_write_env_table+0x75>
f0103efc:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103f01:	eb 2e                	jmp    f0103f31 <__pf_write_env_table+0xa3>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f0103f03:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f06:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f09:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f0c:	c1 ea 16             	shr    $0x16,%edx
f0103f0f:	c1 e2 02             	shl    $0x2,%edx
f0103f12:	01 c2                	add    %eax,%edx
f0103f14:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f17:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f0103f19:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f1c:	83 ec 08             	sub    $0x8,%esp
f0103f1f:	ff 75 10             	pushl  0x10(%ebp)
f0103f22:	50                   	push   %eax
f0103f23:	e8 4b f2 ff ff       	call   f0103173 <write_disk_page>
f0103f28:	83 c4 10             	add    $0x10,%esp
f0103f2b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f0103f2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103f31:	c9                   	leave  
f0103f32:	c3                   	ret    

f0103f33 <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103f33:	55                   	push   %ebp
f0103f34:	89 e5                	mov    %esp,%ebp
f0103f36:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103f39:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f3c:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f3f:	85 c0                	test   %eax,%eax
f0103f41:	75 07                	jne    f0103f4a <__pf_read_env_table+0x17>
f0103f43:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103f48:	eb 3a                	jmp    f0103f84 <__pf_read_env_table+0x51>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103f4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f4d:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f50:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f53:	c1 ea 16             	shr    $0x16,%edx
f0103f56:	c1 e2 02             	shl    $0x2,%edx
f0103f59:	01 d0                	add    %edx,%eax
f0103f5b:	8b 00                	mov    (%eax),%eax
f0103f5d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103f60:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103f64:	75 07                	jne    f0103f6d <__pf_read_env_table+0x3a>
f0103f66:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103f6b:	eb 17                	jmp    f0103f84 <__pf_read_env_table+0x51>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f0103f6d:	83 ec 08             	sub    $0x8,%esp
f0103f70:	ff 75 10             	pushl  0x10(%ebp)
f0103f73:	ff 75 f4             	pushl  -0xc(%ebp)
f0103f76:	e8 c9 f1 ff ff       	call   f0103144 <read_disk_page>
f0103f7b:	83 c4 10             	add    $0x10,%esp
f0103f7e:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f0103f81:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103f84:	c9                   	leave  
f0103f85:	c3                   	ret    

f0103f86 <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f0103f86:	55                   	push   %ebp
f0103f87:	89 e5                	mov    %esp,%ebp
f0103f89:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103f8c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f8f:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f92:	85 c0                	test   %eax,%eax
f0103f94:	74 4c                	je     f0103fe2 <__pf_remove_env_all_tables+0x5c>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103f96:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103f9d:	eb 38                	jmp    f0103fd7 <__pf_remove_env_all_tables+0x51>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f0103f9f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fa2:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103fa5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103fa8:	c1 e2 02             	shl    $0x2,%edx
f0103fab:	01 d0                	add    %edx,%eax
f0103fad:	8b 00                	mov    (%eax),%eax
f0103faf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f0103fb2:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fb5:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103fb8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103fbb:	c1 e2 02             	shl    $0x2,%edx
f0103fbe:	01 d0                	add    %edx,%eax
f0103fc0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f0103fc6:	83 ec 0c             	sub    $0xc,%esp
f0103fc9:	ff 75 f0             	pushl  -0x10(%ebp)
f0103fcc:	e8 16 f4 ff ff       	call   f01033e7 <free_disk_frame>
f0103fd1:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103fd4:	ff 45 f4             	incl   -0xc(%ebp)
f0103fd7:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103fde:	76 bf                	jbe    f0103f9f <__pf_remove_env_all_tables+0x19>
f0103fe0:	eb 01                	jmp    f0103fe3 <__pf_remove_env_all_tables+0x5d>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103fe2:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103fe3:	c9                   	leave  
f0103fe4:	c3                   	ret    

f0103fe5 <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f0103fe5:	55                   	push   %ebp
f0103fe6:	89 e5                	mov    %esp,%ebp
f0103fe8:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f0103feb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0103fef:	75 10                	jne    f0104001 <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f0103ff1:	83 ec 0c             	sub    $0xc,%esp
f0103ff4:	68 34 61 13 f0       	push   $0xf0136134
f0103ff9:	e8 10 cd ff ff       	call   f0100d0e <cprintf>
f0103ffe:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f0104001:	8b 45 08             	mov    0x8(%ebp),%eax
f0104004:	8b 40 6c             	mov    0x6c(%eax),%eax
f0104007:	85 c0                	test   %eax,%eax
f0104009:	74 3d                	je     f0104048 <__pf_remove_env_table+0x63>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010400b:	8b 45 08             	mov    0x8(%ebp),%eax
f010400e:	8b 40 6c             	mov    0x6c(%eax),%eax
f0104011:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104014:	c1 ea 16             	shr    $0x16,%edx
f0104017:	c1 e2 02             	shl    $0x2,%edx
f010401a:	01 d0                	add    %edx,%eax
f010401c:	8b 00                	mov    (%eax),%eax
f010401e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f0104021:	8b 45 08             	mov    0x8(%ebp),%eax
f0104024:	8b 40 6c             	mov    0x6c(%eax),%eax
f0104027:	8b 55 0c             	mov    0xc(%ebp),%edx
f010402a:	c1 ea 16             	shr    $0x16,%edx
f010402d:	c1 e2 02             	shl    $0x2,%edx
f0104030:	01 d0                	add    %edx,%eax
f0104032:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0104038:	83 ec 0c             	sub    $0xc,%esp
f010403b:	ff 75 f4             	pushl  -0xc(%ebp)
f010403e:	e8 a4 f3 ff ff       	call   f01033e7 <free_disk_frame>
f0104043:	83 c4 10             	add    $0x10,%esp
f0104046:	eb 01                	jmp    f0104049 <__pf_remove_env_table+0x64>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f0104048:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f0104049:	c9                   	leave  
f010404a:	c3                   	ret    

f010404b <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f010404b:	55                   	push   %ebp
f010404c:	89 e5                	mov    %esp,%ebp
f010404e:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f0104051:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f0104058:	eb 1f                	jmp    f0104079 <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f010405a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010405d:	83 ec 04             	sub    $0x4,%esp
f0104060:	6a 08                	push   $0x8
f0104062:	ff 75 08             	pushl  0x8(%ebp)
f0104065:	50                   	push   %eax
f0104066:	e8 0b e1 02 00       	call   f0132176 <ide_write>
f010406b:	83 c4 10             	add    $0x10,%esp
f010406e:	85 c0                	test   %eax,%eax
f0104070:	75 12                	jne    f0104084 <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f0104072:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f0104079:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f0104080:	7e d8                	jle    f010405a <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0104082:	eb 01                	jmp    f0104085 <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f0104084:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0104085:	90                   	nop
f0104086:	c9                   	leave  
f0104087:	c3                   	ret    

f0104088 <mc146818_read>:
#include <kern/cpu/picirq.h>


unsigned
mc146818_read(unsigned reg)
{
f0104088:	55                   	push   %ebp
f0104089:	89 e5                	mov    %esp,%ebp
f010408b:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f010408e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104091:	0f b6 c0             	movzbl %al,%eax
f0104094:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f010409b:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010409e:	8a 45 f6             	mov    -0xa(%ebp),%al
f01040a1:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01040a4:	ee                   	out    %al,(%dx)
f01040a5:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01040ac:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01040af:	89 c2                	mov    %eax,%edx
f01040b1:	ec                   	in     (%dx),%al
f01040b2:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f01040b5:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f01040b8:	0f b6 c0             	movzbl %al,%eax
}
f01040bb:	c9                   	leave  
f01040bc:	c3                   	ret    

f01040bd <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f01040bd:	55                   	push   %ebp
f01040be:	89 e5                	mov    %esp,%ebp
f01040c0:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f01040c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01040c6:	0f b6 c0             	movzbl %al,%eax
f01040c9:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f01040d0:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01040d3:	8a 45 f6             	mov    -0xa(%ebp),%al
f01040d6:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01040d9:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f01040da:	8b 45 0c             	mov    0xc(%ebp),%eax
f01040dd:	0f b6 c0             	movzbl %al,%eax
f01040e0:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f01040e7:	88 45 f7             	mov    %al,-0x9(%ebp)
f01040ea:	8a 45 f7             	mov    -0x9(%ebp),%al
f01040ed:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01040f0:	ee                   	out    %al,(%dx)
}
f01040f1:	90                   	nop
f01040f2:	c9                   	leave  
f01040f3:	c3                   	ret    

f01040f4 <kclock_start>:


void
kclock_start(uint8 quantum_in_ms)
{
f01040f4:	55                   	push   %ebp
f01040f5:	89 e5                	mov    %esp,%ebp
f01040f7:	53                   	push   %ebx
f01040f8:	83 ec 24             	sub    $0x24,%esp
f01040fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01040fe:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104101:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104108:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f010410c:	8a 45 ef             	mov    -0x11(%ebp),%al
f010410f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104112:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104113:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104117:	77 48                	ja     f0104161 <kclock_start+0x6d>
f0104119:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104120:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f0104124:	8a 45 ee             	mov    -0x12(%ebp),%al
f0104127:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010412a:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f010412b:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f010412f:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104134:	99                   	cltd   
f0104135:	f7 fb                	idiv   %ebx
f0104137:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f010413d:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104141:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104146:	99                   	cltd   
f0104147:	f7 fb                	idiv   %ebx
f0104149:	89 c3                	mov    %eax,%ebx
f010414b:	89 c8                	mov    %ecx,%eax
f010414d:	99                   	cltd   
f010414e:	f7 fb                	idiv   %ebx
f0104150:	0f b7 c0             	movzwl %ax,%eax
f0104153:	83 ec 0c             	sub    $0xc,%esp
f0104156:	50                   	push   %eax
f0104157:	e8 b8 01 00 00       	call   f0104314 <kclock_write_cnt0_LSB_first>
f010415c:	83 c4 10             	add    $0x10,%esp
f010415f:	eb 13                	jmp    f0104174 <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104161:	6a 35                	push   $0x35
f0104163:	68 58 61 13 f0       	push   $0xf0136158
f0104168:	6a 33                	push   $0x33
f010416a:	68 b4 61 13 f0       	push   $0xf01361b4
f010416f:	e8 91 c0 ff ff       	call   f0100205 <_panic>
//	cprintf("c = %d\n", c) ;

//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104174:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f010417a:	0f b7 c0             	movzwl %ax,%eax
f010417d:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104182:	83 ec 0c             	sub    $0xc,%esp
f0104185:	50                   	push   %eax
f0104186:	e8 bc 1b 00 00       	call   f0105d47 <irq_setmask_8259A>
f010418b:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f010418e:	90                   	nop
f010418f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104192:	c9                   	leave  
f0104193:	c3                   	ret    

f0104194 <kclock_stop>:

void
kclock_stop(void)
{
f0104194:	55                   	push   %ebp
f0104195:	89 e5                	mov    %esp,%ebp
f0104197:	83 ec 18             	sub    $0x18,%esp
f010419a:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01041a1:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f01041a5:	8a 45 f3             	mov    -0xd(%ebp),%al
f01041a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01041ab:	ee                   	out    %al,(%dx)
//	for (int i = 0 ; i <20; i++)
//	{
//		cnt0 = kclock_read_cnt0();
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}
	irq_setmask_8259A(0xFFFF);
f01041ac:	83 ec 0c             	sub    $0xc,%esp
f01041af:	68 ff ff 00 00       	push   $0xffff
f01041b4:	e8 8e 1b 00 00       	call   f0105d47 <irq_setmask_8259A>
f01041b9:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f01041bc:	90                   	nop
f01041bd:	c9                   	leave  
f01041be:	c3                   	ret    

f01041bf <kclock_resume>:

void
kclock_resume(void)
{
f01041bf:	55                   	push   %ebp
f01041c0:	89 e5                	mov    %esp,%ebp
f01041c2:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f01041c5:	e8 8c 01 00 00       	call   f0104356 <kclock_read_cnt0>
f01041ca:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f01041ce:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f01041d3:	77 06                	ja     f01041db <kclock_resume+0x1c>
	{
		cnt0 = 20;
f01041d5:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f01041db:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f01041df:	83 e0 01             	and    $0x1,%eax
f01041e2:	66 85 c0             	test   %ax,%ax
f01041e5:	74 09                	je     f01041f0 <kclock_resume+0x31>
		cnt0++;
f01041e7:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f01041eb:	40                   	inc    %eax
f01041ec:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f01041f0:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f01041f7:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f01041fb:	8a 45 ef             	mov    -0x11(%ebp),%al
f01041fe:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104201:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104202:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0104206:	83 ec 0c             	sub    $0xc,%esp
f0104209:	50                   	push   %eax
f010420a:	e8 05 01 00 00       	call   f0104314 <kclock_write_cnt0_LSB_first>
f010420f:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104212:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f0104218:	0f b7 c0             	movzwl %ax,%eax
f010421b:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104220:	83 ec 0c             	sub    $0xc,%esp
f0104223:	50                   	push   %eax
f0104224:	e8 1e 1b 00 00       	call   f0105d47 <irq_setmask_8259A>
f0104229:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f010422c:	90                   	nop
f010422d:	c9                   	leave  
f010422e:	c3                   	ret    

f010422f <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f010422f:	55                   	push   %ebp
f0104230:	89 e5                	mov    %esp,%ebp
f0104232:	83 ec 28             	sub    $0x28,%esp
f0104235:	8b 45 08             	mov    0x8(%ebp),%eax
f0104238:	88 45 e4             	mov    %al,-0x1c(%ebp)
f010423b:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104242:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104246:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104249:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010424c:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f010424d:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f0104251:	83 ec 0c             	sub    $0xc,%esp
f0104254:	50                   	push   %eax
f0104255:	e8 ba 00 00 00       	call   f0104314 <kclock_write_cnt0_LSB_first>
f010425a:	83 c4 10             	add    $0x10,%esp
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f010425d:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f0104263:	0f b7 c0             	movzwl %ax,%eax
f0104266:	25 fe ff 00 00       	and    $0xfffe,%eax
f010426b:	83 ec 0c             	sub    $0xc,%esp
f010426e:	50                   	push   %eax
f010426f:	e8 d3 1a 00 00       	call   f0105d47 <irq_setmask_8259A>
f0104274:	83 c4 10             	add    $0x10,%esp

}
f0104277:	90                   	nop
f0104278:	c9                   	leave  
f0104279:	c3                   	ret    

f010427a <kclock_set_quantum>:
//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f010427a:	55                   	push   %ebp
f010427b:	89 e5                	mov    %esp,%ebp
f010427d:	53                   	push   %ebx
f010427e:	83 ec 24             	sub    $0x24,%esp
f0104281:	8b 45 08             	mov    0x8(%ebp),%eax
f0104284:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104287:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f010428b:	77 6c                	ja     f01042f9 <kclock_set_quantum+0x7f>
	{
		int cnt = TIMER_DIV((1000/quantum_in_ms));
f010428d:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104291:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104296:	99                   	cltd   
f0104297:	f7 fb                	idiv   %ebx
f0104299:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f010429f:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01042a3:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f01042a8:	99                   	cltd   
f01042a9:	f7 fb                	idiv   %ebx
f01042ab:	89 c3                	mov    %eax,%ebx
f01042ad:	89 c8                	mov    %ecx,%eax
f01042af:	99                   	cltd   
f01042b0:	f7 fb                	idiv   %ebx
f01042b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cnt%2 == 1)
f01042b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01042b8:	25 01 00 00 80       	and    $0x80000001,%eax
f01042bd:	85 c0                	test   %eax,%eax
f01042bf:	79 05                	jns    f01042c6 <kclock_set_quantum+0x4c>
f01042c1:	48                   	dec    %eax
f01042c2:	83 c8 fe             	or     $0xfffffffe,%eax
f01042c5:	40                   	inc    %eax
f01042c6:	83 f8 01             	cmp    $0x1,%eax
f01042c9:	75 03                	jne    f01042ce <kclock_set_quantum+0x54>
			cnt++;
f01042cb:	ff 45 f4             	incl   -0xc(%ebp)
f01042ce:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f01042d5:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f01042d9:	8a 45 ef             	mov    -0x11(%ebp),%al
f01042dc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01042df:	ee                   	out    %al,(%dx)

		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f01042e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01042e3:	0f b7 c0             	movzwl %ax,%eax
f01042e6:	83 ec 0c             	sub    $0xc,%esp
f01042e9:	50                   	push   %eax
f01042ea:	e8 25 00 00 00       	call   f0104314 <kclock_write_cnt0_LSB_first>
f01042ef:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f01042f2:	e8 9d fe ff ff       	call   f0104194 <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f01042f7:	eb 16                	jmp    f010430f <kclock_set_quantum+0x95>
		kclock_stop();
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f01042f9:	6a 35                	push   $0x35
f01042fb:	68 58 61 13 f0       	push   $0xf0136158
f0104300:	68 c9 00 00 00       	push   $0xc9
f0104305:	68 b4 61 13 f0       	push   $0xf01361b4
f010430a:	e8 f6 be ff ff       	call   f0100205 <_panic>
	}
}
f010430f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104312:	c9                   	leave  
f0104313:	c3                   	ret    

f0104314 <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f0104314:	55                   	push   %ebp
f0104315:	89 e5                	mov    %esp,%ebp
f0104317:	83 ec 14             	sub    $0x14,%esp
f010431a:	8b 45 08             	mov    0x8(%ebp),%eax
f010431d:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f0104321:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104324:	0f b6 c0             	movzbl %al,%eax
f0104327:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f010432e:	88 45 f6             	mov    %al,-0xa(%ebp)
f0104331:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104334:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104337:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f0104338:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010433b:	66 c1 e8 08          	shr    $0x8,%ax
f010433f:	0f b6 c0             	movzbl %al,%eax
f0104342:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f0104349:	88 45 f7             	mov    %al,-0x9(%ebp)
f010434c:	8a 45 f7             	mov    -0x9(%ebp),%al
f010434f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0104352:	ee                   	out    %al,(%dx)
}
f0104353:	90                   	nop
f0104354:	c9                   	leave  
f0104355:	c3                   	ret    

f0104356 <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f0104356:	55                   	push   %ebp
f0104357:	89 e5                	mov    %esp,%ebp
f0104359:	83 ec 20             	sub    $0x20,%esp
f010435c:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104363:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104366:	89 c2                	mov    %eax,%edx
f0104368:	ec                   	in     (%dx),%al
f0104369:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f010436c:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f010436f:	88 45 ff             	mov    %al,-0x1(%ebp)
f0104372:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104379:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010437c:	89 c2                	mov    %eax,%edx
f010437e:	ec                   	in     (%dx),%al
f010437f:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f0104382:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104385:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104388:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f010438c:	c1 e0 08             	shl    $0x8,%eax
f010438f:	89 c2                	mov    %eax,%edx
f0104391:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104395:	09 d0                	or     %edx,%eax
f0104397:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f010439b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010439e:	c9                   	leave  
f010439f:	c3                   	ret    

f01043a0 <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f01043a0:	55                   	push   %ebp
f01043a1:	89 e5                	mov    %esp,%ebp
f01043a3:	83 ec 30             	sub    $0x30,%esp
f01043a6:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01043ad:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01043b0:	89 c2                	mov    %eax,%edx
f01043b2:	ec                   	in     (%dx),%al
f01043b3:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f01043b6:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f01043b9:	88 45 ff             	mov    %al,-0x1(%ebp)
f01043bc:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01043c3:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01043c7:	8a 45 dc             	mov    -0x24(%ebp),%al
f01043ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01043cd:	ee                   	out    %al,(%dx)
f01043ce:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01043d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01043d8:	89 c2                	mov    %eax,%edx
f01043da:	ec                   	in     (%dx),%al
f01043db:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f01043de:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f01043e1:	88 45 f3             	mov    %al,-0xd(%ebp)
f01043e4:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01043eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01043ee:	89 c2                	mov    %eax,%edx
f01043f0:	ec                   	in     (%dx),%al
f01043f1:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f01043f4:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f01043f7:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f01043fa:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f01043fe:	c1 e0 08             	shl    $0x8,%eax
f0104401:	89 c2                	mov    %eax,%edx
f0104403:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0104407:	09 d0                	or     %edx,%eax
f0104409:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f010440d:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104411:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f0104418:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010441b:	8a 45 df             	mov    -0x21(%ebp),%al
f010441e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0104421:	ee                   	out    %al,(%dx)

	return cnt0 ;
f0104422:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0104425:	c9                   	leave  
f0104426:	c3                   	ret    

f0104427 <isSchedMethodRR>:
//void on_clock_update_WS_time_stamps();
extern void cleanup_buffers(struct Env* e);
//================

void sched_delete_ready_queues() ;
uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f0104427:	55                   	push   %ebp
f0104428:	89 e5                	mov    %esp,%ebp
f010442a:	a1 4c ad 89 f0       	mov    0xf089ad4c,%eax
f010442f:	85 c0                	test   %eax,%eax
f0104431:	75 07                	jne    f010443a <isSchedMethodRR+0x13>
f0104433:	b8 01 00 00 00       	mov    $0x1,%eax
f0104438:	eb 05                	jmp    f010443f <isSchedMethodRR+0x18>
f010443a:	b8 00 00 00 00       	mov    $0x0,%eax
f010443f:	5d                   	pop    %ebp
f0104440:	c3                   	ret    

f0104441 <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f0104441:	55                   	push   %ebp
f0104442:	89 e5                	mov    %esp,%ebp
f0104444:	a1 4c ad 89 f0       	mov    0xf089ad4c,%eax
f0104449:	83 f8 01             	cmp    $0x1,%eax
f010444c:	75 07                	jne    f0104455 <isSchedMethodMLFQ+0x14>
f010444e:	b8 01 00 00 00       	mov    $0x1,%eax
f0104453:	eb 05                	jmp    f010445a <isSchedMethodMLFQ+0x19>
f0104455:	b8 00 00 00 00       	mov    $0x0,%eax
f010445a:	5d                   	pop    %ebp
f010445b:	c3                   	ret    

f010445c <init_queue>:

//==================================================================================//
//============================== HELPER FUNCTIONS ==================================//
//==================================================================================//
void init_queue(struct Env_Queue* queue)
{
f010445c:	55                   	push   %ebp
f010445d:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f010445f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104463:	74 1d                	je     f0104482 <init_queue+0x26>
	{
		LIST_INIT(queue);
f0104465:	8b 45 08             	mov    0x8(%ebp),%eax
f0104468:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010446e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104471:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0104478:	8b 45 08             	mov    0x8(%ebp),%eax
f010447b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f0104482:	90                   	nop
f0104483:	5d                   	pop    %ebp
f0104484:	c3                   	ret    

f0104485 <queue_size>:

int queue_size(struct Env_Queue* queue)
{
f0104485:	55                   	push   %ebp
f0104486:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104488:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010448c:	74 08                	je     f0104496 <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f010448e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104491:	8b 40 0c             	mov    0xc(%eax),%eax
f0104494:	eb 05                	jmp    f010449b <queue_size+0x16>
	}
	else
	{
		return 0;
f0104496:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f010449b:	5d                   	pop    %ebp
f010449c:	c3                   	ret    

f010449d <enqueue>:

void enqueue(struct Env_Queue* queue, struct Env* env)
{
f010449d:	55                   	push   %ebp
f010449e:	89 e5                	mov    %esp,%ebp
f01044a0:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f01044a3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01044a7:	75 16                	jne    f01044bf <enqueue+0x22>
f01044a9:	68 c8 61 13 f0       	push   $0xf01361c8
f01044ae:	68 d6 61 13 f0       	push   $0xf01361d6
f01044b3:	6a 2d                	push   $0x2d
f01044b5:	68 eb 61 13 f0       	push   $0xf01361eb
f01044ba:	e8 46 bd ff ff       	call   f0100205 <_panic>
	if(env != NULL)
f01044bf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01044c3:	74 66                	je     f010452b <enqueue+0x8e>
	{
		LIST_INSERT_HEAD(queue, env);
f01044c5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01044c9:	75 14                	jne    f01044df <enqueue+0x42>
f01044cb:	83 ec 04             	sub    $0x4,%esp
f01044ce:	68 fc 61 13 f0       	push   $0xf01361fc
f01044d3:	6a 30                	push   $0x30
f01044d5:	68 eb 61 13 f0       	push   $0xf01361eb
f01044da:	e8 26 bd ff ff       	call   f0100205 <_panic>
f01044df:	8b 45 08             	mov    0x8(%ebp),%eax
f01044e2:	8b 10                	mov    (%eax),%edx
f01044e4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01044e7:	89 50 44             	mov    %edx,0x44(%eax)
f01044ea:	8b 45 0c             	mov    0xc(%ebp),%eax
f01044ed:	8b 40 44             	mov    0x44(%eax),%eax
f01044f0:	85 c0                	test   %eax,%eax
f01044f2:	74 0d                	je     f0104501 <enqueue+0x64>
f01044f4:	8b 45 08             	mov    0x8(%ebp),%eax
f01044f7:	8b 00                	mov    (%eax),%eax
f01044f9:	8b 55 0c             	mov    0xc(%ebp),%edx
f01044fc:	89 50 48             	mov    %edx,0x48(%eax)
f01044ff:	eb 09                	jmp    f010450a <enqueue+0x6d>
f0104501:	8b 45 08             	mov    0x8(%ebp),%eax
f0104504:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104507:	89 50 04             	mov    %edx,0x4(%eax)
f010450a:	8b 45 08             	mov    0x8(%ebp),%eax
f010450d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104510:	89 10                	mov    %edx,(%eax)
f0104512:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104515:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010451c:	8b 45 08             	mov    0x8(%ebp),%eax
f010451f:	8b 40 0c             	mov    0xc(%eax),%eax
f0104522:	8d 50 01             	lea    0x1(%eax),%edx
f0104525:	8b 45 08             	mov    0x8(%ebp),%eax
f0104528:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f010452b:	90                   	nop
f010452c:	c9                   	leave  
f010452d:	c3                   	ret    

f010452e <dequeue>:

struct Env* dequeue(struct Env_Queue* queue)
{
f010452e:	55                   	push   %ebp
f010452f:	89 e5                	mov    %esp,%ebp
f0104531:	83 ec 18             	sub    $0x18,%esp
	if (queue == NULL) return NULL;
f0104534:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104538:	75 0a                	jne    f0104544 <dequeue+0x16>
f010453a:	b8 00 00 00 00       	mov    $0x0,%eax
f010453f:	e9 a0 00 00 00       	jmp    f01045e4 <dequeue+0xb6>
	struct Env* envItem = LIST_LAST(queue);
f0104544:	8b 45 08             	mov    0x8(%ebp),%eax
f0104547:	8b 40 04             	mov    0x4(%eax),%eax
f010454a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f010454d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104551:	0f 84 8a 00 00 00    	je     f01045e1 <dequeue+0xb3>
	{
		LIST_REMOVE(queue, envItem);
f0104557:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010455b:	75 14                	jne    f0104571 <dequeue+0x43>
f010455d:	83 ec 04             	sub    $0x4,%esp
f0104560:	68 1f 62 13 f0       	push   $0xf013621f
f0104565:	6a 3a                	push   $0x3a
f0104567:	68 eb 61 13 f0       	push   $0xf01361eb
f010456c:	e8 94 bc ff ff       	call   f0100205 <_panic>
f0104571:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104574:	8b 40 44             	mov    0x44(%eax),%eax
f0104577:	85 c0                	test   %eax,%eax
f0104579:	74 11                	je     f010458c <dequeue+0x5e>
f010457b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010457e:	8b 40 44             	mov    0x44(%eax),%eax
f0104581:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104584:	8b 52 48             	mov    0x48(%edx),%edx
f0104587:	89 50 48             	mov    %edx,0x48(%eax)
f010458a:	eb 0c                	jmp    f0104598 <dequeue+0x6a>
f010458c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010458f:	8b 50 48             	mov    0x48(%eax),%edx
f0104592:	8b 45 08             	mov    0x8(%ebp),%eax
f0104595:	89 50 04             	mov    %edx,0x4(%eax)
f0104598:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010459b:	8b 40 48             	mov    0x48(%eax),%eax
f010459e:	85 c0                	test   %eax,%eax
f01045a0:	74 11                	je     f01045b3 <dequeue+0x85>
f01045a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045a5:	8b 40 48             	mov    0x48(%eax),%eax
f01045a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01045ab:	8b 52 44             	mov    0x44(%edx),%edx
f01045ae:	89 50 44             	mov    %edx,0x44(%eax)
f01045b1:	eb 0b                	jmp    f01045be <dequeue+0x90>
f01045b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045b6:	8b 50 44             	mov    0x44(%eax),%edx
f01045b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01045bc:	89 10                	mov    %edx,(%eax)
f01045be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045c1:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01045c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045cb:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01045d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01045d5:	8b 40 0c             	mov    0xc(%eax),%eax
f01045d8:	8d 50 ff             	lea    -0x1(%eax),%edx
f01045db:	8b 45 08             	mov    0x8(%ebp),%eax
f01045de:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f01045e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01045e4:	c9                   	leave  
f01045e5:	c3                   	ret    

f01045e6 <remove_from_queue>:

void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f01045e6:	55                   	push   %ebp
f01045e7:	89 e5                	mov    %esp,%ebp
f01045e9:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f01045ec:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01045f0:	75 16                	jne    f0104608 <remove_from_queue+0x22>
f01045f2:	68 c8 61 13 f0       	push   $0xf01361c8
f01045f7:	68 d6 61 13 f0       	push   $0xf01361d6
f01045fc:	6a 41                	push   $0x41
f01045fe:	68 eb 61 13 f0       	push   $0xf01361eb
f0104603:	e8 fd bb ff ff       	call   f0100205 <_panic>

	if (e != NULL)
f0104608:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010460c:	0f 84 8a 00 00 00    	je     f010469c <remove_from_queue+0xb6>
	{
		LIST_REMOVE(queue, e);
f0104612:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104616:	75 14                	jne    f010462c <remove_from_queue+0x46>
f0104618:	83 ec 04             	sub    $0x4,%esp
f010461b:	68 1f 62 13 f0       	push   $0xf013621f
f0104620:	6a 45                	push   $0x45
f0104622:	68 eb 61 13 f0       	push   $0xf01361eb
f0104627:	e8 d9 bb ff ff       	call   f0100205 <_panic>
f010462c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010462f:	8b 40 44             	mov    0x44(%eax),%eax
f0104632:	85 c0                	test   %eax,%eax
f0104634:	74 11                	je     f0104647 <remove_from_queue+0x61>
f0104636:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104639:	8b 40 44             	mov    0x44(%eax),%eax
f010463c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010463f:	8b 52 48             	mov    0x48(%edx),%edx
f0104642:	89 50 48             	mov    %edx,0x48(%eax)
f0104645:	eb 0c                	jmp    f0104653 <remove_from_queue+0x6d>
f0104647:	8b 45 0c             	mov    0xc(%ebp),%eax
f010464a:	8b 50 48             	mov    0x48(%eax),%edx
f010464d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104650:	89 50 04             	mov    %edx,0x4(%eax)
f0104653:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104656:	8b 40 48             	mov    0x48(%eax),%eax
f0104659:	85 c0                	test   %eax,%eax
f010465b:	74 11                	je     f010466e <remove_from_queue+0x88>
f010465d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104660:	8b 40 48             	mov    0x48(%eax),%eax
f0104663:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104666:	8b 52 44             	mov    0x44(%edx),%edx
f0104669:	89 50 44             	mov    %edx,0x44(%eax)
f010466c:	eb 0b                	jmp    f0104679 <remove_from_queue+0x93>
f010466e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104671:	8b 50 44             	mov    0x44(%eax),%edx
f0104674:	8b 45 08             	mov    0x8(%ebp),%eax
f0104677:	89 10                	mov    %edx,(%eax)
f0104679:	8b 45 0c             	mov    0xc(%ebp),%eax
f010467c:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104683:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104686:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010468d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104690:	8b 40 0c             	mov    0xc(%eax),%eax
f0104693:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104696:	8b 45 08             	mov    0x8(%ebp),%eax
f0104699:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f010469c:	90                   	nop
f010469d:	c9                   	leave  
f010469e:	c3                   	ret    

f010469f <find_env_in_queue>:

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f010469f:	55                   	push   %ebp
f01046a0:	89 e5                	mov    %esp,%ebp
f01046a2:	83 ec 10             	sub    $0x10,%esp
	if (queue == NULL) return NULL;
f01046a5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01046a9:	75 07                	jne    f01046b2 <find_env_in_queue+0x13>
f01046ab:	b8 00 00 00 00       	mov    $0x0,%eax
f01046b0:	eb 58                	jmp    f010470a <find_env_in_queue+0x6b>

	struct Env * ptr_env=NULL;
f01046b2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f01046b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01046bc:	8b 00                	mov    (%eax),%eax
f01046be:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01046c1:	eb 19                	jmp    f01046dc <find_env_in_queue+0x3d>
	{
		if(ptr_env->env_id == envID)
f01046c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046c6:	8b 40 4c             	mov    0x4c(%eax),%eax
f01046c9:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01046cc:	75 05                	jne    f01046d3 <find_env_in_queue+0x34>
		{
			return ptr_env;
f01046ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046d1:	eb 37                	jmp    f010470a <find_env_in_queue+0x6b>
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	if (queue == NULL) return NULL;

	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f01046d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01046d6:	8b 40 08             	mov    0x8(%eax),%eax
f01046d9:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01046dc:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01046e0:	74 08                	je     f01046ea <find_env_in_queue+0x4b>
f01046e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046e5:	8b 40 44             	mov    0x44(%eax),%eax
f01046e8:	eb 05                	jmp    f01046ef <find_env_in_queue+0x50>
f01046ea:	b8 00 00 00 00       	mov    $0x0,%eax
f01046ef:	8b 55 08             	mov    0x8(%ebp),%edx
f01046f2:	89 42 08             	mov    %eax,0x8(%edx)
f01046f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01046f8:	8b 40 08             	mov    0x8(%eax),%eax
f01046fb:	85 c0                	test   %eax,%eax
f01046fd:	75 c4                	jne    f01046c3 <find_env_in_queue+0x24>
f01046ff:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0104703:	75 be                	jne    f01046c3 <find_env_in_queue+0x24>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f0104705:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010470a:	c9                   	leave  
f010470b:	c3                   	ret    

f010470c <fos_scheduler_MLFQ>:
//==================================================================================//

struct Env* fos_scheduler_MLFQ()
{
f010470c:	55                   	push   %ebp
f010470d:	89 e5                	mov    %esp,%ebp
f010470f:	83 ec 08             	sub    $0x8,%esp
	//Apply the MLFQ with the specified levels to pick up the next environment
	//Note: the "curenv" (if exist) should be placed in its correct queue
	// your code is here, remove the panic and write your code
	panic("fos_scheduler_MLFQ() is not implemented yet...!!");
f0104712:	83 ec 04             	sub    $0x4,%esp
f0104715:	68 40 62 13 f0       	push   $0xf0136240
f010471a:	6a 5e                	push   $0x5e
f010471c:	68 eb 61 13 f0       	push   $0xf01361eb
f0104721:	e8 df ba ff ff       	call   f0100205 <_panic>

f0104726 <fos_scheduler>:

}

void
fos_scheduler(void)
{
f0104726:	55                   	push   %ebp
f0104727:	89 e5                	mov    %esp,%ebp
f0104729:	83 ec 18             	sub    $0x18,%esp
	chk1();
f010472c:	e8 71 c4 02 00       	call   f0130ba2 <chk1>
	scheduler_status = SCH_STARTED;
f0104731:	c7 05 58 ad 89 f0 01 	movl   $0x1,0xf089ad58
f0104738:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f010473b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f0104742:	a1 4c ad 89 f0       	mov    0xf089ad4c,%eax
f0104747:	85 c0                	test   %eax,%eax
f0104749:	75 4d                	jne    f0104798 <fos_scheduler+0x72>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f010474b:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f0104750:	85 c0                	test   %eax,%eax
f0104752:	74 18                	je     f010476c <fos_scheduler+0x46>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f0104754:	8b 15 f4 a3 89 f0    	mov    0xf089a3f4,%edx
f010475a:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f010475f:	83 ec 08             	sub    $0x8,%esp
f0104762:	52                   	push   %edx
f0104763:	50                   	push   %eax
f0104764:	e8 34 fd ff ff       	call   f010449d <enqueue>
f0104769:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f010476c:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0104771:	83 ec 0c             	sub    $0xc,%esp
f0104774:	50                   	push   %eax
f0104775:	e8 b4 fd ff ff       	call   f010452e <dequeue>
f010477a:	83 c4 10             	add    $0x10,%esp
f010477d:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//2017: Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f0104780:	a1 2c ad 89 f0       	mov    0xf089ad2c,%eax
f0104785:	8a 00                	mov    (%eax),%al
f0104787:	0f b6 c0             	movzbl %al,%eax
f010478a:	83 ec 0c             	sub    $0xc,%esp
f010478d:	50                   	push   %eax
f010478e:	e8 e7 fa ff ff       	call   f010427a <kclock_set_quantum>
f0104793:	83 c4 10             	add    $0x10,%esp
f0104796:	eb 12                	jmp    f01047aa <fos_scheduler+0x84>
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	}
	else if (scheduler_method == SCH_MLFQ)
f0104798:	a1 4c ad 89 f0       	mov    0xf089ad4c,%eax
f010479d:	83 f8 01             	cmp    $0x1,%eax
f01047a0:	75 08                	jne    f01047aa <fos_scheduler+0x84>
	{
		next_env = fos_scheduler_MLFQ();
f01047a2:	e8 65 ff ff ff       	call   f010470c <fos_scheduler_MLFQ>
f01047a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}


	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f01047aa:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f01047af:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f01047b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01047b5:	a3 f4 a3 89 f0       	mov    %eax,0xf089a3f4
	chk2(next_env) ;
f01047ba:	83 ec 0c             	sub    $0xc,%esp
f01047bd:	ff 75 f4             	pushl  -0xc(%ebp)
f01047c0:	e8 1a c4 02 00       	call   f0130bdf <chk2>
f01047c5:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f01047c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01047cb:	a3 f4 a3 89 f0       	mov    %eax,0xf089a3f4

	//sched_print_all();

	if(next_env != NULL)
f01047d0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01047d4:	74 0b                	je     f01047e1 <fos_scheduler+0xbb>
	{
//		cprintf("\nScheduler select program '%s' [%d]... counter = %d\n", next_env->prog_name, next_env->env_id, kclock_read_cnt0());
//		cprintf("Q0 = %d, Q1 = %d, Q2 = %d, Q3 = %d\n", queue_size(&(env_ready_queues[0])), queue_size(&(env_ready_queues[1])), queue_size(&(env_ready_queues[2])), queue_size(&(env_ready_queues[3])));
		env_run(next_env);
f01047d6:	83 ec 0c             	sub    $0xc,%esp
f01047d9:	ff 75 f4             	pushl  -0xc(%ebp)
f01047dc:	e8 85 58 00 00       	call   f010a066 <env_run>
	}
	else
	{
		/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
		curenv = NULL;
f01047e1:	c7 05 f4 a3 89 f0 00 	movl   $0x0,0xf089a3f4
f01047e8:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f01047eb:	a1 ac ad 89 f0       	mov    0xf089adac,%eax
f01047f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01047f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01047f6:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f01047f9:	c7 05 58 ad 89 f0 00 	movl   $0x0,0xf089ad58
f0104800:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f0104803:	83 ec 0c             	sub    $0xc,%esp
f0104806:	6a 00                	push   $0x0
f0104808:	e8 27 c5 ff ff       	call   f0100d34 <run_command_prompt>
f010480d:	83 c4 10             	add    $0x10,%esp
f0104810:	eb f1                	jmp    f0104803 <fos_scheduler+0xdd>

f0104812 <sched_init_RR>:

	}
}

void sched_init_RR(uint8 quantum)
{
f0104812:	55                   	push   %ebp
f0104813:	89 e5                	mov    %esp,%ebp
f0104815:	83 ec 18             	sub    $0x18,%esp
f0104818:	8b 45 08             	mov    0x8(%ebp),%eax
f010481b:	88 45 f4             	mov    %al,-0xc(%ebp)


	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f010481e:	c6 05 80 ad 89 f0 01 	movb   $0x1,0xf089ad80
#if USE_KHEAP
	sched_delete_ready_queues();
f0104825:	e8 e5 00 00 00       	call   f010490f <sched_delete_ready_queues>
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
f010482a:	83 ec 0c             	sub    $0xc,%esp
f010482d:	6a 10                	push   $0x10
f010482f:	e8 57 35 00 00       	call   f0107d8b <kmalloc>
f0104834:	83 c4 10             	add    $0x10,%esp
f0104837:	a3 e8 ac 89 f0       	mov    %eax,0xf089ace8
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
f010483c:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0104841:	0f b6 c0             	movzbl %al,%eax
f0104844:	83 ec 0c             	sub    $0xc,%esp
f0104847:	50                   	push   %eax
f0104848:	e8 3e 35 00 00       	call   f0107d8b <kmalloc>
f010484d:	83 c4 10             	add    $0x10,%esp
f0104850:	a3 2c ad 89 f0       	mov    %eax,0xf089ad2c
#endif
	quantums[0] = quantum;
f0104855:	a1 2c ad 89 f0       	mov    0xf089ad2c,%eax
f010485a:	8a 55 f4             	mov    -0xc(%ebp),%dl
f010485d:	88 10                	mov    %dl,(%eax)
	kclock_set_quantum(quantums[0]);
f010485f:	a1 2c ad 89 f0       	mov    0xf089ad2c,%eax
f0104864:	8a 00                	mov    (%eax),%al
f0104866:	0f b6 c0             	movzbl %al,%eax
f0104869:	83 ec 0c             	sub    $0xc,%esp
f010486c:	50                   	push   %eax
f010486d:	e8 08 fa ff ff       	call   f010427a <kclock_set_quantum>
f0104872:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f0104875:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f010487a:	83 ec 0c             	sub    $0xc,%esp
f010487d:	50                   	push   %eax
f010487e:	e8 d9 fb ff ff       	call   f010445c <init_queue>
f0104883:	83 c4 10             	add    $0x10,%esp

	//=========================================
	//DON'T CHANGE THESE LINES=================
	scheduler_status = SCH_STOPPED;
f0104886:	c7 05 58 ad 89 f0 00 	movl   $0x0,0xf089ad58
f010488d:	00 00 00 
	scheduler_method = SCH_RR;
f0104890:	c7 05 4c ad 89 f0 00 	movl   $0x0,0xf089ad4c
f0104897:	00 00 00 
	//=========================================
	//=========================================
}
f010489a:	90                   	nop
f010489b:	c9                   	leave  
f010489c:	c3                   	ret    

f010489d <sched_init_MLFQ>:

void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f010489d:	55                   	push   %ebp
f010489e:	89 e5                	mov    %esp,%ebp
f01048a0:	83 ec 18             	sub    $0x18,%esp
f01048a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01048a6:	88 45 f4             	mov    %al,-0xc(%ebp)
#if USE_KHEAP
	//=========================================
	//DON'T CHANGE THESE LINES=================
	sched_delete_ready_queues();
f01048a9:	e8 61 00 00 00       	call   f010490f <sched_delete_ready_queues>

	//=========================================
	//=========================================
	// your code is here, remove the panic and write your code
	panic("sched_init_MLFQ() is not implemented yet...!!");
f01048ae:	83 ec 04             	sub    $0x4,%esp
f01048b1:	68 74 62 13 f0       	push   $0xf0136274
f01048b6:	68 d1 00 00 00       	push   $0xd1
f01048bb:	68 eb 61 13 f0       	push   $0xf01361eb
f01048c0:	e8 40 b9 ff ff       	call   f0100205 <_panic>

f01048c5 <sched_init>:

}


void sched_init()
{
f01048c5:	55                   	push   %ebp
f01048c6:	89 e5                	mov    %esp,%ebp
f01048c8:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f01048cb:	c7 05 08 ad 89 f0 00 	movl   $0x0,0xf089ad08
f01048d2:	00 00 00 

	sched_init_RR(CLOCK_INTERVAL_IN_MS);
f01048d5:	83 ec 0c             	sub    $0xc,%esp
f01048d8:	6a 0a                	push   $0xa
f01048da:	e8 33 ff ff ff       	call   f0104812 <sched_init_RR>
f01048df:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f01048e2:	83 ec 0c             	sub    $0xc,%esp
f01048e5:	68 3c ad 89 f0       	push   $0xf089ad3c
f01048ea:	e8 6d fb ff ff       	call   f010445c <init_queue>
f01048ef:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f01048f2:	83 ec 0c             	sub    $0xc,%esp
f01048f5:	68 f4 ac 89 f0       	push   $0xf089acf4
f01048fa:	e8 5d fb ff ff       	call   f010445c <init_queue>
f01048ff:	83 c4 10             	add    $0x10,%esp
	scheduler_status = SCH_STOPPED;
f0104902:	c7 05 58 ad 89 f0 00 	movl   $0x0,0xf089ad58
f0104909:	00 00 00 
}
f010490c:	90                   	nop
f010490d:	c9                   	leave  
f010490e:	c3                   	ret    

f010490f <sched_delete_ready_queues>:

void sched_delete_ready_queues()
{
f010490f:	55                   	push   %ebp
f0104910:	89 e5                	mov    %esp,%ebp
f0104912:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	if (env_ready_queues != NULL)
f0104915:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f010491a:	85 c0                	test   %eax,%eax
f010491c:	74 11                	je     f010492f <sched_delete_ready_queues+0x20>
		kfree(env_ready_queues);
f010491e:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0104923:	83 ec 0c             	sub    $0xc,%esp
f0104926:	50                   	push   %eax
f0104927:	e8 2a 35 00 00       	call   f0107e56 <kfree>
f010492c:	83 c4 10             	add    $0x10,%esp
	if (quantums != NULL)
f010492f:	a1 2c ad 89 f0       	mov    0xf089ad2c,%eax
f0104934:	85 c0                	test   %eax,%eax
f0104936:	74 11                	je     f0104949 <sched_delete_ready_queues+0x3a>
		kfree(quantums);
f0104938:	a1 2c ad 89 f0       	mov    0xf089ad2c,%eax
f010493d:	83 ec 0c             	sub    $0xc,%esp
f0104940:	50                   	push   %eax
f0104941:	e8 10 35 00 00       	call   f0107e56 <kfree>
f0104946:	83 c4 10             	add    $0x10,%esp
#endif
}
f0104949:	90                   	nop
f010494a:	c9                   	leave  
f010494b:	c3                   	ret    

f010494c <sched_insert_ready>:
void sched_insert_ready(struct Env* env)
{
f010494c:	55                   	push   %ebp
f010494d:	89 e5                	mov    %esp,%ebp
f010494f:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104952:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104956:	74 1e                	je     f0104976 <sched_insert_ready+0x2a>
	{
		env->env_status = ENV_READY ;
f0104958:	8b 45 08             	mov    0x8(%ebp),%eax
f010495b:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f0104962:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0104967:	83 ec 08             	sub    $0x8,%esp
f010496a:	ff 75 08             	pushl  0x8(%ebp)
f010496d:	50                   	push   %eax
f010496e:	e8 2a fb ff ff       	call   f010449d <enqueue>
f0104973:	83 c4 10             	add    $0x10,%esp
	}
}
f0104976:	90                   	nop
f0104977:	c9                   	leave  
f0104978:	c3                   	ret    

f0104979 <sched_remove_ready>:


void sched_remove_ready(struct Env* env)
{
f0104979:	55                   	push   %ebp
f010497a:	89 e5                	mov    %esp,%ebp
f010497c:	83 ec 18             	sub    $0x18,%esp
	if(env != NULL)
f010497f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104983:	0f 84 fe 00 00 00    	je     f0104a87 <sched_remove_ready+0x10e>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104989:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104990:	e9 e1 00 00 00       	jmp    f0104a76 <sched_remove_ready+0xfd>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f0104995:	8b 45 08             	mov    0x8(%ebp),%eax
f0104998:	8b 40 4c             	mov    0x4c(%eax),%eax
f010499b:	89 c2                	mov    %eax,%edx
f010499d:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f01049a2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01049a5:	c1 e1 04             	shl    $0x4,%ecx
f01049a8:	01 c8                	add    %ecx,%eax
f01049aa:	52                   	push   %edx
f01049ab:	50                   	push   %eax
f01049ac:	e8 ee fc ff ff       	call   f010469f <find_env_in_queue>
f01049b1:	83 c4 08             	add    $0x8,%esp
f01049b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f01049b7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01049bb:	0f 84 b2 00 00 00    	je     f0104a73 <sched_remove_ready+0xfa>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f01049c1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01049c5:	75 17                	jne    f01049de <sched_remove_ready+0x65>
f01049c7:	83 ec 04             	sub    $0x4,%esp
f01049ca:	68 1f 62 13 f0       	push   $0xf013621f
f01049cf:	68 0b 01 00 00       	push   $0x10b
f01049d4:	68 eb 61 13 f0       	push   $0xf01361eb
f01049d9:	e8 27 b8 ff ff       	call   f0100205 <_panic>
f01049de:	8b 45 08             	mov    0x8(%ebp),%eax
f01049e1:	8b 40 44             	mov    0x44(%eax),%eax
f01049e4:	85 c0                	test   %eax,%eax
f01049e6:	74 11                	je     f01049f9 <sched_remove_ready+0x80>
f01049e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01049eb:	8b 40 44             	mov    0x44(%eax),%eax
f01049ee:	8b 55 08             	mov    0x8(%ebp),%edx
f01049f1:	8b 52 48             	mov    0x48(%edx),%edx
f01049f4:	89 50 48             	mov    %edx,0x48(%eax)
f01049f7:	eb 16                	jmp    f0104a0f <sched_remove_ready+0x96>
f01049f9:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f01049fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a01:	c1 e2 04             	shl    $0x4,%edx
f0104a04:	01 c2                	add    %eax,%edx
f0104a06:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a09:	8b 40 48             	mov    0x48(%eax),%eax
f0104a0c:	89 42 04             	mov    %eax,0x4(%edx)
f0104a0f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a12:	8b 40 48             	mov    0x48(%eax),%eax
f0104a15:	85 c0                	test   %eax,%eax
f0104a17:	74 11                	je     f0104a2a <sched_remove_ready+0xb1>
f0104a19:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a1c:	8b 40 48             	mov    0x48(%eax),%eax
f0104a1f:	8b 55 08             	mov    0x8(%ebp),%edx
f0104a22:	8b 52 44             	mov    0x44(%edx),%edx
f0104a25:	89 50 44             	mov    %edx,0x44(%eax)
f0104a28:	eb 15                	jmp    f0104a3f <sched_remove_ready+0xc6>
f0104a2a:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0104a2f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a32:	c1 e2 04             	shl    $0x4,%edx
f0104a35:	01 c2                	add    %eax,%edx
f0104a37:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a3a:	8b 40 44             	mov    0x44(%eax),%eax
f0104a3d:	89 02                	mov    %eax,(%edx)
f0104a3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a42:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104a49:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a4c:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104a53:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0104a58:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a5b:	c1 e2 04             	shl    $0x4,%edx
f0104a5e:	01 d0                	add    %edx,%eax
f0104a60:	8b 50 0c             	mov    0xc(%eax),%edx
f0104a63:	4a                   	dec    %edx
f0104a64:	89 50 0c             	mov    %edx,0xc(%eax)
				env->env_status = ENV_UNKNOWN;
f0104a67:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a6a:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f0104a71:	eb 14                	jmp    f0104a87 <sched_remove_ready+0x10e>

void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104a73:	ff 45 f4             	incl   -0xc(%ebp)
f0104a76:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0104a7b:	0f b6 c0             	movzbl %al,%eax
f0104a7e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0104a81:	0f 8f 0e ff ff ff    	jg     f0104995 <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f0104a87:	c9                   	leave  
f0104a88:	c3                   	ret    

f0104a89 <sched_insert_new>:

void sched_insert_new(struct Env* env)
{
f0104a89:	55                   	push   %ebp
f0104a8a:	89 e5                	mov    %esp,%ebp
f0104a8c:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104a8f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104a93:	74 1d                	je     f0104ab2 <sched_insert_new+0x29>
	{
		env->env_status = ENV_NEW ;
f0104a95:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a98:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f0104a9f:	83 ec 08             	sub    $0x8,%esp
f0104aa2:	ff 75 08             	pushl  0x8(%ebp)
f0104aa5:	68 3c ad 89 f0       	push   $0xf089ad3c
f0104aaa:	e8 ee f9 ff ff       	call   f010449d <enqueue>
f0104aaf:	83 c4 10             	add    $0x10,%esp
	}
}
f0104ab2:	90                   	nop
f0104ab3:	c9                   	leave  
f0104ab4:	c3                   	ret    

f0104ab5 <sched_remove_new>:
void sched_remove_new(struct Env* env)
{
f0104ab5:	55                   	push   %ebp
f0104ab6:	89 e5                	mov    %esp,%ebp
f0104ab8:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104abb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104abf:	0f 84 92 00 00 00    	je     f0104b57 <sched_remove_new+0xa2>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f0104ac5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ac9:	75 17                	jne    f0104ae2 <sched_remove_new+0x2d>
f0104acb:	83 ec 04             	sub    $0x4,%esp
f0104ace:	68 1f 62 13 f0       	push   $0xf013621f
f0104ad3:	68 1f 01 00 00       	push   $0x11f
f0104ad8:	68 eb 61 13 f0       	push   $0xf01361eb
f0104add:	e8 23 b7 ff ff       	call   f0100205 <_panic>
f0104ae2:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ae5:	8b 40 44             	mov    0x44(%eax),%eax
f0104ae8:	85 c0                	test   %eax,%eax
f0104aea:	74 11                	je     f0104afd <sched_remove_new+0x48>
f0104aec:	8b 45 08             	mov    0x8(%ebp),%eax
f0104aef:	8b 40 44             	mov    0x44(%eax),%eax
f0104af2:	8b 55 08             	mov    0x8(%ebp),%edx
f0104af5:	8b 52 48             	mov    0x48(%edx),%edx
f0104af8:	89 50 48             	mov    %edx,0x48(%eax)
f0104afb:	eb 0b                	jmp    f0104b08 <sched_remove_new+0x53>
f0104afd:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b00:	8b 40 48             	mov    0x48(%eax),%eax
f0104b03:	a3 40 ad 89 f0       	mov    %eax,0xf089ad40
f0104b08:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b0b:	8b 40 48             	mov    0x48(%eax),%eax
f0104b0e:	85 c0                	test   %eax,%eax
f0104b10:	74 11                	je     f0104b23 <sched_remove_new+0x6e>
f0104b12:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b15:	8b 40 48             	mov    0x48(%eax),%eax
f0104b18:	8b 55 08             	mov    0x8(%ebp),%edx
f0104b1b:	8b 52 44             	mov    0x44(%edx),%edx
f0104b1e:	89 50 44             	mov    %edx,0x44(%eax)
f0104b21:	eb 0b                	jmp    f0104b2e <sched_remove_new+0x79>
f0104b23:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b26:	8b 40 44             	mov    0x44(%eax),%eax
f0104b29:	a3 3c ad 89 f0       	mov    %eax,0xf089ad3c
f0104b2e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b31:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104b38:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b3b:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104b42:	a1 48 ad 89 f0       	mov    0xf089ad48,%eax
f0104b47:	48                   	dec    %eax
f0104b48:	a3 48 ad 89 f0       	mov    %eax,0xf089ad48
		env->env_status = ENV_UNKNOWN;
f0104b4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b50:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104b57:	90                   	nop
f0104b58:	c9                   	leave  
f0104b59:	c3                   	ret    

f0104b5a <sched_insert_exit>:

void sched_insert_exit(struct Env* env)
{
f0104b5a:	55                   	push   %ebp
f0104b5b:	89 e5                	mov    %esp,%ebp
f0104b5d:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104b60:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104b64:	74 34                	je     f0104b9a <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f0104b66:	e8 95 98 00 00       	call   f010e400 <isBufferingEnabled>
f0104b6b:	84 c0                	test   %al,%al
f0104b6d:	74 0e                	je     f0104b7d <sched_insert_exit+0x23>
f0104b6f:	83 ec 0c             	sub    $0xc,%esp
f0104b72:	ff 75 08             	pushl  0x8(%ebp)
f0104b75:	e8 5a 69 00 00       	call   f010b4d4 <cleanup_buffers>
f0104b7a:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f0104b7d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b80:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f0104b87:	83 ec 08             	sub    $0x8,%esp
f0104b8a:	ff 75 08             	pushl  0x8(%ebp)
f0104b8d:	68 f4 ac 89 f0       	push   $0xf089acf4
f0104b92:	e8 06 f9 ff ff       	call   f010449d <enqueue>
f0104b97:	83 c4 10             	add    $0x10,%esp
	}
}
f0104b9a:	90                   	nop
f0104b9b:	c9                   	leave  
f0104b9c:	c3                   	ret    

f0104b9d <sched_remove_exit>:
void sched_remove_exit(struct Env* env)
{
f0104b9d:	55                   	push   %ebp
f0104b9e:	89 e5                	mov    %esp,%ebp
f0104ba0:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104ba3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ba7:	0f 84 92 00 00 00    	je     f0104c3f <sched_remove_exit+0xa2>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f0104bad:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104bb1:	75 17                	jne    f0104bca <sched_remove_exit+0x2d>
f0104bb3:	83 ec 04             	sub    $0x4,%esp
f0104bb6:	68 1f 62 13 f0       	push   $0xf013621f
f0104bbb:	68 31 01 00 00       	push   $0x131
f0104bc0:	68 eb 61 13 f0       	push   $0xf01361eb
f0104bc5:	e8 3b b6 ff ff       	call   f0100205 <_panic>
f0104bca:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bcd:	8b 40 44             	mov    0x44(%eax),%eax
f0104bd0:	85 c0                	test   %eax,%eax
f0104bd2:	74 11                	je     f0104be5 <sched_remove_exit+0x48>
f0104bd4:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bd7:	8b 40 44             	mov    0x44(%eax),%eax
f0104bda:	8b 55 08             	mov    0x8(%ebp),%edx
f0104bdd:	8b 52 48             	mov    0x48(%edx),%edx
f0104be0:	89 50 48             	mov    %edx,0x48(%eax)
f0104be3:	eb 0b                	jmp    f0104bf0 <sched_remove_exit+0x53>
f0104be5:	8b 45 08             	mov    0x8(%ebp),%eax
f0104be8:	8b 40 48             	mov    0x48(%eax),%eax
f0104beb:	a3 f8 ac 89 f0       	mov    %eax,0xf089acf8
f0104bf0:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bf3:	8b 40 48             	mov    0x48(%eax),%eax
f0104bf6:	85 c0                	test   %eax,%eax
f0104bf8:	74 11                	je     f0104c0b <sched_remove_exit+0x6e>
f0104bfa:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bfd:	8b 40 48             	mov    0x48(%eax),%eax
f0104c00:	8b 55 08             	mov    0x8(%ebp),%edx
f0104c03:	8b 52 44             	mov    0x44(%edx),%edx
f0104c06:	89 50 44             	mov    %edx,0x44(%eax)
f0104c09:	eb 0b                	jmp    f0104c16 <sched_remove_exit+0x79>
f0104c0b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c0e:	8b 40 44             	mov    0x44(%eax),%eax
f0104c11:	a3 f4 ac 89 f0       	mov    %eax,0xf089acf4
f0104c16:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c19:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104c20:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c23:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104c2a:	a1 00 ad 89 f0       	mov    0xf089ad00,%eax
f0104c2f:	48                   	dec    %eax
f0104c30:	a3 00 ad 89 f0       	mov    %eax,0xf089ad00
		env->env_status = ENV_UNKNOWN;
f0104c35:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c38:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104c3f:	90                   	nop
f0104c40:	c9                   	leave  
f0104c41:	c3                   	ret    

f0104c42 <sched_print_all>:

void sched_print_all()
{
f0104c42:	55                   	push   %ebp
f0104c43:	89 e5                	mov    %esp,%ebp
f0104c45:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104c48:	a1 3c ad 89 f0       	mov    0xf089ad3c,%eax
f0104c4d:	85 c0                	test   %eax,%eax
f0104c4f:	74 6c                	je     f0104cbd <sched_print_all+0x7b>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f0104c51:	83 ec 0c             	sub    $0xc,%esp
f0104c54:	68 a4 62 13 f0       	push   $0xf01362a4
f0104c59:	e8 b0 c0 ff ff       	call   f0100d0e <cprintf>
f0104c5e:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104c61:	a1 3c ad 89 f0       	mov    0xf089ad3c,%eax
f0104c66:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c69:	eb 29                	jmp    f0104c94 <sched_print_all+0x52>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104c6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c6e:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104c74:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c77:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104c7a:	83 ec 04             	sub    $0x4,%esp
f0104c7d:	52                   	push   %edx
f0104c7e:	50                   	push   %eax
f0104c7f:	68 c6 62 13 f0       	push   $0xf01362c6
f0104c84:	e8 85 c0 ff ff       	call   f0100d0e <cprintf>
f0104c89:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104c8c:	a1 44 ad 89 f0       	mov    0xf089ad44,%eax
f0104c91:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104c98:	74 08                	je     f0104ca2 <sched_print_all+0x60>
f0104c9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c9d:	8b 40 44             	mov    0x44(%eax),%eax
f0104ca0:	eb 05                	jmp    f0104ca7 <sched_print_all+0x65>
f0104ca2:	b8 00 00 00 00       	mov    $0x0,%eax
f0104ca7:	a3 44 ad 89 f0       	mov    %eax,0xf089ad44
f0104cac:	a1 44 ad 89 f0       	mov    0xf089ad44,%eax
f0104cb1:	85 c0                	test   %eax,%eax
f0104cb3:	75 b6                	jne    f0104c6b <sched_print_all+0x29>
f0104cb5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104cb9:	75 b0                	jne    f0104c6b <sched_print_all+0x29>
f0104cbb:	eb 10                	jmp    f0104ccd <sched_print_all+0x8b>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0104cbd:	83 ec 0c             	sub    $0xc,%esp
f0104cc0:	68 d0 62 13 f0       	push   $0xf01362d0
f0104cc5:	e8 44 c0 ff ff       	call   f0100d0e <cprintf>
f0104cca:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104ccd:	83 ec 0c             	sub    $0xc,%esp
f0104cd0:	68 ec 62 13 f0       	push   $0xf01362ec
f0104cd5:	e8 34 c0 ff ff       	call   f0100d0e <cprintf>
f0104cda:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104cdd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104ce4:	e9 ca 00 00 00       	jmp    f0104db3 <sched_print_all+0x171>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104ce9:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0104cee:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104cf1:	c1 e2 04             	shl    $0x4,%edx
f0104cf4:	01 d0                	add    %edx,%eax
f0104cf6:	8b 00                	mov    (%eax),%eax
f0104cf8:	85 c0                	test   %eax,%eax
f0104cfa:	0f 84 8d 00 00 00    	je     f0104d8d <sched_print_all+0x14b>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0104d00:	83 ec 08             	sub    $0x8,%esp
f0104d03:	ff 75 f0             	pushl  -0x10(%ebp)
f0104d06:	68 20 63 13 f0       	push   $0xf0136320
f0104d0b:	e8 fe bf ff ff       	call   f0100d0e <cprintf>
f0104d10:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104d13:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0104d18:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d1b:	c1 e2 04             	shl    $0x4,%edx
f0104d1e:	01 d0                	add    %edx,%eax
f0104d20:	8b 00                	mov    (%eax),%eax
f0104d22:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d25:	eb 34                	jmp    f0104d5b <sched_print_all+0x119>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104d27:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d2a:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104d30:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d33:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104d36:	83 ec 04             	sub    $0x4,%esp
f0104d39:	52                   	push   %edx
f0104d3a:	50                   	push   %eax
f0104d3b:	68 c6 62 13 f0       	push   $0xf01362c6
f0104d40:	e8 c9 bf ff ff       	call   f0100d0e <cprintf>
f0104d45:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104d48:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0104d4d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d50:	c1 e2 04             	shl    $0x4,%edx
f0104d53:	01 d0                	add    %edx,%eax
f0104d55:	8b 40 08             	mov    0x8(%eax),%eax
f0104d58:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d5b:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0104d60:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d63:	c1 e2 04             	shl    $0x4,%edx
f0104d66:	01 d0                	add    %edx,%eax
f0104d68:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d6c:	74 08                	je     f0104d76 <sched_print_all+0x134>
f0104d6e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104d71:	8b 52 44             	mov    0x44(%edx),%edx
f0104d74:	eb 05                	jmp    f0104d7b <sched_print_all+0x139>
f0104d76:	ba 00 00 00 00       	mov    $0x0,%edx
f0104d7b:	89 50 08             	mov    %edx,0x8(%eax)
f0104d7e:	8b 40 08             	mov    0x8(%eax),%eax
f0104d81:	85 c0                	test   %eax,%eax
f0104d83:	75 a2                	jne    f0104d27 <sched_print_all+0xe5>
f0104d85:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d89:	75 9c                	jne    f0104d27 <sched_print_all+0xe5>
f0104d8b:	eb 13                	jmp    f0104da0 <sched_print_all+0x15e>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0104d8d:	83 ec 08             	sub    $0x8,%esp
f0104d90:	ff 75 f0             	pushl  -0x10(%ebp)
f0104d93:	68 48 63 13 f0       	push   $0xf0136348
f0104d98:	e8 71 bf ff ff       	call   f0100d0e <cprintf>
f0104d9d:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0104da0:	83 ec 0c             	sub    $0xc,%esp
f0104da3:	68 ec 62 13 f0       	push   $0xf01362ec
f0104da8:	e8 61 bf ff ff       	call   f0100d0e <cprintf>
f0104dad:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104db0:	ff 45 f0             	incl   -0x10(%ebp)
f0104db3:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0104db8:	0f b6 c0             	movzbl %al,%eax
f0104dbb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0104dbe:	0f 8f 25 ff ff ff    	jg     f0104ce9 <sched_print_all+0xa7>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f0104dc4:	a1 f4 ac 89 f0       	mov    0xf089acf4,%eax
f0104dc9:	85 c0                	test   %eax,%eax
f0104dcb:	74 6c                	je     f0104e39 <sched_print_all+0x1f7>
	{
		cprintf("The processes in EXIT queue are:\n");
f0104dcd:	83 ec 0c             	sub    $0xc,%esp
f0104dd0:	68 6c 63 13 f0       	push   $0xf013636c
f0104dd5:	e8 34 bf ff ff       	call   f0100d0e <cprintf>
f0104dda:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104ddd:	a1 f4 ac 89 f0       	mov    0xf089acf4,%eax
f0104de2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104de5:	eb 29                	jmp    f0104e10 <sched_print_all+0x1ce>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104de7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104dea:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104df0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104df3:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104df6:	83 ec 04             	sub    $0x4,%esp
f0104df9:	52                   	push   %edx
f0104dfa:	50                   	push   %eax
f0104dfb:	68 c6 62 13 f0       	push   $0xf01362c6
f0104e00:	e8 09 bf ff ff       	call   f0100d0e <cprintf>
f0104e05:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104e08:	a1 fc ac 89 f0       	mov    0xf089acfc,%eax
f0104e0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e10:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e14:	74 08                	je     f0104e1e <sched_print_all+0x1dc>
f0104e16:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e19:	8b 40 44             	mov    0x44(%eax),%eax
f0104e1c:	eb 05                	jmp    f0104e23 <sched_print_all+0x1e1>
f0104e1e:	b8 00 00 00 00       	mov    $0x0,%eax
f0104e23:	a3 fc ac 89 f0       	mov    %eax,0xf089acfc
f0104e28:	a1 fc ac 89 f0       	mov    0xf089acfc,%eax
f0104e2d:	85 c0                	test   %eax,%eax
f0104e2f:	75 b6                	jne    f0104de7 <sched_print_all+0x1a5>
f0104e31:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e35:	75 b0                	jne    f0104de7 <sched_print_all+0x1a5>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f0104e37:	eb 10                	jmp    f0104e49 <sched_print_all+0x207>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0104e39:	83 ec 0c             	sub    $0xc,%esp
f0104e3c:	68 8e 63 13 f0       	push   $0xf013638e
f0104e41:	e8 c8 be ff ff       	call   f0100d0e <cprintf>
f0104e46:	83 c4 10             	add    $0x10,%esp
	}
}
f0104e49:	90                   	nop
f0104e4a:	c9                   	leave  
f0104e4b:	c3                   	ret    

f0104e4c <sched_run_all>:

void sched_run_all()
{
f0104e4c:	55                   	push   %ebp
f0104e4d:	89 e5                	mov    %esp,%ebp
f0104e4f:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0104e52:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104e59:	a1 3c ad 89 f0       	mov    0xf089ad3c,%eax
f0104e5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e61:	eb 24                	jmp    f0104e87 <sched_run_all+0x3b>
	{
		sched_remove_new(ptr_env);
f0104e63:	83 ec 0c             	sub    $0xc,%esp
f0104e66:	ff 75 f4             	pushl  -0xc(%ebp)
f0104e69:	e8 47 fc ff ff       	call   f0104ab5 <sched_remove_new>
f0104e6e:	83 c4 10             	add    $0x10,%esp
		sched_insert_ready(ptr_env);
f0104e71:	83 ec 0c             	sub    $0xc,%esp
f0104e74:	ff 75 f4             	pushl  -0xc(%ebp)
f0104e77:	e8 d0 fa ff ff       	call   f010494c <sched_insert_ready>
f0104e7c:	83 c4 10             	add    $0x10,%esp
}

void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104e7f:	a1 44 ad 89 f0       	mov    0xf089ad44,%eax
f0104e84:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e87:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e8b:	74 08                	je     f0104e95 <sched_run_all+0x49>
f0104e8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e90:	8b 40 44             	mov    0x44(%eax),%eax
f0104e93:	eb 05                	jmp    f0104e9a <sched_run_all+0x4e>
f0104e95:	b8 00 00 00 00       	mov    $0x0,%eax
f0104e9a:	a3 44 ad 89 f0       	mov    %eax,0xf089ad44
f0104e9f:	a1 44 ad 89 f0       	mov    0xf089ad44,%eax
f0104ea4:	85 c0                	test   %eax,%eax
f0104ea6:	75 bb                	jne    f0104e63 <sched_run_all+0x17>
f0104ea8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104eac:	75 b5                	jne    f0104e63 <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f0104eae:	a1 58 ad 89 f0       	mov    0xf089ad58,%eax
f0104eb3:	85 c0                	test   %eax,%eax
f0104eb5:	75 05                	jne    f0104ebc <sched_run_all+0x70>
		fos_scheduler();
f0104eb7:	e8 6a f8 ff ff       	call   f0104726 <fos_scheduler>
}
f0104ebc:	90                   	nop
f0104ebd:	c9                   	leave  
f0104ebe:	c3                   	ret    

f0104ebf <sched_kill_all>:

void sched_kill_all()
{
f0104ebf:	55                   	push   %ebp
f0104ec0:	89 e5                	mov    %esp,%ebp
f0104ec2:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104ec5:	a1 3c ad 89 f0       	mov    0xf089ad3c,%eax
f0104eca:	85 c0                	test   %eax,%eax
f0104ecc:	0f 84 98 00 00 00    	je     f0104f6a <sched_kill_all+0xab>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f0104ed2:	83 ec 0c             	sub    $0xc,%esp
f0104ed5:	68 ac 63 13 f0       	push   $0xf01363ac
f0104eda:	e8 2f be ff ff       	call   f0100d0e <cprintf>
f0104edf:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104ee2:	a1 3c ad 89 f0       	mov    0xf089ad3c,%eax
f0104ee7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104eea:	eb 55                	jmp    f0104f41 <sched_kill_all+0x82>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104eec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104eef:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104ef5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ef8:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104efb:	83 ec 04             	sub    $0x4,%esp
f0104efe:	52                   	push   %edx
f0104eff:	50                   	push   %eax
f0104f00:	68 d8 63 13 f0       	push   $0xf01363d8
f0104f05:	e8 04 be ff ff       	call   f0100d0e <cprintf>
f0104f0a:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0104f0d:	83 ec 0c             	sub    $0xc,%esp
f0104f10:	ff 75 f4             	pushl  -0xc(%ebp)
f0104f13:	e8 9d fb ff ff       	call   f0104ab5 <sched_remove_new>
f0104f18:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0104f1b:	83 ec 0c             	sub    $0xc,%esp
f0104f1e:	ff 75 f4             	pushl  -0xc(%ebp)
f0104f21:	e8 94 51 00 00       	call   f010a0ba <env_free>
f0104f26:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0104f29:	83 ec 0c             	sub    $0xc,%esp
f0104f2c:	68 eb 63 13 f0       	push   $0xf01363eb
f0104f31:	e8 d8 bd ff ff       	call   f0100d0e <cprintf>
f0104f36:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104f39:	a1 44 ad 89 f0       	mov    0xf089ad44,%eax
f0104f3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104f41:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f45:	74 08                	je     f0104f4f <sched_kill_all+0x90>
f0104f47:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f4a:	8b 40 44             	mov    0x44(%eax),%eax
f0104f4d:	eb 05                	jmp    f0104f54 <sched_kill_all+0x95>
f0104f4f:	b8 00 00 00 00       	mov    $0x0,%eax
f0104f54:	a3 44 ad 89 f0       	mov    %eax,0xf089ad44
f0104f59:	a1 44 ad 89 f0       	mov    0xf089ad44,%eax
f0104f5e:	85 c0                	test   %eax,%eax
f0104f60:	75 8a                	jne    f0104eec <sched_kill_all+0x2d>
f0104f62:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f66:	75 84                	jne    f0104eec <sched_kill_all+0x2d>
f0104f68:	eb 10                	jmp    f0104f7a <sched_kill_all+0xbb>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f0104f6a:	83 ec 0c             	sub    $0xc,%esp
f0104f6d:	68 f1 63 13 f0       	push   $0xf01363f1
f0104f72:	e8 97 bd ff ff       	call   f0100d0e <cprintf>
f0104f77:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104f7a:	83 ec 0c             	sub    $0xc,%esp
f0104f7d:	68 ec 62 13 f0       	push   $0xf01362ec
f0104f82:	e8 87 bd ff ff       	call   f0100d0e <cprintf>
f0104f87:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104f8a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104f91:	e9 99 01 00 00       	jmp    f010512f <sched_kill_all+0x270>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104f96:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0104f9b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104f9e:	c1 e2 04             	shl    $0x4,%edx
f0104fa1:	01 d0                	add    %edx,%eax
f0104fa3:	8b 00                	mov    (%eax),%eax
f0104fa5:	85 c0                	test   %eax,%eax
f0104fa7:	0f 84 5c 01 00 00    	je     f0105109 <sched_kill_all+0x24a>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f0104fad:	83 ec 08             	sub    $0x8,%esp
f0104fb0:	ff 75 f0             	pushl  -0x10(%ebp)
f0104fb3:	68 0c 64 13 f0       	push   $0xf013640c
f0104fb8:	e8 51 bd ff ff       	call   f0100d0e <cprintf>
f0104fbd:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104fc0:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0104fc5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104fc8:	c1 e2 04             	shl    $0x4,%edx
f0104fcb:	01 d0                	add    %edx,%eax
f0104fcd:	8b 00                	mov    (%eax),%eax
f0104fcf:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104fd2:	e9 f8 00 00 00       	jmp    f01050cf <sched_kill_all+0x210>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104fd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fda:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104fe0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fe3:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104fe6:	83 ec 04             	sub    $0x4,%esp
f0104fe9:	52                   	push   %edx
f0104fea:	50                   	push   %eax
f0104feb:	68 d8 63 13 f0       	push   $0xf01363d8
f0104ff0:	e8 19 bd ff ff       	call   f0100d0e <cprintf>
f0104ff5:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0104ff8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104ffc:	75 17                	jne    f0105015 <sched_kill_all+0x156>
f0104ffe:	83 ec 04             	sub    $0x4,%esp
f0105001:	68 1f 62 13 f0       	push   $0xf013621f
f0105006:	68 8c 01 00 00       	push   $0x18c
f010500b:	68 eb 61 13 f0       	push   $0xf01361eb
f0105010:	e8 f0 b1 ff ff       	call   f0100205 <_panic>
f0105015:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105018:	8b 40 44             	mov    0x44(%eax),%eax
f010501b:	85 c0                	test   %eax,%eax
f010501d:	74 11                	je     f0105030 <sched_kill_all+0x171>
f010501f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105022:	8b 40 44             	mov    0x44(%eax),%eax
f0105025:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105028:	8b 52 48             	mov    0x48(%edx),%edx
f010502b:	89 50 48             	mov    %edx,0x48(%eax)
f010502e:	eb 16                	jmp    f0105046 <sched_kill_all+0x187>
f0105030:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0105035:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105038:	c1 e2 04             	shl    $0x4,%edx
f010503b:	01 c2                	add    %eax,%edx
f010503d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105040:	8b 40 48             	mov    0x48(%eax),%eax
f0105043:	89 42 04             	mov    %eax,0x4(%edx)
f0105046:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105049:	8b 40 48             	mov    0x48(%eax),%eax
f010504c:	85 c0                	test   %eax,%eax
f010504e:	74 11                	je     f0105061 <sched_kill_all+0x1a2>
f0105050:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105053:	8b 40 48             	mov    0x48(%eax),%eax
f0105056:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105059:	8b 52 44             	mov    0x44(%edx),%edx
f010505c:	89 50 44             	mov    %edx,0x44(%eax)
f010505f:	eb 15                	jmp    f0105076 <sched_kill_all+0x1b7>
f0105061:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0105066:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105069:	c1 e2 04             	shl    $0x4,%edx
f010506c:	01 c2                	add    %eax,%edx
f010506e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105071:	8b 40 44             	mov    0x44(%eax),%eax
f0105074:	89 02                	mov    %eax,(%edx)
f0105076:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105079:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105080:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105083:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010508a:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f010508f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105092:	c1 e2 04             	shl    $0x4,%edx
f0105095:	01 d0                	add    %edx,%eax
f0105097:	8b 50 0c             	mov    0xc(%eax),%edx
f010509a:	4a                   	dec    %edx
f010509b:	89 50 0c             	mov    %edx,0xc(%eax)
				env_free(ptr_env);
f010509e:	83 ec 0c             	sub    $0xc,%esp
f01050a1:	ff 75 f4             	pushl  -0xc(%ebp)
f01050a4:	e8 11 50 00 00       	call   f010a0ba <env_free>
f01050a9:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01050ac:	83 ec 0c             	sub    $0xc,%esp
f01050af:	68 eb 63 13 f0       	push   $0xf01363eb
f01050b4:	e8 55 bc ff ff       	call   f0100d0e <cprintf>
f01050b9:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01050bc:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f01050c1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01050c4:	c1 e2 04             	shl    $0x4,%edx
f01050c7:	01 d0                	add    %edx,%eax
f01050c9:	8b 40 08             	mov    0x8(%eax),%eax
f01050cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01050cf:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f01050d4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01050d7:	c1 e2 04             	shl    $0x4,%edx
f01050da:	01 d0                	add    %edx,%eax
f01050dc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01050e0:	74 08                	je     f01050ea <sched_kill_all+0x22b>
f01050e2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01050e5:	8b 52 44             	mov    0x44(%edx),%edx
f01050e8:	eb 05                	jmp    f01050ef <sched_kill_all+0x230>
f01050ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01050ef:	89 50 08             	mov    %edx,0x8(%eax)
f01050f2:	8b 40 08             	mov    0x8(%eax),%eax
f01050f5:	85 c0                	test   %eax,%eax
f01050f7:	0f 85 da fe ff ff    	jne    f0104fd7 <sched_kill_all+0x118>
f01050fd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105101:	0f 85 d0 fe ff ff    	jne    f0104fd7 <sched_kill_all+0x118>
f0105107:	eb 13                	jmp    f010511c <sched_kill_all+0x25d>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f0105109:	83 ec 08             	sub    $0x8,%esp
f010510c:	ff 75 f0             	pushl  -0x10(%ebp)
f010510f:	68 48 63 13 f0       	push   $0xf0136348
f0105114:	e8 f5 bb ff ff       	call   f0100d0e <cprintf>
f0105119:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f010511c:	83 ec 0c             	sub    $0xc,%esp
f010511f:	68 ec 62 13 f0       	push   $0xf01362ec
f0105124:	e8 e5 bb ff ff       	call   f0100d0e <cprintf>
f0105129:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f010512c:	ff 45 f0             	incl   -0x10(%ebp)
f010512f:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0105134:	0f b6 c0             	movzbl %al,%eax
f0105137:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010513a:	0f 8f 56 fe ff ff    	jg     f0104f96 <sched_kill_all+0xd7>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f0105140:	a1 f4 ac 89 f0       	mov    0xf089acf4,%eax
f0105145:	85 c0                	test   %eax,%eax
f0105147:	0f 84 98 00 00 00    	je     f01051e5 <sched_kill_all+0x326>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f010514d:	83 ec 0c             	sub    $0xc,%esp
f0105150:	68 40 64 13 f0       	push   $0xf0136440
f0105155:	e8 b4 bb ff ff       	call   f0100d0e <cprintf>
f010515a:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f010515d:	a1 f4 ac 89 f0       	mov    0xf089acf4,%eax
f0105162:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105165:	eb 55                	jmp    f01051bc <sched_kill_all+0x2fd>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105167:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010516a:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0105170:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105173:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105176:	83 ec 04             	sub    $0x4,%esp
f0105179:	52                   	push   %edx
f010517a:	50                   	push   %eax
f010517b:	68 d8 63 13 f0       	push   $0xf01363d8
f0105180:	e8 89 bb ff ff       	call   f0100d0e <cprintf>
f0105185:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f0105188:	83 ec 0c             	sub    $0xc,%esp
f010518b:	ff 75 f4             	pushl  -0xc(%ebp)
f010518e:	e8 0a fa ff ff       	call   f0104b9d <sched_remove_exit>
f0105193:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105196:	83 ec 0c             	sub    $0xc,%esp
f0105199:	ff 75 f4             	pushl  -0xc(%ebp)
f010519c:	e8 19 4f 00 00       	call   f010a0ba <env_free>
f01051a1:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01051a4:	83 ec 0c             	sub    $0xc,%esp
f01051a7:	68 eb 63 13 f0       	push   $0xf01363eb
f01051ac:	e8 5d bb ff ff       	call   f0100d0e <cprintf>
f01051b1:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01051b4:	a1 fc ac 89 f0       	mov    0xf089acfc,%eax
f01051b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01051bc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051c0:	74 08                	je     f01051ca <sched_kill_all+0x30b>
f01051c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01051c5:	8b 40 44             	mov    0x44(%eax),%eax
f01051c8:	eb 05                	jmp    f01051cf <sched_kill_all+0x310>
f01051ca:	b8 00 00 00 00       	mov    $0x0,%eax
f01051cf:	a3 fc ac 89 f0       	mov    %eax,0xf089acfc
f01051d4:	a1 fc ac 89 f0       	mov    0xf089acfc,%eax
f01051d9:	85 c0                	test   %eax,%eax
f01051db:	75 8a                	jne    f0105167 <sched_kill_all+0x2a8>
f01051dd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051e1:	75 84                	jne    f0105167 <sched_kill_all+0x2a8>
f01051e3:	eb 10                	jmp    f01051f5 <sched_kill_all+0x336>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f01051e5:	83 ec 0c             	sub    $0xc,%esp
f01051e8:	68 8e 63 13 f0       	push   $0xf013638e
f01051ed:	e8 1c bb ff ff       	call   f0100d0e <cprintf>
f01051f2:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f01051f5:	c7 05 f4 a3 89 f0 00 	movl   $0x0,0xf089a3f4
f01051fc:	00 00 00 
	fos_scheduler();
f01051ff:	e8 22 f5 ff ff       	call   f0104726 <fos_scheduler>

f0105204 <sched_new_env>:
}


void sched_new_env(struct Env* e)
{
f0105204:	55                   	push   %ebp
f0105205:	89 e5                	mov    %esp,%ebp
f0105207:	83 ec 08             	sub    $0x8,%esp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f010520a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010520e:	74 0e                	je     f010521e <sched_new_env+0x1a>
	{
		sched_insert_new(e);
f0105210:	83 ec 0c             	sub    $0xc,%esp
f0105213:	ff 75 08             	pushl  0x8(%ebp)
f0105216:	e8 6e f8 ff ff       	call   f0104a89 <sched_insert_new>
f010521b:	83 c4 10             	add    $0x10,%esp
	}
}
f010521e:	90                   	nop
f010521f:	c9                   	leave  
f0105220:	c3                   	ret    

f0105221 <sched_run_env>:
	sched_insert_new(e);
}
 */

void sched_run_env(uint32 envId)
{
f0105221:	55                   	push   %ebp
f0105222:	89 e5                	mov    %esp,%ebp
f0105224:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105227:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f010522e:	a1 3c ad 89 f0       	mov    0xf089ad3c,%eax
f0105233:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105236:	eb 3d                	jmp    f0105275 <sched_run_env+0x54>
	{
		if(ptr_env->env_id == envId)
f0105238:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010523b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010523e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105241:	75 2a                	jne    f010526d <sched_run_env+0x4c>
		{
			sched_remove_new(ptr_env);
f0105243:	83 ec 0c             	sub    $0xc,%esp
f0105246:	ff 75 f4             	pushl  -0xc(%ebp)
f0105249:	e8 67 f8 ff ff       	call   f0104ab5 <sched_remove_new>
f010524e:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready(ptr_env);
f0105251:	83 ec 0c             	sub    $0xc,%esp
f0105254:	ff 75 f4             	pushl  -0xc(%ebp)
f0105257:	e8 f0 f6 ff ff       	call   f010494c <sched_insert_ready>
f010525c:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f010525f:	a1 58 ad 89 f0       	mov    0xf089ad58,%eax
f0105264:	85 c0                	test   %eax,%eax
f0105266:	75 36                	jne    f010529e <sched_run_env+0x7d>
			{
				fos_scheduler();
f0105268:	e8 b9 f4 ff ff       	call   f0104726 <fos_scheduler>
 */

void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f010526d:	a1 44 ad 89 f0       	mov    0xf089ad44,%eax
f0105272:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105275:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105279:	74 08                	je     f0105283 <sched_run_env+0x62>
f010527b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010527e:	8b 40 44             	mov    0x44(%eax),%eax
f0105281:	eb 05                	jmp    f0105288 <sched_run_env+0x67>
f0105283:	b8 00 00 00 00       	mov    $0x0,%eax
f0105288:	a3 44 ad 89 f0       	mov    %eax,0xf089ad44
f010528d:	a1 44 ad 89 f0       	mov    0xf089ad44,%eax
f0105292:	85 c0                	test   %eax,%eax
f0105294:	75 a2                	jne    f0105238 <sched_run_env+0x17>
f0105296:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010529a:	75 9c                	jne    f0105238 <sched_run_env+0x17>
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f010529c:	eb 01                	jmp    f010529f <sched_run_env+0x7e>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f010529e:	90                   	nop
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f010529f:	90                   	nop
f01052a0:	c9                   	leave  
f01052a1:	c3                   	ret    

f01052a2 <sched_exit_env>:

void sched_exit_env(uint32 envId)
{
f01052a2:	55                   	push   %ebp
f01052a3:	89 e5                	mov    %esp,%ebp
f01052a5:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01052a8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f01052af:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f01052b6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01052ba:	75 59                	jne    f0105315 <sched_exit_env+0x73>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01052bc:	a1 3c ad 89 f0       	mov    0xf089ad3c,%eax
f01052c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01052c4:	eb 28                	jmp    f01052ee <sched_exit_env+0x4c>
				{
			if(ptr_env->env_id == envId)
f01052c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052c9:	8b 40 4c             	mov    0x4c(%eax),%eax
f01052cc:	3b 45 08             	cmp    0x8(%ebp),%eax
f01052cf:	75 15                	jne    f01052e6 <sched_exit_env+0x44>
			{
				sched_remove_new(ptr_env);
f01052d1:	83 ec 0c             	sub    $0xc,%esp
f01052d4:	ff 75 f4             	pushl  -0xc(%ebp)
f01052d7:	e8 d9 f7 ff ff       	call   f0104ab5 <sched_remove_new>
f01052dc:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01052df:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01052e6:	a1 44 ad 89 f0       	mov    0xf089ad44,%eax
f01052eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01052ee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01052f2:	74 08                	je     f01052fc <sched_exit_env+0x5a>
f01052f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052f7:	8b 40 44             	mov    0x44(%eax),%eax
f01052fa:	eb 05                	jmp    f0105301 <sched_exit_env+0x5f>
f01052fc:	b8 00 00 00 00       	mov    $0x0,%eax
f0105301:	a3 44 ad 89 f0       	mov    %eax,0xf089ad44
f0105306:	a1 44 ad 89 f0       	mov    0xf089ad44,%eax
f010530b:	85 c0                	test   %eax,%eax
f010530d:	75 b7                	jne    f01052c6 <sched_exit_env+0x24>
f010530f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105313:	75 b1                	jne    f01052c6 <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
				}
	}
	if (!found)
f0105315:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105319:	0f 85 67 01 00 00    	jne    f0105486 <sched_exit_env+0x1e4>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010531f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105326:	e9 47 01 00 00       	jmp    f0105472 <sched_exit_env+0x1d0>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f010532b:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0105330:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105333:	c1 e2 04             	shl    $0x4,%edx
f0105336:	01 d0                	add    %edx,%eax
f0105338:	8b 00                	mov    (%eax),%eax
f010533a:	85 c0                	test   %eax,%eax
f010533c:	0f 84 27 01 00 00    	je     f0105469 <sched_exit_env+0x1c7>
			{
				ptr_env=NULL;
f0105342:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105349:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f010534e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105351:	c1 e2 04             	shl    $0x4,%edx
f0105354:	01 d0                	add    %edx,%eax
f0105356:	8b 00                	mov    (%eax),%eax
f0105358:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010535b:	e9 d1 00 00 00       	jmp    f0105431 <sched_exit_env+0x18f>
				{
					if(ptr_env->env_id == envId)
f0105360:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105363:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105366:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105369:	0f 85 af 00 00 00    	jne    f010541e <sched_exit_env+0x17c>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f010536f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105373:	75 17                	jne    f010538c <sched_exit_env+0xea>
f0105375:	83 ec 04             	sub    $0x4,%esp
f0105378:	68 1f 62 13 f0       	push   $0xf013621f
f010537d:	68 f7 01 00 00       	push   $0x1f7
f0105382:	68 eb 61 13 f0       	push   $0xf01361eb
f0105387:	e8 79 ae ff ff       	call   f0100205 <_panic>
f010538c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010538f:	8b 40 44             	mov    0x44(%eax),%eax
f0105392:	85 c0                	test   %eax,%eax
f0105394:	74 11                	je     f01053a7 <sched_exit_env+0x105>
f0105396:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105399:	8b 40 44             	mov    0x44(%eax),%eax
f010539c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010539f:	8b 52 48             	mov    0x48(%edx),%edx
f01053a2:	89 50 48             	mov    %edx,0x48(%eax)
f01053a5:	eb 16                	jmp    f01053bd <sched_exit_env+0x11b>
f01053a7:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f01053ac:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01053af:	c1 e2 04             	shl    $0x4,%edx
f01053b2:	01 c2                	add    %eax,%edx
f01053b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053b7:	8b 40 48             	mov    0x48(%eax),%eax
f01053ba:	89 42 04             	mov    %eax,0x4(%edx)
f01053bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053c0:	8b 40 48             	mov    0x48(%eax),%eax
f01053c3:	85 c0                	test   %eax,%eax
f01053c5:	74 11                	je     f01053d8 <sched_exit_env+0x136>
f01053c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053ca:	8b 40 48             	mov    0x48(%eax),%eax
f01053cd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01053d0:	8b 52 44             	mov    0x44(%edx),%edx
f01053d3:	89 50 44             	mov    %edx,0x44(%eax)
f01053d6:	eb 15                	jmp    f01053ed <sched_exit_env+0x14b>
f01053d8:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f01053dd:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01053e0:	c1 e2 04             	shl    $0x4,%edx
f01053e3:	01 c2                	add    %eax,%edx
f01053e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053e8:	8b 40 44             	mov    0x44(%eax),%eax
f01053eb:	89 02                	mov    %eax,(%edx)
f01053ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053f0:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01053f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053fa:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105401:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0105406:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105409:	c1 e2 04             	shl    $0x4,%edx
f010540c:	01 d0                	add    %edx,%eax
f010540e:	8b 50 0c             	mov    0xc(%eax),%edx
f0105411:	4a                   	dec    %edx
f0105412:	89 50 0c             	mov    %edx,0xc(%eax)
						found = 1;
f0105415:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f010541c:	eb 4b                	jmp    f0105469 <sched_exit_env+0x1c7>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010541e:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0105423:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105426:	c1 e2 04             	shl    $0x4,%edx
f0105429:	01 d0                	add    %edx,%eax
f010542b:	8b 40 08             	mov    0x8(%eax),%eax
f010542e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105431:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0105436:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105439:	c1 e2 04             	shl    $0x4,%edx
f010543c:	01 d0                	add    %edx,%eax
f010543e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105442:	74 08                	je     f010544c <sched_exit_env+0x1aa>
f0105444:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105447:	8b 52 44             	mov    0x44(%edx),%edx
f010544a:	eb 05                	jmp    f0105451 <sched_exit_env+0x1af>
f010544c:	ba 00 00 00 00       	mov    $0x0,%edx
f0105451:	89 50 08             	mov    %edx,0x8(%eax)
f0105454:	8b 40 08             	mov    0x8(%eax),%eax
f0105457:	85 c0                	test   %eax,%eax
f0105459:	0f 85 01 ff ff ff    	jne    f0105360 <sched_exit_env+0xbe>
f010545f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105463:	0f 85 f7 fe ff ff    	jne    f0105360 <sched_exit_env+0xbe>
						found = 1;
						break;
					}
				}
			}
			if (found)
f0105469:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010546d:	75 16                	jne    f0105485 <sched_exit_env+0x1e3>
			}
				}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010546f:	ff 45 ec             	incl   -0x14(%ebp)
f0105472:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0105477:	0f b6 c0             	movzbl %al,%eax
f010547a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010547d:	0f 8f a8 fe ff ff    	jg     f010532b <sched_exit_env+0x89>
f0105483:	eb 01                	jmp    f0105486 <sched_exit_env+0x1e4>
						break;
					}
				}
			}
			if (found)
				break;
f0105485:	90                   	nop
		}
	}
	if (!found)
f0105486:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010548a:	75 1c                	jne    f01054a8 <sched_exit_env+0x206>
	{
		if (curenv->env_id == envId)
f010548c:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f0105491:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105494:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105497:	75 0f                	jne    f01054a8 <sched_exit_env+0x206>
		{
			ptr_env = curenv;
f0105499:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010549e:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f01054a1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f01054a8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01054ac:	74 2a                	je     f01054d8 <sched_exit_env+0x236>
	{
		sched_insert_exit(ptr_env);
f01054ae:	83 ec 0c             	sub    $0xc,%esp
f01054b1:	ff 75 f4             	pushl  -0xc(%ebp)
f01054b4:	e8 a1 f6 ff ff       	call   f0104b5a <sched_insert_exit>
f01054b9:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f01054bc:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f01054c1:	8b 40 4c             	mov    0x4c(%eax),%eax
f01054c4:	3b 45 08             	cmp    0x8(%ebp),%eax
f01054c7:	75 0f                	jne    f01054d8 <sched_exit_env+0x236>
		{
			curenv = NULL;
f01054c9:	c7 05 f4 a3 89 f0 00 	movl   $0x0,0xf089a3f4
f01054d0:	00 00 00 
			fos_scheduler();
f01054d3:	e8 4e f2 ff ff       	call   f0104726 <fos_scheduler>
		}
	}
}
f01054d8:	90                   	nop
f01054d9:	c9                   	leave  
f01054da:	c3                   	ret    

f01054db <sched_exit_all_ready_envs>:

/*2018*/
void sched_exit_all_ready_envs()
{
f01054db:	55                   	push   %ebp
f01054dc:	89 e5                	mov    %esp,%ebp
f01054de:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01054e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01054e8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01054ef:	e9 37 01 00 00       	jmp    f010562b <sched_exit_all_ready_envs+0x150>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f01054f4:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f01054f9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01054fc:	c1 e2 04             	shl    $0x4,%edx
f01054ff:	01 d0                	add    %edx,%eax
f0105501:	8b 00                	mov    (%eax),%eax
f0105503:	85 c0                	test   %eax,%eax
f0105505:	0f 84 1d 01 00 00    	je     f0105628 <sched_exit_all_ready_envs+0x14d>
		{
			ptr_env=NULL;
f010550b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105512:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0105517:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010551a:	c1 e2 04             	shl    $0x4,%edx
f010551d:	01 d0                	add    %edx,%eax
f010551f:	8b 00                	mov    (%eax),%eax
f0105521:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105524:	e9 c7 00 00 00       	jmp    f01055f0 <sched_exit_all_ready_envs+0x115>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105529:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010552d:	75 17                	jne    f0105546 <sched_exit_all_ready_envs+0x6b>
f010552f:	83 ec 04             	sub    $0x4,%esp
f0105532:	68 1f 62 13 f0       	push   $0xf013621f
f0105537:	68 22 02 00 00       	push   $0x222
f010553c:	68 eb 61 13 f0       	push   $0xf01361eb
f0105541:	e8 bf ac ff ff       	call   f0100205 <_panic>
f0105546:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105549:	8b 40 44             	mov    0x44(%eax),%eax
f010554c:	85 c0                	test   %eax,%eax
f010554e:	74 11                	je     f0105561 <sched_exit_all_ready_envs+0x86>
f0105550:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105553:	8b 40 44             	mov    0x44(%eax),%eax
f0105556:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105559:	8b 52 48             	mov    0x48(%edx),%edx
f010555c:	89 50 48             	mov    %edx,0x48(%eax)
f010555f:	eb 16                	jmp    f0105577 <sched_exit_all_ready_envs+0x9c>
f0105561:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0105566:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105569:	c1 e2 04             	shl    $0x4,%edx
f010556c:	01 c2                	add    %eax,%edx
f010556e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105571:	8b 40 48             	mov    0x48(%eax),%eax
f0105574:	89 42 04             	mov    %eax,0x4(%edx)
f0105577:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010557a:	8b 40 48             	mov    0x48(%eax),%eax
f010557d:	85 c0                	test   %eax,%eax
f010557f:	74 11                	je     f0105592 <sched_exit_all_ready_envs+0xb7>
f0105581:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105584:	8b 40 48             	mov    0x48(%eax),%eax
f0105587:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010558a:	8b 52 44             	mov    0x44(%edx),%edx
f010558d:	89 50 44             	mov    %edx,0x44(%eax)
f0105590:	eb 15                	jmp    f01055a7 <sched_exit_all_ready_envs+0xcc>
f0105592:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0105597:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010559a:	c1 e2 04             	shl    $0x4,%edx
f010559d:	01 c2                	add    %eax,%edx
f010559f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055a2:	8b 40 44             	mov    0x44(%eax),%eax
f01055a5:	89 02                	mov    %eax,(%edx)
f01055a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055aa:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01055b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055b4:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01055bb:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f01055c0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01055c3:	c1 e2 04             	shl    $0x4,%edx
f01055c6:	01 d0                	add    %edx,%eax
f01055c8:	8b 50 0c             	mov    0xc(%eax),%edx
f01055cb:	4a                   	dec    %edx
f01055cc:	89 50 0c             	mov    %edx,0xc(%eax)
				sched_insert_exit(ptr_env);
f01055cf:	83 ec 0c             	sub    $0xc,%esp
f01055d2:	ff 75 f4             	pushl  -0xc(%ebp)
f01055d5:	e8 80 f5 ff ff       	call   f0104b5a <sched_insert_exit>
f01055da:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01055dd:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f01055e2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01055e5:	c1 e2 04             	shl    $0x4,%edx
f01055e8:	01 d0                	add    %edx,%eax
f01055ea:	8b 40 08             	mov    0x8(%eax),%eax
f01055ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01055f0:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f01055f5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01055f8:	c1 e2 04             	shl    $0x4,%edx
f01055fb:	01 d0                	add    %edx,%eax
f01055fd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105601:	74 08                	je     f010560b <sched_exit_all_ready_envs+0x130>
f0105603:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105606:	8b 52 44             	mov    0x44(%edx),%edx
f0105609:	eb 05                	jmp    f0105610 <sched_exit_all_ready_envs+0x135>
f010560b:	ba 00 00 00 00       	mov    $0x0,%edx
f0105610:	89 50 08             	mov    %edx,0x8(%eax)
f0105613:	8b 40 08             	mov    0x8(%eax),%eax
f0105616:	85 c0                	test   %eax,%eax
f0105618:	0f 85 0b ff ff ff    	jne    f0105529 <sched_exit_all_ready_envs+0x4e>
f010561e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105622:	0f 85 01 ff ff ff    	jne    f0105529 <sched_exit_all_ready_envs+0x4e>

/*2018*/
void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105628:	ff 45 f0             	incl   -0x10(%ebp)
f010562b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0105630:	0f b6 c0             	movzbl %al,%eax
f0105633:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105636:	0f 8f b8 fe ff ff    	jg     f01054f4 <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f010563c:	90                   	nop
f010563d:	c9                   	leave  
f010563e:	c3                   	ret    

f010563f <sched_kill_env>:

/*2015*/
void sched_kill_env(uint32 envId)
{
f010563f:	55                   	push   %ebp
f0105640:	89 e5                	mov    %esp,%ebp
f0105642:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105645:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f010564c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0105653:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105657:	0f 85 a0 00 00 00    	jne    f01056fd <sched_kill_env+0xbe>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010565d:	a1 3c ad 89 f0       	mov    0xf089ad3c,%eax
f0105662:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105665:	eb 67                	jmp    f01056ce <sched_kill_env+0x8f>
					{
			if(ptr_env->env_id == envId)
f0105667:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010566a:	8b 40 4c             	mov    0x4c(%eax),%eax
f010566d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105670:	75 54                	jne    f01056c6 <sched_kill_env+0x87>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f0105672:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105675:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f010567b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010567e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105681:	83 ec 04             	sub    $0x4,%esp
f0105684:	52                   	push   %edx
f0105685:	50                   	push   %eax
f0105686:	68 6c 64 13 f0       	push   $0xf013646c
f010568b:	e8 7e b6 ff ff       	call   f0100d0e <cprintf>
f0105690:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f0105693:	83 ec 0c             	sub    $0xc,%esp
f0105696:	ff 75 f4             	pushl  -0xc(%ebp)
f0105699:	e8 17 f4 ff ff       	call   f0104ab5 <sched_remove_new>
f010569e:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f01056a1:	83 ec 0c             	sub    $0xc,%esp
f01056a4:	ff 75 f4             	pushl  -0xc(%ebp)
f01056a7:	e8 0e 4a 00 00       	call   f010a0ba <env_free>
f01056ac:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01056af:	83 ec 0c             	sub    $0xc,%esp
f01056b2:	68 eb 63 13 f0       	push   $0xf01363eb
f01056b7:	e8 52 b6 ff ff       	call   f0100d0e <cprintf>
f01056bc:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01056bf:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01056c6:	a1 44 ad 89 f0       	mov    0xf089ad44,%eax
f01056cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01056ce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056d2:	74 08                	je     f01056dc <sched_kill_env+0x9d>
f01056d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056d7:	8b 40 44             	mov    0x44(%eax),%eax
f01056da:	eb 05                	jmp    f01056e1 <sched_kill_env+0xa2>
f01056dc:	b8 00 00 00 00       	mov    $0x0,%eax
f01056e1:	a3 44 ad 89 f0       	mov    %eax,0xf089ad44
f01056e6:	a1 44 ad 89 f0       	mov    0xf089ad44,%eax
f01056eb:	85 c0                	test   %eax,%eax
f01056ed:	0f 85 74 ff ff ff    	jne    f0105667 <sched_kill_env+0x28>
f01056f3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056f7:	0f 85 6a ff ff ff    	jne    f0105667 <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
					}
	}
	if (!found)
f01056fd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105701:	0f 85 a6 01 00 00    	jne    f01058ad <sched_kill_env+0x26e>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105707:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010570e:	e9 86 01 00 00       	jmp    f0105899 <sched_kill_env+0x25a>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105713:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0105718:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010571b:	c1 e2 04             	shl    $0x4,%edx
f010571e:	01 d0                	add    %edx,%eax
f0105720:	8b 00                	mov    (%eax),%eax
f0105722:	85 c0                	test   %eax,%eax
f0105724:	0f 84 66 01 00 00    	je     f0105890 <sched_kill_env+0x251>
			{
				ptr_env=NULL;
f010572a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105731:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0105736:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105739:	c1 e2 04             	shl    $0x4,%edx
f010573c:	01 d0                	add    %edx,%eax
f010573e:	8b 00                	mov    (%eax),%eax
f0105740:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105743:	e9 10 01 00 00       	jmp    f0105858 <sched_kill_env+0x219>
				{
					if(ptr_env->env_id == envId)
f0105748:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010574b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010574e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105751:	0f 85 ee 00 00 00    	jne    f0105845 <sched_kill_env+0x206>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f0105757:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010575a:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0105760:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105763:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105766:	ff 75 ec             	pushl  -0x14(%ebp)
f0105769:	52                   	push   %edx
f010576a:	50                   	push   %eax
f010576b:	68 94 64 13 f0       	push   $0xf0136494
f0105770:	e8 99 b5 ff ff       	call   f0100d0e <cprintf>
f0105775:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105778:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010577c:	75 17                	jne    f0105795 <sched_kill_env+0x156>
f010577e:	83 ec 04             	sub    $0x4,%esp
f0105781:	68 1f 62 13 f0       	push   $0xf013621f
f0105786:	68 49 02 00 00       	push   $0x249
f010578b:	68 eb 61 13 f0       	push   $0xf01361eb
f0105790:	e8 70 aa ff ff       	call   f0100205 <_panic>
f0105795:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105798:	8b 40 44             	mov    0x44(%eax),%eax
f010579b:	85 c0                	test   %eax,%eax
f010579d:	74 11                	je     f01057b0 <sched_kill_env+0x171>
f010579f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057a2:	8b 40 44             	mov    0x44(%eax),%eax
f01057a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01057a8:	8b 52 48             	mov    0x48(%edx),%edx
f01057ab:	89 50 48             	mov    %edx,0x48(%eax)
f01057ae:	eb 16                	jmp    f01057c6 <sched_kill_env+0x187>
f01057b0:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f01057b5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01057b8:	c1 e2 04             	shl    $0x4,%edx
f01057bb:	01 c2                	add    %eax,%edx
f01057bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057c0:	8b 40 48             	mov    0x48(%eax),%eax
f01057c3:	89 42 04             	mov    %eax,0x4(%edx)
f01057c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057c9:	8b 40 48             	mov    0x48(%eax),%eax
f01057cc:	85 c0                	test   %eax,%eax
f01057ce:	74 11                	je     f01057e1 <sched_kill_env+0x1a2>
f01057d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057d3:	8b 40 48             	mov    0x48(%eax),%eax
f01057d6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01057d9:	8b 52 44             	mov    0x44(%edx),%edx
f01057dc:	89 50 44             	mov    %edx,0x44(%eax)
f01057df:	eb 15                	jmp    f01057f6 <sched_kill_env+0x1b7>
f01057e1:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f01057e6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01057e9:	c1 e2 04             	shl    $0x4,%edx
f01057ec:	01 c2                	add    %eax,%edx
f01057ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057f1:	8b 40 44             	mov    0x44(%eax),%eax
f01057f4:	89 02                	mov    %eax,(%edx)
f01057f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057f9:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105800:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105803:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010580a:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f010580f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105812:	c1 e2 04             	shl    $0x4,%edx
f0105815:	01 d0                	add    %edx,%eax
f0105817:	8b 50 0c             	mov    0xc(%eax),%edx
f010581a:	4a                   	dec    %edx
f010581b:	89 50 0c             	mov    %edx,0xc(%eax)
						env_free(ptr_env);
f010581e:	83 ec 0c             	sub    $0xc,%esp
f0105821:	ff 75 f4             	pushl  -0xc(%ebp)
f0105824:	e8 91 48 00 00       	call   f010a0ba <env_free>
f0105829:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f010582c:	83 ec 0c             	sub    $0xc,%esp
f010582f:	68 eb 63 13 f0       	push   $0xf01363eb
f0105834:	e8 d5 b4 ff ff       	call   f0100d0e <cprintf>
f0105839:	83 c4 10             	add    $0x10,%esp
						found = 1;
f010583c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105843:	eb 4b                	jmp    f0105890 <sched_kill_env+0x251>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105845:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f010584a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010584d:	c1 e2 04             	shl    $0x4,%edx
f0105850:	01 d0                	add    %edx,%eax
f0105852:	8b 40 08             	mov    0x8(%eax),%eax
f0105855:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105858:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f010585d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105860:	c1 e2 04             	shl    $0x4,%edx
f0105863:	01 d0                	add    %edx,%eax
f0105865:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105869:	74 08                	je     f0105873 <sched_kill_env+0x234>
f010586b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010586e:	8b 52 44             	mov    0x44(%edx),%edx
f0105871:	eb 05                	jmp    f0105878 <sched_kill_env+0x239>
f0105873:	ba 00 00 00 00       	mov    $0x0,%edx
f0105878:	89 50 08             	mov    %edx,0x8(%eax)
f010587b:	8b 40 08             	mov    0x8(%eax),%eax
f010587e:	85 c0                	test   %eax,%eax
f0105880:	0f 85 c2 fe ff ff    	jne    f0105748 <sched_kill_env+0x109>
f0105886:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010588a:	0f 85 b8 fe ff ff    	jne    f0105748 <sched_kill_env+0x109>
						break;
						//return;
					}
				}
			}
			if (found)
f0105890:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105894:	75 16                	jne    f01058ac <sched_kill_env+0x26d>
			}
					}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105896:	ff 45 ec             	incl   -0x14(%ebp)
f0105899:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f010589e:	0f b6 c0             	movzbl %al,%eax
f01058a1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01058a4:	0f 8f 69 fe ff ff    	jg     f0105713 <sched_kill_env+0xd4>
f01058aa:	eb 01                	jmp    f01058ad <sched_kill_env+0x26e>
						//return;
					}
				}
			}
			if (found)
				break;
f01058ac:	90                   	nop
		}
	}
	if (!found)
f01058ad:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01058b1:	0f 85 a7 00 00 00    	jne    f010595e <sched_kill_env+0x31f>
	{
		ptr_env=NULL;
f01058b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01058be:	a1 f4 ac 89 f0       	mov    0xf089acf4,%eax
f01058c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01058c6:	eb 67                	jmp    f010592f <sched_kill_env+0x2f0>
		{
			if(ptr_env->env_id == envId)
f01058c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058cb:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058ce:	3b 45 08             	cmp    0x8(%ebp),%eax
f01058d1:	75 54                	jne    f0105927 <sched_kill_env+0x2e8>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f01058d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058d6:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f01058dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058df:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058e2:	83 ec 04             	sub    $0x4,%esp
f01058e5:	52                   	push   %edx
f01058e6:	50                   	push   %eax
f01058e7:	68 c0 64 13 f0       	push   $0xf01364c0
f01058ec:	e8 1d b4 ff ff       	call   f0100d0e <cprintf>
f01058f1:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f01058f4:	83 ec 0c             	sub    $0xc,%esp
f01058f7:	ff 75 f4             	pushl  -0xc(%ebp)
f01058fa:	e8 9e f2 ff ff       	call   f0104b9d <sched_remove_exit>
f01058ff:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f0105902:	83 ec 0c             	sub    $0xc,%esp
f0105905:	ff 75 f4             	pushl  -0xc(%ebp)
f0105908:	e8 ad 47 00 00       	call   f010a0ba <env_free>
f010590d:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105910:	83 ec 0c             	sub    $0xc,%esp
f0105913:	68 eb 63 13 f0       	push   $0xf01363eb
f0105918:	e8 f1 b3 ff ff       	call   f0100d0e <cprintf>
f010591d:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105920:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105927:	a1 fc ac 89 f0       	mov    0xf089acfc,%eax
f010592c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010592f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105933:	74 08                	je     f010593d <sched_kill_env+0x2fe>
f0105935:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105938:	8b 40 44             	mov    0x44(%eax),%eax
f010593b:	eb 05                	jmp    f0105942 <sched_kill_env+0x303>
f010593d:	b8 00 00 00 00       	mov    $0x0,%eax
f0105942:	a3 fc ac 89 f0       	mov    %eax,0xf089acfc
f0105947:	a1 fc ac 89 f0       	mov    0xf089acfc,%eax
f010594c:	85 c0                	test   %eax,%eax
f010594e:	0f 85 74 ff ff ff    	jne    f01058c8 <sched_kill_env+0x289>
f0105954:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105958:	0f 85 6a ff ff ff    	jne    f01058c8 <sched_kill_env+0x289>
				//return;
			}
		}
	}

	if (!found)
f010595e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105962:	0f 85 a0 00 00 00    	jne    f0105a08 <sched_kill_env+0x3c9>
	{
		if (curenv->env_id == envId)
f0105968:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010596d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105970:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105973:	0f 85 8f 00 00 00    	jne    f0105a08 <sched_kill_env+0x3c9>
		{
			ptr_env = curenv;
f0105979:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010597e:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_id == ENV_RUNNABLE);
f0105981:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105984:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105987:	83 f8 02             	cmp    $0x2,%eax
f010598a:	74 19                	je     f01059a5 <sched_kill_env+0x366>
f010598c:	68 e8 64 13 f0       	push   $0xf01364e8
f0105991:	68 d6 61 13 f0       	push   $0xf01361d6
f0105996:	68 6c 02 00 00       	push   $0x26c
f010599b:	68 eb 61 13 f0       	push   $0xf01361eb
f01059a0:	e8 60 a8 ff ff       	call   f0100205 <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f01059a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059a8:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f01059ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059b1:	8b 40 4c             	mov    0x4c(%eax),%eax
f01059b4:	83 ec 04             	sub    $0x4,%esp
f01059b7:	52                   	push   %edx
f01059b8:	50                   	push   %eax
f01059b9:	68 08 65 13 f0       	push   $0xf0136508
f01059be:	e8 4b b3 ff ff       	call   f0100d0e <cprintf>
f01059c3:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f01059c6:	83 ec 0c             	sub    $0xc,%esp
f01059c9:	ff 75 f4             	pushl  -0xc(%ebp)
f01059cc:	e8 e9 46 00 00       	call   f010a0ba <env_free>
f01059d1:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01059d4:	83 ec 0c             	sub    $0xc,%esp
f01059d7:	68 eb 63 13 f0       	push   $0xf01363eb
f01059dc:	e8 2d b3 ff ff       	call   f0100d0e <cprintf>
f01059e1:	83 c4 10             	add    $0x10,%esp
			found = 1;
f01059e4:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//If it's the curenv, then reset it and reinvoke the scheduler
			//as there's no meaning to return back to a killed env
			//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
			lcr3(phys_page_directory);
f01059eb:	a1 ac ad 89 f0       	mov    0xf089adac,%eax
f01059f0:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01059f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01059f6:	0f 22 d8             	mov    %eax,%cr3
			curenv = NULL;
f01059f9:	c7 05 f4 a3 89 f0 00 	movl   $0x0,0xf089a3f4
f0105a00:	00 00 00 
			fos_scheduler();
f0105a03:	e8 1e ed ff ff       	call   f0104726 <fos_scheduler>
		}
	}
}
f0105a08:	90                   	nop
f0105a09:	c9                   	leave  
f0105a0a:	c3                   	ret    

f0105a0b <clock_interrupt_handler>:


void clock_interrupt_handler()
{
f0105a0b:	55                   	push   %ebp
f0105a0c:	89 e5                	mov    %esp,%ebp
f0105a0e:	83 ec 08             	sub    $0x8,%esp
	//cputchar('i');

	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f0105a11:	83 ec 0c             	sub    $0xc,%esp
f0105a14:	6a 01                	push   $0x1
f0105a16:	e8 22 89 00 00       	call   f010e33d <isPageReplacmentAlgorithmLRU>
f0105a1b:	83 c4 10             	add    $0x10,%esp
f0105a1e:	85 c0                	test   %eax,%eax
f0105a20:	74 05                	je     f0105a27 <clock_interrupt_handler+0x1c>
	{
		update_WS_time_stamps();
f0105a22:	e8 05 00 00 00       	call   f0105a2c <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f0105a27:	e8 fa ec ff ff       	call   f0104726 <fos_scheduler>

f0105a2c <update_WS_time_stamps>:
}

void update_WS_time_stamps()
{
f0105a2c:	55                   	push   %ebp
f0105a2d:	89 e5                	mov    %esp,%ebp
f0105a2f:	53                   	push   %ebx
f0105a30:	83 ec 24             	sub    $0x24,%esp
	struct Env *curr_env_ptr = curenv;
f0105a33:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f0105a38:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f0105a3b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0105a3f:	0f 84 cc 01 00 00    	je     f0105c11 <update_WS_time_stamps+0x1e5>
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0105a45:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0105a4c:	e9 cf 00 00 00       	jmp    f0105b20 <update_WS_time_stamps+0xf4>
			{
				if( curr_env_ptr->ptr_pageWorkingSet[i].empty != 1)
f0105a51:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a54:	8b 48 78             	mov    0x78(%eax),%ecx
f0105a57:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105a5a:	89 d0                	mov    %edx,%eax
f0105a5c:	01 c0                	add    %eax,%eax
f0105a5e:	01 d0                	add    %edx,%eax
f0105a60:	c1 e0 03             	shl    $0x3,%eax
f0105a63:	01 c8                	add    %ecx,%eax
f0105a65:	8a 40 04             	mov    0x4(%eax),%al
f0105a68:	3c 01                	cmp    $0x1,%al
f0105a6a:	0f 84 ad 00 00 00    	je     f0105b1d <update_WS_time_stamps+0xf1>
				{
					//update the time if the page was referenced
					uint32 page_va = curr_env_ptr->ptr_pageWorkingSet[i].virtual_address ;
f0105a70:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a73:	8b 48 78             	mov    0x78(%eax),%ecx
f0105a76:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105a79:	89 d0                	mov    %edx,%eax
f0105a7b:	01 c0                	add    %eax,%eax
f0105a7d:	01 d0                	add    %edx,%eax
f0105a7f:	c1 e0 03             	shl    $0x3,%eax
f0105a82:	01 c8                	add    %ecx,%eax
f0105a84:	8b 00                	mov    (%eax),%eax
f0105a86:	89 45 e8             	mov    %eax,-0x18(%ebp)
					uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f0105a89:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a8c:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105a8f:	83 ec 08             	sub    $0x8,%esp
f0105a92:	ff 75 e8             	pushl  -0x18(%ebp)
f0105a95:	50                   	push   %eax
f0105a96:	e8 cc 26 00 00       	call   f0108167 <pt_get_page_permissions>
f0105a9b:	83 c4 10             	add    $0x10,%esp
f0105a9e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->ptr_pageWorkingSet[i].time_stamp;
f0105aa1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105aa4:	8b 48 78             	mov    0x78(%eax),%ecx
f0105aa7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105aaa:	89 d0                	mov    %edx,%eax
f0105aac:	01 c0                	add    %eax,%eax
f0105aae:	01 d0                	add    %edx,%eax
f0105ab0:	c1 e0 03             	shl    $0x3,%eax
f0105ab3:	01 c8                	add    %ecx,%eax
f0105ab5:	8b 40 08             	mov    0x8(%eax),%eax
f0105ab8:	89 45 e0             	mov    %eax,-0x20(%ebp)

					if (perm & PERM_USED)
f0105abb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105abe:	83 e0 20             	and    $0x20,%eax
f0105ac1:	85 c0                	test   %eax,%eax
f0105ac3:	74 3b                	je     f0105b00 <update_WS_time_stamps+0xd4>
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105ac5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105ac8:	8b 48 78             	mov    0x78(%eax),%ecx
f0105acb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105ace:	89 d0                	mov    %edx,%eax
f0105ad0:	01 c0                	add    %eax,%eax
f0105ad2:	01 d0                	add    %edx,%eax
f0105ad4:	c1 e0 03             	shl    $0x3,%eax
f0105ad7:	01 c8                	add    %ecx,%eax
f0105ad9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105adc:	c1 ea 02             	shr    $0x2,%edx
f0105adf:	81 ca 00 00 00 80    	or     $0x80000000,%edx
f0105ae5:	89 50 08             	mov    %edx,0x8(%eax)
						pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f0105ae8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105aeb:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105aee:	6a 20                	push   $0x20
f0105af0:	6a 00                	push   $0x0
f0105af2:	ff 75 e8             	pushl  -0x18(%ebp)
f0105af5:	50                   	push   %eax
f0105af6:	e8 b8 25 00 00       	call   f01080b3 <pt_set_page_permissions>
f0105afb:	83 c4 10             	add    $0x10,%esp
f0105afe:	eb 1d                	jmp    f0105b1d <update_WS_time_stamps+0xf1>
					}
					else
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2);
f0105b00:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b03:	8b 48 78             	mov    0x78(%eax),%ecx
f0105b06:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105b09:	89 d0                	mov    %edx,%eax
f0105b0b:	01 c0                	add    %eax,%eax
f0105b0d:	01 d0                	add    %edx,%eax
f0105b0f:	c1 e0 03             	shl    $0x3,%eax
f0105b12:	01 c8                	add    %ecx,%eax
f0105b14:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105b17:	c1 ea 02             	shr    $0x2,%edx
f0105b1a:	89 50 08             	mov    %edx,0x8(%eax)

	if(curr_env_ptr != NULL)
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0105b1d:	ff 45 f4             	incl   -0xc(%ebp)
f0105b20:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b23:	8b 50 74             	mov    0x74(%eax),%edx
f0105b26:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b29:	39 c2                	cmp    %eax,%edx
f0105b2b:	0f 87 20 ff ff ff    	ja     f0105a51 <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105b31:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105b38:	e9 ca 00 00 00       	jmp    f0105c07 <update_WS_time_stamps+0x1db>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f0105b3d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105b40:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b43:	89 d0                	mov    %edx,%eax
f0105b45:	01 c0                	add    %eax,%eax
f0105b47:	01 d0                	add    %edx,%eax
f0105b49:	c1 e0 03             	shl    $0x3,%eax
f0105b4c:	01 c8                	add    %ecx,%eax
f0105b4e:	83 e8 80             	sub    $0xffffff80,%eax
f0105b51:	8a 00                	mov    (%eax),%al
f0105b53:	3c 01                	cmp    $0x1,%al
f0105b55:	0f 84 a9 00 00 00    	je     f0105c04 <update_WS_time_stamps+0x1d8>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f0105b5b:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105b5e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b61:	89 d0                	mov    %edx,%eax
f0105b63:	01 c0                	add    %eax,%eax
f0105b65:	01 d0                	add    %edx,%eax
f0105b67:	c1 e0 03             	shl    $0x3,%eax
f0105b6a:	01 c8                	add    %ecx,%eax
f0105b6c:	83 c0 7c             	add    $0x7c,%eax
f0105b6f:	8b 00                	mov    (%eax),%eax
f0105b71:	89 45 dc             	mov    %eax,-0x24(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f0105b74:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105b77:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b7a:	89 d0                	mov    %edx,%eax
f0105b7c:	01 c0                	add    %eax,%eax
f0105b7e:	01 d0                	add    %edx,%eax
f0105b80:	c1 e0 03             	shl    $0x3,%eax
f0105b83:	01 c8                	add    %ecx,%eax
f0105b85:	05 84 00 00 00       	add    $0x84,%eax
f0105b8a:	8b 00                	mov    (%eax),%eax
f0105b8c:	89 45 d8             	mov    %eax,-0x28(%ebp)

					if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f0105b8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b92:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105b95:	83 ec 08             	sub    $0x8,%esp
f0105b98:	ff 75 dc             	pushl  -0x24(%ebp)
f0105b9b:	50                   	push   %eax
f0105b9c:	e8 e5 26 00 00       	call   f0108286 <pd_is_table_used>
f0105ba1:	83 c4 10             	add    $0x10,%esp
f0105ba4:	85 c0                	test   %eax,%eax
f0105ba6:	74 3c                	je     f0105be4 <update_WS_time_stamps+0x1b8>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105ba8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105bab:	c1 e8 02             	shr    $0x2,%eax
f0105bae:	0d 00 00 00 80       	or     $0x80000000,%eax
f0105bb3:	89 c1                	mov    %eax,%ecx
f0105bb5:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105bb8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105bbb:	89 d0                	mov    %edx,%eax
f0105bbd:	01 c0                	add    %eax,%eax
f0105bbf:	01 d0                	add    %edx,%eax
f0105bc1:	c1 e0 03             	shl    $0x3,%eax
f0105bc4:	01 d8                	add    %ebx,%eax
f0105bc6:	05 84 00 00 00       	add    $0x84,%eax
f0105bcb:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f0105bcd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105bd0:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105bd3:	83 ec 08             	sub    $0x8,%esp
f0105bd6:	ff 75 dc             	pushl  -0x24(%ebp)
f0105bd9:	50                   	push   %eax
f0105bda:	e8 cb 26 00 00       	call   f01082aa <pd_set_table_unused>
f0105bdf:	83 c4 10             	add    $0x10,%esp
f0105be2:	eb 20                	jmp    f0105c04 <update_WS_time_stamps+0x1d8>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f0105be4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105be7:	c1 e8 02             	shr    $0x2,%eax
f0105bea:	89 c1                	mov    %eax,%ecx
f0105bec:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105bef:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105bf2:	89 d0                	mov    %edx,%eax
f0105bf4:	01 c0                	add    %eax,%eax
f0105bf6:	01 d0                	add    %edx,%eax
f0105bf8:	c1 e0 03             	shl    $0x3,%eax
f0105bfb:	01 d8                	add    %ebx,%eax
f0105bfd:	05 84 00 00 00       	add    $0x84,%eax
f0105c02:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105c04:	ff 45 f0             	incl   -0x10(%ebp)
f0105c07:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f0105c0b:	0f 8e 2c ff ff ff    	jle    f0105b3d <update_WS_time_stamps+0x111>
					}
				}
			}
		}
	}
}
f0105c11:	90                   	nop
f0105c12:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0105c15:	c9                   	leave  
f0105c16:	c3                   	ret    

f0105c17 <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f0105c17:	55                   	push   %ebp
f0105c18:	89 e5                	mov    %esp,%ebp
f0105c1a:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f0105c1d:	c7 05 ec a3 89 f0 01 	movl   $0x1,0xf089a3ec
f0105c24:	00 00 00 
f0105c27:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f0105c2e:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0105c32:	8a 45 b2             	mov    -0x4e(%ebp),%al
f0105c35:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105c38:	ee                   	out    %al,(%dx)
f0105c39:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f0105c40:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f0105c44:	8a 45 b3             	mov    -0x4d(%ebp),%al
f0105c47:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105c4a:	ee                   	out    %al,(%dx)
f0105c4b:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f0105c52:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f0105c56:	8a 45 b4             	mov    -0x4c(%ebp),%al
f0105c59:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105c5c:	ee                   	out    %al,(%dx)
f0105c5d:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f0105c64:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f0105c68:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0105c6b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0105c6e:	ee                   	out    %al,(%dx)
f0105c6f:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f0105c76:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0105c7a:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0105c7d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0105c80:	ee                   	out    %al,(%dx)
f0105c81:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f0105c88:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0105c8c:	8a 45 b7             	mov    -0x49(%ebp),%al
f0105c8f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105c92:	ee                   	out    %al,(%dx)
f0105c93:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0105c9a:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0105c9e:	8a 45 b8             	mov    -0x48(%ebp),%al
f0105ca1:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0105ca4:	ee                   	out    %al,(%dx)
f0105ca5:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0105cac:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0105cb0:	8a 45 b9             	mov    -0x47(%ebp),%al
f0105cb3:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105cb6:	ee                   	out    %al,(%dx)
f0105cb7:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0105cbe:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0105cc2:	8a 45 ba             	mov    -0x46(%ebp),%al
f0105cc5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0105cc8:	ee                   	out    %al,(%dx)
f0105cc9:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0105cd0:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f0105cd4:	8a 45 bb             	mov    -0x45(%ebp),%al
f0105cd7:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0105cda:	ee                   	out    %al,(%dx)
f0105cdb:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0105ce2:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f0105ce6:	8a 45 bc             	mov    -0x44(%ebp),%al
f0105ce9:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0105cec:	ee                   	out    %al,(%dx)
f0105ced:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f0105cf4:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f0105cf8:	8a 45 bd             	mov    -0x43(%ebp),%al
f0105cfb:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0105cfe:	ee                   	out    %al,(%dx)
f0105cff:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f0105d06:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f0105d0a:	8a 45 be             	mov    -0x42(%ebp),%al
f0105d0d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0105d10:	ee                   	out    %al,(%dx)
f0105d11:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f0105d18:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f0105d1c:	8a 45 bf             	mov    -0x41(%ebp),%al
f0105d1f:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0105d22:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f0105d23:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f0105d29:	66 83 f8 ff          	cmp    $0xffff,%ax
f0105d2d:	74 15                	je     f0105d44 <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f0105d2f:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f0105d35:	0f b7 c0             	movzwl %ax,%eax
f0105d38:	83 ec 0c             	sub    $0xc,%esp
f0105d3b:	50                   	push   %eax
f0105d3c:	e8 06 00 00 00       	call   f0105d47 <irq_setmask_8259A>
f0105d41:	83 c4 10             	add    $0x10,%esp
}
f0105d44:	90                   	nop
f0105d45:	c9                   	leave  
f0105d46:	c3                   	ret    

f0105d47 <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f0105d47:	55                   	push   %ebp
f0105d48:	89 e5                	mov    %esp,%ebp
f0105d4a:	83 ec 14             	sub    $0x14,%esp
f0105d4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105d50:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f0105d54:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105d57:	66 a3 b0 38 19 f0    	mov    %ax,0xf01938b0
	if (!didinit)
f0105d5d:	a1 ec a3 89 f0       	mov    0xf089a3ec,%eax
f0105d62:	85 c0                	test   %eax,%eax
f0105d64:	74 34                	je     f0105d9a <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f0105d66:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105d69:	0f b6 c0             	movzbl %al,%eax
f0105d6c:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0105d73:	88 45 f6             	mov    %al,-0xa(%ebp)
f0105d76:	8a 45 f6             	mov    -0xa(%ebp),%al
f0105d79:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0105d7c:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f0105d7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105d80:	66 c1 e8 08          	shr    $0x8,%ax
f0105d84:	0f b6 c0             	movzbl %al,%eax
f0105d87:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0105d8e:	88 45 f7             	mov    %al,-0x9(%ebp)
f0105d91:	8a 45 f7             	mov    -0x9(%ebp),%al
f0105d94:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0105d97:	ee                   	out    %al,(%dx)
f0105d98:	eb 01                	jmp    f0105d9b <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f0105d9a:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f0105d9b:	c9                   	leave  
f0105d9c:	c3                   	ret    

f0105d9d <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f0105d9d:	55                   	push   %ebp
f0105d9e:	89 e5                	mov    %esp,%ebp
f0105da0:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0105da3:	83 ec 08             	sub    $0x8,%esp
f0105da6:	68 00 10 00 00       	push   $0x1000
f0105dab:	68 00 10 00 00       	push   $0x1000
f0105db0:	e8 6a 02 00 00       	call   f010601f <boot_allocate_space>
f0105db5:	83 c4 10             	add    $0x10,%esp
f0105db8:	a3 7c ad 89 f0       	mov    %eax,0xf089ad7c
	memset(ptr_page_directory, 0, PAGE_SIZE);
f0105dbd:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0105dc2:	83 ec 04             	sub    $0x4,%esp
f0105dc5:	68 00 10 00 00       	push   $0x1000
f0105dca:	6a 00                	push   $0x0
f0105dcc:	50                   	push   %eax
f0105dcd:	e8 ff bc 02 00       	call   f0131ad1 <memset>
f0105dd2:	83 c4 10             	add    $0x10,%esp
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0105dd5:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0105dda:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0105ddd:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f0105de4:	77 14                	ja     f0105dfa <initialize_kernel_VM+0x5d>
f0105de6:	ff 75 e8             	pushl  -0x18(%ebp)
f0105de9:	68 34 65 13 f0       	push   $0xf0136534
f0105dee:	6a 45                	push   $0x45
f0105df0:	68 68 65 13 f0       	push   $0xf0136568
f0105df5:	e8 0b a4 ff ff       	call   f0100205 <_panic>
f0105dfa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105dfd:	05 00 00 00 10       	add    $0x10000000,%eax
f0105e02:	a3 ac ad 89 f0       	mov    %eax,0xf089adac
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f0105e07:	c7 45 e4 00 b0 18 f0 	movl   $0xf018b000,-0x1c(%ebp)
f0105e0e:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f0105e15:	77 14                	ja     f0105e2b <initialize_kernel_VM+0x8e>
f0105e17:	ff 75 e4             	pushl  -0x1c(%ebp)
f0105e1a:	68 34 65 13 f0       	push   $0xf0136534
f0105e1f:	6a 4d                	push   $0x4d
f0105e21:	68 68 65 13 f0       	push   $0xf0136568
f0105e26:	e8 da a3 ff ff       	call   f0100205 <_panic>
f0105e2b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105e2e:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105e34:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0105e39:	83 ec 0c             	sub    $0xc,%esp
f0105e3c:	6a 02                	push   $0x2
f0105e3e:	52                   	push   %edx
f0105e3f:	68 00 80 00 00       	push   $0x8000
f0105e44:	68 00 80 bf ef       	push   $0xefbf8000
f0105e49:	50                   	push   %eax
f0105e4a:	e8 31 02 00 00       	call   f0106080 <boot_map_range>
f0105e4f:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f0105e52:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f0105e59:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f0105e60:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105e67:	eb 25                	jmp    f0105e8e <initialize_kernel_VM+0xf1>
	{
		++nTables;
f0105e69:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f0105e6c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105e6f:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0105e74:	83 ec 04             	sub    $0x4,%esp
f0105e77:	6a 01                	push   $0x1
f0105e79:	52                   	push   %edx
f0105e7a:	50                   	push   %eax
f0105e7b:	e8 74 02 00 00       	call   f01060f4 <boot_get_page_table>
f0105e80:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105e83:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f0105e8a:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f0105e8e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e92:	72 d5                	jb     f0105e69 <initialize_kernel_VM+0xcc>
f0105e94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e98:	77 06                	ja     f0105ea0 <initialize_kernel_VM+0x103>
f0105e9a:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f0105e9e:	76 c9                	jbe    f0105e69 <initialize_kernel_VM+0xcc>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f0105ea0:	8b 15 10 ad 89 f0    	mov    0xf089ad10,%edx
f0105ea6:	89 d0                	mov    %edx,%eax
f0105ea8:	01 c0                	add    %eax,%eax
f0105eaa:	01 d0                	add    %edx,%eax
f0105eac:	c1 e0 03             	shl    $0x3,%eax
f0105eaf:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f0105eb2:	83 ec 08             	sub    $0x8,%esp
f0105eb5:	68 00 10 00 00       	push   $0x1000
f0105eba:	ff 75 e0             	pushl  -0x20(%ebp)
f0105ebd:	e8 5d 01 00 00       	call   f010601f <boot_allocate_space>
f0105ec2:	83 c4 10             	add    $0x10,%esp
f0105ec5:	a3 54 ad 89 f0       	mov    %eax,0xf089ad54
	memset(frames_info, 0, array_size);
f0105eca:	a1 54 ad 89 f0       	mov    0xf089ad54,%eax
f0105ecf:	83 ec 04             	sub    $0x4,%esp
f0105ed2:	ff 75 e0             	pushl  -0x20(%ebp)
f0105ed5:	6a 00                	push   $0x0
f0105ed7:	50                   	push   %eax
f0105ed8:	e8 f4 bb 02 00       	call   f0131ad1 <memset>
f0105edd:	83 c4 10             	add    $0x10,%esp
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f0105ee0:	c7 45 dc 00 c0 30 00 	movl   $0x30c000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0105ee7:	83 ec 08             	sub    $0x8,%esp
f0105eea:	68 00 10 00 00       	push   $0x1000
f0105eef:	ff 75 dc             	pushl  -0x24(%ebp)
f0105ef2:	e8 28 01 00 00       	call   f010601f <boot_allocate_space>
f0105ef7:	83 c4 10             	add    $0x10,%esp
f0105efa:	a3 dc ac 89 f0       	mov    %eax,0xf089acdc
	memset(disk_frames_info , 0, disk_array_size);
f0105eff:	a1 dc ac 89 f0       	mov    0xf089acdc,%eax
f0105f04:	83 ec 04             	sub    $0x4,%esp
f0105f07:	ff 75 dc             	pushl  -0x24(%ebp)
f0105f0a:	6a 00                	push   $0x0
f0105f0c:	50                   	push   %eax
f0105f0d:	e8 bf bb 02 00       	call   f0131ad1 <memset>
f0105f12:	83 c4 10             	add    $0x10,%esp

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f0105f15:	e8 d5 04 00 00       	call   f01063ef <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f0105f1a:	83 ec 0c             	sub    $0xc,%esp
f0105f1d:	68 b1 02 00 00       	push   $0x2b1
f0105f22:	e8 2e a7 02 00       	call   f0130655 <nearest_pow2_ceil>
f0105f27:	83 c4 10             	add    $0x10,%esp
f0105f2a:	83 ec 04             	sub    $0x4,%esp
f0105f2d:	50                   	push   %eax
f0105f2e:	68 b1 02 00 00       	push   $0x2b1
f0105f33:	68 88 65 13 f0       	push   $0xf0136588
f0105f38:	e8 d1 ad ff ff       	call   f0100d0e <cprintf>
f0105f3d:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f0105f40:	c7 45 d8 f0 fa 0f 00 	movl   $0xffaf0,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f0105f47:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105f4a:	83 ec 08             	sub    $0x8,%esp
f0105f4d:	68 00 10 00 00       	push   $0x1000
f0105f52:	50                   	push   %eax
f0105f53:	e8 c7 00 00 00       	call   f010601f <boot_allocate_space>
f0105f58:	83 c4 10             	add    $0x10,%esp
f0105f5b:	a3 f0 a3 89 f0       	mov    %eax,0xf089a3f0
	memset(envs , 0, envs_size);
f0105f60:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105f63:	a1 f0 a3 89 f0       	mov    0xf089a3f0,%eax
f0105f68:	83 ec 04             	sub    $0x4,%esp
f0105f6b:	52                   	push   %edx
f0105f6c:	6a 00                	push   $0x0
f0105f6e:	50                   	push   %eax
f0105f6f:	e8 5d bb 02 00       	call   f0131ad1 <memset>
f0105f74:	83 c4 10             	add    $0x10,%esp

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f0105f77:	a1 f0 a3 89 f0       	mov    0xf089a3f0,%eax
f0105f7c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0105f7f:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f0105f86:	77 17                	ja     f0105f9f <initialize_kernel_VM+0x202>
f0105f88:	ff 75 d4             	pushl  -0x2c(%ebp)
f0105f8b:	68 34 65 13 f0       	push   $0xf0136534
f0105f90:	68 96 00 00 00       	push   $0x96
f0105f95:	68 68 65 13 f0       	push   $0xf0136568
f0105f9a:	e8 66 a2 ff ff       	call   f0100205 <_panic>
f0105f9f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0105fa2:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f0105fa8:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105fab:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0105fb0:	83 ec 0c             	sub    $0xc,%esp
f0105fb3:	6a 04                	push   $0x4
f0105fb5:	51                   	push   %ecx
f0105fb6:	52                   	push   %edx
f0105fb7:	68 00 00 c0 ee       	push   $0xeec00000
f0105fbc:	50                   	push   %eax
f0105fbd:	e8 be 00 00 00       	call   f0106080 <boot_map_range>
f0105fc2:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0105fc5:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0105fca:	05 ec 0e 00 00       	add    $0xeec,%eax
f0105fcf:	8b 15 7c ad 89 f0    	mov    0xf089ad7c,%edx
f0105fd5:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f0105fdb:	8b 12                	mov    (%edx),%edx
f0105fdd:	83 ca 05             	or     $0x5,%edx
f0105fe0:	89 10                	mov    %edx,(%eax)
#if USE_KHEAP
	{
		// MAKE SURE THAT THIS MAPPING HAPPENS AFTER ALL BOOT ALLOCATIONS (boot_allocate_space)
		// calls are fininshed, and no remaining data to be allocated for the kernel
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f0105fe2:	a1 78 ad 89 f0       	mov    0xf089ad78,%eax
f0105fe7:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105fed:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0105ff2:	83 ec 0c             	sub    $0xc,%esp
f0105ff5:	6a 02                	push   $0x2
f0105ff7:	6a 00                	push   $0x0
f0105ff9:	52                   	push   %edx
f0105ffa:	68 00 00 00 f0       	push   $0xf0000000
f0105fff:	50                   	push   %eax
f0106000:	e8 7b 00 00 00       	call   f0106080 <boot_map_range>
f0106005:	83 c4 20             	add    $0x20,%esp
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f0106008:	e8 2f ae 02 00       	call   f0130e3c <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f010600d:	c7 05 f0 ac 89 f0 19 	movl   $0x19,0xf089acf0
f0106014:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f0106017:	e8 d3 02 00 00       	call   f01062ef <turn_on_paging>
}
f010601c:	90                   	nop
f010601d:	c9                   	leave  
f010601e:	c3                   	ret    

f010601f <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f010601f:	55                   	push   %ebp
f0106020:	89 e5                	mov    %esp,%ebp
f0106022:	83 ec 10             	sub    $0x10,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f0106025:	a1 78 ad 89 f0       	mov    0xf089ad78,%eax
f010602a:	85 c0                	test   %eax,%eax
f010602c:	75 0a                	jne    f0106038 <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f010602e:	c7 05 78 ad 89 f0 bc 	movl   $0xf089aebc,0xf089ad78
f0106035:	ae 89 f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f0106038:	8b 45 0c             	mov    0xc(%ebp),%eax
f010603b:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010603e:	a1 78 ad 89 f0       	mov    0xf089ad78,%eax
f0106043:	89 c2                	mov    %eax,%edx
f0106045:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106048:	01 d0                	add    %edx,%eax
f010604a:	48                   	dec    %eax
f010604b:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010604e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0106051:	ba 00 00 00 00       	mov    $0x0,%edx
f0106056:	f7 75 fc             	divl   -0x4(%ebp)
f0106059:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010605c:	29 d0                	sub    %edx,%eax
f010605e:	a3 78 ad 89 f0       	mov    %eax,0xf089ad78

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f0106063:	a1 78 ad 89 f0       	mov    0xf089ad78,%eax
f0106068:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f010606b:	8b 15 78 ad 89 f0    	mov    0xf089ad78,%edx
f0106071:	8b 45 08             	mov    0x8(%ebp),%eax
f0106074:	01 d0                	add    %edx,%eax
f0106076:	a3 78 ad 89 f0       	mov    %eax,0xf089ad78

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	//memset(ptr_allocated_mem, 0, size);

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f010607b:	8b 45 f4             	mov    -0xc(%ebp),%eax

}
f010607e:	c9                   	leave  
f010607f:	c3                   	ret    

f0106080 <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f0106080:	55                   	push   %ebp
f0106081:	89 e5                	mov    %esp,%ebp
f0106083:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f0106086:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f010608d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106094:	eb 53                	jmp    f01060e9 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f0106096:	83 ec 04             	sub    $0x4,%esp
f0106099:	6a 01                	push   $0x1
f010609b:	ff 75 0c             	pushl  0xc(%ebp)
f010609e:	ff 75 08             	pushl  0x8(%ebp)
f01060a1:	e8 4e 00 00 00       	call   f01060f4 <boot_get_page_table>
f01060a6:	83 c4 10             	add    $0x10,%esp
f01060a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f01060ac:	8b 45 0c             	mov    0xc(%ebp),%eax
f01060af:	c1 e8 0c             	shr    $0xc,%eax
f01060b2:	25 ff 03 00 00       	and    $0x3ff,%eax
f01060b7:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f01060ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01060bd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01060c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01060c7:	01 c2                	add    %eax,%edx
f01060c9:	8b 45 18             	mov    0x18(%ebp),%eax
f01060cc:	0b 45 14             	or     0x14(%ebp),%eax
f01060cf:	83 c8 01             	or     $0x1,%eax
f01060d2:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f01060d4:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f01060db:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f01060e2:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01060e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060ec:	3b 45 10             	cmp    0x10(%ebp),%eax
f01060ef:	72 a5                	jb     f0106096 <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f01060f1:	90                   	nop
f01060f2:	c9                   	leave  
f01060f3:	c3                   	ret    

f01060f4 <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f01060f4:	55                   	push   %ebp
f01060f5:	89 e5                	mov    %esp,%ebp
f01060f7:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f01060fa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01060fd:	c1 e8 16             	shr    $0x16,%eax
f0106100:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f0106103:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106106:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010610d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106110:	01 d0                	add    %edx,%eax
f0106112:	8b 00                	mov    (%eax),%eax
f0106114:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f0106117:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010611a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010611f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f0106122:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106125:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106128:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010612b:	c1 e8 0c             	shr    $0xc,%eax
f010612e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106131:	a1 10 ad 89 f0       	mov    0xf089ad10,%eax
f0106136:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106139:	72 17                	jb     f0106152 <boot_get_page_table+0x5e>
f010613b:	ff 75 e8             	pushl  -0x18(%ebp)
f010613e:	68 b0 65 13 f0       	push   $0xf01365b0
f0106143:	68 15 01 00 00       	push   $0x115
f0106148:	68 68 65 13 f0       	push   $0xf0136568
f010614d:	e8 b3 a0 ff ff       	call   f0100205 <_panic>
f0106152:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106155:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010615a:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f010615d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106161:	75 72                	jne    f01061d5 <boot_get_page_table+0xe1>
	{
		if (create)
f0106163:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0106167:	74 65                	je     f01061ce <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f0106169:	83 ec 08             	sub    $0x8,%esp
f010616c:	68 00 10 00 00       	push   $0x1000
f0106171:	68 00 10 00 00       	push   $0x1000
f0106176:	e8 a4 fe ff ff       	call   f010601f <boot_allocate_space>
f010617b:	83 c4 10             	add    $0x10,%esp
f010617e:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f0106181:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106184:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106187:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f010618e:	77 17                	ja     f01061a7 <boot_get_page_table+0xb3>
f0106190:	ff 75 dc             	pushl  -0x24(%ebp)
f0106193:	68 34 65 13 f0       	push   $0xf0136534
f0106198:	68 1b 01 00 00       	push   $0x11b
f010619d:	68 68 65 13 f0       	push   $0xf0136568
f01061a2:	e8 5e a0 ff ff       	call   f0100205 <_panic>
f01061a7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01061aa:	05 00 00 00 10       	add    $0x10000000,%eax
f01061af:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f01061b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01061b5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01061bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01061bf:	01 d0                	add    %edx,%eax
f01061c1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01061c4:	83 ca 03             	or     $0x3,%edx
f01061c7:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f01061c9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01061cc:	eb 0a                	jmp    f01061d8 <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f01061ce:	b8 00 00 00 00       	mov    $0x0,%eax
f01061d3:	eb 03                	jmp    f01061d8 <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f01061d5:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f01061d8:	c9                   	leave  
f01061d9:	c3                   	ret    

f01061da <nvram_read>:


int nvram_read(int r)
{
f01061da:	55                   	push   %ebp
f01061db:	89 e5                	mov    %esp,%ebp
f01061dd:	53                   	push   %ebx
f01061de:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f01061e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01061e4:	83 ec 0c             	sub    $0xc,%esp
f01061e7:	50                   	push   %eax
f01061e8:	e8 9b de ff ff       	call   f0104088 <mc146818_read>
f01061ed:	83 c4 10             	add    $0x10,%esp
f01061f0:	89 c3                	mov    %eax,%ebx
f01061f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01061f5:	40                   	inc    %eax
f01061f6:	83 ec 0c             	sub    $0xc,%esp
f01061f9:	50                   	push   %eax
f01061fa:	e8 89 de ff ff       	call   f0104088 <mc146818_read>
f01061ff:	83 c4 10             	add    $0x10,%esp
f0106202:	c1 e0 08             	shl    $0x8,%eax
f0106205:	09 d8                	or     %ebx,%eax
}
f0106207:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010620a:	c9                   	leave  
f010620b:	c3                   	ret    

f010620c <detect_memory>:

void detect_memory()
{
f010620c:	55                   	push   %ebp
f010620d:	89 e5                	mov    %esp,%ebp
f010620f:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f0106212:	83 ec 0c             	sub    $0xc,%esp
f0106215:	6a 15                	push   $0x15
f0106217:	e8 be ff ff ff       	call   f01061da <nvram_read>
f010621c:	83 c4 10             	add    $0x10,%esp
f010621f:	c1 e0 0a             	shl    $0xa,%eax
f0106222:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106225:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106228:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010622d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f0106230:	83 ec 0c             	sub    $0xc,%esp
f0106233:	6a 17                	push   $0x17
f0106235:	e8 a0 ff ff ff       	call   f01061da <nvram_read>
f010623a:	83 c4 10             	add    $0x10,%esp
f010623d:	c1 e0 0a             	shl    $0xa,%eax
f0106240:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106243:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106246:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010624b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f010624e:	83 ec 0c             	sub    $0xc,%esp
f0106251:	6a 34                	push   $0x34
f0106253:	e8 82 ff ff ff       	call   f01061da <nvram_read>
f0106258:	83 c4 10             	add    $0x10,%esp
f010625b:	c1 e0 10             	shl    $0x10,%eax
f010625e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0106261:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106264:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106269:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f010626c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0106270:	74 18                	je     f010628a <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f0106272:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106275:	05 00 00 00 01       	add    $0x1000000,%eax
f010627a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f010627d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106280:	2d 00 00 10 00       	sub    $0x100000,%eax
f0106285:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106288:	eb 19                	jmp    f01062a3 <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f010628a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010628e:	74 0d                	je     f010629d <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f0106290:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106293:	05 00 00 10 00       	add    $0x100000,%eax
f0106298:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010629b:	eb 06                	jmp    f01062a3 <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f010629d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f01062a3:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
		while(1);
	}
	number_of_frames = maxpa / PAGE_SIZE;
f01062aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062ad:	c1 e8 0c             	shr    $0xc,%eax
f01062b0:	a3 10 ad 89 f0       	mov    %eax,0xf089ad10

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f01062b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062b8:	c1 e8 0a             	shr    $0xa,%eax
f01062bb:	83 ec 08             	sub    $0x8,%esp
f01062be:	50                   	push   %eax
f01062bf:	68 e0 65 13 f0       	push   $0xf01365e0
f01062c4:	e8 45 aa ff ff       	call   f0100d0e <cprintf>
f01062c9:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f01062cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062cf:	c1 e8 0a             	shr    $0xa,%eax
f01062d2:	89 c2                	mov    %eax,%edx
f01062d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01062d7:	c1 e8 0a             	shr    $0xa,%eax
f01062da:	83 ec 04             	sub    $0x4,%esp
f01062dd:	52                   	push   %edx
f01062de:	50                   	push   %eax
f01062df:	68 01 66 13 f0       	push   $0xf0136601
f01062e4:	e8 25 aa ff ff       	call   f0100d0e <cprintf>
f01062e9:	83 c4 10             	add    $0x10,%esp
}
f01062ec:	90                   	nop
f01062ed:	c9                   	leave  
f01062ee:	c3                   	ret    

f01062ef <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f01062ef:	55                   	push   %ebp
f01062f0:	89 e5                	mov    %esp,%ebp
f01062f2:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f01062f5:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f01062fc:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106303:	eb 24                	jmp    f0106329 <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f0106305:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f010630a:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010630d:	c1 e2 02             	shl    $0x2,%edx
f0106310:	01 c2                	add    %eax,%edx
f0106312:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0106317:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f010631a:	c1 e1 02             	shl    $0x2,%ecx
f010631d:	01 c8                	add    %ecx,%eax
f010631f:	8b 00                	mov    (%eax),%eax
f0106321:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106323:	ff 45 fc             	incl   -0x4(%ebp)
f0106326:	ff 45 f8             	incl   -0x8(%ebp)
f0106329:	a1 78 ad 89 f0       	mov    0xf089ad78,%eax
f010632e:	c1 e8 16             	shr    $0x16,%eax
f0106331:	89 c2                	mov    %eax,%edx
f0106333:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106336:	39 c2                	cmp    %eax,%edx
f0106338:	77 cb                	ja     f0106305 <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f010633a:	a1 ac ad 89 f0       	mov    0xf089adac,%eax
f010633f:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0106342:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106345:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0106348:	0f 20 c0             	mov    %cr0,%eax
f010634b:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f010634e:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f0106351:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f0106354:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f010635b:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f010635f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106362:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f0106365:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106368:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f010636b:	0f 01 15 f0 38 19 f0 	lgdtl  0xf01938f0
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f0106372:	b8 23 00 00 00       	mov    $0x23,%eax
f0106377:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0106379:	b8 23 00 00 00       	mov    $0x23,%eax
f010637e:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f0106380:	b8 10 00 00 00       	mov    $0x10,%eax
f0106385:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f0106387:	b8 10 00 00 00       	mov    $0x10,%eax
f010638c:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f010638e:	b8 10 00 00 00       	mov    $0x10,%eax
f0106393:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f0106395:	ea 9c 63 10 f0 08 00 	ljmp   $0x8,$0xf010639c
	asm volatile("lldt %%ax" :: "a" (0));
f010639c:	b8 00 00 00 00       	mov    $0x0,%eax
f01063a1:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f01063a4:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f01063ab:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01063b2:	eb 19                	jmp    f01063cd <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f01063b4:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f01063b9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01063bc:	c1 e2 02             	shl    $0x2,%edx
f01063bf:	01 d0                	add    %edx,%eax
f01063c1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01063c7:	ff 45 f4             	incl   -0xc(%ebp)
f01063ca:	ff 45 f0             	incl   -0x10(%ebp)
f01063cd:	a1 78 ad 89 f0       	mov    0xf089ad78,%eax
f01063d2:	c1 e8 16             	shr    $0x16,%eax
f01063d5:	89 c2                	mov    %eax,%edx
f01063d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01063da:	39 c2                	cmp    %eax,%edx
f01063dc:	77 d6                	ja     f01063b4 <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f01063de:	a1 ac ad 89 f0       	mov    0xf089adac,%eax
f01063e3:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01063e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01063e9:	0f 22 d8             	mov    %eax,%cr3
}
f01063ec:	90                   	nop
f01063ed:	c9                   	leave  
f01063ee:	c3                   	ret    

f01063ef <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f01063ef:	55                   	push   %ebp
f01063f0:	89 e5                	mov    %esp,%ebp
f01063f2:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f01063f5:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f01063fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01063fd:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f0106404:	77 17                	ja     f010641d <setup_listing_to_all_page_tables_entries+0x2e>
f0106406:	ff 75 f4             	pushl  -0xc(%ebp)
f0106409:	68 34 65 13 f0       	push   $0xf0136534
f010640e:	68 ab 01 00 00       	push   $0x1ab
f0106413:	68 68 65 13 f0       	push   $0xf0136568
f0106418:	e8 e8 9d ff ff       	call   f0100205 <_panic>
f010641d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106420:	05 00 00 00 10       	add    $0x10000000,%eax
f0106425:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f0106428:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f010642d:	05 fc 0e 00 00       	add    $0xefc,%eax
f0106432:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106435:	83 ca 03             	or     $0x3,%edx
f0106438:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f010643a:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f010643f:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f0106445:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f010644a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010644d:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f0106454:	77 17                	ja     f010646d <setup_listing_to_all_page_tables_entries+0x7e>
f0106456:	ff 75 ec             	pushl  -0x14(%ebp)
f0106459:	68 34 65 13 f0       	push   $0xf0136534
f010645e:	68 b0 01 00 00       	push   $0x1b0
f0106463:	68 68 65 13 f0       	push   $0xf0136568
f0106468:	e8 98 9d ff ff       	call   f0100205 <_panic>
f010646d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106470:	05 00 00 00 10       	add    $0x10000000,%eax
f0106475:	83 c8 05             	or     $0x5,%eax
f0106478:	89 02                	mov    %eax,(%edx)

}
f010647a:	90                   	nop
f010647b:	c9                   	leave  
f010647c:	c3                   	ret    

f010647d <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010647d:	55                   	push   %ebp
f010647e:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0106480:	8b 45 08             	mov    0x8(%ebp),%eax
f0106483:	8b 15 54 ad 89 f0    	mov    0xf089ad54,%edx
f0106489:	29 d0                	sub    %edx,%eax
f010648b:	c1 f8 03             	sar    $0x3,%eax
f010648e:	89 c2                	mov    %eax,%edx
f0106490:	89 d0                	mov    %edx,%eax
f0106492:	c1 e0 02             	shl    $0x2,%eax
f0106495:	01 d0                	add    %edx,%eax
f0106497:	c1 e0 02             	shl    $0x2,%eax
f010649a:	01 d0                	add    %edx,%eax
f010649c:	c1 e0 02             	shl    $0x2,%eax
f010649f:	01 d0                	add    %edx,%eax
f01064a1:	89 c1                	mov    %eax,%ecx
f01064a3:	c1 e1 08             	shl    $0x8,%ecx
f01064a6:	01 c8                	add    %ecx,%eax
f01064a8:	89 c1                	mov    %eax,%ecx
f01064aa:	c1 e1 10             	shl    $0x10,%ecx
f01064ad:	01 c8                	add    %ecx,%eax
f01064af:	01 c0                	add    %eax,%eax
f01064b1:	01 d0                	add    %edx,%eax
}
f01064b3:	5d                   	pop    %ebp
f01064b4:	c3                   	ret    

f01064b5 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01064b5:	55                   	push   %ebp
f01064b6:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01064b8:	ff 75 08             	pushl  0x8(%ebp)
f01064bb:	e8 bd ff ff ff       	call   f010647d <to_frame_number>
f01064c0:	83 c4 04             	add    $0x4,%esp
f01064c3:	c1 e0 0c             	shl    $0xc,%eax
}
f01064c6:	c9                   	leave  
f01064c7:	c3                   	ret    

f01064c8 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f01064c8:	55                   	push   %ebp
f01064c9:	89 e5                	mov    %esp,%ebp
f01064cb:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f01064ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01064d1:	c1 e8 0c             	shr    $0xc,%eax
f01064d4:	89 c2                	mov    %eax,%edx
f01064d6:	a1 10 ad 89 f0       	mov    0xf089ad10,%eax
f01064db:	39 c2                	cmp    %eax,%edx
f01064dd:	72 14                	jb     f01064f3 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f01064df:	83 ec 04             	sub    $0x4,%esp
f01064e2:	68 20 66 13 f0       	push   $0xf0136620
f01064e7:	6a 55                	push   $0x55
f01064e9:	68 45 66 13 f0       	push   $0xf0136645
f01064ee:	e8 12 9d ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f01064f3:	8b 15 54 ad 89 f0    	mov    0xf089ad54,%edx
f01064f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01064fc:	c1 e8 0c             	shr    $0xc,%eax
f01064ff:	89 c1                	mov    %eax,%ecx
f0106501:	89 c8                	mov    %ecx,%eax
f0106503:	01 c0                	add    %eax,%eax
f0106505:	01 c8                	add    %ecx,%eax
f0106507:	c1 e0 03             	shl    $0x3,%eax
f010650a:	01 d0                	add    %edx,%eax
}
f010650c:	c9                   	leave  
f010650d:	c3                   	ret    

f010650e <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f010650e:	55                   	push   %ebp
f010650f:	89 e5                	mov    %esp,%ebp
f0106511:	83 ec 10             	sub    $0x10,%esp
f0106514:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106517:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f010651a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010651d:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f0106520:	90                   	nop
f0106521:	c9                   	leave  
f0106522:	c3                   	ret    

f0106523 <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f0106523:	55                   	push   %ebp
f0106524:	89 e5                	mov    %esp,%ebp
f0106526:	53                   	push   %ebx
f0106527:	83 ec 24             	sub    $0x24,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f010652a:	c7 05 18 ad 89 f0 00 	movl   $0x0,0xf089ad18
f0106531:	00 00 00 
f0106534:	c7 05 1c ad 89 f0 00 	movl   $0x0,0xf089ad1c
f010653b:	00 00 00 
f010653e:	c7 05 24 ad 89 f0 00 	movl   $0x0,0xf089ad24
f0106545:	00 00 00 
	LIST_INIT(&modified_frame_list);
f0106548:	c7 05 b8 ac 89 f0 00 	movl   $0x0,0xf089acb8
f010654f:	00 00 00 
f0106552:	c7 05 bc ac 89 f0 00 	movl   $0x0,0xf089acbc
f0106559:	00 00 00 
f010655c:	c7 05 c4 ac 89 f0 00 	movl   $0x0,0xf089acc4
f0106563:	00 00 00 

	frames_info[0].references = 1;
f0106566:	a1 54 ad 89 f0       	mov    0xf089ad54,%eax
f010656b:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f0106571:	a1 54 ad 89 f0       	mov    0xf089ad54,%eax
f0106576:	83 c0 18             	add    $0x18,%eax
f0106579:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f010657f:	a1 54 ad 89 f0       	mov    0xf089ad54,%eax
f0106584:	83 c0 30             	add    $0x30,%eax
f0106587:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f010658d:	c7 05 60 ad 89 f0 00 	movl   $0xf0001000,0xf089ad60
f0106594:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f0106597:	c7 05 84 ad 89 f0 00 	movl   $0xf0002000,0xf089ad84
f010659e:	20 00 f0 
	i =0;
f01065a1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f01065a8:	eb 1f                	jmp    f01065c9 <initialize_paging+0xa6>
	{
		ptr_zero_page[i]=0;
f01065aa:	8b 15 60 ad 89 f0    	mov    0xf089ad60,%edx
f01065b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065b3:	01 d0                	add    %edx,%eax
f01065b5:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f01065b8:	8b 15 84 ad 89 f0    	mov    0xf089ad84,%edx
f01065be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065c1:	01 d0                	add    %edx,%eax
f01065c3:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f01065c6:	ff 45 f4             	incl   -0xc(%ebp)
f01065c9:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f01065d0:	7e d8                	jle    f01065aa <initialize_paging+0x87>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f01065d2:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f01065d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01065dc:	05 ff ff 09 00       	add    $0x9ffff,%eax
f01065e1:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01065e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01065e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01065ec:	f7 75 f0             	divl   -0x10(%ebp)
f01065ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01065f2:	29 d0                	sub    %edx,%eax
f01065f4:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01065f7:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f01065fe:	e9 e8 00 00 00       	jmp    f01066eb <initialize_paging+0x1c8>
	{

		initialize_frame_info(&(frames_info[i]));
f0106603:	8b 0d 54 ad 89 f0    	mov    0xf089ad54,%ecx
f0106609:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010660c:	89 d0                	mov    %edx,%eax
f010660e:	01 c0                	add    %eax,%eax
f0106610:	01 d0                	add    %edx,%eax
f0106612:	c1 e0 03             	shl    $0x3,%eax
f0106615:	01 c8                	add    %ecx,%eax
f0106617:	83 ec 0c             	sub    $0xc,%esp
f010661a:	50                   	push   %eax
f010661b:	e8 b7 02 00 00       	call   f01068d7 <initialize_frame_info>
f0106620:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f0106623:	8b 0d 54 ad 89 f0    	mov    0xf089ad54,%ecx
f0106629:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010662c:	89 d0                	mov    %edx,%eax
f010662e:	01 c0                	add    %eax,%eax
f0106630:	01 d0                	add    %edx,%eax
f0106632:	c1 e0 03             	shl    $0x3,%eax
f0106635:	01 c8                	add    %ecx,%eax
f0106637:	85 c0                	test   %eax,%eax
f0106639:	75 14                	jne    f010664f <initialize_paging+0x12c>
f010663b:	83 ec 04             	sub    $0x4,%esp
f010663e:	68 60 66 13 f0       	push   $0xf0136660
f0106643:	6a 5c                	push   $0x5c
f0106645:	68 83 66 13 f0       	push   $0xf0136683
f010664a:	e8 b6 9b ff ff       	call   f0100205 <_panic>
f010664f:	8b 0d 54 ad 89 f0    	mov    0xf089ad54,%ecx
f0106655:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106658:	89 d0                	mov    %edx,%eax
f010665a:	01 c0                	add    %eax,%eax
f010665c:	01 d0                	add    %edx,%eax
f010665e:	c1 e0 03             	shl    $0x3,%eax
f0106661:	01 c8                	add    %ecx,%eax
f0106663:	8b 15 18 ad 89 f0    	mov    0xf089ad18,%edx
f0106669:	89 10                	mov    %edx,(%eax)
f010666b:	8b 00                	mov    (%eax),%eax
f010666d:	85 c0                	test   %eax,%eax
f010666f:	74 1f                	je     f0106690 <initialize_paging+0x16d>
f0106671:	8b 15 18 ad 89 f0    	mov    0xf089ad18,%edx
f0106677:	8b 1d 54 ad 89 f0    	mov    0xf089ad54,%ebx
f010667d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0106680:	89 c8                	mov    %ecx,%eax
f0106682:	01 c0                	add    %eax,%eax
f0106684:	01 c8                	add    %ecx,%eax
f0106686:	c1 e0 03             	shl    $0x3,%eax
f0106689:	01 d8                	add    %ebx,%eax
f010668b:	89 42 04             	mov    %eax,0x4(%edx)
f010668e:	eb 19                	jmp    f01066a9 <initialize_paging+0x186>
f0106690:	8b 0d 54 ad 89 f0    	mov    0xf089ad54,%ecx
f0106696:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106699:	89 d0                	mov    %edx,%eax
f010669b:	01 c0                	add    %eax,%eax
f010669d:	01 d0                	add    %edx,%eax
f010669f:	c1 e0 03             	shl    $0x3,%eax
f01066a2:	01 c8                	add    %ecx,%eax
f01066a4:	a3 1c ad 89 f0       	mov    %eax,0xf089ad1c
f01066a9:	8b 0d 54 ad 89 f0    	mov    0xf089ad54,%ecx
f01066af:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066b2:	89 d0                	mov    %edx,%eax
f01066b4:	01 c0                	add    %eax,%eax
f01066b6:	01 d0                	add    %edx,%eax
f01066b8:	c1 e0 03             	shl    $0x3,%eax
f01066bb:	01 c8                	add    %ecx,%eax
f01066bd:	a3 18 ad 89 f0       	mov    %eax,0xf089ad18
f01066c2:	8b 0d 54 ad 89 f0    	mov    0xf089ad54,%ecx
f01066c8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066cb:	89 d0                	mov    %edx,%eax
f01066cd:	01 c0                	add    %eax,%eax
f01066cf:	01 d0                	add    %edx,%eax
f01066d1:	c1 e0 03             	shl    $0x3,%eax
f01066d4:	01 c8                	add    %ecx,%eax
f01066d6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01066dd:	a1 24 ad 89 f0       	mov    0xf089ad24,%eax
f01066e2:	40                   	inc    %eax
f01066e3:	a3 24 ad 89 f0       	mov    %eax,0xf089ad24
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01066e8:	ff 45 f4             	incl   -0xc(%ebp)
f01066eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01066ee:	85 c0                	test   %eax,%eax
f01066f0:	79 05                	jns    f01066f7 <initialize_paging+0x1d4>
f01066f2:	05 ff 0f 00 00       	add    $0xfff,%eax
f01066f7:	c1 f8 0c             	sar    $0xc,%eax
f01066fa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01066fd:	0f 8f 00 ff ff ff    	jg     f0106603 <initialize_paging+0xe0>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0106703:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f010670a:	eb 1d                	jmp    f0106729 <initialize_paging+0x206>
	{
		frames_info[i].references = 1;
f010670c:	8b 0d 54 ad 89 f0    	mov    0xf089ad54,%ecx
f0106712:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106715:	89 d0                	mov    %edx,%eax
f0106717:	01 c0                	add    %eax,%eax
f0106719:	01 d0                	add    %edx,%eax
f010671b:	c1 e0 03             	shl    $0x3,%eax
f010671e:	01 c8                	add    %ecx,%eax
f0106720:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0106726:	ff 45 f4             	incl   -0xc(%ebp)
f0106729:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0106730:	7e da                	jle    f010670c <initialize_paging+0x1e9>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f0106732:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0106739:	a1 78 ad 89 f0       	mov    0xf089ad78,%eax
f010673e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0106741:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0106748:	77 14                	ja     f010675e <initialize_paging+0x23b>
f010674a:	ff 75 e0             	pushl  -0x20(%ebp)
f010674d:	68 a0 66 13 f0       	push   $0xf01366a0
f0106752:	6a 64                	push   $0x64
f0106754:	68 83 66 13 f0       	push   $0xf0136683
f0106759:	e8 a7 9a ff ff       	call   f0100205 <_panic>
f010675e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106761:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0106767:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010676a:	01 d0                	add    %edx,%eax
f010676c:	48                   	dec    %eax
f010676d:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106770:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106773:	ba 00 00 00 00       	mov    $0x0,%edx
f0106778:	f7 75 e4             	divl   -0x1c(%ebp)
f010677b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010677e:	29 d0                	sub    %edx,%eax
f0106780:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0106783:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f010678a:	eb 1d                	jmp    f01067a9 <initialize_paging+0x286>
	{
		frames_info[i].references = 1;
f010678c:	8b 0d 54 ad 89 f0    	mov    0xf089ad54,%ecx
f0106792:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106795:	89 d0                	mov    %edx,%eax
f0106797:	01 c0                	add    %eax,%eax
f0106799:	01 d0                	add    %edx,%eax
f010679b:	c1 e0 03             	shl    $0x3,%eax
f010679e:	01 c8                	add    %ecx,%eax
f01067a0:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f01067a6:	ff 45 f4             	incl   -0xc(%ebp)
f01067a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01067ac:	85 c0                	test   %eax,%eax
f01067ae:	79 05                	jns    f01067b5 <initialize_paging+0x292>
f01067b0:	05 ff 0f 00 00       	add    $0xfff,%eax
f01067b5:	c1 f8 0c             	sar    $0xc,%eax
f01067b8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01067bb:	7f cf                	jg     f010678c <initialize_paging+0x269>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01067bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01067c0:	85 c0                	test   %eax,%eax
f01067c2:	79 05                	jns    f01067c9 <initialize_paging+0x2a6>
f01067c4:	05 ff 0f 00 00       	add    $0xfff,%eax
f01067c9:	c1 f8 0c             	sar    $0xc,%eax
f01067cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01067cf:	e9 e8 00 00 00       	jmp    f01068bc <initialize_paging+0x399>
	{
		initialize_frame_info(&(frames_info[i]));
f01067d4:	8b 0d 54 ad 89 f0    	mov    0xf089ad54,%ecx
f01067da:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067dd:	89 d0                	mov    %edx,%eax
f01067df:	01 c0                	add    %eax,%eax
f01067e1:	01 d0                	add    %edx,%eax
f01067e3:	c1 e0 03             	shl    $0x3,%eax
f01067e6:	01 c8                	add    %ecx,%eax
f01067e8:	83 ec 0c             	sub    $0xc,%esp
f01067eb:	50                   	push   %eax
f01067ec:	e8 e6 00 00 00       	call   f01068d7 <initialize_frame_info>
f01067f1:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f01067f4:	8b 0d 54 ad 89 f0    	mov    0xf089ad54,%ecx
f01067fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067fd:	89 d0                	mov    %edx,%eax
f01067ff:	01 c0                	add    %eax,%eax
f0106801:	01 d0                	add    %edx,%eax
f0106803:	c1 e0 03             	shl    $0x3,%eax
f0106806:	01 c8                	add    %ecx,%eax
f0106808:	85 c0                	test   %eax,%eax
f010680a:	75 14                	jne    f0106820 <initialize_paging+0x2fd>
f010680c:	83 ec 04             	sub    $0x4,%esp
f010680f:	68 60 66 13 f0       	push   $0xf0136660
f0106814:	6a 70                	push   $0x70
f0106816:	68 83 66 13 f0       	push   $0xf0136683
f010681b:	e8 e5 99 ff ff       	call   f0100205 <_panic>
f0106820:	8b 0d 54 ad 89 f0    	mov    0xf089ad54,%ecx
f0106826:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106829:	89 d0                	mov    %edx,%eax
f010682b:	01 c0                	add    %eax,%eax
f010682d:	01 d0                	add    %edx,%eax
f010682f:	c1 e0 03             	shl    $0x3,%eax
f0106832:	01 c8                	add    %ecx,%eax
f0106834:	8b 15 18 ad 89 f0    	mov    0xf089ad18,%edx
f010683a:	89 10                	mov    %edx,(%eax)
f010683c:	8b 00                	mov    (%eax),%eax
f010683e:	85 c0                	test   %eax,%eax
f0106840:	74 1f                	je     f0106861 <initialize_paging+0x33e>
f0106842:	8b 15 18 ad 89 f0    	mov    0xf089ad18,%edx
f0106848:	8b 1d 54 ad 89 f0    	mov    0xf089ad54,%ebx
f010684e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0106851:	89 c8                	mov    %ecx,%eax
f0106853:	01 c0                	add    %eax,%eax
f0106855:	01 c8                	add    %ecx,%eax
f0106857:	c1 e0 03             	shl    $0x3,%eax
f010685a:	01 d8                	add    %ebx,%eax
f010685c:	89 42 04             	mov    %eax,0x4(%edx)
f010685f:	eb 19                	jmp    f010687a <initialize_paging+0x357>
f0106861:	8b 0d 54 ad 89 f0    	mov    0xf089ad54,%ecx
f0106867:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010686a:	89 d0                	mov    %edx,%eax
f010686c:	01 c0                	add    %eax,%eax
f010686e:	01 d0                	add    %edx,%eax
f0106870:	c1 e0 03             	shl    $0x3,%eax
f0106873:	01 c8                	add    %ecx,%eax
f0106875:	a3 1c ad 89 f0       	mov    %eax,0xf089ad1c
f010687a:	8b 0d 54 ad 89 f0    	mov    0xf089ad54,%ecx
f0106880:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106883:	89 d0                	mov    %edx,%eax
f0106885:	01 c0                	add    %eax,%eax
f0106887:	01 d0                	add    %edx,%eax
f0106889:	c1 e0 03             	shl    $0x3,%eax
f010688c:	01 c8                	add    %ecx,%eax
f010688e:	a3 18 ad 89 f0       	mov    %eax,0xf089ad18
f0106893:	8b 0d 54 ad 89 f0    	mov    0xf089ad54,%ecx
f0106899:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010689c:	89 d0                	mov    %edx,%eax
f010689e:	01 c0                	add    %eax,%eax
f01068a0:	01 d0                	add    %edx,%eax
f01068a2:	c1 e0 03             	shl    $0x3,%eax
f01068a5:	01 c8                	add    %ecx,%eax
f01068a7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01068ae:	a1 24 ad 89 f0       	mov    0xf089ad24,%eax
f01068b3:	40                   	inc    %eax
f01068b4:	a3 24 ad 89 f0       	mov    %eax,0xf089ad24
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01068b9:	ff 45 f4             	incl   -0xc(%ebp)
f01068bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01068bf:	a1 10 ad 89 f0       	mov    0xf089ad10,%eax
f01068c4:	39 c2                	cmp    %eax,%edx
f01068c6:	0f 82 08 ff ff ff    	jb     f01067d4 <initialize_paging+0x2b1>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f01068cc:	e8 eb c8 ff ff       	call   f01031bc <initialize_disk_page_file>
}
f01068d1:	90                   	nop
f01068d2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01068d5:	c9                   	leave  
f01068d6:	c3                   	ret    

f01068d7 <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f01068d7:	55                   	push   %ebp
f01068d8:	89 e5                	mov    %esp,%ebp
f01068da:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f01068dd:	83 ec 04             	sub    $0x4,%esp
f01068e0:	6a 18                	push   $0x18
f01068e2:	6a 00                	push   $0x0
f01068e4:	ff 75 08             	pushl  0x8(%ebp)
f01068e7:	e8 e5 b1 02 00       	call   f0131ad1 <memset>
f01068ec:	83 c4 10             	add    $0x10,%esp
}
f01068ef:	90                   	nop
f01068f0:	c9                   	leave  
f01068f1:	c3                   	ret    

f01068f2 <allocate_frame>:
// Hint: references should not be incremented

//extern void env_free(struct Env *e);

int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f01068f2:	55                   	push   %ebp
f01068f3:	89 e5                	mov    %esp,%ebp
f01068f5:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f01068f8:	8b 15 18 ad 89 f0    	mov    0xf089ad18,%edx
f01068fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0106901:	89 10                	mov    %edx,(%eax)
	int c = 0;
f0106903:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f010690a:	8b 45 08             	mov    0x8(%ebp),%eax
f010690d:	8b 00                	mov    (%eax),%eax
f010690f:	85 c0                	test   %eax,%eax
f0106911:	75 17                	jne    f010692a <allocate_frame+0x38>
	{
		//[KERNEL MEM] Free RAM when it's FULL
		// Write your code here, remove the panic and write your code
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f0106913:	83 ec 04             	sub    $0x4,%esp
f0106916:	68 d4 66 13 f0       	push   $0xf01366d4
f010691b:	68 99 00 00 00       	push   $0x99
f0106920:	68 83 66 13 f0       	push   $0xf0136683
f0106925:	e8 db 98 ff ff       	call   f0100205 <_panic>
	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f010692a:	8b 45 08             	mov    0x8(%ebp),%eax
f010692d:	8b 00                	mov    (%eax),%eax
f010692f:	85 c0                	test   %eax,%eax
f0106931:	75 17                	jne    f010694a <allocate_frame+0x58>
f0106933:	83 ec 04             	sub    $0x4,%esp
f0106936:	68 21 67 13 f0       	push   $0xf0136721
f010693b:	68 9c 00 00 00       	push   $0x9c
f0106940:	68 83 66 13 f0       	push   $0xf0136683
f0106945:	e8 bb 98 ff ff       	call   f0100205 <_panic>
f010694a:	8b 45 08             	mov    0x8(%ebp),%eax
f010694d:	8b 00                	mov    (%eax),%eax
f010694f:	8b 00                	mov    (%eax),%eax
f0106951:	85 c0                	test   %eax,%eax
f0106953:	74 14                	je     f0106969 <allocate_frame+0x77>
f0106955:	8b 45 08             	mov    0x8(%ebp),%eax
f0106958:	8b 00                	mov    (%eax),%eax
f010695a:	8b 00                	mov    (%eax),%eax
f010695c:	8b 55 08             	mov    0x8(%ebp),%edx
f010695f:	8b 12                	mov    (%edx),%edx
f0106961:	8b 52 04             	mov    0x4(%edx),%edx
f0106964:	89 50 04             	mov    %edx,0x4(%eax)
f0106967:	eb 0d                	jmp    f0106976 <allocate_frame+0x84>
f0106969:	8b 45 08             	mov    0x8(%ebp),%eax
f010696c:	8b 00                	mov    (%eax),%eax
f010696e:	8b 40 04             	mov    0x4(%eax),%eax
f0106971:	a3 1c ad 89 f0       	mov    %eax,0xf089ad1c
f0106976:	8b 45 08             	mov    0x8(%ebp),%eax
f0106979:	8b 00                	mov    (%eax),%eax
f010697b:	8b 40 04             	mov    0x4(%eax),%eax
f010697e:	85 c0                	test   %eax,%eax
f0106980:	74 13                	je     f0106995 <allocate_frame+0xa3>
f0106982:	8b 45 08             	mov    0x8(%ebp),%eax
f0106985:	8b 00                	mov    (%eax),%eax
f0106987:	8b 40 04             	mov    0x4(%eax),%eax
f010698a:	8b 55 08             	mov    0x8(%ebp),%edx
f010698d:	8b 12                	mov    (%edx),%edx
f010698f:	8b 12                	mov    (%edx),%edx
f0106991:	89 10                	mov    %edx,(%eax)
f0106993:	eb 0c                	jmp    f01069a1 <allocate_frame+0xaf>
f0106995:	8b 45 08             	mov    0x8(%ebp),%eax
f0106998:	8b 00                	mov    (%eax),%eax
f010699a:	8b 00                	mov    (%eax),%eax
f010699c:	a3 18 ad 89 f0       	mov    %eax,0xf089ad18
f01069a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01069a4:	8b 00                	mov    (%eax),%eax
f01069a6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01069ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01069af:	8b 00                	mov    (%eax),%eax
f01069b1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01069b8:	a1 24 ad 89 f0       	mov    0xf089ad24,%eax
f01069bd:	48                   	dec    %eax
f01069be:	a3 24 ad 89 f0       	mov    %eax,0xf089ad24

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f01069c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01069c6:	8b 00                	mov    (%eax),%eax
f01069c8:	8a 40 14             	mov    0x14(%eax),%al
f01069cb:	84 c0                	test   %al,%al
f01069cd:	74 20                	je     f01069ef <allocate_frame+0xfd>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment->env_page_directory,(*ptr_frame_info)->va);
f01069cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01069d2:	8b 00                	mov    (%eax),%eax
f01069d4:	8b 50 0c             	mov    0xc(%eax),%edx
f01069d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01069da:	8b 00                	mov    (%eax),%eax
f01069dc:	8b 40 10             	mov    0x10(%eax),%eax
f01069df:	8b 40 5c             	mov    0x5c(%eax),%eax
f01069e2:	83 ec 08             	sub    $0x8,%esp
f01069e5:	52                   	push   %edx
f01069e6:	50                   	push   %eax
f01069e7:	e8 d6 17 00 00       	call   f01081c2 <pt_clear_page_table_entry>
f01069ec:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f01069ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01069f2:	8b 00                	mov    (%eax),%eax
f01069f4:	83 ec 0c             	sub    $0xc,%esp
f01069f7:	50                   	push   %eax
f01069f8:	e8 da fe ff ff       	call   f01068d7 <initialize_frame_info>
f01069fd:	83 c4 10             	add    $0x10,%esp
	return 0;
f0106a00:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106a05:	c9                   	leave  
f0106a06:	c3                   	ret    

f0106a07 <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f0106a07:	55                   	push   %ebp
f0106a08:	89 e5                	mov    %esp,%ebp
f0106a0a:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f0106a0d:	83 ec 0c             	sub    $0xc,%esp
f0106a10:	ff 75 08             	pushl  0x8(%ebp)
f0106a13:	e8 bf fe ff ff       	call   f01068d7 <initialize_frame_info>
f0106a18:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f0106a1b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0106a1f:	75 17                	jne    f0106a38 <free_frame+0x31>
f0106a21:	83 ec 04             	sub    $0x4,%esp
f0106a24:	68 60 66 13 f0       	push   $0xf0136660
f0106a29:	68 b9 00 00 00       	push   $0xb9
f0106a2e:	68 83 66 13 f0       	push   $0xf0136683
f0106a33:	e8 cd 97 ff ff       	call   f0100205 <_panic>
f0106a38:	8b 15 18 ad 89 f0    	mov    0xf089ad18,%edx
f0106a3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a41:	89 10                	mov    %edx,(%eax)
f0106a43:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a46:	8b 00                	mov    (%eax),%eax
f0106a48:	85 c0                	test   %eax,%eax
f0106a4a:	74 0d                	je     f0106a59 <free_frame+0x52>
f0106a4c:	a1 18 ad 89 f0       	mov    0xf089ad18,%eax
f0106a51:	8b 55 08             	mov    0x8(%ebp),%edx
f0106a54:	89 50 04             	mov    %edx,0x4(%eax)
f0106a57:	eb 08                	jmp    f0106a61 <free_frame+0x5a>
f0106a59:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a5c:	a3 1c ad 89 f0       	mov    %eax,0xf089ad1c
f0106a61:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a64:	a3 18 ad 89 f0       	mov    %eax,0xf089ad18
f0106a69:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a6c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106a73:	a1 24 ad 89 f0       	mov    0xf089ad24,%eax
f0106a78:	40                   	inc    %eax
f0106a79:	a3 24 ad 89 f0       	mov    %eax,0xf089ad24
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));


}
f0106a7e:	90                   	nop
f0106a7f:	c9                   	leave  
f0106a80:	c3                   	ret    

f0106a81 <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f0106a81:	55                   	push   %ebp
f0106a82:	89 e5                	mov    %esp,%ebp
f0106a84:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f0106a87:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a8a:	8b 40 08             	mov    0x8(%eax),%eax
f0106a8d:	48                   	dec    %eax
f0106a8e:	8b 55 08             	mov    0x8(%ebp),%edx
f0106a91:	66 89 42 08          	mov    %ax,0x8(%edx)
f0106a95:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a98:	8b 40 08             	mov    0x8(%eax),%eax
f0106a9b:	66 85 c0             	test   %ax,%ax
f0106a9e:	75 0e                	jne    f0106aae <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f0106aa0:	83 ec 0c             	sub    $0xc,%esp
f0106aa3:	ff 75 08             	pushl  0x8(%ebp)
f0106aa6:	e8 5c ff ff ff       	call   f0106a07 <free_frame>
f0106aab:	83 c4 10             	add    $0x10,%esp
}
f0106aae:	90                   	nop
f0106aaf:	c9                   	leave  
f0106ab0:	c3                   	ret    

f0106ab1 <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106ab1:	55                   	push   %ebp
f0106ab2:	89 e5                	mov    %esp,%ebp
f0106ab4:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106ab7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106aba:	c1 e8 16             	shr    $0x16,%eax
f0106abd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106ac4:	8b 45 08             	mov    0x8(%ebp),%eax
f0106ac7:	01 d0                	add    %edx,%eax
f0106ac9:	8b 00                	mov    (%eax),%eax
f0106acb:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0106ace:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ad1:	83 e0 01             	and    $0x1,%eax
f0106ad4:	85 c0                	test   %eax,%eax
f0106ad6:	74 74                	je     f0106b4c <get_page_table+0x9b>
	{
		//	cprintf("gpt .07, page_directory_entry= %x \n",page_directory_entry);
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106ad8:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106adf:	77 1d                	ja     f0106afe <get_page_table+0x4d>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106ae1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ae4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106ae9:	83 ec 0c             	sub    $0xc,%esp
f0106aec:	50                   	push   %eax
f0106aed:	e8 8b 14 00 00       	call   f0107f7d <kheap_virtual_address>
f0106af2:	83 c4 10             	add    $0x10,%esp
f0106af5:	89 c2                	mov    %eax,%edx
f0106af7:	8b 45 10             	mov    0x10(%ebp),%eax
f0106afa:	89 10                	mov    %edx,(%eax)
f0106afc:	eb 44                	jmp    f0106b42 <get_page_table+0x91>
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106afe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b01:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b06:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106b09:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106b0c:	c1 e8 0c             	shr    $0xc,%eax
f0106b0f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106b12:	a1 10 ad 89 f0       	mov    0xf089ad10,%eax
f0106b17:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0106b1a:	72 17                	jb     f0106b33 <get_page_table+0x82>
f0106b1c:	ff 75 f0             	pushl  -0x10(%ebp)
f0106b1f:	68 40 67 13 f0       	push   $0xf0136740
f0106b24:	68 e2 00 00 00       	push   $0xe2
f0106b29:	68 83 66 13 f0       	push   $0xf0136683
f0106b2e:	e8 d2 96 ff ff       	call   f0100205 <_panic>
f0106b33:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106b36:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106b3b:	89 c2                	mov    %eax,%edx
f0106b3d:	8b 45 10             	mov    0x10(%ebp),%eax
f0106b40:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f0106b42:	b8 00 00 00 00       	mov    $0x0,%eax
f0106b47:	e9 b9 00 00 00       	jmp    f0106c05 <get_page_table+0x154>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0106b4c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106b50:	0f 84 a1 00 00 00    	je     f0106bf7 <get_page_table+0x146>
f0106b56:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b59:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f0106b5c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106b5f:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f0106b62:	83 ec 0c             	sub    $0xc,%esp
f0106b65:	6a 00                	push   $0x0
f0106b67:	e8 3d 61 00 00       	call   f010cca9 <fault_handler>
f0106b6c:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106b6f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b72:	c1 e8 16             	shr    $0x16,%eax
f0106b75:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106b7c:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b7f:	01 d0                	add    %edx,%eax
f0106b81:	8b 00                	mov    (%eax),%eax
f0106b83:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106b86:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106b8d:	77 1d                	ja     f0106bac <get_page_table+0xfb>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106b8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b92:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b97:	83 ec 0c             	sub    $0xc,%esp
f0106b9a:	50                   	push   %eax
f0106b9b:	e8 dd 13 00 00       	call   f0107f7d <kheap_virtual_address>
f0106ba0:	83 c4 10             	add    $0x10,%esp
f0106ba3:	89 c2                	mov    %eax,%edx
f0106ba5:	8b 45 10             	mov    0x10(%ebp),%eax
f0106ba8:	89 10                	mov    %edx,(%eax)
f0106baa:	eb 44                	jmp    f0106bf0 <get_page_table+0x13f>
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106bac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106baf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106bb4:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106bb7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106bba:	c1 e8 0c             	shr    $0xc,%eax
f0106bbd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106bc0:	a1 10 ad 89 f0       	mov    0xf089ad10,%eax
f0106bc5:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106bc8:	72 17                	jb     f0106be1 <get_page_table+0x130>
f0106bca:	ff 75 e8             	pushl  -0x18(%ebp)
f0106bcd:	68 40 67 13 f0       	push   $0xf0136740
f0106bd2:	68 fa 00 00 00       	push   $0xfa
f0106bd7:	68 83 66 13 f0       	push   $0xf0136683
f0106bdc:	e8 24 96 ff ff       	call   f0100205 <_panic>
f0106be1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106be4:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106be9:	89 c2                	mov    %eax,%edx
f0106beb:	8b 45 10             	mov    0x10(%ebp),%eax
f0106bee:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f0106bf0:	b8 00 00 00 00       	mov    $0x0,%eax
f0106bf5:	eb 0e                	jmp    f0106c05 <get_page_table+0x154>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f0106bf7:	8b 45 10             	mov    0x10(%ebp),%eax
f0106bfa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f0106c00:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f0106c05:	c9                   	leave  
f0106c06:	c3                   	ret    

f0106c07 <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f0106c07:	55                   	push   %ebp
f0106c08:	89 e5                	mov    %esp,%ebp
f0106c0a:	53                   	push   %ebx
f0106c0b:	83 ec 14             	sub    $0x14,%esp
	//	b.	clear the TLB cache (using "tlbflush()")

	//change this "return" according to your answer

#if USE_KHEAP
	uint32 * ptr_page_table = kmalloc(PAGE_SIZE);
f0106c0e:	83 ec 0c             	sub    $0xc,%esp
f0106c11:	68 00 10 00 00       	push   $0x1000
f0106c16:	e8 70 11 00 00       	call   f0107d8b <kmalloc>
f0106c1b:	83 c4 10             	add    $0x10,%esp
f0106c1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_page_table == NULL)
f0106c21:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106c25:	75 17                	jne    f0106c3e <create_page_table+0x37>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0106c27:	83 ec 04             	sub    $0x4,%esp
f0106c2a:	68 6f 67 13 f0       	push   $0xf013676f
f0106c2f:	68 18 01 00 00       	push   $0x118
f0106c34:	68 83 66 13 f0       	push   $0xf0136683
f0106c39:	e8 c7 95 ff ff       	call   f0100205 <_panic>
	}
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f0106c3e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106c41:	c1 e8 16             	shr    $0x16,%eax
f0106c44:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106c4b:	8b 45 08             	mov    0x8(%ebp),%eax
f0106c4e:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f0106c51:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c54:	83 ec 0c             	sub    $0xc,%esp
f0106c57:	50                   	push   %eax
f0106c58:	e8 4c 13 00 00       	call   f0107fa9 <kheap_physical_address>
f0106c5d:	83 c4 10             	add    $0x10,%esp
f0106c60:	83 c8 07             	or     $0x7,%eax
f0106c63:	89 03                	mov    %eax,(%ebx)
			kheap_physical_address((unsigned int)ptr_page_table)
			, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);

	//================
	memset(ptr_page_table , 0, PAGE_SIZE);
f0106c65:	83 ec 04             	sub    $0x4,%esp
f0106c68:	68 00 10 00 00       	push   $0x1000
f0106c6d:	6a 00                	push   $0x0
f0106c6f:	ff 75 f4             	pushl  -0xc(%ebp)
f0106c72:	e8 5a ae 02 00       	call   f0131ad1 <memset>
f0106c77:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106c7a:	0f 20 d8             	mov    %cr3,%eax
f0106c7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106c80:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106c83:	0f 22 d8             	mov    %eax,%cr3
#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
#endif

	return ptr_page_table;
f0106c86:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0106c89:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106c8c:	c9                   	leave  
f0106c8d:	c3                   	ret    

f0106c8e <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106c8e:	55                   	push   %ebp
f0106c8f:	89 e5                	mov    %esp,%ebp
f0106c91:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f0106c94:	83 ec 0c             	sub    $0xc,%esp
f0106c97:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0106c9a:	50                   	push   %eax
f0106c9b:	e8 52 fc ff ff       	call   f01068f2 <allocate_frame>
f0106ca0:	83 c4 10             	add    $0x10,%esp
f0106ca3:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f0106ca6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106ca9:	83 ec 0c             	sub    $0xc,%esp
f0106cac:	50                   	push   %eax
f0106cad:	e8 03 f8 ff ff       	call   f01064b5 <to_physical_address>
f0106cb2:	83 c4 10             	add    $0x10,%esp
f0106cb5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0106cb8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106cbb:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106cbe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106cc1:	c1 e8 0c             	shr    $0xc,%eax
f0106cc4:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106cc7:	a1 10 ad 89 f0       	mov    0xf089ad10,%eax
f0106ccc:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0106ccf:	72 17                	jb     f0106ce8 <__static_cpt+0x5a>
f0106cd1:	ff 75 ec             	pushl  -0x14(%ebp)
f0106cd4:	68 40 67 13 f0       	push   $0xf0136740
f0106cd9:	68 30 01 00 00       	push   $0x130
f0106cde:	68 83 66 13 f0       	push   $0xf0136683
f0106ce3:	e8 1d 95 ff ff       	call   f0100205 <_panic>
f0106ce8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106ceb:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106cf0:	89 c2                	mov    %eax,%edx
f0106cf2:	8b 45 10             	mov    0x10(%ebp),%eax
f0106cf5:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f0106cf7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106cfa:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f0106d00:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106d03:	c1 e8 16             	shr    $0x16,%eax
f0106d06:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106d0d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106d10:	01 d0                	add    %edx,%eax
f0106d12:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d15:	83 ca 07             	or     $0x7,%edx
f0106d18:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f0106d1a:	8b 45 10             	mov    0x10(%ebp),%eax
f0106d1d:	8b 00                	mov    (%eax),%eax
f0106d1f:	83 ec 04             	sub    $0x4,%esp
f0106d22:	68 00 10 00 00       	push   $0x1000
f0106d27:	6a 00                	push   $0x0
f0106d29:	50                   	push   %eax
f0106d2a:	e8 a2 ad 02 00       	call   f0131ad1 <memset>
f0106d2f:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106d32:	0f 20 d8             	mov    %cr3,%eax
f0106d35:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106d38:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106d3b:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0106d3e:	90                   	nop
f0106d3f:	c9                   	leave  
f0106d40:	c3                   	ret    

f0106d41 <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106d41:	55                   	push   %ebp
f0106d42:	89 e5                	mov    %esp,%ebp
f0106d44:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106d47:	ff 75 0c             	pushl  0xc(%ebp)
f0106d4a:	e8 66 f7 ff ff       	call   f01064b5 <to_physical_address>
f0106d4f:	83 c4 04             	add    $0x4,%esp
f0106d52:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f0106d55:	83 ec 04             	sub    $0x4,%esp
f0106d58:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0106d5b:	50                   	push   %eax
f0106d5c:	ff 75 10             	pushl  0x10(%ebp)
f0106d5f:	ff 75 08             	pushl  0x8(%ebp)
f0106d62:	e8 4a fd ff ff       	call   f0106ab1 <get_page_table>
f0106d67:	83 c4 10             	add    $0x10,%esp
f0106d6a:	83 f8 01             	cmp    $0x1,%eax
f0106d6d:	75 1b                	jne    f0106d8a <map_frame+0x49>
		//page_directory_entry = ptr_page_directory[PDX(virtual_address)];
		//ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
		=============================================================================================*/
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(ptr_page_directory, (uint32)virtual_address);
f0106d6f:	83 ec 08             	sub    $0x8,%esp
f0106d72:	ff 75 10             	pushl  0x10(%ebp)
f0106d75:	ff 75 08             	pushl  0x8(%ebp)
f0106d78:	e8 8a fe ff ff       	call   f0106c07 <create_page_table>
f0106d7d:	83 c4 10             	add    $0x10,%esp
f0106d80:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//cprintf("======>page table created using kheap for VA %x at dir = %x PT = %x\n", virtual_address, ptr_page_directory[PDX(virtual_address)], ptr_page_table);
			uint32* ptr_page_table2 =NULL;
f0106d83:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0106d8a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106d8d:	8b 55 10             	mov    0x10(%ebp),%edx
f0106d90:	c1 ea 0c             	shr    $0xc,%edx
f0106d93:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106d99:	c1 e2 02             	shl    $0x2,%edx
f0106d9c:	01 d0                	add    %edx,%eax
f0106d9e:	8b 00                	mov    (%eax),%eax
f0106da0:	89 45 ec             	mov    %eax,-0x14(%ebp)

	}*/

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f0106da3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106da6:	83 e0 01             	and    $0x1,%eax
f0106da9:	85 c0                	test   %eax,%eax
f0106dab:	74 25                	je     f0106dd2 <map_frame+0x91>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f0106dad:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106db0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106db5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106db8:	75 07                	jne    f0106dc1 <map_frame+0x80>
			return 0;
f0106dba:	b8 00 00 00 00       	mov    $0x0,%eax
f0106dbf:	eb 43                	jmp    f0106e04 <map_frame+0xc3>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f0106dc1:	83 ec 08             	sub    $0x8,%esp
f0106dc4:	ff 75 10             	pushl  0x10(%ebp)
f0106dc7:	ff 75 08             	pushl  0x8(%ebp)
f0106dca:	e8 a7 00 00 00       	call   f0106e76 <unmap_frame>
f0106dcf:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f0106dd2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106dd5:	8b 40 08             	mov    0x8(%eax),%eax
f0106dd8:	40                   	inc    %eax
f0106dd9:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106ddc:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106de0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106de3:	8b 55 10             	mov    0x10(%ebp),%edx
f0106de6:	c1 ea 0c             	shr    $0xc,%edx
f0106de9:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106def:	c1 e2 02             	shl    $0x2,%edx
f0106df2:	01 c2                	add    %eax,%edx
f0106df4:	8b 45 14             	mov    0x14(%ebp),%eax
f0106df7:	0b 45 f4             	or     -0xc(%ebp),%eax
f0106dfa:	83 c8 01             	or     $0x1,%eax
f0106dfd:	89 02                	mov    %eax,(%edx)

	return 0;
f0106dff:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106e04:	c9                   	leave  
f0106e05:	c3                   	ret    

f0106e06 <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f0106e06:	55                   	push   %ebp
f0106e07:	89 e5                	mov    %esp,%ebp
f0106e09:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f0106e0c:	83 ec 04             	sub    $0x4,%esp
f0106e0f:	ff 75 10             	pushl  0x10(%ebp)
f0106e12:	ff 75 0c             	pushl  0xc(%ebp)
f0106e15:	ff 75 08             	pushl  0x8(%ebp)
f0106e18:	e8 94 fc ff ff       	call   f0106ab1 <get_page_table>
f0106e1d:	83 c4 10             	add    $0x10,%esp
f0106e20:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f0106e23:	8b 45 10             	mov    0x10(%ebp),%eax
f0106e26:	8b 00                	mov    (%eax),%eax
f0106e28:	85 c0                	test   %eax,%eax
f0106e2a:	74 43                	je     f0106e6f <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f0106e2c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106e2f:	c1 e8 0c             	shr    $0xc,%eax
f0106e32:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106e37:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f0106e3a:	8b 45 10             	mov    0x10(%ebp),%eax
f0106e3d:	8b 00                	mov    (%eax),%eax
f0106e3f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106e42:	c1 e2 02             	shl    $0x2,%edx
f0106e45:	01 d0                	add    %edx,%eax
f0106e47:	8b 00                	mov    (%eax),%eax
f0106e49:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f0106e4c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106e50:	74 16                	je     f0106e68 <get_frame_info+0x62>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f0106e52:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106e55:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106e5a:	83 ec 0c             	sub    $0xc,%esp
f0106e5d:	50                   	push   %eax
f0106e5e:	e8 65 f6 ff ff       	call   f01064c8 <to_frame_info>
f0106e63:	83 c4 10             	add    $0x10,%esp
f0106e66:	eb 0c                	jmp    f0106e74 <get_frame_info+0x6e>
		}
		return 0;
f0106e68:	b8 00 00 00 00       	mov    $0x0,%eax
f0106e6d:	eb 05                	jmp    f0106e74 <get_frame_info+0x6e>
	}
	return 0;
f0106e6f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106e74:	c9                   	leave  
f0106e75:	c3                   	ret    

f0106e76 <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f0106e76:	55                   	push   %ebp
f0106e77:	89 e5                	mov    %esp,%ebp
f0106e79:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f0106e7c:	83 ec 04             	sub    $0x4,%esp
f0106e7f:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0106e82:	50                   	push   %eax
f0106e83:	ff 75 0c             	pushl  0xc(%ebp)
f0106e86:	ff 75 08             	pushl  0x8(%ebp)
f0106e89:	e8 78 ff ff ff       	call   f0106e06 <get_frame_info>
f0106e8e:	83 c4 10             	add    $0x10,%esp
f0106e91:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f0106e94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106e98:	74 60                	je     f0106efa <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0106e9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106e9d:	8a 40 14             	mov    0x14(%eax),%al
f0106ea0:	84 c0                	test   %al,%al
f0106ea2:	74 1c                	je     f0106ec0 <unmap_frame+0x4a>
f0106ea4:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106eab:	77 13                	ja     f0106ec0 <unmap_frame+0x4a>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f0106ead:	83 ec 08             	sub    $0x8,%esp
f0106eb0:	ff 75 0c             	pushl  0xc(%ebp)
f0106eb3:	68 8c 67 13 f0       	push   $0xf013678c
f0106eb8:	e8 51 9e ff ff       	call   f0100d0e <cprintf>
f0106ebd:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f0106ec0:	83 ec 0c             	sub    $0xc,%esp
f0106ec3:	ff 75 f4             	pushl  -0xc(%ebp)
f0106ec6:	e8 b6 fb ff ff       	call   f0106a81 <decrement_references>
f0106ecb:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0106ece:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106ed1:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106ed4:	c1 ea 0c             	shr    $0xc,%edx
f0106ed7:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106edd:	c1 e2 02             	shl    $0x2,%edx
f0106ee0:	01 d0                	add    %edx,%eax
f0106ee2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f0106ee8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106eeb:	83 ec 08             	sub    $0x8,%esp
f0106eee:	50                   	push   %eax
f0106eef:	ff 75 08             	pushl  0x8(%ebp)
f0106ef2:	e8 17 f6 ff ff       	call   f010650e <tlb_invalidate>
f0106ef7:	83 c4 10             	add    $0x10,%esp
	}
}
f0106efa:	90                   	nop
f0106efb:	c9                   	leave  
f0106efc:	c3                   	ret    

f0106efd <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106efd:	55                   	push   %ebp
f0106efe:	89 e5                	mov    %esp,%ebp
f0106f00:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106f03:	ff 75 0c             	pushl  0xc(%ebp)
f0106f06:	e8 aa f5 ff ff       	call   f01064b5 <to_physical_address>
f0106f0b:	83 c4 04             	add    $0x4,%esp
f0106f0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106f11:	8b 45 10             	mov    0x10(%ebp),%eax
f0106f14:	c1 e8 16             	shr    $0x16,%eax
f0106f17:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106f1e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f21:	01 d0                	add    %edx,%eax
f0106f23:	8b 00                	mov    (%eax),%eax
f0106f25:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106f28:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0106f2f:	77 19                	ja     f0106f4a <loadtime_map_frame+0x4d>
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106f31:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f34:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106f39:	83 ec 0c             	sub    $0xc,%esp
f0106f3c:	50                   	push   %eax
f0106f3d:	e8 3b 10 00 00       	call   f0107f7d <kheap_virtual_address>
f0106f42:	83 c4 10             	add    $0x10,%esp
f0106f45:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106f48:	eb 40                	jmp    f0106f8a <loadtime_map_frame+0x8d>
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106f4a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f4d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106f52:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106f55:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106f58:	c1 e8 0c             	shr    $0xc,%eax
f0106f5b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106f5e:	a1 10 ad 89 f0       	mov    0xf089ad10,%eax
f0106f63:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106f66:	72 17                	jb     f0106f7f <loadtime_map_frame+0x82>
f0106f68:	ff 75 e8             	pushl  -0x18(%ebp)
f0106f6b:	68 40 67 13 f0       	push   $0xf0136740
f0106f70:	68 e6 01 00 00       	push   $0x1e6
f0106f75:	68 83 66 13 f0       	push   $0xf0136683
f0106f7a:	e8 86 92 ff ff       	call   f0100205 <_panic>
f0106f7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106f82:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106f87:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f0106f8a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106f8e:	75 14                	jne    f0106fa4 <loadtime_map_frame+0xa7>
	{
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
f0106f90:	83 ec 08             	sub    $0x8,%esp
f0106f93:	ff 75 10             	pushl  0x10(%ebp)
f0106f96:	ff 75 08             	pushl  0x8(%ebp)
f0106f99:	e8 69 fc ff ff       	call   f0106c07 <create_page_table>
f0106f9e:	83 c4 10             	add    $0x10,%esp
f0106fa1:	89 45 f4             	mov    %eax,-0xc(%ebp)
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
		}
#endif
	}

	ptr_frame_info->references++;
f0106fa4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106fa7:	8b 40 08             	mov    0x8(%eax),%eax
f0106faa:	40                   	inc    %eax
f0106fab:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106fae:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106fb2:	8b 45 10             	mov    0x10(%ebp),%eax
f0106fb5:	c1 e8 0c             	shr    $0xc,%eax
f0106fb8:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106fbd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106fc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106fc7:	01 c2                	add    %eax,%edx
f0106fc9:	8b 45 14             	mov    0x14(%ebp),%eax
f0106fcc:	0b 45 f0             	or     -0x10(%ebp),%eax
f0106fcf:	83 c8 01             	or     $0x1,%eax
f0106fd2:	89 02                	mov    %eax,(%edx)

	return 0;
f0106fd4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106fd9:	c9                   	leave  
f0106fda:	c3                   	ret    

f0106fdb <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f0106fdb:	55                   	push   %ebp
f0106fdc:	89 e5                	mov    %esp,%ebp
f0106fde:	57                   	push   %edi
f0106fdf:	56                   	push   %esi
f0106fe0:	53                   	push   %ebx
f0106fe1:	83 ec 20             	sub    $0x20,%esp

	//calculate the free frames from the free frame list
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f0106fe4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f0106feb:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f0106ff2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	LIST_FOREACH(ptr, &free_frame_list)
f0106ff9:	a1 18 ad 89 f0       	mov    0xf089ad18,%eax
f0106ffe:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107001:	eb 1a                	jmp    f010701d <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f0107003:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107006:	8a 40 14             	mov    0x14(%eax),%al
f0107009:	84 c0                	test   %al,%al
f010700b:	74 05                	je     f0107012 <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f010700d:	ff 45 e8             	incl   -0x18(%ebp)
f0107010:	eb 03                	jmp    f0107015 <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f0107012:	ff 45 ec             	incl   -0x14(%ebp)
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;

	LIST_FOREACH(ptr, &free_frame_list)
f0107015:	a1 20 ad 89 f0       	mov    0xf089ad20,%eax
f010701a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010701d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107021:	74 07                	je     f010702a <calculate_available_frames+0x4f>
f0107023:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107026:	8b 00                	mov    (%eax),%eax
f0107028:	eb 05                	jmp    f010702f <calculate_available_frames+0x54>
f010702a:	b8 00 00 00 00       	mov    $0x0,%eax
f010702f:	a3 20 ad 89 f0       	mov    %eax,0xf089ad20
f0107034:	a1 20 ad 89 f0       	mov    0xf089ad20,%eax
f0107039:	85 c0                	test   %eax,%eax
f010703b:	75 c6                	jne    f0107003 <calculate_available_frames+0x28>
f010703d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107041:	75 c0                	jne    f0107003 <calculate_available_frames+0x28>
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0107043:	a1 b8 ac 89 f0       	mov    0xf089acb8,%eax
f0107048:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010704b:	eb 0b                	jmp    f0107058 <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f010704d:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0107050:	a1 c0 ac 89 f0       	mov    0xf089acc0,%eax
f0107055:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107058:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010705c:	74 07                	je     f0107065 <calculate_available_frames+0x8a>
f010705e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107061:	8b 00                	mov    (%eax),%eax
f0107063:	eb 05                	jmp    f010706a <calculate_available_frames+0x8f>
f0107065:	b8 00 00 00 00       	mov    $0x0,%eax
f010706a:	a3 c0 ac 89 f0       	mov    %eax,0xf089acc0
f010706f:	a1 c0 ac 89 f0       	mov    0xf089acc0,%eax
f0107074:	85 c0                	test   %eax,%eax
f0107076:	75 d5                	jne    f010704d <calculate_available_frames+0x72>
f0107078:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010707c:	75 cf                	jne    f010704d <calculate_available_frames+0x72>
	{
		totalModified++ ;
	}

	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f010707e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107081:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f0107084:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107087:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f010708a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010708d:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f0107090:	8b 45 08             	mov    0x8(%ebp),%eax
f0107093:	89 c3                	mov    %eax,%ebx
f0107095:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0107098:	ba 03 00 00 00       	mov    $0x3,%edx
f010709d:	89 df                	mov    %ebx,%edi
f010709f:	89 c6                	mov    %eax,%esi
f01070a1:	89 d1                	mov    %edx,%ecx
f01070a3:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f01070a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01070a8:	83 c4 20             	add    $0x20,%esp
f01070ab:	5b                   	pop    %ebx
f01070ac:	5e                   	pop    %esi
f01070ad:	5f                   	pop    %edi
f01070ae:	5d                   	pop    %ebp
f01070af:	c2 04 00             	ret    $0x4

f01070b2 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01070b2:	55                   	push   %ebp
f01070b3:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01070b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01070b8:	8b 15 54 ad 89 f0    	mov    0xf089ad54,%edx
f01070be:	29 d0                	sub    %edx,%eax
f01070c0:	c1 f8 03             	sar    $0x3,%eax
f01070c3:	89 c2                	mov    %eax,%edx
f01070c5:	89 d0                	mov    %edx,%eax
f01070c7:	c1 e0 02             	shl    $0x2,%eax
f01070ca:	01 d0                	add    %edx,%eax
f01070cc:	c1 e0 02             	shl    $0x2,%eax
f01070cf:	01 d0                	add    %edx,%eax
f01070d1:	c1 e0 02             	shl    $0x2,%eax
f01070d4:	01 d0                	add    %edx,%eax
f01070d6:	89 c1                	mov    %eax,%ecx
f01070d8:	c1 e1 08             	shl    $0x8,%ecx
f01070db:	01 c8                	add    %ecx,%eax
f01070dd:	89 c1                	mov    %eax,%ecx
f01070df:	c1 e1 10             	shl    $0x10,%ecx
f01070e2:	01 c8                	add    %ecx,%eax
f01070e4:	01 c0                	add    %eax,%eax
f01070e6:	01 d0                	add    %edx,%eax
}
f01070e8:	5d                   	pop    %ebp
f01070e9:	c3                   	ret    

f01070ea <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01070ea:	55                   	push   %ebp
f01070eb:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01070ed:	ff 75 08             	pushl  0x8(%ebp)
f01070f0:	e8 bd ff ff ff       	call   f01070b2 <to_frame_number>
f01070f5:	83 c4 04             	add    $0x4,%esp
f01070f8:	c1 e0 0c             	shl    $0xc,%eax
}
f01070fb:	c9                   	leave  
f01070fc:	c3                   	ret    

f01070fd <create_shares_array>:
// [1] Create "shares" array:
//===========================
//Dynamically allocate the array of shared objects
//initialize the array of shared objects by 0's and empty = 1
void create_shares_array(uint32 numOfElements)
{
f01070fd:	55                   	push   %ebp
f01070fe:	89 e5                	mov    %esp,%ebp
f0107100:	83 ec 18             	sub    $0x18,%esp
#if USE_KHEAP
	MAX_SHARES  = numOfElements ;
f0107103:	8b 45 08             	mov    0x8(%ebp),%eax
f0107106:	a3 28 ad 89 f0       	mov    %eax,0xf089ad28
	shares = kmalloc(numOfElements*sizeof(struct Share));
f010710b:	8b 55 08             	mov    0x8(%ebp),%edx
f010710e:	89 d0                	mov    %edx,%eax
f0107110:	c1 e0 02             	shl    $0x2,%eax
f0107113:	01 d0                	add    %edx,%eax
f0107115:	c1 e0 02             	shl    $0x2,%eax
f0107118:	01 d0                	add    %edx,%eax
f010711a:	c1 e0 02             	shl    $0x2,%eax
f010711d:	83 ec 0c             	sub    $0xc,%esp
f0107120:	50                   	push   %eax
f0107121:	e8 65 0c 00 00       	call   f0107d8b <kmalloc>
f0107126:	83 c4 10             	add    $0x10,%esp
f0107129:	a3 ec ac 89 f0       	mov    %eax,0xf089acec
	if (shares == NULL)
f010712e:	a1 ec ac 89 f0       	mov    0xf089acec,%eax
f0107133:	85 c0                	test   %eax,%eax
f0107135:	75 14                	jne    f010714b <create_shares_array+0x4e>
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
f0107137:	83 ec 04             	sub    $0x4,%esp
f010713a:	68 b0 67 13 f0       	push   $0xf01367b0
f010713f:	6a 21                	push   $0x21
f0107141:	68 f4 67 13 f0       	push   $0xf01367f4
f0107146:	e8 ba 90 ff ff       	call   f0100205 <_panic>
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f010714b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107152:	eb 4b                	jmp    f010719f <create_shares_array+0xa2>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
f0107154:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f010715a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010715d:	89 d0                	mov    %edx,%eax
f010715f:	c1 e0 02             	shl    $0x2,%eax
f0107162:	01 d0                	add    %edx,%eax
f0107164:	c1 e0 02             	shl    $0x2,%eax
f0107167:	01 d0                	add    %edx,%eax
f0107169:	c1 e0 02             	shl    $0x2,%eax
f010716c:	01 c8                	add    %ecx,%eax
f010716e:	83 ec 04             	sub    $0x4,%esp
f0107171:	6a 54                	push   $0x54
f0107173:	6a 00                	push   $0x0
f0107175:	50                   	push   %eax
f0107176:	e8 56 a9 02 00       	call   f0131ad1 <memset>
f010717b:	83 c4 10             	add    $0x10,%esp
		shares[i].empty = 1;
f010717e:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f0107184:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107187:	89 d0                	mov    %edx,%eax
f0107189:	c1 e0 02             	shl    $0x2,%eax
f010718c:	01 d0                	add    %edx,%eax
f010718e:	c1 e0 02             	shl    $0x2,%eax
f0107191:	01 d0                	add    %edx,%eax
f0107193:	c1 e0 02             	shl    $0x2,%eax
f0107196:	01 c8                	add    %ecx,%eax
f0107198:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f010719c:	ff 45 f4             	incl   -0xc(%ebp)
f010719f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071a2:	a1 28 ad 89 f0       	mov    0xf089ad28,%eax
f01071a7:	39 c2                	cmp    %eax,%edx
f01071a9:	72 a9                	jb     f0107154 <create_shares_array+0x57>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
		shares[i].empty = 1;
	}
}
f01071ab:	90                   	nop
f01071ac:	c9                   	leave  
f01071ad:	c3                   	ret    

f01071ae <allocate_share_object>:
//	a) if succeed:
//		1. allocatedObject (pointer to struct Share) passed by reference
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
f01071ae:	55                   	push   %ebp
f01071af:	89 e5                	mov    %esp,%ebp
f01071b1:	53                   	push   %ebx
f01071b2:	83 ec 14             	sub    $0x14,%esp
	int32 sharedObjectID = -1 ;
f01071b5:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SHARES; ++i)
f01071bc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01071c3:	eb 2c                	jmp    f01071f1 <allocate_share_object+0x43>
	{
		if (shares[i].empty)
f01071c5:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f01071cb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01071ce:	89 d0                	mov    %edx,%eax
f01071d0:	c1 e0 02             	shl    $0x2,%eax
f01071d3:	01 d0                	add    %edx,%eax
f01071d5:	c1 e0 02             	shl    $0x2,%eax
f01071d8:	01 d0                	add    %edx,%eax
f01071da:	c1 e0 02             	shl    $0x2,%eax
f01071dd:	01 c8                	add    %ecx,%eax
f01071df:	8a 40 4d             	mov    0x4d(%eax),%al
f01071e2:	84 c0                	test   %al,%al
f01071e4:	74 08                	je     f01071ee <allocate_share_object+0x40>
		{
			sharedObjectID = i;
f01071e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01071e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f01071ec:	eb 0f                	jmp    f01071fd <allocate_share_object+0x4f>
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
	int32 sharedObjectID = -1 ;
	for (int i = 0; i < MAX_SHARES; ++i)
f01071ee:	ff 45 f0             	incl   -0x10(%ebp)
f01071f1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01071f4:	a1 28 ad 89 f0       	mov    0xf089ad28,%eax
f01071f9:	39 c2                	cmp    %eax,%edx
f01071fb:	72 c8                	jb     f01071c5 <allocate_share_object+0x17>
			sharedObjectID = i;
			break;
		}
	}

	if (sharedObjectID == -1)
f01071fd:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0107201:	75 0a                	jne    f010720d <allocate_share_object+0x5f>
	{
		return E_NO_SHARE ;
f0107203:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f0107208:	e9 94 00 00 00       	jmp    f01072a1 <allocate_share_object+0xf3>
		}
#endif
*/
	}

	*allocatedObject = &(shares[sharedObjectID]);
f010720d:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f0107213:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107216:	89 d0                	mov    %edx,%eax
f0107218:	c1 e0 02             	shl    $0x2,%eax
f010721b:	01 d0                	add    %edx,%eax
f010721d:	c1 e0 02             	shl    $0x2,%eax
f0107220:	01 d0                	add    %edx,%eax
f0107222:	c1 e0 02             	shl    $0x2,%eax
f0107225:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107228:	8b 45 08             	mov    0x8(%ebp),%eax
f010722b:	89 10                	mov    %edx,(%eax)
	shares[sharedObjectID].empty = 0;
f010722d:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f0107233:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107236:	89 d0                	mov    %edx,%eax
f0107238:	c1 e0 02             	shl    $0x2,%eax
f010723b:	01 d0                	add    %edx,%eax
f010723d:	c1 e0 02             	shl    $0x2,%eax
f0107240:	01 d0                	add    %edx,%eax
f0107242:	c1 e0 02             	shl    $0x2,%eax
f0107245:	01 c8                	add    %ecx,%eax
f0107247:	c6 40 4d 00          	movb   $0x0,0x4d(%eax)

#if USE_KHEAP
	{
		shares[sharedObjectID].framesStorage = create_frames_storage();
f010724b:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f0107251:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107254:	89 d0                	mov    %edx,%eax
f0107256:	c1 e0 02             	shl    $0x2,%eax
f0107259:	01 d0                	add    %edx,%eax
f010725b:	c1 e0 02             	shl    $0x2,%eax
f010725e:	01 d0                	add    %edx,%eax
f0107260:	c1 e0 02             	shl    $0x2,%eax
f0107263:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
f0107266:	e8 97 01 00 00       	call   f0107402 <create_frames_storage>
f010726b:	89 43 50             	mov    %eax,0x50(%ebx)
	}
#endif
	memset(shares[sharedObjectID].framesStorage, 0, PAGE_SIZE);
f010726e:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f0107274:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107277:	89 d0                	mov    %edx,%eax
f0107279:	c1 e0 02             	shl    $0x2,%eax
f010727c:	01 d0                	add    %edx,%eax
f010727e:	c1 e0 02             	shl    $0x2,%eax
f0107281:	01 d0                	add    %edx,%eax
f0107283:	c1 e0 02             	shl    $0x2,%eax
f0107286:	01 c8                	add    %ecx,%eax
f0107288:	8b 40 50             	mov    0x50(%eax),%eax
f010728b:	83 ec 04             	sub    $0x4,%esp
f010728e:	68 00 10 00 00       	push   $0x1000
f0107293:	6a 00                	push   $0x0
f0107295:	50                   	push   %eax
f0107296:	e8 36 a8 02 00       	call   f0131ad1 <memset>
f010729b:	83 c4 10             	add    $0x10,%esp

	return sharedObjectID;
f010729e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01072a1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01072a4:	c9                   	leave  
f01072a5:	c3                   	ret    

f01072a6 <get_share_object_ID>:
//Search for the given shared object in the "shares" array
//Return:
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
f01072a6:	55                   	push   %ebp
f01072a7:	89 e5                	mov    %esp,%ebp
f01072a9:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f01072ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(; i< MAX_SHARES; ++i)
f01072b3:	eb 7b                	jmp    f0107330 <get_share_object_ID+0x8a>
	{
		if (shares[i].empty)
f01072b5:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f01072bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072be:	89 d0                	mov    %edx,%eax
f01072c0:	c1 e0 02             	shl    $0x2,%eax
f01072c3:	01 d0                	add    %edx,%eax
f01072c5:	c1 e0 02             	shl    $0x2,%eax
f01072c8:	01 d0                	add    %edx,%eax
f01072ca:	c1 e0 02             	shl    $0x2,%eax
f01072cd:	01 c8                	add    %ecx,%eax
f01072cf:	8a 40 4d             	mov    0x4d(%eax),%al
f01072d2:	84 c0                	test   %al,%al
f01072d4:	75 56                	jne    f010732c <get_share_object_ID+0x86>
			continue;

		//cprintf("shared var name = %s compared with %s\n", name, shares[i].name);
		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
f01072d6:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f01072dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072df:	89 d0                	mov    %edx,%eax
f01072e1:	c1 e0 02             	shl    $0x2,%eax
f01072e4:	01 d0                	add    %edx,%eax
f01072e6:	c1 e0 02             	shl    $0x2,%eax
f01072e9:	01 d0                	add    %edx,%eax
f01072eb:	c1 e0 02             	shl    $0x2,%eax
f01072ee:	01 c8                	add    %ecx,%eax
f01072f0:	8b 00                	mov    (%eax),%eax
f01072f2:	3b 45 08             	cmp    0x8(%ebp),%eax
f01072f5:	75 36                	jne    f010732d <get_share_object_ID+0x87>
f01072f7:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f01072fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107300:	89 d0                	mov    %edx,%eax
f0107302:	c1 e0 02             	shl    $0x2,%eax
f0107305:	01 d0                	add    %edx,%eax
f0107307:	c1 e0 02             	shl    $0x2,%eax
f010730a:	01 d0                	add    %edx,%eax
f010730c:	c1 e0 02             	shl    $0x2,%eax
f010730f:	01 c8                	add    %ecx,%eax
f0107311:	83 c0 04             	add    $0x4,%eax
f0107314:	83 ec 08             	sub    $0x8,%esp
f0107317:	50                   	push   %eax
f0107318:	ff 75 0c             	pushl  0xc(%ebp)
f010731b:	e8 cf a6 02 00       	call   f01319ef <strcmp>
f0107320:	83 c4 10             	add    $0x10,%esp
f0107323:	85 c0                	test   %eax,%eax
f0107325:	75 06                	jne    f010732d <get_share_object_ID+0x87>
		{
			//cprintf("%s found\n", name);
			return i;
f0107327:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010732a:	eb 19                	jmp    f0107345 <get_share_object_ID+0x9f>
	int i=0;

	for(; i< MAX_SHARES; ++i)
	{
		if (shares[i].empty)
			continue;
f010732c:	90                   	nop
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
	int i=0;

	for(; i< MAX_SHARES; ++i)
f010732d:	ff 45 f4             	incl   -0xc(%ebp)
f0107330:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107333:	a1 28 ad 89 f0       	mov    0xf089ad28,%eax
f0107338:	39 c2                	cmp    %eax,%edx
f010733a:	0f 82 75 ff ff ff    	jb     f01072b5 <get_share_object_ID+0xf>
		{
			//cprintf("%s found\n", name);
			return i;
		}
	}
	return E_SHARED_MEM_NOT_EXISTS;
f0107340:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
f0107345:	c9                   	leave  
f0107346:	c3                   	ret    

f0107347 <free_share_object>:
//delete the given sharedObjectID from the "shares" array
//Return:
//	a) 0 if succeed
//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
int free_share_object(uint32 sharedObjectID)
{
f0107347:	55                   	push   %ebp
f0107348:	89 e5                	mov    %esp,%ebp
f010734a:	83 ec 08             	sub    $0x8,%esp
	if (sharedObjectID >= MAX_SHARES)
f010734d:	a1 28 ad 89 f0       	mov    0xf089ad28,%eax
f0107352:	39 45 08             	cmp    %eax,0x8(%ebp)
f0107355:	72 0a                	jb     f0107361 <free_share_object+0x1a>
		return E_SHARED_MEM_NOT_EXISTS;
f0107357:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f010735c:	e9 9f 00 00 00       	jmp    f0107400 <free_share_object+0xb9>

	//panic("deleteSharedObject: not implemented yet");
	clear_frames_storage(shares[sharedObjectID].framesStorage);
f0107361:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f0107367:	8b 55 08             	mov    0x8(%ebp),%edx
f010736a:	89 d0                	mov    %edx,%eax
f010736c:	c1 e0 02             	shl    $0x2,%eax
f010736f:	01 d0                	add    %edx,%eax
f0107371:	c1 e0 02             	shl    $0x2,%eax
f0107374:	01 d0                	add    %edx,%eax
f0107376:	c1 e0 02             	shl    $0x2,%eax
f0107379:	01 c8                	add    %ecx,%eax
f010737b:	8b 40 50             	mov    0x50(%eax),%eax
f010737e:	83 ec 0c             	sub    $0xc,%esp
f0107381:	50                   	push   %eax
f0107382:	e8 52 01 00 00       	call   f01074d9 <clear_frames_storage>
f0107387:	83 c4 10             	add    $0x10,%esp
#if USE_KHEAP
	kfree(shares[sharedObjectID].framesStorage);
f010738a:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f0107390:	8b 55 08             	mov    0x8(%ebp),%edx
f0107393:	89 d0                	mov    %edx,%eax
f0107395:	c1 e0 02             	shl    $0x2,%eax
f0107398:	01 d0                	add    %edx,%eax
f010739a:	c1 e0 02             	shl    $0x2,%eax
f010739d:	01 d0                	add    %edx,%eax
f010739f:	c1 e0 02             	shl    $0x2,%eax
f01073a2:	01 c8                	add    %ecx,%eax
f01073a4:	8b 40 50             	mov    0x50(%eax),%eax
f01073a7:	83 ec 0c             	sub    $0xc,%esp
f01073aa:	50                   	push   %eax
f01073ab:	e8 a6 0a 00 00       	call   f0107e56 <kfree>
f01073b0:	83 c4 10             	add    $0x10,%esp
#endif
	memset(&(shares[sharedObjectID]), 0, sizeof(struct Share));
f01073b3:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f01073b9:	8b 55 08             	mov    0x8(%ebp),%edx
f01073bc:	89 d0                	mov    %edx,%eax
f01073be:	c1 e0 02             	shl    $0x2,%eax
f01073c1:	01 d0                	add    %edx,%eax
f01073c3:	c1 e0 02             	shl    $0x2,%eax
f01073c6:	01 d0                	add    %edx,%eax
f01073c8:	c1 e0 02             	shl    $0x2,%eax
f01073cb:	01 c8                	add    %ecx,%eax
f01073cd:	83 ec 04             	sub    $0x4,%esp
f01073d0:	6a 54                	push   $0x54
f01073d2:	6a 00                	push   $0x0
f01073d4:	50                   	push   %eax
f01073d5:	e8 f7 a6 02 00       	call   f0131ad1 <memset>
f01073da:	83 c4 10             	add    $0x10,%esp
	shares[sharedObjectID].empty = 1;
f01073dd:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f01073e3:	8b 55 08             	mov    0x8(%ebp),%edx
f01073e6:	89 d0                	mov    %edx,%eax
f01073e8:	c1 e0 02             	shl    $0x2,%eax
f01073eb:	01 d0                	add    %edx,%eax
f01073ed:	c1 e0 02             	shl    $0x2,%eax
f01073f0:	01 d0                	add    %edx,%eax
f01073f2:	c1 e0 02             	shl    $0x2,%eax
f01073f5:	01 c8                	add    %ecx,%eax
f01073f7:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)

	return 0;
f01073fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0107400:	c9                   	leave  
f0107401:	c3                   	ret    

f0107402 <create_frames_storage>:
//===========================
// [5] Create frames_storage:
//===========================
// if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f0107402:	55                   	push   %ebp
f0107403:	89 e5                	mov    %esp,%ebp
f0107405:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = kmalloc(PAGE_SIZE);
f0107408:	83 ec 0c             	sub    $0xc,%esp
f010740b:	68 00 10 00 00       	push   $0x1000
f0107410:	e8 76 09 00 00       	call   f0107d8b <kmalloc>
f0107415:	83 c4 10             	add    $0x10,%esp
f0107418:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f010741b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010741f:	75 17                	jne    f0107438 <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0107421:	83 ec 04             	sub    $0x4,%esp
f0107424:	68 15 68 13 f0       	push   $0xf0136815
f0107429:	68 a5 00 00 00       	push   $0xa5
f010742e:	68 f4 67 13 f0       	push   $0xf01367f4
f0107433:	e8 cd 8d ff ff       	call   f0100205 <_panic>
	}
	return frames_storage;
f0107438:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010743b:	c9                   	leave  
f010743c:	c3                   	ret    

f010743d <add_frame_to_storage>:
//===========================
// [6] Add frame to storage:
//===========================
// Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct FrameInfo* ptr_frame_info, uint32 index)
{
f010743d:	55                   	push   %ebp
f010743e:	89 e5                	mov    %esp,%ebp
f0107440:	53                   	push   %ebx
f0107441:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f0107444:	8b 45 10             	mov    0x10(%ebp),%eax
f0107447:	c1 e0 0c             	shl    $0xc,%eax
f010744a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage,  va, &ptr_page_table);
f010744d:	83 ec 04             	sub    $0x4,%esp
f0107450:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107453:	50                   	push   %eax
f0107454:	ff 75 f4             	pushl  -0xc(%ebp)
f0107457:	ff 75 08             	pushl  0x8(%ebp)
f010745a:	e8 52 f6 ff ff       	call   f0106ab1 <get_page_table>
f010745f:	83 c4 10             	add    $0x10,%esp
f0107462:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f0107465:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0107469:	75 14                	jne    f010747f <add_frame_to_storage+0x42>
	{
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
f010746b:	83 ec 08             	sub    $0x8,%esp
f010746e:	ff 75 f4             	pushl  -0xc(%ebp)
f0107471:	ff 75 08             	pushl  0x8(%ebp)
f0107474:	e8 8e f7 ff ff       	call   f0106c07 <create_page_table>
f0107479:	83 c4 10             	add    $0x10,%esp
f010747c:	89 45 ec             	mov    %eax,-0x14(%ebp)
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);

		}
#endif
	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f010747f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107482:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107485:	c1 ea 0c             	shr    $0xc,%edx
f0107488:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010748e:	c1 e2 02             	shl    $0x2,%edx
f0107491:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f0107494:	83 ec 0c             	sub    $0xc,%esp
f0107497:	ff 75 0c             	pushl  0xc(%ebp)
f010749a:	e8 4b fc ff ff       	call   f01070ea <to_physical_address>
f010749f:	83 c4 10             	add    $0x10,%esp
f01074a2:	83 c8 01             	or     $0x1,%eax
f01074a5:	89 03                	mov    %eax,(%ebx)
}
f01074a7:	90                   	nop
f01074a8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01074ab:	c9                   	leave  
f01074ac:	c3                   	ret    

f01074ad <get_frame_from_storage>:
//===========================
// [7] Get frame from storage:
//===========================
// Get a frame info from the storage of frames at the given index
inline struct FrameInfo* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f01074ad:	55                   	push   %ebp
f01074ae:	89 e5                	mov    %esp,%ebp
f01074b0:	83 ec 18             	sub    $0x18,%esp
	struct FrameInfo* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f01074b3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01074b6:	c1 e0 0c             	shl    $0xc,%eax
f01074b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage,  va, &ptr_page_table);
f01074bc:	83 ec 04             	sub    $0x4,%esp
f01074bf:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01074c2:	50                   	push   %eax
f01074c3:	ff 75 f4             	pushl  -0xc(%ebp)
f01074c6:	ff 75 08             	pushl  0x8(%ebp)
f01074c9:	e8 38 f9 ff ff       	call   f0106e06 <get_frame_info>
f01074ce:	83 c4 10             	add    $0x10,%esp
f01074d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f01074d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01074d7:	c9                   	leave  
f01074d8:	c3                   	ret    

f01074d9 <clear_frames_storage>:

//===========================
// [8] Clear the frames_storage:
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
f01074d9:	55                   	push   %ebp
f01074da:	89 e5                	mov    %esp,%ebp
f01074dc:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f01074df:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f01074e6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01074ed:	eb 5b                	jmp    f010754a <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f01074ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074f2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01074f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01074fc:	01 d0                	add    %edx,%eax
f01074fe:	8b 00                	mov    (%eax),%eax
f0107500:	85 c0                	test   %eax,%eax
f0107502:	74 43                	je     f0107547 <clear_frames_storage+0x6e>
		{
#if USE_KHEAP
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
f0107504:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107507:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010750e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107511:	01 d0                	add    %edx,%eax
f0107513:	8b 00                	mov    (%eax),%eax
f0107515:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010751a:	83 ec 0c             	sub    $0xc,%esp
f010751d:	50                   	push   %eax
f010751e:	e8 5a 0a 00 00       	call   f0107f7d <kheap_virtual_address>
f0107523:	83 c4 10             	add    $0x10,%esp
f0107526:	83 ec 0c             	sub    $0xc,%esp
f0107529:	50                   	push   %eax
f010752a:	e8 27 09 00 00       	call   f0107e56 <kfree>
f010752f:	83 c4 10             	add    $0x10,%esp
#else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
			}
#endif
			frames_storage[i] = 0;
f0107532:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107535:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010753c:	8b 45 08             	mov    0x8(%ebp),%eax
f010753f:	01 d0                	add    %edx,%eax
f0107541:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107547:	ff 45 f4             	incl   -0xc(%ebp)
f010754a:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0107551:	7e 9c                	jle    f01074ef <clear_frames_storage+0x16>
			}
#endif
			frames_storage[i] = 0;
		}
	}
}
f0107553:	90                   	nop
f0107554:	c9                   	leave  
f0107555:	c3                   	ret    

f0107556 <getSizeOfSharedObject>:

//==============================
// [9] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f0107556:	55                   	push   %ebp
f0107557:	89 e5                	mov    %esp,%ebp
f0107559:	83 ec 18             	sub    $0x18,%esp
	// RETURN:
	//	a) If found, return size of shared object
	//	b) Else, return E_SHARED_MEM_NOT_EXISTS
	//

	int shareObjectID = get_share_object_ID(ownerID, shareName);
f010755c:	83 ec 08             	sub    $0x8,%esp
f010755f:	ff 75 0c             	pushl  0xc(%ebp)
f0107562:	ff 75 08             	pushl  0x8(%ebp)
f0107565:	e8 3c fd ff ff       	call   f01072a6 <get_share_object_ID>
f010756a:	83 c4 10             	add    $0x10,%esp
f010756d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shareObjectID == E_SHARED_MEM_NOT_EXISTS)
f0107570:	83 7d f4 f0          	cmpl   $0xfffffff0,-0xc(%ebp)
f0107574:	75 07                	jne    f010757d <getSizeOfSharedObject+0x27>
		return E_SHARED_MEM_NOT_EXISTS;
f0107576:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f010757b:	eb 1d                	jmp    f010759a <getSizeOfSharedObject+0x44>
	else
		return shares[shareObjectID].size;
f010757d:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f0107583:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107586:	89 d0                	mov    %edx,%eax
f0107588:	c1 e0 02             	shl    $0x2,%eax
f010758b:	01 d0                	add    %edx,%eax
f010758d:	c1 e0 02             	shl    $0x2,%eax
f0107590:	01 d0                	add    %edx,%eax
f0107592:	c1 e0 02             	shl    $0x2,%eax
f0107595:	01 c8                	add    %ecx,%eax
f0107597:	8b 40 44             	mov    0x44(%eax),%eax

	return 0;
}
f010759a:	c9                   	leave  
f010759b:	c3                   	ret    

f010759c <createSharedObject>:

//=========================
// [1] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010759c:	55                   	push   %ebp
f010759d:	89 e5                	mov    %esp,%ebp
f010759f:	56                   	push   %esi
f01075a0:	53                   	push   %ebx
f01075a1:	83 ec 40             	sub    $0x40,%esp
f01075a4:	8b 45 14             	mov    0x14(%ebp),%eax
f01075a7:	88 45 c4             	mov    %al,-0x3c(%ebp)
	// and return the ShareObjectID
	// RETURN:
	//	a) ShareObjectID (its index in "shares" array) if success
	//	b) E_SHARED_MEM_EXISTS if the shared object already exists
	//	c) E_NO_SHARE if the number of shared objects reaches max "MAX_SHARES"
	struct Env* myenv = curenv; //The calling environment
f01075aa:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f01075af:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//Check if the shared object already exists
	int shared_Result = get_share_object_ID(ownerID , shareName);
f01075b2:	83 ec 08             	sub    $0x8,%esp
f01075b5:	ff 75 0c             	pushl  0xc(%ebp)
f01075b8:	ff 75 08             	pushl  0x8(%ebp)
f01075bb:	e8 e6 fc ff ff       	call   f01072a6 <get_share_object_ID>
f01075c0:	83 c4 10             	add    $0x10,%esp
f01075c3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (shared_Result != E_SHARED_MEM_NOT_EXISTS)
f01075c6:	83 7d e4 f0          	cmpl   $0xfffffff0,-0x1c(%ebp)
f01075ca:	74 0a                	je     f01075d6 <createSharedObject+0x3a>
		return E_SHARED_MEM_EXISTS;
f01075cc:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
f01075d1:	e9 d4 01 00 00       	jmp    f01077aa <createSharedObject+0x20e>

	//Check if any shared object available
	struct Share * allocatedObject = NULL;
f01075d6:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	int sharedObj_index = allocate_share_object(&allocatedObject);
f01075dd:	83 ec 0c             	sub    $0xc,%esp
f01075e0:	8d 45 cc             	lea    -0x34(%ebp),%eax
f01075e3:	50                   	push   %eax
f01075e4:	e8 c5 fb ff ff       	call   f01071ae <allocate_share_object>
f01075e9:	83 c4 10             	add    $0x10,%esp
f01075ec:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if(sharedObj_index == E_NO_SHARE)
f01075ef:	83 7d e0 f2          	cmpl   $0xfffffff2,-0x20(%ebp)
f01075f3:	75 0a                	jne    f01075ff <createSharedObject+0x63>
		return E_NO_SHARE;
f01075f5:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f01075fa:	e9 ab 01 00 00       	jmp    f01077aa <createSharedObject+0x20e>

	//Allocate Frames for each page
	uint32 va = (uint32) virtual_address;
f01075ff:	8b 45 18             	mov    0x18(%ebp),%eax
f0107602:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 Rounded_Size = ROUNDUP(size,PAGE_SIZE);
f0107605:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f010760c:	8b 55 10             	mov    0x10(%ebp),%edx
f010760f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0107612:	01 d0                	add    %edx,%eax
f0107614:	48                   	dec    %eax
f0107615:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0107618:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010761b:	ba 00 00 00 00       	mov    $0x0,%edx
f0107620:	f7 75 dc             	divl   -0x24(%ebp)
f0107623:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0107626:	29 d0                	sub    %edx,%eax
f0107628:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	struct FrameInfo *sb_chunck;
	int j = 0;
f010762b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for(uint32 i = 0; i < Rounded_Size; i += PAGE_SIZE)
f0107632:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0107639:	e9 90 00 00 00       	jmp    f01076ce <createSharedObject+0x132>
	{
		sb_chunck= NULL;
f010763e:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
		int result= allocate_frame(&sb_chunck);
f0107645:	83 ec 0c             	sub    $0xc,%esp
f0107648:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010764b:	50                   	push   %eax
f010764c:	e8 a1 f2 ff ff       	call   f01068f2 <allocate_frame>
f0107651:	83 c4 10             	add    $0x10,%esp
f0107654:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if(result != E_NO_MEM)
f0107657:	83 7d d0 fc          	cmpl   $0xfffffffc,-0x30(%ebp)
f010765b:	74 60                	je     f01076bd <createSharedObject+0x121>
		{
			sb_chunck->va = va;
f010765d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0107660:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107663:	89 50 0c             	mov    %edx,0xc(%eax)
			map_frame(curenv->env_page_directory ,sb_chunck ,va, PERM_WRITEABLE | PERM_USER);
f0107666:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0107669:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010766e:	8b 40 5c             	mov    0x5c(%eax),%eax
f0107671:	6a 06                	push   $0x6
f0107673:	ff 75 f4             	pushl  -0xc(%ebp)
f0107676:	52                   	push   %edx
f0107677:	50                   	push   %eax
f0107678:	e8 c4 f6 ff ff       	call   f0106d41 <map_frame>
f010767d:	83 c4 10             	add    $0x10,%esp
			add_frame_to_storage(shares[sharedObj_index].framesStorage , sb_chunck , j);
f0107680:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0107683:	8b 4d c8             	mov    -0x38(%ebp),%ecx
f0107686:	8b 35 ec ac 89 f0    	mov    0xf089acec,%esi
f010768c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010768f:	89 d0                	mov    %edx,%eax
f0107691:	c1 e0 02             	shl    $0x2,%eax
f0107694:	01 d0                	add    %edx,%eax
f0107696:	c1 e0 02             	shl    $0x2,%eax
f0107699:	01 d0                	add    %edx,%eax
f010769b:	c1 e0 02             	shl    $0x2,%eax
f010769e:	01 f0                	add    %esi,%eax
f01076a0:	8b 40 50             	mov    0x50(%eax),%eax
f01076a3:	83 ec 04             	sub    $0x4,%esp
f01076a6:	53                   	push   %ebx
f01076a7:	51                   	push   %ecx
f01076a8:	50                   	push   %eax
f01076a9:	e8 8f fd ff ff       	call   f010743d <add_frame_to_storage>
f01076ae:	83 c4 10             	add    $0x10,%esp
			j++;
f01076b1:	ff 45 f0             	incl   -0x10(%ebp)
			va += PAGE_SIZE;
f01076b4:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01076bb:	eb 0a                	jmp    f01076c7 <createSharedObject+0x12b>
		}
		else
			return -1;
f01076bd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01076c2:	e9 e3 00 00 00       	jmp    f01077aa <createSharedObject+0x20e>
	//Allocate Frames for each page
	uint32 va = (uint32) virtual_address;
	uint32 Rounded_Size = ROUNDUP(size,PAGE_SIZE);
	struct FrameInfo *sb_chunck;
	int j = 0;
	for(uint32 i = 0; i < Rounded_Size; i += PAGE_SIZE)
f01076c7:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f01076ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01076d1:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f01076d4:	0f 82 64 ff ff ff    	jb     f010763e <createSharedObject+0xa2>
		else
			return -1;
	}

	//Initialize the shared object infos
	shares[sharedObj_index].ownerID = ownerID;
f01076da:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f01076e0:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01076e3:	89 d0                	mov    %edx,%eax
f01076e5:	c1 e0 02             	shl    $0x2,%eax
f01076e8:	01 d0                	add    %edx,%eax
f01076ea:	c1 e0 02             	shl    $0x2,%eax
f01076ed:	01 d0                	add    %edx,%eax
f01076ef:	c1 e0 02             	shl    $0x2,%eax
f01076f2:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01076f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01076f8:	89 02                	mov    %eax,(%edx)
	strcpy(shares[sharedObj_index].name,shareName);
f01076fa:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f0107700:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0107703:	89 d0                	mov    %edx,%eax
f0107705:	c1 e0 02             	shl    $0x2,%eax
f0107708:	01 d0                	add    %edx,%eax
f010770a:	c1 e0 02             	shl    $0x2,%eax
f010770d:	01 d0                	add    %edx,%eax
f010770f:	c1 e0 02             	shl    $0x2,%eax
f0107712:	01 c8                	add    %ecx,%eax
f0107714:	83 c0 04             	add    $0x4,%eax
f0107717:	83 ec 08             	sub    $0x8,%esp
f010771a:	ff 75 0c             	pushl  0xc(%ebp)
f010771d:	50                   	push   %eax
f010771e:	e8 0f a2 02 00       	call   f0131932 <strcpy>
f0107723:	83 c4 10             	add    $0x10,%esp
	shares[sharedObj_index].references = 1;
f0107726:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f010772c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010772f:	89 d0                	mov    %edx,%eax
f0107731:	c1 e0 02             	shl    $0x2,%eax
f0107734:	01 d0                	add    %edx,%eax
f0107736:	c1 e0 02             	shl    $0x2,%eax
f0107739:	01 d0                	add    %edx,%eax
f010773b:	c1 e0 02             	shl    $0x2,%eax
f010773e:	01 c8                	add    %ecx,%eax
f0107740:	c7 40 48 01 00 00 00 	movl   $0x1,0x48(%eax)
	shares[sharedObj_index].size = size;
f0107747:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f010774d:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0107750:	89 d0                	mov    %edx,%eax
f0107752:	c1 e0 02             	shl    $0x2,%eax
f0107755:	01 d0                	add    %edx,%eax
f0107757:	c1 e0 02             	shl    $0x2,%eax
f010775a:	01 d0                	add    %edx,%eax
f010775c:	c1 e0 02             	shl    $0x2,%eax
f010775f:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107762:	8b 45 10             	mov    0x10(%ebp),%eax
f0107765:	89 42 44             	mov    %eax,0x44(%edx)
	shares[sharedObj_index].isWritable = isWritable;
f0107768:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f010776e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0107771:	89 d0                	mov    %edx,%eax
f0107773:	c1 e0 02             	shl    $0x2,%eax
f0107776:	01 d0                	add    %edx,%eax
f0107778:	c1 e0 02             	shl    $0x2,%eax
f010777b:	01 d0                	add    %edx,%eax
f010777d:	c1 e0 02             	shl    $0x2,%eax
f0107780:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107783:	8a 45 c4             	mov    -0x3c(%ebp),%al
f0107786:	88 42 4c             	mov    %al,0x4c(%edx)
	shares[sharedObj_index].empty = 0;
f0107789:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f010778f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0107792:	89 d0                	mov    %edx,%eax
f0107794:	c1 e0 02             	shl    $0x2,%eax
f0107797:	01 d0                	add    %edx,%eax
f0107799:	c1 e0 02             	shl    $0x2,%eax
f010779c:	01 d0                	add    %edx,%eax
f010779e:	c1 e0 02             	shl    $0x2,%eax
f01077a1:	01 c8                	add    %ecx,%eax
f01077a3:	c6 40 4d 00          	movb   $0x0,0x4d(%eax)
	return sharedObj_index;
f01077a7:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f01077aa:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01077ad:	5b                   	pop    %ebx
f01077ae:	5e                   	pop    %esi
f01077af:	5d                   	pop    %ebp
f01077b0:	c3                   	ret    

f01077b1 <getSharedObject>:

//======================
// [2] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f01077b1:	55                   	push   %ebp
f01077b2:	89 e5                	mov    %esp,%ebp
f01077b4:	53                   	push   %ebx
f01077b5:	83 ec 24             	sub    $0x24,%esp
	//TODO: [PROJECT MS3] [SHARING - KERNEL SIDE] getSharedObject()
	// your code is here, remove the panic and write your code
	//panic("getSharedObject() is not implemented yet...!!");

	struct Env* myenv = curenv; //The calling environment
f01077b8:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f01077bd:	89 45 ec             	mov    %eax,-0x14(%ebp)
	// 	and return the ShareObjectID
	// RETURN:
	//	a) sharedObjectID (its index in the array) if success
	//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists

	uint32 va = (uint32) virtual_address;
f01077c0:	8b 45 10             	mov    0x10(%ebp),%eax
f01077c3:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 shared_index = get_share_object_ID(ownerID,shareName);
f01077c6:	83 ec 08             	sub    $0x8,%esp
f01077c9:	ff 75 0c             	pushl  0xc(%ebp)
f01077cc:	ff 75 08             	pushl  0x8(%ebp)
f01077cf:	e8 d2 fa ff ff       	call   f01072a6 <get_share_object_ID>
f01077d4:	83 c4 10             	add    $0x10,%esp
f01077d7:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(shared_index == E_SHARED_MEM_NOT_EXISTS)
f01077da:	83 7d e8 f0          	cmpl   $0xfffffff0,-0x18(%ebp)
f01077de:	75 0a                	jne    f01077ea <getSharedObject+0x39>
		return E_SHARED_MEM_NOT_EXISTS;
f01077e0:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f01077e5:	e9 f4 00 00 00       	jmp    f01078de <getSharedObject+0x12d>

	int size_count = ROUNDUP(shares[shared_index].size,PAGE_SIZE) / PAGE_SIZE;
f01077ea:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f01077f1:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f01077f7:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01077fa:	89 d0                	mov    %edx,%eax
f01077fc:	c1 e0 02             	shl    $0x2,%eax
f01077ff:	01 d0                	add    %edx,%eax
f0107801:	c1 e0 02             	shl    $0x2,%eax
f0107804:	01 d0                	add    %edx,%eax
f0107806:	c1 e0 02             	shl    $0x2,%eax
f0107809:	01 c8                	add    %ecx,%eax
f010780b:	8b 40 44             	mov    0x44(%eax),%eax
f010780e:	89 c2                	mov    %eax,%edx
f0107810:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107813:	01 d0                	add    %edx,%eax
f0107815:	48                   	dec    %eax
f0107816:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0107819:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010781c:	ba 00 00 00 00       	mov    $0x0,%edx
f0107821:	f7 75 e4             	divl   -0x1c(%ebp)
f0107824:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107827:	29 d0                	sub    %edx,%eax
f0107829:	85 c0                	test   %eax,%eax
f010782b:	79 05                	jns    f0107832 <getSharedObject+0x81>
f010782d:	05 ff 0f 00 00       	add    $0xfff,%eax
f0107832:	c1 f8 0c             	sar    $0xc,%eax
f0107835:	89 45 dc             	mov    %eax,-0x24(%ebp)
	for(int index_of_page = 0; index_of_page < size_count; index_of_page++)
f0107838:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010783f:	e9 8b 00 00 00       	jmp    f01078cf <getSharedObject+0x11e>
	{
		struct FrameInfo* frame = get_frame_from_storage(shares[shared_index].framesStorage, index_of_page);
f0107844:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0107847:	8b 1d ec ac 89 f0    	mov    0xf089acec,%ebx
f010784d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107850:	89 d0                	mov    %edx,%eax
f0107852:	c1 e0 02             	shl    $0x2,%eax
f0107855:	01 d0                	add    %edx,%eax
f0107857:	c1 e0 02             	shl    $0x2,%eax
f010785a:	01 d0                	add    %edx,%eax
f010785c:	c1 e0 02             	shl    $0x2,%eax
f010785f:	01 d8                	add    %ebx,%eax
f0107861:	8b 40 50             	mov    0x50(%eax),%eax
f0107864:	83 ec 08             	sub    $0x8,%esp
f0107867:	51                   	push   %ecx
f0107868:	50                   	push   %eax
f0107869:	e8 3f fc ff ff       	call   f01074ad <get_frame_from_storage>
f010786e:	83 c4 10             	add    $0x10,%esp
f0107871:	89 45 d8             	mov    %eax,-0x28(%ebp)
		if(shares[shared_index].isWritable == 1)
f0107874:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f010787a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010787d:	89 d0                	mov    %edx,%eax
f010787f:	c1 e0 02             	shl    $0x2,%eax
f0107882:	01 d0                	add    %edx,%eax
f0107884:	c1 e0 02             	shl    $0x2,%eax
f0107887:	01 d0                	add    %edx,%eax
f0107889:	c1 e0 02             	shl    $0x2,%eax
f010788c:	01 c8                	add    %ecx,%eax
f010788e:	8a 40 4c             	mov    0x4c(%eax),%al
f0107891:	3c 01                	cmp    $0x1,%al
f0107893:	75 19                	jne    f01078ae <getSharedObject+0xfd>
			map_frame(myenv->env_page_directory, frame, va, PERM_WRITEABLE | PERM_USER | PERM_PRESENT);
f0107895:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107898:	8b 40 5c             	mov    0x5c(%eax),%eax
f010789b:	6a 07                	push   $0x7
f010789d:	ff 75 f4             	pushl  -0xc(%ebp)
f01078a0:	ff 75 d8             	pushl  -0x28(%ebp)
f01078a3:	50                   	push   %eax
f01078a4:	e8 98 f4 ff ff       	call   f0106d41 <map_frame>
f01078a9:	83 c4 10             	add    $0x10,%esp
f01078ac:	eb 17                	jmp    f01078c5 <getSharedObject+0x114>
		else
			map_frame(myenv->env_page_directory, frame, va, PERM_USER | PERM_PRESENT);
f01078ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01078b1:	8b 40 5c             	mov    0x5c(%eax),%eax
f01078b4:	6a 05                	push   $0x5
f01078b6:	ff 75 f4             	pushl  -0xc(%ebp)
f01078b9:	ff 75 d8             	pushl  -0x28(%ebp)
f01078bc:	50                   	push   %eax
f01078bd:	e8 7f f4 ff ff       	call   f0106d41 <map_frame>
f01078c2:	83 c4 10             	add    $0x10,%esp
		va += PAGE_SIZE;
f01078c5:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
	uint32 shared_index = get_share_object_ID(ownerID,shareName);
	if(shared_index == E_SHARED_MEM_NOT_EXISTS)
		return E_SHARED_MEM_NOT_EXISTS;

	int size_count = ROUNDUP(shares[shared_index].size,PAGE_SIZE) / PAGE_SIZE;
	for(int index_of_page = 0; index_of_page < size_count; index_of_page++)
f01078cc:	ff 45 f0             	incl   -0x10(%ebp)
f01078cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01078d2:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01078d5:	0f 8c 69 ff ff ff    	jl     f0107844 <getSharedObject+0x93>
			map_frame(myenv->env_page_directory, frame, va, PERM_WRITEABLE | PERM_USER | PERM_PRESENT);
		else
			map_frame(myenv->env_page_directory, frame, va, PERM_USER | PERM_PRESENT);
		va += PAGE_SIZE;
	}
	return shared_index;
f01078db:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f01078de:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01078e1:	c9                   	leave  
f01078e2:	c3                   	ret    

f01078e3 <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f01078e3:	55                   	push   %ebp
f01078e4:	89 e5                	mov    %esp,%ebp
f01078e6:	57                   	push   %edi
f01078e7:	56                   	push   %esi
f01078e8:	53                   	push   %ebx
f01078e9:	81 ec 8c 00 00 00    	sub    $0x8c,%esp
	//TODO: [PROJECT MS3 - BONUS] [SHARING - KERNEL SIDE] freeSharedObject()
	// your code is here, remove the panic and write your code
	//panic("freeSharedObject() is not implemented yet...!!");

	struct Env* myenv = curenv; //The calling environment
f01078ef:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f01078f4:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 check ;
	startVA= ROUNDDOWN(startVA,PAGE_SIZE);
f01078f7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01078fa:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01078fd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0107900:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107905:	89 45 0c             	mov    %eax,0xc(%ebp)
	int size_count = ROUNDUP(shares[sharedObjectID].size,PAGE_SIZE) / PAGE_SIZE;
f0107908:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f010790f:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f0107915:	8b 55 08             	mov    0x8(%ebp),%edx
f0107918:	89 d0                	mov    %edx,%eax
f010791a:	c1 e0 02             	shl    $0x2,%eax
f010791d:	01 d0                	add    %edx,%eax
f010791f:	c1 e0 02             	shl    $0x2,%eax
f0107922:	01 d0                	add    %edx,%eax
f0107924:	c1 e0 02             	shl    $0x2,%eax
f0107927:	01 c8                	add    %ecx,%eax
f0107929:	8b 40 44             	mov    0x44(%eax),%eax
f010792c:	89 c2                	mov    %eax,%edx
f010792e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0107931:	01 d0                	add    %edx,%eax
f0107933:	48                   	dec    %eax
f0107934:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0107937:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010793a:	ba 00 00 00 00       	mov    $0x0,%edx
f010793f:	f7 75 d0             	divl   -0x30(%ebp)
f0107942:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0107945:	29 d0                	sub    %edx,%eax
f0107947:	85 c0                	test   %eax,%eax
f0107949:	79 05                	jns    f0107950 <freeSharedObject+0x6d>
f010794b:	05 ff 0f 00 00       	add    $0xfff,%eax
f0107950:	c1 f8 0c             	sar    $0xc,%eax
f0107953:	89 45 c8             	mov    %eax,-0x38(%ebp)
	for(int index_of_page = 0; index_of_page < size_count; index_of_page++)
f0107956:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f010795d:	e9 eb 00 00 00       	jmp    f0107a4d <freeSharedObject+0x16a>
	{

		struct FrameInfo* frame = get_frame_from_storage(shares[index_of_page].framesStorage, index_of_page);
f0107962:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f0107965:	8b 1d ec ac 89 f0    	mov    0xf089acec,%ebx
f010796b:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010796e:	89 d0                	mov    %edx,%eax
f0107970:	c1 e0 02             	shl    $0x2,%eax
f0107973:	01 d0                	add    %edx,%eax
f0107975:	c1 e0 02             	shl    $0x2,%eax
f0107978:	01 d0                	add    %edx,%eax
f010797a:	c1 e0 02             	shl    $0x2,%eax
f010797d:	01 d8                	add    %ebx,%eax
f010797f:	8b 40 50             	mov    0x50(%eax),%eax
f0107982:	83 ec 08             	sub    $0x8,%esp
f0107985:	51                   	push   %ecx
f0107986:	50                   	push   %eax
f0107987:	e8 21 fb ff ff       	call   f01074ad <get_frame_from_storage>
f010798c:	83 c4 10             	add    $0x10,%esp
f010798f:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		unmap_frame(curenv->env_page_directory,frame->va);
f0107992:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0107995:	8b 50 0c             	mov    0xc(%eax),%edx
f0107998:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010799d:	8b 40 5c             	mov    0x5c(%eax),%eax
f01079a0:	83 ec 08             	sub    $0x8,%esp
f01079a3:	52                   	push   %edx
f01079a4:	50                   	push   %eax
f01079a5:	e8 cc f4 ff ff       	call   f0106e76 <unmap_frame>
f01079aa:	83 c4 10             	add    $0x10,%esp
		uint32* ptr_page = NULL;
f01079ad:	c7 85 68 ff ff ff 00 	movl   $0x0,-0x98(%ebp)
f01079b4:	00 00 00 
		get_page_table(curenv->env_page_directory,(uint32)startVA,&ptr_page);
f01079b7:	8b 55 0c             	mov    0xc(%ebp),%edx
f01079ba:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f01079bf:	8b 40 5c             	mov    0x5c(%eax),%eax
f01079c2:	83 ec 04             	sub    $0x4,%esp
f01079c5:	8d 8d 68 ff ff ff    	lea    -0x98(%ebp),%ecx
f01079cb:	51                   	push   %ecx
f01079cc:	52                   	push   %edx
f01079cd:	50                   	push   %eax
f01079ce:	e8 de f0 ff ff       	call   f0106ab1 <get_page_table>
f01079d3:	83 c4 10             	add    $0x10,%esp

		if (ptr_page != NULL)
f01079d6:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01079dc:	85 c0                	test   %eax,%eax
f01079de:	74 63                	je     f0107a43 <freeSharedObject+0x160>
		{
			int index = 0;
f01079e0:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			do
			{
				if(ptr_page[index] != 0)
f01079e7:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01079ed:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01079f0:	c1 e2 02             	shl    $0x2,%edx
f01079f3:	01 d0                	add    %edx,%eax
f01079f5:	8b 00                	mov    (%eax),%eax
f01079f7:	85 c0                	test   %eax,%eax
f01079f9:	74 09                	je     f0107a04 <freeSharedObject+0x121>
				{
					check = 1;
f01079fb:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
					break;
f0107a02:	eb 0f                	jmp    f0107a13 <freeSharedObject+0x130>
				}
				index ++;
f0107a04:	ff 45 dc             	incl   -0x24(%ebp)
			}while((index % 1024) != 0);
f0107a07:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0107a0a:	25 ff 03 00 00       	and    $0x3ff,%eax
f0107a0f:	85 c0                	test   %eax,%eax
f0107a11:	75 d4                	jne    f01079e7 <freeSharedObject+0x104>
			if(check == 0)
f0107a13:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0107a17:	75 2a                	jne    f0107a43 <freeSharedObject+0x160>
			{
				pd_clear_page_dir_entry(curenv->env_page_directory,(uint32) startVA);
f0107a19:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107a1c:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f0107a21:	8b 40 5c             	mov    0x5c(%eax),%eax
f0107a24:	83 ec 08             	sub    $0x8,%esp
f0107a27:	52                   	push   %edx
f0107a28:	50                   	push   %eax
f0107a29:	e8 c1 08 00 00       	call   f01082ef <pd_clear_page_dir_entry>
f0107a2e:	83 c4 10             	add    $0x10,%esp
				kfree((void *)ptr_page);
f0107a31:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0107a37:	83 ec 0c             	sub    $0xc,%esp
f0107a3a:	50                   	push   %eax
f0107a3b:	e8 16 04 00 00       	call   f0107e56 <kfree>
f0107a40:	83 c4 10             	add    $0x10,%esp
			}
		}
		startVA += PAGE_SIZE;
f0107a43:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)

	struct Env* myenv = curenv; //The calling environment
	uint32 check ;
	startVA= ROUNDDOWN(startVA,PAGE_SIZE);
	int size_count = ROUNDUP(shares[sharedObjectID].size,PAGE_SIZE) / PAGE_SIZE;
	for(int index_of_page = 0; index_of_page < size_count; index_of_page++)
f0107a4a:	ff 45 e0             	incl   -0x20(%ebp)
f0107a4d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107a50:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0107a53:	0f 8c 09 ff ff ff    	jl     f0107962 <freeSharedObject+0x7f>
			}
		}
		startVA += PAGE_SIZE;

	}
	shares[sharedObjectID].references -- ;
f0107a59:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f0107a5f:	8b 55 08             	mov    0x8(%ebp),%edx
f0107a62:	89 d0                	mov    %edx,%eax
f0107a64:	c1 e0 02             	shl    $0x2,%eax
f0107a67:	01 d0                	add    %edx,%eax
f0107a69:	c1 e0 02             	shl    $0x2,%eax
f0107a6c:	01 d0                	add    %edx,%eax
f0107a6e:	c1 e0 02             	shl    $0x2,%eax
f0107a71:	01 c8                	add    %ecx,%eax
f0107a73:	8b 50 48             	mov    0x48(%eax),%edx
f0107a76:	4a                   	dec    %edx
f0107a77:	89 50 48             	mov    %edx,0x48(%eax)
	struct Share Last_element;
	Last_element = shares[MAX_SHARES-1];
f0107a7a:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f0107a80:	8b 15 28 ad 89 f0    	mov    0xf089ad28,%edx
f0107a86:	89 d0                	mov    %edx,%eax
f0107a88:	c1 e0 02             	shl    $0x2,%eax
f0107a8b:	01 d0                	add    %edx,%eax
f0107a8d:	c1 e0 02             	shl    $0x2,%eax
f0107a90:	01 d0                	add    %edx,%eax
f0107a92:	c1 e0 02             	shl    $0x2,%eax
f0107a95:	83 e8 54             	sub    $0x54,%eax
f0107a98:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107a9b:	8d 85 6c ff ff ff    	lea    -0x94(%ebp),%eax
f0107aa1:	89 d3                	mov    %edx,%ebx
f0107aa3:	ba 15 00 00 00       	mov    $0x15,%edx
f0107aa8:	89 c7                	mov    %eax,%edi
f0107aaa:	89 de                	mov    %ebx,%esi
f0107aac:	89 d1                	mov    %edx,%ecx
f0107aae:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 y;
	if(shares[sharedObjectID].name == Last_element.name )
f0107ab0:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f0107ab6:	8b 55 08             	mov    0x8(%ebp),%edx
f0107ab9:	89 d0                	mov    %edx,%eax
f0107abb:	c1 e0 02             	shl    $0x2,%eax
f0107abe:	01 d0                	add    %edx,%eax
f0107ac0:	c1 e0 02             	shl    $0x2,%eax
f0107ac3:	01 d0                	add    %edx,%eax
f0107ac5:	c1 e0 02             	shl    $0x2,%eax
f0107ac8:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107acb:	8d 85 6c ff ff ff    	lea    -0x94(%ebp),%eax
f0107ad1:	39 c2                	cmp    %eax,%edx
f0107ad3:	75 1d                	jne    f0107af2 <freeSharedObject+0x20f>
	{
		y = free_share_object(sharedObjectID);
f0107ad5:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ad8:	83 ec 0c             	sub    $0xc,%esp
f0107adb:	50                   	push   %eax
f0107adc:	e8 66 f8 ff ff       	call   f0107347 <free_share_object>
f0107ae1:	83 c4 10             	add    $0x10,%esp
f0107ae4:	89 45 c0             	mov    %eax,-0x40(%ebp)
		if (y == E_SHARED_MEM_NOT_EXISTS )
f0107ae7:	83 7d c0 f0          	cmpl   $0xfffffff0,-0x40(%ebp)
f0107aeb:	75 05                	jne    f0107af2 <freeSharedObject+0x20f>
			return y;
f0107aed:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0107af0:	eb 05                	jmp    f0107af7 <freeSharedObject+0x214>
	}
	return 0;
f0107af2:	b8 00 00 00 00       	mov    $0x0,%eax
	//	2) Unmap it from the current environment "myenv"
	//	3) If one or more table becomes empty, remove it
	//	4) Update references
	//	5) If this is the last share, delete the share object (use free_share_object())
	//	6) Flush the cache "tlbflush()"
}
f0107af7:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0107afa:	5b                   	pop    %ebx
f0107afb:	5e                   	pop    %esi
f0107afc:	5f                   	pop    %edi
f0107afd:	5d                   	pop    %ebp
f0107afe:	c3                   	ret    

f0107aff <isKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0107aff:	55                   	push   %ebp
f0107b00:	89 e5                	mov    %esp,%ebp
f0107b02:	a1 5c ad 89 f0       	mov    0xf089ad5c,%eax
f0107b07:	83 f8 01             	cmp    $0x1,%eax
f0107b0a:	75 04                	jne    f0107b10 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0107b0c:	b0 01                	mov    $0x1,%al
f0107b0e:	eb 02                	jmp    f0107b12 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0107b10:	b0 00                	mov    $0x0,%al
f0107b12:	5d                   	pop    %ebp
f0107b13:	c3                   	ret    

f0107b14 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0107b14:	55                   	push   %ebp
f0107b15:	89 e5                	mov    %esp,%ebp
f0107b17:	a1 5c ad 89 f0       	mov    0xf089ad5c,%eax
f0107b1c:	83 f8 02             	cmp    $0x2,%eax
f0107b1f:	75 04                	jne    f0107b25 <isKHeapPlacementStrategyBESTFIT+0x11>
f0107b21:	b0 01                	mov    $0x1,%al
f0107b23:	eb 02                	jmp    f0107b27 <isKHeapPlacementStrategyBESTFIT+0x13>
f0107b25:	b0 00                	mov    $0x0,%al
f0107b27:	5d                   	pop    %ebp
f0107b28:	c3                   	ret    

f0107b29 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0107b29:	55                   	push   %ebp
f0107b2a:	89 e5                	mov    %esp,%ebp
f0107b2c:	a1 5c ad 89 f0       	mov    0xf089ad5c,%eax
f0107b31:	83 f8 03             	cmp    $0x3,%eax
f0107b34:	75 04                	jne    f0107b3a <isKHeapPlacementStrategyNEXTFIT+0x11>
f0107b36:	b0 01                	mov    $0x1,%al
f0107b38:	eb 02                	jmp    f0107b3c <isKHeapPlacementStrategyNEXTFIT+0x13>
f0107b3a:	b0 00                	mov    $0x0,%al
f0107b3c:	5d                   	pop    %ebp
f0107b3d:	c3                   	ret    

f0107b3e <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0107b3e:	55                   	push   %ebp
f0107b3f:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0107b41:	8b 45 08             	mov    0x8(%ebp),%eax
f0107b44:	8b 15 54 ad 89 f0    	mov    0xf089ad54,%edx
f0107b4a:	29 d0                	sub    %edx,%eax
f0107b4c:	c1 f8 03             	sar    $0x3,%eax
f0107b4f:	89 c2                	mov    %eax,%edx
f0107b51:	89 d0                	mov    %edx,%eax
f0107b53:	c1 e0 02             	shl    $0x2,%eax
f0107b56:	01 d0                	add    %edx,%eax
f0107b58:	c1 e0 02             	shl    $0x2,%eax
f0107b5b:	01 d0                	add    %edx,%eax
f0107b5d:	c1 e0 02             	shl    $0x2,%eax
f0107b60:	01 d0                	add    %edx,%eax
f0107b62:	89 c1                	mov    %eax,%ecx
f0107b64:	c1 e1 08             	shl    $0x8,%ecx
f0107b67:	01 c8                	add    %ecx,%eax
f0107b69:	89 c1                	mov    %eax,%ecx
f0107b6b:	c1 e1 10             	shl    $0x10,%ecx
f0107b6e:	01 c8                	add    %ecx,%eax
f0107b70:	01 c0                	add    %eax,%eax
f0107b72:	01 d0                	add    %edx,%eax
}
f0107b74:	5d                   	pop    %ebp
f0107b75:	c3                   	ret    

f0107b76 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107b76:	55                   	push   %ebp
f0107b77:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107b79:	ff 75 08             	pushl  0x8(%ebp)
f0107b7c:	e8 bd ff ff ff       	call   f0107b3e <to_frame_number>
f0107b81:	83 c4 04             	add    $0x4,%esp
f0107b84:	c1 e0 0c             	shl    $0xc,%eax
}
f0107b87:	c9                   	leave  
f0107b88:	c3                   	ret    

f0107b89 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0107b89:	55                   	push   %ebp
f0107b8a:	89 e5                	mov    %esp,%ebp
f0107b8c:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0107b8f:	8b 45 08             	mov    0x8(%ebp),%eax
f0107b92:	c1 e8 0c             	shr    $0xc,%eax
f0107b95:	89 c2                	mov    %eax,%edx
f0107b97:	a1 10 ad 89 f0       	mov    0xf089ad10,%eax
f0107b9c:	39 c2                	cmp    %eax,%edx
f0107b9e:	72 14                	jb     f0107bb4 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0107ba0:	83 ec 04             	sub    $0x4,%esp
f0107ba3:	68 34 68 13 f0       	push   $0xf0136834
f0107ba8:	6a 55                	push   $0x55
f0107baa:	68 59 68 13 f0       	push   $0xf0136859
f0107baf:	e8 51 86 ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f0107bb4:	8b 15 54 ad 89 f0    	mov    0xf089ad54,%edx
f0107bba:	8b 45 08             	mov    0x8(%ebp),%eax
f0107bbd:	c1 e8 0c             	shr    $0xc,%eax
f0107bc0:	89 c1                	mov    %eax,%ecx
f0107bc2:	89 c8                	mov    %ecx,%eax
f0107bc4:	01 c0                	add    %eax,%eax
f0107bc6:	01 c8                	add    %ecx,%eax
f0107bc8:	c1 e0 03             	shl    $0x3,%eax
f0107bcb:	01 d0                	add    %edx,%eax
}
f0107bcd:	c9                   	leave  
f0107bce:	c3                   	ret    

f0107bcf <initialize_dyn_block_system>:
//NOTE: All kernel heap allocations are multiples of PAGE_SIZE (4KB)//
//==================================================================//
//==================================================================//

void initialize_dyn_block_system()
{
f0107bcf:	55                   	push   %ebp
f0107bd0:	89 e5                	mov    %esp,%ebp
f0107bd2:	83 ec 18             	sub    $0x18,%esp
//TODO: [PROJECT MS2] [KERNEL HEAP] initialize_dyn_block_system
	// your code is here, remove the panic and write your code
	//kpanic_into_prompt("initialize_dyn_block_system() is not implemented yet...!!");

	//1.Initialize two lists (AllocMemBlocksList & FreeMemBlocksList) [Hint: use LIST_INIT()]
	LIST_INIT(&AllocMemBlocksList);
f0107bd5:	c7 05 c8 ac 89 f0 00 	movl   $0x0,0xf089acc8
f0107bdc:	00 00 00 
f0107bdf:	c7 05 cc ac 89 f0 00 	movl   $0x0,0xf089accc
f0107be6:	00 00 00 
f0107be9:	c7 05 d4 ac 89 f0 00 	movl   $0x0,0xf089acd4
f0107bf0:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f0107bf3:	c7 05 64 ad 89 f0 00 	movl   $0x0,0xf089ad64
f0107bfa:	00 00 00 
f0107bfd:	c7 05 68 ad 89 f0 00 	movl   $0x0,0xf089ad68
f0107c04:	00 00 00 
f0107c07:	c7 05 70 ad 89 f0 00 	movl   $0x0,0xf089ad70
f0107c0e:	00 00 00 
	uint32 arr_size = 0;
f0107c11:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//DO NOTHING
#else
	 //Dynamically allocate the array of MemBlockNodes remember to:

	 //2. set MAX_MEM_BLOCK_CNT with the chosen size of the array
	 MAX_MEM_BLOCK_CNT = (KERNEL_HEAP_MAX-KERNEL_HEAP_START)/PAGE_SIZE;
f0107c18:	c7 05 04 ad 89 f0 ff 	movl   $0x9fff,0xf089ad04
f0107c1f:	9f 00 00 

	 //3. assign starting address of MemBlockNodes array
	 MemBlockNodes  =(struct MemBlock*) KERNEL_HEAP_START;
f0107c22:	c7 05 d8 ac 89 f0 00 	movl   $0xf6000000,0xf089acd8
f0107c29:	00 00 f6 

	 //4.calculate the total size of memory required for the MemBlockNodes array (size of all the Structs)
	 arr_size =  ROUNDUP(MAX_MEM_BLOCK_CNT * sizeof(struct MemBlock), PAGE_SIZE);
f0107c2c:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0107c33:	a1 04 ad 89 f0       	mov    0xf089ad04,%eax
f0107c38:	c1 e0 04             	shl    $0x4,%eax
f0107c3b:	89 c2                	mov    %eax,%edx
f0107c3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107c40:	01 d0                	add    %edx,%eax
f0107c42:	48                   	dec    %eax
f0107c43:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107c46:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107c49:	ba 00 00 00 00       	mov    $0x0,%edx
f0107c4e:	f7 75 f0             	divl   -0x10(%ebp)
f0107c51:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107c54:	29 d0                	sub    %edx,%eax
f0107c56:	89 45 f4             	mov    %eax,-0xc(%ebp)

	 //5. allocate_chunk for this total memory size, with correct startAddress
	 allocate_chunk(ptr_page_directory, KERNEL_HEAP_START , arr_size , PERM_WRITEABLE | PERM_PRESENT);
f0107c59:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0107c5e:	6a 03                	push   $0x3
f0107c60:	ff 75 f4             	pushl  -0xc(%ebp)
f0107c63:	68 00 00 00 f6       	push   $0xf6000000
f0107c68:	50                   	push   %eax
f0107c69:	e8 bd 13 00 00       	call   f010902b <allocate_chunk>
f0107c6e:	83 c4 10             	add    $0x10,%esp
	 //HINT: can use alloc_chunk(...) function
#endif
	//6.Initialize AvailableMemBlocksList by filling it with the MemBlockNodes
	initialize_MemBlocksList(MAX_MEM_BLOCK_CNT);
f0107c71:	a1 04 ad 89 f0       	mov    0xf089ad04,%eax
f0107c76:	83 ec 0c             	sub    $0xc,%esp
f0107c79:	50                   	push   %eax
f0107c7a:	e8 ce a7 02 00       	call   f013244d <initialize_MemBlocksList>
f0107c7f:	83 c4 10             	add    $0x10,%esp
	//7. Take a block from the AvailableMemBlocksList and fill its size with all of the heap size (without size allocated for the array) and think what should the start address be?
	struct MemBlock * NewBlock = LIST_FIRST(&AvailableMemBlocksList);
f0107c82:	a1 98 ad 89 f0       	mov    0xf089ad98,%eax
f0107c87:	89 45 e8             	mov    %eax,-0x18(%ebp)
	NewBlock->sva = KERNEL_HEAP_START + arr_size;
f0107c8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c8d:	8d 90 00 00 00 f6    	lea    -0xa000000(%eax),%edx
f0107c93:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107c96:	89 50 08             	mov    %edx,0x8(%eax)
	NewBlock->size = (KERNEL_HEAP_MAX-KERNEL_HEAP_START) - arr_size;
f0107c99:	b8 00 f0 ff 09       	mov    $0x9fff000,%eax
f0107c9e:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0107ca1:	89 c2                	mov    %eax,%edx
f0107ca3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107ca6:	89 50 0c             	mov    %edx,0xc(%eax)
	LIST_REMOVE(&AvailableMemBlocksList,NewBlock);
f0107ca9:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0107cad:	75 14                	jne    f0107cc3 <initialize_dyn_block_system+0xf4>
f0107caf:	83 ec 04             	sub    $0x4,%esp
f0107cb2:	68 73 68 13 f0       	push   $0xf0136873
f0107cb7:	6a 30                	push   $0x30
f0107cb9:	68 91 68 13 f0       	push   $0xf0136891
f0107cbe:	e8 42 85 ff ff       	call   f0100205 <_panic>
f0107cc3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107cc6:	8b 00                	mov    (%eax),%eax
f0107cc8:	85 c0                	test   %eax,%eax
f0107cca:	74 10                	je     f0107cdc <initialize_dyn_block_system+0x10d>
f0107ccc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107ccf:	8b 00                	mov    (%eax),%eax
f0107cd1:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107cd4:	8b 52 04             	mov    0x4(%edx),%edx
f0107cd7:	89 50 04             	mov    %edx,0x4(%eax)
f0107cda:	eb 0b                	jmp    f0107ce7 <initialize_dyn_block_system+0x118>
f0107cdc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107cdf:	8b 40 04             	mov    0x4(%eax),%eax
f0107ce2:	a3 9c ad 89 f0       	mov    %eax,0xf089ad9c
f0107ce7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107cea:	8b 40 04             	mov    0x4(%eax),%eax
f0107ced:	85 c0                	test   %eax,%eax
f0107cef:	74 0f                	je     f0107d00 <initialize_dyn_block_system+0x131>
f0107cf1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107cf4:	8b 40 04             	mov    0x4(%eax),%eax
f0107cf7:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107cfa:	8b 12                	mov    (%edx),%edx
f0107cfc:	89 10                	mov    %edx,(%eax)
f0107cfe:	eb 0a                	jmp    f0107d0a <initialize_dyn_block_system+0x13b>
f0107d00:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107d03:	8b 00                	mov    (%eax),%eax
f0107d05:	a3 98 ad 89 f0       	mov    %eax,0xf089ad98
f0107d0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107d0d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0107d13:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107d16:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107d1d:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f0107d22:	48                   	dec    %eax
f0107d23:	a3 a4 ad 89 f0       	mov    %eax,0xf089ada4
	//8. Insert a new MemBlock with the remaining heap size into the FreeMemBlocksList
	LIST_INSERT_HEAD(&FreeMemBlocksList, NewBlock);
f0107d28:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0107d2c:	75 14                	jne    f0107d42 <initialize_dyn_block_system+0x173>
f0107d2e:	83 ec 04             	sub    $0x4,%esp
f0107d31:	68 a4 68 13 f0       	push   $0xf01368a4
f0107d36:	6a 32                	push   $0x32
f0107d38:	68 91 68 13 f0       	push   $0xf0136891
f0107d3d:	e8 c3 84 ff ff       	call   f0100205 <_panic>
f0107d42:	8b 15 64 ad 89 f0    	mov    0xf089ad64,%edx
f0107d48:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107d4b:	89 10                	mov    %edx,(%eax)
f0107d4d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107d50:	8b 00                	mov    (%eax),%eax
f0107d52:	85 c0                	test   %eax,%eax
f0107d54:	74 0d                	je     f0107d63 <initialize_dyn_block_system+0x194>
f0107d56:	a1 64 ad 89 f0       	mov    0xf089ad64,%eax
f0107d5b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107d5e:	89 50 04             	mov    %edx,0x4(%eax)
f0107d61:	eb 08                	jmp    f0107d6b <initialize_dyn_block_system+0x19c>
f0107d63:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107d66:	a3 68 ad 89 f0       	mov    %eax,0xf089ad68
f0107d6b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107d6e:	a3 64 ad 89 f0       	mov    %eax,0xf089ad64
f0107d73:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107d76:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107d7d:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f0107d82:	40                   	inc    %eax
f0107d83:	a3 70 ad 89 f0       	mov    %eax,0xf089ad70

}
f0107d88:	90                   	nop
f0107d89:	c9                   	leave  
f0107d8a:	c3                   	ret    

f0107d8b <kmalloc>:

void* kmalloc(unsigned int size)
{
f0107d8b:	55                   	push   %ebp
f0107d8c:	89 e5                	mov    %esp,%ebp
f0107d8e:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kmalloc
	// your code is here, remove the panic and write your code
	//kpanic_into_prompt("kmalloc() is not implemented yet...!!");
	uint32 allocate_size=ROUNDUP(size,PAGE_SIZE);
f0107d91:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0107d98:	8b 55 08             	mov    0x8(%ebp),%edx
f0107d9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107d9e:	01 d0                	add    %edx,%eax
f0107da0:	48                   	dec    %eax
f0107da1:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107da4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107da7:	ba 00 00 00 00       	mov    $0x0,%edx
f0107dac:	f7 75 f0             	divl   -0x10(%ebp)
f0107daf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107db2:	29 d0                	sub    %edx,%eax
f0107db4:	89 45 e8             	mov    %eax,-0x18(%ebp)
	struct MemBlock * mem_block;

	if(isKHeapPlacementStrategyFIRSTFIT())
f0107db7:	e8 43 fd ff ff       	call   f0107aff <isKHeapPlacementStrategyFIRSTFIT>
f0107dbc:	84 c0                	test   %al,%al
f0107dbe:	74 13                	je     f0107dd3 <kmalloc+0x48>
		mem_block = alloc_block_FF(allocate_size);
f0107dc0:	83 ec 0c             	sub    $0xc,%esp
f0107dc3:	ff 75 e8             	pushl  -0x18(%ebp)
f0107dc6:	e8 44 aa 02 00       	call   f013280f <alloc_block_FF>
f0107dcb:	83 c4 10             	add    $0x10,%esp
f0107dce:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107dd1:	eb 36                	jmp    f0107e09 <kmalloc+0x7e>
	else if (isKHeapPlacementStrategyBESTFIT())
f0107dd3:	e8 3c fd ff ff       	call   f0107b14 <isKHeapPlacementStrategyBESTFIT>
f0107dd8:	84 c0                	test   %al,%al
f0107dda:	74 13                	je     f0107def <kmalloc+0x64>
		mem_block = alloc_block_BF(allocate_size);
f0107ddc:	83 ec 0c             	sub    $0xc,%esp
f0107ddf:	ff 75 e8             	pushl  -0x18(%ebp)
f0107de2:	e8 f5 ab 02 00       	call   f01329dc <alloc_block_BF>
f0107de7:	83 c4 10             	add    $0x10,%esp
f0107dea:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107ded:	eb 1a                	jmp    f0107e09 <kmalloc+0x7e>
	else if (isKHeapPlacementStrategyNEXTFIT())
f0107def:	e8 35 fd ff ff       	call   f0107b29 <isKHeapPlacementStrategyNEXTFIT>
f0107df4:	84 c0                	test   %al,%al
f0107df6:	74 11                	je     f0107e09 <kmalloc+0x7e>
		mem_block = alloc_block_NF(allocate_size);
f0107df8:	83 ec 0c             	sub    $0xc,%esp
f0107dfb:	ff 75 e8             	pushl  -0x18(%ebp)
f0107dfe:	e8 ea ad 02 00       	call   f0132bed <alloc_block_NF>
f0107e03:	83 c4 10             	add    $0x10,%esp
f0107e06:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if (mem_block != NULL )
f0107e09:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107e0d:	74 40                	je     f0107e4f <kmalloc+0xc4>
	{
		int result = allocate_chunk(ptr_page_directory,mem_block->sva,allocate_size,PERM_WRITEABLE| PERM_PRESENT);
f0107e0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e12:	8b 50 08             	mov    0x8(%eax),%edx
f0107e15:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0107e1a:	6a 03                	push   $0x3
f0107e1c:	ff 75 e8             	pushl  -0x18(%ebp)
f0107e1f:	52                   	push   %edx
f0107e20:	50                   	push   %eax
f0107e21:	e8 05 12 00 00       	call   f010902b <allocate_chunk>
f0107e26:	83 c4 10             	add    $0x10,%esp
f0107e29:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (result == 0)
f0107e2c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0107e30:	75 16                	jne    f0107e48 <kmalloc+0xbd>
		{
			insert_sorted_allocList(mem_block);
f0107e32:	83 ec 0c             	sub    $0xc,%esp
f0107e35:	ff 75 f4             	pushl  -0xc(%ebp)
f0107e38:	e8 45 a7 02 00       	call   f0132582 <insert_sorted_allocList>
f0107e3d:	83 c4 10             	add    $0x10,%esp
			return (uint32 *) mem_block->sva;
f0107e40:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e43:	8b 40 08             	mov    0x8(%eax),%eax
f0107e46:	eb 0c                	jmp    f0107e54 <kmalloc+0xc9>
		}
		else
			return 	NULL;
f0107e48:	b8 00 00 00 00       	mov    $0x0,%eax
f0107e4d:	eb 05                	jmp    f0107e54 <kmalloc+0xc9>
	}
	return NULL;
f0107e4f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0107e54:	c9                   	leave  
f0107e55:	c3                   	ret    

f0107e56 <kfree>:
void kfree(void* virtual_address)
{
f0107e56:	55                   	push   %ebp
f0107e57:	89 e5                	mov    %esp,%ebp
f0107e59:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kfree
	// Write your code here, remove the panic and write your code
	//panic("kfree() is not implemented yet...!!");
	struct MemBlock * mem_block = find_block(&AllocMemBlocksList,(uint32)virtual_address);
f0107e5c:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e5f:	83 ec 08             	sub    $0x8,%esp
f0107e62:	50                   	push   %eax
f0107e63:	68 c8 ac 89 f0       	push   $0xf089acc8
f0107e68:	e8 bd a6 02 00       	call   f013252a <find_block>
f0107e6d:	83 c4 10             	add    $0x10,%esp
f0107e70:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(mem_block != NULL)
f0107e73:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107e77:	0f 84 fd 00 00 00    	je     f0107f7a <kfree+0x124>
	{
		LIST_REMOVE(&AllocMemBlocksList,mem_block);
f0107e7d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107e81:	75 14                	jne    f0107e97 <kfree+0x41>
f0107e83:	83 ec 04             	sub    $0x4,%esp
f0107e86:	68 73 68 13 f0       	push   $0xf0136873
f0107e8b:	6a 5a                	push   $0x5a
f0107e8d:	68 91 68 13 f0       	push   $0xf0136891
f0107e92:	e8 6e 83 ff ff       	call   f0100205 <_panic>
f0107e97:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107e9a:	8b 00                	mov    (%eax),%eax
f0107e9c:	85 c0                	test   %eax,%eax
f0107e9e:	74 10                	je     f0107eb0 <kfree+0x5a>
f0107ea0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107ea3:	8b 00                	mov    (%eax),%eax
f0107ea5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107ea8:	8b 52 04             	mov    0x4(%edx),%edx
f0107eab:	89 50 04             	mov    %edx,0x4(%eax)
f0107eae:	eb 0b                	jmp    f0107ebb <kfree+0x65>
f0107eb0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107eb3:	8b 40 04             	mov    0x4(%eax),%eax
f0107eb6:	a3 cc ac 89 f0       	mov    %eax,0xf089accc
f0107ebb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107ebe:	8b 40 04             	mov    0x4(%eax),%eax
f0107ec1:	85 c0                	test   %eax,%eax
f0107ec3:	74 0f                	je     f0107ed4 <kfree+0x7e>
f0107ec5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107ec8:	8b 40 04             	mov    0x4(%eax),%eax
f0107ecb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107ece:	8b 12                	mov    (%edx),%edx
f0107ed0:	89 10                	mov    %edx,(%eax)
f0107ed2:	eb 0a                	jmp    f0107ede <kfree+0x88>
f0107ed4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107ed7:	8b 00                	mov    (%eax),%eax
f0107ed9:	a3 c8 ac 89 f0       	mov    %eax,0xf089acc8
f0107ede:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107ee1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0107ee7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107eea:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107ef1:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f0107ef6:	48                   	dec    %eax
f0107ef7:	a3 d4 ac 89 f0       	mov    %eax,0xf089acd4
		uint32 start = ROUNDDOWN(mem_block->sva,PAGE_SIZE);
f0107efc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107eff:	8b 40 08             	mov    0x8(%eax),%eax
f0107f02:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107f05:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107f08:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107f0d:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32 end = ROUNDUP(mem_block->sva+mem_block->size,PAGE_SIZE);
f0107f10:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0107f17:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107f1a:	8b 50 08             	mov    0x8(%eax),%edx
f0107f1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107f20:	8b 40 0c             	mov    0xc(%eax),%eax
f0107f23:	01 c2                	add    %eax,%edx
f0107f25:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107f28:	01 d0                	add    %edx,%eax
f0107f2a:	48                   	dec    %eax
f0107f2b:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0107f2e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107f31:	ba 00 00 00 00       	mov    $0x0,%edx
f0107f36:	f7 75 e4             	divl   -0x1c(%ebp)
f0107f39:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107f3c:	29 d0                	sub    %edx,%eax
f0107f3e:	89 45 dc             	mov    %eax,-0x24(%ebp)

		for(uint32 i = start ; i < end; i += PAGE_SIZE)
f0107f41:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107f44:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107f47:	eb 1b                	jmp    f0107f64 <kfree+0x10e>
			unmap_frame(ptr_page_directory , i);
f0107f49:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0107f4e:	83 ec 08             	sub    $0x8,%esp
f0107f51:	ff 75 f4             	pushl  -0xc(%ebp)
f0107f54:	50                   	push   %eax
f0107f55:	e8 1c ef ff ff       	call   f0106e76 <unmap_frame>
f0107f5a:	83 c4 10             	add    $0x10,%esp
	{
		LIST_REMOVE(&AllocMemBlocksList,mem_block);
		uint32 start = ROUNDDOWN(mem_block->sva,PAGE_SIZE);
		uint32 end = ROUNDUP(mem_block->sva+mem_block->size,PAGE_SIZE);

		for(uint32 i = start ; i < end; i += PAGE_SIZE)
f0107f5d:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0107f64:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107f67:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0107f6a:	72 dd                	jb     f0107f49 <kfree+0xf3>
			unmap_frame(ptr_page_directory , i);

		insert_sorted_with_merge_freeList(mem_block);
f0107f6c:	83 ec 0c             	sub    $0xc,%esp
f0107f6f:	ff 75 f0             	pushl  -0x10(%ebp)
f0107f72:	e8 43 b2 02 00       	call   f01331ba <insert_sorted_with_merge_freeList>
f0107f77:	83 c4 10             	add    $0x10,%esp
	}
}
f0107f7a:	90                   	nop
f0107f7b:	c9                   	leave  
f0107f7c:	c3                   	ret    

f0107f7d <kheap_virtual_address>:

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f0107f7d:	55                   	push   %ebp
f0107f7e:	89 e5                	mov    %esp,%ebp
f0107f80:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_virtual_address
	// Write your code here, remove the panic and write your code
//	panic("kheap_virtual_address() is not implemented yet...!!");

	struct FrameInfo *convert_to_va=to_frame_info(physical_address);
f0107f83:	83 ec 0c             	sub    $0xc,%esp
f0107f86:	ff 75 08             	pushl  0x8(%ebp)
f0107f89:	e8 fb fb ff ff       	call   f0107b89 <to_frame_info>
f0107f8e:	83 c4 10             	add    $0x10,%esp
f0107f91:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(convert_to_va!=NULL)
f0107f94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107f98:	74 08                	je     f0107fa2 <kheap_virtual_address+0x25>
		return convert_to_va->va;
f0107f9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107f9d:	8b 40 0c             	mov    0xc(%eax),%eax
f0107fa0:	eb 05                	jmp    f0107fa7 <kheap_virtual_address+0x2a>
	else
		return 0;
f0107fa2:	b8 00 00 00 00       	mov    $0x0,%eax
	//return the virtual address corresponding to given physical_address
	//refer to the project presentation and documentation for details
	//EFFICIENT IMPLEMENTATION ~O(1) IS REQUIRED ==================
}
f0107fa7:	c9                   	leave  
f0107fa8:	c3                   	ret    

f0107fa9 <kheap_physical_address>:

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f0107fa9:	55                   	push   %ebp
f0107faa:	89 e5                	mov    %esp,%ebp
f0107fac:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_physical_address
	// Write your code here, remove the panic and write your code
	//panic("kheap_physical_address() is not implemented yet...!!");
	uint32 *ptr_page=NULL;
f0107faf:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	struct FrameInfo *frame_of_the_va = get_frame_info(ptr_page_directory,virtual_address,&ptr_page);
f0107fb6:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0107fbb:	83 ec 04             	sub    $0x4,%esp
f0107fbe:	8d 55 ec             	lea    -0x14(%ebp),%edx
f0107fc1:	52                   	push   %edx
f0107fc2:	ff 75 08             	pushl  0x8(%ebp)
f0107fc5:	50                   	push   %eax
f0107fc6:	e8 3b ee ff ff       	call   f0106e06 <get_frame_info>
f0107fcb:	83 c4 10             	add    $0x10,%esp
f0107fce:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 address_physical=to_physical_address(frame_of_the_va);
f0107fd1:	83 ec 0c             	sub    $0xc,%esp
f0107fd4:	ff 75 f4             	pushl  -0xc(%ebp)
f0107fd7:	e8 9a fb ff ff       	call   f0107b76 <to_physical_address>
f0107fdc:	83 c4 10             	add    $0x10,%esp
f0107fdf:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(frame_of_the_va != NULL)
f0107fe2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107fe6:	74 05                	je     f0107fed <kheap_physical_address+0x44>
		return address_physical;
f0107fe8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107feb:	eb 05                	jmp    f0107ff2 <kheap_physical_address+0x49>
	return 0;
f0107fed:	b8 00 00 00 00       	mov    $0x0,%eax

	//return the physical address corresponding to given virtual_address
	//refer to the project presentation and documentation for details
}
f0107ff2:	c9                   	leave  
f0107ff3:	c3                   	ret    

f0107ff4 <kfreeall>:


void kfreeall()
{
f0107ff4:	55                   	push   %ebp
f0107ff5:	89 e5                	mov    %esp,%ebp
f0107ff7:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107ffa:	83 ec 04             	sub    $0x4,%esp
f0107ffd:	68 c7 68 13 f0       	push   $0xf01368c7
f0108002:	68 89 00 00 00       	push   $0x89
f0108007:	68 91 68 13 f0       	push   $0xf0136891
f010800c:	e8 f4 81 ff ff       	call   f0100205 <_panic>

f0108011 <kshrink>:

}

void kshrink(uint32 newSize)
{
f0108011:	55                   	push   %ebp
f0108012:	89 e5                	mov    %esp,%ebp
f0108014:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0108017:	83 ec 04             	sub    $0x4,%esp
f010801a:	68 c7 68 13 f0       	push   $0xf01368c7
f010801f:	68 8f 00 00 00       	push   $0x8f
f0108024:	68 91 68 13 f0       	push   $0xf0136891
f0108029:	e8 d7 81 ff ff       	call   f0100205 <_panic>

f010802e <kexpand>:
}

void kexpand(uint32 newSize)
{
f010802e:	55                   	push   %ebp
f010802f:	89 e5                	mov    %esp,%ebp
f0108031:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0108034:	83 ec 04             	sub    $0x4,%esp
f0108037:	68 c7 68 13 f0       	push   $0xf01368c7
f010803c:	68 94 00 00 00       	push   $0x94
f0108041:	68 91 68 13 f0       	push   $0xf0136891
f0108046:	e8 ba 81 ff ff       	call   f0100205 <_panic>

f010804b <krealloc>:

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
f010804b:	55                   	push   %ebp
f010804c:	89 e5                	mov    %esp,%ebp
f010804e:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [KERNEL HEAP] krealloc
	// Write your code here, remove the panic and write your code
	panic("krealloc() is not implemented yet...!!");
f0108051:	83 ec 04             	sub    $0x4,%esp
f0108054:	68 d8 68 13 f0       	push   $0xf01368d8
f0108059:	68 ab 00 00 00       	push   $0xab
f010805e:	68 91 68 13 f0       	push   $0xf0136891
f0108063:	e8 9d 81 ff ff       	call   f0100205 <_panic>

f0108068 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0108068:	55                   	push   %ebp
f0108069:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010806b:	8b 45 08             	mov    0x8(%ebp),%eax
f010806e:	8b 15 54 ad 89 f0    	mov    0xf089ad54,%edx
f0108074:	29 d0                	sub    %edx,%eax
f0108076:	c1 f8 03             	sar    $0x3,%eax
f0108079:	89 c2                	mov    %eax,%edx
f010807b:	89 d0                	mov    %edx,%eax
f010807d:	c1 e0 02             	shl    $0x2,%eax
f0108080:	01 d0                	add    %edx,%eax
f0108082:	c1 e0 02             	shl    $0x2,%eax
f0108085:	01 d0                	add    %edx,%eax
f0108087:	c1 e0 02             	shl    $0x2,%eax
f010808a:	01 d0                	add    %edx,%eax
f010808c:	89 c1                	mov    %eax,%ecx
f010808e:	c1 e1 08             	shl    $0x8,%ecx
f0108091:	01 c8                	add    %ecx,%eax
f0108093:	89 c1                	mov    %eax,%ecx
f0108095:	c1 e1 10             	shl    $0x10,%ecx
f0108098:	01 c8                	add    %ecx,%eax
f010809a:	01 c0                	add    %eax,%eax
f010809c:	01 d0                	add    %edx,%eax
}
f010809e:	5d                   	pop    %ebp
f010809f:	c3                   	ret    

f01080a0 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01080a0:	55                   	push   %ebp
f01080a1:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01080a3:	ff 75 08             	pushl  0x8(%ebp)
f01080a6:	e8 bd ff ff ff       	call   f0108068 <to_frame_number>
f01080ab:	83 c4 04             	add    $0x4,%esp
f01080ae:	c1 e0 0c             	shl    $0xc,%eax
}
f01080b1:	c9                   	leave  
f01080b2:	c3                   	ret    

f01080b3 <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f01080b3:	55                   	push   %ebp
f01080b4:	89 e5                	mov    %esp,%ebp
f01080b6:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_set_page_permissions
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f01080b9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f01080c0:	83 ec 04             	sub    $0x4,%esp
f01080c3:	8d 45 f4             	lea    -0xc(%ebp),%eax
f01080c6:	50                   	push   %eax
f01080c7:	ff 75 0c             	pushl  0xc(%ebp)
f01080ca:	ff 75 08             	pushl  0x8(%ebp)
f01080cd:	e8 df e9 ff ff       	call   f0106ab1 <get_page_table>
f01080d2:	83 c4 10             	add    $0x10,%esp

	if (page_table_point!=NULL)
f01080d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01080d8:	85 c0                	test   %eax,%eax
f01080da:	74 75                	je     f0108151 <pt_set_page_permissions+0x9e>
	{
		page_table_point[PTX(virtual_address)] &= ~(permissions_to_clear);
f01080dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01080df:	8b 55 0c             	mov    0xc(%ebp),%edx
f01080e2:	c1 ea 0c             	shr    $0xc,%edx
f01080e5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01080eb:	c1 e2 02             	shl    $0x2,%edx
f01080ee:	01 d0                	add    %edx,%eax
f01080f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01080f3:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f01080f6:	c1 e9 0c             	shr    $0xc,%ecx
f01080f9:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f01080ff:	c1 e1 02             	shl    $0x2,%ecx
f0108102:	01 ca                	add    %ecx,%edx
f0108104:	8b 12                	mov    (%edx),%edx
f0108106:	8b 4d 14             	mov    0x14(%ebp),%ecx
f0108109:	f7 d1                	not    %ecx
f010810b:	21 ca                	and    %ecx,%edx
f010810d:	89 10                	mov    %edx,(%eax)
		page_table_point[PTX(virtual_address)] |= permissions_to_set;
f010810f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108112:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108115:	c1 ea 0c             	shr    $0xc,%edx
f0108118:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010811e:	c1 e2 02             	shl    $0x2,%edx
f0108121:	01 c2                	add    %eax,%edx
f0108123:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108126:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0108129:	c1 e9 0c             	shr    $0xc,%ecx
f010812c:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0108132:	c1 e1 02             	shl    $0x2,%ecx
f0108135:	01 c8                	add    %ecx,%eax
f0108137:	8b 00                	mov    (%eax),%eax
f0108139:	0b 45 10             	or     0x10(%ebp),%eax
f010813c:	89 02                	mov    %eax,(%edx)
		tlb_invalidate((void *)NULL, (void *)virtual_address);
f010813e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108141:	83 ec 08             	sub    $0x8,%esp
f0108144:	50                   	push   %eax
f0108145:	6a 00                	push   $0x0
f0108147:	e8 c2 e3 ff ff       	call   f010650e <tlb_invalidate>
f010814c:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		panic("Page Table doesn't exist...!");
	}
}
f010814f:	eb 14                	jmp    f0108165 <pt_set_page_permissions+0xb2>
		page_table_point[PTX(virtual_address)] |= permissions_to_set;
		tlb_invalidate((void *)NULL, (void *)virtual_address);
	}
	else
	{
		panic("Page Table doesn't exist...!");
f0108151:	83 ec 04             	sub    $0x4,%esp
f0108154:	68 ff 68 13 f0       	push   $0xf01368ff
f0108159:	6a 19                	push   $0x19
f010815b:	68 1c 69 13 f0       	push   $0xf013691c
f0108160:	e8 a0 80 ff ff       	call   f0100205 <_panic>
	}
}
f0108165:	c9                   	leave  
f0108166:	c3                   	ret    

f0108167 <pt_get_page_permissions>:

inline int pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f0108167:	55                   	push   %ebp
f0108168:	89 e5                	mov    %esp,%ebp
f010816a:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_get_page_permissions
	// Write your code here, remove the panic and write your code

	uint32* page_table_point=NULL;
f010816d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 entry_of_page_table;
	uint32 Permissions_of_entry;
	get_page_table(page_directory,virtual_address,&page_table_point);
f0108174:	83 ec 04             	sub    $0x4,%esp
f0108177:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010817a:	50                   	push   %eax
f010817b:	ff 75 0c             	pushl  0xc(%ebp)
f010817e:	ff 75 08             	pushl  0x8(%ebp)
f0108181:	e8 2b e9 ff ff       	call   f0106ab1 <get_page_table>
f0108186:	83 c4 10             	add    $0x10,%esp
	if(page_table_point!=NULL)
f0108189:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010818c:	85 c0                	test   %eax,%eax
f010818e:	74 2b                	je     f01081bb <pt_get_page_permissions+0x54>
	{
		entry_of_page_table=page_table_point[PTX(virtual_address)];
f0108190:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108193:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108196:	c1 ea 0c             	shr    $0xc,%edx
f0108199:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010819f:	c1 e2 02             	shl    $0x2,%edx
f01081a2:	01 d0                	add    %edx,%eax
f01081a4:	8b 00                	mov    (%eax),%eax
f01081a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		Permissions_of_entry=entry_of_page_table&=0x00000FFF;
f01081a9:	81 65 f4 ff 0f 00 00 	andl   $0xfff,-0xc(%ebp)
f01081b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01081b3:	89 45 f0             	mov    %eax,-0x10(%ebp)


		return Permissions_of_entry;
f01081b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01081b9:	eb 05                	jmp    f01081c0 <pt_get_page_permissions+0x59>
	}

	else
	{
		return -1;
f01081bb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
}
f01081c0:	c9                   	leave  
f01081c1:	c3                   	ret    

f01081c2 <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f01081c2:	55                   	push   %ebp
f01081c3:	89 e5                	mov    %esp,%ebp
f01081c5:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_clear_page_table_entry
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f01081c8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f01081cf:	83 ec 04             	sub    $0x4,%esp
f01081d2:	8d 45 f4             	lea    -0xc(%ebp),%eax
f01081d5:	50                   	push   %eax
f01081d6:	ff 75 0c             	pushl  0xc(%ebp)
f01081d9:	ff 75 08             	pushl  0x8(%ebp)
f01081dc:	e8 d0 e8 ff ff       	call   f0106ab1 <get_page_table>
f01081e1:	83 c4 10             	add    $0x10,%esp
	if (page_table_point!=NULL)
f01081e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01081e7:	85 c0                	test   %eax,%eax
f01081e9:	74 2d                	je     f0108218 <pt_clear_page_table_entry+0x56>
	{
		page_table_point[PTX(virtual_address)] = 0;
f01081eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01081ee:	8b 55 0c             	mov    0xc(%ebp),%edx
f01081f1:	c1 ea 0c             	shr    $0xc,%edx
f01081f4:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01081fa:	c1 e2 02             	shl    $0x2,%edx
f01081fd:	01 d0                	add    %edx,%eax
f01081ff:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate((void *)NULL, (void *)virtual_address);
f0108205:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108208:	83 ec 08             	sub    $0x8,%esp
f010820b:	50                   	push   %eax
f010820c:	6a 00                	push   $0x0
f010820e:	e8 fb e2 ff ff       	call   f010650e <tlb_invalidate>
f0108213:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		panic("Page Table doesn't exist...!");
	}
}
f0108216:	eb 14                	jmp    f010822c <pt_clear_page_table_entry+0x6a>
		page_table_point[PTX(virtual_address)] = 0;
		tlb_invalidate((void *)NULL, (void *)virtual_address);
	}
	else
	{
		panic("Page Table doesn't exist...!");
f0108218:	83 ec 04             	sub    $0x4,%esp
f010821b:	68 ff 68 13 f0       	push   $0xf01368ff
f0108220:	6a 42                	push   $0x42
f0108222:	68 1c 69 13 f0       	push   $0xf013691c
f0108227:	e8 d9 7f ff ff       	call   f0100205 <_panic>
	}
}
f010822c:	c9                   	leave  
f010822d:	c3                   	ret    

f010822e <virtual_to_physical>:

/***********************************************************************************************/

/*[2.2] ADDRESS CONVERTION*/
inline int virtual_to_physical(uint32* page_directory, uint32 virtual_address)
{
f010822e:	55                   	push   %ebp
f010822f:	89 e5                	mov    %esp,%ebp
f0108231:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] virtual_to_physical
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0108234:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f010823b:	83 ec 04             	sub    $0x4,%esp
f010823e:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0108241:	50                   	push   %eax
f0108242:	ff 75 0c             	pushl  0xc(%ebp)
f0108245:	ff 75 08             	pushl  0x8(%ebp)
f0108248:	e8 64 e8 ff ff       	call   f0106ab1 <get_page_table>
f010824d:	83 c4 10             	add    $0x10,%esp

	if(page_table_point != NULL)
f0108250:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108253:	85 c0                	test   %eax,%eax
f0108255:	74 28                	je     f010827f <virtual_to_physical+0x51>
	{
		struct FrameInfo * frame_info = get_frame_info(page_directory,virtual_address,&page_table_point);
f0108257:	83 ec 04             	sub    $0x4,%esp
f010825a:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010825d:	50                   	push   %eax
f010825e:	ff 75 0c             	pushl  0xc(%ebp)
f0108261:	ff 75 08             	pushl  0x8(%ebp)
f0108264:	e8 9d eb ff ff       	call   f0106e06 <get_frame_info>
f0108269:	83 c4 10             	add    $0x10,%esp
f010826c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return to_physical_address(frame_info);
f010826f:	83 ec 0c             	sub    $0xc,%esp
f0108272:	ff 75 f4             	pushl  -0xc(%ebp)
f0108275:	e8 26 fe ff ff       	call   f01080a0 <to_physical_address>
f010827a:	83 c4 10             	add    $0x10,%esp
f010827d:	eb 05                	jmp    f0108284 <virtual_to_physical+0x56>
	}
	return -1;
f010827f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
f0108284:	c9                   	leave  
f0108285:	c3                   	ret    

f0108286 <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f0108286:	55                   	push   %ebp
f0108287:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f0108289:	8b 45 0c             	mov    0xc(%ebp),%eax
f010828c:	c1 e8 16             	shr    $0x16,%eax
f010828f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0108296:	8b 45 08             	mov    0x8(%ebp),%eax
f0108299:	01 d0                	add    %edx,%eax
f010829b:	8b 00                	mov    (%eax),%eax
f010829d:	83 e0 20             	and    $0x20,%eax
f01082a0:	85 c0                	test   %eax,%eax
f01082a2:	0f 95 c0             	setne  %al
f01082a5:	0f b6 c0             	movzbl %al,%eax
}
f01082a8:	5d                   	pop    %ebp
f01082a9:	c3                   	ret    

f01082aa <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f01082aa:	55                   	push   %ebp
f01082ab:	89 e5                	mov    %esp,%ebp
f01082ad:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f01082b0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01082b3:	c1 e8 16             	shr    $0x16,%eax
f01082b6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01082bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01082c0:	01 d0                	add    %edx,%eax
f01082c2:	8b 55 0c             	mov    0xc(%ebp),%edx
f01082c5:	c1 ea 16             	shr    $0x16,%edx
f01082c8:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f01082cf:	8b 55 08             	mov    0x8(%ebp),%edx
f01082d2:	01 ca                	add    %ecx,%edx
f01082d4:	8b 12                	mov    (%edx),%edx
f01082d6:	83 e2 df             	and    $0xffffffdf,%edx
f01082d9:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f01082db:	8b 45 0c             	mov    0xc(%ebp),%eax
f01082de:	83 ec 08             	sub    $0x8,%esp
f01082e1:	50                   	push   %eax
f01082e2:	6a 00                	push   $0x0
f01082e4:	e8 25 e2 ff ff       	call   f010650e <tlb_invalidate>
f01082e9:	83 c4 10             	add    $0x10,%esp
}
f01082ec:	90                   	nop
f01082ed:	c9                   	leave  
f01082ee:	c3                   	ret    

f01082ef <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f01082ef:	55                   	push   %ebp
f01082f0:	89 e5                	mov    %esp,%ebp
f01082f2:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f01082f5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01082f8:	c1 e8 16             	shr    $0x16,%eax
f01082fb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0108302:	8b 45 08             	mov    0x8(%ebp),%eax
f0108305:	01 d0                	add    %edx,%eax
f0108307:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010830d:	0f 20 d8             	mov    %cr3,%eax
f0108310:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0108313:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108316:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0108319:	90                   	nop
f010831a:	c9                   	leave  
f010831b:	c3                   	ret    

f010831c <env_page_ws_get_size>:

///============================================================================================
/// Dealing with environment working set

inline uint32 env_page_ws_get_size(struct Env *e)
{
f010831c:	55                   	push   %ebp
f010831d:	89 e5                	mov    %esp,%ebp
f010831f:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0108322:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0108329:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f0108330:	eb 21                	jmp    f0108353 <env_page_ws_get_size+0x37>
f0108332:	8b 45 08             	mov    0x8(%ebp),%eax
f0108335:	8b 48 78             	mov    0x78(%eax),%ecx
f0108338:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010833b:	89 d0                	mov    %edx,%eax
f010833d:	01 c0                	add    %eax,%eax
f010833f:	01 d0                	add    %edx,%eax
f0108341:	c1 e0 03             	shl    $0x3,%eax
f0108344:	01 c8                	add    %ecx,%eax
f0108346:	8a 40 04             	mov    0x4(%eax),%al
f0108349:	84 c0                	test   %al,%al
f010834b:	75 03                	jne    f0108350 <env_page_ws_get_size+0x34>
f010834d:	ff 45 f8             	incl   -0x8(%ebp)
f0108350:	ff 45 fc             	incl   -0x4(%ebp)
f0108353:	8b 45 08             	mov    0x8(%ebp),%eax
f0108356:	8b 50 74             	mov    0x74(%eax),%edx
f0108359:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010835c:	39 c2                	cmp    %eax,%edx
f010835e:	77 d2                	ja     f0108332 <env_page_ws_get_size+0x16>
	return counter;
f0108360:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0108363:	c9                   	leave  
f0108364:	c3                   	ret    

f0108365 <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0108365:	55                   	push   %ebp
f0108366:	89 e5                	mov    %esp,%ebp
f0108368:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010836b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f0108372:	eb 4c                	jmp    f01083c0 <env_page_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f0108374:	8b 45 08             	mov    0x8(%ebp),%eax
f0108377:	8b 48 78             	mov    0x78(%eax),%ecx
f010837a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010837d:	89 d0                	mov    %edx,%eax
f010837f:	01 c0                	add    %eax,%eax
f0108381:	01 d0                	add    %edx,%eax
f0108383:	c1 e0 03             	shl    $0x3,%eax
f0108386:	01 c8                	add    %ecx,%eax
f0108388:	8b 00                	mov    (%eax),%eax
f010838a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010838d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108390:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108395:	89 c2                	mov    %eax,%edx
f0108397:	8b 45 0c             	mov    0xc(%ebp),%eax
f010839a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010839d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01083a0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01083a5:	39 c2                	cmp    %eax,%edx
f01083a7:	75 14                	jne    f01083bd <env_page_ws_invalidate+0x58>
		{
			env_page_ws_clear_entry(e, i);
f01083a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01083ac:	83 ec 08             	sub    $0x8,%esp
f01083af:	50                   	push   %eax
f01083b0:	ff 75 08             	pushl  0x8(%ebp)
f01083b3:	e8 b9 00 00 00       	call   f0108471 <env_page_ws_clear_entry>
f01083b8:	83 c4 10             	add    $0x10,%esp
			break;
f01083bb:	eb 10                	jmp    f01083cd <env_page_ws_invalidate+0x68>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f01083bd:	ff 45 f4             	incl   -0xc(%ebp)
f01083c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01083c3:	8b 50 74             	mov    0x74(%eax),%edx
f01083c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01083c9:	39 c2                	cmp    %eax,%edx
f01083cb:	77 a7                	ja     f0108374 <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f01083cd:	90                   	nop
f01083ce:	c9                   	leave  
f01083cf:	c3                   	ret    

f01083d0 <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f01083d0:	55                   	push   %ebp
f01083d1:	89 e5                	mov    %esp,%ebp
f01083d3:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f01083d6:	8b 45 08             	mov    0x8(%ebp),%eax
f01083d9:	8b 40 74             	mov    0x74(%eax),%eax
f01083dc:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01083df:	77 16                	ja     f01083f7 <env_page_ws_set_entry+0x27>
f01083e1:	68 38 69 13 f0       	push   $0xf0136938
f01083e6:	68 6e 69 13 f0       	push   $0xf013696e
f01083eb:	6a 26                	push   $0x26
f01083ed:	68 84 69 13 f0       	push   $0xf0136984
f01083f2:	e8 0e 7e ff ff       	call   f0100205 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f01083f7:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f01083fe:	76 16                	jbe    f0108416 <env_page_ws_set_entry+0x46>
f0108400:	68 a4 69 13 f0       	push   $0xf01369a4
f0108405:	68 6e 69 13 f0       	push   $0xf013696e
f010840a:	6a 27                	push   $0x27
f010840c:	68 84 69 13 f0       	push   $0xf0136984
f0108411:	e8 ef 7d ff ff       	call   f0100205 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f0108416:	8b 45 08             	mov    0x8(%ebp),%eax
f0108419:	8b 48 78             	mov    0x78(%eax),%ecx
f010841c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010841f:	89 d0                	mov    %edx,%eax
f0108421:	01 c0                	add    %eax,%eax
f0108423:	01 d0                	add    %edx,%eax
f0108425:	c1 e0 03             	shl    $0x3,%eax
f0108428:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010842b:	8b 45 10             	mov    0x10(%ebp),%eax
f010842e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108431:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108434:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108439:	89 02                	mov    %eax,(%edx)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f010843b:	8b 45 08             	mov    0x8(%ebp),%eax
f010843e:	8b 48 78             	mov    0x78(%eax),%ecx
f0108441:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108444:	89 d0                	mov    %edx,%eax
f0108446:	01 c0                	add    %eax,%eax
f0108448:	01 d0                	add    %edx,%eax
f010844a:	c1 e0 03             	shl    $0x3,%eax
f010844d:	01 c8                	add    %ecx,%eax
f010844f:	c6 40 04 00          	movb   $0x0,0x4(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f0108453:	8b 45 08             	mov    0x8(%ebp),%eax
f0108456:	8b 48 78             	mov    0x78(%eax),%ecx
f0108459:	8b 55 0c             	mov    0xc(%ebp),%edx
f010845c:	89 d0                	mov    %edx,%eax
f010845e:	01 c0                	add    %eax,%eax
f0108460:	01 d0                	add    %edx,%eax
f0108462:	c1 e0 03             	shl    $0x3,%eax
f0108465:	01 c8                	add    %ecx,%eax
f0108467:	c7 40 08 00 00 00 80 	movl   $0x80000000,0x8(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f010846e:	90                   	nop
}
f010846f:	c9                   	leave  
f0108470:	c3                   	ret    

f0108471 <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0108471:	55                   	push   %ebp
f0108472:	89 e5                	mov    %esp,%ebp
f0108474:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108477:	8b 45 08             	mov    0x8(%ebp),%eax
f010847a:	8b 40 74             	mov    0x74(%eax),%eax
f010847d:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108480:	77 16                	ja     f0108498 <env_page_ws_clear_entry+0x27>
f0108482:	68 d8 69 13 f0       	push   $0xf01369d8
f0108487:	68 6e 69 13 f0       	push   $0xf013696e
f010848c:	6a 32                	push   $0x32
f010848e:	68 84 69 13 f0       	push   $0xf0136984
f0108493:	e8 6d 7d ff ff       	call   f0100205 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f0108498:	8b 45 08             	mov    0x8(%ebp),%eax
f010849b:	8b 48 78             	mov    0x78(%eax),%ecx
f010849e:	8b 55 0c             	mov    0xc(%ebp),%edx
f01084a1:	89 d0                	mov    %edx,%eax
f01084a3:	01 c0                	add    %eax,%eax
f01084a5:	01 d0                	add    %edx,%eax
f01084a7:	c1 e0 03             	shl    $0x3,%eax
f01084aa:	01 c8                	add    %ecx,%eax
f01084ac:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f01084b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01084b5:	8b 48 78             	mov    0x78(%eax),%ecx
f01084b8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01084bb:	89 d0                	mov    %edx,%eax
f01084bd:	01 c0                	add    %eax,%eax
f01084bf:	01 d0                	add    %edx,%eax
f01084c1:	c1 e0 03             	shl    $0x3,%eax
f01084c4:	01 c8                	add    %ecx,%eax
f01084c6:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f01084ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01084cd:	8b 48 78             	mov    0x78(%eax),%ecx
f01084d0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01084d3:	89 d0                	mov    %edx,%eax
f01084d5:	01 c0                	add    %eax,%eax
f01084d7:	01 d0                	add    %edx,%eax
f01084d9:	c1 e0 03             	shl    $0x3,%eax
f01084dc:	01 c8                	add    %ecx,%eax
f01084de:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
f01084e5:	90                   	nop
f01084e6:	c9                   	leave  
f01084e7:	c3                   	ret    

f01084e8 <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f01084e8:	55                   	push   %ebp
f01084e9:	89 e5                	mov    %esp,%ebp
f01084eb:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f01084ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01084f1:	8b 40 74             	mov    0x74(%eax),%eax
f01084f4:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01084f7:	77 16                	ja     f010850f <env_page_ws_get_virtual_address+0x27>
f01084f9:	68 d8 69 13 f0       	push   $0xf01369d8
f01084fe:	68 6e 69 13 f0       	push   $0xf013696e
f0108503:	6a 3a                	push   $0x3a
f0108505:	68 84 69 13 f0       	push   $0xf0136984
f010850a:	e8 f6 7c ff ff       	call   f0100205 <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f010850f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108512:	8b 48 78             	mov    0x78(%eax),%ecx
f0108515:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108518:	89 d0                	mov    %edx,%eax
f010851a:	01 c0                	add    %eax,%eax
f010851c:	01 d0                	add    %edx,%eax
f010851e:	c1 e0 03             	shl    $0x3,%eax
f0108521:	01 c8                	add    %ecx,%eax
f0108523:	8b 00                	mov    (%eax),%eax
f0108525:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108528:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010852b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0108530:	c9                   	leave  
f0108531:	c3                   	ret    

f0108532 <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0108532:	55                   	push   %ebp
f0108533:	89 e5                	mov    %esp,%ebp
f0108535:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108538:	8b 45 08             	mov    0x8(%ebp),%eax
f010853b:	8b 40 74             	mov    0x74(%eax),%eax
f010853e:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108541:	77 16                	ja     f0108559 <env_page_ws_get_time_stamp+0x27>
f0108543:	68 d8 69 13 f0       	push   $0xf01369d8
f0108548:	68 6e 69 13 f0       	push   $0xf013696e
f010854d:	6a 40                	push   $0x40
f010854f:	68 84 69 13 f0       	push   $0xf0136984
f0108554:	e8 ac 7c ff ff       	call   f0100205 <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f0108559:	8b 45 08             	mov    0x8(%ebp),%eax
f010855c:	8b 48 78             	mov    0x78(%eax),%ecx
f010855f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108562:	89 d0                	mov    %edx,%eax
f0108564:	01 c0                	add    %eax,%eax
f0108566:	01 d0                	add    %edx,%eax
f0108568:	c1 e0 03             	shl    $0x3,%eax
f010856b:	01 c8                	add    %ecx,%eax
f010856d:	8b 40 08             	mov    0x8(%eax),%eax
}
f0108570:	c9                   	leave  
f0108571:	c3                   	ret    

f0108572 <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0108572:	55                   	push   %ebp
f0108573:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f0108575:	8b 45 08             	mov    0x8(%ebp),%eax
f0108578:	8b 48 78             	mov    0x78(%eax),%ecx
f010857b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010857e:	89 d0                	mov    %edx,%eax
f0108580:	01 c0                	add    %eax,%eax
f0108582:	01 d0                	add    %edx,%eax
f0108584:	c1 e0 03             	shl    $0x3,%eax
f0108587:	01 c8                	add    %ecx,%eax
f0108589:	8a 40 04             	mov    0x4(%eax),%al
f010858c:	0f b6 c0             	movzbl %al,%eax
}
f010858f:	5d                   	pop    %ebp
f0108590:	c3                   	ret    

f0108591 <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f0108591:	55                   	push   %ebp
f0108592:	89 e5                	mov    %esp,%ebp
f0108594:	53                   	push   %ebx
f0108595:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108598:	83 ec 0c             	sub    $0xc,%esp
f010859b:	6a 02                	push   $0x2
f010859d:	e8 9b 5d 00 00       	call   f010e33d <isPageReplacmentAlgorithmLRU>
f01085a2:	83 c4 10             	add    $0x10,%esp
f01085a5:	85 c0                	test   %eax,%eax
f01085a7:	0f 84 fe 00 00 00    	je     f01086ab <env_page_ws_print+0x11a>
	{
		int i = 0;
f01085ad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f01085b4:	83 ec 0c             	sub    $0xc,%esp
f01085b7:	68 10 6a 13 f0       	push   $0xf0136a10
f01085bc:	e8 4d 87 ff ff       	call   f0100d0e <cprintf>
f01085c1:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f01085c4:	8b 45 08             	mov    0x8(%ebp),%eax
f01085c7:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f01085cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01085d0:	eb 2c                	jmp    f01085fe <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f01085d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01085d5:	8b 10                	mov    (%eax),%edx
f01085d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01085da:	8d 48 01             	lea    0x1(%eax),%ecx
f01085dd:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f01085e0:	83 ec 04             	sub    $0x4,%esp
f01085e3:	52                   	push   %edx
f01085e4:	50                   	push   %eax
f01085e5:	68 2a 6a 13 f0       	push   $0xf0136a2a
f01085ea:	e8 1f 87 ff ff       	call   f0100d0e <cprintf>
f01085ef:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f01085f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01085f5:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f01085fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01085fe:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108602:	74 08                	je     f010860c <env_page_ws_print+0x7b>
f0108604:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108607:	8b 40 10             	mov    0x10(%eax),%eax
f010860a:	eb 05                	jmp    f0108611 <env_page_ws_print+0x80>
f010860c:	b8 00 00 00 00       	mov    $0x0,%eax
f0108611:	8b 55 08             	mov    0x8(%ebp),%edx
f0108614:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010861a:	8b 45 08             	mov    0x8(%ebp),%eax
f010861d:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f0108623:	85 c0                	test   %eax,%eax
f0108625:	75 ab                	jne    f01085d2 <env_page_ws_print+0x41>
f0108627:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010862b:	75 a5                	jne    f01085d2 <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f010862d:	83 ec 0c             	sub    $0xc,%esp
f0108630:	68 32 6a 13 f0       	push   $0xf0136a32
f0108635:	e8 d4 86 ff ff       	call   f0100d0e <cprintf>
f010863a:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f010863d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108640:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f0108646:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108649:	eb 2c                	jmp    f0108677 <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f010864b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010864e:	8b 10                	mov    (%eax),%edx
f0108650:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108653:	8d 48 01             	lea    0x1(%eax),%ecx
f0108656:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0108659:	83 ec 04             	sub    $0x4,%esp
f010865c:	52                   	push   %edx
f010865d:	50                   	push   %eax
f010865e:	68 2a 6a 13 f0       	push   $0xf0136a2a
f0108663:	e8 a6 86 ff ff       	call   f0100d0e <cprintf>
f0108668:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f010866b:	8b 45 08             	mov    0x8(%ebp),%eax
f010866e:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0108674:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108677:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010867b:	74 08                	je     f0108685 <env_page_ws_print+0xf4>
f010867d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108680:	8b 40 10             	mov    0x10(%eax),%eax
f0108683:	eb 05                	jmp    f010868a <env_page_ws_print+0xf9>
f0108685:	b8 00 00 00 00       	mov    $0x0,%eax
f010868a:	8b 55 08             	mov    0x8(%ebp),%edx
f010868d:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f0108693:	8b 45 08             	mov    0x8(%ebp),%eax
f0108696:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010869c:	85 c0                	test   %eax,%eax
f010869e:	75 ab                	jne    f010864b <env_page_ws_print+0xba>
f01086a0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01086a4:	75 a5                	jne    f010864b <env_page_ws_print+0xba>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f01086a6:	e9 95 01 00 00       	jmp    f0108840 <env_page_ws_print+0x2af>
		}
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
f01086ab:	83 ec 0c             	sub    $0xc,%esp
f01086ae:	68 4d 6a 13 f0       	push   $0xf0136a4d
f01086b3:	e8 56 86 ff ff       	call   f0100d0e <cprintf>
f01086b8:	83 c4 10             	add    $0x10,%esp
		for(i=0; i< (e->page_WS_max_size); i++ )
f01086bb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01086c2:	e9 6a 01 00 00       	jmp    f0108831 <env_page_ws_print+0x2a0>
		{
			if (e->ptr_pageWorkingSet[i].empty)
f01086c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01086ca:	8b 48 78             	mov    0x78(%eax),%ecx
f01086cd:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01086d0:	89 d0                	mov    %edx,%eax
f01086d2:	01 c0                	add    %eax,%eax
f01086d4:	01 d0                	add    %edx,%eax
f01086d6:	c1 e0 03             	shl    $0x3,%eax
f01086d9:	01 c8                	add    %ecx,%eax
f01086db:	8a 40 04             	mov    0x4(%eax),%al
f01086de:	84 c0                	test   %al,%al
f01086e0:	74 43                	je     f0108725 <env_page_ws_print+0x194>
			{
				cprintf("EMPTY LOCATION");
f01086e2:	83 ec 0c             	sub    $0xc,%esp
f01086e5:	68 57 6a 13 f0       	push   $0xf0136a57
f01086ea:	e8 1f 86 ff ff       	call   f0100d0e <cprintf>
f01086ef:	83 c4 10             	add    $0x10,%esp
				if(i==e->page_last_WS_index )
f01086f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01086f5:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f01086fb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01086fe:	75 10                	jne    f0108710 <env_page_ws_print+0x17f>
				{
					cprintf("		<--");
f0108700:	83 ec 0c             	sub    $0xc,%esp
f0108703:	68 66 6a 13 f0       	push   $0xf0136a66
f0108708:	e8 01 86 ff ff       	call   f0100d0e <cprintf>
f010870d:	83 c4 10             	add    $0x10,%esp
				}
				cprintf("\n");
f0108710:	83 ec 0c             	sub    $0xc,%esp
f0108713:	68 6c 6a 13 f0       	push   $0xf0136a6c
f0108718:	e8 f1 85 ff ff       	call   f0100d0e <cprintf>
f010871d:	83 c4 10             	add    $0x10,%esp
				continue;
f0108720:	e9 09 01 00 00       	jmp    f010882e <env_page_ws_print+0x29d>
			}
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f0108725:	8b 45 08             	mov    0x8(%ebp),%eax
f0108728:	8b 48 78             	mov    0x78(%eax),%ecx
f010872b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010872e:	89 d0                	mov    %edx,%eax
f0108730:	01 c0                	add    %eax,%eax
f0108732:	01 d0                	add    %edx,%eax
f0108734:	c1 e0 03             	shl    $0x3,%eax
f0108737:	01 c8                	add    %ecx,%eax
f0108739:	8b 00                	mov    (%eax),%eax
f010873b:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 time_stamp = e->ptr_pageWorkingSet[i].time_stamp;
f010873e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108741:	8b 48 78             	mov    0x78(%eax),%ecx
f0108744:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108747:	89 d0                	mov    %edx,%eax
f0108749:	01 c0                	add    %eax,%eax
f010874b:	01 d0                	add    %edx,%eax
f010874d:	c1 e0 03             	shl    $0x3,%eax
f0108750:	01 c8                	add    %ecx,%eax
f0108752:	8b 40 08             	mov    0x8(%eax),%eax
f0108755:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f0108758:	8b 45 08             	mov    0x8(%ebp),%eax
f010875b:	8b 40 5c             	mov    0x5c(%eax),%eax
f010875e:	83 ec 08             	sub    $0x8,%esp
f0108761:	ff 75 e8             	pushl  -0x18(%ebp)
f0108764:	50                   	push   %eax
f0108765:	e8 fd f9 ff ff       	call   f0108167 <pt_get_page_permissions>
f010876a:	83 c4 10             	add    $0x10,%esp
f010876d:	89 45 e0             	mov    %eax,-0x20(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f0108770:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108773:	83 e0 40             	and    $0x40,%eax
f0108776:	85 c0                	test   %eax,%eax
f0108778:	0f 95 c0             	setne  %al
f010877b:	88 45 df             	mov    %al,-0x21(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f010877e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108781:	83 e0 20             	and    $0x20,%eax
f0108784:	85 c0                	test   %eax,%eax
f0108786:	0f 95 c0             	setne  %al
f0108789:	88 45 de             	mov    %al,-0x22(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f010878c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010878f:	25 00 02 00 00       	and    $0x200,%eax
f0108794:	85 c0                	test   %eax,%eax
f0108796:	0f 95 c0             	setne  %al
f0108799:	88 45 dd             	mov    %al,-0x23(%ebp)


			cprintf("address @ %d = %x",i, e->ptr_pageWorkingSet[i].virtual_address);
f010879c:	8b 45 08             	mov    0x8(%ebp),%eax
f010879f:	8b 48 78             	mov    0x78(%eax),%ecx
f01087a2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01087a5:	89 d0                	mov    %edx,%eax
f01087a7:	01 c0                	add    %eax,%eax
f01087a9:	01 d0                	add    %edx,%eax
f01087ab:	c1 e0 03             	shl    $0x3,%eax
f01087ae:	01 c8                	add    %ecx,%eax
f01087b0:	8b 00                	mov    (%eax),%eax
f01087b2:	83 ec 04             	sub    $0x4,%esp
f01087b5:	50                   	push   %eax
f01087b6:	ff 75 ec             	pushl  -0x14(%ebp)
f01087b9:	68 6e 6a 13 f0       	push   $0xf0136a6e
f01087be:	e8 4b 85 ff ff       	call   f0100d0e <cprintf>
f01087c3:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d", isUsed, isModified, isBuffered, time_stamp, e->ptr_pageWorkingSet[i].sweeps_counter) ;
f01087c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01087c9:	8b 48 78             	mov    0x78(%eax),%ecx
f01087cc:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01087cf:	89 d0                	mov    %edx,%eax
f01087d1:	01 c0                	add    %eax,%eax
f01087d3:	01 d0                	add    %edx,%eax
f01087d5:	c1 e0 03             	shl    $0x3,%eax
f01087d8:	01 c8                	add    %ecx,%eax
f01087da:	8b 58 0c             	mov    0xc(%eax),%ebx
f01087dd:	0f be 4d dd          	movsbl -0x23(%ebp),%ecx
f01087e1:	0f be 55 df          	movsbl -0x21(%ebp),%edx
f01087e5:	0f be 45 de          	movsbl -0x22(%ebp),%eax
f01087e9:	83 ec 08             	sub    $0x8,%esp
f01087ec:	53                   	push   %ebx
f01087ed:	ff 75 e4             	pushl  -0x1c(%ebp)
f01087f0:	51                   	push   %ecx
f01087f1:	52                   	push   %edx
f01087f2:	50                   	push   %eax
f01087f3:	68 80 6a 13 f0       	push   $0xf0136a80
f01087f8:	e8 11 85 ff ff       	call   f0100d0e <cprintf>
f01087fd:	83 c4 20             	add    $0x20,%esp

			if(i==e->page_last_WS_index )
f0108800:	8b 45 08             	mov    0x8(%ebp),%eax
f0108803:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f0108809:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010880c:	75 10                	jne    f010881e <env_page_ws_print+0x28d>
			{
				cprintf(" <--");
f010880e:	83 ec 0c             	sub    $0xc,%esp
f0108811:	68 c7 6a 13 f0       	push   $0xf0136ac7
f0108816:	e8 f3 84 ff ff       	call   f0100d0e <cprintf>
f010881b:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f010881e:	83 ec 0c             	sub    $0xc,%esp
f0108821:	68 6c 6a 13 f0       	push   $0xf0136a6c
f0108826:	e8 e3 84 ff ff       	call   f0100d0e <cprintf>
f010882b:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
		for(i=0; i< (e->page_WS_max_size); i++ )
f010882e:	ff 45 ec             	incl   -0x14(%ebp)
f0108831:	8b 45 08             	mov    0x8(%ebp),%eax
f0108834:	8b 40 74             	mov    0x74(%eax),%eax
f0108837:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010883a:	0f 87 87 fe ff ff    	ja     f01086c7 <env_page_ws_print+0x136>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f0108840:	90                   	nop
f0108841:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108844:	c9                   	leave  
f0108845:	c3                   	ret    

f0108846 <env_table_ws_print>:

// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f0108846:	55                   	push   %ebp
f0108847:	89 e5                	mov    %esp,%ebp
f0108849:	53                   	push   %ebx
f010884a:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f010884d:	83 ec 0c             	sub    $0xc,%esp
f0108850:	68 cc 6a 13 f0       	push   $0xf0136acc
f0108855:	e8 b4 84 ff ff       	call   f0100d0e <cprintf>
f010885a:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f010885d:	83 ec 0c             	sub    $0xc,%esp
f0108860:	68 01 6b 13 f0       	push   $0xf0136b01
f0108865:	e8 a4 84 ff ff       	call   f0100d0e <cprintf>
f010886a:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f010886d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0108874:	e9 10 01 00 00       	jmp    f0108989 <env_table_ws_print+0x143>
	{
		if (e->__ptr_tws[i].empty)
f0108879:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010887c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010887f:	89 d0                	mov    %edx,%eax
f0108881:	01 c0                	add    %eax,%eax
f0108883:	01 d0                	add    %edx,%eax
f0108885:	c1 e0 03             	shl    $0x3,%eax
f0108888:	01 c8                	add    %ecx,%eax
f010888a:	83 e8 80             	sub    $0xffffff80,%eax
f010888d:	8a 00                	mov    (%eax),%al
f010888f:	84 c0                	test   %al,%al
f0108891:	74 43                	je     f01088d6 <env_table_ws_print+0x90>
		{
			cprintf("EMPTY LOCATION");
f0108893:	83 ec 0c             	sub    $0xc,%esp
f0108896:	68 57 6a 13 f0       	push   $0xf0136a57
f010889b:	e8 6e 84 ff ff       	call   f0100d0e <cprintf>
f01088a0:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f01088a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01088a6:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f01088ac:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01088af:	75 10                	jne    f01088c1 <env_table_ws_print+0x7b>
			{
				cprintf("		<--");
f01088b1:	83 ec 0c             	sub    $0xc,%esp
f01088b4:	68 66 6a 13 f0       	push   $0xf0136a66
f01088b9:	e8 50 84 ff ff       	call   f0100d0e <cprintf>
f01088be:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f01088c1:	83 ec 0c             	sub    $0xc,%esp
f01088c4:	68 6c 6a 13 f0       	push   $0xf0136a6c
f01088c9:	e8 40 84 ff ff       	call   f0100d0e <cprintf>
f01088ce:	83 c4 10             	add    $0x10,%esp
			continue;
f01088d1:	e9 b0 00 00 00       	jmp    f0108986 <env_table_ws_print+0x140>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f01088d6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01088d9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01088dc:	89 d0                	mov    %edx,%eax
f01088de:	01 c0                	add    %eax,%eax
f01088e0:	01 d0                	add    %edx,%eax
f01088e2:	c1 e0 03             	shl    $0x3,%eax
f01088e5:	01 c8                	add    %ecx,%eax
f01088e7:	83 c0 7c             	add    $0x7c,%eax
f01088ea:	8b 00                	mov    (%eax),%eax
f01088ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f01088ef:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01088f2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01088f5:	89 d0                	mov    %edx,%eax
f01088f7:	01 c0                	add    %eax,%eax
f01088f9:	01 d0                	add    %edx,%eax
f01088fb:	c1 e0 03             	shl    $0x3,%eax
f01088fe:	01 c8                	add    %ecx,%eax
f0108900:	83 c0 7c             	add    $0x7c,%eax
f0108903:	8b 00                	mov    (%eax),%eax
f0108905:	83 ec 04             	sub    $0x4,%esp
f0108908:	50                   	push   %eax
f0108909:	ff 75 f4             	pushl  -0xc(%ebp)
f010890c:	68 0c 6b 13 f0       	push   $0xf0136b0c
f0108911:	e8 f8 83 ff ff       	call   f0100d0e <cprintf>
f0108916:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f0108919:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010891c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010891f:	89 d0                	mov    %edx,%eax
f0108921:	01 c0                	add    %eax,%eax
f0108923:	01 d0                	add    %edx,%eax
f0108925:	c1 e0 03             	shl    $0x3,%eax
f0108928:	01 c8                	add    %ecx,%eax
f010892a:	05 84 00 00 00       	add    $0x84,%eax
f010892f:	8b 18                	mov    (%eax),%ebx
f0108931:	8b 45 08             	mov    0x8(%ebp),%eax
f0108934:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108937:	83 ec 08             	sub    $0x8,%esp
f010893a:	ff 75 f0             	pushl  -0x10(%ebp)
f010893d:	50                   	push   %eax
f010893e:	e8 43 f9 ff ff       	call   f0108286 <pd_is_table_used>
f0108943:	83 c4 10             	add    $0x10,%esp
f0108946:	83 ec 04             	sub    $0x4,%esp
f0108949:	53                   	push   %ebx
f010894a:	50                   	push   %eax
f010894b:	68 24 6b 13 f0       	push   $0xf0136b24
f0108950:	e8 b9 83 ff ff       	call   f0100d0e <cprintf>
f0108955:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f0108958:	8b 45 08             	mov    0x8(%ebp),%eax
f010895b:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f0108961:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108964:	75 10                	jne    f0108976 <env_table_ws_print+0x130>
		{
			cprintf(" <--");
f0108966:	83 ec 0c             	sub    $0xc,%esp
f0108969:	68 c7 6a 13 f0       	push   $0xf0136ac7
f010896e:	e8 9b 83 ff ff       	call   f0100d0e <cprintf>
f0108973:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f0108976:	83 ec 0c             	sub    $0xc,%esp
f0108979:	68 6c 6a 13 f0       	push   $0xf0136a6c
f010897e:	e8 8b 83 ff ff       	call   f0100d0e <cprintf>
f0108983:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0108986:	ff 45 f4             	incl   -0xc(%ebp)
f0108989:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010898d:	0f 86 e6 fe ff ff    	jbe    f0108879 <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f0108993:	90                   	nop
f0108994:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108997:	c9                   	leave  
f0108998:	c3                   	ret    

f0108999 <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f0108999:	55                   	push   %ebp
f010899a:	89 e5                	mov    %esp,%ebp
f010899c:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f010899f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01089a6:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f01089ad:	eb 20                	jmp    f01089cf <env_table_ws_get_size+0x36>
f01089af:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01089b2:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01089b5:	89 d0                	mov    %edx,%eax
f01089b7:	01 c0                	add    %eax,%eax
f01089b9:	01 d0                	add    %edx,%eax
f01089bb:	c1 e0 03             	shl    $0x3,%eax
f01089be:	01 c8                	add    %ecx,%eax
f01089c0:	83 e8 80             	sub    $0xffffff80,%eax
f01089c3:	8a 00                	mov    (%eax),%al
f01089c5:	84 c0                	test   %al,%al
f01089c7:	75 03                	jne    f01089cc <env_table_ws_get_size+0x33>
f01089c9:	ff 45 f8             	incl   -0x8(%ebp)
f01089cc:	ff 45 fc             	incl   -0x4(%ebp)
f01089cf:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f01089d3:	7e da                	jle    f01089af <env_table_ws_get_size+0x16>
	return counter;
f01089d5:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01089d8:	c9                   	leave  
f01089d9:	c3                   	ret    

f01089da <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f01089da:	55                   	push   %ebp
f01089db:	89 e5                	mov    %esp,%ebp
f01089dd:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f01089e0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f01089e7:	eb 4c                	jmp    f0108a35 <env_table_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f01089e9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01089ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01089ef:	89 d0                	mov    %edx,%eax
f01089f1:	01 c0                	add    %eax,%eax
f01089f3:	01 d0                	add    %edx,%eax
f01089f5:	c1 e0 03             	shl    $0x3,%eax
f01089f8:	01 c8                	add    %ecx,%eax
f01089fa:	83 c0 7c             	add    $0x7c,%eax
f01089fd:	8b 00                	mov    (%eax),%eax
f01089ff:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108a02:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108a05:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108a0a:	89 c2                	mov    %eax,%edx
f0108a0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108a0f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108a12:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108a15:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108a1a:	39 c2                	cmp    %eax,%edx
f0108a1c:	75 14                	jne    f0108a32 <env_table_ws_invalidate+0x58>
		{
			env_table_ws_clear_entry(e, i);
f0108a1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108a21:	83 ec 08             	sub    $0x8,%esp
f0108a24:	50                   	push   %eax
f0108a25:	ff 75 08             	pushl  0x8(%ebp)
f0108a28:	e8 b8 00 00 00       	call   f0108ae5 <env_table_ws_clear_entry>
f0108a2d:	83 c4 10             	add    $0x10,%esp
			break;
f0108a30:	eb 09                	jmp    f0108a3b <env_table_ws_invalidate+0x61>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f0108a32:	ff 45 f4             	incl   -0xc(%ebp)
f0108a35:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0108a39:	7e ae                	jle    f01089e9 <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f0108a3b:	90                   	nop
f0108a3c:	c9                   	leave  
f0108a3d:	c3                   	ret    

f0108a3e <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0108a3e:	55                   	push   %ebp
f0108a3f:	89 e5                	mov    %esp,%ebp
f0108a41:	53                   	push   %ebx
f0108a42:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108a45:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108a49:	76 19                	jbe    f0108a64 <env_table_ws_set_entry+0x26>
f0108a4b:	68 48 6b 13 f0       	push   $0xf0136b48
f0108a50:	68 6e 69 13 f0       	push   $0xf013696e
f0108a55:	68 b6 00 00 00       	push   $0xb6
f0108a5a:	68 84 69 13 f0       	push   $0xf0136984
f0108a5f:	e8 a1 77 ff ff       	call   f0100205 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f0108a64:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0108a6b:	76 19                	jbe    f0108a86 <env_table_ws_set_entry+0x48>
f0108a6d:	68 a4 69 13 f0       	push   $0xf01369a4
f0108a72:	68 6e 69 13 f0       	push   $0xf013696e
f0108a77:	68 b7 00 00 00       	push   $0xb7
f0108a7c:	68 84 69 13 f0       	push   $0xf0136984
f0108a81:	e8 7f 77 ff ff       	call   f0100205 <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f0108a86:	8b 45 10             	mov    0x10(%ebp),%eax
f0108a89:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108a8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108a8f:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108a94:	89 c1                	mov    %eax,%ecx
f0108a96:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0108a99:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a9c:	89 d0                	mov    %edx,%eax
f0108a9e:	01 c0                	add    %eax,%eax
f0108aa0:	01 d0                	add    %edx,%eax
f0108aa2:	c1 e0 03             	shl    $0x3,%eax
f0108aa5:	01 d8                	add    %ebx,%eax
f0108aa7:	83 c0 7c             	add    $0x7c,%eax
f0108aaa:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f0108aac:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108aaf:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108ab2:	89 d0                	mov    %edx,%eax
f0108ab4:	01 c0                	add    %eax,%eax
f0108ab6:	01 d0                	add    %edx,%eax
f0108ab8:	c1 e0 03             	shl    $0x3,%eax
f0108abb:	01 c8                	add    %ecx,%eax
f0108abd:	83 e8 80             	sub    $0xffffff80,%eax
f0108ac0:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f0108ac3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108ac6:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108ac9:	89 d0                	mov    %edx,%eax
f0108acb:	01 c0                	add    %eax,%eax
f0108acd:	01 d0                	add    %edx,%eax
f0108acf:	c1 e0 03             	shl    $0x3,%eax
f0108ad2:	01 c8                	add    %ecx,%eax
f0108ad4:	05 84 00 00 00       	add    $0x84,%eax
f0108ad9:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f0108adf:	90                   	nop
}
f0108ae0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108ae3:	c9                   	leave  
f0108ae4:	c3                   	ret    

f0108ae5 <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0108ae5:	55                   	push   %ebp
f0108ae6:	89 e5                	mov    %esp,%ebp
f0108ae8:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108aeb:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108aef:	76 19                	jbe    f0108b0a <env_table_ws_clear_entry+0x25>
f0108af1:	68 48 6b 13 f0       	push   $0xf0136b48
f0108af6:	68 6e 69 13 f0       	push   $0xf013696e
f0108afb:	68 c2 00 00 00       	push   $0xc2
f0108b00:	68 84 69 13 f0       	push   $0xf0136984
f0108b05:	e8 fb 76 ff ff       	call   f0100205 <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f0108b0a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108b0d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108b10:	89 d0                	mov    %edx,%eax
f0108b12:	01 c0                	add    %eax,%eax
f0108b14:	01 d0                	add    %edx,%eax
f0108b16:	c1 e0 03             	shl    $0x3,%eax
f0108b19:	01 c8                	add    %ecx,%eax
f0108b1b:	83 c0 7c             	add    $0x7c,%eax
f0108b1e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f0108b24:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108b27:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108b2a:	89 d0                	mov    %edx,%eax
f0108b2c:	01 c0                	add    %eax,%eax
f0108b2e:	01 d0                	add    %edx,%eax
f0108b30:	c1 e0 03             	shl    $0x3,%eax
f0108b33:	01 c8                	add    %ecx,%eax
f0108b35:	83 e8 80             	sub    $0xffffff80,%eax
f0108b38:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f0108b3b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108b3e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108b41:	89 d0                	mov    %edx,%eax
f0108b43:	01 c0                	add    %eax,%eax
f0108b45:	01 d0                	add    %edx,%eax
f0108b47:	c1 e0 03             	shl    $0x3,%eax
f0108b4a:	01 c8                	add    %ecx,%eax
f0108b4c:	05 84 00 00 00       	add    $0x84,%eax
f0108b51:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f0108b57:	90                   	nop
f0108b58:	c9                   	leave  
f0108b59:	c3                   	ret    

f0108b5a <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0108b5a:	55                   	push   %ebp
f0108b5b:	89 e5                	mov    %esp,%ebp
f0108b5d:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108b60:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108b64:	76 19                	jbe    f0108b7f <env_table_ws_get_virtual_address+0x25>
f0108b66:	68 48 6b 13 f0       	push   $0xf0136b48
f0108b6b:	68 6e 69 13 f0       	push   $0xf013696e
f0108b70:	68 ca 00 00 00       	push   $0xca
f0108b75:	68 84 69 13 f0       	push   $0xf0136984
f0108b7a:	e8 86 76 ff ff       	call   f0100205 <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f0108b7f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108b82:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108b85:	89 d0                	mov    %edx,%eax
f0108b87:	01 c0                	add    %eax,%eax
f0108b89:	01 d0                	add    %edx,%eax
f0108b8b:	c1 e0 03             	shl    $0x3,%eax
f0108b8e:	01 c8                	add    %ecx,%eax
f0108b90:	83 c0 7c             	add    $0x7c,%eax
f0108b93:	8b 00                	mov    (%eax),%eax
f0108b95:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108b98:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108b9b:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f0108ba0:	c9                   	leave  
f0108ba1:	c3                   	ret    

f0108ba2 <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0108ba2:	55                   	push   %ebp
f0108ba3:	89 e5                	mov    %esp,%ebp
f0108ba5:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108ba8:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108bac:	76 19                	jbe    f0108bc7 <env_table_ws_get_time_stamp+0x25>
f0108bae:	68 48 6b 13 f0       	push   $0xf0136b48
f0108bb3:	68 6e 69 13 f0       	push   $0xf013696e
f0108bb8:	68 d1 00 00 00       	push   $0xd1
f0108bbd:	68 84 69 13 f0       	push   $0xf0136984
f0108bc2:	e8 3e 76 ff ff       	call   f0100205 <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f0108bc7:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108bca:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108bcd:	89 d0                	mov    %edx,%eax
f0108bcf:	01 c0                	add    %eax,%eax
f0108bd1:	01 d0                	add    %edx,%eax
f0108bd3:	c1 e0 03             	shl    $0x3,%eax
f0108bd6:	01 c8                	add    %ecx,%eax
f0108bd8:	05 84 00 00 00       	add    $0x84,%eax
f0108bdd:	8b 00                	mov    (%eax),%eax
}
f0108bdf:	c9                   	leave  
f0108be0:	c3                   	ret    

f0108be1 <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0108be1:	55                   	push   %ebp
f0108be2:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f0108be4:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108be7:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108bea:	89 d0                	mov    %edx,%eax
f0108bec:	01 c0                	add    %eax,%eax
f0108bee:	01 d0                	add    %edx,%eax
f0108bf0:	c1 e0 03             	shl    $0x3,%eax
f0108bf3:	01 c8                	add    %ecx,%eax
f0108bf5:	83 e8 80             	sub    $0xffffff80,%eax
f0108bf8:	8a 00                	mov    (%eax),%al
f0108bfa:	0f b6 c0             	movzbl %al,%eax
}
f0108bfd:	5d                   	pop    %ebp
f0108bfe:	c3                   	ret    

f0108bff <cut_paste_WS>:
///=================================================================================================

// Change WS Sizes For PRIORITY  =========================================================

void cut_paste_WS(struct WorkingSetElement* newWS, int newSize, struct Env* e)
{
f0108bff:	55                   	push   %ebp
f0108c00:	89 e5                	mov    %esp,%ebp
f0108c02:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] cut_paste_WS
	//your code is here, remove the panic and write your code
	panic("cut_paste_WS() is not implemented yet...!!");
f0108c05:	83 ec 04             	sub    $0x4,%esp
f0108c08:	68 7c 6b 13 f0       	push   $0xf0136b7c
f0108c0d:	68 e5 00 00 00       	push   $0xe5
f0108c12:	68 84 69 13 f0       	push   $0xf0136984
f0108c17:	e8 e9 75 ff ff       	call   f0100205 <_panic>

f0108c1c <double_WS_Size>:
}

void double_WS_Size(struct Env* e, int isOneTimeOnly)
{
f0108c1c:	55                   	push   %ebp
f0108c1d:	89 e5                	mov    %esp,%ebp
f0108c1f:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] double_WS_Size
	//your code is here, remove the panic and write your code
	panic("double_WS_Size() is not implemented yet...!!");
f0108c22:	83 ec 04             	sub    $0x4,%esp
f0108c25:	68 a8 6b 13 f0       	push   $0xf0136ba8
f0108c2a:	68 ec 00 00 00       	push   $0xec
f0108c2f:	68 84 69 13 f0       	push   $0xf0136984
f0108c34:	e8 cc 75 ff ff       	call   f0100205 <_panic>

f0108c39 <half_WS_Size>:
}

void half_WS_Size(struct Env* e, int isImmidiate)
{
f0108c39:	55                   	push   %ebp
f0108c3a:	89 e5                	mov    %esp,%ebp
f0108c3c:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] half_WS_Size
	//your code is here, remove the panic and write your code
	panic("half_WS_Size() is not implemented yet...!!");
f0108c3f:	83 ec 04             	sub    $0x4,%esp
f0108c42:	68 d8 6b 13 f0       	push   $0xf0136bd8
f0108c47:	68 f3 00 00 00       	push   $0xf3
f0108c4c:	68 84 69 13 f0       	push   $0xf0136984
f0108c51:	e8 af 75 ff ff       	call   f0100205 <_panic>

f0108c56 <cut_paste_pages>:
//===============================
//This function should cut-paste the given number of pages from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f0108c56:	55                   	push   %ebp
f0108c57:	89 e5                	mov    %esp,%ebp
f0108c59:	83 ec 48             	sub    $0x48,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] cut_paste_pages
	// Write your code here, remove the panic and write your code
	uint32 new_dest_va = dest_va;
f0108c5c:	8b 45 10             	mov    0x10(%ebp),%eax
f0108c5f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 new_source_va = source_va;
f0108c62:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108c65:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(dest_va%PAGE_SIZE!=0)
f0108c68:	8b 45 10             	mov    0x10(%ebp),%eax
f0108c6b:	25 ff 0f 00 00       	and    $0xfff,%eax
f0108c70:	85 c0                	test   %eax,%eax
f0108c72:	74 11                	je     f0108c85 <cut_paste_pages+0x2f>
		new_dest_va = ROUNDDOWN(dest_va,PAGE_SIZE);
f0108c74:	8b 45 10             	mov    0x10(%ebp),%eax
f0108c77:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108c7a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108c7d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108c82:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(source_va%PAGE_SIZE!=0)
f0108c85:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108c88:	25 ff 0f 00 00       	and    $0xfff,%eax
f0108c8d:	85 c0                	test   %eax,%eax
f0108c8f:	74 11                	je     f0108ca2 <cut_paste_pages+0x4c>
		new_source_va = ROUNDDOWN(source_va,PAGE_SIZE);
f0108c91:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108c94:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108c97:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108c9a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108c9f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 max_size = (PAGE_SIZE * num_of_pages) + new_dest_va;
f0108ca2:	8b 45 14             	mov    0x14(%ebp),%eax
f0108ca5:	c1 e0 0c             	shl    $0xc,%eax
f0108ca8:	89 c2                	mov    %eax,%edx
f0108caa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108cad:	01 d0                	add    %edx,%eax
f0108caf:	89 45 dc             	mov    %eax,-0x24(%ebp)

	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108cb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108cb5:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108cb8:	eb 4b                	jmp    f0108d05 <cut_paste_pages+0xaf>
	{
		uint32 *ptr_page_table_dest = NULL;
f0108cba:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
		get_page_table(page_directory,i,&ptr_page_table_dest);
f0108cc1:	83 ec 04             	sub    $0x4,%esp
f0108cc4:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108cc7:	50                   	push   %eax
f0108cc8:	ff 75 ec             	pushl  -0x14(%ebp)
f0108ccb:	ff 75 08             	pushl  0x8(%ebp)
f0108cce:	e8 de dd ff ff       	call   f0106ab1 <get_page_table>
f0108cd3:	83 c4 10             	add    $0x10,%esp
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);
f0108cd6:	83 ec 04             	sub    $0x4,%esp
f0108cd9:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108cdc:	50                   	push   %eax
f0108cdd:	ff 75 ec             	pushl  -0x14(%ebp)
f0108ce0:	ff 75 08             	pushl  0x8(%ebp)
f0108ce3:	e8 1e e1 ff ff       	call   f0106e06 <get_frame_info>
f0108ce8:	83 c4 10             	add    $0x10,%esp
f0108ceb:	89 45 d8             	mov    %eax,-0x28(%ebp)

		if(dest_frame!=NULL)
f0108cee:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0108cf2:	74 0a                	je     f0108cfe <cut_paste_pages+0xa8>
			return -1;
f0108cf4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108cf9:	e9 d4 00 00 00       	jmp    f0108dd2 <cut_paste_pages+0x17c>

	if(source_va%PAGE_SIZE!=0)
		new_source_va = ROUNDDOWN(source_va,PAGE_SIZE);
	uint32 max_size = (PAGE_SIZE * num_of_pages) + new_dest_va;

	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108cfe:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f0108d05:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108d08:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0108d0b:	72 ad                	jb     f0108cba <cut_paste_pages+0x64>
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);

		if(dest_frame!=NULL)
			return -1;
	}
	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108d0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108d10:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0108d13:	e9 a9 00 00 00       	jmp    f0108dc1 <cut_paste_pages+0x16b>
	{
		uint32 *ptr_page_table_dest = NULL;
f0108d18:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
		get_page_table(page_directory,i,&ptr_page_table_dest);
f0108d1f:	83 ec 04             	sub    $0x4,%esp
f0108d22:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0108d25:	50                   	push   %eax
f0108d26:	ff 75 e8             	pushl  -0x18(%ebp)
f0108d29:	ff 75 08             	pushl  0x8(%ebp)
f0108d2c:	e8 80 dd ff ff       	call   f0106ab1 <get_page_table>
f0108d31:	83 c4 10             	add    $0x10,%esp

		if(ptr_page_table_dest == NULL)
f0108d34:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0108d37:	85 c0                	test   %eax,%eax
f0108d39:	75 14                	jne    f0108d4f <cut_paste_pages+0xf9>
			ptr_page_table_dest = create_page_table(page_directory,i);
f0108d3b:	83 ec 08             	sub    $0x8,%esp
f0108d3e:	ff 75 e8             	pushl  -0x18(%ebp)
f0108d41:	ff 75 08             	pushl  0x8(%ebp)
f0108d44:	e8 be de ff ff       	call   f0106c07 <create_page_table>
f0108d49:	83 c4 10             	add    $0x10,%esp
f0108d4c:	89 45 c8             	mov    %eax,-0x38(%ebp)

		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);
f0108d4f:	83 ec 04             	sub    $0x4,%esp
f0108d52:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0108d55:	50                   	push   %eax
f0108d56:	ff 75 e8             	pushl  -0x18(%ebp)
f0108d59:	ff 75 08             	pushl  0x8(%ebp)
f0108d5c:	e8 a5 e0 ff ff       	call   f0106e06 <get_frame_info>
f0108d61:	83 c4 10             	add    $0x10,%esp
f0108d64:	89 45 c4             	mov    %eax,-0x3c(%ebp)

		int source_perm = pt_get_page_permissions(page_directory,new_source_va);
f0108d67:	83 ec 08             	sub    $0x8,%esp
f0108d6a:	ff 75 f0             	pushl  -0x10(%ebp)
f0108d6d:	ff 75 08             	pushl  0x8(%ebp)
f0108d70:	e8 f2 f3 ff ff       	call   f0108167 <pt_get_page_permissions>
f0108d75:	83 c4 10             	add    $0x10,%esp
f0108d78:	89 45 d4             	mov    %eax,-0x2c(%ebp)

		unmap_frame(page_directory,new_source_va);
f0108d7b:	83 ec 08             	sub    $0x8,%esp
f0108d7e:	ff 75 f0             	pushl  -0x10(%ebp)
f0108d81:	ff 75 08             	pushl  0x8(%ebp)
f0108d84:	e8 ed e0 ff ff       	call   f0106e76 <unmap_frame>
f0108d89:	83 c4 10             	add    $0x10,%esp
		uint32 ret = allocate_frame(&dest_frame);
f0108d8c:	83 ec 0c             	sub    $0xc,%esp
f0108d8f:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f0108d92:	50                   	push   %eax
f0108d93:	e8 5a db ff ff       	call   f01068f2 <allocate_frame>
f0108d98:	83 c4 10             	add    $0x10,%esp
f0108d9b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		map_frame(page_directory, dest_frame, i,source_perm);
f0108d9e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0108da1:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108da4:	ff 75 e8             	pushl  -0x18(%ebp)
f0108da7:	50                   	push   %eax
f0108da8:	ff 75 08             	pushl  0x8(%ebp)
f0108dab:	e8 91 df ff ff       	call   f0106d41 <map_frame>
f0108db0:	83 c4 10             	add    $0x10,%esp

		new_source_va += PAGE_SIZE;
f0108db3:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);

		if(dest_frame!=NULL)
			return -1;
	}
	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108dba:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
f0108dc1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108dc4:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0108dc7:	0f 82 4b ff ff ff    	jb     f0108d18 <cut_paste_pages+0xc2>
		uint32 ret = allocate_frame(&dest_frame);
		map_frame(page_directory, dest_frame, i,source_perm);

		new_source_va += PAGE_SIZE;
	}
	return 0;
f0108dcd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108dd2:	c9                   	leave  
f0108dd3:	c3                   	ret    

f0108dd4 <copy_paste_chunk>:
//===============================
//This function should copy-paste the given size from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f0108dd4:	55                   	push   %ebp
f0108dd5:	89 e5                	mov    %esp,%ebp
f0108dd7:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] copy_paste_chunk
	// Write your code here, remove the panic and write your code
	//panic("copy_paste_chunk() is not implemented yet...!!");
	uint32 *page_table=NULL;
f0108dda:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	uint32 new_dest_va = dest_va;
f0108de1:	8b 45 10             	mov    0x10(%ebp),%eax
f0108de4:	89 45 e0             	mov    %eax,-0x20(%ebp)
	uint32 new_source_va = source_va;
f0108de7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108dea:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for(uint32 i=dest_va;i<dest_va+size ;i+=PAGE_SIZE)
f0108ded:	8b 45 10             	mov    0x10(%ebp),%eax
f0108df0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108df3:	e9 d1 00 00 00       	jmp    f0108ec9 <copy_paste_chunk+0xf5>
	{
	   get_page_table(page_directory,i,&page_table);
f0108df8:	83 ec 04             	sub    $0x4,%esp
f0108dfb:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108dfe:	50                   	push   %eax
f0108dff:	ff 75 f0             	pushl  -0x10(%ebp)
f0108e02:	ff 75 08             	pushl  0x8(%ebp)
f0108e05:	e8 a7 dc ff ff       	call   f0106ab1 <get_page_table>
f0108e0a:	83 c4 10             	add    $0x10,%esp
	   if(page_table==NULL)
f0108e0d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108e10:	85 c0                	test   %eax,%eax
f0108e12:	75 14                	jne    f0108e28 <copy_paste_chunk+0x54>
		   page_table=create_page_table(page_directory,i);
f0108e14:	83 ec 08             	sub    $0x8,%esp
f0108e17:	ff 75 f0             	pushl  -0x10(%ebp)
f0108e1a:	ff 75 08             	pushl  0x8(%ebp)
f0108e1d:	e8 e5 dd ff ff       	call   f0106c07 <create_page_table>
f0108e22:	83 c4 10             	add    $0x10,%esp
f0108e25:	89 45 d0             	mov    %eax,-0x30(%ebp)

	   struct FrameInfo *frame_info=get_frame_info(page_directory,i,&page_table);
f0108e28:	83 ec 04             	sub    $0x4,%esp
f0108e2b:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108e2e:	50                   	push   %eax
f0108e2f:	ff 75 f0             	pushl  -0x10(%ebp)
f0108e32:	ff 75 08             	pushl  0x8(%ebp)
f0108e35:	e8 cc df ff ff       	call   f0106e06 <get_frame_info>
f0108e3a:	83 c4 10             	add    $0x10,%esp
f0108e3d:	89 45 cc             	mov    %eax,-0x34(%ebp)
	   uint32 perm =pt_get_page_permissions(page_directory,i);
f0108e40:	83 ec 08             	sub    $0x8,%esp
f0108e43:	ff 75 f0             	pushl  -0x10(%ebp)
f0108e46:	ff 75 08             	pushl  0x8(%ebp)
f0108e49:	e8 19 f3 ff ff       	call   f0108167 <pt_get_page_permissions>
f0108e4e:	83 c4 10             	add    $0x10,%esp
f0108e51:	89 45 dc             	mov    %eax,-0x24(%ebp)

	   if((frame_info != NULL) && (( perm & PERM_WRITEABLE) !=PERM_WRITEABLE))
f0108e54:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108e57:	85 c0                	test   %eax,%eax
f0108e59:	74 14                	je     f0108e6f <copy_paste_chunk+0x9b>
f0108e5b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108e5e:	83 e0 02             	and    $0x2,%eax
f0108e61:	85 c0                	test   %eax,%eax
f0108e63:	75 0a                	jne    f0108e6f <copy_paste_chunk+0x9b>
			return -1;
f0108e65:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108e6a:	e9 a7 00 00 00       	jmp    f0108f16 <copy_paste_chunk+0x142>
	   else
	   {
		   if(frame_info == NULL)
f0108e6f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108e72:	85 c0                	test   %eax,%eax
f0108e74:	75 45                	jne    f0108ebb <copy_paste_chunk+0xe7>
		   {
			   uint32 perms =pt_get_page_permissions(page_directory,new_source_va);
f0108e76:	83 ec 08             	sub    $0x8,%esp
f0108e79:	ff 75 f4             	pushl  -0xc(%ebp)
f0108e7c:	ff 75 08             	pushl  0x8(%ebp)
f0108e7f:	e8 e3 f2 ff ff       	call   f0108167 <pt_get_page_permissions>
f0108e84:	83 c4 10             	add    $0x10,%esp
f0108e87:	89 45 d8             	mov    %eax,-0x28(%ebp)
			   uint32 user_perm = (perms & PERM_USER)|PERM_WRITEABLE;
f0108e8a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108e8d:	83 e0 04             	and    $0x4,%eax
f0108e90:	83 c8 02             	or     $0x2,%eax
f0108e93:	89 45 d4             	mov    %eax,-0x2c(%ebp)
			   allocate_frame(&frame_info);
f0108e96:	83 ec 0c             	sub    $0xc,%esp
f0108e99:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108e9c:	50                   	push   %eax
f0108e9d:	e8 50 da ff ff       	call   f01068f2 <allocate_frame>
f0108ea2:	83 c4 10             	add    $0x10,%esp
			   map_frame(page_directory,frame_info,i,user_perm);
f0108ea5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0108ea8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108eab:	52                   	push   %edx
f0108eac:	ff 75 f0             	pushl  -0x10(%ebp)
f0108eaf:	50                   	push   %eax
f0108eb0:	ff 75 08             	pushl  0x8(%ebp)
f0108eb3:	e8 89 de ff ff       	call   f0106d41 <map_frame>
f0108eb8:	83 c4 10             	add    $0x10,%esp
		   }
	   }
	   new_source_va += PAGE_SIZE;
f0108ebb:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
	// Write your code here, remove the panic and write your code
	//panic("copy_paste_chunk() is not implemented yet...!!");
	uint32 *page_table=NULL;
	uint32 new_dest_va = dest_va;
	uint32 new_source_va = source_va;
	for(uint32 i=dest_va;i<dest_va+size ;i+=PAGE_SIZE)
f0108ec2:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0108ec9:	8b 55 10             	mov    0x10(%ebp),%edx
f0108ecc:	8b 45 14             	mov    0x14(%ebp),%eax
f0108ecf:	01 d0                	add    %edx,%eax
f0108ed1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0108ed4:	0f 87 1e ff ff ff    	ja     f0108df8 <copy_paste_chunk+0x24>
			   map_frame(page_directory,frame_info,i,user_perm);
		   }
	   }
	   new_source_va += PAGE_SIZE;
	}
	uint32 *frame = (uint32*)dest_va;
f0108eda:	8b 45 10             	mov    0x10(%ebp),%eax
f0108edd:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32 *page = (uint32*)source_va;
f0108ee0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108ee3:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for (uint32 i = source_va; i < source_va+size ;i+=4)
f0108ee6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108ee9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108eec:	eb 16                	jmp    f0108f04 <copy_paste_chunk+0x130>
    {
	    *frame= *page;
f0108eee:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108ef1:	8b 10                	mov    (%eax),%edx
f0108ef3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108ef6:	89 10                	mov    %edx,(%eax)
	    frame++;
f0108ef8:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
	    page++;
f0108efc:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
	   }
	   new_source_va += PAGE_SIZE;
	}
	uint32 *frame = (uint32*)dest_va;
    uint32 *page = (uint32*)source_va;
    for (uint32 i = source_va; i < source_va+size ;i+=4)
f0108f00:	83 45 e4 04          	addl   $0x4,-0x1c(%ebp)
f0108f04:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108f07:	8b 45 14             	mov    0x14(%ebp),%eax
f0108f0a:	01 d0                	add    %edx,%eax
f0108f0c:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0108f0f:	77 dd                	ja     f0108eee <copy_paste_chunk+0x11a>
    {
	    *frame= *page;
	    frame++;
	    page++;
    }
	return 0;
f0108f11:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108f16:	c9                   	leave  
f0108f17:	c3                   	ret    

f0108f18 <share_chunk>:
// 3) SHARE RANGE IN RAM:
//===============================
//This function should share the given size from dest_va with the source_va
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f0108f18:	55                   	push   %ebp
f0108f19:	89 e5                	mov    %esp,%ebp
f0108f1b:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] share_chunk
	// Write your code here, remove the panic and write your code
	uint32 *page_table=NULL;
f0108f1e:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
    uint32 va_dest=ROUNDDOWN(dest_va,PAGE_SIZE);
f0108f25:	8b 45 10             	mov    0x10(%ebp),%eax
f0108f28:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108f2b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108f2e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108f33:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32 max_va_des=ROUNDUP(dest_va+size,PAGE_SIZE);
f0108f36:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f0108f3d:	8b 55 10             	mov    0x10(%ebp),%edx
f0108f40:	8b 45 14             	mov    0x14(%ebp),%eax
f0108f43:	01 c2                	add    %eax,%edx
f0108f45:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108f48:	01 d0                	add    %edx,%eax
f0108f4a:	48                   	dec    %eax
f0108f4b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108f4e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108f51:	ba 00 00 00 00       	mov    $0x0,%edx
f0108f56:	f7 75 e8             	divl   -0x18(%ebp)
f0108f59:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108f5c:	29 d0                	sub    %edx,%eax
f0108f5e:	89 45 e0             	mov    %eax,-0x20(%ebp)



   for(uint32 i=va_dest;i<max_va_des ;i+=PAGE_SIZE)
f0108f61:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108f64:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108f67:	e9 ac 00 00 00       	jmp    f0109018 <share_chunk+0x100>
    {
        get_page_table(page_directory,i,&page_table);
f0108f6c:	83 ec 04             	sub    $0x4,%esp
f0108f6f:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f0108f72:	50                   	push   %eax
f0108f73:	ff 75 f4             	pushl  -0xc(%ebp)
f0108f76:	ff 75 08             	pushl  0x8(%ebp)
f0108f79:	e8 33 db ff ff       	call   f0106ab1 <get_page_table>
f0108f7e:	83 c4 10             	add    $0x10,%esp
        if(page_table==NULL)
f0108f81:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108f84:	85 c0                	test   %eax,%eax
f0108f86:	75 14                	jne    f0108f9c <share_chunk+0x84>
           page_table=create_page_table(page_directory,i);
f0108f88:	83 ec 08             	sub    $0x8,%esp
f0108f8b:	ff 75 f4             	pushl  -0xc(%ebp)
f0108f8e:	ff 75 08             	pushl  0x8(%ebp)
f0108f91:	e8 71 dc ff ff       	call   f0106c07 <create_page_table>
f0108f96:	83 c4 10             	add    $0x10,%esp
f0108f99:	89 45 d4             	mov    %eax,-0x2c(%ebp)



      struct FrameInfo *frame_info=get_frame_info(page_directory,i,&page_table);
f0108f9c:	83 ec 04             	sub    $0x4,%esp
f0108f9f:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f0108fa2:	50                   	push   %eax
f0108fa3:	ff 75 f4             	pushl  -0xc(%ebp)
f0108fa6:	ff 75 08             	pushl  0x8(%ebp)
f0108fa9:	e8 58 de ff ff       	call   f0106e06 <get_frame_info>
f0108fae:	83 c4 10             	add    $0x10,%esp
f0108fb1:	89 45 dc             	mov    %eax,-0x24(%ebp)
       if (frame_info != NULL)
f0108fb4:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0108fb8:	74 07                	je     f0108fc1 <share_chunk+0xa9>
           return -1;
f0108fba:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108fbf:	eb 68                	jmp    f0109029 <share_chunk+0x111>



       uint32 *page_table_source = NULL;
f0108fc1:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
        get_page_table(page_directory,source_va,&page_table_source);
f0108fc8:	83 ec 04             	sub    $0x4,%esp
f0108fcb:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108fce:	50                   	push   %eax
f0108fcf:	ff 75 0c             	pushl  0xc(%ebp)
f0108fd2:	ff 75 08             	pushl  0x8(%ebp)
f0108fd5:	e8 d7 da ff ff       	call   f0106ab1 <get_page_table>
f0108fda:	83 c4 10             	add    $0x10,%esp
        struct FrameInfo *page_info=get_frame_info(page_directory,source_va,&page_table_source);
f0108fdd:	83 ec 04             	sub    $0x4,%esp
f0108fe0:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108fe3:	50                   	push   %eax
f0108fe4:	ff 75 0c             	pushl  0xc(%ebp)
f0108fe7:	ff 75 08             	pushl  0x8(%ebp)
f0108fea:	e8 17 de ff ff       	call   f0106e06 <get_frame_info>
f0108fef:	83 c4 10             	add    $0x10,%esp
f0108ff2:	89 45 d8             	mov    %eax,-0x28(%ebp)



       map_frame(page_directory,page_info,i,perms);
f0108ff5:	8b 45 18             	mov    0x18(%ebp),%eax
f0108ff8:	50                   	push   %eax
f0108ff9:	ff 75 f4             	pushl  -0xc(%ebp)
f0108ffc:	ff 75 d8             	pushl  -0x28(%ebp)
f0108fff:	ff 75 08             	pushl  0x8(%ebp)
f0109002:	e8 3a dd ff ff       	call   f0106d41 <map_frame>
f0109007:	83 c4 10             	add    $0x10,%esp



       source_va += PAGE_SIZE;
f010900a:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    uint32 va_dest=ROUNDDOWN(dest_va,PAGE_SIZE);
    uint32 max_va_des=ROUNDUP(dest_va+size,PAGE_SIZE);



   for(uint32 i=va_dest;i<max_va_des ;i+=PAGE_SIZE)
f0109011:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0109018:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010901b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010901e:	0f 82 48 ff ff ff    	jb     f0108f6c <share_chunk+0x54>



       source_va += PAGE_SIZE;
    }
    return 0;
f0109024:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109029:	c9                   	leave  
f010902a:	c3                   	ret    

f010902b <allocate_chunk>:
// 4) ALLOCATE CHUNK IN RAM:
//===============================
//This function should allocate in RAM the given range [va, va+size)
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f010902b:	55                   	push   %ebp
f010902c:	89 e5                	mov    %esp,%ebp
f010902e:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] allocate_chunk
	// Write your code here, remove the panic and write your code
	uint32 virtual_address=0;
f0109031:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 range_page=va+size;
f0109038:	8b 55 0c             	mov    0xc(%ebp),%edx
f010903b:	8b 45 10             	mov    0x10(%ebp),%eax
f010903e:	01 d0                	add    %edx,%eax
f0109040:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 virtual_range=0;
f0109043:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	struct FrameInfo *sb_chunck= NULL ;
f010904a:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	uint32 *page_table_point=NULL;
f0109051:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
    uint32 result=0;
f0109058:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	virtual_address=ROUNDDOWN(va,PAGE_SIZE);
f010905f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109062:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0109065:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0109068:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010906d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	virtual_range=ROUNDUP(range_page,PAGE_SIZE);
f0109070:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0109077:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010907a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010907d:	01 d0                	add    %edx,%eax
f010907f:	48                   	dec    %eax
f0109080:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0109083:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109086:	ba 00 00 00 00       	mov    $0x0,%edx
f010908b:	f7 75 dc             	divl   -0x24(%ebp)
f010908e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109091:	29 d0                	sub    %edx,%eax
f0109093:	89 45 e8             	mov    %eax,-0x18(%ebp)
	uint32 new_virtual_address;
	for(uint32 count=virtual_address;count<virtual_range;count+=PAGE_SIZE)
f0109096:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109099:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010909c:	e9 9d 00 00 00       	jmp    f010913e <allocate_chunk+0x113>
	{
		new_virtual_address=count;
f01090a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01090a4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		get_page_table(page_directory,new_virtual_address,&page_table_point);
f01090a7:	83 ec 04             	sub    $0x4,%esp
f01090aa:	8d 45 cc             	lea    -0x34(%ebp),%eax
f01090ad:	50                   	push   %eax
f01090ae:	ff 75 d4             	pushl  -0x2c(%ebp)
f01090b1:	ff 75 08             	pushl  0x8(%ebp)
f01090b4:	e8 f8 d9 ff ff       	call   f0106ab1 <get_page_table>
f01090b9:	83 c4 10             	add    $0x10,%esp
		if(page_table_point==NULL)
f01090bc:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01090bf:	85 c0                	test   %eax,%eax
f01090c1:	75 14                	jne    f01090d7 <allocate_chunk+0xac>
		{
		   page_table_point=create_page_table(page_directory,new_virtual_address);
f01090c3:	83 ec 08             	sub    $0x8,%esp
f01090c6:	ff 75 d4             	pushl  -0x2c(%ebp)
f01090c9:	ff 75 08             	pushl  0x8(%ebp)
f01090cc:	e8 36 db ff ff       	call   f0106c07 <create_page_table>
f01090d1:	83 c4 10             	add    $0x10,%esp
f01090d4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		}
	    sb_chunck=get_frame_info(page_directory,new_virtual_address,&page_table_point);
f01090d7:	83 ec 04             	sub    $0x4,%esp
f01090da:	8d 45 cc             	lea    -0x34(%ebp),%eax
f01090dd:	50                   	push   %eax
f01090de:	ff 75 d4             	pushl  -0x2c(%ebp)
f01090e1:	ff 75 08             	pushl  0x8(%ebp)
f01090e4:	e8 1d dd ff ff       	call   f0106e06 <get_frame_info>
f01090e9:	83 c4 10             	add    $0x10,%esp
f01090ec:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if(sb_chunck!=NULL)
f01090ef:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01090f2:	85 c0                	test   %eax,%eax
f01090f4:	74 07                	je     f01090fd <allocate_chunk+0xd2>
		{
			return -1;
f01090f6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01090fb:	eb 52                	jmp    f010914f <allocate_chunk+0x124>
		}
	    result= allocate_frame(&sb_chunck);
f01090fd:	83 ec 0c             	sub    $0xc,%esp
f0109100:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0109103:	50                   	push   %eax
f0109104:	e8 e9 d7 ff ff       	call   f01068f2 <allocate_frame>
f0109109:	83 c4 10             	add    $0x10,%esp
f010910c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if(result != E_NO_MEM)
f010910f:	83 7d e4 fc          	cmpl   $0xfffffffc,-0x1c(%ebp)
f0109113:	74 22                	je     f0109137 <allocate_chunk+0x10c>
		{
			sb_chunck->va = new_virtual_address;
f0109115:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109118:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010911b:	89 50 0c             	mov    %edx,0xc(%eax)
			result=map_frame(page_directory,sb_chunck,new_virtual_address,perms);
f010911e:	8b 55 14             	mov    0x14(%ebp),%edx
f0109121:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109124:	52                   	push   %edx
f0109125:	ff 75 d4             	pushl  -0x2c(%ebp)
f0109128:	50                   	push   %eax
f0109129:	ff 75 08             	pushl  0x8(%ebp)
f010912c:	e8 10 dc ff ff       	call   f0106d41 <map_frame>
f0109131:	83 c4 10             	add    $0x10,%esp
f0109134:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    uint32 result=0;

	virtual_address=ROUNDDOWN(va,PAGE_SIZE);
	virtual_range=ROUNDUP(range_page,PAGE_SIZE);
	uint32 new_virtual_address;
	for(uint32 count=virtual_address;count<virtual_range;count+=PAGE_SIZE)
f0109137:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010913e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109141:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0109144:	0f 82 57 ff ff ff    	jb     f01090a1 <allocate_chunk+0x76>
		{
			sb_chunck->va = new_virtual_address;
			result=map_frame(page_directory,sb_chunck,new_virtual_address,perms);
		}
	}
	return 0;
f010914a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010914f:	c9                   	leave  
f0109150:	c3                   	ret    

f0109151 <calculate_allocated_space>:
/*BONUS*/
//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f0109151:	55                   	push   %ebp
f0109152:	89 e5                	mov    %esp,%ebp
f0109154:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_allocated_space
	// Write your code here, remove the panic and write your code
	//panic("calculate_allocated_space() is not implemented yet...!!");
	uint32 start_address_pt = ROUNDDOWN(sva, PAGE_SIZE*1024);
f0109157:	8b 45 0c             	mov    0xc(%ebp),%eax
f010915a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010915d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0109160:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0109165:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 start_address = ROUNDDOWN(sva, PAGE_SIZE);
f0109168:	8b 45 0c             	mov    0xc(%ebp),%eax
f010916b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010916e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109171:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109176:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 end_address = ROUNDUP(eva, PAGE_SIZE);
f0109179:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f0109180:	8b 55 10             	mov    0x10(%ebp),%edx
f0109183:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0109186:	01 d0                	add    %edx,%eax
f0109188:	48                   	dec    %eax
f0109189:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010918c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010918f:	ba 00 00 00 00       	mov    $0x0,%edx
f0109194:	f7 75 e0             	divl   -0x20(%ebp)
f0109197:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010919a:	29 d0                	sub    %edx,%eax
f010919c:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 size = end_address - start_address;
f010919f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01091a2:	2b 45 f0             	sub    -0x10(%ebp),%eax
f01091a5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 check = 0;
f01091a8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	do
	{
		if(start_address_pt %(PAGE_SIZE*1024) == 0)
f01091af:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01091b2:	25 ff ff 3f 00       	and    $0x3fffff,%eax
f01091b7:	85 c0                	test   %eax,%eax
f01091b9:	75 37                	jne    f01091f2 <calculate_allocated_space+0xa1>
		{
			uint32 *ptr_page_table = NULL;
f01091bb:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
			get_page_table(page_directory, start_address_pt, &ptr_page_table);
f01091c2:	83 ec 04             	sub    $0x4,%esp
f01091c5:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01091c8:	50                   	push   %eax
f01091c9:	ff 75 f4             	pushl  -0xc(%ebp)
f01091cc:	ff 75 08             	pushl  0x8(%ebp)
f01091cf:	e8 dd d8 ff ff       	call   f0106ab1 <get_page_table>
f01091d4:	83 c4 10             	add    $0x10,%esp
			if(ptr_page_table != NULL)
f01091d7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01091da:	85 c0                	test   %eax,%eax
f01091dc:	74 14                	je     f01091f2 <calculate_allocated_space+0xa1>
			{
				(*num_tables)++;
f01091de:	8b 45 14             	mov    0x14(%ebp),%eax
f01091e1:	8b 00                	mov    (%eax),%eax
f01091e3:	8d 50 01             	lea    0x1(%eax),%edx
f01091e6:	8b 45 14             	mov    0x14(%ebp),%eax
f01091e9:	89 10                	mov    %edx,(%eax)
				check = 1;
f01091eb:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
			}
		}
		if(check == 1)
f01091f2:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f01091f6:	75 2d                	jne    f0109225 <calculate_allocated_space+0xd4>
		{
			uint32 *ptr_page = NULL;
f01091f8:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
			if (get_frame_info(page_directory, start_address, &ptr_page) != 0)
f01091ff:	83 ec 04             	sub    $0x4,%esp
f0109202:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0109205:	50                   	push   %eax
f0109206:	ff 75 f0             	pushl  -0x10(%ebp)
f0109209:	ff 75 08             	pushl  0x8(%ebp)
f010920c:	e8 f5 db ff ff       	call   f0106e06 <get_frame_info>
f0109211:	83 c4 10             	add    $0x10,%esp
f0109214:	85 c0                	test   %eax,%eax
f0109216:	74 0d                	je     f0109225 <calculate_allocated_space+0xd4>
				(*num_pages)++;
f0109218:	8b 45 18             	mov    0x18(%ebp),%eax
f010921b:	8b 00                	mov    (%eax),%eax
f010921d:	8d 50 01             	lea    0x1(%eax),%edx
f0109220:	8b 45 18             	mov    0x18(%ebp),%eax
f0109223:	89 10                	mov    %edx,(%eax)
		}
		start_address += PAGE_SIZE;
f0109225:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
		start_address_pt = start_address;
f010922c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010922f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	} while (start_address < sva+size);
f0109232:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109235:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0109238:	01 d0                	add    %edx,%eax
f010923a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010923d:	0f 87 6c ff ff ff    	ja     f01091af <calculate_allocated_space+0x5e>
}
f0109243:	90                   	nop
f0109244:	c9                   	leave  
f0109245:	c3                   	ret    

f0109246 <calculate_required_frames>:
// calculate_required_frames:
// calculates the new allocation size required for given address+size,
// we are not interested in knowing if pages or tables actually exist in memory or the page file,
// we are interested in knowing whether they are allocated or not.
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f0109246:	55                   	push   %ebp
f0109247:	89 e5                	mov    %esp,%ebp
f0109249:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_required_frames
	// Write your code here, remove the panic and write your code
	//panic("calculate_required_frames() is not implemented yet...!!");
	uint32 number_of_tables = 0;
f010924c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 number_of_pages = 0;
f0109253:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 start_address_pt = ROUNDDOWN(sva, PAGE_SIZE*1024);
f010925a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010925d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0109260:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109263:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0109268:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 start_address = ROUNDDOWN(sva, PAGE_SIZE);
f010926b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010926e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0109271:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0109274:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109279:	89 45 e8             	mov    %eax,-0x18(%ebp)
	do
	{
		if(start_address_pt % (PAGE_SIZE*1024) == 0)
f010927c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010927f:	25 ff ff 3f 00       	and    $0x3fffff,%eax
f0109284:	85 c0                	test   %eax,%eax
f0109286:	75 26                	jne    f01092ae <calculate_required_frames+0x68>
		{
			uint32 *ptr_page_table = NULL;
f0109288:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
			get_page_table(page_directory, start_address_pt, &ptr_page_table);
f010928f:	83 ec 04             	sub    $0x4,%esp
f0109292:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0109295:	50                   	push   %eax
f0109296:	ff 75 ec             	pushl  -0x14(%ebp)
f0109299:	ff 75 08             	pushl  0x8(%ebp)
f010929c:	e8 10 d8 ff ff       	call   f0106ab1 <get_page_table>
f01092a1:	83 c4 10             	add    $0x10,%esp
			if(ptr_page_table == NULL)
f01092a4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01092a7:	85 c0                	test   %eax,%eax
f01092a9:	75 03                	jne    f01092ae <calculate_required_frames+0x68>
				number_of_tables++;
f01092ab:	ff 45 f4             	incl   -0xc(%ebp)
		}
		uint32 *ptr_page = NULL;
f01092ae:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	    if (get_frame_info(page_directory, start_address, &ptr_page) == 0)
f01092b5:	83 ec 04             	sub    $0x4,%esp
f01092b8:	8d 45 dc             	lea    -0x24(%ebp),%eax
f01092bb:	50                   	push   %eax
f01092bc:	ff 75 e8             	pushl  -0x18(%ebp)
f01092bf:	ff 75 08             	pushl  0x8(%ebp)
f01092c2:	e8 3f db ff ff       	call   f0106e06 <get_frame_info>
f01092c7:	83 c4 10             	add    $0x10,%esp
f01092ca:	85 c0                	test   %eax,%eax
f01092cc:	75 03                	jne    f01092d1 <calculate_required_frames+0x8b>
			number_of_pages++;
f01092ce:	ff 45 f0             	incl   -0x10(%ebp)

	    start_address += PAGE_SIZE;
f01092d1:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
	    start_address_pt = start_address;
f01092d8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01092db:	89 45 ec             	mov    %eax,-0x14(%ebp)
	} while (start_address < sva+size);
f01092de:	8b 55 0c             	mov    0xc(%ebp),%edx
f01092e1:	8b 45 10             	mov    0x10(%ebp),%eax
f01092e4:	01 d0                	add    %edx,%eax
f01092e6:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01092e9:	77 91                	ja     f010927c <calculate_required_frames+0x36>
	return number_of_tables + number_of_pages;
f01092eb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01092ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01092f1:	01 d0                	add    %edx,%eax
}
f01092f3:	c9                   	leave  
f01092f4:	c3                   	ret    

f01092f5 <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f01092f5:	55                   	push   %ebp
f01092f6:	89 e5                	mov    %esp,%ebp
f01092f8:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("allocate_user_mem() is not implemented yet...!!");
f01092fb:	83 ec 04             	sub    $0x4,%esp
f01092fe:	68 04 6c 13 f0       	push   $0xf0136c04
f0109303:	68 25 01 00 00       	push   $0x125
f0109308:	68 34 6c 13 f0       	push   $0xf0136c34
f010930d:	e8 f3 6e ff ff       	call   f0100205 <_panic>

f0109312 <free_user_mem>:

//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0109312:	55                   	push   %ebp
f0109313:	89 e5                	mov    %esp,%ebp
f0109315:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS3] [USER HEAP - KERNEL SIDE] free_user_mem
	// Write your code here, remove the panic and write your code
	//panic("free_user_mem() is not implemented yet...!!");
	uint32 end = ROUNDUP(virtual_address+size,PAGE_SIZE);
f0109318:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f010931f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109322:	8b 45 10             	mov    0x10(%ebp),%eax
f0109325:	01 c2                	add    %eax,%edx
f0109327:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010932a:	01 d0                	add    %edx,%eax
f010932c:	48                   	dec    %eax
f010932d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0109330:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109333:	ba 00 00 00 00       	mov    $0x0,%edx
f0109338:	f7 75 e8             	divl   -0x18(%ebp)
f010933b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010933e:	29 d0                	sub    %edx,%eax
f0109340:	89 45 e0             	mov    %eax,-0x20(%ebp)
	uint32 check;
	for(uint32 i = virtual_address; i <end  ;i+=PAGE_SIZE)
f0109343:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109346:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0109349:	e9 c6 00 00 00       	jmp    f0109414 <free_user_mem+0x102>
	{
		check = 0;
f010934e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		pf_remove_env_page(e,i);
f0109355:	83 ec 08             	sub    $0x8,%esp
f0109358:	ff 75 f0             	pushl  -0x10(%ebp)
f010935b:	ff 75 08             	pushl  0x8(%ebp)
f010935e:	e8 94 a7 ff ff       	call   f0103af7 <pf_remove_env_page>
f0109363:	83 c4 10             	add    $0x10,%esp
		env_page_ws_invalidate(e,i);
f0109366:	83 ec 08             	sub    $0x8,%esp
f0109369:	ff 75 f0             	pushl  -0x10(%ebp)
f010936c:	ff 75 08             	pushl  0x8(%ebp)
f010936f:	e8 f1 ef ff ff       	call   f0108365 <env_page_ws_invalidate>
f0109374:	83 c4 10             	add    $0x10,%esp
		unmap_frame(e->env_page_directory,i);
f0109377:	8b 45 08             	mov    0x8(%ebp),%eax
f010937a:	8b 40 5c             	mov    0x5c(%eax),%eax
f010937d:	83 ec 08             	sub    $0x8,%esp
f0109380:	ff 75 f0             	pushl  -0x10(%ebp)
f0109383:	50                   	push   %eax
f0109384:	e8 ed da ff ff       	call   f0106e76 <unmap_frame>
f0109389:	83 c4 10             	add    $0x10,%esp

		uint32* ptr_page = NULL;
f010938c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		get_page_table(e->env_page_directory,i,&ptr_page);
f0109393:	8b 45 08             	mov    0x8(%ebp),%eax
f0109396:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109399:	83 ec 04             	sub    $0x4,%esp
f010939c:	8d 55 dc             	lea    -0x24(%ebp),%edx
f010939f:	52                   	push   %edx
f01093a0:	ff 75 f0             	pushl  -0x10(%ebp)
f01093a3:	50                   	push   %eax
f01093a4:	e8 08 d7 ff ff       	call   f0106ab1 <get_page_table>
f01093a9:	83 c4 10             	add    $0x10,%esp
		if (ptr_page != NULL)
f01093ac:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01093af:	85 c0                	test   %eax,%eax
f01093b1:	74 5a                	je     f010940d <free_user_mem+0xfb>
		{
			int index = 0;
f01093b3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
			do
			{
				if(ptr_page[index] != 0)
f01093ba:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01093bd:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01093c0:	c1 e2 02             	shl    $0x2,%edx
f01093c3:	01 d0                	add    %edx,%eax
f01093c5:	8b 00                	mov    (%eax),%eax
f01093c7:	85 c0                	test   %eax,%eax
f01093c9:	74 09                	je     f01093d4 <free_user_mem+0xc2>
				{
					check = 1;
f01093cb:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
					break;
f01093d2:	eb 0f                	jmp    f01093e3 <free_user_mem+0xd1>
				}
				index ++;
f01093d4:	ff 45 ec             	incl   -0x14(%ebp)
			}while((index % 1024) != 0);
f01093d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01093da:	25 ff 03 00 00       	and    $0x3ff,%eax
f01093df:	85 c0                	test   %eax,%eax
f01093e1:	75 d7                	jne    f01093ba <free_user_mem+0xa8>
			if(check == 0)
f01093e3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01093e7:	75 24                	jne    f010940d <free_user_mem+0xfb>
			{
				pd_clear_page_dir_entry(e->env_page_directory, i);
f01093e9:	8b 45 08             	mov    0x8(%ebp),%eax
f01093ec:	8b 40 5c             	mov    0x5c(%eax),%eax
f01093ef:	83 ec 08             	sub    $0x8,%esp
f01093f2:	ff 75 f0             	pushl  -0x10(%ebp)
f01093f5:	50                   	push   %eax
f01093f6:	e8 f4 ee ff ff       	call   f01082ef <pd_clear_page_dir_entry>
f01093fb:	83 c4 10             	add    $0x10,%esp
				kfree((void *)ptr_page);
f01093fe:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0109401:	83 ec 0c             	sub    $0xc,%esp
f0109404:	50                   	push   %eax
f0109405:	e8 4c ea ff ff       	call   f0107e56 <kfree>
f010940a:	83 c4 10             	add    $0x10,%esp
	//TODO: [PROJECT MS3] [USER HEAP - KERNEL SIDE] free_user_mem
	// Write your code here, remove the panic and write your code
	//panic("free_user_mem() is not implemented yet...!!");
	uint32 end = ROUNDUP(virtual_address+size,PAGE_SIZE);
	uint32 check;
	for(uint32 i = virtual_address; i <end  ;i+=PAGE_SIZE)
f010940d:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0109414:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109417:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010941a:	0f 82 2e ff ff ff    	jb     f010934e <free_user_mem+0x3c>
	}
	//This function should:
	//1. Free ALL pages of the given range from the Page File
	//2. Free ONLY pages that are resident in the working set from the memory
	//3. Removes ONLY the empty page tables (i.e. not used) (no pages are mapped in the table)
}
f0109420:	90                   	nop
f0109421:	c9                   	leave  
f0109422:	c3                   	ret    

f0109423 <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f0109423:	55                   	push   %ebp
f0109424:	89 e5                	mov    %esp,%ebp
f0109426:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f0109429:	83 ec 04             	sub    $0x4,%esp
f010942c:	68 50 6c 13 f0       	push   $0xf0136c50
f0109431:	68 5b 01 00 00       	push   $0x15b
f0109436:	68 34 6c 13 f0       	push   $0xf0136c34
f010943b:	e8 c5 6d ff ff       	call   f0100205 <_panic>

f0109440 <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f0109440:	55                   	push   %ebp
f0109441:	89 e5                	mov    %esp,%ebp
f0109443:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [USER HEAP - KERNEL SIDE] move_user_mem
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f0109446:	83 ec 04             	sub    $0x4,%esp
f0109449:	68 90 6c 13 f0       	push   $0xf0136c90
f010944e:	68 6b 01 00 00       	push   $0x16b
f0109453:	68 34 6c 13 f0       	push   $0xf0136c34
f0109458:	e8 a8 6d ff ff       	call   f0100205 <_panic>

f010945d <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010945d:	55                   	push   %ebp
f010945e:	89 e5                	mov    %esp,%ebp
f0109460:	57                   	push   %edi
f0109461:	56                   	push   %esi
f0109462:	53                   	push   %ebx
f0109463:	81 ec ec 00 00 00    	sub    $0xec,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f0109469:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f0109470:	83 ec 0c             	sub    $0xc,%esp
f0109473:	ff 75 08             	pushl  0x8(%ebp)
f0109476:	e8 0b 22 00 00       	call   f010b686 <get_user_program_info>
f010947b:	83 c4 10             	add    $0x10,%esp
f010947e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f0109481:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0109485:	75 0a                	jne    f0109491 <env_create+0x34>
f0109487:	b8 00 00 00 00       	mov    $0x0,%eax
f010948c:	e9 cd 0b 00 00       	jmp    f010a05e <env_create+0xc01>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f0109491:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109494:	8b 40 08             	mov    0x8(%eax),%eax
f0109497:	89 45 b8             	mov    %eax,-0x48(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f010949a:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%ebp)
f01094a1:	00 00 00 
	if(allocate_environment(&e) < 0)
f01094a4:	83 ec 0c             	sub    $0xc,%esp
f01094a7:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f01094ad:	50                   	push   %eax
f01094ae:	e8 d3 0e 00 00       	call   f010a386 <allocate_environment>
f01094b3:	83 c4 10             	add    $0x10,%esp
f01094b6:	85 c0                	test   %eax,%eax
f01094b8:	79 0a                	jns    f01094c4 <env_create+0x67>
	{
		return 0;
f01094ba:	b8 00 00 00 00       	mov    $0x0,%eax
f01094bf:	e9 9a 0b 00 00       	jmp    f010a05e <env_create+0xc01>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f01094c4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01094c7:	8b 00                	mov    (%eax),%eax
f01094c9:	83 ec 0c             	sub    $0xc,%esp
f01094cc:	50                   	push   %eax
f01094cd:	e8 11 84 02 00       	call   f01318e3 <strlen>
f01094d2:	83 c4 10             	add    $0x10,%esp
f01094d5:	83 f8 3f             	cmp    $0x3f,%eax
f01094d8:	7f 20                	jg     f01094fa <env_create+0x9d>
		strcpy(e->prog_name, ptr_user_program_info->name);
f01094da:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01094dd:	8b 00                	mov    (%eax),%eax
f01094df:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01094e5:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f01094eb:	83 ec 08             	sub    $0x8,%esp
f01094ee:	50                   	push   %eax
f01094ef:	52                   	push   %edx
f01094f0:	e8 3d 84 02 00       	call   f0131932 <strcpy>
f01094f5:	83 c4 10             	add    $0x10,%esp
f01094f8:	eb 20                	jmp    f010951a <env_create+0xbd>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f01094fa:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01094fd:	8b 00                	mov    (%eax),%eax
f01094ff:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109505:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f010950b:	83 ec 04             	sub    $0x4,%esp
f010950e:	6a 3f                	push   $0x3f
f0109510:	50                   	push   %eax
f0109511:	52                   	push   %edx
f0109512:	e8 49 84 02 00       	call   f0131960 <strncpy>
f0109517:	83 c4 10             	add    $0x10,%esp
	//REMEMBER: "allocate_frame" should always return a free frame
	uint32* ptr_user_page_directory;
	unsigned int phys_user_page_directory;
#if USE_KHEAP
	{
		ptr_user_page_directory = create_user_directory();
f010951a:	e8 6d 0f 00 00       	call   f010a48c <create_user_directory>
f010951f:	89 45 b0             	mov    %eax,-0x50(%ebp)
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
f0109522:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0109525:	83 ec 0c             	sub    $0xc,%esp
f0109528:	50                   	push   %eax
f0109529:	e8 7b ea ff ff       	call   f0107fa9 <kheap_physical_address>
f010952e:	83 c4 10             	add    $0x10,%esp
f0109531:	89 45 ac             	mov    %eax,-0x54(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f0109534:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010953a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010953d:	89 50 74             	mov    %edx,0x74(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109540:	83 ec 0c             	sub    $0xc,%esp
f0109543:	6a 02                	push   $0x2
f0109545:	e8 f3 4d 00 00       	call   f010e33d <isPageReplacmentAlgorithmLRU>
f010954a:	83 c4 10             	add    $0x10,%esp
f010954d:	85 c0                	test   %eax,%eax
f010954f:	74 21                	je     f0109572 <env_create+0x115>
	{
		e->SecondListSize = LRU_second_list_size;
f0109551:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109557:	8b 55 10             	mov    0x10(%ebp),%edx
f010955a:	89 90 ec 05 00 00    	mov    %edx,0x5ec(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f0109560:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109566:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109569:	2b 55 10             	sub    0x10(%ebp),%edx
f010956c:	89 90 e8 05 00 00    	mov    %edx,0x5e8(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f0109572:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f0109576:	75 12                	jne    f010958a <env_create+0x12d>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f0109578:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010957e:	c7 80 a0 05 00 00 0a 	movl   $0xa,0x5a0(%eax)
f0109585:	00 00 00 
f0109588:	eb 0f                	jmp    f0109599 <env_create+0x13c>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f010958a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109590:	8b 55 14             	mov    0x14(%ebp),%edx
f0109593:	89 90 a0 05 00 00    	mov    %edx,0x5a0(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f0109599:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010959f:	83 ec 04             	sub    $0x4,%esp
f01095a2:	ff 75 ac             	pushl  -0x54(%ebp)
f01095a5:	ff 75 b0             	pushl  -0x50(%ebp)
f01095a8:	50                   	push   %eax
f01095a9:	e8 fa 15 00 00       	call   f010aba8 <initialize_environment>
f01095ae:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01095b1:	0f 20 d8             	mov    %cr3,%eax
f01095b4:	89 45 a0             	mov    %eax,-0x60(%ebp)
	return val;
f01095b7:	8b 45 a0             	mov    -0x60(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f01095ba:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	lcr3(e->env_cr3) ;
f01095bd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095c3:	8b 40 60             	mov    0x60(%eax),%eax
f01095c6:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01095cc:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01095d2:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f01095d5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f01095dc:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f01095e3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095e9:	8b 40 74             	mov    0x74(%eax),%eax
f01095ec:	48                   	dec    %eax
f01095ed:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f01095f0:	c7 85 48 ff ff ff ff 	movl   $0xffffffff,-0xb8(%ebp)
f01095f7:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f01095fa:	8d 85 08 ff ff ff    	lea    -0xf8(%ebp),%eax
f0109600:	83 ec 08             	sub    $0x8,%esp
f0109603:	ff 75 b8             	pushl  -0x48(%ebp)
f0109606:	50                   	push   %eax
f0109607:	e8 af 1d 00 00       	call   f010b3bb <PROGRAM_SEGMENT_FIRST>
f010960c:	83 c4 0c             	add    $0xc,%esp
f010960f:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0109615:	8d 95 08 ff ff ff    	lea    -0xf8(%ebp),%edx
f010961b:	b9 05 00 00 00       	mov    $0x5,%ecx
f0109620:	89 c7                	mov    %eax,%edi
f0109622:	89 d6                	mov    %edx,%esi
f0109624:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0109626:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f010962c:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010962f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109632:	8b 40 10             	mov    0x10(%eax),%eax
f0109635:	83 f8 ff             	cmp    $0xffffffff,%eax
f0109638:	75 07                	jne    f0109641 <env_create+0x1e4>
f010963a:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0109641:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109644:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0109647:	e9 15 03 00 00       	jmp    f0109961 <env_create+0x504>
	{
		segment_counter++;
f010964c:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f010964f:	c7 85 30 ff ff ff 00 	movl   $0x0,-0xd0(%ebp)
f0109656:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f0109659:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010965f:	83 ec 0c             	sub    $0xc,%esp
f0109662:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f0109668:	52                   	push   %edx
f0109669:	ff 75 dc             	pushl  -0x24(%ebp)
f010966c:	8d 95 30 ff ff ff    	lea    -0xd0(%ebp),%edx
f0109672:	52                   	push   %edx
f0109673:	ff 75 e4             	pushl  -0x1c(%ebp)
f0109676:	50                   	push   %eax
f0109677:	e8 4b 0e 00 00       	call   f010a4c7 <program_segment_alloc_map_copy_workingset>
f010967c:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f010967f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0109685:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f0109688:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010968b:	8b 00                	mov    (%eax),%eax
f010968d:	89 45 9c             	mov    %eax,-0x64(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f0109690:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109693:	8b 40 0c             	mov    0xc(%eax),%eax
f0109696:	89 45 98             	mov    %eax,-0x68(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f0109699:	8b 45 98             	mov    -0x68(%ebp),%eax
f010969c:	89 45 94             	mov    %eax,-0x6c(%ebp)
f010969f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01096a2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01096a7:	89 45 90             	mov    %eax,-0x70(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f01096aa:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f01096b1:	8b 55 98             	mov    -0x68(%ebp),%edx
f01096b4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01096b7:	01 d0                	add    %edx,%eax
f01096b9:	48                   	dec    %eax
f01096ba:	89 45 88             	mov    %eax,-0x78(%ebp)
f01096bd:	8b 45 88             	mov    -0x78(%ebp),%eax
f01096c0:	ba 00 00 00 00       	mov    $0x0,%edx
f01096c5:	f7 75 8c             	divl   -0x74(%ebp)
f01096c8:	8b 45 88             	mov    -0x78(%ebp),%eax
f01096cb:	29 d0                	sub    %edx,%eax
f01096cd:	89 45 84             	mov    %eax,-0x7c(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f01096d0:	8b 45 98             	mov    -0x68(%ebp),%eax
f01096d3:	2b 45 90             	sub    -0x70(%ebp),%eax
f01096d6:	89 45 80             	mov    %eax,-0x80(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f01096d9:	a1 84 ad 89 f0       	mov    0xf089ad84,%eax
f01096de:	83 ec 04             	sub    $0x4,%esp
f01096e1:	68 00 10 00 00       	push   $0x1000
f01096e6:	6a 00                	push   $0x0
f01096e8:	50                   	push   %eax
f01096e9:	e8 e3 83 02 00       	call   f0131ad1 <memset>
f01096ee:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f01096f1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01096f4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f01096f7:	8b 15 84 ad 89 f0    	mov    0xf089ad84,%edx
f01096fd:	8b 45 80             	mov    -0x80(%ebp),%eax
f0109700:	01 d0                	add    %edx,%eax
f0109702:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0109705:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109708:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010970b:	eb 13                	jmp    f0109720 <env_create+0x2c3>
		{
			*dst_ptr = *src_ptr ;
f010970d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0109710:	8a 10                	mov    (%eax),%dl
f0109712:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109715:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0109717:	ff 45 cc             	incl   -0x34(%ebp)
f010971a:	ff 45 d4             	incl   -0x2c(%ebp)
f010971d:	ff 45 d0             	incl   -0x30(%ebp)
f0109720:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109723:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0109726:	72 e5                	jb     f010970d <env_create+0x2b0>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0109728:	8b 15 84 ad 89 f0    	mov    0xf089ad84,%edx
f010972e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109734:	83 ec 04             	sub    $0x4,%esp
f0109737:	52                   	push   %edx
f0109738:	ff 75 90             	pushl  -0x70(%ebp)
f010973b:	50                   	push   %eax
f010973c:	e8 d4 9f ff ff       	call   f0103715 <pf_add_env_page>
f0109741:	83 c4 10             	add    $0x10,%esp
f0109744:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109747:	75 17                	jne    f0109760 <env_create+0x303>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109749:	83 ec 04             	sub    $0x4,%esp
f010974c:	68 bc 6c 13 f0       	push   $0xf0136cbc
f0109751:	68 e1 00 00 00       	push   $0xe1
f0109756:	68 01 6d 13 f0       	push   $0xf0136d01
f010975b:	e8 a5 6a ff ff       	call   f0100205 <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f0109760:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109763:	8b 50 04             	mov    0x4(%eax),%edx
f0109766:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109769:	01 d0                	add    %edx,%eax
f010976b:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0109771:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0109777:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010977c:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f0109782:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109785:	8b 50 04             	mov    0x4(%eax),%edx
f0109788:	8b 45 98             	mov    -0x68(%ebp),%eax
f010978b:	01 d0                	add    %edx,%eax
f010978d:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0109793:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0109796:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109799:	eb 43                	jmp    f01097de <env_create+0x381>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f010979b:	8b 55 cc             	mov    -0x34(%ebp),%edx
f010979e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097a4:	83 ec 04             	sub    $0x4,%esp
f01097a7:	ff 75 d4             	pushl  -0x2c(%ebp)
f01097aa:	52                   	push   %edx
f01097ab:	50                   	push   %eax
f01097ac:	e8 64 9f ff ff       	call   f0103715 <pf_add_env_page>
f01097b1:	83 c4 10             	add    $0x10,%esp
f01097b4:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01097b7:	75 17                	jne    f01097d0 <env_create+0x373>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01097b9:	83 ec 04             	sub    $0x4,%esp
f01097bc:	68 bc 6c 13 f0       	push   $0xf0136cbc
f01097c1:	68 ee 00 00 00       	push   $0xee
f01097c6:	68 01 6d 13 f0       	push   $0xf0136d01
f01097cb:	e8 35 6a ff ff       	call   f0100205 <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f01097d0:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f01097d7:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f01097de:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01097e1:	3b 85 78 ff ff ff    	cmp    -0x88(%ebp),%eax
f01097e7:	72 b2                	jb     f010979b <env_create+0x33e>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f01097e9:	a1 84 ad 89 f0       	mov    0xf089ad84,%eax
f01097ee:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f01097f1:	83 ec 04             	sub    $0x4,%esp
f01097f4:	68 00 10 00 00       	push   $0x1000
f01097f9:	6a 00                	push   $0x0
f01097fb:	ff 75 d0             	pushl  -0x30(%ebp)
f01097fe:	e8 ce 82 02 00       	call   f0131ad1 <memset>
f0109803:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0109806:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010980c:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010980f:	eb 13                	jmp    f0109824 <env_create+0x3c7>
		{
			*dst_ptr = *src_ptr;
f0109811:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0109814:	8a 10                	mov    (%eax),%dl
f0109816:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109819:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f010981b:	ff 45 cc             	incl   -0x34(%ebp)
f010981e:	ff 45 d4             	incl   -0x2c(%ebp)
f0109821:	ff 45 d0             	incl   -0x30(%ebp)
f0109824:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109827:	3b 85 74 ff ff ff    	cmp    -0x8c(%ebp),%eax
f010982d:	72 e2                	jb     f0109811 <env_create+0x3b4>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f010982f:	8b 15 84 ad 89 f0    	mov    0xf089ad84,%edx
f0109835:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010983b:	83 ec 04             	sub    $0x4,%esp
f010983e:	52                   	push   %edx
f010983f:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0109845:	50                   	push   %eax
f0109846:	e8 ca 9e ff ff       	call   f0103715 <pf_add_env_page>
f010984b:	83 c4 10             	add    $0x10,%esp
f010984e:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109851:	75 17                	jne    f010986a <env_create+0x40d>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109853:	83 ec 04             	sub    $0x4,%esp
f0109856:	68 bc 6c 13 f0       	push   $0xf0136cbc
f010985b:	68 fd 00 00 00       	push   $0xfd
f0109860:	68 01 6d 13 f0       	push   $0xf0136d01
f0109865:	e8 9b 69 ff ff       	call   f0100205 <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f010986a:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0109871:	10 00 00 
f0109874:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109877:	8b 50 04             	mov    0x4(%eax),%edx
f010987a:	8b 45 98             	mov    -0x68(%ebp),%eax
f010987d:	01 c2                	add    %eax,%edx
f010987f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0109885:	01 d0                	add    %edx,%eax
f0109887:	48                   	dec    %eax
f0109888:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f010988e:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0109894:	ba 00 00 00 00       	mov    $0x0,%edx
f0109899:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f010989f:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01098a5:	29 d0                	sub    %edx,%eax
f01098a7:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f01098aa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01098ad:	8b 50 08             	mov    0x8(%eax),%edx
f01098b0:	8b 45 98             	mov    -0x68(%ebp),%eax
f01098b3:	01 d0                	add    %edx,%eax
f01098b5:	2b 45 c8             	sub    -0x38(%ebp),%eax
f01098b8:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f01098be:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01098c5:	eb 41                	jmp    f0109908 <env_create+0x4ab>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f01098c7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098cd:	83 ec 04             	sub    $0x4,%esp
f01098d0:	6a 01                	push   $0x1
f01098d2:	ff 75 c8             	pushl  -0x38(%ebp)
f01098d5:	50                   	push   %eax
f01098d6:	e8 09 9d ff ff       	call   f01035e4 <pf_add_empty_env_page>
f01098db:	83 c4 10             	add    $0x10,%esp
f01098de:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01098e1:	75 17                	jne    f01098fa <env_create+0x49d>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01098e3:	83 ec 04             	sub    $0x4,%esp
f01098e6:	68 bc 6c 13 f0       	push   $0xf0136cbc
f01098eb:	68 0a 01 00 00       	push   $0x10a
f01098f0:	68 01 6d 13 f0       	push   $0xf0136d01
f01098f5:	e8 0b 69 ff ff       	call   f0100205 <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f01098fa:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0109901:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f0109908:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f010990f:	10 00 00 
f0109912:	8b 95 68 ff ff ff    	mov    -0x98(%ebp),%edx
f0109918:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010991e:	01 d0                	add    %edx,%eax
f0109920:	48                   	dec    %eax
f0109921:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0109927:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f010992d:	ba 00 00 00 00       	mov    $0x0,%edx
f0109932:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0109938:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f010993e:	29 d0                	sub    %edx,%eax
f0109940:	89 c2                	mov    %eax,%edx
f0109942:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109945:	39 c2                	cmp    %eax,%edx
f0109947:	0f 87 7a ff ff ff    	ja     f01098c7 <env_create+0x46a>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f010994d:	83 ec 08             	sub    $0x8,%esp
f0109950:	ff 75 b8             	pushl  -0x48(%ebp)
f0109953:	ff 75 e4             	pushl  -0x1c(%ebp)
f0109956:	e8 55 19 00 00       	call   f010b2b0 <PROGRAM_SEGMENT_NEXT>
f010995b:	83 c4 10             	add    $0x10,%esp
f010995e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0109961:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0109965:	0f 85 e1 fc ff ff    	jne    f010964c <env_create+0x1ef>
		}
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
f010996b:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f0109972:	e9 9d 00 00 00       	jmp    f0109a14 <env_create+0x5b7>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f0109977:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010997d:	8b 48 78             	mov    0x78(%eax),%ecx
f0109980:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0109983:	89 d0                	mov    %edx,%eax
f0109985:	01 c0                	add    %eax,%eax
f0109987:	01 d0                	add    %edx,%eax
f0109989:	c1 e0 03             	shl    $0x3,%eax
f010998c:	01 c8                	add    %ecx,%eax
f010998e:	8a 40 04             	mov    0x4(%eax),%al
f0109991:	84 c0                	test   %al,%al
f0109993:	75 7c                	jne    f0109a11 <env_create+0x5b4>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f0109995:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010999b:	8b 48 78             	mov    0x78(%eax),%ecx
f010999e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01099a1:	89 d0                	mov    %edx,%eax
f01099a3:	01 c0                	add    %eax,%eax
f01099a5:	01 d0                	add    %edx,%eax
f01099a7:	c1 e0 03             	shl    $0x3,%eax
f01099aa:	01 c8                	add    %ecx,%eax
f01099ac:	8b 00                	mov    (%eax),%eax
f01099ae:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f01099b4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099ba:	8b 40 5c             	mov    0x5c(%eax),%eax
f01099bd:	83 ec 04             	sub    $0x4,%esp
f01099c0:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f01099c6:	52                   	push   %edx
f01099c7:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
f01099cd:	50                   	push   %eax
f01099ce:	e8 de d0 ff ff       	call   f0106ab1 <get_page_table>
f01099d3:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f01099d6:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01099dc:	8b 95 5c ff ff ff    	mov    -0xa4(%ebp),%edx
f01099e2:	c1 ea 0c             	shr    $0xc,%edx
f01099e5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01099eb:	c1 e2 02             	shl    $0x2,%edx
f01099ee:	01 d0                	add    %edx,%eax
f01099f0:	8b 95 2c ff ff ff    	mov    -0xd4(%ebp),%edx
f01099f6:	8b 8d 5c ff ff ff    	mov    -0xa4(%ebp),%ecx
f01099fc:	c1 e9 0c             	shr    $0xc,%ecx
f01099ff:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0109a05:	c1 e1 02             	shl    $0x2,%ecx
f0109a08:	01 ca                	add    %ecx,%edx
f0109a0a:	8b 12                	mov    (%edx),%edx
f0109a0c:	83 e2 bf             	and    $0xffffffbf,%edx
f0109a0f:	89 10                	mov    %edx,(%eax)
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f0109a11:	ff 45 c4             	incl   -0x3c(%ebp)
f0109a14:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a1a:	8b 50 74             	mov    0x74(%eax),%edx
f0109a1d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0109a20:	39 c2                	cmp    %eax,%edx
f0109a22:	0f 87 4f ff ff ff    	ja     f0109977 <env_create+0x51a>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f0109a28:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109a2b:	8b 50 08             	mov    0x8(%eax),%edx
f0109a2e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a34:	83 ec 08             	sub    $0x8,%esp
f0109a37:	52                   	push   %edx
f0109a38:	50                   	push   %eax
f0109a39:	e8 bc 16 00 00       	call   f010b0fa <set_environment_entry_point>
f0109a3e:	83 c4 10             	add    $0x10,%esp

	//[9] Allocate and map one page for the program's initial stack
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set

	e->initNumStackPages = 1;
f0109a41:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a47:	c7 80 58 05 00 00 01 	movl   $0x1,0x558(%eax)
f0109a4e:	00 00 00 

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f0109a51:	c7 85 58 ff ff ff 00 	movl   $0xeebfd000,-0xa8(%ebp)
f0109a58:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f0109a5b:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0109a62:	e9 53 05 00 00       	jmp    f0109fba <env_create+0xb5d>
	{
		struct FrameInfo *pp = NULL;
f0109a67:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f0109a6e:	00 00 00 
		allocate_frame(&pp);
f0109a71:	83 ec 0c             	sub    $0xc,%esp
f0109a74:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0109a7a:	50                   	push   %eax
f0109a7b:	e8 72 ce ff ff       	call   f01068f2 <allocate_frame>
f0109a80:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f0109a83:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f0109a89:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a8f:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109a92:	6a 06                	push   $0x6
f0109a94:	ff 75 c0             	pushl  -0x40(%ebp)
f0109a97:	52                   	push   %edx
f0109a98:	50                   	push   %eax
f0109a99:	e8 5f d4 ff ff       	call   f0106efd <loadtime_map_frame>
f0109a9e:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f0109aa1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0109aa4:	83 ec 04             	sub    $0x4,%esp
f0109aa7:	68 00 10 00 00       	push   $0x1000
f0109aac:	6a 00                	push   $0x0
f0109aae:	50                   	push   %eax
f0109aaf:	e8 1d 80 02 00       	call   f0131ad1 <memset>
f0109ab4:	83 c4 10             	add    $0x10,%esp

		//now add it to the working set and the page table
		{
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f0109ab7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109abd:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109ac3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ac9:	83 ec 04             	sub    $0x4,%esp
f0109acc:	ff 75 c0             	pushl  -0x40(%ebp)
f0109acf:	52                   	push   %edx
f0109ad0:	50                   	push   %eax
f0109ad1:	e8 fa e8 ff ff       	call   f01083d0 <env_page_ws_set_entry>
f0109ad6:	83 c4 10             	add    $0x10,%esp

			//2020
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109ad9:	83 ec 0c             	sub    $0xc,%esp
f0109adc:	6a 02                	push   $0x2
f0109ade:	e8 5a 48 00 00       	call   f010e33d <isPageReplacmentAlgorithmLRU>
f0109ae3:	83 c4 10             	add    $0x10,%esp
f0109ae6:	85 c0                	test   %eax,%eax
f0109ae8:	0f 84 6b 04 00 00    	je     f0109f59 <env_create+0xafc>
			{
				LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109aee:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109af4:	8b 48 78             	mov    0x78(%eax),%ecx
f0109af7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109afd:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109b03:	89 d0                	mov    %edx,%eax
f0109b05:	01 c0                	add    %eax,%eax
f0109b07:	01 d0                	add    %edx,%eax
f0109b09:	c1 e0 03             	shl    $0x3,%eax
f0109b0c:	01 c8                	add    %ecx,%eax
f0109b0e:	85 c0                	test   %eax,%eax
f0109b10:	75 17                	jne    f0109b29 <env_create+0x6cc>
f0109b12:	83 ec 04             	sub    $0x4,%esp
f0109b15:	68 1e 6d 13 f0       	push   $0xf0136d1e
f0109b1a:	68 41 01 00 00       	push   $0x141
f0109b1f:	68 01 6d 13 f0       	push   $0xf0136d01
f0109b24:	e8 dc 66 ff ff       	call   f0100205 <_panic>
f0109b29:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b2f:	8b 48 78             	mov    0x78(%eax),%ecx
f0109b32:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b38:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109b3e:	89 d0                	mov    %edx,%eax
f0109b40:	01 c0                	add    %eax,%eax
f0109b42:	01 d0                	add    %edx,%eax
f0109b44:	c1 e0 03             	shl    $0x3,%eax
f0109b47:	01 c8                	add    %ecx,%eax
f0109b49:	8b 40 10             	mov    0x10(%eax),%eax
f0109b4c:	85 c0                	test   %eax,%eax
f0109b4e:	74 4b                	je     f0109b9b <env_create+0x73e>
f0109b50:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b56:	8b 48 78             	mov    0x78(%eax),%ecx
f0109b59:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b5f:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109b65:	89 d0                	mov    %edx,%eax
f0109b67:	01 c0                	add    %eax,%eax
f0109b69:	01 d0                	add    %edx,%eax
f0109b6b:	c1 e0 03             	shl    $0x3,%eax
f0109b6e:	01 c8                	add    %ecx,%eax
f0109b70:	8b 50 10             	mov    0x10(%eax),%edx
f0109b73:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b79:	8b 58 78             	mov    0x78(%eax),%ebx
f0109b7c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b82:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109b88:	89 c8                	mov    %ecx,%eax
f0109b8a:	01 c0                	add    %eax,%eax
f0109b8c:	01 c8                	add    %ecx,%eax
f0109b8e:	c1 e0 03             	shl    $0x3,%eax
f0109b91:	01 d8                	add    %ebx,%eax
f0109b93:	8b 40 14             	mov    0x14(%eax),%eax
f0109b96:	89 42 14             	mov    %eax,0x14(%edx)
f0109b99:	eb 2f                	jmp    f0109bca <env_create+0x76d>
f0109b9b:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109ba1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ba7:	8b 58 78             	mov    0x78(%eax),%ebx
f0109baa:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109bb0:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109bb6:	89 c8                	mov    %ecx,%eax
f0109bb8:	01 c0                	add    %eax,%eax
f0109bba:	01 c8                	add    %ecx,%eax
f0109bbc:	c1 e0 03             	shl    $0x3,%eax
f0109bbf:	01 d8                	add    %ebx,%eax
f0109bc1:	8b 40 14             	mov    0x14(%eax),%eax
f0109bc4:	89 82 bc 05 00 00    	mov    %eax,0x5bc(%edx)
f0109bca:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109bd0:	8b 48 78             	mov    0x78(%eax),%ecx
f0109bd3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109bd9:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109bdf:	89 d0                	mov    %edx,%eax
f0109be1:	01 c0                	add    %eax,%eax
f0109be3:	01 d0                	add    %edx,%eax
f0109be5:	c1 e0 03             	shl    $0x3,%eax
f0109be8:	01 c8                	add    %ecx,%eax
f0109bea:	8b 40 14             	mov    0x14(%eax),%eax
f0109bed:	85 c0                	test   %eax,%eax
f0109bef:	74 4b                	je     f0109c3c <env_create+0x7df>
f0109bf1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109bf7:	8b 48 78             	mov    0x78(%eax),%ecx
f0109bfa:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c00:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109c06:	89 d0                	mov    %edx,%eax
f0109c08:	01 c0                	add    %eax,%eax
f0109c0a:	01 d0                	add    %edx,%eax
f0109c0c:	c1 e0 03             	shl    $0x3,%eax
f0109c0f:	01 c8                	add    %ecx,%eax
f0109c11:	8b 50 14             	mov    0x14(%eax),%edx
f0109c14:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c1a:	8b 58 78             	mov    0x78(%eax),%ebx
f0109c1d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c23:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109c29:	89 c8                	mov    %ecx,%eax
f0109c2b:	01 c0                	add    %eax,%eax
f0109c2d:	01 c8                	add    %ecx,%eax
f0109c2f:	c1 e0 03             	shl    $0x3,%eax
f0109c32:	01 d8                	add    %ebx,%eax
f0109c34:	8b 40 10             	mov    0x10(%eax),%eax
f0109c37:	89 42 10             	mov    %eax,0x10(%edx)
f0109c3a:	eb 2f                	jmp    f0109c6b <env_create+0x80e>
f0109c3c:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109c42:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c48:	8b 58 78             	mov    0x78(%eax),%ebx
f0109c4b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c51:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109c57:	89 c8                	mov    %ecx,%eax
f0109c59:	01 c0                	add    %eax,%eax
f0109c5b:	01 c8                	add    %ecx,%eax
f0109c5d:	c1 e0 03             	shl    $0x3,%eax
f0109c60:	01 d8                	add    %ebx,%eax
f0109c62:	8b 40 10             	mov    0x10(%eax),%eax
f0109c65:	89 82 b8 05 00 00    	mov    %eax,0x5b8(%edx)
f0109c6b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c71:	8b 48 78             	mov    0x78(%eax),%ecx
f0109c74:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c7a:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109c80:	89 d0                	mov    %edx,%eax
f0109c82:	01 c0                	add    %eax,%eax
f0109c84:	01 d0                	add    %edx,%eax
f0109c86:	c1 e0 03             	shl    $0x3,%eax
f0109c89:	01 c8                	add    %ecx,%eax
f0109c8b:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f0109c92:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c98:	8b 48 78             	mov    0x78(%eax),%ecx
f0109c9b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ca1:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109ca7:	89 d0                	mov    %edx,%eax
f0109ca9:	01 c0                	add    %eax,%eax
f0109cab:	01 d0                	add    %edx,%eax
f0109cad:	c1 e0 03             	shl    $0x3,%eax
f0109cb0:	01 c8                	add    %ecx,%eax
f0109cb2:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109cb9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109cbf:	8b 90 c4 05 00 00    	mov    0x5c4(%eax),%edx
f0109cc5:	4a                   	dec    %edx
f0109cc6:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)
				//Now: we are sure that at least the top page in the stack will be added to Active list
				//Since we left 1 empty location in the Active list when we loaded the program segments
				if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f0109ccc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109cd2:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f0109cd8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109cde:	8b 80 e8 05 00 00    	mov    0x5e8(%eax),%eax
f0109ce4:	39 c2                	cmp    %eax,%edx
f0109ce6:	0f 83 39 01 00 00    	jae    f0109e25 <env_create+0x9c8>
				{
					LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109cec:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109cf2:	8b 48 78             	mov    0x78(%eax),%ecx
f0109cf5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109cfb:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109d01:	89 d0                	mov    %edx,%eax
f0109d03:	01 c0                	add    %eax,%eax
f0109d05:	01 d0                	add    %edx,%eax
f0109d07:	c1 e0 03             	shl    $0x3,%eax
f0109d0a:	01 c8                	add    %ecx,%eax
f0109d0c:	85 c0                	test   %eax,%eax
f0109d0e:	75 17                	jne    f0109d27 <env_create+0x8ca>
f0109d10:	83 ec 04             	sub    $0x4,%esp
f0109d13:	68 3c 6d 13 f0       	push   $0xf0136d3c
f0109d18:	68 46 01 00 00       	push   $0x146
f0109d1d:	68 01 6d 13 f0       	push   $0xf0136d01
f0109d22:	e8 de 64 ff ff       	call   f0100205 <_panic>
f0109d27:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d2d:	8b 48 78             	mov    0x78(%eax),%ecx
f0109d30:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d36:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109d3c:	89 d0                	mov    %edx,%eax
f0109d3e:	01 c0                	add    %eax,%eax
f0109d40:	01 d0                	add    %edx,%eax
f0109d42:	c1 e0 03             	shl    $0x3,%eax
f0109d45:	01 c8                	add    %ecx,%eax
f0109d47:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109d4d:	8b 92 c8 05 00 00    	mov    0x5c8(%edx),%edx
f0109d53:	89 50 10             	mov    %edx,0x10(%eax)
f0109d56:	8b 40 10             	mov    0x10(%eax),%eax
f0109d59:	85 c0                	test   %eax,%eax
f0109d5b:	74 31                	je     f0109d8e <env_create+0x931>
f0109d5d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d63:	8b 90 c8 05 00 00    	mov    0x5c8(%eax),%edx
f0109d69:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d6f:	8b 58 78             	mov    0x78(%eax),%ebx
f0109d72:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d78:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109d7e:	89 c8                	mov    %ecx,%eax
f0109d80:	01 c0                	add    %eax,%eax
f0109d82:	01 c8                	add    %ecx,%eax
f0109d84:	c1 e0 03             	shl    $0x3,%eax
f0109d87:	01 d8                	add    %ebx,%eax
f0109d89:	89 42 14             	mov    %eax,0x14(%edx)
f0109d8c:	eb 2c                	jmp    f0109dba <env_create+0x95d>
f0109d8e:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109d94:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d9a:	8b 58 78             	mov    0x78(%eax),%ebx
f0109d9d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109da3:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109da9:	89 c8                	mov    %ecx,%eax
f0109dab:	01 c0                	add    %eax,%eax
f0109dad:	01 c8                	add    %ecx,%eax
f0109daf:	c1 e0 03             	shl    $0x3,%eax
f0109db2:	01 d8                	add    %ebx,%eax
f0109db4:	89 82 cc 05 00 00    	mov    %eax,0x5cc(%edx)
f0109dba:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109dc0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109dc6:	8b 58 78             	mov    0x78(%eax),%ebx
f0109dc9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109dcf:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109dd5:	89 c8                	mov    %ecx,%eax
f0109dd7:	01 c0                	add    %eax,%eax
f0109dd9:	01 c8                	add    %ecx,%eax
f0109ddb:	c1 e0 03             	shl    $0x3,%eax
f0109dde:	01 d8                	add    %ebx,%eax
f0109de0:	89 82 c8 05 00 00    	mov    %eax,0x5c8(%edx)
f0109de6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109dec:	8b 48 78             	mov    0x78(%eax),%ecx
f0109def:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109df5:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109dfb:	89 d0                	mov    %edx,%eax
f0109dfd:	01 c0                	add    %eax,%eax
f0109dff:	01 d0                	add    %edx,%eax
f0109e01:	c1 e0 03             	shl    $0x3,%eax
f0109e04:	01 c8                	add    %ecx,%eax
f0109e06:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109e0d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109e13:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f0109e19:	42                   	inc    %edx
f0109e1a:	89 90 d4 05 00 00    	mov    %edx,0x5d4(%eax)
f0109e20:	e9 34 01 00 00       	jmp    f0109f59 <env_create+0xafc>
				}
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109e25:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109e2b:	8b 48 78             	mov    0x78(%eax),%ecx
f0109e2e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109e34:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109e3a:	89 d0                	mov    %edx,%eax
f0109e3c:	01 c0                	add    %eax,%eax
f0109e3e:	01 d0                	add    %edx,%eax
f0109e40:	c1 e0 03             	shl    $0x3,%eax
f0109e43:	01 c8                	add    %ecx,%eax
f0109e45:	85 c0                	test   %eax,%eax
f0109e47:	75 17                	jne    f0109e60 <env_create+0xa03>
f0109e49:	83 ec 04             	sub    $0x4,%esp
f0109e4c:	68 3c 6d 13 f0       	push   $0xf0136d3c
f0109e51:	68 4a 01 00 00       	push   $0x14a
f0109e56:	68 01 6d 13 f0       	push   $0xf0136d01
f0109e5b:	e8 a5 63 ff ff       	call   f0100205 <_panic>
f0109e60:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109e66:	8b 48 78             	mov    0x78(%eax),%ecx
f0109e69:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109e6f:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109e75:	89 d0                	mov    %edx,%eax
f0109e77:	01 c0                	add    %eax,%eax
f0109e79:	01 d0                	add    %edx,%eax
f0109e7b:	c1 e0 03             	shl    $0x3,%eax
f0109e7e:	01 c8                	add    %ecx,%eax
f0109e80:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109e86:	8b 92 d8 05 00 00    	mov    0x5d8(%edx),%edx
f0109e8c:	89 50 10             	mov    %edx,0x10(%eax)
f0109e8f:	8b 40 10             	mov    0x10(%eax),%eax
f0109e92:	85 c0                	test   %eax,%eax
f0109e94:	74 31                	je     f0109ec7 <env_create+0xa6a>
f0109e96:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109e9c:	8b 90 d8 05 00 00    	mov    0x5d8(%eax),%edx
f0109ea2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ea8:	8b 58 78             	mov    0x78(%eax),%ebx
f0109eab:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109eb1:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109eb7:	89 c8                	mov    %ecx,%eax
f0109eb9:	01 c0                	add    %eax,%eax
f0109ebb:	01 c8                	add    %ecx,%eax
f0109ebd:	c1 e0 03             	shl    $0x3,%eax
f0109ec0:	01 d8                	add    %ebx,%eax
f0109ec2:	89 42 14             	mov    %eax,0x14(%edx)
f0109ec5:	eb 2c                	jmp    f0109ef3 <env_create+0xa96>
f0109ec7:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109ecd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ed3:	8b 58 78             	mov    0x78(%eax),%ebx
f0109ed6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109edc:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109ee2:	89 c8                	mov    %ecx,%eax
f0109ee4:	01 c0                	add    %eax,%eax
f0109ee6:	01 c8                	add    %ecx,%eax
f0109ee8:	c1 e0 03             	shl    $0x3,%eax
f0109eeb:	01 d8                	add    %ebx,%eax
f0109eed:	89 82 dc 05 00 00    	mov    %eax,0x5dc(%edx)
f0109ef3:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109ef9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109eff:	8b 58 78             	mov    0x78(%eax),%ebx
f0109f02:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109f08:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109f0e:	89 c8                	mov    %ecx,%eax
f0109f10:	01 c0                	add    %eax,%eax
f0109f12:	01 c8                	add    %ecx,%eax
f0109f14:	c1 e0 03             	shl    $0x3,%eax
f0109f17:	01 d8                	add    %ebx,%eax
f0109f19:	89 82 d8 05 00 00    	mov    %eax,0x5d8(%edx)
f0109f1f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109f25:	8b 48 78             	mov    0x78(%eax),%ecx
f0109f28:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109f2e:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109f34:	89 d0                	mov    %edx,%eax
f0109f36:	01 c0                	add    %eax,%eax
f0109f38:	01 d0                	add    %edx,%eax
f0109f3a:	c1 e0 03             	shl    $0x3,%eax
f0109f3d:	01 c8                	add    %ecx,%eax
f0109f3f:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109f46:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109f4c:	8b 90 e4 05 00 00    	mov    0x5e4(%eax),%edx
f0109f52:	42                   	inc    %edx
f0109f53:	89 90 e4 05 00 00    	mov    %edx,0x5e4(%eax)
				}
			}
			e->page_last_WS_index ++;
f0109f59:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109f5f:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109f65:	42                   	inc    %edx
f0109f66:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
			e->page_last_WS_index %= (e->page_WS_max_size);
f0109f6c:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109f72:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109f78:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f0109f7e:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109f84:	8b 5a 74             	mov    0x74(%edx),%ebx
f0109f87:	ba 00 00 00 00       	mov    $0x0,%edx
f0109f8c:	f7 f3                	div    %ebx
f0109f8e:	89 d0                	mov    %edx,%eax
f0109f90:	89 81 2c 05 00 00    	mov    %eax,0x52c(%ecx)

			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f0109f96:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109f9c:	83 ec 04             	sub    $0x4,%esp
f0109f9f:	6a 01                	push   $0x1
f0109fa1:	ff 75 c0             	pushl  -0x40(%ebp)
f0109fa4:	50                   	push   %eax
f0109fa5:	e8 3a 96 ff ff       	call   f01035e4 <pf_add_empty_env_page>
f0109faa:	83 c4 10             	add    $0x10,%esp
f0109fad:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0109fb3:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f0109fba:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0109fbd:	3b 85 58 ff ff ff    	cmp    -0xa8(%ebp),%eax
f0109fc3:	0f 83 9e fa ff ff    	jae    f0109a67 <env_create+0x60a>

	}

	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109fc9:	83 ec 0c             	sub    $0xc,%esp
f0109fcc:	6a 02                	push   $0x2
f0109fce:	e8 6a 43 00 00       	call   f010e33d <isPageReplacmentAlgorithmLRU>
f0109fd3:	83 c4 10             	add    $0x10,%esp
f0109fd6:	85 c0                	test   %eax,%eax
f0109fd8:	74 72                	je     f010a04c <env_create+0xbef>
	{
		struct WorkingSetElement * elm = NULL;
f0109fda:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
		LIST_FOREACH(elm, &(e->SecondList))
f0109fe1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109fe7:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f0109fed:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0109ff0:	eb 2b                	jmp    f010a01d <env_create+0xbc0>
		{
			//set it's PRESENT bit to 0
			pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f0109ff2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0109ff5:	8b 10                	mov    (%eax),%edx
f0109ff7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ffd:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a000:	6a 01                	push   $0x1
f010a002:	6a 00                	push   $0x0
f010a004:	52                   	push   %edx
f010a005:	50                   	push   %eax
f010a006:	e8 a8 e0 ff ff       	call   f01080b3 <pt_set_page_permissions>
f010a00b:	83 c4 10             	add    $0x10,%esp
	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		struct WorkingSetElement * elm = NULL;
		LIST_FOREACH(elm, &(e->SecondList))
f010a00e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010a014:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010a01a:	89 45 bc             	mov    %eax,-0x44(%ebp)
f010a01d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010a023:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f010a027:	74 08                	je     f010a031 <env_create+0xbd4>
f010a029:	8b 55 bc             	mov    -0x44(%ebp),%edx
f010a02c:	8b 52 10             	mov    0x10(%edx),%edx
f010a02f:	eb 05                	jmp    f010a036 <env_create+0xbd9>
f010a031:	ba 00 00 00 00       	mov    $0x0,%edx
f010a036:	89 90 e0 05 00 00    	mov    %edx,0x5e0(%eax)
f010a03c:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010a042:	85 c0                	test   %eax,%eax
f010a044:	75 ac                	jne    f0109ff2 <env_create+0xb95>
f010a046:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f010a04a:	75 a6                	jne    f0109ff2 <env_create+0xb95>
f010a04c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010a04f:	89 45 a8             	mov    %eax,-0x58(%ebp)
f010a052:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010a055:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f010a058:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
}
f010a05e:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010a061:	5b                   	pop    %ebx
f010a062:	5e                   	pop    %esi
f010a063:	5f                   	pop    %edi
f010a064:	5d                   	pop    %ebp
f010a065:	c3                   	ret    

f010a066 <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f010a066:	55                   	push   %ebp
f010a067:	89 e5                	mov    %esp,%ebp
f010a069:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f010a06c:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010a071:	3b 45 08             	cmp    0x8(%ebp),%eax
f010a074:	74 25                	je     f010a09b <env_run+0x35>
	{
		curenv = e ;
f010a076:	8b 45 08             	mov    0x8(%ebp),%eax
f010a079:	a3 f4 a3 89 f0       	mov    %eax,0xf089a3f4
		curenv->env_runs++ ;
f010a07e:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010a083:	8b 50 58             	mov    0x58(%eax),%edx
f010a086:	42                   	inc    %edx
f010a087:	89 50 58             	mov    %edx,0x58(%eax)
		lcr3(curenv->env_cr3) ;
f010a08a:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010a08f:	8b 40 60             	mov    0x60(%eax),%eax
f010a092:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a095:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a098:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f010a09b:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010a0a0:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f010a0a7:	e8 13 a1 ff ff       	call   f01041bf <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f010a0ac:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010a0b1:	83 ec 0c             	sub    $0xc,%esp
f010a0b4:	50                   	push   %eax
f010a0b5:	e8 0f 01 00 00       	call   f010a1c9 <env_pop_tf>

f010a0ba <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f010a0ba:	55                   	push   %ebp
f010a0bb:	89 e5                	mov    %esp,%ebp
f010a0bd:	83 ec 08             	sub    $0x8,%esp
	/********DON'T CHANGE THIS LINE***********/
#if USE_KHEAP
	unshare_pws_at_user_space(e);
f010a0c0:	83 ec 0c             	sub    $0xc,%esp
f010a0c3:	ff 75 08             	pushl  0x8(%ebp)
f010a0c6:	e8 3e 11 00 00       	call   f010b209 <unshare_pws_at_user_space>
f010a0cb:	83 c4 10             	add    $0x10,%esp
#endif
	/*****************************************/
	//TODO: [PROJECT MS3 - BONUS] [EXIT ENV] env_free
	// your code is here, remove the panic and write your code
	panic("env_free() is not implemented yet...!!");
f010a0ce:	83 ec 04             	sub    $0x4,%esp
f010a0d1:	68 60 6d 13 f0       	push   $0xf0136d60
f010a0d6:	68 9d 01 00 00       	push   $0x19d
f010a0db:	68 01 6d 13 f0       	push   $0xf0136d01
f010a0e0:	e8 20 61 ff ff       	call   f0100205 <_panic>

f010a0e5 <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
/*2015*///Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f010a0e5:	55                   	push   %ebp
f010a0e6:	89 e5                	mov    %esp,%ebp
f010a0e8:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f010a0eb:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010a0f0:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a0f3:	83 ec 0c             	sub    $0xc,%esp
f010a0f6:	50                   	push   %eax
f010a0f7:	e8 a6 b1 ff ff       	call   f01052a2 <sched_exit_env>
f010a0fc:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f010a0ff:	e8 22 a6 ff ff       	call   f0104726 <fos_scheduler>

f010a104 <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f010a104:	55                   	push   %ebp
f010a105:	89 e5                	mov    %esp,%ebp
f010a107:	53                   	push   %ebx
f010a108:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f010a10b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010a10f:	75 15                	jne    f010a126 <envid2env+0x22>
		*env_store = curenv;
f010a111:	8b 15 f4 a3 89 f0    	mov    0xf089a3f4,%edx
f010a117:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a11a:	89 10                	mov    %edx,(%eax)
		return 0;
f010a11c:	b8 00 00 00 00       	mov    $0x0,%eax
f010a121:	e9 9e 00 00 00       	jmp    f010a1c4 <envid2env+0xc0>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f010a126:	8b 1d f0 a3 89 f0    	mov    0xf089a3f0,%ebx
f010a12c:	83 ec 0c             	sub    $0xc,%esp
f010a12f:	68 b1 02 00 00       	push   $0x2b1
f010a134:	e8 1c 65 02 00       	call   f0130655 <nearest_pow2_ceil>
f010a139:	83 c4 10             	add    $0x10,%esp
f010a13c:	8d 50 ff             	lea    -0x1(%eax),%edx
f010a13f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a142:	21 c2                	and    %eax,%edx
f010a144:	89 d0                	mov    %edx,%eax
f010a146:	c1 e0 03             	shl    $0x3,%eax
f010a149:	01 d0                	add    %edx,%eax
f010a14b:	01 c0                	add    %eax,%eax
f010a14d:	01 d0                	add    %edx,%eax
f010a14f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a156:	01 d0                	add    %edx,%eax
f010a158:	c1 e0 04             	shl    $0x4,%eax
f010a15b:	01 d8                	add    %ebx,%eax
f010a15d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f010a160:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a163:	8b 40 54             	mov    0x54(%eax),%eax
f010a166:	85 c0                	test   %eax,%eax
f010a168:	74 0b                	je     f010a175 <envid2env+0x71>
f010a16a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a16d:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a170:	3b 45 08             	cmp    0x8(%ebp),%eax
f010a173:	74 10                	je     f010a185 <envid2env+0x81>
		*env_store = 0;
f010a175:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a178:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f010a17e:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f010a183:	eb 3f                	jmp    f010a1c4 <envid2env+0xc0>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f010a185:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010a189:	74 2c                	je     f010a1b7 <envid2env+0xb3>
f010a18b:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010a190:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010a193:	74 22                	je     f010a1b7 <envid2env+0xb3>
f010a195:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a198:	8b 50 50             	mov    0x50(%eax),%edx
f010a19b:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010a1a0:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a1a3:	39 c2                	cmp    %eax,%edx
f010a1a5:	74 10                	je     f010a1b7 <envid2env+0xb3>
		*env_store = 0;
f010a1a7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a1aa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f010a1b0:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f010a1b5:	eb 0d                	jmp    f010a1c4 <envid2env+0xc0>
	}

	*env_store = e;
f010a1b7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a1ba:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a1bd:	89 10                	mov    %edx,(%eax)
	return 0;
f010a1bf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a1c4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a1c7:	c9                   	leave  
f010a1c8:	c3                   	ret    

f010a1c9 <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f010a1c9:	55                   	push   %ebp
f010a1ca:	89 e5                	mov    %esp,%ebp
f010a1cc:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f010a1cf:	8b 65 08             	mov    0x8(%ebp),%esp
f010a1d2:	61                   	popa   
f010a1d3:	07                   	pop    %es
f010a1d4:	1f                   	pop    %ds
f010a1d5:	83 c4 08             	add    $0x8,%esp
f010a1d8:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f010a1d9:	83 ec 04             	sub    $0x4,%esp
f010a1dc:	68 87 6d 13 f0       	push   $0xf0136d87
f010a1e1:	68 fd 01 00 00       	push   $0x1fd
f010a1e6:	68 01 6d 13 f0       	push   $0xf0136d01
f010a1eb:	e8 15 60 ff ff       	call   f0100205 <_panic>

f010a1f0 <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f010a1f0:	55                   	push   %ebp
f010a1f1:	89 e5                	mov    %esp,%ebp
f010a1f3:	53                   	push   %ebx
f010a1f4:	83 ec 14             	sub    $0x14,%esp
	int iEnv = NENV-1;
f010a1f7:	c7 45 f4 b0 02 00 00 	movl   $0x2b0,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f010a1fe:	e9 73 01 00 00       	jmp    f010a376 <env_init+0x186>
	{
		envs[iEnv].env_status = ENV_FREE;
f010a203:	8b 0d f0 a3 89 f0    	mov    0xf089a3f0,%ecx
f010a209:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a20c:	89 d0                	mov    %edx,%eax
f010a20e:	c1 e0 03             	shl    $0x3,%eax
f010a211:	01 d0                	add    %edx,%eax
f010a213:	01 c0                	add    %eax,%eax
f010a215:	01 d0                	add    %edx,%eax
f010a217:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a21e:	01 d0                	add    %edx,%eax
f010a220:	c1 e0 04             	shl    $0x4,%eax
f010a223:	01 c8                	add    %ecx,%eax
f010a225:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f010a22c:	8b 0d f0 a3 89 f0    	mov    0xf089a3f0,%ecx
f010a232:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a235:	89 d0                	mov    %edx,%eax
f010a237:	c1 e0 03             	shl    $0x3,%eax
f010a23a:	01 d0                	add    %edx,%eax
f010a23c:	01 c0                	add    %eax,%eax
f010a23e:	01 d0                	add    %edx,%eax
f010a240:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a247:	01 d0                	add    %edx,%eax
f010a249:	c1 e0 04             	shl    $0x4,%eax
f010a24c:	01 c8                	add    %ecx,%eax
f010a24e:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f010a255:	8b 0d f0 a3 89 f0    	mov    0xf089a3f0,%ecx
f010a25b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a25e:	89 d0                	mov    %edx,%eax
f010a260:	c1 e0 03             	shl    $0x3,%eax
f010a263:	01 d0                	add    %edx,%eax
f010a265:	01 c0                	add    %eax,%eax
f010a267:	01 d0                	add    %edx,%eax
f010a269:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a270:	01 d0                	add    %edx,%eax
f010a272:	c1 e0 04             	shl    $0x4,%eax
f010a275:	01 c8                	add    %ecx,%eax
f010a277:	85 c0                	test   %eax,%eax
f010a279:	75 17                	jne    f010a292 <env_init+0xa2>
f010a27b:	83 ec 04             	sub    $0x4,%esp
f010a27e:	68 3c 6d 13 f0       	push   $0xf0136d3c
f010a283:	68 19 02 00 00       	push   $0x219
f010a288:	68 01 6d 13 f0       	push   $0xf0136d01
f010a28d:	e8 73 5f ff ff       	call   f0100205 <_panic>
f010a292:	8b 0d f0 a3 89 f0    	mov    0xf089a3f0,%ecx
f010a298:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a29b:	89 d0                	mov    %edx,%eax
f010a29d:	c1 e0 03             	shl    $0x3,%eax
f010a2a0:	01 d0                	add    %edx,%eax
f010a2a2:	01 c0                	add    %eax,%eax
f010a2a4:	01 d0                	add    %edx,%eax
f010a2a6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a2ad:	01 d0                	add    %edx,%eax
f010a2af:	c1 e0 04             	shl    $0x4,%eax
f010a2b2:	01 c8                	add    %ecx,%eax
f010a2b4:	8b 15 f8 a3 89 f0    	mov    0xf089a3f8,%edx
f010a2ba:	89 50 44             	mov    %edx,0x44(%eax)
f010a2bd:	8b 40 44             	mov    0x44(%eax),%eax
f010a2c0:	85 c0                	test   %eax,%eax
f010a2c2:	74 2d                	je     f010a2f1 <env_init+0x101>
f010a2c4:	8b 0d f8 a3 89 f0    	mov    0xf089a3f8,%ecx
f010a2ca:	8b 1d f0 a3 89 f0    	mov    0xf089a3f0,%ebx
f010a2d0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a2d3:	89 d0                	mov    %edx,%eax
f010a2d5:	c1 e0 03             	shl    $0x3,%eax
f010a2d8:	01 d0                	add    %edx,%eax
f010a2da:	01 c0                	add    %eax,%eax
f010a2dc:	01 d0                	add    %edx,%eax
f010a2de:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a2e5:	01 d0                	add    %edx,%eax
f010a2e7:	c1 e0 04             	shl    $0x4,%eax
f010a2ea:	01 d8                	add    %ebx,%eax
f010a2ec:	89 41 48             	mov    %eax,0x48(%ecx)
f010a2ef:	eb 27                	jmp    f010a318 <env_init+0x128>
f010a2f1:	8b 0d f0 a3 89 f0    	mov    0xf089a3f0,%ecx
f010a2f7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a2fa:	89 d0                	mov    %edx,%eax
f010a2fc:	c1 e0 03             	shl    $0x3,%eax
f010a2ff:	01 d0                	add    %edx,%eax
f010a301:	01 c0                	add    %eax,%eax
f010a303:	01 d0                	add    %edx,%eax
f010a305:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a30c:	01 d0                	add    %edx,%eax
f010a30e:	c1 e0 04             	shl    $0x4,%eax
f010a311:	01 c8                	add    %ecx,%eax
f010a313:	a3 fc a3 89 f0       	mov    %eax,0xf089a3fc
f010a318:	8b 0d f0 a3 89 f0    	mov    0xf089a3f0,%ecx
f010a31e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a321:	89 d0                	mov    %edx,%eax
f010a323:	c1 e0 03             	shl    $0x3,%eax
f010a326:	01 d0                	add    %edx,%eax
f010a328:	01 c0                	add    %eax,%eax
f010a32a:	01 d0                	add    %edx,%eax
f010a32c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a333:	01 d0                	add    %edx,%eax
f010a335:	c1 e0 04             	shl    $0x4,%eax
f010a338:	01 c8                	add    %ecx,%eax
f010a33a:	a3 f8 a3 89 f0       	mov    %eax,0xf089a3f8
f010a33f:	8b 0d f0 a3 89 f0    	mov    0xf089a3f0,%ecx
f010a345:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a348:	89 d0                	mov    %edx,%eax
f010a34a:	c1 e0 03             	shl    $0x3,%eax
f010a34d:	01 d0                	add    %edx,%eax
f010a34f:	01 c0                	add    %eax,%eax
f010a351:	01 d0                	add    %edx,%eax
f010a353:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a35a:	01 d0                	add    %edx,%eax
f010a35c:	c1 e0 04             	shl    $0x4,%eax
f010a35f:	01 c8                	add    %ecx,%eax
f010a361:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010a368:	a1 04 a4 89 f0       	mov    0xf089a404,%eax
f010a36d:	40                   	inc    %eax
f010a36e:	a3 04 a4 89 f0       	mov    %eax,0xf089a404
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f010a373:	ff 4d f4             	decl   -0xc(%ebp)
f010a376:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a37a:	0f 89 83 fe ff ff    	jns    f010a203 <env_init+0x13>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f010a380:	90                   	nop
f010a381:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a384:	c9                   	leave  
f010a385:	c3                   	ret    

f010a386 <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f010a386:	55                   	push   %ebp
f010a387:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f010a389:	8b 15 f8 a3 89 f0    	mov    0xf089a3f8,%edx
f010a38f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a392:	89 10                	mov    %edx,(%eax)
f010a394:	8b 45 08             	mov    0x8(%ebp),%eax
f010a397:	8b 00                	mov    (%eax),%eax
f010a399:	85 c0                	test   %eax,%eax
f010a39b:	75 07                	jne    f010a3a4 <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f010a39d:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f010a3a2:	eb 11                	jmp    f010a3b5 <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f010a3a4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3a7:	8b 00                	mov    (%eax),%eax
f010a3a9:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f010a3b0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a3b5:	5d                   	pop    %ebp
f010a3b6:	c3                   	ret    

f010a3b7 <free_environment>:
//===============================
// 3) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f010a3b7:	55                   	push   %ebp
f010a3b8:	89 e5                	mov    %esp,%ebp
f010a3ba:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f010a3bd:	83 ec 04             	sub    $0x4,%esp
f010a3c0:	68 f0 05 00 00       	push   $0x5f0
f010a3c5:	6a 00                	push   $0x0
f010a3c7:	ff 75 08             	pushl  0x8(%ebp)
f010a3ca:	e8 02 77 02 00       	call   f0131ad1 <memset>
f010a3cf:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f010a3d2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3d5:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f010a3dc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010a3e0:	75 17                	jne    f010a3f9 <free_environment+0x42>
f010a3e2:	83 ec 04             	sub    $0x4,%esp
f010a3e5:	68 3c 6d 13 f0       	push   $0xf0136d3c
f010a3ea:	68 36 02 00 00       	push   $0x236
f010a3ef:	68 01 6d 13 f0       	push   $0xf0136d01
f010a3f4:	e8 0c 5e ff ff       	call   f0100205 <_panic>
f010a3f9:	8b 15 f8 a3 89 f0    	mov    0xf089a3f8,%edx
f010a3ff:	8b 45 08             	mov    0x8(%ebp),%eax
f010a402:	89 50 44             	mov    %edx,0x44(%eax)
f010a405:	8b 45 08             	mov    0x8(%ebp),%eax
f010a408:	8b 40 44             	mov    0x44(%eax),%eax
f010a40b:	85 c0                	test   %eax,%eax
f010a40d:	74 0d                	je     f010a41c <free_environment+0x65>
f010a40f:	a1 f8 a3 89 f0       	mov    0xf089a3f8,%eax
f010a414:	8b 55 08             	mov    0x8(%ebp),%edx
f010a417:	89 50 48             	mov    %edx,0x48(%eax)
f010a41a:	eb 08                	jmp    f010a424 <free_environment+0x6d>
f010a41c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a41f:	a3 fc a3 89 f0       	mov    %eax,0xf089a3fc
f010a424:	8b 45 08             	mov    0x8(%ebp),%eax
f010a427:	a3 f8 a3 89 f0       	mov    %eax,0xf089a3f8
f010a42c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a42f:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010a436:	a1 04 a4 89 f0       	mov    0xf089a404,%eax
f010a43b:	40                   	inc    %eax
f010a43c:	a3 04 a4 89 f0       	mov    %eax,0xf089a404
}
f010a441:	90                   	nop
f010a442:	c9                   	leave  
f010a443:	c3                   	ret    

f010a444 <create_user_page_WS>:

//===============================================
// 4) DYNAMICALLY ALLOCATE SPACE FOR WORKING SET:
//===============================================
void * create_user_page_WS(struct Env * e, unsigned int numOfElements)
{
f010a444:	55                   	push   %ebp
f010a445:	89 e5                	mov    %esp,%ebp
f010a447:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [PROGRAM LOAD] create_user_page_WS()
	// Write your code here, remove the panic and write your code
	//panic("create_user_page_WS() is not implemented yet...!!");
	uint32 nBytes = sizeof(struct WorkingSetElement) * numOfElements;
f010a44a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010a44d:	89 d0                	mov    %edx,%eax
f010a44f:	01 c0                	add    %eax,%eax
f010a451:	01 d0                	add    %edx,%eax
f010a453:	c1 e0 03             	shl    $0x3,%eax
f010a456:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct WorkingSetElement* ptr_page_WS = kmalloc(nBytes);
f010a459:	83 ec 0c             	sub    $0xc,%esp
f010a45c:	ff 75 f4             	pushl  -0xc(%ebp)
f010a45f:	e8 27 d9 ff ff       	call   f0107d8b <kmalloc>
f010a464:	83 c4 10             	add    $0x10,%esp
f010a467:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(ptr_page_WS == NULL)
f010a46a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010a46e:	75 17                	jne    f010a487 <create_user_page_WS+0x43>
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010a470:	83 ec 04             	sub    $0x4,%esp
f010a473:	68 93 6d 13 f0       	push   $0xf0136d93
f010a478:	68 44 02 00 00       	push   $0x244
f010a47d:	68 01 6d 13 f0       	push   $0xf0136d01
f010a482:	e8 7e 5d ff ff       	call   f0100205 <_panic>
	return ptr_page_WS;
f010a487:	8b 45 f0             	mov    -0x10(%ebp),%eax
	//Use kmalloc() to allocate a new space for a working set with numOfElements elements
}
f010a48a:	c9                   	leave  
f010a48b:	c3                   	ret    

f010a48c <create_user_directory>:

//==================================================
// 5) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f010a48c:	55                   	push   %ebp
f010a48d:	89 e5                	mov    %esp,%ebp
f010a48f:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [PROGRAM LOAD] create_user_directory()
	// Write your code here, remove the panic and write your code
	//panic("create_user_directory() is not implemented yet...!!");
	uint32* ptr_user_page_directory = kmalloc(PAGE_SIZE);
f010a492:	83 ec 0c             	sub    $0xc,%esp
f010a495:	68 00 10 00 00       	push   $0x1000
f010a49a:	e8 ec d8 ff ff       	call   f0107d8b <kmalloc>
f010a49f:	83 c4 10             	add    $0x10,%esp
f010a4a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_user_page_directory == NULL)
f010a4a5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a4a9:	75 17                	jne    f010a4c2 <create_user_directory+0x36>
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010a4ab:	83 ec 04             	sub    $0x4,%esp
f010a4ae:	68 93 6d 13 f0       	push   $0xf0136d93
f010a4b3:	68 53 02 00 00       	push   $0x253
f010a4b8:	68 01 6d 13 f0       	push   $0xf0136d01
f010a4bd:	e8 43 5d ff ff       	call   f0100205 <_panic>
	return ptr_user_page_directory;
f010a4c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
	//Use kmalloc() to allocate a new directory
}
f010a4c5:	c9                   	leave  
f010a4c6:	c3                   	ret    

f010a4c7 <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f010a4c7:	55                   	push   %ebp
f010a4c8:	89 e5                	mov    %esp,%ebp
f010a4ca:	53                   	push   %ebx
f010a4cb:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f010a4ce:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a4d1:	8b 40 0c             	mov    0xc(%eax),%eax
f010a4d4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f010a4d7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a4da:	8b 40 08             	mov    0x8(%eax),%eax
f010a4dd:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f010a4e0:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f010a4e7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010a4ea:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a4ed:	01 c2                	add    %eax,%edx
f010a4ef:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a4f2:	01 d0                	add    %edx,%eax
f010a4f4:	48                   	dec    %eax
f010a4f5:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010a4f8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a4fb:	ba 00 00 00 00       	mov    $0x0,%edx
f010a500:	f7 75 dc             	divl   -0x24(%ebp)
f010a503:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a506:	29 d0                	sub    %edx,%eax
f010a508:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f010a50b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a50e:	89 45 d0             	mov    %eax,-0x30(%ebp)
f010a511:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010a514:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a519:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f010a51c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f010a523:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f010a52a:	8b 45 10             	mov    0x10(%ebp),%eax
f010a52d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f010a533:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f010a53a:	0f 85 c8 05 00 00    	jne    f010ab08 <program_segment_alloc_map_copy_workingset+0x641>
f010a540:	8b 45 08             	mov    0x8(%ebp),%eax
f010a543:	05 5c 05 00 00       	add    $0x55c,%eax
f010a548:	83 ec 08             	sub    $0x8,%esp
f010a54b:	68 b0 6d 13 f0       	push   $0xf0136db0
f010a550:	50                   	push   %eax
f010a551:	e8 99 74 02 00       	call   f01319ef <strcmp>
f010a556:	83 c4 10             	add    $0x10,%esp
f010a559:	85 c0                	test   %eax,%eax
f010a55b:	0f 84 a7 05 00 00    	je     f010ab08 <program_segment_alloc_map_copy_workingset+0x641>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f010a561:	8b 45 14             	mov    0x14(%ebp),%eax
f010a564:	83 f8 06             	cmp    $0x6,%eax
f010a567:	76 05                	jbe    f010a56e <program_segment_alloc_map_copy_workingset+0xa7>
f010a569:	b8 06 00 00 00       	mov    $0x6,%eax
f010a56e:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010a571:	e9 92 05 00 00       	jmp    f010ab08 <program_segment_alloc_map_copy_workingset+0x641>
	{
		// Allocate a page
		allocate_frame(&p) ;
f010a576:	83 ec 0c             	sub    $0xc,%esp
f010a579:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010a57c:	50                   	push   %eax
f010a57d:	e8 70 c3 ff ff       	call   f01068f2 <allocate_frame>
f010a582:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f010a585:	8b 55 c0             	mov    -0x40(%ebp),%edx
f010a588:	8b 45 08             	mov    0x8(%ebp),%eax
f010a58b:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a58e:	6a 06                	push   $0x6
f010a590:	ff 75 f4             	pushl  -0xc(%ebp)
f010a593:	52                   	push   %edx
f010a594:	50                   	push   %eax
f010a595:	e8 63 c9 ff ff       	call   f0106efd <loadtime_map_frame>
f010a59a:	83 c4 10             	add    $0x10,%esp
		LOG_STRING("segment page mapped");

		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));

		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f010a59d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5a0:	8b 48 78             	mov    0x78(%eax),%ecx
f010a5a3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5a6:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a5ac:	89 d0                	mov    %edx,%eax
f010a5ae:	01 c0                	add    %eax,%eax
f010a5b0:	01 d0                	add    %edx,%eax
f010a5b2:	c1 e0 03             	shl    $0x3,%eax
f010a5b5:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a5b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a5bb:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f010a5bd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5c0:	8b 48 78             	mov    0x78(%eax),%ecx
f010a5c3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5c6:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a5cc:	89 d0                	mov    %edx,%eax
f010a5ce:	01 c0                	add    %eax,%eax
f010a5d0:	01 d0                	add    %edx,%eax
f010a5d2:	c1 e0 03             	shl    $0x3,%eax
f010a5d5:	01 c8                	add    %ecx,%eax
f010a5d7:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f010a5db:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5de:	8b 48 78             	mov    0x78(%eax),%ecx
f010a5e1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5e4:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a5ea:	89 d0                	mov    %edx,%eax
f010a5ec:	01 c0                	add    %eax,%eax
f010a5ee:	01 d0                	add    %edx,%eax
f010a5f0:	c1 e0 03             	shl    $0x3,%eax
f010a5f3:	01 c8                	add    %ecx,%eax
f010a5f5:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a5fc:	83 ec 0c             	sub    $0xc,%esp
f010a5ff:	6a 02                	push   $0x2
f010a601:	e8 37 3d 00 00       	call   f010e33d <isPageReplacmentAlgorithmLRU>
f010a606:	83 c4 10             	add    $0x10,%esp
f010a609:	85 c0                	test   %eax,%eax
f010a60b:	0f 84 c8 03 00 00    	je     f010a9d9 <program_segment_alloc_map_copy_workingset+0x512>
		{
			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a611:	8b 45 08             	mov    0x8(%ebp),%eax
f010a614:	8b 48 78             	mov    0x78(%eax),%ecx
f010a617:	8b 45 08             	mov    0x8(%ebp),%eax
f010a61a:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a620:	89 d0                	mov    %edx,%eax
f010a622:	01 c0                	add    %eax,%eax
f010a624:	01 d0                	add    %edx,%eax
f010a626:	c1 e0 03             	shl    $0x3,%eax
f010a629:	01 c8                	add    %ecx,%eax
f010a62b:	85 c0                	test   %eax,%eax
f010a62d:	75 17                	jne    f010a646 <program_segment_alloc_map_copy_workingset+0x17f>
f010a62f:	83 ec 04             	sub    $0x4,%esp
f010a632:	68 1e 6d 13 f0       	push   $0xf0136d1e
f010a637:	68 85 02 00 00       	push   $0x285
f010a63c:	68 01 6d 13 f0       	push   $0xf0136d01
f010a641:	e8 bf 5b ff ff       	call   f0100205 <_panic>
f010a646:	8b 45 08             	mov    0x8(%ebp),%eax
f010a649:	8b 48 78             	mov    0x78(%eax),%ecx
f010a64c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a64f:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a655:	89 d0                	mov    %edx,%eax
f010a657:	01 c0                	add    %eax,%eax
f010a659:	01 d0                	add    %edx,%eax
f010a65b:	c1 e0 03             	shl    $0x3,%eax
f010a65e:	01 c8                	add    %ecx,%eax
f010a660:	8b 40 10             	mov    0x10(%eax),%eax
f010a663:	85 c0                	test   %eax,%eax
f010a665:	74 3f                	je     f010a6a6 <program_segment_alloc_map_copy_workingset+0x1df>
f010a667:	8b 45 08             	mov    0x8(%ebp),%eax
f010a66a:	8b 48 78             	mov    0x78(%eax),%ecx
f010a66d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a670:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a676:	89 d0                	mov    %edx,%eax
f010a678:	01 c0                	add    %eax,%eax
f010a67a:	01 d0                	add    %edx,%eax
f010a67c:	c1 e0 03             	shl    $0x3,%eax
f010a67f:	01 c8                	add    %ecx,%eax
f010a681:	8b 50 10             	mov    0x10(%eax),%edx
f010a684:	8b 45 08             	mov    0x8(%ebp),%eax
f010a687:	8b 58 78             	mov    0x78(%eax),%ebx
f010a68a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a68d:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a693:	89 c8                	mov    %ecx,%eax
f010a695:	01 c0                	add    %eax,%eax
f010a697:	01 c8                	add    %ecx,%eax
f010a699:	c1 e0 03             	shl    $0x3,%eax
f010a69c:	01 d8                	add    %ebx,%eax
f010a69e:	8b 40 14             	mov    0x14(%eax),%eax
f010a6a1:	89 42 14             	mov    %eax,0x14(%edx)
f010a6a4:	eb 26                	jmp    f010a6cc <program_segment_alloc_map_copy_workingset+0x205>
f010a6a6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6a9:	8b 48 78             	mov    0x78(%eax),%ecx
f010a6ac:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6af:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a6b5:	89 d0                	mov    %edx,%eax
f010a6b7:	01 c0                	add    %eax,%eax
f010a6b9:	01 d0                	add    %edx,%eax
f010a6bb:	c1 e0 03             	shl    $0x3,%eax
f010a6be:	01 c8                	add    %ecx,%eax
f010a6c0:	8b 50 14             	mov    0x14(%eax),%edx
f010a6c3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6c6:	89 90 bc 05 00 00    	mov    %edx,0x5bc(%eax)
f010a6cc:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6cf:	8b 48 78             	mov    0x78(%eax),%ecx
f010a6d2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6d5:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a6db:	89 d0                	mov    %edx,%eax
f010a6dd:	01 c0                	add    %eax,%eax
f010a6df:	01 d0                	add    %edx,%eax
f010a6e1:	c1 e0 03             	shl    $0x3,%eax
f010a6e4:	01 c8                	add    %ecx,%eax
f010a6e6:	8b 40 14             	mov    0x14(%eax),%eax
f010a6e9:	85 c0                	test   %eax,%eax
f010a6eb:	74 3f                	je     f010a72c <program_segment_alloc_map_copy_workingset+0x265>
f010a6ed:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6f0:	8b 48 78             	mov    0x78(%eax),%ecx
f010a6f3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6f6:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a6fc:	89 d0                	mov    %edx,%eax
f010a6fe:	01 c0                	add    %eax,%eax
f010a700:	01 d0                	add    %edx,%eax
f010a702:	c1 e0 03             	shl    $0x3,%eax
f010a705:	01 c8                	add    %ecx,%eax
f010a707:	8b 50 14             	mov    0x14(%eax),%edx
f010a70a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a70d:	8b 58 78             	mov    0x78(%eax),%ebx
f010a710:	8b 45 08             	mov    0x8(%ebp),%eax
f010a713:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a719:	89 c8                	mov    %ecx,%eax
f010a71b:	01 c0                	add    %eax,%eax
f010a71d:	01 c8                	add    %ecx,%eax
f010a71f:	c1 e0 03             	shl    $0x3,%eax
f010a722:	01 d8                	add    %ebx,%eax
f010a724:	8b 40 10             	mov    0x10(%eax),%eax
f010a727:	89 42 10             	mov    %eax,0x10(%edx)
f010a72a:	eb 26                	jmp    f010a752 <program_segment_alloc_map_copy_workingset+0x28b>
f010a72c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a72f:	8b 48 78             	mov    0x78(%eax),%ecx
f010a732:	8b 45 08             	mov    0x8(%ebp),%eax
f010a735:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a73b:	89 d0                	mov    %edx,%eax
f010a73d:	01 c0                	add    %eax,%eax
f010a73f:	01 d0                	add    %edx,%eax
f010a741:	c1 e0 03             	shl    $0x3,%eax
f010a744:	01 c8                	add    %ecx,%eax
f010a746:	8b 50 10             	mov    0x10(%eax),%edx
f010a749:	8b 45 08             	mov    0x8(%ebp),%eax
f010a74c:	89 90 b8 05 00 00    	mov    %edx,0x5b8(%eax)
f010a752:	8b 45 08             	mov    0x8(%ebp),%eax
f010a755:	8b 48 78             	mov    0x78(%eax),%ecx
f010a758:	8b 45 08             	mov    0x8(%ebp),%eax
f010a75b:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a761:	89 d0                	mov    %edx,%eax
f010a763:	01 c0                	add    %eax,%eax
f010a765:	01 d0                	add    %edx,%eax
f010a767:	c1 e0 03             	shl    $0x3,%eax
f010a76a:	01 c8                	add    %ecx,%eax
f010a76c:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f010a773:	8b 45 08             	mov    0x8(%ebp),%eax
f010a776:	8b 48 78             	mov    0x78(%eax),%ecx
f010a779:	8b 45 08             	mov    0x8(%ebp),%eax
f010a77c:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a782:	89 d0                	mov    %edx,%eax
f010a784:	01 c0                	add    %eax,%eax
f010a786:	01 d0                	add    %edx,%eax
f010a788:	c1 e0 03             	shl    $0x3,%eax
f010a78b:	01 c8                	add    %ecx,%eax
f010a78d:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a794:	8b 45 08             	mov    0x8(%ebp),%eax
f010a797:	8b 80 c4 05 00 00    	mov    0x5c4(%eax),%eax
f010a79d:	8d 50 ff             	lea    -0x1(%eax),%edx
f010a7a0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7a3:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f010a7a9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7ac:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010a7b2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7b5:	8b 80 e8 05 00 00    	mov    0x5e8(%eax),%eax
f010a7bb:	48                   	dec    %eax
f010a7bc:	39 c2                	cmp    %eax,%edx
f010a7be:	0f 83 0d 01 00 00    	jae    f010a8d1 <program_segment_alloc_map_copy_workingset+0x40a>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a7c4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7c7:	8b 48 78             	mov    0x78(%eax),%ecx
f010a7ca:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7cd:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a7d3:	89 d0                	mov    %edx,%eax
f010a7d5:	01 c0                	add    %eax,%eax
f010a7d7:	01 d0                	add    %edx,%eax
f010a7d9:	c1 e0 03             	shl    $0x3,%eax
f010a7dc:	01 c8                	add    %ecx,%eax
f010a7de:	85 c0                	test   %eax,%eax
f010a7e0:	75 17                	jne    f010a7f9 <program_segment_alloc_map_copy_workingset+0x332>
f010a7e2:	83 ec 04             	sub    $0x4,%esp
f010a7e5:	68 3c 6d 13 f0       	push   $0xf0136d3c
f010a7ea:	68 89 02 00 00       	push   $0x289
f010a7ef:	68 01 6d 13 f0       	push   $0xf0136d01
f010a7f4:	e8 0c 5a ff ff       	call   f0100205 <_panic>
f010a7f9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7fc:	8b 48 78             	mov    0x78(%eax),%ecx
f010a7ff:	8b 45 08             	mov    0x8(%ebp),%eax
f010a802:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a808:	89 d0                	mov    %edx,%eax
f010a80a:	01 c0                	add    %eax,%eax
f010a80c:	01 d0                	add    %edx,%eax
f010a80e:	c1 e0 03             	shl    $0x3,%eax
f010a811:	01 c8                	add    %ecx,%eax
f010a813:	8b 55 08             	mov    0x8(%ebp),%edx
f010a816:	8b 92 c8 05 00 00    	mov    0x5c8(%edx),%edx
f010a81c:	89 50 10             	mov    %edx,0x10(%eax)
f010a81f:	8b 40 10             	mov    0x10(%eax),%eax
f010a822:	85 c0                	test   %eax,%eax
f010a824:	74 28                	je     f010a84e <program_segment_alloc_map_copy_workingset+0x387>
f010a826:	8b 45 08             	mov    0x8(%ebp),%eax
f010a829:	8b 90 c8 05 00 00    	mov    0x5c8(%eax),%edx
f010a82f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a832:	8b 58 78             	mov    0x78(%eax),%ebx
f010a835:	8b 45 08             	mov    0x8(%ebp),%eax
f010a838:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a83e:	89 c8                	mov    %ecx,%eax
f010a840:	01 c0                	add    %eax,%eax
f010a842:	01 c8                	add    %ecx,%eax
f010a844:	c1 e0 03             	shl    $0x3,%eax
f010a847:	01 d8                	add    %ebx,%eax
f010a849:	89 42 14             	mov    %eax,0x14(%edx)
f010a84c:	eb 24                	jmp    f010a872 <program_segment_alloc_map_copy_workingset+0x3ab>
f010a84e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a851:	8b 48 78             	mov    0x78(%eax),%ecx
f010a854:	8b 45 08             	mov    0x8(%ebp),%eax
f010a857:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a85d:	89 d0                	mov    %edx,%eax
f010a85f:	01 c0                	add    %eax,%eax
f010a861:	01 d0                	add    %edx,%eax
f010a863:	c1 e0 03             	shl    $0x3,%eax
f010a866:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a869:	8b 45 08             	mov    0x8(%ebp),%eax
f010a86c:	89 90 cc 05 00 00    	mov    %edx,0x5cc(%eax)
f010a872:	8b 45 08             	mov    0x8(%ebp),%eax
f010a875:	8b 48 78             	mov    0x78(%eax),%ecx
f010a878:	8b 45 08             	mov    0x8(%ebp),%eax
f010a87b:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a881:	89 d0                	mov    %edx,%eax
f010a883:	01 c0                	add    %eax,%eax
f010a885:	01 d0                	add    %edx,%eax
f010a887:	c1 e0 03             	shl    $0x3,%eax
f010a88a:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a88d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a890:	89 90 c8 05 00 00    	mov    %edx,0x5c8(%eax)
f010a896:	8b 45 08             	mov    0x8(%ebp),%eax
f010a899:	8b 48 78             	mov    0x78(%eax),%ecx
f010a89c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a89f:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a8a5:	89 d0                	mov    %edx,%eax
f010a8a7:	01 c0                	add    %eax,%eax
f010a8a9:	01 d0                	add    %edx,%eax
f010a8ab:	c1 e0 03             	shl    $0x3,%eax
f010a8ae:	01 c8                	add    %ecx,%eax
f010a8b0:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a8b7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8ba:	8b 80 d4 05 00 00    	mov    0x5d4(%eax),%eax
f010a8c0:	8d 50 01             	lea    0x1(%eax),%edx
f010a8c3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8c6:	89 90 d4 05 00 00    	mov    %edx,0x5d4(%eax)
f010a8cc:	e9 08 01 00 00       	jmp    f010a9d9 <program_segment_alloc_map_copy_workingset+0x512>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a8d1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8d4:	8b 48 78             	mov    0x78(%eax),%ecx
f010a8d7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8da:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a8e0:	89 d0                	mov    %edx,%eax
f010a8e2:	01 c0                	add    %eax,%eax
f010a8e4:	01 d0                	add    %edx,%eax
f010a8e6:	c1 e0 03             	shl    $0x3,%eax
f010a8e9:	01 c8                	add    %ecx,%eax
f010a8eb:	85 c0                	test   %eax,%eax
f010a8ed:	75 17                	jne    f010a906 <program_segment_alloc_map_copy_workingset+0x43f>
f010a8ef:	83 ec 04             	sub    $0x4,%esp
f010a8f2:	68 3c 6d 13 f0       	push   $0xf0136d3c
f010a8f7:	68 8e 02 00 00       	push   $0x28e
f010a8fc:	68 01 6d 13 f0       	push   $0xf0136d01
f010a901:	e8 ff 58 ff ff       	call   f0100205 <_panic>
f010a906:	8b 45 08             	mov    0x8(%ebp),%eax
f010a909:	8b 48 78             	mov    0x78(%eax),%ecx
f010a90c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a90f:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a915:	89 d0                	mov    %edx,%eax
f010a917:	01 c0                	add    %eax,%eax
f010a919:	01 d0                	add    %edx,%eax
f010a91b:	c1 e0 03             	shl    $0x3,%eax
f010a91e:	01 c8                	add    %ecx,%eax
f010a920:	8b 55 08             	mov    0x8(%ebp),%edx
f010a923:	8b 92 d8 05 00 00    	mov    0x5d8(%edx),%edx
f010a929:	89 50 10             	mov    %edx,0x10(%eax)
f010a92c:	8b 40 10             	mov    0x10(%eax),%eax
f010a92f:	85 c0                	test   %eax,%eax
f010a931:	74 28                	je     f010a95b <program_segment_alloc_map_copy_workingset+0x494>
f010a933:	8b 45 08             	mov    0x8(%ebp),%eax
f010a936:	8b 90 d8 05 00 00    	mov    0x5d8(%eax),%edx
f010a93c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a93f:	8b 58 78             	mov    0x78(%eax),%ebx
f010a942:	8b 45 08             	mov    0x8(%ebp),%eax
f010a945:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a94b:	89 c8                	mov    %ecx,%eax
f010a94d:	01 c0                	add    %eax,%eax
f010a94f:	01 c8                	add    %ecx,%eax
f010a951:	c1 e0 03             	shl    $0x3,%eax
f010a954:	01 d8                	add    %ebx,%eax
f010a956:	89 42 14             	mov    %eax,0x14(%edx)
f010a959:	eb 24                	jmp    f010a97f <program_segment_alloc_map_copy_workingset+0x4b8>
f010a95b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a95e:	8b 48 78             	mov    0x78(%eax),%ecx
f010a961:	8b 45 08             	mov    0x8(%ebp),%eax
f010a964:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a96a:	89 d0                	mov    %edx,%eax
f010a96c:	01 c0                	add    %eax,%eax
f010a96e:	01 d0                	add    %edx,%eax
f010a970:	c1 e0 03             	shl    $0x3,%eax
f010a973:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a976:	8b 45 08             	mov    0x8(%ebp),%eax
f010a979:	89 90 dc 05 00 00    	mov    %edx,0x5dc(%eax)
f010a97f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a982:	8b 48 78             	mov    0x78(%eax),%ecx
f010a985:	8b 45 08             	mov    0x8(%ebp),%eax
f010a988:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a98e:	89 d0                	mov    %edx,%eax
f010a990:	01 c0                	add    %eax,%eax
f010a992:	01 d0                	add    %edx,%eax
f010a994:	c1 e0 03             	shl    $0x3,%eax
f010a997:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a99a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a99d:	89 90 d8 05 00 00    	mov    %edx,0x5d8(%eax)
f010a9a3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9a6:	8b 48 78             	mov    0x78(%eax),%ecx
f010a9a9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9ac:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a9b2:	89 d0                	mov    %edx,%eax
f010a9b4:	01 c0                	add    %eax,%eax
f010a9b6:	01 d0                	add    %edx,%eax
f010a9b8:	c1 e0 03             	shl    $0x3,%eax
f010a9bb:	01 c8                	add    %ecx,%eax
f010a9bd:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a9c4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9c7:	8b 80 e4 05 00 00    	mov    0x5e4(%eax),%eax
f010a9cd:	8d 50 01             	lea    0x1(%eax),%edx
f010a9d0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9d3:	89 90 e4 05 00 00    	mov    %edx,0x5e4(%eax)
			}
		}
		//=======================
		e->page_last_WS_index ++;
f010a9d9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9dc:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010a9e2:	8d 50 01             	lea    0x1(%eax),%edx
f010a9e5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9e8:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f010a9ee:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9f1:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010a9f7:	8b 55 08             	mov    0x8(%ebp),%edx
f010a9fa:	8b 4a 74             	mov    0x74(%edx),%ecx
f010a9fd:	ba 00 00 00 00       	mov    $0x0,%edx
f010aa02:	f7 f1                	div    %ecx
f010aa04:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa07:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)

		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f010aa0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aa10:	c1 e8 16             	shr    $0x16,%eax
f010aa13:	89 c2                	mov    %eax,%edx
f010aa15:	8b 45 18             	mov    0x18(%ebp),%eax
f010aa18:	8b 00                	mov    (%eax),%eax
f010aa1a:	39 c2                	cmp    %eax,%edx
f010aa1c:	0f 84 cf 00 00 00    	je     f010aaf1 <program_segment_alloc_map_copy_workingset+0x62a>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f010aa22:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa25:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010aa2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aa2e:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010aa31:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010aa34:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010aa39:	89 c1                	mov    %eax,%ecx
f010aa3b:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010aa3e:	89 d0                	mov    %edx,%eax
f010aa40:	01 c0                	add    %eax,%eax
f010aa42:	01 d0                	add    %edx,%eax
f010aa44:	c1 e0 03             	shl    $0x3,%eax
f010aa47:	01 d8                	add    %ebx,%eax
f010aa49:	83 c0 7c             	add    $0x7c,%eax
f010aa4c:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f010aa4e:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa51:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010aa57:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010aa5a:	89 d0                	mov    %edx,%eax
f010aa5c:	01 c0                	add    %eax,%eax
f010aa5e:	01 d0                	add    %edx,%eax
f010aa60:	c1 e0 03             	shl    $0x3,%eax
f010aa63:	01 c8                	add    %ecx,%eax
f010aa65:	83 e8 80             	sub    $0xffffff80,%eax
f010aa68:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f010aa6b:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa6e:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010aa74:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010aa77:	89 d0                	mov    %edx,%eax
f010aa79:	01 c0                	add    %eax,%eax
f010aa7b:	01 d0                	add    %edx,%eax
f010aa7d:	c1 e0 03             	shl    $0x3,%eax
f010aa80:	01 c8                	add    %ecx,%eax
f010aa82:	05 84 00 00 00       	add    $0x84,%eax
f010aa87:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f010aa8d:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa90:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010aa96:	8d 50 01             	lea    0x1(%eax),%edx
f010aa99:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa9c:	89 90 30 05 00 00    	mov    %edx,0x530(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f010aaa2:	8b 45 08             	mov    0x8(%ebp),%eax
f010aaa5:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010aaab:	b9 32 00 00 00       	mov    $0x32,%ecx
f010aab0:	ba 00 00 00 00       	mov    $0x0,%edx
f010aab5:	f7 f1                	div    %ecx
f010aab7:	8b 45 08             	mov    0x8(%ebp),%eax
f010aaba:	89 90 30 05 00 00    	mov    %edx,0x530(%eax)
			if (e->table_last_WS_index == 0)
f010aac0:	8b 45 08             	mov    0x8(%ebp),%eax
f010aac3:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010aac9:	85 c0                	test   %eax,%eax
f010aacb:	75 17                	jne    f010aae4 <program_segment_alloc_map_copy_workingset+0x61d>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f010aacd:	83 ec 04             	sub    $0x4,%esp
f010aad0:	68 b4 6d 13 f0       	push   $0xf0136db4
f010aad5:	68 9e 02 00 00       	push   $0x29e
f010aada:	68 01 6d 13 f0       	push   $0xf0136d01
f010aadf:	e8 21 57 ff ff       	call   f0100205 <_panic>
			(*lastTableNumber) = PDX(iVA);
f010aae4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aae7:	c1 e8 16             	shr    $0x16,%eax
f010aaea:	89 c2                	mov    %eax,%edx
f010aaec:	8b 45 18             	mov    0x18(%ebp),%eax
f010aaef:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f010aaf1:	8b 45 10             	mov    0x10(%ebp),%eax
f010aaf4:	8b 00                	mov    (%eax),%eax
f010aaf6:	8d 50 01             	lea    0x1(%eax),%edx
f010aaf9:	8b 45 10             	mov    0x10(%ebp),%eax
f010aafc:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010aafe:	ff 45 f0             	incl   -0x10(%ebp)
f010ab01:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010ab08:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab0b:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010ab0e:	73 0c                	jae    f010ab1c <program_segment_alloc_map_copy_workingset+0x655>
f010ab10:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ab13:	3b 45 14             	cmp    0x14(%ebp),%eax
f010ab16:	0f 82 5a fa ff ff    	jb     f010a576 <program_segment_alloc_map_copy_workingset+0xaf>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f010ab1c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ab1f:	8b 00                	mov    (%eax),%eax
f010ab21:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f010ab24:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ab27:	8b 40 0c             	mov    0xc(%eax),%eax
f010ab2a:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010ab2d:	eb 10                	jmp    f010ab3f <program_segment_alloc_map_copy_workingset+0x678>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f010ab2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ab32:	8a 10                	mov    (%eax),%dl
f010ab34:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ab37:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f010ab39:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f010ab3c:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010ab3f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ab42:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010ab45:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ab48:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010ab4d:	89 c2                	mov    %eax,%edx
f010ab4f:	8b 45 10             	mov    0x10(%ebp),%eax
f010ab52:	8b 00                	mov    (%eax),%eax
f010ab54:	c1 e0 0c             	shl    $0xc,%eax
f010ab57:	01 c2                	add    %eax,%edx
f010ab59:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ab5c:	39 c2                	cmp    %eax,%edx
f010ab5e:	76 1d                	jbe    f010ab7d <program_segment_alloc_map_copy_workingset+0x6b6>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f010ab60:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ab63:	8b 50 04             	mov    0x4(%eax),%edx
f010ab66:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ab69:	01 c2                	add    %eax,%edx
f010ab6b:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010ab6e:	39 c2                	cmp    %eax,%edx
f010ab70:	77 bd                	ja     f010ab2f <program_segment_alloc_map_copy_workingset+0x668>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010ab72:	eb 09                	jmp    f010ab7d <program_segment_alloc_map_copy_workingset+0x6b6>
	{
		*dst_ptr = 0;
f010ab74:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ab77:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f010ab7a:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010ab7d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ab80:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010ab83:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ab86:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010ab8b:	89 c2                	mov    %eax,%edx
f010ab8d:	8b 45 10             	mov    0x10(%ebp),%eax
f010ab90:	8b 00                	mov    (%eax),%eax
f010ab92:	c1 e0 0c             	shl    $0xc,%eax
f010ab95:	01 c2                	add    %eax,%edx
f010ab97:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ab9a:	39 c2                	cmp    %eax,%edx
f010ab9c:	77 d6                	ja     f010ab74 <program_segment_alloc_map_copy_workingset+0x6ad>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f010ab9e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010aba3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010aba6:	c9                   	leave  
f010aba7:	c3                   	ret    

f010aba8 <initialize_environment>:
// and initialize the kernel portion of the new environment's address space.
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f010aba8:	55                   	push   %ebp
f010aba9:	89 e5                	mov    %esp,%ebp
f010abab:	53                   	push   %ebx
f010abac:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f010abaf:	8b 45 08             	mov    0x8(%ebp),%eax
f010abb2:	8b 55 0c             	mov    0xc(%ebp),%edx
f010abb5:	89 50 5c             	mov    %edx,0x5c(%eax)
	e->env_cr3 = phys_user_page_directory;
f010abb8:	8b 45 08             	mov    0x8(%ebp),%eax
f010abbb:	8b 55 10             	mov    0x10(%ebp),%edx
f010abbe:	89 50 60             	mov    %edx,0x60(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010abc1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010abc8:	eb 17                	jmp    f010abe1 <initialize_environment+0x39>
	{
		e->env_page_directory[i] = 0 ;
f010abca:	8b 45 08             	mov    0x8(%ebp),%eax
f010abcd:	8b 40 5c             	mov    0x5c(%eax),%eax
f010abd0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010abd3:	c1 e2 02             	shl    $0x2,%edx
f010abd6:	01 d0                	add    %edx,%eax
f010abd8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010abde:	ff 45 f4             	incl   -0xc(%ebp)
f010abe1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010abe4:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f010abe9:	76 df                	jbe    f010abca <initialize_environment+0x22>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010abeb:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f010abf2:	eb 22                	jmp    f010ac16 <initialize_environment+0x6e>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f010abf4:	8b 45 08             	mov    0x8(%ebp),%eax
f010abf7:	8b 40 5c             	mov    0x5c(%eax),%eax
f010abfa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010abfd:	c1 e2 02             	shl    $0x2,%edx
f010ac00:	01 c2                	add    %eax,%edx
f010ac02:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f010ac07:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010ac0a:	c1 e1 02             	shl    $0x2,%ecx
f010ac0d:	01 c8                	add    %ecx,%eax
f010ac0f:	8b 00                	mov    (%eax),%eax
f010ac11:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010ac13:	ff 45 f4             	incl   -0xc(%ebp)
f010ac16:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010ac1d:	7e d5                	jle    f010abf4 <initialize_environment+0x4c>
	}

	// Allocate the page working set for both kernel and user
#if USE_KHEAP == 1
	{
		e->ptr_pageWorkingSet = create_user_page_WS(e, e->page_WS_max_size);
f010ac1f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac22:	8b 40 74             	mov    0x74(%eax),%eax
f010ac25:	83 ec 08             	sub    $0x8,%esp
f010ac28:	50                   	push   %eax
f010ac29:	ff 75 08             	pushl  0x8(%ebp)
f010ac2c:	e8 13 f8 ff ff       	call   f010a444 <create_user_page_WS>
f010ac31:	83 c4 10             	add    $0x10,%esp
f010ac34:	89 c2                	mov    %eax,%edx
f010ac36:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac39:	89 50 78             	mov    %edx,0x78(%eax)
		share_pws_at_user_space(e);
f010ac3c:	83 ec 0c             	sub    $0xc,%esp
f010ac3f:	ff 75 08             	pushl  0x8(%ebp)
f010ac42:	e8 f3 04 00 00       	call   f010b13a <share_pws_at_user_space>
f010ac47:	83 c4 10             	add    $0x10,%esp
#endif


	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010ac4a:	83 ec 0c             	sub    $0xc,%esp
f010ac4d:	6a 02                	push   $0x2
f010ac4f:	e8 e9 36 00 00       	call   f010e33d <isPageReplacmentAlgorithmLRU>
f010ac54:	83 c4 10             	add    $0x10,%esp
f010ac57:	85 c0                	test   %eax,%eax
f010ac59:	0f 84 04 01 00 00    	je     f010ad63 <initialize_environment+0x1bb>
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010ac5f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010ac66:	e9 e7 00 00 00       	jmp    f010ad52 <initialize_environment+0x1aa>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f010ac6b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac6e:	8b 48 78             	mov    0x78(%eax),%ecx
f010ac71:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ac74:	89 d0                	mov    %edx,%eax
f010ac76:	01 c0                	add    %eax,%eax
f010ac78:	01 d0                	add    %edx,%eax
f010ac7a:	c1 e0 03             	shl    $0x3,%eax
f010ac7d:	01 c8                	add    %ecx,%eax
f010ac7f:	85 c0                	test   %eax,%eax
f010ac81:	75 17                	jne    f010ac9a <initialize_environment+0xf2>
f010ac83:	83 ec 04             	sub    $0x4,%esp
f010ac86:	68 3c 6d 13 f0       	push   $0xf0136d3c
f010ac8b:	68 fc 02 00 00       	push   $0x2fc
f010ac90:	68 01 6d 13 f0       	push   $0xf0136d01
f010ac95:	e8 6b 55 ff ff       	call   f0100205 <_panic>
f010ac9a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac9d:	8b 48 78             	mov    0x78(%eax),%ecx
f010aca0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010aca3:	89 d0                	mov    %edx,%eax
f010aca5:	01 c0                	add    %eax,%eax
f010aca7:	01 d0                	add    %edx,%eax
f010aca9:	c1 e0 03             	shl    $0x3,%eax
f010acac:	01 c8                	add    %ecx,%eax
f010acae:	8b 55 08             	mov    0x8(%ebp),%edx
f010acb1:	8b 92 b8 05 00 00    	mov    0x5b8(%edx),%edx
f010acb7:	89 50 10             	mov    %edx,0x10(%eax)
f010acba:	8b 40 10             	mov    0x10(%eax),%eax
f010acbd:	85 c0                	test   %eax,%eax
f010acbf:	74 22                	je     f010ace3 <initialize_environment+0x13b>
f010acc1:	8b 45 08             	mov    0x8(%ebp),%eax
f010acc4:	8b 90 b8 05 00 00    	mov    0x5b8(%eax),%edx
f010acca:	8b 45 08             	mov    0x8(%ebp),%eax
f010accd:	8b 58 78             	mov    0x78(%eax),%ebx
f010acd0:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010acd3:	89 c8                	mov    %ecx,%eax
f010acd5:	01 c0                	add    %eax,%eax
f010acd7:	01 c8                	add    %ecx,%eax
f010acd9:	c1 e0 03             	shl    $0x3,%eax
f010acdc:	01 d8                	add    %ebx,%eax
f010acde:	89 42 14             	mov    %eax,0x14(%edx)
f010ace1:	eb 1e                	jmp    f010ad01 <initialize_environment+0x159>
f010ace3:	8b 45 08             	mov    0x8(%ebp),%eax
f010ace6:	8b 48 78             	mov    0x78(%eax),%ecx
f010ace9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010acec:	89 d0                	mov    %edx,%eax
f010acee:	01 c0                	add    %eax,%eax
f010acf0:	01 d0                	add    %edx,%eax
f010acf2:	c1 e0 03             	shl    $0x3,%eax
f010acf5:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010acf8:	8b 45 08             	mov    0x8(%ebp),%eax
f010acfb:	89 90 bc 05 00 00    	mov    %edx,0x5bc(%eax)
f010ad01:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad04:	8b 48 78             	mov    0x78(%eax),%ecx
f010ad07:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ad0a:	89 d0                	mov    %edx,%eax
f010ad0c:	01 c0                	add    %eax,%eax
f010ad0e:	01 d0                	add    %edx,%eax
f010ad10:	c1 e0 03             	shl    $0x3,%eax
f010ad13:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010ad16:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad19:	89 90 b8 05 00 00    	mov    %edx,0x5b8(%eax)
f010ad1f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad22:	8b 48 78             	mov    0x78(%eax),%ecx
f010ad25:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ad28:	89 d0                	mov    %edx,%eax
f010ad2a:	01 c0                	add    %eax,%eax
f010ad2c:	01 d0                	add    %edx,%eax
f010ad2e:	c1 e0 03             	shl    $0x3,%eax
f010ad31:	01 c8                	add    %ecx,%eax
f010ad33:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010ad3a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad3d:	8b 80 c4 05 00 00    	mov    0x5c4(%eax),%eax
f010ad43:	8d 50 01             	lea    0x1(%eax),%edx
f010ad46:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad49:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)

	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010ad4f:	ff 45 f0             	incl   -0x10(%ebp)
f010ad52:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad55:	8b 50 74             	mov    0x74(%eax),%edx
f010ad58:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ad5b:	39 c2                	cmp    %eax,%edx
f010ad5d:	0f 87 08 ff ff ff    	ja     f010ac6b <initialize_environment+0xc3>
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010ad63:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010ad6a:	eb 50                	jmp    f010adbc <initialize_environment+0x214>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f010ad6c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad6f:	8b 48 78             	mov    0x78(%eax),%ecx
f010ad72:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ad75:	89 d0                	mov    %edx,%eax
f010ad77:	01 c0                	add    %eax,%eax
f010ad79:	01 d0                	add    %edx,%eax
f010ad7b:	c1 e0 03             	shl    $0x3,%eax
f010ad7e:	01 c8                	add    %ecx,%eax
f010ad80:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f010ad86:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad89:	8b 48 78             	mov    0x78(%eax),%ecx
f010ad8c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ad8f:	89 d0                	mov    %edx,%eax
f010ad91:	01 c0                	add    %eax,%eax
f010ad93:	01 d0                	add    %edx,%eax
f010ad95:	c1 e0 03             	shl    $0x3,%eax
f010ad98:	01 c8                	add    %ecx,%eax
f010ad9a:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f010ad9e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ada1:	8b 48 78             	mov    0x78(%eax),%ecx
f010ada4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ada7:	89 d0                	mov    %edx,%eax
f010ada9:	01 c0                	add    %eax,%eax
f010adab:	01 d0                	add    %edx,%eax
f010adad:	c1 e0 03             	shl    $0x3,%eax
f010adb0:	01 c8                	add    %ecx,%eax
f010adb2:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010adb9:	ff 45 f4             	incl   -0xc(%ebp)
f010adbc:	8b 45 08             	mov    0x8(%ebp),%eax
f010adbf:	8b 50 74             	mov    0x74(%eax),%edx
f010adc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010adc5:	39 c2                	cmp    %eax,%edx
f010adc7:	77 a3                	ja     f010ad6c <initialize_environment+0x1c4>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f010adc9:	8b 45 08             	mov    0x8(%ebp),%eax
f010adcc:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010add3:	00 00 00 

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010add6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010addd:	eb 50                	jmp    f010ae2f <initialize_environment+0x287>
	{
		e->__ptr_tws[i].virtual_address = 0;
f010addf:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ade2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ade5:	89 d0                	mov    %edx,%eax
f010ade7:	01 c0                	add    %eax,%eax
f010ade9:	01 d0                	add    %edx,%eax
f010adeb:	c1 e0 03             	shl    $0x3,%eax
f010adee:	01 c8                	add    %ecx,%eax
f010adf0:	83 c0 7c             	add    $0x7c,%eax
f010adf3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f010adf9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010adfc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010adff:	89 d0                	mov    %edx,%eax
f010ae01:	01 c0                	add    %eax,%eax
f010ae03:	01 d0                	add    %edx,%eax
f010ae05:	c1 e0 03             	shl    $0x3,%eax
f010ae08:	01 c8                	add    %ecx,%eax
f010ae0a:	83 e8 80             	sub    $0xffffff80,%eax
f010ae0d:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f010ae10:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ae13:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ae16:	89 d0                	mov    %edx,%eax
f010ae18:	01 c0                	add    %eax,%eax
f010ae1a:	01 d0                	add    %edx,%eax
f010ae1c:	c1 e0 03             	shl    $0x3,%eax
f010ae1f:	01 c8                	add    %ecx,%eax
f010ae21:	05 84 00 00 00       	add    $0x84,%eax
f010ae26:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010ae2c:	ff 45 f4             	incl   -0xc(%ebp)
f010ae2f:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010ae33:	7e aa                	jle    f010addf <initialize_environment+0x237>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f010ae35:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae38:	c7 80 30 05 00 00 00 	movl   $0x0,0x530(%eax)
f010ae3f:	00 00 00 

	e->pageFaultsCounter=0;
f010ae42:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae45:	c7 80 34 05 00 00 00 	movl   $0x0,0x534(%eax)
f010ae4c:	00 00 00 
	e->tableFaultsCounter=0;
f010ae4f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae52:	c7 80 38 05 00 00 00 	movl   $0x0,0x538(%eax)
f010ae59:	00 00 00 

	e->freeingFullWSCounter = 0;
f010ae5c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae5f:	c7 80 3c 05 00 00 00 	movl   $0x0,0x53c(%eax)
f010ae66:	00 00 00 
	e->freeingScarceMemCounter = 0;
f010ae69:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae6c:	c7 80 40 05 00 00 00 	movl   $0x0,0x540(%eax)
f010ae73:	00 00 00 

	e->nModifiedPages=0;
f010ae76:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae79:	c7 80 44 05 00 00 00 	movl   $0x0,0x544(%eax)
f010ae80:	00 00 00 
	e->nNotModifiedPages=0;
f010ae83:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae86:	c7 80 48 05 00 00 00 	movl   $0x0,0x548(%eax)
f010ae8d:	00 00 00 
	e->nClocks = 0;
f010ae90:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae93:	c7 80 a4 05 00 00 00 	movl   $0x0,0x5a4(%eax)
f010ae9a:	00 00 00 

	//2020
	e->nPageIn = 0;
f010ae9d:	8b 45 08             	mov    0x8(%ebp),%eax
f010aea0:	c7 80 4c 05 00 00 00 	movl   $0x0,0x54c(%eax)
f010aea7:	00 00 00 
	e->nPageOut = 0;
f010aeaa:	8b 45 08             	mov    0x8(%ebp),%eax
f010aead:	c7 80 50 05 00 00 00 	movl   $0x0,0x550(%eax)
f010aeb4:	00 00 00 
	e->nNewPageAdded = 0;
f010aeb7:	8b 45 08             	mov    0x8(%ebp),%eax
f010aeba:	c7 80 54 05 00 00 00 	movl   $0x0,0x554(%eax)
f010aec1:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f010aec4:	83 ec 0c             	sub    $0xc,%esp
f010aec7:	ff 75 08             	pushl  0x8(%ebp)
f010aeca:	e8 09 00 00 00       	call   f010aed8 <complete_environment_initialization>
f010aecf:	83 c4 10             	add    $0x10,%esp
}
f010aed2:	90                   	nop
f010aed3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010aed6:	c9                   	leave  
f010aed7:	c3                   	ret    

f010aed8 <complete_environment_initialization>:

//========================================================
// 8) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f010aed8:	55                   	push   %ebp
f010aed9:	89 e5                	mov    %esp,%ebp
f010aedb:	53                   	push   %ebx
f010aedc:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f010aedf:	8b 45 08             	mov    0x8(%ebp),%eax
f010aee2:	8b 40 5c             	mov    0x5c(%eax),%eax
f010aee5:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f010aeeb:	8b 45 08             	mov    0x8(%ebp),%eax
f010aeee:	8b 40 60             	mov    0x60(%eax),%eax
f010aef1:	83 c8 03             	or     $0x3,%eax
f010aef4:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f010aef6:	8b 45 08             	mov    0x8(%ebp),%eax
f010aef9:	8b 40 5c             	mov    0x5c(%eax),%eax
f010aefc:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010af02:	8b 45 08             	mov    0x8(%ebp),%eax
f010af05:	8b 40 60             	mov    0x60(%eax),%eax
f010af08:	83 c8 05             	or     $0x5,%eax
f010af0b:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f010af0d:	8b 45 08             	mov    0x8(%ebp),%eax
f010af10:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	e->disk_env_pgdir_PA= 0;
f010af17:	8b 45 08             	mov    0x8(%ebp),%eax
f010af1a:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
	e->disk_env_tabledir = 0;
f010af21:	8b 45 08             	mov    0x8(%ebp),%eax
f010af24:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	e->disk_env_tabledir_PA = 0;
f010af2b:	8b 45 08             	mov    0x8(%ebp),%eax
f010af2e:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f010af35:	8b 45 08             	mov    0x8(%ebp),%eax
f010af38:	8b 58 4c             	mov    0x4c(%eax),%ebx
f010af3b:	83 ec 0c             	sub    $0xc,%esp
f010af3e:	68 b1 02 00 00       	push   $0x2b1
f010af43:	e8 42 57 02 00       	call   f013068a <log2_ceil>
f010af48:	83 c4 10             	add    $0x10,%esp
f010af4b:	ba 01 00 00 00       	mov    $0x1,%edx
f010af50:	88 c1                	mov    %al,%cl
f010af52:	d3 e2                	shl    %cl,%edx
f010af54:	89 d0                	mov    %edx,%eax
f010af56:	01 d8                	add    %ebx,%eax
f010af58:	89 c3                	mov    %eax,%ebx
f010af5a:	83 ec 0c             	sub    $0xc,%esp
f010af5d:	68 b1 02 00 00       	push   $0x2b1
f010af62:	e8 ee 56 02 00       	call   f0130655 <nearest_pow2_ceil>
f010af67:	83 c4 10             	add    $0x10,%esp
f010af6a:	f7 d8                	neg    %eax
f010af6c:	21 d8                	and    %ebx,%eax
f010af6e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f010af71:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010af75:	7f 1e                	jg     f010af95 <complete_environment_initialization+0xbd>
		generation = 1 << ENVGENSHIFT;
f010af77:	83 ec 0c             	sub    $0xc,%esp
f010af7a:	68 b1 02 00 00       	push   $0x2b1
f010af7f:	e8 06 57 02 00       	call   f013068a <log2_ceil>
f010af84:	83 c4 10             	add    $0x10,%esp
f010af87:	ba 01 00 00 00       	mov    $0x1,%edx
f010af8c:	88 c1                	mov    %al,%cl
f010af8e:	d3 e2                	shl    %cl,%edx
f010af90:	89 d0                	mov    %edx,%eax
f010af92:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f010af95:	8b 45 08             	mov    0x8(%ebp),%eax
f010af98:	8b 15 f0 a3 89 f0    	mov    0xf089a3f0,%edx
f010af9e:	29 d0                	sub    %edx,%eax
f010afa0:	c1 f8 04             	sar    $0x4,%eax
f010afa3:	89 c2                	mov    %eax,%edx
f010afa5:	89 d0                	mov    %edx,%eax
f010afa7:	c1 e0 03             	shl    $0x3,%eax
f010afaa:	01 d0                	add    %edx,%eax
f010afac:	01 c0                	add    %eax,%eax
f010afae:	01 d0                	add    %edx,%eax
f010afb0:	c1 e0 03             	shl    $0x3,%eax
f010afb3:	01 d0                	add    %edx,%eax
f010afb5:	89 c1                	mov    %eax,%ecx
f010afb7:	c1 e1 08             	shl    $0x8,%ecx
f010afba:	01 c8                	add    %ecx,%eax
f010afbc:	01 c0                	add    %eax,%eax
f010afbe:	01 d0                	add    %edx,%eax
f010afc0:	01 c0                	add    %eax,%eax
f010afc2:	01 d0                	add    %edx,%eax
f010afc4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010afcb:	01 d0                	add    %edx,%eax
f010afcd:	89 c2                	mov    %eax,%edx
f010afcf:	c1 e2 09             	shl    $0x9,%edx
f010afd2:	29 c2                	sub    %eax,%edx
f010afd4:	89 d0                	mov    %edx,%eax
f010afd6:	f7 d8                	neg    %eax
f010afd8:	0b 45 f4             	or     -0xc(%ebp),%eax
f010afdb:	89 c2                	mov    %eax,%edx
f010afdd:	8b 45 08             	mov    0x8(%ebp),%eax
f010afe0:	89 50 4c             	mov    %edx,0x4c(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f010afe3:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010afe8:	85 c0                	test   %eax,%eax
f010afea:	75 0c                	jne    f010aff8 <complete_environment_initialization+0x120>
		e->env_parent_id = 0;//no parent;
f010afec:	8b 45 08             	mov    0x8(%ebp),%eax
f010afef:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f010aff6:	eb 0e                	jmp    f010b006 <complete_environment_initialization+0x12e>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f010aff8:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010affd:	8b 50 4c             	mov    0x4c(%eax),%edx
f010b000:	8b 45 08             	mov    0x8(%ebp),%eax
f010b003:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f010b006:	8b 45 08             	mov    0x8(%ebp),%eax
f010b009:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f010b010:	8b 45 08             	mov    0x8(%ebp),%eax
f010b013:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f010b01a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b01d:	83 ec 04             	sub    $0x4,%esp
f010b020:	6a 44                	push   $0x44
f010b022:	6a 00                	push   $0x0
f010b024:	50                   	push   %eax
f010b025:	e8 a7 6a 02 00       	call   f0131ad1 <memset>
f010b02a:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f010b02d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b030:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f010b036:	8b 45 08             	mov    0x8(%ebp),%eax
f010b039:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f010b03f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b042:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f010b048:	8b 45 08             	mov    0x8(%ebp),%eax
f010b04b:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f010b052:	8b 45 08             	mov    0x8(%ebp),%eax
f010b055:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f010b05b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b05e:	8b 40 38             	mov    0x38(%eax),%eax
f010b061:	80 cc 02             	or     $0x2,%ah
f010b064:	89 c2                	mov    %eax,%edx
f010b066:	8b 45 08             	mov    0x8(%ebp),%eax
f010b069:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f010b06c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010b070:	75 17                	jne    f010b089 <complete_environment_initialization+0x1b1>
f010b072:	83 ec 04             	sub    $0x4,%esp
f010b075:	68 1e 6d 13 f0       	push   $0xf0136d1e
f010b07a:	68 60 03 00 00       	push   $0x360
f010b07f:	68 01 6d 13 f0       	push   $0xf0136d01
f010b084:	e8 7c 51 ff ff       	call   f0100205 <_panic>
f010b089:	8b 45 08             	mov    0x8(%ebp),%eax
f010b08c:	8b 40 44             	mov    0x44(%eax),%eax
f010b08f:	85 c0                	test   %eax,%eax
f010b091:	74 11                	je     f010b0a4 <complete_environment_initialization+0x1cc>
f010b093:	8b 45 08             	mov    0x8(%ebp),%eax
f010b096:	8b 40 44             	mov    0x44(%eax),%eax
f010b099:	8b 55 08             	mov    0x8(%ebp),%edx
f010b09c:	8b 52 48             	mov    0x48(%edx),%edx
f010b09f:	89 50 48             	mov    %edx,0x48(%eax)
f010b0a2:	eb 0b                	jmp    f010b0af <complete_environment_initialization+0x1d7>
f010b0a4:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0a7:	8b 40 48             	mov    0x48(%eax),%eax
f010b0aa:	a3 fc a3 89 f0       	mov    %eax,0xf089a3fc
f010b0af:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0b2:	8b 40 48             	mov    0x48(%eax),%eax
f010b0b5:	85 c0                	test   %eax,%eax
f010b0b7:	74 11                	je     f010b0ca <complete_environment_initialization+0x1f2>
f010b0b9:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0bc:	8b 40 48             	mov    0x48(%eax),%eax
f010b0bf:	8b 55 08             	mov    0x8(%ebp),%edx
f010b0c2:	8b 52 44             	mov    0x44(%edx),%edx
f010b0c5:	89 50 44             	mov    %edx,0x44(%eax)
f010b0c8:	eb 0b                	jmp    f010b0d5 <complete_environment_initialization+0x1fd>
f010b0ca:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0cd:	8b 40 44             	mov    0x44(%eax),%eax
f010b0d0:	a3 f8 a3 89 f0       	mov    %eax,0xf089a3f8
f010b0d5:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0d8:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010b0df:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0e2:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010b0e9:	a1 04 a4 89 f0       	mov    0xf089a404,%eax
f010b0ee:	48                   	dec    %eax
f010b0ef:	a3 04 a4 89 f0       	mov    %eax,0xf089a404
	return ;
f010b0f4:	90                   	nop
}
f010b0f5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010b0f8:	c9                   	leave  
f010b0f9:	c3                   	ret    

f010b0fa <set_environment_entry_point>:

//===============================================
// 9) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f010b0fa:	55                   	push   %ebp
f010b0fb:	89 e5                	mov    %esp,%ebp
f010b0fd:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010b100:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b103:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010b106:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b109:	8b 00                	mov    (%eax),%eax
f010b10b:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010b110:	74 17                	je     f010b129 <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f010b112:	83 ec 04             	sub    $0x4,%esp
f010b115:	68 57 6e 13 f0       	push   $0xf0136e57
f010b11a:	68 6c 03 00 00       	push   $0x36c
f010b11f:	68 01 6d 13 f0       	push   $0xf0136d01
f010b124:	e8 dc 50 ff ff       	call   f0100205 <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f010b129:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b12c:	8b 40 18             	mov    0x18(%eax),%eax
f010b12f:	89 c2                	mov    %eax,%edx
f010b131:	8b 45 08             	mov    0x8(%ebp),%eax
f010b134:	89 50 30             	mov    %edx,0x30(%eax)
}
f010b137:	90                   	nop
f010b138:	c9                   	leave  
f010b139:	c3                   	ret    

f010b13a <share_pws_at_user_space>:

//===============================================
// 10) SHARE WS AT USER SPACE (READ ONLY):
//===============================================
void share_pws_at_user_space(struct Env* e)
{
f010b13a:	55                   	push   %ebp
f010b13b:	89 e5                	mov    %esp,%ebp
f010b13d:	83 ec 28             	sub    $0x28,%esp
#if USE_KHEAP
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
f010b140:	8b 45 08             	mov    0x8(%ebp),%eax
f010b143:	c7 80 9c 05 00 00 00 	movl   $0xa0000000,0x59c(%eax)
f010b14a:	00 00 a0 
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
f010b14d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b150:	8b 40 78             	mov    0x78(%eax),%eax
f010b153:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010b156:	8b 45 08             	mov    0x8(%ebp),%eax
f010b159:	8b 50 74             	mov    0x74(%eax),%edx
f010b15c:	89 d0                	mov    %edx,%eax
f010b15e:	01 c0                	add    %eax,%eax
f010b160:	01 d0                	add    %edx,%eax
f010b162:	c1 e0 03             	shl    $0x3,%eax
f010b165:	89 45 ec             	mov    %eax,-0x14(%ebp)
	unsigned int dva = (unsigned int) (e->__uptr_pws);
f010b168:	8b 45 08             	mov    0x8(%ebp),%eax
f010b16b:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010b171:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010b174:	8b 45 08             	mov    0x8(%ebp),%eax
f010b177:	8b 40 78             	mov    0x78(%eax),%eax
f010b17a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b17d:	eb 71                	jmp    f010b1f0 <share_pws_at_user_space+0xb6>
	{
		//2017: Copy the table entries instead of mapping (to avoid increasing the number of references of corresponding frames)
		//unsigned int pa = kheap_physical_address(sva);
		//map_frame(e->env_page_directory, to_frame_info(pa), dva, PERM_USER);
		uint32 pa = kheap_physical_address(sva);
f010b17f:	83 ec 0c             	sub    $0xc,%esp
f010b182:	ff 75 f4             	pushl  -0xc(%ebp)
f010b185:	e8 1f ce ff ff       	call   f0107fa9 <kheap_physical_address>
f010b18a:	83 c4 10             	add    $0x10,%esp
f010b18d:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32* ptr_page_table;
		if (get_page_table(e->env_page_directory,  dva, &ptr_page_table) == TABLE_NOT_EXIST)
f010b190:	8b 45 08             	mov    0x8(%ebp),%eax
f010b193:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b196:	83 ec 04             	sub    $0x4,%esp
f010b199:	8d 55 e4             	lea    -0x1c(%ebp),%edx
f010b19c:	52                   	push   %edx
f010b19d:	ff 75 f0             	pushl  -0x10(%ebp)
f010b1a0:	50                   	push   %eax
f010b1a1:	e8 0b b9 ff ff       	call   f0106ab1 <get_page_table>
f010b1a6:	83 c4 10             	add    $0x10,%esp
f010b1a9:	83 f8 01             	cmp    $0x1,%eax
f010b1ac:	75 18                	jne    f010b1c6 <share_pws_at_user_space+0x8c>
		{
			ptr_page_table = create_page_table(e->env_page_directory, (uint32) dva);
f010b1ae:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1b1:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b1b4:	83 ec 08             	sub    $0x8,%esp
f010b1b7:	ff 75 f0             	pushl  -0x10(%ebp)
f010b1ba:	50                   	push   %eax
f010b1bb:	e8 47 ba ff ff       	call   f0106c07 <create_page_table>
f010b1c0:	83 c4 10             	add    $0x10,%esp
f010b1c3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
f010b1c6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b1c9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b1cc:	c1 ea 0c             	shr    $0xc,%edx
f010b1cf:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010b1d5:	c1 e2 02             	shl    $0x2,%edx
f010b1d8:	01 d0                	add    %edx,%eax
f010b1da:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010b1dd:	83 ca 05             	or     $0x5,%edx
f010b1e0:	89 10                	mov    %edx,(%eax)
#if USE_KHEAP
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
	unsigned int dva = (unsigned int) (e->__uptr_pws);
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010b1e2:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010b1e9:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f010b1f0:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1f3:	8b 40 78             	mov    0x78(%eax),%eax
f010b1f6:	89 c2                	mov    %eax,%edx
f010b1f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b1fb:	01 d0                	add    %edx,%eax
f010b1fd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010b200:	0f 87 79 ff ff ff    	ja     f010b17f <share_pws_at_user_space+0x45>
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
	}
#else
	panic("share_pws_at_user_space(): should not be called when kernel heap is disabled.");
#endif
}
f010b206:	90                   	nop
f010b207:	c9                   	leave  
f010b208:	c3                   	ret    

f010b209 <unshare_pws_at_user_space>:

//===============================================
// 11) REMOVE THE SHARED WS FROM USER SPACE:
//===============================================
void unshare_pws_at_user_space(struct Env *e)
{
f010b209:	55                   	push   %ebp
f010b20a:	89 e5                	mov    %esp,%ebp
f010b20c:	83 ec 28             	sub    $0x28,%esp
#if USE_KHEAP
	{
		uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010b20f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b212:	8b 50 74             	mov    0x74(%eax),%edx
f010b215:	89 d0                	mov    %edx,%eax
f010b217:	01 c0                	add    %eax,%eax
f010b219:	01 d0                	add    %edx,%eax
f010b21b:	c1 e0 03             	shl    $0x3,%eax
f010b21e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		unsigned int sva = (unsigned int) e->__uptr_pws;
f010b221:	8b 45 08             	mov    0x8(%ebp),%eax
f010b224:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010b22a:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, sva);
		}
		*/
		unsigned int tsva = ROUNDDOWN((unsigned int) e->__uptr_pws, PTSIZE);
f010b22d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b230:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010b236:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010b239:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b23c:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010b241:	89 45 f4             	mov    %eax,-0xc(%ebp)
		for(; tsva < ((unsigned int) (e->__uptr_pws) + nBytes) ; tsva+=PTSIZE)
f010b244:	eb 46                	jmp    f010b28c <unshare_pws_at_user_space+0x83>
		{
			unsigned int * uws_table;
			get_page_table(e->env_page_directory, tsva, &uws_table );
f010b246:	8b 45 08             	mov    0x8(%ebp),%eax
f010b249:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b24c:	83 ec 04             	sub    $0x4,%esp
f010b24f:	8d 55 e0             	lea    -0x20(%ebp),%edx
f010b252:	52                   	push   %edx
f010b253:	ff 75 f4             	pushl  -0xc(%ebp)
f010b256:	50                   	push   %eax
f010b257:	e8 55 b8 ff ff       	call   f0106ab1 <get_page_table>
f010b25c:	83 c4 10             	add    $0x10,%esp
			kfree(uws_table);
f010b25f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b262:	83 ec 0c             	sub    $0xc,%esp
f010b265:	50                   	push   %eax
f010b266:	e8 eb cb ff ff       	call   f0107e56 <kfree>
f010b26b:	83 c4 10             	add    $0x10,%esp
			e->env_page_directory[PDX(tsva)] = 0;
f010b26e:	8b 45 08             	mov    0x8(%ebp),%eax
f010b271:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b274:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b277:	c1 ea 16             	shr    $0x16,%edx
f010b27a:	c1 e2 02             	shl    $0x2,%edx
f010b27d:	01 d0                	add    %edx,%eax
f010b27f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, sva);
		}
		*/
		unsigned int tsva = ROUNDDOWN((unsigned int) e->__uptr_pws, PTSIZE);
		for(; tsva < ((unsigned int) (e->__uptr_pws) + nBytes) ; tsva+=PTSIZE)
f010b285:	81 45 f4 00 00 40 00 	addl   $0x400000,-0xc(%ebp)
f010b28c:	8b 45 08             	mov    0x8(%ebp),%eax
f010b28f:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010b295:	89 c2                	mov    %eax,%edx
f010b297:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b29a:	01 d0                	add    %edx,%eax
f010b29c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010b29f:	77 a5                	ja     f010b246 <unshare_pws_at_user_space+0x3d>

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010b2a1:	0f 20 d8             	mov    %cr3,%eax
f010b2a4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010b2a7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b2aa:	0f 22 d8             	mov    %eax,%cr3
		tlbflush();
	}
#else
	panic("__remove_pws_user_pages(): should not be called when kernel heap is disabled.");
#endif
}
f010b2ad:	90                   	nop
f010b2ae:	c9                   	leave  
f010b2af:	c3                   	ret    

f010b2b0 <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 12) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f010b2b0:	55                   	push   %ebp
f010b2b1:	89 e5                	mov    %esp,%ebp
f010b2b3:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f010b2b6:	8b 45 08             	mov    0x8(%ebp),%eax
f010b2b9:	8b 40 10             	mov    0x10(%eax),%eax
f010b2bc:	8d 48 01             	lea    0x1(%eax),%ecx
f010b2bf:	8b 55 08             	mov    0x8(%ebp),%edx
f010b2c2:	89 4a 10             	mov    %ecx,0x10(%edx)
f010b2c5:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010b2c8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b2cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010b2ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b2d1:	8b 00                	mov    (%eax),%eax
f010b2d3:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010b2d8:	74 17                	je     f010b2f1 <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f010b2da:	83 ec 04             	sub    $0x4,%esp
f010b2dd:	68 57 6e 13 f0       	push   $0xf0136e57
f010b2e2:	68 b6 03 00 00       	push   $0x3b6
f010b2e7:	68 01 6d 13 f0       	push   $0xf0136d01
f010b2ec:	e8 14 4f ff ff       	call   f0100205 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010b2f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b2f4:	8b 50 1c             	mov    0x1c(%eax),%edx
f010b2f7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b2fa:	01 d0                	add    %edx,%eax
f010b2fc:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f010b2ff:	eb 0f                	jmp    f010b310 <PROGRAM_SEGMENT_NEXT+0x60>
f010b301:	8b 45 08             	mov    0x8(%ebp),%eax
f010b304:	8b 40 10             	mov    0x10(%eax),%eax
f010b307:	8d 50 01             	lea    0x1(%eax),%edx
f010b30a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b30d:	89 50 10             	mov    %edx,0x10(%eax)
f010b310:	8b 45 08             	mov    0x8(%ebp),%eax
f010b313:	8b 40 10             	mov    0x10(%eax),%eax
f010b316:	c1 e0 05             	shl    $0x5,%eax
f010b319:	89 c2                	mov    %eax,%edx
f010b31b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b31e:	01 d0                	add    %edx,%eax
f010b320:	8b 00                	mov    (%eax),%eax
f010b322:	83 f8 01             	cmp    $0x1,%eax
f010b325:	74 13                	je     f010b33a <PROGRAM_SEGMENT_NEXT+0x8a>
f010b327:	8b 45 08             	mov    0x8(%ebp),%eax
f010b32a:	8b 50 10             	mov    0x10(%eax),%edx
f010b32d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b330:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b333:	0f b7 c0             	movzwl %ax,%eax
f010b336:	39 c2                	cmp    %eax,%edx
f010b338:	72 c7                	jb     f010b301 <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010b33a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b33d:	8b 40 10             	mov    0x10(%eax),%eax
f010b340:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f010b343:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b346:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b349:	0f b7 c0             	movzwl %ax,%eax
f010b34c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010b34f:	7e 63                	jle    f010b3b4 <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010b351:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b354:	c1 e0 05             	shl    $0x5,%eax
f010b357:	89 c2                	mov    %eax,%edx
f010b359:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b35c:	01 d0                	add    %edx,%eax
f010b35e:	8b 50 04             	mov    0x4(%eax),%edx
f010b361:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b364:	01 c2                	add    %eax,%edx
f010b366:	8b 45 08             	mov    0x8(%ebp),%eax
f010b369:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010b36b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b36e:	c1 e0 05             	shl    $0x5,%eax
f010b371:	89 c2                	mov    %eax,%edx
f010b373:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b376:	01 d0                	add    %edx,%eax
f010b378:	8b 50 14             	mov    0x14(%eax),%edx
f010b37b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b37e:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f010b381:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b384:	c1 e0 05             	shl    $0x5,%eax
f010b387:	89 c2                	mov    %eax,%edx
f010b389:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b38c:	01 d0                	add    %edx,%eax
f010b38e:	8b 50 10             	mov    0x10(%eax),%edx
f010b391:	8b 45 08             	mov    0x8(%ebp),%eax
f010b394:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010b397:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b39a:	c1 e0 05             	shl    $0x5,%eax
f010b39d:	89 c2                	mov    %eax,%edx
f010b39f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b3a2:	01 d0                	add    %edx,%eax
f010b3a4:	8b 40 08             	mov    0x8(%eax),%eax
f010b3a7:	89 c2                	mov    %eax,%edx
f010b3a9:	8b 45 08             	mov    0x8(%ebp),%eax
f010b3ac:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f010b3af:	8b 45 08             	mov    0x8(%ebp),%eax
f010b3b2:	eb 05                	jmp    f010b3b9 <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010b3b4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010b3b9:	c9                   	leave  
f010b3ba:	c3                   	ret    

f010b3bb <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 13) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010b3bb:	55                   	push   %ebp
f010b3bc:	89 e5                	mov    %esp,%ebp
f010b3be:	57                   	push   %edi
f010b3bf:	56                   	push   %esi
f010b3c0:	53                   	push   %ebx
f010b3c1:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010b3c4:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010b3cb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b3ce:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010b3d1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b3d4:	8b 00                	mov    (%eax),%eax
f010b3d6:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010b3db:	74 17                	je     f010b3f4 <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f010b3dd:	83 ec 04             	sub    $0x4,%esp
f010b3e0:	68 57 6e 13 f0       	push   $0xf0136e57
f010b3e5:	68 d2 03 00 00       	push   $0x3d2
f010b3ea:	68 01 6d 13 f0       	push   $0xf0136d01
f010b3ef:	e8 11 4e ff ff       	call   f0100205 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010b3f4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b3f7:	8b 50 1c             	mov    0x1c(%eax),%edx
f010b3fa:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b3fd:	01 d0                	add    %edx,%eax
f010b3ff:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010b402:	eb 07                	jmp    f010b40b <PROGRAM_SEGMENT_FIRST+0x50>
f010b404:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b407:	40                   	inc    %eax
f010b408:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010b40b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b40e:	c1 e0 05             	shl    $0x5,%eax
f010b411:	89 c2                	mov    %eax,%edx
f010b413:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b416:	01 d0                	add    %edx,%eax
f010b418:	8b 00                	mov    (%eax),%eax
f010b41a:	83 f8 01             	cmp    $0x1,%eax
f010b41d:	74 10                	je     f010b42f <PROGRAM_SEGMENT_FIRST+0x74>
f010b41f:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010b422:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b425:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b428:	0f b7 c0             	movzwl %ax,%eax
f010b42b:	39 c2                	cmp    %eax,%edx
f010b42d:	72 d5                	jb     f010b404 <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010b42f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b432:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f010b435:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b438:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b43b:	0f b7 c0             	movzwl %ax,%eax
f010b43e:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010b441:	7e 68                	jle    f010b4ab <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010b443:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b446:	c1 e0 05             	shl    $0x5,%eax
f010b449:	89 c2                	mov    %eax,%edx
f010b44b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b44e:	01 d0                	add    %edx,%eax
f010b450:	8b 50 04             	mov    0x4(%eax),%edx
f010b453:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b456:	01 d0                	add    %edx,%eax
f010b458:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010b45b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b45e:	c1 e0 05             	shl    $0x5,%eax
f010b461:	89 c2                	mov    %eax,%edx
f010b463:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b466:	01 d0                	add    %edx,%eax
f010b468:	8b 40 14             	mov    0x14(%eax),%eax
f010b46b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f010b46e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b471:	c1 e0 05             	shl    $0x5,%eax
f010b474:	89 c2                	mov    %eax,%edx
f010b476:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b479:	01 d0                	add    %edx,%eax
f010b47b:	8b 40 10             	mov    0x10(%eax),%eax
f010b47e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f010b481:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b484:	c1 e0 05             	shl    $0x5,%eax
f010b487:	89 c2                	mov    %eax,%edx
f010b489:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b48c:	01 d0                	add    %edx,%eax
f010b48e:	8b 40 08             	mov    0x8(%eax),%eax
f010b491:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f010b494:	8b 45 08             	mov    0x8(%ebp),%eax
f010b497:	89 c3                	mov    %eax,%ebx
f010b499:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010b49c:	ba 05 00 00 00       	mov    $0x5,%edx
f010b4a1:	89 df                	mov    %ebx,%edi
f010b4a3:	89 c6                	mov    %eax,%esi
f010b4a5:	89 d1                	mov    %edx,%ecx
f010b4a7:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010b4a9:	eb 1c                	jmp    f010b4c7 <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010b4ab:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f010b4b2:	8b 45 08             	mov    0x8(%ebp),%eax
f010b4b5:	89 c3                	mov    %eax,%ebx
f010b4b7:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010b4ba:	ba 05 00 00 00       	mov    $0x5,%edx
f010b4bf:	89 df                	mov    %ebx,%edi
f010b4c1:	89 c6                	mov    %eax,%esi
f010b4c3:	89 d1                	mov    %edx,%ecx
f010b4c5:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010b4c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010b4ca:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010b4cd:	5b                   	pop    %ebx
f010b4ce:	5e                   	pop    %esi
f010b4cf:	5f                   	pop    %edi
f010b4d0:	5d                   	pop    %ebp
f010b4d1:	c2 04 00             	ret    $0x4

f010b4d4 <cleanup_buffers>:

//===============================================
// 14) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================
void cleanup_buffers(struct Env* e)
{
f010b4d4:	55                   	push   %ebp
f010b4d5:	89 e5                	mov    %esp,%ebp
f010b4d7:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010b4da:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010b4e1:	a1 b8 ac 89 f0       	mov    0xf089acb8,%eax
f010b4e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b4e9:	e9 c3 00 00 00       	jmp    f010b5b1 <cleanup_buffers+0xdd>
	{
		if(ptr_fi->environment == e)
f010b4ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b4f1:	8b 40 10             	mov    0x10(%eax),%eax
f010b4f4:	3b 45 08             	cmp    0x8(%ebp),%eax
f010b4f7:	0f 85 ac 00 00 00    	jne    f010b5a9 <cleanup_buffers+0xd5>
		{
			pt_clear_page_table_entry(ptr_fi->environment->env_page_directory,ptr_fi->va);
f010b4fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b500:	8b 50 0c             	mov    0xc(%eax),%edx
f010b503:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b506:	8b 40 10             	mov    0x10(%eax),%eax
f010b509:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b50c:	83 ec 08             	sub    $0x8,%esp
f010b50f:	52                   	push   %edx
f010b510:	50                   	push   %eax
f010b511:	e8 ac cc ff ff       	call   f01081c2 <pt_clear_page_table_entry>
f010b516:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			LIST_REMOVE(&modified_frame_list, ptr_fi);
f010b519:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b51d:	75 17                	jne    f010b536 <cleanup_buffers+0x62>
f010b51f:	83 ec 04             	sub    $0x4,%esp
f010b522:	68 1e 6d 13 f0       	push   $0xf0136d1e
f010b527:	68 f9 03 00 00       	push   $0x3f9
f010b52c:	68 01 6d 13 f0       	push   $0xf0136d01
f010b531:	e8 cf 4c ff ff       	call   f0100205 <_panic>
f010b536:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b539:	8b 00                	mov    (%eax),%eax
f010b53b:	85 c0                	test   %eax,%eax
f010b53d:	74 10                	je     f010b54f <cleanup_buffers+0x7b>
f010b53f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b542:	8b 00                	mov    (%eax),%eax
f010b544:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b547:	8b 52 04             	mov    0x4(%edx),%edx
f010b54a:	89 50 04             	mov    %edx,0x4(%eax)
f010b54d:	eb 0b                	jmp    f010b55a <cleanup_buffers+0x86>
f010b54f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b552:	8b 40 04             	mov    0x4(%eax),%eax
f010b555:	a3 bc ac 89 f0       	mov    %eax,0xf089acbc
f010b55a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b55d:	8b 40 04             	mov    0x4(%eax),%eax
f010b560:	85 c0                	test   %eax,%eax
f010b562:	74 0f                	je     f010b573 <cleanup_buffers+0x9f>
f010b564:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b567:	8b 40 04             	mov    0x4(%eax),%eax
f010b56a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b56d:	8b 12                	mov    (%edx),%edx
f010b56f:	89 10                	mov    %edx,(%eax)
f010b571:	eb 0a                	jmp    f010b57d <cleanup_buffers+0xa9>
f010b573:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b576:	8b 00                	mov    (%eax),%eax
f010b578:	a3 b8 ac 89 f0       	mov    %eax,0xf089acb8
f010b57d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b580:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010b586:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b589:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010b590:	a1 c4 ac 89 f0       	mov    0xf089acc4,%eax
f010b595:	48                   	dec    %eax
f010b596:	a3 c4 ac 89 f0       	mov    %eax,0xf089acc4

			free_frame(ptr_fi);
f010b59b:	83 ec 0c             	sub    $0xc,%esp
f010b59e:	ff 75 f4             	pushl  -0xc(%ebp)
f010b5a1:	e8 61 b4 ff ff       	call   f0106a07 <free_frame>
f010b5a6:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010b5a9:	a1 c0 ac 89 f0       	mov    0xf089acc0,%eax
f010b5ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b5b1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b5b5:	74 07                	je     f010b5be <cleanup_buffers+0xea>
f010b5b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b5ba:	8b 00                	mov    (%eax),%eax
f010b5bc:	eb 05                	jmp    f010b5c3 <cleanup_buffers+0xef>
f010b5be:	b8 00 00 00 00       	mov    $0x0,%eax
f010b5c3:	a3 c0 ac 89 f0       	mov    %eax,0xf089acc0
f010b5c8:	a1 c0 ac 89 f0       	mov    0xf089acc0,%eax
f010b5cd:	85 c0                	test   %eax,%eax
f010b5cf:	0f 85 19 ff ff ff    	jne    f010b4ee <cleanup_buffers+0x1a>
f010b5d5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b5d9:	0f 85 0f ff ff ff    	jne    f010b4ee <cleanup_buffers+0x1a>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010b5df:	90                   	nop
f010b5e0:	c9                   	leave  
f010b5e1:	c3                   	ret    

f010b5e2 <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f010b5e2:	55                   	push   %ebp
f010b5e3:	89 e5                	mov    %esp,%ebp
f010b5e5:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] set_program_priority
	//[ALREADY IMPLEMENTED]

	if(priority < 1 || priority > 5)
f010b5e8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010b5ec:	7e 06                	jle    f010b5f4 <set_program_priority+0x12>
f010b5ee:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010b5f2:	7e 14                	jle    f010b608 <set_program_priority+0x26>
	{
		panic("Please enter valid priority (1->5)\n");
f010b5f4:	83 ec 04             	sub    $0x4,%esp
f010b5f7:	68 70 6e 13 f0       	push   $0xf0136e70
f010b5fc:	6a 10                	push   $0x10
f010b5fe:	68 94 6e 13 f0       	push   $0xf0136e94
f010b603:	e8 fd 4b ff ff       	call   f0100205 <_panic>
		return;
	}
	if(env == NULL)
f010b608:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010b60c:	74 75                	je     f010b683 <set_program_priority+0xa1>
		return;
	switch(priority)
f010b60e:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010b612:	77 56                	ja     f010b66a <set_program_priority+0x88>
f010b614:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b617:	c1 e0 02             	shl    $0x2,%eax
f010b61a:	05 d0 6e 13 f0       	add    $0xf0136ed0,%eax
f010b61f:	8b 00                	mov    (%eax),%eax
f010b621:	ff e0                	jmp    *%eax
	{
		case PRIORITY_LOW:
			half_WS_Size(env, 1);
f010b623:	83 ec 08             	sub    $0x8,%esp
f010b626:	6a 01                	push   $0x1
f010b628:	ff 75 08             	pushl  0x8(%ebp)
f010b62b:	e8 09 d6 ff ff       	call   f0108c39 <half_WS_Size>
f010b630:	83 c4 10             	add    $0x10,%esp
			break;
f010b633:	eb 35                	jmp    f010b66a <set_program_priority+0x88>
		case PRIORITY_BELOWNORMAL:
			half_WS_Size(env, 0);
f010b635:	83 ec 08             	sub    $0x8,%esp
f010b638:	6a 00                	push   $0x0
f010b63a:	ff 75 08             	pushl  0x8(%ebp)
f010b63d:	e8 f7 d5 ff ff       	call   f0108c39 <half_WS_Size>
f010b642:	83 c4 10             	add    $0x10,%esp
			break;
f010b645:	eb 23                	jmp    f010b66a <set_program_priority+0x88>
		case PRIORITY_NORMAL:
			// Do Nothing
			break;
		case PRIORITY_ABOVENORMAL:
			double_WS_Size(env, 1);
f010b647:	83 ec 08             	sub    $0x8,%esp
f010b64a:	6a 01                	push   $0x1
f010b64c:	ff 75 08             	pushl  0x8(%ebp)
f010b64f:	e8 c8 d5 ff ff       	call   f0108c1c <double_WS_Size>
f010b654:	83 c4 10             	add    $0x10,%esp
			break;
f010b657:	eb 11                	jmp    f010b66a <set_program_priority+0x88>
		case PRIORITY_HIGH:
			double_WS_Size(env, 0);
f010b659:	83 ec 08             	sub    $0x8,%esp
f010b65c:	6a 00                	push   $0x0
f010b65e:	ff 75 08             	pushl  0x8(%ebp)
f010b661:	e8 b6 d5 ff ff       	call   f0108c1c <double_WS_Size>
f010b666:	83 c4 10             	add    $0x10,%esp
			break;
f010b669:	90                   	nop
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
f010b66a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b66d:	8b 40 74             	mov    0x74(%eax),%eax
f010b670:	83 ec 08             	sub    $0x8,%esp
f010b673:	50                   	push   %eax
f010b674:	68 b1 6e 13 f0       	push   $0xf0136eb1
f010b679:	e8 90 56 ff ff       	call   f0100d0e <cprintf>
f010b67e:	83 c4 10             	add    $0x10,%esp
f010b681:	eb 01                	jmp    f010b684 <set_program_priority+0xa2>
	{
		panic("Please enter valid priority (1->5)\n");
		return;
	}
	if(env == NULL)
		return;
f010b683:	90                   	nop
			double_WS_Size(env, 0);
			break;
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
}
f010b684:	c9                   	leave  
f010b685:	c3                   	ret    

f010b686 <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f010b686:	55                   	push   %ebp
f010b687:	89 e5                	mov    %esp,%ebp
f010b689:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b68c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b693:	eb 29                	jmp    f010b6be <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010b695:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b698:	89 d0                	mov    %edx,%eax
f010b69a:	01 c0                	add    %eax,%eax
f010b69c:	01 d0                	add    %edx,%eax
f010b69e:	c1 e0 02             	shl    $0x2,%eax
f010b6a1:	05 00 39 19 f0       	add    $0xf0193900,%eax
f010b6a6:	8b 00                	mov    (%eax),%eax
f010b6a8:	83 ec 08             	sub    $0x8,%esp
f010b6ab:	50                   	push   %eax
f010b6ac:	ff 75 08             	pushl  0x8(%ebp)
f010b6af:	e8 3b 63 02 00       	call   f01319ef <strcmp>
f010b6b4:	83 c4 10             	add    $0x10,%esp
f010b6b7:	85 c0                	test   %eax,%eax
f010b6b9:	74 0f                	je     f010b6ca <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b6bb:	ff 45 f4             	incl   -0xc(%ebp)
f010b6be:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f010b6c3:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b6c6:	7c cd                	jl     f010b695 <get_user_program_info+0xf>
f010b6c8:	eb 01                	jmp    f010b6cb <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010b6ca:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010b6cb:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f010b6d0:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b6d3:	75 1a                	jne    f010b6ef <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010b6d5:	83 ec 08             	sub    $0x8,%esp
f010b6d8:	ff 75 08             	pushl  0x8(%ebp)
f010b6db:	68 65 7a 13 f0       	push   $0xf0137a65
f010b6e0:	e8 29 56 ff ff       	call   f0100d0e <cprintf>
f010b6e5:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b6e8:	b8 00 00 00 00       	mov    $0x0,%eax
f010b6ed:	eb 11                	jmp    f010b700 <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010b6ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b6f2:	89 d0                	mov    %edx,%eax
f010b6f4:	01 c0                	add    %eax,%eax
f010b6f6:	01 d0                	add    %edx,%eax
f010b6f8:	c1 e0 02             	shl    $0x2,%eax
f010b6fb:	05 00 39 19 f0       	add    $0xf0193900,%eax
}
f010b700:	c9                   	leave  
f010b701:	c3                   	ret    

f010b702 <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010b702:	55                   	push   %ebp
f010b703:	89 e5                	mov    %esp,%ebp
f010b705:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b708:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b70f:	eb 30                	jmp    f010b741 <get_user_program_info_by_env+0x3f>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f010b711:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b714:	89 d0                	mov    %edx,%eax
f010b716:	01 c0                	add    %eax,%eax
f010b718:	01 d0                	add    %edx,%eax
f010b71a:	c1 e0 02             	shl    $0x2,%eax
f010b71d:	05 00 39 19 f0       	add    $0xf0193900,%eax
f010b722:	8b 00                	mov    (%eax),%eax
f010b724:	8b 55 08             	mov    0x8(%ebp),%edx
f010b727:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f010b72d:	83 ec 08             	sub    $0x8,%esp
f010b730:	50                   	push   %eax
f010b731:	52                   	push   %edx
f010b732:	e8 b8 62 02 00       	call   f01319ef <strcmp>
f010b737:	83 c4 10             	add    $0x10,%esp
f010b73a:	85 c0                	test   %eax,%eax
f010b73c:	74 0f                	je     f010b74d <get_user_program_info_by_env+0x4b>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b73e:	ff 45 f4             	incl   -0xc(%ebp)
f010b741:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f010b746:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b749:	7c c6                	jl     f010b711 <get_user_program_info_by_env+0xf>
f010b74b:	eb 01                	jmp    f010b74e <get_user_program_info_by_env+0x4c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f010b74d:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010b74e:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f010b753:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b756:	75 17                	jne    f010b76f <get_user_program_info_by_env+0x6d>
	{
		cprintf("Unknown user program \n");
f010b758:	83 ec 0c             	sub    $0xc,%esp
f010b75b:	68 80 7a 13 f0       	push   $0xf0137a80
f010b760:	e8 a9 55 ff ff       	call   f0100d0e <cprintf>
f010b765:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b768:	b8 00 00 00 00       	mov    $0x0,%eax
f010b76d:	eb 11                	jmp    f010b780 <get_user_program_info_by_env+0x7e>
	}

	return &userPrograms[i];
f010b76f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b772:	89 d0                	mov    %edx,%eax
f010b774:	01 c0                	add    %eax,%eax
f010b776:	01 d0                	add    %edx,%eax
f010b778:	c1 e0 02             	shl    $0x2,%eax
f010b77b:	05 00 39 19 f0       	add    $0xf0193900,%eax
}
f010b780:	c9                   	leave  
f010b781:	c3                   	ret    

f010b782 <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010b782:	55                   	push   %ebp
f010b783:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010b785:	8b 45 08             	mov    0x8(%ebp),%eax
f010b788:	83 f8 13             	cmp    $0x13,%eax
f010b78b:	77 0c                	ja     f010b799 <trapname+0x17>
		return excnames[trapno];
f010b78d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b790:	8b 04 85 c0 7e 13 f0 	mov    -0xfec8140(,%eax,4),%eax
f010b797:	eb 12                	jmp    f010b7ab <trapname+0x29>
	if (trapno == T_SYSCALL)
f010b799:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010b79d:	75 07                	jne    f010b7a6 <trapname+0x24>
		return "System call";
f010b79f:	b8 a0 7a 13 f0       	mov    $0xf0137aa0,%eax
f010b7a4:	eb 05                	jmp    f010b7ab <trapname+0x29>
	return "(unknown trap)";
f010b7a6:	b8 ac 7a 13 f0       	mov    $0xf0137aac,%eax
}
f010b7ab:	5d                   	pop    %ebp
f010b7ac:	c3                   	ret    

f010b7ad <idt_init>:


void
idt_init(void)
{
f010b7ad:	55                   	push   %ebp
f010b7ae:	89 e5                	mov    %esp,%ebp
f010b7b0:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f010b7b3:	b8 42 ce 10 f0       	mov    $0xf010ce42,%eax
f010b7b8:	66 a3 90 a4 89 f0    	mov    %ax,0xf089a490
f010b7be:	66 c7 05 92 a4 89 f0 	movw   $0x8,0xf089a492
f010b7c5:	08 00 
f010b7c7:	a0 94 a4 89 f0       	mov    0xf089a494,%al
f010b7cc:	83 e0 e0             	and    $0xffffffe0,%eax
f010b7cf:	a2 94 a4 89 f0       	mov    %al,0xf089a494
f010b7d4:	a0 94 a4 89 f0       	mov    0xf089a494,%al
f010b7d9:	83 e0 1f             	and    $0x1f,%eax
f010b7dc:	a2 94 a4 89 f0       	mov    %al,0xf089a494
f010b7e1:	a0 95 a4 89 f0       	mov    0xf089a495,%al
f010b7e6:	83 e0 f0             	and    $0xfffffff0,%eax
f010b7e9:	83 c8 0e             	or     $0xe,%eax
f010b7ec:	a2 95 a4 89 f0       	mov    %al,0xf089a495
f010b7f1:	a0 95 a4 89 f0       	mov    0xf089a495,%al
f010b7f6:	83 e0 ef             	and    $0xffffffef,%eax
f010b7f9:	a2 95 a4 89 f0       	mov    %al,0xf089a495
f010b7fe:	a0 95 a4 89 f0       	mov    0xf089a495,%al
f010b803:	83 e0 9f             	and    $0xffffff9f,%eax
f010b806:	a2 95 a4 89 f0       	mov    %al,0xf089a495
f010b80b:	a0 95 a4 89 f0       	mov    0xf089a495,%al
f010b810:	83 c8 80             	or     $0xffffff80,%eax
f010b813:	a2 95 a4 89 f0       	mov    %al,0xf089a495
f010b818:	b8 42 ce 10 f0       	mov    $0xf010ce42,%eax
f010b81d:	c1 e8 10             	shr    $0x10,%eax
f010b820:	66 a3 96 a4 89 f0    	mov    %ax,0xf089a496
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f010b826:	b8 4a ce 10 f0       	mov    $0xf010ce4a,%eax
f010b82b:	66 a3 a0 a5 89 f0    	mov    %ax,0xf089a5a0
f010b831:	66 c7 05 a2 a5 89 f0 	movw   $0x8,0xf089a5a2
f010b838:	08 00 
f010b83a:	a0 a4 a5 89 f0       	mov    0xf089a5a4,%al
f010b83f:	83 e0 e0             	and    $0xffffffe0,%eax
f010b842:	a2 a4 a5 89 f0       	mov    %al,0xf089a5a4
f010b847:	a0 a4 a5 89 f0       	mov    0xf089a5a4,%al
f010b84c:	83 e0 1f             	and    $0x1f,%eax
f010b84f:	a2 a4 a5 89 f0       	mov    %al,0xf089a5a4
f010b854:	a0 a5 a5 89 f0       	mov    0xf089a5a5,%al
f010b859:	83 e0 f0             	and    $0xfffffff0,%eax
f010b85c:	83 c8 0e             	or     $0xe,%eax
f010b85f:	a2 a5 a5 89 f0       	mov    %al,0xf089a5a5
f010b864:	a0 a5 a5 89 f0       	mov    0xf089a5a5,%al
f010b869:	83 e0 ef             	and    $0xffffffef,%eax
f010b86c:	a2 a5 a5 89 f0       	mov    %al,0xf089a5a5
f010b871:	a0 a5 a5 89 f0       	mov    0xf089a5a5,%al
f010b876:	83 c8 60             	or     $0x60,%eax
f010b879:	a2 a5 a5 89 f0       	mov    %al,0xf089a5a5
f010b87e:	a0 a5 a5 89 f0       	mov    0xf089a5a5,%al
f010b883:	83 c8 80             	or     $0xffffff80,%eax
f010b886:	a2 a5 a5 89 f0       	mov    %al,0xf089a5a5
f010b88b:	b8 4a ce 10 f0       	mov    $0xf010ce4a,%eax
f010b890:	c1 e8 10             	shr    $0x10,%eax
f010b893:	66 a3 a6 a5 89 f0    	mov    %ax,0xf089a5a6
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f010b899:	b8 54 ce 10 f0       	mov    $0xf010ce54,%eax
f010b89e:	66 a3 60 a4 89 f0    	mov    %ax,0xf089a460
f010b8a4:	66 c7 05 62 a4 89 f0 	movw   $0x8,0xf089a462
f010b8ab:	08 00 
f010b8ad:	a0 64 a4 89 f0       	mov    0xf089a464,%al
f010b8b2:	83 e0 e0             	and    $0xffffffe0,%eax
f010b8b5:	a2 64 a4 89 f0       	mov    %al,0xf089a464
f010b8ba:	a0 64 a4 89 f0       	mov    0xf089a464,%al
f010b8bf:	83 e0 1f             	and    $0x1f,%eax
f010b8c2:	a2 64 a4 89 f0       	mov    %al,0xf089a464
f010b8c7:	a0 65 a4 89 f0       	mov    0xf089a465,%al
f010b8cc:	83 e0 f0             	and    $0xfffffff0,%eax
f010b8cf:	83 c8 0e             	or     $0xe,%eax
f010b8d2:	a2 65 a4 89 f0       	mov    %al,0xf089a465
f010b8d7:	a0 65 a4 89 f0       	mov    0xf089a465,%al
f010b8dc:	83 e0 ef             	and    $0xffffffef,%eax
f010b8df:	a2 65 a4 89 f0       	mov    %al,0xf089a465
f010b8e4:	a0 65 a4 89 f0       	mov    0xf089a465,%al
f010b8e9:	83 e0 9f             	and    $0xffffff9f,%eax
f010b8ec:	a2 65 a4 89 f0       	mov    %al,0xf089a465
f010b8f1:	a0 65 a4 89 f0       	mov    0xf089a465,%al
f010b8f6:	83 c8 80             	or     $0xffffff80,%eax
f010b8f9:	a2 65 a4 89 f0       	mov    %al,0xf089a465
f010b8fe:	b8 54 ce 10 f0       	mov    $0xf010ce54,%eax
f010b903:	c1 e8 10             	shr    $0x10,%eax
f010b906:	66 a3 66 a4 89 f0    	mov    %ax,0xf089a466


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f010b90c:	b8 5c ce 10 f0       	mov    $0xf010ce5c,%eax
f010b911:	66 a3 20 a4 89 f0    	mov    %ax,0xf089a420
f010b917:	66 c7 05 22 a4 89 f0 	movw   $0x8,0xf089a422
f010b91e:	08 00 
f010b920:	a0 24 a4 89 f0       	mov    0xf089a424,%al
f010b925:	83 e0 e0             	and    $0xffffffe0,%eax
f010b928:	a2 24 a4 89 f0       	mov    %al,0xf089a424
f010b92d:	a0 24 a4 89 f0       	mov    0xf089a424,%al
f010b932:	83 e0 1f             	and    $0x1f,%eax
f010b935:	a2 24 a4 89 f0       	mov    %al,0xf089a424
f010b93a:	a0 25 a4 89 f0       	mov    0xf089a425,%al
f010b93f:	83 e0 f0             	and    $0xfffffff0,%eax
f010b942:	83 c8 0e             	or     $0xe,%eax
f010b945:	a2 25 a4 89 f0       	mov    %al,0xf089a425
f010b94a:	a0 25 a4 89 f0       	mov    0xf089a425,%al
f010b94f:	83 e0 ef             	and    $0xffffffef,%eax
f010b952:	a2 25 a4 89 f0       	mov    %al,0xf089a425
f010b957:	a0 25 a4 89 f0       	mov    0xf089a425,%al
f010b95c:	83 c8 60             	or     $0x60,%eax
f010b95f:	a2 25 a4 89 f0       	mov    %al,0xf089a425
f010b964:	a0 25 a4 89 f0       	mov    0xf089a425,%al
f010b969:	83 c8 80             	or     $0xffffff80,%eax
f010b96c:	a2 25 a4 89 f0       	mov    %al,0xf089a425
f010b971:	b8 5c ce 10 f0       	mov    $0xf010ce5c,%eax
f010b976:	c1 e8 10             	shr    $0x10,%eax
f010b979:	66 a3 26 a4 89 f0    	mov    %ax,0xf089a426
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f010b97f:	b8 66 ce 10 f0       	mov    $0xf010ce66,%eax
f010b984:	66 a3 28 a4 89 f0    	mov    %ax,0xf089a428
f010b98a:	66 c7 05 2a a4 89 f0 	movw   $0x8,0xf089a42a
f010b991:	08 00 
f010b993:	a0 2c a4 89 f0       	mov    0xf089a42c,%al
f010b998:	83 e0 e0             	and    $0xffffffe0,%eax
f010b99b:	a2 2c a4 89 f0       	mov    %al,0xf089a42c
f010b9a0:	a0 2c a4 89 f0       	mov    0xf089a42c,%al
f010b9a5:	83 e0 1f             	and    $0x1f,%eax
f010b9a8:	a2 2c a4 89 f0       	mov    %al,0xf089a42c
f010b9ad:	a0 2d a4 89 f0       	mov    0xf089a42d,%al
f010b9b2:	83 c8 0f             	or     $0xf,%eax
f010b9b5:	a2 2d a4 89 f0       	mov    %al,0xf089a42d
f010b9ba:	a0 2d a4 89 f0       	mov    0xf089a42d,%al
f010b9bf:	83 e0 ef             	and    $0xffffffef,%eax
f010b9c2:	a2 2d a4 89 f0       	mov    %al,0xf089a42d
f010b9c7:	a0 2d a4 89 f0       	mov    0xf089a42d,%al
f010b9cc:	83 c8 60             	or     $0x60,%eax
f010b9cf:	a2 2d a4 89 f0       	mov    %al,0xf089a42d
f010b9d4:	a0 2d a4 89 f0       	mov    0xf089a42d,%al
f010b9d9:	83 c8 80             	or     $0xffffff80,%eax
f010b9dc:	a2 2d a4 89 f0       	mov    %al,0xf089a42d
f010b9e1:	b8 66 ce 10 f0       	mov    $0xf010ce66,%eax
f010b9e6:	c1 e8 10             	shr    $0x10,%eax
f010b9e9:	66 a3 2e a4 89 f0    	mov    %ax,0xf089a42e
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f010b9ef:	b8 70 ce 10 f0       	mov    $0xf010ce70,%eax
f010b9f4:	66 a3 30 a4 89 f0    	mov    %ax,0xf089a430
f010b9fa:	66 c7 05 32 a4 89 f0 	movw   $0x8,0xf089a432
f010ba01:	08 00 
f010ba03:	a0 34 a4 89 f0       	mov    0xf089a434,%al
f010ba08:	83 e0 e0             	and    $0xffffffe0,%eax
f010ba0b:	a2 34 a4 89 f0       	mov    %al,0xf089a434
f010ba10:	a0 34 a4 89 f0       	mov    0xf089a434,%al
f010ba15:	83 e0 1f             	and    $0x1f,%eax
f010ba18:	a2 34 a4 89 f0       	mov    %al,0xf089a434
f010ba1d:	a0 35 a4 89 f0       	mov    0xf089a435,%al
f010ba22:	83 e0 f0             	and    $0xfffffff0,%eax
f010ba25:	83 c8 0e             	or     $0xe,%eax
f010ba28:	a2 35 a4 89 f0       	mov    %al,0xf089a435
f010ba2d:	a0 35 a4 89 f0       	mov    0xf089a435,%al
f010ba32:	83 e0 ef             	and    $0xffffffef,%eax
f010ba35:	a2 35 a4 89 f0       	mov    %al,0xf089a435
f010ba3a:	a0 35 a4 89 f0       	mov    0xf089a435,%al
f010ba3f:	83 c8 60             	or     $0x60,%eax
f010ba42:	a2 35 a4 89 f0       	mov    %al,0xf089a435
f010ba47:	a0 35 a4 89 f0       	mov    0xf089a435,%al
f010ba4c:	83 c8 80             	or     $0xffffff80,%eax
f010ba4f:	a2 35 a4 89 f0       	mov    %al,0xf089a435
f010ba54:	b8 70 ce 10 f0       	mov    $0xf010ce70,%eax
f010ba59:	c1 e8 10             	shr    $0x10,%eax
f010ba5c:	66 a3 36 a4 89 f0    	mov    %ax,0xf089a436
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010ba62:	b8 7a ce 10 f0       	mov    $0xf010ce7a,%eax
f010ba67:	66 a3 38 a4 89 f0    	mov    %ax,0xf089a438
f010ba6d:	66 c7 05 3a a4 89 f0 	movw   $0x8,0xf089a43a
f010ba74:	08 00 
f010ba76:	a0 3c a4 89 f0       	mov    0xf089a43c,%al
f010ba7b:	83 e0 e0             	and    $0xffffffe0,%eax
f010ba7e:	a2 3c a4 89 f0       	mov    %al,0xf089a43c
f010ba83:	a0 3c a4 89 f0       	mov    0xf089a43c,%al
f010ba88:	83 e0 1f             	and    $0x1f,%eax
f010ba8b:	a2 3c a4 89 f0       	mov    %al,0xf089a43c
f010ba90:	a0 3d a4 89 f0       	mov    0xf089a43d,%al
f010ba95:	83 c8 0f             	or     $0xf,%eax
f010ba98:	a2 3d a4 89 f0       	mov    %al,0xf089a43d
f010ba9d:	a0 3d a4 89 f0       	mov    0xf089a43d,%al
f010baa2:	83 e0 ef             	and    $0xffffffef,%eax
f010baa5:	a2 3d a4 89 f0       	mov    %al,0xf089a43d
f010baaa:	a0 3d a4 89 f0       	mov    0xf089a43d,%al
f010baaf:	83 c8 60             	or     $0x60,%eax
f010bab2:	a2 3d a4 89 f0       	mov    %al,0xf089a43d
f010bab7:	a0 3d a4 89 f0       	mov    0xf089a43d,%al
f010babc:	83 c8 80             	or     $0xffffff80,%eax
f010babf:	a2 3d a4 89 f0       	mov    %al,0xf089a43d
f010bac4:	b8 7a ce 10 f0       	mov    $0xf010ce7a,%eax
f010bac9:	c1 e8 10             	shr    $0x10,%eax
f010bacc:	66 a3 3e a4 89 f0    	mov    %ax,0xf089a43e
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010bad2:	b8 84 ce 10 f0       	mov    $0xf010ce84,%eax
f010bad7:	66 a3 40 a4 89 f0    	mov    %ax,0xf089a440
f010badd:	66 c7 05 42 a4 89 f0 	movw   $0x8,0xf089a442
f010bae4:	08 00 
f010bae6:	a0 44 a4 89 f0       	mov    0xf089a444,%al
f010baeb:	83 e0 e0             	and    $0xffffffe0,%eax
f010baee:	a2 44 a4 89 f0       	mov    %al,0xf089a444
f010baf3:	a0 44 a4 89 f0       	mov    0xf089a444,%al
f010baf8:	83 e0 1f             	and    $0x1f,%eax
f010bafb:	a2 44 a4 89 f0       	mov    %al,0xf089a444
f010bb00:	a0 45 a4 89 f0       	mov    0xf089a445,%al
f010bb05:	83 c8 0f             	or     $0xf,%eax
f010bb08:	a2 45 a4 89 f0       	mov    %al,0xf089a445
f010bb0d:	a0 45 a4 89 f0       	mov    0xf089a445,%al
f010bb12:	83 e0 ef             	and    $0xffffffef,%eax
f010bb15:	a2 45 a4 89 f0       	mov    %al,0xf089a445
f010bb1a:	a0 45 a4 89 f0       	mov    0xf089a445,%al
f010bb1f:	83 c8 60             	or     $0x60,%eax
f010bb22:	a2 45 a4 89 f0       	mov    %al,0xf089a445
f010bb27:	a0 45 a4 89 f0       	mov    0xf089a445,%al
f010bb2c:	83 c8 80             	or     $0xffffff80,%eax
f010bb2f:	a2 45 a4 89 f0       	mov    %al,0xf089a445
f010bb34:	b8 84 ce 10 f0       	mov    $0xf010ce84,%eax
f010bb39:	c1 e8 10             	shr    $0x10,%eax
f010bb3c:	66 a3 46 a4 89 f0    	mov    %ax,0xf089a446
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010bb42:	b8 8e ce 10 f0       	mov    $0xf010ce8e,%eax
f010bb47:	66 a3 48 a4 89 f0    	mov    %ax,0xf089a448
f010bb4d:	66 c7 05 4a a4 89 f0 	movw   $0x8,0xf089a44a
f010bb54:	08 00 
f010bb56:	a0 4c a4 89 f0       	mov    0xf089a44c,%al
f010bb5b:	83 e0 e0             	and    $0xffffffe0,%eax
f010bb5e:	a2 4c a4 89 f0       	mov    %al,0xf089a44c
f010bb63:	a0 4c a4 89 f0       	mov    0xf089a44c,%al
f010bb68:	83 e0 1f             	and    $0x1f,%eax
f010bb6b:	a2 4c a4 89 f0       	mov    %al,0xf089a44c
f010bb70:	a0 4d a4 89 f0       	mov    0xf089a44d,%al
f010bb75:	83 e0 f0             	and    $0xfffffff0,%eax
f010bb78:	83 c8 0e             	or     $0xe,%eax
f010bb7b:	a2 4d a4 89 f0       	mov    %al,0xf089a44d
f010bb80:	a0 4d a4 89 f0       	mov    0xf089a44d,%al
f010bb85:	83 e0 ef             	and    $0xffffffef,%eax
f010bb88:	a2 4d a4 89 f0       	mov    %al,0xf089a44d
f010bb8d:	a0 4d a4 89 f0       	mov    0xf089a44d,%al
f010bb92:	83 c8 60             	or     $0x60,%eax
f010bb95:	a2 4d a4 89 f0       	mov    %al,0xf089a44d
f010bb9a:	a0 4d a4 89 f0       	mov    0xf089a44d,%al
f010bb9f:	83 c8 80             	or     $0xffffff80,%eax
f010bba2:	a2 4d a4 89 f0       	mov    %al,0xf089a44d
f010bba7:	b8 8e ce 10 f0       	mov    $0xf010ce8e,%eax
f010bbac:	c1 e8 10             	shr    $0x10,%eax
f010bbaf:	66 a3 4e a4 89 f0    	mov    %ax,0xf089a44e
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010bbb5:	b8 98 ce 10 f0       	mov    $0xf010ce98,%eax
f010bbba:	66 a3 50 a4 89 f0    	mov    %ax,0xf089a450
f010bbc0:	66 c7 05 52 a4 89 f0 	movw   $0x8,0xf089a452
f010bbc7:	08 00 
f010bbc9:	a0 54 a4 89 f0       	mov    0xf089a454,%al
f010bbce:	83 e0 e0             	and    $0xffffffe0,%eax
f010bbd1:	a2 54 a4 89 f0       	mov    %al,0xf089a454
f010bbd6:	a0 54 a4 89 f0       	mov    0xf089a454,%al
f010bbdb:	83 e0 1f             	and    $0x1f,%eax
f010bbde:	a2 54 a4 89 f0       	mov    %al,0xf089a454
f010bbe3:	a0 55 a4 89 f0       	mov    0xf089a455,%al
f010bbe8:	83 e0 f0             	and    $0xfffffff0,%eax
f010bbeb:	83 c8 0e             	or     $0xe,%eax
f010bbee:	a2 55 a4 89 f0       	mov    %al,0xf089a455
f010bbf3:	a0 55 a4 89 f0       	mov    0xf089a455,%al
f010bbf8:	83 e0 ef             	and    $0xffffffef,%eax
f010bbfb:	a2 55 a4 89 f0       	mov    %al,0xf089a455
f010bc00:	a0 55 a4 89 f0       	mov    0xf089a455,%al
f010bc05:	83 c8 60             	or     $0x60,%eax
f010bc08:	a2 55 a4 89 f0       	mov    %al,0xf089a455
f010bc0d:	a0 55 a4 89 f0       	mov    0xf089a455,%al
f010bc12:	83 c8 80             	or     $0xffffff80,%eax
f010bc15:	a2 55 a4 89 f0       	mov    %al,0xf089a455
f010bc1a:	b8 98 ce 10 f0       	mov    $0xf010ce98,%eax
f010bc1f:	c1 e8 10             	shr    $0x10,%eax
f010bc22:	66 a3 56 a4 89 f0    	mov    %ax,0xf089a456
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010bc28:	b8 a2 ce 10 f0       	mov    $0xf010cea2,%eax
f010bc2d:	66 a3 58 a4 89 f0    	mov    %ax,0xf089a458
f010bc33:	66 c7 05 5a a4 89 f0 	movw   $0x8,0xf089a45a
f010bc3a:	08 00 
f010bc3c:	a0 5c a4 89 f0       	mov    0xf089a45c,%al
f010bc41:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc44:	a2 5c a4 89 f0       	mov    %al,0xf089a45c
f010bc49:	a0 5c a4 89 f0       	mov    0xf089a45c,%al
f010bc4e:	83 e0 1f             	and    $0x1f,%eax
f010bc51:	a2 5c a4 89 f0       	mov    %al,0xf089a45c
f010bc56:	a0 5d a4 89 f0       	mov    0xf089a45d,%al
f010bc5b:	83 e0 f0             	and    $0xfffffff0,%eax
f010bc5e:	83 c8 0e             	or     $0xe,%eax
f010bc61:	a2 5d a4 89 f0       	mov    %al,0xf089a45d
f010bc66:	a0 5d a4 89 f0       	mov    0xf089a45d,%al
f010bc6b:	83 e0 ef             	and    $0xffffffef,%eax
f010bc6e:	a2 5d a4 89 f0       	mov    %al,0xf089a45d
f010bc73:	a0 5d a4 89 f0       	mov    0xf089a45d,%al
f010bc78:	83 c8 60             	or     $0x60,%eax
f010bc7b:	a2 5d a4 89 f0       	mov    %al,0xf089a45d
f010bc80:	a0 5d a4 89 f0       	mov    0xf089a45d,%al
f010bc85:	83 c8 80             	or     $0xffffff80,%eax
f010bc88:	a2 5d a4 89 f0       	mov    %al,0xf089a45d
f010bc8d:	b8 a2 ce 10 f0       	mov    $0xf010cea2,%eax
f010bc92:	c1 e8 10             	shr    $0x10,%eax
f010bc95:	66 a3 5e a4 89 f0    	mov    %ax,0xf089a45e
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010bc9b:	b8 ac ce 10 f0       	mov    $0xf010ceac,%eax
f010bca0:	66 a3 70 a4 89 f0    	mov    %ax,0xf089a470
f010bca6:	66 c7 05 72 a4 89 f0 	movw   $0x8,0xf089a472
f010bcad:	08 00 
f010bcaf:	a0 74 a4 89 f0       	mov    0xf089a474,%al
f010bcb4:	83 e0 e0             	and    $0xffffffe0,%eax
f010bcb7:	a2 74 a4 89 f0       	mov    %al,0xf089a474
f010bcbc:	a0 74 a4 89 f0       	mov    0xf089a474,%al
f010bcc1:	83 e0 1f             	and    $0x1f,%eax
f010bcc4:	a2 74 a4 89 f0       	mov    %al,0xf089a474
f010bcc9:	a0 75 a4 89 f0       	mov    0xf089a475,%al
f010bcce:	83 e0 f0             	and    $0xfffffff0,%eax
f010bcd1:	83 c8 0e             	or     $0xe,%eax
f010bcd4:	a2 75 a4 89 f0       	mov    %al,0xf089a475
f010bcd9:	a0 75 a4 89 f0       	mov    0xf089a475,%al
f010bcde:	83 e0 ef             	and    $0xffffffef,%eax
f010bce1:	a2 75 a4 89 f0       	mov    %al,0xf089a475
f010bce6:	a0 75 a4 89 f0       	mov    0xf089a475,%al
f010bceb:	83 c8 60             	or     $0x60,%eax
f010bcee:	a2 75 a4 89 f0       	mov    %al,0xf089a475
f010bcf3:	a0 75 a4 89 f0       	mov    0xf089a475,%al
f010bcf8:	83 c8 80             	or     $0xffffff80,%eax
f010bcfb:	a2 75 a4 89 f0       	mov    %al,0xf089a475
f010bd00:	b8 ac ce 10 f0       	mov    $0xf010ceac,%eax
f010bd05:	c1 e8 10             	shr    $0x10,%eax
f010bd08:	66 a3 76 a4 89 f0    	mov    %ax,0xf089a476
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010bd0e:	b8 b4 ce 10 f0       	mov    $0xf010ceb4,%eax
f010bd13:	66 a3 78 a4 89 f0    	mov    %ax,0xf089a478
f010bd19:	66 c7 05 7a a4 89 f0 	movw   $0x8,0xf089a47a
f010bd20:	08 00 
f010bd22:	a0 7c a4 89 f0       	mov    0xf089a47c,%al
f010bd27:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd2a:	a2 7c a4 89 f0       	mov    %al,0xf089a47c
f010bd2f:	a0 7c a4 89 f0       	mov    0xf089a47c,%al
f010bd34:	83 e0 1f             	and    $0x1f,%eax
f010bd37:	a2 7c a4 89 f0       	mov    %al,0xf089a47c
f010bd3c:	a0 7d a4 89 f0       	mov    0xf089a47d,%al
f010bd41:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd44:	83 c8 0e             	or     $0xe,%eax
f010bd47:	a2 7d a4 89 f0       	mov    %al,0xf089a47d
f010bd4c:	a0 7d a4 89 f0       	mov    0xf089a47d,%al
f010bd51:	83 e0 ef             	and    $0xffffffef,%eax
f010bd54:	a2 7d a4 89 f0       	mov    %al,0xf089a47d
f010bd59:	a0 7d a4 89 f0       	mov    0xf089a47d,%al
f010bd5e:	83 c8 60             	or     $0x60,%eax
f010bd61:	a2 7d a4 89 f0       	mov    %al,0xf089a47d
f010bd66:	a0 7d a4 89 f0       	mov    0xf089a47d,%al
f010bd6b:	83 c8 80             	or     $0xffffff80,%eax
f010bd6e:	a2 7d a4 89 f0       	mov    %al,0xf089a47d
f010bd73:	b8 b4 ce 10 f0       	mov    $0xf010ceb4,%eax
f010bd78:	c1 e8 10             	shr    $0x10,%eax
f010bd7b:	66 a3 7e a4 89 f0    	mov    %ax,0xf089a47e
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010bd81:	b8 b8 ce 10 f0       	mov    $0xf010ceb8,%eax
f010bd86:	66 a3 80 a4 89 f0    	mov    %ax,0xf089a480
f010bd8c:	66 c7 05 82 a4 89 f0 	movw   $0x8,0xf089a482
f010bd93:	08 00 
f010bd95:	a0 84 a4 89 f0       	mov    0xf089a484,%al
f010bd9a:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd9d:	a2 84 a4 89 f0       	mov    %al,0xf089a484
f010bda2:	a0 84 a4 89 f0       	mov    0xf089a484,%al
f010bda7:	83 e0 1f             	and    $0x1f,%eax
f010bdaa:	a2 84 a4 89 f0       	mov    %al,0xf089a484
f010bdaf:	a0 85 a4 89 f0       	mov    0xf089a485,%al
f010bdb4:	83 e0 f0             	and    $0xfffffff0,%eax
f010bdb7:	83 c8 0e             	or     $0xe,%eax
f010bdba:	a2 85 a4 89 f0       	mov    %al,0xf089a485
f010bdbf:	a0 85 a4 89 f0       	mov    0xf089a485,%al
f010bdc4:	83 e0 ef             	and    $0xffffffef,%eax
f010bdc7:	a2 85 a4 89 f0       	mov    %al,0xf089a485
f010bdcc:	a0 85 a4 89 f0       	mov    0xf089a485,%al
f010bdd1:	83 c8 60             	or     $0x60,%eax
f010bdd4:	a2 85 a4 89 f0       	mov    %al,0xf089a485
f010bdd9:	a0 85 a4 89 f0       	mov    0xf089a485,%al
f010bdde:	83 c8 80             	or     $0xffffff80,%eax
f010bde1:	a2 85 a4 89 f0       	mov    %al,0xf089a485
f010bde6:	b8 b8 ce 10 f0       	mov    $0xf010ceb8,%eax
f010bdeb:	c1 e8 10             	shr    $0x10,%eax
f010bdee:	66 a3 86 a4 89 f0    	mov    %ax,0xf089a486
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010bdf4:	b8 bc ce 10 f0       	mov    $0xf010cebc,%eax
f010bdf9:	66 a3 88 a4 89 f0    	mov    %ax,0xf089a488
f010bdff:	66 c7 05 8a a4 89 f0 	movw   $0x8,0xf089a48a
f010be06:	08 00 
f010be08:	a0 8c a4 89 f0       	mov    0xf089a48c,%al
f010be0d:	83 e0 e0             	and    $0xffffffe0,%eax
f010be10:	a2 8c a4 89 f0       	mov    %al,0xf089a48c
f010be15:	a0 8c a4 89 f0       	mov    0xf089a48c,%al
f010be1a:	83 e0 1f             	and    $0x1f,%eax
f010be1d:	a2 8c a4 89 f0       	mov    %al,0xf089a48c
f010be22:	a0 8d a4 89 f0       	mov    0xf089a48d,%al
f010be27:	83 e0 f0             	and    $0xfffffff0,%eax
f010be2a:	83 c8 0e             	or     $0xe,%eax
f010be2d:	a2 8d a4 89 f0       	mov    %al,0xf089a48d
f010be32:	a0 8d a4 89 f0       	mov    0xf089a48d,%al
f010be37:	83 e0 ef             	and    $0xffffffef,%eax
f010be3a:	a2 8d a4 89 f0       	mov    %al,0xf089a48d
f010be3f:	a0 8d a4 89 f0       	mov    0xf089a48d,%al
f010be44:	83 c8 60             	or     $0x60,%eax
f010be47:	a2 8d a4 89 f0       	mov    %al,0xf089a48d
f010be4c:	a0 8d a4 89 f0       	mov    0xf089a48d,%al
f010be51:	83 c8 80             	or     $0xffffff80,%eax
f010be54:	a2 8d a4 89 f0       	mov    %al,0xf089a48d
f010be59:	b8 bc ce 10 f0       	mov    $0xf010cebc,%eax
f010be5e:	c1 e8 10             	shr    $0x10,%eax
f010be61:	66 a3 8e a4 89 f0    	mov    %ax,0xf089a48e
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010be67:	b8 c0 ce 10 f0       	mov    $0xf010cec0,%eax
f010be6c:	66 a3 a0 a4 89 f0    	mov    %ax,0xf089a4a0
f010be72:	66 c7 05 a2 a4 89 f0 	movw   $0x8,0xf089a4a2
f010be79:	08 00 
f010be7b:	a0 a4 a4 89 f0       	mov    0xf089a4a4,%al
f010be80:	83 e0 e0             	and    $0xffffffe0,%eax
f010be83:	a2 a4 a4 89 f0       	mov    %al,0xf089a4a4
f010be88:	a0 a4 a4 89 f0       	mov    0xf089a4a4,%al
f010be8d:	83 e0 1f             	and    $0x1f,%eax
f010be90:	a2 a4 a4 89 f0       	mov    %al,0xf089a4a4
f010be95:	a0 a5 a4 89 f0       	mov    0xf089a4a5,%al
f010be9a:	83 e0 f0             	and    $0xfffffff0,%eax
f010be9d:	83 c8 0e             	or     $0xe,%eax
f010bea0:	a2 a5 a4 89 f0       	mov    %al,0xf089a4a5
f010bea5:	a0 a5 a4 89 f0       	mov    0xf089a4a5,%al
f010beaa:	83 e0 ef             	and    $0xffffffef,%eax
f010bead:	a2 a5 a4 89 f0       	mov    %al,0xf089a4a5
f010beb2:	a0 a5 a4 89 f0       	mov    0xf089a4a5,%al
f010beb7:	83 c8 60             	or     $0x60,%eax
f010beba:	a2 a5 a4 89 f0       	mov    %al,0xf089a4a5
f010bebf:	a0 a5 a4 89 f0       	mov    0xf089a4a5,%al
f010bec4:	83 c8 80             	or     $0xffffff80,%eax
f010bec7:	a2 a5 a4 89 f0       	mov    %al,0xf089a4a5
f010becc:	b8 c0 ce 10 f0       	mov    $0xf010cec0,%eax
f010bed1:	c1 e8 10             	shr    $0x10,%eax
f010bed4:	66 a3 a6 a4 89 f0    	mov    %ax,0xf089a4a6
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010beda:	b8 c6 ce 10 f0       	mov    $0xf010cec6,%eax
f010bedf:	66 a3 a8 a4 89 f0    	mov    %ax,0xf089a4a8
f010bee5:	66 c7 05 aa a4 89 f0 	movw   $0x8,0xf089a4aa
f010beec:	08 00 
f010beee:	a0 ac a4 89 f0       	mov    0xf089a4ac,%al
f010bef3:	83 e0 e0             	and    $0xffffffe0,%eax
f010bef6:	a2 ac a4 89 f0       	mov    %al,0xf089a4ac
f010befb:	a0 ac a4 89 f0       	mov    0xf089a4ac,%al
f010bf00:	83 e0 1f             	and    $0x1f,%eax
f010bf03:	a2 ac a4 89 f0       	mov    %al,0xf089a4ac
f010bf08:	a0 ad a4 89 f0       	mov    0xf089a4ad,%al
f010bf0d:	83 e0 f0             	and    $0xfffffff0,%eax
f010bf10:	83 c8 0e             	or     $0xe,%eax
f010bf13:	a2 ad a4 89 f0       	mov    %al,0xf089a4ad
f010bf18:	a0 ad a4 89 f0       	mov    0xf089a4ad,%al
f010bf1d:	83 e0 ef             	and    $0xffffffef,%eax
f010bf20:	a2 ad a4 89 f0       	mov    %al,0xf089a4ad
f010bf25:	a0 ad a4 89 f0       	mov    0xf089a4ad,%al
f010bf2a:	83 c8 60             	or     $0x60,%eax
f010bf2d:	a2 ad a4 89 f0       	mov    %al,0xf089a4ad
f010bf32:	a0 ad a4 89 f0       	mov    0xf089a4ad,%al
f010bf37:	83 c8 80             	or     $0xffffff80,%eax
f010bf3a:	a2 ad a4 89 f0       	mov    %al,0xf089a4ad
f010bf3f:	b8 c6 ce 10 f0       	mov    $0xf010cec6,%eax
f010bf44:	c1 e8 10             	shr    $0x10,%eax
f010bf47:	66 a3 ae a4 89 f0    	mov    %ax,0xf089a4ae
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010bf4d:	b8 ca ce 10 f0       	mov    $0xf010ceca,%eax
f010bf52:	66 a3 b0 a4 89 f0    	mov    %ax,0xf089a4b0
f010bf58:	66 c7 05 b2 a4 89 f0 	movw   $0x8,0xf089a4b2
f010bf5f:	08 00 
f010bf61:	a0 b4 a4 89 f0       	mov    0xf089a4b4,%al
f010bf66:	83 e0 e0             	and    $0xffffffe0,%eax
f010bf69:	a2 b4 a4 89 f0       	mov    %al,0xf089a4b4
f010bf6e:	a0 b4 a4 89 f0       	mov    0xf089a4b4,%al
f010bf73:	83 e0 1f             	and    $0x1f,%eax
f010bf76:	a2 b4 a4 89 f0       	mov    %al,0xf089a4b4
f010bf7b:	a0 b5 a4 89 f0       	mov    0xf089a4b5,%al
f010bf80:	83 e0 f0             	and    $0xfffffff0,%eax
f010bf83:	83 c8 0e             	or     $0xe,%eax
f010bf86:	a2 b5 a4 89 f0       	mov    %al,0xf089a4b5
f010bf8b:	a0 b5 a4 89 f0       	mov    0xf089a4b5,%al
f010bf90:	83 e0 ef             	and    $0xffffffef,%eax
f010bf93:	a2 b5 a4 89 f0       	mov    %al,0xf089a4b5
f010bf98:	a0 b5 a4 89 f0       	mov    0xf089a4b5,%al
f010bf9d:	83 c8 60             	or     $0x60,%eax
f010bfa0:	a2 b5 a4 89 f0       	mov    %al,0xf089a4b5
f010bfa5:	a0 b5 a4 89 f0       	mov    0xf089a4b5,%al
f010bfaa:	83 c8 80             	or     $0xffffff80,%eax
f010bfad:	a2 b5 a4 89 f0       	mov    %al,0xf089a4b5
f010bfb2:	b8 ca ce 10 f0       	mov    $0xf010ceca,%eax
f010bfb7:	c1 e8 10             	shr    $0x10,%eax
f010bfba:	66 a3 b6 a4 89 f0    	mov    %ax,0xf089a4b6
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010bfc0:	b8 d0 ce 10 f0       	mov    $0xf010ced0,%eax
f010bfc5:	66 a3 b8 a4 89 f0    	mov    %ax,0xf089a4b8
f010bfcb:	66 c7 05 ba a4 89 f0 	movw   $0x8,0xf089a4ba
f010bfd2:	08 00 
f010bfd4:	a0 bc a4 89 f0       	mov    0xf089a4bc,%al
f010bfd9:	83 e0 e0             	and    $0xffffffe0,%eax
f010bfdc:	a2 bc a4 89 f0       	mov    %al,0xf089a4bc
f010bfe1:	a0 bc a4 89 f0       	mov    0xf089a4bc,%al
f010bfe6:	83 e0 1f             	and    $0x1f,%eax
f010bfe9:	a2 bc a4 89 f0       	mov    %al,0xf089a4bc
f010bfee:	a0 bd a4 89 f0       	mov    0xf089a4bd,%al
f010bff3:	83 e0 f0             	and    $0xfffffff0,%eax
f010bff6:	83 c8 0e             	or     $0xe,%eax
f010bff9:	a2 bd a4 89 f0       	mov    %al,0xf089a4bd
f010bffe:	a0 bd a4 89 f0       	mov    0xf089a4bd,%al
f010c003:	83 e0 ef             	and    $0xffffffef,%eax
f010c006:	a2 bd a4 89 f0       	mov    %al,0xf089a4bd
f010c00b:	a0 bd a4 89 f0       	mov    0xf089a4bd,%al
f010c010:	83 c8 60             	or     $0x60,%eax
f010c013:	a2 bd a4 89 f0       	mov    %al,0xf089a4bd
f010c018:	a0 bd a4 89 f0       	mov    0xf089a4bd,%al
f010c01d:	83 c8 80             	or     $0xffffff80,%eax
f010c020:	a2 bd a4 89 f0       	mov    %al,0xf089a4bd
f010c025:	b8 d0 ce 10 f0       	mov    $0xf010ced0,%eax
f010c02a:	c1 e8 10             	shr    $0x10,%eax
f010c02d:	66 a3 be a4 89 f0    	mov    %ax,0xf089a4be


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f010c033:	b8 d6 ce 10 f0       	mov    $0xf010ced6,%eax
f010c038:	66 a3 20 a5 89 f0    	mov    %ax,0xf089a520
f010c03e:	66 c7 05 22 a5 89 f0 	movw   $0x8,0xf089a522
f010c045:	08 00 
f010c047:	a0 24 a5 89 f0       	mov    0xf089a524,%al
f010c04c:	83 e0 e0             	and    $0xffffffe0,%eax
f010c04f:	a2 24 a5 89 f0       	mov    %al,0xf089a524
f010c054:	a0 24 a5 89 f0       	mov    0xf089a524,%al
f010c059:	83 e0 1f             	and    $0x1f,%eax
f010c05c:	a2 24 a5 89 f0       	mov    %al,0xf089a524
f010c061:	a0 25 a5 89 f0       	mov    0xf089a525,%al
f010c066:	83 e0 f0             	and    $0xfffffff0,%eax
f010c069:	83 c8 0e             	or     $0xe,%eax
f010c06c:	a2 25 a5 89 f0       	mov    %al,0xf089a525
f010c071:	a0 25 a5 89 f0       	mov    0xf089a525,%al
f010c076:	83 e0 ef             	and    $0xffffffef,%eax
f010c079:	a2 25 a5 89 f0       	mov    %al,0xf089a525
f010c07e:	a0 25 a5 89 f0       	mov    0xf089a525,%al
f010c083:	83 c8 60             	or     $0x60,%eax
f010c086:	a2 25 a5 89 f0       	mov    %al,0xf089a525
f010c08b:	a0 25 a5 89 f0       	mov    0xf089a525,%al
f010c090:	83 c8 80             	or     $0xffffff80,%eax
f010c093:	a2 25 a5 89 f0       	mov    %al,0xf089a525
f010c098:	b8 d6 ce 10 f0       	mov    $0xf010ced6,%eax
f010c09d:	c1 e8 10             	shr    $0x10,%eax
f010c0a0:	66 a3 26 a5 89 f0    	mov    %ax,0xf089a526
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f010c0a6:	b8 dc ce 10 f0       	mov    $0xf010cedc,%eax
f010c0ab:	66 a3 28 a5 89 f0    	mov    %ax,0xf089a528
f010c0b1:	66 c7 05 2a a5 89 f0 	movw   $0x8,0xf089a52a
f010c0b8:	08 00 
f010c0ba:	a0 2c a5 89 f0       	mov    0xf089a52c,%al
f010c0bf:	83 e0 e0             	and    $0xffffffe0,%eax
f010c0c2:	a2 2c a5 89 f0       	mov    %al,0xf089a52c
f010c0c7:	a0 2c a5 89 f0       	mov    0xf089a52c,%al
f010c0cc:	83 e0 1f             	and    $0x1f,%eax
f010c0cf:	a2 2c a5 89 f0       	mov    %al,0xf089a52c
f010c0d4:	a0 2d a5 89 f0       	mov    0xf089a52d,%al
f010c0d9:	83 e0 f0             	and    $0xfffffff0,%eax
f010c0dc:	83 c8 0e             	or     $0xe,%eax
f010c0df:	a2 2d a5 89 f0       	mov    %al,0xf089a52d
f010c0e4:	a0 2d a5 89 f0       	mov    0xf089a52d,%al
f010c0e9:	83 e0 ef             	and    $0xffffffef,%eax
f010c0ec:	a2 2d a5 89 f0       	mov    %al,0xf089a52d
f010c0f1:	a0 2d a5 89 f0       	mov    0xf089a52d,%al
f010c0f6:	83 c8 60             	or     $0x60,%eax
f010c0f9:	a2 2d a5 89 f0       	mov    %al,0xf089a52d
f010c0fe:	a0 2d a5 89 f0       	mov    0xf089a52d,%al
f010c103:	83 c8 80             	or     $0xffffff80,%eax
f010c106:	a2 2d a5 89 f0       	mov    %al,0xf089a52d
f010c10b:	b8 dc ce 10 f0       	mov    $0xf010cedc,%eax
f010c110:	c1 e8 10             	shr    $0x10,%eax
f010c113:	66 a3 2e a5 89 f0    	mov    %ax,0xf089a52e
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010c119:	b8 e2 ce 10 f0       	mov    $0xf010cee2,%eax
f010c11e:	66 a3 30 a5 89 f0    	mov    %ax,0xf089a530
f010c124:	66 c7 05 32 a5 89 f0 	movw   $0x8,0xf089a532
f010c12b:	08 00 
f010c12d:	a0 34 a5 89 f0       	mov    0xf089a534,%al
f010c132:	83 e0 e0             	and    $0xffffffe0,%eax
f010c135:	a2 34 a5 89 f0       	mov    %al,0xf089a534
f010c13a:	a0 34 a5 89 f0       	mov    0xf089a534,%al
f010c13f:	83 e0 1f             	and    $0x1f,%eax
f010c142:	a2 34 a5 89 f0       	mov    %al,0xf089a534
f010c147:	a0 35 a5 89 f0       	mov    0xf089a535,%al
f010c14c:	83 e0 f0             	and    $0xfffffff0,%eax
f010c14f:	83 c8 0e             	or     $0xe,%eax
f010c152:	a2 35 a5 89 f0       	mov    %al,0xf089a535
f010c157:	a0 35 a5 89 f0       	mov    0xf089a535,%al
f010c15c:	83 e0 ef             	and    $0xffffffef,%eax
f010c15f:	a2 35 a5 89 f0       	mov    %al,0xf089a535
f010c164:	a0 35 a5 89 f0       	mov    0xf089a535,%al
f010c169:	83 c8 60             	or     $0x60,%eax
f010c16c:	a2 35 a5 89 f0       	mov    %al,0xf089a535
f010c171:	a0 35 a5 89 f0       	mov    0xf089a535,%al
f010c176:	83 c8 80             	or     $0xffffff80,%eax
f010c179:	a2 35 a5 89 f0       	mov    %al,0xf089a535
f010c17e:	b8 e2 ce 10 f0       	mov    $0xf010cee2,%eax
f010c183:	c1 e8 10             	shr    $0x10,%eax
f010c186:	66 a3 36 a5 89 f0    	mov    %ax,0xf089a536
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010c18c:	b8 e8 ce 10 f0       	mov    $0xf010cee8,%eax
f010c191:	66 a3 38 a5 89 f0    	mov    %ax,0xf089a538
f010c197:	66 c7 05 3a a5 89 f0 	movw   $0x8,0xf089a53a
f010c19e:	08 00 
f010c1a0:	a0 3c a5 89 f0       	mov    0xf089a53c,%al
f010c1a5:	83 e0 e0             	and    $0xffffffe0,%eax
f010c1a8:	a2 3c a5 89 f0       	mov    %al,0xf089a53c
f010c1ad:	a0 3c a5 89 f0       	mov    0xf089a53c,%al
f010c1b2:	83 e0 1f             	and    $0x1f,%eax
f010c1b5:	a2 3c a5 89 f0       	mov    %al,0xf089a53c
f010c1ba:	a0 3d a5 89 f0       	mov    0xf089a53d,%al
f010c1bf:	83 e0 f0             	and    $0xfffffff0,%eax
f010c1c2:	83 c8 0e             	or     $0xe,%eax
f010c1c5:	a2 3d a5 89 f0       	mov    %al,0xf089a53d
f010c1ca:	a0 3d a5 89 f0       	mov    0xf089a53d,%al
f010c1cf:	83 e0 ef             	and    $0xffffffef,%eax
f010c1d2:	a2 3d a5 89 f0       	mov    %al,0xf089a53d
f010c1d7:	a0 3d a5 89 f0       	mov    0xf089a53d,%al
f010c1dc:	83 c8 60             	or     $0x60,%eax
f010c1df:	a2 3d a5 89 f0       	mov    %al,0xf089a53d
f010c1e4:	a0 3d a5 89 f0       	mov    0xf089a53d,%al
f010c1e9:	83 c8 80             	or     $0xffffff80,%eax
f010c1ec:	a2 3d a5 89 f0       	mov    %al,0xf089a53d
f010c1f1:	b8 e8 ce 10 f0       	mov    $0xf010cee8,%eax
f010c1f6:	c1 e8 10             	shr    $0x10,%eax
f010c1f9:	66 a3 3e a5 89 f0    	mov    %ax,0xf089a53e
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010c1ff:	b8 ee ce 10 f0       	mov    $0xf010ceee,%eax
f010c204:	66 a3 40 a5 89 f0    	mov    %ax,0xf089a540
f010c20a:	66 c7 05 42 a5 89 f0 	movw   $0x8,0xf089a542
f010c211:	08 00 
f010c213:	a0 44 a5 89 f0       	mov    0xf089a544,%al
f010c218:	83 e0 e0             	and    $0xffffffe0,%eax
f010c21b:	a2 44 a5 89 f0       	mov    %al,0xf089a544
f010c220:	a0 44 a5 89 f0       	mov    0xf089a544,%al
f010c225:	83 e0 1f             	and    $0x1f,%eax
f010c228:	a2 44 a5 89 f0       	mov    %al,0xf089a544
f010c22d:	a0 45 a5 89 f0       	mov    0xf089a545,%al
f010c232:	83 e0 f0             	and    $0xfffffff0,%eax
f010c235:	83 c8 0e             	or     $0xe,%eax
f010c238:	a2 45 a5 89 f0       	mov    %al,0xf089a545
f010c23d:	a0 45 a5 89 f0       	mov    0xf089a545,%al
f010c242:	83 e0 ef             	and    $0xffffffef,%eax
f010c245:	a2 45 a5 89 f0       	mov    %al,0xf089a545
f010c24a:	a0 45 a5 89 f0       	mov    0xf089a545,%al
f010c24f:	83 c8 60             	or     $0x60,%eax
f010c252:	a2 45 a5 89 f0       	mov    %al,0xf089a545
f010c257:	a0 45 a5 89 f0       	mov    0xf089a545,%al
f010c25c:	83 c8 80             	or     $0xffffff80,%eax
f010c25f:	a2 45 a5 89 f0       	mov    %al,0xf089a545
f010c264:	b8 ee ce 10 f0       	mov    $0xf010ceee,%eax
f010c269:	c1 e8 10             	shr    $0x10,%eax
f010c26c:	66 a3 46 a5 89 f0    	mov    %ax,0xf089a546
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010c272:	b8 f4 ce 10 f0       	mov    $0xf010cef4,%eax
f010c277:	66 a3 48 a5 89 f0    	mov    %ax,0xf089a548
f010c27d:	66 c7 05 4a a5 89 f0 	movw   $0x8,0xf089a54a
f010c284:	08 00 
f010c286:	a0 4c a5 89 f0       	mov    0xf089a54c,%al
f010c28b:	83 e0 e0             	and    $0xffffffe0,%eax
f010c28e:	a2 4c a5 89 f0       	mov    %al,0xf089a54c
f010c293:	a0 4c a5 89 f0       	mov    0xf089a54c,%al
f010c298:	83 e0 1f             	and    $0x1f,%eax
f010c29b:	a2 4c a5 89 f0       	mov    %al,0xf089a54c
f010c2a0:	a0 4d a5 89 f0       	mov    0xf089a54d,%al
f010c2a5:	83 e0 f0             	and    $0xfffffff0,%eax
f010c2a8:	83 c8 0e             	or     $0xe,%eax
f010c2ab:	a2 4d a5 89 f0       	mov    %al,0xf089a54d
f010c2b0:	a0 4d a5 89 f0       	mov    0xf089a54d,%al
f010c2b5:	83 e0 ef             	and    $0xffffffef,%eax
f010c2b8:	a2 4d a5 89 f0       	mov    %al,0xf089a54d
f010c2bd:	a0 4d a5 89 f0       	mov    0xf089a54d,%al
f010c2c2:	83 c8 60             	or     $0x60,%eax
f010c2c5:	a2 4d a5 89 f0       	mov    %al,0xf089a54d
f010c2ca:	a0 4d a5 89 f0       	mov    0xf089a54d,%al
f010c2cf:	83 c8 80             	or     $0xffffff80,%eax
f010c2d2:	a2 4d a5 89 f0       	mov    %al,0xf089a54d
f010c2d7:	b8 f4 ce 10 f0       	mov    $0xf010cef4,%eax
f010c2dc:	c1 e8 10             	shr    $0x10,%eax
f010c2df:	66 a3 4e a5 89 f0    	mov    %ax,0xf089a54e
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010c2e5:	b8 fa ce 10 f0       	mov    $0xf010cefa,%eax
f010c2ea:	66 a3 50 a5 89 f0    	mov    %ax,0xf089a550
f010c2f0:	66 c7 05 52 a5 89 f0 	movw   $0x8,0xf089a552
f010c2f7:	08 00 
f010c2f9:	a0 54 a5 89 f0       	mov    0xf089a554,%al
f010c2fe:	83 e0 e0             	and    $0xffffffe0,%eax
f010c301:	a2 54 a5 89 f0       	mov    %al,0xf089a554
f010c306:	a0 54 a5 89 f0       	mov    0xf089a554,%al
f010c30b:	83 e0 1f             	and    $0x1f,%eax
f010c30e:	a2 54 a5 89 f0       	mov    %al,0xf089a554
f010c313:	a0 55 a5 89 f0       	mov    0xf089a555,%al
f010c318:	83 e0 f0             	and    $0xfffffff0,%eax
f010c31b:	83 c8 0e             	or     $0xe,%eax
f010c31e:	a2 55 a5 89 f0       	mov    %al,0xf089a555
f010c323:	a0 55 a5 89 f0       	mov    0xf089a555,%al
f010c328:	83 e0 ef             	and    $0xffffffef,%eax
f010c32b:	a2 55 a5 89 f0       	mov    %al,0xf089a555
f010c330:	a0 55 a5 89 f0       	mov    0xf089a555,%al
f010c335:	83 c8 60             	or     $0x60,%eax
f010c338:	a2 55 a5 89 f0       	mov    %al,0xf089a555
f010c33d:	a0 55 a5 89 f0       	mov    0xf089a555,%al
f010c342:	83 c8 80             	or     $0xffffff80,%eax
f010c345:	a2 55 a5 89 f0       	mov    %al,0xf089a555
f010c34a:	b8 fa ce 10 f0       	mov    $0xf010cefa,%eax
f010c34f:	c1 e8 10             	shr    $0x10,%eax
f010c352:	66 a3 56 a5 89 f0    	mov    %ax,0xf089a556
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010c358:	b8 00 cf 10 f0       	mov    $0xf010cf00,%eax
f010c35d:	66 a3 58 a5 89 f0    	mov    %ax,0xf089a558
f010c363:	66 c7 05 5a a5 89 f0 	movw   $0x8,0xf089a55a
f010c36a:	08 00 
f010c36c:	a0 5c a5 89 f0       	mov    0xf089a55c,%al
f010c371:	83 e0 e0             	and    $0xffffffe0,%eax
f010c374:	a2 5c a5 89 f0       	mov    %al,0xf089a55c
f010c379:	a0 5c a5 89 f0       	mov    0xf089a55c,%al
f010c37e:	83 e0 1f             	and    $0x1f,%eax
f010c381:	a2 5c a5 89 f0       	mov    %al,0xf089a55c
f010c386:	a0 5d a5 89 f0       	mov    0xf089a55d,%al
f010c38b:	83 e0 f0             	and    $0xfffffff0,%eax
f010c38e:	83 c8 0e             	or     $0xe,%eax
f010c391:	a2 5d a5 89 f0       	mov    %al,0xf089a55d
f010c396:	a0 5d a5 89 f0       	mov    0xf089a55d,%al
f010c39b:	83 e0 ef             	and    $0xffffffef,%eax
f010c39e:	a2 5d a5 89 f0       	mov    %al,0xf089a55d
f010c3a3:	a0 5d a5 89 f0       	mov    0xf089a55d,%al
f010c3a8:	83 c8 60             	or     $0x60,%eax
f010c3ab:	a2 5d a5 89 f0       	mov    %al,0xf089a55d
f010c3b0:	a0 5d a5 89 f0       	mov    0xf089a55d,%al
f010c3b5:	83 c8 80             	or     $0xffffff80,%eax
f010c3b8:	a2 5d a5 89 f0       	mov    %al,0xf089a55d
f010c3bd:	b8 00 cf 10 f0       	mov    $0xf010cf00,%eax
f010c3c2:	c1 e8 10             	shr    $0x10,%eax
f010c3c5:	66 a3 5e a5 89 f0    	mov    %ax,0xf089a55e
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010c3cb:	b8 06 cf 10 f0       	mov    $0xf010cf06,%eax
f010c3d0:	66 a3 60 a5 89 f0    	mov    %ax,0xf089a560
f010c3d6:	66 c7 05 62 a5 89 f0 	movw   $0x8,0xf089a562
f010c3dd:	08 00 
f010c3df:	a0 64 a5 89 f0       	mov    0xf089a564,%al
f010c3e4:	83 e0 e0             	and    $0xffffffe0,%eax
f010c3e7:	a2 64 a5 89 f0       	mov    %al,0xf089a564
f010c3ec:	a0 64 a5 89 f0       	mov    0xf089a564,%al
f010c3f1:	83 e0 1f             	and    $0x1f,%eax
f010c3f4:	a2 64 a5 89 f0       	mov    %al,0xf089a564
f010c3f9:	a0 65 a5 89 f0       	mov    0xf089a565,%al
f010c3fe:	83 e0 f0             	and    $0xfffffff0,%eax
f010c401:	83 c8 0e             	or     $0xe,%eax
f010c404:	a2 65 a5 89 f0       	mov    %al,0xf089a565
f010c409:	a0 65 a5 89 f0       	mov    0xf089a565,%al
f010c40e:	83 e0 ef             	and    $0xffffffef,%eax
f010c411:	a2 65 a5 89 f0       	mov    %al,0xf089a565
f010c416:	a0 65 a5 89 f0       	mov    0xf089a565,%al
f010c41b:	83 c8 60             	or     $0x60,%eax
f010c41e:	a2 65 a5 89 f0       	mov    %al,0xf089a565
f010c423:	a0 65 a5 89 f0       	mov    0xf089a565,%al
f010c428:	83 c8 80             	or     $0xffffff80,%eax
f010c42b:	a2 65 a5 89 f0       	mov    %al,0xf089a565
f010c430:	b8 06 cf 10 f0       	mov    $0xf010cf06,%eax
f010c435:	c1 e8 10             	shr    $0x10,%eax
f010c438:	66 a3 66 a5 89 f0    	mov    %ax,0xf089a566
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010c43e:	b8 0c cf 10 f0       	mov    $0xf010cf0c,%eax
f010c443:	66 a3 68 a5 89 f0    	mov    %ax,0xf089a568
f010c449:	66 c7 05 6a a5 89 f0 	movw   $0x8,0xf089a56a
f010c450:	08 00 
f010c452:	a0 6c a5 89 f0       	mov    0xf089a56c,%al
f010c457:	83 e0 e0             	and    $0xffffffe0,%eax
f010c45a:	a2 6c a5 89 f0       	mov    %al,0xf089a56c
f010c45f:	a0 6c a5 89 f0       	mov    0xf089a56c,%al
f010c464:	83 e0 1f             	and    $0x1f,%eax
f010c467:	a2 6c a5 89 f0       	mov    %al,0xf089a56c
f010c46c:	a0 6d a5 89 f0       	mov    0xf089a56d,%al
f010c471:	83 e0 f0             	and    $0xfffffff0,%eax
f010c474:	83 c8 0e             	or     $0xe,%eax
f010c477:	a2 6d a5 89 f0       	mov    %al,0xf089a56d
f010c47c:	a0 6d a5 89 f0       	mov    0xf089a56d,%al
f010c481:	83 e0 ef             	and    $0xffffffef,%eax
f010c484:	a2 6d a5 89 f0       	mov    %al,0xf089a56d
f010c489:	a0 6d a5 89 f0       	mov    0xf089a56d,%al
f010c48e:	83 c8 60             	or     $0x60,%eax
f010c491:	a2 6d a5 89 f0       	mov    %al,0xf089a56d
f010c496:	a0 6d a5 89 f0       	mov    0xf089a56d,%al
f010c49b:	83 c8 80             	or     $0xffffff80,%eax
f010c49e:	a2 6d a5 89 f0       	mov    %al,0xf089a56d
f010c4a3:	b8 0c cf 10 f0       	mov    $0xf010cf0c,%eax
f010c4a8:	c1 e8 10             	shr    $0x10,%eax
f010c4ab:	66 a3 6e a5 89 f0    	mov    %ax,0xf089a56e
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010c4b1:	b8 12 cf 10 f0       	mov    $0xf010cf12,%eax
f010c4b6:	66 a3 70 a5 89 f0    	mov    %ax,0xf089a570
f010c4bc:	66 c7 05 72 a5 89 f0 	movw   $0x8,0xf089a572
f010c4c3:	08 00 
f010c4c5:	a0 74 a5 89 f0       	mov    0xf089a574,%al
f010c4ca:	83 e0 e0             	and    $0xffffffe0,%eax
f010c4cd:	a2 74 a5 89 f0       	mov    %al,0xf089a574
f010c4d2:	a0 74 a5 89 f0       	mov    0xf089a574,%al
f010c4d7:	83 e0 1f             	and    $0x1f,%eax
f010c4da:	a2 74 a5 89 f0       	mov    %al,0xf089a574
f010c4df:	a0 75 a5 89 f0       	mov    0xf089a575,%al
f010c4e4:	83 e0 f0             	and    $0xfffffff0,%eax
f010c4e7:	83 c8 0e             	or     $0xe,%eax
f010c4ea:	a2 75 a5 89 f0       	mov    %al,0xf089a575
f010c4ef:	a0 75 a5 89 f0       	mov    0xf089a575,%al
f010c4f4:	83 e0 ef             	and    $0xffffffef,%eax
f010c4f7:	a2 75 a5 89 f0       	mov    %al,0xf089a575
f010c4fc:	a0 75 a5 89 f0       	mov    0xf089a575,%al
f010c501:	83 c8 60             	or     $0x60,%eax
f010c504:	a2 75 a5 89 f0       	mov    %al,0xf089a575
f010c509:	a0 75 a5 89 f0       	mov    0xf089a575,%al
f010c50e:	83 c8 80             	or     $0xffffff80,%eax
f010c511:	a2 75 a5 89 f0       	mov    %al,0xf089a575
f010c516:	b8 12 cf 10 f0       	mov    $0xf010cf12,%eax
f010c51b:	c1 e8 10             	shr    $0x10,%eax
f010c51e:	66 a3 76 a5 89 f0    	mov    %ax,0xf089a576
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010c524:	b8 18 cf 10 f0       	mov    $0xf010cf18,%eax
f010c529:	66 a3 78 a5 89 f0    	mov    %ax,0xf089a578
f010c52f:	66 c7 05 7a a5 89 f0 	movw   $0x8,0xf089a57a
f010c536:	08 00 
f010c538:	a0 7c a5 89 f0       	mov    0xf089a57c,%al
f010c53d:	83 e0 e0             	and    $0xffffffe0,%eax
f010c540:	a2 7c a5 89 f0       	mov    %al,0xf089a57c
f010c545:	a0 7c a5 89 f0       	mov    0xf089a57c,%al
f010c54a:	83 e0 1f             	and    $0x1f,%eax
f010c54d:	a2 7c a5 89 f0       	mov    %al,0xf089a57c
f010c552:	a0 7d a5 89 f0       	mov    0xf089a57d,%al
f010c557:	83 e0 f0             	and    $0xfffffff0,%eax
f010c55a:	83 c8 0e             	or     $0xe,%eax
f010c55d:	a2 7d a5 89 f0       	mov    %al,0xf089a57d
f010c562:	a0 7d a5 89 f0       	mov    0xf089a57d,%al
f010c567:	83 e0 ef             	and    $0xffffffef,%eax
f010c56a:	a2 7d a5 89 f0       	mov    %al,0xf089a57d
f010c56f:	a0 7d a5 89 f0       	mov    0xf089a57d,%al
f010c574:	83 c8 60             	or     $0x60,%eax
f010c577:	a2 7d a5 89 f0       	mov    %al,0xf089a57d
f010c57c:	a0 7d a5 89 f0       	mov    0xf089a57d,%al
f010c581:	83 c8 80             	or     $0xffffff80,%eax
f010c584:	a2 7d a5 89 f0       	mov    %al,0xf089a57d
f010c589:	b8 18 cf 10 f0       	mov    $0xf010cf18,%eax
f010c58e:	c1 e8 10             	shr    $0x10,%eax
f010c591:	66 a3 7e a5 89 f0    	mov    %ax,0xf089a57e
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010c597:	b8 1e cf 10 f0       	mov    $0xf010cf1e,%eax
f010c59c:	66 a3 80 a5 89 f0    	mov    %ax,0xf089a580
f010c5a2:	66 c7 05 82 a5 89 f0 	movw   $0x8,0xf089a582
f010c5a9:	08 00 
f010c5ab:	a0 84 a5 89 f0       	mov    0xf089a584,%al
f010c5b0:	83 e0 e0             	and    $0xffffffe0,%eax
f010c5b3:	a2 84 a5 89 f0       	mov    %al,0xf089a584
f010c5b8:	a0 84 a5 89 f0       	mov    0xf089a584,%al
f010c5bd:	83 e0 1f             	and    $0x1f,%eax
f010c5c0:	a2 84 a5 89 f0       	mov    %al,0xf089a584
f010c5c5:	a0 85 a5 89 f0       	mov    0xf089a585,%al
f010c5ca:	83 e0 f0             	and    $0xfffffff0,%eax
f010c5cd:	83 c8 0e             	or     $0xe,%eax
f010c5d0:	a2 85 a5 89 f0       	mov    %al,0xf089a585
f010c5d5:	a0 85 a5 89 f0       	mov    0xf089a585,%al
f010c5da:	83 e0 ef             	and    $0xffffffef,%eax
f010c5dd:	a2 85 a5 89 f0       	mov    %al,0xf089a585
f010c5e2:	a0 85 a5 89 f0       	mov    0xf089a585,%al
f010c5e7:	83 c8 60             	or     $0x60,%eax
f010c5ea:	a2 85 a5 89 f0       	mov    %al,0xf089a585
f010c5ef:	a0 85 a5 89 f0       	mov    0xf089a585,%al
f010c5f4:	83 c8 80             	or     $0xffffff80,%eax
f010c5f7:	a2 85 a5 89 f0       	mov    %al,0xf089a585
f010c5fc:	b8 1e cf 10 f0       	mov    $0xf010cf1e,%eax
f010c601:	c1 e8 10             	shr    $0x10,%eax
f010c604:	66 a3 86 a5 89 f0    	mov    %ax,0xf089a586
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010c60a:	b8 24 cf 10 f0       	mov    $0xf010cf24,%eax
f010c60f:	66 a3 88 a5 89 f0    	mov    %ax,0xf089a588
f010c615:	66 c7 05 8a a5 89 f0 	movw   $0x8,0xf089a58a
f010c61c:	08 00 
f010c61e:	a0 8c a5 89 f0       	mov    0xf089a58c,%al
f010c623:	83 e0 e0             	and    $0xffffffe0,%eax
f010c626:	a2 8c a5 89 f0       	mov    %al,0xf089a58c
f010c62b:	a0 8c a5 89 f0       	mov    0xf089a58c,%al
f010c630:	83 e0 1f             	and    $0x1f,%eax
f010c633:	a2 8c a5 89 f0       	mov    %al,0xf089a58c
f010c638:	a0 8d a5 89 f0       	mov    0xf089a58d,%al
f010c63d:	83 e0 f0             	and    $0xfffffff0,%eax
f010c640:	83 c8 0e             	or     $0xe,%eax
f010c643:	a2 8d a5 89 f0       	mov    %al,0xf089a58d
f010c648:	a0 8d a5 89 f0       	mov    0xf089a58d,%al
f010c64d:	83 e0 ef             	and    $0xffffffef,%eax
f010c650:	a2 8d a5 89 f0       	mov    %al,0xf089a58d
f010c655:	a0 8d a5 89 f0       	mov    0xf089a58d,%al
f010c65a:	83 c8 60             	or     $0x60,%eax
f010c65d:	a2 8d a5 89 f0       	mov    %al,0xf089a58d
f010c662:	a0 8d a5 89 f0       	mov    0xf089a58d,%al
f010c667:	83 c8 80             	or     $0xffffff80,%eax
f010c66a:	a2 8d a5 89 f0       	mov    %al,0xf089a58d
f010c66f:	b8 24 cf 10 f0       	mov    $0xf010cf24,%eax
f010c674:	c1 e8 10             	shr    $0x10,%eax
f010c677:	66 a3 8e a5 89 f0    	mov    %ax,0xf089a58e
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010c67d:	b8 2a cf 10 f0       	mov    $0xf010cf2a,%eax
f010c682:	66 a3 90 a5 89 f0    	mov    %ax,0xf089a590
f010c688:	66 c7 05 92 a5 89 f0 	movw   $0x8,0xf089a592
f010c68f:	08 00 
f010c691:	a0 94 a5 89 f0       	mov    0xf089a594,%al
f010c696:	83 e0 e0             	and    $0xffffffe0,%eax
f010c699:	a2 94 a5 89 f0       	mov    %al,0xf089a594
f010c69e:	a0 94 a5 89 f0       	mov    0xf089a594,%al
f010c6a3:	83 e0 1f             	and    $0x1f,%eax
f010c6a6:	a2 94 a5 89 f0       	mov    %al,0xf089a594
f010c6ab:	a0 95 a5 89 f0       	mov    0xf089a595,%al
f010c6b0:	83 e0 f0             	and    $0xfffffff0,%eax
f010c6b3:	83 c8 0e             	or     $0xe,%eax
f010c6b6:	a2 95 a5 89 f0       	mov    %al,0xf089a595
f010c6bb:	a0 95 a5 89 f0       	mov    0xf089a595,%al
f010c6c0:	83 e0 ef             	and    $0xffffffef,%eax
f010c6c3:	a2 95 a5 89 f0       	mov    %al,0xf089a595
f010c6c8:	a0 95 a5 89 f0       	mov    0xf089a595,%al
f010c6cd:	83 c8 60             	or     $0x60,%eax
f010c6d0:	a2 95 a5 89 f0       	mov    %al,0xf089a595
f010c6d5:	a0 95 a5 89 f0       	mov    0xf089a595,%al
f010c6da:	83 c8 80             	or     $0xffffff80,%eax
f010c6dd:	a2 95 a5 89 f0       	mov    %al,0xf089a595
f010c6e2:	b8 2a cf 10 f0       	mov    $0xf010cf2a,%eax
f010c6e7:	c1 e8 10             	shr    $0x10,%eax
f010c6ea:	66 a3 96 a5 89 f0    	mov    %ax,0xf089a596
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010c6f0:	b8 30 cf 10 f0       	mov    $0xf010cf30,%eax
f010c6f5:	66 a3 98 a5 89 f0    	mov    %ax,0xf089a598
f010c6fb:	66 c7 05 9a a5 89 f0 	movw   $0x8,0xf089a59a
f010c702:	08 00 
f010c704:	a0 9c a5 89 f0       	mov    0xf089a59c,%al
f010c709:	83 e0 e0             	and    $0xffffffe0,%eax
f010c70c:	a2 9c a5 89 f0       	mov    %al,0xf089a59c
f010c711:	a0 9c a5 89 f0       	mov    0xf089a59c,%al
f010c716:	83 e0 1f             	and    $0x1f,%eax
f010c719:	a2 9c a5 89 f0       	mov    %al,0xf089a59c
f010c71e:	a0 9d a5 89 f0       	mov    0xf089a59d,%al
f010c723:	83 e0 f0             	and    $0xfffffff0,%eax
f010c726:	83 c8 0e             	or     $0xe,%eax
f010c729:	a2 9d a5 89 f0       	mov    %al,0xf089a59d
f010c72e:	a0 9d a5 89 f0       	mov    0xf089a59d,%al
f010c733:	83 e0 ef             	and    $0xffffffef,%eax
f010c736:	a2 9d a5 89 f0       	mov    %al,0xf089a59d
f010c73b:	a0 9d a5 89 f0       	mov    0xf089a59d,%al
f010c740:	83 c8 60             	or     $0x60,%eax
f010c743:	a2 9d a5 89 f0       	mov    %al,0xf089a59d
f010c748:	a0 9d a5 89 f0       	mov    0xf089a59d,%al
f010c74d:	83 c8 80             	or     $0xffffff80,%eax
f010c750:	a2 9d a5 89 f0       	mov    %al,0xf089a59d
f010c755:	b8 30 cf 10 f0       	mov    $0xf010cf30,%eax
f010c75a:	c1 e8 10             	shr    $0x10,%eax
f010c75d:	66 a3 9e a5 89 f0    	mov    %ax,0xf089a59e



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f010c763:	c7 05 44 ac 89 f0 00 	movl   $0xefc00000,0xf089ac44
f010c76a:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f010c76d:	66 c7 05 48 ac 89 f0 	movw   $0x10,0xf089ac48
f010c774:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f010c776:	66 c7 05 e8 38 19 f0 	movw   $0x68,0xf01938e8
f010c77d:	68 00 
f010c77f:	b8 40 ac 89 f0       	mov    $0xf089ac40,%eax
f010c784:	66 a3 ea 38 19 f0    	mov    %ax,0xf01938ea
f010c78a:	b8 40 ac 89 f0       	mov    $0xf089ac40,%eax
f010c78f:	c1 e8 10             	shr    $0x10,%eax
f010c792:	a2 ec 38 19 f0       	mov    %al,0xf01938ec
f010c797:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c79c:	83 e0 f0             	and    $0xfffffff0,%eax
f010c79f:	83 c8 09             	or     $0x9,%eax
f010c7a2:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c7a7:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c7ac:	83 c8 10             	or     $0x10,%eax
f010c7af:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c7b4:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c7b9:	83 e0 9f             	and    $0xffffff9f,%eax
f010c7bc:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c7c1:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c7c6:	83 c8 80             	or     $0xffffff80,%eax
f010c7c9:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c7ce:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c7d3:	83 e0 f0             	and    $0xfffffff0,%eax
f010c7d6:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c7db:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c7e0:	83 e0 ef             	and    $0xffffffef,%eax
f010c7e3:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c7e8:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c7ed:	83 e0 df             	and    $0xffffffdf,%eax
f010c7f0:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c7f5:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c7fa:	83 c8 40             	or     $0x40,%eax
f010c7fd:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c802:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c807:	83 e0 7f             	and    $0x7f,%eax
f010c80a:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c80f:	b8 40 ac 89 f0       	mov    $0xf089ac40,%eax
f010c814:	c1 e8 18             	shr    $0x18,%eax
f010c817:	a2 ef 38 19 f0       	mov    %al,0xf01938ef
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f010c81c:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c821:	83 e0 ef             	and    $0xffffffef,%eax
f010c824:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c829:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010c82f:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f010c833:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f010c836:	0f 01 1d 1c 3d 19 f0 	lidtl  0xf0193d1c
}
f010c83d:	90                   	nop
f010c83e:	c9                   	leave  
f010c83f:	c3                   	ret    

f010c840 <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010c840:	55                   	push   %ebp
f010c841:	89 e5                	mov    %esp,%ebp
f010c843:	53                   	push   %ebx
f010c844:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010c847:	83 ec 08             	sub    $0x8,%esp
f010c84a:	ff 75 08             	pushl  0x8(%ebp)
f010c84d:	68 bb 7a 13 f0       	push   $0xf0137abb
f010c852:	e8 b7 44 ff ff       	call   f0100d0e <cprintf>
f010c857:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010c85a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c85d:	83 ec 0c             	sub    $0xc,%esp
f010c860:	50                   	push   %eax
f010c861:	e8 fd 00 00 00       	call   f010c963 <print_regs>
f010c866:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010c869:	8b 45 08             	mov    0x8(%ebp),%eax
f010c86c:	8b 40 20             	mov    0x20(%eax),%eax
f010c86f:	0f b7 c0             	movzwl %ax,%eax
f010c872:	83 ec 08             	sub    $0x8,%esp
f010c875:	50                   	push   %eax
f010c876:	68 cd 7a 13 f0       	push   $0xf0137acd
f010c87b:	e8 8e 44 ff ff       	call   f0100d0e <cprintf>
f010c880:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010c883:	8b 45 08             	mov    0x8(%ebp),%eax
f010c886:	8b 40 24             	mov    0x24(%eax),%eax
f010c889:	0f b7 c0             	movzwl %ax,%eax
f010c88c:	83 ec 08             	sub    $0x8,%esp
f010c88f:	50                   	push   %eax
f010c890:	68 e0 7a 13 f0       	push   $0xf0137ae0
f010c895:	e8 74 44 ff ff       	call   f0100d0e <cprintf>
f010c89a:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010c89d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8a0:	8b 58 28             	mov    0x28(%eax),%ebx
f010c8a3:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8a6:	8b 40 28             	mov    0x28(%eax),%eax
f010c8a9:	83 ec 0c             	sub    $0xc,%esp
f010c8ac:	50                   	push   %eax
f010c8ad:	e8 d0 ee ff ff       	call   f010b782 <trapname>
f010c8b2:	83 c4 10             	add    $0x10,%esp
f010c8b5:	89 c2                	mov    %eax,%edx
f010c8b7:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8ba:	8b 40 28             	mov    0x28(%eax),%eax
f010c8bd:	53                   	push   %ebx
f010c8be:	52                   	push   %edx
f010c8bf:	50                   	push   %eax
f010c8c0:	68 f3 7a 13 f0       	push   $0xf0137af3
f010c8c5:	e8 44 44 ff ff       	call   f0100d0e <cprintf>
f010c8ca:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010c8cd:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8d0:	8b 40 2c             	mov    0x2c(%eax),%eax
f010c8d3:	83 ec 08             	sub    $0x8,%esp
f010c8d6:	50                   	push   %eax
f010c8d7:	68 0a 7b 13 f0       	push   $0xf0137b0a
f010c8dc:	e8 2d 44 ff ff       	call   f0100d0e <cprintf>
f010c8e1:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010c8e4:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8e7:	8b 40 30             	mov    0x30(%eax),%eax
f010c8ea:	83 ec 08             	sub    $0x8,%esp
f010c8ed:	50                   	push   %eax
f010c8ee:	68 19 7b 13 f0       	push   $0xf0137b19
f010c8f3:	e8 16 44 ff ff       	call   f0100d0e <cprintf>
f010c8f8:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010c8fb:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8fe:	8b 40 34             	mov    0x34(%eax),%eax
f010c901:	0f b7 c0             	movzwl %ax,%eax
f010c904:	83 ec 08             	sub    $0x8,%esp
f010c907:	50                   	push   %eax
f010c908:	68 28 7b 13 f0       	push   $0xf0137b28
f010c90d:	e8 fc 43 ff ff       	call   f0100d0e <cprintf>
f010c912:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010c915:	8b 45 08             	mov    0x8(%ebp),%eax
f010c918:	8b 40 38             	mov    0x38(%eax),%eax
f010c91b:	83 ec 08             	sub    $0x8,%esp
f010c91e:	50                   	push   %eax
f010c91f:	68 3b 7b 13 f0       	push   $0xf0137b3b
f010c924:	e8 e5 43 ff ff       	call   f0100d0e <cprintf>
f010c929:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010c92c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c92f:	8b 40 3c             	mov    0x3c(%eax),%eax
f010c932:	83 ec 08             	sub    $0x8,%esp
f010c935:	50                   	push   %eax
f010c936:	68 4a 7b 13 f0       	push   $0xf0137b4a
f010c93b:	e8 ce 43 ff ff       	call   f0100d0e <cprintf>
f010c940:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010c943:	8b 45 08             	mov    0x8(%ebp),%eax
f010c946:	8b 40 40             	mov    0x40(%eax),%eax
f010c949:	0f b7 c0             	movzwl %ax,%eax
f010c94c:	83 ec 08             	sub    $0x8,%esp
f010c94f:	50                   	push   %eax
f010c950:	68 59 7b 13 f0       	push   $0xf0137b59
f010c955:	e8 b4 43 ff ff       	call   f0100d0e <cprintf>
f010c95a:	83 c4 10             	add    $0x10,%esp
}
f010c95d:	90                   	nop
f010c95e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010c961:	c9                   	leave  
f010c962:	c3                   	ret    

f010c963 <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010c963:	55                   	push   %ebp
f010c964:	89 e5                	mov    %esp,%ebp
f010c966:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010c969:	8b 45 08             	mov    0x8(%ebp),%eax
f010c96c:	8b 00                	mov    (%eax),%eax
f010c96e:	83 ec 08             	sub    $0x8,%esp
f010c971:	50                   	push   %eax
f010c972:	68 6c 7b 13 f0       	push   $0xf0137b6c
f010c977:	e8 92 43 ff ff       	call   f0100d0e <cprintf>
f010c97c:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010c97f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c982:	8b 40 04             	mov    0x4(%eax),%eax
f010c985:	83 ec 08             	sub    $0x8,%esp
f010c988:	50                   	push   %eax
f010c989:	68 7b 7b 13 f0       	push   $0xf0137b7b
f010c98e:	e8 7b 43 ff ff       	call   f0100d0e <cprintf>
f010c993:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010c996:	8b 45 08             	mov    0x8(%ebp),%eax
f010c999:	8b 40 08             	mov    0x8(%eax),%eax
f010c99c:	83 ec 08             	sub    $0x8,%esp
f010c99f:	50                   	push   %eax
f010c9a0:	68 8a 7b 13 f0       	push   $0xf0137b8a
f010c9a5:	e8 64 43 ff ff       	call   f0100d0e <cprintf>
f010c9aa:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010c9ad:	8b 45 08             	mov    0x8(%ebp),%eax
f010c9b0:	8b 40 0c             	mov    0xc(%eax),%eax
f010c9b3:	83 ec 08             	sub    $0x8,%esp
f010c9b6:	50                   	push   %eax
f010c9b7:	68 99 7b 13 f0       	push   $0xf0137b99
f010c9bc:	e8 4d 43 ff ff       	call   f0100d0e <cprintf>
f010c9c1:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010c9c4:	8b 45 08             	mov    0x8(%ebp),%eax
f010c9c7:	8b 40 10             	mov    0x10(%eax),%eax
f010c9ca:	83 ec 08             	sub    $0x8,%esp
f010c9cd:	50                   	push   %eax
f010c9ce:	68 a8 7b 13 f0       	push   $0xf0137ba8
f010c9d3:	e8 36 43 ff ff       	call   f0100d0e <cprintf>
f010c9d8:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010c9db:	8b 45 08             	mov    0x8(%ebp),%eax
f010c9de:	8b 40 14             	mov    0x14(%eax),%eax
f010c9e1:	83 ec 08             	sub    $0x8,%esp
f010c9e4:	50                   	push   %eax
f010c9e5:	68 b7 7b 13 f0       	push   $0xf0137bb7
f010c9ea:	e8 1f 43 ff ff       	call   f0100d0e <cprintf>
f010c9ef:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010c9f2:	8b 45 08             	mov    0x8(%ebp),%eax
f010c9f5:	8b 40 18             	mov    0x18(%eax),%eax
f010c9f8:	83 ec 08             	sub    $0x8,%esp
f010c9fb:	50                   	push   %eax
f010c9fc:	68 c6 7b 13 f0       	push   $0xf0137bc6
f010ca01:	e8 08 43 ff ff       	call   f0100d0e <cprintf>
f010ca06:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010ca09:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca0c:	8b 40 1c             	mov    0x1c(%eax),%eax
f010ca0f:	83 ec 08             	sub    $0x8,%esp
f010ca12:	50                   	push   %eax
f010ca13:	68 d5 7b 13 f0       	push   $0xf0137bd5
f010ca18:	e8 f1 42 ff ff       	call   f0100d0e <cprintf>
f010ca1d:	83 c4 10             	add    $0x10,%esp
}
f010ca20:	90                   	nop
f010ca21:	c9                   	leave  
f010ca22:	c3                   	ret    

f010ca23 <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010ca23:	55                   	push   %ebp
f010ca24:	89 e5                	mov    %esp,%ebp
f010ca26:	57                   	push   %edi
f010ca27:	56                   	push   %esi
f010ca28:	53                   	push   %ebx
f010ca29:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f010ca2c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca2f:	8b 40 28             	mov    0x28(%eax),%eax
f010ca32:	83 f8 0e             	cmp    $0xe,%eax
f010ca35:	75 29                	jne    f010ca60 <trap_dispatch+0x3d>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010ca37:	83 ec 0c             	sub    $0xc,%esp
f010ca3a:	6a 01                	push   $0x1
f010ca3c:	e8 fc 18 00 00       	call   f010e33d <isPageReplacmentAlgorithmLRU>
f010ca41:	83 c4 10             	add    $0x10,%esp
f010ca44:	85 c0                	test   %eax,%eax
f010ca46:	74 05                	je     f010ca4d <trap_dispatch+0x2a>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010ca48:	e8 df 8f ff ff       	call   f0105a2c <update_WS_time_stamps>
		}
		fault_handler(tf);
f010ca4d:	83 ec 0c             	sub    $0xc,%esp
f010ca50:	ff 75 08             	pushl  0x8(%ebp)
f010ca53:	e8 51 02 00 00       	call   f010cca9 <fault_handler>
f010ca58:	83 c4 10             	add    $0x10,%esp
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010ca5b:	e9 bb 00 00 00       	jmp    f010cb1b <trap_dispatch+0xf8>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010ca60:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca63:	8b 40 28             	mov    0x28(%eax),%eax
f010ca66:	83 f8 30             	cmp    $0x30,%eax
f010ca69:	75 42                	jne    f010caad <trap_dispatch+0x8a>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010ca6b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca6e:	8b 78 04             	mov    0x4(%eax),%edi
f010ca71:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca74:	8b 30                	mov    (%eax),%esi
f010ca76:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca79:	8b 58 10             	mov    0x10(%eax),%ebx
f010ca7c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca7f:	8b 48 18             	mov    0x18(%eax),%ecx
f010ca82:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca85:	8b 50 14             	mov    0x14(%eax),%edx
f010ca88:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca8b:	8b 40 1c             	mov    0x1c(%eax),%eax
f010ca8e:	83 ec 08             	sub    $0x8,%esp
f010ca91:	57                   	push   %edi
f010ca92:	56                   	push   %esi
f010ca93:	53                   	push   %ebx
f010ca94:	51                   	push   %ecx
f010ca95:	52                   	push   %edx
f010ca96:	50                   	push   %eax
f010ca97:	e8 ec 0f 00 00       	call   f010da88 <syscall>
f010ca9c:	83 c4 20             	add    $0x20,%esp
f010ca9f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f010caa2:	8b 45 08             	mov    0x8(%ebp),%eax
f010caa5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010caa8:	89 50 1c             	mov    %edx,0x1c(%eax)
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010caab:	eb 6e                	jmp    f010cb1b <trap_dispatch+0xf8>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010caad:	8b 45 08             	mov    0x8(%ebp),%eax
f010cab0:	8b 40 28             	mov    0x28(%eax),%eax
f010cab3:	83 f8 08             	cmp    $0x8,%eax
f010cab6:	75 17                	jne    f010cacf <trap_dispatch+0xac>
	{
		panic("double fault!!");
f010cab8:	83 ec 04             	sub    $0x4,%esp
f010cabb:	68 e4 7b 13 f0       	push   $0xf0137be4
f010cac0:	68 e7 00 00 00       	push   $0xe7
f010cac5:	68 f3 7b 13 f0       	push   $0xf0137bf3
f010caca:	e8 36 37 ff ff       	call   f0100205 <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f010cacf:	8b 45 08             	mov    0x8(%ebp),%eax
f010cad2:	8b 40 28             	mov    0x28(%eax),%eax
f010cad5:	83 f8 20             	cmp    $0x20,%eax
f010cad8:	75 07                	jne    f010cae1 <trap_dispatch+0xbe>
	{
		clock_interrupt_handler() ;
f010cada:	e8 2c 8f ff ff       	call   f0105a0b <clock_interrupt_handler>
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010cadf:	eb 3a                	jmp    f010cb1b <trap_dispatch+0xf8>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f010cae1:	8b 45 08             	mov    0x8(%ebp),%eax
f010cae4:	8b 40 34             	mov    0x34(%eax),%eax
f010cae7:	66 83 f8 08          	cmp    $0x8,%ax
f010caeb:	75 17                	jne    f010cb04 <trap_dispatch+0xe1>
		{
			panic("unhandled trap in kernel");
f010caed:	83 ec 04             	sub    $0x4,%esp
f010caf0:	68 04 7c 13 f0       	push   $0xf0137c04
f010caf5:	68 f4 00 00 00       	push   $0xf4
f010cafa:	68 f3 7b 13 f0       	push   $0xf0137bf3
f010caff:	e8 01 37 ff ff       	call   f0100205 <_panic>
		}
		else {
			//env_destroy(curenv);
			panic("unhandled trap in user program");
f010cb04:	83 ec 04             	sub    $0x4,%esp
f010cb07:	68 20 7c 13 f0       	push   $0xf0137c20
f010cb0c:	68 f8 00 00 00       	push   $0xf8
f010cb11:	68 f3 7b 13 f0       	push   $0xf0137bf3
f010cb16:	e8 ea 36 ff ff       	call   f0100205 <_panic>

			return;
		}
	}
	return;
}
f010cb1b:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010cb1e:	5b                   	pop    %ebx
f010cb1f:	5e                   	pop    %esi
f010cb20:	5f                   	pop    %edi
f010cb21:	5d                   	pop    %ebp
f010cb22:	c3                   	ret    

f010cb23 <trap>:

void trap(struct Trapframe *tf)
{
f010cb23:	55                   	push   %ebp
f010cb24:	89 e5                	mov    %esp,%ebp
f010cb26:	57                   	push   %edi
f010cb27:	56                   	push   %esi
f010cb28:	53                   	push   %ebx
f010cb29:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f010cb2c:	e8 63 76 ff ff       	call   f0104194 <kclock_stop>

	int userTrap = 0;
f010cb31:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010cb38:	8b 45 08             	mov    0x8(%ebp),%eax
f010cb3b:	8b 40 34             	mov    0x34(%eax),%eax
f010cb3e:	0f b7 c0             	movzwl %ax,%eax
f010cb41:	83 e0 03             	and    $0x3,%eax
f010cb44:	83 f8 03             	cmp    $0x3,%eax
f010cb47:	75 49                	jne    f010cb92 <trap+0x6f>
		assert(curenv);
f010cb49:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010cb4e:	85 c0                	test   %eax,%eax
f010cb50:	75 19                	jne    f010cb6b <trap+0x48>
f010cb52:	68 3f 7c 13 f0       	push   $0xf0137c3f
f010cb57:	68 46 7c 13 f0       	push   $0xf0137c46
f010cb5c:	68 06 01 00 00       	push   $0x106
f010cb61:	68 f3 7b 13 f0       	push   $0xf0137bf3
f010cb66:	e8 9a 36 ff ff       	call   f0100205 <_panic>
		curenv->env_tf = *tf;
f010cb6b:	8b 15 f4 a3 89 f0    	mov    0xf089a3f4,%edx
f010cb71:	8b 45 08             	mov    0x8(%ebp),%eax
f010cb74:	89 c3                	mov    %eax,%ebx
f010cb76:	b8 11 00 00 00       	mov    $0x11,%eax
f010cb7b:	89 d7                	mov    %edx,%edi
f010cb7d:	89 de                	mov    %ebx,%esi
f010cb7f:	89 c1                	mov    %eax,%ecx
f010cb81:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010cb83:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010cb88:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f010cb8b:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f010cb92:	8b 45 08             	mov    0x8(%ebp),%eax
f010cb95:	8b 40 28             	mov    0x28(%eax),%eax
f010cb98:	83 f8 20             	cmp    $0x20,%eax
f010cb9b:	75 40                	jne    f010cbdd <trap+0xba>
	{
		//		uint16 cnt0 = kclock_read_cnt0() ;
		//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f010cb9d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010cba1:	0f 84 a6 00 00 00    	je     f010cc4d <trap+0x12a>
		{
			assert(curenv);
f010cba7:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010cbac:	85 c0                	test   %eax,%eax
f010cbae:	75 19                	jne    f010cbc9 <trap+0xa6>
f010cbb0:	68 3f 7c 13 f0       	push   $0xf0137c3f
f010cbb5:	68 46 7c 13 f0       	push   $0xf0137c46
f010cbba:	68 12 01 00 00       	push   $0x112
f010cbbf:	68 f3 7b 13 f0       	push   $0xf0137bf3
f010cbc4:	e8 3c 36 ff ff       	call   f0100205 <_panic>
			curenv->nClocks++ ;
f010cbc9:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010cbce:	8b 90 a4 05 00 00    	mov    0x5a4(%eax),%edx
f010cbd4:	42                   	inc    %edx
f010cbd5:	89 90 a4 05 00 00    	mov    %edx,0x5a4(%eax)
f010cbdb:	eb 70                	jmp    f010cc4d <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f010cbdd:	8b 45 08             	mov    0x8(%ebp),%eax
f010cbe0:	8b 40 28             	mov    0x28(%eax),%eax
f010cbe3:	83 f8 0e             	cmp    $0xe,%eax
f010cbe6:	75 65                	jne    f010cc4d <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f010cbe8:	a0 a8 ac 89 f0       	mov    0xf089aca8,%al
f010cbed:	84 c0                	test   %al,%al
f010cbef:	74 5c                	je     f010cc4d <trap+0x12a>
			if (userTrap){
f010cbf1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010cbf5:	74 2c                	je     f010cc23 <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f010cbf7:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010cbfc:	8b 15 f4 a3 89 f0    	mov    0xf089a3f4,%edx
f010cc02:	8b 52 30             	mov    0x30(%edx),%edx
f010cc05:	89 d1                	mov    %edx,%ecx
f010cc07:	8a 15 a8 ac 89 f0    	mov    0xf089aca8,%dl
f010cc0d:	0f b6 d2             	movzbl %dl,%edx
f010cc10:	01 ca                	add    %ecx,%edx
f010cc12:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f010cc15:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010cc1a:	83 ec 0c             	sub    $0xc,%esp
f010cc1d:	50                   	push   %eax
f010cc1e:	e8 43 d4 ff ff       	call   f010a066 <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010cc23:	8b 45 08             	mov    0x8(%ebp),%eax
f010cc26:	8b 40 30             	mov    0x30(%eax),%eax
f010cc29:	89 c2                	mov    %eax,%edx
f010cc2b:	a0 a8 ac 89 f0       	mov    0xf089aca8,%al
f010cc30:	0f b6 c0             	movzbl %al,%eax
f010cc33:	01 d0                	add    %edx,%eax
f010cc35:	89 c2                	mov    %eax,%edx
f010cc37:	8b 45 08             	mov    0x8(%ebp),%eax
f010cc3a:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f010cc3d:	e8 7d 75 ff ff       	call   f01041bf <kclock_resume>
				env_pop_tf(tf);
f010cc42:	83 ec 0c             	sub    $0xc,%esp
f010cc45:	ff 75 08             	pushl  0x8(%ebp)
f010cc48:	e8 7c d5 ff ff       	call   f010a1c9 <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f010cc4d:	83 ec 0c             	sub    $0xc,%esp
f010cc50:	ff 75 08             	pushl  0x8(%ebp)
f010cc53:	e8 cb fd ff ff       	call   f010ca23 <trap_dispatch>
f010cc58:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f010cc5b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010cc5f:	74 3d                	je     f010cc9e <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f010cc61:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010cc66:	85 c0                	test   %eax,%eax
f010cc68:	74 0d                	je     f010cc77 <trap+0x154>
f010cc6a:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010cc6f:	8b 40 54             	mov    0x54(%eax),%eax
f010cc72:	83 f8 02             	cmp    $0x2,%eax
f010cc75:	74 19                	je     f010cc90 <trap+0x16d>
f010cc77:	68 5c 7c 13 f0       	push   $0xf0137c5c
f010cc7c:	68 46 7c 13 f0       	push   $0xf0137c46
f010cc81:	68 27 01 00 00       	push   $0x127
f010cc86:	68 f3 7b 13 f0       	push   $0xf0137bf3
f010cc8b:	e8 75 35 ff ff       	call   f0100205 <_panic>
		env_run(curenv);
f010cc90:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010cc95:	83 ec 0c             	sub    $0xc,%esp
f010cc98:	50                   	push   %eax
f010cc99:	e8 c8 d3 ff ff       	call   f010a066 <env_run>
	/* 2019
	 * If trap from kernel, then return to the called kernel function using the passed param "tf" not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f010cc9e:	83 ec 0c             	sub    $0xc,%esp
f010cca1:	ff 75 08             	pushl  0x8(%ebp)
f010cca4:	e8 20 d5 ff ff       	call   f010a1c9 <env_pop_tf>

f010cca9 <fault_handler>:

/*2022*/
uint32 last_fault_va = 0;
int8 num_repeated_fault  = 0;
void fault_handler(struct Trapframe *tf)
{
f010cca9:	55                   	push   %ebp
f010ccaa:	89 e5                	mov    %esp,%ebp
f010ccac:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f010ccaf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010ccb6:	8b 45 08             	mov    0x8(%ebp),%eax
f010ccb9:	8b 40 34             	mov    0x34(%eax),%eax
f010ccbc:	0f b7 c0             	movzwl %ax,%eax
f010ccbf:	83 e0 03             	and    $0x3,%eax
f010ccc2:	83 f8 03             	cmp    $0x3,%eax
f010ccc5:	75 07                	jne    f010ccce <fault_handler+0x25>
		userTrap = 1;
f010ccc7:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010ccce:	0f 20 d0             	mov    %cr2,%eax
f010ccd1:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f010ccd4:	8b 45 e0             	mov    -0x20(%ebp),%eax
	}
	//print_trapframe(tf);
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f010ccd7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	/******************************************************/
	/*2022*///If same fault va for 3 times, then panic
	if (last_fault_va == fault_va)
f010ccda:	a1 20 ac 89 f0       	mov    0xf089ac20,%eax
f010ccdf:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010cce2:	75 2b                	jne    f010cd0f <fault_handler+0x66>
	{
		num_repeated_fault++ ;
f010cce4:	a0 24 ac 89 f0       	mov    0xf089ac24,%al
f010cce9:	40                   	inc    %eax
f010ccea:	a2 24 ac 89 f0       	mov    %al,0xf089ac24
		if (num_repeated_fault == 3)
f010ccef:	a0 24 ac 89 f0       	mov    0xf089ac24,%al
f010ccf4:	3c 03                	cmp    $0x3,%al
f010ccf6:	75 1e                	jne    f010cd16 <fault_handler+0x6d>
			panic("Failed to handle fault at va=%x: same va is faulted for 3 successive times\n", fault_va);
f010ccf8:	ff 75 ec             	pushl  -0x14(%ebp)
f010ccfb:	68 8c 7c 13 f0       	push   $0xf0137c8c
f010cd00:	68 47 01 00 00       	push   $0x147
f010cd05:	68 f3 7b 13 f0       	push   $0xf0137bf3
f010cd0a:	e8 f6 34 ff ff       	call   f0100205 <_panic>
	}
	else
	{
		num_repeated_fault = 0;
f010cd0f:	c6 05 24 ac 89 f0 00 	movb   $0x0,0xf089ac24
	}
	last_fault_va = fault_va ;
f010cd16:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cd19:	a3 20 ac 89 f0       	mov    %eax,0xf089ac20
	/******************************************************/
	//2017: Check stack overflow for Kernel
	if (!userTrap)
f010cd1e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cd22:	75 29                	jne    f010cd4d <fault_handler+0xa4>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f010cd24:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f010cd2b:	77 40                	ja     f010cd6d <fault_handler+0xc4>
f010cd2d:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f010cd34:	76 37                	jbe    f010cd6d <fault_handler+0xc4>
			panic("Kernel: stack overflow exception!");
f010cd36:	83 ec 04             	sub    $0x4,%esp
f010cd39:	68 d8 7c 13 f0       	push   $0xf0137cd8
f010cd3e:	68 53 01 00 00       	push   $0x153
f010cd43:	68 f3 7b 13 f0       	push   $0xf0137bf3
f010cd48:	e8 b8 34 ff ff       	call   f0100205 <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f010cd4d:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010cd54:	76 17                	jbe    f010cd6d <fault_handler+0xc4>
			panic("User: stack underflow exception!");
f010cd56:	83 ec 04             	sub    $0x4,%esp
f010cd59:	68 fc 7c 13 f0       	push   $0xf0137cfc
f010cd5e:	68 59 01 00 00       	push   $0x159
f010cd63:	68 f3 7b 13 f0       	push   $0xf0137bf3
f010cd68:	e8 98 34 ff ff       	call   f0100205 <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f010cd6d:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010cd72:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (faulted_env->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010cd75:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cd78:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cd7b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010cd7e:	c1 ea 16             	shr    $0x16,%edx
f010cd81:	c1 e2 02             	shl    $0x2,%edx
f010cd84:	01 d0                	add    %edx,%eax
f010cd86:	8b 00                	mov    (%eax),%eax
f010cd88:	83 e0 01             	and    $0x1,%eax
f010cd8b:	85 c0                	test   %eax,%eax
f010cd8d:	75 28                	jne    f010cdb7 <fault_handler+0x10e>
	{
		// we have a table fault =============================================================
		//cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f010cd8f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cd92:	8b 80 38 05 00 00    	mov    0x538(%eax),%eax
f010cd98:	8d 50 01             	lea    0x1(%eax),%edx
f010cd9b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cd9e:	89 90 38 05 00 00    	mov    %edx,0x538(%eax)

		table_fault_handler(faulted_env, fault_va);
f010cda4:	83 ec 08             	sub    $0x8,%esp
f010cda7:	ff 75 ec             	pushl  -0x14(%ebp)
f010cdaa:	ff 75 e8             	pushl  -0x18(%ebp)
f010cdad:	e8 70 16 00 00       	call   f010e422 <table_fault_handler>
f010cdb2:	83 c4 10             	add    $0x10,%esp
f010cdb5:	eb 7b                	jmp    f010ce32 <fault_handler+0x189>
	}
	else
	{
		/*2022: Check if fault due to Access Rights */
		int perms = pt_get_page_permissions(faulted_env->env_page_directory, fault_va);
f010cdb7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cdba:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cdbd:	83 ec 08             	sub    $0x8,%esp
f010cdc0:	ff 75 ec             	pushl  -0x14(%ebp)
f010cdc3:	50                   	push   %eax
f010cdc4:	e8 9e b3 ff ff       	call   f0108167 <pt_get_page_permissions>
f010cdc9:	83 c4 10             	add    $0x10,%esp
f010cdcc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (perms & PERM_PRESENT)
f010cdcf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010cdd2:	83 e0 01             	and    $0x1,%eax
f010cdd5:	85 c0                	test   %eax,%eax
f010cdd7:	74 17                	je     f010cdf0 <fault_handler+0x147>
			panic("Page @va=%x is exist! page fault due to violation of ACCESS RIGHTS\n", fault_va) ;
f010cdd9:	ff 75 ec             	pushl  -0x14(%ebp)
f010cddc:	68 20 7d 13 f0       	push   $0xf0137d20
f010cde1:	68 6e 01 00 00       	push   $0x16e
f010cde6:	68 f3 7b 13 f0       	push   $0xf0137bf3
f010cdeb:	e8 15 34 ff ff       	call   f0100205 <_panic>
		/*============================================================================================*/


		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010cdf0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cdf3:	8b 80 34 05 00 00    	mov    0x534(%eax),%eax
f010cdf9:	8d 50 01             	lea    0x1(%eax),%edx
f010cdfc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cdff:	89 90 34 05 00 00    	mov    %edx,0x534(%eax)

		//cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//cprintf("\nPage working set BEFORE fault handler...\n");
		//env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010ce05:	e8 f6 15 00 00       	call   f010e400 <isBufferingEnabled>
f010ce0a:	84 c0                	test   %al,%al
f010ce0c:	74 13                	je     f010ce21 <fault_handler+0x178>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010ce0e:	83 ec 08             	sub    $0x8,%esp
f010ce11:	ff 75 ec             	pushl  -0x14(%ebp)
f010ce14:	ff 75 e8             	pushl  -0x18(%ebp)
f010ce17:	e8 dc 18 00 00       	call   f010e6f8 <__page_fault_handler_with_buffering>
f010ce1c:	83 c4 10             	add    $0x10,%esp
f010ce1f:	eb 11                	jmp    f010ce32 <fault_handler+0x189>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010ce21:	83 ec 08             	sub    $0x8,%esp
f010ce24:	ff 75 ec             	pushl  -0x14(%ebp)
f010ce27:	ff 75 e8             	pushl  -0x18(%ebp)
f010ce2a:	e8 14 16 00 00       	call   f010e443 <page_fault_handler>
f010ce2f:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010ce32:	0f 20 d8             	mov    %cr3,%eax
f010ce35:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010ce38:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ce3b:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f010ce3e:	90                   	nop
f010ce3f:	c9                   	leave  
f010ce40:	c3                   	ret    
f010ce41:	90                   	nop

f010ce42 <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f010ce42:	6a 0e                	push   $0xe
f010ce44:	e9 ed 00 00 00       	jmp    f010cf36 <_alltraps>
f010ce49:	90                   	nop

f010ce4a <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f010ce4a:	6a 00                	push   $0x0
f010ce4c:	6a 30                	push   $0x30
f010ce4e:	e9 e3 00 00 00       	jmp    f010cf36 <_alltraps>
f010ce53:	90                   	nop

f010ce54 <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f010ce54:	6a 08                	push   $0x8
f010ce56:	e9 db 00 00 00       	jmp    f010cf36 <_alltraps>
f010ce5b:	90                   	nop

f010ce5c <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f010ce5c:	6a 00                	push   $0x0
f010ce5e:	6a 00                	push   $0x0
f010ce60:	e9 d1 00 00 00       	jmp    f010cf36 <_alltraps>
f010ce65:	90                   	nop

f010ce66 <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f010ce66:	6a 00                	push   $0x0
f010ce68:	6a 01                	push   $0x1
f010ce6a:	e9 c7 00 00 00       	jmp    f010cf36 <_alltraps>
f010ce6f:	90                   	nop

f010ce70 <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f010ce70:	6a 00                	push   $0x0
f010ce72:	6a 02                	push   $0x2
f010ce74:	e9 bd 00 00 00       	jmp    f010cf36 <_alltraps>
f010ce79:	90                   	nop

f010ce7a <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f010ce7a:	6a 00                	push   $0x0
f010ce7c:	6a 03                	push   $0x3
f010ce7e:	e9 b3 00 00 00       	jmp    f010cf36 <_alltraps>
f010ce83:	90                   	nop

f010ce84 <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f010ce84:	6a 00                	push   $0x0
f010ce86:	6a 04                	push   $0x4
f010ce88:	e9 a9 00 00 00       	jmp    f010cf36 <_alltraps>
f010ce8d:	90                   	nop

f010ce8e <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f010ce8e:	6a 00                	push   $0x0
f010ce90:	6a 05                	push   $0x5
f010ce92:	e9 9f 00 00 00       	jmp    f010cf36 <_alltraps>
f010ce97:	90                   	nop

f010ce98 <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f010ce98:	6a 00                	push   $0x0
f010ce9a:	6a 06                	push   $0x6
f010ce9c:	e9 95 00 00 00       	jmp    f010cf36 <_alltraps>
f010cea1:	90                   	nop

f010cea2 <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f010cea2:	6a 00                	push   $0x0
f010cea4:	6a 07                	push   $0x7
f010cea6:	e9 8b 00 00 00       	jmp    f010cf36 <_alltraps>
f010ceab:	90                   	nop

f010ceac <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f010ceac:	6a 0a                	push   $0xa
f010ceae:	e9 83 00 00 00       	jmp    f010cf36 <_alltraps>
f010ceb3:	90                   	nop

f010ceb4 <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f010ceb4:	6a 0b                	push   $0xb
f010ceb6:	eb 7e                	jmp    f010cf36 <_alltraps>

f010ceb8 <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f010ceb8:	6a 0c                	push   $0xc
f010ceba:	eb 7a                	jmp    f010cf36 <_alltraps>

f010cebc <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f010cebc:	6a 0d                	push   $0xd
f010cebe:	eb 76                	jmp    f010cf36 <_alltraps>

f010cec0 <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f010cec0:	6a 00                	push   $0x0
f010cec2:	6a 10                	push   $0x10
f010cec4:	eb 70                	jmp    f010cf36 <_alltraps>

f010cec6 <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f010cec6:	6a 11                	push   $0x11
f010cec8:	eb 6c                	jmp    f010cf36 <_alltraps>

f010ceca <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f010ceca:	6a 00                	push   $0x0
f010cecc:	6a 12                	push   $0x12
f010cece:	eb 66                	jmp    f010cf36 <_alltraps>

f010ced0 <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f010ced0:	6a 00                	push   $0x0
f010ced2:	6a 13                	push   $0x13
f010ced4:	eb 60                	jmp    f010cf36 <_alltraps>

f010ced6 <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f010ced6:	6a 00                	push   $0x0
f010ced8:	6a 20                	push   $0x20
f010ceda:	eb 5a                	jmp    f010cf36 <_alltraps>

f010cedc <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f010cedc:	6a 00                	push   $0x0
f010cede:	6a 21                	push   $0x21
f010cee0:	eb 54                	jmp    f010cf36 <_alltraps>

f010cee2 <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010cee2:	6a 00                	push   $0x0
f010cee4:	6a 22                	push   $0x22
f010cee6:	eb 4e                	jmp    f010cf36 <_alltraps>

f010cee8 <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010cee8:	6a 00                	push   $0x0
f010ceea:	6a 23                	push   $0x23
f010ceec:	eb 48                	jmp    f010cf36 <_alltraps>

f010ceee <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010ceee:	6a 00                	push   $0x0
f010cef0:	6a 24                	push   $0x24
f010cef2:	eb 42                	jmp    f010cf36 <_alltraps>

f010cef4 <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010cef4:	6a 00                	push   $0x0
f010cef6:	6a 25                	push   $0x25
f010cef8:	eb 3c                	jmp    f010cf36 <_alltraps>

f010cefa <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010cefa:	6a 00                	push   $0x0
f010cefc:	6a 26                	push   $0x26
f010cefe:	eb 36                	jmp    f010cf36 <_alltraps>

f010cf00 <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010cf00:	6a 00                	push   $0x0
f010cf02:	6a 27                	push   $0x27
f010cf04:	eb 30                	jmp    f010cf36 <_alltraps>

f010cf06 <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010cf06:	6a 00                	push   $0x0
f010cf08:	6a 28                	push   $0x28
f010cf0a:	eb 2a                	jmp    f010cf36 <_alltraps>

f010cf0c <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010cf0c:	6a 00                	push   $0x0
f010cf0e:	6a 29                	push   $0x29
f010cf10:	eb 24                	jmp    f010cf36 <_alltraps>

f010cf12 <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010cf12:	6a 00                	push   $0x0
f010cf14:	6a 2a                	push   $0x2a
f010cf16:	eb 1e                	jmp    f010cf36 <_alltraps>

f010cf18 <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010cf18:	6a 00                	push   $0x0
f010cf1a:	6a 2b                	push   $0x2b
f010cf1c:	eb 18                	jmp    f010cf36 <_alltraps>

f010cf1e <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010cf1e:	6a 00                	push   $0x0
f010cf20:	6a 2c                	push   $0x2c
f010cf22:	eb 12                	jmp    f010cf36 <_alltraps>

f010cf24 <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010cf24:	6a 00                	push   $0x0
f010cf26:	6a 2d                	push   $0x2d
f010cf28:	eb 0c                	jmp    f010cf36 <_alltraps>

f010cf2a <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010cf2a:	6a 00                	push   $0x0
f010cf2c:	6a 2e                	push   $0x2e
f010cf2e:	eb 06                	jmp    f010cf36 <_alltraps>

f010cf30 <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f010cf30:	6a 00                	push   $0x0
f010cf32:	6a 2f                	push   $0x2f
f010cf34:	eb 00                	jmp    f010cf36 <_alltraps>

f010cf36 <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds
f010cf36:	1e                   	push   %ds
push %es
f010cf37:	06                   	push   %es
pushal
f010cf38:	60                   	pusha  

mov $(GD_KD), %ax
f010cf39:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f010cf3d:	8e d8                	mov    %eax,%ds
mov %ax,%es
f010cf3f:	8e c0                	mov    %eax,%es

push %esp
f010cf41:	54                   	push   %esp

call trap
f010cf42:	e8 dc fb ff ff       	call   f010cb23 <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at
f010cf47:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal
f010cf48:	61                   	popa   
pop %es
f010cf49:	07                   	pop    %es
pop %ds
f010cf4a:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f010cf4b:	83 c4 08             	add    $0x8,%esp

iret
f010cf4e:	cf                   	iret   

f010cf4f <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010cf4f:	55                   	push   %ebp
f010cf50:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010cf52:	8b 45 08             	mov    0x8(%ebp),%eax
f010cf55:	8b 15 54 ad 89 f0    	mov    0xf089ad54,%edx
f010cf5b:	29 d0                	sub    %edx,%eax
f010cf5d:	c1 f8 03             	sar    $0x3,%eax
f010cf60:	89 c2                	mov    %eax,%edx
f010cf62:	89 d0                	mov    %edx,%eax
f010cf64:	c1 e0 02             	shl    $0x2,%eax
f010cf67:	01 d0                	add    %edx,%eax
f010cf69:	c1 e0 02             	shl    $0x2,%eax
f010cf6c:	01 d0                	add    %edx,%eax
f010cf6e:	c1 e0 02             	shl    $0x2,%eax
f010cf71:	01 d0                	add    %edx,%eax
f010cf73:	89 c1                	mov    %eax,%ecx
f010cf75:	c1 e1 08             	shl    $0x8,%ecx
f010cf78:	01 c8                	add    %ecx,%eax
f010cf7a:	89 c1                	mov    %eax,%ecx
f010cf7c:	c1 e1 10             	shl    $0x10,%ecx
f010cf7f:	01 c8                	add    %ecx,%eax
f010cf81:	01 c0                	add    %eax,%eax
f010cf83:	01 d0                	add    %edx,%eax
}
f010cf85:	5d                   	pop    %ebp
f010cf86:	c3                   	ret    

f010cf87 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010cf87:	55                   	push   %ebp
f010cf88:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010cf8a:	ff 75 08             	pushl  0x8(%ebp)
f010cf8d:	e8 bd ff ff ff       	call   f010cf4f <to_frame_number>
f010cf92:	83 c4 04             	add    $0x4,%esp
f010cf95:	c1 e0 0c             	shl    $0xc,%eax
}
f010cf98:	c9                   	leave  
f010cf99:	c3                   	ret    

f010cf9a <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010cf9a:	55                   	push   %ebp
f010cf9b:	89 e5                	mov    %esp,%ebp
f010cf9d:	83 ec 18             	sub    $0x18,%esp
f010cfa0:	8b 45 10             	mov    0x10(%ebp),%eax
f010cfa3:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010cfa6:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010cfaa:	74 26                	je     f010cfd2 <sys_cputs+0x38>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010cfac:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010cfb1:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cfb4:	8b 15 f4 a3 89 f0    	mov    0xf089a3f4,%edx
f010cfba:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f010cfc0:	83 ec 04             	sub    $0x4,%esp
f010cfc3:	50                   	push   %eax
f010cfc4:	52                   	push   %edx
f010cfc5:	68 10 7f 13 f0       	push   $0xf0137f10
f010cfca:	e8 3f 3d ff ff       	call   f0100d0e <cprintf>
f010cfcf:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010cfd2:	83 ec 04             	sub    $0x4,%esp
f010cfd5:	ff 75 08             	pushl  0x8(%ebp)
f010cfd8:	ff 75 0c             	pushl  0xc(%ebp)
f010cfdb:	68 19 7f 13 f0       	push   $0xf0137f19
f010cfe0:	e8 29 3d ff ff       	call   f0100d0e <cprintf>
f010cfe5:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010cfe8:	90                   	nop
f010cfe9:	c9                   	leave  
f010cfea:	c3                   	ret    

f010cfeb <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010cfeb:	55                   	push   %ebp
f010cfec:	89 e5                	mov    %esp,%ebp
f010cfee:	83 ec 18             	sub    $0x18,%esp
f010cff1:	8b 45 08             	mov    0x8(%ebp),%eax
f010cff4:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010cff7:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010cffb:	83 ec 08             	sub    $0x8,%esp
f010cffe:	50                   	push   %eax
f010cfff:	68 1e 7f 13 f0       	push   $0xf0137f1e
f010d004:	e8 05 3d ff ff       	call   f0100d0e <cprintf>
f010d009:	83 c4 10             	add    $0x10,%esp
}
f010d00c:	90                   	nop
f010d00d:	c9                   	leave  
f010d00e:	c3                   	ret    

f010d00f <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010d00f:	55                   	push   %ebp
f010d010:	89 e5                	mov    %esp,%ebp
f010d012:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010d015:	e8 2e 3b ff ff       	call   f0100b48 <cons_getc2>
f010d01a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010d01d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010d020:	c9                   	leave  
f010d021:	c3                   	ret    

f010d022 <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010d022:	55                   	push   %ebp
f010d023:	89 e5                	mov    %esp,%ebp
f010d025:	83 ec 18             	sub    $0x18,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010d028:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d02d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010d030:	83 ec 0c             	sub    $0xc,%esp
f010d033:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010d036:	50                   	push   %eax
f010d037:	e8 b6 98 ff ff       	call   f01068f2 <allocate_frame>
f010d03c:	83 c4 10             	add    $0x10,%esp
f010d03f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010d042:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010d046:	75 08                	jne    f010d050 <__sys_allocate_page+0x2e>
		return r ;
f010d048:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d04b:	e9 e9 00 00 00       	jmp    f010d139 <__sys_allocate_page+0x117>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010d050:	8b 45 08             	mov    0x8(%ebp),%eax
f010d053:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010d058:	77 0c                	ja     f010d066 <__sys_allocate_page+0x44>
f010d05a:	8b 45 08             	mov    0x8(%ebp),%eax
f010d05d:	25 ff 0f 00 00       	and    $0xfff,%eax
f010d062:	85 c0                	test   %eax,%eax
f010d064:	74 0a                	je     f010d070 <__sys_allocate_page+0x4e>
		return E_INVAL;
f010d066:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010d06b:	e9 c9 00 00 00       	jmp    f010d139 <__sys_allocate_page+0x117>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010d070:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d073:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010d078:	83 f8 04             	cmp    $0x4,%eax
f010d07b:	74 0a                	je     f010d087 <__sys_allocate_page+0x65>
		return E_INVAL;
f010d07d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010d082:	e9 b2 00 00 00       	jmp    f010d139 <__sys_allocate_page+0x117>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010d087:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d08a:	83 ec 0c             	sub    $0xc,%esp
f010d08d:	50                   	push   %eax
f010d08e:	e8 f4 fe ff ff       	call   f010cf87 <to_physical_address>
f010d093:	83 c4 10             	add    $0x10,%esp
f010d096:	89 45 ec             	mov    %eax,-0x14(%ebp)
#if USE_KHEAP
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unsed VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(e->env_page_directory, ptr_frame_info, USER_LIMIT, PERM_WRITEABLE);
f010d099:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d09c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d09f:	8b 40 5c             	mov    0x5c(%eax),%eax
f010d0a2:	6a 02                	push   $0x2
f010d0a4:	68 00 00 80 ef       	push   $0xef800000
f010d0a9:	52                   	push   %edx
f010d0aa:	50                   	push   %eax
f010d0ab:	e8 91 9c ff ff       	call   f0106d41 <map_frame>
f010d0b0:	83 c4 10             	add    $0x10,%esp
		memset((void*)USER_LIMIT, 0, PAGE_SIZE);
f010d0b3:	83 ec 04             	sub    $0x4,%esp
f010d0b6:	68 00 10 00 00       	push   $0x1000
f010d0bb:	6a 00                	push   $0x0
f010d0bd:	68 00 00 80 ef       	push   $0xef800000
f010d0c2:	e8 0a 4a 02 00       	call   f0131ad1 <memset>
f010d0c7:	83 c4 10             	add    $0x10,%esp

		// Temporarily increase the references to prevent unmap_frame from removing the frame
		// we just got from allocate_frame, we will use it for the new page
		ptr_frame_info->references += 1;
f010d0ca:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d0cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d0d0:	8b 40 08             	mov    0x8(%eax),%eax
f010d0d3:	40                   	inc    %eax
f010d0d4:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(e->env_page_directory, USER_LIMIT);
f010d0d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d0db:	8b 40 5c             	mov    0x5c(%eax),%eax
f010d0de:	83 ec 08             	sub    $0x8,%esp
f010d0e1:	68 00 00 80 ef       	push   $0xef800000
f010d0e6:	50                   	push   %eax
f010d0e7:	e8 8a 9d ff ff       	call   f0106e76 <unmap_frame>
f010d0ec:	83 c4 10             	add    $0x10,%esp

		//return it to the original status
		ptr_frame_info->references -= 1;
f010d0ef:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d0f2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d0f5:	8b 40 08             	mov    0x8(%eax),%eax
f010d0f8:	48                   	dec    %eax
f010d0f9:	66 89 42 08          	mov    %ax,0x8(%edx)
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010d0fd:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010d100:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d103:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d106:	8b 40 5c             	mov    0x5c(%eax),%eax
f010d109:	ff 75 0c             	pushl  0xc(%ebp)
f010d10c:	51                   	push   %ecx
f010d10d:	52                   	push   %edx
f010d10e:	50                   	push   %eax
f010d10f:	e8 2d 9c ff ff       	call   f0106d41 <map_frame>
f010d114:	83 c4 10             	add    $0x10,%esp
f010d117:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010d11a:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010d11e:	75 14                	jne    f010d134 <__sys_allocate_page+0x112>
	{
		decrement_references(ptr_frame_info);
f010d120:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d123:	83 ec 0c             	sub    $0xc,%esp
f010d126:	50                   	push   %eax
f010d127:	e8 55 99 ff ff       	call   f0106a81 <decrement_references>
f010d12c:	83 c4 10             	add    $0x10,%esp
		return r;
f010d12f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d132:	eb 05                	jmp    f010d139 <__sys_allocate_page+0x117>
	}
	return 0 ;
f010d134:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d139:	c9                   	leave  
f010d13a:	c3                   	ret    

f010d13b <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010d13b:	55                   	push   %ebp
f010d13c:	89 e5                	mov    %esp,%ebp
f010d13e:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010d141:	83 ec 04             	sub    $0x4,%esp
f010d144:	68 21 7f 13 f0       	push   $0xf0137f21
f010d149:	68 b3 00 00 00       	push   $0xb3
f010d14e:	68 3f 7f 13 f0       	push   $0xf0137f3f
f010d153:	e8 ad 30 ff ff       	call   f0100205 <_panic>

f010d158 <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010d158:	55                   	push   %ebp
f010d159:	89 e5                	mov    %esp,%ebp
f010d15b:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010d15e:	83 ec 04             	sub    $0x4,%esp
f010d161:	68 54 7f 13 f0       	push   $0xf0137f54
f010d166:	68 c3 00 00 00       	push   $0xc3
f010d16b:	68 3f 7f 13 f0       	push   $0xf0137f3f
f010d170:	e8 90 30 ff ff       	call   f0100205 <_panic>

f010d175 <sys_calculate_required_frames>:
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010d175:	55                   	push   %ebp
f010d176:	89 e5                	mov    %esp,%ebp
f010d178:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010d17b:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d180:	8b 40 5c             	mov    0x5c(%eax),%eax
f010d183:	83 ec 04             	sub    $0x4,%esp
f010d186:	ff 75 0c             	pushl  0xc(%ebp)
f010d189:	ff 75 08             	pushl  0x8(%ebp)
f010d18c:	50                   	push   %eax
f010d18d:	e8 b4 c0 ff ff       	call   f0109246 <calculate_required_frames>
f010d192:	83 c4 10             	add    $0x10,%esp
}
f010d195:	c9                   	leave  
f010d196:	c3                   	ret    

f010d197 <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010d197:	55                   	push   %ebp
f010d198:	89 e5                	mov    %esp,%ebp
f010d19a:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010d19d:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010d1a0:	83 ec 0c             	sub    $0xc,%esp
f010d1a3:	50                   	push   %eax
f010d1a4:	e8 32 9e ff ff       	call   f0106fdb <calculate_available_frames>
f010d1a9:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010d1ac:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d1af:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d1b2:	01 d0                	add    %edx,%eax
}
f010d1b4:	c9                   	leave  
f010d1b5:	c3                   	ret    

f010d1b6 <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010d1b6:	55                   	push   %ebp
f010d1b7:	89 e5                	mov    %esp,%ebp
f010d1b9:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010d1bc:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010d1bf:	83 ec 0c             	sub    $0xc,%esp
f010d1c2:	50                   	push   %eax
f010d1c3:	e8 13 9e ff ff       	call   f0106fdb <calculate_available_frames>
f010d1c8:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010d1cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010d1ce:	c9                   	leave  
f010d1cf:	c3                   	ret    

f010d1d0 <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010d1d0:	55                   	push   %ebp
f010d1d1:	89 e5                	mov    %esp,%ebp
f010d1d3:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010d1d6:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010d1d9:	83 ec 0c             	sub    $0xc,%esp
f010d1dc:	50                   	push   %eax
f010d1dd:	e8 f9 9d ff ff       	call   f0106fdb <calculate_available_frames>
f010d1e2:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010d1e5:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010d1e8:	c9                   	leave  
f010d1e9:	c3                   	ret    

f010d1ea <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010d1ea:	55                   	push   %ebp
f010d1eb:	89 e5                	mov    %esp,%ebp
f010d1ed:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010d1f0:	83 ec 0c             	sub    $0xc,%esp
f010d1f3:	ff 75 08             	pushl  0x8(%ebp)
f010d1f6:	e8 f3 35 02 00       	call   f01307ee <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010d1fb:	83 c4 10             	add    $0x10,%esp
}
f010d1fe:	c9                   	leave  
f010d1ff:	c3                   	ret    

f010d200 <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010d200:	55                   	push   %ebp
f010d201:	89 e5                	mov    %esp,%ebp
f010d203:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010d206:	e8 3b 35 02 00       	call   f0130746 <scarce_memory>
}
f010d20b:	90                   	nop
f010d20c:	c9                   	leave  
f010d20d:	c3                   	ret    

f010d20e <sys_clearFFL>:

void sys_clearFFL()
{
f010d20e:	55                   	push   %ebp
f010d20f:	89 e5                	mov    %esp,%ebp
f010d211:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010d214:	a1 24 ad 89 f0       	mov    0xf089ad24,%eax
f010d219:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010d21c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010d223:	eb 12                	jmp    f010d237 <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010d225:	83 ec 0c             	sub    $0xc,%esp
f010d228:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010d22b:	50                   	push   %eax
f010d22c:	e8 c1 96 ff ff       	call   f01068f2 <allocate_frame>
f010d231:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010d234:	ff 45 f4             	incl   -0xc(%ebp)
f010d237:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d23a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d23d:	7c e6                	jl     f010d225 <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010d23f:	90                   	nop
f010d240:	c9                   	leave  
f010d241:	c3                   	ret    

f010d242 <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010d242:	55                   	push   %ebp
f010d243:	89 e5                	mov    %esp,%ebp
f010d245:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010d248:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d24d:	83 ec 0c             	sub    $0xc,%esp
f010d250:	50                   	push   %eax
f010d251:	e8 d2 6a ff ff       	call   f0103d28 <pf_calculate_allocated_pages>
f010d256:	83 c4 10             	add    $0x10,%esp
}
f010d259:	c9                   	leave  
f010d25a:	c3                   	ret    

f010d25b <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010d25b:	55                   	push   %ebp
f010d25c:	89 e5                	mov    %esp,%ebp
f010d25e:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010d261:	e8 9a 11 00 00       	call   f010e400 <isBufferingEnabled>
f010d266:	84 c0                	test   %al,%al
f010d268:	74 19                	je     f010d283 <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
f010d26a:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d26f:	83 ec 04             	sub    $0x4,%esp
f010d272:	ff 75 0c             	pushl  0xc(%ebp)
f010d275:	ff 75 08             	pushl  0x8(%ebp)
f010d278:	50                   	push   %eax
f010d279:	e8 a5 c1 ff ff       	call   f0109423 <__free_user_mem_with_buffering>
f010d27e:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
	}
	return;
f010d281:	eb 18                	jmp    f010d29b <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
f010d283:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d288:	83 ec 04             	sub    $0x4,%esp
f010d28b:	ff 75 0c             	pushl  0xc(%ebp)
f010d28e:	ff 75 08             	pushl  0x8(%ebp)
f010d291:	50                   	push   %eax
f010d292:	e8 7b c0 ff ff       	call   f0109312 <free_user_mem>
f010d297:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010d29a:	90                   	nop
}
f010d29b:	c9                   	leave  
f010d29c:	c3                   	ret    

f010d29d <sys_allocate_user_mem>:

void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010d29d:	55                   	push   %ebp
f010d29e:	89 e5                	mov    %esp,%ebp
f010d2a0:	83 ec 08             	sub    $0x8,%esp
	allocate_user_mem(curenv, virtual_address, size);
f010d2a3:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d2a8:	83 ec 04             	sub    $0x4,%esp
f010d2ab:	ff 75 0c             	pushl  0xc(%ebp)
f010d2ae:	ff 75 08             	pushl  0x8(%ebp)
f010d2b1:	50                   	push   %eax
f010d2b2:	e8 3e c0 ff ff       	call   f01092f5 <allocate_user_mem>
f010d2b7:	83 c4 10             	add    $0x10,%esp
	return;
f010d2ba:	90                   	nop
}
f010d2bb:	c9                   	leave  
f010d2bc:	c3                   	ret    

f010d2bd <sys_allocate_chunk>:

void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010d2bd:	55                   	push   %ebp
f010d2be:	89 e5                	mov    %esp,%ebp
f010d2c0:	83 ec 08             	sub    $0x8,%esp
	allocate_chunk(curenv->env_page_directory, virtual_address, size, perms);
f010d2c3:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d2c8:	8b 40 5c             	mov    0x5c(%eax),%eax
f010d2cb:	ff 75 10             	pushl  0x10(%ebp)
f010d2ce:	ff 75 0c             	pushl  0xc(%ebp)
f010d2d1:	ff 75 08             	pushl  0x8(%ebp)
f010d2d4:	50                   	push   %eax
f010d2d5:	e8 51 bd ff ff       	call   f010902b <allocate_chunk>
f010d2da:	83 c4 10             	add    $0x10,%esp
	return;
f010d2dd:	90                   	nop
}
f010d2de:	c9                   	leave  
f010d2df:	c3                   	ret    

f010d2e0 <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010d2e0:	55                   	push   %ebp
f010d2e1:	89 e5                	mov    %esp,%ebp
f010d2e3:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(curenv, src_virtual_address, dst_virtual_address, size);
f010d2e6:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d2eb:	ff 75 10             	pushl  0x10(%ebp)
f010d2ee:	ff 75 0c             	pushl  0xc(%ebp)
f010d2f1:	ff 75 08             	pushl  0x8(%ebp)
f010d2f4:	50                   	push   %eax
f010d2f5:	e8 46 c1 ff ff       	call   f0109440 <move_user_mem>
f010d2fa:	83 c4 10             	add    $0x10,%esp
	return;
f010d2fd:	90                   	nop
}
f010d2fe:	c9                   	leave  
f010d2ff:	c3                   	ret    

f010d300 <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010d300:	55                   	push   %ebp
f010d301:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010d303:	a1 30 ad 89 f0       	mov    0xf089ad30,%eax
}
f010d308:	5d                   	pop    %ebp
f010d309:	c3                   	ret    

f010d30a <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010d30a:	55                   	push   %ebp
f010d30b:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010d30d:	8b 45 08             	mov    0x8(%ebp),%eax
f010d310:	a3 30 ad 89 f0       	mov    %eax,0xf089ad30
}
f010d315:	90                   	nop
f010d316:	5d                   	pop    %ebp
f010d317:	c3                   	ret    

f010d318 <sys_disable_interrupt>:
/*******************************/
/* INTERRUPTS SYSTEM CALLS */
/*******************************/
//NEW!! 2012...
void sys_disable_interrupt()
{
f010d318:	55                   	push   %ebp
f010d319:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010d31b:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d320:	8b 15 f4 a3 89 f0    	mov    0xf089a3f4,%edx
f010d326:	8b 52 38             	mov    0x38(%edx),%edx
f010d329:	80 e6 fd             	and    $0xfd,%dh
f010d32c:	89 50 38             	mov    %edx,0x38(%eax)
}
f010d32f:	90                   	nop
f010d330:	5d                   	pop    %ebp
f010d331:	c3                   	ret    

f010d332 <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010d332:	55                   	push   %ebp
f010d333:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010d335:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d33a:	8b 15 f4 a3 89 f0    	mov    0xf089a3f4,%edx
f010d340:	8b 52 38             	mov    0x38(%edx),%edx
f010d343:	80 ce 02             	or     $0x2,%dh
f010d346:	89 50 38             	mov    %edx,0x38(%eax)
}
f010d349:	90                   	nop
f010d34a:	5d                   	pop    %ebp
f010d34b:	c3                   	ret    

f010d34c <sys_createSemaphore>:

/*******************************/
/* SEMAPHORES SYSTEM CALLS */
/*******************************/
int sys_createSemaphore(char* semaphoreName, uint32 initialValue)
{
f010d34c:	55                   	push   %ebp
f010d34d:	89 e5                	mov    %esp,%ebp
f010d34f:	83 ec 08             	sub    $0x8,%esp
	return createSemaphore(curenv->env_id, semaphoreName, initialValue);
f010d352:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d357:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d35a:	83 ec 04             	sub    $0x4,%esp
f010d35d:	ff 75 0c             	pushl  0xc(%ebp)
f010d360:	ff 75 08             	pushl  0x8(%ebp)
f010d363:	50                   	push   %eax
f010d364:	e8 4e 17 00 00       	call   f010eab7 <createSemaphore>
f010d369:	83 c4 10             	add    $0x10,%esp
}
f010d36c:	c9                   	leave  
f010d36d:	c3                   	ret    

f010d36e <sys_waitSemaphore>:

void sys_waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010d36e:	55                   	push   %ebp
f010d36f:	89 e5                	mov    %esp,%ebp
f010d371:	83 ec 08             	sub    $0x8,%esp
	waitSemaphore(ownerEnvID, semaphoreName);
f010d374:	83 ec 08             	sub    $0x8,%esp
f010d377:	ff 75 0c             	pushl  0xc(%ebp)
f010d37a:	ff 75 08             	pushl  0x8(%ebp)
f010d37d:	e8 ad 17 00 00       	call   f010eb2f <waitSemaphore>
f010d382:	83 c4 10             	add    $0x10,%esp
}
f010d385:	90                   	nop
f010d386:	c9                   	leave  
f010d387:	c3                   	ret    

f010d388 <sys_signalSemaphore>:

void sys_signalSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010d388:	55                   	push   %ebp
f010d389:	89 e5                	mov    %esp,%ebp
f010d38b:	83 ec 08             	sub    $0x8,%esp
	signalSemaphore(ownerEnvID, semaphoreName);
f010d38e:	83 ec 08             	sub    $0x8,%esp
f010d391:	ff 75 0c             	pushl  0xc(%ebp)
f010d394:	ff 75 08             	pushl  0x8(%ebp)
f010d397:	e8 45 18 00 00       	call   f010ebe1 <signalSemaphore>
f010d39c:	83 c4 10             	add    $0x10,%esp
}
f010d39f:	90                   	nop
f010d3a0:	c9                   	leave  
f010d3a1:	c3                   	ret    

f010d3a2 <sys_getSemaphoreValue>:

int sys_getSemaphoreValue(int32 ownerEnvID, char* semaphoreName)
{
f010d3a2:	55                   	push   %ebp
f010d3a3:	89 e5                	mov    %esp,%ebp
f010d3a5:	83 ec 18             	sub    $0x18,%esp
	int semID = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010d3a8:	83 ec 08             	sub    $0x8,%esp
f010d3ab:	ff 75 0c             	pushl  0xc(%ebp)
f010d3ae:	ff 75 08             	pushl  0x8(%ebp)
f010d3b1:	e8 79 15 00 00       	call   f010e92f <get_semaphore_object_ID>
f010d3b6:	83 c4 10             	add    $0x10,%esp
f010d3b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(semID >= 0 && semID < MAX_SEMAPHORES) ;
f010d3bc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d3c0:	78 0c                	js     f010d3ce <sys_getSemaphoreValue+0x2c>
f010d3c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d3c5:	a1 b4 ac 89 f0       	mov    0xf089acb4,%eax
f010d3ca:	39 c2                	cmp    %eax,%edx
f010d3cc:	72 19                	jb     f010d3e7 <sys_getSemaphoreValue+0x45>
f010d3ce:	68 74 7f 13 f0       	push   $0xf0137f74
f010d3d3:	68 99 7f 13 f0       	push   $0xf0137f99
f010d3d8:	68 4a 01 00 00       	push   $0x14a
f010d3dd:	68 3f 7f 13 f0       	push   $0xf0137f3f
f010d3e2:	e8 1e 2e ff ff       	call   f0100205 <_panic>

	return semaphores[semID].value ;
f010d3e7:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010d3ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d3f0:	89 d0                	mov    %edx,%eax
f010d3f2:	c1 e0 02             	shl    $0x2,%eax
f010d3f5:	01 d0                	add    %edx,%eax
f010d3f7:	01 c0                	add    %eax,%eax
f010d3f9:	01 d0                	add    %edx,%eax
f010d3fb:	01 c0                	add    %eax,%eax
f010d3fd:	01 d0                	add    %edx,%eax
f010d3ff:	c1 e0 02             	shl    $0x2,%eax
f010d402:	01 c8                	add    %ecx,%eax
f010d404:	8b 40 54             	mov    0x54(%eax),%eax
}
f010d407:	c9                   	leave  
f010d408:	c3                   	ret    

f010d409 <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010d409:	55                   	push   %ebp
f010d40a:	89 e5                	mov    %esp,%ebp
f010d40c:	83 ec 18             	sub    $0x18,%esp
f010d40f:	8b 45 10             	mov    0x10(%ebp),%eax
f010d412:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(curenv->env_id, shareName, size, isWritable, virtual_address);
f010d415:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010d419:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d41e:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d421:	83 ec 0c             	sub    $0xc,%esp
f010d424:	ff 75 14             	pushl  0x14(%ebp)
f010d427:	52                   	push   %edx
f010d428:	ff 75 0c             	pushl  0xc(%ebp)
f010d42b:	ff 75 08             	pushl  0x8(%ebp)
f010d42e:	50                   	push   %eax
f010d42f:	e8 68 a1 ff ff       	call   f010759c <createSharedObject>
f010d434:	83 c4 20             	add    $0x20,%esp
}
f010d437:	c9                   	leave  
f010d438:	c3                   	ret    

f010d439 <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010d439:	55                   	push   %ebp
f010d43a:	89 e5                	mov    %esp,%ebp
f010d43c:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010d43f:	83 ec 08             	sub    $0x8,%esp
f010d442:	ff 75 0c             	pushl  0xc(%ebp)
f010d445:	ff 75 08             	pushl  0x8(%ebp)
f010d448:	e8 09 a1 ff ff       	call   f0107556 <getSizeOfSharedObject>
f010d44d:	83 c4 10             	add    $0x10,%esp
}
f010d450:	c9                   	leave  
f010d451:	c3                   	ret    

f010d452 <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010d452:	55                   	push   %ebp
f010d453:	89 e5                	mov    %esp,%ebp
f010d455:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010d458:	83 ec 04             	sub    $0x4,%esp
f010d45b:	ff 75 10             	pushl  0x10(%ebp)
f010d45e:	ff 75 0c             	pushl  0xc(%ebp)
f010d461:	ff 75 08             	pushl  0x8(%ebp)
f010d464:	e8 48 a3 ff ff       	call   f01077b1 <getSharedObject>
f010d469:	83 c4 10             	add    $0x10,%esp
}
f010d46c:	c9                   	leave  
f010d46d:	c3                   	ret    

f010d46e <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010d46e:	55                   	push   %ebp
f010d46f:	89 e5                	mov    %esp,%ebp
f010d471:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010d474:	83 ec 08             	sub    $0x8,%esp
f010d477:	ff 75 0c             	pushl  0xc(%ebp)
f010d47a:	ff 75 08             	pushl  0x8(%ebp)
f010d47d:	e8 61 a4 ff ff       	call   f01078e3 <freeSharedObject>
f010d482:	83 c4 10             	add    $0x10,%esp
}
f010d485:	c9                   	leave  
f010d486:	c3                   	ret    

f010d487 <sys_getMaxShares>:

uint32 sys_getMaxShares()
{
f010d487:	55                   	push   %ebp
f010d488:	89 e5                	mov    %esp,%ebp
	return MAX_SHARES;
f010d48a:	a1 28 ad 89 f0       	mov    0xf089ad28,%eax
}
f010d48f:	5d                   	pop    %ebp
f010d490:	c3                   	ret    

f010d491 <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010d491:	55                   	push   %ebp
f010d492:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010d494:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d499:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010d49c:	5d                   	pop    %ebp
f010d49d:	c3                   	ret    

f010d49e <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010d49e:	55                   	push   %ebp
f010d49f:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010d4a1:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d4a6:	89 c2                	mov    %eax,%edx
f010d4a8:	a1 f0 a3 89 f0       	mov    0xf089a3f0,%eax
f010d4ad:	29 c2                	sub    %eax,%edx
f010d4af:	89 d0                	mov    %edx,%eax
f010d4b1:	c1 f8 04             	sar    $0x4,%eax
f010d4b4:	89 c2                	mov    %eax,%edx
f010d4b6:	89 d0                	mov    %edx,%eax
f010d4b8:	c1 e0 03             	shl    $0x3,%eax
f010d4bb:	01 d0                	add    %edx,%eax
f010d4bd:	01 c0                	add    %eax,%eax
f010d4bf:	01 d0                	add    %edx,%eax
f010d4c1:	c1 e0 03             	shl    $0x3,%eax
f010d4c4:	01 d0                	add    %edx,%eax
f010d4c6:	89 c1                	mov    %eax,%ecx
f010d4c8:	c1 e1 08             	shl    $0x8,%ecx
f010d4cb:	01 c8                	add    %ecx,%eax
f010d4cd:	01 c0                	add    %eax,%eax
f010d4cf:	01 d0                	add    %edx,%eax
f010d4d1:	01 c0                	add    %eax,%eax
f010d4d3:	01 d0                	add    %edx,%eax
f010d4d5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010d4dc:	01 d0                	add    %edx,%eax
f010d4de:	89 c2                	mov    %eax,%edx
f010d4e0:	c1 e2 09             	shl    $0x9,%edx
f010d4e3:	29 c2                	sub    %eax,%edx
f010d4e5:	89 d0                	mov    %edx,%eax
f010d4e7:	f7 d8                	neg    %eax
}
f010d4e9:	5d                   	pop    %ebp
f010d4ea:	c3                   	ret    

f010d4eb <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010d4eb:	55                   	push   %ebp
f010d4ec:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010d4ee:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d4f3:	8b 40 50             	mov    0x50(%eax),%eax
}
f010d4f6:	5d                   	pop    %ebp
f010d4f7:	c3                   	ret    

f010d4f8 <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010d4f8:	55                   	push   %ebp
f010d4f9:	89 e5                	mov    %esp,%ebp
f010d4fb:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010d4fe:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010d502:	75 0a                	jne    f010d50e <sys_destroy_env+0x16>
	{
		e = curenv ;
f010d504:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d509:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010d50c:	eb 22                	jmp    f010d530 <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010d50e:	83 ec 04             	sub    $0x4,%esp
f010d511:	6a 00                	push   $0x0
f010d513:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010d516:	50                   	push   %eax
f010d517:	ff 75 08             	pushl  0x8(%ebp)
f010d51a:	e8 e5 cb ff ff       	call   f010a104 <envid2env>
f010d51f:	83 c4 10             	add    $0x10,%esp
f010d522:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d525:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d529:	79 05                	jns    f010d530 <sys_destroy_env+0x38>
	{
		return r;
f010d52b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d52e:	eb 5e                	jmp    f010d58e <sys_destroy_env+0x96>
	}

	if (e == curenv)
f010d530:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d533:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d538:	39 c2                	cmp    %eax,%edx
f010d53a:	75 1b                	jne    f010d557 <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010d53c:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d541:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d544:	83 ec 08             	sub    $0x8,%esp
f010d547:	50                   	push   %eax
f010d548:	68 ae 7f 13 f0       	push   $0xf0137fae
f010d54d:	e8 bc 37 ff ff       	call   f0100d0e <cprintf>
f010d552:	83 c4 10             	add    $0x10,%esp
f010d555:	eb 20                	jmp    f010d577 <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010d557:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d55a:	8b 50 4c             	mov    0x4c(%eax),%edx
f010d55d:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d562:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d565:	83 ec 04             	sub    $0x4,%esp
f010d568:	52                   	push   %edx
f010d569:	50                   	push   %eax
f010d56a:	68 c9 7f 13 f0       	push   $0xf0137fc9
f010d56f:	e8 9a 37 ff ff       	call   f0100d0e <cprintf>
f010d574:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010d577:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d57a:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d57d:	83 ec 0c             	sub    $0xc,%esp
f010d580:	50                   	push   %eax
f010d581:	e8 b9 80 ff ff       	call   f010563f <sched_kill_env>
f010d586:	83 c4 10             	add    $0x10,%esp

	return 0;
f010d589:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d58e:	c9                   	leave  
f010d58f:	c3                   	ret    

f010d590 <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010d590:	55                   	push   %ebp
f010d591:	89 e5                	mov    %esp,%ebp
f010d593:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010d596:	e8 4a cb ff ff       	call   f010a0e5 <env_exit>
	//env_run_cmd_prmpt();
}
f010d59b:	90                   	nop
f010d59c:	c9                   	leave  
f010d59d:	c3                   	ret    

f010d59e <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010d59e:	55                   	push   %ebp
f010d59f:	89 e5                	mov    %esp,%ebp
f010d5a1:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010d5a4:	ff 75 14             	pushl  0x14(%ebp)
f010d5a7:	ff 75 10             	pushl  0x10(%ebp)
f010d5aa:	ff 75 0c             	pushl  0xc(%ebp)
f010d5ad:	ff 75 08             	pushl  0x8(%ebp)
f010d5b0:	e8 a8 be ff ff       	call   f010945d <env_create>
f010d5b5:	83 c4 10             	add    $0x10,%esp
f010d5b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010d5bb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d5bf:	75 07                	jne    f010d5c8 <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010d5c1:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010d5c6:	eb 14                	jmp    f010d5dc <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010d5c8:	83 ec 0c             	sub    $0xc,%esp
f010d5cb:	ff 75 f4             	pushl  -0xc(%ebp)
f010d5ce:	e8 31 7c ff ff       	call   f0105204 <sched_new_env>
f010d5d3:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010d5d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d5d9:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010d5dc:	c9                   	leave  
f010d5dd:	c3                   	ret    

f010d5de <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010d5de:	55                   	push   %ebp
f010d5df:	89 e5                	mov    %esp,%ebp
f010d5e1:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010d5e4:	8b 45 08             	mov    0x8(%ebp),%eax
f010d5e7:	83 ec 0c             	sub    $0xc,%esp
f010d5ea:	50                   	push   %eax
f010d5eb:	e8 31 7c ff ff       	call   f0105221 <sched_run_env>
f010d5f0:	83 c4 10             	add    $0x10,%esp
}
f010d5f3:	90                   	nop
f010d5f4:	c9                   	leave  
f010d5f5:	c3                   	ret    

f010d5f6 <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010d5f6:	55                   	push   %ebp
f010d5f7:	89 e5                	mov    %esp,%ebp
f010d5f9:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010d5fc:	0f 31                	rdtsc  
f010d5fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010d601:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010d604:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d607:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d60a:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d60d:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010d610:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010d613:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d616:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d619:	89 01                	mov    %eax,(%ecx)
f010d61b:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010d61e:	8b 45 08             	mov    0x8(%ebp),%eax
f010d621:	c9                   	leave  
f010d622:	c2 04 00             	ret    $0x4

f010d625 <sys_rcr2>:

uint32 sys_rcr2()
{
f010d625:	55                   	push   %ebp
f010d626:	89 e5                	mov    %esp,%ebp
f010d628:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010d62b:	0f 20 d0             	mov    %cr2,%eax
f010d62e:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010d631:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010d634:	90                   	nop
}
f010d635:	c9                   	leave  
f010d636:	c3                   	ret    

f010d637 <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010d637:	55                   	push   %ebp
f010d638:	89 e5                	mov    %esp,%ebp
f010d63a:	83 ec 04             	sub    $0x4,%esp
f010d63d:	8b 45 08             	mov    0x8(%ebp),%eax
f010d640:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010d643:	8a 45 fc             	mov    -0x4(%ebp),%al
f010d646:	a2 a8 ac 89 f0       	mov    %al,0xf089aca8
}
f010d64b:	90                   	nop
f010d64c:	c9                   	leave  
f010d64d:	c3                   	ret    

f010d64e <rsttst>:

uint32 tstcnt;
void rsttst()
{
f010d64e:	55                   	push   %ebp
f010d64f:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f010d651:	c7 05 b0 ae 89 f0 00 	movl   $0x0,0xf089aeb0
f010d658:	00 00 00 
}
f010d65b:	90                   	nop
f010d65c:	5d                   	pop    %ebp
f010d65d:	c3                   	ret    

f010d65e <inctst>:
void inctst()
{
f010d65e:	55                   	push   %ebp
f010d65f:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f010d661:	a1 b0 ae 89 f0       	mov    0xf089aeb0,%eax
f010d666:	40                   	inc    %eax
f010d667:	a3 b0 ae 89 f0       	mov    %eax,0xf089aeb0
}
f010d66c:	90                   	nop
f010d66d:	5d                   	pop    %ebp
f010d66e:	c3                   	ret    

f010d66f <gettst>:
uint32 gettst()
{
f010d66f:	55                   	push   %ebp
f010d670:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f010d672:	a1 b0 ae 89 f0       	mov    0xf089aeb0,%eax
}
f010d677:	5d                   	pop    %ebp
f010d678:	c3                   	ret    

f010d679 <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f010d679:	55                   	push   %ebp
f010d67a:	89 e5                	mov    %esp,%ebp
f010d67c:	83 ec 28             	sub    $0x28,%esp
f010d67f:	8b 45 14             	mov    0x14(%ebp),%eax
f010d682:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f010d685:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f010d68c:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f010d690:	83 f8 65             	cmp    $0x65,%eax
f010d693:	74 5d                	je     f010d6f2 <tst+0x79>
f010d695:	83 f8 65             	cmp    $0x65,%eax
f010d698:	7f 0a                	jg     f010d6a4 <tst+0x2b>
f010d69a:	83 f8 62             	cmp    $0x62,%eax
f010d69d:	74 73                	je     f010d712 <tst+0x99>
f010d69f:	e9 91 00 00 00       	jmp    f010d735 <tst+0xbc>
f010d6a4:	83 f8 67             	cmp    $0x67,%eax
f010d6a7:	74 29                	je     f010d6d2 <tst+0x59>
f010d6a9:	83 f8 6c             	cmp    $0x6c,%eax
f010d6ac:	0f 85 83 00 00 00    	jne    f010d735 <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f010d6b2:	8b 45 08             	mov    0x8(%ebp),%eax
f010d6b5:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d6b8:	73 09                	jae    f010d6c3 <tst+0x4a>
			chk = 1;
f010d6ba:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d6c1:	eb 68                	jmp    f010d72b <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f010d6c3:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d6c7:	74 62                	je     f010d72b <tst+0xb2>
			chk = 1;
f010d6c9:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d6d0:	eb 59                	jmp    f010d72b <tst+0xb2>
	case 'g':
		if (n > v1)
f010d6d2:	8b 45 08             	mov    0x8(%ebp),%eax
f010d6d5:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d6d8:	76 09                	jbe    f010d6e3 <tst+0x6a>
			chk = 1;
f010d6da:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d6e1:	eb 4b                	jmp    f010d72e <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f010d6e3:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d6e7:	74 45                	je     f010d72e <tst+0xb5>
			chk = 1;
f010d6e9:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d6f0:	eb 3c                	jmp    f010d72e <tst+0xb5>
	case 'e':
		if (n == v1)
f010d6f2:	8b 45 08             	mov    0x8(%ebp),%eax
f010d6f5:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d6f8:	75 09                	jne    f010d703 <tst+0x8a>
			chk = 1;
f010d6fa:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d701:	eb 2e                	jmp    f010d731 <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f010d703:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d707:	74 28                	je     f010d731 <tst+0xb8>
			chk = 1;
f010d709:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d710:	eb 1f                	jmp    f010d731 <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v1)
f010d712:	8b 45 08             	mov    0x8(%ebp),%eax
f010d715:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d718:	72 1a                	jb     f010d734 <tst+0xbb>
f010d71a:	8b 45 08             	mov    0x8(%ebp),%eax
f010d71d:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d720:	77 12                	ja     f010d734 <tst+0xbb>
			chk = 1;
f010d722:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d729:	eb 09                	jmp    f010d734 <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d72b:	90                   	nop
f010d72c:	eb 07                	jmp    f010d735 <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d72e:	90                   	nop
f010d72f:	eb 04                	jmp    f010d735 <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d731:	90                   	nop
f010d732:	eb 01                	jmp    f010d735 <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v1)
			chk = 1;
		break;
f010d734:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f010d735:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d739:	75 17                	jne    f010d752 <tst+0xd9>
f010d73b:	83 ec 04             	sub    $0x4,%esp
f010d73e:	68 e1 7f 13 f0       	push   $0xf0137fe1
f010d743:	68 00 02 00 00       	push   $0x200
f010d748:	68 3f 7f 13 f0       	push   $0xf0137f3f
f010d74d:	e8 b3 2a ff ff       	call   f0100205 <_panic>
	tstcnt++ ;
f010d752:	a1 b0 ae 89 f0       	mov    0xf089aeb0,%eax
f010d757:	40                   	inc    %eax
f010d758:	a3 b0 ae 89 f0       	mov    %eax,0xf089aeb0
	return;
f010d75d:	90                   	nop
}
f010d75e:	c9                   	leave  
f010d75f:	c3                   	ret    

f010d760 <chktst>:

void chktst(uint32 n)
{
f010d760:	55                   	push   %ebp
f010d761:	89 e5                	mov    %esp,%ebp
f010d763:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f010d766:	a1 b0 ae 89 f0       	mov    0xf089aeb0,%eax
f010d76b:	3b 45 08             	cmp    0x8(%ebp),%eax
f010d76e:	75 12                	jne    f010d782 <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f010d770:	83 ec 0c             	sub    $0xc,%esp
f010d773:	68 f4 7f 13 f0       	push   $0xf0137ff4
f010d778:	e8 91 35 ff ff       	call   f0100d0e <cprintf>
f010d77d:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f010d780:	eb 17                	jmp    f010d799 <chktst+0x39>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f010d782:	83 ec 04             	sub    $0x4,%esp
f010d785:	68 20 80 13 f0       	push   $0xf0138020
f010d78a:	68 0a 02 00 00       	push   $0x20a
f010d78f:	68 3f 7f 13 f0       	push   $0xf0137f3f
f010d794:	e8 6c 2a ff ff       	call   f0100205 <_panic>
}
f010d799:	c9                   	leave  
f010d79a:	c3                   	ret    

f010d79b <sys_check_LRU_lists>:



//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f010d79b:	55                   	push   %ebp
f010d79c:	89 e5                	mov    %esp,%ebp
f010d79e:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010d7a1:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d7a6:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int active_list_validation = 1;
f010d7a9:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
	int second_list_validation = 1;
f010d7b0:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f010d7b7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010d7bb:	0f 84 a5 00 00 00    	je     f010d866 <sys_check_LRU_lists+0xcb>
	{
		int idx_active_list = 0;
f010d7c1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d7c8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d7cb:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f010d7d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d7d4:	eb 4a                	jmp    f010d820 <sys_check_LRU_lists+0x85>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f010d7d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d7d9:	8b 00                	mov    (%eax),%eax
f010d7db:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010d7de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d7e1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d7e6:	89 c2                	mov    %eax,%edx
f010d7e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d7eb:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d7f2:	8b 45 08             	mov    0x8(%ebp),%eax
f010d7f5:	01 c8                	add    %ecx,%eax
f010d7f7:	8b 00                	mov    (%eax),%eax
f010d7f9:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010d7fc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d7ff:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d804:	39 c2                	cmp    %eax,%edx
f010d806:	74 09                	je     f010d811 <sys_check_LRU_lists+0x76>
			{
				active_list_validation = 0;
f010d808:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
				break;
f010d80f:	eb 3e                	jmp    f010d84f <sys_check_LRU_lists+0xb4>
			}
			idx_active_list++;
f010d811:	ff 45 f0             	incl   -0x10(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d814:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d817:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d81d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d820:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d824:	74 08                	je     f010d82e <sys_check_LRU_lists+0x93>
f010d826:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d829:	8b 40 10             	mov    0x10(%eax),%eax
f010d82c:	eb 05                	jmp    f010d833 <sys_check_LRU_lists+0x98>
f010d82e:	b8 00 00 00 00       	mov    $0x0,%eax
f010d833:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d836:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010d83c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d83f:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d845:	85 c0                	test   %eax,%eax
f010d847:	75 8d                	jne    f010d7d6 <sys_check_LRU_lists+0x3b>
f010d849:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d84d:	75 87                	jne    f010d7d6 <sys_check_LRU_lists+0x3b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f010d84f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d852:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010d858:	8b 45 10             	mov    0x10(%ebp),%eax
f010d85b:	39 c2                	cmp    %eax,%edx
f010d85d:	74 07                	je     f010d866 <sys_check_LRU_lists+0xcb>
		{
			active_list_validation = 0;
f010d85f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f010d866:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010d86a:	0f 84 a5 00 00 00    	je     f010d915 <sys_check_LRU_lists+0x17a>
	{
		int idx_second_list = 0;
f010d870:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d877:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d87a:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010d880:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d883:	eb 4a                	jmp    f010d8cf <sys_check_LRU_lists+0x134>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f010d885:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d888:	8b 00                	mov    (%eax),%eax
f010d88a:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d88d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d890:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d895:	89 c2                	mov    %eax,%edx
f010d897:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d89a:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d8a1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d8a4:	01 c8                	add    %ecx,%eax
f010d8a6:	8b 00                	mov    (%eax),%eax
f010d8a8:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010d8ab:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d8ae:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d8b3:	39 c2                	cmp    %eax,%edx
f010d8b5:	74 09                	je     f010d8c0 <sys_check_LRU_lists+0x125>
			{
				second_list_validation = 0;
f010d8b7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
				break;
f010d8be:	eb 3e                	jmp    f010d8fe <sys_check_LRU_lists+0x163>
			}
			idx_second_list++;
f010d8c0:	ff 45 ec             	incl   -0x14(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d8c3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d8c6:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d8cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d8cf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d8d3:	74 08                	je     f010d8dd <sys_check_LRU_lists+0x142>
f010d8d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d8d8:	8b 40 10             	mov    0x10(%eax),%eax
f010d8db:	eb 05                	jmp    f010d8e2 <sys_check_LRU_lists+0x147>
f010d8dd:	b8 00 00 00 00       	mov    $0x0,%eax
f010d8e2:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d8e5:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010d8eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d8ee:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d8f4:	85 c0                	test   %eax,%eax
f010d8f6:	75 8d                	jne    f010d885 <sys_check_LRU_lists+0xea>
f010d8f8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d8fc:	75 87                	jne    f010d885 <sys_check_LRU_lists+0xea>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f010d8fe:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d901:	8b 90 e4 05 00 00    	mov    0x5e4(%eax),%edx
f010d907:	8b 45 14             	mov    0x14(%ebp),%eax
f010d90a:	39 c2                	cmp    %eax,%edx
f010d90c:	74 07                	je     f010d915 <sys_check_LRU_lists+0x17a>
			second_list_validation = 0;
f010d90e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	}
	return active_list_validation&second_list_validation;
f010d915:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d918:	23 45 f8             	and    -0x8(%ebp),%eax
}
f010d91b:	c9                   	leave  
f010d91c:	c3                   	ret    

f010d91d <sys_check_LRU_lists_free>:



//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f010d91d:	55                   	push   %ebp
f010d91e:	89 e5                	mov    %esp,%ebp
f010d920:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010d923:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d928:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int list_validation_count = 0;
f010d92b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d932:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d935:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f010d93b:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d93e:	eb 65                	jmp    f010d9a5 <sys_check_LRU_lists_free+0x88>
	{
		for(int var = 0; var < list_size; var++)
f010d940:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010d947:	eb 3a                	jmp    f010d983 <sys_check_LRU_lists_free+0x66>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010d949:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d94c:	8b 00                	mov    (%eax),%eax
f010d94e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010d951:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d954:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d959:	89 c2                	mov    %eax,%edx
f010d95b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d95e:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d965:	8b 45 08             	mov    0x8(%ebp),%eax
f010d968:	01 c8                	add    %ecx,%eax
f010d96a:	8b 00                	mov    (%eax),%eax
f010d96c:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d96f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d972:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d977:	39 c2                	cmp    %eax,%edx
f010d979:	75 05                	jne    f010d980 <sys_check_LRU_lists_free+0x63>
			{
				list_validation_count++;
f010d97b:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010d97e:	eb 0b                	jmp    f010d98b <sys_check_LRU_lists_free+0x6e>
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f010d980:	ff 45 f4             	incl   -0xc(%ebp)
f010d983:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d986:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d989:	7c be                	jl     f010d949 <sys_check_LRU_lists_free+0x2c>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010d98b:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010d98f:	7e 08                	jle    f010d999 <sys_check_LRU_lists_free+0x7c>
			return list_validation_count;
f010d991:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d994:	e9 ed 00 00 00       	jmp    f010da86 <sys_check_LRU_lists_free+0x169>
	struct Env* env = curenv;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d999:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d99c:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d9a2:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d9a5:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d9a9:	74 08                	je     f010d9b3 <sys_check_LRU_lists_free+0x96>
f010d9ab:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d9ae:	8b 40 10             	mov    0x10(%eax),%eax
f010d9b1:	eb 05                	jmp    f010d9b8 <sys_check_LRU_lists_free+0x9b>
f010d9b3:	b8 00 00 00 00       	mov    $0x0,%eax
f010d9b8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d9bb:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010d9c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d9c4:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d9ca:	85 c0                	test   %eax,%eax
f010d9cc:	0f 85 6e ff ff ff    	jne    f010d940 <sys_check_LRU_lists_free+0x23>
f010d9d2:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d9d6:	0f 85 64 ff ff ff    	jne    f010d940 <sys_check_LRU_lists_free+0x23>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d9dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d9df:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010d9e5:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d9e8:	eb 62                	jmp    f010da4c <sys_check_LRU_lists_free+0x12f>
	{
		for(int var = 0; var < list_size; var++)
f010d9ea:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010d9f1:	eb 3a                	jmp    f010da2d <sys_check_LRU_lists_free+0x110>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010d9f3:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d9f6:	8b 00                	mov    (%eax),%eax
f010d9f8:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010d9fb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d9fe:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010da03:	89 c2                	mov    %eax,%edx
f010da05:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010da08:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010da0f:	8b 45 08             	mov    0x8(%ebp),%eax
f010da12:	01 c8                	add    %ecx,%eax
f010da14:	8b 00                	mov    (%eax),%eax
f010da16:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010da19:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010da1c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010da21:	39 c2                	cmp    %eax,%edx
f010da23:	75 05                	jne    f010da2a <sys_check_LRU_lists_free+0x10d>
			{
				list_validation_count++;
f010da25:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010da28:	eb 0b                	jmp    f010da35 <sys_check_LRU_lists_free+0x118>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f010da2a:	ff 45 f0             	incl   -0x10(%ebp)
f010da2d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010da30:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010da33:	7c be                	jl     f010d9f3 <sys_check_LRU_lists_free+0xd6>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010da35:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010da39:	7e 05                	jle    f010da40 <sys_check_LRU_lists_free+0x123>
			return list_validation_count;
f010da3b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010da3e:	eb 46                	jmp    f010da86 <sys_check_LRU_lists_free+0x169>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010da40:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010da43:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010da49:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010da4c:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010da50:	74 08                	je     f010da5a <sys_check_LRU_lists_free+0x13d>
f010da52:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010da55:	8b 40 10             	mov    0x10(%eax),%eax
f010da58:	eb 05                	jmp    f010da5f <sys_check_LRU_lists_free+0x142>
f010da5a:	b8 00 00 00 00       	mov    $0x0,%eax
f010da5f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010da62:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010da68:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010da6b:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010da71:	85 c0                	test   %eax,%eax
f010da73:	0f 85 71 ff ff ff    	jne    f010d9ea <sys_check_LRU_lists_free+0xcd>
f010da79:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010da7d:	0f 85 67 ff ff ff    	jne    f010d9ea <sys_check_LRU_lists_free+0xcd>
			return list_validation_count;

	}


	return list_validation_count;
f010da83:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f010da86:	c9                   	leave  
f010da87:	c3                   	ret    

f010da88 <syscall>:
/*****************************************************************************/
/************************* SYSTEM CALLS DISPATCHER ***************************/
/*****************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010da88:	55                   	push   %ebp
f010da89:	89 e5                	mov    %esp,%ebp
f010da8b:	56                   	push   %esi
f010da8c:	53                   	push   %ebx
f010da8d:	83 ec 10             	sub    $0x10,%esp
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	// LAB 3: Your code here.
	switch(syscallno)
f010da90:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010da94:	0f 87 0e 04 00 00    	ja     f010dea8 <syscall+0x420>
f010da9a:	8b 45 08             	mov    0x8(%ebp),%eax
f010da9d:	c1 e0 02             	shl    $0x2,%eax
f010daa0:	05 3c 80 13 f0       	add    $0xf013803c,%eax
f010daa5:	8b 00                	mov    (%eax),%eax
f010daa7:	ff e0                	jmp    *%eax
	{
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010daa9:	8b 45 14             	mov    0x14(%ebp),%eax
f010daac:	0f b6 d0             	movzbl %al,%edx
f010daaf:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dab2:	83 ec 04             	sub    $0x4,%esp
f010dab5:	52                   	push   %edx
f010dab6:	ff 75 10             	pushl  0x10(%ebp)
f010dab9:	50                   	push   %eax
f010daba:	e8 db f4 ff ff       	call   f010cf9a <sys_cputs>
f010dabf:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dac2:	b8 00 00 00 00       	mov    $0x0,%eax
f010dac7:	e9 e1 03 00 00       	jmp    f010dead <syscall+0x425>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010dacc:	e8 3e f5 ff ff       	call   f010d00f <sys_cgetc>
f010dad1:	e9 d7 03 00 00       	jmp    f010dead <syscall+0x425>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010dad6:	83 ec 08             	sub    $0x8,%esp
f010dad9:	ff 75 10             	pushl  0x10(%ebp)
f010dadc:	ff 75 0c             	pushl  0xc(%ebp)
f010dadf:	e8 91 f6 ff ff       	call   f010d175 <sys_calculate_required_frames>
f010dae4:	83 c4 10             	add    $0x10,%esp
f010dae7:	e9 c1 03 00 00       	jmp    f010dead <syscall+0x425>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010daec:	e8 a6 f6 ff ff       	call   f010d197 <sys_calculate_free_frames>
f010daf1:	e9 b7 03 00 00       	jmp    f010dead <syscall+0x425>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010daf6:	e8 bb f6 ff ff       	call   f010d1b6 <sys_calculate_modified_frames>
f010dafb:	e9 ad 03 00 00       	jmp    f010dead <syscall+0x425>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010db00:	e8 cb f6 ff ff       	call   f010d1d0 <sys_calculate_notmod_frames>
f010db05:	e9 a3 03 00 00       	jmp    f010dead <syscall+0x425>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010db0a:	e8 33 f7 ff ff       	call   f010d242 <sys_pf_calculate_allocated_pages>
f010db0f:	e9 99 03 00 00       	jmp    f010dead <syscall+0x425>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010db14:	83 ec 0c             	sub    $0xc,%esp
f010db17:	ff 75 0c             	pushl  0xc(%ebp)
f010db1a:	e8 cb f6 ff ff       	call   f010d1ea <sys_calculate_pages_tobe_removed_ready_exit>
f010db1f:	83 c4 10             	add    $0x10,%esp
f010db22:	e9 86 03 00 00       	jmp    f010dead <syscall+0x425>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010db27:	e8 d4 f6 ff ff       	call   f010d200 <sys_scarce_memory>
		return 0;
f010db2c:	b8 00 00 00 00       	mov    $0x0,%eax
f010db31:	e9 77 03 00 00       	jmp    f010dead <syscall+0x425>
		break;
	case SYS_free_user_mem:
		sys_free_user_mem(a1, a2);
f010db36:	83 ec 08             	sub    $0x8,%esp
f010db39:	ff 75 10             	pushl  0x10(%ebp)
f010db3c:	ff 75 0c             	pushl  0xc(%ebp)
f010db3f:	e8 17 f7 ff ff       	call   f010d25b <sys_free_user_mem>
f010db44:	83 c4 10             	add    $0x10,%esp
		return 0;
f010db47:	b8 00 00 00 00       	mov    $0x0,%eax
f010db4c:	e9 5c 03 00 00       	jmp    f010dead <syscall+0x425>
		break;
		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010db51:	8b 55 10             	mov    0x10(%ebp),%edx
f010db54:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db57:	83 ec 08             	sub    $0x8,%esp
f010db5a:	52                   	push   %edx
f010db5b:	50                   	push   %eax
f010db5c:	e8 c1 f4 ff ff       	call   f010d022 <__sys_allocate_page>
f010db61:	83 c4 10             	add    $0x10,%esp
		return 0;
f010db64:	b8 00 00 00 00       	mov    $0x0,%eax
f010db69:	e9 3f 03 00 00       	jmp    f010dead <syscall+0x425>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010db6e:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010db71:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010db74:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010db77:	8b 55 10             	mov    0x10(%ebp),%edx
f010db7a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db7d:	83 ec 0c             	sub    $0xc,%esp
f010db80:	56                   	push   %esi
f010db81:	53                   	push   %ebx
f010db82:	51                   	push   %ecx
f010db83:	52                   	push   %edx
f010db84:	50                   	push   %eax
f010db85:	e8 b1 f5 ff ff       	call   f010d13b <__sys_map_frame>
f010db8a:	83 c4 20             	add    $0x20,%esp
		return 0;
f010db8d:	b8 00 00 00 00       	mov    $0x0,%eax
f010db92:	e9 16 03 00 00       	jmp    f010dead <syscall+0x425>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010db97:	8b 55 10             	mov    0x10(%ebp),%edx
f010db9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db9d:	83 ec 08             	sub    $0x8,%esp
f010dba0:	52                   	push   %edx
f010dba1:	50                   	push   %eax
f010dba2:	e8 b1 f5 ff ff       	call   f010d158 <__sys_unmap_frame>
f010dba7:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dbaa:	b8 00 00 00 00       	mov    $0x0,%eax
f010dbaf:	e9 f9 02 00 00       	jmp    f010dead <syscall+0x425>
		break;

		//2022
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010dbb4:	83 ec 04             	sub    $0x4,%esp
f010dbb7:	ff 75 14             	pushl  0x14(%ebp)
f010dbba:	ff 75 10             	pushl  0x10(%ebp)
f010dbbd:	ff 75 0c             	pushl  0xc(%ebp)
f010dbc0:	e8 f8 f6 ff ff       	call   f010d2bd <sys_allocate_chunk>
f010dbc5:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dbc8:	b8 00 00 00 00       	mov    $0x0,%eax
f010dbcd:	e9 db 02 00 00       	jmp    f010dead <syscall+0x425>
		break;
	case SYS_disableINTR:
		sys_disable_interrupt();
f010dbd2:	e8 41 f7 ff ff       	call   f010d318 <sys_disable_interrupt>
		return 0;
f010dbd7:	b8 00 00 00 00       	mov    $0x0,%eax
f010dbdc:	e9 cc 02 00 00       	jmp    f010dead <syscall+0x425>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010dbe1:	e8 4c f7 ff ff       	call   f010d332 <sys_enable_interrupt>
		return 0;
f010dbe6:	b8 00 00 00 00       	mov    $0x0,%eax
f010dbeb:	e9 bd 02 00 00       	jmp    f010dead <syscall+0x425>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010dbf0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbf3:	0f be c0             	movsbl %al,%eax
f010dbf6:	83 ec 0c             	sub    $0xc,%esp
f010dbf9:	50                   	push   %eax
f010dbfa:	e8 ec f3 ff ff       	call   f010cfeb <sys_cputc>
f010dbff:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dc02:	b8 00 00 00 00       	mov    $0x0,%eax
f010dc07:	e9 a1 02 00 00       	jmp    f010dead <syscall+0x425>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010dc0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc0f:	0f be c0             	movsbl %al,%eax
f010dc12:	83 ec 0c             	sub    $0xc,%esp
f010dc15:	50                   	push   %eax
f010dc16:	e8 f3 f5 ff ff       	call   f010d20e <sys_clearFFL>
f010dc1b:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dc1e:	b8 00 00 00 00       	mov    $0x0,%eax
f010dc23:	e9 85 02 00 00       	jmp    f010dead <syscall+0x425>
		break;

	case SYS_create_semaphore:
		return sys_createSemaphore((char*)a1, a2);
f010dc28:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc2b:	83 ec 08             	sub    $0x8,%esp
f010dc2e:	ff 75 10             	pushl  0x10(%ebp)
f010dc31:	50                   	push   %eax
f010dc32:	e8 15 f7 ff ff       	call   f010d34c <sys_createSemaphore>
f010dc37:	83 c4 10             	add    $0x10,%esp
f010dc3a:	e9 6e 02 00 00       	jmp    f010dead <syscall+0x425>
		break;

	case SYS_wait_semaphore:
		sys_waitSemaphore((int32)a1, (char*)a2);
f010dc3f:	8b 55 10             	mov    0x10(%ebp),%edx
f010dc42:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc45:	83 ec 08             	sub    $0x8,%esp
f010dc48:	52                   	push   %edx
f010dc49:	50                   	push   %eax
f010dc4a:	e8 1f f7 ff ff       	call   f010d36e <sys_waitSemaphore>
f010dc4f:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dc52:	b8 00 00 00 00       	mov    $0x0,%eax
f010dc57:	e9 51 02 00 00       	jmp    f010dead <syscall+0x425>
		break;

	case SYS_signal_semaphore:
		sys_signalSemaphore((int32)a1, (char*)a2);
f010dc5c:	8b 55 10             	mov    0x10(%ebp),%edx
f010dc5f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc62:	83 ec 08             	sub    $0x8,%esp
f010dc65:	52                   	push   %edx
f010dc66:	50                   	push   %eax
f010dc67:	e8 1c f7 ff ff       	call   f010d388 <sys_signalSemaphore>
f010dc6c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dc6f:	b8 00 00 00 00       	mov    $0x0,%eax
f010dc74:	e9 34 02 00 00       	jmp    f010dead <syscall+0x425>
		break;

	case SYS_get_semaphore_value:
		return sys_getSemaphoreValue((int32)a1, (char*)a2);
f010dc79:	8b 55 10             	mov    0x10(%ebp),%edx
f010dc7c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc7f:	83 ec 08             	sub    $0x8,%esp
f010dc82:	52                   	push   %edx
f010dc83:	50                   	push   %eax
f010dc84:	e8 19 f7 ff ff       	call   f010d3a2 <sys_getSemaphoreValue>
f010dc89:	83 c4 10             	add    $0x10,%esp
f010dc8c:	e9 1c 02 00 00       	jmp    f010dead <syscall+0x425>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010dc91:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010dc94:	8b 45 14             	mov    0x14(%ebp),%eax
f010dc97:	0f b6 d0             	movzbl %al,%edx
f010dc9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc9d:	51                   	push   %ecx
f010dc9e:	52                   	push   %edx
f010dc9f:	ff 75 10             	pushl  0x10(%ebp)
f010dca2:	50                   	push   %eax
f010dca3:	e8 61 f7 ff ff       	call   f010d409 <sys_createSharedObject>
f010dca8:	83 c4 10             	add    $0x10,%esp
f010dcab:	e9 fd 01 00 00       	jmp    f010dead <syscall+0x425>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010dcb0:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010dcb3:	8b 55 10             	mov    0x10(%ebp),%edx
f010dcb6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dcb9:	83 ec 04             	sub    $0x4,%esp
f010dcbc:	51                   	push   %ecx
f010dcbd:	52                   	push   %edx
f010dcbe:	50                   	push   %eax
f010dcbf:	e8 8e f7 ff ff       	call   f010d452 <sys_getSharedObject>
f010dcc4:	83 c4 10             	add    $0x10,%esp
f010dcc7:	e9 e1 01 00 00       	jmp    f010dead <syscall+0x425>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010dccc:	8b 55 10             	mov    0x10(%ebp),%edx
f010dccf:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dcd2:	83 ec 08             	sub    $0x8,%esp
f010dcd5:	52                   	push   %edx
f010dcd6:	50                   	push   %eax
f010dcd7:	e8 92 f7 ff ff       	call   f010d46e <sys_freeSharedObject>
f010dcdc:	83 c4 10             	add    $0x10,%esp
f010dcdf:	e9 c9 01 00 00       	jmp    f010dead <syscall+0x425>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010dce4:	8b 55 10             	mov    0x10(%ebp),%edx
f010dce7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dcea:	83 ec 08             	sub    $0x8,%esp
f010dced:	52                   	push   %edx
f010dcee:	50                   	push   %eax
f010dcef:	e8 45 f7 ff ff       	call   f010d439 <sys_getSizeOfSharedObject>
f010dcf4:	83 c4 10             	add    $0x10,%esp
f010dcf7:	e9 b1 01 00 00       	jmp    f010dead <syscall+0x425>
		break;

	case SYS_get_max_shares:
		return sys_getMaxShares();
f010dcfc:	e8 86 f7 ff ff       	call   f010d487 <sys_getMaxShares>
f010dd01:	e9 a7 01 00 00       	jmp    f010dead <syscall+0x425>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010dd06:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd09:	ff 75 18             	pushl  0x18(%ebp)
f010dd0c:	ff 75 14             	pushl  0x14(%ebp)
f010dd0f:	ff 75 10             	pushl  0x10(%ebp)
f010dd12:	50                   	push   %eax
f010dd13:	e8 86 f8 ff ff       	call   f010d59e <sys_create_env>
f010dd18:	83 c4 10             	add    $0x10,%esp
f010dd1b:	e9 8d 01 00 00       	jmp    f010dead <syscall+0x425>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010dd20:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd23:	83 ec 0c             	sub    $0xc,%esp
f010dd26:	50                   	push   %eax
f010dd27:	e8 b2 f8 ff ff       	call   f010d5de <sys_run_env>
f010dd2c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dd2f:	b8 00 00 00 00       	mov    $0x0,%eax
f010dd34:	e9 74 01 00 00       	jmp    f010dead <syscall+0x425>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010dd39:	e8 60 f7 ff ff       	call   f010d49e <sys_getenvindex>
f010dd3e:	e9 6a 01 00 00       	jmp    f010dead <syscall+0x425>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010dd43:	e8 49 f7 ff ff       	call   f010d491 <sys_getenvid>
f010dd48:	e9 60 01 00 00       	jmp    f010dead <syscall+0x425>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010dd4d:	e8 99 f7 ff ff       	call   f010d4eb <sys_getparentenvid>
f010dd52:	e9 56 01 00 00       	jmp    f010dead <syscall+0x425>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010dd57:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd5a:	83 ec 0c             	sub    $0xc,%esp
f010dd5d:	50                   	push   %eax
f010dd5e:	e8 95 f7 ff ff       	call   f010d4f8 <sys_destroy_env>
f010dd63:	83 c4 10             	add    $0x10,%esp
f010dd66:	e9 42 01 00 00       	jmp    f010dead <syscall+0x425>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010dd6b:	e8 20 f8 ff ff       	call   f010d590 <sys_exit_env>
		return 0;
f010dd70:	b8 00 00 00 00       	mov    $0x0,%eax
f010dd75:	e9 33 01 00 00       	jmp    f010dead <syscall+0x425>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010dd7a:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010dd7d:	83 ec 0c             	sub    $0xc,%esp
f010dd80:	50                   	push   %eax
f010dd81:	e8 70 f8 ff ff       	call   f010d5f6 <sys_get_virtual_time>
f010dd86:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010dd89:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010dd8f:	8b 45 10             	mov    0x10(%ebp),%eax
f010dd92:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010dd95:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010dd98:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dd9b:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010dd9d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010dda0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dda3:	89 10                	mov    %edx,(%eax)
		return 0;
f010dda5:	b8 00 00 00 00       	mov    $0x0,%eax
f010ddaa:	e9 fe 00 00 00       	jmp    f010dead <syscall+0x425>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010ddaf:	83 ec 04             	sub    $0x4,%esp
f010ddb2:	ff 75 14             	pushl  0x14(%ebp)
f010ddb5:	ff 75 10             	pushl  0x10(%ebp)
f010ddb8:	ff 75 0c             	pushl  0xc(%ebp)
f010ddbb:	e8 20 f5 ff ff       	call   f010d2e0 <sys_move_user_mem>
f010ddc0:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ddc3:	b8 00 00 00 00       	mov    $0x0,%eax
f010ddc8:	e9 e0 00 00 00       	jmp    f010dead <syscall+0x425>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010ddcd:	e8 53 f8 ff ff       	call   f010d625 <sys_rcr2>
f010ddd2:	e9 d6 00 00 00       	jmp    f010dead <syscall+0x425>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010ddd7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ddda:	0f b6 c0             	movzbl %al,%eax
f010dddd:	83 ec 0c             	sub    $0xc,%esp
f010dde0:	50                   	push   %eax
f010dde1:	e8 51 f8 ff ff       	call   f010d637 <sys_bypassPageFault>
f010dde6:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dde9:	b8 00 00 00 00       	mov    $0x0,%eax
f010ddee:	e9 ba 00 00 00       	jmp    f010dead <syscall+0x425>

	case SYS_rsttst:
		rsttst();
f010ddf3:	e8 56 f8 ff ff       	call   f010d64e <rsttst>
		return 0;
f010ddf8:	b8 00 00 00 00       	mov    $0x0,%eax
f010ddfd:	e9 ab 00 00 00       	jmp    f010dead <syscall+0x425>
	case SYS_inctst:
		inctst();
f010de02:	e8 57 f8 ff ff       	call   f010d65e <inctst>
		return 0;
f010de07:	b8 00 00 00 00       	mov    $0x0,%eax
f010de0c:	e9 9c 00 00 00       	jmp    f010dead <syscall+0x425>
	case SYS_chktst:
		chktst(a1);
f010de11:	83 ec 0c             	sub    $0xc,%esp
f010de14:	ff 75 0c             	pushl  0xc(%ebp)
f010de17:	e8 44 f9 ff ff       	call   f010d760 <chktst>
f010de1c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010de1f:	b8 00 00 00 00       	mov    $0x0,%eax
f010de24:	e9 84 00 00 00       	jmp    f010dead <syscall+0x425>
	case SYS_gettst:
		return gettst();
f010de29:	e8 41 f8 ff ff       	call   f010d66f <gettst>
f010de2e:	eb 7d                	jmp    f010dead <syscall+0x425>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010de30:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010de33:	8b 45 18             	mov    0x18(%ebp),%eax
f010de36:	0f be c0             	movsbl %al,%eax
f010de39:	83 ec 0c             	sub    $0xc,%esp
f010de3c:	52                   	push   %edx
f010de3d:	50                   	push   %eax
f010de3e:	ff 75 14             	pushl  0x14(%ebp)
f010de41:	ff 75 10             	pushl  0x10(%ebp)
f010de44:	ff 75 0c             	pushl  0xc(%ebp)
f010de47:	e8 2d f8 ff ff       	call   f010d679 <tst>
f010de4c:	83 c4 20             	add    $0x20,%esp
		return 0;
f010de4f:	b8 00 00 00 00       	mov    $0x0,%eax
f010de54:	eb 57                	jmp    f010dead <syscall+0x425>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010de56:	e8 a5 f4 ff ff       	call   f010d300 <sys_get_heap_strategy>
f010de5b:	eb 50                	jmp    f010dead <syscall+0x425>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010de5d:	83 ec 0c             	sub    $0xc,%esp
f010de60:	ff 75 0c             	pushl  0xc(%ebp)
f010de63:	e8 a2 f4 ff ff       	call   f010d30a <sys_set_uheap_strategy>
f010de68:	83 c4 10             	add    $0x10,%esp
		return 0;
f010de6b:	b8 00 00 00 00       	mov    $0x0,%eax
f010de70:	eb 3b                	jmp    f010dead <syscall+0x425>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010de72:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010de75:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010de78:	8b 55 10             	mov    0x10(%ebp),%edx
f010de7b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de7e:	53                   	push   %ebx
f010de7f:	51                   	push   %ecx
f010de80:	52                   	push   %edx
f010de81:	50                   	push   %eax
f010de82:	e8 14 f9 ff ff       	call   f010d79b <sys_check_LRU_lists>
f010de87:	83 c4 10             	add    $0x10,%esp
f010de8a:	eb 21                	jmp    f010dead <syscall+0x425>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010de8c:	8b 55 10             	mov    0x10(%ebp),%edx
f010de8f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de92:	83 ec 08             	sub    $0x8,%esp
f010de95:	52                   	push   %edx
f010de96:	50                   	push   %eax
f010de97:	e8 81 fa ff ff       	call   f010d91d <sys_check_LRU_lists_free>
f010de9c:	83 c4 10             	add    $0x10,%esp
f010de9f:	eb 0c                	jmp    f010dead <syscall+0x425>

	case NSYSCALLS:
		return 	-E_INVAL;
f010dea1:	b8 03 00 00 00       	mov    $0x3,%eax
f010dea6:	eb 05                	jmp    f010dead <syscall+0x425>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010dea8:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010dead:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010deb0:	5b                   	pop    %ebx
f010deb1:	5e                   	pop    %esi
f010deb2:	5d                   	pop    %ebp
f010deb3:	c3                   	ret    

f010deb4 <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010deb4:	55                   	push   %ebp
f010deb5:	89 e5                	mov    %esp,%ebp
f010deb7:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010deba:	8b 45 0c             	mov    0xc(%ebp),%eax
f010debd:	8b 00                	mov    (%eax),%eax
f010debf:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010dec2:	8b 45 10             	mov    0x10(%ebp),%eax
f010dec5:	8b 00                	mov    (%eax),%eax
f010dec7:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010deca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010ded1:	e9 ca 00 00 00       	jmp    f010dfa0 <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010ded6:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010ded9:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010dedc:	01 d0                	add    %edx,%eax
f010dede:	89 c2                	mov    %eax,%edx
f010dee0:	c1 ea 1f             	shr    $0x1f,%edx
f010dee3:	01 d0                	add    %edx,%eax
f010dee5:	d1 f8                	sar    %eax
f010dee7:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010deea:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010deed:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010def0:	eb 03                	jmp    f010def5 <stab_binsearch+0x41>
			m--;
f010def2:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010def5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010def8:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010defb:	7c 1e                	jl     f010df1b <stab_binsearch+0x67>
f010defd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010df00:	89 d0                	mov    %edx,%eax
f010df02:	01 c0                	add    %eax,%eax
f010df04:	01 d0                	add    %edx,%eax
f010df06:	c1 e0 02             	shl    $0x2,%eax
f010df09:	89 c2                	mov    %eax,%edx
f010df0b:	8b 45 08             	mov    0x8(%ebp),%eax
f010df0e:	01 d0                	add    %edx,%eax
f010df10:	8a 40 04             	mov    0x4(%eax),%al
f010df13:	0f b6 c0             	movzbl %al,%eax
f010df16:	3b 45 14             	cmp    0x14(%ebp),%eax
f010df19:	75 d7                	jne    f010def2 <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010df1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010df1e:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010df21:	7d 09                	jge    f010df2c <stab_binsearch+0x78>
			l = true_m + 1;
f010df23:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010df26:	40                   	inc    %eax
f010df27:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010df2a:	eb 74                	jmp    f010dfa0 <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010df2c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010df33:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010df36:	89 d0                	mov    %edx,%eax
f010df38:	01 c0                	add    %eax,%eax
f010df3a:	01 d0                	add    %edx,%eax
f010df3c:	c1 e0 02             	shl    $0x2,%eax
f010df3f:	89 c2                	mov    %eax,%edx
f010df41:	8b 45 08             	mov    0x8(%ebp),%eax
f010df44:	01 d0                	add    %edx,%eax
f010df46:	8b 40 08             	mov    0x8(%eax),%eax
f010df49:	3b 45 18             	cmp    0x18(%ebp),%eax
f010df4c:	73 11                	jae    f010df5f <stab_binsearch+0xab>
			*region_left = m;
f010df4e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df51:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010df54:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010df56:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010df59:	40                   	inc    %eax
f010df5a:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010df5d:	eb 41                	jmp    f010dfa0 <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010df5f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010df62:	89 d0                	mov    %edx,%eax
f010df64:	01 c0                	add    %eax,%eax
f010df66:	01 d0                	add    %edx,%eax
f010df68:	c1 e0 02             	shl    $0x2,%eax
f010df6b:	89 c2                	mov    %eax,%edx
f010df6d:	8b 45 08             	mov    0x8(%ebp),%eax
f010df70:	01 d0                	add    %edx,%eax
f010df72:	8b 40 08             	mov    0x8(%eax),%eax
f010df75:	3b 45 18             	cmp    0x18(%ebp),%eax
f010df78:	76 14                	jbe    f010df8e <stab_binsearch+0xda>
			*region_right = m - 1;
f010df7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010df7d:	8d 50 ff             	lea    -0x1(%eax),%edx
f010df80:	8b 45 10             	mov    0x10(%ebp),%eax
f010df83:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010df85:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010df88:	48                   	dec    %eax
f010df89:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010df8c:	eb 12                	jmp    f010dfa0 <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010df8e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df91:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010df94:	89 10                	mov    %edx,(%eax)
			l = m;
f010df96:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010df99:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010df9c:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010dfa0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010dfa3:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010dfa6:	0f 8e 2a ff ff ff    	jle    f010ded6 <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010dfac:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010dfb0:	75 0f                	jne    f010dfc1 <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010dfb2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfb5:	8b 00                	mov    (%eax),%eax
f010dfb7:	8d 50 ff             	lea    -0x1(%eax),%edx
f010dfba:	8b 45 10             	mov    0x10(%ebp),%eax
f010dfbd:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010dfbf:	eb 3d                	jmp    f010dffe <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010dfc1:	8b 45 10             	mov    0x10(%ebp),%eax
f010dfc4:	8b 00                	mov    (%eax),%eax
f010dfc6:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010dfc9:	eb 03                	jmp    f010dfce <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010dfcb:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010dfce:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfd1:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010dfd3:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010dfd6:	7d 1e                	jge    f010dff6 <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010dfd8:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010dfdb:	89 d0                	mov    %edx,%eax
f010dfdd:	01 c0                	add    %eax,%eax
f010dfdf:	01 d0                	add    %edx,%eax
f010dfe1:	c1 e0 02             	shl    $0x2,%eax
f010dfe4:	89 c2                	mov    %eax,%edx
f010dfe6:	8b 45 08             	mov    0x8(%ebp),%eax
f010dfe9:	01 d0                	add    %edx,%eax
f010dfeb:	8a 40 04             	mov    0x4(%eax),%al
f010dfee:	0f b6 c0             	movzbl %al,%eax
f010dff1:	3b 45 14             	cmp    0x14(%ebp),%eax
f010dff4:	75 d5                	jne    f010dfcb <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010dff6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dff9:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010dffc:	89 10                	mov    %edx,(%eax)
	}
}
f010dffe:	90                   	nop
f010dfff:	c9                   	leave  
f010e000:	c3                   	ret    

f010e001 <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010e001:	55                   	push   %ebp
f010e002:	89 e5                	mov    %esp,%ebp
f010e004:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010e007:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e00a:	c7 00 00 81 13 f0    	movl   $0xf0138100,(%eax)
	info->eip_line = 0;
f010e010:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e013:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010e01a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e01d:	c7 40 08 00 81 13 f0 	movl   $0xf0138100,0x8(%eax)
	info->eip_fn_namelen = 9;
f010e024:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e027:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010e02e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e031:	8b 55 08             	mov    0x8(%ebp),%edx
f010e034:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010e037:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e03a:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010e041:	8b 45 08             	mov    0x8(%ebp),%eax
f010e044:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010e049:	76 1e                	jbe    f010e069 <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010e04b:	c7 45 f4 b0 dc 13 f0 	movl   $0xf013dcb0,-0xc(%ebp)
		stab_end = __STAB_END__;
f010e052:	c7 45 f0 3c e0 17 f0 	movl   $0xf017e03c,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010e059:	c7 45 ec 3d e0 17 f0 	movl   $0xf017e03d,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010e060:	c7 45 e8 7e ad 18 f0 	movl   $0xf018ad7e,-0x18(%ebp)
f010e067:	eb 2a                	jmp    f010e093 <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010e069:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010e070:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e073:	8b 00                	mov    (%eax),%eax
f010e075:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010e078:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e07b:	8b 40 04             	mov    0x4(%eax),%eax
f010e07e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010e081:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e084:	8b 40 08             	mov    0x8(%eax),%eax
f010e087:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010e08a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e08d:	8b 40 0c             	mov    0xc(%eax),%eax
f010e090:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010e093:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e096:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e099:	76 0a                	jbe    f010e0a5 <debuginfo_eip+0xa4>
f010e09b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e09e:	48                   	dec    %eax
f010e09f:	8a 00                	mov    (%eax),%al
f010e0a1:	84 c0                	test   %al,%al
f010e0a3:	74 0a                	je     f010e0af <debuginfo_eip+0xae>
		return -1;
f010e0a5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010e0aa:	e9 01 02 00 00       	jmp    f010e2b0 <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010e0af:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010e0b6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e0b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e0bc:	29 c2                	sub    %eax,%edx
f010e0be:	89 d0                	mov    %edx,%eax
f010e0c0:	c1 f8 02             	sar    $0x2,%eax
f010e0c3:	89 c2                	mov    %eax,%edx
f010e0c5:	89 d0                	mov    %edx,%eax
f010e0c7:	c1 e0 02             	shl    $0x2,%eax
f010e0ca:	01 d0                	add    %edx,%eax
f010e0cc:	c1 e0 02             	shl    $0x2,%eax
f010e0cf:	01 d0                	add    %edx,%eax
f010e0d1:	c1 e0 02             	shl    $0x2,%eax
f010e0d4:	01 d0                	add    %edx,%eax
f010e0d6:	89 c1                	mov    %eax,%ecx
f010e0d8:	c1 e1 08             	shl    $0x8,%ecx
f010e0db:	01 c8                	add    %ecx,%eax
f010e0dd:	89 c1                	mov    %eax,%ecx
f010e0df:	c1 e1 10             	shl    $0x10,%ecx
f010e0e2:	01 c8                	add    %ecx,%eax
f010e0e4:	01 c0                	add    %eax,%eax
f010e0e6:	01 d0                	add    %edx,%eax
f010e0e8:	48                   	dec    %eax
f010e0e9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010e0ec:	ff 75 08             	pushl  0x8(%ebp)
f010e0ef:	6a 64                	push   $0x64
f010e0f1:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010e0f4:	50                   	push   %eax
f010e0f5:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e0f8:	50                   	push   %eax
f010e0f9:	ff 75 f4             	pushl  -0xc(%ebp)
f010e0fc:	e8 b3 fd ff ff       	call   f010deb4 <stab_binsearch>
f010e101:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010e104:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e107:	85 c0                	test   %eax,%eax
f010e109:	75 0a                	jne    f010e115 <debuginfo_eip+0x114>
		return -1;
f010e10b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010e110:	e9 9b 01 00 00       	jmp    f010e2b0 <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010e115:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e118:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010e11b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e11e:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010e121:	ff 75 08             	pushl  0x8(%ebp)
f010e124:	6a 24                	push   $0x24
f010e126:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010e129:	50                   	push   %eax
f010e12a:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010e12d:	50                   	push   %eax
f010e12e:	ff 75 f4             	pushl  -0xc(%ebp)
f010e131:	e8 7e fd ff ff       	call   f010deb4 <stab_binsearch>
f010e136:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010e139:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010e13c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e13f:	39 c2                	cmp    %eax,%edx
f010e141:	0f 8f 86 00 00 00    	jg     f010e1cd <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010e147:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e14a:	89 c2                	mov    %eax,%edx
f010e14c:	89 d0                	mov    %edx,%eax
f010e14e:	01 c0                	add    %eax,%eax
f010e150:	01 d0                	add    %edx,%eax
f010e152:	c1 e0 02             	shl    $0x2,%eax
f010e155:	89 c2                	mov    %eax,%edx
f010e157:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e15a:	01 d0                	add    %edx,%eax
f010e15c:	8b 00                	mov    (%eax),%eax
f010e15e:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010e161:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010e164:	29 d1                	sub    %edx,%ecx
f010e166:	89 ca                	mov    %ecx,%edx
f010e168:	39 d0                	cmp    %edx,%eax
f010e16a:	73 22                	jae    f010e18e <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010e16c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e16f:	89 c2                	mov    %eax,%edx
f010e171:	89 d0                	mov    %edx,%eax
f010e173:	01 c0                	add    %eax,%eax
f010e175:	01 d0                	add    %edx,%eax
f010e177:	c1 e0 02             	shl    $0x2,%eax
f010e17a:	89 c2                	mov    %eax,%edx
f010e17c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e17f:	01 d0                	add    %edx,%eax
f010e181:	8b 10                	mov    (%eax),%edx
f010e183:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e186:	01 c2                	add    %eax,%edx
f010e188:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e18b:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010e18e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e191:	89 c2                	mov    %eax,%edx
f010e193:	89 d0                	mov    %edx,%eax
f010e195:	01 c0                	add    %eax,%eax
f010e197:	01 d0                	add    %edx,%eax
f010e199:	c1 e0 02             	shl    $0x2,%eax
f010e19c:	89 c2                	mov    %eax,%edx
f010e19e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e1a1:	01 d0                	add    %edx,%eax
f010e1a3:	8b 50 08             	mov    0x8(%eax),%edx
f010e1a6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e1a9:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010e1ac:	8b 55 08             	mov    0x8(%ebp),%edx
f010e1af:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e1b2:	8b 40 10             	mov    0x10(%eax),%eax
f010e1b5:	29 c2                	sub    %eax,%edx
f010e1b7:	89 d0                	mov    %edx,%eax
f010e1b9:	c1 f8 02             	sar    $0x2,%eax
f010e1bc:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010e1bf:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e1c2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010e1c5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e1c8:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010e1cb:	eb 15                	jmp    f010e1e2 <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010e1cd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e1d0:	8b 55 08             	mov    0x8(%ebp),%edx
f010e1d3:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010e1d6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e1d9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010e1dc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e1df:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010e1e2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e1e5:	8b 40 08             	mov    0x8(%eax),%eax
f010e1e8:	83 ec 08             	sub    $0x8,%esp
f010e1eb:	6a 3a                	push   $0x3a
f010e1ed:	50                   	push   %eax
f010e1ee:	e8 b2 38 02 00       	call   f0131aa5 <strfind>
f010e1f3:	83 c4 10             	add    $0x10,%esp
f010e1f6:	89 c2                	mov    %eax,%edx
f010e1f8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e1fb:	8b 40 08             	mov    0x8(%eax),%eax
f010e1fe:	29 c2                	sub    %eax,%edx
f010e200:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e203:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010e206:	eb 03                	jmp    f010e20b <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010e208:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010e20b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e20e:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010e211:	7c 4e                	jl     f010e261 <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010e213:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e216:	89 d0                	mov    %edx,%eax
f010e218:	01 c0                	add    %eax,%eax
f010e21a:	01 d0                	add    %edx,%eax
f010e21c:	c1 e0 02             	shl    $0x2,%eax
f010e21f:	89 c2                	mov    %eax,%edx
f010e221:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e224:	01 d0                	add    %edx,%eax
f010e226:	8a 40 04             	mov    0x4(%eax),%al
f010e229:	3c 84                	cmp    $0x84,%al
f010e22b:	74 34                	je     f010e261 <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010e22d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e230:	89 d0                	mov    %edx,%eax
f010e232:	01 c0                	add    %eax,%eax
f010e234:	01 d0                	add    %edx,%eax
f010e236:	c1 e0 02             	shl    $0x2,%eax
f010e239:	89 c2                	mov    %eax,%edx
f010e23b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e23e:	01 d0                	add    %edx,%eax
f010e240:	8a 40 04             	mov    0x4(%eax),%al
f010e243:	3c 64                	cmp    $0x64,%al
f010e245:	75 c1                	jne    f010e208 <debuginfo_eip+0x207>
f010e247:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e24a:	89 d0                	mov    %edx,%eax
f010e24c:	01 c0                	add    %eax,%eax
f010e24e:	01 d0                	add    %edx,%eax
f010e250:	c1 e0 02             	shl    $0x2,%eax
f010e253:	89 c2                	mov    %eax,%edx
f010e255:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e258:	01 d0                	add    %edx,%eax
f010e25a:	8b 40 08             	mov    0x8(%eax),%eax
f010e25d:	85 c0                	test   %eax,%eax
f010e25f:	74 a7                	je     f010e208 <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010e261:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e264:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010e267:	7c 42                	jl     f010e2ab <debuginfo_eip+0x2aa>
f010e269:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e26c:	89 d0                	mov    %edx,%eax
f010e26e:	01 c0                	add    %eax,%eax
f010e270:	01 d0                	add    %edx,%eax
f010e272:	c1 e0 02             	shl    $0x2,%eax
f010e275:	89 c2                	mov    %eax,%edx
f010e277:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e27a:	01 d0                	add    %edx,%eax
f010e27c:	8b 00                	mov    (%eax),%eax
f010e27e:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010e281:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010e284:	29 d1                	sub    %edx,%ecx
f010e286:	89 ca                	mov    %ecx,%edx
f010e288:	39 d0                	cmp    %edx,%eax
f010e28a:	73 1f                	jae    f010e2ab <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010e28c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e28f:	89 d0                	mov    %edx,%eax
f010e291:	01 c0                	add    %eax,%eax
f010e293:	01 d0                	add    %edx,%eax
f010e295:	c1 e0 02             	shl    $0x2,%eax
f010e298:	89 c2                	mov    %eax,%edx
f010e29a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e29d:	01 d0                	add    %edx,%eax
f010e29f:	8b 10                	mov    (%eax),%edx
f010e2a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e2a4:	01 c2                	add    %eax,%edx
f010e2a6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e2a9:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010e2ab:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e2b0:	c9                   	leave  
f010e2b1:	c3                   	ret    

f010e2b2 <setPageReplacmentAlgorithmLRU>:
//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f010e2b2:	55                   	push   %ebp
f010e2b3:	89 e5                	mov    %esp,%ebp
f010e2b5:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010e2b8:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010e2bc:	74 1c                	je     f010e2da <setPageReplacmentAlgorithmLRU+0x28>
f010e2be:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010e2c2:	74 16                	je     f010e2da <setPageReplacmentAlgorithmLRU+0x28>
f010e2c4:	68 0c 81 13 f0       	push   $0xf013810c
f010e2c9:	68 56 81 13 f0       	push   $0xf0138156
f010e2ce:	6a 18                	push   $0x18
f010e2d0:	68 6b 81 13 f0       	push   $0xf013816b
f010e2d5:	e8 2b 1f ff ff       	call   f0100205 <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f010e2da:	8b 45 08             	mov    0x8(%ebp),%eax
f010e2dd:	a3 88 ad 89 f0       	mov    %eax,0xf089ad88
}
f010e2e2:	90                   	nop
f010e2e3:	c9                   	leave  
f010e2e4:	c3                   	ret    

f010e2e5 <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010e2e5:	55                   	push   %ebp
f010e2e6:	89 e5                	mov    %esp,%ebp
f010e2e8:	c7 05 88 ad 89 f0 03 	movl   $0x3,0xf089ad88
f010e2ef:	00 00 00 
f010e2f2:	90                   	nop
f010e2f3:	5d                   	pop    %ebp
f010e2f4:	c3                   	ret    

f010e2f5 <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010e2f5:	55                   	push   %ebp
f010e2f6:	89 e5                	mov    %esp,%ebp
f010e2f8:	c7 05 88 ad 89 f0 04 	movl   $0x4,0xf089ad88
f010e2ff:	00 00 00 
f010e302:	90                   	nop
f010e303:	5d                   	pop    %ebp
f010e304:	c3                   	ret    

f010e305 <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010e305:	55                   	push   %ebp
f010e306:	89 e5                	mov    %esp,%ebp
f010e308:	c7 05 88 ad 89 f0 05 	movl   $0x5,0xf089ad88
f010e30f:	00 00 00 
f010e312:	90                   	nop
f010e313:	5d                   	pop    %ebp
f010e314:	c3                   	ret    

f010e315 <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
f010e315:	55                   	push   %ebp
f010e316:	89 e5                	mov    %esp,%ebp
f010e318:	c7 05 88 ad 89 f0 07 	movl   $0x7,0xf089ad88
f010e31f:	00 00 00 
f010e322:	90                   	nop
f010e323:	5d                   	pop    %ebp
f010e324:	c3                   	ret    

f010e325 <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}
f010e325:	55                   	push   %ebp
f010e326:	89 e5                	mov    %esp,%ebp
f010e328:	c7 05 88 ad 89 f0 06 	movl   $0x6,0xf089ad88
f010e32f:	00 00 00 
f010e332:	8b 45 08             	mov    0x8(%ebp),%eax
f010e335:	a3 e4 ac 89 f0       	mov    %eax,0xf089ace4
f010e33a:	90                   	nop
f010e33b:	5d                   	pop    %ebp
f010e33c:	c3                   	ret    

f010e33d <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
f010e33d:	55                   	push   %ebp
f010e33e:	89 e5                	mov    %esp,%ebp
f010e340:	8b 15 88 ad 89 f0    	mov    0xf089ad88,%edx
f010e346:	8b 45 08             	mov    0x8(%ebp),%eax
f010e349:	39 c2                	cmp    %eax,%edx
f010e34b:	0f 94 c0             	sete   %al
f010e34e:	0f b6 c0             	movzbl %al,%eax
f010e351:	5d                   	pop    %ebp
f010e352:	c3                   	ret    

f010e353 <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010e353:	55                   	push   %ebp
f010e354:	89 e5                	mov    %esp,%ebp
f010e356:	a1 88 ad 89 f0       	mov    0xf089ad88,%eax
f010e35b:	83 f8 03             	cmp    $0x3,%eax
f010e35e:	75 07                	jne    f010e367 <isPageReplacmentAlgorithmCLOCK+0x14>
f010e360:	b8 01 00 00 00       	mov    $0x1,%eax
f010e365:	eb 05                	jmp    f010e36c <isPageReplacmentAlgorithmCLOCK+0x19>
f010e367:	b8 00 00 00 00       	mov    $0x0,%eax
f010e36c:	5d                   	pop    %ebp
f010e36d:	c3                   	ret    

f010e36e <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010e36e:	55                   	push   %ebp
f010e36f:	89 e5                	mov    %esp,%ebp
f010e371:	a1 88 ad 89 f0       	mov    0xf089ad88,%eax
f010e376:	83 f8 04             	cmp    $0x4,%eax
f010e379:	75 07                	jne    f010e382 <isPageReplacmentAlgorithmFIFO+0x14>
f010e37b:	b8 01 00 00 00       	mov    $0x1,%eax
f010e380:	eb 05                	jmp    f010e387 <isPageReplacmentAlgorithmFIFO+0x19>
f010e382:	b8 00 00 00 00       	mov    $0x0,%eax
f010e387:	5d                   	pop    %ebp
f010e388:	c3                   	ret    

f010e389 <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010e389:	55                   	push   %ebp
f010e38a:	89 e5                	mov    %esp,%ebp
f010e38c:	a1 88 ad 89 f0       	mov    0xf089ad88,%eax
f010e391:	83 f8 05             	cmp    $0x5,%eax
f010e394:	75 07                	jne    f010e39d <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010e396:	b8 01 00 00 00       	mov    $0x1,%eax
f010e39b:	eb 05                	jmp    f010e3a2 <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010e39d:	b8 00 00 00 00       	mov    $0x0,%eax
f010e3a2:	5d                   	pop    %ebp
f010e3a3:	c3                   	ret    

f010e3a4 <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
f010e3a4:	55                   	push   %ebp
f010e3a5:	89 e5                	mov    %esp,%ebp
f010e3a7:	a1 88 ad 89 f0       	mov    0xf089ad88,%eax
f010e3ac:	83 f8 07             	cmp    $0x7,%eax
f010e3af:	75 07                	jne    f010e3b8 <isPageReplacmentAlgorithmDynamicLocal+0x14>
f010e3b1:	b8 01 00 00 00       	mov    $0x1,%eax
f010e3b6:	eb 05                	jmp    f010e3bd <isPageReplacmentAlgorithmDynamicLocal+0x19>
f010e3b8:	b8 00 00 00 00       	mov    $0x0,%eax
f010e3bd:	5d                   	pop    %ebp
f010e3be:	c3                   	ret    

f010e3bf <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}
f010e3bf:	55                   	push   %ebp
f010e3c0:	89 e5                	mov    %esp,%ebp
f010e3c2:	a1 88 ad 89 f0       	mov    0xf089ad88,%eax
f010e3c7:	83 f8 06             	cmp    $0x6,%eax
f010e3ca:	75 07                	jne    f010e3d3 <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
f010e3cc:	b8 01 00 00 00       	mov    $0x1,%eax
f010e3d1:	eb 05                	jmp    f010e3d8 <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
f010e3d3:	b8 00 00 00 00       	mov    $0x0,%eax
f010e3d8:	5d                   	pop    %ebp
f010e3d9:	c3                   	ret    

f010e3da <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f010e3da:	55                   	push   %ebp
f010e3db:	89 e5                	mov    %esp,%ebp
f010e3dd:	8b 45 08             	mov    0x8(%ebp),%eax
f010e3e0:	a3 50 ad 89 f0       	mov    %eax,0xf089ad50
f010e3e5:	90                   	nop
f010e3e6:	5d                   	pop    %ebp
f010e3e7:	c3                   	ret    

f010e3e8 <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010e3e8:	55                   	push   %ebp
f010e3e9:	89 e5                	mov    %esp,%ebp
f010e3eb:	a1 50 ad 89 f0       	mov    0xf089ad50,%eax
f010e3f0:	5d                   	pop    %ebp
f010e3f1:	c3                   	ret    

f010e3f2 <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f010e3f2:	55                   	push   %ebp
f010e3f3:	89 e5                	mov    %esp,%ebp
f010e3f5:	8b 45 08             	mov    0x8(%ebp),%eax
f010e3f8:	a3 90 ad 89 f0       	mov    %eax,0xf089ad90
f010e3fd:	90                   	nop
f010e3fe:	5d                   	pop    %ebp
f010e3ff:	c3                   	ret    

f010e400 <isBufferingEnabled>:
uint8 isBufferingEnabled(){  return _EnableBuffering ; }
f010e400:	55                   	push   %ebp
f010e401:	89 e5                	mov    %esp,%ebp
f010e403:	a1 90 ad 89 f0       	mov    0xf089ad90,%eax
f010e408:	5d                   	pop    %ebp
f010e409:	c3                   	ret    

f010e40a <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f010e40a:	55                   	push   %ebp
f010e40b:	89 e5                	mov    %esp,%ebp
f010e40d:	8b 45 08             	mov    0x8(%ebp),%eax
f010e410:	a3 b0 ad 89 f0       	mov    %eax,0xf089adb0
f010e415:	90                   	nop
f010e416:	5d                   	pop    %ebp
f010e417:	c3                   	ret    

f010e418 <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010e418:	55                   	push   %ebp
f010e419:	89 e5                	mov    %esp,%ebp
f010e41b:	a1 b0 ad 89 f0       	mov    0xf089adb0,%eax
f010e420:	5d                   	pop    %ebp
f010e421:	c3                   	ret    

f010e422 <table_fault_handler>:
// FAULT HANDLERS
//===============================

//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010e422:	55                   	push   %ebp
f010e423:	89 e5                	mov    %esp,%ebp
f010e425:	83 ec 18             	sub    $0x18,%esp
	//panic("table_fault_handler() is not implemented yet...!!");
	//Check if it's a stack page
	uint32* ptr_table;
#if USE_KHEAP
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
f010e428:	8b 45 08             	mov    0x8(%ebp),%eax
f010e42b:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e42e:	83 ec 08             	sub    $0x8,%esp
f010e431:	ff 75 0c             	pushl  0xc(%ebp)
f010e434:	50                   	push   %eax
f010e435:	e8 cd 87 ff ff       	call   f0106c07 <create_page_table>
f010e43a:	83 c4 10             	add    $0x10,%esp
f010e43d:	89 45 f4             	mov    %eax,-0xc(%ebp)
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
	}
#endif
}
f010e440:	90                   	nop
f010e441:	c9                   	leave  
f010e442:	c3                   	ret    

f010e443 <page_fault_handler>:

//Handle the page fault

void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010e443:	55                   	push   %ebp
f010e444:	89 e5                	mov    %esp,%ebp
f010e446:	83 ec 48             	sub    $0x48,%esp
	//TODO: [PROJECT MS3] [FAULT HANDLER] page_fault_handler
	// Write your code here, remove the panic and write your code
	//panic("page_fault_handler() is not implemented yet...!!");
	uint32 current_env_size = env_page_ws_get_size(curenv);
f010e449:	83 ec 0c             	sub    $0xc,%esp
f010e44c:	ff 75 08             	pushl  0x8(%ebp)
f010e44f:	e8 c8 9e ff ff       	call   f010831c <env_page_ws_get_size>
f010e454:	83 c4 10             	add    $0x10,%esp
f010e457:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(current_env_size == curenv->page_WS_max_size) //Replacement
f010e45a:	8b 45 08             	mov    0x8(%ebp),%eax
f010e45d:	8b 40 74             	mov    0x74(%eax),%eax
f010e460:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e463:	0f 85 56 01 00 00    	jne    f010e5bf <page_fault_handler+0x17c>
	{
		uint32 virtual_address = 0;
f010e469:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		while(1 == 1)  // Find victim virtual
		{
			uint32 per = pt_get_page_permissions(curenv->env_page_directory, curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address);
f010e470:	8b 45 08             	mov    0x8(%ebp),%eax
f010e473:	8b 48 78             	mov    0x78(%eax),%ecx
f010e476:	8b 45 08             	mov    0x8(%ebp),%eax
f010e479:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010e47f:	89 d0                	mov    %edx,%eax
f010e481:	01 c0                	add    %eax,%eax
f010e483:	01 d0                	add    %edx,%eax
f010e485:	c1 e0 03             	shl    $0x3,%eax
f010e488:	01 c8                	add    %ecx,%eax
f010e48a:	8b 10                	mov    (%eax),%edx
f010e48c:	8b 45 08             	mov    0x8(%ebp),%eax
f010e48f:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e492:	83 ec 08             	sub    $0x8,%esp
f010e495:	52                   	push   %edx
f010e496:	50                   	push   %eax
f010e497:	e8 cb 9c ff ff       	call   f0108167 <pt_get_page_permissions>
f010e49c:	83 c4 10             	add    $0x10,%esp
f010e49f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			if((per&PERM_USED)== PERM_USED)
f010e4a2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e4a5:	83 e0 20             	and    $0x20,%eax
f010e4a8:	85 c0                	test   %eax,%eax
f010e4aa:	74 46                	je     f010e4f2 <page_fault_handler+0xaf>
				pt_set_page_permissions(curenv->env_page_directory,curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address,0,PERM_USED);
f010e4ac:	8b 45 08             	mov    0x8(%ebp),%eax
f010e4af:	8b 48 78             	mov    0x78(%eax),%ecx
f010e4b2:	8b 45 08             	mov    0x8(%ebp),%eax
f010e4b5:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010e4bb:	89 d0                	mov    %edx,%eax
f010e4bd:	01 c0                	add    %eax,%eax
f010e4bf:	01 d0                	add    %edx,%eax
f010e4c1:	c1 e0 03             	shl    $0x3,%eax
f010e4c4:	01 c8                	add    %ecx,%eax
f010e4c6:	8b 10                	mov    (%eax),%edx
f010e4c8:	8b 45 08             	mov    0x8(%ebp),%eax
f010e4cb:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e4ce:	6a 20                	push   $0x20
f010e4d0:	6a 00                	push   $0x0
f010e4d2:	52                   	push   %edx
f010e4d3:	50                   	push   %eax
f010e4d4:	e8 da 9b ff ff       	call   f01080b3 <pt_set_page_permissions>
f010e4d9:	83 c4 10             	add    $0x10,%esp
			else
			{
				virtual_address = curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address;
				break;
			}
			if( curenv->page_last_WS_index == (curenv->page_WS_max_size - 1))
f010e4dc:	8b 45 08             	mov    0x8(%ebp),%eax
f010e4df:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010e4e5:	8b 45 08             	mov    0x8(%ebp),%eax
f010e4e8:	8b 40 74             	mov    0x74(%eax),%eax
f010e4eb:	48                   	dec    %eax
f010e4ec:	39 c2                	cmp    %eax,%edx
f010e4ee:	75 7b                	jne    f010e56b <page_fault_handler+0x128>
f010e4f0:	eb 67                	jmp    f010e559 <page_fault_handler+0x116>
			uint32 per = pt_get_page_permissions(curenv->env_page_directory, curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address);
			if((per&PERM_USED)== PERM_USED)
				pt_set_page_permissions(curenv->env_page_directory,curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address,0,PERM_USED);
			else
			{
				virtual_address = curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address;
f010e4f2:	8b 45 08             	mov    0x8(%ebp),%eax
f010e4f5:	8b 48 78             	mov    0x78(%eax),%ecx
f010e4f8:	8b 45 08             	mov    0x8(%ebp),%eax
f010e4fb:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010e501:	89 d0                	mov    %edx,%eax
f010e503:	01 c0                	add    %eax,%eax
f010e505:	01 d0                	add    %edx,%eax
f010e507:	c1 e0 03             	shl    $0x3,%eax
f010e50a:	01 c8                	add    %ecx,%eax
f010e50c:	8b 00                	mov    (%eax),%eax
f010e50e:	89 45 e8             	mov    %eax,-0x18(%ebp)
				break;
f010e511:	90                   	nop
				curenv->page_last_WS_index = 0;
			else
				curenv->page_last_WS_index++;
		}

		uint32 perm = pt_get_page_permissions(curenv->env_page_directory, virtual_address);
f010e512:	8b 45 08             	mov    0x8(%ebp),%eax
f010e515:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e518:	83 ec 08             	sub    $0x8,%esp
f010e51b:	ff 75 e8             	pushl  -0x18(%ebp)
f010e51e:	50                   	push   %eax
f010e51f:	e8 43 9c ff ff       	call   f0108167 <pt_get_page_permissions>
f010e524:	83 c4 10             	add    $0x10,%esp
f010e527:	89 45 e0             	mov    %eax,-0x20(%ebp)
		uint32 *ptr_page_table = NULL ;
f010e52a:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		struct FrameInfo * frame_info = get_frame_info(curenv->env_page_directory, virtual_address,&ptr_page_table);
f010e531:	8b 45 08             	mov    0x8(%ebp),%eax
f010e534:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e537:	83 ec 04             	sub    $0x4,%esp
f010e53a:	8d 55 c4             	lea    -0x3c(%ebp),%edx
f010e53d:	52                   	push   %edx
f010e53e:	ff 75 e8             	pushl  -0x18(%ebp)
f010e541:	50                   	push   %eax
f010e542:	e8 bf 88 ff ff       	call   f0106e06 <get_frame_info>
f010e547:	83 c4 10             	add    $0x10,%esp
f010e54a:	89 45 dc             	mov    %eax,-0x24(%ebp)

		if((perm&PERM_MODIFIED)== PERM_MODIFIED)
f010e54d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e550:	83 e0 40             	and    $0x40,%eax
f010e553:	85 c0                	test   %eax,%eax
f010e555:	74 42                	je     f010e599 <page_fault_handler+0x156>
f010e557:	eb 2c                	jmp    f010e585 <page_fault_handler+0x142>
			{
				virtual_address = curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address;
				break;
			}
			if( curenv->page_last_WS_index == (curenv->page_WS_max_size - 1))
				curenv->page_last_WS_index = 0;
f010e559:	8b 45 08             	mov    0x8(%ebp),%eax
f010e55c:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010e563:	00 00 00 
f010e566:	e9 05 ff ff ff       	jmp    f010e470 <page_fault_handler+0x2d>
			else
				curenv->page_last_WS_index++;
f010e56b:	8b 45 08             	mov    0x8(%ebp),%eax
f010e56e:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e574:	8d 50 01             	lea    0x1(%eax),%edx
f010e577:	8b 45 08             	mov    0x8(%ebp),%eax
f010e57a:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
		}
f010e580:	e9 eb fe ff ff       	jmp    f010e470 <page_fault_handler+0x2d>
		uint32 perm = pt_get_page_permissions(curenv->env_page_directory, virtual_address);
		uint32 *ptr_page_table = NULL ;
		struct FrameInfo * frame_info = get_frame_info(curenv->env_page_directory, virtual_address,&ptr_page_table);

		if((perm&PERM_MODIFIED)== PERM_MODIFIED)
			pf_update_env_page(curenv,virtual_address,frame_info);
f010e585:	83 ec 04             	sub    $0x4,%esp
f010e588:	ff 75 dc             	pushl  -0x24(%ebp)
f010e58b:	ff 75 e8             	pushl  -0x18(%ebp)
f010e58e:	ff 75 08             	pushl  0x8(%ebp)
f010e591:	e8 42 52 ff ff       	call   f01037d8 <pf_update_env_page>
f010e596:	83 c4 10             	add    $0x10,%esp

		env_page_ws_invalidate(curenv,virtual_address);
f010e599:	83 ec 08             	sub    $0x8,%esp
f010e59c:	ff 75 e8             	pushl  -0x18(%ebp)
f010e59f:	ff 75 08             	pushl  0x8(%ebp)
f010e5a2:	e8 be 9d ff ff       	call   f0108365 <env_page_ws_invalidate>
f010e5a7:	83 c4 10             	add    $0x10,%esp
		unmap_frame(curenv->env_page_directory,virtual_address);
f010e5aa:	8b 45 08             	mov    0x8(%ebp),%eax
f010e5ad:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e5b0:	83 ec 08             	sub    $0x8,%esp
f010e5b3:	ff 75 e8             	pushl  -0x18(%ebp)
f010e5b6:	50                   	push   %eax
f010e5b7:	e8 ba 88 ff ff       	call   f0106e76 <unmap_frame>
f010e5bc:	83 c4 10             	add    $0x10,%esp
	}
		// Placement
		struct FrameInfo *ptr_frame;
		allocate_frame(&ptr_frame);
f010e5bf:	83 ec 0c             	sub    $0xc,%esp
f010e5c2:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010e5c5:	50                   	push   %eax
f010e5c6:	e8 27 83 ff ff       	call   f01068f2 <allocate_frame>
f010e5cb:	83 c4 10             	add    $0x10,%esp
		map_frame(curenv->env_page_directory,ptr_frame,fault_va, PERM_WRITEABLE|PERM_USER);
f010e5ce:	8b 55 c8             	mov    -0x38(%ebp),%edx
f010e5d1:	8b 45 08             	mov    0x8(%ebp),%eax
f010e5d4:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e5d7:	6a 06                	push   $0x6
f010e5d9:	ff 75 0c             	pushl  0xc(%ebp)
f010e5dc:	52                   	push   %edx
f010e5dd:	50                   	push   %eax
f010e5de:	e8 5e 87 ff ff       	call   f0106d41 <map_frame>
f010e5e3:	83 c4 10             	add    $0x10,%esp
		int ret = pf_read_env_page(curenv, (void *)fault_va);
f010e5e6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e5e9:	83 ec 08             	sub    $0x8,%esp
f010e5ec:	50                   	push   %eax
f010e5ed:	ff 75 08             	pushl  0x8(%ebp)
f010e5f0:	e8 45 54 ff ff       	call   f0103a3a <pf_read_env_page>
f010e5f5:	83 c4 10             	add    $0x10,%esp
f010e5f8:	89 45 d8             	mov    %eax,-0x28(%ebp)

		if(ret == E_PAGE_NOT_EXIST_IN_PF) // Check if page in Page File
f010e5fb:	83 7d d8 f7          	cmpl   $0xfffffff7,-0x28(%ebp)
f010e5ff:	75 54                	jne    f010e655 <page_fault_handler+0x212>
		{
			if(
f010e601:	81 7d 0c ff df bf ee 	cmpl   $0xeebfdfff,0xc(%ebp)
f010e608:	77 27                	ja     f010e631 <page_fault_handler+0x1ee>
				!((fault_va < USTACKTOP && fault_va >= USTACKBOTTOM) || // Check if page in Stack
f010e60a:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f010e611:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e614:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f010e619:	89 45 d0             	mov    %eax,-0x30(%ebp)
f010e61c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e61f:	ba 00 00 00 00       	mov    $0x0,%edx
f010e624:	f7 75 d4             	divl   -0x2c(%ebp)
f010e627:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e62a:	29 d0                	sub    %edx,%eax
f010e62c:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010e62f:	76 24                	jbe    f010e655 <page_fault_handler+0x212>
f010e631:	81 7d 0c ff ff ff 9f 	cmpl   $0x9fffffff,0xc(%ebp)
f010e638:	77 07                	ja     f010e641 <page_fault_handler+0x1fe>
					(fault_va < USER_HEAP_MAX && fault_va >= USER_HEAP_START)) // Check if page in User Heap
f010e63a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e63d:	85 c0                	test   %eax,%eax
f010e63f:	78 14                	js     f010e655 <page_fault_handler+0x212>
			)
				panic("ILLEGAL MEMORY ACCESS");
f010e641:	83 ec 04             	sub    $0x4,%esp
f010e644:	68 85 81 13 f0       	push   $0xf0138185
f010e649:	6a 7c                	push   $0x7c
f010e64b:	68 6b 81 13 f0       	push   $0xf013816b
f010e650:	e8 b0 1b ff ff       	call   f0100205 <_panic>
		}
		int current_index = 0;
f010e655:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		int next_index = 1;
f010e65c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		while(1==1)
		{
			uint32 check = env_page_ws_is_entry_empty(curenv,current_index);
f010e663:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e666:	83 ec 08             	sub    $0x8,%esp
f010e669:	50                   	push   %eax
f010e66a:	ff 75 08             	pushl  0x8(%ebp)
f010e66d:	e8 00 9f ff ff       	call   f0108572 <env_page_ws_is_entry_empty>
f010e672:	83 c4 10             	add    $0x10,%esp
f010e675:	89 45 cc             	mov    %eax,-0x34(%ebp)
			if (check == 1)
f010e678:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f010e67c:	75 61                	jne    f010e6df <page_fault_handler+0x29c>
			{
				if(next_index == 1)
f010e67e:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f010e682:	75 4d                	jne    f010e6d1 <page_fault_handler+0x28e>
				{
					next_index = 0;
f010e684:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
					env_page_ws_set_entry(curenv,current_index,fault_va);
f010e68b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e68e:	83 ec 04             	sub    $0x4,%esp
f010e691:	ff 75 0c             	pushl  0xc(%ebp)
f010e694:	50                   	push   %eax
f010e695:	ff 75 08             	pushl  0x8(%ebp)
f010e698:	e8 33 9d ff ff       	call   f01083d0 <env_page_ws_set_entry>
f010e69d:	83 c4 10             	add    $0x10,%esp

					curenv->page_last_WS_index = current_index + 1;
f010e6a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e6a3:	40                   	inc    %eax
f010e6a4:	89 c2                	mov    %eax,%edx
f010e6a6:	8b 45 08             	mov    0x8(%ebp),%eax
f010e6a9:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
					if(curenv->page_last_WS_index == curenv->page_WS_max_size)
f010e6af:	8b 45 08             	mov    0x8(%ebp),%eax
f010e6b2:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010e6b8:	8b 45 08             	mov    0x8(%ebp),%eax
f010e6bb:	8b 40 74             	mov    0x74(%eax),%eax
f010e6be:	39 c2                	cmp    %eax,%edx
f010e6c0:	75 1d                	jne    f010e6df <page_fault_handler+0x29c>
							curenv->page_last_WS_index = 0;
f010e6c2:	8b 45 08             	mov    0x8(%ebp),%eax
f010e6c5:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010e6cc:	00 00 00 
f010e6cf:	eb 0e                	jmp    f010e6df <page_fault_handler+0x29c>
				}
				else
				{
					curenv->page_last_WS_index = current_index;
f010e6d1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e6d4:	8b 45 08             	mov    0x8(%ebp),%eax
f010e6d7:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
					break;
f010e6dd:	eb 16                	jmp    f010e6f5 <page_fault_handler+0x2b2>
				}
			}

			current_index++;
f010e6df:	ff 45 f4             	incl   -0xc(%ebp)
			if(current_index == curenv->page_WS_max_size)
f010e6e2:	8b 45 08             	mov    0x8(%ebp),%eax
f010e6e5:	8b 50 74             	mov    0x74(%eax),%edx
f010e6e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e6eb:	39 c2                	cmp    %eax,%edx
f010e6ed:	74 05                	je     f010e6f4 <page_fault_handler+0x2b1>
				break;
		}
f010e6ef:	e9 6f ff ff ff       	jmp    f010e663 <page_fault_handler+0x220>
				}
			}

			current_index++;
			if(current_index == curenv->page_WS_max_size)
				break;
f010e6f4:	90                   	nop
		}
	        //refer to the project presentation and documentation for details
}
f010e6f5:	90                   	nop
f010e6f6:	c9                   	leave  
f010e6f7:	c3                   	ret    

f010e6f8 <__page_fault_handler_with_buffering>:



void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010e6f8:	55                   	push   %ebp
f010e6f9:	89 e5                	mov    %esp,%ebp
f010e6fb:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("__page_fault_handler_with_buffering() is not implemented yet...!!");
f010e6fe:	83 ec 04             	sub    $0x4,%esp
f010e701:	68 9c 81 13 f0       	push   $0xf013819c
f010e706:	68 a1 00 00 00       	push   $0xa1
f010e70b:	68 6b 81 13 f0       	push   $0xf013816b
f010e710:	e8 f0 1a ff ff       	call   f0100205 <_panic>

f010e715 <create_semaphores_array>:
// [1] Create "semaphores" array:
//===============================
//Dynamically allocate the "semaphores" array
//initialize the "semaphores" array by 0's and empty = 1
void create_semaphores_array(uint32 numOfSemaphores)
{
f010e715:	55                   	push   %ebp
f010e716:	89 e5                	mov    %esp,%ebp
f010e718:	83 ec 18             	sub    $0x18,%esp
#if USE_KHEAP
	MAX_SEMAPHORES = numOfSemaphores ;
f010e71b:	8b 45 08             	mov    0x8(%ebp),%eax
f010e71e:	a3 b4 ac 89 f0       	mov    %eax,0xf089acb4
	semaphores = (struct Semaphore*) kmalloc(numOfSemaphores*sizeof(struct Semaphore));
f010e723:	8b 55 08             	mov    0x8(%ebp),%edx
f010e726:	89 d0                	mov    %edx,%eax
f010e728:	c1 e0 02             	shl    $0x2,%eax
f010e72b:	01 d0                	add    %edx,%eax
f010e72d:	01 c0                	add    %eax,%eax
f010e72f:	01 d0                	add    %edx,%eax
f010e731:	01 c0                	add    %eax,%eax
f010e733:	01 d0                	add    %edx,%eax
f010e735:	c1 e0 02             	shl    $0x2,%eax
f010e738:	83 ec 0c             	sub    $0xc,%esp
f010e73b:	50                   	push   %eax
f010e73c:	e8 4a 96 ff ff       	call   f0107d8b <kmalloc>
f010e741:	83 c4 10             	add    $0x10,%esp
f010e744:	a3 0c ad 89 f0       	mov    %eax,0xf089ad0c
	if (semaphores == NULL)
f010e749:	a1 0c ad 89 f0       	mov    0xf089ad0c,%eax
f010e74e:	85 c0                	test   %eax,%eax
f010e750:	75 14                	jne    f010e766 <create_semaphores_array+0x51>
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
f010e752:	83 ec 04             	sub    $0x4,%esp
f010e755:	68 e0 81 13 f0       	push   $0xf01381e0
f010e75a:	6a 1e                	push   $0x1e
f010e75c:	68 20 82 13 f0       	push   $0xf0138220
f010e761:	e8 9f 1a ff ff       	call   f0100205 <_panic>
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e766:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010e76d:	e9 bd 00 00 00       	jmp    f010e82f <create_semaphores_array+0x11a>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
f010e772:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010e778:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e77b:	89 d0                	mov    %edx,%eax
f010e77d:	c1 e0 02             	shl    $0x2,%eax
f010e780:	01 d0                	add    %edx,%eax
f010e782:	01 c0                	add    %eax,%eax
f010e784:	01 d0                	add    %edx,%eax
f010e786:	01 c0                	add    %eax,%eax
f010e788:	01 d0                	add    %edx,%eax
f010e78a:	c1 e0 02             	shl    $0x2,%eax
f010e78d:	01 c8                	add    %ecx,%eax
f010e78f:	83 ec 04             	sub    $0x4,%esp
f010e792:	6a 5c                	push   $0x5c
f010e794:	6a 00                	push   $0x0
f010e796:	50                   	push   %eax
f010e797:	e8 35 33 02 00       	call   f0131ad1 <memset>
f010e79c:	83 c4 10             	add    $0x10,%esp
		semaphores[i].empty = 1;
f010e79f:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010e7a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e7a8:	89 d0                	mov    %edx,%eax
f010e7aa:	c1 e0 02             	shl    $0x2,%eax
f010e7ad:	01 d0                	add    %edx,%eax
f010e7af:	01 c0                	add    %eax,%eax
f010e7b1:	01 d0                	add    %edx,%eax
f010e7b3:	01 c0                	add    %eax,%eax
f010e7b5:	01 d0                	add    %edx,%eax
f010e7b7:	c1 e0 02             	shl    $0x2,%eax
f010e7ba:	01 c8                	add    %ecx,%eax
f010e7bc:	c6 40 58 01          	movb   $0x1,0x58(%eax)
		LIST_INIT(&(semaphores[i].env_queue));
f010e7c0:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010e7c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e7c9:	89 d0                	mov    %edx,%eax
f010e7cb:	c1 e0 02             	shl    $0x2,%eax
f010e7ce:	01 d0                	add    %edx,%eax
f010e7d0:	01 c0                	add    %eax,%eax
f010e7d2:	01 d0                	add    %edx,%eax
f010e7d4:	01 c0                	add    %eax,%eax
f010e7d6:	01 d0                	add    %edx,%eax
f010e7d8:	c1 e0 02             	shl    $0x2,%eax
f010e7db:	01 c8                	add    %ecx,%eax
f010e7dd:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010e7e4:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010e7ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e7ed:	89 d0                	mov    %edx,%eax
f010e7ef:	c1 e0 02             	shl    $0x2,%eax
f010e7f2:	01 d0                	add    %edx,%eax
f010e7f4:	01 c0                	add    %eax,%eax
f010e7f6:	01 d0                	add    %edx,%eax
f010e7f8:	01 c0                	add    %eax,%eax
f010e7fa:	01 d0                	add    %edx,%eax
f010e7fc:	c1 e0 02             	shl    $0x2,%eax
f010e7ff:	01 c8                	add    %ecx,%eax
f010e801:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010e808:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010e80e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e811:	89 d0                	mov    %edx,%eax
f010e813:	c1 e0 02             	shl    $0x2,%eax
f010e816:	01 d0                	add    %edx,%eax
f010e818:	01 c0                	add    %eax,%eax
f010e81a:	01 d0                	add    %edx,%eax
f010e81c:	01 c0                	add    %eax,%eax
f010e81e:	01 d0                	add    %edx,%eax
f010e820:	c1 e0 02             	shl    $0x2,%eax
f010e823:	01 c8                	add    %ecx,%eax
f010e825:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e82c:	ff 45 f4             	incl   -0xc(%ebp)
f010e82f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e832:	a1 b4 ac 89 f0       	mov    0xf089acb4,%eax
f010e837:	39 c2                	cmp    %eax,%edx
f010e839:	0f 82 33 ff ff ff    	jb     f010e772 <create_semaphores_array+0x5d>
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
		semaphores[i].empty = 1;
		LIST_INIT(&(semaphores[i].env_queue));
	}

}
f010e83f:	90                   	nop
f010e840:	c9                   	leave  
f010e841:	c3                   	ret    

f010e842 <allocate_semaphore_object>:
//	a) if succeed:
//		1. allocatedSemaphore (pointer to struct Semaphore) passed by reference
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
f010e842:	55                   	push   %ebp
f010e843:	89 e5                	mov    %esp,%ebp
f010e845:	83 ec 18             	sub    $0x18,%esp
	int32 semaphoreObjectID = -1 ;
f010e848:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e84f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010e856:	eb 2f                	jmp    f010e887 <allocate_semaphore_object+0x45>
	{
		if (semaphores[i].empty)
f010e858:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010e85e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e861:	89 d0                	mov    %edx,%eax
f010e863:	c1 e0 02             	shl    $0x2,%eax
f010e866:	01 d0                	add    %edx,%eax
f010e868:	01 c0                	add    %eax,%eax
f010e86a:	01 d0                	add    %edx,%eax
f010e86c:	01 c0                	add    %eax,%eax
f010e86e:	01 d0                	add    %edx,%eax
f010e870:	c1 e0 02             	shl    $0x2,%eax
f010e873:	01 c8                	add    %ecx,%eax
f010e875:	8a 40 58             	mov    0x58(%eax),%al
f010e878:	84 c0                	test   %al,%al
f010e87a:	74 08                	je     f010e884 <allocate_semaphore_object+0x42>
		{
			semaphoreObjectID = i;
f010e87c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e87f:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f010e882:	eb 0f                	jmp    f010e893 <allocate_semaphore_object+0x51>
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
	int32 semaphoreObjectID = -1 ;
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e884:	ff 45 f0             	incl   -0x10(%ebp)
f010e887:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e88a:	a1 b4 ac 89 f0       	mov    0xf089acb4,%eax
f010e88f:	39 c2                	cmp    %eax,%edx
f010e891:	72 c5                	jb     f010e858 <allocate_semaphore_object+0x16>
			semaphoreObjectID = i;
			break;
		}
	}

	if (semaphoreObjectID == -1)
f010e893:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010e897:	75 4d                	jne    f010e8e6 <allocate_semaphore_object+0xa4>
	{
		//try to double the size of the "semaphores" array
		#if USE_KHEAP
		{
			semaphores = (struct Semaphore*) krealloc(semaphores, 2*MAX_SEMAPHORES);
f010e899:	a1 b4 ac 89 f0       	mov    0xf089acb4,%eax
f010e89e:	01 c0                	add    %eax,%eax
f010e8a0:	89 c2                	mov    %eax,%edx
f010e8a2:	a1 0c ad 89 f0       	mov    0xf089ad0c,%eax
f010e8a7:	83 ec 08             	sub    $0x8,%esp
f010e8aa:	52                   	push   %edx
f010e8ab:	50                   	push   %eax
f010e8ac:	e8 9a 97 ff ff       	call   f010804b <krealloc>
f010e8b1:	83 c4 10             	add    $0x10,%esp
f010e8b4:	a3 0c ad 89 f0       	mov    %eax,0xf089ad0c
			if (semaphores == NULL)
f010e8b9:	a1 0c ad 89 f0       	mov    0xf089ad0c,%eax
f010e8be:	85 c0                	test   %eax,%eax
f010e8c0:	75 10                	jne    f010e8d2 <allocate_semaphore_object+0x90>
			{
				*allocatedObject = NULL;
f010e8c2:	8b 45 08             	mov    0x8(%ebp),%eax
f010e8c5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				return E_NO_SEMAPHORE;
f010e8cb:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
f010e8d0:	eb 5b                	jmp    f010e92d <allocate_semaphore_object+0xeb>
			}
			else
			{
				semaphoreObjectID = MAX_SEMAPHORES;
f010e8d2:	a1 b4 ac 89 f0       	mov    0xf089acb4,%eax
f010e8d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
				MAX_SEMAPHORES *= 2;
f010e8da:	a1 b4 ac 89 f0       	mov    0xf089acb4,%eax
f010e8df:	01 c0                	add    %eax,%eax
f010e8e1:	a3 b4 ac 89 f0       	mov    %eax,0xf089acb4
			return E_NO_SEMAPHORE;
		}
		#endif
	}

	*allocatedObject = &(semaphores[semaphoreObjectID]);
f010e8e6:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010e8ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e8ef:	89 d0                	mov    %edx,%eax
f010e8f1:	c1 e0 02             	shl    $0x2,%eax
f010e8f4:	01 d0                	add    %edx,%eax
f010e8f6:	01 c0                	add    %eax,%eax
f010e8f8:	01 d0                	add    %edx,%eax
f010e8fa:	01 c0                	add    %eax,%eax
f010e8fc:	01 d0                	add    %edx,%eax
f010e8fe:	c1 e0 02             	shl    $0x2,%eax
f010e901:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010e904:	8b 45 08             	mov    0x8(%ebp),%eax
f010e907:	89 10                	mov    %edx,(%eax)
	semaphores[semaphoreObjectID].empty = 0;
f010e909:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010e90f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e912:	89 d0                	mov    %edx,%eax
f010e914:	c1 e0 02             	shl    $0x2,%eax
f010e917:	01 d0                	add    %edx,%eax
f010e919:	01 c0                	add    %eax,%eax
f010e91b:	01 d0                	add    %edx,%eax
f010e91d:	01 c0                	add    %eax,%eax
f010e91f:	01 d0                	add    %edx,%eax
f010e921:	c1 e0 02             	shl    $0x2,%eax
f010e924:	01 c8                	add    %ecx,%eax
f010e926:	c6 40 58 00          	movb   $0x0,0x58(%eax)

	return semaphoreObjectID;
f010e92a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010e92d:	c9                   	leave  
f010e92e:	c3                   	ret    

f010e92f <get_semaphore_object_ID>:
//Search for the given semaphore object in the "semaphores" array
//Return:
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
f010e92f:	55                   	push   %ebp
f010e930:	89 e5                	mov    %esp,%ebp
f010e932:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010e935:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i < MAX_SEMAPHORES; ++i)
f010e93c:	e9 84 00 00 00       	jmp    f010e9c5 <get_semaphore_object_ID+0x96>
	{
		if (semaphores[i].empty)
f010e941:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010e947:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e94a:	89 d0                	mov    %edx,%eax
f010e94c:	c1 e0 02             	shl    $0x2,%eax
f010e94f:	01 d0                	add    %edx,%eax
f010e951:	01 c0                	add    %eax,%eax
f010e953:	01 d0                	add    %edx,%eax
f010e955:	01 c0                	add    %eax,%eax
f010e957:	01 d0                	add    %edx,%eax
f010e959:	c1 e0 02             	shl    $0x2,%eax
f010e95c:	01 c8                	add    %ecx,%eax
f010e95e:	8a 40 58             	mov    0x58(%eax),%al
f010e961:	84 c0                	test   %al,%al
f010e963:	75 5c                	jne    f010e9c1 <get_semaphore_object_ID+0x92>
			continue;

		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
f010e965:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010e96b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e96e:	89 d0                	mov    %edx,%eax
f010e970:	c1 e0 02             	shl    $0x2,%eax
f010e973:	01 d0                	add    %edx,%eax
f010e975:	01 c0                	add    %eax,%eax
f010e977:	01 d0                	add    %edx,%eax
f010e979:	01 c0                	add    %eax,%eax
f010e97b:	01 d0                	add    %edx,%eax
f010e97d:	c1 e0 02             	shl    $0x2,%eax
f010e980:	01 c8                	add    %ecx,%eax
f010e982:	8b 00                	mov    (%eax),%eax
f010e984:	3b 45 08             	cmp    0x8(%ebp),%eax
f010e987:	75 39                	jne    f010e9c2 <get_semaphore_object_ID+0x93>
f010e989:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010e98f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e992:	89 d0                	mov    %edx,%eax
f010e994:	c1 e0 02             	shl    $0x2,%eax
f010e997:	01 d0                	add    %edx,%eax
f010e999:	01 c0                	add    %eax,%eax
f010e99b:	01 d0                	add    %edx,%eax
f010e99d:	01 c0                	add    %eax,%eax
f010e99f:	01 d0                	add    %edx,%eax
f010e9a1:	c1 e0 02             	shl    $0x2,%eax
f010e9a4:	01 c8                	add    %ecx,%eax
f010e9a6:	83 c0 04             	add    $0x4,%eax
f010e9a9:	83 ec 08             	sub    $0x8,%esp
f010e9ac:	50                   	push   %eax
f010e9ad:	ff 75 0c             	pushl  0xc(%ebp)
f010e9b0:	e8 3a 30 02 00       	call   f01319ef <strcmp>
f010e9b5:	83 c4 10             	add    $0x10,%esp
f010e9b8:	85 c0                	test   %eax,%eax
f010e9ba:	75 06                	jne    f010e9c2 <get_semaphore_object_ID+0x93>
		{
			return i;
f010e9bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e9bf:	eb 19                	jmp    f010e9da <get_semaphore_object_ID+0xab>
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
	{
		if (semaphores[i].empty)
			continue;
f010e9c1:	90                   	nop
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
f010e9c2:	ff 45 f4             	incl   -0xc(%ebp)
f010e9c5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e9c8:	a1 b4 ac 89 f0       	mov    0xf089acb4,%eax
f010e9cd:	39 c2                	cmp    %eax,%edx
f010e9cf:	0f 82 6c ff ff ff    	jb     f010e941 <get_semaphore_object_ID+0x12>
		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
		{
			return i;
		}
	}
	return E_SEMAPHORE_NOT_EXISTS;
f010e9d5:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
f010e9da:	c9                   	leave  
f010e9db:	c3                   	ret    

f010e9dc <free_semaphore_object>:
//delete the semaphore with the given ID from the "semaphores" array
//Return:
//	a) 0 if succeed
//	b) E_SEMAPHORE_NOT_EXISTS if the semaphore is not exists
int free_semaphore_object(uint32 semaphoreObjectID)
{
f010e9dc:	55                   	push   %ebp
f010e9dd:	89 e5                	mov    %esp,%ebp
f010e9df:	83 ec 08             	sub    $0x8,%esp
	if (semaphoreObjectID >= MAX_SEMAPHORES)
f010e9e2:	a1 b4 ac 89 f0       	mov    0xf089acb4,%eax
f010e9e7:	39 45 08             	cmp    %eax,0x8(%ebp)
f010e9ea:	72 0a                	jb     f010e9f6 <free_semaphore_object+0x1a>
		return E_SEMAPHORE_NOT_EXISTS;
f010e9ec:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
f010e9f1:	e9 bf 00 00 00       	jmp    f010eab5 <free_semaphore_object+0xd9>

	memset(&(semaphores[semaphoreObjectID]), 0, sizeof(struct Semaphore));
f010e9f6:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010e9fc:	8b 55 08             	mov    0x8(%ebp),%edx
f010e9ff:	89 d0                	mov    %edx,%eax
f010ea01:	c1 e0 02             	shl    $0x2,%eax
f010ea04:	01 d0                	add    %edx,%eax
f010ea06:	01 c0                	add    %eax,%eax
f010ea08:	01 d0                	add    %edx,%eax
f010ea0a:	01 c0                	add    %eax,%eax
f010ea0c:	01 d0                	add    %edx,%eax
f010ea0e:	c1 e0 02             	shl    $0x2,%eax
f010ea11:	01 c8                	add    %ecx,%eax
f010ea13:	83 ec 04             	sub    $0x4,%esp
f010ea16:	6a 5c                	push   $0x5c
f010ea18:	6a 00                	push   $0x0
f010ea1a:	50                   	push   %eax
f010ea1b:	e8 b1 30 02 00       	call   f0131ad1 <memset>
f010ea20:	83 c4 10             	add    $0x10,%esp
	semaphores[semaphoreObjectID].empty = 1;
f010ea23:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010ea29:	8b 55 08             	mov    0x8(%ebp),%edx
f010ea2c:	89 d0                	mov    %edx,%eax
f010ea2e:	c1 e0 02             	shl    $0x2,%eax
f010ea31:	01 d0                	add    %edx,%eax
f010ea33:	01 c0                	add    %eax,%eax
f010ea35:	01 d0                	add    %edx,%eax
f010ea37:	01 c0                	add    %eax,%eax
f010ea39:	01 d0                	add    %edx,%eax
f010ea3b:	c1 e0 02             	shl    $0x2,%eax
f010ea3e:	01 c8                	add    %ecx,%eax
f010ea40:	c6 40 58 01          	movb   $0x1,0x58(%eax)
	LIST_INIT(&(semaphores[semaphoreObjectID].env_queue));
f010ea44:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010ea4a:	8b 55 08             	mov    0x8(%ebp),%edx
f010ea4d:	89 d0                	mov    %edx,%eax
f010ea4f:	c1 e0 02             	shl    $0x2,%eax
f010ea52:	01 d0                	add    %edx,%eax
f010ea54:	01 c0                	add    %eax,%eax
f010ea56:	01 d0                	add    %edx,%eax
f010ea58:	01 c0                	add    %eax,%eax
f010ea5a:	01 d0                	add    %edx,%eax
f010ea5c:	c1 e0 02             	shl    $0x2,%eax
f010ea5f:	01 c8                	add    %ecx,%eax
f010ea61:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010ea68:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010ea6e:	8b 55 08             	mov    0x8(%ebp),%edx
f010ea71:	89 d0                	mov    %edx,%eax
f010ea73:	c1 e0 02             	shl    $0x2,%eax
f010ea76:	01 d0                	add    %edx,%eax
f010ea78:	01 c0                	add    %eax,%eax
f010ea7a:	01 d0                	add    %edx,%eax
f010ea7c:	01 c0                	add    %eax,%eax
f010ea7e:	01 d0                	add    %edx,%eax
f010ea80:	c1 e0 02             	shl    $0x2,%eax
f010ea83:	01 c8                	add    %ecx,%eax
f010ea85:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010ea8c:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010ea92:	8b 55 08             	mov    0x8(%ebp),%edx
f010ea95:	89 d0                	mov    %edx,%eax
f010ea97:	c1 e0 02             	shl    $0x2,%eax
f010ea9a:	01 d0                	add    %edx,%eax
f010ea9c:	01 c0                	add    %eax,%eax
f010ea9e:	01 d0                	add    %edx,%eax
f010eaa0:	01 c0                	add    %eax,%eax
f010eaa2:	01 d0                	add    %edx,%eax
f010eaa4:	c1 e0 02             	shl    $0x2,%eax
f010eaa7:	01 c8                	add    %ecx,%eax
f010eaa9:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)

	return 0;
f010eab0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010eab5:	c9                   	leave  
f010eab6:	c3                   	ret    

f010eab7 <createSemaphore>:

//======================
// [1] Create Semaphore:
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue)
{
f010eab7:	55                   	push   %ebp
f010eab8:	89 e5                	mov    %esp,%ebp
f010eaba:	83 ec 18             	sub    $0x18,%esp
	//Return:
	//	a) SemaphoreID (its index in the array) if succeed
	//	b) E_SEMAPHORE_EXISTS if the semaphore is already exists
	//	c) E_NO_SEMAPHORE if the the array of semaphores is full
	//change this "return" according to your answer
	struct Semaphore *new_semaphore=NULL;
f010eabd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		int ret_of_get=get_semaphore_object_ID(ownerEnvID,semaphoreName);
f010eac4:	83 ec 08             	sub    $0x8,%esp
f010eac7:	ff 75 0c             	pushl  0xc(%ebp)
f010eaca:	ff 75 08             	pushl  0x8(%ebp)
f010eacd:	e8 5d fe ff ff       	call   f010e92f <get_semaphore_object_ID>
f010ead2:	83 c4 10             	add    $0x10,%esp
f010ead5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(ret_of_get ==E_SEMAPHORE_NOT_EXISTS)
f010ead8:	83 7d f4 f3          	cmpl   $0xfffffff3,-0xc(%ebp)
f010eadc:	75 43                	jne    f010eb21 <createSemaphore+0x6a>
		{
			int result_of_allocation=allocate_semaphore_object(&new_semaphore);
f010eade:	83 ec 0c             	sub    $0xc,%esp
f010eae1:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010eae4:	50                   	push   %eax
f010eae5:	e8 58 fd ff ff       	call   f010e842 <allocate_semaphore_object>
f010eaea:	83 c4 10             	add    $0x10,%esp
f010eaed:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if(result_of_allocation!=E_NO_SEMAPHORE)
f010eaf0:	83 7d f0 f5          	cmpl   $0xfffffff5,-0x10(%ebp)
f010eaf4:	74 32                	je     f010eb28 <createSemaphore+0x71>
			{   //*new_semaphore->name=*semaphoreName;
				strcpy(new_semaphore->name,semaphoreName);
f010eaf6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010eaf9:	83 c0 04             	add    $0x4,%eax
f010eafc:	83 ec 08             	sub    $0x8,%esp
f010eaff:	ff 75 0c             	pushl  0xc(%ebp)
f010eb02:	50                   	push   %eax
f010eb03:	e8 2a 2e 02 00       	call   f0131932 <strcpy>
f010eb08:	83 c4 10             	add    $0x10,%esp
				new_semaphore->ownerID=ownerEnvID;
f010eb0b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010eb0e:	8b 55 08             	mov    0x8(%ebp),%edx
f010eb11:	89 10                	mov    %edx,(%eax)
				new_semaphore->value=initialValue;
f010eb13:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010eb16:	8b 55 10             	mov    0x10(%ebp),%edx
f010eb19:	89 50 54             	mov    %edx,0x54(%eax)
				return result_of_allocation;
f010eb1c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010eb1f:	eb 0c                	jmp    f010eb2d <createSemaphore+0x76>
			}

		}
		else
		{
			return E_SEMAPHORE_EXISTS;
f010eb21:	b8 f4 ff ff ff       	mov    $0xfffffff4,%eax
f010eb26:	eb 05                	jmp    f010eb2d <createSemaphore+0x76>
		}

		return E_NO_SEMAPHORE;
f010eb28:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
}
f010eb2d:	c9                   	leave  
f010eb2e:	c3                   	ret    

f010eb2f <waitSemaphore>:

//============
// [2] Wait():
//============
void waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010eb2f:	55                   	push   %ebp
f010eb30:	89 e5                	mov    %esp,%ebp
f010eb32:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [SEMAPHORES] waitSemaphore
	// your code is here, remove the panic and write your code
	//panic("waitSemaphore() is not implemented yet...!!");

	struct Env* myenv = curenv; //The calling environment
f010eb35:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010eb3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//		a) adding it to semaphore queue		[refer to helper functions in doc]
	//		b) changing its status to ENV_BLOCKED
	//		c) set curenv with NULL
	//	4) Call "fos_scheduler()" to continue running the remaining envs

	int return_of_get=get_semaphore_object_ID(ownerEnvID,semaphoreName);
f010eb3d:	83 ec 08             	sub    $0x8,%esp
f010eb40:	ff 75 0c             	pushl  0xc(%ebp)
f010eb43:	ff 75 08             	pushl  0x8(%ebp)
f010eb46:	e8 e4 fd ff ff       	call   f010e92f <get_semaphore_object_ID>
f010eb4b:	83 c4 10             	add    $0x10,%esp
f010eb4e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		semaphores[return_of_get].value--;
f010eb51:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010eb57:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010eb5a:	89 d0                	mov    %edx,%eax
f010eb5c:	c1 e0 02             	shl    $0x2,%eax
f010eb5f:	01 d0                	add    %edx,%eax
f010eb61:	01 c0                	add    %eax,%eax
f010eb63:	01 d0                	add    %edx,%eax
f010eb65:	01 c0                	add    %eax,%eax
f010eb67:	01 d0                	add    %edx,%eax
f010eb69:	c1 e0 02             	shl    $0x2,%eax
f010eb6c:	01 c8                	add    %ecx,%eax
f010eb6e:	8b 50 54             	mov    0x54(%eax),%edx
f010eb71:	4a                   	dec    %edx
f010eb72:	89 50 54             	mov    %edx,0x54(%eax)
		if(semaphores[return_of_get].value<0)
f010eb75:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010eb7b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010eb7e:	89 d0                	mov    %edx,%eax
f010eb80:	c1 e0 02             	shl    $0x2,%eax
f010eb83:	01 d0                	add    %edx,%eax
f010eb85:	01 c0                	add    %eax,%eax
f010eb87:	01 d0                	add    %edx,%eax
f010eb89:	01 c0                	add    %eax,%eax
f010eb8b:	01 d0                	add    %edx,%eax
f010eb8d:	c1 e0 02             	shl    $0x2,%eax
f010eb90:	01 c8                	add    %ecx,%eax
f010eb92:	8b 40 54             	mov    0x54(%eax),%eax
f010eb95:	85 c0                	test   %eax,%eax
f010eb97:	79 43                	jns    f010ebdc <waitSemaphore+0xad>
		{
			enqueue(&semaphores[return_of_get].env_queue,myenv);
f010eb99:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010eb9f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010eba2:	89 d0                	mov    %edx,%eax
f010eba4:	c1 e0 02             	shl    $0x2,%eax
f010eba7:	01 d0                	add    %edx,%eax
f010eba9:	01 c0                	add    %eax,%eax
f010ebab:	01 d0                	add    %edx,%eax
f010ebad:	01 c0                	add    %eax,%eax
f010ebaf:	01 d0                	add    %edx,%eax
f010ebb1:	c1 e0 02             	shl    $0x2,%eax
f010ebb4:	01 c8                	add    %ecx,%eax
f010ebb6:	83 c0 44             	add    $0x44,%eax
f010ebb9:	83 ec 08             	sub    $0x8,%esp
f010ebbc:	ff 75 f4             	pushl  -0xc(%ebp)
f010ebbf:	50                   	push   %eax
f010ebc0:	e8 d8 58 ff ff       	call   f010449d <enqueue>
f010ebc5:	83 c4 10             	add    $0x10,%esp
			myenv->env_status=ENV_BLOCKED;
f010ebc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ebcb:	c7 40 54 03 00 00 00 	movl   $0x3,0x54(%eax)
			//curenv->env_status=ENV_BLOCKED;
			curenv=NULL;
f010ebd2:	c7 05 f4 a3 89 f0 00 	movl   $0x0,0xf089a3f4
f010ebd9:	00 00 00 
		}
		fos_scheduler();
f010ebdc:	e8 45 5b ff ff       	call   f0104726 <fos_scheduler>

f010ebe1 <signalSemaphore>:

//==============
// [3] Signal():
//==============
void signalSemaphore(int ownerEnvID, char* semaphoreName)
{
f010ebe1:	55                   	push   %ebp
f010ebe2:	89 e5                	mov    %esp,%ebp
f010ebe4:	83 ec 18             	sub    $0x18,%esp
	//		c) changing its status to ENV_READY


	    //uint32 val=0;
		struct Env* env;
		int return_of_get=get_semaphore_object_ID(ownerEnvID,semaphoreName);
f010ebe7:	83 ec 08             	sub    $0x8,%esp
f010ebea:	ff 75 0c             	pushl  0xc(%ebp)
f010ebed:	ff 75 08             	pushl  0x8(%ebp)
f010ebf0:	e8 3a fd ff ff       	call   f010e92f <get_semaphore_object_ID>
f010ebf5:	83 c4 10             	add    $0x10,%esp
f010ebf8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		semaphores[return_of_get].value++;
f010ebfb:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010ec01:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ec04:	89 d0                	mov    %edx,%eax
f010ec06:	c1 e0 02             	shl    $0x2,%eax
f010ec09:	01 d0                	add    %edx,%eax
f010ec0b:	01 c0                	add    %eax,%eax
f010ec0d:	01 d0                	add    %edx,%eax
f010ec0f:	01 c0                	add    %eax,%eax
f010ec11:	01 d0                	add    %edx,%eax
f010ec13:	c1 e0 02             	shl    $0x2,%eax
f010ec16:	01 c8                	add    %ecx,%eax
f010ec18:	8b 50 54             	mov    0x54(%eax),%edx
f010ec1b:	42                   	inc    %edx
f010ec1c:	89 50 54             	mov    %edx,0x54(%eax)
		if(semaphores[return_of_get].value<=0)
f010ec1f:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010ec25:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ec28:	89 d0                	mov    %edx,%eax
f010ec2a:	c1 e0 02             	shl    $0x2,%eax
f010ec2d:	01 d0                	add    %edx,%eax
f010ec2f:	01 c0                	add    %eax,%eax
f010ec31:	01 d0                	add    %edx,%eax
f010ec33:	01 c0                	add    %eax,%eax
f010ec35:	01 d0                	add    %edx,%eax
f010ec37:	c1 e0 02             	shl    $0x2,%eax
f010ec3a:	01 c8                	add    %ecx,%eax
f010ec3c:	8b 40 54             	mov    0x54(%eax),%eax
f010ec3f:	85 c0                	test   %eax,%eax
f010ec41:	7f 47                	jg     f010ec8a <signalSemaphore+0xa9>
		{
			env=dequeue(&semaphores[return_of_get].env_queue);
f010ec43:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010ec49:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ec4c:	89 d0                	mov    %edx,%eax
f010ec4e:	c1 e0 02             	shl    $0x2,%eax
f010ec51:	01 d0                	add    %edx,%eax
f010ec53:	01 c0                	add    %eax,%eax
f010ec55:	01 d0                	add    %edx,%eax
f010ec57:	01 c0                	add    %eax,%eax
f010ec59:	01 d0                	add    %edx,%eax
f010ec5b:	c1 e0 02             	shl    $0x2,%eax
f010ec5e:	01 c8                	add    %ecx,%eax
f010ec60:	83 c0 44             	add    $0x44,%eax
f010ec63:	83 ec 0c             	sub    $0xc,%esp
f010ec66:	50                   	push   %eax
f010ec67:	e8 c2 58 ff ff       	call   f010452e <dequeue>
f010ec6c:	83 c4 10             	add    $0x10,%esp
f010ec6f:	89 45 f0             	mov    %eax,-0x10(%ebp)
			sched_insert_ready(env);
f010ec72:	83 ec 0c             	sub    $0xc,%esp
f010ec75:	ff 75 f0             	pushl  -0x10(%ebp)
f010ec78:	e8 cf 5c ff ff       	call   f010494c <sched_insert_ready>
f010ec7d:	83 c4 10             	add    $0x10,%esp
			env->env_status=ENV_READY;
f010ec80:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ec83:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)





}
f010ec8a:	90                   	nop
f010ec8b:	c9                   	leave  
f010ec8c:	c3                   	ret    

f010ec8d <test_initialize_MemBlocksList>:

#define Mega  (1024*1024)
#define kilo (1024)

void test_initialize_MemBlocksList()
{
f010ec8d:	55                   	push   %ebp
f010ec8e:	89 e5                	mov    %esp,%ebp
f010ec90:	83 ec 18             	sub    $0x18,%esp
	uint32 numOfBlocks = 5;
f010ec93:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010ec9a:	83 ec 0c             	sub    $0xc,%esp
f010ec9d:	ff 75 ec             	pushl  -0x14(%ebp)
f010eca0:	e8 a8 37 02 00       	call   f013244d <initialize_MemBlocksList>
f010eca5:	83 c4 10             	add    $0x10,%esp
	//Check 1: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks)
f010eca8:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f010ecad:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010ecb0:	74 17                	je     f010ecc9 <test_initialize_MemBlocksList+0x3c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AvailableMemBlocksList %d\n", LIST_SIZE(&(AvailableMemBlocksList)));
f010ecb2:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f010ecb7:	50                   	push   %eax
f010ecb8:	68 40 82 13 f0       	push   $0xf0138240
f010ecbd:	6a 1f                	push   $0x1f
f010ecbf:	68 94 82 13 f0       	push   $0xf0138294
f010ecc4:	e8 3c 15 ff ff       	call   f0100205 <_panic>
		//assert(LIST_SIZE(&AvailableMemBlocksList) == numOfBlocks);
	}

	//Check 2: Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ecc9:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f010ecce:	85 c0                	test   %eax,%eax
f010ecd0:	74 17                	je     f010ece9 <test_initialize_MemBlocksList+0x5c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AllocMemBlocksList %d\n", LIST_SIZE(&(AllocMemBlocksList)));
f010ecd2:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f010ecd7:	50                   	push   %eax
f010ecd8:	68 b8 82 13 f0       	push   $0xf01382b8
f010ecdd:	6a 26                	push   $0x26
f010ecdf:	68 94 82 13 f0       	push   $0xf0138294
f010ece4:	e8 1c 15 ff ff       	call   f0100205 <_panic>
	}

	//Check 3: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 0)
f010ece9:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f010ecee:	85 c0                	test   %eax,%eax
f010ecf0:	74 17                	je     f010ed09 <test_initialize_MemBlocksList+0x7c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the FreeMemBlocksList %d\n", LIST_SIZE(&(FreeMemBlocksList)));
f010ecf2:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f010ecf7:	50                   	push   %eax
f010ecf8:	68 08 83 13 f0       	push   $0xf0138308
f010ecfd:	6a 2c                	push   $0x2c
f010ecff:	68 94 82 13 f0       	push   $0xf0138294
f010ed04:	e8 fc 14 ff ff       	call   f0100205 <_panic>
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
f010ed09:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 size = 0;
f010ed10:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010ed17:	a1 98 ad 89 f0       	mov    0xf089ad98,%eax
f010ed1c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010ed1f:	eb 29                	jmp    f010ed4a <test_initialize_MemBlocksList+0xbd>
	{
		size++;
f010ed21:	ff 45 f0             	incl   -0x10(%ebp)
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f010ed24:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ed27:	8b 50 0c             	mov    0xc(%eax),%edx
f010ed2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ed2d:	8b 40 08             	mov    0x8(%eax),%eax
f010ed30:	83 ec 04             	sub    $0x4,%esp
f010ed33:	52                   	push   %edx
f010ed34:	50                   	push   %eax
f010ed35:	68 58 83 13 f0       	push   $0xf0138358
f010ed3a:	e8 cf 1f ff ff       	call   f0100d0e <cprintf>
f010ed3f:	83 c4 10             	add    $0x10,%esp
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
	uint32 size = 0;
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010ed42:	a1 a0 ad 89 f0       	mov    0xf089ada0,%eax
f010ed47:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010ed4a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ed4e:	74 07                	je     f010ed57 <test_initialize_MemBlocksList+0xca>
f010ed50:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ed53:	8b 00                	mov    (%eax),%eax
f010ed55:	eb 05                	jmp    f010ed5c <test_initialize_MemBlocksList+0xcf>
f010ed57:	b8 00 00 00 00       	mov    $0x0,%eax
f010ed5c:	a3 a0 ad 89 f0       	mov    %eax,0xf089ada0
f010ed61:	a1 a0 ad 89 f0       	mov    0xf089ada0,%eax
f010ed66:	85 c0                	test   %eax,%eax
f010ed68:	75 b7                	jne    f010ed21 <test_initialize_MemBlocksList+0x94>
f010ed6a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ed6e:	75 b1                	jne    f010ed21 <test_initialize_MemBlocksList+0x94>
	{
		size++;
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
	if(LIST_SIZE(&(AvailableMemBlocksList)) != size)
f010ed70:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f010ed75:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ed78:	74 14                	je     f010ed8e <test_initialize_MemBlocksList+0x101>
		panic("initialize_MemBlocksList: Some nodes are not created in the initialize_MemBlocksList\n");
f010ed7a:	83 ec 04             	sub    $0x4,%esp
f010ed7d:	68 78 83 13 f0       	push   $0xf0138378
f010ed82:	6a 38                	push   $0x38
f010ed84:	68 94 82 13 f0       	push   $0xf0138294
f010ed89:	e8 77 14 ff ff       	call   f0100205 <_panic>
	else
		cprintf("Congratulations!! test initialize_MemBlocksList completed successfully.\n");
f010ed8e:	83 ec 0c             	sub    $0xc,%esp
f010ed91:	68 d0 83 13 f0       	push   $0xf01383d0
f010ed96:	e8 73 1f ff ff       	call   f0100d0e <cprintf>
f010ed9b:	83 c4 10             	add    $0x10,%esp
}
f010ed9e:	90                   	nop
f010ed9f:	c9                   	leave  
f010eda0:	c3                   	ret    

f010eda1 <test_insert_sorted_allocList>:

void test_insert_sorted_allocList()
{
f010eda1:	55                   	push   %ebp
f010eda2:	89 e5                	mov    %esp,%ebp
f010eda4:	57                   	push   %edi
f010eda5:	81 ec 94 00 00 00    	sub    $0x94,%esp
	uint32 numOfBlocks = 5;
f010edab:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010edb2:	83 ec 0c             	sub    $0xc,%esp
f010edb5:	ff 75 f4             	pushl  -0xc(%ebp)
f010edb8:	e8 90 36 02 00       	call   f013244d <initialize_MemBlocksList>
f010edbd:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010edc0:	c7 05 c8 ac 89 f0 00 	movl   $0x0,0xf089acc8
f010edc7:	00 00 00 
f010edca:	c7 05 cc ac 89 f0 00 	movl   $0x0,0xf089accc
f010edd1:	00 00 00 
f010edd4:	c7 05 d4 ac 89 f0 00 	movl   $0x0,0xf089acd4
f010eddb:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010edde:	c7 05 64 ad 89 f0 00 	movl   $0x0,0xf089ad64
f010ede5:	00 00 00 
f010ede8:	c7 05 68 ad 89 f0 00 	movl   $0x0,0xf089ad68
f010edef:	00 00 00 
f010edf2:	c7 05 70 ad 89 f0 00 	movl   $0x0,0xf089ad70
f010edf9:	00 00 00 

	uint32 blocksToInsertSVAs[5]={0,0,0,0,0};
f010edfc:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010edff:	b9 05 00 00 00       	mov    $0x5,%ecx
f010ee04:	b8 00 00 00 00       	mov    $0x0,%eax
f010ee09:	89 d7                	mov    %edx,%edi
f010ee0b:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[5]={0,0,0,0,0};
f010ee0d:	8d 55 c4             	lea    -0x3c(%ebp),%edx
f010ee10:	b9 05 00 00 00       	mov    $0x5,%ecx
f010ee15:	b8 00 00 00 00       	mov    $0x0,%eax
f010ee1a:	89 d7                	mov    %edx,%edi
f010ee1c:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f010ee1e:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	uint32 actualSize = 0;
f010ee25:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)


	/*INSERT Scenario 1: Insert BLOCK_1 in the empty AllocMemBlocksList*/
	//BLOCK_1 sva = 8K
	blocksToInsertSVAs[1] = 0x0 + (8*kilo);
f010ee2c:	c7 45 dc 00 20 00 00 	movl   $0x2000,-0x24(%ebp)
	blocksToInsertSizes[1] = (4*kilo);
f010ee33:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[1];
f010ee3a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ee3d:	89 45 b8             	mov    %eax,-0x48(%ebp)
	blockToInsert1.size = blocksToInsertSizes[1];
f010ee40:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ee43:	89 45 bc             	mov    %eax,-0x44(%ebp)

	insert_sorted_allocList(&blockToInsert1);
f010ee46:	83 ec 0c             	sub    $0xc,%esp
f010ee49:	8d 45 b0             	lea    -0x50(%ebp),%eax
f010ee4c:	50                   	push   %eax
f010ee4d:	e8 30 37 02 00       	call   f0132582 <insert_sorted_allocList>
f010ee52:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 1;
f010ee55:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010ee5c:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f010ee61:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ee64:	74 14                	je     f010ee7a <test_insert_sorted_allocList+0xd9>
f010ee66:	83 ec 04             	sub    $0x4,%esp
f010ee69:	68 1c 84 13 f0       	push   $0xf013841c
f010ee6e:	6a 56                	push   $0x56
f010ee70:	68 94 82 13 f0       	push   $0xf0138294
f010ee75:	e8 8b 13 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010ee7a:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f010ee7f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ee82:	74 14                	je     f010ee98 <test_insert_sorted_allocList+0xf7>
f010ee84:	83 ec 04             	sub    $0x4,%esp
f010ee87:	68 68 84 13 f0       	push   $0xf0138468
f010ee8c:	6a 59                	push   $0x59
f010ee8e:	68 94 82 13 f0       	push   $0xf0138294
f010ee93:	e8 6d 13 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	int chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010ee98:	83 ec 0c             	sub    $0xc,%esp
f010ee9b:	ff 75 f0             	pushl  -0x10(%ebp)
f010ee9e:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010eea1:	50                   	push   %eax
f010eea2:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010eea5:	50                   	push   %eax
f010eea6:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010eea9:	50                   	push   %eax
f010eeaa:	68 c8 ac 89 f0       	push   $0xf089acc8
f010eeaf:	e8 7d 26 00 00       	call   f0111531 <check_list_data>
f010eeb4:	83 c4 20             	add    $0x20,%esp
f010eeb7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010eeba:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010eebe:	74 14                	je     f010eed4 <test_insert_sorted_allocList+0x133>
f010eec0:	83 ec 04             	sub    $0x4,%esp
f010eec3:	68 b8 84 13 f0       	push   $0xf01384b8
f010eec8:	6a 5d                	push   $0x5d
f010eeca:	68 94 82 13 f0       	push   $0xf0138294
f010eecf:	e8 31 13 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010eed4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010eed7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010eeda:	74 14                	je     f010eef0 <test_insert_sorted_allocList+0x14f>
f010eedc:	83 ec 04             	sub    $0x4,%esp
f010eedf:	68 08 85 13 f0       	push   $0xf0138508
f010eee4:	6a 5e                	push   $0x5e
f010eee6:	68 94 82 13 f0       	push   $0xf0138294
f010eeeb:	e8 15 13 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT Scenario 2: Insert BLOCK_2 in the AllocMemBlocksList with sva greater than BLOCK_1*/
	//BLOCK_2 sva = 28K
	blocksToInsertSVAs[4] = (28*kilo);
f010eef0:	c7 45 e8 00 70 00 00 	movl   $0x7000,-0x18(%ebp)
	blocksToInsertSizes[4] = (2*kilo);
f010eef7:	c7 45 d4 00 08 00 00 	movl   $0x800,-0x2c(%ebp)
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[4];
f010eefe:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ef01:	89 45 a8             	mov    %eax,-0x58(%ebp)
	blockToInsert2.size = blocksToInsertSizes[4];
f010ef04:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010ef07:	89 45 ac             	mov    %eax,-0x54(%ebp)

	insert_sorted_allocList(&blockToInsert2);
f010ef0a:	83 ec 0c             	sub    $0xc,%esp
f010ef0d:	8d 45 a0             	lea    -0x60(%ebp),%eax
f010ef10:	50                   	push   %eax
f010ef11:	e8 6c 36 02 00       	call   f0132582 <insert_sorted_allocList>
f010ef16:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 2;
f010ef19:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010ef20:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f010ef25:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ef28:	74 14                	je     f010ef3e <test_insert_sorted_allocList+0x19d>
f010ef2a:	83 ec 04             	sub    $0x4,%esp
f010ef2d:	68 1c 84 13 f0       	push   $0xf013841c
f010ef32:	6a 6d                	push   $0x6d
f010ef34:	68 94 82 13 f0       	push   $0xf0138294
f010ef39:	e8 c7 12 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010ef3e:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f010ef43:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ef46:	74 14                	je     f010ef5c <test_insert_sorted_allocList+0x1bb>
f010ef48:	83 ec 04             	sub    $0x4,%esp
f010ef4b:	68 68 84 13 f0       	push   $0xf0138468
f010ef50:	6a 70                	push   $0x70
f010ef52:	68 94 82 13 f0       	push   $0xf0138294
f010ef57:	e8 a9 12 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010ef5c:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010ef63:	83 ec 0c             	sub    $0xc,%esp
f010ef66:	ff 75 f0             	pushl  -0x10(%ebp)
f010ef69:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010ef6c:	50                   	push   %eax
f010ef6d:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010ef70:	50                   	push   %eax
f010ef71:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010ef74:	50                   	push   %eax
f010ef75:	68 c8 ac 89 f0       	push   $0xf089acc8
f010ef7a:	e8 b2 25 00 00       	call   f0111531 <check_list_data>
f010ef7f:	83 c4 20             	add    $0x20,%esp
f010ef82:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010ef85:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010ef89:	74 14                	je     f010ef9f <test_insert_sorted_allocList+0x1fe>
f010ef8b:	83 ec 04             	sub    $0x4,%esp
f010ef8e:	68 b8 84 13 f0       	push   $0xf01384b8
f010ef93:	6a 75                	push   $0x75
f010ef95:	68 94 82 13 f0       	push   $0xf0138294
f010ef9a:	e8 66 12 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010ef9f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010efa2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010efa5:	74 14                	je     f010efbb <test_insert_sorted_allocList+0x21a>
f010efa7:	83 ec 04             	sub    $0x4,%esp
f010efaa:	68 08 85 13 f0       	push   $0xf0138508
f010efaf:	6a 76                	push   $0x76
f010efb1:	68 94 82 13 f0       	push   $0xf0138294
f010efb6:	e8 4a 12 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT Scenario 3: Insert BLOCK_3 in the AllocMemBlocksList with sva smaller than BLOCK_2*/
	//BLOCK_3 sva = 16K
	blocksToInsertSVAs[2] = (16*kilo);
f010efbb:	c7 45 e0 00 40 00 00 	movl   $0x4000,-0x20(%ebp)
	blocksToInsertSizes[2] = (8*kilo);
f010efc2:	c7 45 cc 00 20 00 00 	movl   $0x2000,-0x34(%ebp)
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[2];
f010efc9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010efcc:	89 45 98             	mov    %eax,-0x68(%ebp)
	blockToInsert3.size = blocksToInsertSizes[2];
f010efcf:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010efd2:	89 45 9c             	mov    %eax,-0x64(%ebp)

	insert_sorted_allocList(&blockToInsert3);
f010efd5:	83 ec 0c             	sub    $0xc,%esp
f010efd8:	8d 45 90             	lea    -0x70(%ebp),%eax
f010efdb:	50                   	push   %eax
f010efdc:	e8 a1 35 02 00       	call   f0132582 <insert_sorted_allocList>
f010efe1:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 3;
f010efe4:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010efeb:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f010eff0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010eff3:	74 17                	je     f010f00c <test_insert_sorted_allocList+0x26b>
f010eff5:	83 ec 04             	sub    $0x4,%esp
f010eff8:	68 1c 84 13 f0       	push   $0xf013841c
f010effd:	68 85 00 00 00       	push   $0x85
f010f002:	68 94 82 13 f0       	push   $0xf0138294
f010f007:	e8 f9 11 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList\n");
f010f00c:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f010f011:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f014:	74 17                	je     f010f02d <test_insert_sorted_allocList+0x28c>
f010f016:	83 ec 04             	sub    $0x4,%esp
f010f019:	68 54 85 13 f0       	push   $0xf0138554
f010f01e:	68 88 00 00 00       	push   $0x88
f010f023:	68 94 82 13 f0       	push   $0xf0138294
f010f028:	e8 d8 11 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010f02d:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f034:	83 ec 0c             	sub    $0xc,%esp
f010f037:	ff 75 f0             	pushl  -0x10(%ebp)
f010f03a:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f03d:	50                   	push   %eax
f010f03e:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010f041:	50                   	push   %eax
f010f042:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010f045:	50                   	push   %eax
f010f046:	68 c8 ac 89 f0       	push   $0xf089acc8
f010f04b:	e8 e1 24 00 00       	call   f0111531 <check_list_data>
f010f050:	83 c4 20             	add    $0x20,%esp
f010f053:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010f056:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010f05a:	74 17                	je     f010f073 <test_insert_sorted_allocList+0x2d2>
f010f05c:	83 ec 04             	sub    $0x4,%esp
f010f05f:	68 b8 84 13 f0       	push   $0xf01384b8
f010f064:	68 8d 00 00 00       	push   $0x8d
f010f069:	68 94 82 13 f0       	push   $0xf0138294
f010f06e:	e8 92 11 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010f073:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f076:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f079:	74 17                	je     f010f092 <test_insert_sorted_allocList+0x2f1>
f010f07b:	83 ec 04             	sub    $0x4,%esp
f010f07e:	68 08 85 13 f0       	push   $0xf0138508
f010f083:	68 8e 00 00 00       	push   $0x8e
f010f088:	68 94 82 13 f0       	push   $0xf0138294
f010f08d:	e8 73 11 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//INSERT Scenario 4: Insert BLOCK_4 in the AllocMemBlocksList with sva smaller than ALL (SHALL BE INSERTED AS HEAD)
	//BLOCK_4 sva = 0x0
	blocksToInsertSVAs[0] = (0x0);
f010f092:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	blocksToInsertSizes[0] = (8*kilo);
f010f099:	c7 45 c4 00 20 00 00 	movl   $0x2000,-0x3c(%ebp)
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[0];
f010f0a0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010f0a3:	89 45 88             	mov    %eax,-0x78(%ebp)
	blockToInsert4.size = blocksToInsertSizes[0];
f010f0a6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f0a9:	89 45 8c             	mov    %eax,-0x74(%ebp)
	insert_sorted_allocList(&blockToInsert4);
f010f0ac:	83 ec 0c             	sub    $0xc,%esp
f010f0af:	8d 45 80             	lea    -0x80(%ebp),%eax
f010f0b2:	50                   	push   %eax
f010f0b3:	e8 ca 34 02 00       	call   f0132582 <insert_sorted_allocList>
f010f0b8:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 4;
f010f0bb:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010f0c2:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f010f0c7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f0ca:	74 17                	je     f010f0e3 <test_insert_sorted_allocList+0x342>
f010f0cc:	83 ec 04             	sub    $0x4,%esp
f010f0cf:	68 1c 84 13 f0       	push   $0xf013841c
f010f0d4:	68 9c 00 00 00       	push   $0x9c
f010f0d9:	68 94 82 13 f0       	push   $0xf0138294
f010f0de:	e8 22 11 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010f0e3:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f010f0e8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f0eb:	74 17                	je     f010f104 <test_insert_sorted_allocList+0x363>
f010f0ed:	83 ec 04             	sub    $0x4,%esp
f010f0f0:	68 68 84 13 f0       	push   $0xf0138468
f010f0f5:	68 9f 00 00 00       	push   $0x9f
f010f0fa:	68 94 82 13 f0       	push   $0xf0138294
f010f0ff:	e8 01 11 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010f104:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f10b:	83 ec 0c             	sub    $0xc,%esp
f010f10e:	ff 75 f0             	pushl  -0x10(%ebp)
f010f111:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f114:	50                   	push   %eax
f010f115:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010f118:	50                   	push   %eax
f010f119:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010f11c:	50                   	push   %eax
f010f11d:	68 c8 ac 89 f0       	push   $0xf089acc8
f010f122:	e8 0a 24 00 00       	call   f0111531 <check_list_data>
f010f127:	83 c4 20             	add    $0x20,%esp
f010f12a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010f12d:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010f131:	74 17                	je     f010f14a <test_insert_sorted_allocList+0x3a9>
f010f133:	83 ec 04             	sub    $0x4,%esp
f010f136:	68 b8 84 13 f0       	push   $0xf01384b8
f010f13b:	68 a4 00 00 00       	push   $0xa4
f010f140:	68 94 82 13 f0       	push   $0xf0138294
f010f145:	e8 bb 10 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010f14a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f14d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f150:	74 17                	je     f010f169 <test_insert_sorted_allocList+0x3c8>
f010f152:	83 ec 04             	sub    $0x4,%esp
f010f155:	68 08 85 13 f0       	push   $0xf0138508
f010f15a:	68 a5 00 00 00       	push   $0xa5
f010f15f:	68 94 82 13 f0       	push   $0xf0138294
f010f164:	e8 9c 10 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//INSERT Scenario 5: Insert BLOCK_5 in the AllocMemBlocksList with sva not greater than the first block only
	//BLOCK_5 sva = 24K
	blocksToInsertSVAs[3] = 24*kilo;
f010f169:	c7 45 e4 00 60 00 00 	movl   $0x6000,-0x1c(%ebp)
	blocksToInsertSizes[3] = (4*kilo);
f010f170:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[3];
f010f177:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f17a:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
	blockToInsert5.size = blocksToInsertSizes[3];
f010f180:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f183:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	insert_sorted_allocList(&blockToInsert5);
f010f189:	83 ec 0c             	sub    $0xc,%esp
f010f18c:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f010f192:	50                   	push   %eax
f010f193:	e8 ea 33 02 00       	call   f0132582 <insert_sorted_allocList>
f010f198:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 5;
f010f19b:	c7 45 f0 05 00 00 00 	movl   $0x5,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010f1a2:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f010f1a7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f1aa:	74 17                	je     f010f1c3 <test_insert_sorted_allocList+0x422>
f010f1ac:	83 ec 04             	sub    $0x4,%esp
f010f1af:	68 1c 84 13 f0       	push   $0xf013841c
f010f1b4:	68 b3 00 00 00       	push   $0xb3
f010f1b9:	68 94 82 13 f0       	push   $0xf0138294
f010f1be:	e8 42 10 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010f1c3:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f010f1c8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f1cb:	74 17                	je     f010f1e4 <test_insert_sorted_allocList+0x443>
f010f1cd:	83 ec 04             	sub    $0x4,%esp
f010f1d0:	68 68 84 13 f0       	push   $0xf0138468
f010f1d5:	68 b6 00 00 00       	push   $0xb6
f010f1da:	68 94 82 13 f0       	push   $0xf0138294
f010f1df:	e8 21 10 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010f1e4:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f1eb:	83 ec 0c             	sub    $0xc,%esp
f010f1ee:	ff 75 f0             	pushl  -0x10(%ebp)
f010f1f1:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f1f4:	50                   	push   %eax
f010f1f5:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010f1f8:	50                   	push   %eax
f010f1f9:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010f1fc:	50                   	push   %eax
f010f1fd:	68 c8 ac 89 f0       	push   $0xf089acc8
f010f202:	e8 2a 23 00 00       	call   f0111531 <check_list_data>
f010f207:	83 c4 20             	add    $0x20,%esp
f010f20a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010f20d:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010f211:	74 17                	je     f010f22a <test_insert_sorted_allocList+0x489>
f010f213:	83 ec 04             	sub    $0x4,%esp
f010f216:	68 b8 84 13 f0       	push   $0xf01384b8
f010f21b:	68 bb 00 00 00       	push   $0xbb
f010f220:	68 94 82 13 f0       	push   $0xf0138294
f010f225:	e8 db 0f ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010f22a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f22d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f230:	74 17                	je     f010f249 <test_insert_sorted_allocList+0x4a8>
f010f232:	83 ec 04             	sub    $0x4,%esp
f010f235:	68 08 85 13 f0       	push   $0xf0138508
f010f23a:	68 bc 00 00 00       	push   $0xbc
f010f23f:	68 94 82 13 f0       	push   $0xf0138294
f010f244:	e8 bc 0f ff ff       	call   f0100205 <_panic>
	//====================================================================//
	//====================================================================//
	//show_list_content(&AllocMemBlocksList);

	cprintf("Congratulations!! test insert_sorted completed successfully.\n");
f010f249:	83 ec 0c             	sub    $0xc,%esp
f010f24c:	68 a4 85 13 f0       	push   $0xf01385a4
f010f251:	e8 b8 1a ff ff       	call   f0100d0e <cprintf>
f010f256:	83 c4 10             	add    $0x10,%esp
}
f010f259:	90                   	nop
f010f25a:	8b 7d fc             	mov    -0x4(%ebp),%edi
f010f25d:	c9                   	leave  
f010f25e:	c3                   	ret    

f010f25f <test_find_block>:

void test_find_block()
{
f010f25f:	55                   	push   %ebp
f010f260:	89 e5                	mov    %esp,%ebp
f010f262:	57                   	push   %edi
f010f263:	56                   	push   %esi
f010f264:	53                   	push   %ebx
f010f265:	81 ec ac 00 00 00    	sub    $0xac,%esp
	uint32 numOfBlocks = 6;
f010f26b:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010f272:	83 ec 0c             	sub    $0xc,%esp
f010f275:	ff 75 e0             	pushl  -0x20(%ebp)
f010f278:	e8 d0 31 02 00       	call   f013244d <initialize_MemBlocksList>
f010f27d:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&FreeMemBlocksList);
f010f280:	c7 05 64 ad 89 f0 00 	movl   $0x0,0xf089ad64
f010f287:	00 00 00 
f010f28a:	c7 05 68 ad 89 f0 00 	movl   $0x0,0xf089ad68
f010f291:	00 00 00 
f010f294:	c7 05 70 ad 89 f0 00 	movl   $0x0,0xf089ad70
f010f29b:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfAllocBlocks  6
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
f010f29e:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010f2a1:	bb 1c 87 13 f0       	mov    $0xf013871c,%ebx
f010f2a6:	ba 06 00 00 00       	mov    $0x6,%edx
f010f2ab:	89 c7                	mov    %eax,%edi
f010f2ad:	89 de                	mov    %ebx,%esi
f010f2af:	89 d1                	mov    %edx,%ecx
f010f2b1:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;
f010f2b3:	8d 45 ac             	lea    -0x54(%ebp),%eax
f010f2b6:	bb 34 87 13 f0       	mov    $0xf0138734,%ebx
f010f2bb:	ba 06 00 00 00       	mov    $0x6,%edx
f010f2c0:	89 c7                	mov    %eax,%edi
f010f2c2:	89 de                	mov    %ebx,%esi
f010f2c4:	89 d1                	mov    %edx,%ecx
f010f2c6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&AllocMemBlocksList);
f010f2c8:	c7 05 c8 ac 89 f0 00 	movl   $0x0,0xf089acc8
f010f2cf:	00 00 00 
f010f2d2:	c7 05 cc ac 89 f0 00 	movl   $0x0,0xf089accc
f010f2d9:	00 00 00 
f010f2dc:	c7 05 d4 ac 89 f0 00 	movl   $0x0,0xf089acd4
f010f2e3:	00 00 00 
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010f2e6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010f2ed:	e9 5f 01 00 00       	jmp    f010f451 <test_find_block+0x1f2>
	{
		blockToInsert[i].sva = BlocksSVAs[i];
f010f2f2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f2f5:	8b 44 85 c4          	mov    -0x3c(%ebp,%eax,4),%eax
f010f2f9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f2fc:	c1 e2 04             	shl    $0x4,%edx
f010f2ff:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f302:	01 da                	add    %ebx,%edx
f010f304:	81 ea 94 00 00 00    	sub    $0x94,%edx
f010f30a:	89 02                	mov    %eax,(%edx)
		blockToInsert[i].size = BlocksSizes[i];
f010f30c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f30f:	8b 44 85 ac          	mov    -0x54(%ebp,%eax,4),%eax
f010f313:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f316:	c1 e2 04             	shl    $0x4,%edx
f010f319:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f31c:	01 f2                	add    %esi,%edx
f010f31e:	81 ea 90 00 00 00    	sub    $0x90,%edx
f010f324:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010f326:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010f32a:	0f 85 92 00 00 00    	jne    f010f3c2 <test_find_block+0x163>
			LIST_INSERT_HEAD(&AllocMemBlocksList, &(blockToInsert[i]));
f010f330:	a1 c8 ac 89 f0       	mov    0xf089acc8,%eax
f010f335:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f338:	c1 e2 04             	shl    $0x4,%edx
f010f33b:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f33e:	01 fa                	add    %edi,%edx
f010f340:	81 ea 9c 00 00 00    	sub    $0x9c,%edx
f010f346:	89 02                	mov    %eax,(%edx)
f010f348:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f34b:	c1 e0 04             	shl    $0x4,%eax
f010f34e:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f351:	01 d8                	add    %ebx,%eax
f010f353:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010f358:	8b 00                	mov    (%eax),%eax
f010f35a:	85 c0                	test   %eax,%eax
f010f35c:	74 18                	je     f010f376 <test_find_block+0x117>
f010f35e:	a1 c8 ac 89 f0       	mov    0xf089acc8,%eax
f010f363:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010f369:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f36c:	c1 e1 04             	shl    $0x4,%ecx
f010f36f:	01 ca                	add    %ecx,%edx
f010f371:	89 50 04             	mov    %edx,0x4(%eax)
f010f374:	eb 13                	jmp    f010f389 <test_find_block+0x12a>
f010f376:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010f37c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f37f:	c1 e2 04             	shl    $0x4,%edx
f010f382:	01 d0                	add    %edx,%eax
f010f384:	a3 cc ac 89 f0       	mov    %eax,0xf089accc
f010f389:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010f38f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f392:	c1 e2 04             	shl    $0x4,%edx
f010f395:	01 d0                	add    %edx,%eax
f010f397:	a3 c8 ac 89 f0       	mov    %eax,0xf089acc8
f010f39c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f39f:	c1 e0 04             	shl    $0x4,%eax
f010f3a2:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f3a5:	01 f0                	add    %esi,%eax
f010f3a7:	2d 98 00 00 00       	sub    $0x98,%eax
f010f3ac:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f3b2:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f010f3b7:	40                   	inc    %eax
f010f3b8:	a3 d4 ac 89 f0       	mov    %eax,0xf089acd4
f010f3bd:	e9 8c 00 00 00       	jmp    f010f44e <test_find_block+0x1ef>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
f010f3c2:	a1 cc ac 89 f0       	mov    0xf089accc,%eax
f010f3c7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f3ca:	c1 e2 04             	shl    $0x4,%edx
f010f3cd:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f3d0:	01 fa                	add    %edi,%edx
f010f3d2:	81 ea 98 00 00 00    	sub    $0x98,%edx
f010f3d8:	89 02                	mov    %eax,(%edx)
f010f3da:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f3dd:	c1 e0 04             	shl    $0x4,%eax
f010f3e0:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f3e3:	01 d8                	add    %ebx,%eax
f010f3e5:	2d 98 00 00 00       	sub    $0x98,%eax
f010f3ea:	8b 00                	mov    (%eax),%eax
f010f3ec:	85 c0                	test   %eax,%eax
f010f3ee:	74 17                	je     f010f407 <test_find_block+0x1a8>
f010f3f0:	a1 cc ac 89 f0       	mov    0xf089accc,%eax
f010f3f5:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010f3fb:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f3fe:	c1 e1 04             	shl    $0x4,%ecx
f010f401:	01 ca                	add    %ecx,%edx
f010f403:	89 10                	mov    %edx,(%eax)
f010f405:	eb 13                	jmp    f010f41a <test_find_block+0x1bb>
f010f407:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010f40d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f410:	c1 e2 04             	shl    $0x4,%edx
f010f413:	01 d0                	add    %edx,%eax
f010f415:	a3 c8 ac 89 f0       	mov    %eax,0xf089acc8
f010f41a:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010f420:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f423:	c1 e2 04             	shl    $0x4,%edx
f010f426:	01 d0                	add    %edx,%eax
f010f428:	a3 cc ac 89 f0       	mov    %eax,0xf089accc
f010f42d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f430:	c1 e0 04             	shl    $0x4,%eax
f010f433:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f436:	01 f0                	add    %esi,%eax
f010f438:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010f43d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f443:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f010f448:	40                   	inc    %eax
f010f449:	a3 d4 ac 89 f0       	mov    %eax,0xf089acd4
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;

	LIST_INIT(&AllocMemBlocksList);
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010f44e:	ff 45 e4             	incl   -0x1c(%ebp)
f010f451:	83 7d e4 05          	cmpl   $0x5,-0x1c(%ebp)
f010f455:	0f 8e 97 fe ff ff    	jle    f010f2f2 <test_find_block+0x93>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
	}

	/*FIND Scenario 1: Search for a block that doesn't exist (Block with SVA = 4KB)*/
	struct MemBlock * blockToFind = find_block(&AllocMemBlocksList, 0x1000);
f010f45b:	83 ec 08             	sub    $0x8,%esp
f010f45e:	68 00 10 00 00       	push   $0x1000
f010f463:	68 c8 ac 89 f0       	push   $0xf089acc8
f010f468:	e8 bd 30 02 00       	call   f013252a <find_block>
f010f46d:	83 c4 10             	add    $0x10,%esp
f010f470:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind != NULL)
f010f473:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f477:	74 17                	je     f010f490 <test_find_block+0x231>
		panic("find_block: WRONG SEARCH - The block you searched for doesn't exist, however find_block find it.");
f010f479:	83 ec 04             	sub    $0x4,%esp
f010f47c:	68 e4 85 13 f0       	push   $0xf01385e4
f010f481:	68 de 00 00 00       	push   $0xde
f010f486:	68 94 82 13 f0       	push   $0xf0138294
f010f48b:	e8 75 0d ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 2: Search for a block exist @ the beginning (Block with SVA = 0KB)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x0);
f010f490:	83 ec 08             	sub    $0x8,%esp
f010f493:	6a 00                	push   $0x0
f010f495:	68 c8 ac 89 f0       	push   $0xf089acc8
f010f49a:	e8 8b 30 02 00       	call   f013252a <find_block>
f010f49f:	83 c4 10             	add    $0x10,%esp
f010f4a2:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 3*kilo || blockToFind->sva != 0x0)
f010f4a5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f4a9:	74 17                	je     f010f4c2 <test_find_block+0x263>
f010f4ab:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f4ae:	8b 40 0c             	mov    0xc(%eax),%eax
f010f4b1:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010f4b6:	75 0a                	jne    f010f4c2 <test_find_block+0x263>
f010f4b8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f4bb:	8b 40 08             	mov    0x8(%eax),%eax
f010f4be:	85 c0                	test   %eax,%eax
f010f4c0:	74 17                	je     f010f4d9 <test_find_block+0x27a>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010f4c2:	83 ec 04             	sub    $0x4,%esp
f010f4c5:	68 48 86 13 f0       	push   $0xf0138648
f010f4ca:	68 e3 00 00 00       	push   $0xe3
f010f4cf:	68 94 82 13 f0       	push   $0xf0138294
f010f4d4:	e8 2c 0d ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 3: Search for a block exist @ the mid (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x7000);
f010f4d9:	83 ec 08             	sub    $0x8,%esp
f010f4dc:	68 00 70 00 00       	push   $0x7000
f010f4e1:	68 c8 ac 89 f0       	push   $0xf089acc8
f010f4e6:	e8 3f 30 02 00       	call   f013252a <find_block>
f010f4eb:	83 c4 10             	add    $0x10,%esp
f010f4ee:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 9*kilo || blockToFind->sva != 0x7000)
f010f4f1:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f4f5:	74 1a                	je     f010f511 <test_find_block+0x2b2>
f010f4f7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f4fa:	8b 40 0c             	mov    0xc(%eax),%eax
f010f4fd:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010f502:	75 0d                	jne    f010f511 <test_find_block+0x2b2>
f010f504:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f507:	8b 40 08             	mov    0x8(%eax),%eax
f010f50a:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010f50f:	74 17                	je     f010f528 <test_find_block+0x2c9>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010f511:	83 ec 04             	sub    $0x4,%esp
f010f514:	68 48 86 13 f0       	push   $0xf0138648
f010f519:	68 e8 00 00 00       	push   $0xe8
f010f51e:	68 94 82 13 f0       	push   $0xf0138294
f010f523:	e8 dd 0c ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 4: Search for a block exist @ the end (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x1A400);
f010f528:	83 ec 08             	sub    $0x8,%esp
f010f52b:	68 00 a4 01 00       	push   $0x1a400
f010f530:	68 c8 ac 89 f0       	push   $0xf089acc8
f010f535:	e8 f0 2f 02 00       	call   f013252a <find_block>
f010f53a:	83 c4 10             	add    $0x10,%esp
f010f53d:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 2*Mega || blockToFind->sva != 0x1A400)
f010f540:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f544:	74 1a                	je     f010f560 <test_find_block+0x301>
f010f546:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f549:	8b 40 0c             	mov    0xc(%eax),%eax
f010f54c:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010f551:	75 0d                	jne    f010f560 <test_find_block+0x301>
f010f553:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f556:	8b 40 08             	mov    0x8(%eax),%eax
f010f559:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010f55e:	74 17                	je     f010f577 <test_find_block+0x318>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010f560:	83 ec 04             	sub    $0x4,%esp
f010f563:	68 48 86 13 f0       	push   $0xf0138648
f010f568:	68 ed 00 00 00       	push   $0xed
f010f56d:	68 94 82 13 f0       	push   $0xf0138294
f010f572:	e8 8e 0c ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList & FreeMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 0 )
f010f577:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f010f57c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f57f:	75 09                	jne    f010f58a <test_find_block+0x32b>
f010f581:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f010f586:	85 c0                	test   %eax,%eax
f010f588:	74 17                	je     f010f5a1 <test_find_block+0x342>
	{
		panic("find_block: AvailableMemBlocksList and FreeMemBlocksList are affected and this shall not occurred.");
f010f58a:	83 ec 04             	sub    $0x4,%esp
f010f58d:	68 7c 86 13 f0       	push   $0xf013867c
f010f592:	68 f2 00 00 00       	push   $0xf2
f010f597:	68 94 82 13 f0       	push   $0xf0138294
f010f59c:	e8 64 0c ff ff       	call   f0100205 <_panic>
	}

	//show_list_content(&AllocMemBlocksList);
	cprintf("Congratulations!! test find_block completed successfully.\n");
f010f5a1:	83 ec 0c             	sub    $0xc,%esp
f010f5a4:	68 e0 86 13 f0       	push   $0xf01386e0
f010f5a9:	e8 60 17 ff ff       	call   f0100d0e <cprintf>
f010f5ae:	83 c4 10             	add    $0x10,%esp
}
f010f5b1:	90                   	nop
f010f5b2:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f5b5:	5b                   	pop    %ebx
f010f5b6:	5e                   	pop    %esi
f010f5b7:	5f                   	pop    %edi
f010f5b8:	5d                   	pop    %ebp
f010f5b9:	c3                   	ret    

f010f5ba <test_alloc_block_FF>:

void test_alloc_block_FF()
{
f010f5ba:	55                   	push   %ebp
f010f5bb:	89 e5                	mov    %esp,%ebp
f010f5bd:	57                   	push   %edi
f010f5be:	56                   	push   %esi
f010f5bf:	53                   	push   %ebx
f010f5c0:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010f5c6:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010f5cd:	83 ec 0c             	sub    $0xc,%esp
f010f5d0:	ff 75 e0             	pushl  -0x20(%ebp)
f010f5d3:	e8 75 2e 02 00       	call   f013244d <initialize_MemBlocksList>
f010f5d8:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010f5db:	c7 05 c8 ac 89 f0 00 	movl   $0x0,0xf089acc8
f010f5e2:	00 00 00 
f010f5e5:	c7 05 cc ac 89 f0 00 	movl   $0x0,0xf089accc
f010f5ec:	00 00 00 
f010f5ef:	c7 05 d4 ac 89 f0 00 	movl   $0x0,0xf089acd4
f010f5f6:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_FF  8
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010f5f9:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f5fc:	bb c0 89 13 f0       	mov    $0xf01389c0,%ebx
f010f601:	ba 08 00 00 00       	mov    $0x8,%edx
f010f606:	89 c7                	mov    %eax,%edi
f010f608:	89 de                	mov    %ebx,%esi
f010f60a:	89 d1                	mov    %edx,%ecx
f010f60c:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;
f010f60e:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f611:	bb e0 89 13 f0       	mov    $0xf01389e0,%ebx
f010f616:	ba 08 00 00 00       	mov    $0x8,%edx
f010f61b:	89 c7                	mov    %eax,%edi
f010f61d:	89 de                	mov    %ebx,%esi
f010f61f:	89 d1                	mov    %edx,%ecx
f010f621:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010f623:	c7 05 64 ad 89 f0 00 	movl   $0x0,0xf089ad64
f010f62a:	00 00 00 
f010f62d:	c7 05 68 ad 89 f0 00 	movl   $0x0,0xf089ad68
f010f634:	00 00 00 
f010f637:	c7 05 70 ad 89 f0 00 	movl   $0x0,0xf089ad70
f010f63e:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010f641:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010f648:	e9 5f 01 00 00       	jmp    f010f7ac <test_alloc_block_FF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010f64d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f650:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010f654:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f657:	c1 e2 04             	shl    $0x4,%edx
f010f65a:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f65d:	01 da                	add    %ebx,%edx
f010f65f:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010f665:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010f667:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f66a:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010f66e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f671:	c1 e2 04             	shl    $0x4,%edx
f010f674:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f677:	01 f2                	add    %esi,%edx
f010f679:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010f67f:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010f681:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010f685:	0f 85 92 00 00 00    	jne    f010f71d <test_alloc_block_FF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010f68b:	a1 64 ad 89 f0       	mov    0xf089ad64,%eax
f010f690:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f693:	c1 e2 04             	shl    $0x4,%edx
f010f696:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f699:	01 fa                	add    %edi,%edx
f010f69b:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010f6a1:	89 02                	mov    %eax,(%edx)
f010f6a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f6a6:	c1 e0 04             	shl    $0x4,%eax
f010f6a9:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f6ac:	01 d8                	add    %ebx,%eax
f010f6ae:	2d d4 00 00 00       	sub    $0xd4,%eax
f010f6b3:	8b 00                	mov    (%eax),%eax
f010f6b5:	85 c0                	test   %eax,%eax
f010f6b7:	74 18                	je     f010f6d1 <test_alloc_block_FF+0x117>
f010f6b9:	a1 64 ad 89 f0       	mov    0xf089ad64,%eax
f010f6be:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010f6c4:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f6c7:	c1 e1 04             	shl    $0x4,%ecx
f010f6ca:	01 ca                	add    %ecx,%edx
f010f6cc:	89 50 04             	mov    %edx,0x4(%eax)
f010f6cf:	eb 13                	jmp    f010f6e4 <test_alloc_block_FF+0x12a>
f010f6d1:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f6d7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f6da:	c1 e2 04             	shl    $0x4,%edx
f010f6dd:	01 d0                	add    %edx,%eax
f010f6df:	a3 68 ad 89 f0       	mov    %eax,0xf089ad68
f010f6e4:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f6ea:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f6ed:	c1 e2 04             	shl    $0x4,%edx
f010f6f0:	01 d0                	add    %edx,%eax
f010f6f2:	a3 64 ad 89 f0       	mov    %eax,0xf089ad64
f010f6f7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f6fa:	c1 e0 04             	shl    $0x4,%eax
f010f6fd:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f700:	01 f0                	add    %esi,%eax
f010f702:	2d d0 00 00 00       	sub    $0xd0,%eax
f010f707:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f70d:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f010f712:	40                   	inc    %eax
f010f713:	a3 70 ad 89 f0       	mov    %eax,0xf089ad70
f010f718:	e9 8c 00 00 00       	jmp    f010f7a9 <test_alloc_block_FF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010f71d:	a1 68 ad 89 f0       	mov    0xf089ad68,%eax
f010f722:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f725:	c1 e2 04             	shl    $0x4,%edx
f010f728:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f72b:	01 fa                	add    %edi,%edx
f010f72d:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010f733:	89 02                	mov    %eax,(%edx)
f010f735:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f738:	c1 e0 04             	shl    $0x4,%eax
f010f73b:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f73e:	01 d8                	add    %ebx,%eax
f010f740:	2d d0 00 00 00       	sub    $0xd0,%eax
f010f745:	8b 00                	mov    (%eax),%eax
f010f747:	85 c0                	test   %eax,%eax
f010f749:	74 17                	je     f010f762 <test_alloc_block_FF+0x1a8>
f010f74b:	a1 68 ad 89 f0       	mov    0xf089ad68,%eax
f010f750:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010f756:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f759:	c1 e1 04             	shl    $0x4,%ecx
f010f75c:	01 ca                	add    %ecx,%edx
f010f75e:	89 10                	mov    %edx,(%eax)
f010f760:	eb 13                	jmp    f010f775 <test_alloc_block_FF+0x1bb>
f010f762:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f768:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f76b:	c1 e2 04             	shl    $0x4,%edx
f010f76e:	01 d0                	add    %edx,%eax
f010f770:	a3 64 ad 89 f0       	mov    %eax,0xf089ad64
f010f775:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f77b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f77e:	c1 e2 04             	shl    $0x4,%edx
f010f781:	01 d0                	add    %edx,%eax
f010f783:	a3 68 ad 89 f0       	mov    %eax,0xf089ad68
f010f788:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f78b:	c1 e0 04             	shl    $0x4,%eax
f010f78e:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f791:	01 f0                	add    %esi,%eax
f010f793:	2d d4 00 00 00       	sub    $0xd4,%eax
f010f798:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f79e:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f010f7a3:	40                   	inc    %eax
f010f7a4:	a3 70 ad 89 f0       	mov    %eax,0xf089ad70
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010f7a9:	ff 45 e4             	incl   -0x1c(%ebp)
f010f7ac:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010f7b0:	0f 8e 97 fe ff ff    	jle    f010f64d <test_alloc_block_FF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_FF(3*Mega);
f010f7b6:	83 ec 0c             	sub    $0xc,%esp
f010f7b9:	68 00 00 30 00       	push   $0x300000
f010f7be:	e8 4c 30 02 00       	call   f013280f <alloc_block_FF>
f010f7c3:	83 c4 10             	add    $0x10,%esp
f010f7c6:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a block instead no existing free blocks with the given size.");
f010f7c9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f7cd:	74 17                	je     f010f7e6 <test_alloc_block_FF+0x22c>
f010f7cf:	83 ec 04             	sub    $0x4,%esp
f010f7d2:	68 4c 87 13 f0       	push   $0xf013874c
f010f7d7:	68 15 01 00 00       	push   $0x115
f010f7dc:	68 94 82 13 f0       	push   $0xf0138294
f010f7e1:	e8 1f 0a ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f7e6:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f010f7eb:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f7ee:	75 13                	jne    f010f803 <test_alloc_block_FF+0x249>
f010f7f0:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f010f7f5:	83 f8 08             	cmp    $0x8,%eax
f010f7f8:	75 09                	jne    f010f803 <test_alloc_block_FF+0x249>
f010f7fa:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f010f7ff:	85 c0                	test   %eax,%eax
f010f801:	74 17                	je     f010f81a <test_alloc_block_FF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010f803:	83 ec 04             	sub    $0x4,%esp
f010f806:	68 c0 87 13 f0       	push   $0xf01387c0
f010f80b:	68 19 01 00 00       	push   $0x119
f010f810:	68 94 82 13 f0       	push   $0xf0138294
f010f815:	e8 eb 09 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(9*kilo);
f010f81a:	83 ec 0c             	sub    $0xc,%esp
f010f81d:	68 00 24 00 00       	push   $0x2400
f010f822:	e8 e8 2f 02 00       	call   f013280f <alloc_block_FF>
f010f827:	83 c4 10             	add    $0x10,%esp
f010f82a:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 9*kilo || blockToAlloc->sva != 0x7000)
f010f82d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f831:	74 1a                	je     f010f84d <test_alloc_block_FF+0x293>
f010f833:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f836:	8b 40 0c             	mov    0xc(%eax),%eax
f010f839:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010f83e:	75 0d                	jne    f010f84d <test_alloc_block_FF+0x293>
f010f840:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f843:	8b 40 08             	mov    0x8(%eax),%eax
f010f846:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010f84b:	74 17                	je     f010f864 <test_alloc_block_FF+0x2aa>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010f84d:	83 ec 04             	sub    $0x4,%esp
f010f850:	68 38 88 13 f0       	push   $0xf0138838
f010f855:	68 21 01 00 00       	push   $0x121
f010f85a:	68 94 82 13 f0       	push   $0xf0138294
f010f85f:	e8 a1 09 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f864:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f010f869:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f86c:	75 13                	jne    f010f881 <test_alloc_block_FF+0x2c7>
f010f86e:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f010f873:	83 f8 07             	cmp    $0x7,%eax
f010f876:	75 09                	jne    f010f881 <test_alloc_block_FF+0x2c7>
f010f878:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f010f87d:	85 c0                	test   %eax,%eax
f010f87f:	74 17                	je     f010f898 <test_alloc_block_FF+0x2de>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f881:	83 ec 04             	sub    $0x4,%esp
f010f884:	68 7c 88 13 f0       	push   $0xf013887c
f010f889:	68 25 01 00 00       	push   $0x125
f010f88e:	68 94 82 13 f0       	push   $0xf0138294
f010f893:	e8 6d 09 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010f898:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f89f:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_FF-1;
f010f8a2:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010f8a9:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010f8b0:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f8b7:	83 ec 0c             	sub    $0xc,%esp
f010f8ba:	ff 75 d8             	pushl  -0x28(%ebp)
f010f8bd:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f8c3:	50                   	push   %eax
f010f8c4:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f8c7:	50                   	push   %eax
f010f8c8:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f8cb:	50                   	push   %eax
f010f8cc:	68 64 ad 89 f0       	push   $0xf089ad64
f010f8d1:	e8 5b 1c 00 00       	call   f0111531 <check_list_data>
f010f8d6:	83 c4 20             	add    $0x20,%esp
f010f8d9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010f8dc:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f8e0:	74 17                	je     f010f8f9 <test_alloc_block_FF+0x33f>
f010f8e2:	83 ec 04             	sub    $0x4,%esp
f010f8e5:	68 e0 88 13 f0       	push   $0xf01388e0
f010f8ea:	68 2d 01 00 00       	push   $0x12d
f010f8ef:	68 94 82 13 f0       	push   $0xf0138294
f010f8f4:	e8 0c 09 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010f8f9:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f8ff:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f902:	74 17                	je     f010f91b <test_alloc_block_FF+0x361>
f010f904:	83 ec 04             	sub    $0x4,%esp
f010f907:	68 2c 89 13 f0       	push   $0xf013892c
f010f90c:	68 2e 01 00 00       	push   $0x12e
f010f911:	68 94 82 13 f0       	push   $0xf0138294
f010f916:	e8 ea 08 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(1*Mega);
f010f91b:	83 ec 0c             	sub    $0xc,%esp
f010f91e:	68 00 00 10 00       	push   $0x100000
f010f923:	e8 e7 2e 02 00       	call   f013280f <alloc_block_FF>
f010f928:	83 c4 10             	add    $0x10,%esp
f010f92b:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010f92e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f932:	74 1a                	je     f010f94e <test_alloc_block_FF+0x394>
f010f934:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f937:	8b 40 0c             	mov    0xc(%eax),%eax
f010f93a:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010f93f:	75 0d                	jne    f010f94e <test_alloc_block_FF+0x394>
f010f941:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f944:	8b 40 08             	mov    0x8(%eax),%eax
f010f947:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010f94c:	74 17                	je     f010f965 <test_alloc_block_FF+0x3ab>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010f94e:	83 ec 04             	sub    $0x4,%esp
f010f951:	68 38 88 13 f0       	push   $0xf0138838
f010f956:	68 36 01 00 00       	push   $0x136
f010f95b:	68 94 82 13 f0       	push   $0xf0138294
f010f960:	e8 a0 08 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f965:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f010f96a:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f96d:	4a                   	dec    %edx
f010f96e:	39 d0                	cmp    %edx,%eax
f010f970:	75 13                	jne    f010f985 <test_alloc_block_FF+0x3cb>
f010f972:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f010f977:	83 f8 07             	cmp    $0x7,%eax
f010f97a:	75 09                	jne    f010f985 <test_alloc_block_FF+0x3cb>
f010f97c:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f010f981:	85 c0                	test   %eax,%eax
f010f983:	74 17                	je     f010f99c <test_alloc_block_FF+0x3e2>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f985:	83 ec 04             	sub    $0x4,%esp
f010f988:	68 7c 88 13 f0       	push   $0xf013887c
f010f98d:	68 3a 01 00 00       	push   $0x13a
f010f992:	68 94 82 13 f0       	push   $0xf0138294
f010f997:	e8 69 08 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f99c:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f9a3:	00 00 00 
	actualSize = numOfFreeBlocks_FF-1;
f010f9a6:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010f9ad:	c7 45 c8 00 a4 11 00 	movl   $0x11a400,-0x38(%ebp)
	BlocksSizes[5] = 1*Mega;
f010f9b4:	c7 45 a8 00 00 10 00 	movl   $0x100000,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f9bb:	83 ec 0c             	sub    $0xc,%esp
f010f9be:	ff 75 d8             	pushl  -0x28(%ebp)
f010f9c1:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f9c7:	50                   	push   %eax
f010f9c8:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f9cb:	50                   	push   %eax
f010f9cc:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f9cf:	50                   	push   %eax
f010f9d0:	68 64 ad 89 f0       	push   $0xf089ad64
f010f9d5:	e8 57 1b 00 00       	call   f0111531 <check_list_data>
f010f9da:	83 c4 20             	add    $0x20,%esp
f010f9dd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010f9e0:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f9e4:	74 17                	je     f010f9fd <test_alloc_block_FF+0x443>
f010f9e6:	83 ec 04             	sub    $0x4,%esp
f010f9e9:	68 e0 88 13 f0       	push   $0xf01388e0
f010f9ee:	68 42 01 00 00       	push   $0x142
f010f9f3:	68 94 82 13 f0       	push   $0xf0138294
f010f9f8:	e8 08 08 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010f9fd:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010fa03:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fa06:	74 17                	je     f010fa1f <test_alloc_block_FF+0x465>
f010fa08:	83 ec 04             	sub    $0x4,%esp
f010fa0b:	68 2c 89 13 f0       	push   $0xf013892c
f010fa10:	68 43 01 00 00       	push   $0x143
f010fa15:	68 94 82 13 f0       	push   $0xf0138294
f010fa1a:	e8 e6 07 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_FF completed successfully.\n");
f010fa1f:	83 ec 0c             	sub    $0xc,%esp
f010fa22:	68 78 89 13 f0       	push   $0xf0138978
f010fa27:	e8 e2 12 ff ff       	call   f0100d0e <cprintf>
f010fa2c:	83 c4 10             	add    $0x10,%esp
}
f010fa2f:	90                   	nop
f010fa30:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010fa33:	5b                   	pop    %ebx
f010fa34:	5e                   	pop    %esi
f010fa35:	5f                   	pop    %edi
f010fa36:	5d                   	pop    %ebp
f010fa37:	c3                   	ret    

f010fa38 <test_alloc_block_BF>:

void test_alloc_block_BF()
{
f010fa38:	55                   	push   %ebp
f010fa39:	89 e5                	mov    %esp,%ebp
f010fa3b:	57                   	push   %edi
f010fa3c:	56                   	push   %esi
f010fa3d:	53                   	push   %ebx
f010fa3e:	81 ec cc 00 00 00    	sub    $0xcc,%esp
	uint32 numOfBlocks = 10;
f010fa44:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010fa4b:	83 ec 0c             	sub    $0xc,%esp
f010fa4e:	ff 75 e0             	pushl  -0x20(%ebp)
f010fa51:	e8 f7 29 02 00       	call   f013244d <initialize_MemBlocksList>
f010fa56:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010fa59:	c7 05 c8 ac 89 f0 00 	movl   $0x0,0xf089acc8
f010fa60:	00 00 00 
f010fa63:	c7 05 cc ac 89 f0 00 	movl   $0x0,0xf089accc
f010fa6a:	00 00 00 
f010fa6d:	c7 05 d4 ac 89 f0 00 	movl   $0x0,0xf089acd4
f010fa74:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_BF 7
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
f010fa77:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010fa7a:	bb f4 8b 13 f0       	mov    $0xf0138bf4,%ebx
f010fa7f:	ba 07 00 00 00       	mov    $0x7,%edx
f010fa84:	89 c7                	mov    %eax,%edi
f010fa86:	89 de                	mov    %ebx,%esi
f010fa88:	89 d1                	mov    %edx,%ecx
f010fa8a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;
f010fa8c:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010fa8f:	bb 10 8c 13 f0       	mov    $0xf0138c10,%ebx
f010fa94:	ba 07 00 00 00       	mov    $0x7,%edx
f010fa99:	89 c7                	mov    %eax,%edi
f010fa9b:	89 de                	mov    %ebx,%esi
f010fa9d:	89 d1                	mov    %edx,%ecx
f010fa9f:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010faa1:	c7 05 64 ad 89 f0 00 	movl   $0x0,0xf089ad64
f010faa8:	00 00 00 
f010faab:	c7 05 68 ad 89 f0 00 	movl   $0x0,0xf089ad68
f010fab2:	00 00 00 
f010fab5:	c7 05 70 ad 89 f0 00 	movl   $0x0,0xf089ad70
f010fabc:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010fabf:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010fac6:	e9 5f 01 00 00       	jmp    f010fc2a <test_alloc_block_BF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010facb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010face:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f010fad2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fad5:	c1 e2 04             	shl    $0x4,%edx
f010fad8:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010fadb:	01 da                	add    %ebx,%edx
f010fadd:	81 ea b4 00 00 00    	sub    $0xb4,%edx
f010fae3:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010fae5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fae8:	8b 44 85 9c          	mov    -0x64(%ebp,%eax,4),%eax
f010faec:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010faef:	c1 e2 04             	shl    $0x4,%edx
f010faf2:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010faf5:	01 f2                	add    %esi,%edx
f010faf7:	81 ea b0 00 00 00    	sub    $0xb0,%edx
f010fafd:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010faff:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010fb03:	0f 85 92 00 00 00    	jne    f010fb9b <test_alloc_block_BF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010fb09:	a1 64 ad 89 f0       	mov    0xf089ad64,%eax
f010fb0e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fb11:	c1 e2 04             	shl    $0x4,%edx
f010fb14:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010fb17:	01 fa                	add    %edi,%edx
f010fb19:	81 ea bc 00 00 00    	sub    $0xbc,%edx
f010fb1f:	89 02                	mov    %eax,(%edx)
f010fb21:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fb24:	c1 e0 04             	shl    $0x4,%eax
f010fb27:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010fb2a:	01 d8                	add    %ebx,%eax
f010fb2c:	2d bc 00 00 00       	sub    $0xbc,%eax
f010fb31:	8b 00                	mov    (%eax),%eax
f010fb33:	85 c0                	test   %eax,%eax
f010fb35:	74 18                	je     f010fb4f <test_alloc_block_BF+0x117>
f010fb37:	a1 64 ad 89 f0       	mov    0xf089ad64,%eax
f010fb3c:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010fb42:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010fb45:	c1 e1 04             	shl    $0x4,%ecx
f010fb48:	01 ca                	add    %ecx,%edx
f010fb4a:	89 50 04             	mov    %edx,0x4(%eax)
f010fb4d:	eb 13                	jmp    f010fb62 <test_alloc_block_BF+0x12a>
f010fb4f:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010fb55:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fb58:	c1 e2 04             	shl    $0x4,%edx
f010fb5b:	01 d0                	add    %edx,%eax
f010fb5d:	a3 68 ad 89 f0       	mov    %eax,0xf089ad68
f010fb62:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010fb68:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fb6b:	c1 e2 04             	shl    $0x4,%edx
f010fb6e:	01 d0                	add    %edx,%eax
f010fb70:	a3 64 ad 89 f0       	mov    %eax,0xf089ad64
f010fb75:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fb78:	c1 e0 04             	shl    $0x4,%eax
f010fb7b:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010fb7e:	01 f0                	add    %esi,%eax
f010fb80:	2d b8 00 00 00       	sub    $0xb8,%eax
f010fb85:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010fb8b:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f010fb90:	40                   	inc    %eax
f010fb91:	a3 70 ad 89 f0       	mov    %eax,0xf089ad70
f010fb96:	e9 8c 00 00 00       	jmp    f010fc27 <test_alloc_block_BF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010fb9b:	a1 68 ad 89 f0       	mov    0xf089ad68,%eax
f010fba0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fba3:	c1 e2 04             	shl    $0x4,%edx
f010fba6:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010fba9:	01 fa                	add    %edi,%edx
f010fbab:	81 ea b8 00 00 00    	sub    $0xb8,%edx
f010fbb1:	89 02                	mov    %eax,(%edx)
f010fbb3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fbb6:	c1 e0 04             	shl    $0x4,%eax
f010fbb9:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010fbbc:	01 d8                	add    %ebx,%eax
f010fbbe:	2d b8 00 00 00       	sub    $0xb8,%eax
f010fbc3:	8b 00                	mov    (%eax),%eax
f010fbc5:	85 c0                	test   %eax,%eax
f010fbc7:	74 17                	je     f010fbe0 <test_alloc_block_BF+0x1a8>
f010fbc9:	a1 68 ad 89 f0       	mov    0xf089ad68,%eax
f010fbce:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010fbd4:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010fbd7:	c1 e1 04             	shl    $0x4,%ecx
f010fbda:	01 ca                	add    %ecx,%edx
f010fbdc:	89 10                	mov    %edx,(%eax)
f010fbde:	eb 13                	jmp    f010fbf3 <test_alloc_block_BF+0x1bb>
f010fbe0:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010fbe6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fbe9:	c1 e2 04             	shl    $0x4,%edx
f010fbec:	01 d0                	add    %edx,%eax
f010fbee:	a3 64 ad 89 f0       	mov    %eax,0xf089ad64
f010fbf3:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010fbf9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fbfc:	c1 e2 04             	shl    $0x4,%edx
f010fbff:	01 d0                	add    %edx,%eax
f010fc01:	a3 68 ad 89 f0       	mov    %eax,0xf089ad68
f010fc06:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fc09:	c1 e0 04             	shl    $0x4,%eax
f010fc0c:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010fc0f:	01 f0                	add    %esi,%eax
f010fc11:	2d bc 00 00 00       	sub    $0xbc,%eax
f010fc16:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010fc1c:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f010fc21:	40                   	inc    %eax
f010fc22:	a3 70 ad 89 f0       	mov    %eax,0xf089ad70
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010fc27:	ff 45 e4             	incl   -0x1c(%ebp)
f010fc2a:	83 7d e4 06          	cmpl   $0x6,-0x1c(%ebp)
f010fc2e:	0f 8e 97 fe ff ff    	jle    f010facb <test_alloc_block_BF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_BF(4*Mega);
f010fc34:	83 ec 0c             	sub    $0xc,%esp
f010fc37:	68 00 00 40 00       	push   $0x400000
f010fc3c:	e8 9b 2d 02 00       	call   f01329dc <alloc_block_BF>
f010fc41:	83 c4 10             	add    $0x10,%esp
f010fc44:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a block instead no existing free blocks with the given size.");
f010fc47:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fc4b:	74 17                	je     f010fc64 <test_alloc_block_BF+0x22c>
f010fc4d:	83 ec 04             	sub    $0x4,%esp
f010fc50:	68 00 8a 13 f0       	push   $0xf0138a00
f010fc55:	68 66 01 00 00       	push   $0x166
f010fc5a:	68 94 82 13 f0       	push   $0xf0138294
f010fc5f:	e8 a1 05 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fc64:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f010fc69:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fc6c:	75 13                	jne    f010fc81 <test_alloc_block_BF+0x249>
f010fc6e:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f010fc73:	83 f8 07             	cmp    $0x7,%eax
f010fc76:	75 09                	jne    f010fc81 <test_alloc_block_BF+0x249>
f010fc78:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f010fc7d:	85 c0                	test   %eax,%eax
f010fc7f:	74 17                	je     f010fc98 <test_alloc_block_BF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010fc81:	83 ec 04             	sub    $0x4,%esp
f010fc84:	68 c0 87 13 f0       	push   $0xf01387c0
f010fc89:	68 6a 01 00 00       	push   $0x16a
f010fc8e:	68 94 82 13 f0       	push   $0xf0138294
f010fc93:	e8 6d 05 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (NOT THE FIRST BLOCK FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010fc98:	83 ec 0c             	sub    $0xc,%esp
f010fc9b:	68 00 00 10 00       	push   $0x100000
f010fca0:	e8 37 2d 02 00       	call   f01329dc <alloc_block_BF>
f010fca5:	83 c4 10             	add    $0x10,%esp
f010fca8:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x21B400)
f010fcab:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fcaf:	74 1a                	je     f010fccb <test_alloc_block_BF+0x293>
f010fcb1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fcb4:	8b 40 0c             	mov    0xc(%eax),%eax
f010fcb7:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010fcbc:	75 0d                	jne    f010fccb <test_alloc_block_BF+0x293>
f010fcbe:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fcc1:	8b 40 08             	mov    0x8(%eax),%eax
f010fcc4:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010fcc9:	74 17                	je     f010fce2 <test_alloc_block_BF+0x2aa>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010fccb:	83 ec 04             	sub    $0x4,%esp
f010fcce:	68 74 8a 13 f0       	push   $0xf0138a74
f010fcd3:	68 72 01 00 00       	push   $0x172
f010fcd8:	68 94 82 13 f0       	push   $0xf0138294
f010fcdd:	e8 23 05 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fce2:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f010fce7:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fcea:	75 13                	jne    f010fcff <test_alloc_block_BF+0x2c7>
f010fcec:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f010fcf1:	83 f8 06             	cmp    $0x6,%eax
f010fcf4:	75 09                	jne    f010fcff <test_alloc_block_BF+0x2c7>
f010fcf6:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f010fcfb:	85 c0                	test   %eax,%eax
f010fcfd:	74 17                	je     f010fd16 <test_alloc_block_BF+0x2de>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fcff:	83 ec 04             	sub    $0x4,%esp
f010fd02:	68 b8 8a 13 f0       	push   $0xf0138ab8
f010fd07:	68 76 01 00 00       	push   $0x176
f010fd0c:	68 94 82 13 f0       	push   $0xf0138294
f010fd11:	e8 ef 04 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010fd16:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010fd1d:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_BF-1;
f010fd20:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0;
f010fd27:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	BlocksSizes[6] = 0;
f010fd2e:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fd35:	83 ec 0c             	sub    $0xc,%esp
f010fd38:	ff 75 d8             	pushl  -0x28(%ebp)
f010fd3b:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010fd41:	50                   	push   %eax
f010fd42:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010fd45:	50                   	push   %eax
f010fd46:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010fd49:	50                   	push   %eax
f010fd4a:	68 64 ad 89 f0       	push   $0xf089ad64
f010fd4f:	e8 dd 17 00 00       	call   f0111531 <check_list_data>
f010fd54:	83 c4 20             	add    $0x20,%esp
f010fd57:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010fd5a:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fd5e:	74 17                	je     f010fd77 <test_alloc_block_BF+0x33f>
f010fd60:	83 ec 04             	sub    $0x4,%esp
f010fd63:	68 1c 8b 13 f0       	push   $0xf0138b1c
f010fd68:	68 7e 01 00 00       	push   $0x17e
f010fd6d:	68 94 82 13 f0       	push   $0xf0138294
f010fd72:	e8 8e 04 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010fd77:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010fd7d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fd80:	74 17                	je     f010fd99 <test_alloc_block_BF+0x361>
f010fd82:	83 ec 04             	sub    $0x4,%esp
f010fd85:	68 68 8b 13 f0       	push   $0xf0138b68
f010fd8a:	68 7f 01 00 00       	push   $0x17f
f010fd8f:	68 94 82 13 f0       	push   $0xf0138294
f010fd94:	e8 6c 04 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of any existing free block (ONLY ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010fd99:	83 ec 0c             	sub    $0xc,%esp
f010fd9c:	68 00 00 10 00       	push   $0x100000
f010fda1:	e8 36 2c 02 00       	call   f01329dc <alloc_block_BF>
f010fda6:	83 c4 10             	add    $0x10,%esp
f010fda9:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010fdac:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fdb0:	74 1a                	je     f010fdcc <test_alloc_block_BF+0x394>
f010fdb2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fdb5:	8b 40 0c             	mov    0xc(%eax),%eax
f010fdb8:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010fdbd:	75 0d                	jne    f010fdcc <test_alloc_block_BF+0x394>
f010fdbf:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fdc2:	8b 40 08             	mov    0x8(%eax),%eax
f010fdc5:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010fdca:	74 17                	je     f010fde3 <test_alloc_block_BF+0x3ab>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010fdcc:	83 ec 04             	sub    $0x4,%esp
f010fdcf:	68 74 8a 13 f0       	push   $0xf0138a74
f010fdd4:	68 87 01 00 00       	push   $0x187
f010fdd9:	68 94 82 13 f0       	push   $0xf0138294
f010fdde:	e8 22 04 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fde3:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f010fde8:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010fdeb:	4a                   	dec    %edx
f010fdec:	39 d0                	cmp    %edx,%eax
f010fdee:	75 13                	jne    f010fe03 <test_alloc_block_BF+0x3cb>
f010fdf0:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f010fdf5:	83 f8 06             	cmp    $0x6,%eax
f010fdf8:	75 09                	jne    f010fe03 <test_alloc_block_BF+0x3cb>
f010fdfa:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f010fdff:	85 c0                	test   %eax,%eax
f010fe01:	74 17                	je     f010fe1a <test_alloc_block_BF+0x3e2>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fe03:	83 ec 04             	sub    $0x4,%esp
f010fe06:	68 b8 8a 13 f0       	push   $0xf0138ab8
f010fe0b:	68 8b 01 00 00       	push   $0x18b
f010fe10:	68 94 82 13 f0       	push   $0xf0138294
f010fe15:	e8 eb 03 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010fe1a:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010fe21:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010fe24:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010fe2b:	c7 45 cc 00 a4 11 00 	movl   $0x11a400,-0x34(%ebp)
	BlocksSizes[5] = 1*Mega;
f010fe32:	c7 45 b0 00 00 10 00 	movl   $0x100000,-0x50(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fe39:	83 ec 0c             	sub    $0xc,%esp
f010fe3c:	ff 75 d8             	pushl  -0x28(%ebp)
f010fe3f:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010fe45:	50                   	push   %eax
f010fe46:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010fe49:	50                   	push   %eax
f010fe4a:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010fe4d:	50                   	push   %eax
f010fe4e:	68 64 ad 89 f0       	push   $0xf089ad64
f010fe53:	e8 d9 16 00 00       	call   f0111531 <check_list_data>
f010fe58:	83 c4 20             	add    $0x20,%esp
f010fe5b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010fe5e:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fe62:	74 17                	je     f010fe7b <test_alloc_block_BF+0x443>
f010fe64:	83 ec 04             	sub    $0x4,%esp
f010fe67:	68 1c 8b 13 f0       	push   $0xf0138b1c
f010fe6c:	68 93 01 00 00       	push   $0x193
f010fe71:	68 94 82 13 f0       	push   $0xf0138294
f010fe76:	e8 8a 03 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010fe7b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010fe81:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fe84:	74 17                	je     f010fe9d <test_alloc_block_BF+0x465>
f010fe86:	83 ec 04             	sub    $0x4,%esp
f010fe89:	68 68 8b 13 f0       	push   $0xf0138b68
f010fe8e:	68 94 01 00 00       	push   $0x194
f010fe93:	68 94 82 13 f0       	push   $0xf0138294
f010fe98:	e8 68 03 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (MORE THAN ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(3*kilo);
f010fe9d:	83 ec 0c             	sub    $0xc,%esp
f010fea0:	68 00 0c 00 00       	push   $0xc00
f010fea5:	e8 32 2b 02 00       	call   f01329dc <alloc_block_BF>
f010feaa:	83 c4 10             	add    $0x10,%esp
f010fead:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x19000)
f010feb0:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010feb4:	74 1a                	je     f010fed0 <test_alloc_block_BF+0x498>
f010feb6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010feb9:	8b 40 0c             	mov    0xc(%eax),%eax
f010febc:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010fec1:	75 0d                	jne    f010fed0 <test_alloc_block_BF+0x498>
f010fec3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fec6:	8b 40 08             	mov    0x8(%eax),%eax
f010fec9:	3d 00 90 01 00       	cmp    $0x19000,%eax
f010fece:	74 17                	je     f010fee7 <test_alloc_block_BF+0x4af>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010fed0:	83 ec 04             	sub    $0x4,%esp
f010fed3:	68 74 8a 13 f0       	push   $0xf0138a74
f010fed8:	68 9c 01 00 00       	push   $0x19c
f010fedd:	68 94 82 13 f0       	push   $0xf0138294
f010fee2:	e8 1e 03 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fee7:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f010feec:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010feef:	83 ea 02             	sub    $0x2,%edx
f010fef2:	39 d0                	cmp    %edx,%eax
f010fef4:	75 13                	jne    f010ff09 <test_alloc_block_BF+0x4d1>
f010fef6:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f010fefb:	83 f8 06             	cmp    $0x6,%eax
f010fefe:	75 09                	jne    f010ff09 <test_alloc_block_BF+0x4d1>
f010ff00:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f010ff05:	85 c0                	test   %eax,%eax
f010ff07:	74 17                	je     f010ff20 <test_alloc_block_BF+0x4e8>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010ff09:	83 ec 04             	sub    $0x4,%esp
f010ff0c:	68 b8 8a 13 f0       	push   $0xf0138ab8
f010ff11:	68 a0 01 00 00       	push   $0x1a0
f010ff16:	68 94 82 13 f0       	push   $0xf0138294
f010ff1b:	e8 e5 02 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010ff20:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010ff27:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010ff2a:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[4] = 0x19C00;  //100KB + 3KB
f010ff31:	c7 45 c8 00 9c 01 00 	movl   $0x19c00,-0x38(%ebp)
	BlocksSizes[4] = 1*kilo;
f010ff38:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010ff3f:	83 ec 0c             	sub    $0xc,%esp
f010ff42:	ff 75 d8             	pushl  -0x28(%ebp)
f010ff45:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010ff4b:	50                   	push   %eax
f010ff4c:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010ff4f:	50                   	push   %eax
f010ff50:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010ff53:	50                   	push   %eax
f010ff54:	68 64 ad 89 f0       	push   $0xf089ad64
f010ff59:	e8 d3 15 00 00       	call   f0111531 <check_list_data>
f010ff5e:	83 c4 20             	add    $0x20,%esp
f010ff61:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010ff64:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010ff68:	74 17                	je     f010ff81 <test_alloc_block_BF+0x549>
f010ff6a:	83 ec 04             	sub    $0x4,%esp
f010ff6d:	68 1c 8b 13 f0       	push   $0xf0138b1c
f010ff72:	68 a8 01 00 00       	push   $0x1a8
f010ff77:	68 94 82 13 f0       	push   $0xf0138294
f010ff7c:	e8 84 02 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010ff81:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010ff87:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ff8a:	74 17                	je     f010ffa3 <test_alloc_block_BF+0x56b>
f010ff8c:	83 ec 04             	sub    $0x4,%esp
f010ff8f:	68 68 8b 13 f0       	push   $0xf0138b68
f010ff94:	68 a9 01 00 00       	push   $0x1a9
f010ff99:	68 94 82 13 f0       	push   $0xf0138294
f010ff9e:	e8 62 02 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 5: Try to allocate a block @ the head of the free block list */
	blockToAlloc = alloc_block_BF(2*kilo);
f010ffa3:	83 ec 0c             	sub    $0xc,%esp
f010ffa6:	68 00 08 00 00       	push   $0x800
f010ffab:	e8 2c 2a 02 00       	call   f01329dc <alloc_block_BF>
f010ffb0:	83 c4 10             	add    $0x10,%esp
f010ffb3:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*kilo || blockToAlloc->sva != 0x0)
f010ffb6:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ffba:	74 17                	je     f010ffd3 <test_alloc_block_BF+0x59b>
f010ffbc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ffbf:	8b 40 0c             	mov    0xc(%eax),%eax
f010ffc2:	3d 00 08 00 00       	cmp    $0x800,%eax
f010ffc7:	75 0a                	jne    f010ffd3 <test_alloc_block_BF+0x59b>
f010ffc9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ffcc:	8b 40 08             	mov    0x8(%eax),%eax
f010ffcf:	85 c0                	test   %eax,%eax
f010ffd1:	74 17                	je     f010ffea <test_alloc_block_BF+0x5b2>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010ffd3:	83 ec 04             	sub    $0x4,%esp
f010ffd6:	68 74 8a 13 f0       	push   $0xf0138a74
f010ffdb:	68 b1 01 00 00       	push   $0x1b1
f010ffe0:	68 94 82 13 f0       	push   $0xf0138294
f010ffe5:	e8 1b 02 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ffea:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f010ffef:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010fff2:	83 ea 02             	sub    $0x2,%edx
f010fff5:	39 d0                	cmp    %edx,%eax
f010fff7:	75 13                	jne    f011000c <test_alloc_block_BF+0x5d4>
f010fff9:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f010fffe:	83 f8 05             	cmp    $0x5,%eax
f0110001:	75 09                	jne    f011000c <test_alloc_block_BF+0x5d4>
f0110003:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f0110008:	85 c0                	test   %eax,%eax
f011000a:	74 17                	je     f0110023 <test_alloc_block_BF+0x5eb>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f011000c:	83 ec 04             	sub    $0x4,%esp
f011000f:	68 b8 8a 13 f0       	push   $0xf0138ab8
f0110014:	68 b5 01 00 00       	push   $0x1b5
f0110019:	68 94 82 13 f0       	push   $0xf0138294
f011001e:	e8 e2 01 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f0110023:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f011002a:	00 00 00 
	actualSize = numOfFreeBlocks_BF-2;
f011002d:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0x0;
f0110034:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
	BlocksSizes[0] = 0;
f011003b:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f0110042:	83 ec 0c             	sub    $0xc,%esp
f0110045:	ff 75 d8             	pushl  -0x28(%ebp)
f0110048:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f011004e:	50                   	push   %eax
f011004f:	8d 45 9c             	lea    -0x64(%ebp),%eax
f0110052:	50                   	push   %eax
f0110053:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0110056:	50                   	push   %eax
f0110057:	68 64 ad 89 f0       	push   $0xf089ad64
f011005c:	e8 d0 14 00 00       	call   f0111531 <check_list_data>
f0110061:	83 c4 20             	add    $0x20,%esp
f0110064:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f0110067:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f011006b:	74 17                	je     f0110084 <test_alloc_block_BF+0x64c>
f011006d:	83 ec 04             	sub    $0x4,%esp
f0110070:	68 1c 8b 13 f0       	push   $0xf0138b1c
f0110075:	68 bd 01 00 00       	push   $0x1bd
f011007a:	68 94 82 13 f0       	push   $0xf0138294
f011007f:	e8 81 01 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f0110084:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011008a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011008d:	74 17                	je     f01100a6 <test_alloc_block_BF+0x66e>
f011008f:	83 ec 04             	sub    $0x4,%esp
f0110092:	68 68 8b 13 f0       	push   $0xf0138b68
f0110097:	68 be 01 00 00       	push   $0x1be
f011009c:	68 94 82 13 f0       	push   $0xf0138294
f01100a1:	e8 5f 01 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_BF completed successfully.\n");
f01100a6:	83 ec 0c             	sub    $0xc,%esp
f01100a9:	68 b4 8b 13 f0       	push   $0xf0138bb4
f01100ae:	e8 5b 0c ff ff       	call   f0100d0e <cprintf>
f01100b3:	83 c4 10             	add    $0x10,%esp
}
f01100b6:	90                   	nop
f01100b7:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01100ba:	5b                   	pop    %ebx
f01100bb:	5e                   	pop    %esi
f01100bc:	5f                   	pop    %edi
f01100bd:	5d                   	pop    %ebp
f01100be:	c3                   	ret    

f01100bf <test_alloc_block_NF>:

void test_alloc_block_NF()
{
f01100bf:	55                   	push   %ebp
f01100c0:	89 e5                	mov    %esp,%ebp
f01100c2:	57                   	push   %edi
f01100c3:	56                   	push   %esi
f01100c4:	53                   	push   %ebx
f01100c5:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f01100cb:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f01100d2:	83 ec 0c             	sub    $0xc,%esp
f01100d5:	ff 75 e0             	pushl  -0x20(%ebp)
f01100d8:	e8 70 23 02 00       	call   f013244d <initialize_MemBlocksList>
f01100dd:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f01100e0:	c7 05 c8 ac 89 f0 00 	movl   $0x0,0xf089acc8
f01100e7:	00 00 00 
f01100ea:	c7 05 cc ac 89 f0 00 	movl   $0x0,0xf089accc
f01100f1:	00 00 00 
f01100f4:	c7 05 d4 ac 89 f0 00 	movl   $0x0,0xf089acd4
f01100fb:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_NF 8
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f01100fe:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0110101:	bb c0 89 13 f0       	mov    $0xf01389c0,%ebx
f0110106:	ba 08 00 00 00       	mov    $0x8,%edx
f011010b:	89 c7                	mov    %eax,%edi
f011010d:	89 de                	mov    %ebx,%esi
f011010f:	89 d1                	mov    %edx,%ecx
f0110111:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;
f0110113:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110116:	bb 20 8e 13 f0       	mov    $0xf0138e20,%ebx
f011011b:	ba 08 00 00 00       	mov    $0x8,%edx
f0110120:	89 c7                	mov    %eax,%edi
f0110122:	89 de                	mov    %ebx,%esi
f0110124:	89 d1                	mov    %edx,%ecx
f0110126:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f0110128:	c7 05 64 ad 89 f0 00 	movl   $0x0,0xf089ad64
f011012f:	00 00 00 
f0110132:	c7 05 68 ad 89 f0 00 	movl   $0x0,0xf089ad68
f0110139:	00 00 00 
f011013c:	c7 05 70 ad 89 f0 00 	movl   $0x0,0xf089ad70
f0110143:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f0110146:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f011014d:	e9 5f 01 00 00       	jmp    f01102b1 <test_alloc_block_NF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f0110152:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110155:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f0110159:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011015c:	c1 e2 04             	shl    $0x4,%edx
f011015f:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f0110162:	01 da                	add    %ebx,%edx
f0110164:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f011016a:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f011016c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011016f:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f0110173:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0110176:	c1 e2 04             	shl    $0x4,%edx
f0110179:	8d 75 e8             	lea    -0x18(%ebp),%esi
f011017c:	01 f2                	add    %esi,%edx
f011017e:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f0110184:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f0110186:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f011018a:	0f 85 92 00 00 00    	jne    f0110222 <test_alloc_block_NF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f0110190:	a1 64 ad 89 f0       	mov    0xf089ad64,%eax
f0110195:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0110198:	c1 e2 04             	shl    $0x4,%edx
f011019b:	8d 7d e8             	lea    -0x18(%ebp),%edi
f011019e:	01 fa                	add    %edi,%edx
f01101a0:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f01101a6:	89 02                	mov    %eax,(%edx)
f01101a8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01101ab:	c1 e0 04             	shl    $0x4,%eax
f01101ae:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f01101b1:	01 d8                	add    %ebx,%eax
f01101b3:	2d d4 00 00 00       	sub    $0xd4,%eax
f01101b8:	8b 00                	mov    (%eax),%eax
f01101ba:	85 c0                	test   %eax,%eax
f01101bc:	74 18                	je     f01101d6 <test_alloc_block_NF+0x117>
f01101be:	a1 64 ad 89 f0       	mov    0xf089ad64,%eax
f01101c3:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f01101c9:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f01101cc:	c1 e1 04             	shl    $0x4,%ecx
f01101cf:	01 ca                	add    %ecx,%edx
f01101d1:	89 50 04             	mov    %edx,0x4(%eax)
f01101d4:	eb 13                	jmp    f01101e9 <test_alloc_block_NF+0x12a>
f01101d6:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f01101dc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01101df:	c1 e2 04             	shl    $0x4,%edx
f01101e2:	01 d0                	add    %edx,%eax
f01101e4:	a3 68 ad 89 f0       	mov    %eax,0xf089ad68
f01101e9:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f01101ef:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01101f2:	c1 e2 04             	shl    $0x4,%edx
f01101f5:	01 d0                	add    %edx,%eax
f01101f7:	a3 64 ad 89 f0       	mov    %eax,0xf089ad64
f01101fc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01101ff:	c1 e0 04             	shl    $0x4,%eax
f0110202:	8d 75 e8             	lea    -0x18(%ebp),%esi
f0110205:	01 f0                	add    %esi,%eax
f0110207:	2d d0 00 00 00       	sub    $0xd0,%eax
f011020c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0110212:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f0110217:	40                   	inc    %eax
f0110218:	a3 70 ad 89 f0       	mov    %eax,0xf089ad70
f011021d:	e9 8c 00 00 00       	jmp    f01102ae <test_alloc_block_NF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f0110222:	a1 68 ad 89 f0       	mov    0xf089ad68,%eax
f0110227:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011022a:	c1 e2 04             	shl    $0x4,%edx
f011022d:	8d 7d e8             	lea    -0x18(%ebp),%edi
f0110230:	01 fa                	add    %edi,%edx
f0110232:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f0110238:	89 02                	mov    %eax,(%edx)
f011023a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011023d:	c1 e0 04             	shl    $0x4,%eax
f0110240:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f0110243:	01 d8                	add    %ebx,%eax
f0110245:	2d d0 00 00 00       	sub    $0xd0,%eax
f011024a:	8b 00                	mov    (%eax),%eax
f011024c:	85 c0                	test   %eax,%eax
f011024e:	74 17                	je     f0110267 <test_alloc_block_NF+0x1a8>
f0110250:	a1 68 ad 89 f0       	mov    0xf089ad68,%eax
f0110255:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f011025b:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f011025e:	c1 e1 04             	shl    $0x4,%ecx
f0110261:	01 ca                	add    %ecx,%edx
f0110263:	89 10                	mov    %edx,(%eax)
f0110265:	eb 13                	jmp    f011027a <test_alloc_block_NF+0x1bb>
f0110267:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f011026d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0110270:	c1 e2 04             	shl    $0x4,%edx
f0110273:	01 d0                	add    %edx,%eax
f0110275:	a3 64 ad 89 f0       	mov    %eax,0xf089ad64
f011027a:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f0110280:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0110283:	c1 e2 04             	shl    $0x4,%edx
f0110286:	01 d0                	add    %edx,%eax
f0110288:	a3 68 ad 89 f0       	mov    %eax,0xf089ad68
f011028d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110290:	c1 e0 04             	shl    $0x4,%eax
f0110293:	8d 75 e8             	lea    -0x18(%ebp),%esi
f0110296:	01 f0                	add    %esi,%eax
f0110298:	2d d4 00 00 00       	sub    $0xd4,%eax
f011029d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01102a3:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f01102a8:	40                   	inc    %eax
f01102a9:	a3 70 ad 89 f0       	mov    %eax,0xf089ad70
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f01102ae:	ff 45 e4             	incl   -0x1c(%ebp)
f01102b1:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f01102b5:	0f 8e 97 fe ff ff    	jle    f0110152 <test_alloc_block_NF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*NF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_NF(10*Mega);
f01102bb:	83 ec 0c             	sub    $0xc,%esp
f01102be:	68 00 00 a0 00       	push   $0xa00000
f01102c3:	e8 25 29 02 00       	call   f0132bed <alloc_block_NF>
f01102c8:	83 c4 10             	add    $0x10,%esp
f01102cb:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a block instead no existing free blocks with the given size.");
f01102ce:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01102d2:	74 17                	je     f01102eb <test_alloc_block_NF+0x22c>
f01102d4:	83 ec 04             	sub    $0x4,%esp
f01102d7:	68 2c 8c 13 f0       	push   $0xf0138c2c
f01102dc:	68 e1 01 00 00       	push   $0x1e1
f01102e1:	68 94 82 13 f0       	push   $0xf0138294
f01102e6:	e8 1a ff fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f01102eb:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f01102f0:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01102f3:	75 13                	jne    f0110308 <test_alloc_block_NF+0x249>
f01102f5:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f01102fa:	83 f8 08             	cmp    $0x8,%eax
f01102fd:	75 09                	jne    f0110308 <test_alloc_block_NF+0x249>
f01102ff:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f0110304:	85 c0                	test   %eax,%eax
f0110306:	74 17                	je     f011031f <test_alloc_block_NF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f0110308:	83 ec 04             	sub    $0x4,%esp
f011030b:	68 c0 87 13 f0       	push   $0xf01387c0
f0110310:	68 e5 01 00 00       	push   $0x1e5
f0110315:	68 94 82 13 f0       	push   $0xf0138294
f011031a:	e8 e6 fe fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (STARTING from 0)*/
	blockToAlloc = alloc_block_NF(10*kilo);
f011031f:	83 ec 0c             	sub    $0xc,%esp
f0110322:	68 00 28 00 00       	push   $0x2800
f0110327:	e8 c1 28 02 00       	call   f0132bed <alloc_block_NF>
f011032c:	83 c4 10             	add    $0x10,%esp
f011032f:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 10*kilo || blockToAlloc->sva != 0x7000)
f0110332:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0110336:	74 1a                	je     f0110352 <test_alloc_block_NF+0x293>
f0110338:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011033b:	8b 40 0c             	mov    0xc(%eax),%eax
f011033e:	3d 00 28 00 00       	cmp    $0x2800,%eax
f0110343:	75 0d                	jne    f0110352 <test_alloc_block_NF+0x293>
f0110345:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110348:	8b 40 08             	mov    0x8(%eax),%eax
f011034b:	3d 00 70 00 00       	cmp    $0x7000,%eax
f0110350:	74 17                	je     f0110369 <test_alloc_block_NF+0x2aa>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f0110352:	83 ec 04             	sub    $0x4,%esp
f0110355:	68 a0 8c 13 f0       	push   $0xf0138ca0
f011035a:	68 ed 01 00 00       	push   $0x1ed
f011035f:	68 94 82 13 f0       	push   $0xf0138294
f0110364:	e8 9c fe fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0110369:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f011036e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0110371:	75 13                	jne    f0110386 <test_alloc_block_NF+0x2c7>
f0110373:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f0110378:	83 f8 07             	cmp    $0x7,%eax
f011037b:	75 09                	jne    f0110386 <test_alloc_block_NF+0x2c7>
f011037d:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f0110382:	85 c0                	test   %eax,%eax
f0110384:	74 17                	je     f011039d <test_alloc_block_NF+0x2de>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110386:	83 ec 04             	sub    $0x4,%esp
f0110389:	68 e4 8c 13 f0       	push   $0xf0138ce4
f011038e:	68 f1 01 00 00       	push   $0x1f1
f0110393:	68 94 82 13 f0       	push   $0xf0138294
f0110398:	e8 68 fe fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f011039d:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f01103a4:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_NF-1;
f01103a7:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f01103ae:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f01103b5:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f01103bc:	83 ec 0c             	sub    $0xc,%esp
f01103bf:	ff 75 d8             	pushl  -0x28(%ebp)
f01103c2:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01103c8:	50                   	push   %eax
f01103c9:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01103cc:	50                   	push   %eax
f01103cd:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01103d0:	50                   	push   %eax
f01103d1:	68 64 ad 89 f0       	push   $0xf089ad64
f01103d6:	e8 56 11 00 00       	call   f0111531 <check_list_data>
f01103db:	83 c4 20             	add    $0x20,%esp
f01103de:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01103e1:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01103e5:	74 17                	je     f01103fe <test_alloc_block_NF+0x33f>
f01103e7:	83 ec 04             	sub    $0x4,%esp
f01103ea:	68 48 8d 13 f0       	push   $0xf0138d48
f01103ef:	68 f9 01 00 00       	push   $0x1f9
f01103f4:	68 94 82 13 f0       	push   $0xf0138294
f01103f9:	e8 07 fe fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f01103fe:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0110404:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110407:	74 17                	je     f0110420 <test_alloc_block_NF+0x361>
f0110409:	83 ec 04             	sub    $0x4,%esp
f011040c:	68 94 8d 13 f0       	push   $0xf0138d94
f0110411:	68 fa 01 00 00       	push   $0x1fa
f0110416:	68 94 82 13 f0       	push   $0xf0138294
f011041b:	e8 e5 fd fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the one existing free blocks (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(2*Mega);
f0110420:	83 ec 0c             	sub    $0xc,%esp
f0110423:	68 00 00 20 00       	push   $0x200000
f0110428:	e8 c0 27 02 00       	call   f0132bed <alloc_block_NF>
f011042d:	83 c4 10             	add    $0x10,%esp
f0110430:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*Mega || blockToAlloc->sva != 0x1A400)
f0110433:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0110437:	74 1a                	je     f0110453 <test_alloc_block_NF+0x394>
f0110439:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011043c:	8b 40 0c             	mov    0xc(%eax),%eax
f011043f:	3d 00 00 20 00       	cmp    $0x200000,%eax
f0110444:	75 0d                	jne    f0110453 <test_alloc_block_NF+0x394>
f0110446:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110449:	8b 40 08             	mov    0x8(%eax),%eax
f011044c:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f0110451:	74 17                	je     f011046a <test_alloc_block_NF+0x3ab>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f0110453:	83 ec 04             	sub    $0x4,%esp
f0110456:	68 a0 8c 13 f0       	push   $0xf0138ca0
f011045b:	68 03 02 00 00       	push   $0x203
f0110460:	68 94 82 13 f0       	push   $0xf0138294
f0110465:	e8 9b fd fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f011046a:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f011046f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0110472:	75 13                	jne    f0110487 <test_alloc_block_NF+0x3c8>
f0110474:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f0110479:	83 f8 06             	cmp    $0x6,%eax
f011047c:	75 09                	jne    f0110487 <test_alloc_block_NF+0x3c8>
f011047e:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f0110483:	85 c0                	test   %eax,%eax
f0110485:	74 17                	je     f011049e <test_alloc_block_NF+0x3df>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110487:	83 ec 04             	sub    $0x4,%esp
f011048a:	68 e4 8c 13 f0       	push   $0xf0138ce4
f011048f:	68 07 02 00 00       	push   $0x207
f0110494:	68 94 82 13 f0       	push   $0xf0138294
f0110499:	e8 67 fd fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f011049e:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f01104a5:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f01104a8:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0;
f01104af:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	BlocksSizes[5] = 0;
f01104b6:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f01104bd:	83 ec 0c             	sub    $0xc,%esp
f01104c0:	ff 75 d8             	pushl  -0x28(%ebp)
f01104c3:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01104c9:	50                   	push   %eax
f01104ca:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01104cd:	50                   	push   %eax
f01104ce:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01104d1:	50                   	push   %eax
f01104d2:	68 64 ad 89 f0       	push   $0xf089ad64
f01104d7:	e8 55 10 00 00       	call   f0111531 <check_list_data>
f01104dc:	83 c4 20             	add    $0x20,%esp
f01104df:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01104e2:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01104e6:	74 17                	je     f01104ff <test_alloc_block_NF+0x440>
f01104e8:	83 ec 04             	sub    $0x4,%esp
f01104eb:	68 48 8d 13 f0       	push   $0xf0138d48
f01104f0:	68 0f 02 00 00       	push   $0x20f
f01104f5:	68 94 82 13 f0       	push   $0xf0138294
f01104fa:	e8 06 fd fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f01104ff:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0110505:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110508:	74 17                	je     f0110521 <test_alloc_block_NF+0x462>
f011050a:	83 ec 04             	sub    $0x4,%esp
f011050d:	68 94 8d 13 f0       	push   $0xf0138d94
f0110512:	68 10 02 00 00       	push   $0x210
f0110517:	68 94 82 13 f0       	push   $0xf0138294
f011051c:	e8 e4 fc fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(512*kilo);
f0110521:	83 ec 0c             	sub    $0xc,%esp
f0110524:	68 00 00 08 00       	push   $0x80000
f0110529:	e8 bf 26 02 00       	call   f0132bed <alloc_block_NF>
f011052e:	83 c4 10             	add    $0x10,%esp
f0110531:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 512*kilo || blockToAlloc->sva != 0x21B400)
f0110534:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0110538:	74 1a                	je     f0110554 <test_alloc_block_NF+0x495>
f011053a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011053d:	8b 40 0c             	mov    0xc(%eax),%eax
f0110540:	3d 00 00 08 00       	cmp    $0x80000,%eax
f0110545:	75 0d                	jne    f0110554 <test_alloc_block_NF+0x495>
f0110547:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011054a:	8b 40 08             	mov    0x8(%eax),%eax
f011054d:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f0110552:	74 17                	je     f011056b <test_alloc_block_NF+0x4ac>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f0110554:	83 ec 04             	sub    $0x4,%esp
f0110557:	68 a0 8c 13 f0       	push   $0xf0138ca0
f011055c:	68 19 02 00 00       	push   $0x219
f0110561:	68 94 82 13 f0       	push   $0xf0138294
f0110566:	e8 9a fc fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f011056b:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f0110570:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0110573:	4a                   	dec    %edx
f0110574:	39 d0                	cmp    %edx,%eax
f0110576:	75 13                	jne    f011058b <test_alloc_block_NF+0x4cc>
f0110578:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f011057d:	83 f8 06             	cmp    $0x6,%eax
f0110580:	75 09                	jne    f011058b <test_alloc_block_NF+0x4cc>
f0110582:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f0110587:	85 c0                	test   %eax,%eax
f0110589:	74 17                	je     f01105a2 <test_alloc_block_NF+0x4e3>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f011058b:	83 ec 04             	sub    $0x4,%esp
f011058e:	68 e4 8c 13 f0       	push   $0xf0138ce4
f0110593:	68 1d 02 00 00       	push   $0x21d
f0110598:	68 94 82 13 f0       	push   $0xf0138294
f011059d:	e8 63 fc fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f01105a2:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f01105a9:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f01105ac:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo;
f01105b3:	c7 45 cc 00 b4 29 00 	movl   $0x29b400,-0x34(%ebp)
	BlocksSizes[6] = 512*kilo;
f01105ba:	c7 45 ac 00 00 08 00 	movl   $0x80000,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f01105c1:	83 ec 0c             	sub    $0xc,%esp
f01105c4:	ff 75 d8             	pushl  -0x28(%ebp)
f01105c7:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01105cd:	50                   	push   %eax
f01105ce:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01105d1:	50                   	push   %eax
f01105d2:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01105d5:	50                   	push   %eax
f01105d6:	68 64 ad 89 f0       	push   $0xf089ad64
f01105db:	e8 51 0f 00 00       	call   f0111531 <check_list_data>
f01105e0:	83 c4 20             	add    $0x20,%esp
f01105e3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01105e6:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01105ea:	74 17                	je     f0110603 <test_alloc_block_NF+0x544>
f01105ec:	83 ec 04             	sub    $0x4,%esp
f01105ef:	68 48 8d 13 f0       	push   $0xf0138d48
f01105f4:	68 25 02 00 00       	push   $0x225
f01105f9:	68 94 82 13 f0       	push   $0xf0138294
f01105fe:	e8 02 fc fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f0110603:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0110609:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011060c:	74 17                	je     f0110625 <test_alloc_block_NF+0x566>
f011060e:	83 ec 04             	sub    $0x4,%esp
f0110611:	68 94 8d 13 f0       	push   $0xf0138d94
f0110616:	68 26 02 00 00       	push   $0x226
f011061b:	68 94 82 13 f0       	push   $0xf0138294
f0110620:	e8 e0 fb fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 5: Try to allocate a block with a size smaller than the size of any existing free block (One from the updated blocks before in the free list)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(511*kilo);
f0110625:	83 ec 0c             	sub    $0xc,%esp
f0110628:	68 00 fc 07 00       	push   $0x7fc00
f011062d:	e8 bb 25 02 00       	call   f0132bed <alloc_block_NF>
f0110632:	83 c4 10             	add    $0x10,%esp
f0110635:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 511*kilo || blockToAlloc->sva != (0x21B400 + 512*kilo))
f0110638:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011063c:	74 1a                	je     f0110658 <test_alloc_block_NF+0x599>
f011063e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110641:	8b 40 0c             	mov    0xc(%eax),%eax
f0110644:	3d 00 fc 07 00       	cmp    $0x7fc00,%eax
f0110649:	75 0d                	jne    f0110658 <test_alloc_block_NF+0x599>
f011064b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011064e:	8b 40 08             	mov    0x8(%eax),%eax
f0110651:	3d 00 b4 29 00       	cmp    $0x29b400,%eax
f0110656:	74 17                	je     f011066f <test_alloc_block_NF+0x5b0>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f0110658:	83 ec 04             	sub    $0x4,%esp
f011065b:	68 a0 8c 13 f0       	push   $0xf0138ca0
f0110660:	68 2f 02 00 00       	push   $0x22f
f0110665:	68 94 82 13 f0       	push   $0xf0138294
f011066a:	e8 96 fb fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f011066f:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f0110674:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0110677:	83 ea 02             	sub    $0x2,%edx
f011067a:	39 d0                	cmp    %edx,%eax
f011067c:	75 13                	jne    f0110691 <test_alloc_block_NF+0x5d2>
f011067e:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f0110683:	83 f8 06             	cmp    $0x6,%eax
f0110686:	75 09                	jne    f0110691 <test_alloc_block_NF+0x5d2>
f0110688:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f011068d:	85 c0                	test   %eax,%eax
f011068f:	74 17                	je     f01106a8 <test_alloc_block_NF+0x5e9>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110691:	83 ec 04             	sub    $0x4,%esp
f0110694:	68 e4 8c 13 f0       	push   $0xf0138ce4
f0110699:	68 33 02 00 00       	push   $0x233
f011069e:	68 94 82 13 f0       	push   $0xf0138294
f01106a3:	e8 5d fb fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f01106a8:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f01106af:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f01106b2:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo + (511*kilo);
f01106b9:	c7 45 cc 00 b0 31 00 	movl   $0x31b000,-0x34(%ebp)
	BlocksSizes[6] = 1*kilo;
f01106c0:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f01106c7:	83 ec 0c             	sub    $0xc,%esp
f01106ca:	ff 75 d8             	pushl  -0x28(%ebp)
f01106cd:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01106d3:	50                   	push   %eax
f01106d4:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01106d7:	50                   	push   %eax
f01106d8:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01106db:	50                   	push   %eax
f01106dc:	68 64 ad 89 f0       	push   $0xf089ad64
f01106e1:	e8 4b 0e 00 00       	call   f0111531 <check_list_data>
f01106e6:	83 c4 20             	add    $0x20,%esp
f01106e9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01106ec:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01106f0:	74 17                	je     f0110709 <test_alloc_block_NF+0x64a>
f01106f2:	83 ec 04             	sub    $0x4,%esp
f01106f5:	68 48 8d 13 f0       	push   $0xf0138d48
f01106fa:	68 3b 02 00 00       	push   $0x23b
f01106ff:	68 94 82 13 f0       	push   $0xf0138294
f0110704:	e8 fc fa fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f0110709:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011070f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110712:	74 17                	je     f011072b <test_alloc_block_NF+0x66c>
f0110714:	83 ec 04             	sub    $0x4,%esp
f0110717:	68 94 8d 13 f0       	push   $0xf0138d94
f011071c:	68 3c 02 00 00       	push   $0x23c
f0110721:	68 94 82 13 f0       	push   $0xf0138294
f0110726:	e8 da fa fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 6: Try to allocate a block with a size smaller than ALL the NEXT existing blocks .. Shall start search from the start of the list*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(3*kilo);
f011072b:	83 ec 0c             	sub    $0xc,%esp
f011072e:	68 00 0c 00 00       	push   $0xc00
f0110733:	e8 b5 24 02 00       	call   f0132bed <alloc_block_NF>
f0110738:	83 c4 10             	add    $0x10,%esp
f011073b:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x0)
f011073e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0110742:	74 17                	je     f011075b <test_alloc_block_NF+0x69c>
f0110744:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110747:	8b 40 0c             	mov    0xc(%eax),%eax
f011074a:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f011074f:	75 0a                	jne    f011075b <test_alloc_block_NF+0x69c>
f0110751:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110754:	8b 40 08             	mov    0x8(%eax),%eax
f0110757:	85 c0                	test   %eax,%eax
f0110759:	74 17                	je     f0110772 <test_alloc_block_NF+0x6b3>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f011075b:	83 ec 04             	sub    $0x4,%esp
f011075e:	68 a0 8c 13 f0       	push   $0xf0138ca0
f0110763:	68 45 02 00 00       	push   $0x245
f0110768:	68 94 82 13 f0       	push   $0xf0138294
f011076d:	e8 93 fa fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0110772:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f0110777:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011077a:	83 ea 02             	sub    $0x2,%edx
f011077d:	39 d0                	cmp    %edx,%eax
f011077f:	75 13                	jne    f0110794 <test_alloc_block_NF+0x6d5>
f0110781:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f0110786:	83 f8 05             	cmp    $0x5,%eax
f0110789:	75 09                	jne    f0110794 <test_alloc_block_NF+0x6d5>
f011078b:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f0110790:	85 c0                	test   %eax,%eax
f0110792:	74 17                	je     f01107ab <test_alloc_block_NF+0x6ec>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110794:	83 ec 04             	sub    $0x4,%esp
f0110797:	68 e4 8c 13 f0       	push   $0xf0138ce4
f011079c:	68 49 02 00 00       	push   $0x249
f01107a1:	68 94 82 13 f0       	push   $0xf0138294
f01107a6:	e8 5a fa fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f01107ab:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f01107b2:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f01107b5:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0;
f01107bc:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	BlocksSizes[0] = 0;
f01107c3:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f01107ca:	83 ec 0c             	sub    $0xc,%esp
f01107cd:	ff 75 d8             	pushl  -0x28(%ebp)
f01107d0:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01107d6:	50                   	push   %eax
f01107d7:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01107da:	50                   	push   %eax
f01107db:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01107de:	50                   	push   %eax
f01107df:	68 64 ad 89 f0       	push   $0xf089ad64
f01107e4:	e8 48 0d 00 00       	call   f0111531 <check_list_data>
f01107e9:	83 c4 20             	add    $0x20,%esp
f01107ec:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01107ef:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01107f3:	74 17                	je     f011080c <test_alloc_block_NF+0x74d>
f01107f5:	83 ec 04             	sub    $0x4,%esp
f01107f8:	68 48 8d 13 f0       	push   $0xf0138d48
f01107fd:	68 51 02 00 00       	push   $0x251
f0110802:	68 94 82 13 f0       	push   $0xf0138294
f0110807:	e8 f9 f9 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f011080c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0110812:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110815:	74 17                	je     f011082e <test_alloc_block_NF+0x76f>
f0110817:	83 ec 04             	sub    $0x4,%esp
f011081a:	68 94 8d 13 f0       	push   $0xf0138d94
f011081f:	68 52 02 00 00       	push   $0x252
f0110824:	68 94 82 13 f0       	push   $0xf0138294
f0110829:	e8 d7 f9 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(1*kilo);
f011082e:	83 ec 0c             	sub    $0xc,%esp
f0110831:	68 00 04 00 00       	push   $0x400
f0110836:	e8 b2 23 02 00       	call   f0132bed <alloc_block_NF>
f011083b:	83 c4 10             	add    $0x10,%esp
f011083e:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*kilo || blockToAlloc->sva != 0x2000)
f0110841:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0110845:	74 1a                	je     f0110861 <test_alloc_block_NF+0x7a2>
f0110847:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011084a:	8b 40 0c             	mov    0xc(%eax),%eax
f011084d:	3d 00 04 00 00       	cmp    $0x400,%eax
f0110852:	75 0d                	jne    f0110861 <test_alloc_block_NF+0x7a2>
f0110854:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110857:	8b 40 08             	mov    0x8(%eax),%eax
f011085a:	3d 00 20 00 00       	cmp    $0x2000,%eax
f011085f:	74 17                	je     f0110878 <test_alloc_block_NF+0x7b9>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f0110861:	83 ec 04             	sub    $0x4,%esp
f0110864:	68 a0 8c 13 f0       	push   $0xf0138ca0
f0110869:	68 5b 02 00 00       	push   $0x25b
f011086e:	68 94 82 13 f0       	push   $0xf0138294
f0110873:	e8 8d f9 fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-3 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0110878:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f011087d:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0110880:	83 ea 03             	sub    $0x3,%edx
f0110883:	39 d0                	cmp    %edx,%eax
f0110885:	75 13                	jne    f011089a <test_alloc_block_NF+0x7db>
f0110887:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f011088c:	83 f8 05             	cmp    $0x5,%eax
f011088f:	75 09                	jne    f011089a <test_alloc_block_NF+0x7db>
f0110891:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f0110896:	85 c0                	test   %eax,%eax
f0110898:	74 17                	je     f01108b1 <test_alloc_block_NF+0x7f2>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f011089a:	83 ec 04             	sub    $0x4,%esp
f011089d:	68 e4 8c 13 f0       	push   $0xf0138ce4
f01108a2:	68 5f 02 00 00       	push   $0x25f
f01108a7:	68 94 82 13 f0       	push   $0xf0138294
f01108ac:	e8 54 f9 fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f01108b1:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f01108b8:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f01108bb:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[1] = 0x2000 + 1*kilo;
f01108c2:	c7 45 b8 00 24 00 00 	movl   $0x2400,-0x48(%ebp)
	BlocksSizes[1] = 7*kilo;
f01108c9:	c7 45 98 00 1c 00 00 	movl   $0x1c00,-0x68(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f01108d0:	83 ec 0c             	sub    $0xc,%esp
f01108d3:	ff 75 d8             	pushl  -0x28(%ebp)
f01108d6:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01108dc:	50                   	push   %eax
f01108dd:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01108e0:	50                   	push   %eax
f01108e1:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01108e4:	50                   	push   %eax
f01108e5:	68 64 ad 89 f0       	push   $0xf089ad64
f01108ea:	e8 42 0c 00 00       	call   f0111531 <check_list_data>
f01108ef:	83 c4 20             	add    $0x20,%esp
f01108f2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01108f5:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01108f9:	74 17                	je     f0110912 <test_alloc_block_NF+0x853>
f01108fb:	83 ec 04             	sub    $0x4,%esp
f01108fe:	68 48 8d 13 f0       	push   $0xf0138d48
f0110903:	68 67 02 00 00       	push   $0x267
f0110908:	68 94 82 13 f0       	push   $0xf0138294
f011090d:	e8 f3 f8 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f0110912:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0110918:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011091b:	74 17                	je     f0110934 <test_alloc_block_NF+0x875>
f011091d:	83 ec 04             	sub    $0x4,%esp
f0110920:	68 94 8d 13 f0       	push   $0xf0138d94
f0110925:	68 68 02 00 00       	push   $0x268
f011092a:	68 94 82 13 f0       	push   $0xf0138294
f011092f:	e8 d1 f8 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");
f0110934:	83 ec 0c             	sub    $0xc,%esp
f0110937:	68 e0 8d 13 f0       	push   $0xf0138de0
f011093c:	e8 cd 03 ff ff       	call   f0100d0e <cprintf>
f0110941:	83 c4 10             	add    $0x10,%esp

}
f0110944:	90                   	nop
f0110945:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0110948:	5b                   	pop    %ebx
f0110949:	5e                   	pop    %esi
f011094a:	5f                   	pop    %edi
f011094b:	5d                   	pop    %ebp
f011094c:	c3                   	ret    

f011094d <test_insert_sorted_with_merge_freeList>:

void test_insert_sorted_with_merge_freeList()
{
f011094d:	55                   	push   %ebp
f011094e:	89 e5                	mov    %esp,%ebp
f0110950:	57                   	push   %edi
f0110951:	81 ec 04 01 00 00    	sub    $0x104,%esp
	uint32 numOfBlocks = 10;
f0110957:	c7 45 f4 0a 00 00 00 	movl   $0xa,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f011095e:	83 ec 0c             	sub    $0xc,%esp
f0110961:	ff 75 f4             	pushl  -0xc(%ebp)
f0110964:	e8 e4 1a 02 00       	call   f013244d <initialize_MemBlocksList>
f0110969:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f011096c:	c7 05 c8 ac 89 f0 00 	movl   $0x0,0xf089acc8
f0110973:	00 00 00 
f0110976:	c7 05 cc ac 89 f0 00 	movl   $0x0,0xf089accc
f011097d:	00 00 00 
f0110980:	c7 05 d4 ac 89 f0 00 	movl   $0x0,0xf089acd4
f0110987:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f011098a:	c7 05 64 ad 89 f0 00 	movl   $0x0,0xf089ad64
f0110991:	00 00 00 
f0110994:	c7 05 68 ad 89 f0 00 	movl   $0x0,0xf089ad68
f011099b:	00 00 00 
f011099e:	c7 05 70 ad 89 f0 00 	movl   $0x0,0xf089ad70
f01109a5:	00 00 00 

	uint32 blocksToInsertSVAs[10]={0,0,0,0,0,0,0,0,0,0};
f01109a8:	8d 55 c0             	lea    -0x40(%ebp),%edx
f01109ab:	b9 0a 00 00 00       	mov    $0xa,%ecx
f01109b0:	b8 00 00 00 00       	mov    $0x0,%eax
f01109b5:	89 d7                	mov    %edx,%edi
f01109b7:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[10]={0,0,0,0,0,0,0,0,0,0};
f01109b9:	8d 55 98             	lea    -0x68(%ebp),%edx
f01109bc:	b9 0a 00 00 00       	mov    $0xa,%ecx
f01109c1:	b8 00 00 00 00       	mov    $0x0,%eax
f01109c6:	89 d7                	mov    %edx,%edi
f01109c8:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f01109ca:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	uint32 actualSize = 0;
f01109d1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	/*INSERT_SORTED_WITH MERGE Scenario 1: CASE 0 - Insert BLOCK_1 in the empty FreeMemBlocksList*/
	int idx_blocksToInsert = 3;
f01109d8:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo;
f01109df:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01109e2:	c7 44 85 c0 00 20 00 	movl   $0x2000,-0x40(%ebp,%eax,4)
f01109e9:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f01109ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01109ed:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f01109f4:	00 
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[idx_blocksToInsert];
f01109f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01109f8:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01109fc:	89 45 8c             	mov    %eax,-0x74(%ebp)
	blockToInsert1.size = blocksToInsertSizes[idx_blocksToInsert];
f01109ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110a02:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110a06:	89 45 90             	mov    %eax,-0x70(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert1);
f0110a09:	83 ec 0c             	sub    $0xc,%esp
f0110a0c:	8d 45 84             	lea    -0x7c(%ebp),%eax
f0110a0f:	50                   	push   %eax
f0110a10:	e8 a5 27 02 00       	call   f01331ba <insert_sorted_with_merge_freeList>
f0110a15:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 1)
f0110a18:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f0110a1d:	85 c0                	test   %eax,%eax
f0110a1f:	75 14                	jne    f0110a35 <test_insert_sorted_with_merge_freeList+0xe8>
f0110a21:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f0110a26:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110a29:	75 0a                	jne    f0110a35 <test_insert_sorted_with_merge_freeList+0xe8>
f0110a2b:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f0110a30:	83 f8 01             	cmp    $0x1,%eax
f0110a33:	74 17                	je     f0110a4c <test_insert_sorted_with_merge_freeList+0xff>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110a35:	83 ec 04             	sub    $0x4,%esp
f0110a38:	68 40 8e 13 f0       	push   $0xf0138e40
f0110a3d:	68 88 02 00 00       	push   $0x288
f0110a42:	68 94 82 13 f0       	push   $0xf0138294
f0110a47:	e8 b9 f7 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the free list content
	size = 0;
f0110a4c:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 1;
f0110a53:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110a5a:	83 ec 0c             	sub    $0xc,%esp
f0110a5d:	ff 75 f0             	pushl  -0x10(%ebp)
f0110a60:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110a63:	50                   	push   %eax
f0110a64:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110a67:	50                   	push   %eax
f0110a68:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110a6b:	50                   	push   %eax
f0110a6c:	68 64 ad 89 f0       	push   $0xf089ad64
f0110a71:	e8 bb 0a 00 00       	call   f0111531 <check_list_data>
f0110a76:	83 c4 20             	add    $0x20,%esp
f0110a79:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110a7c:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110a80:	74 17                	je     f0110a99 <test_insert_sorted_with_merge_freeList+0x14c>
f0110a82:	83 ec 04             	sub    $0x4,%esp
f0110a85:	68 ac 8e 13 f0       	push   $0xf0138eac
f0110a8a:	68 8e 02 00 00       	push   $0x28e
f0110a8f:	68 94 82 13 f0       	push   $0xf0138294
f0110a94:	e8 6c f7 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110a99:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110a9c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110a9f:	74 17                	je     f0110ab8 <test_insert_sorted_with_merge_freeList+0x16b>
f0110aa1:	83 ec 04             	sub    $0x4,%esp
f0110aa4:	68 00 8f 13 f0       	push   $0xf0138f00
f0110aa9:	68 8f 02 00 00       	push   $0x28f
f0110aae:	68 94 82 13 f0       	push   $0xf0138294
f0110ab3:	e8 4d f7 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 2: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE TAIL)*/
	idx_blocksToInsert = 7;
f0110ab8:	c7 45 ec 07 00 00 00 	movl   $0x7,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo;
f0110abf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ac2:	c7 44 85 c0 00 80 00 	movl   $0x8000,-0x40(%ebp,%eax,4)
f0110ac9:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 7*kilo;
f0110aca:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110acd:	c7 44 85 98 00 1c 00 	movl   $0x1c00,-0x68(%ebp,%eax,4)
f0110ad4:	00 
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110ad5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ad8:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110adc:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	blockToInsert2.size = blocksToInsertSizes[idx_blocksToInsert];
f0110ae2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ae5:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110ae9:	89 45 80             	mov    %eax,-0x80(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert2);
f0110aec:	83 ec 0c             	sub    $0xc,%esp
f0110aef:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0110af5:	50                   	push   %eax
f0110af6:	e8 bf 26 02 00       	call   f01331ba <insert_sorted_with_merge_freeList>
f0110afb:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 2)
f0110afe:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f0110b03:	85 c0                	test   %eax,%eax
f0110b05:	75 14                	jne    f0110b1b <test_insert_sorted_with_merge_freeList+0x1ce>
f0110b07:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f0110b0c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110b0f:	75 0a                	jne    f0110b1b <test_insert_sorted_with_merge_freeList+0x1ce>
f0110b11:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f0110b16:	83 f8 02             	cmp    $0x2,%eax
f0110b19:	74 17                	je     f0110b32 <test_insert_sorted_with_merge_freeList+0x1e5>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110b1b:	83 ec 04             	sub    $0x4,%esp
f0110b1e:	68 40 8e 13 f0       	push   $0xf0138e40
f0110b23:	68 9e 02 00 00       	push   $0x29e
f0110b28:	68 94 82 13 f0       	push   $0xf0138294
f0110b2d:	e8 d3 f6 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110b32:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 2;
f0110b39:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110b40:	83 ec 0c             	sub    $0xc,%esp
f0110b43:	ff 75 f0             	pushl  -0x10(%ebp)
f0110b46:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110b49:	50                   	push   %eax
f0110b4a:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110b4d:	50                   	push   %eax
f0110b4e:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110b51:	50                   	push   %eax
f0110b52:	68 64 ad 89 f0       	push   $0xf089ad64
f0110b57:	e8 d5 09 00 00       	call   f0111531 <check_list_data>
f0110b5c:	83 c4 20             	add    $0x20,%esp
f0110b5f:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110b62:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110b66:	74 17                	je     f0110b7f <test_insert_sorted_with_merge_freeList+0x232>
f0110b68:	83 ec 04             	sub    $0x4,%esp
f0110b6b:	68 ac 8e 13 f0       	push   $0xf0138eac
f0110b70:	68 a4 02 00 00       	push   $0x2a4
f0110b75:	68 94 82 13 f0       	push   $0xf0138294
f0110b7a:	e8 86 f6 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110b7f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110b82:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110b85:	74 17                	je     f0110b9e <test_insert_sorted_with_merge_freeList+0x251>
f0110b87:	83 ec 04             	sub    $0x4,%esp
f0110b8a:	68 00 8f 13 f0       	push   $0xf0138f00
f0110b8f:	68 a5 02 00 00       	push   $0x2a5
f0110b94:	68 94 82 13 f0       	push   $0xf0138294
f0110b99:	e8 67 f6 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 3: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE HEAD)*/
	idx_blocksToInsert = 1;
f0110b9e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 1*kilo;
f0110ba5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ba8:	c7 44 85 c0 00 04 00 	movl   $0x400,-0x40(%ebp,%eax,4)
f0110baf:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f0110bb0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110bb3:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f0110bba:	00 
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110bbb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110bbe:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110bc2:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
	blockToInsert3.size = blocksToInsertSizes[idx_blocksToInsert];
f0110bc8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110bcb:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110bcf:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert3);
f0110bd5:	83 ec 0c             	sub    $0xc,%esp
f0110bd8:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
f0110bde:	50                   	push   %eax
f0110bdf:	e8 d6 25 02 00       	call   f01331ba <insert_sorted_with_merge_freeList>
f0110be4:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f0110be7:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f0110bec:	85 c0                	test   %eax,%eax
f0110bee:	75 14                	jne    f0110c04 <test_insert_sorted_with_merge_freeList+0x2b7>
f0110bf0:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f0110bf5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110bf8:	75 0a                	jne    f0110c04 <test_insert_sorted_with_merge_freeList+0x2b7>
f0110bfa:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f0110bff:	83 f8 03             	cmp    $0x3,%eax
f0110c02:	74 17                	je     f0110c1b <test_insert_sorted_with_merge_freeList+0x2ce>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110c04:	83 ec 04             	sub    $0x4,%esp
f0110c07:	68 40 8e 13 f0       	push   $0xf0138e40
f0110c0c:	68 b4 02 00 00       	push   $0x2b4
f0110c11:	68 94 82 13 f0       	push   $0xf0138294
f0110c16:	e8 ea f5 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110c1b:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f0110c22:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110c29:	83 ec 0c             	sub    $0xc,%esp
f0110c2c:	ff 75 f0             	pushl  -0x10(%ebp)
f0110c2f:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110c32:	50                   	push   %eax
f0110c33:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110c36:	50                   	push   %eax
f0110c37:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110c3a:	50                   	push   %eax
f0110c3b:	68 64 ad 89 f0       	push   $0xf089ad64
f0110c40:	e8 ec 08 00 00       	call   f0111531 <check_list_data>
f0110c45:	83 c4 20             	add    $0x20,%esp
f0110c48:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110c4b:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110c4f:	74 17                	je     f0110c68 <test_insert_sorted_with_merge_freeList+0x31b>
f0110c51:	83 ec 04             	sub    $0x4,%esp
f0110c54:	68 ac 8e 13 f0       	push   $0xf0138eac
f0110c59:	68 ba 02 00 00       	push   $0x2ba
f0110c5e:	68 94 82 13 f0       	push   $0xf0138294
f0110c63:	e8 9d f5 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110c68:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110c6b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110c6e:	74 17                	je     f0110c87 <test_insert_sorted_with_merge_freeList+0x33a>
f0110c70:	83 ec 04             	sub    $0x4,%esp
f0110c73:	68 00 8f 13 f0       	push   $0xf0138f00
f0110c78:	68 bb 02 00 00       	push   $0x2bb
f0110c7d:	68 94 82 13 f0       	push   $0xf0138294
f0110c82:	e8 7e f5 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 4: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 6;
f0110c87:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 10*kilo;
f0110c8e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c91:	c7 44 85 c0 00 58 00 	movl   $0x5800,-0x40(%ebp,%eax,4)
f0110c98:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f0110c99:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c9c:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f0110ca3:	00 
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110ca4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ca7:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110cab:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
	blockToInsert4.size = blocksToInsertSizes[idx_blocksToInsert];
f0110cb1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110cb4:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110cb8:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert4);
f0110cbe:	83 ec 0c             	sub    $0xc,%esp
f0110cc1:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0110cc7:	50                   	push   %eax
f0110cc8:	e8 ed 24 02 00       	call   f01331ba <insert_sorted_with_merge_freeList>
f0110ccd:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110cd0:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f0110cd5:	85 c0                	test   %eax,%eax
f0110cd7:	75 14                	jne    f0110ced <test_insert_sorted_with_merge_freeList+0x3a0>
f0110cd9:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f0110cde:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110ce1:	75 0a                	jne    f0110ced <test_insert_sorted_with_merge_freeList+0x3a0>
f0110ce3:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f0110ce8:	83 f8 04             	cmp    $0x4,%eax
f0110ceb:	74 17                	je     f0110d04 <test_insert_sorted_with_merge_freeList+0x3b7>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110ced:	83 ec 04             	sub    $0x4,%esp
f0110cf0:	68 40 8e 13 f0       	push   $0xf0138e40
f0110cf5:	68 ca 02 00 00       	push   $0x2ca
f0110cfa:	68 94 82 13 f0       	push   $0xf0138294
f0110cff:	e8 01 f5 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110d04:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110d0b:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110d12:	83 ec 0c             	sub    $0xc,%esp
f0110d15:	ff 75 f0             	pushl  -0x10(%ebp)
f0110d18:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110d1b:	50                   	push   %eax
f0110d1c:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110d1f:	50                   	push   %eax
f0110d20:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110d23:	50                   	push   %eax
f0110d24:	68 64 ad 89 f0       	push   $0xf089ad64
f0110d29:	e8 03 08 00 00       	call   f0111531 <check_list_data>
f0110d2e:	83 c4 20             	add    $0x20,%esp
f0110d31:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110d34:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110d38:	74 17                	je     f0110d51 <test_insert_sorted_with_merge_freeList+0x404>
f0110d3a:	83 ec 04             	sub    $0x4,%esp
f0110d3d:	68 ac 8e 13 f0       	push   $0xf0138eac
f0110d42:	68 d0 02 00 00       	push   $0x2d0
f0110d47:	68 94 82 13 f0       	push   $0xf0138294
f0110d4c:	e8 b4 f4 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110d51:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110d54:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110d57:	74 17                	je     f0110d70 <test_insert_sorted_with_merge_freeList+0x423>
f0110d59:	83 ec 04             	sub    $0x4,%esp
f0110d5c:	68 00 8f 13 f0       	push   $0xf0138f00
f0110d61:	68 d1 02 00 00       	push   $0x2d1
f0110d66:	68 94 82 13 f0       	push   $0xf0138294
f0110d6b:	e8 95 f4 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 5: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (AT the tail)*/
	idx_blocksToInsert = 8;
f0110d70:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo + 7*kilo;
f0110d77:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d7a:	c7 44 85 c0 00 9c 00 	movl   $0x9c00,-0x40(%ebp,%eax,4)
f0110d81:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 3*kilo;
f0110d82:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d85:	c7 44 85 98 00 0c 00 	movl   $0xc00,-0x68(%ebp,%eax,4)
f0110d8c:	00 
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110d8d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d90:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110d94:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
	blockToInsert5.size = blocksToInsertSizes[idx_blocksToInsert];
f0110d9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d9d:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110da1:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert5);
f0110da7:	83 ec 0c             	sub    $0xc,%esp
f0110daa:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
f0110db0:	50                   	push   %eax
f0110db1:	e8 04 24 02 00       	call   f01331ba <insert_sorted_with_merge_freeList>
f0110db6:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 1 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110db9:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f0110dbe:	85 c0                	test   %eax,%eax
f0110dc0:	75 17                	jne    f0110dd9 <test_insert_sorted_with_merge_freeList+0x48c>
f0110dc2:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f0110dc7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110dca:	42                   	inc    %edx
f0110dcb:	39 d0                	cmp    %edx,%eax
f0110dcd:	75 0a                	jne    f0110dd9 <test_insert_sorted_with_merge_freeList+0x48c>
f0110dcf:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f0110dd4:	83 f8 04             	cmp    $0x4,%eax
f0110dd7:	74 17                	je     f0110df0 <test_insert_sorted_with_merge_freeList+0x4a3>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110dd9:	83 ec 04             	sub    $0x4,%esp
f0110ddc:	68 40 8e 13 f0       	push   $0xf0138e40
f0110de1:	68 e3 02 00 00       	push   $0x2e3
f0110de6:	68 94 82 13 f0       	push   $0xf0138294
f0110deb:	e8 15 f4 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110df0:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110df7:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f0110dfe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110e01:	8d 50 ff             	lea    -0x1(%eax),%edx
f0110e04:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110e07:	48                   	dec    %eax
f0110e08:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110e0c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110e0f:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110e13:	01 c8                	add    %ecx,%eax
f0110e15:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110e19:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110e1c:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110e23:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110e24:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110e27:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110e2e:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110e2f:	83 ec 0c             	sub    $0xc,%esp
f0110e32:	ff 75 f0             	pushl  -0x10(%ebp)
f0110e35:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110e38:	50                   	push   %eax
f0110e39:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110e3c:	50                   	push   %eax
f0110e3d:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110e40:	50                   	push   %eax
f0110e41:	68 64 ad 89 f0       	push   $0xf089ad64
f0110e46:	e8 e6 06 00 00       	call   f0111531 <check_list_data>
f0110e4b:	83 c4 20             	add    $0x20,%esp
f0110e4e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110e51:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110e55:	74 17                	je     f0110e6e <test_insert_sorted_with_merge_freeList+0x521>
f0110e57:	83 ec 04             	sub    $0x4,%esp
f0110e5a:	68 ac 8e 13 f0       	push   $0xf0138eac
f0110e5f:	68 ec 02 00 00       	push   $0x2ec
f0110e64:	68 94 82 13 f0       	push   $0xf0138294
f0110e69:	e8 97 f3 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110e6e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110e71:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110e74:	74 17                	je     f0110e8d <test_insert_sorted_with_merge_freeList+0x540>
f0110e76:	83 ec 04             	sub    $0x4,%esp
f0110e79:	68 00 8f 13 f0       	push   $0xf0138f00
f0110e7e:	68 ed 02 00 00       	push   $0x2ed
f0110e83:	68 94 82 13 f0       	push   $0xf0138294
f0110e88:	e8 78 f3 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110e8d:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110e94:	83 ec 0c             	sub    $0xc,%esp
f0110e97:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110e9a:	50                   	push   %eax
f0110e9b:	e8 5d 07 00 00       	call   f01115fd <check_avaliable_list_data>
f0110ea0:	83 c4 10             	add    $0x10,%esp
f0110ea3:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110ea6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110ea9:	8d 50 01             	lea    0x1(%eax),%edx
f0110eac:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110eaf:	39 c2                	cmp    %eax,%edx
f0110eb1:	74 17                	je     f0110eca <test_insert_sorted_with_merge_freeList+0x57d>
f0110eb3:	83 ec 04             	sub    $0x4,%esp
f0110eb6:	68 54 8f 13 f0       	push   $0xf0138f54
f0110ebb:	68 f2 02 00 00       	push   $0x2f2
f0110ec0:	68 94 82 13 f0       	push   $0xf0138294
f0110ec5:	e8 3b f3 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110eca:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110ece:	74 17                	je     f0110ee7 <test_insert_sorted_with_merge_freeList+0x59a>
f0110ed0:	83 ec 04             	sub    $0x4,%esp
f0110ed3:	68 ac 8f 13 f0       	push   $0xf0138fac
f0110ed8:	68 f3 02 00 00       	push   $0x2f3
f0110edd:	68 94 82 13 f0       	push   $0xf0138294
f0110ee2:	e8 1e f3 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 6: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 4;
f0110ee7:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo;
f0110eee:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ef1:	c7 44 85 c0 00 30 00 	movl   $0x3000,-0x40(%ebp,%eax,4)
f0110ef8:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f0110ef9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110efc:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f0110f03:	00 
	struct MemBlock blockToInsert6;
	blockToInsert6.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110f04:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f07:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110f0b:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
	blockToInsert6.size = blocksToInsertSizes[idx_blocksToInsert];
f0110f11:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f14:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110f18:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert6);
f0110f1e:	83 ec 0c             	sub    $0xc,%esp
f0110f21:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0110f27:	50                   	push   %eax
f0110f28:	e8 8d 22 02 00       	call   f01331ba <insert_sorted_with_merge_freeList>
f0110f2d:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 2 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110f30:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f0110f35:	85 c0                	test   %eax,%eax
f0110f37:	75 19                	jne    f0110f52 <test_insert_sorted_with_merge_freeList+0x605>
f0110f39:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f0110f3e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110f41:	83 c2 02             	add    $0x2,%edx
f0110f44:	39 d0                	cmp    %edx,%eax
f0110f46:	75 0a                	jne    f0110f52 <test_insert_sorted_with_merge_freeList+0x605>
f0110f48:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f0110f4d:	83 f8 04             	cmp    $0x4,%eax
f0110f50:	74 17                	je     f0110f69 <test_insert_sorted_with_merge_freeList+0x61c>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110f52:	83 ec 04             	sub    $0x4,%esp
f0110f55:	68 40 8e 13 f0       	push   $0xf0138e40
f0110f5a:	68 05 03 00 00       	push   $0x305
f0110f5f:	68 94 82 13 f0       	push   $0xf0138294
f0110f64:	e8 9c f2 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110f69:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110f70:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f0110f77:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f7a:	8d 50 ff             	lea    -0x1(%eax),%edx
f0110f7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f80:	48                   	dec    %eax
f0110f81:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110f85:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f88:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110f8c:	01 c8                	add    %ecx,%eax
f0110f8e:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110f92:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f95:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110f9c:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110f9d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110fa0:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110fa7:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110fa8:	83 ec 0c             	sub    $0xc,%esp
f0110fab:	ff 75 f0             	pushl  -0x10(%ebp)
f0110fae:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110fb1:	50                   	push   %eax
f0110fb2:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110fb5:	50                   	push   %eax
f0110fb6:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110fb9:	50                   	push   %eax
f0110fba:	68 64 ad 89 f0       	push   $0xf089ad64
f0110fbf:	e8 6d 05 00 00       	call   f0111531 <check_list_data>
f0110fc4:	83 c4 20             	add    $0x20,%esp
f0110fc7:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110fca:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110fce:	74 17                	je     f0110fe7 <test_insert_sorted_with_merge_freeList+0x69a>
f0110fd0:	83 ec 04             	sub    $0x4,%esp
f0110fd3:	68 ac 8e 13 f0       	push   $0xf0138eac
f0110fd8:	68 0e 03 00 00       	push   $0x30e
f0110fdd:	68 94 82 13 f0       	push   $0xf0138294
f0110fe2:	e8 1e f2 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110fe7:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110fea:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110fed:	74 17                	je     f0111006 <test_insert_sorted_with_merge_freeList+0x6b9>
f0110fef:	83 ec 04             	sub    $0x4,%esp
f0110ff2:	68 00 8f 13 f0       	push   $0xf0138f00
f0110ff7:	68 0f 03 00 00       	push   $0x30f
f0110ffc:	68 94 82 13 f0       	push   $0xf0138294
f0111001:	e8 ff f1 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0111006:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f011100d:	83 ec 0c             	sub    $0xc,%esp
f0111010:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0111013:	50                   	push   %eax
f0111014:	e8 e4 05 00 00       	call   f01115fd <check_avaliable_list_data>
f0111019:	83 c4 10             	add    $0x10,%esp
f011101c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 2) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f011101f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111022:	8d 50 02             	lea    0x2(%eax),%edx
f0111025:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111028:	39 c2                	cmp    %eax,%edx
f011102a:	74 17                	je     f0111043 <test_insert_sorted_with_merge_freeList+0x6f6>
f011102c:	83 ec 04             	sub    $0x4,%esp
f011102f:	68 54 8f 13 f0       	push   $0xf0138f54
f0111034:	68 14 03 00 00       	push   $0x314
f0111039:	68 94 82 13 f0       	push   $0xf0138294
f011103e:	e8 c2 f1 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0111043:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111047:	74 17                	je     f0111060 <test_insert_sorted_with_merge_freeList+0x713>
f0111049:	83 ec 04             	sub    $0x4,%esp
f011104c:	68 ac 8f 13 f0       	push   $0xf0138fac
f0111051:	68 15 03 00 00       	push   $0x315
f0111056:	68 94 82 13 f0       	push   $0xf0138294
f011105b:	e8 a5 f1 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 7: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (AT the head)*/
	idx_blocksToInsert = 0;
f0111060:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0111067:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011106a:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0111071:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f0111072:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111075:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f011107c:	00 
	struct MemBlock blockToInsert7;
	blockToInsert7.sva = blocksToInsertSVAs[idx_blocksToInsert];
f011107d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111080:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0111084:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
	blockToInsert7.size = blocksToInsertSizes[idx_blocksToInsert];
f011108a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011108d:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0111091:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert7);
f0111097:	83 ec 0c             	sub    $0xc,%esp
f011109a:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01110a0:	50                   	push   %eax
f01110a1:	e8 14 21 02 00       	call   f01331ba <insert_sorted_with_merge_freeList>
f01110a6:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 3 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f01110a9:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f01110ae:	85 c0                	test   %eax,%eax
f01110b0:	75 19                	jne    f01110cb <test_insert_sorted_with_merge_freeList+0x77e>
f01110b2:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f01110b7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01110ba:	83 c2 03             	add    $0x3,%edx
f01110bd:	39 d0                	cmp    %edx,%eax
f01110bf:	75 0a                	jne    f01110cb <test_insert_sorted_with_merge_freeList+0x77e>
f01110c1:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f01110c6:	83 f8 04             	cmp    $0x4,%eax
f01110c9:	74 17                	je     f01110e2 <test_insert_sorted_with_merge_freeList+0x795>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01110cb:	83 ec 04             	sub    $0x4,%esp
f01110ce:	68 40 8e 13 f0       	push   $0xf0138e40
f01110d3:	68 28 03 00 00       	push   $0x328
f01110d8:	68 94 82 13 f0       	push   $0xf0138294
f01110dd:	e8 23 f1 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01110e2:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f01110e9:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f01110f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01110f3:	8d 50 01             	lea    0x1(%eax),%edx
f01110f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01110f9:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01110fd:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f0111101:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111104:	8d 50 01             	lea    0x1(%eax),%edx
f0111107:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011110a:	40                   	inc    %eax
f011110b:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f011110f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111112:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0111116:	01 c8                	add    %ecx,%eax
f0111118:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f011111c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011111f:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0111126:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0111127:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011112a:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0111131:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0111132:	83 ec 0c             	sub    $0xc,%esp
f0111135:	ff 75 f0             	pushl  -0x10(%ebp)
f0111138:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011113b:	50                   	push   %eax
f011113c:	8d 45 98             	lea    -0x68(%ebp),%eax
f011113f:	50                   	push   %eax
f0111140:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0111143:	50                   	push   %eax
f0111144:	68 64 ad 89 f0       	push   $0xf089ad64
f0111149:	e8 e3 03 00 00       	call   f0111531 <check_list_data>
f011114e:	83 c4 20             	add    $0x20,%esp
f0111151:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0111154:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111158:	74 17                	je     f0111171 <test_insert_sorted_with_merge_freeList+0x824>
f011115a:	83 ec 04             	sub    $0x4,%esp
f011115d:	68 ac 8e 13 f0       	push   $0xf0138eac
f0111162:	68 32 03 00 00       	push   $0x332
f0111167:	68 94 82 13 f0       	push   $0xf0138294
f011116c:	e8 94 f0 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0111171:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111174:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111177:	74 17                	je     f0111190 <test_insert_sorted_with_merge_freeList+0x843>
f0111179:	83 ec 04             	sub    $0x4,%esp
f011117c:	68 00 8f 13 f0       	push   $0xf0138f00
f0111181:	68 33 03 00 00       	push   $0x333
f0111186:	68 94 82 13 f0       	push   $0xf0138294
f011118b:	e8 75 f0 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0111190:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0111197:	83 ec 0c             	sub    $0xc,%esp
f011119a:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011119d:	50                   	push   %eax
f011119e:	e8 5a 04 00 00       	call   f01115fd <check_avaliable_list_data>
f01111a3:	83 c4 10             	add    $0x10,%esp
f01111a6:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 3) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f01111a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01111ac:	8d 50 03             	lea    0x3(%eax),%edx
f01111af:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01111b2:	39 c2                	cmp    %eax,%edx
f01111b4:	74 17                	je     f01111cd <test_insert_sorted_with_merge_freeList+0x880>
f01111b6:	83 ec 04             	sub    $0x4,%esp
f01111b9:	68 54 8f 13 f0       	push   $0xf0138f54
f01111be:	68 38 03 00 00       	push   $0x338
f01111c3:	68 94 82 13 f0       	push   $0xf0138294
f01111c8:	e8 38 f0 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f01111cd:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01111d1:	74 17                	je     f01111ea <test_insert_sorted_with_merge_freeList+0x89d>
f01111d3:	83 ec 04             	sub    $0x4,%esp
f01111d6:	68 ac 8f 13 f0       	push   $0xf0138fac
f01111db:	68 39 03 00 00       	push   $0x339
f01111e0:	68 94 82 13 f0       	push   $0xf0138294
f01111e5:	e8 1b f0 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 8: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 5;
f01111ea:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = (8*kilo + 4*kilo + 10*kilo) - (4*kilo);
f01111f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01111f4:	c7 44 85 c0 00 48 00 	movl   $0x4800,-0x40(%ebp,%eax,4)
f01111fb:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f01111fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01111ff:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f0111206:	00 
	struct MemBlock blockToInsert8;
	blockToInsert8.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0111207:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011120a:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f011120e:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
	blockToInsert8.size = blocksToInsertSizes[idx_blocksToInsert];
f0111214:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111217:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011121b:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert8);
f0111221:	83 ec 0c             	sub    $0xc,%esp
f0111224:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f011122a:	50                   	push   %eax
f011122b:	e8 8a 1f 02 00       	call   f01331ba <insert_sorted_with_merge_freeList>
f0111230:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 4 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0111233:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f0111238:	85 c0                	test   %eax,%eax
f011123a:	75 19                	jne    f0111255 <test_insert_sorted_with_merge_freeList+0x908>
f011123c:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f0111241:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111244:	83 c2 04             	add    $0x4,%edx
f0111247:	39 d0                	cmp    %edx,%eax
f0111249:	75 0a                	jne    f0111255 <test_insert_sorted_with_merge_freeList+0x908>
f011124b:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f0111250:	83 f8 04             	cmp    $0x4,%eax
f0111253:	74 17                	je     f011126c <test_insert_sorted_with_merge_freeList+0x91f>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0111255:	83 ec 04             	sub    $0x4,%esp
f0111258:	68 40 8e 13 f0       	push   $0xf0138e40
f011125d:	68 4c 03 00 00       	push   $0x34c
f0111262:	68 94 82 13 f0       	push   $0xf0138294
f0111267:	e8 99 ef fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f011126c:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0111273:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f011127a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011127d:	8d 50 01             	lea    0x1(%eax),%edx
f0111280:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111283:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0111287:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f011128b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011128e:	8d 50 01             	lea    0x1(%eax),%edx
f0111291:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111294:	40                   	inc    %eax
f0111295:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0111299:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011129c:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01112a0:	01 c8                	add    %ecx,%eax
f01112a2:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f01112a6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01112a9:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f01112b0:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f01112b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01112b4:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f01112bb:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f01112bc:	83 ec 0c             	sub    $0xc,%esp
f01112bf:	ff 75 f0             	pushl  -0x10(%ebp)
f01112c2:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01112c5:	50                   	push   %eax
f01112c6:	8d 45 98             	lea    -0x68(%ebp),%eax
f01112c9:	50                   	push   %eax
f01112ca:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01112cd:	50                   	push   %eax
f01112ce:	68 64 ad 89 f0       	push   $0xf089ad64
f01112d3:	e8 59 02 00 00       	call   f0111531 <check_list_data>
f01112d8:	83 c4 20             	add    $0x20,%esp
f01112db:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f01112de:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01112e2:	74 17                	je     f01112fb <test_insert_sorted_with_merge_freeList+0x9ae>
f01112e4:	83 ec 04             	sub    $0x4,%esp
f01112e7:	68 ac 8e 13 f0       	push   $0xf0138eac
f01112ec:	68 56 03 00 00       	push   $0x356
f01112f1:	68 94 82 13 f0       	push   $0xf0138294
f01112f6:	e8 0a ef fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f01112fb:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01112fe:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111301:	74 17                	je     f011131a <test_insert_sorted_with_merge_freeList+0x9cd>
f0111303:	83 ec 04             	sub    $0x4,%esp
f0111306:	68 00 8f 13 f0       	push   $0xf0138f00
f011130b:	68 57 03 00 00       	push   $0x357
f0111310:	68 94 82 13 f0       	push   $0xf0138294
f0111315:	e8 eb ee fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f011131a:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0111321:	83 ec 0c             	sub    $0xc,%esp
f0111324:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0111327:	50                   	push   %eax
f0111328:	e8 d0 02 00 00       	call   f01115fd <check_avaliable_list_data>
f011132d:	83 c4 10             	add    $0x10,%esp
f0111330:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 4) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0111333:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111336:	8d 50 04             	lea    0x4(%eax),%edx
f0111339:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011133c:	39 c2                	cmp    %eax,%edx
f011133e:	74 17                	je     f0111357 <test_insert_sorted_with_merge_freeList+0xa0a>
f0111340:	83 ec 04             	sub    $0x4,%esp
f0111343:	68 54 8f 13 f0       	push   $0xf0138f54
f0111348:	68 5c 03 00 00       	push   $0x35c
f011134d:	68 94 82 13 f0       	push   $0xf0138294
f0111352:	e8 ae ee fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0111357:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011135b:	74 17                	je     f0111374 <test_insert_sorted_with_merge_freeList+0xa27>
f011135d:	83 ec 04             	sub    $0x4,%esp
f0111360:	68 ac 8f 13 f0       	push   $0xf0138fac
f0111365:	68 5d 03 00 00       	push   $0x35d
f011136a:	68 94 82 13 f0       	push   $0xf0138294
f011136f:	e8 91 ee fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 9: CASE 4 - Merge with prev & next in the FreeMemBlocksList */
	idx_blocksToInsert = 2;
f0111374:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 2*kilo;
f011137b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011137e:	c7 44 85 c0 00 08 00 	movl   $0x800,-0x40(%ebp,%eax,4)
f0111385:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0x2000 - 2*kilo; //6144
f0111386:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111389:	c7 44 85 98 00 18 00 	movl   $0x1800,-0x68(%ebp,%eax,4)
f0111390:	00 
	struct MemBlock blockToInsert9;
	blockToInsert9.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0111391:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111394:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0111398:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
	blockToInsert9.size = blocksToInsertSizes[idx_blocksToInsert];
f011139e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01113a1:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01113a5:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)

	//printf("===>BEFORE\n");
	//show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert9);
f01113ab:	83 ec 0c             	sub    $0xc,%esp
f01113ae:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01113b4:	50                   	push   %eax
f01113b5:	e8 00 1e 02 00       	call   f01331ba <insert_sorted_with_merge_freeList>
f01113ba:	83 c4 10             	add    $0x10,%esp
	//show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 6 || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f01113bd:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f01113c2:	85 c0                	test   %eax,%eax
f01113c4:	75 19                	jne    f01113df <test_insert_sorted_with_merge_freeList+0xa92>
f01113c6:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f01113cb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01113ce:	83 c2 06             	add    $0x6,%edx
f01113d1:	39 d0                	cmp    %edx,%eax
f01113d3:	75 0a                	jne    f01113df <test_insert_sorted_with_merge_freeList+0xa92>
f01113d5:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f01113da:	83 f8 03             	cmp    $0x3,%eax
f01113dd:	74 17                	je     f01113f6 <test_insert_sorted_with_merge_freeList+0xaa9>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01113df:	83 ec 04             	sub    $0x4,%esp
f01113e2:	68 40 8e 13 f0       	push   $0xf0138e40
f01113e7:	68 70 03 00 00       	push   $0x370
f01113ec:	68 94 82 13 f0       	push   $0xf0138294
f01113f1:	e8 0f ee fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01113f6:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f01113fd:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert-1] = 0x0;
f0111404:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111407:	48                   	dec    %eax
f0111408:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f011140f:	00 
	blocksToInsertSizes[idx_blocksToInsert-1] = blocksToInsertSizes[idx_blocksToInsert-1] + blocksToInsertSizes[idx_blocksToInsert] + blocksToInsertSizes[idx_blocksToInsert+1];
f0111410:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111413:	8d 50 ff             	lea    -0x1(%eax),%edx
f0111416:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111419:	48                   	dec    %eax
f011141a:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f011141e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111421:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0111425:	01 c1                	add    %eax,%ecx
f0111427:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011142a:	40                   	inc    %eax
f011142b:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011142f:	01 c8                	add    %ecx,%eax
f0111431:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0111435:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111438:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f011143f:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0111440:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111443:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f011144a:	00 
	blocksToInsertSVAs[idx_blocksToInsert+1] = 0x0;
f011144b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011144e:	40                   	inc    %eax
f011144f:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0111456:	00 
	blocksToInsertSizes[idx_blocksToInsert+1] = 0;
f0111457:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011145a:	40                   	inc    %eax
f011145b:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0111462:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0111463:	83 ec 0c             	sub    $0xc,%esp
f0111466:	ff 75 f0             	pushl  -0x10(%ebp)
f0111469:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011146c:	50                   	push   %eax
f011146d:	8d 45 98             	lea    -0x68(%ebp),%eax
f0111470:	50                   	push   %eax
f0111471:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0111474:	50                   	push   %eax
f0111475:	68 64 ad 89 f0       	push   $0xf089ad64
f011147a:	e8 b2 00 00 00       	call   f0111531 <check_list_data>
f011147f:	83 c4 20             	add    $0x20,%esp
f0111482:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0111485:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111489:	74 17                	je     f01114a2 <test_insert_sorted_with_merge_freeList+0xb55>
f011148b:	83 ec 04             	sub    $0x4,%esp
f011148e:	68 ac 8e 13 f0       	push   $0xf0138eac
f0111493:	68 7c 03 00 00       	push   $0x37c
f0111498:	68 94 82 13 f0       	push   $0xf0138294
f011149d:	e8 63 ed fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f01114a2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01114a5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01114a8:	74 17                	je     f01114c1 <test_insert_sorted_with_merge_freeList+0xb74>
f01114aa:	83 ec 04             	sub    $0x4,%esp
f01114ad:	68 00 8f 13 f0       	push   $0xf0138f00
f01114b2:	68 7d 03 00 00       	push   $0x37d
f01114b7:	68 94 82 13 f0       	push   $0xf0138294
f01114bc:	e8 44 ed fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f01114c1:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f01114c8:	83 ec 0c             	sub    $0xc,%esp
f01114cb:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01114ce:	50                   	push   %eax
f01114cf:	e8 29 01 00 00       	call   f01115fd <check_avaliable_list_data>
f01114d4:	83 c4 10             	add    $0x10,%esp
f01114d7:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 6) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f01114da:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01114dd:	8d 50 06             	lea    0x6(%eax),%edx
f01114e0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01114e3:	39 c2                	cmp    %eax,%edx
f01114e5:	74 17                	je     f01114fe <test_insert_sorted_with_merge_freeList+0xbb1>
f01114e7:	83 ec 04             	sub    $0x4,%esp
f01114ea:	68 54 8f 13 f0       	push   $0xf0138f54
f01114ef:	68 82 03 00 00       	push   $0x382
f01114f4:	68 94 82 13 f0       	push   $0xf0138294
f01114f9:	e8 07 ed fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f01114fe:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111502:	74 17                	je     f011151b <test_insert_sorted_with_merge_freeList+0xbce>
f0111504:	83 ec 04             	sub    $0x4,%esp
f0111507:	68 ac 8f 13 f0       	push   $0xf0138fac
f011150c:	68 83 03 00 00       	push   $0x383
f0111511:	68 94 82 13 f0       	push   $0xf0138294
f0111516:	e8 ea ec fe ff       	call   f0100205 <_panic>
	//====================================================================//


	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test insert_sorted_with_merge_freeList completed successfully.\n");
f011151b:	83 ec 0c             	sub    $0xc,%esp
f011151e:	68 08 90 13 f0       	push   $0xf0139008
f0111523:	e8 e6 f7 fe ff       	call   f0100d0e <cprintf>
f0111528:	83 c4 10             	add    $0x10,%esp

}
f011152b:	90                   	nop
f011152c:	8b 7d fc             	mov    -0x4(%ebp),%edi
f011152f:	c9                   	leave  
f0111530:	c3                   	ret    

f0111531 <check_list_data>:

/********************Helper Functions***************************/
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
f0111531:	55                   	push   %ebp
f0111532:	89 e5                	mov    %esp,%ebp
f0111534:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f0111537:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f011153e:	8b 45 14             	mov    0x14(%ebp),%eax
f0111541:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i = 0;
f0111547:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	LIST_FOREACH(node, list)
f011154e:	8b 45 08             	mov    0x8(%ebp),%eax
f0111551:	8b 00                	mov    (%eax),%eax
f0111553:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0111556:	eb 6e                	jmp    f01115c6 <check_list_data+0x95>
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
			i++;
f0111558:	ff 45 f8             	incl   -0x8(%ebp)
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
f011155b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011155e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0111565:	8b 45 10             	mov    0x10(%ebp),%eax
f0111568:	01 d0                	add    %edx,%eax
f011156a:	8b 00                	mov    (%eax),%eax
f011156c:	85 c0                	test   %eax,%eax
f011156e:	74 e8                	je     f0111558 <check_list_data+0x27>
			i++;
		if(node->sva != blocksSVAs[(i)] || node->size != blocksSizes[i])
f0111570:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111573:	8b 50 08             	mov    0x8(%eax),%edx
f0111576:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111579:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0111580:	8b 45 0c             	mov    0xc(%ebp),%eax
f0111583:	01 c8                	add    %ecx,%eax
f0111585:	8b 00                	mov    (%eax),%eax
f0111587:	39 c2                	cmp    %eax,%edx
f0111589:	75 1b                	jne    f01115a6 <check_list_data+0x75>
f011158b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011158e:	8b 50 0c             	mov    0xc(%eax),%edx
f0111591:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111594:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f011159b:	8b 45 10             	mov    0x10(%ebp),%eax
f011159e:	01 c8                	add    %ecx,%eax
f01115a0:	8b 00                	mov    (%eax),%eax
f01115a2:	39 c2                	cmp    %eax,%edx
f01115a4:	74 07                	je     f01115ad <check_list_data+0x7c>
		{
//			cprintf("i = %d .. \n", i);
//			cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
//			cprintf("blocks[i] data: sva = %x, size = %d\n", blocksSVAs[(i)], blocksSizes[i]);
			return 0;
f01115a6:	b8 00 00 00 00       	mov    $0x0,%eax
f01115ab:	eb 4e                	jmp    f01115fb <check_list_data+0xca>
		}
		(*size)++;
f01115ad:	8b 45 14             	mov    0x14(%ebp),%eax
f01115b0:	8b 00                	mov    (%eax),%eax
f01115b2:	8d 50 01             	lea    0x1(%eax),%edx
f01115b5:	8b 45 14             	mov    0x14(%ebp),%eax
f01115b8:	89 10                	mov    %edx,(%eax)
		i++;
f01115ba:	ff 45 f8             	incl   -0x8(%ebp)
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
f01115bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01115c0:	8b 40 08             	mov    0x8(%eax),%eax
f01115c3:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01115c6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01115ca:	74 07                	je     f01115d3 <check_list_data+0xa2>
f01115cc:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01115cf:	8b 00                	mov    (%eax),%eax
f01115d1:	eb 05                	jmp    f01115d8 <check_list_data+0xa7>
f01115d3:	b8 00 00 00 00       	mov    $0x0,%eax
f01115d8:	8b 55 08             	mov    0x8(%ebp),%edx
f01115db:	89 42 08             	mov    %eax,0x8(%edx)
f01115de:	8b 45 08             	mov    0x8(%ebp),%eax
f01115e1:	8b 40 08             	mov    0x8(%eax),%eax
f01115e4:	85 c0                	test   %eax,%eax
f01115e6:	0f 85 6f ff ff ff    	jne    f011155b <check_list_data+0x2a>
f01115ec:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01115f0:	0f 85 65 ff ff ff    	jne    f011155b <check_list_data+0x2a>
			return 0;
		}
		(*size)++;
		i++;
	}
	return 1;
f01115f6:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01115fb:	c9                   	leave  
f01115fc:	c3                   	ret    

f01115fd <check_avaliable_list_data>:

int check_avaliable_list_data(uint32* size)
{
f01115fd:	55                   	push   %ebp
f01115fe:	89 e5                	mov    %esp,%ebp
f0111600:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f0111603:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f011160a:	8b 45 08             	mov    0x8(%ebp),%eax
f011160d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	LIST_FOREACH(node, &AvailableMemBlocksList)
f0111613:	a1 98 ad 89 f0       	mov    0xf089ad98,%eax
f0111618:	89 45 fc             	mov    %eax,-0x4(%ebp)
f011161b:	eb 30                	jmp    f011164d <check_avaliable_list_data+0x50>
	{
		if(node->sva != 0x0 || node->size != 0)
f011161d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111620:	8b 40 08             	mov    0x8(%eax),%eax
f0111623:	85 c0                	test   %eax,%eax
f0111625:	75 0a                	jne    f0111631 <check_avaliable_list_data+0x34>
f0111627:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011162a:	8b 40 0c             	mov    0xc(%eax),%eax
f011162d:	85 c0                	test   %eax,%eax
f011162f:	74 07                	je     f0111638 <check_avaliable_list_data+0x3b>
		{
			return 0;
f0111631:	b8 00 00 00 00       	mov    $0x0,%eax
f0111636:	eb 40                	jmp    f0111678 <check_avaliable_list_data+0x7b>
		}
		(*size)++;
f0111638:	8b 45 08             	mov    0x8(%ebp),%eax
f011163b:	8b 00                	mov    (%eax),%eax
f011163d:	8d 50 01             	lea    0x1(%eax),%edx
f0111640:	8b 45 08             	mov    0x8(%ebp),%eax
f0111643:	89 10                	mov    %edx,(%eax)
int check_avaliable_list_data(uint32* size)
{
	struct MemBlock* node = NULL;
	*size = 0;

	LIST_FOREACH(node, &AvailableMemBlocksList)
f0111645:	a1 a0 ad 89 f0       	mov    0xf089ada0,%eax
f011164a:	89 45 fc             	mov    %eax,-0x4(%ebp)
f011164d:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0111651:	74 07                	je     f011165a <check_avaliable_list_data+0x5d>
f0111653:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111656:	8b 00                	mov    (%eax),%eax
f0111658:	eb 05                	jmp    f011165f <check_avaliable_list_data+0x62>
f011165a:	b8 00 00 00 00       	mov    $0x0,%eax
f011165f:	a3 a0 ad 89 f0       	mov    %eax,0xf089ada0
f0111664:	a1 a0 ad 89 f0       	mov    0xf089ada0,%eax
f0111669:	85 c0                	test   %eax,%eax
f011166b:	75 b0                	jne    f011161d <check_avaliable_list_data+0x20>
f011166d:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0111671:	75 aa                	jne    f011161d <check_avaliable_list_data+0x20>
		{
			return 0;
		}
		(*size)++;
	}
	return 1;
f0111673:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0111678:	c9                   	leave  
f0111679:	c3                   	ret    

f011167a <show_list_content>:


void show_list_content(struct MemBlock_List* list)
{
f011167a:	55                   	push   %ebp
f011167b:	89 e5                	mov    %esp,%ebp
f011167d:	83 ec 18             	sub    $0x18,%esp
	struct MemBlock* node = NULL;
f0111680:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(node, list)
f0111687:	8b 45 08             	mov    0x8(%ebp),%eax
f011168a:	8b 00                	mov    (%eax),%eax
f011168c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011168f:	eb 27                	jmp    f01116b8 <show_list_content+0x3e>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f0111691:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111694:	8b 50 0c             	mov    0xc(%eax),%edx
f0111697:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011169a:	8b 40 08             	mov    0x8(%eax),%eax
f011169d:	83 ec 04             	sub    $0x4,%esp
f01116a0:	52                   	push   %edx
f01116a1:	50                   	push   %eax
f01116a2:	68 58 83 13 f0       	push   $0xf0138358
f01116a7:	e8 62 f6 fe ff       	call   f0100d0e <cprintf>
f01116ac:	83 c4 10             	add    $0x10,%esp


void show_list_content(struct MemBlock_List* list)
{
	struct MemBlock* node = NULL;
	LIST_FOREACH(node, list)
f01116af:	8b 45 08             	mov    0x8(%ebp),%eax
f01116b2:	8b 40 08             	mov    0x8(%eax),%eax
f01116b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01116b8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01116bc:	74 07                	je     f01116c5 <show_list_content+0x4b>
f01116be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01116c1:	8b 00                	mov    (%eax),%eax
f01116c3:	eb 05                	jmp    f01116ca <show_list_content+0x50>
f01116c5:	b8 00 00 00 00       	mov    $0x0,%eax
f01116ca:	8b 55 08             	mov    0x8(%ebp),%edx
f01116cd:	89 42 08             	mov    %eax,0x8(%edx)
f01116d0:	8b 45 08             	mov    0x8(%ebp),%eax
f01116d3:	8b 40 08             	mov    0x8(%eax),%eax
f01116d6:	85 c0                	test   %eax,%eax
f01116d8:	75 b7                	jne    f0111691 <show_list_content+0x17>
f01116da:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01116de:	75 b1                	jne    f0111691 <show_list_content+0x17>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
}
f01116e0:	90                   	nop
f01116e1:	c9                   	leave  
f01116e2:	c3                   	ret    

f01116e3 <TestAutoCompleteCommand>:
int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc);
int CA(uint32 *ptr_dir, uint32 va);
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which);
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type);
int TestAutoCompleteCommand()
{
f01116e3:	55                   	push   %ebp
f01116e4:	89 e5                	mov    %esp,%ebp
f01116e6:	57                   	push   %edi
f01116e7:	56                   	push   %esi
f01116e8:	53                   	push   %ebx
f01116e9:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f01116ef:	83 ec 0c             	sub    $0xc,%esp
f01116f2:	68 5c 90 13 f0       	push   $0xf013905c
f01116f7:	e8 12 f6 fe ff       	call   f0100d0e <cprintf>
f01116fc:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f01116ff:	83 ec 0c             	sub    $0xc,%esp
f0111702:	68 80 90 13 f0       	push   $0xf0139080
f0111707:	e8 02 f6 fe ff       	call   f0100d0e <cprintf>
f011170c:	83 c4 10             	add    $0x10,%esp
	//	cprintf("========================\n");
	//	cprintf("Q2 Test: manually try the test cases in the doc. \n..."
	//			"OR, you can do it automatically by un-commenting the code in this function, it should output the same results in the Examples exist in the MS1 ppt\n");
	//
	//	int retValue = 0;
	int i = 0;
f011170f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	//CASE1:
	//should execute the kernel_info command
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f0111716:	83 ec 0c             	sub    $0xc,%esp
f0111719:	68 9c 90 13 f0       	push   $0xf013909c
f011171e:	e8 eb f5 fe ff       	call   f0100d0e <cprintf>
f0111723:	83 c4 10             	add    $0x10,%esp
	char cr0[100] = "kernel_info";
f0111726:	8d 45 80             	lea    -0x80(%ebp),%eax
f0111729:	bb 56 91 13 f0       	mov    $0xf0139156,%ebx
f011172e:	ba 03 00 00 00       	mov    $0x3,%edx
f0111733:	89 c7                	mov    %eax,%edi
f0111735:	89 de                	mov    %ebx,%esi
f0111737:	89 d1                	mov    %edx,%ecx
f0111739:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f011173b:	8d 55 8c             	lea    -0x74(%ebp),%edx
f011173e:	b9 16 00 00 00       	mov    $0x16,%ecx
f0111743:	b8 00 00 00 00       	mov    $0x0,%eax
f0111748:	89 d7                	mov    %edx,%edi
f011174a:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr0) ;
f011174c:	83 ec 0c             	sub    $0xc,%esp
f011174f:	8d 45 80             	lea    -0x80(%ebp),%eax
f0111752:	50                   	push   %eax
f0111753:	e8 18 f6 fe ff       	call   f0100d70 <execute_command>
f0111758:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f011175b:	83 ec 0c             	sub    $0xc,%esp
f011175e:	68 ca 90 13 f0       	push   $0xf01390ca
f0111763:	e8 a6 f5 fe ff       	call   f0100d0e <cprintf>
f0111768:	83 c4 10             	add    $0x10,%esp

	//CASE2: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f011176b:	83 ec 0c             	sub    $0xc,%esp
f011176e:	68 e0 90 13 f0       	push   $0xf01390e0
f0111773:	e8 96 f5 fe ff       	call   f0100d0e <cprintf>
f0111778:	83 c4 10             	add    $0x10,%esp
	char cr2[100] = "he";
f011177b:	c7 85 1c ff ff ff 68 	movl   $0x6568,-0xe4(%ebp)
f0111782:	65 00 00 
f0111785:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f011178b:	b9 18 00 00 00       	mov    $0x18,%ecx
f0111790:	b8 00 00 00 00       	mov    $0x0,%eax
f0111795:	89 d7                	mov    %edx,%edi
f0111797:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr2) ;
f0111799:	83 ec 0c             	sub    $0xc,%esp
f011179c:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f01117a2:	50                   	push   %eax
f01117a3:	e8 c8 f5 fe ff       	call   f0100d70 <execute_command>
f01117a8:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f01117ab:	83 ec 0c             	sub    $0xc,%esp
f01117ae:	68 ca 90 13 f0       	push   $0xf01390ca
f01117b3:	e8 56 f5 fe ff       	call   f0100d0e <cprintf>
f01117b8:	83 c4 10             	add    $0x10,%esp


	//CASE3: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f01117bb:	83 ec 0c             	sub    $0xc,%esp
f01117be:	68 08 91 13 f0       	push   $0xf0139108
f01117c3:	e8 46 f5 fe ff       	call   f0100d0e <cprintf>
f01117c8:	83 c4 10             	add    $0x10,%esp
	char cr3[100] = "ru";
f01117cb:	c7 85 b8 fe ff ff 72 	movl   $0x7572,-0x148(%ebp)
f01117d2:	75 00 00 
f01117d5:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f01117db:	b9 18 00 00 00       	mov    $0x18,%ecx
f01117e0:	b8 00 00 00 00       	mov    $0x0,%eax
f01117e5:	89 d7                	mov    %edx,%edi
f01117e7:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr3) ;
f01117e9:	83 ec 0c             	sub    $0xc,%esp
f01117ec:	8d 85 b8 fe ff ff    	lea    -0x148(%ebp),%eax
f01117f2:	50                   	push   %eax
f01117f3:	e8 78 f5 fe ff       	call   f0100d70 <execute_command>
f01117f8:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f01117fb:	83 ec 0c             	sub    $0xc,%esp
f01117fe:	68 ca 90 13 f0       	push   $0xf01390ca
f0111803:	e8 06 f5 fe ff       	call   f0100d0e <cprintf>
f0111808:	83 c4 10             	add    $0x10,%esp

	//CASE4: should print unknown command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f011180b:	83 ec 0c             	sub    $0xc,%esp
f011180e:	68 30 91 13 f0       	push   $0xf0139130
f0111813:	e8 f6 f4 fe ff       	call   f0100d0e <cprintf>
f0111818:	83 c4 10             	add    $0x10,%esp
	char cr4[100] = "smm";
f011181b:	c7 85 54 fe ff ff 73 	movl   $0x6d6d73,-0x1ac(%ebp)
f0111822:	6d 6d 00 
f0111825:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f011182b:	b9 18 00 00 00       	mov    $0x18,%ecx
f0111830:	b8 00 00 00 00       	mov    $0x0,%eax
f0111835:	89 d7                	mov    %edx,%edi
f0111837:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr4) ;
f0111839:	83 ec 0c             	sub    $0xc,%esp
f011183c:	8d 85 54 fe ff ff    	lea    -0x1ac(%ebp),%eax
f0111842:	50                   	push   %eax
f0111843:	e8 28 f5 fe ff       	call   f0100d70 <execute_command>
f0111848:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f011184b:	83 ec 0c             	sub    $0xc,%esp
f011184e:	68 ca 90 13 f0       	push   $0xf01390ca
f0111853:	e8 b6 f4 fe ff       	call   f0100d0e <cprintf>
f0111858:	83 c4 10             	add    $0x10,%esp
	return 0;
f011185b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111860:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0111863:	5b                   	pop    %ebx
f0111864:	5e                   	pop    %esi
f0111865:	5f                   	pop    %edi
f0111866:	5d                   	pop    %ebp
f0111867:	c3                   	ret    

f0111868 <test_pt_set_page_permissions>:

//=====================================
// 1) TEST SET/CLEAR PAGE PERMISSIONS:
//=====================================
int test_pt_set_page_permissions()
{
f0111868:	55                   	push   %ebp
f0111869:	89 e5                	mov    %esp,%ebp
f011186b:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check setting a permission
	uint32 va = 0xEF800000;
f011186e:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0111875:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f011187c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111883:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111888:	ff 75 ec             	pushl  -0x14(%ebp)
f011188b:	ff 75 f0             	pushl  -0x10(%ebp)
f011188e:	ff 75 f4             	pushl  -0xc(%ebp)
f0111891:	50                   	push   %eax
f0111892:	e8 1c 68 ff ff       	call   f01080b3 <pt_set_page_permissions>
f0111897:	83 c4 10             	add    $0x10,%esp
	int ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011189a:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f011189f:	ff 75 ec             	pushl  -0x14(%ebp)
f01118a2:	ff 75 f0             	pushl  -0x10(%ebp)
f01118a5:	ff 75 f4             	pushl  -0xc(%ebp)
f01118a8:	50                   	push   %eax
f01118a9:	e8 9e 4e 00 00       	call   f011674c <CP>
f01118ae:	83 c4 10             	add    $0x10,%esp
f01118b1:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01118b4:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01118b8:	74 14                	je     f01118ce <test_pt_set_page_permissions+0x66>
	{
		panic("[EVAL] #1 Set Permission Failed.\n");
f01118ba:	83 ec 04             	sub    $0x4,%esp
f01118bd:	68 bc 91 13 f0       	push   $0xf01391bc
f01118c2:	6a 5a                	push   $0x5a
f01118c4:	68 de 91 13 f0       	push   $0xf01391de
f01118c9:	e8 37 e9 fe ff       	call   f0100205 <_panic>
	}

	//Case 2: Check setting MORE THAN ONE permission
	va = 0xEF801000;
f01118ce:	c7 45 f4 00 10 80 ef 	movl   $0xef801000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER;
f01118d5:	c7 45 f0 44 00 00 00 	movl   $0x44,-0x10(%ebp)
	permissions_to_clear = 0;
f01118dc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01118e3:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f01118e8:	ff 75 ec             	pushl  -0x14(%ebp)
f01118eb:	ff 75 f0             	pushl  -0x10(%ebp)
f01118ee:	ff 75 f4             	pushl  -0xc(%ebp)
f01118f1:	50                   	push   %eax
f01118f2:	e8 bc 67 ff ff       	call   f01080b3 <pt_set_page_permissions>
f01118f7:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01118fa:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f01118ff:	ff 75 ec             	pushl  -0x14(%ebp)
f0111902:	ff 75 f0             	pushl  -0x10(%ebp)
f0111905:	ff 75 f4             	pushl  -0xc(%ebp)
f0111908:	50                   	push   %eax
f0111909:	e8 3e 4e 00 00       	call   f011674c <CP>
f011190e:	83 c4 10             	add    $0x10,%esp
f0111911:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111914:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111918:	74 14                	je     f011192e <test_pt_set_page_permissions+0xc6>
	{
		panic("[EVAL] #2 Set Permission Failed.\n");
f011191a:	83 ec 04             	sub    $0x4,%esp
f011191d:	68 fc 91 13 f0       	push   $0xf01391fc
f0111922:	6a 66                	push   $0x66
f0111924:	68 de 91 13 f0       	push   $0xf01391de
f0111929:	e8 d7 e8 fe ff       	call   f0100205 <_panic>
	}

	va = 0xEF800000;
f011192e:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER|PERM_USED|PERM_PRESENT;
f0111935:	c7 45 f0 65 00 00 00 	movl   $0x65,-0x10(%ebp)
	permissions_to_clear = 0;
f011193c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111943:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111948:	ff 75 ec             	pushl  -0x14(%ebp)
f011194b:	ff 75 f0             	pushl  -0x10(%ebp)
f011194e:	ff 75 f4             	pushl  -0xc(%ebp)
f0111951:	50                   	push   %eax
f0111952:	e8 5c 67 ff ff       	call   f01080b3 <pt_set_page_permissions>
f0111957:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011195a:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f011195f:	ff 75 ec             	pushl  -0x14(%ebp)
f0111962:	ff 75 f0             	pushl  -0x10(%ebp)
f0111965:	ff 75 f4             	pushl  -0xc(%ebp)
f0111968:	50                   	push   %eax
f0111969:	e8 de 4d 00 00       	call   f011674c <CP>
f011196e:	83 c4 10             	add    $0x10,%esp
f0111971:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111974:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111978:	74 14                	je     f011198e <test_pt_set_page_permissions+0x126>
	{
		panic("[EVAL] #3 Set Permission Failed.\n");
f011197a:	83 ec 04             	sub    $0x4,%esp
f011197d:	68 20 92 13 f0       	push   $0xf0139220
f0111982:	6a 71                	push   $0x71
f0111984:	68 de 91 13 f0       	push   $0xf01391de
f0111989:	e8 77 e8 fe ff       	call   f0100205 <_panic>
	}

	//Case 3: Check clearing a permission
	va = 0xF0000000;
f011198e:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	permissions_to_set = 0;
f0111995:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_PRESENT;
f011199c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01119a3:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f01119a8:	ff 75 ec             	pushl  -0x14(%ebp)
f01119ab:	ff 75 f0             	pushl  -0x10(%ebp)
f01119ae:	ff 75 f4             	pushl  -0xc(%ebp)
f01119b1:	50                   	push   %eax
f01119b2:	e8 fc 66 ff ff       	call   f01080b3 <pt_set_page_permissions>
f01119b7:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01119ba:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f01119bf:	ff 75 ec             	pushl  -0x14(%ebp)
f01119c2:	ff 75 f0             	pushl  -0x10(%ebp)
f01119c5:	ff 75 f4             	pushl  -0xc(%ebp)
f01119c8:	50                   	push   %eax
f01119c9:	e8 7e 4d 00 00       	call   f011674c <CP>
f01119ce:	83 c4 10             	add    $0x10,%esp
f01119d1:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01119d4:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01119d8:	74 14                	je     f01119ee <test_pt_set_page_permissions+0x186>
	{
		panic("[EVAL] #4 Clear Permission Failed.\n");
f01119da:	83 ec 04             	sub    $0x4,%esp
f01119dd:	68 44 92 13 f0       	push   $0xf0139244
f01119e2:	6a 7d                	push   $0x7d
f01119e4:	68 de 91 13 f0       	push   $0xf01391de
f01119e9:	e8 17 e8 fe ff       	call   f0100205 <_panic>
	}

	//Case 4: Check clearing MORE THAN ONE permission
	va = 0xEF800000;
f01119ee:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = 0;
f01119f5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_MODIFIED|PERM_USER;
f01119fc:	c7 45 ec 44 00 00 00 	movl   $0x44,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111a03:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111a08:	ff 75 ec             	pushl  -0x14(%ebp)
f0111a0b:	ff 75 f0             	pushl  -0x10(%ebp)
f0111a0e:	ff 75 f4             	pushl  -0xc(%ebp)
f0111a11:	50                   	push   %eax
f0111a12:	e8 9c 66 ff ff       	call   f01080b3 <pt_set_page_permissions>
f0111a17:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111a1a:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111a1f:	ff 75 ec             	pushl  -0x14(%ebp)
f0111a22:	ff 75 f0             	pushl  -0x10(%ebp)
f0111a25:	ff 75 f4             	pushl  -0xc(%ebp)
f0111a28:	50                   	push   %eax
f0111a29:	e8 1e 4d 00 00       	call   f011674c <CP>
f0111a2e:	83 c4 10             	add    $0x10,%esp
f0111a31:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111a34:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111a38:	74 17                	je     f0111a51 <test_pt_set_page_permissions+0x1e9>
	{
		panic("[EVAL] #5 Clear Permission Failed.\n");
f0111a3a:	83 ec 04             	sub    $0x4,%esp
f0111a3d:	68 68 92 13 f0       	push   $0xf0139268
f0111a42:	68 89 00 00 00       	push   $0x89
f0111a47:	68 de 91 13 f0       	push   $0xf01391de
f0111a4c:	e8 b4 e7 fe ff       	call   f0100205 <_panic>
	}

	//Case 5: Check settiing & clearing MORE THAN ONE permission together
	va = 0xF0001000;
f0111a51:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	permissions_to_set = PERM_USER|PERM_BUFFERED;
f0111a58:	c7 45 f0 04 02 00 00 	movl   $0x204,-0x10(%ebp)
	permissions_to_clear = PERM_WRITEABLE|PERM_USED|PERM_MODIFIED;
f0111a5f:	c7 45 ec 62 00 00 00 	movl   $0x62,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111a66:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111a6b:	ff 75 ec             	pushl  -0x14(%ebp)
f0111a6e:	ff 75 f0             	pushl  -0x10(%ebp)
f0111a71:	ff 75 f4             	pushl  -0xc(%ebp)
f0111a74:	50                   	push   %eax
f0111a75:	e8 39 66 ff ff       	call   f01080b3 <pt_set_page_permissions>
f0111a7a:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111a7d:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111a82:	ff 75 ec             	pushl  -0x14(%ebp)
f0111a85:	ff 75 f0             	pushl  -0x10(%ebp)
f0111a88:	ff 75 f4             	pushl  -0xc(%ebp)
f0111a8b:	50                   	push   %eax
f0111a8c:	e8 bb 4c 00 00       	call   f011674c <CP>
f0111a91:	83 c4 10             	add    $0x10,%esp
f0111a94:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111a97:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111a9b:	74 17                	je     f0111ab4 <test_pt_set_page_permissions+0x24c>
	{
		panic("[EVAL] #6 Set & Clear Permission Failed.\n");
f0111a9d:	83 ec 04             	sub    $0x4,%esp
f0111aa0:	68 8c 92 13 f0       	push   $0xf013928c
f0111aa5:	68 95 00 00 00       	push   $0x95
f0111aaa:	68 de 91 13 f0       	push   $0xf01391de
f0111aaf:	e8 51 e7 fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test pt_set&clear_page_permissions completed successfully.\n");
f0111ab4:	83 ec 0c             	sub    $0xc,%esp
f0111ab7:	68 b8 92 13 f0       	push   $0xf01392b8
f0111abc:	e8 4d f2 fe ff       	call   f0100d0e <cprintf>
f0111ac1:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111ac4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111ac9:	c9                   	leave  
f0111aca:	c3                   	ret    

f0111acb <test_pt_set_page_permissions_invalid_va>:

int test_pt_set_page_permissions_invalid_va()
{
f0111acb:	55                   	push   %ebp
f0111acc:	89 e5                	mov    %esp,%ebp
f0111ace:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x0;
f0111ad1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0111ad8:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0111adf:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111ae6:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111aeb:	ff 75 ec             	pushl  -0x14(%ebp)
f0111aee:	ff 75 f0             	pushl  -0x10(%ebp)
f0111af1:	ff 75 f4             	pushl  -0xc(%ebp)
f0111af4:	50                   	push   %eax
f0111af5:	e8 b9 65 ff ff       	call   f01080b3 <pt_set_page_permissions>
f0111afa:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling setting permissions of an invalid virtual address with non existing page table.");
f0111afd:	83 ec 04             	sub    $0x4,%esp
f0111b00:	68 08 93 13 f0       	push   $0xf0139308
f0111b05:	68 a2 00 00 00       	push   $0xa2
f0111b0a:	68 de 91 13 f0       	push   $0xf01391de
f0111b0f:	e8 f1 e6 fe ff       	call   f0100205 <_panic>

f0111b14 <test_pt_get_page_permissions>:

//=====================================
// 2) TEST GET PAGE PERMISSIONS:
//=====================================
int test_pt_get_page_permissions()
{
f0111b14:	55                   	push   %ebp
f0111b15:	89 e5                	mov    %esp,%ebp
f0111b17:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check getting a permission of a non existing VA with NO table
	uint32 va = 0xeebfe000;
f0111b1a:	c7 45 f4 00 e0 bf ee 	movl   $0xeebfe000,-0xc(%ebp)
	int ret = pt_get_page_permissions(ptr_page_directory, va);
f0111b21:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111b26:	83 ec 08             	sub    $0x8,%esp
f0111b29:	ff 75 f4             	pushl  -0xc(%ebp)
f0111b2c:	50                   	push   %eax
f0111b2d:	e8 35 66 ff ff       	call   f0108167 <pt_get_page_permissions>
f0111b32:	83 c4 10             	add    $0x10,%esp
f0111b35:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != -1)
f0111b38:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0111b3c:	74 17                	je     f0111b55 <test_pt_get_page_permissions+0x41>
	{
		panic("[EVAL] #1 Get Permission Failed.\n");
f0111b3e:	83 ec 04             	sub    $0x4,%esp
f0111b41:	68 a4 93 13 f0       	push   $0xf01393a4
f0111b46:	68 b0 00 00 00       	push   $0xb0
f0111b4b:	68 de 91 13 f0       	push   $0xf01391de
f0111b50:	e8 b0 e6 fe ff       	call   f0100205 <_panic>
	}

	//Case 2: Check getting a permission of a non existing VA with an existing table
	va = 0xEF800000;
f0111b55:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111b5c:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111b61:	83 ec 08             	sub    $0x8,%esp
f0111b64:	ff 75 f4             	pushl  -0xc(%ebp)
f0111b67:	50                   	push   %eax
f0111b68:	e8 fa 65 ff ff       	call   f0108167 <pt_get_page_permissions>
f0111b6d:	83 c4 10             	add    $0x10,%esp
f0111b70:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 0)
f0111b73:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111b77:	74 17                	je     f0111b90 <test_pt_get_page_permissions+0x7c>
	{
		panic("[EVAL] #2 Get Permission Failed.\n");
f0111b79:	83 ec 04             	sub    $0x4,%esp
f0111b7c:	68 c8 93 13 f0       	push   $0xf01393c8
f0111b81:	68 b8 00 00 00       	push   $0xb8
f0111b86:	68 de 91 13 f0       	push   $0xf01391de
f0111b8b:	e8 75 e6 fe ff       	call   f0100205 <_panic>
	}

	//Case 3: Check getting a permission of an existing VA with an existing table
	va = 0xf0000000;
f0111b90:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111b97:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111b9c:	83 ec 08             	sub    $0x8,%esp
f0111b9f:	ff 75 f4             	pushl  -0xc(%ebp)
f0111ba2:	50                   	push   %eax
f0111ba3:	e8 bf 65 ff ff       	call   f0108167 <pt_get_page_permissions>
f0111ba8:	83 c4 10             	add    $0x10,%esp
f0111bab:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0111bae:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0111bb2:	74 17                	je     f0111bcb <test_pt_get_page_permissions+0xb7>
	{
		panic("[EVAL] #3 Get Permission Failed.\n");
f0111bb4:	83 ec 04             	sub    $0x4,%esp
f0111bb7:	68 ec 93 13 f0       	push   $0xf01393ec
f0111bbc:	68 c0 00 00 00       	push   $0xc0
f0111bc1:	68 de 91 13 f0       	push   $0xf01391de
f0111bc6:	e8 3a e6 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF1000000;
f0111bcb:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111bd2:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111bd7:	83 ec 08             	sub    $0x8,%esp
f0111bda:	ff 75 f4             	pushl  -0xc(%ebp)
f0111bdd:	50                   	push   %eax
f0111bde:	e8 84 65 ff ff       	call   f0108167 <pt_get_page_permissions>
f0111be3:	83 c4 10             	add    $0x10,%esp
f0111be6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0111be9:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0111bed:	74 17                	je     f0111c06 <test_pt_get_page_permissions+0xf2>
	{
		panic("[EVAL] #4 Get Permission Failed.\n");
f0111bef:	83 ec 04             	sub    $0x4,%esp
f0111bf2:	68 10 94 13 f0       	push   $0xf0139410
f0111bf7:	68 c7 00 00 00       	push   $0xc7
f0111bfc:	68 de 91 13 f0       	push   $0xf01391de
f0111c01:	e8 ff e5 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0001000;
f0111c06:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111c0d:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111c12:	83 ec 08             	sub    $0x8,%esp
f0111c15:	ff 75 f4             	pushl  -0xc(%ebp)
f0111c18:	50                   	push   %eax
f0111c19:	e8 49 65 ff ff       	call   f0108167 <pt_get_page_permissions>
f0111c1e:	83 c4 10             	add    $0x10,%esp
f0111c21:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 99)
f0111c24:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f0111c28:	74 17                	je     f0111c41 <test_pt_get_page_permissions+0x12d>
	{
		panic("[EVAL] #5 Get Permission Failed.\n");
f0111c2a:	83 ec 04             	sub    $0x4,%esp
f0111c2d:	68 34 94 13 f0       	push   $0xf0139434
f0111c32:	68 ce 00 00 00       	push   $0xce
f0111c37:	68 de 91 13 f0       	push   $0xf01391de
f0111c3c:	e8 c4 e5 fe ff       	call   f0100205 <_panic>
	}
	cprintf("Congratulations!! test pt_get_page_permissions completed successfully.\n");
f0111c41:	83 ec 0c             	sub    $0xc,%esp
f0111c44:	68 58 94 13 f0       	push   $0xf0139458
f0111c49:	e8 c0 f0 fe ff       	call   f0100d0e <cprintf>
f0111c4e:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111c51:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111c56:	c9                   	leave  
f0111c57:	c3                   	ret    

f0111c58 <test_pt_clear_page_table_entry>:

//=====================================
// 3) TEST CLEAR PAGE TABLE ENTRY:
//=====================================
int test_pt_clear_page_table_entry()
{
f0111c58:	55                   	push   %ebp
f0111c59:	89 e5                	mov    %esp,%ebp
f0111c5b:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0xF1000000;
f0111c5e:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111c65:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111c6a:	83 ec 08             	sub    $0x8,%esp
f0111c6d:	ff 75 f4             	pushl  -0xc(%ebp)
f0111c70:	50                   	push   %eax
f0111c71:	e8 4c 65 ff ff       	call   f01081c2 <pt_clear_page_table_entry>
f0111c76:	83 c4 10             	add    $0x10,%esp
	int ret = CE(ptr_page_directory, va);
f0111c79:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111c7e:	83 ec 08             	sub    $0x8,%esp
f0111c81:	ff 75 f4             	pushl  -0xc(%ebp)
f0111c84:	50                   	push   %eax
f0111c85:	e8 1e 4a 00 00       	call   f01166a8 <CE>
f0111c8a:	83 c4 10             	add    $0x10,%esp
f0111c8d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111c90:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111c94:	74 17                	je     f0111cad <test_pt_clear_page_table_entry+0x55>
	{
		panic("[EVAL] #1 Clear Page Table Entry Failed.\n");
f0111c96:	83 ec 04             	sub    $0x4,%esp
f0111c99:	68 a0 94 13 f0       	push   $0xf01394a0
f0111c9e:	68 de 00 00 00       	push   $0xde
f0111ca3:	68 de 91 13 f0       	push   $0xf01391de
f0111ca8:	e8 58 e5 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0001000;
f0111cad:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111cb4:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111cb9:	83 ec 08             	sub    $0x8,%esp
f0111cbc:	ff 75 f4             	pushl  -0xc(%ebp)
f0111cbf:	50                   	push   %eax
f0111cc0:	e8 fd 64 ff ff       	call   f01081c2 <pt_clear_page_table_entry>
f0111cc5:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111cc8:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111ccd:	83 ec 08             	sub    $0x8,%esp
f0111cd0:	ff 75 f4             	pushl  -0xc(%ebp)
f0111cd3:	50                   	push   %eax
f0111cd4:	e8 cf 49 00 00       	call   f01166a8 <CE>
f0111cd9:	83 c4 10             	add    $0x10,%esp
f0111cdc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111cdf:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111ce3:	74 17                	je     f0111cfc <test_pt_clear_page_table_entry+0xa4>
	{
		panic("[EVAL] #2 Clear Page Table Entry Failed.\n");
f0111ce5:	83 ec 04             	sub    $0x4,%esp
f0111ce8:	68 cc 94 13 f0       	push   $0xf01394cc
f0111ced:	68 e6 00 00 00       	push   $0xe6
f0111cf2:	68 de 91 13 f0       	push   $0xf01391de
f0111cf7:	e8 09 e5 fe ff       	call   f0100205 <_panic>
	}

	va = 0xEF800000;
f0111cfc:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111d03:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111d08:	83 ec 08             	sub    $0x8,%esp
f0111d0b:	ff 75 f4             	pushl  -0xc(%ebp)
f0111d0e:	50                   	push   %eax
f0111d0f:	e8 ae 64 ff ff       	call   f01081c2 <pt_clear_page_table_entry>
f0111d14:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111d17:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111d1c:	83 ec 08             	sub    $0x8,%esp
f0111d1f:	ff 75 f4             	pushl  -0xc(%ebp)
f0111d22:	50                   	push   %eax
f0111d23:	e8 80 49 00 00       	call   f01166a8 <CE>
f0111d28:	83 c4 10             	add    $0x10,%esp
f0111d2b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111d2e:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111d32:	74 17                	je     f0111d4b <test_pt_clear_page_table_entry+0xf3>
	{
		panic("[EVAL] #3 Clear Page Table Entry Failed.\n");
f0111d34:	83 ec 04             	sub    $0x4,%esp
f0111d37:	68 f8 94 13 f0       	push   $0xf01394f8
f0111d3c:	68 ee 00 00 00       	push   $0xee
f0111d41:	68 de 91 13 f0       	push   $0xf01391de
f0111d46:	e8 ba e4 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0000000;
f0111d4b:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111d52:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111d57:	83 ec 08             	sub    $0x8,%esp
f0111d5a:	ff 75 f4             	pushl  -0xc(%ebp)
f0111d5d:	50                   	push   %eax
f0111d5e:	e8 5f 64 ff ff       	call   f01081c2 <pt_clear_page_table_entry>
f0111d63:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111d66:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111d6b:	83 ec 08             	sub    $0x8,%esp
f0111d6e:	ff 75 f4             	pushl  -0xc(%ebp)
f0111d71:	50                   	push   %eax
f0111d72:	e8 31 49 00 00       	call   f01166a8 <CE>
f0111d77:	83 c4 10             	add    $0x10,%esp
f0111d7a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111d7d:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111d81:	74 17                	je     f0111d9a <test_pt_clear_page_table_entry+0x142>
	{
		panic("[EVAL] #4 Clear Page Table Entry Failed.\n");
f0111d83:	83 ec 04             	sub    $0x4,%esp
f0111d86:	68 24 95 13 f0       	push   $0xf0139524
f0111d8b:	68 f6 00 00 00       	push   $0xf6
f0111d90:	68 de 91 13 f0       	push   $0xf01391de
f0111d95:	e8 6b e4 fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test pt_clear_page_table_entry completed successfully.\n");
f0111d9a:	83 ec 0c             	sub    $0xc,%esp
f0111d9d:	68 50 95 13 f0       	push   $0xf0139550
f0111da2:	e8 67 ef fe ff       	call   f0100d0e <cprintf>
f0111da7:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111daa:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111daf:	c9                   	leave  
f0111db0:	c3                   	ret    

f0111db1 <test_pt_clear_page_table_entry_invalid_va>:

int test_pt_clear_page_table_entry_invalid_va()
{
f0111db1:	55                   	push   %ebp
f0111db2:	89 e5                	mov    %esp,%ebp
f0111db4:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x1000;
f0111db7:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111dbe:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111dc3:	83 ec 08             	sub    $0x8,%esp
f0111dc6:	ff 75 f4             	pushl  -0xc(%ebp)
f0111dc9:	50                   	push   %eax
f0111dca:	e8 f3 63 ff ff       	call   f01081c2 <pt_clear_page_table_entry>
f0111dcf:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling clearing the entry of an invalid virtual address non existing page table.");
f0111dd2:	83 ec 04             	sub    $0x4,%esp
f0111dd5:	68 9c 95 13 f0       	push   $0xf013959c
f0111dda:	68 01 01 00 00       	push   $0x101
f0111ddf:	68 de 91 13 f0       	push   $0xf01391de
f0111de4:	e8 1c e4 fe ff       	call   f0100205 <_panic>

f0111de9 <test_virtual_to_physical>:

//=====================================
// 4) TEST CONVERTING VA 2 PA:
//=====================================
int test_virtual_to_physical()
{
f0111de9:	55                   	push   %ebp
f0111dea:	89 e5                	mov    %esp,%ebp
f0111dec:	57                   	push   %edi
f0111ded:	56                   	push   %esi
f0111dee:	53                   	push   %ebx
f0111def:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	int kilo = 1024 ;
f0111df5:	c7 45 e4 00 04 00 00 	movl   $0x400,-0x1c(%ebp)
	int mega = 1024*1024 ;
f0111dfc:	c7 45 e0 00 00 10 00 	movl   $0x100000,-0x20(%ebp)
	uint32 va;
	ClearUserSpace(ptr_page_directory);
f0111e03:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111e08:	83 ec 0c             	sub    $0xc,%esp
f0111e0b:	50                   	push   %eax
f0111e0c:	e8 79 49 00 00       	call   f011678a <ClearUserSpace>
f0111e11:	83 c4 10             	add    $0x10,%esp

	//============================
	//Case 1: Check getting pa of a va with NO table
	va = 0xeebfe000;
f0111e14:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	int pa = virtual_to_physical(ptr_page_directory, va);
f0111e1b:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111e20:	83 ec 08             	sub    $0x8,%esp
f0111e23:	ff 75 dc             	pushl  -0x24(%ebp)
f0111e26:	50                   	push   %eax
f0111e27:	e8 02 64 ff ff       	call   f010822e <virtual_to_physical>
f0111e2c:	83 c4 10             	add    $0x10,%esp
f0111e2f:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %d\n", va, CA(ptr_page_directory, va), pa);
	if(pa != -1)
f0111e32:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
f0111e36:	74 17                	je     f0111e4f <test_virtual_to_physical+0x66>
		panic("[EVAL] #1 Test of virtual_to_physical Entry Failed.\n");
f0111e38:	83 ec 04             	sub    $0x4,%esp
f0111e3b:	68 34 96 13 f0       	push   $0xf0139634
f0111e40:	68 16 01 00 00       	push   $0x116
f0111e45:	68 de 91 13 f0       	push   $0xf01391de
f0111e4a:	e8 b6 e3 fe ff       	call   f0100205 <_panic>

	//============================
	//Case 2: Check getting pa of a va with a table
	va = 0xf0000000;
f0111e4f:	c7 45 dc 00 00 00 f0 	movl   $0xf0000000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111e56:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111e5b:	83 ec 08             	sub    $0x8,%esp
f0111e5e:	ff 75 dc             	pushl  -0x24(%ebp)
f0111e61:	50                   	push   %eax
f0111e62:	e8 c7 63 ff ff       	call   f010822e <virtual_to_physical>
f0111e67:	83 c4 10             	add    $0x10,%esp
f0111e6a:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111e6d:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111e72:	83 ec 08             	sub    $0x8,%esp
f0111e75:	ff 75 dc             	pushl  -0x24(%ebp)
f0111e78:	50                   	push   %eax
f0111e79:	e8 0b 48 00 00       	call   f0116689 <CA>
f0111e7e:	83 c4 10             	add    $0x10,%esp
f0111e81:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111e84:	74 17                	je     f0111e9d <test_virtual_to_physical+0xb4>
		panic("[EVAL] #2 Test of virtual_to_physical Entry Failed.\n");
f0111e86:	83 ec 04             	sub    $0x4,%esp
f0111e89:	68 6c 96 13 f0       	push   $0xf013966c
f0111e8e:	68 1f 01 00 00       	push   $0x11f
f0111e93:	68 de 91 13 f0       	push   $0xf01391de
f0111e98:	e8 68 e3 fe ff       	call   f0100205 <_panic>

	//============================
	char ap1[100] = "ap 0x2800000";execute_command(ap1);
f0111e9d:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0111ea3:	bb 38 98 13 f0       	mov    $0xf0139838,%ebx
f0111ea8:	ba 0d 00 00 00       	mov    $0xd,%edx
f0111ead:	89 c7                	mov    %eax,%edi
f0111eaf:	89 de                	mov    %ebx,%esi
f0111eb1:	89 d1                	mov    %edx,%ecx
f0111eb3:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111eb5:	8d 55 81             	lea    -0x7f(%ebp),%edx
f0111eb8:	b9 57 00 00 00       	mov    $0x57,%ecx
f0111ebd:	b0 00                	mov    $0x0,%al
f0111ebf:	89 d7                	mov    %edx,%edi
f0111ec1:	f3 aa                	rep stos %al,%es:(%edi)
f0111ec3:	83 ec 0c             	sub    $0xc,%esp
f0111ec6:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0111ecc:	50                   	push   %eax
f0111ecd:	e8 9e ee fe ff       	call   f0100d70 <execute_command>
f0111ed2:	83 c4 10             	add    $0x10,%esp
	va = 0x2800000;
f0111ed5:	c7 45 dc 00 00 80 02 	movl   $0x2800000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111edc:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111ee1:	83 ec 08             	sub    $0x8,%esp
f0111ee4:	ff 75 dc             	pushl  -0x24(%ebp)
f0111ee7:	50                   	push   %eax
f0111ee8:	e8 41 63 ff ff       	call   f010822e <virtual_to_physical>
f0111eed:	83 c4 10             	add    $0x10,%esp
f0111ef0:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111ef3:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111ef8:	83 ec 08             	sub    $0x8,%esp
f0111efb:	ff 75 dc             	pushl  -0x24(%ebp)
f0111efe:	50                   	push   %eax
f0111eff:	e8 85 47 00 00       	call   f0116689 <CA>
f0111f04:	83 c4 10             	add    $0x10,%esp
f0111f07:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111f0a:	74 17                	je     f0111f23 <test_virtual_to_physical+0x13a>
		panic("[EVAL] #3 Test of virtual_to_physical Entry Failed.\n");
f0111f0c:	83 ec 04             	sub    $0x4,%esp
f0111f0f:	68 a4 96 13 f0       	push   $0xf01396a4
f0111f14:	68 28 01 00 00       	push   $0x128
f0111f19:	68 de 91 13 f0       	push   $0xf01391de
f0111f1e:	e8 e2 e2 fe ff       	call   f0100205 <_panic>

	//============================
	char ap2[100] = "ap 0x2801000";execute_command(ap2);
f0111f23:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0111f29:	bb 9c 98 13 f0       	mov    $0xf013989c,%ebx
f0111f2e:	ba 0d 00 00 00       	mov    $0xd,%edx
f0111f33:	89 c7                	mov    %eax,%edi
f0111f35:	89 de                	mov    %ebx,%esi
f0111f37:	89 d1                	mov    %edx,%ecx
f0111f39:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111f3b:	8d 95 1d ff ff ff    	lea    -0xe3(%ebp),%edx
f0111f41:	b9 57 00 00 00       	mov    $0x57,%ecx
f0111f46:	b0 00                	mov    $0x0,%al
f0111f48:	89 d7                	mov    %edx,%edi
f0111f4a:	f3 aa                	rep stos %al,%es:(%edi)
f0111f4c:	83 ec 0c             	sub    $0xc,%esp
f0111f4f:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0111f55:	50                   	push   %eax
f0111f56:	e8 15 ee fe ff       	call   f0100d70 <execute_command>
f0111f5b:	83 c4 10             	add    $0x10,%esp
	va = 0x2801000;
f0111f5e:	c7 45 dc 00 10 80 02 	movl   $0x2801000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111f65:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111f6a:	83 ec 08             	sub    $0x8,%esp
f0111f6d:	ff 75 dc             	pushl  -0x24(%ebp)
f0111f70:	50                   	push   %eax
f0111f71:	e8 b8 62 ff ff       	call   f010822e <virtual_to_physical>
f0111f76:	83 c4 10             	add    $0x10,%esp
f0111f79:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111f7c:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111f81:	83 ec 08             	sub    $0x8,%esp
f0111f84:	ff 75 dc             	pushl  -0x24(%ebp)
f0111f87:	50                   	push   %eax
f0111f88:	e8 fc 46 00 00       	call   f0116689 <CA>
f0111f8d:	83 c4 10             	add    $0x10,%esp
f0111f90:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111f93:	74 17                	je     f0111fac <test_virtual_to_physical+0x1c3>
		panic("[EVAL] #4 Test of virtual_to_physical Entry Failed.\n");
f0111f95:	83 ec 04             	sub    $0x4,%esp
f0111f98:	68 dc 96 13 f0       	push   $0xf01396dc
f0111f9d:	68 31 01 00 00       	push   $0x131
f0111fa2:	68 de 91 13 f0       	push   $0xf01391de
f0111fa7:	e8 59 e2 fe ff       	call   f0100205 <_panic>

	//============================
	char ap3[100] = "ap 0x2802000";execute_command(ap3);
f0111fac:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f0111fb2:	bb 00 99 13 f0       	mov    $0xf0139900,%ebx
f0111fb7:	ba 0d 00 00 00       	mov    $0xd,%edx
f0111fbc:	89 c7                	mov    %eax,%edi
f0111fbe:	89 de                	mov    %ebx,%esi
f0111fc0:	89 d1                	mov    %edx,%ecx
f0111fc2:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111fc4:	8d 95 b9 fe ff ff    	lea    -0x147(%ebp),%edx
f0111fca:	b9 57 00 00 00       	mov    $0x57,%ecx
f0111fcf:	b0 00                	mov    $0x0,%al
f0111fd1:	89 d7                	mov    %edx,%edi
f0111fd3:	f3 aa                	rep stos %al,%es:(%edi)
f0111fd5:	83 ec 0c             	sub    $0xc,%esp
f0111fd8:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f0111fde:	50                   	push   %eax
f0111fdf:	e8 8c ed fe ff       	call   f0100d70 <execute_command>
f0111fe4:	83 c4 10             	add    $0x10,%esp
	va = 0x2802000;
f0111fe7:	c7 45 dc 00 20 80 02 	movl   $0x2802000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111fee:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111ff3:	83 ec 08             	sub    $0x8,%esp
f0111ff6:	ff 75 dc             	pushl  -0x24(%ebp)
f0111ff9:	50                   	push   %eax
f0111ffa:	e8 2f 62 ff ff       	call   f010822e <virtual_to_physical>
f0111fff:	83 c4 10             	add    $0x10,%esp
f0112002:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0112005:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f011200a:	83 ec 08             	sub    $0x8,%esp
f011200d:	ff 75 dc             	pushl  -0x24(%ebp)
f0112010:	50                   	push   %eax
f0112011:	e8 73 46 00 00       	call   f0116689 <CA>
f0112016:	83 c4 10             	add    $0x10,%esp
f0112019:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011201c:	74 17                	je     f0112035 <test_virtual_to_physical+0x24c>
		panic("[EVAL] #5 Test of virtual_to_physical Entry Failed.\n");
f011201e:	83 ec 04             	sub    $0x4,%esp
f0112021:	68 14 97 13 f0       	push   $0xf0139714
f0112026:	68 3a 01 00 00       	push   $0x13a
f011202b:	68 de 91 13 f0       	push   $0xf01391de
f0112030:	e8 d0 e1 fe ff       	call   f0100205 <_panic>

	//============================
	va = 0xF0001000;
f0112035:	c7 45 dc 00 10 00 f0 	movl   $0xf0001000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f011203c:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0112041:	83 ec 08             	sub    $0x8,%esp
f0112044:	ff 75 dc             	pushl  -0x24(%ebp)
f0112047:	50                   	push   %eax
f0112048:	e8 e1 61 ff ff       	call   f010822e <virtual_to_physical>
f011204d:	83 c4 10             	add    $0x10,%esp
f0112050:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0112053:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0112058:	83 ec 08             	sub    $0x8,%esp
f011205b:	ff 75 dc             	pushl  -0x24(%ebp)
f011205e:	50                   	push   %eax
f011205f:	e8 25 46 00 00       	call   f0116689 <CA>
f0112064:	83 c4 10             	add    $0x10,%esp
f0112067:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011206a:	74 17                	je     f0112083 <test_virtual_to_physical+0x29a>
		panic("[EVAL] #6 Test of virtual_to_physical Entry Failed.\n");
f011206c:	83 ec 04             	sub    $0x4,%esp
f011206f:	68 4c 97 13 f0       	push   $0xf013974c
f0112074:	68 42 01 00 00       	push   $0x142
f0112079:	68 de 91 13 f0       	push   $0xf01391de
f011207e:	e8 82 e1 fe ff       	call   f0100205 <_panic>

	//============================
	va = 0xF0001005;
f0112083:	c7 45 dc 05 10 00 f0 	movl   $0xf0001005,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f011208a:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f011208f:	83 ec 08             	sub    $0x8,%esp
f0112092:	ff 75 dc             	pushl  -0x24(%ebp)
f0112095:	50                   	push   %eax
f0112096:	e8 93 61 ff ff       	call   f010822e <virtual_to_physical>
f011209b:	83 c4 10             	add    $0x10,%esp
f011209e:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f01120a1:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f01120a6:	83 ec 08             	sub    $0x8,%esp
f01120a9:	ff 75 dc             	pushl  -0x24(%ebp)
f01120ac:	50                   	push   %eax
f01120ad:	e8 d7 45 00 00       	call   f0116689 <CA>
f01120b2:	83 c4 10             	add    $0x10,%esp
f01120b5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01120b8:	74 17                	je     f01120d1 <test_virtual_to_physical+0x2e8>
		panic("[EVAL] #7 Test of virtual_to_physical Entry Failed.\n");
f01120ba:	83 ec 04             	sub    $0x4,%esp
f01120bd:	68 84 97 13 f0       	push   $0xf0139784
f01120c2:	68 4a 01 00 00       	push   $0x14a
f01120c7:	68 de 91 13 f0       	push   $0xf01391de
f01120cc:	e8 34 e1 fe ff       	call   f0100205 <_panic>

	//============================
	char ap4[100] = "ap 0xeebfe000";execute_command(ap4);
f01120d1:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f01120d7:	bb 64 99 13 f0       	mov    $0xf0139964,%ebx
f01120dc:	ba 0e 00 00 00       	mov    $0xe,%edx
f01120e1:	89 c7                	mov    %eax,%edi
f01120e3:	89 de                	mov    %ebx,%esi
f01120e5:	89 d1                	mov    %edx,%ecx
f01120e7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01120e9:	8d 95 56 fe ff ff    	lea    -0x1aa(%ebp),%edx
f01120ef:	b9 56 00 00 00       	mov    $0x56,%ecx
f01120f4:	b0 00                	mov    $0x0,%al
f01120f6:	89 d7                	mov    %edx,%edi
f01120f8:	f3 aa                	rep stos %al,%es:(%edi)
f01120fa:	83 ec 0c             	sub    $0xc,%esp
f01120fd:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f0112103:	50                   	push   %eax
f0112104:	e8 67 ec fe ff       	call   f0100d70 <execute_command>
f0112109:	83 c4 10             	add    $0x10,%esp
	va = 0xeebfe000;
f011210c:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0112113:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0112118:	83 ec 08             	sub    $0x8,%esp
f011211b:	ff 75 dc             	pushl  -0x24(%ebp)
f011211e:	50                   	push   %eax
f011211f:	e8 0a 61 ff ff       	call   f010822e <virtual_to_physical>
f0112124:	83 c4 10             	add    $0x10,%esp
f0112127:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f011212a:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f011212f:	83 ec 08             	sub    $0x8,%esp
f0112132:	ff 75 dc             	pushl  -0x24(%ebp)
f0112135:	50                   	push   %eax
f0112136:	e8 4e 45 00 00       	call   f0116689 <CA>
f011213b:	83 c4 10             	add    $0x10,%esp
f011213e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0112141:	74 17                	je     f011215a <test_virtual_to_physical+0x371>
		panic("[EVAL] #8 Test of virtual_to_physical Entry Failed.\n");
f0112143:	83 ec 04             	sub    $0x4,%esp
f0112146:	68 bc 97 13 f0       	push   $0xf01397bc
f011214b:	68 53 01 00 00       	push   $0x153
f0112150:	68 de 91 13 f0       	push   $0xf01391de
f0112155:	e8 ab e0 fe ff       	call   f0100205 <_panic>

	//============================
	cprintf("Congratulations!! test virtual_to_physical completed successfully.\n");
f011215a:	83 ec 0c             	sub    $0xc,%esp
f011215d:	68 f4 97 13 f0       	push   $0xf01397f4
f0112162:	e8 a7 eb fe ff       	call   f0100d0e <cprintf>
f0112167:	83 c4 10             	add    $0x10,%esp

	return 0;
f011216a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011216f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0112172:	5b                   	pop    %ebx
f0112173:	5e                   	pop    %esi
f0112174:	5f                   	pop    %edi
f0112175:	5d                   	pop    %ebp
f0112176:	c3                   	ret    

f0112177 <test_cut_paste_pages>:

//===============================
// 1) TEST CUT-PASTE PAGES:
//===============================
int test_cut_paste_pages()
{
f0112177:	55                   	push   %ebp
f0112178:	89 e5                	mov    %esp,%ebp
f011217a:	57                   	push   %edi
f011217b:	56                   	push   %esi
f011217c:	53                   	push   %ebx
f011217d:	81 ec ec 03 00 00    	sub    $0x3ec,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0112183:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0112189:	bb 78 9c 13 f0       	mov    $0xf0139c78,%ebx
f011218e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112193:	89 c7                	mov    %eax,%edi
f0112195:	89 de                	mov    %ebx,%esi
f0112197:	89 d1                	mov    %edx,%ecx
f0112199:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011219b:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f01121a1:	b9 23 00 00 00       	mov    $0x23,%ecx
f01121a6:	b0 00                	mov    $0x0,%al
f01121a8:	89 d7                	mov    %edx,%edi
f01121aa:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01121ac:	6a 00                	push   $0x0
f01121ae:	6a 0a                	push   $0xa
f01121b0:	6a 14                	push   $0x14
f01121b2:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01121b8:	50                   	push   %eax
f01121b9:	e8 9f 72 ff ff       	call   f010945d <env_create>
f01121be:	83 c4 10             	add    $0x10,%esp
f01121c1:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01121c4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01121c7:	8b 40 5c             	mov    0x5c(%eax),%eax
f01121ca:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f01121cd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01121d0:	8b 40 60             	mov    0x60(%eax),%eax
f01121d3:	89 45 90             	mov    %eax,-0x70(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01121d6:	8b 45 90             	mov    -0x70(%ebp),%eax
f01121d9:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f01121dc:	c7 85 4a ff ff ff 61 	movl   $0x20707561,-0xb6(%ebp)
f01121e3:	75 70 20 
f01121e6:	c7 85 4e ff ff ff 00 	movl   $0x0,-0xb2(%ebp)
f01121ed:	00 00 00 
f01121f0:	8d 95 52 ff ff ff    	lea    -0xae(%ebp),%edx
f01121f6:	b9 03 00 00 00       	mov    $0x3,%ecx
f01121fb:	b8 00 00 00 00       	mov    $0x0,%eax
f0112200:	89 d7                	mov    %edx,%edi
f0112202:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0112204:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112207:	8b 40 4c             	mov    0x4c(%eax),%eax
f011220a:	83 ec 08             	sub    $0x8,%esp
f011220d:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0112213:	52                   	push   %edx
f0112214:	50                   	push   %eax
f0112215:	e8 6f fb 01 00       	call   f0131d89 <ltostr>
f011221a:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f011221d:	83 ec 04             	sub    $0x4,%esp
f0112220:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112226:	50                   	push   %eax
f0112227:	8d 85 36 ff ff ff    	lea    -0xca(%ebp),%eax
f011222d:	50                   	push   %eax
f011222e:	8d 85 4a ff ff ff    	lea    -0xb6(%ebp),%eax
f0112234:	50                   	push   %eax
f0112235:	e8 47 fc 01 00       	call   f0131e81 <strcconcat>
f011223a:	83 c4 10             	add    $0x10,%esp
	//===================================================
	int numOfArgs = 0;
f011223d:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6;
	int kilo = 1024 ;
f0112244:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f011224b:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)

	ClearUserSpace(proc_directory);
f0112252:	83 ec 0c             	sub    $0xc,%esp
f0112255:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112258:	e8 2d 45 00 00       	call   f011678a <ClearUserSpace>
f011225d:	83 c4 10             	add    $0x10,%esp

	char ap1[100] ;strcconcat(aup_cmd, " 0x2800000", ap1); execute_command(ap1);
f0112260:	83 ec 04             	sub    $0x4,%esp
f0112263:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0112269:	50                   	push   %eax
f011226a:	68 c8 99 13 f0       	push   $0xf01399c8
f011226f:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112275:	50                   	push   %eax
f0112276:	e8 06 fc 01 00       	call   f0131e81 <strcconcat>
f011227b:	83 c4 10             	add    $0x10,%esp
f011227e:	83 ec 0c             	sub    $0xc,%esp
f0112281:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0112287:	50                   	push   %eax
f0112288:	e8 e3 ea fe ff       	call   f0100d70 <execute_command>
f011228d:	83 c4 10             	add    $0x10,%esp
	char ap2[100] ;strcconcat(aup_cmd, " 0x2801000", ap2); execute_command(ap2);
f0112290:	83 ec 04             	sub    $0x4,%esp
f0112293:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f0112299:	50                   	push   %eax
f011229a:	68 d3 99 13 f0       	push   $0xf01399d3
f011229f:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01122a5:	50                   	push   %eax
f01122a6:	e8 d6 fb 01 00       	call   f0131e81 <strcconcat>
f01122ab:	83 c4 10             	add    $0x10,%esp
f01122ae:	83 ec 0c             	sub    $0xc,%esp
f01122b1:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f01122b7:	50                   	push   %eax
f01122b8:	e8 b3 ea fe ff       	call   f0100d70 <execute_command>
f01122bd:	83 c4 10             	add    $0x10,%esp
	char ap3[100] ;strcconcat(aup_cmd, " 0x2802000", ap3); execute_command(ap3);
f01122c0:	83 ec 04             	sub    $0x4,%esp
f01122c3:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f01122c9:	50                   	push   %eax
f01122ca:	68 de 99 13 f0       	push   $0xf01399de
f01122cf:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01122d5:	50                   	push   %eax
f01122d6:	e8 a6 fb 01 00       	call   f0131e81 <strcconcat>
f01122db:	83 c4 10             	add    $0x10,%esp
f01122de:	83 ec 0c             	sub    $0xc,%esp
f01122e1:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f01122e7:	50                   	push   %eax
f01122e8:	e8 83 ea fe ff       	call   f0100d70 <execute_command>
f01122ed:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x2800000; *ptr1 = 'a';
f01122f0:	c7 45 c0 00 00 80 02 	movl   $0x2800000,-0x40(%ebp)
f01122f7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01122fa:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x28017FF; *ptr1 = 'b';
f01122fd:	c7 45 c0 ff 17 80 02 	movl   $0x28017ff,-0x40(%ebp)
f0112304:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112307:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x2802FFF; *ptr1 = 'c';
f011230a:	c7 45 c0 ff 2f 80 02 	movl   $0x2802fff,-0x40(%ebp)
f0112311:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112314:	c6 00 63             	movb   $0x63,(%eax)

	uint32 perms = GP(proc_directory, (uint32)ptr1);
f0112317:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011231a:	83 ec 08             	sub    $0x8,%esp
f011231d:	50                   	push   %eax
f011231e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112321:	e8 45 44 00 00       	call   f011676b <GP>
f0112326:	83 c4 10             	add    $0x10,%esp
f0112329:	89 45 bc             	mov    %eax,-0x44(%ebp)

	int eval = 0;
f011232c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int correct = 1;
f0112333:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	int ff1 = sys_calculate_free_frames();
f011233a:	e8 58 ae ff ff       	call   f010d197 <sys_calculate_free_frames>
f011233f:	89 45 b8             	mov    %eax,-0x48(%ebp)

	/*=============================================*/
	/*PART I: Destination Pages Does NOT Exist 60% */
	/*=============================================*/
	cprintf("CASE I: Destination Pages Does NOT Exist [60%]\n") ;
f0112342:	83 ec 0c             	sub    $0xc,%esp
f0112345:	68 ec 99 13 f0       	push   $0xf01399ec
f011234a:	e8 bf e9 fe ff       	call   f0100d0e <cprintf>
f011234f:	83 c4 10             	add    $0x10,%esp
	int ret = cut_paste_pages(proc_directory, 0x2800000, 0x2900000, 3) ;
f0112352:	6a 03                	push   $0x3
f0112354:	68 00 00 90 02       	push   $0x2900000
f0112359:	68 00 00 80 02       	push   $0x2800000
f011235e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112361:	e8 f0 68 ff ff       	call   f0108c56 <cut_paste_pages>
f0112366:	83 c4 10             	add    $0x10,%esp
f0112369:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	int ff2 = sys_calculate_free_frames();
f011236c:	e8 26 ae ff ff       	call   f010d197 <sys_calculate_free_frames>
f0112371:	89 45 b0             	mov    %eax,-0x50(%ebp)

	correct = 1 ;
f0112374:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	if (ret != 0 || ff1 != ff2)
f011237b:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f011237f:	75 08                	jne    f0112389 <test_cut_paste_pages+0x212>
f0112381:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112384:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0112387:	74 2b                	je     f01123b4 <test_cut_paste_pages+0x23d>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112389:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011238c:	2b 45 b0             	sub    -0x50(%ebp),%eax
f011238f:	83 ec 0c             	sub    $0xc,%esp
f0112392:	50                   	push   %eax
f0112393:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112396:	68 1c 9a 13 f0       	push   $0xf0139a1c
f011239b:	68 91 01 00 00       	push   $0x191
f01123a0:	68 de 91 13 f0       	push   $0xf01391de
f01123a5:	e8 69 e0 fe ff       	call   f0100413 <_warn>
f01123aa:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01123ad:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 5 ;
f01123b4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01123b8:	74 04                	je     f01123be <test_cut_paste_pages+0x247>
f01123ba:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f01123be:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2800000, 0x2900000, 3*PAGE_SIZE, 1, perms, 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f01123c5:	83 ec 08             	sub    $0x8,%esp
f01123c8:	6a 00                	push   $0x0
f01123ca:	6a 01                	push   $0x1
f01123cc:	6a 00                	push   $0x0
f01123ce:	68 ff 0f 00 00       	push   $0xfff
f01123d3:	ff 75 bc             	pushl  -0x44(%ebp)
f01123d6:	6a 01                	push   $0x1
f01123d8:	68 00 30 00 00       	push   $0x3000
f01123dd:	68 00 00 90 02       	push   $0x2900000
f01123e2:	68 00 00 80 02       	push   $0x2800000
f01123e7:	ff 75 d4             	pushl  -0x2c(%ebp)
f01123ea:	e8 cf 43 00 00       	call   f01167be <CCP>
f01123ef:	83 c4 30             	add    $0x30,%esp
f01123f2:	83 f8 01             	cmp    $0x1,%eax
f01123f5:	74 21                	je     f0112418 <test_cut_paste_pages+0x2a1>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f01123f7:	83 ec 04             	sub    $0x4,%esp
f01123fa:	68 70 9a 13 f0       	push   $0xf0139a70
f01123ff:	68 99 01 00 00       	push   $0x199
f0112404:	68 de 91 13 f0       	push   $0xf01391de
f0112409:	e8 05 e0 fe ff       	call   f0100413 <_warn>
f011240e:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112411:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 15 ;
f0112418:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011241c:	74 04                	je     f0112422 <test_cut_paste_pages+0x2ab>
f011241e:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	correct = 1 ;
f0112422:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2900000, 0) && CB(proc_directory, 0x2901000, 0) && CB(proc_directory, 0x2902000, 0))
f0112429:	83 ec 04             	sub    $0x4,%esp
f011242c:	6a 00                	push   $0x0
f011242e:	68 00 00 90 02       	push   $0x2900000
f0112433:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112436:	e8 5f 41 00 00       	call   f011659a <CB>
f011243b:	83 c4 10             	add    $0x10,%esp
f011243e:	85 c0                	test   %eax,%eax
f0112440:	0f 84 f6 00 00 00    	je     f011253c <test_cut_paste_pages+0x3c5>
f0112446:	83 ec 04             	sub    $0x4,%esp
f0112449:	6a 00                	push   $0x0
f011244b:	68 00 10 90 02       	push   $0x2901000
f0112450:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112453:	e8 42 41 00 00       	call   f011659a <CB>
f0112458:	83 c4 10             	add    $0x10,%esp
f011245b:	85 c0                	test   %eax,%eax
f011245d:	0f 84 d9 00 00 00    	je     f011253c <test_cut_paste_pages+0x3c5>
f0112463:	83 ec 04             	sub    $0x4,%esp
f0112466:	6a 00                	push   $0x0
f0112468:	68 00 20 90 02       	push   $0x2902000
f011246d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112470:	e8 25 41 00 00       	call   f011659a <CB>
f0112475:	83 c4 10             	add    $0x10,%esp
f0112478:	85 c0                	test   %eax,%eax
f011247a:	0f 84 bc 00 00 00    	je     f011253c <test_cut_paste_pages+0x3c5>
	{
		ptr1 = (char*)0x2900000;
f0112480:	c7 45 c0 00 00 90 02 	movl   $0x2900000,-0x40(%ebp)
		ptr2 = (char*)0x29017FF;
f0112487:	c7 45 ac ff 17 90 02 	movl   $0x29017ff,-0x54(%ebp)
		ptr3 = (char*)0x2902FFF;
f011248e:	c7 45 a8 ff 2f 90 02 	movl   $0x2902fff,-0x58(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'b' || (*ptr3) != 'c')
f0112495:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112498:	8a 00                	mov    (%eax),%al
f011249a:	3c 61                	cmp    $0x61,%al
f011249c:	75 12                	jne    f01124b0 <test_cut_paste_pages+0x339>
f011249e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01124a1:	8a 00                	mov    (%eax),%al
f01124a3:	3c 62                	cmp    $0x62,%al
f01124a5:	75 09                	jne    f01124b0 <test_cut_paste_pages+0x339>
f01124a7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01124aa:	8a 00                	mov    (%eax),%al
f01124ac:	3c 63                	cmp    $0x63,%al
f01124ae:	74 21                	je     f01124d1 <test_cut_paste_pages+0x35a>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01124b0:	83 ec 04             	sub    $0x4,%esp
f01124b3:	68 bc 9a 13 f0       	push   $0xf0139abc
f01124b8:	68 a6 01 00 00       	push   $0x1a6
f01124bd:	68 de 91 13 f0       	push   $0xf01391de
f01124c2:	e8 4c df fe ff       	call   f0100413 <_warn>
f01124c7:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01124ca:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01124d1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01124d5:	74 04                	je     f01124db <test_cut_paste_pages+0x364>
f01124d7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01124db:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CB(proc_directory, 0x2901000, 1))
f01124e2:	83 ec 04             	sub    $0x4,%esp
f01124e5:	6a 01                	push   $0x1
f01124e7:	68 00 10 90 02       	push   $0x2901000
f01124ec:	ff 75 d4             	pushl  -0x2c(%ebp)
f01124ef:	e8 a6 40 00 00       	call   f011659a <CB>
f01124f4:	83 c4 10             	add    $0x10,%esp
f01124f7:	85 c0                	test   %eax,%eax
f01124f9:	74 41                	je     f011253c <test_cut_paste_pages+0x3c5>
		{
			*ptr2 = 'y';
f01124fb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01124fe:	c6 00 79             	movb   $0x79,(%eax)
			if ((*ptr2) != 'y')
f0112501:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112504:	8a 00                	mov    (%eax),%al
f0112506:	3c 79                	cmp    $0x79,%al
f0112508:	74 21                	je     f011252b <test_cut_paste_pages+0x3b4>
			{
				warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011250a:	83 ec 04             	sub    $0x4,%esp
f011250d:	68 bc 9a 13 f0       	push   $0xf0139abc
f0112512:	68 b1 01 00 00       	push   $0x1b1
f0112517:	68 de 91 13 f0       	push   $0xf01391de
f011251c:	e8 f2 de fe ff       	call   f0100413 <_warn>
f0112521:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112524:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f011252b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011252f:	74 04                	je     f0112535 <test_cut_paste_pages+0x3be>
f0112531:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0112535:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}


	ff1 = ff2 ;
f011253c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011253f:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x2901000, 0x2BFF000, 2) ;
f0112542:	6a 02                	push   $0x2
f0112544:	68 00 f0 bf 02       	push   $0x2bff000
f0112549:	68 00 10 90 02       	push   $0x2901000
f011254e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112551:	e8 00 67 ff ff       	call   f0108c56 <cut_paste_pages>
f0112556:	83 c4 10             	add    $0x10,%esp
f0112559:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f011255c:	e8 36 ac ff ff       	call   f010d197 <sys_calculate_free_frames>
f0112561:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != 0 || ff1 - ff2 != 1)
f0112564:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0112568:	75 0b                	jne    f0112575 <test_cut_paste_pages+0x3fe>
f011256a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011256d:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112570:	83 f8 01             	cmp    $0x1,%eax
f0112573:	74 2b                	je     f01125a0 <test_cut_paste_pages+0x429>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112575:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112578:	2b 45 b0             	sub    -0x50(%ebp),%eax
f011257b:	83 ec 0c             	sub    $0xc,%esp
f011257e:	50                   	push   %eax
f011257f:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112582:	68 1c 9a 13 f0       	push   $0xf0139a1c
f0112587:	68 c2 01 00 00       	push   $0x1c2
f011258c:	68 de 91 13 f0       	push   $0xf01391de
f0112591:	e8 7d de fe ff       	call   f0100413 <_warn>
f0112596:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112599:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f01125a0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01125a4:	74 04                	je     f01125aa <test_cut_paste_pages+0x433>
f01125a6:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f01125aa:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2901000, 0x2BFF000, 2*PAGE_SIZE, 1, perms , 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f01125b1:	83 ec 08             	sub    $0x8,%esp
f01125b4:	6a 00                	push   $0x0
f01125b6:	6a 01                	push   $0x1
f01125b8:	6a 00                	push   $0x0
f01125ba:	68 ff 0f 00 00       	push   $0xfff
f01125bf:	ff 75 bc             	pushl  -0x44(%ebp)
f01125c2:	6a 01                	push   $0x1
f01125c4:	68 00 20 00 00       	push   $0x2000
f01125c9:	68 00 f0 bf 02       	push   $0x2bff000
f01125ce:	68 00 10 90 02       	push   $0x2901000
f01125d3:	ff 75 d4             	pushl  -0x2c(%ebp)
f01125d6:	e8 e3 41 00 00       	call   f01167be <CCP>
f01125db:	83 c4 30             	add    $0x30,%esp
f01125de:	83 f8 01             	cmp    $0x1,%eax
f01125e1:	74 21                	je     f0112604 <test_cut_paste_pages+0x48d>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f01125e3:	83 ec 04             	sub    $0x4,%esp
f01125e6:	68 70 9a 13 f0       	push   $0xf0139a70
f01125eb:	68 ca 01 00 00       	push   $0x1ca
f01125f0:	68 de 91 13 f0       	push   $0xf01391de
f01125f5:	e8 19 de fe ff       	call   f0100413 <_warn>
f01125fa:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01125fd:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112604:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112608:	74 04                	je     f011260e <test_cut_paste_pages+0x497>
f011260a:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f011260e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2BFF7FF, 0) && CB(proc_directory, 0x2C00FFF, 0))
f0112615:	83 ec 04             	sub    $0x4,%esp
f0112618:	6a 00                	push   $0x0
f011261a:	68 ff f7 bf 02       	push   $0x2bff7ff
f011261f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112622:	e8 73 3f 00 00       	call   f011659a <CB>
f0112627:	83 c4 10             	add    $0x10,%esp
f011262a:	85 c0                	test   %eax,%eax
f011262c:	74 6b                	je     f0112699 <test_cut_paste_pages+0x522>
f011262e:	83 ec 04             	sub    $0x4,%esp
f0112631:	6a 00                	push   $0x0
f0112633:	68 ff 0f c0 02       	push   $0x2c00fff
f0112638:	ff 75 d4             	pushl  -0x2c(%ebp)
f011263b:	e8 5a 3f 00 00       	call   f011659a <CB>
f0112640:	83 c4 10             	add    $0x10,%esp
f0112643:	85 c0                	test   %eax,%eax
f0112645:	74 52                	je     f0112699 <test_cut_paste_pages+0x522>
	{
		ptr1 = (char*)0x2BFF7FF;
f0112647:	c7 45 c0 ff f7 bf 02 	movl   $0x2bff7ff,-0x40(%ebp)
		ptr2 = (char*)0x2C00FFF;
f011264e:	c7 45 ac ff 0f c0 02 	movl   $0x2c00fff,-0x54(%ebp)
		if ((*ptr1) != 'y' || (*ptr2) != 'c')
f0112655:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112658:	8a 00                	mov    (%eax),%al
f011265a:	3c 79                	cmp    $0x79,%al
f011265c:	75 09                	jne    f0112667 <test_cut_paste_pages+0x4f0>
f011265e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112661:	8a 00                	mov    (%eax),%al
f0112663:	3c 63                	cmp    $0x63,%al
f0112665:	74 21                	je     f0112688 <test_cut_paste_pages+0x511>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112667:	83 ec 04             	sub    $0x4,%esp
f011266a:	68 bc 9a 13 f0       	push   $0xf0139abc
f011266f:	68 d6 01 00 00       	push   $0x1d6
f0112674:	68 de 91 13 f0       	push   $0xf01391de
f0112679:	e8 95 dd fe ff       	call   f0100413 <_warn>
f011267e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112681:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112688:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011268c:	74 04                	je     f0112692 <test_cut_paste_pages+0x51b>
f011268e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112692:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}
	cprintf("CASE I: END\n") ;
f0112699:	83 ec 0c             	sub    $0xc,%esp
f011269c:	68 f5 9a 13 f0       	push   $0xf0139af5
f01126a1:	e8 68 e6 fe ff       	call   f0100d0e <cprintf>
f01126a6:	83 c4 10             	add    $0x10,%esp

	/*========================================*/
	/*PART II: Destination Pages Exist 40%	  */
	/*========================================*/
	cprintf("\nCASE II: Destination Pages Exist [40%]\n") ;
f01126a9:	83 ec 0c             	sub    $0xc,%esp
f01126ac:	68 04 9b 13 f0       	push   $0xf0139b04
f01126b1:	e8 58 e6 fe ff       	call   f0100d0e <cprintf>
f01126b6:	83 c4 10             	add    $0x10,%esp

	char ap4[100] ;strcconcat(aup_cmd, " 0x1400000", ap4); execute_command(ap4);
f01126b9:	83 ec 04             	sub    $0x4,%esp
f01126bc:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f01126c2:	50                   	push   %eax
f01126c3:	68 2d 9b 13 f0       	push   $0xf0139b2d
f01126c8:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01126ce:	50                   	push   %eax
f01126cf:	e8 ad f7 01 00       	call   f0131e81 <strcconcat>
f01126d4:	83 c4 10             	add    $0x10,%esp
f01126d7:	83 ec 0c             	sub    $0xc,%esp
f01126da:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f01126e0:	50                   	push   %eax
f01126e1:	e8 8a e6 fe ff       	call   f0100d70 <execute_command>
f01126e6:	83 c4 10             	add    $0x10,%esp
	char ap5[100] ;strcconcat(aup_cmd, " 0x1401000", ap5); execute_command(ap5);
f01126e9:	83 ec 04             	sub    $0x4,%esp
f01126ec:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f01126f2:	50                   	push   %eax
f01126f3:	68 38 9b 13 f0       	push   $0xf0139b38
f01126f8:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01126fe:	50                   	push   %eax
f01126ff:	e8 7d f7 01 00       	call   f0131e81 <strcconcat>
f0112704:	83 c4 10             	add    $0x10,%esp
f0112707:	83 ec 0c             	sub    $0xc,%esp
f011270a:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0112710:	50                   	push   %eax
f0112711:	e8 5a e6 fe ff       	call   f0100d70 <execute_command>
f0112716:	83 c4 10             	add    $0x10,%esp
	char ap6[100] ;strcconcat(aup_cmd, " 0x1402000", ap6); execute_command(ap6);
f0112719:	83 ec 04             	sub    $0x4,%esp
f011271c:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0112722:	50                   	push   %eax
f0112723:	68 43 9b 13 f0       	push   $0xf0139b43
f0112728:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011272e:	50                   	push   %eax
f011272f:	e8 4d f7 01 00       	call   f0131e81 <strcconcat>
f0112734:	83 c4 10             	add    $0x10,%esp
f0112737:	83 ec 0c             	sub    $0xc,%esp
f011273a:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0112740:	50                   	push   %eax
f0112741:	e8 2a e6 fe ff       	call   f0100d70 <execute_command>
f0112746:	83 c4 10             	add    $0x10,%esp
	char ap7[100] ;strcconcat(aup_cmd, " 0x1C00000", ap7); execute_command(ap7);
f0112749:	83 ec 04             	sub    $0x4,%esp
f011274c:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0112752:	50                   	push   %eax
f0112753:	68 4e 9b 13 f0       	push   $0xf0139b4e
f0112758:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011275e:	50                   	push   %eax
f011275f:	e8 1d f7 01 00       	call   f0131e81 <strcconcat>
f0112764:	83 c4 10             	add    $0x10,%esp
f0112767:	83 ec 0c             	sub    $0xc,%esp
f011276a:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0112770:	50                   	push   %eax
f0112771:	e8 fa e5 fe ff       	call   f0100d70 <execute_command>
f0112776:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x1400000; *ptr1 = 'a';
f0112779:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
f0112780:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112783:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x14007FF; *ptr1 = 'b';
f0112786:	c7 45 c0 ff 07 40 01 	movl   $0x14007ff,-0x40(%ebp)
f011278d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112790:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x1400FFF; *ptr1 = 'c';
f0112793:	c7 45 c0 ff 0f 40 01 	movl   $0x1400fff,-0x40(%ebp)
f011279a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011279d:	c6 00 63             	movb   $0x63,(%eax)
	ptr1 = (char*)0x1C00000; *ptr1 = 'x';
f01127a0:	c7 45 c0 00 00 c0 01 	movl   $0x1c00000,-0x40(%ebp)
f01127a7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01127aa:	c6 00 78             	movb   $0x78,(%eax)
	ptr1 = (char*)0x1C007FF; *ptr1 = 'y';
f01127ad:	c7 45 c0 ff 07 c0 01 	movl   $0x1c007ff,-0x40(%ebp)
f01127b4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01127b7:	c6 00 79             	movb   $0x79,(%eax)
	ptr1 = (char*)0x1C00FFF; *ptr1 = 'z';
f01127ba:	c7 45 c0 ff 0f c0 01 	movl   $0x1c00fff,-0x40(%ebp)
f01127c1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01127c4:	c6 00 7a             	movb   $0x7a,(%eax)
	uint32 srcp = GP(proc_directory, 0x1C00000) ;
f01127c7:	83 ec 08             	sub    $0x8,%esp
f01127ca:	68 00 00 c0 01       	push   $0x1c00000
f01127cf:	ff 75 d4             	pushl  -0x2c(%ebp)
f01127d2:	e8 94 3f 00 00       	call   f011676b <GP>
f01127d7:	83 c4 10             	add    $0x10,%esp
f01127da:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	uint32 dstp = GP(proc_directory, 0x1400000) ;
f01127dd:	83 ec 08             	sub    $0x8,%esp
f01127e0:	68 00 00 40 01       	push   $0x1400000
f01127e5:	ff 75 d4             	pushl  -0x2c(%ebp)
f01127e8:	e8 7e 3f 00 00       	call   f011676b <GP>
f01127ed:	83 c4 10             	add    $0x10,%esp
f01127f0:	89 45 a0             	mov    %eax,-0x60(%ebp)

	ff1 = sys_calculate_free_frames();
f01127f3:	e8 9f a9 ff ff       	call   f010d197 <sys_calculate_free_frames>
f01127f8:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1C00000, 0x1400000, 1) ;
f01127fb:	6a 01                	push   $0x1
f01127fd:	68 00 00 40 01       	push   $0x1400000
f0112802:	68 00 00 c0 01       	push   $0x1c00000
f0112807:	ff 75 d4             	pushl  -0x2c(%ebp)
f011280a:	e8 47 64 ff ff       	call   f0108c56 <cut_paste_pages>
f011280f:	83 c4 10             	add    $0x10,%esp
f0112812:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0112815:	e8 7d a9 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011281a:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f011281d:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0112821:	75 08                	jne    f011282b <test_cut_paste_pages+0x6b4>
f0112823:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112826:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0112829:	74 2b                	je     f0112856 <test_cut_paste_pages+0x6df>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f011282b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011282e:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112831:	83 ec 0c             	sub    $0xc,%esp
f0112834:	50                   	push   %eax
f0112835:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112838:	68 5c 9b 13 f0       	push   $0xf0139b5c
f011283d:	68 f9 01 00 00       	push   $0x1f9
f0112842:	68 de 91 13 f0       	push   $0xf01391de
f0112847:	e8 c7 db fe ff       	call   f0100413 <_warn>
f011284c:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f011284f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112856:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011285a:	74 04                	je     f0112860 <test_cut_paste_pages+0x6e9>
f011285c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112860:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	int chk_cntnt = 1 ;
f0112867:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CCP(proc_directory, 0x1C00000, 0x1400000, 1*PAGE_SIZE, 1, dstp , 0xFFF, srcp, 0xFFF, CHK_CUT_PASTE) != 1)
f011286e:	83 ec 08             	sub    $0x8,%esp
f0112871:	6a 00                	push   $0x0
f0112873:	68 ff 0f 00 00       	push   $0xfff
f0112878:	ff 75 a4             	pushl  -0x5c(%ebp)
f011287b:	68 ff 0f 00 00       	push   $0xfff
f0112880:	ff 75 a0             	pushl  -0x60(%ebp)
f0112883:	6a 01                	push   $0x1
f0112885:	68 00 10 00 00       	push   $0x1000
f011288a:	68 00 00 40 01       	push   $0x1400000
f011288f:	68 00 00 c0 01       	push   $0x1c00000
f0112894:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112897:	e8 22 3f 00 00       	call   f01167be <CCP>
f011289c:	83 c4 30             	add    $0x30,%esp
f011289f:	83 f8 01             	cmp    $0x1,%eax
f01128a2:	74 28                	je     f01128cc <test_cut_paste_pages+0x755>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f01128a4:	83 ec 04             	sub    $0x4,%esp
f01128a7:	68 70 9a 13 f0       	push   $0xf0139a70
f01128ac:	68 02 02 00 00       	push   $0x202
f01128b1:	68 de 91 13 f0       	push   $0xf01391de
f01128b6:	e8 58 db fe ff       	call   f0100413 <_warn>
f01128bb:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01128be:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f01128c5:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f01128cc:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01128d0:	74 04                	je     f01128d6 <test_cut_paste_pages+0x75f>
f01128d2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f01128d6:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f01128dd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01128e1:	0f 84 92 00 00 00    	je     f0112979 <test_cut_paste_pages+0x802>
	{
		ptr1 = (char*)0x1400000;
f01128e7:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f01128ee:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f01128f5:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f01128fc:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0112903:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f011290a:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112911:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112914:	8a 00                	mov    (%eax),%al
f0112916:	3c 61                	cmp    $0x61,%al
f0112918:	75 2d                	jne    f0112947 <test_cut_paste_pages+0x7d0>
f011291a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011291d:	8a 00                	mov    (%eax),%al
f011291f:	3c 78                	cmp    $0x78,%al
f0112921:	75 24                	jne    f0112947 <test_cut_paste_pages+0x7d0>
f0112923:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112926:	8a 00                	mov    (%eax),%al
f0112928:	3c 62                	cmp    $0x62,%al
f011292a:	75 1b                	jne    f0112947 <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f011292c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011292f:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112931:	3c 79                	cmp    $0x79,%al
f0112933:	75 12                	jne    f0112947 <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112935:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112938:	8a 00                	mov    (%eax),%al
f011293a:	3c 63                	cmp    $0x63,%al
f011293c:	75 09                	jne    f0112947 <test_cut_paste_pages+0x7d0>
f011293e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112941:	8a 00                	mov    (%eax),%al
f0112943:	3c 7a                	cmp    $0x7a,%al
f0112945:	74 21                	je     f0112968 <test_cut_paste_pages+0x7f1>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112947:	83 ec 04             	sub    $0x4,%esp
f011294a:	68 bc 9a 13 f0       	push   $0xf0139abc
f011294f:	68 14 02 00 00       	push   $0x214
f0112954:	68 de 91 13 f0       	push   $0xf01391de
f0112959:	e8 b5 da fe ff       	call   f0100413 <_warn>
f011295e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112961:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112968:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011296c:	74 04                	je     f0112972 <test_cut_paste_pages+0x7fb>
f011296e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112972:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	ff1 = sys_calculate_free_frames();
f0112979:	e8 19 a8 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011297e:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1400000, 0x1BFF000, 3) ;
f0112981:	6a 03                	push   $0x3
f0112983:	68 00 f0 bf 01       	push   $0x1bff000
f0112988:	68 00 00 40 01       	push   $0x1400000
f011298d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112990:	e8 c1 62 ff ff       	call   f0108c56 <cut_paste_pages>
f0112995:	83 c4 10             	add    $0x10,%esp
f0112998:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f011299b:	e8 f7 a7 ff ff       	call   f010d197 <sys_calculate_free_frames>
f01129a0:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f01129a3:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f01129a7:	75 08                	jne    f01129b1 <test_cut_paste_pages+0x83a>
f01129a9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01129ac:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01129af:	74 2b                	je     f01129dc <test_cut_paste_pages+0x865>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f01129b1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01129b4:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01129b7:	83 ec 0c             	sub    $0xc,%esp
f01129ba:	50                   	push   %eax
f01129bb:	ff 75 b4             	pushl  -0x4c(%ebp)
f01129be:	68 5c 9b 13 f0       	push   $0xf0139b5c
f01129c3:	68 23 02 00 00       	push   $0x223
f01129c8:	68 de 91 13 f0       	push   $0xf01391de
f01129cd:	e8 41 da fe ff       	call   f0100413 <_warn>
f01129d2:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01129d5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f01129dc:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01129e0:	74 04                	je     f01129e6 <test_cut_paste_pages+0x86f>
f01129e2:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f01129e6:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	chk_cntnt = 1;
f01129ed:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f01129f4:	83 ec 04             	sub    $0x4,%esp
f01129f7:	6a 00                	push   $0x0
f01129f9:	68 00 00 40 01       	push   $0x1400000
f01129fe:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112a01:	e8 94 3b 00 00       	call   f011659a <CB>
f0112a06:	83 c4 10             	add    $0x10,%esp
f0112a09:	83 f8 01             	cmp    $0x1,%eax
f0112a0c:	0f 85 80 00 00 00    	jne    f0112a92 <test_cut_paste_pages+0x91b>
f0112a12:	83 ec 04             	sub    $0x4,%esp
f0112a15:	6a 00                	push   $0x0
f0112a17:	68 00 10 40 01       	push   $0x1401000
f0112a1c:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112a1f:	e8 76 3b 00 00       	call   f011659a <CB>
f0112a24:	83 c4 10             	add    $0x10,%esp
f0112a27:	83 f8 01             	cmp    $0x1,%eax
f0112a2a:	75 66                	jne    f0112a92 <test_cut_paste_pages+0x91b>
f0112a2c:	83 ec 04             	sub    $0x4,%esp
f0112a2f:	6a 00                	push   $0x0
f0112a31:	68 00 20 40 01       	push   $0x1402000
f0112a36:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112a39:	e8 5c 3b 00 00       	call   f011659a <CB>
f0112a3e:	83 c4 10             	add    $0x10,%esp
f0112a41:	83 f8 01             	cmp    $0x1,%eax
f0112a44:	75 4c                	jne    f0112a92 <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0112a46:	83 ec 04             	sub    $0x4,%esp
f0112a49:	6a 00                	push   $0x0
f0112a4b:	68 00 f0 bf 01       	push   $0x1bff000
f0112a50:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112a53:	e8 42 3b 00 00       	call   f011659a <CB>
f0112a58:	83 c4 10             	add    $0x10,%esp
		correct = 0;
	}
	if (correct) eval += 10 ;
	correct = 1 ;
	chk_cntnt = 1;
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0112a5b:	85 c0                	test   %eax,%eax
f0112a5d:	75 33                	jne    f0112a92 <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0112a5f:	83 ec 04             	sub    $0x4,%esp
f0112a62:	6a 00                	push   $0x0
f0112a64:	68 00 00 c0 01       	push   $0x1c00000
f0112a69:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112a6c:	e8 29 3b 00 00       	call   f011659a <CB>
f0112a71:	83 c4 10             	add    $0x10,%esp
f0112a74:	83 f8 01             	cmp    $0x1,%eax
f0112a77:	75 19                	jne    f0112a92 <test_cut_paste_pages+0x91b>
f0112a79:	83 ec 04             	sub    $0x4,%esp
f0112a7c:	6a 00                	push   $0x0
f0112a7e:	68 00 10 c0 01       	push   $0x1c01000
f0112a83:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112a86:	e8 0f 3b 00 00       	call   f011659a <CB>
f0112a8b:	83 c4 10             	add    $0x10,%esp
f0112a8e:	85 c0                	test   %eax,%eax
f0112a90:	74 28                	je     f0112aba <test_cut_paste_pages+0x943>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions)\n");
f0112a92:	83 ec 04             	sub    $0x4,%esp
f0112a95:	68 bc 9b 13 f0       	push   $0xf0139bbc
f0112a9a:	68 2c 02 00 00       	push   $0x22c
f0112a9f:	68 de 91 13 f0       	push   $0xf01391de
f0112aa4:	e8 6a d9 fe ff       	call   f0100413 <_warn>
f0112aa9:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112aac:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0112ab3:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0112aba:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112abe:	74 04                	je     f0112ac4 <test_cut_paste_pages+0x94d>
f0112ac0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0112ac4:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0112acb:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112acf:	0f 84 99 00 00 00    	je     f0112b6e <test_cut_paste_pages+0x9f7>
	{
		ptr1 = (char*)0x1400000;
f0112ad5:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0112adc:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0112ae3:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0112aea:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0112af1:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0112af8:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112aff:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112b02:	8a 00                	mov    (%eax),%al
f0112b04:	3c 61                	cmp    $0x61,%al
f0112b06:	75 2d                	jne    f0112b35 <test_cut_paste_pages+0x9be>
f0112b08:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112b0b:	8a 00                	mov    (%eax),%al
f0112b0d:	3c 78                	cmp    $0x78,%al
f0112b0f:	75 24                	jne    f0112b35 <test_cut_paste_pages+0x9be>
f0112b11:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112b14:	8a 00                	mov    (%eax),%al
f0112b16:	3c 62                	cmp    $0x62,%al
f0112b18:	75 1b                	jne    f0112b35 <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112b1a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112b1d:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112b1f:	3c 79                	cmp    $0x79,%al
f0112b21:	75 12                	jne    f0112b35 <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112b23:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112b26:	8a 00                	mov    (%eax),%al
f0112b28:	3c 63                	cmp    $0x63,%al
f0112b2a:	75 09                	jne    f0112b35 <test_cut_paste_pages+0x9be>
f0112b2c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112b2f:	8a 00                	mov    (%eax),%al
f0112b31:	3c 7a                	cmp    $0x7a,%al
f0112b33:	74 28                	je     f0112b5d <test_cut_paste_pages+0x9e6>
		{
			correct = 0;
f0112b35:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chk_cntnt = 0;
f0112b3c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112b43:	83 ec 04             	sub    $0x4,%esp
f0112b46:	68 bc 9a 13 f0       	push   $0xf0139abc
f0112b4b:	68 40 02 00 00       	push   $0x240
f0112b50:	68 de 91 13 f0       	push   $0xf01391de
f0112b55:	e8 b9 d8 fe ff       	call   f0100413 <_warn>
f0112b5a:	83 c4 10             	add    $0x10,%esp
		}
		if (correct) eval += 5 ;
f0112b5d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112b61:	74 04                	je     f0112b67 <test_cut_paste_pages+0x9f0>
f0112b63:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112b67:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	cprintf("CASE II: END\n") ;
f0112b6e:	83 ec 0c             	sub    $0xc,%esp
f0112b71:	68 f5 9b 13 f0       	push   $0xf0139bf5
f0112b76:	e8 93 e1 fe ff       	call   f0100d0e <cprintf>
f0112b7b:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] cut_paste_pages: FINISHED. Evaluation = %d\n", eval);
f0112b7e:	83 ec 08             	sub    $0x8,%esp
f0112b81:	ff 75 e4             	pushl  -0x1c(%ebp)
f0112b84:	68 04 9c 13 f0       	push   $0xf0139c04
f0112b89:	e8 80 e1 fe ff       	call   f0100d0e <cprintf>
f0112b8e:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0112b91:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0112b95:	75 10                	jne    f0112ba7 <test_cut_paste_pages+0xa30>
		cprintf("Congratulations!! test cut_paste_pages completed successfully.\n");
f0112b97:	83 ec 0c             	sub    $0xc,%esp
f0112b9a:	68 38 9c 13 f0       	push   $0xf0139c38
f0112b9f:	e8 6a e1 fe ff       	call   f0100d0e <cprintf>
f0112ba4:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0112ba7:	a1 ac ad 89 f0       	mov    0xf089adac,%eax
f0112bac:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0112baf:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112bb2:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0112bb5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112bba:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0112bbd:	5b                   	pop    %ebx
f0112bbe:	5e                   	pop    %esi
f0112bbf:	5f                   	pop    %edi
f0112bc0:	5d                   	pop    %ebp
f0112bc1:	c3                   	ret    

f0112bc2 <test_copy_paste_chunk>:

//===============================
// 2) TEST COPY-PASTE CHUNK:
//===============================
int test_copy_paste_chunk()
{
f0112bc2:	55                   	push   %ebp
f0112bc3:	89 e5                	mov    %esp,%ebp
f0112bc5:	57                   	push   %edi
f0112bc6:	56                   	push   %esi
f0112bc7:	53                   	push   %ebx
f0112bc8:	81 ec ac 05 00 00    	sub    $0x5ac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0112bce:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0112bd4:	bb 78 9c 13 f0       	mov    $0xf0139c78,%ebx
f0112bd9:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112bde:	89 c7                	mov    %eax,%edi
f0112be0:	89 de                	mov    %ebx,%esi
f0112be2:	89 d1                	mov    %edx,%ecx
f0112be4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112be6:	8d 95 51 ff ff ff    	lea    -0xaf(%ebp),%edx
f0112bec:	b9 23 00 00 00       	mov    $0x23,%ecx
f0112bf1:	b0 00                	mov    $0x0,%al
f0112bf3:	89 d7                	mov    %edx,%edi
f0112bf5:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0112bf7:	6a 00                	push   $0x0
f0112bf9:	6a 0a                	push   $0xa
f0112bfb:	6a 14                	push   $0x14
f0112bfd:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0112c03:	50                   	push   %eax
f0112c04:	e8 54 68 ff ff       	call   f010945d <env_create>
f0112c09:	83 c4 10             	add    $0x10,%esp
f0112c0c:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0112c0f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112c12:	8b 40 5c             	mov    0x5c(%eax),%eax
f0112c15:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0112c18:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112c1b:	8b 40 60             	mov    0x60(%eax),%eax
f0112c1e:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0112c24:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0112c2a:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0112c2d:	c7 85 2e ff ff ff 61 	movl   $0x20707561,-0xd2(%ebp)
f0112c34:	75 70 20 
f0112c37:	c7 85 32 ff ff ff 00 	movl   $0x0,-0xce(%ebp)
f0112c3e:	00 00 00 
f0112c41:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0112c47:	b9 03 00 00 00       	mov    $0x3,%ecx
f0112c4c:	b8 00 00 00 00       	mov    $0x0,%eax
f0112c51:	89 d7                	mov    %edx,%edi
f0112c53:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0112c55:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112c58:	8b 40 4c             	mov    0x4c(%eax),%eax
f0112c5b:	83 ec 08             	sub    $0x8,%esp
f0112c5e:	8d 95 1a ff ff ff    	lea    -0xe6(%ebp),%edx
f0112c64:	52                   	push   %edx
f0112c65:	50                   	push   %eax
f0112c66:	e8 1e f1 01 00       	call   f0131d89 <ltostr>
f0112c6b:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0112c6e:	83 ec 04             	sub    $0x4,%esp
f0112c71:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112c77:	50                   	push   %eax
f0112c78:	8d 85 1a ff ff ff    	lea    -0xe6(%ebp),%eax
f0112c7e:	50                   	push   %eax
f0112c7f:	8d 85 2e ff ff ff    	lea    -0xd2(%ebp),%eax
f0112c85:	50                   	push   %eax
f0112c86:	e8 f6 f1 01 00       	call   f0131e81 <strcconcat>
f0112c8b:	83 c4 10             	add    $0x10,%esp
	//===================================================

	ClearUserSpace(proc_directory);
f0112c8e:	83 ec 0c             	sub    $0xc,%esp
f0112c91:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112c94:	e8 f1 3a 00 00       	call   f011678a <ClearUserSpace>
f0112c99:	83 c4 10             	add    $0x10,%esp
	int numOfArgs = 0;
f0112c9c:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;
	uint32 res =0;
f0112ca3:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 eval = 0; int correct = 1 ;
f0112caa:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0112cb1:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter ;
	char *ch1, *ch2, *ch3, *ch4, *ch5, *ch6, *ch7,*ch8, *ch9, *ch10, *ch11, *ch12 ;
	char tch[13];
	int kilo = 1024 ;
f0112cb8:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0112cbf:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	/*==================================================*/
	/*PART I: Destination page(s) exist & read only 20% */
	/*==================================================*/
	cprintf("\nCASE I: Destination page(s) exist & read only [20%]\n") ;
f0112cc6:	83 ec 0c             	sub    $0xc,%esp
f0112cc9:	68 ac 9c 13 f0       	push   $0xf0139cac
f0112cce:	e8 3b e0 fe ff       	call   f0100d0e <cprintf>
f0112cd3:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0112cd6:	83 ec 04             	sub    $0x4,%esp
f0112cd9:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112cdf:	50                   	push   %eax
f0112ce0:	68 e2 9c 13 f0       	push   $0xf0139ce2
f0112ce5:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112ceb:	50                   	push   %eax
f0112cec:	e8 90 f1 01 00       	call   f0131e81 <strcconcat>
f0112cf1:	83 c4 10             	add    $0x10,%esp
f0112cf4:	83 ec 0c             	sub    $0xc,%esp
f0112cf7:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112cfd:	50                   	push   %eax
f0112cfe:	e8 6d e0 fe ff       	call   f0100d70 <execute_command>
f0112d03:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x1000", c1); execute_command(c1);
f0112d06:	83 ec 04             	sub    $0x4,%esp
f0112d09:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112d0f:	50                   	push   %eax
f0112d10:	68 e7 9c 13 f0       	push   $0xf0139ce7
f0112d15:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112d1b:	50                   	push   %eax
f0112d1c:	e8 60 f1 01 00       	call   f0131e81 <strcconcat>
f0112d21:	83 c4 10             	add    $0x10,%esp
f0112d24:	83 ec 0c             	sub    $0xc,%esp
f0112d27:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112d2d:	50                   	push   %eax
f0112d2e:	e8 3d e0 fe ff       	call   f0100d70 <execute_command>
f0112d33:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x000000 a";execute_command(c2);
f0112d36:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112d3c:	bb ed 9f 13 f0       	mov    $0xf0139fed,%ebx
f0112d41:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112d46:	89 c7                	mov    %eax,%edi
f0112d48:	89 de                	mov    %ebx,%esi
f0112d4a:	89 d1                	mov    %edx,%ecx
f0112d4c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112d4e:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0112d54:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112d59:	b0 00                	mov    $0x0,%al
f0112d5b:	89 d7                	mov    %edx,%edi
f0112d5d:	f3 aa                	rep stos %al,%es:(%edi)
f0112d5f:	83 ec 0c             	sub    $0xc,%esp
f0112d62:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112d68:	50                   	push   %eax
f0112d69:	e8 02 e0 fe ff       	call   f0100d70 <execute_command>
f0112d6e:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x0007FF b";execute_command(c3);
f0112d71:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112d77:	bb 51 a0 13 f0       	mov    $0xf013a051,%ebx
f0112d7c:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112d81:	89 c7                	mov    %eax,%edi
f0112d83:	89 de                	mov    %ebx,%esi
f0112d85:	89 d1                	mov    %edx,%ecx
f0112d87:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112d89:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0112d8f:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112d94:	b0 00                	mov    $0x0,%al
f0112d96:	89 d7                	mov    %edx,%edi
f0112d98:	f3 aa                	rep stos %al,%es:(%edi)
f0112d9a:	83 ec 0c             	sub    $0xc,%esp
f0112d9d:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112da3:	50                   	push   %eax
f0112da4:	e8 c7 df fe ff       	call   f0100d70 <execute_command>
f0112da9:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x000FFF c";execute_command(c4);
f0112dac:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112db2:	bb b5 a0 13 f0       	mov    $0xf013a0b5,%ebx
f0112db7:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112dbc:	89 c7                	mov    %eax,%edi
f0112dbe:	89 de                	mov    %ebx,%esi
f0112dc0:	89 d1                	mov    %edx,%ecx
f0112dc2:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112dc4:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0112dca:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112dcf:	b0 00                	mov    $0x0,%al
f0112dd1:	89 d7                	mov    %edx,%edi
f0112dd3:	f3 aa                	rep stos %al,%es:(%edi)
f0112dd5:	83 ec 0c             	sub    $0xc,%esp
f0112dd8:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112dde:	50                   	push   %eax
f0112ddf:	e8 8c df fe ff       	call   f0100d70 <execute_command>
f0112de4:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x001000 d";execute_command(c22);
f0112de7:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112ded:	bb 19 a1 13 f0       	mov    $0xf013a119,%ebx
f0112df2:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112df7:	89 c7                	mov    %eax,%edi
f0112df9:	89 de                	mov    %ebx,%esi
f0112dfb:	89 d1                	mov    %edx,%ecx
f0112dfd:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112dff:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0112e05:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112e0a:	b0 00                	mov    $0x0,%al
f0112e0c:	89 d7                	mov    %edx,%edi
f0112e0e:	f3 aa                	rep stos %al,%es:(%edi)
f0112e10:	83 ec 0c             	sub    $0xc,%esp
f0112e13:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112e19:	50                   	push   %eax
f0112e1a:	e8 51 df fe ff       	call   f0100d70 <execute_command>
f0112e1f:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x0017FF e";execute_command(c23);
f0112e22:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112e28:	bb 7d a1 13 f0       	mov    $0xf013a17d,%ebx
f0112e2d:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112e32:	89 c7                	mov    %eax,%edi
f0112e34:	89 de                	mov    %ebx,%esi
f0112e36:	89 d1                	mov    %edx,%ecx
f0112e38:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112e3a:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0112e40:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112e45:	b0 00                	mov    $0x0,%al
f0112e47:	89 d7                	mov    %edx,%edi
f0112e49:	f3 aa                	rep stos %al,%es:(%edi)
f0112e4b:	83 ec 0c             	sub    $0xc,%esp
f0112e4e:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112e54:	50                   	push   %eax
f0112e55:	e8 16 df fe ff       	call   f0100d70 <execute_command>
f0112e5a:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x001FFF f";execute_command(c24);
f0112e5d:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112e63:	bb e1 a1 13 f0       	mov    $0xf013a1e1,%ebx
f0112e68:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112e6d:	89 c7                	mov    %eax,%edi
f0112e6f:	89 de                	mov    %ebx,%esi
f0112e71:	89 d1                	mov    %edx,%ecx
f0112e73:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112e75:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0112e7b:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112e80:	b0 00                	mov    $0x0,%al
f0112e82:	89 d7                	mov    %edx,%edi
f0112e84:	f3 aa                	rep stos %al,%es:(%edi)
f0112e86:	83 ec 0c             	sub    $0xc,%esp
f0112e89:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112e8f:	50                   	push   %eax
f0112e90:	e8 db de fe ff       	call   f0100d70 <execute_command>
f0112e95:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x100000", c5); execute_command(c5);
f0112e98:	83 ec 04             	sub    $0x4,%esp
f0112e9b:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112ea1:	50                   	push   %eax
f0112ea2:	68 ef 9c 13 f0       	push   $0xf0139cef
f0112ea7:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112ead:	50                   	push   %eax
f0112eae:	e8 ce ef 01 00       	call   f0131e81 <strcconcat>
f0112eb3:	83 c4 10             	add    $0x10,%esp
f0112eb6:	83 ec 0c             	sub    $0xc,%esp
f0112eb9:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112ebf:	50                   	push   %eax
f0112ec0:	e8 ab de fe ff       	call   f0100d70 <execute_command>
f0112ec5:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x101000 r", c5); execute_command(c5);
f0112ec8:	83 ec 04             	sub    $0x4,%esp
f0112ecb:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112ed1:	50                   	push   %eax
f0112ed2:	68 f9 9c 13 f0       	push   $0xf0139cf9
f0112ed7:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112edd:	50                   	push   %eax
f0112ede:	e8 9e ef 01 00       	call   f0131e81 <strcconcat>
f0112ee3:	83 c4 10             	add    $0x10,%esp
f0112ee6:	83 ec 0c             	sub    $0xc,%esp
f0112ee9:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112eef:	50                   	push   %eax
f0112ef0:	e8 7b de fe ff       	call   f0100d70 <execute_command>
f0112ef5:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x100000 x";execute_command(c6);
f0112ef8:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112efe:	bb 45 a2 13 f0       	mov    $0xf013a245,%ebx
f0112f03:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112f08:	89 c7                	mov    %eax,%edi
f0112f0a:	89 de                	mov    %ebx,%esi
f0112f0c:	89 d1                	mov    %edx,%ecx
f0112f0e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112f10:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0112f16:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112f1b:	b0 00                	mov    $0x0,%al
f0112f1d:	89 d7                	mov    %edx,%edi
f0112f1f:	f3 aa                	rep stos %al,%es:(%edi)
f0112f21:	83 ec 0c             	sub    $0xc,%esp
f0112f24:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112f2a:	50                   	push   %eax
f0112f2b:	e8 40 de fe ff       	call   f0100d70 <execute_command>
f0112f30:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x1007FF y";execute_command(c7);
f0112f33:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112f39:	bb a9 a2 13 f0       	mov    $0xf013a2a9,%ebx
f0112f3e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112f43:	89 c7                	mov    %eax,%edi
f0112f45:	89 de                	mov    %ebx,%esi
f0112f47:	89 d1                	mov    %edx,%ecx
f0112f49:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112f4b:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0112f51:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112f56:	b0 00                	mov    $0x0,%al
f0112f58:	89 d7                	mov    %edx,%edi
f0112f5a:	f3 aa                	rep stos %al,%es:(%edi)
f0112f5c:	83 ec 0c             	sub    $0xc,%esp
f0112f5f:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112f65:	50                   	push   %eax
f0112f66:	e8 05 de fe ff       	call   f0100d70 <execute_command>
f0112f6b:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x100FFF z";execute_command(c8);
f0112f6e:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112f74:	bb 0d a3 13 f0       	mov    $0xf013a30d,%ebx
f0112f79:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112f7e:	89 c7                	mov    %eax,%edi
f0112f80:	89 de                	mov    %ebx,%esi
f0112f82:	89 d1                	mov    %edx,%ecx
f0112f84:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112f86:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0112f8c:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112f91:	b0 00                	mov    $0x0,%al
f0112f93:	89 d7                	mov    %edx,%edi
f0112f95:	f3 aa                	rep stos %al,%es:(%edi)
f0112f97:	83 ec 0c             	sub    $0xc,%esp
f0112f9a:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112fa0:	50                   	push   %eax
f0112fa1:	e8 ca dd fe ff       	call   f0100d70 <execute_command>
f0112fa6:	83 c4 10             	add    $0x10,%esp

		ch1 = (char*)0x000000; ch2 = (char*)0x100000;
f0112fa9:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0112fb0:	c7 45 b8 00 00 10 00 	movl   $0x100000,-0x48(%ebp)
		ch3 = (char*)0x0007FF; ch4 = (char*)0x1007FF;
f0112fb7:	c7 45 b4 ff 07 00 00 	movl   $0x7ff,-0x4c(%ebp)
f0112fbe:	c7 45 b0 ff 07 10 00 	movl   $0x1007ff,-0x50(%ebp)
		ch5 = (char*)0x000FFF; ch6 = (char*)0x100FFF;
f0112fc5:	c7 45 ac ff 0f 00 00 	movl   $0xfff,-0x54(%ebp)
f0112fcc:	c7 45 a8 ff 0f 10 00 	movl   $0x100fff,-0x58(%ebp)
		ch7 = (char*)0x001000; ch8 = (char*)0x101000;
f0112fd3:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0112fda:	c7 45 a0 00 10 10 00 	movl   $0x101000,-0x60(%ebp)
		ch9 = (char*)0x0017FF; ch10= (char*)0x1017FF;
f0112fe1:	c7 45 9c ff 17 00 00 	movl   $0x17ff,-0x64(%ebp)
f0112fe8:	c7 45 98 ff 17 10 00 	movl   $0x1017ff,-0x68(%ebp)
		ch11= (char*)0x001FFF; ch12= (char*)0x101FFF;
f0112fef:	c7 45 94 ff 1f 00 00 	movl   $0x1fff,-0x6c(%ebp)
f0112ff6:	c7 45 90 ff 1f 10 00 	movl   $0x101fff,-0x70(%ebp)

		tch[8] = *ch8 ;tch[10] = *ch10 ;tch[12] = *ch12 ;
f0112ffd:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113000:	8a 00                	mov    (%eax),%al
f0113002:	88 85 a3 fe ff ff    	mov    %al,-0x15d(%ebp)
f0113008:	8b 45 98             	mov    -0x68(%ebp),%eax
f011300b:	8a 00                	mov    (%eax),%al
f011300d:	88 85 a5 fe ff ff    	mov    %al,-0x15b(%ebp)
f0113013:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113016:	8a 00                	mov    (%eax),%al
f0113018:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f011301e:	e8 74 a1 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0113023:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x0, 0x100000, 6*kilo);
f0113026:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113029:	89 d0                	mov    %edx,%eax
f011302b:	01 c0                	add    %eax,%eax
f011302d:	01 d0                	add    %edx,%eax
f011302f:	01 c0                	add    %eax,%eax
f0113031:	50                   	push   %eax
f0113032:	68 00 00 10 00       	push   $0x100000
f0113037:	6a 00                	push   $0x0
f0113039:	ff 75 d4             	pushl  -0x2c(%ebp)
f011303c:	e8 93 5d ff ff       	call   f0108dd4 <copy_paste_chunk>
f0113041:	83 c4 10             	add    $0x10,%esp
f0113044:	89 45 88             	mov    %eax,-0x78(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113047:	e8 4b a1 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011304c:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f011304f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != -1 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0113056:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%ebp)
f011305a:	75 08                	jne    f0113064 <test_copy_paste_chunk+0x4a2>
f011305c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011305f:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0113062:	74 2b                	je     f011308f <test_copy_paste_chunk+0x4cd>
		{
			warn("[EVAL] copy_paste_chunk: Failed (dest is read-only... operation should be denied) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113064:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113067:	2b 45 84             	sub    -0x7c(%ebp),%eax
f011306a:	83 ec 0c             	sub    $0xc,%esp
f011306d:	50                   	push   %eax
f011306e:	ff 75 88             	pushl  -0x78(%ebp)
f0113071:	68 08 9d 13 f0       	push   $0xf0139d08
f0113076:	68 93 02 00 00       	push   $0x293
f011307b:	68 de 91 13 f0       	push   $0xf01391de
f0113080:	e8 8e d3 fe ff       	call   f0100413 <_warn>
f0113085:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113088:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f011308f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113093:	74 04                	je     f0113099 <test_copy_paste_chunk+0x4d7>
f0113095:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113099:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'x' || *ch3 != 'b' || *ch4 != 'y' || *ch5 != 'c' || *ch6 != 'z'
f01130a0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01130a3:	8a 00                	mov    (%eax),%al
f01130a5:	3c 61                	cmp    $0x61,%al
f01130a7:	75 75                	jne    f011311e <test_copy_paste_chunk+0x55c>
f01130a9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01130ac:	8a 00                	mov    (%eax),%al
f01130ae:	3c 78                	cmp    $0x78,%al
f01130b0:	75 6c                	jne    f011311e <test_copy_paste_chunk+0x55c>
f01130b2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01130b5:	8a 00                	mov    (%eax),%al
f01130b7:	3c 62                	cmp    $0x62,%al
f01130b9:	75 63                	jne    f011311e <test_copy_paste_chunk+0x55c>
f01130bb:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01130be:	8a 00                	mov    (%eax),%al
f01130c0:	3c 79                	cmp    $0x79,%al
f01130c2:	75 5a                	jne    f011311e <test_copy_paste_chunk+0x55c>
f01130c4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01130c7:	8a 00                	mov    (%eax),%al
f01130c9:	3c 63                	cmp    $0x63,%al
f01130cb:	75 51                	jne    f011311e <test_copy_paste_chunk+0x55c>
f01130cd:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01130d0:	8a 00                	mov    (%eax),%al
f01130d2:	3c 7a                	cmp    $0x7a,%al
f01130d4:	75 48                	jne    f011311e <test_copy_paste_chunk+0x55c>
				||  *ch7 != 'd' || *ch8 != tch[8] || *ch9 != 'e' || *ch10 != tch[10] || *ch11!= 'f' || *ch12 != tch[12])
f01130d6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01130d9:	8a 00                	mov    (%eax),%al
f01130db:	3c 64                	cmp    $0x64,%al
f01130dd:	75 3f                	jne    f011311e <test_copy_paste_chunk+0x55c>
f01130df:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01130e2:	8a 10                	mov    (%eax),%dl
f01130e4:	8a 85 a3 fe ff ff    	mov    -0x15d(%ebp),%al
f01130ea:	38 c2                	cmp    %al,%dl
f01130ec:	75 30                	jne    f011311e <test_copy_paste_chunk+0x55c>
f01130ee:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01130f1:	8a 00                	mov    (%eax),%al
f01130f3:	3c 65                	cmp    $0x65,%al
f01130f5:	75 27                	jne    f011311e <test_copy_paste_chunk+0x55c>
f01130f7:	8b 45 98             	mov    -0x68(%ebp),%eax
f01130fa:	8a 10                	mov    (%eax),%dl
f01130fc:	8a 85 a5 fe ff ff    	mov    -0x15b(%ebp),%al
f0113102:	38 c2                	cmp    %al,%dl
f0113104:	75 18                	jne    f011311e <test_copy_paste_chunk+0x55c>
f0113106:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113109:	8a 00                	mov    (%eax),%al
f011310b:	3c 66                	cmp    $0x66,%al
f011310d:	75 0f                	jne    f011311e <test_copy_paste_chunk+0x55c>
f011310f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113112:	8a 10                	mov    (%eax),%dl
f0113114:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f011311a:	38 c2                	cmp    %al,%dl
f011311c:	74 21                	je     f011313f <test_copy_paste_chunk+0x57d>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f011311e:	83 ec 04             	sub    $0x4,%esp
f0113121:	68 6c 9d 13 f0       	push   $0xf0139d6c
f0113126:	68 9c 02 00 00       	push   $0x29c
f011312b:	68 de 91 13 f0       	push   $0xf01391de
f0113130:	e8 de d2 fe ff       	call   f0100413 <_warn>
f0113135:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113138:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f011313f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113143:	74 04                	je     f0113149 <test_copy_paste_chunk+0x587>
f0113145:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113149:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE I: END \n") ;
f0113150:	83 ec 0c             	sub    $0xc,%esp
f0113153:	68 a6 9d 13 f0       	push   $0xf0139da6
f0113158:	e8 b1 db fe ff       	call   f0100d0e <cprintf>
f011315d:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: Destination page(s) exist & writable 40% */
	/*==================================================*/
	cprintf("\nCASE II: Destination page(s) exist & writable [40%]\n") ;
f0113160:	83 ec 0c             	sub    $0xc,%esp
f0113163:	68 b8 9d 13 f0       	push   $0xf0139db8
f0113168:	e8 a1 db fe ff       	call   f0100d0e <cprintf>
f011316d:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x200000", c1); execute_command(c1);
f0113170:	83 ec 04             	sub    $0x4,%esp
f0113173:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0113179:	50                   	push   %eax
f011317a:	68 ee 9d 13 f0       	push   $0xf0139dee
f011317f:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113185:	50                   	push   %eax
f0113186:	e8 f6 ec 01 00       	call   f0131e81 <strcconcat>
f011318b:	83 c4 10             	add    $0x10,%esp
f011318e:	83 ec 0c             	sub    $0xc,%esp
f0113191:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0113197:	50                   	push   %eax
f0113198:	e8 d3 db fe ff       	call   f0100d70 <execute_command>
f011319d:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x201000", c1); execute_command(c1);
f01131a0:	83 ec 04             	sub    $0x4,%esp
f01131a3:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01131a9:	50                   	push   %eax
f01131aa:	68 f8 9d 13 f0       	push   $0xf0139df8
f01131af:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01131b5:	50                   	push   %eax
f01131b6:	e8 c6 ec 01 00       	call   f0131e81 <strcconcat>
f01131bb:	83 c4 10             	add    $0x10,%esp
f01131be:	83 ec 0c             	sub    $0xc,%esp
f01131c1:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01131c7:	50                   	push   %eax
f01131c8:	e8 a3 db fe ff       	call   f0100d70 <execute_command>
f01131cd:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x200000 a";execute_command(c2);
f01131d0:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f01131d6:	bb 71 a3 13 f0       	mov    $0xf013a371,%ebx
f01131db:	ba 0f 00 00 00       	mov    $0xf,%edx
f01131e0:	89 c7                	mov    %eax,%edi
f01131e2:	89 de                	mov    %ebx,%esi
f01131e4:	89 d1                	mov    %edx,%ecx
f01131e6:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01131e8:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f01131ee:	b9 55 00 00 00       	mov    $0x55,%ecx
f01131f3:	b0 00                	mov    $0x0,%al
f01131f5:	89 d7                	mov    %edx,%edi
f01131f7:	f3 aa                	rep stos %al,%es:(%edi)
f01131f9:	83 ec 0c             	sub    $0xc,%esp
f01131fc:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0113202:	50                   	push   %eax
f0113203:	e8 68 db fe ff       	call   f0100d70 <execute_command>
f0113208:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x2007FF b";execute_command(c3);
f011320b:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0113211:	bb d5 a3 13 f0       	mov    $0xf013a3d5,%ebx
f0113216:	ba 0f 00 00 00       	mov    $0xf,%edx
f011321b:	89 c7                	mov    %eax,%edi
f011321d:	89 de                	mov    %ebx,%esi
f011321f:	89 d1                	mov    %edx,%ecx
f0113221:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113223:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0113229:	b9 55 00 00 00       	mov    $0x55,%ecx
f011322e:	b0 00                	mov    $0x0,%al
f0113230:	89 d7                	mov    %edx,%edi
f0113232:	f3 aa                	rep stos %al,%es:(%edi)
f0113234:	83 ec 0c             	sub    $0xc,%esp
f0113237:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f011323d:	50                   	push   %eax
f011323e:	e8 2d db fe ff       	call   f0100d70 <execute_command>
f0113243:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x200FFF c";execute_command(c4);
f0113246:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f011324c:	bb 39 a4 13 f0       	mov    $0xf013a439,%ebx
f0113251:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113256:	89 c7                	mov    %eax,%edi
f0113258:	89 de                	mov    %ebx,%esi
f011325a:	89 d1                	mov    %edx,%ecx
f011325c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011325e:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0113264:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113269:	b0 00                	mov    $0x0,%al
f011326b:	89 d7                	mov    %edx,%edi
f011326d:	f3 aa                	rep stos %al,%es:(%edi)
f011326f:	83 ec 0c             	sub    $0xc,%esp
f0113272:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0113278:	50                   	push   %eax
f0113279:	e8 f2 da fe ff       	call   f0100d70 <execute_command>
f011327e:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x201000 d";execute_command(c22);
f0113281:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0113287:	bb 9d a4 13 f0       	mov    $0xf013a49d,%ebx
f011328c:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113291:	89 c7                	mov    %eax,%edi
f0113293:	89 de                	mov    %ebx,%esi
f0113295:	89 d1                	mov    %edx,%ecx
f0113297:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113299:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f011329f:	b9 55 00 00 00       	mov    $0x55,%ecx
f01132a4:	b0 00                	mov    $0x0,%al
f01132a6:	89 d7                	mov    %edx,%edi
f01132a8:	f3 aa                	rep stos %al,%es:(%edi)
f01132aa:	83 ec 0c             	sub    $0xc,%esp
f01132ad:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f01132b3:	50                   	push   %eax
f01132b4:	e8 b7 da fe ff       	call   f0100d70 <execute_command>
f01132b9:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x2017FF e";execute_command(c23);
f01132bc:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f01132c2:	bb 01 a5 13 f0       	mov    $0xf013a501,%ebx
f01132c7:	ba 0f 00 00 00       	mov    $0xf,%edx
f01132cc:	89 c7                	mov    %eax,%edi
f01132ce:	89 de                	mov    %ebx,%esi
f01132d0:	89 d1                	mov    %edx,%ecx
f01132d2:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01132d4:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f01132da:	b9 55 00 00 00       	mov    $0x55,%ecx
f01132df:	b0 00                	mov    $0x0,%al
f01132e1:	89 d7                	mov    %edx,%edi
f01132e3:	f3 aa                	rep stos %al,%es:(%edi)
f01132e5:	83 ec 0c             	sub    $0xc,%esp
f01132e8:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f01132ee:	50                   	push   %eax
f01132ef:	e8 7c da fe ff       	call   f0100d70 <execute_command>
f01132f4:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x201FFF f";execute_command(c24);
f01132f7:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f01132fd:	bb 65 a5 13 f0       	mov    $0xf013a565,%ebx
f0113302:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113307:	89 c7                	mov    %eax,%edi
f0113309:	89 de                	mov    %ebx,%esi
f011330b:	89 d1                	mov    %edx,%ecx
f011330d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011330f:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0113315:	b9 55 00 00 00       	mov    $0x55,%ecx
f011331a:	b0 00                	mov    $0x0,%al
f011331c:	89 d7                	mov    %edx,%edi
f011331e:	f3 aa                	rep stos %al,%es:(%edi)
f0113320:	83 ec 0c             	sub    $0xc,%esp
f0113323:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0113329:	50                   	push   %eax
f011332a:	e8 41 da fe ff       	call   f0100d70 <execute_command>
f011332f:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x400000", c5); execute_command(c5);
f0113332:	83 ec 04             	sub    $0x4,%esp
f0113335:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011333b:	50                   	push   %eax
f011333c:	68 02 9e 13 f0       	push   $0xf0139e02
f0113341:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113347:	50                   	push   %eax
f0113348:	e8 34 eb 01 00       	call   f0131e81 <strcconcat>
f011334d:	83 c4 10             	add    $0x10,%esp
f0113350:	83 ec 0c             	sub    $0xc,%esp
f0113353:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113359:	50                   	push   %eax
f011335a:	e8 11 da fe ff       	call   f0100d70 <execute_command>
f011335f:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x401000", c5); execute_command(c5);
f0113362:	83 ec 04             	sub    $0x4,%esp
f0113365:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011336b:	50                   	push   %eax
f011336c:	68 0c 9e 13 f0       	push   $0xf0139e0c
f0113371:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113377:	50                   	push   %eax
f0113378:	e8 04 eb 01 00       	call   f0131e81 <strcconcat>
f011337d:	83 c4 10             	add    $0x10,%esp
f0113380:	83 ec 0c             	sub    $0xc,%esp
f0113383:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113389:	50                   	push   %eax
f011338a:	e8 e1 d9 fe ff       	call   f0100d70 <execute_command>
f011338f:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x400000 x";execute_command(c6);
f0113392:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113398:	bb c9 a5 13 f0       	mov    $0xf013a5c9,%ebx
f011339d:	ba 0f 00 00 00       	mov    $0xf,%edx
f01133a2:	89 c7                	mov    %eax,%edi
f01133a4:	89 de                	mov    %ebx,%esi
f01133a6:	89 d1                	mov    %edx,%ecx
f01133a8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01133aa:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f01133b0:	b9 55 00 00 00       	mov    $0x55,%ecx
f01133b5:	b0 00                	mov    $0x0,%al
f01133b7:	89 d7                	mov    %edx,%edi
f01133b9:	f3 aa                	rep stos %al,%es:(%edi)
f01133bb:	83 ec 0c             	sub    $0xc,%esp
f01133be:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01133c4:	50                   	push   %eax
f01133c5:	e8 a6 d9 fe ff       	call   f0100d70 <execute_command>
f01133ca:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x4007FF y";execute_command(c7);
f01133cd:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01133d3:	bb 2d a6 13 f0       	mov    $0xf013a62d,%ebx
f01133d8:	ba 0f 00 00 00       	mov    $0xf,%edx
f01133dd:	89 c7                	mov    %eax,%edi
f01133df:	89 de                	mov    %ebx,%esi
f01133e1:	89 d1                	mov    %edx,%ecx
f01133e3:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01133e5:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f01133eb:	b9 55 00 00 00       	mov    $0x55,%ecx
f01133f0:	b0 00                	mov    $0x0,%al
f01133f2:	89 d7                	mov    %edx,%edi
f01133f4:	f3 aa                	rep stos %al,%es:(%edi)
f01133f6:	83 ec 0c             	sub    $0xc,%esp
f01133f9:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01133ff:	50                   	push   %eax
f0113400:	e8 6b d9 fe ff       	call   f0100d70 <execute_command>
f0113405:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x400FFF z";execute_command(c8);
f0113408:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f011340e:	bb 91 a6 13 f0       	mov    $0xf013a691,%ebx
f0113413:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113418:	89 c7                	mov    %eax,%edi
f011341a:	89 de                	mov    %ebx,%esi
f011341c:	89 d1                	mov    %edx,%ecx
f011341e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113420:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0113426:	b9 55 00 00 00       	mov    $0x55,%ecx
f011342b:	b0 00                	mov    $0x0,%al
f011342d:	89 d7                	mov    %edx,%edi
f011342f:	f3 aa                	rep stos %al,%es:(%edi)
f0113431:	83 ec 0c             	sub    $0xc,%esp
f0113434:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f011343a:	50                   	push   %eax
f011343b:	e8 30 d9 fe ff       	call   f0100d70 <execute_command>
f0113440:	83 c4 10             	add    $0x10,%esp

		//Test1
		ch1 = (char*)0x200000; ch2 = (char*)0x400000;
f0113443:	c7 45 bc 00 00 20 00 	movl   $0x200000,-0x44(%ebp)
f011344a:	c7 45 b8 00 00 40 00 	movl   $0x400000,-0x48(%ebp)
		ch3 = (char*)0x2007FF; ch4 = (char*)0x4007FF;
f0113451:	c7 45 b4 ff 07 20 00 	movl   $0x2007ff,-0x4c(%ebp)
f0113458:	c7 45 b0 ff 07 40 00 	movl   $0x4007ff,-0x50(%ebp)
		ch5 = (char*)0x200FFF; ch6 = (char*)0x400FFF;
f011345f:	c7 45 ac ff 0f 20 00 	movl   $0x200fff,-0x54(%ebp)
f0113466:	c7 45 a8 ff 0f 40 00 	movl   $0x400fff,-0x58(%ebp)
		ch7 = (char*)0x201000; ch8 = (char*)0x401000;
f011346d:	c7 45 a4 00 10 20 00 	movl   $0x201000,-0x5c(%ebp)
f0113474:	c7 45 a0 00 10 40 00 	movl   $0x401000,-0x60(%ebp)
		ch9 = (char*)0x2017FF; ch10= (char*)0x4017FF;
f011347b:	c7 45 9c ff 17 20 00 	movl   $0x2017ff,-0x64(%ebp)
f0113482:	c7 45 98 ff 17 40 00 	movl   $0x4017ff,-0x68(%ebp)
		ch11= (char*)0x201FFF; ch12= (char*)0x401FFF;
f0113489:	c7 45 94 ff 1f 20 00 	movl   $0x201fff,-0x6c(%ebp)
f0113490:	c7 45 90 ff 1f 40 00 	movl   $0x401fff,-0x70(%ebp)

		tch[12] = *ch12 ;
f0113497:	8b 45 90             	mov    -0x70(%ebp),%eax
f011349a:	8a 00                	mov    (%eax),%al
f011349c:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01134a2:	e8 f0 9c ff ff       	call   f010d197 <sys_calculate_free_frames>
f01134a7:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x200000, 0x400000, 6*kilo);
f01134aa:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01134ad:	89 d0                	mov    %edx,%eax
f01134af:	01 c0                	add    %eax,%eax
f01134b1:	01 d0                	add    %edx,%eax
f01134b3:	01 c0                	add    %eax,%eax
f01134b5:	50                   	push   %eax
f01134b6:	68 00 00 40 00       	push   $0x400000
f01134bb:	68 00 00 20 00       	push   $0x200000
f01134c0:	ff 75 d4             	pushl  -0x2c(%ebp)
f01134c3:	e8 0c 59 ff ff       	call   f0108dd4 <copy_paste_chunk>
f01134c8:	83 c4 10             	add    $0x10,%esp
f01134cb:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01134ce:	e8 c4 9c ff ff       	call   f010d197 <sys_calculate_free_frames>
f01134d3:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f01134d6:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f01134dd:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f01134e1:	75 08                	jne    f01134eb <test_copy_paste_chunk+0x929>
f01134e3:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01134e6:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f01134e9:	74 2b                	je     f0113516 <test_copy_paste_chunk+0x954>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01134eb:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01134ee:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01134f1:	83 ec 0c             	sub    $0xc,%esp
f01134f4:	50                   	push   %eax
f01134f5:	ff 75 80             	pushl  -0x80(%ebp)
f01134f8:	68 18 9e 13 f0       	push   $0xf0139e18
f01134fd:	68 cc 02 00 00       	push   $0x2cc
f0113502:	68 de 91 13 f0       	push   $0xf01391de
f0113507:	e8 07 cf fe ff       	call   f0100413 <_warn>
f011350c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011350f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113516:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011351a:	74 04                	je     f0113520 <test_copy_paste_chunk+0x95e>
f011351c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113520:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1;
f0113527:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%ebp)
f011352e:	00 00 00 
		if (CCP(proc_directory, 0x200000, 0x400000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0113531:	83 ec 08             	sub    $0x8,%esp
f0113534:	6a 01                	push   $0x1
f0113536:	6a 07                	push   $0x7
f0113538:	6a 07                	push   $0x7
f011353a:	6a 07                	push   $0x7
f011353c:	6a 07                	push   $0x7
f011353e:	6a 01                	push   $0x1
f0113540:	68 00 20 00 00       	push   $0x2000
f0113545:	68 00 00 40 00       	push   $0x400000
f011354a:	68 00 00 20 00       	push   $0x200000
f011354f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113552:	e8 67 32 00 00       	call   f01167be <CCP>
f0113557:	83 c4 30             	add    $0x30,%esp
f011355a:	83 f8 01             	cmp    $0x1,%eax
f011355d:	74 2b                	je     f011358a <test_copy_paste_chunk+0x9c8>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references)\n");
f011355f:	83 ec 04             	sub    $0x4,%esp
f0113562:	68 6c 9e 13 f0       	push   $0xf0139e6c
f0113567:	68 d5 02 00 00       	push   $0x2d5
f011356c:	68 de 91 13 f0       	push   $0xf01391de
f0113571:	e8 9d ce fe ff       	call   f0100413 <_warn>
f0113576:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113579:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0;
f0113580:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
f0113587:	00 00 00 
		}
		if (correct) eval += 5 ;
f011358a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011358e:	74 04                	je     f0113594 <test_copy_paste_chunk+0x9d2>
f0113590:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113594:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		*ch3 = 'y' ;	// wum 0x2007FF y
f011359b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011359e:	c6 00 79             	movb   $0x79,(%eax)
		*ch6 = 'z' ;	// wum 0x400FFF z
f01135a1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01135a4:	c6 00 7a             	movb   $0x7a,(%eax)
		*ch7 = 'w' ;	// wum 0x201000 w
f01135a7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01135aa:	c6 00 77             	movb   $0x77,(%eax)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z'
f01135ad:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01135b0:	8a 00                	mov    (%eax),%al
f01135b2:	3c 61                	cmp    $0x61,%al
f01135b4:	75 69                	jne    f011361f <test_copy_paste_chunk+0xa5d>
f01135b6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01135b9:	8a 00                	mov    (%eax),%al
f01135bb:	3c 61                	cmp    $0x61,%al
f01135bd:	75 60                	jne    f011361f <test_copy_paste_chunk+0xa5d>
f01135bf:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01135c2:	8a 00                	mov    (%eax),%al
f01135c4:	3c 79                	cmp    $0x79,%al
f01135c6:	75 57                	jne    f011361f <test_copy_paste_chunk+0xa5d>
f01135c8:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01135cb:	8a 00                	mov    (%eax),%al
f01135cd:	3c 62                	cmp    $0x62,%al
f01135cf:	75 4e                	jne    f011361f <test_copy_paste_chunk+0xa5d>
f01135d1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01135d4:	8a 00                	mov    (%eax),%al
f01135d6:	3c 63                	cmp    $0x63,%al
f01135d8:	75 45                	jne    f011361f <test_copy_paste_chunk+0xa5d>
f01135da:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01135dd:	8a 00                	mov    (%eax),%al
f01135df:	3c 7a                	cmp    $0x7a,%al
f01135e1:	75 3c                	jne    f011361f <test_copy_paste_chunk+0xa5d>
				||  *ch7 != 'w' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'e' || *ch11!= 'f' || *ch12 != tch[12])
f01135e3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01135e6:	8a 00                	mov    (%eax),%al
f01135e8:	3c 77                	cmp    $0x77,%al
f01135ea:	75 33                	jne    f011361f <test_copy_paste_chunk+0xa5d>
f01135ec:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01135ef:	8a 00                	mov    (%eax),%al
f01135f1:	3c 64                	cmp    $0x64,%al
f01135f3:	75 2a                	jne    f011361f <test_copy_paste_chunk+0xa5d>
f01135f5:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01135f8:	8a 00                	mov    (%eax),%al
f01135fa:	3c 65                	cmp    $0x65,%al
f01135fc:	75 21                	jne    f011361f <test_copy_paste_chunk+0xa5d>
f01135fe:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113601:	8a 00                	mov    (%eax),%al
f0113603:	3c 65                	cmp    $0x65,%al
f0113605:	75 18                	jne    f011361f <test_copy_paste_chunk+0xa5d>
f0113607:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011360a:	8a 00                	mov    (%eax),%al
f011360c:	3c 66                	cmp    $0x66,%al
f011360e:	75 0f                	jne    f011361f <test_copy_paste_chunk+0xa5d>
f0113610:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113613:	8a 10                	mov    (%eax),%dl
f0113615:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f011361b:	38 c2                	cmp    %al,%dl
f011361d:	74 21                	je     f0113640 <test_copy_paste_chunk+0xa7e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f011361f:	83 ec 04             	sub    $0x4,%esp
f0113622:	68 6c 9d 13 f0       	push   $0xf0139d6c
f0113627:	68 e3 02 00 00       	push   $0x2e3
f011362c:	68 de 91 13 f0       	push   $0xf01391de
f0113631:	e8 dd cd fe ff       	call   f0100413 <_warn>
f0113636:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113639:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0113640:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113644:	74 04                	je     f011364a <test_copy_paste_chunk+0xa88>
f0113646:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011364a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		//Test2
		*ch10 = 'x';	// wum 0x4017FF y
f0113651:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113654:	c6 00 78             	movb   $0x78,(%eax)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113657:	e8 3b 9b ff ff       	call   f010d197 <sys_calculate_free_frames>
f011365c:	89 45 8c             	mov    %eax,-0x74(%ebp)

		ret = copy_paste_chunk(proc_directory, 0x400800, 0x200800, 3*kilo);
f011365f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113662:	89 c2                	mov    %eax,%edx
f0113664:	01 d2                	add    %edx,%edx
f0113666:	01 d0                	add    %edx,%eax
f0113668:	50                   	push   %eax
f0113669:	68 00 08 20 00       	push   $0x200800
f011366e:	68 00 08 40 00       	push   $0x400800
f0113673:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113676:	e8 59 57 ff ff       	call   f0108dd4 <copy_paste_chunk>
f011367b:	83 c4 10             	add    $0x10,%esp
f011367e:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113681:	e8 11 9b ff ff       	call   f010d197 <sys_calculate_free_frames>
f0113686:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0113689:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f011368d:	75 08                	jne    f0113697 <test_copy_paste_chunk+0xad5>
f011368f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113692:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0113695:	74 2b                	je     f01136c2 <test_copy_paste_chunk+0xb00>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113697:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011369a:	2b 45 84             	sub    -0x7c(%ebp),%eax
f011369d:	83 ec 0c             	sub    $0xc,%esp
f01136a0:	50                   	push   %eax
f01136a1:	ff 75 80             	pushl  -0x80(%ebp)
f01136a4:	68 18 9e 13 f0       	push   $0xf0139e18
f01136a9:	68 f3 02 00 00       	push   $0x2f3
f01136ae:	68 de 91 13 f0       	push   $0xf01391de
f01136b3:	e8 5b cd fe ff       	call   f0100413 <_warn>
f01136b8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01136bb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01136c2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01136c6:	74 04                	je     f01136cc <test_copy_paste_chunk+0xb0a>
f01136c8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01136cc:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CCP(proc_directory, 0x400000, 0x200000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f01136d3:	83 ec 08             	sub    $0x8,%esp
f01136d6:	6a 01                	push   $0x1
f01136d8:	6a 07                	push   $0x7
f01136da:	6a 07                	push   $0x7
f01136dc:	6a 07                	push   $0x7
f01136de:	6a 07                	push   $0x7
f01136e0:	6a 01                	push   $0x1
f01136e2:	68 00 20 00 00       	push   $0x2000
f01136e7:	68 00 00 20 00       	push   $0x200000
f01136ec:	68 00 00 40 00       	push   $0x400000
f01136f1:	ff 75 d4             	pushl  -0x2c(%ebp)
f01136f4:	e8 c5 30 00 00       	call   f01167be <CCP>
f01136f9:	83 c4 30             	add    $0x30,%esp
f01136fc:	83 f8 01             	cmp    $0x1,%eax
f01136ff:	74 21                	je     f0113722 <test_copy_paste_chunk+0xb60>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113701:	83 ec 04             	sub    $0x4,%esp
f0113704:	68 b8 9e 13 f0       	push   $0xf0139eb8
f0113709:	68 fb 02 00 00       	push   $0x2fb
f011370e:	68 de 91 13 f0       	push   $0xf01391de
f0113713:	e8 fb cc fe ff       	call   f0100413 <_warn>
f0113718:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011371b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113722:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113726:	74 04                	je     f011372c <test_copy_paste_chunk+0xb6a>
f0113728:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011372c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0113733:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113736:	8a 00                	mov    (%eax),%al
f0113738:	3c 61                	cmp    $0x61,%al
f011373a:	75 69                	jne    f01137a5 <test_copy_paste_chunk+0xbe3>
f011373c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011373f:	8a 00                	mov    (%eax),%al
f0113741:	3c 61                	cmp    $0x61,%al
f0113743:	75 60                	jne    f01137a5 <test_copy_paste_chunk+0xbe3>
f0113745:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113748:	8a 00                	mov    (%eax),%al
f011374a:	3c 79                	cmp    $0x79,%al
f011374c:	75 57                	jne    f01137a5 <test_copy_paste_chunk+0xbe3>
f011374e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113751:	8a 00                	mov    (%eax),%al
f0113753:	3c 62                	cmp    $0x62,%al
f0113755:	75 4e                	jne    f01137a5 <test_copy_paste_chunk+0xbe3>
f0113757:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011375a:	8a 00                	mov    (%eax),%al
f011375c:	3c 7a                	cmp    $0x7a,%al
f011375e:	75 45                	jne    f01137a5 <test_copy_paste_chunk+0xbe3>
f0113760:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113763:	8a 00                	mov    (%eax),%al
f0113765:	3c 7a                	cmp    $0x7a,%al
f0113767:	75 3c                	jne    f01137a5 <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0113769:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011376c:	8a 00                	mov    (%eax),%al
			correct = 0;
		}
		if (correct) eval += 5 ;
		correct = 1 ;

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f011376e:	3c 64                	cmp    $0x64,%al
f0113770:	75 33                	jne    f01137a5 <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0113772:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113775:	8a 00                	mov    (%eax),%al
f0113777:	3c 64                	cmp    $0x64,%al
f0113779:	75 2a                	jne    f01137a5 <test_copy_paste_chunk+0xbe3>
f011377b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011377e:	8a 00                	mov    (%eax),%al
f0113780:	3c 65                	cmp    $0x65,%al
f0113782:	75 21                	jne    f01137a5 <test_copy_paste_chunk+0xbe3>
f0113784:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113787:	8a 00                	mov    (%eax),%al
f0113789:	3c 78                	cmp    $0x78,%al
f011378b:	75 18                	jne    f01137a5 <test_copy_paste_chunk+0xbe3>
f011378d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113790:	8a 00                	mov    (%eax),%al
f0113792:	3c 66                	cmp    $0x66,%al
f0113794:	75 0f                	jne    f01137a5 <test_copy_paste_chunk+0xbe3>
f0113796:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113799:	8a 10                	mov    (%eax),%dl
f011379b:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f01137a1:	38 c2                	cmp    %al,%dl
f01137a3:	74 21                	je     f01137c6 <test_copy_paste_chunk+0xc04>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01137a5:	83 ec 04             	sub    $0x4,%esp
f01137a8:	68 6c 9d 13 f0       	push   $0xf0139d6c
f01137ad:	68 04 03 00 00       	push   $0x304
f01137b2:	68 de 91 13 f0       	push   $0xf01391de
f01137b7:	e8 57 cc fe ff       	call   f0100413 <_warn>
f01137bc:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01137bf:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01137c6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01137ca:	74 04                	je     f01137d0 <test_copy_paste_chunk+0xc0e>
f01137cc:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01137d0:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE II: END\n") ;
f01137d7:	83 ec 0c             	sub    $0xc,%esp
f01137da:	68 03 9f 13 f0       	push   $0xf0139f03
f01137df:	e8 2a d5 fe ff       	call   f0100d0e <cprintf>
f01137e4:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART III: Destination page(s) doesn't exist 40% */
	/*================================================*/
	cprintf("\nCASE III: Destination page(s) doesn't exist [40%]\n") ;
f01137e7:	83 ec 0c             	sub    $0xc,%esp
f01137ea:	68 14 9f 13 f0       	push   $0xf0139f14
f01137ef:	e8 1a d5 fe ff       	call   f0100d0e <cprintf>
f01137f4:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x800000", c1); execute_command(c1);
f01137f7:	83 ec 04             	sub    $0x4,%esp
f01137fa:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113800:	50                   	push   %eax
f0113801:	68 48 9f 13 f0       	push   $0xf0139f48
f0113806:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011380c:	50                   	push   %eax
f011380d:	e8 6f e6 01 00       	call   f0131e81 <strcconcat>
f0113812:	83 c4 10             	add    $0x10,%esp
f0113815:	83 ec 0c             	sub    $0xc,%esp
f0113818:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011381e:	50                   	push   %eax
f011381f:	e8 4c d5 fe ff       	call   f0100d70 <execute_command>
f0113824:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x801000", c1); execute_command(c1);
f0113827:	83 ec 04             	sub    $0x4,%esp
f011382a:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113830:	50                   	push   %eax
f0113831:	68 52 9f 13 f0       	push   $0xf0139f52
f0113836:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011383c:	50                   	push   %eax
f011383d:	e8 3f e6 01 00       	call   f0131e81 <strcconcat>
f0113842:	83 c4 10             	add    $0x10,%esp
f0113845:	83 ec 0c             	sub    $0xc,%esp
f0113848:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011384e:	50                   	push   %eax
f011384f:	e8 1c d5 fe ff       	call   f0100d70 <execute_command>
f0113854:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x802000", c1); execute_command(c1);
f0113857:	83 ec 04             	sub    $0x4,%esp
f011385a:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113860:	50                   	push   %eax
f0113861:	68 5c 9f 13 f0       	push   $0xf0139f5c
f0113866:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011386c:	50                   	push   %eax
f011386d:	e8 0f e6 01 00       	call   f0131e81 <strcconcat>
f0113872:	83 c4 10             	add    $0x10,%esp
f0113875:	83 ec 0c             	sub    $0xc,%esp
f0113878:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011387e:	50                   	push   %eax
f011387f:	e8 ec d4 fe ff       	call   f0100d70 <execute_command>
f0113884:	83 c4 10             	add    $0x10,%esp
		char c14[100] = "wum 0x800000 a"; execute_command(c14);
f0113887:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f011388d:	bb f5 a6 13 f0       	mov    $0xf013a6f5,%ebx
f0113892:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113897:	89 c7                	mov    %eax,%edi
f0113899:	89 de                	mov    %ebx,%esi
f011389b:	89 d1                	mov    %edx,%ecx
f011389d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011389f:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f01138a5:	b9 55 00 00 00       	mov    $0x55,%ecx
f01138aa:	b0 00                	mov    $0x0,%al
f01138ac:	89 d7                	mov    %edx,%edi
f01138ae:	f3 aa                	rep stos %al,%es:(%edi)
f01138b0:	83 ec 0c             	sub    $0xc,%esp
f01138b3:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01138b9:	50                   	push   %eax
f01138ba:	e8 b1 d4 fe ff       	call   f0100d70 <execute_command>
f01138bf:	83 c4 10             	add    $0x10,%esp
		char c15[100] = "wum 0x8017FF b"; execute_command(c15);
f01138c2:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01138c8:	bb 59 a7 13 f0       	mov    $0xf013a759,%ebx
f01138cd:	ba 0f 00 00 00       	mov    $0xf,%edx
f01138d2:	89 c7                	mov    %eax,%edi
f01138d4:	89 de                	mov    %ebx,%esi
f01138d6:	89 d1                	mov    %edx,%ecx
f01138d8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01138da:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f01138e0:	b9 55 00 00 00       	mov    $0x55,%ecx
f01138e5:	b0 00                	mov    $0x0,%al
f01138e7:	89 d7                	mov    %edx,%edi
f01138e9:	f3 aa                	rep stos %al,%es:(%edi)
f01138eb:	83 ec 0c             	sub    $0xc,%esp
f01138ee:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01138f4:	50                   	push   %eax
f01138f5:	e8 76 d4 fe ff       	call   f0100d70 <execute_command>
f01138fa:	83 c4 10             	add    $0x10,%esp
		char c16[100] = "wum 0x802FFF c"; execute_command(c16);
f01138fd:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113903:	bb bd a7 13 f0       	mov    $0xf013a7bd,%ebx
f0113908:	ba 0f 00 00 00       	mov    $0xf,%edx
f011390d:	89 c7                	mov    %eax,%edi
f011390f:	89 de                	mov    %ebx,%esi
f0113911:	89 d1                	mov    %edx,%ecx
f0113913:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113915:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f011391b:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113920:	b0 00                	mov    $0x0,%al
f0113922:	89 d7                	mov    %edx,%edi
f0113924:	f3 aa                	rep stos %al,%es:(%edi)
f0113926:	83 ec 0c             	sub    $0xc,%esp
f0113929:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f011392f:	50                   	push   %eax
f0113930:	e8 3b d4 fe ff       	call   f0100d70 <execute_command>
f0113935:	83 c4 10             	add    $0x10,%esp

		//Test3
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113938:	e8 5a 98 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011393d:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x800000, 0x900000, 12*kilo);
f0113940:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113943:	89 d0                	mov    %edx,%eax
f0113945:	01 c0                	add    %eax,%eax
f0113947:	01 d0                	add    %edx,%eax
f0113949:	c1 e0 02             	shl    $0x2,%eax
f011394c:	50                   	push   %eax
f011394d:	68 00 00 90 00       	push   $0x900000
f0113952:	68 00 00 80 00       	push   $0x800000
f0113957:	ff 75 d4             	pushl  -0x2c(%ebp)
f011395a:	e8 75 54 ff ff       	call   f0108dd4 <copy_paste_chunk>
f011395f:	83 c4 10             	add    $0x10,%esp
f0113962:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113968:	e8 2a 98 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011396d:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0113970:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0113977:	75 0b                	jne    f0113984 <test_copy_paste_chunk+0xdc2>
f0113979:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011397c:	2b 45 84             	sub    -0x7c(%ebp),%eax
f011397f:	83 f8 03             	cmp    $0x3,%eax
f0113982:	74 2e                	je     f01139b2 <test_copy_paste_chunk+0xdf0>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113984:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113987:	2b 45 84             	sub    -0x7c(%ebp),%eax
f011398a:	83 ec 0c             	sub    $0xc,%esp
f011398d:	50                   	push   %eax
f011398e:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0113994:	68 18 9e 13 f0       	push   $0xf0139e18
f0113999:	68 22 03 00 00       	push   $0x322
f011399e:	68 de 91 13 f0       	push   $0xf01391de
f01139a3:	e8 6b ca fe ff       	call   f0100413 <_warn>
f01139a8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01139ab:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01139b2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01139b6:	74 04                	je     f01139bc <test_copy_paste_chunk+0xdfa>
f01139b8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01139bc:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1 ;
f01139c3:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x800000, 0x900000, 3*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f01139ca:	83 ec 08             	sub    $0x8,%esp
f01139cd:	6a 01                	push   $0x1
f01139cf:	6a 07                	push   $0x7
f01139d1:	6a 07                	push   $0x7
f01139d3:	6a 07                	push   $0x7
f01139d5:	6a 07                	push   $0x7
f01139d7:	6a 01                	push   $0x1
f01139d9:	68 00 30 00 00       	push   $0x3000
f01139de:	68 00 00 90 00       	push   $0x900000
f01139e3:	68 00 00 80 00       	push   $0x800000
f01139e8:	ff 75 d4             	pushl  -0x2c(%ebp)
f01139eb:	e8 ce 2d 00 00       	call   f01167be <CCP>
f01139f0:	83 c4 30             	add    $0x30,%esp
f01139f3:	83 f8 01             	cmp    $0x1,%eax
f01139f6:	74 28                	je     f0113a20 <test_copy_paste_chunk+0xe5e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f01139f8:	83 ec 04             	sub    $0x4,%esp
f01139fb:	68 b8 9e 13 f0       	push   $0xf0139eb8
f0113a00:	68 2b 03 00 00       	push   $0x32b
f0113a05:	68 de 91 13 f0       	push   $0xf01391de
f0113a0a:	e8 04 ca fe ff       	call   f0100413 <_warn>
f0113a0f:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113a12:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0113a19:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 5 ;
f0113a20:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113a24:	74 04                	je     f0113a2a <test_copy_paste_chunk+0xe68>
f0113a26:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113a2a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0113a31:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113a35:	0f 84 9e 00 00 00    	je     f0113ad9 <test_copy_paste_chunk+0xf17>
		{
			ch1 = (char*)0x800000; ch2 = (char*)0x900000;
f0113a3b:	c7 45 bc 00 00 80 00 	movl   $0x800000,-0x44(%ebp)
f0113a42:	c7 45 b8 00 00 90 00 	movl   $0x900000,-0x48(%ebp)
			ch3 = (char*)0x8017FF; ch4 = (char*)0x9017FF;
f0113a49:	c7 45 b4 ff 17 80 00 	movl   $0x8017ff,-0x4c(%ebp)
f0113a50:	c7 45 b0 ff 17 90 00 	movl   $0x9017ff,-0x50(%ebp)
			ch5 = (char*)0x802FFF; ch6 = (char*)0x902FFF;
f0113a57:	c7 45 ac ff 2f 80 00 	movl   $0x802fff,-0x54(%ebp)
f0113a5e:	c7 45 a8 ff 2f 90 00 	movl   $0x902fff,-0x58(%ebp)

			*ch3 = 'y';	//wum 0x8017FF y
f0113a65:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113a68:	c6 00 79             	movb   $0x79,(%eax)
			*ch6 = 'z';	//wum 0x902FFF z
f0113a6b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113a6e:	c6 00 7a             	movb   $0x7a,(%eax)

			if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z')
f0113a71:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113a74:	8a 00                	mov    (%eax),%al
f0113a76:	3c 61                	cmp    $0x61,%al
f0113a78:	75 2d                	jne    f0113aa7 <test_copy_paste_chunk+0xee5>
f0113a7a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113a7d:	8a 00                	mov    (%eax),%al
f0113a7f:	3c 61                	cmp    $0x61,%al
f0113a81:	75 24                	jne    f0113aa7 <test_copy_paste_chunk+0xee5>
f0113a83:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113a86:	8a 00                	mov    (%eax),%al
f0113a88:	3c 79                	cmp    $0x79,%al
f0113a8a:	75 1b                	jne    f0113aa7 <test_copy_paste_chunk+0xee5>
f0113a8c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113a8f:	8a 00                	mov    (%eax),%al
f0113a91:	3c 62                	cmp    $0x62,%al
f0113a93:	75 12                	jne    f0113aa7 <test_copy_paste_chunk+0xee5>
f0113a95:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113a98:	8a 00                	mov    (%eax),%al
f0113a9a:	3c 63                	cmp    $0x63,%al
f0113a9c:	75 09                	jne    f0113aa7 <test_copy_paste_chunk+0xee5>
f0113a9e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113aa1:	8a 00                	mov    (%eax),%al
f0113aa3:	3c 7a                	cmp    $0x7a,%al
f0113aa5:	74 21                	je     f0113ac8 <test_copy_paste_chunk+0xf06>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113aa7:	83 ec 04             	sub    $0x4,%esp
f0113aaa:	68 6c 9d 13 f0       	push   $0xf0139d6c
f0113aaf:	68 3d 03 00 00       	push   $0x33d
f0113ab4:	68 de 91 13 f0       	push   $0xf01391de
f0113ab9:	e8 55 c9 fe ff       	call   f0100413 <_warn>
f0113abe:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113ac1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 10 ;
f0113ac8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113acc:	74 04                	je     f0113ad2 <test_copy_paste_chunk+0xf10>
f0113ace:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
			correct = 1 ;
f0113ad2:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
		//Test4
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113ad9:	e8 b9 96 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0113ade:	89 45 8c             	mov    %eax,-0x74(%ebp)
		SB(proc_directory, 0x901000, 2 , 0) ;
f0113ae1:	6a 00                	push   $0x0
f0113ae3:	6a 02                	push   $0x2
f0113ae5:	68 00 10 90 00       	push   $0x901000
f0113aea:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113aed:	e8 59 2b 00 00       	call   f011664b <SB>
f0113af2:	83 c4 10             	add    $0x10,%esp
		SB(proc_directory, 0x902000, 2 , 0) ;
f0113af5:	6a 00                	push   $0x0
f0113af7:	6a 02                	push   $0x2
f0113af9:	68 00 20 90 00       	push   $0x902000
f0113afe:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113b01:	e8 45 2b 00 00       	call   f011664b <SB>
f0113b06:	83 c4 10             	add    $0x10,%esp

		ret = copy_paste_chunk(proc_directory, 0x901000, 0xBFF000, 8*kilo);
f0113b09:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113b0c:	c1 e0 03             	shl    $0x3,%eax
f0113b0f:	50                   	push   %eax
f0113b10:	68 00 f0 bf 00       	push   $0xbff000
f0113b15:	68 00 10 90 00       	push   $0x901000
f0113b1a:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113b1d:	e8 b2 52 ff ff       	call   f0108dd4 <copy_paste_chunk>
f0113b22:	83 c4 10             	add    $0x10,%esp
f0113b25:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113b2b:	e8 67 96 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0113b30:	89 45 84             	mov    %eax,-0x7c(%ebp)
		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0113b33:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0113b3a:	75 0b                	jne    f0113b47 <test_copy_paste_chunk+0xf85>
f0113b3c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113b3f:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113b42:	83 f8 03             	cmp    $0x3,%eax
f0113b45:	74 2e                	je     f0113b75 <test_copy_paste_chunk+0xfb3>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113b47:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113b4a:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113b4d:	83 ec 0c             	sub    $0xc,%esp
f0113b50:	50                   	push   %eax
f0113b51:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0113b57:	68 18 9e 13 f0       	push   $0xf0139e18
f0113b5c:	68 4d 03 00 00       	push   $0x34d
f0113b61:	68 de 91 13 f0       	push   $0xf01391de
f0113b66:	e8 a8 c8 fe ff       	call   f0100413 <_warn>
f0113b6b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113b6e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113b75:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113b79:	74 04                	je     f0113b7f <test_copy_paste_chunk+0xfbd>
f0113b7b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113b7f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		chkcnt = 1 ;
f0113b86:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x901000, 0xBFF000, 2*PAGE_SIZE, 1, 0x003, 0x007, 0x003, 0x007, CHK_COPY_PASTE) != 1)
f0113b8d:	83 ec 08             	sub    $0x8,%esp
f0113b90:	6a 01                	push   $0x1
f0113b92:	6a 07                	push   $0x7
f0113b94:	6a 03                	push   $0x3
f0113b96:	6a 07                	push   $0x7
f0113b98:	6a 03                	push   $0x3
f0113b9a:	6a 01                	push   $0x1
f0113b9c:	68 00 20 00 00       	push   $0x2000
f0113ba1:	68 00 f0 bf 00       	push   $0xbff000
f0113ba6:	68 00 10 90 00       	push   $0x901000
f0113bab:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113bae:	e8 0b 2c 00 00       	call   f01167be <CCP>
f0113bb3:	83 c4 30             	add    $0x30,%esp
f0113bb6:	83 f8 01             	cmp    $0x1,%eax
f0113bb9:	74 28                	je     f0113be3 <test_copy_paste_chunk+0x1021>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113bbb:	83 ec 04             	sub    $0x4,%esp
f0113bbe:	68 b8 9e 13 f0       	push   $0xf0139eb8
f0113bc3:	68 56 03 00 00       	push   $0x356
f0113bc8:	68 de 91 13 f0       	push   $0xf01391de
f0113bcd:	e8 41 c8 fe ff       	call   f0100413 <_warn>
f0113bd2:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113bd5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0113bdc:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f0113be3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113be7:	74 04                	je     f0113bed <test_copy_paste_chunk+0x102b>
f0113be9:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113bed:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0113bf4:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113bf8:	74 72                	je     f0113c6c <test_copy_paste_chunk+0x10aa>
		{
			ch1 = (char*)0x9017FF; ch2 = (char*)0xBFF7FF; ch3 = (char*)0x902FFF;ch4 = (char*)0xC00FFF;
f0113bfa:	c7 45 bc ff 17 90 00 	movl   $0x9017ff,-0x44(%ebp)
f0113c01:	c7 45 b8 ff f7 bf 00 	movl   $0xbff7ff,-0x48(%ebp)
f0113c08:	c7 45 b4 ff 2f 90 00 	movl   $0x902fff,-0x4c(%ebp)
f0113c0f:	c7 45 b0 ff 0f c0 00 	movl   $0xc00fff,-0x50(%ebp)
			if (*ch1 != 'b' || *ch2 != 'b' || *ch3 != 'z' || *ch4 != 'z')
f0113c16:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113c19:	8a 00                	mov    (%eax),%al
f0113c1b:	3c 62                	cmp    $0x62,%al
f0113c1d:	75 1b                	jne    f0113c3a <test_copy_paste_chunk+0x1078>
f0113c1f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113c22:	8a 00                	mov    (%eax),%al
f0113c24:	3c 62                	cmp    $0x62,%al
f0113c26:	75 12                	jne    f0113c3a <test_copy_paste_chunk+0x1078>
f0113c28:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113c2b:	8a 00                	mov    (%eax),%al
f0113c2d:	3c 7a                	cmp    $0x7a,%al
f0113c2f:	75 09                	jne    f0113c3a <test_copy_paste_chunk+0x1078>
f0113c31:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113c34:	8a 00                	mov    (%eax),%al
f0113c36:	3c 7a                	cmp    $0x7a,%al
f0113c38:	74 21                	je     f0113c5b <test_copy_paste_chunk+0x1099>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113c3a:	83 ec 04             	sub    $0x4,%esp
f0113c3d:	68 6c 9d 13 f0       	push   $0xf0139d6c
f0113c42:	68 62 03 00 00       	push   $0x362
f0113c47:	68 de 91 13 f0       	push   $0xf01391de
f0113c4c:	e8 c2 c7 fe ff       	call   f0100413 <_warn>
f0113c51:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113c54:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0113c5b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113c5f:	74 04                	je     f0113c65 <test_copy_paste_chunk+0x10a3>
f0113c61:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113c65:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0113c6c:	83 ec 0c             	sub    $0xc,%esp
f0113c6f:	68 66 9f 13 f0       	push   $0xf0139f66
f0113c74:	e8 95 d0 fe ff       	call   f0100d0e <cprintf>
f0113c79:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] copy_paste_chunk: FINISHED. Evaluation = %d\n", eval);
f0113c7c:	83 ec 08             	sub    $0x8,%esp
f0113c7f:	ff 75 e4             	pushl  -0x1c(%ebp)
f0113c82:	68 78 9f 13 f0       	push   $0xf0139f78
f0113c87:	e8 82 d0 fe ff       	call   f0100d0e <cprintf>
f0113c8c:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0113c8f:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0113c93:	75 10                	jne    f0113ca5 <test_copy_paste_chunk+0x10e3>
		cprintf("Congratulations!! test copy_paste_chunk completed successfully.\n");
f0113c95:	83 ec 0c             	sub    $0xc,%esp
f0113c98:	68 ac 9f 13 f0       	push   $0xf0139fac
f0113c9d:	e8 6c d0 fe ff       	call   f0100d0e <cprintf>
f0113ca2:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0113ca5:	a1 ac ad 89 f0       	mov    0xf089adac,%eax
f0113caa:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0113cad:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113cb0:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0113cb3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113cb8:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0113cbb:	5b                   	pop    %ebx
f0113cbc:	5e                   	pop    %esi
f0113cbd:	5f                   	pop    %edi
f0113cbe:	5d                   	pop    %ebp
f0113cbf:	c3                   	ret    

f0113cc0 <test_share_chunk>:

//===============================
// 3) TEST SHARE CHUNK:
//===============================
int test_share_chunk()
{
f0113cc0:	55                   	push   %ebp
f0113cc1:	89 e5                	mov    %esp,%ebp
f0113cc3:	57                   	push   %edi
f0113cc4:	56                   	push   %esi
f0113cc5:	53                   	push   %ebx
f0113cc6:	81 ec bc 00 00 00    	sub    $0xbc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0113ccc:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0113cd2:	bb 78 9c 13 f0       	mov    $0xf0139c78,%ebx
f0113cd7:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113cdc:	89 c7                	mov    %eax,%edi
f0113cde:	89 de                	mov    %ebx,%esi
f0113ce0:	89 d1                	mov    %edx,%ecx
f0113ce2:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113ce4:	8d 95 5d ff ff ff    	lea    -0xa3(%ebp),%edx
f0113cea:	b9 23 00 00 00       	mov    $0x23,%ecx
f0113cef:	b0 00                	mov    $0x0,%al
f0113cf1:	89 d7                	mov    %edx,%edi
f0113cf3:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0113cf5:	6a 00                	push   $0x0
f0113cf7:	6a 0a                	push   $0xa
f0113cf9:	6a 14                	push   $0x14
f0113cfb:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0113d01:	50                   	push   %eax
f0113d02:	e8 56 57 ff ff       	call   f010945d <env_create>
f0113d07:	83 c4 10             	add    $0x10,%esp
f0113d0a:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0113d0d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113d10:	8b 40 5c             	mov    0x5c(%eax),%eax
f0113d13:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f0113d16:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113d19:	8b 40 60             	mov    0x60(%eax),%eax
f0113d1c:	89 45 80             	mov    %eax,-0x80(%ebp)
f0113d1f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0113d22:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0113d25:	83 ec 0c             	sub    $0xc,%esp
f0113d28:	ff 75 cc             	pushl  -0x34(%ebp)
f0113d2b:	e8 5a 2a 00 00       	call   f011678a <ClearUserSpace>
f0113d30:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0113d33:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0113d3a:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f0113d41:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0113d48:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 20% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [20%]\n") ;
f0113d4c:	83 ec 0c             	sub    $0xc,%esp
f0113d4f:	68 24 a8 13 f0       	push   $0xf013a824
f0113d54:	e8 b5 cf fe ff       	call   f0100d0e <cprintf>
f0113d59:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)0xF0100000;
f0113d5c:	c7 45 bc 00 00 10 f0 	movl   $0xf0100000,-0x44(%ebp)
		ptr2 = (char*)0xF1004000;
f0113d63:	c7 45 b8 00 40 00 f1 	movl   $0xf1004000,-0x48(%ebp)
		tptr[1] = *ptr1 ;
f0113d6a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113d6d:	8a 00                	mov    (%eax),%al
f0113d6f:	88 85 45 ff ff ff    	mov    %al,-0xbb(%ebp)
		tptr[2] = *ptr2 ;
f0113d75:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113d78:	8a 00                	mov    (%eax),%al
f0113d7a:	88 85 46 ff ff ff    	mov    %al,-0xba(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113d80:	e8 12 94 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0113d85:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0100000,0xF0104000, 6*kilo, PERM_WRITEABLE) ;
f0113d88:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113d8b:	89 d0                	mov    %edx,%eax
f0113d8d:	01 c0                	add    %eax,%eax
f0113d8f:	01 d0                	add    %edx,%eax
f0113d91:	01 c0                	add    %eax,%eax
f0113d93:	83 ec 0c             	sub    $0xc,%esp
f0113d96:	6a 02                	push   $0x2
f0113d98:	50                   	push   %eax
f0113d99:	68 00 40 10 f0       	push   $0xf0104000
f0113d9e:	68 00 00 10 f0       	push   $0xf0100000
f0113da3:	ff 75 cc             	pushl  -0x34(%ebp)
f0113da6:	e8 6d 51 ff ff       	call   f0108f18 <share_chunk>
f0113dab:	83 c4 20             	add    $0x20,%esp
f0113dae:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113db1:	e8 e1 93 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0113db6:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0113db9:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0113dbd:	75 08                	jne    f0113dc7 <test_share_chunk+0x107>
f0113dbf:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113dc2:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0113dc5:	74 28                	je     f0113def <test_share_chunk+0x12f>
		{
			warn("[EVAL] share_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter));
f0113dc7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113dca:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113dcd:	83 ec 0c             	sub    $0xc,%esp
f0113dd0:	50                   	push   %eax
f0113dd1:	ff 75 b0             	pushl  -0x50(%ebp)
f0113dd4:	68 50 a8 13 f0       	push   $0xf013a850
f0113dd9:	68 9e 03 00 00       	push   $0x39e
f0113dde:	68 de 91 13 f0       	push   $0xf01391de
f0113de3:	e8 2b c6 fe ff       	call   f0100413 <_warn>
f0113de8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113deb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113def:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113df3:	74 04                	je     f0113df9 <test_share_chunk+0x139>
f0113df5:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113df9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xF0100000, 0xF0104000, 8*kilo, 1, 0x003, 0x007, 0x003, 0x007, ~CHK_SHARE) == 0)
f0113dfd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113e00:	c1 e0 03             	shl    $0x3,%eax
f0113e03:	83 ec 08             	sub    $0x8,%esp
f0113e06:	68 fd 00 00 00       	push   $0xfd
f0113e0b:	6a 07                	push   $0x7
f0113e0d:	6a 03                	push   $0x3
f0113e0f:	6a 07                	push   $0x7
f0113e11:	6a 03                	push   $0x3
f0113e13:	6a 01                	push   $0x1
f0113e15:	50                   	push   %eax
f0113e16:	68 00 40 10 f0       	push   $0xf0104000
f0113e1b:	68 00 00 10 f0       	push   $0xf0100000
f0113e20:	ff 75 cc             	pushl  -0x34(%ebp)
f0113e23:	e8 96 29 00 00       	call   f01167be <CCP>
f0113e28:	83 c4 30             	add    $0x30,%esp
f0113e2b:	85 c0                	test   %eax,%eax
f0113e2d:	75 1e                	jne    f0113e4d <test_share_chunk+0x18d>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113e2f:	83 ec 04             	sub    $0x4,%esp
f0113e32:	68 ac a8 13 f0       	push   $0xf013a8ac
f0113e37:	68 a6 03 00 00       	push   $0x3a6
f0113e3c:	68 de 91 13 f0       	push   $0xf01391de
f0113e41:	e8 cd c5 fe ff       	call   f0100413 <_warn>
f0113e46:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113e49:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113e4d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113e51:	74 04                	je     f0113e57 <test_share_chunk+0x197>
f0113e53:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)

		*ptr1 = 'A' ;
f0113e57:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113e5a:	c6 00 41             	movb   $0x41,(%eax)
		*ptr2 = 'B' ;
f0113e5d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113e60:	c6 00 42             	movb   $0x42,(%eax)

		if ((*ptr1) != 'A' || (*ptr2) != 'B')
f0113e63:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113e66:	8a 00                	mov    (%eax),%al
f0113e68:	3c 41                	cmp    $0x41,%al
f0113e6a:	75 09                	jne    f0113e75 <test_share_chunk+0x1b5>
f0113e6c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113e6f:	8a 00                	mov    (%eax),%al
f0113e71:	3c 42                	cmp    $0x42,%al
f0113e73:	74 1e                	je     f0113e93 <test_share_chunk+0x1d3>
		{
			warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113e75:	83 ec 04             	sub    $0x4,%esp
f0113e78:	68 f4 a8 13 f0       	push   $0xf013a8f4
f0113e7d:	68 b0 03 00 00       	push   $0x3b0
f0113e82:	68 de 91 13 f0       	push   $0xf01391de
f0113e87:	e8 87 c5 fe ff       	call   f0100413 <_warn>
f0113e8c:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113e8f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113e93:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113e97:	74 04                	je     f0113e9d <test_share_chunk+0x1dd>
f0113e99:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113e9d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		*ptr1 = tptr[1] ;
f0113ea1:	8a 95 45 ff ff ff    	mov    -0xbb(%ebp),%dl
f0113ea7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113eaa:	88 10                	mov    %dl,(%eax)
		*ptr2 = tptr[2] ;
f0113eac:	8a 95 46 ff ff ff    	mov    -0xba(%ebp),%dl
f0113eb2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113eb5:	88 10                	mov    %dl,(%eax)
	}
	cprintf("\nCASE I: END\n") ;
f0113eb7:	83 ec 0c             	sub    $0xc,%esp
f0113eba:	68 29 a9 13 f0       	push   $0xf013a929
f0113ebf:	e8 4a ce fe ff       	call   f0100d0e <cprintf>
f0113ec4:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART II: Destination page(s) not exist [Supervisor] 25% */
	/*========================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor] [25%]\n") ;
f0113ec7:	83 ec 0c             	sub    $0xc,%esp
f0113eca:	68 38 a9 13 f0       	push   $0xf013a938
f0113ecf:	e8 3a ce fe ff       	call   f0100d0e <cprintf>
f0113ed4:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113ed7:	e8 bb 92 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0113edc:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0000000,0x40000000, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0113edf:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113ee2:	c1 e0 05             	shl    $0x5,%eax
f0113ee5:	83 ec 0c             	sub    $0xc,%esp
f0113ee8:	68 02 0e 00 00       	push   $0xe02
f0113eed:	50                   	push   %eax
f0113eee:	68 00 00 00 40       	push   $0x40000000
f0113ef3:	68 00 00 00 f0       	push   $0xf0000000
f0113ef8:	ff 75 cc             	pushl  -0x34(%ebp)
f0113efb:	e8 18 50 ff ff       	call   f0108f18 <share_chunk>
f0113f00:	83 c4 20             	add    $0x20,%esp
f0113f03:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113f06:	e8 8c 92 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0113f0b:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (32*mega) / (4*mega))
f0113f0e:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0113f12:	75 1f                	jne    f0113f33 <test_share_chunk+0x273>
f0113f14:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113f17:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113f1a:	89 c1                	mov    %eax,%ecx
f0113f1c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113f1f:	c1 e0 05             	shl    $0x5,%eax
f0113f22:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0113f25:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113f2c:	99                   	cltd   
f0113f2d:	f7 fb                	idiv   %ebx
f0113f2f:	39 c1                	cmp    %eax,%ecx
f0113f31:	74 28                	je     f0113f5b <test_share_chunk+0x29b>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113f33:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113f36:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113f39:	83 ec 0c             	sub    $0xc,%esp
f0113f3c:	50                   	push   %eax
f0113f3d:	ff 75 a8             	pushl  -0x58(%ebp)
f0113f40:	68 74 a9 13 f0       	push   $0xf013a974
f0113f45:	68 c8 03 00 00       	push   $0x3c8
f0113f4a:	68 de 91 13 f0       	push   $0xf01391de
f0113f4f:	e8 bf c4 fe ff       	call   f0100413 <_warn>
f0113f54:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113f57:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113f5b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113f5f:	74 04                	je     f0113f65 <test_share_chunk+0x2a5>
f0113f61:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113f65:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113f69:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0xF0000000, 0x40000000, 32*mega, -1, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0113f70:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113f73:	c1 e0 05             	shl    $0x5,%eax
f0113f76:	83 ec 08             	sub    $0x8,%esp
f0113f79:	6a 02                	push   $0x2
f0113f7b:	6a 07                	push   $0x7
f0113f7d:	6a 03                	push   $0x3
f0113f7f:	68 07 0e 00 00       	push   $0xe07
f0113f84:	68 03 0e 00 00       	push   $0xe03
f0113f89:	6a ff                	push   $0xffffffff
f0113f8b:	50                   	push   %eax
f0113f8c:	68 00 00 00 40       	push   $0x40000000
f0113f91:	68 00 00 00 f0       	push   $0xf0000000
f0113f96:	ff 75 cc             	pushl  -0x34(%ebp)
f0113f99:	e8 20 28 00 00       	call   f01167be <CCP>
f0113f9e:	83 c4 30             	add    $0x30,%esp
f0113fa1:	85 c0                	test   %eax,%eax
f0113fa3:	75 25                	jne    f0113fca <test_share_chunk+0x30a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113fa5:	83 ec 04             	sub    $0x4,%esp
f0113fa8:	68 ac a8 13 f0       	push   $0xf013a8ac
f0113fad:	68 d1 03 00 00       	push   $0x3d1
f0113fb2:	68 de 91 13 f0       	push   $0xf01391de
f0113fb7:	e8 57 c4 fe ff       	call   f0100413 <_warn>
f0113fbc:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113fbf:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113fc3:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}

		if (CCP(proc_directory, 0xF0000000, 0x40000000, 12*kilo, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0113fca:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113fcd:	89 d0                	mov    %edx,%eax
f0113fcf:	01 c0                	add    %eax,%eax
f0113fd1:	01 d0                	add    %edx,%eax
f0113fd3:	c1 e0 02             	shl    $0x2,%eax
f0113fd6:	83 ec 08             	sub    $0x8,%esp
f0113fd9:	6a 02                	push   $0x2
f0113fdb:	6a 07                	push   $0x7
f0113fdd:	6a 03                	push   $0x3
f0113fdf:	68 07 0e 00 00       	push   $0xe07
f0113fe4:	68 03 0e 00 00       	push   $0xe03
f0113fe9:	6a 02                	push   $0x2
f0113feb:	50                   	push   %eax
f0113fec:	68 00 00 00 40       	push   $0x40000000
f0113ff1:	68 00 00 00 f0       	push   $0xf0000000
f0113ff6:	ff 75 cc             	pushl  -0x34(%ebp)
f0113ff9:	e8 c0 27 00 00       	call   f01167be <CCP>
f0113ffe:	83 c4 30             	add    $0x30,%esp
f0114001:	85 c0                	test   %eax,%eax
f0114003:	75 1e                	jne    f0114023 <test_share_chunk+0x363>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114005:	83 ec 04             	sub    $0x4,%esp
f0114008:	68 ac a8 13 f0       	push   $0xf013a8ac
f011400d:	68 d8 03 00 00       	push   $0x3d8
f0114012:	68 de 91 13 f0       	push   $0xf01391de
f0114017:	e8 f7 c3 fe ff       	call   f0100413 <_warn>
f011401c:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011401f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114023:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114027:	74 04                	je     f011402d <test_share_chunk+0x36d>
f0114029:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011402d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		extern char end_of_kernel[];
		uint32 endRange = ((uint32)end_of_kernel - KERNEL_BASE);
f0114031:	b8 bc ae 89 f0       	mov    $0xf089aebc,%eax
f0114036:	05 00 00 00 10       	add    $0x10000000,%eax
f011403b:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (CCP(proc_directory, 0xF0000000+PHYS_IO_MEM, 0x40000000+PHYS_IO_MEM, endRange - PHYS_IO_MEM, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f011403e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0114041:	2d 00 00 0a 00       	sub    $0xa0000,%eax
f0114046:	83 ec 08             	sub    $0x8,%esp
f0114049:	6a 02                	push   $0x2
f011404b:	6a 07                	push   $0x7
f011404d:	6a 03                	push   $0x3
f011404f:	68 07 0e 00 00       	push   $0xe07
f0114054:	68 03 0e 00 00       	push   $0xe03
f0114059:	6a 02                	push   $0x2
f011405b:	50                   	push   %eax
f011405c:	68 00 00 0a 40       	push   $0x400a0000
f0114061:	68 00 00 0a f0       	push   $0xf00a0000
f0114066:	ff 75 cc             	pushl  -0x34(%ebp)
f0114069:	e8 50 27 00 00       	call   f01167be <CCP>
f011406e:	83 c4 30             	add    $0x30,%esp
f0114071:	85 c0                	test   %eax,%eax
f0114073:	75 1e                	jne    f0114093 <test_share_chunk+0x3d3>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114075:	83 ec 04             	sub    $0x4,%esp
f0114078:	68 ac a8 13 f0       	push   $0xf013a8ac
f011407d:	68 e2 03 00 00       	push   $0x3e2
f0114082:	68 de 91 13 f0       	push   $0xf01391de
f0114087:	e8 87 c3 fe ff       	call   f0100413 <_warn>
f011408c:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011408f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114093:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114097:	74 04                	je     f011409d <test_share_chunk+0x3dd>
f0114099:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011409d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01140a1:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01140a5:	0f 84 a4 00 00 00    	je     f011414f <test_share_chunk+0x48f>
		{
			ptr1 = (char*)0xF00007FF; *ptr1 = 'A' ;
f01140ab:	c7 45 bc ff 07 00 f0 	movl   $0xf00007ff,-0x44(%ebp)
f01140b2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01140b5:	c6 00 41             	movb   $0x41,(%eax)
			ptr2 = (char*)0x400007FF;
f01140b8:	c7 45 b8 ff 07 00 40 	movl   $0x400007ff,-0x48(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A')
f01140bf:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01140c2:	8a 00                	mov    (%eax),%al
f01140c4:	3c 41                	cmp    $0x41,%al
f01140c6:	75 09                	jne    f01140d1 <test_share_chunk+0x411>
f01140c8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01140cb:	8a 00                	mov    (%eax),%al
f01140cd:	3c 41                	cmp    $0x41,%al
f01140cf:	74 1e                	je     f01140ef <test_share_chunk+0x42f>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01140d1:	83 ec 04             	sub    $0x4,%esp
f01140d4:	68 f4 a8 13 f0       	push   $0xf013a8f4
f01140d9:	68 ef 03 00 00       	push   $0x3ef
f01140de:	68 de 91 13 f0       	push   $0xf01391de
f01140e3:	e8 2b c3 fe ff       	call   f0100413 <_warn>
f01140e8:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01140eb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01140ef:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01140f3:	74 04                	je     f01140f9 <test_share_chunk+0x439>
f01140f5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01140f9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

			ptr1 = (char*)0x41000FFF; *ptr1 = 'C' ;
f01140fd:	c7 45 bc ff 0f 00 41 	movl   $0x41000fff,-0x44(%ebp)
f0114104:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114107:	c6 00 43             	movb   $0x43,(%eax)
			ptr2 = (char*)0xF1000FFF;
f011410a:	c7 45 b8 ff 0f 00 f1 	movl   $0xf1000fff,-0x48(%ebp)

			if ((*ptr1) != 'C' || (*ptr2) != 'C')
f0114111:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114114:	8a 00                	mov    (%eax),%al
f0114116:	3c 43                	cmp    $0x43,%al
f0114118:	75 09                	jne    f0114123 <test_share_chunk+0x463>
f011411a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011411d:	8a 00                	mov    (%eax),%al
f011411f:	3c 43                	cmp    $0x43,%al
f0114121:	74 1e                	je     f0114141 <test_share_chunk+0x481>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0114123:	83 ec 04             	sub    $0x4,%esp
f0114126:	68 f4 a8 13 f0       	push   $0xf013a8f4
f011412b:	68 fa 03 00 00       	push   $0x3fa
f0114130:	68 de 91 13 f0       	push   $0xf01391de
f0114135:	e8 d9 c2 fe ff       	call   f0100413 <_warn>
f011413a:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011413d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114141:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114145:	74 04                	je     f011414b <test_share_chunk+0x48b>
f0114147:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011414b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f011414f:	83 ec 0c             	sub    $0xc,%esp
f0114152:	68 03 9f 13 f0       	push   $0xf0139f03
f0114157:	e8 b2 cb fe ff       	call   f0100d0e <cprintf>
f011415c:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART III: Destination page(s) not exist [User r/w] 25%  */
	/*========================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [User r/w] [25%]\n") ;
f011415f:	83 ec 0c             	sub    $0xc,%esp
f0114162:	68 c4 a9 13 f0       	push   $0xf013a9c4
f0114167:	e8 a2 cb fe ff       	call   f0100d0e <cprintf>
f011416c:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011416f:	e8 23 90 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0114174:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x40000000,0x0, 648*kilo, PERM_WRITEABLE|PERM_USER) ;
f0114177:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011417a:	89 d0                	mov    %edx,%eax
f011417c:	c1 e0 03             	shl    $0x3,%eax
f011417f:	01 d0                	add    %edx,%eax
f0114181:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0114188:	01 d0                	add    %edx,%eax
f011418a:	c1 e0 03             	shl    $0x3,%eax
f011418d:	83 ec 0c             	sub    $0xc,%esp
f0114190:	6a 06                	push   $0x6
f0114192:	50                   	push   %eax
f0114193:	6a 00                	push   $0x0
f0114195:	68 00 00 00 40       	push   $0x40000000
f011419a:	ff 75 cc             	pushl  -0x34(%ebp)
f011419d:	e8 76 4d ff ff       	call   f0108f18 <share_chunk>
f01141a2:	83 c4 20             	add    $0x20,%esp
f01141a5:	89 45 a0             	mov    %eax,-0x60(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01141a8:	e8 ea 8f ff ff       	call   f010d197 <sys_calculate_free_frames>
f01141ad:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f01141b0:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f01141b4:	75 0b                	jne    f01141c1 <test_share_chunk+0x501>
f01141b6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01141b9:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01141bc:	83 f8 01             	cmp    $0x1,%eax
f01141bf:	74 28                	je     f01141e9 <test_share_chunk+0x529>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01141c1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01141c4:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01141c7:	83 ec 0c             	sub    $0xc,%esp
f01141ca:	50                   	push   %eax
f01141cb:	ff 75 a0             	pushl  -0x60(%ebp)
f01141ce:	68 74 a9 13 f0       	push   $0xf013a974
f01141d3:	68 10 04 00 00       	push   $0x410
f01141d8:	68 de 91 13 f0       	push   $0xf01391de
f01141dd:	e8 31 c2 fe ff       	call   f0100413 <_warn>
f01141e2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01141e5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01141e9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01141ed:	74 04                	je     f01141f3 <test_share_chunk+0x533>
f01141ef:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01141f3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01141f7:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0x40000000, 0x0, PHYS_IO_MEM + 4*kilo, -1, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f01141fe:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114201:	05 00 80 02 00       	add    $0x28000,%eax
f0114206:	c1 e0 02             	shl    $0x2,%eax
f0114209:	83 ec 08             	sub    $0x8,%esp
f011420c:	6a 02                	push   $0x2
f011420e:	6a 07                	push   $0x7
f0114210:	6a 03                	push   $0x3
f0114212:	6a 07                	push   $0x7
f0114214:	6a 07                	push   $0x7
f0114216:	6a ff                	push   $0xffffffff
f0114218:	50                   	push   %eax
f0114219:	6a 00                	push   $0x0
f011421b:	68 00 00 00 40       	push   $0x40000000
f0114220:	ff 75 cc             	pushl  -0x34(%ebp)
f0114223:	e8 96 25 00 00       	call   f01167be <CCP>
f0114228:	83 c4 30             	add    $0x30,%esp
f011422b:	85 c0                	test   %eax,%eax
f011422d:	75 25                	jne    f0114254 <test_share_chunk+0x594>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011422f:	83 ec 04             	sub    $0x4,%esp
f0114232:	68 ac a8 13 f0       	push   $0xf013a8ac
f0114237:	68 19 04 00 00       	push   $0x419
f011423c:	68 de 91 13 f0       	push   $0xf01391de
f0114241:	e8 cd c1 fe ff       	call   f0100413 <_warn>
f0114246:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114249:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f011424d:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}

		if (CCP(proc_directory, 0x40000000, 0x0, 12*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0114254:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114257:	89 d0                	mov    %edx,%eax
f0114259:	01 c0                	add    %eax,%eax
f011425b:	01 d0                	add    %edx,%eax
f011425d:	c1 e0 02             	shl    $0x2,%eax
f0114260:	83 ec 08             	sub    $0x8,%esp
f0114263:	6a 02                	push   $0x2
f0114265:	6a 07                	push   $0x7
f0114267:	6a 03                	push   $0x3
f0114269:	6a 07                	push   $0x7
f011426b:	6a 07                	push   $0x7
f011426d:	6a 03                	push   $0x3
f011426f:	50                   	push   %eax
f0114270:	6a 00                	push   $0x0
f0114272:	68 00 00 00 40       	push   $0x40000000
f0114277:	ff 75 cc             	pushl  -0x34(%ebp)
f011427a:	e8 3f 25 00 00       	call   f01167be <CCP>
f011427f:	83 c4 30             	add    $0x30,%esp
f0114282:	85 c0                	test   %eax,%eax
f0114284:	75 1e                	jne    f01142a4 <test_share_chunk+0x5e4>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114286:	83 ec 04             	sub    $0x4,%esp
f0114289:	68 ac a8 13 f0       	push   $0xf013a8ac
f011428e:	68 20 04 00 00       	push   $0x420
f0114293:	68 de 91 13 f0       	push   $0xf01391de
f0114298:	e8 76 c1 fe ff       	call   f0100413 <_warn>
f011429d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01142a0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01142a4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01142a8:	74 04                	je     f01142ae <test_share_chunk+0x5ee>
f01142aa:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01142ae:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40003000, 0x3000, PHYS_IO_MEM - 12*kilo, 2, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f01142b2:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01142b5:	89 d0                	mov    %edx,%eax
f01142b7:	01 c0                	add    %eax,%eax
f01142b9:	01 d0                	add    %edx,%eax
f01142bb:	c1 e0 02             	shl    $0x2,%eax
f01142be:	f7 d8                	neg    %eax
f01142c0:	05 00 00 0a 00       	add    $0xa0000,%eax
f01142c5:	83 ec 08             	sub    $0x8,%esp
f01142c8:	6a 02                	push   $0x2
f01142ca:	6a 07                	push   $0x7
f01142cc:	6a 03                	push   $0x3
f01142ce:	6a 07                	push   $0x7
f01142d0:	6a 07                	push   $0x7
f01142d2:	6a 02                	push   $0x2
f01142d4:	50                   	push   %eax
f01142d5:	68 00 30 00 00       	push   $0x3000
f01142da:	68 00 30 00 40       	push   $0x40003000
f01142df:	ff 75 cc             	pushl  -0x34(%ebp)
f01142e2:	e8 d7 24 00 00       	call   f01167be <CCP>
f01142e7:	83 c4 30             	add    $0x30,%esp
f01142ea:	85 c0                	test   %eax,%eax
f01142ec:	75 1e                	jne    f011430c <test_share_chunk+0x64c>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01142ee:	83 ec 04             	sub    $0x4,%esp
f01142f1:	68 ac a8 13 f0       	push   $0xf013a8ac
f01142f6:	68 28 04 00 00       	push   $0x428
f01142fb:	68 de 91 13 f0       	push   $0xf01391de
f0114300:	e8 0e c1 fe ff       	call   f0100413 <_warn>
f0114305:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114308:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011430c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114310:	74 04                	je     f0114316 <test_share_chunk+0x656>
f0114312:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114316:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40000000+PHYS_IO_MEM, PHYS_IO_MEM, 4*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f011431a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011431d:	c1 e0 02             	shl    $0x2,%eax
f0114320:	83 ec 08             	sub    $0x8,%esp
f0114323:	6a 02                	push   $0x2
f0114325:	6a 07                	push   $0x7
f0114327:	6a 03                	push   $0x3
f0114329:	6a 07                	push   $0x7
f011432b:	6a 07                	push   $0x7
f011432d:	6a 03                	push   $0x3
f011432f:	50                   	push   %eax
f0114330:	68 00 00 0a 00       	push   $0xa0000
f0114335:	68 00 00 0a 40       	push   $0x400a0000
f011433a:	ff 75 cc             	pushl  -0x34(%ebp)
f011433d:	e8 7c 24 00 00       	call   f01167be <CCP>
f0114342:	83 c4 30             	add    $0x30,%esp
f0114345:	85 c0                	test   %eax,%eax
f0114347:	75 1e                	jne    f0114367 <test_share_chunk+0x6a7>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114349:	83 ec 04             	sub    $0x4,%esp
f011434c:	68 ac a8 13 f0       	push   $0xf013a8ac
f0114351:	68 30 04 00 00       	push   $0x430
f0114356:	68 de 91 13 f0       	push   $0xf01391de
f011435b:	e8 b3 c0 fe ff       	call   f0100413 <_warn>
f0114360:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114363:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114367:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011436b:	74 04                	je     f0114371 <test_share_chunk+0x6b1>
f011436d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114371:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114375:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0114379:	0f 84 92 00 00 00    	je     f0114411 <test_share_chunk+0x751>
		{
			ptr1 = (char*)0x7FF;
f011437f:	c7 45 bc ff 07 00 00 	movl   $0x7ff,-0x44(%ebp)
			ptr2 = (char*)0xF00007FF;
f0114386:	c7 45 b8 ff 07 00 f0 	movl   $0xf00007ff,-0x48(%ebp)
			ptr3 = (char*)0x400007FF;
f011438d:	c7 45 9c ff 07 00 40 	movl   $0x400007ff,-0x64(%ebp)
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
f0114394:	c7 45 98 ff ff 09 00 	movl   $0x9ffff,-0x68(%ebp)
f011439b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011439e:	c6 00 44             	movb   $0x44,(%eax)
			ptr5 = (char*)0xF009FFFF;
f01143a1:	c7 45 94 ff ff 09 f0 	movl   $0xf009ffff,-0x6c(%ebp)
			ptr6 = (char*)0x4009FFFF;
f01143a8:	c7 45 90 ff ff 09 40 	movl   $0x4009ffff,-0x70(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f01143af:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01143b2:	8a 00                	mov    (%eax),%al
f01143b4:	3c 41                	cmp    $0x41,%al
f01143b6:	75 2d                	jne    f01143e5 <test_share_chunk+0x725>
f01143b8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01143bb:	8a 00                	mov    (%eax),%al
f01143bd:	3c 41                	cmp    $0x41,%al
f01143bf:	75 24                	jne    f01143e5 <test_share_chunk+0x725>
f01143c1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01143c4:	8a 00                	mov    (%eax),%al
f01143c6:	3c 41                	cmp    $0x41,%al
f01143c8:	75 1b                	jne    f01143e5 <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f01143ca:	8b 45 98             	mov    -0x68(%ebp),%eax
f01143cd:	8a 00                	mov    (%eax),%al
			ptr3 = (char*)0x400007FF;
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
			ptr5 = (char*)0xF009FFFF;
			ptr6 = (char*)0x4009FFFF;

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f01143cf:	3c 44                	cmp    $0x44,%al
f01143d1:	75 12                	jne    f01143e5 <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f01143d3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01143d6:	8a 00                	mov    (%eax),%al
f01143d8:	3c 44                	cmp    $0x44,%al
f01143da:	75 09                	jne    f01143e5 <test_share_chunk+0x725>
f01143dc:	8b 45 90             	mov    -0x70(%ebp),%eax
f01143df:	8a 00                	mov    (%eax),%al
f01143e1:	3c 44                	cmp    $0x44,%al
f01143e3:	74 1e                	je     f0114403 <test_share_chunk+0x743>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01143e5:	83 ec 04             	sub    $0x4,%esp
f01143e8:	68 f4 a8 13 f0       	push   $0xf013a8f4
f01143ed:	68 42 04 00 00       	push   $0x442
f01143f2:	68 de 91 13 f0       	push   $0xf01391de
f01143f7:	e8 17 c0 fe ff       	call   f0100413 <_warn>
f01143fc:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01143ff:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114403:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114407:	74 04                	je     f011440d <test_share_chunk+0x74d>
f0114409:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011440d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0114411:	83 ec 0c             	sub    $0xc,%esp
f0114414:	68 66 9f 13 f0       	push   $0xf0139f66
f0114419:	e8 f0 c8 fe ff       	call   f0100d0e <cprintf>
f011441e:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r] 30%     */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r] [30%]\n") ;
f0114421:	83 ec 0c             	sub    $0xc,%esp
f0114424:	68 00 aa 13 f0       	push   $0xf013aa00
f0114429:	e8 e0 c8 fe ff       	call   f0100d0e <cprintf>
f011442e:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114431:	e8 61 8d ff ff       	call   f010d197 <sys_calculate_free_frames>
f0114436:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x9FC00,0x3FFC00, 7*kilo, PERM_USER) ;
f0114439:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011443c:	89 d0                	mov    %edx,%eax
f011443e:	01 c0                	add    %eax,%eax
f0114440:	01 d0                	add    %edx,%eax
f0114442:	01 c0                	add    %eax,%eax
f0114444:	01 d0                	add    %edx,%eax
f0114446:	83 ec 0c             	sub    $0xc,%esp
f0114449:	6a 04                	push   $0x4
f011444b:	50                   	push   %eax
f011444c:	68 00 fc 3f 00       	push   $0x3ffc00
f0114451:	68 00 fc 09 00       	push   $0x9fc00
f0114456:	ff 75 cc             	pushl  -0x34(%ebp)
f0114459:	e8 ba 4a ff ff       	call   f0108f18 <share_chunk>
f011445e:	83 c4 20             	add    $0x20,%esp
f0114461:	89 45 8c             	mov    %eax,-0x74(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114464:	e8 2e 8d ff ff       	call   f010d197 <sys_calculate_free_frames>
f0114469:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f011446c:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
f0114470:	75 0b                	jne    f011447d <test_share_chunk+0x7bd>
f0114472:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114475:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114478:	83 f8 01             	cmp    $0x1,%eax
f011447b:	74 28                	je     f01144a5 <test_share_chunk+0x7e5>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011447d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114480:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114483:	83 ec 0c             	sub    $0xc,%esp
f0114486:	50                   	push   %eax
f0114487:	ff 75 8c             	pushl  -0x74(%ebp)
f011448a:	68 74 a9 13 f0       	push   $0xf013a974
f011448f:	68 58 04 00 00       	push   $0x458
f0114494:	68 de 91 13 f0       	push   $0xf01391de
f0114499:	e8 75 bf fe ff       	call   f0100413 <_warn>
f011449e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01144a1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01144a5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01144a9:	74 04                	je     f01144af <test_share_chunk+0x7ef>
f01144ab:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01144af:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01144b3:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0x9F000, 0x3FF000, 12*kilo, -1, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f01144ba:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01144bd:	89 d0                	mov    %edx,%eax
f01144bf:	01 c0                	add    %eax,%eax
f01144c1:	01 d0                	add    %edx,%eax
f01144c3:	c1 e0 02             	shl    $0x2,%eax
f01144c6:	83 ec 08             	sub    $0x8,%esp
f01144c9:	6a 02                	push   $0x2
f01144cb:	6a 07                	push   $0x7
f01144cd:	6a 07                	push   $0x7
f01144cf:	6a 07                	push   $0x7
f01144d1:	6a 05                	push   $0x5
f01144d3:	6a ff                	push   $0xffffffff
f01144d5:	50                   	push   %eax
f01144d6:	68 00 f0 3f 00       	push   $0x3ff000
f01144db:	68 00 f0 09 00       	push   $0x9f000
f01144e0:	ff 75 cc             	pushl  -0x34(%ebp)
f01144e3:	e8 d6 22 00 00       	call   f01167be <CCP>
f01144e8:	83 c4 30             	add    $0x30,%esp
f01144eb:	85 c0                	test   %eax,%eax
f01144ed:	75 25                	jne    f0114514 <test_share_chunk+0x854>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01144ef:	83 ec 04             	sub    $0x4,%esp
f01144f2:	68 ac a8 13 f0       	push   $0xf013a8ac
f01144f7:	68 61 04 00 00       	push   $0x461
f01144fc:	68 de 91 13 f0       	push   $0xf01391de
f0114501:	e8 0d bf fe ff       	call   f0100413 <_warn>
f0114506:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114509:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f011450d:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 5 ;
f0114514:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114518:	74 04                	je     f011451e <test_share_chunk+0x85e>
f011451a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011451e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x9F000, 0x3FF000, 4*kilo, 3, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0114522:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114525:	c1 e0 02             	shl    $0x2,%eax
f0114528:	83 ec 08             	sub    $0x8,%esp
f011452b:	6a 02                	push   $0x2
f011452d:	6a 07                	push   $0x7
f011452f:	6a 07                	push   $0x7
f0114531:	6a 07                	push   $0x7
f0114533:	6a 05                	push   $0x5
f0114535:	6a 03                	push   $0x3
f0114537:	50                   	push   %eax
f0114538:	68 00 f0 3f 00       	push   $0x3ff000
f011453d:	68 00 f0 09 00       	push   $0x9f000
f0114542:	ff 75 cc             	pushl  -0x34(%ebp)
f0114545:	e8 74 22 00 00       	call   f01167be <CCP>
f011454a:	83 c4 30             	add    $0x30,%esp
f011454d:	85 c0                	test   %eax,%eax
f011454f:	75 1e                	jne    f011456f <test_share_chunk+0x8af>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114551:	83 ec 04             	sub    $0x4,%esp
f0114554:	68 ac a8 13 f0       	push   $0xf013a8ac
f0114559:	68 6a 04 00 00       	push   $0x46a
f011455e:	68 de 91 13 f0       	push   $0xf01391de
f0114563:	e8 ab be fe ff       	call   f0100413 <_warn>
f0114568:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011456b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011456f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114573:	74 04                	je     f0114579 <test_share_chunk+0x8b9>
f0114575:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114579:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xA0000, 0x400000, 8*kilo, 4, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f011457d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114580:	c1 e0 03             	shl    $0x3,%eax
f0114583:	83 ec 08             	sub    $0x8,%esp
f0114586:	6a 02                	push   $0x2
f0114588:	6a 07                	push   $0x7
f011458a:	6a 07                	push   $0x7
f011458c:	6a 07                	push   $0x7
f011458e:	6a 05                	push   $0x5
f0114590:	6a 04                	push   $0x4
f0114592:	50                   	push   %eax
f0114593:	68 00 00 40 00       	push   $0x400000
f0114598:	68 00 00 0a 00       	push   $0xa0000
f011459d:	ff 75 cc             	pushl  -0x34(%ebp)
f01145a0:	e8 19 22 00 00       	call   f01167be <CCP>
f01145a5:	83 c4 30             	add    $0x30,%esp
f01145a8:	85 c0                	test   %eax,%eax
f01145aa:	75 1e                	jne    f01145ca <test_share_chunk+0x90a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01145ac:	83 ec 04             	sub    $0x4,%esp
f01145af:	68 ac a8 13 f0       	push   $0xf013a8ac
f01145b4:	68 72 04 00 00       	push   $0x472
f01145b9:	68 de 91 13 f0       	push   $0xf01391de
f01145be:	e8 50 be fe ff       	call   f0100413 <_warn>
f01145c3:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01145c6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01145ca:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01145ce:	74 04                	je     f01145d4 <test_share_chunk+0x914>
f01145d0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01145d4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01145d8:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01145dc:	0f 84 b2 00 00 00    	je     f0114694 <test_share_chunk+0x9d4>
		{
			ptr1 = (char*)0x0009FFFF;
f01145e2:	c7 45 bc ff ff 09 00 	movl   $0x9ffff,-0x44(%ebp)
			ptr2 = (char*)0x003FFFFF;
f01145e9:	c7 45 b8 ff ff 3f 00 	movl   $0x3fffff,-0x48(%ebp)
			ptr3 = (char*)0x4009FFFF;
f01145f0:	c7 45 9c ff ff 09 40 	movl   $0x4009ffff,-0x64(%ebp)
			ptr4 = (char*)0xF009FFFF;
f01145f7:	c7 45 98 ff ff 09 f0 	movl   $0xf009ffff,-0x68(%ebp)

			ptr5 = (char*)0x000A1001;
f01145fe:	c7 45 94 01 10 0a 00 	movl   $0xa1001,-0x6c(%ebp)
			ptr6 = (char*)0x00401001;
f0114605:	c7 45 90 01 10 40 00 	movl   $0x401001,-0x70(%ebp)
			ptr7 = (char*)0x400A1001;
f011460c:	c7 45 88 01 10 0a 40 	movl   $0x400a1001,-0x78(%ebp)
			ptr8 = (char*)0xF00A1001;
f0114613:	c7 45 84 01 10 0a f0 	movl   $0xf00a1001,-0x7c(%ebp)

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f011461a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011461d:	8a 00                	mov    (%eax),%al
f011461f:	3c 44                	cmp    $0x44,%al
f0114621:	75 45                	jne    f0114668 <test_share_chunk+0x9a8>
f0114623:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114626:	8a 00                	mov    (%eax),%al
f0114628:	3c 44                	cmp    $0x44,%al
f011462a:	75 3c                	jne    f0114668 <test_share_chunk+0x9a8>
f011462c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011462f:	8a 00                	mov    (%eax),%al
f0114631:	3c 44                	cmp    $0x44,%al
f0114633:	75 33                	jne    f0114668 <test_share_chunk+0x9a8>
f0114635:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114638:	8a 00                	mov    (%eax),%al
f011463a:	3c 44                	cmp    $0x44,%al
f011463c:	75 2a                	jne    f0114668 <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f011463e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114641:	8a 10                	mov    (%eax),%dl
f0114643:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114646:	8a 00                	mov    (%eax),%al
			ptr5 = (char*)0x000A1001;
			ptr6 = (char*)0x00401001;
			ptr7 = (char*)0x400A1001;
			ptr8 = (char*)0xF00A1001;

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0114648:	38 c2                	cmp    %al,%dl
f011464a:	75 1c                	jne    f0114668 <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f011464c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011464f:	8a 10                	mov    (%eax),%dl
f0114651:	8b 45 88             	mov    -0x78(%ebp),%eax
f0114654:	8a 00                	mov    (%eax),%al
f0114656:	38 c2                	cmp    %al,%dl
f0114658:	75 0e                	jne    f0114668 <test_share_chunk+0x9a8>
f011465a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011465d:	8a 10                	mov    (%eax),%dl
f011465f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0114662:	8a 00                	mov    (%eax),%al
f0114664:	38 c2                	cmp    %al,%dl
f0114666:	74 1e                	je     f0114686 <test_share_chunk+0x9c6>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0114668:	83 ec 04             	sub    $0x4,%esp
f011466b:	68 f4 a8 13 f0       	push   $0xf013a8f4
f0114670:	68 87 04 00 00       	push   $0x487
f0114675:	68 de 91 13 f0       	push   $0xf01391de
f011467a:	e8 94 bd fe ff       	call   f0100413 <_warn>
f011467f:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114682:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114686:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011468a:	74 04                	je     f0114690 <test_share_chunk+0x9d0>
f011468c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114690:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE IV: END\n") ;
f0114694:	83 ec 0c             	sub    $0xc,%esp
f0114697:	68 38 aa 13 f0       	push   $0xf013aa38
f011469c:	e8 6d c6 fe ff       	call   f0100d0e <cprintf>
f01146a1:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] share_chunk: FINISHED. Evaluation = %d\n", eval);
f01146a4:	83 ec 08             	sub    $0x8,%esp
f01146a7:	ff 75 e4             	pushl  -0x1c(%ebp)
f01146aa:	68 48 aa 13 f0       	push   $0xf013aa48
f01146af:	e8 5a c6 fe ff       	call   f0100d0e <cprintf>
f01146b4:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01146b7:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01146bb:	75 10                	jne    f01146cd <test_share_chunk+0xa0d>
		cprintf("Congratulations!! test share_chunk completed successfully.\n");
f01146bd:	83 ec 0c             	sub    $0xc,%esp
f01146c0:	68 78 aa 13 f0       	push   $0xf013aa78
f01146c5:	e8 44 c6 fe ff       	call   f0100d0e <cprintf>
f01146ca:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01146cd:	a1 ac ad 89 f0       	mov    0xf089adac,%eax
f01146d2:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01146d5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01146d8:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01146db:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01146e0:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01146e3:	5b                   	pop    %ebx
f01146e4:	5e                   	pop    %esi
f01146e5:	5f                   	pop    %edi
f01146e6:	5d                   	pop    %ebp
f01146e7:	c3                   	ret    

f01146e8 <test_allocate_chunk>:

//===============================
// 4) TEST ALLOCATE CHUNK:
//===============================
int test_allocate_chunk()
{
f01146e8:	55                   	push   %ebp
f01146e9:	89 e5                	mov    %esp,%ebp
f01146eb:	57                   	push   %edi
f01146ec:	56                   	push   %esi
f01146ed:	53                   	push   %ebx
f01146ee:	81 ec ac 00 00 00    	sub    $0xac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01146f4:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01146fa:	bb 78 9c 13 f0       	mov    $0xf0139c78,%ebx
f01146ff:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114704:	89 c7                	mov    %eax,%edi
f0114706:	89 de                	mov    %ebx,%esi
f0114708:	89 d1                	mov    %edx,%ecx
f011470a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011470c:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0114712:	b9 23 00 00 00       	mov    $0x23,%ecx
f0114717:	b0 00                	mov    $0x0,%al
f0114719:	89 d7                	mov    %edx,%edi
f011471b:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011471d:	6a 00                	push   $0x0
f011471f:	6a 0a                	push   $0xa
f0114721:	6a 14                	push   $0x14
f0114723:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0114729:	50                   	push   %eax
f011472a:	e8 2e 4d ff ff       	call   f010945d <env_create>
f011472f:	83 c4 10             	add    $0x10,%esp
f0114732:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0114735:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0114738:	8b 40 5c             	mov    0x5c(%eax),%eax
f011473b:	89 45 d0             	mov    %eax,-0x30(%ebp)
	lcr3(env->env_cr3) ;
f011473e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0114741:	8b 40 60             	mov    0x60(%eax),%eax
f0114744:	89 45 90             	mov    %eax,-0x70(%ebp)
f0114747:	8b 45 90             	mov    -0x70(%ebp),%eax
f011474a:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f011474d:	83 ec 0c             	sub    $0xc,%esp
f0114750:	ff 75 d0             	pushl  -0x30(%ebp)
f0114753:	e8 32 20 00 00       	call   f011678a <ClearUserSpace>
f0114758:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f011475b:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f0114762:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)
	uint32 eval = 0;
f0114769:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0114770:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 30% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [30%]\n") ;
f0114774:	83 ec 0c             	sub    $0xc,%esp
f0114777:	68 b4 aa 13 f0       	push   $0xf013aab4
f011477c:	e8 8d c5 fe ff       	call   f0100d0e <cprintf>
f0114781:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)KERNEL_STACK_TOP - 1;
f0114784:	c7 45 c0 ff ff bf ef 	movl   $0xefbfffff,-0x40(%ebp)
		ptr2 = (char*)KERNEL_STACK_TOP - 2;
f011478b:	c7 45 bc fe ff bf ef 	movl   $0xefbffffe,-0x44(%ebp)
		tptr[1] = *ptr1 ;
f0114792:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114795:	8a 00                	mov    (%eax),%al
f0114797:	88 85 55 ff ff ff    	mov    %al,-0xab(%ebp)
		tptr[2] = *ptr2 ;
f011479d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01147a0:	8a 00                	mov    (%eax),%al
f01147a2:	88 85 56 ff ff ff    	mov    %al,-0xaa(%ebp)
		uint32 old_perms = GP(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE) ;
f01147a8:	83 ec 08             	sub    $0x8,%esp
f01147ab:	68 00 f0 bf ef       	push   $0xefbff000
f01147b0:	ff 75 d0             	pushl  -0x30(%ebp)
f01147b3:	e8 b3 1f 00 00       	call   f011676b <GP>
f01147b8:	83 c4 10             	add    $0x10,%esp
f01147bb:	89 45 b8             	mov    %eax,-0x48(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01147be:	e8 d4 89 ff ff       	call   f010d197 <sys_calculate_free_frames>
f01147c3:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE, 4*kilo, PERM_WRITEABLE) ;
f01147c6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01147c9:	c1 e0 02             	shl    $0x2,%eax
f01147cc:	6a 02                	push   $0x2
f01147ce:	50                   	push   %eax
f01147cf:	68 00 f0 bf ef       	push   $0xefbff000
f01147d4:	ff 75 d0             	pushl  -0x30(%ebp)
f01147d7:	e8 4f 48 ff ff       	call   f010902b <allocate_chunk>
f01147dc:	83 c4 10             	add    $0x10,%esp
f01147df:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01147e2:	e8 b0 89 ff ff       	call   f010d197 <sys_calculate_free_frames>
f01147e7:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f01147ea:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f01147ee:	75 08                	jne    f01147f8 <test_allocate_chunk+0x110>
f01147f0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01147f3:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01147f6:	74 2a                	je     f0114822 <test_allocate_chunk+0x13a>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f01147f8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01147fb:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01147fe:	83 ec 08             	sub    $0x8,%esp
f0114801:	6a 00                	push   $0x0
f0114803:	50                   	push   %eax
f0114804:	ff 75 b0             	pushl  -0x50(%ebp)
f0114807:	68 e0 aa 13 f0       	push   $0xf013aae0
f011480c:	68 c3 04 00 00       	push   $0x4c3
f0114811:	68 de 91 13 f0       	push   $0xf01391de
f0114816:	e8 f8 bb fe ff       	call   f0100413 <_warn>
f011481b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011481e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114822:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114826:	74 04                	je     f011482c <test_allocate_chunk+0x144>
f0114828:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011482c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114830:	e8 62 89 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0114835:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 5*kilo, 2*kilo, PERM_WRITEABLE) ;
f0114838:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011483b:	01 c0                	add    %eax,%eax
f011483d:	89 c1                	mov    %eax,%ecx
f011483f:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114842:	89 d0                	mov    %edx,%eax
f0114844:	c1 e0 02             	shl    $0x2,%eax
f0114847:	01 d0                	add    %edx,%eax
f0114849:	f7 d8                	neg    %eax
f011484b:	2d 00 00 40 10       	sub    $0x10400000,%eax
f0114850:	6a 02                	push   $0x2
f0114852:	51                   	push   %ecx
f0114853:	50                   	push   %eax
f0114854:	ff 75 d0             	pushl  -0x30(%ebp)
f0114857:	e8 cf 47 ff ff       	call   f010902b <allocate_chunk>
f011485c:	83 c4 10             	add    $0x10,%esp
f011485f:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114862:	e8 30 89 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0114867:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f011486a:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f011486e:	75 08                	jne    f0114878 <test_allocate_chunk+0x190>
f0114870:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114873:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0114876:	74 2a                	je     f01148a2 <test_allocate_chunk+0x1ba>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0114878:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011487b:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011487e:	83 ec 08             	sub    $0x8,%esp
f0114881:	6a 00                	push   $0x0
f0114883:	50                   	push   %eax
f0114884:	ff 75 b0             	pushl  -0x50(%ebp)
f0114887:	68 e0 aa 13 f0       	push   $0xf013aae0
f011488c:	68 d1 04 00 00       	push   $0x4d1
f0114891:	68 de 91 13 f0       	push   $0xf01391de
f0114896:	e8 78 bb fe ff       	call   f0100413 <_warn>
f011489b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011489e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01148a2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01148a6:	74 04                	je     f01148ac <test_allocate_chunk+0x1c4>
f01148a8:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01148ac:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0, KERNEL_STACK_TOP-1*PAGE_SIZE, 4*kilo, 1, old_perms, 0xFFF, 0, 0, CHK_ALLOC) == 0)
f01148b0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01148b3:	c1 e0 02             	shl    $0x2,%eax
f01148b6:	83 ec 08             	sub    $0x8,%esp
f01148b9:	6a 03                	push   $0x3
f01148bb:	6a 00                	push   $0x0
f01148bd:	6a 00                	push   $0x0
f01148bf:	68 ff 0f 00 00       	push   $0xfff
f01148c4:	ff 75 b8             	pushl  -0x48(%ebp)
f01148c7:	6a 01                	push   $0x1
f01148c9:	50                   	push   %eax
f01148ca:	68 00 f0 bf ef       	push   $0xefbff000
f01148cf:	6a 00                	push   $0x0
f01148d1:	ff 75 d0             	pushl  -0x30(%ebp)
f01148d4:	e8 e5 1e 00 00       	call   f01167be <CCP>
f01148d9:	83 c4 30             	add    $0x30,%esp
f01148dc:	85 c0                	test   %eax,%eax
f01148de:	75 1e                	jne    f01148fe <test_allocate_chunk+0x216>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f01148e0:	83 ec 04             	sub    $0x4,%esp
f01148e3:	68 48 ab 13 f0       	push   $0xf013ab48
f01148e8:	68 d9 04 00 00       	push   $0x4d9
f01148ed:	68 de 91 13 f0       	push   $0xf01391de
f01148f2:	e8 1c bb fe ff       	call   f0100413 <_warn>
f01148f7:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01148fa:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01148fe:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114902:	74 04                	je     f0114908 <test_allocate_chunk+0x220>
f0114904:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114908:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if ((*ptr1) != tptr[1] || (*ptr2) != tptr[2])
f011490c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011490f:	8a 10                	mov    (%eax),%dl
f0114911:	8a 85 55 ff ff ff    	mov    -0xab(%ebp),%al
f0114917:	38 c2                	cmp    %al,%dl
f0114919:	75 0f                	jne    f011492a <test_allocate_chunk+0x242>
f011491b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011491e:	8a 10                	mov    (%eax),%dl
f0114920:	8a 85 56 ff ff ff    	mov    -0xaa(%ebp),%al
f0114926:	38 c2                	cmp    %al,%dl
f0114928:	74 1e                	je     f0114948 <test_allocate_chunk+0x260>
		{
			warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f011492a:	83 ec 04             	sub    $0x4,%esp
f011492d:	68 94 ab 13 f0       	push   $0xf013ab94
f0114932:	68 e1 04 00 00       	push   $0x4e1
f0114937:	68 de 91 13 f0       	push   $0xf01391de
f011493c:	e8 d2 ba fe ff       	call   f0100413 <_warn>
f0114941:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114944:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114948:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011494c:	74 04                	je     f0114952 <test_allocate_chunk+0x26a>
f011494e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114952:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0114956:	83 ec 0c             	sub    $0xc,%esp
f0114959:	68 29 a9 13 f0       	push   $0xf013a929
f011495e:	e8 ab c3 fe ff       	call   f0100d0e <cprintf>
f0114963:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART II: Destination page(s) not exist [Supervisor r/w] 20% */
	/*============================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor r/w] [20%]\n") ;
f0114966:	83 ec 0c             	sub    $0xc,%esp
f0114969:	68 cc ab 13 f0       	push   $0xf013abcc
f011496e:	e8 9b c3 fe ff       	call   f0100d0e <cprintf>
f0114973:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114976:	e8 1c 88 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011497b:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f011497e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114981:	c1 e0 05             	shl    $0x5,%eax
f0114984:	68 02 0e 00 00       	push   $0xe02
f0114989:	50                   	push   %eax
f011498a:	6a 00                	push   $0x0
f011498c:	ff 75 d0             	pushl  -0x30(%ebp)
f011498f:	e8 97 46 ff ff       	call   f010902b <allocate_chunk>
f0114994:	83 c4 10             	add    $0x10,%esp
f0114997:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011499a:	e8 f8 87 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011499f:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((32*mega)/(4*mega) + (32*mega)/(4*kilo)))
f01149a2:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f01149a6:	75 36                	jne    f01149de <test_allocate_chunk+0x2f6>
f01149a8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01149ab:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01149ae:	89 c1                	mov    %eax,%ecx
f01149b0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01149b3:	c1 e0 05             	shl    $0x5,%eax
f01149b6:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01149b9:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01149c0:	99                   	cltd   
f01149c1:	f7 fe                	idiv   %esi
f01149c3:	89 c3                	mov    %eax,%ebx
f01149c5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01149c8:	c1 e0 05             	shl    $0x5,%eax
f01149cb:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01149ce:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01149d5:	99                   	cltd   
f01149d6:	f7 fe                	idiv   %esi
f01149d8:	01 d8                	add    %ebx,%eax
f01149da:	39 c1                	cmp    %eax,%ecx
f01149dc:	74 54                	je     f0114a32 <test_allocate_chunk+0x34a>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((32*mega)/(4*mega) + (32*mega)/(4*kilo)));
f01149de:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01149e1:	c1 e0 05             	shl    $0x5,%eax
f01149e4:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01149e7:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f01149ee:	99                   	cltd   
f01149ef:	f7 ff                	idiv   %edi
f01149f1:	89 c1                	mov    %eax,%ecx
f01149f3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01149f6:	c1 e0 05             	shl    $0x5,%eax
f01149f9:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01149fc:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114a03:	99                   	cltd   
f0114a04:	f7 fe                	idiv   %esi
f0114a06:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114a09:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114a0c:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114a0f:	83 ec 08             	sub    $0x8,%esp
f0114a12:	52                   	push   %edx
f0114a13:	50                   	push   %eax
f0114a14:	ff 75 a8             	pushl  -0x58(%ebp)
f0114a17:	68 0c ac 13 f0       	push   $0xf013ac0c
f0114a1c:	68 f6 04 00 00       	push   $0x4f6
f0114a21:	68 de 91 13 f0       	push   $0xf01391de
f0114a26:	e8 e8 b9 fe ff       	call   f0100413 <_warn>
f0114a2b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114a2e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114a32:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114a36:	74 04                	je     f0114a3c <test_allocate_chunk+0x354>
f0114a38:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114a3c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114a40:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0, 0x0, 32*mega, 1, 0xE03, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114a47:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114a4a:	c1 e0 05             	shl    $0x5,%eax
f0114a4d:	83 ec 08             	sub    $0x8,%esp
f0114a50:	6a 03                	push   $0x3
f0114a52:	6a 00                	push   $0x0
f0114a54:	6a 00                	push   $0x0
f0114a56:	68 07 0e 00 00       	push   $0xe07
f0114a5b:	68 03 0e 00 00       	push   $0xe03
f0114a60:	6a 01                	push   $0x1
f0114a62:	50                   	push   %eax
f0114a63:	6a 00                	push   $0x0
f0114a65:	6a 00                	push   $0x0
f0114a67:	ff 75 d0             	pushl  -0x30(%ebp)
f0114a6a:	e8 4f 1d 00 00       	call   f01167be <CCP>
f0114a6f:	83 c4 30             	add    $0x30,%esp
f0114a72:	85 c0                	test   %eax,%eax
f0114a74:	75 25                	jne    f0114a9b <test_allocate_chunk+0x3b3>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114a76:	83 ec 04             	sub    $0x4,%esp
f0114a79:	68 48 ab 13 f0       	push   $0xf013ab48
f0114a7e:	68 ff 04 00 00       	push   $0x4ff
f0114a83:	68 de 91 13 f0       	push   $0xf01391de
f0114a88:	e8 86 b9 fe ff       	call   f0100413 <_warn>
f0114a8d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114a90:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114a94:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f0114a9b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114a9f:	74 04                	je     f0114aa5 <test_allocate_chunk+0x3bd>
f0114aa1:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114aa5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114aa9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0114aad:	74 5a                	je     f0114b09 <test_allocate_chunk+0x421>
		{
			ptr1 = (char*)(0x0+2*kilo); *ptr1 = 'K' ;
f0114aaf:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114ab2:	01 c0                	add    %eax,%eax
f0114ab4:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114ab7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114aba:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(0x0+2*mega); *ptr2 = 'M' ;
f0114abd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114ac0:	01 c0                	add    %eax,%eax
f0114ac2:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0114ac5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114ac8:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0114acb:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114ace:	8a 00                	mov    (%eax),%al
f0114ad0:	3c 4b                	cmp    $0x4b,%al
f0114ad2:	75 09                	jne    f0114add <test_allocate_chunk+0x3f5>
f0114ad4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114ad7:	8a 00                	mov    (%eax),%al
f0114ad9:	3c 4d                	cmp    $0x4d,%al
f0114adb:	74 1e                	je     f0114afb <test_allocate_chunk+0x413>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114add:	83 ec 04             	sub    $0x4,%esp
f0114ae0:	68 94 ab 13 f0       	push   $0xf013ab94
f0114ae5:	68 0d 05 00 00       	push   $0x50d
f0114aea:	68 de 91 13 f0       	push   $0xf01391de
f0114aef:	e8 1f b9 fe ff       	call   f0100413 <_warn>
f0114af4:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114af7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114afb:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114aff:	74 04                	je     f0114b05 <test_allocate_chunk+0x41d>
f0114b01:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114b05:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0114b09:	83 ec 0c             	sub    $0xc,%esp
f0114b0c:	68 03 9f 13 f0       	push   $0xf0139f03
f0114b11:	e8 f8 c1 fe ff       	call   f0100d0e <cprintf>
f0114b16:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART III: Destination page(s) not exist [Supervisor r] 15%  */
	/*============================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [Supervisor r] [15%]\n") ;
f0114b19:	83 ec 0c             	sub    $0xc,%esp
f0114b1c:	68 6c ac 13 f0       	push   $0xf013ac6c
f0114b21:	e8 e8 c1 fe ff       	call   f0100d0e <cprintf>
f0114b26:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114b29:	e8 69 86 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0114b2e:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0+32*mega, 64*mega, 0) ;
f0114b31:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114b34:	c1 e0 06             	shl    $0x6,%eax
f0114b37:	89 c2                	mov    %eax,%edx
f0114b39:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114b3c:	c1 e0 05             	shl    $0x5,%eax
f0114b3f:	6a 00                	push   $0x0
f0114b41:	52                   	push   %edx
f0114b42:	50                   	push   %eax
f0114b43:	ff 75 d0             	pushl  -0x30(%ebp)
f0114b46:	e8 e0 44 ff ff       	call   f010902b <allocate_chunk>
f0114b4b:	83 c4 10             	add    $0x10,%esp
f0114b4e:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114b51:	e8 41 86 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0114b56:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*mega) + (64*mega)/(4*kilo)))
f0114b59:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
f0114b5d:	75 36                	jne    f0114b95 <test_allocate_chunk+0x4ad>
f0114b5f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114b62:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114b65:	89 c1                	mov    %eax,%ecx
f0114b67:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114b6a:	c1 e0 06             	shl    $0x6,%eax
f0114b6d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114b70:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114b77:	99                   	cltd   
f0114b78:	f7 ff                	idiv   %edi
f0114b7a:	89 c3                	mov    %eax,%ebx
f0114b7c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114b7f:	c1 e0 06             	shl    $0x6,%eax
f0114b82:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114b85:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114b8c:	99                   	cltd   
f0114b8d:	f7 fe                	idiv   %esi
f0114b8f:	01 d8                	add    %ebx,%eax
f0114b91:	39 c1                	cmp    %eax,%ecx
f0114b93:	74 54                	je     f0114be9 <test_allocate_chunk+0x501>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*mega) + (64*mega)/(4*kilo)));
f0114b95:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114b98:	c1 e0 06             	shl    $0x6,%eax
f0114b9b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114b9e:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114ba5:	99                   	cltd   
f0114ba6:	f7 fb                	idiv   %ebx
f0114ba8:	89 c1                	mov    %eax,%ecx
f0114baa:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114bad:	c1 e0 06             	shl    $0x6,%eax
f0114bb0:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114bb3:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114bba:	99                   	cltd   
f0114bbb:	f7 ff                	idiv   %edi
f0114bbd:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114bc0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114bc3:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114bc6:	83 ec 08             	sub    $0x8,%esp
f0114bc9:	52                   	push   %edx
f0114bca:	50                   	push   %eax
f0114bcb:	ff 75 a4             	pushl  -0x5c(%ebp)
f0114bce:	68 0c ac 13 f0       	push   $0xf013ac0c
f0114bd3:	68 23 05 00 00       	push   $0x523
f0114bd8:	68 de 91 13 f0       	push   $0xf01391de
f0114bdd:	e8 31 b8 fe ff       	call   f0100413 <_warn>
f0114be2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114be5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114be9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114bed:	74 04                	je     f0114bf3 <test_allocate_chunk+0x50b>
f0114bef:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114bf3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114bf7:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
		if (CCP(proc_directory, 0, 0x0+32*mega, 64*mega, 1, 0x001, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114bfe:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114c01:	c1 e0 06             	shl    $0x6,%eax
f0114c04:	89 c2                	mov    %eax,%edx
f0114c06:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114c09:	c1 e0 05             	shl    $0x5,%eax
f0114c0c:	83 ec 08             	sub    $0x8,%esp
f0114c0f:	6a 03                	push   $0x3
f0114c11:	6a 00                	push   $0x0
f0114c13:	6a 00                	push   $0x0
f0114c15:	68 07 0e 00 00       	push   $0xe07
f0114c1a:	6a 01                	push   $0x1
f0114c1c:	6a 01                	push   $0x1
f0114c1e:	52                   	push   %edx
f0114c1f:	50                   	push   %eax
f0114c20:	6a 00                	push   $0x0
f0114c22:	ff 75 d0             	pushl  -0x30(%ebp)
f0114c25:	e8 94 1b 00 00       	call   f01167be <CCP>
f0114c2a:	83 c4 30             	add    $0x30,%esp
f0114c2d:	85 c0                	test   %eax,%eax
f0114c2f:	75 25                	jne    f0114c56 <test_allocate_chunk+0x56e>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114c31:	83 ec 04             	sub    $0x4,%esp
f0114c34:	68 48 ab 13 f0       	push   $0xf013ab48
f0114c39:	68 2c 05 00 00       	push   $0x52c
f0114c3e:	68 de 91 13 f0       	push   $0xf01391de
f0114c43:	e8 cb b7 fe ff       	call   f0100413 <_warn>
f0114c48:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114c4b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114c4f:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		}
		if (correct) eval += 10 ;
f0114c56:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114c5a:	74 04                	je     f0114c60 <test_allocate_chunk+0x578>
f0114c5c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114c60:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE III: END\n") ;
f0114c64:	83 ec 0c             	sub    $0xc,%esp
f0114c67:	68 66 9f 13 f0       	push   $0xf0139f66
f0114c6c:	e8 9d c0 fe ff       	call   f0100d0e <cprintf>
f0114c71:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r/w] 20%  */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r/w] [20%]\n") ;
f0114c74:	83 ec 0c             	sub    $0xc,%esp
f0114c77:	68 ac ac 13 f0       	push   $0xf013acac
f0114c7c:	e8 8d c0 fe ff       	call   f0100d0e <cprintf>
f0114c81:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114c84:	e8 0e 85 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0114c89:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, USER_HEAP_START, 64*mega, PERM_WRITEABLE|PERM_USER|PERM_AVAILABLE) ;
f0114c8c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114c8f:	c1 e0 06             	shl    $0x6,%eax
f0114c92:	68 06 0e 00 00       	push   $0xe06
f0114c97:	50                   	push   %eax
f0114c98:	68 00 00 00 80       	push   $0x80000000
f0114c9d:	ff 75 d0             	pushl  -0x30(%ebp)
f0114ca0:	e8 86 43 ff ff       	call   f010902b <allocate_chunk>
f0114ca5:	83 c4 10             	add    $0x10,%esp
f0114ca8:	89 45 9c             	mov    %eax,-0x64(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114cab:	e8 e7 84 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0114cb0:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*kilo)+(64*mega)/(4*mega)))
f0114cb3:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f0114cb7:	75 36                	jne    f0114cef <test_allocate_chunk+0x607>
f0114cb9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114cbc:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114cbf:	89 c1                	mov    %eax,%ecx
f0114cc1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114cc4:	c1 e0 06             	shl    $0x6,%eax
f0114cc7:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114cca:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114cd1:	99                   	cltd   
f0114cd2:	f7 fb                	idiv   %ebx
f0114cd4:	89 c3                	mov    %eax,%ebx
f0114cd6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114cd9:	c1 e0 06             	shl    $0x6,%eax
f0114cdc:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114cdf:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114ce6:	99                   	cltd   
f0114ce7:	f7 fe                	idiv   %esi
f0114ce9:	01 d8                	add    %ebx,%eax
f0114ceb:	39 c1                	cmp    %eax,%ecx
f0114ced:	74 54                	je     f0114d43 <test_allocate_chunk+0x65b>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*kilo)+(64*mega)/(4*mega)));
f0114cef:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114cf2:	c1 e0 06             	shl    $0x6,%eax
f0114cf5:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114cf8:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114cff:	99                   	cltd   
f0114d00:	f7 ff                	idiv   %edi
f0114d02:	89 c1                	mov    %eax,%ecx
f0114d04:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114d07:	c1 e0 06             	shl    $0x6,%eax
f0114d0a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114d0d:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114d14:	99                   	cltd   
f0114d15:	f7 fb                	idiv   %ebx
f0114d17:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114d1a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114d1d:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114d20:	83 ec 08             	sub    $0x8,%esp
f0114d23:	52                   	push   %edx
f0114d24:	50                   	push   %eax
f0114d25:	ff 75 9c             	pushl  -0x64(%ebp)
f0114d28:	68 0c ac 13 f0       	push   $0xf013ac0c
f0114d2d:	68 42 05 00 00       	push   $0x542
f0114d32:	68 de 91 13 f0       	push   $0xf01391de
f0114d37:	e8 d7 b6 fe ff       	call   f0100413 <_warn>
f0114d3c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114d3f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114d43:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114d47:	74 04                	je     f0114d4d <test_allocate_chunk+0x665>
f0114d49:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114d4d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114d51:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0, USER_HEAP_START, 64*mega, 1, 0xE07, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114d58:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114d5b:	c1 e0 06             	shl    $0x6,%eax
f0114d5e:	83 ec 08             	sub    $0x8,%esp
f0114d61:	6a 03                	push   $0x3
f0114d63:	6a 00                	push   $0x0
f0114d65:	6a 00                	push   $0x0
f0114d67:	68 07 0e 00 00       	push   $0xe07
f0114d6c:	68 07 0e 00 00       	push   $0xe07
f0114d71:	6a 01                	push   $0x1
f0114d73:	50                   	push   %eax
f0114d74:	68 00 00 00 80       	push   $0x80000000
f0114d79:	6a 00                	push   $0x0
f0114d7b:	ff 75 d0             	pushl  -0x30(%ebp)
f0114d7e:	e8 3b 1a 00 00       	call   f01167be <CCP>
f0114d83:	83 c4 30             	add    $0x30,%esp
f0114d86:	85 c0                	test   %eax,%eax
f0114d88:	75 25                	jne    f0114daf <test_allocate_chunk+0x6c7>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114d8a:	83 ec 04             	sub    $0x4,%esp
f0114d8d:	68 48 ab 13 f0       	push   $0xf013ab48
f0114d92:	68 4b 05 00 00       	push   $0x54b
f0114d97:	68 de 91 13 f0       	push   $0xf01391de
f0114d9c:	e8 72 b6 fe ff       	call   f0100413 <_warn>
f0114da1:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114da4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114da8:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}
		if (correct) eval += 10 ;
f0114daf:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114db3:	74 04                	je     f0114db9 <test_allocate_chunk+0x6d1>
f0114db5:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114db9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114dbd:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0114dc1:	74 6f                	je     f0114e32 <test_allocate_chunk+0x74a>
		{
			ptr1 = (char*)(USER_HEAP_START+2*kilo); *ptr1 = 'K' ;
f0114dc3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114dc6:	01 c0                	add    %eax,%eax
f0114dc8:	05 00 00 00 80       	add    $0x80000000,%eax
f0114dcd:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114dd0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114dd3:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(USER_HEAP_START+22*mega);*ptr2 = 'M' ;
f0114dd6:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114dd9:	89 d0                	mov    %edx,%eax
f0114ddb:	c1 e0 02             	shl    $0x2,%eax
f0114dde:	01 d0                	add    %edx,%eax
f0114de0:	01 c0                	add    %eax,%eax
f0114de2:	01 d0                	add    %edx,%eax
f0114de4:	01 c0                	add    %eax,%eax
f0114de6:	05 00 00 00 80       	add    $0x80000000,%eax
f0114deb:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0114dee:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114df1:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0114df4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114df7:	8a 00                	mov    (%eax),%al
f0114df9:	3c 4b                	cmp    $0x4b,%al
f0114dfb:	75 09                	jne    f0114e06 <test_allocate_chunk+0x71e>
f0114dfd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114e00:	8a 00                	mov    (%eax),%al
f0114e02:	3c 4d                	cmp    $0x4d,%al
f0114e04:	74 1e                	je     f0114e24 <test_allocate_chunk+0x73c>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114e06:	83 ec 04             	sub    $0x4,%esp
f0114e09:	68 94 ab 13 f0       	push   $0xf013ab94
f0114e0e:	68 59 05 00 00       	push   $0x559
f0114e13:	68 de 91 13 f0       	push   $0xf01391de
f0114e18:	e8 f6 b5 fe ff       	call   f0100413 <_warn>
f0114e1d:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114e20:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114e24:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114e28:	74 04                	je     f0114e2e <test_allocate_chunk+0x746>
f0114e2a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114e2e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		}
	}
	cprintf("\nCASE IV: END\n") ;
f0114e32:	83 ec 0c             	sub    $0xc,%esp
f0114e35:	68 38 aa 13 f0       	push   $0xf013aa38
f0114e3a:	e8 cf be fe ff       	call   f0100d0e <cprintf>
f0114e3f:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART V: Destination page(s) not exist [User r] 15%     */
	/*========================================================*/
	cprintf("\nCASE V: Destination page(s) not exist [User r] [15%]\n") ;
f0114e42:	83 ec 0c             	sub    $0xc,%esp
f0114e45:	68 e8 ac 13 f0       	push   $0xf013ace8
f0114e4a:	e8 bf be fe ff       	call   f0100d0e <cprintf>
f0114e4f:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114e52:	e8 40 83 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0114e57:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory,0x403FFC00, 7*kilo, PERM_USER|PERM_AVAILABLE) ;
f0114e5a:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114e5d:	89 d0                	mov    %edx,%eax
f0114e5f:	01 c0                	add    %eax,%eax
f0114e61:	01 d0                	add    %edx,%eax
f0114e63:	01 c0                	add    %eax,%eax
f0114e65:	01 d0                	add    %edx,%eax
f0114e67:	68 04 0e 00 00       	push   $0xe04
f0114e6c:	50                   	push   %eax
f0114e6d:	68 00 fc 3f 40       	push   $0x403ffc00
f0114e72:	ff 75 d0             	pushl  -0x30(%ebp)
f0114e75:	e8 b1 41 ff ff       	call   f010902b <allocate_chunk>
f0114e7a:	83 c4 10             	add    $0x10,%esp
f0114e7d:	89 45 98             	mov    %eax,-0x68(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114e80:	e8 12 83 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0114e85:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (3+2))
f0114e88:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0114e8c:	75 0b                	jne    f0114e99 <test_allocate_chunk+0x7b1>
f0114e8e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114e91:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114e94:	83 f8 05             	cmp    $0x5,%eax
f0114e97:	74 2a                	je     f0114ec3 <test_allocate_chunk+0x7db>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, (3+2));
f0114e99:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114e9c:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114e9f:	83 ec 08             	sub    $0x8,%esp
f0114ea2:	6a 05                	push   $0x5
f0114ea4:	50                   	push   %eax
f0114ea5:	ff 75 98             	pushl  -0x68(%ebp)
f0114ea8:	68 0c ac 13 f0       	push   $0xf013ac0c
f0114ead:	68 70 05 00 00       	push   $0x570
f0114eb2:	68 de 91 13 f0       	push   $0xf01391de
f0114eb7:	e8 57 b5 fe ff       	call   f0100413 <_warn>
f0114ebc:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114ebf:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114ec3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114ec7:	74 04                	je     f0114ecd <test_allocate_chunk+0x7e5>
f0114ec9:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114ecd:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114ed1:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
		if (CCP(proc_directory, 0, 0x403FF000, 12*kilo, 1, 0xE05, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114ed8:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114edb:	89 d0                	mov    %edx,%eax
f0114edd:	01 c0                	add    %eax,%eax
f0114edf:	01 d0                	add    %edx,%eax
f0114ee1:	c1 e0 02             	shl    $0x2,%eax
f0114ee4:	83 ec 08             	sub    $0x8,%esp
f0114ee7:	6a 03                	push   $0x3
f0114ee9:	6a 00                	push   $0x0
f0114eeb:	6a 00                	push   $0x0
f0114eed:	68 07 0e 00 00       	push   $0xe07
f0114ef2:	68 05 0e 00 00       	push   $0xe05
f0114ef7:	6a 01                	push   $0x1
f0114ef9:	50                   	push   %eax
f0114efa:	68 00 f0 3f 40       	push   $0x403ff000
f0114eff:	6a 00                	push   $0x0
f0114f01:	ff 75 d0             	pushl  -0x30(%ebp)
f0114f04:	e8 b5 18 00 00       	call   f01167be <CCP>
f0114f09:	83 c4 30             	add    $0x30,%esp
f0114f0c:	85 c0                	test   %eax,%eax
f0114f0e:	75 25                	jne    f0114f35 <test_allocate_chunk+0x84d>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114f10:	83 ec 04             	sub    $0x4,%esp
f0114f13:	68 48 ab 13 f0       	push   $0xf013ab48
f0114f18:	68 79 05 00 00       	push   $0x579
f0114f1d:	68 de 91 13 f0       	push   $0xf01391de
f0114f22:	e8 ec b4 fe ff       	call   f0100413 <_warn>
f0114f27:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114f2a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114f2e:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
		}
		if (correct) eval += 5 ;
f0114f35:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114f39:	74 04                	je     f0114f3f <test_allocate_chunk+0x857>
f0114f3b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114f3f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

	}
	cprintf("\nCASE V: END\n") ;
f0114f43:	83 ec 0c             	sub    $0xc,%esp
f0114f46:	68 1f ad 13 f0       	push   $0xf013ad1f
f0114f4b:	e8 be bd fe ff       	call   f0100d0e <cprintf>
f0114f50:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] allocate_chunk: FINISHED. Evaluation = %d\n", eval);
f0114f53:	83 ec 08             	sub    $0x8,%esp
f0114f56:	ff 75 e4             	pushl  -0x1c(%ebp)
f0114f59:	68 30 ad 13 f0       	push   $0xf013ad30
f0114f5e:	e8 ab bd fe ff       	call   f0100d0e <cprintf>
f0114f63:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0114f66:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0114f6a:	75 10                	jne    f0114f7c <test_allocate_chunk+0x894>
		cprintf("Congratulations!! test allocate_chunk completed successfully.\n");
f0114f6c:	83 ec 0c             	sub    $0xc,%esp
f0114f6f:	68 64 ad 13 f0       	push   $0xf013ad64
f0114f74:	e8 95 bd fe ff       	call   f0100d0e <cprintf>
f0114f79:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0114f7c:	a1 ac ad 89 f0       	mov    0xf089adac,%eax
f0114f81:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0114f84:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114f87:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0114f8a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0114f8f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114f92:	5b                   	pop    %ebx
f0114f93:	5e                   	pop    %esi
f0114f94:	5f                   	pop    %edi
f0114f95:	5d                   	pop    %ebp
f0114f96:	c3                   	ret    

f0114f97 <test_calculate_required_frames>:

//======================================
// 5) [+]TEST CALCULATE REQUIRED FRAMES:
//======================================
int test_calculate_required_frames()
{
f0114f97:	55                   	push   %ebp
f0114f98:	89 e5                	mov    %esp,%ebp
f0114f9a:	57                   	push   %edi
f0114f9b:	56                   	push   %esi
f0114f9c:	53                   	push   %ebx
f0114f9d:	81 ec fc 01 00 00    	sub    $0x1fc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0114fa3:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0114fa6:	bb 78 9c 13 f0       	mov    $0xf0139c78,%ebx
f0114fab:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114fb0:	89 c7                	mov    %eax,%edi
f0114fb2:	89 de                	mov    %ebx,%esi
f0114fb4:	89 d1                	mov    %edx,%ecx
f0114fb6:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114fb8:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0114fbb:	b9 23 00 00 00       	mov    $0x23,%ecx
f0114fc0:	b0 00                	mov    $0x0,%al
f0114fc2:	89 d7                	mov    %edx,%edi
f0114fc4:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0114fc6:	6a 00                	push   $0x0
f0114fc8:	6a 0a                	push   $0xa
f0114fca:	6a 14                	push   $0x14
f0114fcc:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0114fcf:	50                   	push   %eax
f0114fd0:	e8 88 44 ff ff       	call   f010945d <env_create>
f0114fd5:	83 c4 10             	add    $0x10,%esp
f0114fd8:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0114fdb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114fde:	8b 40 5c             	mov    0x5c(%eax),%eax
f0114fe1:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0114fe4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114fe7:	8b 40 60             	mov    0x60(%eax),%eax
f0114fea:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114fed:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114ff0:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0114ff3:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0114ffa:	75 70 20 
f0114ffd:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0115004:	00 00 00 
f0115007:	8d 55 82             	lea    -0x7e(%ebp),%edx
f011500a:	b9 03 00 00 00       	mov    $0x3,%ecx
f011500f:	b8 00 00 00 00       	mov    $0x0,%eax
f0115014:	89 d7                	mov    %edx,%edi
f0115016:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0115018:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011501b:	8b 40 4c             	mov    0x4c(%eax),%eax
f011501e:	83 ec 08             	sub    $0x8,%esp
f0115021:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0115027:	52                   	push   %edx
f0115028:	50                   	push   %eax
f0115029:	e8 5b cd 01 00       	call   f0131d89 <ltostr>
f011502e:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0115031:	83 ec 04             	sub    $0x4,%esp
f0115034:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011503a:	50                   	push   %eax
f011503b:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0115041:	50                   	push   %eax
f0115042:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0115048:	50                   	push   %eax
f0115049:	e8 33 ce 01 00       	call   f0131e81 <strcconcat>
f011504e:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0115051:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0115058:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f011505f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32 res =0;
f0115066:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint8 correct = 1;
f011506d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;

	ClearUserSpace(proc_directory);
f0115071:	83 ec 0c             	sub    $0xc,%esp
f0115074:	ff 75 d8             	pushl  -0x28(%ebp)
f0115077:	e8 0e 17 00 00       	call   f011678a <ClearUserSpace>
f011507c:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f011507f:	83 ec 0c             	sub    $0xc,%esp
f0115082:	68 a4 ad 13 f0       	push   $0xf013ada4
f0115087:	e8 82 bc fe ff       	call   f0100d0e <cprintf>
f011508c:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f011508f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115092:	c1 e0 03             	shl    $0x3,%eax
f0115095:	83 ec 04             	sub    $0x4,%esp
f0115098:	50                   	push   %eax
f0115099:	6a 00                	push   $0x0
f011509b:	ff 75 d8             	pushl  -0x28(%ebp)
f011509e:	e8 a3 41 ff ff       	call   f0109246 <calculate_required_frames>
f01150a3:	83 c4 10             	add    $0x10,%esp
f01150a6:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f01150a9:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f01150ad:	74 23                	je     f01150d2 <test_calculate_required_frames+0x13b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f01150af:	83 ec 0c             	sub    $0xc,%esp
f01150b2:	6a 03                	push   $0x3
f01150b4:	ff 75 c8             	pushl  -0x38(%ebp)
f01150b7:	68 d8 ad 13 f0       	push   $0xf013add8
f01150bc:	68 b2 05 00 00       	push   $0x5b2
f01150c1:	68 de 91 13 f0       	push   $0xf01391de
f01150c6:	e8 48 b3 fe ff       	call   f0100413 <_warn>
f01150cb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01150ce:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01150d2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01150d6:	74 04                	je     f01150dc <test_calculate_required_frames+0x145>
f01150d8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01150dc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 4*mega);
f01150e0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01150e3:	c1 e0 02             	shl    $0x2,%eax
f01150e6:	83 ec 04             	sub    $0x4,%esp
f01150e9:	50                   	push   %eax
f01150ea:	6a 00                	push   $0x0
f01150ec:	ff 75 d8             	pushl  -0x28(%ebp)
f01150ef:	e8 52 41 ff ff       	call   f0109246 <calculate_required_frames>
f01150f4:	83 c4 10             	add    $0x10,%esp
f01150f7:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 1025)
f01150fa:	81 7d c8 01 04 00 00 	cmpl   $0x401,-0x38(%ebp)
f0115101:	74 26                	je     f0115129 <test_calculate_required_frames+0x192>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 1025);
f0115103:	83 ec 0c             	sub    $0xc,%esp
f0115106:	68 01 04 00 00       	push   $0x401
f011510b:	ff 75 c8             	pushl  -0x38(%ebp)
f011510e:	68 d8 ad 13 f0       	push   $0xf013add8
f0115113:	68 bc 05 00 00       	push   $0x5bc
f0115118:	68 de 91 13 f0       	push   $0xf01391de
f011511d:	e8 f1 b2 fe ff       	call   f0100413 <_warn>
f0115122:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115125:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115129:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011512d:	74 04                	je     f0115133 <test_calculate_required_frames+0x19c>
f011512f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115133:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f0115137:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011513a:	c1 e0 0a             	shl    $0xa,%eax
f011513d:	83 ec 04             	sub    $0x4,%esp
f0115140:	50                   	push   %eax
f0115141:	6a 00                	push   $0x0
f0115143:	ff 75 d8             	pushl  -0x28(%ebp)
f0115146:	e8 fb 40 ff ff       	call   f0109246 <calculate_required_frames>
f011514b:	83 c4 10             	add    $0x10,%esp
f011514e:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)))
f0115151:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115154:	c1 e0 0a             	shl    $0xa,%eax
f0115157:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011515a:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0115161:	99                   	cltd   
f0115162:	f7 fb                	idiv   %ebx
f0115164:	89 c1                	mov    %eax,%ecx
f0115166:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115169:	c1 e0 0a             	shl    $0xa,%eax
f011516c:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011516f:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0115176:	99                   	cltd   
f0115177:	f7 fe                	idiv   %esi
f0115179:	01 c8                	add    %ecx,%eax
f011517b:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011517e:	74 4c                	je     f01151cc <test_calculate_required_frames+0x235>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)));
f0115180:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115183:	c1 e0 0a             	shl    $0xa,%eax
f0115186:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115189:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0115190:	99                   	cltd   
f0115191:	f7 fb                	idiv   %ebx
f0115193:	89 c1                	mov    %eax,%ecx
f0115195:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115198:	c1 e0 0a             	shl    $0xa,%eax
f011519b:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011519e:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01151a5:	99                   	cltd   
f01151a6:	f7 fe                	idiv   %esi
f01151a8:	01 c8                	add    %ecx,%eax
f01151aa:	83 ec 0c             	sub    $0xc,%esp
f01151ad:	50                   	push   %eax
f01151ae:	ff 75 c8             	pushl  -0x38(%ebp)
f01151b1:	68 d8 ad 13 f0       	push   $0xf013add8
f01151b6:	68 c6 05 00 00       	push   $0x5c6
f01151bb:	68 de 91 13 f0       	push   $0xf01391de
f01151c0:	e8 4e b2 fe ff       	call   f0100413 <_warn>
f01151c5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01151c8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01151cc:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01151d0:	74 04                	je     f01151d6 <test_calculate_required_frames+0x23f>
f01151d2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01151d6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test4
		res = calculate_required_frames(proc_directory, 0x1000, 6*kilo);
f01151da:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01151dd:	89 d0                	mov    %edx,%eax
f01151df:	01 c0                	add    %eax,%eax
f01151e1:	01 d0                	add    %edx,%eax
f01151e3:	01 c0                	add    %eax,%eax
f01151e5:	83 ec 04             	sub    $0x4,%esp
f01151e8:	50                   	push   %eax
f01151e9:	68 00 10 00 00       	push   $0x1000
f01151ee:	ff 75 d8             	pushl  -0x28(%ebp)
f01151f1:	e8 50 40 ff ff       	call   f0109246 <calculate_required_frames>
f01151f6:	83 c4 10             	add    $0x10,%esp
f01151f9:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f01151fc:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0115200:	74 23                	je     f0115225 <test_calculate_required_frames+0x28e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0115202:	83 ec 0c             	sub    $0xc,%esp
f0115205:	6a 03                	push   $0x3
f0115207:	ff 75 c8             	pushl  -0x38(%ebp)
f011520a:	68 d8 ad 13 f0       	push   $0xf013add8
f011520f:	68 d2 05 00 00       	push   $0x5d2
f0115214:	68 de 91 13 f0       	push   $0xf01391de
f0115219:	e8 f5 b1 fe ff       	call   f0100413 <_warn>
f011521e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115221:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115225:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115229:	74 04                	je     f011522f <test_calculate_required_frames+0x298>
f011522b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011522f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0115233:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115236:	89 c2                	mov    %eax,%edx
f0115238:	01 d2                	add    %edx,%edx
f011523a:	01 d0                	add    %edx,%eax
f011523c:	83 ec 04             	sub    $0x4,%esp
f011523f:	50                   	push   %eax
f0115240:	68 00 18 00 00       	push   $0x1800
f0115245:	ff 75 d8             	pushl  -0x28(%ebp)
f0115248:	e8 f9 3f ff ff       	call   f0109246 <calculate_required_frames>
f011524d:	83 c4 10             	add    $0x10,%esp
f0115250:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0115253:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0115257:	74 23                	je     f011527c <test_calculate_required_frames+0x2e5>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0115259:	83 ec 0c             	sub    $0xc,%esp
f011525c:	6a 03                	push   $0x3
f011525e:	ff 75 c8             	pushl  -0x38(%ebp)
f0115261:	68 d8 ad 13 f0       	push   $0xf013add8
f0115266:	68 dc 05 00 00       	push   $0x5dc
f011526b:	68 de 91 13 f0       	push   $0xf01391de
f0115270:	e8 9e b1 fe ff       	call   f0100413 <_warn>
f0115275:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115278:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011527c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115280:	74 04                	je     f0115286 <test_calculate_required_frames+0x2ef>
f0115282:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115286:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f011528a:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011528d:	89 d0                	mov    %edx,%eax
f011528f:	c1 e0 02             	shl    $0x2,%eax
f0115292:	01 d0                	add    %edx,%eax
f0115294:	01 c0                	add    %eax,%eax
f0115296:	83 ec 04             	sub    $0x4,%esp
f0115299:	50                   	push   %eax
f011529a:	68 00 00 40 00       	push   $0x400000
f011529f:	ff 75 d8             	pushl  -0x28(%ebp)
f01152a2:	e8 9f 3f ff ff       	call   f0109246 <calculate_required_frames>
f01152a7:	83 c4 10             	add    $0x10,%esp
f01152aa:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2563)
f01152ad:	81 7d c8 03 0a 00 00 	cmpl   $0xa03,-0x38(%ebp)
f01152b4:	74 26                	je     f01152dc <test_calculate_required_frames+0x345>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f01152b6:	83 ec 0c             	sub    $0xc,%esp
f01152b9:	68 03 0a 00 00       	push   $0xa03
f01152be:	ff 75 c8             	pushl  -0x38(%ebp)
f01152c1:	68 d8 ad 13 f0       	push   $0xf013add8
f01152c6:	68 e6 05 00 00       	push   $0x5e6
f01152cb:	68 de 91 13 f0       	push   $0xf01391de
f01152d0:	e8 3e b1 fe ff       	call   f0100413 <_warn>
f01152d5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01152d8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01152dc:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01152e0:	74 04                	je     f01152e6 <test_calculate_required_frames+0x34f>
f01152e2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01152e6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f01152ea:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01152ed:	01 c0                	add    %eax,%eax
f01152ef:	83 ec 04             	sub    $0x4,%esp
f01152f2:	50                   	push   %eax
f01152f3:	68 00 00 70 00       	push   $0x700000
f01152f8:	ff 75 d8             	pushl  -0x28(%ebp)
f01152fb:	e8 46 3f ff ff       	call   f0109246 <calculate_required_frames>
f0115300:	83 c4 10             	add    $0x10,%esp
f0115303:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 514)
f0115306:	81 7d c8 02 02 00 00 	cmpl   $0x202,-0x38(%ebp)
f011530d:	74 26                	je     f0115335 <test_calculate_required_frames+0x39e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 514);
f011530f:	83 ec 0c             	sub    $0xc,%esp
f0115312:	68 02 02 00 00       	push   $0x202
f0115317:	ff 75 c8             	pushl  -0x38(%ebp)
f011531a:	68 d8 ad 13 f0       	push   $0xf013add8
f011531f:	68 f2 05 00 00       	push   $0x5f2
f0115324:	68 de 91 13 f0       	push   $0xf01391de
f0115329:	e8 e5 b0 fe ff       	call   f0100413 <_warn>
f011532e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115331:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115335:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115339:	74 04                	je     f011533f <test_calculate_required_frames+0x3a8>
f011533b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011533f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0115343:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115346:	83 ec 04             	sub    $0x4,%esp
f0115349:	50                   	push   %eax
f011534a:	68 ff ff 3f 00       	push   $0x3fffff
f011534f:	ff 75 d8             	pushl  -0x28(%ebp)
f0115352:	e8 ef 3e ff ff       	call   f0109246 <calculate_required_frames>
f0115357:	83 c4 10             	add    $0x10,%esp
f011535a:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 4)
f011535d:	83 7d c8 04          	cmpl   $0x4,-0x38(%ebp)
f0115361:	74 23                	je     f0115386 <test_calculate_required_frames+0x3ef>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 4);
f0115363:	83 ec 0c             	sub    $0xc,%esp
f0115366:	6a 04                	push   $0x4
f0115368:	ff 75 c8             	pushl  -0x38(%ebp)
f011536b:	68 d8 ad 13 f0       	push   $0xf013add8
f0115370:	68 fc 05 00 00       	push   $0x5fc
f0115375:	68 de 91 13 f0       	push   $0xf01391de
f011537a:	e8 94 b0 fe ff       	call   f0100413 <_warn>
f011537f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115382:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115386:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011538a:	74 04                	je     f0115390 <test_calculate_required_frames+0x3f9>
f011538c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115390:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0115394:	83 ec 0c             	sub    $0xc,%esp
f0115397:	68 29 a9 13 f0       	push   $0xf013a929
f011539c:	e8 6d b9 fe ff       	call   f0100d0e <cprintf>
f01153a1:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f01153a4:	83 ec 0c             	sub    $0xc,%esp
f01153a7:	68 30 ae 13 f0       	push   $0xf013ae30
f01153ac:	e8 5d b9 fe ff       	call   f0100d0e <cprintf>
f01153b1:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f01153b4:	83 ec 04             	sub    $0x4,%esp
f01153b7:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f01153bd:	50                   	push   %eax
f01153be:	68 e2 9c 13 f0       	push   $0xf0139ce2
f01153c3:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01153c9:	50                   	push   %eax
f01153ca:	e8 b2 ca 01 00       	call   f0131e81 <strcconcat>
f01153cf:	83 c4 10             	add    $0x10,%esp
f01153d2:	83 ec 0c             	sub    $0xc,%esp
f01153d5:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f01153db:	50                   	push   %eax
f01153dc:	e8 8f b9 fe ff       	call   f0100d70 <execute_command>
f01153e1:	83 c4 10             	add    $0x10,%esp

		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f01153e4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01153e7:	c1 e0 03             	shl    $0x3,%eax
f01153ea:	83 ec 04             	sub    $0x4,%esp
f01153ed:	50                   	push   %eax
f01153ee:	6a 00                	push   $0x0
f01153f0:	ff 75 d8             	pushl  -0x28(%ebp)
f01153f3:	e8 4e 3e ff ff       	call   f0109246 <calculate_required_frames>
f01153f8:	83 c4 10             	add    $0x10,%esp
f01153fb:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f01153fe:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f0115405:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115408:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011540b:	74 24                	je     f0115431 <test_calculate_required_frames+0x49a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f011540d:	83 ec 0c             	sub    $0xc,%esp
f0115410:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115413:	ff 75 c8             	pushl  -0x38(%ebp)
f0115416:	68 d8 ad 13 f0       	push   $0xf013add8
f011541b:	68 10 06 00 00       	push   $0x610
f0115420:	68 de 91 13 f0       	push   $0xf01391de
f0115425:	e8 e9 af fe ff       	call   f0100413 <_warn>
f011542a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011542d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115431:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115435:	74 04                	je     f011543b <test_calculate_required_frames+0x4a4>
f0115437:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011543b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f011543f:	83 ec 04             	sub    $0x4,%esp
f0115442:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115448:	50                   	push   %eax
f0115449:	68 ef 9c 13 f0       	push   $0xf0139cef
f011544e:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115454:	50                   	push   %eax
f0115455:	e8 27 ca 01 00       	call   f0131e81 <strcconcat>
f011545a:	83 c4 10             	add    $0x10,%esp
f011545d:	83 ec 0c             	sub    $0xc,%esp
f0115460:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115466:	50                   	push   %eax
f0115467:	e8 04 b9 fe ff       	call   f0100d70 <execute_command>
f011546c:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f011546f:	83 ec 04             	sub    $0x4,%esp
f0115472:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115478:	50                   	push   %eax
f0115479:	68 64 ae 13 f0       	push   $0xf013ae64
f011547e:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115484:	50                   	push   %eax
f0115485:	e8 f7 c9 01 00       	call   f0131e81 <strcconcat>
f011548a:	83 c4 10             	add    $0x10,%esp
f011548d:	83 ec 0c             	sub    $0xc,%esp
f0115490:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115496:	50                   	push   %eax
f0115497:	e8 d4 b8 fe ff       	call   f0100d70 <execute_command>
f011549c:	83 c4 10             	add    $0x10,%esp

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 8*mega);
f011549f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01154a2:	c1 e0 03             	shl    $0x3,%eax
f01154a5:	83 ec 04             	sub    $0x4,%esp
f01154a8:	50                   	push   %eax
f01154a9:	6a 00                	push   $0x0
f01154ab:	ff 75 d8             	pushl  -0x28(%ebp)
f01154ae:	e8 93 3d ff ff       	call   f0109246 <calculate_required_frames>
f01154b3:	83 c4 10             	add    $0x10,%esp
f01154b6:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 2047;
f01154b9:	c7 45 c4 ff 07 00 00 	movl   $0x7ff,-0x3c(%ebp)
		if (res != expected)
f01154c0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01154c3:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01154c6:	74 24                	je     f01154ec <test_calculate_required_frames+0x555>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01154c8:	83 ec 0c             	sub    $0xc,%esp
f01154cb:	ff 75 c4             	pushl  -0x3c(%ebp)
f01154ce:	ff 75 c8             	pushl  -0x38(%ebp)
f01154d1:	68 d8 ad 13 f0       	push   $0xf013add8
f01154d6:	68 1e 06 00 00       	push   $0x61e
f01154db:	68 de 91 13 f0       	push   $0xf01391de
f01154e0:	e8 2e af fe ff       	call   f0100413 <_warn>
f01154e5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01154e8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01154ec:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01154f0:	74 04                	je     f01154f6 <test_calculate_required_frames+0x55f>
f01154f2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01154f6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f01154fa:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01154fd:	c1 e0 0a             	shl    $0xa,%eax
f0115500:	83 ec 04             	sub    $0x4,%esp
f0115503:	50                   	push   %eax
f0115504:	6a 00                	push   $0x0
f0115506:	ff 75 d8             	pushl  -0x28(%ebp)
f0115509:	e8 38 3d ff ff       	call   f0109246 <calculate_required_frames>
f011550e:	83 c4 10             	add    $0x10,%esp
f0115511:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)) - 2 - 1 - 2;
f0115514:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115517:	c1 e0 0a             	shl    $0xa,%eax
f011551a:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011551d:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0115524:	99                   	cltd   
f0115525:	f7 fb                	idiv   %ebx
f0115527:	89 c1                	mov    %eax,%ecx
f0115529:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011552c:	c1 e0 0a             	shl    $0xa,%eax
f011552f:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115532:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0115539:	99                   	cltd   
f011553a:	f7 fe                	idiv   %esi
f011553c:	01 c8                	add    %ecx,%eax
f011553e:	83 e8 05             	sub    $0x5,%eax
f0115541:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (res != expected)
f0115544:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115547:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011554a:	74 24                	je     f0115570 <test_calculate_required_frames+0x5d9>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f011554c:	83 ec 0c             	sub    $0xc,%esp
f011554f:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115552:	ff 75 c8             	pushl  -0x38(%ebp)
f0115555:	68 d8 ad 13 f0       	push   $0xf013add8
f011555a:	68 29 06 00 00       	push   $0x629
f011555f:	68 de 91 13 f0       	push   $0xf01391de
f0115564:	e8 aa ae fe ff       	call   f0100413 <_warn>
f0115569:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011556c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115570:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115574:	74 04                	je     f011557a <test_calculate_required_frames+0x5e3>
f0115576:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011557a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f011557e:	83 ec 04             	sub    $0x4,%esp
f0115581:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115587:	50                   	push   %eax
f0115588:	68 70 ae 13 f0       	push   $0xf013ae70
f011558d:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115593:	50                   	push   %eax
f0115594:	e8 e8 c8 01 00       	call   f0131e81 <strcconcat>
f0115599:	83 c4 10             	add    $0x10,%esp
f011559c:	83 ec 0c             	sub    $0xc,%esp
f011559f:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01155a5:	50                   	push   %eax
f01155a6:	e8 c5 b7 fe ff       	call   f0100d70 <execute_command>
f01155ab:	83 c4 10             	add    $0x10,%esp

		//Test4
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f01155ae:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01155b1:	89 c2                	mov    %eax,%edx
f01155b3:	01 d2                	add    %edx,%edx
f01155b5:	01 d0                	add    %edx,%eax
f01155b7:	83 ec 04             	sub    $0x4,%esp
f01155ba:	50                   	push   %eax
f01155bb:	68 00 18 00 00       	push   $0x1800
f01155c0:	ff 75 d8             	pushl  -0x28(%ebp)
f01155c3:	e8 7e 3c ff ff       	call   f0109246 <calculate_required_frames>
f01155c8:	83 c4 10             	add    $0x10,%esp
f01155cb:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f01155ce:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f01155d5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01155d8:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01155db:	74 24                	je     f0115601 <test_calculate_required_frames+0x66a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01155dd:	83 ec 0c             	sub    $0xc,%esp
f01155e0:	ff 75 c4             	pushl  -0x3c(%ebp)
f01155e3:	ff 75 c8             	pushl  -0x38(%ebp)
f01155e6:	68 d8 ad 13 f0       	push   $0xf013add8
f01155eb:	68 38 06 00 00       	push   $0x638
f01155f0:	68 de 91 13 f0       	push   $0xf01391de
f01155f5:	e8 19 ae fe ff       	call   f0100413 <_warn>
f01155fa:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01155fd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115601:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115605:	74 04                	je     f011560b <test_calculate_required_frames+0x674>
f0115607:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011560b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f011560f:	83 ec 04             	sub    $0x4,%esp
f0115612:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115618:	50                   	push   %eax
f0115619:	68 48 9f 13 f0       	push   $0xf0139f48
f011561e:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115624:	50                   	push   %eax
f0115625:	e8 57 c8 01 00       	call   f0131e81 <strcconcat>
f011562a:	83 c4 10             	add    $0x10,%esp
f011562d:	83 ec 0c             	sub    $0xc,%esp
f0115630:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115636:	50                   	push   %eax
f0115637:	e8 34 b7 fe ff       	call   f0100d70 <execute_command>
f011563c:	83 c4 10             	add    $0x10,%esp

		//Test5
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f011563f:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115642:	89 d0                	mov    %edx,%eax
f0115644:	c1 e0 02             	shl    $0x2,%eax
f0115647:	01 d0                	add    %edx,%eax
f0115649:	01 c0                	add    %eax,%eax
f011564b:	83 ec 04             	sub    $0x4,%esp
f011564e:	50                   	push   %eax
f011564f:	68 00 00 40 00       	push   $0x400000
f0115654:	ff 75 d8             	pushl  -0x28(%ebp)
f0115657:	e8 ea 3b ff ff       	call   f0109246 <calculate_required_frames>
f011565c:	83 c4 10             	add    $0x10,%esp
f011565f:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2561)
f0115662:	81 7d c8 01 0a 00 00 	cmpl   $0xa01,-0x38(%ebp)
f0115669:	74 26                	je     f0115691 <test_calculate_required_frames+0x6fa>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f011566b:	83 ec 0c             	sub    $0xc,%esp
f011566e:	68 03 0a 00 00       	push   $0xa03
f0115673:	ff 75 c8             	pushl  -0x38(%ebp)
f0115676:	68 d8 ad 13 f0       	push   $0xf013add8
f011567b:	68 44 06 00 00       	push   $0x644
f0115680:	68 de 91 13 f0       	push   $0xf01391de
f0115685:	e8 89 ad fe ff       	call   f0100413 <_warn>
f011568a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011568d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115691:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115695:	74 04                	je     f011569b <test_calculate_required_frames+0x704>
f0115697:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011569b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f011569f:	83 ec 04             	sub    $0x4,%esp
f01156a2:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01156a8:	50                   	push   %eax
f01156a9:	68 52 9f 13 f0       	push   $0xf0139f52
f01156ae:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01156b4:	50                   	push   %eax
f01156b5:	e8 c7 c7 01 00       	call   f0131e81 <strcconcat>
f01156ba:	83 c4 10             	add    $0x10,%esp
f01156bd:	83 ec 0c             	sub    $0xc,%esp
f01156c0:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01156c6:	50                   	push   %eax
f01156c7:	e8 a4 b6 fe ff       	call   f0100d70 <execute_command>
f01156cc:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f01156cf:	83 ec 04             	sub    $0x4,%esp
f01156d2:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01156d8:	50                   	push   %eax
f01156d9:	68 78 ae 13 f0       	push   $0xf013ae78
f01156de:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01156e4:	50                   	push   %eax
f01156e5:	e8 97 c7 01 00       	call   f0131e81 <strcconcat>
f01156ea:	83 c4 10             	add    $0x10,%esp
f01156ed:	83 ec 0c             	sub    $0xc,%esp
f01156f0:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01156f6:	50                   	push   %eax
f01156f7:	e8 74 b6 fe ff       	call   f0100d70 <execute_command>
f01156fc:	83 c4 10             	add    $0x10,%esp

		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f01156ff:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115702:	01 c0                	add    %eax,%eax
f0115704:	83 ec 04             	sub    $0x4,%esp
f0115707:	50                   	push   %eax
f0115708:	68 00 00 70 00       	push   $0x700000
f011570d:	ff 75 d8             	pushl  -0x28(%ebp)
f0115710:	e8 31 3b ff ff       	call   f0109246 <calculate_required_frames>
f0115715:	83 c4 10             	add    $0x10,%esp
f0115718:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 510 ;
f011571b:	c7 45 c4 fe 01 00 00 	movl   $0x1fe,-0x3c(%ebp)
		if (res != expected)
f0115722:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115725:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115728:	74 24                	je     f011574e <test_calculate_required_frames+0x7b7>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f011572a:	83 ec 0c             	sub    $0xc,%esp
f011572d:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115730:	ff 75 c8             	pushl  -0x38(%ebp)
f0115733:	68 d8 ad 13 f0       	push   $0xf013add8
f0115738:	68 54 06 00 00       	push   $0x654
f011573d:	68 de 91 13 f0       	push   $0xf01391de
f0115742:	e8 cc ac fe ff       	call   f0100413 <_warn>
f0115747:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011574a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011574e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115752:	74 04                	je     f0115758 <test_calculate_required_frames+0x7c1>
f0115754:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115758:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f011575c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011575f:	83 ec 04             	sub    $0x4,%esp
f0115762:	50                   	push   %eax
f0115763:	68 ff ff 3f 00       	push   $0x3fffff
f0115768:	ff 75 d8             	pushl  -0x28(%ebp)
f011576b:	e8 d6 3a ff ff       	call   f0109246 <calculate_required_frames>
f0115770:	83 c4 10             	add    $0x10,%esp
f0115773:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 3 ;
f0115776:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (res != expected)
f011577d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115780:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115783:	74 24                	je     f01157a9 <test_calculate_required_frames+0x812>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115785:	83 ec 0c             	sub    $0xc,%esp
f0115788:	ff 75 c4             	pushl  -0x3c(%ebp)
f011578b:	ff 75 c8             	pushl  -0x38(%ebp)
f011578e:	68 d8 ad 13 f0       	push   $0xf013add8
f0115793:	68 5f 06 00 00       	push   $0x65f
f0115798:	68 de 91 13 f0       	push   $0xf01391de
f011579d:	e8 71 ac fe ff       	call   f0100413 <_warn>
f01157a2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01157a5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01157a9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01157ad:	74 04                	je     f01157b3 <test_calculate_required_frames+0x81c>
f01157af:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01157b3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f01157b7:	83 ec 0c             	sub    $0xc,%esp
f01157ba:	68 03 9f 13 f0       	push   $0xf0139f03
f01157bf:	e8 4a b5 fe ff       	call   f0100d0e <cprintf>
f01157c4:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_required_frames: FINISHED. Evaluation = %d\n", eval);
f01157c7:	83 ec 08             	sub    $0x8,%esp
f01157ca:	ff 75 e4             	pushl  -0x1c(%ebp)
f01157cd:	68 84 ae 13 f0       	push   $0xf013ae84
f01157d2:	e8 37 b5 fe ff       	call   f0100d0e <cprintf>
f01157d7:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01157da:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01157de:	75 10                	jne    f01157f0 <test_calculate_required_frames+0x859>
		cprintf("Congratulations!! test calculate_required_frames completed successfully.\n");
f01157e0:	83 ec 0c             	sub    $0xc,%esp
f01157e3:	68 c4 ae 13 f0       	push   $0xf013aec4
f01157e8:	e8 21 b5 fe ff       	call   f0100d0e <cprintf>
f01157ed:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01157f0:	a1 ac ad 89 f0       	mov    0xf089adac,%eax
f01157f5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01157f8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01157fb:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01157fe:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0115803:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0115806:	5b                   	pop    %ebx
f0115807:	5e                   	pop    %esi
f0115808:	5f                   	pop    %edi
f0115809:	5d                   	pop    %ebp
f011580a:	c3                   	ret    

f011580b <test_calculate_allocated_space>:

int test_calculate_allocated_space()
{
f011580b:	55                   	push   %ebp
f011580c:	89 e5                	mov    %esp,%ebp
f011580e:	57                   	push   %edi
f011580f:	56                   	push   %esi
f0115810:	53                   	push   %ebx
f0115811:	81 ec 0c 02 00 00    	sub    $0x20c,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0115817:	8d 45 8e             	lea    -0x72(%ebp),%eax
f011581a:	bb 78 9c 13 f0       	mov    $0xf0139c78,%ebx
f011581f:	ba 0f 00 00 00       	mov    $0xf,%edx
f0115824:	89 c7                	mov    %eax,%edi
f0115826:	89 de                	mov    %ebx,%esi
f0115828:	89 d1                	mov    %edx,%ecx
f011582a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011582c:	8d 55 9d             	lea    -0x63(%ebp),%edx
f011582f:	b9 23 00 00 00       	mov    $0x23,%ecx
f0115834:	b0 00                	mov    $0x0,%al
f0115836:	89 d7                	mov    %edx,%edi
f0115838:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011583a:	6a 00                	push   $0x0
f011583c:	6a 0a                	push   $0xa
f011583e:	6a 14                	push   $0x14
f0115840:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0115843:	50                   	push   %eax
f0115844:	e8 14 3c ff ff       	call   f010945d <env_create>
f0115849:	83 c4 10             	add    $0x10,%esp
f011584c:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f011584f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115852:	8b 40 5c             	mov    0x5c(%eax),%eax
f0115855:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0115858:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011585b:	8b 40 60             	mov    0x60(%eax),%eax
f011585e:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0115861:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115864:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0115867:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f011586e:	75 70 20 
f0115871:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0115878:	00 00 00 
f011587b:	8d 55 82             	lea    -0x7e(%ebp),%edx
f011587e:	b9 03 00 00 00       	mov    $0x3,%ecx
f0115883:	b8 00 00 00 00       	mov    $0x0,%eax
f0115888:	89 d7                	mov    %edx,%edi
f011588a:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f011588c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011588f:	8b 40 4c             	mov    0x4c(%eax),%eax
f0115892:	83 ec 08             	sub    $0x8,%esp
f0115895:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f011589b:	52                   	push   %edx
f011589c:	50                   	push   %eax
f011589d:	e8 e7 c4 01 00       	call   f0131d89 <ltostr>
f01158a2:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f01158a5:	83 ec 04             	sub    $0x4,%esp
f01158a8:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01158ae:	50                   	push   %eax
f01158af:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f01158b5:	50                   	push   %eax
f01158b6:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f01158bc:	50                   	push   %eax
f01158bd:	e8 bf c5 01 00       	call   f0131e81 <strcconcat>
f01158c2:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f01158c5:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f01158cc:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f01158d3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct = 1;
f01158da:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected_num_pages;
	uint32 expected_num_tables;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;
	uint32 num_pages = 0;
f01158de:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01158e5:	00 00 00 
	uint32 num_tables = 0;
f01158e8:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01158ef:	00 00 00 
	ClearUserSpace(proc_directory);
f01158f2:	83 ec 0c             	sub    $0xc,%esp
f01158f5:	ff 75 d8             	pushl  -0x28(%ebp)
f01158f8:	e8 8d 0e 00 00       	call   f011678a <ClearUserSpace>
f01158fd:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0115900:	83 ec 0c             	sub    $0xc,%esp
f0115903:	68 a4 ad 13 f0       	push   $0xf013ada4
f0115908:	e8 01 b4 fe ff       	call   f0100d0e <cprintf>
f011590d:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0115910:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115913:	c1 e0 03             	shl    $0x3,%eax
f0115916:	89 c2                	mov    %eax,%edx
f0115918:	83 ec 0c             	sub    $0xc,%esp
f011591b:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115921:	50                   	push   %eax
f0115922:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115928:	50                   	push   %eax
f0115929:	52                   	push   %edx
f011592a:	6a 00                	push   $0x0
f011592c:	ff 75 d8             	pushl  -0x28(%ebp)
f011592f:	e8 1d 38 ff ff       	call   f0109151 <calculate_allocated_space>
f0115934:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115937:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011593d:	85 c0                	test   %eax,%eax
f011593f:	74 27                	je     f0115968 <test_calculate_allocated_space+0x15d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115941:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115947:	83 ec 0c             	sub    $0xc,%esp
f011594a:	6a 00                	push   $0x0
f011594c:	50                   	push   %eax
f011594d:	68 10 af 13 f0       	push   $0xf013af10
f0115952:	68 94 06 00 00       	push   $0x694
f0115957:	68 de 91 13 f0       	push   $0xf01391de
f011595c:	e8 b2 aa fe ff       	call   f0100413 <_warn>
f0115961:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115964:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115968:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011596e:	85 c0                	test   %eax,%eax
f0115970:	74 27                	je     f0115999 <test_calculate_allocated_space+0x18e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115972:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115978:	83 ec 0c             	sub    $0xc,%esp
f011597b:	6a 00                	push   $0x0
f011597d:	50                   	push   %eax
f011597e:	68 70 af 13 f0       	push   $0xf013af70
f0115983:	68 99 06 00 00       	push   $0x699
f0115988:	68 de 91 13 f0       	push   $0xf01391de
f011598d:	e8 81 aa fe ff       	call   f0100413 <_warn>
f0115992:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115995:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115999:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011599d:	74 04                	je     f01159a3 <test_calculate_allocated_space+0x198>
f011599f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01159a3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		num_tables = 0;
f01159a7:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01159ae:	00 00 00 
		num_pages = 0;
f01159b1:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01159b8:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+4*mega, &num_tables, &num_pages);
f01159bb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01159be:	c1 e0 02             	shl    $0x2,%eax
f01159c1:	89 c2                	mov    %eax,%edx
f01159c3:	83 ec 0c             	sub    $0xc,%esp
f01159c6:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01159cc:	50                   	push   %eax
f01159cd:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01159d3:	50                   	push   %eax
f01159d4:	52                   	push   %edx
f01159d5:	6a 00                	push   $0x0
f01159d7:	ff 75 d8             	pushl  -0x28(%ebp)
f01159da:	e8 72 37 ff ff       	call   f0109151 <calculate_allocated_space>
f01159df:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01159e2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01159e8:	85 c0                	test   %eax,%eax
f01159ea:	74 27                	je     f0115a13 <test_calculate_allocated_space+0x208>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01159ec:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01159f2:	83 ec 0c             	sub    $0xc,%esp
f01159f5:	6a 00                	push   $0x0
f01159f7:	50                   	push   %eax
f01159f8:	68 10 af 13 f0       	push   $0xf013af10
f01159fd:	68 a5 06 00 00       	push   $0x6a5
f0115a02:	68 de 91 13 f0       	push   $0xf01391de
f0115a07:	e8 07 aa fe ff       	call   f0100413 <_warn>
f0115a0c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115a0f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115a13:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115a19:	85 c0                	test   %eax,%eax
f0115a1b:	74 27                	je     f0115a44 <test_calculate_allocated_space+0x239>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115a1d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115a23:	83 ec 0c             	sub    $0xc,%esp
f0115a26:	6a 00                	push   $0x0
f0115a28:	50                   	push   %eax
f0115a29:	68 70 af 13 f0       	push   $0xf013af70
f0115a2e:	68 aa 06 00 00       	push   $0x6aa
f0115a33:	68 de 91 13 f0       	push   $0xf01391de
f0115a38:	e8 d6 a9 fe ff       	call   f0100413 <_warn>
f0115a3d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115a40:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115a44:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115a48:	74 04                	je     f0115a4e <test_calculate_allocated_space+0x243>
f0115a4a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115a4e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0115a52:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115a59:	00 00 00 
		num_pages = 0;
f0115a5c:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115a63:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0115a66:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115a69:	c1 e0 0a             	shl    $0xa,%eax
f0115a6c:	89 c2                	mov    %eax,%edx
f0115a6e:	83 ec 0c             	sub    $0xc,%esp
f0115a71:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115a77:	50                   	push   %eax
f0115a78:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115a7e:	50                   	push   %eax
f0115a7f:	52                   	push   %edx
f0115a80:	6a 00                	push   $0x0
f0115a82:	ff 75 d8             	pushl  -0x28(%ebp)
f0115a85:	e8 c7 36 ff ff       	call   f0109151 <calculate_allocated_space>
f0115a8a:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115a8d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115a93:	85 c0                	test   %eax,%eax
f0115a95:	74 27                	je     f0115abe <test_calculate_allocated_space+0x2b3>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115a97:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115a9d:	83 ec 0c             	sub    $0xc,%esp
f0115aa0:	6a 00                	push   $0x0
f0115aa2:	50                   	push   %eax
f0115aa3:	68 10 af 13 f0       	push   $0xf013af10
f0115aa8:	68 b6 06 00 00       	push   $0x6b6
f0115aad:	68 de 91 13 f0       	push   $0xf01391de
f0115ab2:	e8 5c a9 fe ff       	call   f0100413 <_warn>
f0115ab7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115aba:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115abe:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115ac4:	85 c0                	test   %eax,%eax
f0115ac6:	74 27                	je     f0115aef <test_calculate_allocated_space+0x2e4>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115ac8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115ace:	83 ec 0c             	sub    $0xc,%esp
f0115ad1:	6a 00                	push   $0x0
f0115ad3:	50                   	push   %eax
f0115ad4:	68 70 af 13 f0       	push   $0xf013af70
f0115ad9:	68 bb 06 00 00       	push   $0x6bb
f0115ade:	68 de 91 13 f0       	push   $0xf01391de
f0115ae3:	e8 2b a9 fe ff       	call   f0100413 <_warn>
f0115ae8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115aeb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115aef:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115af3:	74 04                	je     f0115af9 <test_calculate_allocated_space+0x2ee>
f0115af5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115af9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test4
		num_tables = 0;
f0115afd:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115b04:	00 00 00 
		num_pages = 0;
f0115b07:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115b0e:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1000, 0x1000+6*kilo, &num_tables, &num_pages);
f0115b11:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115b14:	89 d0                	mov    %edx,%eax
f0115b16:	01 c0                	add    %eax,%eax
f0115b18:	01 d0                	add    %edx,%eax
f0115b1a:	01 c0                	add    %eax,%eax
f0115b1c:	05 00 10 00 00       	add    $0x1000,%eax
f0115b21:	89 c2                	mov    %eax,%edx
f0115b23:	83 ec 0c             	sub    $0xc,%esp
f0115b26:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115b2c:	50                   	push   %eax
f0115b2d:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115b33:	50                   	push   %eax
f0115b34:	52                   	push   %edx
f0115b35:	68 00 10 00 00       	push   $0x1000
f0115b3a:	ff 75 d8             	pushl  -0x28(%ebp)
f0115b3d:	e8 0f 36 ff ff       	call   f0109151 <calculate_allocated_space>
f0115b42:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115b45:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115b4b:	85 c0                	test   %eax,%eax
f0115b4d:	74 27                	je     f0115b76 <test_calculate_allocated_space+0x36b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115b4f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115b55:	83 ec 0c             	sub    $0xc,%esp
f0115b58:	6a 00                	push   $0x0
f0115b5a:	50                   	push   %eax
f0115b5b:	68 10 af 13 f0       	push   $0xf013af10
f0115b60:	68 c8 06 00 00       	push   $0x6c8
f0115b65:	68 de 91 13 f0       	push   $0xf01391de
f0115b6a:	e8 a4 a8 fe ff       	call   f0100413 <_warn>
f0115b6f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b72:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115b76:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115b7c:	85 c0                	test   %eax,%eax
f0115b7e:	74 27                	je     f0115ba7 <test_calculate_allocated_space+0x39c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115b80:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115b86:	83 ec 0c             	sub    $0xc,%esp
f0115b89:	6a 00                	push   $0x0
f0115b8b:	50                   	push   %eax
f0115b8c:	68 70 af 13 f0       	push   $0xf013af70
f0115b91:	68 cd 06 00 00       	push   $0x6cd
f0115b96:	68 de 91 13 f0       	push   $0xf01391de
f0115b9b:	e8 73 a8 fe ff       	call   f0100413 <_warn>
f0115ba0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115ba3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115ba7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115bab:	74 04                	je     f0115bb1 <test_calculate_allocated_space+0x3a6>
f0115bad:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115bb1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		num_tables = 0;
f0115bb5:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115bbc:	00 00 00 
		num_pages = 0;
f0115bbf:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115bc6:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0115bc9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115bcc:	89 c2                	mov    %eax,%edx
f0115bce:	01 d2                	add    %edx,%edx
f0115bd0:	01 d0                	add    %edx,%eax
f0115bd2:	05 00 18 00 00       	add    $0x1800,%eax
f0115bd7:	89 c2                	mov    %eax,%edx
f0115bd9:	83 ec 0c             	sub    $0xc,%esp
f0115bdc:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115be2:	50                   	push   %eax
f0115be3:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115be9:	50                   	push   %eax
f0115bea:	52                   	push   %edx
f0115beb:	68 00 18 00 00       	push   $0x1800
f0115bf0:	ff 75 d8             	pushl  -0x28(%ebp)
f0115bf3:	e8 59 35 ff ff       	call   f0109151 <calculate_allocated_space>
f0115bf8:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115bfb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115c01:	85 c0                	test   %eax,%eax
f0115c03:	74 27                	je     f0115c2c <test_calculate_allocated_space+0x421>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115c05:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115c0b:	83 ec 0c             	sub    $0xc,%esp
f0115c0e:	6a 00                	push   $0x0
f0115c10:	50                   	push   %eax
f0115c11:	68 10 af 13 f0       	push   $0xf013af10
f0115c16:	68 d9 06 00 00       	push   $0x6d9
f0115c1b:	68 de 91 13 f0       	push   $0xf01391de
f0115c20:	e8 ee a7 fe ff       	call   f0100413 <_warn>
f0115c25:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115c28:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115c2c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115c32:	85 c0                	test   %eax,%eax
f0115c34:	74 27                	je     f0115c5d <test_calculate_allocated_space+0x452>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115c36:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115c3c:	83 ec 0c             	sub    $0xc,%esp
f0115c3f:	6a 00                	push   $0x0
f0115c41:	50                   	push   %eax
f0115c42:	68 70 af 13 f0       	push   $0xf013af70
f0115c47:	68 de 06 00 00       	push   $0x6de
f0115c4c:	68 de 91 13 f0       	push   $0xf01391de
f0115c51:	e8 bd a7 fe ff       	call   f0100413 <_warn>
f0115c56:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115c59:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115c5d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115c61:	74 04                	je     f0115c67 <test_calculate_allocated_space+0x45c>
f0115c63:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115c67:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		num_tables = 0;
f0115c6b:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115c72:	00 00 00 
		num_pages = 0;
f0115c75:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115c7c:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0115c7f:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115c82:	89 d0                	mov    %edx,%eax
f0115c84:	c1 e0 02             	shl    $0x2,%eax
f0115c87:	01 d0                	add    %edx,%eax
f0115c89:	01 c0                	add    %eax,%eax
f0115c8b:	05 00 00 40 00       	add    $0x400000,%eax
f0115c90:	89 c2                	mov    %eax,%edx
f0115c92:	83 ec 0c             	sub    $0xc,%esp
f0115c95:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115c9b:	50                   	push   %eax
f0115c9c:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115ca2:	50                   	push   %eax
f0115ca3:	52                   	push   %edx
f0115ca4:	68 00 00 40 00       	push   $0x400000
f0115ca9:	ff 75 d8             	pushl  -0x28(%ebp)
f0115cac:	e8 a0 34 ff ff       	call   f0109151 <calculate_allocated_space>
f0115cb1:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115cb4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115cba:	85 c0                	test   %eax,%eax
f0115cbc:	74 27                	je     f0115ce5 <test_calculate_allocated_space+0x4da>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115cbe:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115cc4:	83 ec 0c             	sub    $0xc,%esp
f0115cc7:	6a 00                	push   $0x0
f0115cc9:	50                   	push   %eax
f0115cca:	68 10 af 13 f0       	push   $0xf013af10
f0115ccf:	68 ea 06 00 00       	push   $0x6ea
f0115cd4:	68 de 91 13 f0       	push   $0xf01391de
f0115cd9:	e8 35 a7 fe ff       	call   f0100413 <_warn>
f0115cde:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115ce1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115ce5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115ceb:	85 c0                	test   %eax,%eax
f0115ced:	74 27                	je     f0115d16 <test_calculate_allocated_space+0x50b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115cef:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115cf5:	83 ec 0c             	sub    $0xc,%esp
f0115cf8:	6a 00                	push   $0x0
f0115cfa:	50                   	push   %eax
f0115cfb:	68 70 af 13 f0       	push   $0xf013af70
f0115d00:	68 ef 06 00 00       	push   $0x6ef
f0115d05:	68 de 91 13 f0       	push   $0xf01391de
f0115d0a:	e8 04 a7 fe ff       	call   f0100413 <_warn>
f0115d0f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115d12:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115d16:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115d1a:	74 04                	je     f0115d20 <test_calculate_allocated_space+0x515>
f0115d1c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115d20:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test7
		num_tables = 0;
f0115d24:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115d2b:	00 00 00 
		num_pages = 0;
f0115d2e:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115d35:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0115d38:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115d3b:	05 00 00 38 00       	add    $0x380000,%eax
f0115d40:	01 c0                	add    %eax,%eax
f0115d42:	89 c2                	mov    %eax,%edx
f0115d44:	83 ec 0c             	sub    $0xc,%esp
f0115d47:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115d4d:	50                   	push   %eax
f0115d4e:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115d54:	50                   	push   %eax
f0115d55:	52                   	push   %edx
f0115d56:	68 00 00 70 00       	push   $0x700000
f0115d5b:	ff 75 d8             	pushl  -0x28(%ebp)
f0115d5e:	e8 ee 33 ff ff       	call   f0109151 <calculate_allocated_space>
f0115d63:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115d66:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115d6c:	85 c0                	test   %eax,%eax
f0115d6e:	74 27                	je     f0115d97 <test_calculate_allocated_space+0x58c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115d70:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115d76:	83 ec 0c             	sub    $0xc,%esp
f0115d79:	6a 00                	push   $0x0
f0115d7b:	50                   	push   %eax
f0115d7c:	68 10 af 13 f0       	push   $0xf013af10
f0115d81:	68 fc 06 00 00       	push   $0x6fc
f0115d86:	68 de 91 13 f0       	push   $0xf01391de
f0115d8b:	e8 83 a6 fe ff       	call   f0100413 <_warn>
f0115d90:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115d93:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115d97:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115d9d:	85 c0                	test   %eax,%eax
f0115d9f:	74 27                	je     f0115dc8 <test_calculate_allocated_space+0x5bd>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115da1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115da7:	83 ec 0c             	sub    $0xc,%esp
f0115daa:	6a 00                	push   $0x0
f0115dac:	50                   	push   %eax
f0115dad:	68 70 af 13 f0       	push   $0xf013af70
f0115db2:	68 01 07 00 00       	push   $0x701
f0115db7:	68 de 91 13 f0       	push   $0xf01391de
f0115dbc:	e8 52 a6 fe ff       	call   f0100413 <_warn>
f0115dc1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115dc4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115dc8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115dcc:	74 04                	je     f0115dd2 <test_calculate_allocated_space+0x5c7>
f0115dce:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115dd2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		num_tables = 0;
f0115dd6:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115ddd:	00 00 00 
		num_pages = 0;
f0115de0:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115de7:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0115dea:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115ded:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0115df2:	89 c2                	mov    %eax,%edx
f0115df4:	83 ec 0c             	sub    $0xc,%esp
f0115df7:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115dfd:	50                   	push   %eax
f0115dfe:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115e04:	50                   	push   %eax
f0115e05:	52                   	push   %edx
f0115e06:	68 ff ff 3f 00       	push   $0x3fffff
f0115e0b:	ff 75 d8             	pushl  -0x28(%ebp)
f0115e0e:	e8 3e 33 ff ff       	call   f0109151 <calculate_allocated_space>
f0115e13:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115e16:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115e1c:	85 c0                	test   %eax,%eax
f0115e1e:	74 27                	je     f0115e47 <test_calculate_allocated_space+0x63c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115e20:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115e26:	83 ec 0c             	sub    $0xc,%esp
f0115e29:	6a 00                	push   $0x0
f0115e2b:	50                   	push   %eax
f0115e2c:	68 10 af 13 f0       	push   $0xf013af10
f0115e31:	68 0d 07 00 00       	push   $0x70d
f0115e36:	68 de 91 13 f0       	push   $0xf01391de
f0115e3b:	e8 d3 a5 fe ff       	call   f0100413 <_warn>
f0115e40:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115e43:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115e47:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115e4d:	85 c0                	test   %eax,%eax
f0115e4f:	74 27                	je     f0115e78 <test_calculate_allocated_space+0x66d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115e51:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115e57:	83 ec 0c             	sub    $0xc,%esp
f0115e5a:	6a 00                	push   $0x0
f0115e5c:	50                   	push   %eax
f0115e5d:	68 70 af 13 f0       	push   $0xf013af70
f0115e62:	68 12 07 00 00       	push   $0x712
f0115e67:	68 de 91 13 f0       	push   $0xf01391de
f0115e6c:	e8 a2 a5 fe ff       	call   f0100413 <_warn>
f0115e71:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115e74:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115e78:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115e7c:	74 04                	je     f0115e82 <test_calculate_allocated_space+0x677>
f0115e7e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115e82:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0115e86:	83 ec 0c             	sub    $0xc,%esp
f0115e89:	68 29 a9 13 f0       	push   $0xf013a929
f0115e8e:	e8 7b ae fe ff       	call   f0100d0e <cprintf>
f0115e93:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0115e96:	83 ec 0c             	sub    $0xc,%esp
f0115e99:	68 30 ae 13 f0       	push   $0xf013ae30
f0115e9e:	e8 6b ae fe ff       	call   f0100d0e <cprintf>
f0115ea3:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0115ea6:	83 ec 04             	sub    $0x4,%esp
f0115ea9:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0115eaf:	50                   	push   %eax
f0115eb0:	68 e2 9c 13 f0       	push   $0xf0139ce2
f0115eb5:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115ebb:	50                   	push   %eax
f0115ebc:	e8 c0 bf 01 00       	call   f0131e81 <strcconcat>
f0115ec1:	83 c4 10             	add    $0x10,%esp
f0115ec4:	83 ec 0c             	sub    $0xc,%esp
f0115ec7:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0115ecd:	50                   	push   %eax
f0115ece:	e8 9d ae fe ff       	call   f0100d70 <execute_command>
f0115ed3:	83 c4 10             	add    $0x10,%esp

		num_tables = 0;
f0115ed6:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115edd:	00 00 00 
		num_pages = 0;
f0115ee0:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115ee7:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0115eea:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115eed:	c1 e0 03             	shl    $0x3,%eax
f0115ef0:	89 c2                	mov    %eax,%edx
f0115ef2:	83 ec 0c             	sub    $0xc,%esp
f0115ef5:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115efb:	50                   	push   %eax
f0115efc:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115f02:	50                   	push   %eax
f0115f03:	52                   	push   %edx
f0115f04:	6a 00                	push   $0x0
f0115f06:	ff 75 d8             	pushl  -0x28(%ebp)
f0115f09:	e8 43 32 ff ff       	call   f0109151 <calculate_allocated_space>
f0115f0e:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0115f11:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1 ;
f0115f18:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115f1f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115f25:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115f28:	74 28                	je     f0115f52 <test_calculate_allocated_space+0x747>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115f2a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115f30:	83 ec 0c             	sub    $0xc,%esp
f0115f33:	ff 75 c8             	pushl  -0x38(%ebp)
f0115f36:	50                   	push   %eax
f0115f37:	68 10 af 13 f0       	push   $0xf013af10
f0115f3c:	68 29 07 00 00       	push   $0x729
f0115f41:	68 de 91 13 f0       	push   $0xf01391de
f0115f46:	e8 c8 a4 fe ff       	call   f0100413 <_warn>
f0115f4b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115f4e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115f52:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115f58:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115f5b:	74 28                	je     f0115f85 <test_calculate_allocated_space+0x77a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115f5d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115f63:	83 ec 0c             	sub    $0xc,%esp
f0115f66:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115f69:	50                   	push   %eax
f0115f6a:	68 70 af 13 f0       	push   $0xf013af70
f0115f6f:	68 2e 07 00 00       	push   $0x72e
f0115f74:	68 de 91 13 f0       	push   $0xf01391de
f0115f79:	e8 95 a4 fe ff       	call   f0100413 <_warn>
f0115f7e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115f81:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115f85:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115f89:	74 04                	je     f0115f8f <test_calculate_allocated_space+0x784>
f0115f8b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115f8f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0115f93:	83 ec 04             	sub    $0x4,%esp
f0115f96:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115f9c:	50                   	push   %eax
f0115f9d:	68 ef 9c 13 f0       	push   $0xf0139cef
f0115fa2:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115fa8:	50                   	push   %eax
f0115fa9:	e8 d3 be 01 00       	call   f0131e81 <strcconcat>
f0115fae:	83 c4 10             	add    $0x10,%esp
f0115fb1:	83 ec 0c             	sub    $0xc,%esp
f0115fb4:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115fba:	50                   	push   %eax
f0115fbb:	e8 b0 ad fe ff       	call   f0100d70 <execute_command>
f0115fc0:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0115fc3:	83 ec 04             	sub    $0x4,%esp
f0115fc6:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115fcc:	50                   	push   %eax
f0115fcd:	68 64 ae 13 f0       	push   $0xf013ae64
f0115fd2:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115fd8:	50                   	push   %eax
f0115fd9:	e8 a3 be 01 00       	call   f0131e81 <strcconcat>
f0115fde:	83 c4 10             	add    $0x10,%esp
f0115fe1:	83 ec 0c             	sub    $0xc,%esp
f0115fe4:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115fea:	50                   	push   %eax
f0115feb:	e8 80 ad fe ff       	call   f0100d70 <execute_command>
f0115ff0:	83 c4 10             	add    $0x10,%esp

		//Test2
		num_tables = 0;
f0115ff3:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115ffa:	00 00 00 
		num_pages = 0;
f0115ffd:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116004:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*mega, &num_tables, &num_pages);
f0116007:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011600a:	c1 e0 03             	shl    $0x3,%eax
f011600d:	89 c2                	mov    %eax,%edx
f011600f:	83 ec 0c             	sub    $0xc,%esp
f0116012:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116018:	50                   	push   %eax
f0116019:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011601f:	50                   	push   %eax
f0116020:	52                   	push   %edx
f0116021:	6a 00                	push   $0x0
f0116023:	ff 75 d8             	pushl  -0x28(%ebp)
f0116026:	e8 26 31 ff ff       	call   f0109151 <calculate_allocated_space>
f011602b:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f011602e:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 2 ;
f0116035:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011603c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116042:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116045:	74 28                	je     f011606f <test_calculate_allocated_space+0x864>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116047:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011604d:	83 ec 0c             	sub    $0xc,%esp
f0116050:	ff 75 c8             	pushl  -0x38(%ebp)
f0116053:	50                   	push   %eax
f0116054:	68 10 af 13 f0       	push   $0xf013af10
f0116059:	68 3f 07 00 00       	push   $0x73f
f011605e:	68 de 91 13 f0       	push   $0xf01391de
f0116063:	e8 ab a3 fe ff       	call   f0100413 <_warn>
f0116068:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011606b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011606f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116075:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116078:	74 28                	je     f01160a2 <test_calculate_allocated_space+0x897>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011607a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116080:	83 ec 0c             	sub    $0xc,%esp
f0116083:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116086:	50                   	push   %eax
f0116087:	68 70 af 13 f0       	push   $0xf013af70
f011608c:	68 44 07 00 00       	push   $0x744
f0116091:	68 de 91 13 f0       	push   $0xf01391de
f0116096:	e8 78 a3 fe ff       	call   f0100413 <_warn>
f011609b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011609e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01160a2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01160a6:	74 04                	je     f01160ac <test_calculate_allocated_space+0x8a1>
f01160a8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01160ac:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f01160b0:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01160b7:	00 00 00 
		num_pages = 0;
f01160ba:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01160c1:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f01160c4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01160c7:	c1 e0 0a             	shl    $0xa,%eax
f01160ca:	89 c2                	mov    %eax,%edx
f01160cc:	83 ec 0c             	sub    $0xc,%esp
f01160cf:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01160d5:	50                   	push   %eax
f01160d6:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01160dc:	50                   	push   %eax
f01160dd:	52                   	push   %edx
f01160de:	6a 00                	push   $0x0
f01160e0:	ff 75 d8             	pushl  -0x28(%ebp)
f01160e3:	e8 69 30 ff ff       	call   f0109151 <calculate_allocated_space>
f01160e8:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 + 1;
f01160eb:	c7 45 c8 02 00 00 00 	movl   $0x2,-0x38(%ebp)
		expected_num_pages = 1 + 1 + 1;
f01160f2:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01160f9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01160ff:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116102:	74 28                	je     f011612c <test_calculate_allocated_space+0x921>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116104:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011610a:	83 ec 0c             	sub    $0xc,%esp
f011610d:	ff 75 c8             	pushl  -0x38(%ebp)
f0116110:	50                   	push   %eax
f0116111:	68 10 af 13 f0       	push   $0xf013af10
f0116116:	68 52 07 00 00       	push   $0x752
f011611b:	68 de 91 13 f0       	push   $0xf01391de
f0116120:	e8 ee a2 fe ff       	call   f0100413 <_warn>
f0116125:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116128:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011612c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116132:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116135:	74 28                	je     f011615f <test_calculate_allocated_space+0x954>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116137:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011613d:	83 ec 0c             	sub    $0xc,%esp
f0116140:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116143:	50                   	push   %eax
f0116144:	68 70 af 13 f0       	push   $0xf013af70
f0116149:	68 57 07 00 00       	push   $0x757
f011614e:	68 de 91 13 f0       	push   $0xf01391de
f0116153:	e8 bb a2 fe ff       	call   f0100413 <_warn>
f0116158:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011615b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011615f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116163:	74 04                	je     f0116169 <test_calculate_allocated_space+0x95e>
f0116165:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0116169:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f011616d:	83 ec 04             	sub    $0x4,%esp
f0116170:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116176:	50                   	push   %eax
f0116177:	68 70 ae 13 f0       	push   $0xf013ae70
f011617c:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116182:	50                   	push   %eax
f0116183:	e8 f9 bc 01 00       	call   f0131e81 <strcconcat>
f0116188:	83 c4 10             	add    $0x10,%esp
f011618b:	83 ec 0c             	sub    $0xc,%esp
f011618e:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116194:	50                   	push   %eax
f0116195:	e8 d6 ab fe ff       	call   f0100d70 <execute_command>
f011619a:	83 c4 10             	add    $0x10,%esp

		//Test4
		num_tables = 0;
f011619d:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01161a4:	00 00 00 
		num_pages = 0;
f01161a7:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01161ae:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f01161b1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01161b4:	89 c2                	mov    %eax,%edx
f01161b6:	01 d2                	add    %edx,%edx
f01161b8:	01 d0                	add    %edx,%eax
f01161ba:	05 00 18 00 00       	add    $0x1800,%eax
f01161bf:	89 c2                	mov    %eax,%edx
f01161c1:	83 ec 0c             	sub    $0xc,%esp
f01161c4:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01161ca:	50                   	push   %eax
f01161cb:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01161d1:	50                   	push   %eax
f01161d2:	52                   	push   %edx
f01161d3:	68 00 18 00 00       	push   $0x1800
f01161d8:	ff 75 d8             	pushl  -0x28(%ebp)
f01161db:	e8 71 2f ff ff       	call   f0109151 <calculate_allocated_space>
f01161e0:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01161e3:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f01161ea:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01161f1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01161f7:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01161fa:	74 28                	je     f0116224 <test_calculate_allocated_space+0xa19>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01161fc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116202:	83 ec 0c             	sub    $0xc,%esp
f0116205:	ff 75 c8             	pushl  -0x38(%ebp)
f0116208:	50                   	push   %eax
f0116209:	68 10 af 13 f0       	push   $0xf013af10
f011620e:	68 68 07 00 00       	push   $0x768
f0116213:	68 de 91 13 f0       	push   $0xf01391de
f0116218:	e8 f6 a1 fe ff       	call   f0100413 <_warn>
f011621d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116220:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116224:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011622a:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011622d:	74 28                	je     f0116257 <test_calculate_allocated_space+0xa4c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011622f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116235:	83 ec 0c             	sub    $0xc,%esp
f0116238:	ff 75 c4             	pushl  -0x3c(%ebp)
f011623b:	50                   	push   %eax
f011623c:	68 70 af 13 f0       	push   $0xf013af70
f0116241:	68 6d 07 00 00       	push   $0x76d
f0116246:	68 de 91 13 f0       	push   $0xf01391de
f011624b:	e8 c3 a1 fe ff       	call   f0100413 <_warn>
f0116250:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116253:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116257:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011625b:	74 04                	je     f0116261 <test_calculate_allocated_space+0xa56>
f011625d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116261:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0116265:	83 ec 04             	sub    $0x4,%esp
f0116268:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f011626e:	50                   	push   %eax
f011626f:	68 48 9f 13 f0       	push   $0xf0139f48
f0116274:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011627a:	50                   	push   %eax
f011627b:	e8 01 bc 01 00       	call   f0131e81 <strcconcat>
f0116280:	83 c4 10             	add    $0x10,%esp
f0116283:	83 ec 0c             	sub    $0xc,%esp
f0116286:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f011628c:	50                   	push   %eax
f011628d:	e8 de aa fe ff       	call   f0100d70 <execute_command>
f0116292:	83 c4 10             	add    $0x10,%esp

		//Test5
		num_tables = 0;
f0116295:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011629c:	00 00 00 
		num_pages = 0;
f011629f:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01162a6:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f01162a9:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01162ac:	89 d0                	mov    %edx,%eax
f01162ae:	c1 e0 02             	shl    $0x2,%eax
f01162b1:	01 d0                	add    %edx,%eax
f01162b3:	01 c0                	add    %eax,%eax
f01162b5:	05 00 00 40 00       	add    $0x400000,%eax
f01162ba:	89 c2                	mov    %eax,%edx
f01162bc:	83 ec 0c             	sub    $0xc,%esp
f01162bf:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01162c5:	50                   	push   %eax
f01162c6:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01162cc:	50                   	push   %eax
f01162cd:	52                   	push   %edx
f01162ce:	68 00 00 40 00       	push   $0x400000
f01162d3:	ff 75 d8             	pushl  -0x28(%ebp)
f01162d6:	e8 76 2e ff ff       	call   f0109151 <calculate_allocated_space>
f01162db:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01162de:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f01162e5:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01162ec:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01162f2:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01162f5:	74 28                	je     f011631f <test_calculate_allocated_space+0xb14>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01162f7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01162fd:	83 ec 0c             	sub    $0xc,%esp
f0116300:	ff 75 c8             	pushl  -0x38(%ebp)
f0116303:	50                   	push   %eax
f0116304:	68 10 af 13 f0       	push   $0xf013af10
f0116309:	68 7d 07 00 00       	push   $0x77d
f011630e:	68 de 91 13 f0       	push   $0xf01391de
f0116313:	e8 fb a0 fe ff       	call   f0100413 <_warn>
f0116318:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011631b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011631f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116325:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116328:	74 28                	je     f0116352 <test_calculate_allocated_space+0xb47>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011632a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116330:	83 ec 0c             	sub    $0xc,%esp
f0116333:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116336:	50                   	push   %eax
f0116337:	68 70 af 13 f0       	push   $0xf013af70
f011633c:	68 82 07 00 00       	push   $0x782
f0116341:	68 de 91 13 f0       	push   $0xf01391de
f0116346:	e8 c8 a0 fe ff       	call   f0100413 <_warn>
f011634b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011634e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116352:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116356:	74 04                	je     f011635c <test_calculate_allocated_space+0xb51>
f0116358:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011635c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0116360:	83 ec 04             	sub    $0x4,%esp
f0116363:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116369:	50                   	push   %eax
f011636a:	68 52 9f 13 f0       	push   $0xf0139f52
f011636f:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116375:	50                   	push   %eax
f0116376:	e8 06 bb 01 00       	call   f0131e81 <strcconcat>
f011637b:	83 c4 10             	add    $0x10,%esp
f011637e:	83 ec 0c             	sub    $0xc,%esp
f0116381:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116387:	50                   	push   %eax
f0116388:	e8 e3 a9 fe ff       	call   f0100d70 <execute_command>
f011638d:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0116390:	83 ec 04             	sub    $0x4,%esp
f0116393:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116399:	50                   	push   %eax
f011639a:	68 78 ae 13 f0       	push   $0xf013ae78
f011639f:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01163a5:	50                   	push   %eax
f01163a6:	e8 d6 ba 01 00       	call   f0131e81 <strcconcat>
f01163ab:	83 c4 10             	add    $0x10,%esp
f01163ae:	83 ec 0c             	sub    $0xc,%esp
f01163b1:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01163b7:	50                   	push   %eax
f01163b8:	e8 b3 a9 fe ff       	call   f0100d70 <execute_command>
f01163bd:	83 c4 10             	add    $0x10,%esp

		//Test6
		num_tables = 0;
f01163c0:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01163c7:	00 00 00 
		num_pages = 0;
f01163ca:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01163d1:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f01163d4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01163d7:	05 00 00 38 00       	add    $0x380000,%eax
f01163dc:	01 c0                	add    %eax,%eax
f01163de:	89 c2                	mov    %eax,%edx
f01163e0:	83 ec 0c             	sub    $0xc,%esp
f01163e3:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01163e9:	50                   	push   %eax
f01163ea:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01163f0:	50                   	push   %eax
f01163f1:	52                   	push   %edx
f01163f2:	68 00 00 70 00       	push   $0x700000
f01163f7:	ff 75 d8             	pushl  -0x28(%ebp)
f01163fa:	e8 52 2d ff ff       	call   f0109151 <calculate_allocated_space>
f01163ff:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0116402:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 3;
f0116409:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116410:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116416:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116419:	74 28                	je     f0116443 <test_calculate_allocated_space+0xc38>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f011641b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116421:	83 ec 0c             	sub    $0xc,%esp
f0116424:	ff 75 c8             	pushl  -0x38(%ebp)
f0116427:	50                   	push   %eax
f0116428:	68 10 af 13 f0       	push   $0xf013af10
f011642d:	68 94 07 00 00       	push   $0x794
f0116432:	68 de 91 13 f0       	push   $0xf01391de
f0116437:	e8 d7 9f fe ff       	call   f0100413 <_warn>
f011643c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011643f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116443:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116449:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011644c:	74 28                	je     f0116476 <test_calculate_allocated_space+0xc6b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011644e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116454:	83 ec 0c             	sub    $0xc,%esp
f0116457:	ff 75 c4             	pushl  -0x3c(%ebp)
f011645a:	50                   	push   %eax
f011645b:	68 70 af 13 f0       	push   $0xf013af70
f0116460:	68 99 07 00 00       	push   $0x799
f0116465:	68 de 91 13 f0       	push   $0xf01391de
f011646a:	e8 a4 9f fe ff       	call   f0100413 <_warn>
f011646f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116472:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0116476:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011647a:	74 04                	je     f0116480 <test_calculate_allocated_space+0xc75>
f011647c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0116480:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test7
		num_tables = 0;
f0116484:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011648b:	00 00 00 
		num_pages = 0;
f011648e:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116495:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0116498:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011649b:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f01164a0:	89 c2                	mov    %eax,%edx
f01164a2:	83 ec 0c             	sub    $0xc,%esp
f01164a5:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01164ab:	50                   	push   %eax
f01164ac:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01164b2:	50                   	push   %eax
f01164b3:	52                   	push   %edx
f01164b4:	68 ff ff 3f 00       	push   $0x3fffff
f01164b9:	ff 75 d8             	pushl  -0x28(%ebp)
f01164bc:	e8 90 2c ff ff       	call   f0109151 <calculate_allocated_space>
f01164c1:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01164c4:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 0;
f01164cb:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01164d2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01164d8:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01164db:	74 28                	je     f0116505 <test_calculate_allocated_space+0xcfa>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01164dd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01164e3:	83 ec 0c             	sub    $0xc,%esp
f01164e6:	ff 75 c8             	pushl  -0x38(%ebp)
f01164e9:	50                   	push   %eax
f01164ea:	68 10 af 13 f0       	push   $0xf013af10
f01164ef:	68 a7 07 00 00       	push   $0x7a7
f01164f4:	68 de 91 13 f0       	push   $0xf01391de
f01164f9:	e8 15 9f fe ff       	call   f0100413 <_warn>
f01164fe:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116501:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116505:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011650b:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011650e:	74 28                	je     f0116538 <test_calculate_allocated_space+0xd2d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116510:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116516:	83 ec 0c             	sub    $0xc,%esp
f0116519:	ff 75 c4             	pushl  -0x3c(%ebp)
f011651c:	50                   	push   %eax
f011651d:	68 70 af 13 f0       	push   $0xf013af70
f0116522:	68 ac 07 00 00       	push   $0x7ac
f0116527:	68 de 91 13 f0       	push   $0xf01391de
f011652c:	e8 e2 9e fe ff       	call   f0100413 <_warn>
f0116531:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116534:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0116538:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011653c:	74 04                	je     f0116542 <test_calculate_allocated_space+0xd37>
f011653e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0116542:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0116546:	83 ec 0c             	sub    $0xc,%esp
f0116549:	68 03 9f 13 f0       	push   $0xf0139f03
f011654e:	e8 bb a7 fe ff       	call   f0100d0e <cprintf>
f0116553:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_allocated_space: FINISHED. Evaluation = %d\n", eval);
f0116556:	83 ec 08             	sub    $0x8,%esp
f0116559:	ff 75 e4             	pushl  -0x1c(%ebp)
f011655c:	68 cc af 13 f0       	push   $0xf013afcc
f0116561:	e8 a8 a7 fe ff       	call   f0100d0e <cprintf>
f0116566:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0116569:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f011656d:	75 10                	jne    f011657f <test_calculate_allocated_space+0xd74>
		cprintf("Congratulations!! test calculate_allocated_space completed successfully.\n");
f011656f:	83 ec 0c             	sub    $0xc,%esp
f0116572:	68 0c b0 13 f0       	push   $0xf013b00c
f0116577:	e8 92 a7 fe ff       	call   f0100d0e <cprintf>
f011657c:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f011657f:	a1 ac ad 89 f0       	mov    0xf089adac,%eax
f0116584:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0116587:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011658a:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f011658d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0116592:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0116595:	5b                   	pop    %ebx
f0116596:	5e                   	pop    %esi
f0116597:	5f                   	pop    %edi
f0116598:	5d                   	pop    %ebp
f0116599:	c3                   	ret    

f011659a <CB>:
//===========================================================================
//===========================================================================
//===========================================================================

int CB(uint32 *ptr_dir, uint32 va, int bn)
{
f011659a:	55                   	push   %ebp
f011659b:	89 e5                	mov    %esp,%ebp
f011659d:	83 ec 18             	sub    $0x18,%esp
	//assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f01165a0:	8b 45 10             	mov    0x10(%ebp),%eax
f01165a3:	ba 01 00 00 00       	mov    $0x1,%edx
f01165a8:	88 c1                	mov    %al,%cl
f01165aa:	d3 e2                	shl    %cl,%edx
f01165ac:	89 d0                	mov    %edx,%eax
f01165ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01165b1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01165b4:	c1 e8 16             	shr    $0x16,%eax
f01165b7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01165be:	8b 45 08             	mov    0x8(%ebp),%eax
f01165c1:	01 d0                	add    %edx,%eax
f01165c3:	8b 00                	mov    (%eax),%eax
f01165c5:	83 e0 01             	and    $0x1,%eax
f01165c8:	85 c0                	test   %eax,%eax
f01165ca:	75 07                	jne    f01165d3 <CB+0x39>
f01165cc:	b8 00 00 00 00       	mov    $0x0,%eax
f01165d1:	eb 76                	jmp    f0116649 <CB+0xaf>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01165d3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01165d6:	c1 e8 16             	shr    $0x16,%eax
f01165d9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01165e0:	8b 45 08             	mov    0x8(%ebp),%eax
f01165e3:	01 d0                	add    %edx,%eax
f01165e5:	8b 00                	mov    (%eax),%eax
f01165e7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01165ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01165ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01165f2:	c1 e8 0c             	shr    $0xc,%eax
f01165f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01165f8:	a1 10 ad 89 f0       	mov    0xf089ad10,%eax
f01165fd:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0116600:	72 17                	jb     f0116619 <CB+0x7f>
f0116602:	ff 75 f0             	pushl  -0x10(%ebp)
f0116605:	68 58 b0 13 f0       	push   $0xf013b058
f011660a:	68 c7 07 00 00       	push   $0x7c7
f011660f:	68 de 91 13 f0       	push   $0xf01391de
f0116614:	e8 ec 9b fe ff       	call   f0100205 <_panic>
f0116619:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011661c:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116621:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return ((table[((((uint32) (va)) >> 12) & 0x3FF)]&mask) == mask)? 1 : 0 ;
f0116624:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116627:	c1 e8 0c             	shr    $0xc,%eax
f011662a:	25 ff 03 00 00       	and    $0x3ff,%eax
f011662f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116636:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116639:	01 d0                	add    %edx,%eax
f011663b:	8b 00                	mov    (%eax),%eax
f011663d:	23 45 f4             	and    -0xc(%ebp),%eax
f0116640:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0116643:	0f 94 c0             	sete   %al
f0116646:	0f b6 c0             	movzbl %al,%eax
}
f0116649:	c9                   	leave  
f011664a:	c3                   	ret    

f011664b <SB>:
int SB(uint32 *ptr_dir, uint32 va, int bn , int v)
{
f011664b:	55                   	push   %ebp
f011664c:	89 e5                	mov    %esp,%ebp
f011664e:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0116651:	68 87 b0 13 f0       	push   $0xf013b087
f0116656:	68 96 b0 13 f0       	push   $0xf013b096
f011665b:	68 cc 07 00 00       	push   $0x7cc
f0116660:	68 de 91 13 f0       	push   $0xf01391de
f0116665:	e8 9b 9b fe ff       	call   f0100205 <_panic>

f011666a <CPs>:
	if (~v) table[((((uint32) (va)) >> 12) & 0x3FF)] &= ~mask ;
	else 	table[((((uint32) (va)) >> 12) & 0x3FF)] |= mask ;
	return 0;
}
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
f011666a:	55                   	push   %ebp
f011666b:	89 e5                	mov    %esp,%ebp
f011666d:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0116670:	68 87 b0 13 f0       	push   $0xf013b087
f0116675:	68 96 b0 13 f0       	push   $0xf013b096
f011667a:	68 d6 07 00 00       	push   $0x7d6
f011667f:	68 de 91 13 f0       	push   $0xf01391de
f0116684:	e8 7c 9b fe ff       	call   f0100205 <_panic>

f0116689 <CA>:
	}
	return 1;
}

int CA(uint32 *ptr_dir, uint32 va)
{
f0116689:	55                   	push   %ebp
f011668a:	89 e5                	mov    %esp,%ebp
f011668c:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f011668f:	68 87 b0 13 f0       	push   $0xf013b087
f0116694:	68 96 b0 13 f0       	push   $0xf013b096
f0116699:	68 e5 07 00 00       	push   $0x7e5
f011669e:	68 de 91 13 f0       	push   $0xf01391de
f01166a3:	e8 5d 9b fe ff       	call   f0100205 <_panic>

f01166a8 <CE>:
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	return table[((((uint32) (va)) >> 12) & 0x3FF)]&~0x00000FFF;
}

int CE(uint32 *_d, uint32 va)
{
f01166a8:	55                   	push   %ebp
f01166a9:	89 e5                	mov    %esp,%ebp
f01166ab:	83 ec 18             	sub    $0x18,%esp
	if (!(_d[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01166ae:	8b 45 0c             	mov    0xc(%ebp),%eax
f01166b1:	c1 e8 16             	shr    $0x16,%eax
f01166b4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01166bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01166be:	01 d0                	add    %edx,%eax
f01166c0:	8b 00                	mov    (%eax),%eax
f01166c2:	83 e0 01             	and    $0x1,%eax
f01166c5:	85 c0                	test   %eax,%eax
f01166c7:	75 07                	jne    f01166d0 <CE+0x28>
f01166c9:	b8 00 00 00 00       	mov    $0x0,%eax
f01166ce:	eb 7a                	jmp    f011674a <CE+0xa2>
	uint32 *_t = (STATIC_KERNEL_VIRTUAL_ADDRESS(_d[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01166d0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01166d3:	c1 e8 16             	shr    $0x16,%eax
f01166d6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01166dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01166e0:	01 d0                	add    %edx,%eax
f01166e2:	8b 00                	mov    (%eax),%eax
f01166e4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01166e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01166ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01166ef:	c1 e8 0c             	shr    $0xc,%eax
f01166f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01166f5:	a1 10 ad 89 f0       	mov    0xf089ad10,%eax
f01166fa:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f01166fd:	72 17                	jb     f0116716 <CE+0x6e>
f01166ff:	ff 75 f4             	pushl  -0xc(%ebp)
f0116702:	68 58 b0 13 f0       	push   $0xf013b058
f0116707:	68 ee 07 00 00       	push   $0x7ee
f011670c:	68 de 91 13 f0       	push   $0xf01391de
f0116711:	e8 ef 9a fe ff       	call   f0100205 <_panic>
f0116716:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116719:	2d 00 00 00 10       	sub    $0x10000000,%eax
f011671e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((_t[((((uint32) (va)) >> 12) & 0x3FF)])!=0) return 0;
f0116721:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116724:	c1 e8 0c             	shr    $0xc,%eax
f0116727:	25 ff 03 00 00       	and    $0x3ff,%eax
f011672c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116733:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116736:	01 d0                	add    %edx,%eax
f0116738:	8b 00                	mov    (%eax),%eax
f011673a:	85 c0                	test   %eax,%eax
f011673c:	74 07                	je     f0116745 <CE+0x9d>
f011673e:	b8 00 00 00 00       	mov    $0x0,%eax
f0116743:	eb 05                	jmp    f011674a <CE+0xa2>
	return 1;
f0116745:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011674a:	c9                   	leave  
f011674b:	c3                   	ret    

f011674c <CP>:

int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc)
{
f011674c:	55                   	push   %ebp
f011674d:	89 e5                	mov    %esp,%ebp
f011674f:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0116752:	68 87 b0 13 f0       	push   $0xf013b087
f0116757:	68 96 b0 13 f0       	push   $0xf013b096
f011675c:	68 f5 07 00 00       	push   $0x7f5
f0116761:	68 de 91 13 f0       	push   $0xf01391de
f0116766:	e8 9a 9a fe ff       	call   f0100205 <_panic>

f011676b <GP>:
	}
	return 0;
}

uint32 GP(uint32 *ptr_dir, uint32 va)
{
f011676b:	55                   	push   %ebp
f011676c:	89 e5                	mov    %esp,%ebp
f011676e:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0116771:	68 87 b0 13 f0       	push   $0xf013b087
f0116776:	68 96 b0 13 f0       	push   $0xf013b096
f011677b:	68 05 08 00 00       	push   $0x805
f0116780:	68 de 91 13 f0       	push   $0xf01391de
f0116785:	e8 7b 9a fe ff       	call   f0100205 <_panic>

f011678a <ClearUserSpace>:
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
f011678a:	55                   	push   %ebp
f011678b:	89 e5                	mov    %esp,%ebp
f011678d:	83 ec 10             	sub    $0x10,%esp
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0116790:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0116797:	eb 18                	jmp    f01167b1 <ClearUserSpace+0x27>
		ptr_dir[i] = 0;
f0116799:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011679c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01167a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01167a6:	01 d0                	add    %edx,%eax
f01167a8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f01167ae:	ff 45 fc             	incl   -0x4(%ebp)
f01167b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01167b4:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f01167b9:	76 de                	jbe    f0116799 <ClearUserSpace+0xf>
		ptr_dir[i] = 0;
	}
}
f01167bb:	90                   	nop
f01167bc:	c9                   	leave  
f01167bd:	c3                   	ret    

f01167be <CCP>:

int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
f01167be:	55                   	push   %ebp
f01167bf:	89 e5                	mov    %esp,%ebp
f01167c1:	83 ec 38             	sub    $0x38,%esp
f01167c4:	8b 45 2c             	mov    0x2c(%ebp),%eax
f01167c7:	88 45 d4             	mov    %al,-0x2c(%ebp)
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
f01167ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f01167cd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01167d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));
f01167d5:	8b 45 10             	mov    0x10(%ebp),%eax
f01167d8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01167dd:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f01167e0:	e9 ea 01 00 00       	jmp    f01169cf <CCP+0x211>
	{
		uint32* ptr_table1;
		uint32* ptr_table2;
		struct FrameInfo * pfi1 ;
		struct FrameInfo * pfi2 ;
		if (chk_type != CHK_ALLOC)
f01167e5:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f01167e9:	74 44                	je     f011682f <CCP+0x71>
		{
			pfi1 = get_frame_info(ptr_dir, (uint32)ptrTemp1, &ptr_table1);
f01167eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01167ee:	83 ec 04             	sub    $0x4,%esp
f01167f1:	8d 55 dc             	lea    -0x24(%ebp),%edx
f01167f4:	52                   	push   %edx
f01167f5:	50                   	push   %eax
f01167f6:	ff 75 08             	pushl  0x8(%ebp)
f01167f9:	e8 08 06 ff ff       	call   f0106e06 <get_frame_info>
f01167fe:	83 c4 10             	add    $0x10,%esp
f0116801:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (ptr_table1 == NULL)
f0116804:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116807:	85 c0                	test   %eax,%eax
f0116809:	75 24                	jne    f011682f <CCP+0x71>
			{
				warn("[EVAL] Failed. Table of address 1 = NULL\n");
f011680b:	83 ec 04             	sub    $0x4,%esp
f011680e:	68 ac b0 13 f0       	push   $0xf013b0ac
f0116813:	68 22 08 00 00       	push   $0x822
f0116818:	68 de 91 13 f0       	push   $0xf01391de
f011681d:	e8 f1 9b fe ff       	call   f0100413 <_warn>
f0116822:	83 c4 10             	add    $0x10,%esp
				return 0;
f0116825:	b8 00 00 00 00       	mov    $0x0,%eax
f011682a:	e9 b6 01 00 00       	jmp    f01169e5 <CCP+0x227>
			}
		}
		pfi2 = get_frame_info(ptr_dir, (uint32)ptrTemp2, &ptr_table2);
f011682f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116832:	83 ec 04             	sub    $0x4,%esp
f0116835:	8d 55 d8             	lea    -0x28(%ebp),%edx
f0116838:	52                   	push   %edx
f0116839:	50                   	push   %eax
f011683a:	ff 75 08             	pushl  0x8(%ebp)
f011683d:	e8 c4 05 ff ff       	call   f0106e06 <get_frame_info>
f0116842:	83 c4 10             	add    $0x10,%esp
f0116845:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (ptr_table2 == NULL)
f0116848:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011684b:	85 c0                	test   %eax,%eax
f011684d:	75 24                	jne    f0116873 <CCP+0xb5>
		{
			warn("[EVAL] Failed. Table of address 2 = NULL\n");
f011684f:	83 ec 04             	sub    $0x4,%esp
f0116852:	68 d8 b0 13 f0       	push   $0xf013b0d8
f0116857:	68 29 08 00 00       	push   $0x829
f011685c:	68 de 91 13 f0       	push   $0xf01391de
f0116861:	e8 ad 9b fe ff       	call   f0100413 <_warn>
f0116866:	83 c4 10             	add    $0x10,%esp
			return 0;
f0116869:	b8 00 00 00 00       	mov    $0x0,%eax
f011686e:	e9 72 01 00 00       	jmp    f01169e5 <CCP+0x227>
		}
		if (chk_type == CHK_SHARE)
f0116873:	80 7d d4 02          	cmpb   $0x2,-0x2c(%ebp)
f0116877:	75 70                	jne    f01168e9 <CCP+0x12b>
		{
			uint32 fn1 = ptr_table1[PTX(ptrTemp1)] >> 12 ;
f0116879:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011687c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011687f:	c1 ea 0c             	shr    $0xc,%edx
f0116882:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0116888:	c1 e2 02             	shl    $0x2,%edx
f011688b:	01 d0                	add    %edx,%eax
f011688d:	8b 00                	mov    (%eax),%eax
f011688f:	c1 e8 0c             	shr    $0xc,%eax
f0116892:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 fn2 = ptr_table2[PTX(ptrTemp2)] >> 12 ;
f0116895:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116898:	8b 55 f0             	mov    -0x10(%ebp),%edx
f011689b:	c1 ea 0c             	shr    $0xc,%edx
f011689e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01168a4:	c1 e2 02             	shl    $0x2,%edx
f01168a7:	01 d0                	add    %edx,%eax
f01168a9:	8b 00                	mov    (%eax),%eax
f01168ab:	c1 e8 0c             	shr    $0xc,%eax
f01168ae:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			if(fn1 != fn2)
f01168b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01168b4:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01168b7:	74 30                	je     f01168e9 <CCP+0x12b>
			{
				warn("[EVAL] Failed. Frame numbers not equal in the whole range!\nva1=%x, va2=%x, fn1=%x, fn2=%x\n", ptrTemp1, ptrTemp2, fn1, fn2);
f01168b9:	83 ec 04             	sub    $0x4,%esp
f01168bc:	ff 75 e4             	pushl  -0x1c(%ebp)
f01168bf:	ff 75 e8             	pushl  -0x18(%ebp)
f01168c2:	ff 75 f0             	pushl  -0x10(%ebp)
f01168c5:	ff 75 f4             	pushl  -0xc(%ebp)
f01168c8:	68 04 b1 13 f0       	push   $0xf013b104
f01168cd:	68 33 08 00 00       	push   $0x833
f01168d2:	68 de 91 13 f0       	push   $0xf01391de
f01168d7:	e8 37 9b fe ff       	call   f0100413 <_warn>
f01168dc:	83 c4 20             	add    $0x20,%esp
				return 0;
f01168df:	b8 00 00 00 00       	mov    $0x0,%eax
f01168e4:	e9 fc 00 00 00       	jmp    f01169e5 <CCP+0x227>
			}
		}
		if (ref != -1)
f01168e9:	83 7d 18 ff          	cmpl   $0xffffffff,0x18(%ebp)
f01168ed:	74 52                	je     f0116941 <CCP+0x183>
		{
			if (pfi2 == NULL || (*pfi2).references != ref)
f01168ef:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01168f3:	74 0e                	je     f0116903 <CCP+0x145>
f01168f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01168f8:	8b 40 08             	mov    0x8(%eax),%eax
f01168fb:	0f b7 c0             	movzwl %ax,%eax
f01168fe:	3b 45 18             	cmp    0x18(%ebp),%eax
f0116901:	74 3e                	je     f0116941 <CCP+0x183>
			{
				warn("[EVAL] Failed. Num of frame references is not correct. MAKE SURE to use the functions of LAB5! va2=%x, ref2=%d\n", ptrTemp2, pfi2==NULL? 0 : (*pfi2).references);
f0116903:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0116907:	74 0b                	je     f0116914 <CCP+0x156>
f0116909:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011690c:	8b 40 08             	mov    0x8(%eax),%eax
f011690f:	0f b7 c0             	movzwl %ax,%eax
f0116912:	eb 05                	jmp    f0116919 <CCP+0x15b>
f0116914:	b8 00 00 00 00       	mov    $0x0,%eax
f0116919:	83 ec 0c             	sub    $0xc,%esp
f011691c:	50                   	push   %eax
f011691d:	ff 75 f0             	pushl  -0x10(%ebp)
f0116920:	68 60 b1 13 f0       	push   $0xf013b160
f0116925:	68 3b 08 00 00       	push   $0x83b
f011692a:	68 de 91 13 f0       	push   $0xf01391de
f011692f:	e8 df 9a fe ff       	call   f0100413 <_warn>
f0116934:	83 c4 20             	add    $0x20,%esp
				return 0;
f0116937:	b8 00 00 00 00       	mov    $0x0,%eax
f011693c:	e9 a4 00 00 00       	jmp    f01169e5 <CCP+0x227>
			}
		}
		if (CPs(ptr_dir, (uint32)ptrTemp2, dst_perms, dst_to_chk) <= 0)
f0116941:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116944:	ff 75 20             	pushl  0x20(%ebp)
f0116947:	ff 75 1c             	pushl  0x1c(%ebp)
f011694a:	50                   	push   %eax
f011694b:	ff 75 08             	pushl  0x8(%ebp)
f011694e:	e8 17 fd ff ff       	call   f011666a <CPs>
f0116953:	83 c4 10             	add    $0x10,%esp
f0116956:	85 c0                	test   %eax,%eax
f0116958:	7f 21                	jg     f011697b <CCP+0x1bd>
		{
			warn("[EVAL] Failed. one or more permission in destination is not correct\n");
f011695a:	83 ec 04             	sub    $0x4,%esp
f011695d:	68 d0 b1 13 f0       	push   $0xf013b1d0
f0116962:	68 41 08 00 00       	push   $0x841
f0116967:	68 de 91 13 f0       	push   $0xf01391de
f011696c:	e8 a2 9a fe ff       	call   f0100413 <_warn>
f0116971:	83 c4 10             	add    $0x10,%esp
			return 0;
f0116974:	b8 00 00 00 00       	mov    $0x0,%eax
f0116979:	eb 6a                	jmp    f01169e5 <CCP+0x227>
		}
		if (chk_type != CHK_ALLOC)
f011697b:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f011697f:	74 3a                	je     f01169bb <CCP+0x1fd>
		{
			if (CPs(ptr_dir, (uint32)ptrTemp1, src_perms, src_to_chk) <= 0)
f0116981:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116984:	ff 75 28             	pushl  0x28(%ebp)
f0116987:	ff 75 24             	pushl  0x24(%ebp)
f011698a:	50                   	push   %eax
f011698b:	ff 75 08             	pushl  0x8(%ebp)
f011698e:	e8 d7 fc ff ff       	call   f011666a <CPs>
f0116993:	83 c4 10             	add    $0x10,%esp
f0116996:	85 c0                	test   %eax,%eax
f0116998:	7f 21                	jg     f01169bb <CCP+0x1fd>
			{
				warn("[EVAL] Failed. one or more permission in source is not correct\n");
f011699a:	83 ec 04             	sub    $0x4,%esp
f011699d:	68 18 b2 13 f0       	push   $0xf013b218
f01169a2:	68 48 08 00 00       	push   $0x848
f01169a7:	68 de 91 13 f0       	push   $0xf01391de
f01169ac:	e8 62 9a fe ff       	call   f0100413 <_warn>
f01169b1:	83 c4 10             	add    $0x10,%esp
				return 0;
f01169b4:	b8 00 00 00 00       	mov    $0x0,%eax
f01169b9:	eb 2a                	jmp    f01169e5 <CCP+0x227>
			}
		}
		if (chk_type != CHK_ALLOC)
f01169bb:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f01169bf:	74 07                	je     f01169c8 <CCP+0x20a>
		{
			ptrTemp1 += PAGE_SIZE;
f01169c1:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f01169c8:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f01169cf:	8b 55 10             	mov    0x10(%ebp),%edx
f01169d2:	8b 45 14             	mov    0x14(%ebp),%eax
f01169d5:	01 d0                	add    %edx,%eax
f01169d7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01169da:	0f 87 05 fe ff ff    	ja     f01167e5 <CCP+0x27>
		{
			ptrTemp1 += PAGE_SIZE;
		}
	}

	return 1;
f01169e0:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01169e5:	c9                   	leave  
f01169e6:	c3                   	ret    

f01169e7 <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f01169e7:	55                   	push   %ebp
f01169e8:	89 e5                	mov    %esp,%ebp
f01169ea:	57                   	push   %edi
f01169eb:	56                   	push   %esi
f01169ec:	53                   	push   %ebx
f01169ed:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
	if(firstTime)
f01169f3:	a0 22 3d 19 f0       	mov    0xf0193d22,%al
f01169f8:	84 c0                	test   %al,%al
f01169fa:	0f 84 b4 09 00 00    	je     f01173b4 <test_priority_normal_and_higher+0x9cd>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f0116a00:	c6 05 22 3d 19 f0 00 	movb   $0x0,0xf0193d22
		char command[100] = "load fos_add 20";
f0116a07:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0116a0d:	bb b8 b4 13 f0       	mov    $0xf013b4b8,%ebx
f0116a12:	ba 04 00 00 00       	mov    $0x4,%edx
f0116a17:	89 c7                	mov    %eax,%edi
f0116a19:	89 de                	mov    %ebx,%esi
f0116a1b:	89 d1                	mov    %edx,%ecx
f0116a1d:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0116a1f:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f0116a25:	b9 15 00 00 00       	mov    $0x15,%ecx
f0116a2a:	b8 00 00 00 00       	mov    $0x0,%eax
f0116a2f:	89 d7                	mov    %edx,%edi
f0116a31:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0116a33:	83 ec 0c             	sub    $0xc,%esp
f0116a36:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0116a3c:	50                   	push   %eax
f0116a3d:	e8 2e a3 fe ff       	call   f0100d70 <execute_command>
f0116a42:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f0116a45:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0116a4b:	bb 1c b5 13 f0       	mov    $0xf013b51c,%ebx
f0116a50:	ba 0d 00 00 00       	mov    $0xd,%edx
f0116a55:	89 c7                	mov    %eax,%edi
f0116a57:	89 de                	mov    %ebx,%esi
f0116a59:	89 d1                	mov    %edx,%ecx
f0116a5b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116a5d:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f0116a63:	b9 57 00 00 00       	mov    $0x57,%ecx
f0116a68:	b0 00                	mov    $0x0,%al
f0116a6a:	89 d7                	mov    %edx,%edi
f0116a6c:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0116a6e:	83 ec 0c             	sub    $0xc,%esp
f0116a71:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0116a77:	50                   	push   %eax
f0116a78:	e8 f3 a2 fe ff       	call   f0100d70 <execute_command>
f0116a7d:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f0116a80:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0116a86:	bb 80 b5 13 f0       	mov    $0xf013b580,%ebx
f0116a8b:	ba 17 00 00 00       	mov    $0x17,%edx
f0116a90:	89 c7                	mov    %eax,%edi
f0116a92:	89 de                	mov    %ebx,%esi
f0116a94:	89 d1                	mov    %edx,%ecx
f0116a96:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116a98:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f0116a9e:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0116aa3:	b0 00                	mov    $0x0,%al
f0116aa5:	89 d7                	mov    %edx,%edi
f0116aa7:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0116aa9:	83 ec 0c             	sub    $0xc,%esp
f0116aac:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0116ab2:	50                   	push   %eax
f0116ab3:	e8 b8 a2 fe ff       	call   f0100d70 <execute_command>
f0116ab8:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0116abb:	83 ec 04             	sub    $0x4,%esp
f0116abe:	6a 00                	push   $0x0
f0116ac0:	8d 45 ac             	lea    -0x54(%ebp),%eax
f0116ac3:	50                   	push   %eax
f0116ac4:	68 00 10 00 00       	push   $0x1000
f0116ac9:	e8 36 36 ff ff       	call   f010a104 <envid2env>
f0116ace:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0116ad1:	83 ec 04             	sub    $0x4,%esp
f0116ad4:	6a 00                	push   $0x0
f0116ad6:	8d 45 a8             	lea    -0x58(%ebp),%eax
f0116ad9:	50                   	push   %eax
f0116ada:	68 01 10 00 00       	push   $0x1001
f0116adf:	e8 20 36 ff ff       	call   f010a104 <envid2env>
f0116ae4:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0116ae7:	83 ec 04             	sub    $0x4,%esp
f0116aea:	6a 00                	push   $0x0
f0116aec:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f0116aef:	50                   	push   %eax
f0116af0:	68 02 10 00 00       	push   $0x1002
f0116af5:	e8 0a 36 ff ff       	call   f010a104 <envid2env>
f0116afa:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0116afd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116b00:	85 c0                	test   %eax,%eax
f0116b02:	74 0e                	je     f0116b12 <test_priority_normal_and_higher+0x12b>
f0116b04:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116b07:	85 c0                	test   %eax,%eax
f0116b09:	74 07                	je     f0116b12 <test_priority_normal_and_higher+0x12b>
f0116b0b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116b0e:	85 c0                	test   %eax,%eax
f0116b10:	75 14                	jne    f0116b26 <test_priority_normal_and_higher+0x13f>
			panic("Loading programs failed\n");
f0116b12:	83 ec 04             	sub    $0x4,%esp
f0116b15:	68 58 b2 13 f0       	push   $0xf013b258
f0116b1a:	6a 26                	push   $0x26
f0116b1c:	68 71 b2 13 f0       	push   $0xf013b271
f0116b21:	e8 df 96 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0116b26:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116b29:	8b 40 74             	mov    0x74(%eax),%eax
f0116b2c:	83 f8 14             	cmp    $0x14,%eax
f0116b2f:	75 16                	jne    f0116b47 <test_priority_normal_and_higher+0x160>
f0116b31:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116b34:	8b 40 74             	mov    0x74(%eax),%eax
f0116b37:	83 f8 0f             	cmp    $0xf,%eax
f0116b3a:	75 0b                	jne    f0116b47 <test_priority_normal_and_higher+0x160>
f0116b3c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116b3f:	8b 40 74             	mov    0x74(%eax),%eax
f0116b42:	83 f8 0a             	cmp    $0xa,%eax
f0116b45:	74 14                	je     f0116b5b <test_priority_normal_and_higher+0x174>
			panic("The programs should be initially loaded with the given working set size\n");
f0116b47:	83 ec 04             	sub    $0x4,%esp
f0116b4a:	68 8c b2 13 f0       	push   $0xf013b28c
f0116b4f:	6a 29                	push   $0x29
f0116b51:	68 71 b2 13 f0       	push   $0xf013b271
f0116b56:	e8 aa 96 fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 20; i++)
f0116b5b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0116b62:	eb 44                	jmp    f0116ba8 <test_priority_normal_and_higher+0x1c1>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0116b64:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116b67:	8b 48 78             	mov    0x78(%eax),%ecx
f0116b6a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116b6d:	89 d0                	mov    %edx,%eax
f0116b6f:	01 c0                	add    %eax,%eax
f0116b71:	01 d0                	add    %edx,%eax
f0116b73:	c1 e0 03             	shl    $0x3,%eax
f0116b76:	01 c8                	add    %ecx,%eax
f0116b78:	8b 10                	mov    (%eax),%edx
f0116b7a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116b7d:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0116b84:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116b87:	8b 48 78             	mov    0x78(%eax),%ecx
f0116b8a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116b8d:	89 d0                	mov    %edx,%eax
f0116b8f:	01 c0                	add    %eax,%eax
f0116b91:	01 d0                	add    %edx,%eax
f0116b93:	c1 e0 03             	shl    $0x3,%eax
f0116b96:	01 c8                	add    %ecx,%eax
f0116b98:	8b 50 08             	mov    0x8(%eax),%edx
f0116b9b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116b9e:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0116ba5:	ff 45 e4             	incl   -0x1c(%ebp)
f0116ba8:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0116bac:	7e b6                	jle    f0116b64 <test_priority_normal_and_higher+0x17d>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0116bae:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0116bb5:	eb 44                	jmp    f0116bfb <test_priority_normal_and_higher+0x214>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0116bb7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116bba:	8b 48 78             	mov    0x78(%eax),%ecx
f0116bbd:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0116bc0:	89 d0                	mov    %edx,%eax
f0116bc2:	01 c0                	add    %eax,%eax
f0116bc4:	01 d0                	add    %edx,%eax
f0116bc6:	c1 e0 03             	shl    $0x3,%eax
f0116bc9:	01 c8                	add    %ecx,%eax
f0116bcb:	8b 10                	mov    (%eax),%edx
f0116bcd:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116bd0:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0116bd7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116bda:	8b 48 78             	mov    0x78(%eax),%ecx
f0116bdd:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0116be0:	89 d0                	mov    %edx,%eax
f0116be2:	01 c0                	add    %eax,%eax
f0116be4:	01 d0                	add    %edx,%eax
f0116be6:	c1 e0 03             	shl    $0x3,%eax
f0116be9:	01 c8                	add    %ecx,%eax
f0116beb:	8b 50 08             	mov    0x8(%eax),%edx
f0116bee:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116bf1:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0116bf8:	ff 45 e0             	incl   -0x20(%ebp)
f0116bfb:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f0116bff:	7e b6                	jle    f0116bb7 <test_priority_normal_and_higher+0x1d0>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0116c01:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0116c08:	eb 44                	jmp    f0116c4e <test_priority_normal_and_higher+0x267>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0116c0a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116c0d:	8b 48 78             	mov    0x78(%eax),%ecx
f0116c10:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116c13:	89 d0                	mov    %edx,%eax
f0116c15:	01 c0                	add    %eax,%eax
f0116c17:	01 d0                	add    %edx,%eax
f0116c19:	c1 e0 03             	shl    $0x3,%eax
f0116c1c:	01 c8                	add    %ecx,%eax
f0116c1e:	8b 10                	mov    (%eax),%edx
f0116c20:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116c23:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0116c2a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116c2d:	8b 48 78             	mov    0x78(%eax),%ecx
f0116c30:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116c33:	89 d0                	mov    %edx,%eax
f0116c35:	01 c0                	add    %eax,%eax
f0116c37:	01 d0                	add    %edx,%eax
f0116c39:	c1 e0 03             	shl    $0x3,%eax
f0116c3c:	01 c8                	add    %ecx,%eax
f0116c3e:	8b 50 08             	mov    0x8(%eax),%edx
f0116c41:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116c44:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0116c4b:	ff 45 dc             	incl   -0x24(%ebp)
f0116c4e:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f0116c52:	7e b6                	jle    f0116c0a <test_priority_normal_and_higher+0x223>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0116c54:	e8 3e 65 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0116c59:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f0116c5c:	e8 67 d1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116c61:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0116c64:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116c67:	83 ec 08             	sub    $0x8,%esp
f0116c6a:	6a 03                	push   $0x3
f0116c6c:	50                   	push   %eax
f0116c6d:	e8 70 49 ff ff       	call   f010b5e2 <set_program_priority>
f0116c72:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0116c75:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116c78:	83 ec 08             	sub    $0x8,%esp
f0116c7b:	6a 03                	push   $0x3
f0116c7d:	50                   	push   %eax
f0116c7e:	e8 5f 49 ff ff       	call   f010b5e2 <set_program_priority>
f0116c83:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0116c86:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116c89:	83 ec 08             	sub    $0x8,%esp
f0116c8c:	6a 03                	push   $0x3
f0116c8e:	50                   	push   %eax
f0116c8f:	e8 4e 49 ff ff       	call   f010b5e2 <set_program_priority>
f0116c94:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116c97:	e8 2c d1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116c9c:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116c9f:	74 14                	je     f0116cb5 <test_priority_normal_and_higher+0x2ce>
f0116ca1:	83 ec 04             	sub    $0x4,%esp
f0116ca4:	68 d8 b2 13 f0       	push   $0xf013b2d8
f0116ca9:	6a 45                	push   $0x45
f0116cab:	68 71 b2 13 f0       	push   $0xf013b271
f0116cb0:	e8 50 95 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116cb5:	e8 dd 64 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0116cba:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116cbd:	74 14                	je     f0116cd3 <test_priority_normal_and_higher+0x2ec>
f0116cbf:	83 ec 04             	sub    $0x4,%esp
f0116cc2:	68 d8 b2 13 f0       	push   $0xf013b2d8
f0116cc7:	6a 46                	push   $0x46
f0116cc9:	68 71 b2 13 f0       	push   $0xf013b271
f0116cce:	e8 32 95 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0116cd3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116cd6:	8b 40 74             	mov    0x74(%eax),%eax
f0116cd9:	83 f8 14             	cmp    $0x14,%eax
f0116cdc:	75 16                	jne    f0116cf4 <test_priority_normal_and_higher+0x30d>
f0116cde:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116ce1:	8b 40 74             	mov    0x74(%eax),%eax
f0116ce4:	83 f8 0f             	cmp    $0xf,%eax
f0116ce7:	75 0b                	jne    f0116cf4 <test_priority_normal_and_higher+0x30d>
f0116ce9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116cec:	8b 40 74             	mov    0x74(%eax),%eax
f0116cef:	83 f8 0a             	cmp    $0xa,%eax
f0116cf2:	74 14                	je     f0116d08 <test_priority_normal_and_higher+0x321>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0116cf4:	83 ec 04             	sub    $0x4,%esp
f0116cf7:	68 04 b3 13 f0       	push   $0xf013b304
f0116cfc:	6a 49                	push   $0x49
f0116cfe:	68 71 b2 13 f0       	push   $0xf013b271
f0116d03:	e8 fd 94 fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f0116d08:	e8 8a 64 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0116d0d:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116d10:	e8 b3 d0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116d15:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f0116d18:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116d1b:	83 ec 08             	sub    $0x8,%esp
f0116d1e:	6a 04                	push   $0x4
f0116d20:	50                   	push   %eax
f0116d21:	e8 bc 48 ff ff       	call   f010b5e2 <set_program_priority>
f0116d26:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f0116d29:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116d2c:	83 ec 08             	sub    $0x8,%esp
f0116d2f:	6a 04                	push   $0x4
f0116d31:	50                   	push   %eax
f0116d32:	e8 ab 48 ff ff       	call   f010b5e2 <set_program_priority>
f0116d37:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0116d3a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116d3d:	83 ec 08             	sub    $0x8,%esp
f0116d40:	6a 04                	push   $0x4
f0116d42:	50                   	push   %eax
f0116d43:	e8 9a 48 ff ff       	call   f010b5e2 <set_program_priority>
f0116d48:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116d4b:	e8 78 d0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116d50:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116d53:	74 14                	je     f0116d69 <test_priority_normal_and_higher+0x382>
f0116d55:	83 ec 04             	sub    $0x4,%esp
f0116d58:	68 d8 b2 13 f0       	push   $0xf013b2d8
f0116d5d:	6a 53                	push   $0x53
f0116d5f:	68 71 b2 13 f0       	push   $0xf013b271
f0116d64:	e8 9c 94 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f0116d69:	e8 29 64 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0116d6e:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116d71:	74 14                	je     f0116d87 <test_priority_normal_and_higher+0x3a0>
f0116d73:	83 ec 04             	sub    $0x4,%esp
f0116d76:	68 58 b3 13 f0       	push   $0xf013b358
f0116d7b:	6a 54                	push   $0x54
f0116d7d:	68 71 b2 13 f0       	push   $0xf013b271
f0116d82:	e8 7e 94 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116d87:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116d8a:	8b 40 74             	mov    0x74(%eax),%eax
f0116d8d:	83 f8 14             	cmp    $0x14,%eax
f0116d90:	75 16                	jne    f0116da8 <test_priority_normal_and_higher+0x3c1>
f0116d92:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116d95:	8b 40 74             	mov    0x74(%eax),%eax
f0116d98:	83 f8 0f             	cmp    $0xf,%eax
f0116d9b:	75 0b                	jne    f0116da8 <test_priority_normal_and_higher+0x3c1>
f0116d9d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116da0:	8b 40 74             	mov    0x74(%eax),%eax
f0116da3:	83 f8 14             	cmp    $0x14,%eax
f0116da6:	74 14                	je     f0116dbc <test_priority_normal_and_higher+0x3d5>
			panic("The programs' working set size should be doubled only if it is full\n");
f0116da8:	83 ec 04             	sub    $0x4,%esp
f0116dab:	68 88 b3 13 f0       	push   $0xf013b388
f0116db0:	6a 57                	push   $0x57
f0116db2:	68 71 b2 13 f0       	push   $0xf013b271
f0116db7:	e8 49 94 fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f0116dbc:	e8 d6 63 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0116dc1:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116dc4:	e8 ff cf fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116dc9:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f0116dcc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116dcf:	83 ec 08             	sub    $0x8,%esp
f0116dd2:	6a 04                	push   $0x4
f0116dd4:	50                   	push   %eax
f0116dd5:	e8 08 48 ff ff       	call   f010b5e2 <set_program_priority>
f0116dda:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116ddd:	e8 e6 cf fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116de2:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116de5:	74 14                	je     f0116dfb <test_priority_normal_and_higher+0x414>
f0116de7:	83 ec 04             	sub    $0x4,%esp
f0116dea:	68 d8 b2 13 f0       	push   $0xf013b2d8
f0116def:	6a 5f                	push   $0x5f
f0116df1:	68 71 b2 13 f0       	push   $0xf013b271
f0116df6:	e8 0a 94 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116dfb:	e8 97 63 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0116e00:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116e03:	74 14                	je     f0116e19 <test_priority_normal_and_higher+0x432>
f0116e05:	83 ec 04             	sub    $0x4,%esp
f0116e08:	68 d8 b2 13 f0       	push   $0xf013b2d8
f0116e0d:	6a 60                	push   $0x60
f0116e0f:	68 71 b2 13 f0       	push   $0xf013b271
f0116e14:	e8 ec 93 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116e19:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116e1c:	8b 40 74             	mov    0x74(%eax),%eax
f0116e1f:	83 f8 14             	cmp    $0x14,%eax
f0116e22:	75 16                	jne    f0116e3a <test_priority_normal_and_higher+0x453>
f0116e24:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116e27:	8b 40 74             	mov    0x74(%eax),%eax
f0116e2a:	83 f8 0f             	cmp    $0xf,%eax
f0116e2d:	75 0b                	jne    f0116e3a <test_priority_normal_and_higher+0x453>
f0116e2f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116e32:	8b 40 74             	mov    0x74(%eax),%eax
f0116e35:	83 f8 14             	cmp    $0x14,%eax
f0116e38:	74 14                	je     f0116e4e <test_priority_normal_and_higher+0x467>
			panic("The programs' working set size should be doubled only once\n");
f0116e3a:	83 ec 04             	sub    $0x4,%esp
f0116e3d:	68 d0 b3 13 f0       	push   $0xf013b3d0
f0116e42:	6a 63                	push   $0x63
f0116e44:	68 71 b2 13 f0       	push   $0xf013b271
f0116e49:	e8 b7 93 fe ff       	call   f0100205 <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0116e4e:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f0116e55:	eb 1b                	jmp    f0116e72 <test_priority_normal_and_higher+0x48b>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0116e57:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116e5a:	8b 48 78             	mov    0x78(%eax),%ecx
f0116e5d:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0116e60:	89 d0                	mov    %edx,%eax
f0116e62:	01 c0                	add    %eax,%eax
f0116e64:	01 d0                	add    %edx,%eax
f0116e66:	c1 e0 03             	shl    $0x3,%eax
f0116e69:	01 c8                	add    %ecx,%eax
f0116e6b:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0116e6f:	ff 45 d8             	incl   -0x28(%ebp)
f0116e72:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f0116e76:	7e df                	jle    f0116e57 <test_priority_normal_and_higher+0x470>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116e78:	e8 1a 63 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0116e7d:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116e80:	e8 43 cf fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116e85:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f0116e88:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116e8b:	83 ec 08             	sub    $0x8,%esp
f0116e8e:	6a 04                	push   $0x4
f0116e90:	50                   	push   %eax
f0116e91:	e8 4c 47 ff ff       	call   f010b5e2 <set_program_priority>
f0116e96:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116e99:	e8 2a cf fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116e9e:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116ea1:	74 14                	je     f0116eb7 <test_priority_normal_and_higher+0x4d0>
f0116ea3:	83 ec 04             	sub    $0x4,%esp
f0116ea6:	68 d8 b2 13 f0       	push   $0xf013b2d8
f0116eab:	6a 70                	push   $0x70
f0116ead:	68 71 b2 13 f0       	push   $0xf013b271
f0116eb2:	e8 4e 93 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116eb7:	e8 db 62 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0116ebc:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116ebf:	74 14                	je     f0116ed5 <test_priority_normal_and_higher+0x4ee>
f0116ec1:	83 ec 04             	sub    $0x4,%esp
f0116ec4:	68 d8 b2 13 f0       	push   $0xf013b2d8
f0116ec9:	6a 71                	push   $0x71
f0116ecb:	68 71 b2 13 f0       	push   $0xf013b271
f0116ed0:	e8 30 93 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116ed5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116ed8:	8b 40 74             	mov    0x74(%eax),%eax
f0116edb:	83 f8 14             	cmp    $0x14,%eax
f0116ede:	75 16                	jne    f0116ef6 <test_priority_normal_and_higher+0x50f>
f0116ee0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116ee3:	8b 40 74             	mov    0x74(%eax),%eax
f0116ee6:	83 f8 0f             	cmp    $0xf,%eax
f0116ee9:	75 0b                	jne    f0116ef6 <test_priority_normal_and_higher+0x50f>
f0116eeb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116eee:	8b 40 74             	mov    0x74(%eax),%eax
f0116ef1:	83 f8 14             	cmp    $0x14,%eax
f0116ef4:	74 14                	je     f0116f0a <test_priority_normal_and_higher+0x523>
			panic("The programs' working set size should be doubled only once\n");
f0116ef6:	83 ec 04             	sub    $0x4,%esp
f0116ef9:	68 d0 b3 13 f0       	push   $0xf013b3d0
f0116efe:	6a 74                	push   $0x74
f0116f00:	68 71 b2 13 f0       	push   $0xf013b271
f0116f05:	e8 fb 92 fe ff       	call   f0100205 <_panic>

		for(int i = 10; i < 15; i++)
f0116f0a:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f0116f11:	eb 1b                	jmp    f0116f2e <test_priority_normal_and_higher+0x547>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0116f13:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116f16:	8b 48 78             	mov    0x78(%eax),%ecx
f0116f19:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0116f1c:	89 d0                	mov    %edx,%eax
f0116f1e:	01 c0                	add    %eax,%eax
f0116f20:	01 d0                	add    %edx,%eax
f0116f22:	c1 e0 03             	shl    $0x3,%eax
f0116f25:	01 c8                	add    %ecx,%eax
f0116f27:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f0116f2b:	ff 45 d4             	incl   -0x2c(%ebp)
f0116f2e:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0116f32:	7e df                	jle    f0116f13 <test_priority_normal_and_higher+0x52c>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116f34:	e8 5e 62 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0116f39:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116f3c:	e8 87 ce fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116f41:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0116f44:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116f47:	83 ec 08             	sub    $0x8,%esp
f0116f4a:	6a 05                	push   $0x5
f0116f4c:	50                   	push   %eax
f0116f4d:	e8 90 46 ff ff       	call   f010b5e2 <set_program_priority>
f0116f52:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f0116f55:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116f58:	83 ec 08             	sub    $0x8,%esp
f0116f5b:	6a 05                	push   $0x5
f0116f5d:	50                   	push   %eax
f0116f5e:	e8 7f 46 ff ff       	call   f010b5e2 <set_program_priority>
f0116f63:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116f66:	e8 5d ce fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116f6b:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116f6e:	74 14                	je     f0116f84 <test_priority_normal_and_higher+0x59d>
f0116f70:	83 ec 04             	sub    $0x4,%esp
f0116f73:	68 d8 b2 13 f0       	push   $0xf013b2d8
f0116f78:	6a 7f                	push   $0x7f
f0116f7a:	68 71 b2 13 f0       	push   $0xf013b271
f0116f7f:	e8 81 92 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116f84:	e8 0e 62 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0116f89:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116f8c:	74 17                	je     f0116fa5 <test_priority_normal_and_higher+0x5be>
f0116f8e:	83 ec 04             	sub    $0x4,%esp
f0116f91:	68 d8 b2 13 f0       	push   $0xf013b2d8
f0116f96:	68 80 00 00 00       	push   $0x80
f0116f9b:	68 71 b2 13 f0       	push   $0xf013b271
f0116fa0:	e8 60 92 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0116fa5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116fa8:	8b 40 74             	mov    0x74(%eax),%eax
f0116fab:	83 f8 14             	cmp    $0x14,%eax
f0116fae:	75 16                	jne    f0116fc6 <test_priority_normal_and_higher+0x5df>
f0116fb0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116fb3:	8b 40 74             	mov    0x74(%eax),%eax
f0116fb6:	83 f8 1e             	cmp    $0x1e,%eax
f0116fb9:	75 0b                	jne    f0116fc6 <test_priority_normal_and_higher+0x5df>
f0116fbb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116fbe:	8b 40 74             	mov    0x74(%eax),%eax
f0116fc1:	83 f8 28             	cmp    $0x28,%eax
f0116fc4:	74 17                	je     f0116fdd <test_priority_normal_and_higher+0x5f6>
			panic("The programs' working set size should be doubled if full\n");
f0116fc6:	83 ec 04             	sub    $0x4,%esp
f0116fc9:	68 0c b4 13 f0       	push   $0xf013b40c
f0116fce:	68 83 00 00 00       	push   $0x83
f0116fd3:	68 71 b2 13 f0       	push   $0xf013b271
f0116fd8:	e8 28 92 fe ff       	call   f0100205 <_panic>

		for(int i = 20; i < 40; i++)
f0116fdd:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f0116fe4:	eb 1b                	jmp    f0117001 <test_priority_normal_and_higher+0x61a>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0116fe6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116fe9:	8b 48 78             	mov    0x78(%eax),%ecx
f0116fec:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0116fef:	89 d0                	mov    %edx,%eax
f0116ff1:	01 c0                	add    %eax,%eax
f0116ff3:	01 d0                	add    %edx,%eax
f0116ff5:	c1 e0 03             	shl    $0x3,%eax
f0116ff8:	01 c8                	add    %ecx,%eax
f0116ffa:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f0116ffe:	ff 45 d0             	incl   -0x30(%ebp)
f0117001:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f0117005:	7e df                	jle    f0116fe6 <test_priority_normal_and_higher+0x5ff>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0117007:	e8 8b 61 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011700c:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011700f:	e8 b4 cd fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117014:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0117017:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011701a:	83 ec 08             	sub    $0x8,%esp
f011701d:	6a 05                	push   $0x5
f011701f:	50                   	push   %eax
f0117020:	e8 bd 45 ff ff       	call   f010b5e2 <set_program_priority>
f0117025:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0117028:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011702b:	83 ec 08             	sub    $0x8,%esp
f011702e:	6a 04                	push   $0x4
f0117030:	50                   	push   %eax
f0117031:	e8 ac 45 ff ff       	call   f010b5e2 <set_program_priority>
f0117036:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117039:	e8 8a cd fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011703e:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0117041:	74 17                	je     f011705a <test_priority_normal_and_higher+0x673>
f0117043:	83 ec 04             	sub    $0x4,%esp
f0117046:	68 d8 b2 13 f0       	push   $0xf013b2d8
f011704b:	68 8e 00 00 00       	push   $0x8e
f0117050:	68 71 b2 13 f0       	push   $0xf013b271
f0117055:	e8 ab 91 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011705a:	e8 38 61 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011705f:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117062:	74 17                	je     f011707b <test_priority_normal_and_higher+0x694>
f0117064:	83 ec 04             	sub    $0x4,%esp
f0117067:	68 d8 b2 13 f0       	push   $0xf013b2d8
f011706c:	68 8f 00 00 00       	push   $0x8f
f0117071:	68 71 b2 13 f0       	push   $0xf013b271
f0117076:	e8 8a 91 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f011707b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011707e:	8b 40 74             	mov    0x74(%eax),%eax
f0117081:	83 f8 14             	cmp    $0x14,%eax
f0117084:	75 16                	jne    f011709c <test_priority_normal_and_higher+0x6b5>
f0117086:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117089:	8b 40 74             	mov    0x74(%eax),%eax
f011708c:	83 f8 1e             	cmp    $0x1e,%eax
f011708f:	75 0b                	jne    f011709c <test_priority_normal_and_higher+0x6b5>
f0117091:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117094:	8b 40 74             	mov    0x74(%eax),%eax
f0117097:	83 f8 28             	cmp    $0x28,%eax
f011709a:	74 17                	je     f01170b3 <test_priority_normal_and_higher+0x6cc>
			panic("The programs' working set size should be doubled if full\n");
f011709c:	83 ec 04             	sub    $0x4,%esp
f011709f:	68 0c b4 13 f0       	push   $0xf013b40c
f01170a4:	68 92 00 00 00       	push   $0x92
f01170a9:	68 71 b2 13 f0       	push   $0xf013b271
f01170ae:	e8 52 91 fe ff       	call   f0100205 <_panic>

		for(int i = 15; i < 30; i++)
f01170b3:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f01170ba:	eb 1b                	jmp    f01170d7 <test_priority_normal_and_higher+0x6f0>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f01170bc:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01170bf:	8b 48 78             	mov    0x78(%eax),%ecx
f01170c2:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01170c5:	89 d0                	mov    %edx,%eax
f01170c7:	01 c0                	add    %eax,%eax
f01170c9:	01 d0                	add    %edx,%eax
f01170cb:	c1 e0 03             	shl    $0x3,%eax
f01170ce:	01 c8                	add    %ecx,%eax
f01170d0:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f01170d4:	ff 45 cc             	incl   -0x34(%ebp)
f01170d7:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f01170db:	7e df                	jle    f01170bc <test_priority_normal_and_higher+0x6d5>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01170dd:	e8 b5 60 ff ff       	call   f010d197 <sys_calculate_free_frames>
f01170e2:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01170e5:	e8 de cc fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01170ea:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f01170ed:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01170f0:	83 ec 08             	sub    $0x8,%esp
f01170f3:	6a 05                	push   $0x5
f01170f5:	50                   	push   %eax
f01170f6:	e8 e7 44 ff ff       	call   f010b5e2 <set_program_priority>
f01170fb:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f01170fe:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117101:	83 ec 08             	sub    $0x8,%esp
f0117104:	6a 04                	push   $0x4
f0117106:	50                   	push   %eax
f0117107:	e8 d6 44 ff ff       	call   f010b5e2 <set_program_priority>
f011710c:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011710f:	e8 b4 cc fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117114:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0117117:	74 17                	je     f0117130 <test_priority_normal_and_higher+0x749>
f0117119:	83 ec 04             	sub    $0x4,%esp
f011711c:	68 d8 b2 13 f0       	push   $0xf013b2d8
f0117121:	68 9d 00 00 00       	push   $0x9d
f0117126:	68 71 b2 13 f0       	push   $0xf013b271
f011712b:	e8 d5 90 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117130:	e8 62 60 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0117135:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117138:	74 17                	je     f0117151 <test_priority_normal_and_higher+0x76a>
f011713a:	83 ec 04             	sub    $0x4,%esp
f011713d:	68 d8 b2 13 f0       	push   $0xf013b2d8
f0117142:	68 9e 00 00 00       	push   $0x9e
f0117147:	68 71 b2 13 f0       	push   $0xf013b271
f011714c:	e8 b4 90 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f0117151:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117154:	8b 40 74             	mov    0x74(%eax),%eax
f0117157:	83 f8 14             	cmp    $0x14,%eax
f011715a:	75 16                	jne    f0117172 <test_priority_normal_and_higher+0x78b>
f011715c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011715f:	8b 40 74             	mov    0x74(%eax),%eax
f0117162:	83 f8 3c             	cmp    $0x3c,%eax
f0117165:	75 0b                	jne    f0117172 <test_priority_normal_and_higher+0x78b>
f0117167:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011716a:	8b 40 74             	mov    0x74(%eax),%eax
f011716d:	83 f8 28             	cmp    $0x28,%eax
f0117170:	74 17                	je     f0117189 <test_priority_normal_and_higher+0x7a2>
			panic("The programs' working set size should be doubled if full\n");
f0117172:	83 ec 04             	sub    $0x4,%esp
f0117175:	68 0c b4 13 f0       	push   $0xf013b40c
f011717a:	68 a1 00 00 00       	push   $0xa1
f011717f:	68 71 b2 13 f0       	push   $0xf013b271
f0117184:	e8 7c 90 fe ff       	call   f0100205 <_panic>

		for(int i = 15; i < 60; i++)
f0117189:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f0117190:	eb 1b                	jmp    f01171ad <test_priority_normal_and_higher+0x7c6>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f0117192:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117195:	8b 48 78             	mov    0x78(%eax),%ecx
f0117198:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011719b:	89 d0                	mov    %edx,%eax
f011719d:	01 c0                	add    %eax,%eax
f011719f:	01 d0                	add    %edx,%eax
f01171a1:	c1 e0 03             	shl    $0x3,%eax
f01171a4:	01 c8                	add    %ecx,%eax
f01171a6:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f01171aa:	ff 45 c8             	incl   -0x38(%ebp)
f01171ad:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f01171b1:	7e df                	jle    f0117192 <test_priority_normal_and_higher+0x7ab>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f01171b3:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f01171ba:	eb 1b                	jmp    f01171d7 <test_priority_normal_and_higher+0x7f0>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f01171bc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01171bf:	8b 48 78             	mov    0x78(%eax),%ecx
f01171c2:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01171c5:	89 d0                	mov    %edx,%eax
f01171c7:	01 c0                	add    %eax,%eax
f01171c9:	01 d0                	add    %edx,%eax
f01171cb:	c1 e0 03             	shl    $0x3,%eax
f01171ce:	01 c8                	add    %ecx,%eax
f01171d0:	c6 40 04 01          	movb   $0x1,0x4(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f01171d4:	ff 45 c4             	incl   -0x3c(%ebp)
f01171d7:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f01171db:	7e df                	jle    f01171bc <test_priority_normal_and_higher+0x7d5>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f01171dd:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f01171e4:	eb 7a                	jmp    f0117260 <test_priority_normal_and_higher+0x879>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f01171e6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01171e9:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f01171f0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01171f3:	8b 58 78             	mov    0x78(%eax),%ebx
f01171f6:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01171f9:	89 d0                	mov    %edx,%eax
f01171fb:	01 c0                	add    %eax,%eax
f01171fd:	01 d0                	add    %edx,%eax
f01171ff:	c1 e0 03             	shl    $0x3,%eax
f0117202:	01 d8                	add    %ebx,%eax
f0117204:	8b 00                	mov    (%eax),%eax
f0117206:	39 c1                	cmp    %eax,%ecx
f0117208:	74 17                	je     f0117221 <test_priority_normal_and_higher+0x83a>
				panic("Working set should be moved properly to the new one");
f011720a:	83 ec 04             	sub    $0x4,%esp
f011720d:	68 48 b4 13 f0       	push   $0xf013b448
f0117212:	68 af 00 00 00       	push   $0xaf
f0117217:	68 71 b2 13 f0       	push   $0xf013b271
f011721c:	e8 e4 8f fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0117221:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117224:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f011722b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011722e:	8b 58 78             	mov    0x78(%eax),%ebx
f0117231:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117234:	89 d0                	mov    %edx,%eax
f0117236:	01 c0                	add    %eax,%eax
f0117238:	01 d0                	add    %edx,%eax
f011723a:	c1 e0 03             	shl    $0x3,%eax
f011723d:	01 d8                	add    %ebx,%eax
f011723f:	8b 40 08             	mov    0x8(%eax),%eax
f0117242:	39 c1                	cmp    %eax,%ecx
f0117244:	74 17                	je     f011725d <test_priority_normal_and_higher+0x876>
				panic("Working set should be moved properly to the new one");
f0117246:	83 ec 04             	sub    $0x4,%esp
f0117249:	68 48 b4 13 f0       	push   $0xf013b448
f011724e:	68 b2 00 00 00       	push   $0xb2
f0117253:	68 71 b2 13 f0       	push   $0xf013b271
f0117258:	e8 a8 8f fe ff       	call   f0100205 <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f011725d:	ff 45 c0             	incl   -0x40(%ebp)
f0117260:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f0117264:	7e 80                	jle    f01171e6 <test_priority_normal_and_higher+0x7ff>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117266:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f011726d:	eb 7a                	jmp    f01172e9 <test_priority_normal_and_higher+0x902>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f011726f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0117272:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f0117279:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011727c:	8b 58 78             	mov    0x78(%eax),%ebx
f011727f:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0117282:	89 d0                	mov    %edx,%eax
f0117284:	01 c0                	add    %eax,%eax
f0117286:	01 d0                	add    %edx,%eax
f0117288:	c1 e0 03             	shl    $0x3,%eax
f011728b:	01 d8                	add    %ebx,%eax
f011728d:	8b 00                	mov    (%eax),%eax
f011728f:	39 c1                	cmp    %eax,%ecx
f0117291:	74 17                	je     f01172aa <test_priority_normal_and_higher+0x8c3>
				panic("Working set should be moved properly to the new one");
f0117293:	83 ec 04             	sub    $0x4,%esp
f0117296:	68 48 b4 13 f0       	push   $0xf013b448
f011729b:	68 b8 00 00 00       	push   $0xb8
f01172a0:	68 71 b2 13 f0       	push   $0xf013b271
f01172a5:	e8 5b 8f fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f01172aa:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01172ad:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f01172b4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01172b7:	8b 58 78             	mov    0x78(%eax),%ebx
f01172ba:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01172bd:	89 d0                	mov    %edx,%eax
f01172bf:	01 c0                	add    %eax,%eax
f01172c1:	01 d0                	add    %edx,%eax
f01172c3:	c1 e0 03             	shl    $0x3,%eax
f01172c6:	01 d8                	add    %ebx,%eax
f01172c8:	8b 40 08             	mov    0x8(%eax),%eax
f01172cb:	39 c1                	cmp    %eax,%ecx
f01172cd:	74 17                	je     f01172e6 <test_priority_normal_and_higher+0x8ff>
				panic("Working set should be moved properly to the new one");
f01172cf:	83 ec 04             	sub    $0x4,%esp
f01172d2:	68 48 b4 13 f0       	push   $0xf013b448
f01172d7:	68 bb 00 00 00       	push   $0xbb
f01172dc:	68 71 b2 13 f0       	push   $0xf013b271
f01172e1:	e8 1f 8f fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f01172e6:	ff 45 bc             	incl   -0x44(%ebp)
f01172e9:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f01172ed:	7e 80                	jle    f011726f <test_priority_normal_and_higher+0x888>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f01172ef:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f01172f6:	eb 7a                	jmp    f0117372 <test_priority_normal_and_higher+0x98b>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f01172f8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01172fb:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f0117302:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117305:	8b 58 78             	mov    0x78(%eax),%ebx
f0117308:	8b 55 b8             	mov    -0x48(%ebp),%edx
f011730b:	89 d0                	mov    %edx,%eax
f011730d:	01 c0                	add    %eax,%eax
f011730f:	01 d0                	add    %edx,%eax
f0117311:	c1 e0 03             	shl    $0x3,%eax
f0117314:	01 d8                	add    %ebx,%eax
f0117316:	8b 00                	mov    (%eax),%eax
f0117318:	39 c1                	cmp    %eax,%ecx
f011731a:	74 17                	je     f0117333 <test_priority_normal_and_higher+0x94c>
				panic("Working set should be moved properly to the new one");
f011731c:	83 ec 04             	sub    $0x4,%esp
f011731f:	68 48 b4 13 f0       	push   $0xf013b448
f0117324:	68 c1 00 00 00       	push   $0xc1
f0117329:	68 71 b2 13 f0       	push   $0xf013b271
f011732e:	e8 d2 8e fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0117333:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117336:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f011733d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117340:	8b 58 78             	mov    0x78(%eax),%ebx
f0117343:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0117346:	89 d0                	mov    %edx,%eax
f0117348:	01 c0                	add    %eax,%eax
f011734a:	01 d0                	add    %edx,%eax
f011734c:	c1 e0 03             	shl    $0x3,%eax
f011734f:	01 d8                	add    %ebx,%eax
f0117351:	8b 40 08             	mov    0x8(%eax),%eax
f0117354:	39 c1                	cmp    %eax,%ecx
f0117356:	74 17                	je     f011736f <test_priority_normal_and_higher+0x988>
				panic("Working set should be moved properly to the new one");
f0117358:	83 ec 04             	sub    $0x4,%esp
f011735b:	68 48 b4 13 f0       	push   $0xf013b448
f0117360:	68 c4 00 00 00       	push   $0xc4
f0117365:	68 71 b2 13 f0       	push   $0xf013b271
f011736a:	e8 96 8e fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f011736f:	ff 45 b8             	incl   -0x48(%ebp)
f0117372:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f0117376:	7e 80                	jle    f01172f8 <test_priority_normal_and_higher+0x911>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f0117378:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f011737f:	75 6e 61 
f0117382:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f0117389:	6c 00 00 
f011738c:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f0117392:	b9 17 00 00 00       	mov    $0x17,%ecx
f0117397:	b8 00 00 00 00       	mov    $0x0,%eax
f011739c:	89 d7                	mov    %edx,%edi
f011739e:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f01173a0:	83 ec 0c             	sub    $0xc,%esp
f01173a3:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f01173a9:	50                   	push   %eax
f01173aa:	e8 c1 99 fe ff       	call   f0100d70 <execute_command>
f01173af:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
}
f01173b2:	eb 10                	jmp    f01173c4 <test_priority_normal_and_higher+0x9dd>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f01173b4:	83 ec 0c             	sub    $0xc,%esp
f01173b7:	68 7c b4 13 f0       	push   $0xf013b47c
f01173bc:	e8 4d 99 fe ff       	call   f0100d0e <cprintf>
f01173c1:	83 c4 10             	add    $0x10,%esp
	}
}
f01173c4:	90                   	nop
f01173c5:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01173c8:	5b                   	pop    %ebx
f01173c9:	5e                   	pop    %esi
f01173ca:	5f                   	pop    %edi
f01173cb:	5d                   	pop    %ebp
f01173cc:	c3                   	ret    

f01173cd <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f01173cd:	55                   	push   %ebp
f01173ce:	89 e5                	mov    %esp,%ebp
f01173d0:	57                   	push   %edi
f01173d1:	56                   	push   %esi
f01173d2:	53                   	push   %ebx
f01173d3:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
	if(firstTime)
f01173d9:	a0 22 3d 19 f0       	mov    0xf0193d22,%al
f01173de:	84 c0                	test   %al,%al
f01173e0:	0f 84 be 09 00 00    	je     f0117da4 <test_priority_normal_and_lower+0x9d7>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f01173e6:	c6 05 22 3d 19 f0 00 	movb   $0x0,0xf0193d22
		char command[100] = "load fos_add 20";
f01173ed:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f01173f3:	bb b8 b4 13 f0       	mov    $0xf013b4b8,%ebx
f01173f8:	ba 04 00 00 00       	mov    $0x4,%edx
f01173fd:	89 c7                	mov    %eax,%edi
f01173ff:	89 de                	mov    %ebx,%esi
f0117401:	89 d1                	mov    %edx,%ecx
f0117403:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0117405:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f011740b:	b9 15 00 00 00       	mov    $0x15,%ecx
f0117410:	b8 00 00 00 00       	mov    $0x0,%eax
f0117415:	89 d7                	mov    %edx,%edi
f0117417:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0117419:	83 ec 0c             	sub    $0xc,%esp
f011741c:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0117422:	50                   	push   %eax
f0117423:	e8 48 99 fe ff       	call   f0100d70 <execute_command>
f0117428:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f011742b:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0117431:	bb 74 b7 13 f0       	mov    $0xf013b774,%ebx
f0117436:	ba 0d 00 00 00       	mov    $0xd,%edx
f011743b:	89 c7                	mov    %eax,%edi
f011743d:	89 de                	mov    %ebx,%esi
f011743f:	89 d1                	mov    %edx,%ecx
f0117441:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0117443:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f0117449:	b9 57 00 00 00       	mov    $0x57,%ecx
f011744e:	b0 00                	mov    $0x0,%al
f0117450:	89 d7                	mov    %edx,%edi
f0117452:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0117454:	83 ec 0c             	sub    $0xc,%esp
f0117457:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f011745d:	50                   	push   %eax
f011745e:	e8 0d 99 fe ff       	call   f0100d70 <execute_command>
f0117463:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f0117466:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f011746c:	bb d8 b7 13 f0       	mov    $0xf013b7d8,%ebx
f0117471:	ba 17 00 00 00       	mov    $0x17,%edx
f0117476:	89 c7                	mov    %eax,%edi
f0117478:	89 de                	mov    %ebx,%esi
f011747a:	89 d1                	mov    %edx,%ecx
f011747c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011747e:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f0117484:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0117489:	b0 00                	mov    $0x0,%al
f011748b:	89 d7                	mov    %edx,%edi
f011748d:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f011748f:	83 ec 0c             	sub    $0xc,%esp
f0117492:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0117498:	50                   	push   %eax
f0117499:	e8 d2 98 fe ff       	call   f0100d70 <execute_command>
f011749e:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f01174a1:	83 ec 04             	sub    $0x4,%esp
f01174a4:	6a 00                	push   $0x0
f01174a6:	8d 45 b8             	lea    -0x48(%ebp),%eax
f01174a9:	50                   	push   %eax
f01174aa:	68 00 10 00 00       	push   $0x1000
f01174af:	e8 50 2c ff ff       	call   f010a104 <envid2env>
f01174b4:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f01174b7:	83 ec 04             	sub    $0x4,%esp
f01174ba:	6a 00                	push   $0x0
f01174bc:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01174bf:	50                   	push   %eax
f01174c0:	68 01 10 00 00       	push   $0x1001
f01174c5:	e8 3a 2c ff ff       	call   f010a104 <envid2env>
f01174ca:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f01174cd:	83 ec 04             	sub    $0x4,%esp
f01174d0:	6a 00                	push   $0x0
f01174d2:	8d 45 b0             	lea    -0x50(%ebp),%eax
f01174d5:	50                   	push   %eax
f01174d6:	68 02 10 00 00       	push   $0x1002
f01174db:	e8 24 2c ff ff       	call   f010a104 <envid2env>
f01174e0:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f01174e3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01174e6:	85 c0                	test   %eax,%eax
f01174e8:	74 0e                	je     f01174f8 <test_priority_normal_and_lower+0x12b>
f01174ea:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01174ed:	85 c0                	test   %eax,%eax
f01174ef:	74 07                	je     f01174f8 <test_priority_normal_and_lower+0x12b>
f01174f1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01174f4:	85 c0                	test   %eax,%eax
f01174f6:	75 17                	jne    f011750f <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f01174f8:	83 ec 04             	sub    $0x4,%esp
f01174fb:	68 58 b2 13 f0       	push   $0xf013b258
f0117500:	68 eb 00 00 00       	push   $0xeb
f0117505:	68 71 b2 13 f0       	push   $0xf013b271
f011750a:	e8 f6 8c fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f011750f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117512:	8b 40 74             	mov    0x74(%eax),%eax
f0117515:	83 f8 14             	cmp    $0x14,%eax
f0117518:	75 16                	jne    f0117530 <test_priority_normal_and_lower+0x163>
f011751a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011751d:	8b 40 74             	mov    0x74(%eax),%eax
f0117520:	83 f8 1e             	cmp    $0x1e,%eax
f0117523:	75 0b                	jne    f0117530 <test_priority_normal_and_lower+0x163>
f0117525:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117528:	8b 40 74             	mov    0x74(%eax),%eax
f011752b:	83 f8 28             	cmp    $0x28,%eax
f011752e:	74 17                	je     f0117547 <test_priority_normal_and_lower+0x17a>
			panic("The programs should be initially loaded with the given working set size\n");
f0117530:	83 ec 04             	sub    $0x4,%esp
f0117533:	68 8c b2 13 f0       	push   $0xf013b28c
f0117538:	68 ee 00 00 00       	push   $0xee
f011753d:	68 71 b2 13 f0       	push   $0xf013b271
f0117542:	e8 be 8c fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 20; i++)
f0117547:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f011754e:	eb 44                	jmp    f0117594 <test_priority_normal_and_lower+0x1c7>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0117550:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117553:	8b 48 78             	mov    0x78(%eax),%ecx
f0117556:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0117559:	89 d0                	mov    %edx,%eax
f011755b:	01 c0                	add    %eax,%eax
f011755d:	01 d0                	add    %edx,%eax
f011755f:	c1 e0 03             	shl    $0x3,%eax
f0117562:	01 c8                	add    %ecx,%eax
f0117564:	8b 10                	mov    (%eax),%edx
f0117566:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117569:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0117570:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117573:	8b 48 78             	mov    0x78(%eax),%ecx
f0117576:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0117579:	89 d0                	mov    %edx,%eax
f011757b:	01 c0                	add    %eax,%eax
f011757d:	01 d0                	add    %edx,%eax
f011757f:	c1 e0 03             	shl    $0x3,%eax
f0117582:	01 c8                	add    %ecx,%eax
f0117584:	8b 50 08             	mov    0x8(%eax),%edx
f0117587:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011758a:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0117591:	ff 45 e4             	incl   -0x1c(%ebp)
f0117594:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0117598:	7e b6                	jle    f0117550 <test_priority_normal_and_lower+0x183>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f011759a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f01175a1:	eb 44                	jmp    f01175e7 <test_priority_normal_and_lower+0x21a>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f01175a3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01175a6:	8b 48 78             	mov    0x78(%eax),%ecx
f01175a9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01175ac:	89 d0                	mov    %edx,%eax
f01175ae:	01 c0                	add    %eax,%eax
f01175b0:	01 d0                	add    %edx,%eax
f01175b2:	c1 e0 03             	shl    $0x3,%eax
f01175b5:	01 c8                	add    %ecx,%eax
f01175b7:	8b 10                	mov    (%eax),%edx
f01175b9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01175bc:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f01175c3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01175c6:	8b 48 78             	mov    0x78(%eax),%ecx
f01175c9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01175cc:	89 d0                	mov    %edx,%eax
f01175ce:	01 c0                	add    %eax,%eax
f01175d0:	01 d0                	add    %edx,%eax
f01175d2:	c1 e0 03             	shl    $0x3,%eax
f01175d5:	01 c8                	add    %ecx,%eax
f01175d7:	8b 50 08             	mov    0x8(%eax),%edx
f01175da:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01175dd:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f01175e4:	ff 45 e0             	incl   -0x20(%ebp)
f01175e7:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f01175eb:	7e b6                	jle    f01175a3 <test_priority_normal_and_lower+0x1d6>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f01175ed:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f01175f4:	eb 44                	jmp    f011763a <test_priority_normal_and_lower+0x26d>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f01175f6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01175f9:	8b 48 78             	mov    0x78(%eax),%ecx
f01175fc:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01175ff:	89 d0                	mov    %edx,%eax
f0117601:	01 c0                	add    %eax,%eax
f0117603:	01 d0                	add    %edx,%eax
f0117605:	c1 e0 03             	shl    $0x3,%eax
f0117608:	01 c8                	add    %ecx,%eax
f011760a:	8b 10                	mov    (%eax),%edx
f011760c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011760f:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0117616:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117619:	8b 48 78             	mov    0x78(%eax),%ecx
f011761c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011761f:	89 d0                	mov    %edx,%eax
f0117621:	01 c0                	add    %eax,%eax
f0117623:	01 d0                	add    %edx,%eax
f0117625:	c1 e0 03             	shl    $0x3,%eax
f0117628:	01 c8                	add    %ecx,%eax
f011762a:	8b 50 08             	mov    0x8(%eax),%edx
f011762d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117630:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0117637:	ff 45 dc             	incl   -0x24(%ebp)
f011763a:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f011763e:	7e b6                	jle    f01175f6 <test_priority_normal_and_lower+0x229>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0117640:	e8 52 5b ff ff       	call   f010d197 <sys_calculate_free_frames>
f0117645:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0117648:	e8 7b c7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011764d:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0117650:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117653:	83 ec 08             	sub    $0x8,%esp
f0117656:	6a 03                	push   $0x3
f0117658:	50                   	push   %eax
f0117659:	e8 84 3f ff ff       	call   f010b5e2 <set_program_priority>
f011765e:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0117661:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117664:	83 ec 08             	sub    $0x8,%esp
f0117667:	6a 03                	push   $0x3
f0117669:	50                   	push   %eax
f011766a:	e8 73 3f ff ff       	call   f010b5e2 <set_program_priority>
f011766f:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0117672:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117675:	83 ec 08             	sub    $0x8,%esp
f0117678:	6a 03                	push   $0x3
f011767a:	50                   	push   %eax
f011767b:	e8 62 3f ff ff       	call   f010b5e2 <set_program_priority>
f0117680:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117683:	e8 40 c7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117688:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011768b:	74 17                	je     f01176a4 <test_priority_normal_and_lower+0x2d7>
f011768d:	83 ec 04             	sub    $0x4,%esp
f0117690:	68 d8 b2 13 f0       	push   $0xf013b2d8
f0117695:	68 0a 01 00 00       	push   $0x10a
f011769a:	68 71 b2 13 f0       	push   $0xf013b271
f011769f:	e8 61 8b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01176a4:	e8 ee 5a ff ff       	call   f010d197 <sys_calculate_free_frames>
f01176a9:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01176ac:	74 17                	je     f01176c5 <test_priority_normal_and_lower+0x2f8>
f01176ae:	83 ec 04             	sub    $0x4,%esp
f01176b1:	68 d8 b2 13 f0       	push   $0xf013b2d8
f01176b6:	68 0b 01 00 00       	push   $0x10b
f01176bb:	68 71 b2 13 f0       	push   $0xf013b271
f01176c0:	e8 40 8b fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f01176c5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01176c8:	8b 40 74             	mov    0x74(%eax),%eax
f01176cb:	83 f8 14             	cmp    $0x14,%eax
f01176ce:	75 16                	jne    f01176e6 <test_priority_normal_and_lower+0x319>
f01176d0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01176d3:	8b 40 74             	mov    0x74(%eax),%eax
f01176d6:	83 f8 1e             	cmp    $0x1e,%eax
f01176d9:	75 0b                	jne    f01176e6 <test_priority_normal_and_lower+0x319>
f01176db:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01176de:	8b 40 74             	mov    0x74(%eax),%eax
f01176e1:	83 f8 28             	cmp    $0x28,%eax
f01176e4:	74 17                	je     f01176fd <test_priority_normal_and_lower+0x330>
			panic("The programs' working set size should not change after setting priority to normal\n");
f01176e6:	83 ec 04             	sub    $0x4,%esp
f01176e9:	68 04 b3 13 f0       	push   $0xf013b304
f01176ee:	68 0e 01 00 00       	push   $0x10e
f01176f3:	68 71 b2 13 f0       	push   $0xf013b271
f01176f8:	e8 08 8b fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f01176fd:	e8 95 5a ff ff       	call   f010d197 <sys_calculate_free_frames>
f0117702:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117705:	e8 be c6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011770a:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f011770d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117710:	83 ec 08             	sub    $0x8,%esp
f0117713:	6a 02                	push   $0x2
f0117715:	50                   	push   %eax
f0117716:	e8 c7 3e ff ff       	call   f010b5e2 <set_program_priority>
f011771b:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f011771e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117721:	83 ec 08             	sub    $0x8,%esp
f0117724:	6a 02                	push   $0x2
f0117726:	50                   	push   %eax
f0117727:	e8 b6 3e ff ff       	call   f010b5e2 <set_program_priority>
f011772c:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f011772f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117732:	83 ec 08             	sub    $0x8,%esp
f0117735:	6a 02                	push   $0x2
f0117737:	50                   	push   %eax
f0117738:	e8 a5 3e ff ff       	call   f010b5e2 <set_program_priority>
f011773d:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117740:	e8 83 c6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117745:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117748:	74 17                	je     f0117761 <test_priority_normal_and_lower+0x394>
f011774a:	83 ec 04             	sub    $0x4,%esp
f011774d:	68 d8 b2 13 f0       	push   $0xf013b2d8
f0117752:	68 18 01 00 00       	push   $0x118
f0117757:	68 71 b2 13 f0       	push   $0xf013b271
f011775c:	e8 a4 8a fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0117761:	e8 31 5a ff ff       	call   f010d197 <sys_calculate_free_frames>
f0117766:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117769:	74 21                	je     f011778c <test_priority_normal_and_lower+0x3bf>
f011776b:	e8 27 5a ff ff       	call   f010d197 <sys_calculate_free_frames>
f0117770:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117773:	29 c2                	sub    %eax,%edx
f0117775:	89 d0                	mov    %edx,%eax
f0117777:	50                   	push   %eax
f0117778:	68 58 b3 13 f0       	push   $0xf013b358
f011777d:	68 19 01 00 00       	push   $0x119
f0117782:	68 71 b2 13 f0       	push   $0xf013b271
f0117787:	e8 79 8a fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f011778c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011778f:	8b 40 74             	mov    0x74(%eax),%eax
f0117792:	83 f8 0a             	cmp    $0xa,%eax
f0117795:	75 16                	jne    f01177ad <test_priority_normal_and_lower+0x3e0>
f0117797:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011779a:	8b 40 74             	mov    0x74(%eax),%eax
f011779d:	83 f8 0f             	cmp    $0xf,%eax
f01177a0:	75 0b                	jne    f01177ad <test_priority_normal_and_lower+0x3e0>
f01177a2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01177a5:	8b 40 74             	mov    0x74(%eax),%eax
f01177a8:	83 f8 14             	cmp    $0x14,%eax
f01177ab:	74 17                	je     f01177c4 <test_priority_normal_and_lower+0x3f7>
			panic("The programs' working set size should be doubled only if it is full\n");
f01177ad:	83 ec 04             	sub    $0x4,%esp
f01177b0:	68 88 b3 13 f0       	push   $0xf013b388
f01177b5:	68 1c 01 00 00       	push   $0x11c
f01177ba:	68 71 b2 13 f0       	push   $0xf013b271
f01177bf:	e8 41 8a fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f01177c4:	e8 ce 59 ff ff       	call   f010d197 <sys_calculate_free_frames>
f01177c9:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01177cc:	e8 f7 c5 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01177d1:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f01177d4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01177d7:	83 ec 08             	sub    $0x8,%esp
f01177da:	6a 02                	push   $0x2
f01177dc:	50                   	push   %eax
f01177dd:	e8 00 3e ff ff       	call   f010b5e2 <set_program_priority>
f01177e2:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f01177e5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01177e8:	83 ec 08             	sub    $0x8,%esp
f01177eb:	6a 02                	push   $0x2
f01177ed:	50                   	push   %eax
f01177ee:	e8 ef 3d ff ff       	call   f010b5e2 <set_program_priority>
f01177f3:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f01177f6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01177f9:	83 ec 08             	sub    $0x8,%esp
f01177fc:	6a 02                	push   $0x2
f01177fe:	50                   	push   %eax
f01177ff:	e8 de 3d ff ff       	call   f010b5e2 <set_program_priority>
f0117804:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117807:	e8 bc c5 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011780c:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011780f:	74 17                	je     f0117828 <test_priority_normal_and_lower+0x45b>
f0117811:	83 ec 04             	sub    $0x4,%esp
f0117814:	68 d8 b2 13 f0       	push   $0xf013b2d8
f0117819:	68 26 01 00 00       	push   $0x126
f011781e:	68 71 b2 13 f0       	push   $0xf013b271
f0117823:	e8 dd 89 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0117828:	e8 6a 59 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011782d:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117830:	74 21                	je     f0117853 <test_priority_normal_and_lower+0x486>
f0117832:	e8 60 59 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0117837:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011783a:	29 c2                	sub    %eax,%edx
f011783c:	89 d0                	mov    %edx,%eax
f011783e:	50                   	push   %eax
f011783f:	68 58 b3 13 f0       	push   $0xf013b358
f0117844:	68 27 01 00 00       	push   $0x127
f0117849:	68 71 b2 13 f0       	push   $0xf013b271
f011784e:	e8 b2 89 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0117853:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117856:	8b 40 74             	mov    0x74(%eax),%eax
f0117859:	83 f8 0a             	cmp    $0xa,%eax
f011785c:	75 16                	jne    f0117874 <test_priority_normal_and_lower+0x4a7>
f011785e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117861:	8b 40 74             	mov    0x74(%eax),%eax
f0117864:	83 f8 0f             	cmp    $0xf,%eax
f0117867:	75 0b                	jne    f0117874 <test_priority_normal_and_lower+0x4a7>
f0117869:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011786c:	8b 40 74             	mov    0x74(%eax),%eax
f011786f:	83 f8 0a             	cmp    $0xa,%eax
f0117872:	74 17                	je     f011788b <test_priority_normal_and_lower+0x4be>
			panic("The programs' working set size should be doubled only if it is full\n");
f0117874:	83 ec 04             	sub    $0x4,%esp
f0117877:	68 88 b3 13 f0       	push   $0xf013b388
f011787c:	68 2a 01 00 00       	push   $0x12a
f0117881:	68 71 b2 13 f0       	push   $0xf013b271
f0117886:	e8 7a 89 fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 10; i++)
f011788b:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0117892:	eb 7a                	jmp    f011790e <test_priority_normal_and_lower+0x541>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0117894:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0117897:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f011789e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01178a1:	8b 58 78             	mov    0x78(%eax),%ebx
f01178a4:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01178a7:	89 d0                	mov    %edx,%eax
f01178a9:	01 c0                	add    %eax,%eax
f01178ab:	01 d0                	add    %edx,%eax
f01178ad:	c1 e0 03             	shl    $0x3,%eax
f01178b0:	01 d8                	add    %ebx,%eax
f01178b2:	8b 00                	mov    (%eax),%eax
f01178b4:	39 c1                	cmp    %eax,%ecx
f01178b6:	74 17                	je     f01178cf <test_priority_normal_and_lower+0x502>
				panic("Working set should be moved properly to the new one");
f01178b8:	83 ec 04             	sub    $0x4,%esp
f01178bb:	68 48 b4 13 f0       	push   $0xf013b448
f01178c0:	68 2f 01 00 00       	push   $0x12f
f01178c5:	68 71 b2 13 f0       	push   $0xf013b271
f01178ca:	e8 36 89 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f01178cf:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01178d2:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f01178d9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01178dc:	8b 58 78             	mov    0x78(%eax),%ebx
f01178df:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01178e2:	89 d0                	mov    %edx,%eax
f01178e4:	01 c0                	add    %eax,%eax
f01178e6:	01 d0                	add    %edx,%eax
f01178e8:	c1 e0 03             	shl    $0x3,%eax
f01178eb:	01 d8                	add    %ebx,%eax
f01178ed:	8b 40 08             	mov    0x8(%eax),%eax
f01178f0:	39 c1                	cmp    %eax,%ecx
f01178f2:	74 17                	je     f011790b <test_priority_normal_and_lower+0x53e>
				panic("Working set should be moved properly to the new one");
f01178f4:	83 ec 04             	sub    $0x4,%esp
f01178f7:	68 48 b4 13 f0       	push   $0xf013b448
f01178fc:	68 32 01 00 00       	push   $0x132
f0117901:	68 71 b2 13 f0       	push   $0xf013b271
f0117906:	e8 fa 88 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f011790b:	ff 45 d8             	incl   -0x28(%ebp)
f011790e:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f0117912:	7e 80                	jle    f0117894 <test_priority_normal_and_lower+0x4c7>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117914:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f011791b:	eb 7a                	jmp    f0117997 <test_priority_normal_and_lower+0x5ca>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f011791d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117920:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0117927:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011792a:	8b 58 78             	mov    0x78(%eax),%ebx
f011792d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0117930:	89 d0                	mov    %edx,%eax
f0117932:	01 c0                	add    %eax,%eax
f0117934:	01 d0                	add    %edx,%eax
f0117936:	c1 e0 03             	shl    $0x3,%eax
f0117939:	01 d8                	add    %ebx,%eax
f011793b:	8b 00                	mov    (%eax),%eax
f011793d:	39 c1                	cmp    %eax,%ecx
f011793f:	74 17                	je     f0117958 <test_priority_normal_and_lower+0x58b>
				panic("Working set should be moved properly to the new one");
f0117941:	83 ec 04             	sub    $0x4,%esp
f0117944:	68 48 b4 13 f0       	push   $0xf013b448
f0117949:	68 38 01 00 00       	push   $0x138
f011794e:	68 71 b2 13 f0       	push   $0xf013b271
f0117953:	e8 ad 88 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0117958:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011795b:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0117962:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117965:	8b 58 78             	mov    0x78(%eax),%ebx
f0117968:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011796b:	89 d0                	mov    %edx,%eax
f011796d:	01 c0                	add    %eax,%eax
f011796f:	01 d0                	add    %edx,%eax
f0117971:	c1 e0 03             	shl    $0x3,%eax
f0117974:	01 d8                	add    %ebx,%eax
f0117976:	8b 40 08             	mov    0x8(%eax),%eax
f0117979:	39 c1                	cmp    %eax,%ecx
f011797b:	74 17                	je     f0117994 <test_priority_normal_and_lower+0x5c7>
				panic("Working set should be moved properly to the new one");
f011797d:	83 ec 04             	sub    $0x4,%esp
f0117980:	68 48 b4 13 f0       	push   $0xf013b448
f0117985:	68 3b 01 00 00       	push   $0x13b
f011798a:	68 71 b2 13 f0       	push   $0xf013b271
f011798f:	e8 71 88 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117994:	ff 45 d4             	incl   -0x2c(%ebp)
f0117997:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f011799b:	7e 80                	jle    f011791d <test_priority_normal_and_lower+0x550>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f011799d:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f01179a4:	eb 7a                	jmp    f0117a20 <test_priority_normal_and_lower+0x653>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f01179a6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01179a9:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f01179b0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01179b3:	8b 58 78             	mov    0x78(%eax),%ebx
f01179b6:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01179b9:	89 d0                	mov    %edx,%eax
f01179bb:	01 c0                	add    %eax,%eax
f01179bd:	01 d0                	add    %edx,%eax
f01179bf:	c1 e0 03             	shl    $0x3,%eax
f01179c2:	01 d8                	add    %ebx,%eax
f01179c4:	8b 00                	mov    (%eax),%eax
f01179c6:	39 c1                	cmp    %eax,%ecx
f01179c8:	74 17                	je     f01179e1 <test_priority_normal_and_lower+0x614>
				panic("Working set should be moved properly to the new one");
f01179ca:	83 ec 04             	sub    $0x4,%esp
f01179cd:	68 48 b4 13 f0       	push   $0xf013b448
f01179d2:	68 41 01 00 00       	push   $0x141
f01179d7:	68 71 b2 13 f0       	push   $0xf013b271
f01179dc:	e8 24 88 fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f01179e1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01179e4:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f01179eb:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01179ee:	8b 58 78             	mov    0x78(%eax),%ebx
f01179f1:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01179f4:	89 d0                	mov    %edx,%eax
f01179f6:	01 c0                	add    %eax,%eax
f01179f8:	01 d0                	add    %edx,%eax
f01179fa:	c1 e0 03             	shl    $0x3,%eax
f01179fd:	01 d8                	add    %ebx,%eax
f01179ff:	8b 40 08             	mov    0x8(%eax),%eax
f0117a02:	39 c1                	cmp    %eax,%ecx
f0117a04:	74 17                	je     f0117a1d <test_priority_normal_and_lower+0x650>
				panic("Working set should be moved properly to the new one");
f0117a06:	83 ec 04             	sub    $0x4,%esp
f0117a09:	68 48 b4 13 f0       	push   $0xf013b448
f0117a0e:	68 44 01 00 00       	push   $0x144
f0117a13:	68 71 b2 13 f0       	push   $0xf013b271
f0117a18:	e8 e8 87 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117a1d:	ff 45 d0             	incl   -0x30(%ebp)
f0117a20:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f0117a24:	7e 80                	jle    f01179a6 <test_priority_normal_and_lower+0x5d9>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f0117a26:	e8 6c 57 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0117a2b:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117a2e:	e8 95 c3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117a33:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0117a36:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117a39:	83 ec 08             	sub    $0x8,%esp
f0117a3c:	6a 01                	push   $0x1
f0117a3e:	50                   	push   %eax
f0117a3f:	e8 9e 3b ff ff       	call   f010b5e2 <set_program_priority>
f0117a44:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f0117a47:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117a4a:	83 ec 08             	sub    $0x8,%esp
f0117a4d:	6a 01                	push   $0x1
f0117a4f:	50                   	push   %eax
f0117a50:	e8 8d 3b ff ff       	call   f010b5e2 <set_program_priority>
f0117a55:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f0117a58:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117a5b:	83 ec 08             	sub    $0x8,%esp
f0117a5e:	6a 01                	push   $0x1
f0117a60:	50                   	push   %eax
f0117a61:	e8 7c 3b ff ff       	call   f010b5e2 <set_program_priority>
f0117a66:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117a69:	e8 5a c3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117a6e:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117a71:	74 17                	je     f0117a8a <test_priority_normal_and_lower+0x6bd>
f0117a73:	83 ec 04             	sub    $0x4,%esp
f0117a76:	68 d8 b2 13 f0       	push   $0xf013b2d8
f0117a7b:	68 4d 01 00 00       	push   $0x14d
f0117a80:	68 71 b2 13 f0       	push   $0xf013b271
f0117a85:	e8 7b 87 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f0117a8a:	e8 08 57 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0117a8f:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0117a92:	83 f8 0d             	cmp    $0xd,%eax
f0117a95:	74 17                	je     f0117aae <test_priority_normal_and_lower+0x6e1>
f0117a97:	83 ec 04             	sub    $0x4,%esp
f0117a9a:	68 e4 b5 13 f0       	push   $0xf013b5e4
f0117a9f:	68 4e 01 00 00       	push   $0x14e
f0117aa4:	68 71 b2 13 f0       	push   $0xf013b271
f0117aa9:	e8 57 87 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0117aae:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117ab1:	8b 40 74             	mov    0x74(%eax),%eax
f0117ab4:	83 f8 05             	cmp    $0x5,%eax
f0117ab7:	75 16                	jne    f0117acf <test_priority_normal_and_lower+0x702>
f0117ab9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117abc:	8b 40 74             	mov    0x74(%eax),%eax
f0117abf:	83 f8 07             	cmp    $0x7,%eax
f0117ac2:	75 0b                	jne    f0117acf <test_priority_normal_and_lower+0x702>
f0117ac4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117ac7:	8b 40 74             	mov    0x74(%eax),%eax
f0117aca:	83 f8 05             	cmp    $0x5,%eax
f0117acd:	74 17                	je     f0117ae6 <test_priority_normal_and_lower+0x719>
			panic("The programs' working set size should be half\n");
f0117acf:	83 ec 04             	sub    $0x4,%esp
f0117ad2:	68 2c b6 13 f0       	push   $0xf013b62c
f0117ad7:	68 51 01 00 00       	push   $0x151
f0117adc:	68 71 b2 13 f0       	push   $0xf013b271
f0117ae1:	e8 1f 87 fe ff       	call   f0100205 <_panic>


		freeFrames = sys_calculate_free_frames();
f0117ae6:	e8 ac 56 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0117aeb:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117aee:	e8 d5 c2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117af3:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0117af6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117af9:	83 ec 08             	sub    $0x8,%esp
f0117afc:	6a 01                	push   $0x1
f0117afe:	50                   	push   %eax
f0117aff:	e8 de 3a ff ff       	call   f010b5e2 <set_program_priority>
f0117b04:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117b07:	e8 bc c2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117b0c:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117b0f:	74 17                	je     f0117b28 <test_priority_normal_and_lower+0x75b>
f0117b11:	83 ec 04             	sub    $0x4,%esp
f0117b14:	68 d8 b2 13 f0       	push   $0xf013b2d8
f0117b19:	68 57 01 00 00       	push   $0x157
f0117b1e:	68 71 b2 13 f0       	push   $0xf013b271
f0117b23:	e8 dd 86 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f0117b28:	e8 6a 56 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0117b2d:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0117b30:	83 f8 03             	cmp    $0x3,%eax
f0117b33:	74 17                	je     f0117b4c <test_priority_normal_and_lower+0x77f>
f0117b35:	83 ec 04             	sub    $0x4,%esp
f0117b38:	68 d8 b2 13 f0       	push   $0xf013b2d8
f0117b3d:	68 58 01 00 00       	push   $0x158
f0117b42:	68 71 b2 13 f0       	push   $0xf013b271
f0117b47:	e8 b9 86 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0117b4c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117b4f:	8b 40 74             	mov    0x74(%eax),%eax
f0117b52:	83 f8 02             	cmp    $0x2,%eax
f0117b55:	75 16                	jne    f0117b6d <test_priority_normal_and_lower+0x7a0>
f0117b57:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117b5a:	8b 40 74             	mov    0x74(%eax),%eax
f0117b5d:	83 f8 07             	cmp    $0x7,%eax
f0117b60:	75 0b                	jne    f0117b6d <test_priority_normal_and_lower+0x7a0>
f0117b62:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117b65:	8b 40 74             	mov    0x74(%eax),%eax
f0117b68:	83 f8 05             	cmp    $0x5,%eax
f0117b6b:	74 17                	je     f0117b84 <test_priority_normal_and_lower+0x7b7>
			panic("The programs' working set size should be doubled if full\n");
f0117b6d:	83 ec 04             	sub    $0x4,%esp
f0117b70:	68 0c b4 13 f0       	push   $0xf013b40c
f0117b75:	68 5b 01 00 00       	push   $0x15b
f0117b7a:	68 71 b2 13 f0       	push   $0xf013b271
f0117b7f:	e8 81 86 fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 2; i++)
f0117b84:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0117b8b:	e9 80 00 00 00       	jmp    f0117c10 <test_priority_normal_and_lower+0x843>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0117b90:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117b93:	83 c0 08             	add    $0x8,%eax
f0117b96:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0117b9d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117ba0:	8b 58 78             	mov    0x78(%eax),%ebx
f0117ba3:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0117ba6:	89 d0                	mov    %edx,%eax
f0117ba8:	01 c0                	add    %eax,%eax
f0117baa:	01 d0                	add    %edx,%eax
f0117bac:	c1 e0 03             	shl    $0x3,%eax
f0117baf:	01 d8                	add    %ebx,%eax
f0117bb1:	8b 00                	mov    (%eax),%eax
f0117bb3:	39 c1                	cmp    %eax,%ecx
f0117bb5:	74 17                	je     f0117bce <test_priority_normal_and_lower+0x801>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117bb7:	83 ec 04             	sub    $0x4,%esp
f0117bba:	68 5c b6 13 f0       	push   $0xf013b65c
f0117bbf:	68 60 01 00 00       	push   $0x160
f0117bc4:	68 71 b2 13 f0       	push   $0xf013b271
f0117bc9:	e8 37 86 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0117bce:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117bd1:	83 c0 08             	add    $0x8,%eax
f0117bd4:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0117bdb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117bde:	8b 58 78             	mov    0x78(%eax),%ebx
f0117be1:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0117be4:	89 d0                	mov    %edx,%eax
f0117be6:	01 c0                	add    %eax,%eax
f0117be8:	01 d0                	add    %edx,%eax
f0117bea:	c1 e0 03             	shl    $0x3,%eax
f0117bed:	01 d8                	add    %ebx,%eax
f0117bef:	8b 40 08             	mov    0x8(%eax),%eax
f0117bf2:	39 c1                	cmp    %eax,%ecx
f0117bf4:	74 17                	je     f0117c0d <test_priority_normal_and_lower+0x840>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117bf6:	83 ec 04             	sub    $0x4,%esp
f0117bf9:	68 5c b6 13 f0       	push   $0xf013b65c
f0117bfe:	68 63 01 00 00       	push   $0x163
f0117c03:	68 71 b2 13 f0       	push   $0xf013b271
f0117c08:	e8 f8 85 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f0117c0d:	ff 45 cc             	incl   -0x34(%ebp)
f0117c10:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f0117c14:	0f 8e 76 ff ff ff    	jle    f0117b90 <test_priority_normal_and_lower+0x7c3>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0117c1a:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f0117c21:	e9 80 00 00 00       	jmp    f0117ca6 <test_priority_normal_and_lower+0x8d9>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0117c26:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117c29:	83 c0 03             	add    $0x3,%eax
f0117c2c:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0117c33:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117c36:	8b 58 78             	mov    0x78(%eax),%ebx
f0117c39:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0117c3c:	89 d0                	mov    %edx,%eax
f0117c3e:	01 c0                	add    %eax,%eax
f0117c40:	01 d0                	add    %edx,%eax
f0117c42:	c1 e0 03             	shl    $0x3,%eax
f0117c45:	01 d8                	add    %ebx,%eax
f0117c47:	8b 00                	mov    (%eax),%eax
f0117c49:	39 c1                	cmp    %eax,%ecx
f0117c4b:	74 17                	je     f0117c64 <test_priority_normal_and_lower+0x897>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f0117c4d:	ff 75 c8             	pushl  -0x38(%ebp)
f0117c50:	68 c8 b6 13 f0       	push   $0xf013b6c8
f0117c55:	68 69 01 00 00       	push   $0x169
f0117c5a:	68 71 b2 13 f0       	push   $0xf013b271
f0117c5f:	e8 a1 85 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0117c64:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117c67:	83 c0 03             	add    $0x3,%eax
f0117c6a:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0117c71:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117c74:	8b 58 78             	mov    0x78(%eax),%ebx
f0117c77:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0117c7a:	89 d0                	mov    %edx,%eax
f0117c7c:	01 c0                	add    %eax,%eax
f0117c7e:	01 d0                	add    %edx,%eax
f0117c80:	c1 e0 03             	shl    $0x3,%eax
f0117c83:	01 d8                	add    %ebx,%eax
f0117c85:	8b 40 08             	mov    0x8(%eax),%eax
f0117c88:	39 c1                	cmp    %eax,%ecx
f0117c8a:	74 17                	je     f0117ca3 <test_priority_normal_and_lower+0x8d6>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117c8c:	83 ec 04             	sub    $0x4,%esp
f0117c8f:	68 5c b6 13 f0       	push   $0xf013b65c
f0117c94:	68 6c 01 00 00       	push   $0x16c
f0117c99:	68 71 b2 13 f0       	push   $0xf013b271
f0117c9e:	e8 62 85 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0117ca3:	ff 45 c8             	incl   -0x38(%ebp)
f0117ca6:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f0117caa:	0f 8e 76 ff ff ff    	jle    f0117c26 <test_priority_normal_and_lower+0x859>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0117cb0:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0117cb7:	e9 80 00 00 00       	jmp    f0117d3c <test_priority_normal_and_lower+0x96f>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0117cbc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117cbf:	83 c0 05             	add    $0x5,%eax
f0117cc2:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0117cc9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117ccc:	8b 58 78             	mov    0x78(%eax),%ebx
f0117ccf:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0117cd2:	89 d0                	mov    %edx,%eax
f0117cd4:	01 c0                	add    %eax,%eax
f0117cd6:	01 d0                	add    %edx,%eax
f0117cd8:	c1 e0 03             	shl    $0x3,%eax
f0117cdb:	01 d8                	add    %ebx,%eax
f0117cdd:	8b 00                	mov    (%eax),%eax
f0117cdf:	39 c1                	cmp    %eax,%ecx
f0117ce1:	74 17                	je     f0117cfa <test_priority_normal_and_lower+0x92d>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117ce3:	83 ec 04             	sub    $0x4,%esp
f0117ce6:	68 5c b6 13 f0       	push   $0xf013b65c
f0117ceb:	68 72 01 00 00       	push   $0x172
f0117cf0:	68 71 b2 13 f0       	push   $0xf013b271
f0117cf5:	e8 0b 85 fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0117cfa:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117cfd:	83 c0 05             	add    $0x5,%eax
f0117d00:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0117d07:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117d0a:	8b 58 78             	mov    0x78(%eax),%ebx
f0117d0d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0117d10:	89 d0                	mov    %edx,%eax
f0117d12:	01 c0                	add    %eax,%eax
f0117d14:	01 d0                	add    %edx,%eax
f0117d16:	c1 e0 03             	shl    $0x3,%eax
f0117d19:	01 d8                	add    %ebx,%eax
f0117d1b:	8b 40 08             	mov    0x8(%eax),%eax
f0117d1e:	39 c1                	cmp    %eax,%ecx
f0117d20:	74 17                	je     f0117d39 <test_priority_normal_and_lower+0x96c>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117d22:	83 ec 04             	sub    $0x4,%esp
f0117d25:	68 5c b6 13 f0       	push   $0xf013b65c
f0117d2a:	68 75 01 00 00       	push   $0x175
f0117d2f:	68 71 b2 13 f0       	push   $0xf013b271
f0117d34:	e8 cc 84 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0117d39:	ff 45 c4             	incl   -0x3c(%ebp)
f0117d3c:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f0117d40:	0f 8e 76 ff ff ff    	jle    f0117cbc <test_priority_normal_and_lower+0x8ef>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f0117d46:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117d49:	83 ec 08             	sub    $0x8,%esp
f0117d4c:	6a 05                	push   $0x5
f0117d4e:	50                   	push   %eax
f0117d4f:	e8 8e 38 ff ff       	call   f010b5e2 <set_program_priority>
f0117d54:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f0117d57:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117d5a:	83 ec 08             	sub    $0x8,%esp
f0117d5d:	6a 05                	push   $0x5
f0117d5f:	50                   	push   %eax
f0117d60:	e8 7d 38 ff ff       	call   f010b5e2 <set_program_priority>
f0117d65:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f0117d68:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f0117d6f:	75 6e 61 
f0117d72:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f0117d79:	6c 00 00 
f0117d7c:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0117d82:	b9 17 00 00 00       	mov    $0x17,%ecx
f0117d87:	b8 00 00 00 00       	mov    $0x0,%eax
f0117d8c:	89 d7                	mov    %edx,%edi
f0117d8e:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0117d90:	83 ec 0c             	sub    $0xc,%esp
f0117d93:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f0117d99:	50                   	push   %eax
f0117d9a:	e8 d1 8f fe ff       	call   f0100d70 <execute_command>
f0117d9f:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
}
f0117da2:	eb 10                	jmp    f0117db4 <test_priority_normal_and_lower+0x9e7>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f0117da4:	83 ec 0c             	sub    $0xc,%esp
f0117da7:	68 38 b7 13 f0       	push   $0xf013b738
f0117dac:	e8 5d 8f fe ff       	call   f0100d0e <cprintf>
f0117db1:	83 c4 10             	add    $0x10,%esp
	}
}
f0117db4:	90                   	nop
f0117db5:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0117db8:	5b                   	pop    %ebx
f0117db9:	5e                   	pop    %esi
f0117dba:	5f                   	pop    %edi
f0117dbb:	5d                   	pop    %ebp
f0117dbc:	c3                   	ret    

f0117dbd <isKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0117dbd:	55                   	push   %ebp
f0117dbe:	89 e5                	mov    %esp,%ebp
f0117dc0:	a1 5c ad 89 f0       	mov    0xf089ad5c,%eax
f0117dc5:	83 f8 03             	cmp    $0x3,%eax
f0117dc8:	75 04                	jne    f0117dce <isKHeapPlacementStrategyNEXTFIT+0x11>
f0117dca:	b0 01                	mov    $0x1,%al
f0117dcc:	eb 02                	jmp    f0117dd0 <isKHeapPlacementStrategyNEXTFIT+0x13>
f0117dce:	b0 00                	mov    $0x0,%al
f0117dd0:	5d                   	pop    %ebp
f0117dd1:	c3                   	ret    

f0117dd2 <test_kmalloc>:
	int c;
};


int test_kmalloc()
{
f0117dd2:	55                   	push   %ebp
f0117dd3:	89 e5                	mov    %esp,%ebp
f0117dd5:	57                   	push   %edi
f0117dd6:	53                   	push   %ebx
f0117dd7:	81 ec c0 01 00 00    	sub    $0x1c0,%esp
	cprintf("==============================================\n");
f0117ddd:	83 ec 0c             	sub    $0xc,%esp
f0117de0:	68 3c b8 13 f0       	push   $0xf013b83c
f0117de5:	e8 24 8f fe ff       	call   f0100d0e <cprintf>
f0117dea:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0117ded:	83 ec 0c             	sub    $0xc,%esp
f0117df0:	68 6c b8 13 f0       	push   $0xf013b86c
f0117df5:	e8 14 8f fe ff       	call   f0100d0e <cprintf>
f0117dfa:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0117dfd:	83 ec 0c             	sub    $0xc,%esp
f0117e00:	68 3c b8 13 f0       	push   $0xf013b83c
f0117e05:	e8 04 8f fe ff       	call   f0100d0e <cprintf>
f0117e0a:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0117e0d:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0117e11:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0117e15:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0117e1b:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0117e21:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0117e28:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0117e2f:	e8 63 53 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0117e34:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f0117e37:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f0117e3d:	b9 14 00 00 00       	mov    $0x14,%ecx
f0117e42:	b8 00 00 00 00       	mov    $0x0,%eax
f0117e47:	89 d7                	mov    %edx,%edi
f0117e49:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f0117e4b:	e8 47 53 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0117e50:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0117e53:	e8 70 bf fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117e58:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f0117e5b:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0117e62:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117e65:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117e6a:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0117e6d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117e70:	ba 00 00 00 00       	mov    $0x0,%edx
f0117e75:	f7 75 d4             	divl   -0x2c(%ebp)
f0117e78:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117e7b:	29 d0                	sub    %edx,%eax
f0117e7d:	89 c1                	mov    %eax,%ecx
f0117e7f:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0117e86:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0117e8b:	0f b6 d0             	movzbl %al,%edx
f0117e8e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117e91:	01 d0                	add    %edx,%eax
f0117e93:	48                   	dec    %eax
f0117e94:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0117e97:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117e9a:	ba 00 00 00 00       	mov    $0x0,%edx
f0117e9f:	f7 75 cc             	divl   -0x34(%ebp)
f0117ea2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117ea5:	29 d0                	sub    %edx,%eax
f0117ea7:	01 c1                	add    %eax,%ecx
f0117ea9:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0117eb0:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0117eb5:	0f b6 c0             	movzbl %al,%eax
f0117eb8:	c1 e0 04             	shl    $0x4,%eax
f0117ebb:	89 c2                	mov    %eax,%edx
f0117ebd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117ec0:	01 d0                	add    %edx,%eax
f0117ec2:	48                   	dec    %eax
f0117ec3:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0117ec6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117ec9:	ba 00 00 00 00       	mov    $0x0,%edx
f0117ece:	f7 75 c4             	divl   -0x3c(%ebp)
f0117ed1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117ed4:	29 d0                	sub    %edx,%eax
f0117ed6:	01 c8                	add    %ecx,%eax
f0117ed8:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f0117edd:	29 c2                	sub    %eax,%edx
f0117edf:	89 d0                	mov    %edx,%eax
f0117ee1:	89 45 bc             	mov    %eax,-0x44(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f0117ee4:	83 ec 0c             	sub    $0xc,%esp
f0117ee7:	ff 75 bc             	pushl  -0x44(%ebp)
f0117eea:	e8 9c fe fe ff       	call   f0107d8b <kmalloc>
f0117eef:	83 c4 10             	add    $0x10,%esp
f0117ef2:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f0117ef8:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0117efe:	85 c0                	test   %eax,%eax
f0117f00:	74 14                	je     f0117f16 <test_kmalloc+0x144>
f0117f02:	83 ec 04             	sub    $0x4,%esp
f0117f05:	68 c8 b8 13 f0       	push   $0xf013b8c8
f0117f0a:	6a 40                	push   $0x40
f0117f0c:	68 fa b8 13 f0       	push   $0xf013b8fa
f0117f11:	e8 ef 82 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117f16:	e8 ad be fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117f1b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117f1e:	74 14                	je     f0117f34 <test_kmalloc+0x162>
f0117f20:	83 ec 04             	sub    $0x4,%esp
f0117f23:	68 14 b9 13 f0       	push   $0xf013b914
f0117f28:	6a 41                	push   $0x41
f0117f2a:	68 fa b8 13 f0       	push   $0xf013b8fa
f0117f2f:	e8 d1 82 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117f34:	e8 5e 52 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0117f39:	89 c2                	mov    %eax,%edx
f0117f3b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117f3e:	39 c2                	cmp    %eax,%edx
f0117f40:	74 14                	je     f0117f56 <test_kmalloc+0x184>
f0117f42:	83 ec 04             	sub    $0x4,%esp
f0117f45:	68 7c b9 13 f0       	push   $0xf013b97c
f0117f4a:	6a 42                	push   $0x42
f0117f4c:	68 fa b8 13 f0       	push   $0xf013b8fa
f0117f51:	e8 af 82 fe ff       	call   f0100205 <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f0117f56:	83 ec 0c             	sub    $0xc,%esp
f0117f59:	68 bc b9 13 f0       	push   $0xf013b9bc
f0117f5e:	e8 ab 8d fe ff       	call   f0100d0e <cprintf>
f0117f63:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0117f66:	e8 2c 52 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0117f6b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117f6e:	e8 55 be fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117f73:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0117f76:	83 ec 0c             	sub    $0xc,%esp
f0117f79:	68 00 fc 1f 00       	push   $0x1ffc00
f0117f7e:	e8 08 fe fe ff       	call   f0107d8b <kmalloc>
f0117f83:	83 c4 10             	add    $0x10,%esp
f0117f86:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117f8c:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0117f92:	89 c1                	mov    %eax,%ecx
f0117f94:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0117f9b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117f9e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117fa3:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0117fa6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117fa9:	ba 00 00 00 00       	mov    $0x0,%edx
f0117fae:	f7 75 b8             	divl   -0x48(%ebp)
f0117fb1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117fb4:	29 d0                	sub    %edx,%eax
f0117fb6:	89 c3                	mov    %eax,%ebx
f0117fb8:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0117fbf:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0117fc4:	0f b6 d0             	movzbl %al,%edx
f0117fc7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117fca:	01 d0                	add    %edx,%eax
f0117fcc:	48                   	dec    %eax
f0117fcd:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0117fd0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117fd3:	ba 00 00 00 00       	mov    $0x0,%edx
f0117fd8:	f7 75 b0             	divl   -0x50(%ebp)
f0117fdb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117fde:	29 d0                	sub    %edx,%eax
f0117fe0:	01 c3                	add    %eax,%ebx
f0117fe2:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0117fe9:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0117fee:	0f b6 c0             	movzbl %al,%eax
f0117ff1:	c1 e0 04             	shl    $0x4,%eax
f0117ff4:	89 c2                	mov    %eax,%edx
f0117ff6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117ff9:	01 d0                	add    %edx,%eax
f0117ffb:	48                   	dec    %eax
f0117ffc:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0117fff:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118002:	ba 00 00 00 00       	mov    $0x0,%edx
f0118007:	f7 75 a8             	divl   -0x58(%ebp)
f011800a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011800d:	29 d0                	sub    %edx,%eax
f011800f:	01 d8                	add    %ebx,%eax
f0118011:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0118016:	39 c1                	cmp    %eax,%ecx
f0118018:	74 14                	je     f011802e <test_kmalloc+0x25c>
f011801a:	83 ec 04             	sub    $0x4,%esp
f011801d:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0118022:	6a 49                	push   $0x49
f0118024:	68 fa b8 13 f0       	push   $0xf013b8fa
f0118029:	e8 d7 81 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011802e:	e8 95 bd fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118033:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118036:	74 14                	je     f011804c <test_kmalloc+0x27a>
f0118038:	83 ec 04             	sub    $0x4,%esp
f011803b:	68 14 b9 13 f0       	push   $0xf013b914
f0118040:	6a 4a                	push   $0x4a
f0118042:	68 fa b8 13 f0       	push   $0xf013b8fa
f0118047:	e8 b9 81 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011804c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011804f:	e8 43 51 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0118054:	29 c3                	sub    %eax,%ebx
f0118056:	89 d8                	mov    %ebx,%eax
f0118058:	3d 00 02 00 00       	cmp    $0x200,%eax
f011805d:	74 14                	je     f0118073 <test_kmalloc+0x2a1>
f011805f:	83 ec 04             	sub    $0x4,%esp
f0118062:	68 7c b9 13 f0       	push   $0xf013b97c
f0118067:	6a 4b                	push   $0x4b
f0118069:	68 fa b8 13 f0       	push   $0xf013b8fa
f011806e:	e8 92 81 fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0118073:	e8 1f 51 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0118078:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011807b:	e8 48 bd fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118080:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0118083:	83 ec 0c             	sub    $0xc,%esp
f0118086:	68 00 fc 1f 00       	push   $0x1ffc00
f011808b:	e8 fb fc fe ff       	call   f0107d8b <kmalloc>
f0118090:	83 c4 10             	add    $0x10,%esp
f0118093:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118099:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011809f:	89 c1                	mov    %eax,%ecx
f01180a1:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01180a8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01180ab:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01180b0:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01180b3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01180b6:	ba 00 00 00 00       	mov    $0x0,%edx
f01180bb:	f7 75 a0             	divl   -0x60(%ebp)
f01180be:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01180c1:	29 d0                	sub    %edx,%eax
f01180c3:	89 c3                	mov    %eax,%ebx
f01180c5:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01180cc:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01180d1:	0f b6 d0             	movzbl %al,%edx
f01180d4:	8b 45 98             	mov    -0x68(%ebp),%eax
f01180d7:	01 d0                	add    %edx,%eax
f01180d9:	48                   	dec    %eax
f01180da:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01180dd:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01180e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01180e5:	f7 75 98             	divl   -0x68(%ebp)
f01180e8:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01180eb:	29 d0                	sub    %edx,%eax
f01180ed:	01 c3                	add    %eax,%ebx
f01180ef:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01180f6:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01180fb:	0f b6 c0             	movzbl %al,%eax
f01180fe:	c1 e0 04             	shl    $0x4,%eax
f0118101:	89 c2                	mov    %eax,%edx
f0118103:	8b 45 90             	mov    -0x70(%ebp),%eax
f0118106:	01 d0                	add    %edx,%eax
f0118108:	48                   	dec    %eax
f0118109:	89 45 8c             	mov    %eax,-0x74(%ebp)
f011810c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011810f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118114:	f7 75 90             	divl   -0x70(%ebp)
f0118117:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011811a:	29 d0                	sub    %edx,%eax
f011811c:	01 d8                	add    %ebx,%eax
f011811e:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0118123:	39 c1                	cmp    %eax,%ecx
f0118125:	74 14                	je     f011813b <test_kmalloc+0x369>
f0118127:	83 ec 04             	sub    $0x4,%esp
f011812a:	68 e0 b9 13 f0       	push   $0xf013b9e0
f011812f:	6a 51                	push   $0x51
f0118131:	68 fa b8 13 f0       	push   $0xf013b8fa
f0118136:	e8 ca 80 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011813b:	e8 88 bc fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118140:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118143:	74 14                	je     f0118159 <test_kmalloc+0x387>
f0118145:	83 ec 04             	sub    $0x4,%esp
f0118148:	68 14 b9 13 f0       	push   $0xf013b914
f011814d:	6a 52                	push   $0x52
f011814f:	68 fa b8 13 f0       	push   $0xf013b8fa
f0118154:	e8 ac 80 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118159:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011815c:	e8 36 50 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0118161:	29 c3                	sub    %eax,%ebx
f0118163:	89 d8                	mov    %ebx,%eax
f0118165:	3d 00 02 00 00       	cmp    $0x200,%eax
f011816a:	74 14                	je     f0118180 <test_kmalloc+0x3ae>
f011816c:	83 ec 04             	sub    $0x4,%esp
f011816f:	68 7c b9 13 f0       	push   $0xf013b97c
f0118174:	6a 53                	push   $0x53
f0118176:	68 fa b8 13 f0       	push   $0xf013b8fa
f011817b:	e8 85 80 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0118180:	e8 12 50 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0118185:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118188:	e8 3b bc fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011818d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0118190:	83 ec 0c             	sub    $0xc,%esp
f0118193:	68 00 08 00 00       	push   $0x800
f0118198:	e8 ee fb fe ff       	call   f0107d8b <kmalloc>
f011819d:	83 c4 10             	add    $0x10,%esp
f01181a0:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01181a6:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01181ac:	89 c1                	mov    %eax,%ecx
f01181ae:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01181b5:	8b 45 88             	mov    -0x78(%ebp),%eax
f01181b8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01181bd:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01181c0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01181c3:	ba 00 00 00 00       	mov    $0x0,%edx
f01181c8:	f7 75 88             	divl   -0x78(%ebp)
f01181cb:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01181ce:	29 d0                	sub    %edx,%eax
f01181d0:	89 c3                	mov    %eax,%ebx
f01181d2:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01181d9:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01181de:	0f b6 d0             	movzbl %al,%edx
f01181e1:	8b 45 80             	mov    -0x80(%ebp),%eax
f01181e4:	01 d0                	add    %edx,%eax
f01181e6:	48                   	dec    %eax
f01181e7:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01181ed:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01181f3:	ba 00 00 00 00       	mov    $0x0,%edx
f01181f8:	f7 75 80             	divl   -0x80(%ebp)
f01181fb:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0118201:	29 d0                	sub    %edx,%eax
f0118203:	01 c3                	add    %eax,%ebx
f0118205:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f011820c:	10 00 00 
f011820f:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0118214:	0f b6 c0             	movzbl %al,%eax
f0118217:	c1 e0 04             	shl    $0x4,%eax
f011821a:	89 c2                	mov    %eax,%edx
f011821c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0118222:	01 d0                	add    %edx,%eax
f0118224:	48                   	dec    %eax
f0118225:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f011822b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0118231:	ba 00 00 00 00       	mov    $0x0,%edx
f0118236:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f011823c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0118242:	29 d0                	sub    %edx,%eax
f0118244:	01 d8                	add    %ebx,%eax
f0118246:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011824b:	39 c1                	cmp    %eax,%ecx
f011824d:	74 14                	je     f0118263 <test_kmalloc+0x491>
f011824f:	83 ec 04             	sub    $0x4,%esp
f0118252:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0118257:	6a 59                	push   $0x59
f0118259:	68 fa b8 13 f0       	push   $0xf013b8fa
f011825e:	e8 a2 7f fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118263:	e8 60 bb fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118268:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011826b:	74 14                	je     f0118281 <test_kmalloc+0x4af>
f011826d:	83 ec 04             	sub    $0x4,%esp
f0118270:	68 14 b9 13 f0       	push   $0xf013b914
f0118275:	6a 5a                	push   $0x5a
f0118277:	68 fa b8 13 f0       	push   $0xf013b8fa
f011827c:	e8 84 7f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118281:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118284:	e8 0e 4f ff ff       	call   f010d197 <sys_calculate_free_frames>
f0118289:	29 c3                	sub    %eax,%ebx
f011828b:	89 d8                	mov    %ebx,%eax
f011828d:	83 f8 01             	cmp    $0x1,%eax
f0118290:	74 14                	je     f01182a6 <test_kmalloc+0x4d4>
f0118292:	83 ec 04             	sub    $0x4,%esp
f0118295:	68 7c b9 13 f0       	push   $0xf013b97c
f011829a:	6a 5b                	push   $0x5b
f011829c:	68 fa b8 13 f0       	push   $0xf013b8fa
f01182a1:	e8 5f 7f fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01182a6:	e8 ec 4e ff ff       	call   f010d197 <sys_calculate_free_frames>
f01182ab:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01182ae:	e8 15 bb fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01182b3:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01182b6:	83 ec 0c             	sub    $0xc,%esp
f01182b9:	68 00 08 00 00       	push   $0x800
f01182be:	e8 c8 fa fe ff       	call   f0107d8b <kmalloc>
f01182c3:	83 c4 10             	add    $0x10,%esp
f01182c6:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01182cc:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01182d2:	89 c1                	mov    %eax,%ecx
f01182d4:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01182db:	10 00 00 
f01182de:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01182e4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01182e9:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01182ef:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01182f5:	ba 00 00 00 00       	mov    $0x0,%edx
f01182fa:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0118300:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118306:	29 d0                	sub    %edx,%eax
f0118308:	89 c3                	mov    %eax,%ebx
f011830a:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0118311:	10 00 00 
f0118314:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0118319:	0f b6 d0             	movzbl %al,%edx
f011831c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0118322:	01 d0                	add    %edx,%eax
f0118324:	48                   	dec    %eax
f0118325:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f011832b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118331:	ba 00 00 00 00       	mov    $0x0,%edx
f0118336:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f011833c:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118342:	29 d0                	sub    %edx,%eax
f0118344:	01 c3                	add    %eax,%ebx
f0118346:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f011834d:	10 00 00 
f0118350:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0118355:	0f b6 c0             	movzbl %al,%eax
f0118358:	c1 e0 04             	shl    $0x4,%eax
f011835b:	89 c2                	mov    %eax,%edx
f011835d:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0118363:	01 d0                	add    %edx,%eax
f0118365:	48                   	dec    %eax
f0118366:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f011836c:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118372:	ba 00 00 00 00       	mov    $0x0,%edx
f0118377:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f011837d:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118383:	29 d0                	sub    %edx,%eax
f0118385:	01 d8                	add    %ebx,%eax
f0118387:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011838c:	39 c1                	cmp    %eax,%ecx
f011838e:	74 14                	je     f01183a4 <test_kmalloc+0x5d2>
f0118390:	83 ec 04             	sub    $0x4,%esp
f0118393:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0118398:	6a 61                	push   $0x61
f011839a:	68 fa b8 13 f0       	push   $0xf013b8fa
f011839f:	e8 61 7e fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01183a4:	e8 1f ba fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01183a9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01183ac:	74 14                	je     f01183c2 <test_kmalloc+0x5f0>
f01183ae:	83 ec 04             	sub    $0x4,%esp
f01183b1:	68 14 b9 13 f0       	push   $0xf013b914
f01183b6:	6a 62                	push   $0x62
f01183b8:	68 fa b8 13 f0       	push   $0xf013b8fa
f01183bd:	e8 43 7e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01183c2:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01183c5:	e8 cd 4d ff ff       	call   f010d197 <sys_calculate_free_frames>
f01183ca:	29 c3                	sub    %eax,%ebx
f01183cc:	89 d8                	mov    %ebx,%eax
f01183ce:	83 f8 01             	cmp    $0x1,%eax
f01183d1:	74 14                	je     f01183e7 <test_kmalloc+0x615>
f01183d3:	83 ec 04             	sub    $0x4,%esp
f01183d6:	68 7c b9 13 f0       	push   $0xf013b97c
f01183db:	6a 63                	push   $0x63
f01183dd:	68 fa b8 13 f0       	push   $0xf013b8fa
f01183e2:	e8 1e 7e fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01183e7:	e8 ab 4d ff ff       	call   f010d197 <sys_calculate_free_frames>
f01183ec:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01183ef:	e8 d4 b9 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01183f4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01183f7:	83 ec 0c             	sub    $0xc,%esp
f01183fa:	68 00 1c 00 00       	push   $0x1c00
f01183ff:	e8 87 f9 fe ff       	call   f0107d8b <kmalloc>
f0118404:	83 c4 10             	add    $0x10,%esp
f0118407:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011840d:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0118413:	89 c1                	mov    %eax,%ecx
f0118415:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f011841c:	10 00 00 
f011841f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0118425:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011842a:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0118430:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118436:	ba 00 00 00 00       	mov    $0x0,%edx
f011843b:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0118441:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118447:	29 d0                	sub    %edx,%eax
f0118449:	89 c3                	mov    %eax,%ebx
f011844b:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0118452:	10 00 00 
f0118455:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011845a:	0f b6 d0             	movzbl %al,%edx
f011845d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0118463:	01 d0                	add    %edx,%eax
f0118465:	48                   	dec    %eax
f0118466:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f011846c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118472:	ba 00 00 00 00       	mov    $0x0,%edx
f0118477:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f011847d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118483:	29 d0                	sub    %edx,%eax
f0118485:	01 c3                	add    %eax,%ebx
f0118487:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f011848e:	10 00 00 
f0118491:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0118496:	0f b6 c0             	movzbl %al,%eax
f0118499:	c1 e0 04             	shl    $0x4,%eax
f011849c:	89 c2                	mov    %eax,%edx
f011849e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01184a4:	01 d0                	add    %edx,%eax
f01184a6:	48                   	dec    %eax
f01184a7:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01184ad:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01184b3:	ba 00 00 00 00       	mov    $0x0,%edx
f01184b8:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01184be:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01184c4:	29 d0                	sub    %edx,%eax
f01184c6:	01 d8                	add    %ebx,%eax
f01184c8:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01184cd:	39 c1                	cmp    %eax,%ecx
f01184cf:	74 14                	je     f01184e5 <test_kmalloc+0x713>
f01184d1:	83 ec 04             	sub    $0x4,%esp
f01184d4:	68 e0 b9 13 f0       	push   $0xf013b9e0
f01184d9:	6a 69                	push   $0x69
f01184db:	68 fa b8 13 f0       	push   $0xf013b8fa
f01184e0:	e8 20 7d fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01184e5:	e8 de b8 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01184ea:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01184ed:	74 14                	je     f0118503 <test_kmalloc+0x731>
f01184ef:	83 ec 04             	sub    $0x4,%esp
f01184f2:	68 14 b9 13 f0       	push   $0xf013b914
f01184f7:	6a 6a                	push   $0x6a
f01184f9:	68 fa b8 13 f0       	push   $0xf013b8fa
f01184fe:	e8 02 7d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118503:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118506:	e8 8c 4c ff ff       	call   f010d197 <sys_calculate_free_frames>
f011850b:	29 c3                	sub    %eax,%ebx
f011850d:	89 d8                	mov    %ebx,%eax
f011850f:	83 f8 02             	cmp    $0x2,%eax
f0118512:	74 14                	je     f0118528 <test_kmalloc+0x756>
f0118514:	83 ec 04             	sub    $0x4,%esp
f0118517:	68 7c b9 13 f0       	push   $0xf013b97c
f011851c:	6a 6b                	push   $0x6b
f011851e:	68 fa b8 13 f0       	push   $0xf013b8fa
f0118523:	e8 dd 7c fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0118528:	e8 6a 4c ff ff       	call   f010d197 <sys_calculate_free_frames>
f011852d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118530:	e8 93 b8 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118535:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0118538:	83 ec 0c             	sub    $0xc,%esp
f011853b:	68 00 fc 2f 00       	push   $0x2ffc00
f0118540:	e8 46 f8 fe ff       	call   f0107d8b <kmalloc>
f0118545:	83 c4 10             	add    $0x10,%esp
f0118548:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011854e:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0118554:	89 c1                	mov    %eax,%ecx
f0118556:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f011855d:	10 00 00 
f0118560:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0118566:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011856b:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0118571:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118577:	ba 00 00 00 00       	mov    $0x0,%edx
f011857c:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0118582:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118588:	29 d0                	sub    %edx,%eax
f011858a:	89 c3                	mov    %eax,%ebx
f011858c:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0118593:	10 00 00 
f0118596:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011859b:	0f b6 d0             	movzbl %al,%edx
f011859e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01185a4:	01 d0                	add    %edx,%eax
f01185a6:	48                   	dec    %eax
f01185a7:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01185ad:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01185b3:	ba 00 00 00 00       	mov    $0x0,%edx
f01185b8:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01185be:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01185c4:	29 d0                	sub    %edx,%eax
f01185c6:	01 c3                	add    %eax,%ebx
f01185c8:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01185cf:	10 00 00 
f01185d2:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01185d7:	0f b6 c0             	movzbl %al,%eax
f01185da:	c1 e0 04             	shl    $0x4,%eax
f01185dd:	89 c2                	mov    %eax,%edx
f01185df:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01185e5:	01 d0                	add    %edx,%eax
f01185e7:	48                   	dec    %eax
f01185e8:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01185ee:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01185f4:	ba 00 00 00 00       	mov    $0x0,%edx
f01185f9:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01185ff:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118605:	29 d0                	sub    %edx,%eax
f0118607:	01 d8                	add    %ebx,%eax
f0118609:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011860e:	39 c1                	cmp    %eax,%ecx
f0118610:	74 14                	je     f0118626 <test_kmalloc+0x854>
f0118612:	83 ec 04             	sub    $0x4,%esp
f0118615:	68 e0 b9 13 f0       	push   $0xf013b9e0
f011861a:	6a 71                	push   $0x71
f011861c:	68 fa b8 13 f0       	push   $0xf013b8fa
f0118621:	e8 df 7b fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118626:	e8 9d b7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011862b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011862e:	74 14                	je     f0118644 <test_kmalloc+0x872>
f0118630:	83 ec 04             	sub    $0x4,%esp
f0118633:	68 14 b9 13 f0       	push   $0xf013b914
f0118638:	6a 72                	push   $0x72
f011863a:	68 fa b8 13 f0       	push   $0xf013b8fa
f011863f:	e8 c1 7b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118644:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118647:	e8 4b 4b ff ff       	call   f010d197 <sys_calculate_free_frames>
f011864c:	29 c3                	sub    %eax,%ebx
f011864e:	89 d8                	mov    %ebx,%eax
f0118650:	3d 00 03 00 00       	cmp    $0x300,%eax
f0118655:	74 14                	je     f011866b <test_kmalloc+0x899>
f0118657:	83 ec 04             	sub    $0x4,%esp
f011865a:	68 7c b9 13 f0       	push   $0xf013b97c
f011865f:	6a 73                	push   $0x73
f0118661:	68 fa b8 13 f0       	push   $0xf013b8fa
f0118666:	e8 9a 7b fe ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011866b:	e8 27 4b ff ff       	call   f010d197 <sys_calculate_free_frames>
f0118670:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118673:	e8 50 b7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118678:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011867b:	83 ec 0c             	sub    $0xc,%esp
f011867e:	68 00 fc 5f 00       	push   $0x5ffc00
f0118683:	e8 03 f7 fe ff       	call   f0107d8b <kmalloc>
f0118688:	83 c4 10             	add    $0x10,%esp
f011868b:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118691:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0118697:	89 c1                	mov    %eax,%ecx
f0118699:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f01186a0:	10 00 00 
f01186a3:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01186a9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01186ae:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f01186b4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01186ba:	ba 00 00 00 00       	mov    $0x0,%edx
f01186bf:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f01186c5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01186cb:	29 d0                	sub    %edx,%eax
f01186cd:	89 c3                	mov    %eax,%ebx
f01186cf:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f01186d6:	10 00 00 
f01186d9:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01186de:	0f b6 d0             	movzbl %al,%edx
f01186e1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01186e7:	01 d0                	add    %edx,%eax
f01186e9:	48                   	dec    %eax
f01186ea:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f01186f0:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01186f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01186fb:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0118701:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118707:	29 d0                	sub    %edx,%eax
f0118709:	01 c3                	add    %eax,%ebx
f011870b:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0118712:	10 00 00 
f0118715:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011871a:	0f b6 c0             	movzbl %al,%eax
f011871d:	c1 e0 04             	shl    $0x4,%eax
f0118720:	89 c2                	mov    %eax,%edx
f0118722:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0118728:	01 d0                	add    %edx,%eax
f011872a:	48                   	dec    %eax
f011872b:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0118731:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118737:	ba 00 00 00 00       	mov    $0x0,%edx
f011873c:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0118742:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118748:	29 d0                	sub    %edx,%eax
f011874a:	01 d8                	add    %ebx,%eax
f011874c:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0118751:	39 c1                	cmp    %eax,%ecx
f0118753:	74 14                	je     f0118769 <test_kmalloc+0x997>
f0118755:	83 ec 04             	sub    $0x4,%esp
f0118758:	68 e0 b9 13 f0       	push   $0xf013b9e0
f011875d:	6a 79                	push   $0x79
f011875f:	68 fa b8 13 f0       	push   $0xf013b8fa
f0118764:	e8 9c 7a fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118769:	e8 5a b6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011876e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118771:	74 14                	je     f0118787 <test_kmalloc+0x9b5>
f0118773:	83 ec 04             	sub    $0x4,%esp
f0118776:	68 14 b9 13 f0       	push   $0xf013b914
f011877b:	6a 7a                	push   $0x7a
f011877d:	68 fa b8 13 f0       	push   $0xf013b8fa
f0118782:	e8 7e 7a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118787:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011878a:	e8 08 4a ff ff       	call   f010d197 <sys_calculate_free_frames>
f011878f:	29 c3                	sub    %eax,%ebx
f0118791:	89 d8                	mov    %ebx,%eax
f0118793:	3d 00 06 00 00       	cmp    $0x600,%eax
f0118798:	74 14                	je     f01187ae <test_kmalloc+0x9dc>
f011879a:	83 ec 04             	sub    $0x4,%esp
f011879d:	68 7c b9 13 f0       	push   $0xf013b97c
f01187a2:	6a 7b                	push   $0x7b
f01187a4:	68 fa b8 13 f0       	push   $0xf013b8fa
f01187a9:	e8 57 7a fe ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01187ae:	e8 e4 49 ff ff       	call   f010d197 <sys_calculate_free_frames>
f01187b3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01187b6:	e8 0d b6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01187bb:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01187be:	83 ec 0c             	sub    $0xc,%esp
f01187c1:	68 00 38 00 00       	push   $0x3800
f01187c6:	e8 c0 f5 fe ff       	call   f0107d8b <kmalloc>
f01187cb:	83 c4 10             	add    $0x10,%esp
f01187ce:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01187d4:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01187da:	89 c1                	mov    %eax,%ecx
f01187dc:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01187e3:	10 00 00 
f01187e6:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01187ec:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01187f1:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01187f7:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01187fd:	ba 00 00 00 00       	mov    $0x0,%edx
f0118802:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0118808:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011880e:	29 d0                	sub    %edx,%eax
f0118810:	89 c3                	mov    %eax,%ebx
f0118812:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0118819:	10 00 00 
f011881c:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0118821:	0f b6 d0             	movzbl %al,%edx
f0118824:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011882a:	01 d0                	add    %edx,%eax
f011882c:	48                   	dec    %eax
f011882d:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0118833:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0118839:	ba 00 00 00 00       	mov    $0x0,%edx
f011883e:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0118844:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011884a:	29 d0                	sub    %edx,%eax
f011884c:	01 c3                	add    %eax,%ebx
f011884e:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0118855:	10 00 00 
f0118858:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011885d:	0f b6 c0             	movzbl %al,%eax
f0118860:	c1 e0 04             	shl    $0x4,%eax
f0118863:	89 c2                	mov    %eax,%edx
f0118865:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011886b:	01 d0                	add    %edx,%eax
f011886d:	48                   	dec    %eax
f011886e:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0118874:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011887a:	ba 00 00 00 00       	mov    $0x0,%edx
f011887f:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0118885:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011888b:	29 d0                	sub    %edx,%eax
f011888d:	01 d8                	add    %ebx,%eax
f011888f:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0118894:	39 c1                	cmp    %eax,%ecx
f0118896:	74 17                	je     f01188af <test_kmalloc+0xadd>
f0118898:	83 ec 04             	sub    $0x4,%esp
f011889b:	68 e0 b9 13 f0       	push   $0xf013b9e0
f01188a0:	68 81 00 00 00       	push   $0x81
f01188a5:	68 fa b8 13 f0       	push   $0xf013b8fa
f01188aa:	e8 56 79 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01188af:	e8 14 b5 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01188b4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01188b7:	74 17                	je     f01188d0 <test_kmalloc+0xafe>
f01188b9:	83 ec 04             	sub    $0x4,%esp
f01188bc:	68 14 b9 13 f0       	push   $0xf013b914
f01188c1:	68 82 00 00 00       	push   $0x82
f01188c6:	68 fa b8 13 f0       	push   $0xf013b8fa
f01188cb:	e8 35 79 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01188d0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01188d3:	e8 bf 48 ff ff       	call   f010d197 <sys_calculate_free_frames>
f01188d8:	29 c3                	sub    %eax,%ebx
f01188da:	89 d8                	mov    %ebx,%eax
f01188dc:	83 f8 04             	cmp    $0x4,%eax
f01188df:	74 17                	je     f01188f8 <test_kmalloc+0xb26>
f01188e1:	83 ec 04             	sub    $0x4,%esp
f01188e4:	68 7c b9 13 f0       	push   $0xf013b97c
f01188e9:	68 83 00 00 00       	push   $0x83
f01188ee:	68 fa b8 13 f0       	push   $0xf013b8fa
f01188f3:	e8 0d 79 fe ff       	call   f0100205 <_panic>

		cprintf("\b\b\b50%");
f01188f8:	83 ec 0c             	sub    $0xc,%esp
f01188fb:	68 46 ba 13 f0       	push   $0xf013ba46
f0118900:	e8 09 84 fe ff       	call   f0100d0e <cprintf>
f0118905:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f0118908:	e8 8a 48 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011890d:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0118910:	e8 b3 b4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118915:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f0118918:	c7 85 f8 fe ff ff ff 	movl   $0x1ffbff,-0x108(%ebp)
f011891f:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f0118922:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0118928:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
			byteArr[0] = minByte ;
f011892e:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118934:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118937:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f0118939:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f011893f:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118945:	01 c2                	add    %eax,%edx
f0118947:	8a 45 f2             	mov    -0xe(%ebp),%al
f011894a:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f011894c:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0118952:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f0118958:	c7 85 ec fe ff ff ff 	movl   $0xffdff,-0x114(%ebp)
f011895f:	fd 0f 00 
			shortArr[0] = minShort;
f0118962:	8b 95 f0 fe ff ff    	mov    -0x110(%ebp),%edx
f0118968:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011896b:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f011896e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0118974:	01 c0                	add    %eax,%eax
f0118976:	89 c2                	mov    %eax,%edx
f0118978:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011897e:	01 c2                	add    %eax,%edx
f0118980:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118984:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f0118987:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011898d:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f0118993:	c7 85 e4 fe ff ff ff 	movl   $0x1ff,-0x11c(%ebp)
f011899a:	01 00 00 
			intArr[0] = minInt;
f011899d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01189a3:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01189a6:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f01189a8:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01189ae:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01189b5:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01189bb:	01 c2                	add    %eax,%edx
f01189bd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01189c0:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f01189c2:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01189c8:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f01189ce:	c7 85 dc fe ff ff 7f 	movl   $0x37f,-0x124(%ebp)
f01189d5:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f01189d8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01189de:	8a 55 f3             	mov    -0xd(%ebp),%dl
f01189e1:	88 10                	mov    %dl,(%eax)
f01189e3:	8b 95 e0 fe ff ff    	mov    -0x120(%ebp),%edx
f01189e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01189ec:	66 89 42 02          	mov    %ax,0x2(%edx)
f01189f0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01189f6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01189f9:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f01189fc:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118a02:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118a09:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118a0f:	01 c2                	add    %eax,%edx
f0118a11:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118a14:	88 02                	mov    %al,(%edx)
f0118a16:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118a1c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118a23:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118a29:	01 c2                	add    %eax,%edx
f0118a2b:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118a2f:	66 89 42 02          	mov    %ax,0x2(%edx)
f0118a33:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118a39:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118a40:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118a46:	01 c2                	add    %eax,%edx
f0118a48:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118a4b:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f0118a4e:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f0118a55:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f0118a58:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0118a5e:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
			byteArr2[0] = minByte ;
f0118a64:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118a6a:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118a6d:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f0118a6f:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0118a75:	89 c2                	mov    %eax,%edx
f0118a77:	c1 ea 1f             	shr    $0x1f,%edx
f0118a7a:	01 d0                	add    %edx,%eax
f0118a7c:	d1 f8                	sar    %eax
f0118a7e:	89 c2                	mov    %eax,%edx
f0118a80:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118a86:	01 c2                	add    %eax,%edx
f0118a88:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118a8b:	88 c1                	mov    %al,%cl
f0118a8d:	c0 e9 07             	shr    $0x7,%cl
f0118a90:	01 c8                	add    %ecx,%eax
f0118a92:	d0 f8                	sar    %al
f0118a94:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f0118a96:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f0118a9c:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118aa2:	01 c2                	add    %eax,%edx
f0118aa4:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118aa7:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f0118aa9:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0118aaf:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f0118ab5:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f0118abc:	1b 00 00 
			shortArr2[0] = minShort;
f0118abf:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f0118ac5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118ac8:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f0118acb:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0118ad1:	01 c0                	add    %eax,%eax
f0118ad3:	89 c2                	mov    %eax,%edx
f0118ad5:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118adb:	01 c2                	add    %eax,%edx
f0118add:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118ae1:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0118ae4:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118aea:	8a 00                	mov    (%eax),%al
f0118aec:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118aef:	75 15                	jne    f0118b06 <test_kmalloc+0xd34>
f0118af1:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f0118af7:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118afd:	01 d0                	add    %edx,%eax
f0118aff:	8a 00                	mov    (%eax),%al
f0118b01:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0118b04:	74 17                	je     f0118b1d <test_kmalloc+0xd4b>
f0118b06:	83 ec 04             	sub    $0x4,%esp
f0118b09:	68 50 ba 13 f0       	push   $0xf013ba50
f0118b0e:	68 b2 00 00 00       	push   $0xb2
f0118b13:	68 fa b8 13 f0       	push   $0xf013b8fa
f0118b18:	e8 e8 76 fe ff       	call   f0100205 <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0118b1d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0118b23:	66 8b 00             	mov    (%eax),%ax
f0118b26:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0118b2a:	75 1b                	jne    f0118b47 <test_kmalloc+0xd75>
f0118b2c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0118b32:	01 c0                	add    %eax,%eax
f0118b34:	89 c2                	mov    %eax,%edx
f0118b36:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0118b3c:	01 d0                	add    %edx,%eax
f0118b3e:	66 8b 00             	mov    (%eax),%ax
f0118b41:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0118b45:	74 17                	je     f0118b5e <test_kmalloc+0xd8c>
f0118b47:	83 ec 04             	sub    $0x4,%esp
f0118b4a:	68 50 ba 13 f0       	push   $0xf013ba50
f0118b4f:	68 b3 00 00 00       	push   $0xb3
f0118b54:	68 fa b8 13 f0       	push   $0xf013b8fa
f0118b59:	e8 a7 76 fe ff       	call   f0100205 <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f0118b5e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118b64:	8b 00                	mov    (%eax),%eax
f0118b66:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0118b69:	75 1c                	jne    f0118b87 <test_kmalloc+0xdb5>
f0118b6b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0118b71:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118b78:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118b7e:	01 d0                	add    %edx,%eax
f0118b80:	8b 00                	mov    (%eax),%eax
f0118b82:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0118b85:	74 17                	je     f0118b9e <test_kmalloc+0xdcc>
f0118b87:	83 ec 04             	sub    $0x4,%esp
f0118b8a:	68 50 ba 13 f0       	push   $0xf013ba50
f0118b8f:	68 b4 00 00 00       	push   $0xb4
f0118b94:	68 fa b8 13 f0       	push   $0xf013b8fa
f0118b99:	e8 67 76 fe ff       	call   f0100205 <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f0118b9e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118ba4:	8a 00                	mov    (%eax),%al
f0118ba6:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118ba9:	75 1c                	jne    f0118bc7 <test_kmalloc+0xdf5>
f0118bab:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118bb1:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118bb8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118bbe:	01 d0                	add    %edx,%eax
f0118bc0:	8a 00                	mov    (%eax),%al
f0118bc2:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0118bc5:	74 17                	je     f0118bde <test_kmalloc+0xe0c>
f0118bc7:	83 ec 04             	sub    $0x4,%esp
f0118bca:	68 50 ba 13 f0       	push   $0xf013ba50
f0118bcf:	68 b6 00 00 00       	push   $0xb6
f0118bd4:	68 fa b8 13 f0       	push   $0xf013b8fa
f0118bd9:	e8 27 76 fe ff       	call   f0100205 <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f0118bde:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118be4:	66 8b 40 02          	mov    0x2(%eax),%ax
f0118be8:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0118bec:	75 1f                	jne    f0118c0d <test_kmalloc+0xe3b>
f0118bee:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118bf4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118bfb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118c01:	01 d0                	add    %edx,%eax
f0118c03:	66 8b 40 02          	mov    0x2(%eax),%ax
f0118c07:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0118c0b:	74 17                	je     f0118c24 <test_kmalloc+0xe52>
f0118c0d:	83 ec 04             	sub    $0x4,%esp
f0118c10:	68 50 ba 13 f0       	push   $0xf013ba50
f0118c15:	68 b7 00 00 00       	push   $0xb7
f0118c1a:	68 fa b8 13 f0       	push   $0xf013b8fa
f0118c1f:	e8 e1 75 fe ff       	call   f0100205 <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f0118c24:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118c2a:	8b 40 04             	mov    0x4(%eax),%eax
f0118c2d:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0118c30:	75 1d                	jne    f0118c4f <test_kmalloc+0xe7d>
f0118c32:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118c38:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118c3f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118c45:	01 d0                	add    %edx,%eax
f0118c47:	8b 40 04             	mov    0x4(%eax),%eax
f0118c4a:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0118c4d:	74 17                	je     f0118c66 <test_kmalloc+0xe94>
f0118c4f:	83 ec 04             	sub    $0x4,%esp
f0118c52:	68 50 ba 13 f0       	push   $0xf013ba50
f0118c57:	68 b8 00 00 00       	push   $0xb8
f0118c5c:	68 fa b8 13 f0       	push   $0xf013b8fa
f0118c61:	e8 9f 75 fe ff       	call   f0100205 <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0118c66:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118c6c:	8a 00                	mov    (%eax),%al
f0118c6e:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118c71:	75 40                	jne    f0118cb3 <test_kmalloc+0xee1>
f0118c73:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0118c79:	89 c2                	mov    %eax,%edx
f0118c7b:	c1 ea 1f             	shr    $0x1f,%edx
f0118c7e:	01 d0                	add    %edx,%eax
f0118c80:	d1 f8                	sar    %eax
f0118c82:	89 c2                	mov    %eax,%edx
f0118c84:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118c8a:	01 d0                	add    %edx,%eax
f0118c8c:	8a 10                	mov    (%eax),%dl
f0118c8e:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118c91:	88 c1                	mov    %al,%cl
f0118c93:	c0 e9 07             	shr    $0x7,%cl
f0118c96:	01 c8                	add    %ecx,%eax
f0118c98:	d0 f8                	sar    %al
f0118c9a:	38 c2                	cmp    %al,%dl
f0118c9c:	75 15                	jne    f0118cb3 <test_kmalloc+0xee1>
f0118c9e:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f0118ca4:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118caa:	01 d0                	add    %edx,%eax
f0118cac:	8a 00                	mov    (%eax),%al
f0118cae:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0118cb1:	74 17                	je     f0118cca <test_kmalloc+0xef8>
f0118cb3:	83 ec 04             	sub    $0x4,%esp
f0118cb6:	68 50 ba 13 f0       	push   $0xf013ba50
f0118cbb:	68 ba 00 00 00       	push   $0xba
f0118cc0:	68 fa b8 13 f0       	push   $0xf013b8fa
f0118cc5:	e8 3b 75 fe ff       	call   f0100205 <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0118cca:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118cd0:	66 8b 00             	mov    (%eax),%ax
f0118cd3:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0118cd7:	75 1b                	jne    f0118cf4 <test_kmalloc+0xf22>
f0118cd9:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0118cdf:	01 c0                	add    %eax,%eax
f0118ce1:	89 c2                	mov    %eax,%edx
f0118ce3:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118ce9:	01 d0                	add    %edx,%eax
f0118ceb:	66 8b 00             	mov    (%eax),%ax
f0118cee:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0118cf2:	74 17                	je     f0118d0b <test_kmalloc+0xf39>
f0118cf4:	83 ec 04             	sub    $0x4,%esp
f0118cf7:	68 50 ba 13 f0       	push   $0xf013ba50
f0118cfc:	68 bb 00 00 00       	push   $0xbb
f0118d01:	68 fa b8 13 f0       	push   $0xf013b8fa
f0118d06:	e8 fa 74 fe ff       	call   f0100205 <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118d0b:	e8 87 44 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0118d10:	89 c2                	mov    %eax,%edx
f0118d12:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118d15:	39 c2                	cmp    %eax,%edx
f0118d17:	74 17                	je     f0118d30 <test_kmalloc+0xf5e>
f0118d19:	83 ec 04             	sub    $0x4,%esp
f0118d1c:	68 7c b9 13 f0       	push   $0xf013b97c
f0118d21:	68 bd 00 00 00       	push   $0xbd
f0118d26:	68 fa b8 13 f0       	push   $0xf013b8fa
f0118d2b:	e8 d5 74 fe ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118d30:	e8 93 b0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118d35:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118d38:	74 17                	je     f0118d51 <test_kmalloc+0xf7f>
f0118d3a:	83 ec 04             	sub    $0x4,%esp
f0118d3d:	68 14 b9 13 f0       	push   $0xf013b914
f0118d42:	68 be 00 00 00       	push   $0xbe
f0118d47:	68 fa b8 13 f0       	push   $0xf013b8fa
f0118d4c:	e8 b4 74 fe ff       	call   f0100205 <_panic>
		}

		cprintf("\b\b\b80%");
f0118d51:	83 ec 0c             	sub    $0xc,%esp
f0118d54:	68 85 ba 13 f0       	push   $0xf013ba85
f0118d59:	e8 b0 7f fe ff       	call   f0100d0e <cprintf>
f0118d5e:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f0118d61:	e8 31 44 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0118d66:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118d69:	e8 5a b0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118d6e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f0118d71:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f0118d78:	10 00 00 
f0118d7b:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0118d81:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118d86:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f0118d8c:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0118d92:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d97:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f0118d9d:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0118da3:	29 d0                	sub    %edx,%eax
f0118da5:	89 c1                	mov    %eax,%ecx
f0118da7:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f0118dae:	10 00 00 
f0118db1:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0118db6:	0f b6 d0             	movzbl %al,%edx
f0118db9:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0118dbf:	01 d0                	add    %edx,%eax
f0118dc1:	48                   	dec    %eax
f0118dc2:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f0118dc8:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0118dce:	ba 00 00 00 00       	mov    $0x0,%edx
f0118dd3:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f0118dd9:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0118ddf:	29 d0                	sub    %edx,%eax
f0118de1:	01 c1                	add    %eax,%ecx
f0118de3:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f0118dea:	10 00 00 
f0118ded:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0118df2:	0f b6 c0             	movzbl %al,%eax
f0118df5:	c1 e0 04             	shl    $0x4,%eax
f0118df8:	89 c2                	mov    %eax,%edx
f0118dfa:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0118e00:	01 d0                	add    %edx,%eax
f0118e02:	48                   	dec    %eax
f0118e03:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f0118e09:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118e0f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e14:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f0118e1a:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118e20:	29 d0                	sub    %edx,%eax
f0118e22:	01 c8                	add    %ecx,%eax
f0118e24:	ba 00 50 2f 09       	mov    $0x92f5000,%edx
f0118e29:	29 c2                	sub    %eax,%edx
f0118e2b:	89 d0                	mov    %edx,%eax
f0118e2d:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f0118e33:	83 ec 0c             	sub    $0xc,%esp
f0118e36:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f0118e3c:	e8 4a ef fe ff       	call   f0107d8b <kmalloc>
f0118e41:	83 c4 10             	add    $0x10,%esp
f0118e44:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f0118e4a:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0118e50:	85 c0                	test   %eax,%eax
f0118e52:	74 17                	je     f0118e6b <test_kmalloc+0x1099>
f0118e54:	83 ec 04             	sub    $0x4,%esp
f0118e57:	68 c8 b8 13 f0       	push   $0xf013b8c8
f0118e5c:	68 c8 00 00 00       	push   $0xc8
f0118e61:	68 fa b8 13 f0       	push   $0xf013b8fa
f0118e66:	e8 9a 73 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118e6b:	e8 58 af fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118e70:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118e73:	74 17                	je     f0118e8c <test_kmalloc+0x10ba>
f0118e75:	83 ec 04             	sub    $0x4,%esp
f0118e78:	68 14 b9 13 f0       	push   $0xf013b914
f0118e7d:	68 c9 00 00 00       	push   $0xc9
f0118e82:	68 fa b8 13 f0       	push   $0xf013b8fa
f0118e87:	e8 79 73 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118e8c:	e8 06 43 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0118e91:	89 c2                	mov    %eax,%edx
f0118e93:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118e96:	39 c2                	cmp    %eax,%edx
f0118e98:	74 17                	je     f0118eb1 <test_kmalloc+0x10df>
f0118e9a:	83 ec 04             	sub    $0x4,%esp
f0118e9d:	68 7c b9 13 f0       	push   $0xf013b97c
f0118ea2:	68 ca 00 00 00       	push   $0xca
f0118ea7:	68 fa b8 13 f0       	push   $0xf013b8fa
f0118eac:	e8 54 73 fe ff       	call   f0100205 <_panic>

		cprintf("\b\b\b90%");
f0118eb1:	83 ec 0c             	sub    $0xc,%esp
f0118eb4:	68 8c ba 13 f0       	push   $0xf013ba8c
f0118eb9:	e8 50 7e fe ff       	call   f0100d0e <cprintf>
f0118ebe:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f0118ec1:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0118ec7:	05 00 40 00 00       	add    $0x4000,%eax
f0118ecc:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0118ed2:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0118ed9:	10 00 00 
f0118edc:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0118ee2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118ee7:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0118eed:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0118ef3:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ef8:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0118efe:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0118f04:	29 d0                	sub    %edx,%eax
f0118f06:	89 c1                	mov    %eax,%ecx
f0118f08:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0118f0f:	10 00 00 
f0118f12:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0118f17:	0f b6 d0             	movzbl %al,%edx
f0118f1a:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0118f20:	01 d0                	add    %edx,%eax
f0118f22:	48                   	dec    %eax
f0118f23:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0118f29:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0118f2f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f34:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0118f3a:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0118f40:	29 d0                	sub    %edx,%eax
f0118f42:	01 c1                	add    %eax,%ecx
f0118f44:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0118f4b:	10 00 00 
f0118f4e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0118f53:	0f b6 c0             	movzbl %al,%eax
f0118f56:	c1 e0 04             	shl    $0x4,%eax
f0118f59:	89 c2                	mov    %eax,%edx
f0118f5b:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0118f61:	01 d0                	add    %edx,%eax
f0118f63:	48                   	dec    %eax
f0118f64:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0118f6a:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0118f70:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f75:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0118f7b:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0118f81:	29 d0                	sub    %edx,%eax
f0118f83:	01 c8                	add    %ecx,%eax
f0118f85:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0118f8a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0118f8d:	eb 6a                	jmp    f0118ff9 <test_kmalloc+0x1227>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f0118f8f:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0118f94:	83 ec 04             	sub    $0x4,%esp
f0118f97:	8d 95 3c fe ff ff    	lea    -0x1c4(%ebp),%edx
f0118f9d:	52                   	push   %edx
f0118f9e:	ff 75 f4             	pushl  -0xc(%ebp)
f0118fa1:	50                   	push   %eax
f0118fa2:	e8 0a db fe ff       	call   f0106ab1 <get_page_table>
f0118fa7:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f0118faa:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0118fb0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0118fb3:	c1 ea 0c             	shr    $0xc,%edx
f0118fb6:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0118fbc:	c1 e2 02             	shl    $0x2,%edx
f0118fbf:	01 d0                	add    %edx,%eax
f0118fc1:	8b 00                	mov    (%eax),%eax
f0118fc3:	25 ff 0f 00 00       	and    $0xfff,%eax
f0118fc8:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f0118fce:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0118fd4:	83 e0 04             	and    $0x4,%eax
f0118fd7:	85 c0                	test   %eax,%eax
f0118fd9:	74 17                	je     f0118ff2 <test_kmalloc+0x1220>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f0118fdb:	83 ec 04             	sub    $0x4,%esp
f0118fde:	68 94 ba 13 f0       	push   $0xf013ba94
f0118fe3:	68 d7 00 00 00       	push   $0xd7
f0118fe8:	68 fa b8 13 f0       	push   $0xf013b8fa
f0118fed:	e8 13 72 fe ff       	call   f0100205 <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0118ff2:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0118ff9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118ffc:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f0119002:	72 8b                	jb     f0118f8f <test_kmalloc+0x11bd>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f0119004:	83 ec 0c             	sub    $0xc,%esp
f0119007:	68 de ba 13 f0       	push   $0xf013bade
f011900c:	e8 fd 7c fe ff       	call   f0100d0e <cprintf>
f0119011:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f0119014:	83 ec 0c             	sub    $0xc,%esp
f0119017:	68 e8 ba 13 f0       	push   $0xf013bae8
f011901c:	e8 ed 7c fe ff       	call   f0100d0e <cprintf>
f0119021:	83 c4 10             	add    $0x10,%esp

	return 1;
f0119024:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0119029:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011902c:	5b                   	pop    %ebx
f011902d:	5f                   	pop    %edi
f011902e:	5d                   	pop    %ebp
f011902f:	c3                   	ret    

f0119030 <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f0119030:	55                   	push   %ebp
f0119031:	89 e5                	mov    %esp,%ebp
f0119033:	57                   	push   %edi
f0119034:	53                   	push   %ebx
f0119035:	81 ec 70 04 00 00    	sub    $0x470,%esp
	cprintf("==============================================\n");
f011903b:	83 ec 0c             	sub    $0xc,%esp
f011903e:	68 3c b8 13 f0       	push   $0xf013b83c
f0119043:	e8 c6 7c fe ff       	call   f0100d0e <cprintf>
f0119048:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011904b:	83 ec 0c             	sub    $0xc,%esp
f011904e:	68 6c b8 13 f0       	push   $0xf013b86c
f0119053:	e8 b6 7c fe ff       	call   f0100d0e <cprintf>
f0119058:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011905b:	83 ec 0c             	sub    $0xc,%esp
f011905e:	68 3c b8 13 f0       	push   $0xf013b83c
f0119063:	e8 a6 7c fe ff       	call   f0100d0e <cprintf>
f0119068:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011906b:	8d 95 88 fb ff ff    	lea    -0x478(%ebp),%edx
f0119071:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f0119076:	b8 00 00 00 00       	mov    $0x0,%eax
f011907b:	89 d7                	mov    %edx,%edi
f011907d:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f011907f:	83 ec 0c             	sub    $0xc,%esp
f0119082:	68 24 bb 13 f0       	push   $0xf013bb24
f0119087:	e8 82 7c fe ff       	call   f0100d0e <cprintf>
f011908c:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011908f:	e8 03 41 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0119094:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f0119097:	e8 2c ad fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011909c:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f011909f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01190a6:	eb 1f                	jmp    f01190c7 <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f01190a8:	83 ec 0c             	sub    $0xc,%esp
f01190ab:	68 00 00 20 00       	push   $0x200000
f01190b0:	e8 d6 ec fe ff       	call   f0107d8b <kmalloc>
f01190b5:	83 c4 10             	add    $0x10,%esp
f01190b8:	89 c2                	mov    %eax,%edx
f01190ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01190bd:	89 94 85 88 fb ff ff 	mov    %edx,-0x478(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f01190c4:	ff 45 f4             	incl   -0xc(%ebp)
f01190c7:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f01190cb:	7e db                	jle    f01190a8 <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);
f01190cd:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f01190d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01190d7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01190dc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01190df:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01190e2:	ba 00 00 00 00       	mov    $0x0,%edx
f01190e7:	f7 75 e8             	divl   -0x18(%ebp)
f01190ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01190ed:	29 d0                	sub    %edx,%eax
f01190ef:	89 c1                	mov    %eax,%ecx
f01190f1:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f01190f8:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01190fd:	0f b6 d0             	movzbl %al,%edx
f0119100:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0119103:	01 d0                	add    %edx,%eax
f0119105:	48                   	dec    %eax
f0119106:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0119109:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011910c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119111:	f7 75 e0             	divl   -0x20(%ebp)
f0119114:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0119117:	29 d0                	sub    %edx,%eax
f0119119:	01 c1                	add    %eax,%ecx
f011911b:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f0119122:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0119127:	0f b6 c0             	movzbl %al,%eax
f011912a:	c1 e0 04             	shl    $0x4,%eax
f011912d:	89 c2                	mov    %eax,%edx
f011912f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0119132:	01 d0                	add    %edx,%eax
f0119134:	48                   	dec    %eax
f0119135:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0119138:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011913b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119140:	f7 75 d8             	divl   -0x28(%ebp)
f0119143:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0119146:	29 d0                	sub    %edx,%eax
f0119148:	01 c8                	add    %ecx,%eax
f011914a:	ba 00 b0 1f 00       	mov    $0x1fb000,%edx
f011914f:	29 c2                	sub    %eax,%edx
f0119151:	89 d0                	mov    %edx,%eax
f0119153:	83 ec 0c             	sub    $0xc,%esp
f0119156:	50                   	push   %eax
f0119157:	e8 2f ec fe ff       	call   f0107d8b <kmalloc>
f011915c:	83 c4 10             	add    $0x10,%esp
f011915f:	89 85 c4 fc ff ff    	mov    %eax,-0x33c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0119165:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f011916b:	89 c1                	mov    %eax,%ecx
f011916d:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f0119174:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0119177:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011917c:	89 45 cc             	mov    %eax,-0x34(%ebp)
f011917f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0119182:	ba 00 00 00 00       	mov    $0x0,%edx
f0119187:	f7 75 d0             	divl   -0x30(%ebp)
f011918a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011918d:	29 d0                	sub    %edx,%eax
f011918f:	89 c3                	mov    %eax,%ebx
f0119191:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0119198:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011919d:	0f b6 d0             	movzbl %al,%edx
f01191a0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01191a3:	01 d0                	add    %edx,%eax
f01191a5:	48                   	dec    %eax
f01191a6:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f01191a9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01191ac:	ba 00 00 00 00       	mov    $0x0,%edx
f01191b1:	f7 75 c8             	divl   -0x38(%ebp)
f01191b4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01191b7:	29 d0                	sub    %edx,%eax
f01191b9:	01 c3                	add    %eax,%ebx
f01191bb:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01191c2:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01191c7:	0f b6 c0             	movzbl %al,%eax
f01191ca:	c1 e0 04             	shl    $0x4,%eax
f01191cd:	89 c2                	mov    %eax,%edx
f01191cf:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01191d2:	01 d0                	add    %edx,%eax
f01191d4:	48                   	dec    %eax
f01191d5:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01191d8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01191db:	ba 00 00 00 00       	mov    $0x0,%edx
f01191e0:	f7 75 c0             	divl   -0x40(%ebp)
f01191e3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01191e6:	29 d0                	sub    %edx,%eax
f01191e8:	01 d8                	add    %ebx,%eax
f01191ea:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01191ef:	39 c1                	cmp    %eax,%ecx
f01191f1:	0f 85 ed 04 00 00    	jne    f01196e4 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f01191f7:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f01191fd:	89 c1                	mov    %eax,%ecx
f01191ff:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0119206:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119209:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011920e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0119211:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119214:	ba 00 00 00 00       	mov    $0x0,%edx
f0119219:	f7 75 b8             	divl   -0x48(%ebp)
f011921c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011921f:	29 d0                	sub    %edx,%eax
f0119221:	89 c3                	mov    %eax,%ebx
f0119223:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f011922a:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011922f:	0f b6 d0             	movzbl %al,%edx
f0119232:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119235:	01 d0                	add    %edx,%eax
f0119237:	48                   	dec    %eax
f0119238:	89 45 ac             	mov    %eax,-0x54(%ebp)
f011923b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011923e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119243:	f7 75 b0             	divl   -0x50(%ebp)
f0119246:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0119249:	29 d0                	sub    %edx,%eax
f011924b:	01 c3                	add    %eax,%ebx
f011924d:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0119254:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0119259:	0f b6 c0             	movzbl %al,%eax
f011925c:	c1 e0 04             	shl    $0x4,%eax
f011925f:	89 c2                	mov    %eax,%edx
f0119261:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0119264:	01 d0                	add    %edx,%eax
f0119266:	48                   	dec    %eax
f0119267:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f011926a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011926d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119272:	f7 75 a8             	divl   -0x58(%ebp)
f0119275:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0119278:	29 d0                	sub    %edx,%eax
f011927a:	01 d8                	add    %ebx,%eax
f011927c:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0119281:	39 c1                	cmp    %eax,%ecx
f0119283:	0f 85 5b 04 00 00    	jne    f01196e4 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0119289:	8b 85 a8 fb ff ff    	mov    -0x458(%ebp),%eax
f011928f:	89 c1                	mov    %eax,%ecx
f0119291:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0119298:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011929b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01192a0:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01192a3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01192a6:	ba 00 00 00 00       	mov    $0x0,%edx
f01192ab:	f7 75 a0             	divl   -0x60(%ebp)
f01192ae:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01192b1:	29 d0                	sub    %edx,%eax
f01192b3:	89 c3                	mov    %eax,%ebx
f01192b5:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01192bc:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01192c1:	0f b6 d0             	movzbl %al,%edx
f01192c4:	8b 45 98             	mov    -0x68(%ebp),%eax
f01192c7:	01 d0                	add    %edx,%eax
f01192c9:	48                   	dec    %eax
f01192ca:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01192cd:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01192d0:	ba 00 00 00 00       	mov    $0x0,%edx
f01192d5:	f7 75 98             	divl   -0x68(%ebp)
f01192d8:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01192db:	29 d0                	sub    %edx,%eax
f01192dd:	01 c3                	add    %eax,%ebx
f01192df:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01192e6:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01192eb:	0f b6 c0             	movzbl %al,%eax
f01192ee:	c1 e0 04             	shl    $0x4,%eax
f01192f1:	89 c2                	mov    %eax,%edx
f01192f3:	8b 45 90             	mov    -0x70(%ebp),%eax
f01192f6:	01 d0                	add    %edx,%eax
f01192f8:	48                   	dec    %eax
f01192f9:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01192fc:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01192ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0119304:	f7 75 90             	divl   -0x70(%ebp)
f0119307:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011930a:	29 d0                	sub    %edx,%eax
f011930c:	01 d8                	add    %ebx,%eax
f011930e:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0119313:	39 c1                	cmp    %eax,%ecx
f0119315:	0f 85 c9 03 00 00    	jne    f01196e4 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011931b:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f0119321:	89 c1                	mov    %eax,%ecx
f0119323:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f011932a:	8b 45 88             	mov    -0x78(%ebp),%eax
f011932d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119332:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0119335:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0119338:	ba 00 00 00 00       	mov    $0x0,%edx
f011933d:	f7 75 88             	divl   -0x78(%ebp)
f0119340:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0119343:	29 d0                	sub    %edx,%eax
f0119345:	89 c3                	mov    %eax,%ebx
f0119347:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f011934e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0119353:	0f b6 d0             	movzbl %al,%edx
f0119356:	8b 45 80             	mov    -0x80(%ebp),%eax
f0119359:	01 d0                	add    %edx,%eax
f011935b:	48                   	dec    %eax
f011935c:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0119362:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0119368:	ba 00 00 00 00       	mov    $0x0,%edx
f011936d:	f7 75 80             	divl   -0x80(%ebp)
f0119370:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0119376:	29 d0                	sub    %edx,%eax
f0119378:	01 c3                	add    %eax,%ebx
f011937a:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0119381:	10 00 00 
f0119384:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0119389:	0f b6 c0             	movzbl %al,%eax
f011938c:	c1 e0 04             	shl    $0x4,%eax
f011938f:	89 c2                	mov    %eax,%edx
f0119391:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0119397:	01 d0                	add    %edx,%eax
f0119399:	48                   	dec    %eax
f011939a:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01193a0:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01193a6:	ba 00 00 00 00       	mov    $0x0,%edx
f01193ab:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01193b1:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01193b7:	29 d0                	sub    %edx,%eax
f01193b9:	01 d8                	add    %ebx,%eax
f01193bb:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f01193c0:	39 c1                	cmp    %eax,%ecx
f01193c2:	0f 85 1c 03 00 00    	jne    f01196e4 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f01193c8:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f01193ce:	89 c1                	mov    %eax,%ecx
f01193d0:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01193d7:	10 00 00 
f01193da:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01193e0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01193e5:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01193eb:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01193f1:	ba 00 00 00 00       	mov    $0x0,%edx
f01193f6:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01193fc:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0119402:	29 d0                	sub    %edx,%eax
f0119404:	89 c3                	mov    %eax,%ebx
f0119406:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f011940d:	10 00 00 
f0119410:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0119415:	0f b6 d0             	movzbl %al,%edx
f0119418:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011941e:	01 d0                	add    %edx,%eax
f0119420:	48                   	dec    %eax
f0119421:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0119427:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011942d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119432:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0119438:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011943e:	29 d0                	sub    %edx,%eax
f0119440:	01 c3                	add    %eax,%ebx
f0119442:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0119449:	10 00 00 
f011944c:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0119451:	0f b6 c0             	movzbl %al,%eax
f0119454:	c1 e0 04             	shl    $0x4,%eax
f0119457:	89 c2                	mov    %eax,%edx
f0119459:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011945f:	01 d0                	add    %edx,%eax
f0119461:	48                   	dec    %eax
f0119462:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0119468:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011946e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119473:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0119479:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011947f:	29 d0                	sub    %edx,%eax
f0119481:	01 d8                	add    %ebx,%eax
f0119483:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0119488:	39 c1                	cmp    %eax,%ecx
f011948a:	0f 85 54 02 00 00    	jne    f01196e4 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f0119490:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f0119496:	89 c1                	mov    %eax,%ecx
f0119498:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f011949f:	10 00 00 
f01194a2:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01194a8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01194ad:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01194b3:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01194b9:	ba 00 00 00 00       	mov    $0x0,%edx
f01194be:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01194c4:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01194ca:	29 d0                	sub    %edx,%eax
f01194cc:	89 c3                	mov    %eax,%ebx
f01194ce:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01194d5:	10 00 00 
f01194d8:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01194dd:	0f b6 d0             	movzbl %al,%edx
f01194e0:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01194e6:	01 d0                	add    %edx,%eax
f01194e8:	48                   	dec    %eax
f01194e9:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01194ef:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01194f5:	ba 00 00 00 00       	mov    $0x0,%edx
f01194fa:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0119500:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0119506:	29 d0                	sub    %edx,%eax
f0119508:	01 c3                	add    %eax,%ebx
f011950a:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0119511:	10 00 00 
f0119514:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0119519:	0f b6 c0             	movzbl %al,%eax
f011951c:	c1 e0 04             	shl    $0x4,%eax
f011951f:	89 c2                	mov    %eax,%edx
f0119521:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0119527:	01 d0                	add    %edx,%eax
f0119529:	48                   	dec    %eax
f011952a:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0119530:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0119536:	ba 00 00 00 00       	mov    $0x0,%edx
f011953b:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0119541:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0119547:	29 d0                	sub    %edx,%eax
f0119549:	01 d8                	add    %ebx,%eax
f011954b:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f0119550:	39 c1                	cmp    %eax,%ecx
f0119552:	0f 85 8c 01 00 00    	jne    f01196e4 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f0119558:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f011955e:	89 c1                	mov    %eax,%ecx
f0119560:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0119567:	10 00 00 
f011956a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0119570:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119575:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f011957b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0119581:	ba 00 00 00 00       	mov    $0x0,%edx
f0119586:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f011958c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0119592:	29 d0                	sub    %edx,%eax
f0119594:	89 c3                	mov    %eax,%ebx
f0119596:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f011959d:	10 00 00 
f01195a0:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01195a5:	0f b6 d0             	movzbl %al,%edx
f01195a8:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01195ae:	01 d0                	add    %edx,%eax
f01195b0:	48                   	dec    %eax
f01195b1:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01195b7:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01195bd:	ba 00 00 00 00       	mov    $0x0,%edx
f01195c2:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01195c8:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01195ce:	29 d0                	sub    %edx,%eax
f01195d0:	01 c3                	add    %eax,%ebx
f01195d2:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01195d9:	10 00 00 
f01195dc:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01195e1:	0f b6 c0             	movzbl %al,%eax
f01195e4:	c1 e0 04             	shl    $0x4,%eax
f01195e7:	89 c2                	mov    %eax,%edx
f01195e9:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01195ef:	01 d0                	add    %edx,%eax
f01195f1:	48                   	dec    %eax
f01195f2:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01195f8:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01195fe:	ba 00 00 00 00       	mov    $0x0,%edx
f0119603:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0119609:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011960f:	29 d0                	sub    %edx,%eax
f0119611:	01 d8                	add    %ebx,%eax
f0119613:	2d 00 c0 df 06       	sub    $0x6dfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f0119618:	39 c1                	cmp    %eax,%ecx
f011961a:	0f 85 c4 00 00 00    	jne    f01196e4 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f0119620:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f0119626:	89 c1                	mov    %eax,%ecx
f0119628:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f011962f:	10 00 00 
f0119632:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119638:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011963d:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0119643:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119649:	ba 00 00 00 00       	mov    $0x0,%edx
f011964e:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0119654:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011965a:	29 d0                	sub    %edx,%eax
f011965c:	89 c3                	mov    %eax,%ebx
f011965e:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0119665:	10 00 00 
f0119668:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011966d:	0f b6 d0             	movzbl %al,%edx
f0119670:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0119676:	01 d0                	add    %edx,%eax
f0119678:	48                   	dec    %eax
f0119679:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011967f:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0119685:	ba 00 00 00 00       	mov    $0x0,%edx
f011968a:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0119690:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0119696:	29 d0                	sub    %edx,%eax
f0119698:	01 c3                	add    %eax,%ebx
f011969a:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f01196a1:	10 00 00 
f01196a4:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01196a9:	0f b6 c0             	movzbl %al,%eax
f01196ac:	c1 e0 04             	shl    $0x4,%eax
f01196af:	89 c2                	mov    %eax,%edx
f01196b1:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01196b7:	01 d0                	add    %edx,%eax
f01196b9:	48                   	dec    %eax
f01196ba:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01196c0:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01196c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01196cb:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f01196d1:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01196d7:	29 d0                	sub    %edx,%eax
f01196d9:	01 d8                	add    %ebx,%eax
f01196db:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f01196e0:	39 c1                	cmp    %eax,%ecx
f01196e2:	74 17                	je     f01196fb <test_kmalloc_nextfit+0x6cb>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f01196e4:	83 ec 04             	sub    $0x4,%esp
f01196e7:	68 74 bb 13 f0       	push   $0xf013bb74
f01196ec:	68 03 01 00 00       	push   $0x103
f01196f1:	68 fa b8 13 f0       	push   $0xf013b8fa
f01196f6:	e8 0a 6b fe ff       	call   f0100205 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01196fb:	e8 c8 a6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119700:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119703:	74 17                	je     f011971c <test_kmalloc_nextfit+0x6ec>
f0119705:	83 ec 04             	sub    $0x4,%esp
f0119708:	68 14 b9 13 f0       	push   $0xf013b914
f011970d:	68 05 01 00 00       	push   $0x105
f0119712:	68 fa b8 13 f0       	push   $0xf013b8fa
f0119717:	e8 e9 6a fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f011971c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011971f:	e8 73 3a ff ff       	call   f010d197 <sys_calculate_free_frames>
f0119724:	29 c3                	sub    %eax,%ebx
f0119726:	89 d9                	mov    %ebx,%ecx
f0119728:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011972f:	10 00 00 
f0119732:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0119738:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011973d:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0119743:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0119749:	ba 00 00 00 00       	mov    $0x0,%edx
f011974e:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0119754:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011975a:	29 d0                	sub    %edx,%eax
f011975c:	89 c3                	mov    %eax,%ebx
f011975e:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0119765:	10 00 00 
f0119768:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011976d:	0f b6 d0             	movzbl %al,%edx
f0119770:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0119776:	01 d0                	add    %edx,%eax
f0119778:	48                   	dec    %eax
f0119779:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011977f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0119785:	ba 00 00 00 00       	mov    $0x0,%edx
f011978a:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0119790:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0119796:	29 d0                	sub    %edx,%eax
f0119798:	01 c3                	add    %eax,%ebx
f011979a:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f01197a1:	10 00 00 
f01197a4:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01197a9:	0f b6 c0             	movzbl %al,%eax
f01197ac:	c1 e0 04             	shl    $0x4,%eax
f01197af:	89 c2                	mov    %eax,%edx
f01197b1:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01197b7:	01 d0                	add    %edx,%eax
f01197b9:	48                   	dec    %eax
f01197ba:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f01197c0:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01197c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01197cb:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f01197d1:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01197d7:	29 d0                	sub    %edx,%eax
f01197d9:	01 d8                	add    %ebx,%eax
f01197db:	ba 00 b0 ff 09       	mov    $0x9ffb000,%edx
f01197e0:	29 c2                	sub    %eax,%edx
f01197e2:	89 d0                	mov    %edx,%eax
f01197e4:	c1 e8 0c             	shr    $0xc,%eax
f01197e7:	39 c1                	cmp    %eax,%ecx
f01197e9:	74 17                	je     f0119802 <test_kmalloc_nextfit+0x7d2>
f01197eb:	83 ec 04             	sub    $0x4,%esp
f01197ee:	68 b7 bb 13 f0       	push   $0xf013bbb7
f01197f3:	68 06 01 00 00       	push   $0x106
f01197f8:	68 fa b8 13 f0       	push   $0xf013b8fa
f01197fd:	e8 03 6a fe ff       	call   f0100205 <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f0119802:	e8 c1 a5 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119807:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011980a:	e8 88 39 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011980f:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f0119812:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f0119818:	83 ec 0c             	sub    $0xc,%esp
f011981b:	50                   	push   %eax
f011981c:	e8 35 e6 fe ff       	call   f0107e56 <kfree>
f0119821:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f0119824:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f011982a:	83 ec 0c             	sub    $0xc,%esp
f011982d:	50                   	push   %eax
f011982e:	e8 23 e6 fe ff       	call   f0107e56 <kfree>
f0119833:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f0119836:	8b 85 94 fb ff ff    	mov    -0x46c(%ebp),%eax
f011983c:	83 ec 0c             	sub    $0xc,%esp
f011983f:	50                   	push   %eax
f0119840:	e8 11 e6 fe ff       	call   f0107e56 <kfree>
f0119845:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f0119848:	8b 85 9c fb ff ff    	mov    -0x464(%ebp),%eax
f011984e:	83 ec 0c             	sub    $0xc,%esp
f0119851:	50                   	push   %eax
f0119852:	e8 ff e5 fe ff       	call   f0107e56 <kfree>
f0119857:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f011985a:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f0119860:	83 ec 0c             	sub    $0xc,%esp
f0119863:	50                   	push   %eax
f0119864:	e8 ed e5 fe ff       	call   f0107e56 <kfree>
f0119869:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011986c:	8b 85 b8 fb ff ff    	mov    -0x448(%ebp),%eax
f0119872:	83 ec 0c             	sub    $0xc,%esp
f0119875:	50                   	push   %eax
f0119876:	e8 db e5 fe ff       	call   f0107e56 <kfree>
f011987b:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011987e:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f0119884:	83 ec 0c             	sub    $0xc,%esp
f0119887:	50                   	push   %eax
f0119888:	e8 c9 e5 fe ff       	call   f0107e56 <kfree>
f011988d:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f0119890:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f0119896:	83 ec 0c             	sub    $0xc,%esp
f0119899:	50                   	push   %eax
f011989a:	e8 b7 e5 fe ff       	call   f0107e56 <kfree>
f011989f:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f01198a2:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f01198a8:	83 ec 0c             	sub    $0xc,%esp
f01198ab:	50                   	push   %eax
f01198ac:	e8 a5 e5 fe ff       	call   f0107e56 <kfree>
f01198b1:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f01198b4:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f01198ba:	83 ec 0c             	sub    $0xc,%esp
f01198bd:	50                   	push   %eax
f01198be:	e8 93 e5 fe ff       	call   f0107e56 <kfree>
f01198c3:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01198c6:	e8 fd a4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01198cb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01198ce:	74 17                	je     f01198e7 <test_kmalloc_nextfit+0x8b7>
f01198d0:	83 ec 04             	sub    $0x4,%esp
f01198d3:	68 14 b9 13 f0       	push   $0xf013b914
f01198d8:	68 17 01 00 00       	push   $0x117
f01198dd:	68 fa b8 13 f0       	push   $0xf013b8fa
f01198e2:	e8 1e 69 fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f01198e7:	e8 ab 38 ff ff       	call   f010d197 <sys_calculate_free_frames>
f01198ec:	89 c2                	mov    %eax,%edx
f01198ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01198f1:	89 d1                	mov    %edx,%ecx
f01198f3:	29 c1                	sub    %eax,%ecx
f01198f5:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f01198fc:	10 00 00 
f01198ff:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0119905:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011990a:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0119910:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0119916:	ba 00 00 00 00       	mov    $0x0,%edx
f011991b:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0119921:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0119927:	29 d0                	sub    %edx,%eax
f0119929:	89 c3                	mov    %eax,%ebx
f011992b:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0119932:	10 00 00 
f0119935:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011993a:	0f b6 d0             	movzbl %al,%edx
f011993d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0119943:	01 d0                	add    %edx,%eax
f0119945:	48                   	dec    %eax
f0119946:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011994c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0119952:	ba 00 00 00 00       	mov    $0x0,%edx
f0119957:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011995d:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0119963:	29 d0                	sub    %edx,%eax
f0119965:	01 c3                	add    %eax,%ebx
f0119967:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011996e:	10 00 00 
f0119971:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0119976:	0f b6 c0             	movzbl %al,%eax
f0119979:	c1 e0 04             	shl    $0x4,%eax
f011997c:	89 c2                	mov    %eax,%edx
f011997e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0119984:	01 d0                	add    %edx,%eax
f0119986:	48                   	dec    %eax
f0119987:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011998d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0119993:	ba 00 00 00 00       	mov    $0x0,%edx
f0119998:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011999e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01199a4:	29 d0                	sub    %edx,%eax
f01199a6:	01 d8                	add    %ebx,%eax
f01199a8:	ba 00 b0 3f 01       	mov    $0x13fb000,%edx
f01199ad:	29 c2                	sub    %eax,%edx
f01199af:	89 d0                	mov    %edx,%eax
f01199b1:	c1 e8 0c             	shr    $0xc,%eax
f01199b4:	39 c1                	cmp    %eax,%ecx
f01199b6:	74 17                	je     f01199cf <test_kmalloc_nextfit+0x99f>
f01199b8:	83 ec 04             	sub    $0x4,%esp
f01199bb:	68 c8 bb 13 f0       	push   $0xf013bbc8
f01199c0:	68 18 01 00 00       	push   $0x118
f01199c5:	68 fa b8 13 f0       	push   $0xf013b8fa
f01199ca:	e8 36 68 fe ff       	call   f0100205 <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f01199cf:	e8 f4 a3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01199d4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01199d7:	e8 bb 37 ff ff       	call   f010d197 <sys_calculate_free_frames>
f01199dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f01199df:	83 ec 0c             	sub    $0xc,%esp
f01199e2:	68 00 fc 0f 00       	push   $0xffc00
f01199e7:	e8 9f e3 fe ff       	call   f0107d8b <kmalloc>
f01199ec:	83 c4 10             	add    $0x10,%esp
f01199ef:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f01199f5:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f01199fc:	10 00 00 
f01199ff:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0119a05:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119a0a:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0119a10:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0119a16:	ba 00 00 00 00       	mov    $0x0,%edx
f0119a1b:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0119a21:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0119a27:	29 d0                	sub    %edx,%eax
f0119a29:	89 c1                	mov    %eax,%ecx
f0119a2b:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0119a32:	10 00 00 
f0119a35:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0119a3a:	0f b6 d0             	movzbl %al,%edx
f0119a3d:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0119a43:	01 d0                	add    %edx,%eax
f0119a45:	48                   	dec    %eax
f0119a46:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0119a4c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0119a52:	ba 00 00 00 00       	mov    $0x0,%edx
f0119a57:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0119a5d:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0119a63:	29 d0                	sub    %edx,%eax
f0119a65:	01 c1                	add    %eax,%ecx
f0119a67:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0119a6e:	10 00 00 
f0119a71:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0119a76:	0f b6 c0             	movzbl %al,%eax
f0119a79:	c1 e0 04             	shl    $0x4,%eax
f0119a7c:	89 c2                	mov    %eax,%edx
f0119a7e:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0119a84:	01 d0                	add    %edx,%eax
f0119a86:	48                   	dec    %eax
f0119a87:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0119a8d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0119a93:	ba 00 00 00 00       	mov    $0x0,%edx
f0119a98:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0119a9e:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0119aa4:	29 d0                	sub    %edx,%eax
f0119aa6:	01 c8                	add    %ecx,%eax
f0119aa8:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f0119aae:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119ab4:	39 c2                	cmp    %eax,%edx
f0119ab6:	74 17                	je     f0119acf <test_kmalloc_nextfit+0xa9f>
		panic("Next Fit not working correctly");
f0119ab8:	83 ec 04             	sub    $0x4,%esp
f0119abb:	68 08 bc 13 f0       	push   $0xf013bc08
f0119ac0:	68 1f 01 00 00       	push   $0x11f
f0119ac5:	68 fa b8 13 f0       	push   $0xf013b8fa
f0119aca:	e8 36 67 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119acf:	e8 f4 a2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119ad4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119ad7:	74 17                	je     f0119af0 <test_kmalloc_nextfit+0xac0>
f0119ad9:	83 ec 04             	sub    $0x4,%esp
f0119adc:	68 14 b9 13 f0       	push   $0xf013b914
f0119ae1:	68 20 01 00 00       	push   $0x120
f0119ae6:	68 fa b8 13 f0       	push   $0xf013b8fa
f0119aeb:	e8 15 67 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119af0:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119af3:	e8 9f 36 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0119af8:	29 c3                	sub    %eax,%ebx
f0119afa:	89 d8                	mov    %ebx,%eax
f0119afc:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119b01:	74 17                	je     f0119b1a <test_kmalloc_nextfit+0xaea>
f0119b03:	83 ec 04             	sub    $0x4,%esp
f0119b06:	68 b7 bb 13 f0       	push   $0xf013bbb7
f0119b0b:	68 21 01 00 00       	push   $0x121
f0119b10:	68 fa b8 13 f0       	push   $0xf013b8fa
f0119b15:	e8 eb 66 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119b1a:	e8 a9 a2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119b1f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119b22:	e8 70 36 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0119b27:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f0119b2a:	83 ec 0c             	sub    $0xc,%esp
f0119b2d:	68 00 04 00 00       	push   $0x400
f0119b32:	e8 54 e2 fe ff       	call   f0107d8b <kmalloc>
f0119b37:	83 c4 10             	add    $0x10,%esp
f0119b3a:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f0119b40:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0119b47:	10 00 00 
f0119b4a:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0119b50:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119b55:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0119b5b:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0119b61:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b66:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0119b6c:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0119b72:	29 d0                	sub    %edx,%eax
f0119b74:	89 c1                	mov    %eax,%ecx
f0119b76:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0119b7d:	10 00 00 
f0119b80:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0119b85:	0f b6 d0             	movzbl %al,%edx
f0119b88:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0119b8e:	01 d0                	add    %edx,%eax
f0119b90:	48                   	dec    %eax
f0119b91:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0119b97:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0119b9d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ba2:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0119ba8:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0119bae:	29 d0                	sub    %edx,%eax
f0119bb0:	01 c1                	add    %eax,%ecx
f0119bb2:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0119bb9:	10 00 00 
f0119bbc:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0119bc1:	0f b6 c0             	movzbl %al,%eax
f0119bc4:	c1 e0 04             	shl    $0x4,%eax
f0119bc7:	89 c2                	mov    %eax,%edx
f0119bc9:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0119bcf:	01 d0                	add    %edx,%eax
f0119bd1:	48                   	dec    %eax
f0119bd2:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0119bd8:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0119bde:	ba 00 00 00 00       	mov    $0x0,%edx
f0119be3:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0119be9:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0119bef:	29 d0                	sub    %edx,%eax
f0119bf1:	01 c8                	add    %ecx,%eax
f0119bf3:	8d 90 00 40 10 f6    	lea    -0x9efc000(%eax),%edx
f0119bf9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119bff:	39 c2                	cmp    %eax,%edx
f0119c01:	74 17                	je     f0119c1a <test_kmalloc_nextfit+0xbea>
		panic("Next Fit not working correctly");
f0119c03:	83 ec 04             	sub    $0x4,%esp
f0119c06:	68 08 bc 13 f0       	push   $0xf013bc08
f0119c0b:	68 27 01 00 00       	push   $0x127
f0119c10:	68 fa b8 13 f0       	push   $0xf013b8fa
f0119c15:	e8 eb 65 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119c1a:	e8 a9 a1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119c1f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119c22:	74 17                	je     f0119c3b <test_kmalloc_nextfit+0xc0b>
f0119c24:	83 ec 04             	sub    $0x4,%esp
f0119c27:	68 14 b9 13 f0       	push   $0xf013b914
f0119c2c:	68 28 01 00 00       	push   $0x128
f0119c31:	68 fa b8 13 f0       	push   $0xf013b8fa
f0119c36:	e8 ca 65 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0119c3b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119c3e:	e8 54 35 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0119c43:	29 c3                	sub    %eax,%ebx
f0119c45:	89 d8                	mov    %ebx,%eax
f0119c47:	83 f8 01             	cmp    $0x1,%eax
f0119c4a:	74 17                	je     f0119c63 <test_kmalloc_nextfit+0xc33>
f0119c4c:	83 ec 04             	sub    $0x4,%esp
f0119c4f:	68 b7 bb 13 f0       	push   $0xf013bbb7
f0119c54:	68 29 01 00 00       	push   $0x129
f0119c59:	68 fa b8 13 f0       	push   $0xf013b8fa
f0119c5e:	e8 a2 65 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119c63:	e8 60 a1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119c68:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119c6b:	e8 27 35 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0119c70:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f0119c73:	83 ec 0c             	sub    $0xc,%esp
f0119c76:	68 00 00 50 00       	push   $0x500000
f0119c7b:	e8 0b e1 fe ff       	call   f0107d8b <kmalloc>
f0119c80:	83 c4 10             	add    $0x10,%esp
f0119c83:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f0119c89:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f0119c90:	10 00 00 
f0119c93:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0119c99:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119c9e:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f0119ca4:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0119caa:	ba 00 00 00 00       	mov    $0x0,%edx
f0119caf:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f0119cb5:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0119cbb:	29 d0                	sub    %edx,%eax
f0119cbd:	89 c1                	mov    %eax,%ecx
f0119cbf:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f0119cc6:	10 00 00 
f0119cc9:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0119cce:	0f b6 d0             	movzbl %al,%edx
f0119cd1:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0119cd7:	01 d0                	add    %edx,%eax
f0119cd9:	48                   	dec    %eax
f0119cda:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f0119ce0:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0119ce6:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ceb:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f0119cf1:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0119cf7:	29 d0                	sub    %edx,%eax
f0119cf9:	01 c1                	add    %eax,%ecx
f0119cfb:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f0119d02:	10 00 00 
f0119d05:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0119d0a:	0f b6 c0             	movzbl %al,%eax
f0119d0d:	c1 e0 04             	shl    $0x4,%eax
f0119d10:	89 c2                	mov    %eax,%edx
f0119d12:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0119d18:	01 d0                	add    %edx,%eax
f0119d1a:	48                   	dec    %eax
f0119d1b:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f0119d21:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0119d27:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d2c:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f0119d32:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0119d38:	29 d0                	sub    %edx,%eax
f0119d3a:	01 c8                	add    %ecx,%eax
f0119d3c:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f0119d42:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119d48:	39 c2                	cmp    %eax,%edx
f0119d4a:	74 17                	je     f0119d63 <test_kmalloc_nextfit+0xd33>
		panic("Next Fit not working correctly");
f0119d4c:	83 ec 04             	sub    $0x4,%esp
f0119d4f:	68 08 bc 13 f0       	push   $0xf013bc08
f0119d54:	68 2f 01 00 00       	push   $0x12f
f0119d59:	68 fa b8 13 f0       	push   $0xf013b8fa
f0119d5e:	e8 a2 64 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119d63:	e8 60 a0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119d68:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119d6b:	74 17                	je     f0119d84 <test_kmalloc_nextfit+0xd54>
f0119d6d:	83 ec 04             	sub    $0x4,%esp
f0119d70:	68 14 b9 13 f0       	push   $0xf013b914
f0119d75:	68 30 01 00 00       	push   $0x130
f0119d7a:	68 fa b8 13 f0       	push   $0xf013b8fa
f0119d7f:	e8 81 64 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119d84:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119d87:	e8 0b 34 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0119d8c:	29 c3                	sub    %eax,%ebx
f0119d8e:	89 d8                	mov    %ebx,%eax
f0119d90:	3d 00 05 00 00       	cmp    $0x500,%eax
f0119d95:	74 17                	je     f0119dae <test_kmalloc_nextfit+0xd7e>
f0119d97:	83 ec 04             	sub    $0x4,%esp
f0119d9a:	68 b7 bb 13 f0       	push   $0xf013bbb7
f0119d9f:	68 31 01 00 00       	push   $0x131
f0119da4:	68 fa b8 13 f0       	push   $0xf013b8fa
f0119da9:	e8 57 64 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119dae:	e8 15 a0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119db3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119db6:	e8 dc 33 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0119dbb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f0119dbe:	83 ec 0c             	sub    $0xc,%esp
f0119dc1:	68 00 00 10 00       	push   $0x100000
f0119dc6:	e8 c0 df fe ff       	call   f0107d8b <kmalloc>
f0119dcb:	83 c4 10             	add    $0x10,%esp
f0119dce:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f0119dd4:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f0119ddb:	10 00 00 
f0119dde:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0119de4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119de9:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f0119def:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0119df5:	ba 00 00 00 00       	mov    $0x0,%edx
f0119dfa:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f0119e00:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0119e06:	29 d0                	sub    %edx,%eax
f0119e08:	89 c1                	mov    %eax,%ecx
f0119e0a:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f0119e11:	10 00 00 
f0119e14:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0119e19:	0f b6 d0             	movzbl %al,%edx
f0119e1c:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0119e22:	01 d0                	add    %edx,%eax
f0119e24:	48                   	dec    %eax
f0119e25:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f0119e2b:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0119e31:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e36:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f0119e3c:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0119e42:	29 d0                	sub    %edx,%eax
f0119e44:	01 c1                	add    %eax,%ecx
f0119e46:	c7 85 84 fe ff ff 00 	movl   $0x1000,-0x17c(%ebp)
f0119e4d:	10 00 00 
f0119e50:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0119e55:	0f b6 c0             	movzbl %al,%eax
f0119e58:	c1 e0 04             	shl    $0x4,%eax
f0119e5b:	89 c2                	mov    %eax,%edx
f0119e5d:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0119e63:	01 d0                	add    %edx,%eax
f0119e65:	48                   	dec    %eax
f0119e66:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
f0119e6c:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0119e72:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e77:	f7 b5 84 fe ff ff    	divl   -0x17c(%ebp)
f0119e7d:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0119e83:	29 d0                	sub    %edx,%eax
f0119e85:	01 c8                	add    %ecx,%eax
f0119e87:	8d 90 00 40 90 f7    	lea    -0x86fc000(%eax),%edx
f0119e8d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119e93:	39 c2                	cmp    %eax,%edx
f0119e95:	74 17                	je     f0119eae <test_kmalloc_nextfit+0xe7e>
		panic("Next Fit not working correctly");
f0119e97:	83 ec 04             	sub    $0x4,%esp
f0119e9a:	68 08 bc 13 f0       	push   $0xf013bc08
f0119e9f:	68 37 01 00 00       	push   $0x137
f0119ea4:	68 fa b8 13 f0       	push   $0xf013b8fa
f0119ea9:	e8 57 63 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119eae:	e8 15 9f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119eb3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119eb6:	74 17                	je     f0119ecf <test_kmalloc_nextfit+0xe9f>
f0119eb8:	83 ec 04             	sub    $0x4,%esp
f0119ebb:	68 14 b9 13 f0       	push   $0xf013b914
f0119ec0:	68 38 01 00 00       	push   $0x138
f0119ec5:	68 fa b8 13 f0       	push   $0xf013b8fa
f0119eca:	e8 36 63 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119ecf:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119ed2:	e8 c0 32 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0119ed7:	29 c3                	sub    %eax,%ebx
f0119ed9:	89 d8                	mov    %ebx,%eax
f0119edb:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119ee0:	74 17                	je     f0119ef9 <test_kmalloc_nextfit+0xec9>
f0119ee2:	83 ec 04             	sub    $0x4,%esp
f0119ee5:	68 b7 bb 13 f0       	push   $0xf013bbb7
f0119eea:	68 39 01 00 00       	push   $0x139
f0119eef:	68 fa b8 13 f0       	push   $0xf013b8fa
f0119ef4:	e8 0c 63 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119ef9:	e8 ca 9e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119efe:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119f01:	e8 91 32 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0119f06:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f0119f09:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f0119f0f:	83 ec 0c             	sub    $0xc,%esp
f0119f12:	50                   	push   %eax
f0119f13:	e8 3e df fe ff       	call   f0107e56 <kfree>
f0119f18:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119f1b:	e8 a8 9e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119f20:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119f23:	74 17                	je     f0119f3c <test_kmalloc_nextfit+0xf0c>
f0119f25:	83 ec 04             	sub    $0x4,%esp
f0119f28:	68 14 b9 13 f0       	push   $0xf013b914
f0119f2d:	68 3e 01 00 00       	push   $0x13e
f0119f32:	68 fa b8 13 f0       	push   $0xf013b8fa
f0119f37:	e8 c9 62 fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0119f3c:	e8 56 32 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0119f41:	89 c2                	mov    %eax,%edx
f0119f43:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119f46:	29 c2                	sub    %eax,%edx
f0119f48:	89 d0                	mov    %edx,%eax
f0119f4a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119f4f:	74 17                	je     f0119f68 <test_kmalloc_nextfit+0xf38>
f0119f51:	83 ec 04             	sub    $0x4,%esp
f0119f54:	68 c8 bb 13 f0       	push   $0xf013bbc8
f0119f59:	68 3f 01 00 00       	push   $0x13f
f0119f5e:	68 fa b8 13 f0       	push   $0xf013b8fa
f0119f63:	e8 9d 62 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119f68:	e8 5b 9e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119f6d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119f70:	e8 22 32 ff ff       	call   f010d197 <sys_calculate_free_frames>
f0119f75:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f0119f78:	83 ec 0c             	sub    $0xc,%esp
f0119f7b:	68 00 04 00 00       	push   $0x400
f0119f80:	e8 06 de fe ff       	call   f0107d8b <kmalloc>
f0119f85:	83 c4 10             	add    $0x10,%esp
f0119f88:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f0119f8e:	c7 85 7c fe ff ff 00 	movl   $0x1000,-0x184(%ebp)
f0119f95:	10 00 00 
f0119f98:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0119f9e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119fa3:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
f0119fa9:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0119faf:	ba 00 00 00 00       	mov    $0x0,%edx
f0119fb4:	f7 b5 7c fe ff ff    	divl   -0x184(%ebp)
f0119fba:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0119fc0:	29 d0                	sub    %edx,%eax
f0119fc2:	89 c1                	mov    %eax,%ecx
f0119fc4:	c7 85 74 fe ff ff 00 	movl   $0x1000,-0x18c(%ebp)
f0119fcb:	10 00 00 
f0119fce:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0119fd3:	0f b6 d0             	movzbl %al,%edx
f0119fd6:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0119fdc:	01 d0                	add    %edx,%eax
f0119fde:	48                   	dec    %eax
f0119fdf:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
f0119fe5:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0119feb:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ff0:	f7 b5 74 fe ff ff    	divl   -0x18c(%ebp)
f0119ff6:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0119ffc:	29 d0                	sub    %edx,%eax
f0119ffe:	01 c1                	add    %eax,%ecx
f011a000:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f011a007:	10 00 00 
f011a00a:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011a00f:	0f b6 c0             	movzbl %al,%eax
f011a012:	c1 e0 04             	shl    $0x4,%eax
f011a015:	89 c2                	mov    %eax,%edx
f011a017:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011a01d:	01 d0                	add    %edx,%eax
f011a01f:	48                   	dec    %eax
f011a020:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f011a026:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011a02c:	ba 00 00 00 00       	mov    $0x0,%edx
f011a031:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f011a037:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011a03d:	29 d0                	sub    %edx,%eax
f011a03f:	01 c8                	add    %ecx,%eax
f011a041:	8d 90 00 40 e0 f7    	lea    -0x81fc000(%eax),%edx
f011a047:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a04d:	39 c2                	cmp    %eax,%edx
f011a04f:	74 17                	je     f011a068 <test_kmalloc_nextfit+0x1038>
		panic("Next Fit not working correctly");
f011a051:	83 ec 04             	sub    $0x4,%esp
f011a054:	68 08 bc 13 f0       	push   $0xf013bc08
f011a059:	68 45 01 00 00       	push   $0x145
f011a05e:	68 fa b8 13 f0       	push   $0xf013b8fa
f011a063:	e8 9d 61 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a068:	e8 5b 9d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a06d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a070:	74 17                	je     f011a089 <test_kmalloc_nextfit+0x1059>
f011a072:	83 ec 04             	sub    $0x4,%esp
f011a075:	68 14 b9 13 f0       	push   $0xf013b914
f011a07a:	68 46 01 00 00       	push   $0x146
f011a07f:	68 fa b8 13 f0       	push   $0xf013b8fa
f011a084:	e8 7c 61 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f011a089:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a08c:	e8 06 31 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011a091:	29 c3                	sub    %eax,%ebx
f011a093:	89 d8                	mov    %ebx,%eax
f011a095:	83 f8 01             	cmp    $0x1,%eax
f011a098:	74 17                	je     f011a0b1 <test_kmalloc_nextfit+0x1081>
f011a09a:	83 ec 04             	sub    $0x4,%esp
f011a09d:	68 b7 bb 13 f0       	push   $0xf013bbb7
f011a0a2:	68 47 01 00 00       	push   $0x147
f011a0a7:	68 fa b8 13 f0       	push   $0xf013b8fa
f011a0ac:	e8 54 61 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a0b1:	e8 12 9d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a0b6:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a0b9:	e8 d9 30 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011a0be:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f011a0c1:	83 ec 0c             	sub    $0xc,%esp
f011a0c4:	68 00 e0 1f 00       	push   $0x1fe000
f011a0c9:	e8 bd dc fe ff       	call   f0107d8b <kmalloc>
f011a0ce:	83 c4 10             	add    $0x10,%esp
f011a0d1:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f011a0d7:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f011a0de:	10 00 00 
f011a0e1:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011a0e7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a0ec:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f011a0f2:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011a0f8:	ba 00 00 00 00       	mov    $0x0,%edx
f011a0fd:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f011a103:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011a109:	29 d0                	sub    %edx,%eax
f011a10b:	89 c1                	mov    %eax,%ecx
f011a10d:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f011a114:	10 00 00 
f011a117:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011a11c:	0f b6 d0             	movzbl %al,%edx
f011a11f:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011a125:	01 d0                	add    %edx,%eax
f011a127:	48                   	dec    %eax
f011a128:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f011a12e:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011a134:	ba 00 00 00 00       	mov    $0x0,%edx
f011a139:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f011a13f:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011a145:	29 d0                	sub    %edx,%eax
f011a147:	01 c1                	add    %eax,%ecx
f011a149:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f011a150:	10 00 00 
f011a153:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011a158:	0f b6 c0             	movzbl %al,%eax
f011a15b:	c1 e0 04             	shl    $0x4,%eax
f011a15e:	89 c2                	mov    %eax,%edx
f011a160:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011a166:	01 d0                	add    %edx,%eax
f011a168:	48                   	dec    %eax
f011a169:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f011a16f:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011a175:	ba 00 00 00 00       	mov    $0x0,%edx
f011a17a:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f011a180:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011a186:	29 d0                	sub    %edx,%eax
f011a188:	01 c8                	add    %ecx,%eax
f011a18a:	8d 90 00 50 e0 f7    	lea    -0x81fb000(%eax),%edx
f011a190:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a196:	39 c2                	cmp    %eax,%edx
f011a198:	74 17                	je     f011a1b1 <test_kmalloc_nextfit+0x1181>
		panic("Next Fit not working correctly");
f011a19a:	83 ec 04             	sub    $0x4,%esp
f011a19d:	68 08 bc 13 f0       	push   $0xf013bc08
f011a1a2:	68 4d 01 00 00       	push   $0x14d
f011a1a7:	68 fa b8 13 f0       	push   $0xf013b8fa
f011a1ac:	e8 54 60 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a1b1:	e8 12 9c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a1b6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a1b9:	74 17                	je     f011a1d2 <test_kmalloc_nextfit+0x11a2>
f011a1bb:	83 ec 04             	sub    $0x4,%esp
f011a1be:	68 14 b9 13 f0       	push   $0xf013b914
f011a1c3:	68 4e 01 00 00       	push   $0x14e
f011a1c8:	68 fa b8 13 f0       	push   $0xf013b8fa
f011a1cd:	e8 33 60 fe ff       	call   f0100205 <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a1d2:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a1d5:	e8 bd 2f ff ff       	call   f010d197 <sys_calculate_free_frames>
f011a1da:	29 c3                	sub    %eax,%ebx
f011a1dc:	89 d8                	mov    %ebx,%eax
f011a1de:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f011a1e3:	74 17                	je     f011a1fc <test_kmalloc_nextfit+0x11cc>
f011a1e5:	83 ec 04             	sub    $0x4,%esp
f011a1e8:	68 b7 bb 13 f0       	push   $0xf013bbb7
f011a1ed:	68 50 01 00 00       	push   $0x150
f011a1f2:	68 fa b8 13 f0       	push   $0xf013b8fa
f011a1f7:	e8 09 60 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a1fc:	e8 c7 9b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a201:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a204:	e8 8e 2f ff ff       	call   f010d197 <sys_calculate_free_frames>
f011a209:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f011a20c:	83 ec 0c             	sub    $0xc,%esp
f011a20f:	68 00 00 08 00       	push   $0x80000
f011a214:	e8 72 db fe ff       	call   f0107d8b <kmalloc>
f011a219:	83 c4 10             	add    $0x10,%esp
f011a21c:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f011a222:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f011a229:	10 00 00 
f011a22c:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011a232:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a237:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f011a23d:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011a243:	ba 00 00 00 00       	mov    $0x0,%edx
f011a248:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f011a24e:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011a254:	29 d0                	sub    %edx,%eax
f011a256:	89 c1                	mov    %eax,%ecx
f011a258:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f011a25f:	10 00 00 
f011a262:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011a267:	0f b6 d0             	movzbl %al,%edx
f011a26a:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011a270:	01 d0                	add    %edx,%eax
f011a272:	48                   	dec    %eax
f011a273:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f011a279:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011a27f:	ba 00 00 00 00       	mov    $0x0,%edx
f011a284:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f011a28a:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011a290:	29 d0                	sub    %edx,%eax
f011a292:	01 c1                	add    %eax,%ecx
f011a294:	c7 85 3c fe ff ff 00 	movl   $0x1000,-0x1c4(%ebp)
f011a29b:	10 00 00 
f011a29e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011a2a3:	0f b6 c0             	movzbl %al,%eax
f011a2a6:	c1 e0 04             	shl    $0x4,%eax
f011a2a9:	89 c2                	mov    %eax,%edx
f011a2ab:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011a2b1:	01 d0                	add    %edx,%eax
f011a2b3:	48                   	dec    %eax
f011a2b4:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
f011a2ba:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011a2c0:	ba 00 00 00 00       	mov    $0x0,%edx
f011a2c5:	f7 b5 3c fe ff ff    	divl   -0x1c4(%ebp)
f011a2cb:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011a2d1:	29 d0                	sub    %edx,%eax
f011a2d3:	01 c8                	add    %ecx,%eax
f011a2d5:	8d 90 00 40 80 f8    	lea    -0x77fc000(%eax),%edx
f011a2db:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a2e1:	39 c2                	cmp    %eax,%edx
f011a2e3:	74 17                	je     f011a2fc <test_kmalloc_nextfit+0x12cc>
		panic("Next Fit not working correctly");
f011a2e5:	83 ec 04             	sub    $0x4,%esp
f011a2e8:	68 08 bc 13 f0       	push   $0xf013bc08
f011a2ed:	68 56 01 00 00       	push   $0x156
f011a2f2:	68 fa b8 13 f0       	push   $0xf013b8fa
f011a2f7:	e8 09 5f fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a2fc:	e8 c7 9a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a301:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a304:	74 17                	je     f011a31d <test_kmalloc_nextfit+0x12ed>
f011a306:	83 ec 04             	sub    $0x4,%esp
f011a309:	68 14 b9 13 f0       	push   $0xf013b914
f011a30e:	68 57 01 00 00       	push   $0x157
f011a313:	68 fa b8 13 f0       	push   $0xf013b8fa
f011a318:	e8 e8 5e fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a31d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a320:	e8 72 2e ff ff       	call   f010d197 <sys_calculate_free_frames>
f011a325:	29 c3                	sub    %eax,%ebx
f011a327:	89 d8                	mov    %ebx,%eax
f011a329:	3d 80 00 00 00       	cmp    $0x80,%eax
f011a32e:	74 17                	je     f011a347 <test_kmalloc_nextfit+0x1317>
f011a330:	83 ec 04             	sub    $0x4,%esp
f011a333:	68 b7 bb 13 f0       	push   $0xf013bbb7
f011a338:	68 58 01 00 00       	push   $0x158
f011a33d:	68 fa b8 13 f0       	push   $0xf013b8fa
f011a342:	e8 be 5e fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE1: (next fit without looping back) is succeeded...\n") ;
f011a347:	83 ec 0c             	sub    $0xc,%esp
f011a34a:	68 28 bc 13 f0       	push   $0xf013bc28
f011a34f:	e8 ba 69 fe ff       	call   f0100d0e <cprintf>
f011a354:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f011a357:	e8 6c 9a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a35c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a35f:	e8 33 2e ff ff       	call   f010d197 <sys_calculate_free_frames>
f011a364:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f011a367:	83 ec 0c             	sub    $0xc,%esp
f011a36a:	68 00 00 38 00       	push   $0x380000
f011a36f:	e8 17 da fe ff       	call   f0107d8b <kmalloc>
f011a374:	83 c4 10             	add    $0x10,%esp
f011a377:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011a37d:	c7 85 34 fe ff ff 00 	movl   $0x1000,-0x1cc(%ebp)
f011a384:	10 00 00 
f011a387:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011a38d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a392:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
f011a398:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f011a39e:	ba 00 00 00 00       	mov    $0x0,%edx
f011a3a3:	f7 b5 34 fe ff ff    	divl   -0x1cc(%ebp)
f011a3a9:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f011a3af:	29 d0                	sub    %edx,%eax
f011a3b1:	89 c1                	mov    %eax,%ecx
f011a3b3:	c7 85 2c fe ff ff 00 	movl   $0x1000,-0x1d4(%ebp)
f011a3ba:	10 00 00 
f011a3bd:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011a3c2:	0f b6 d0             	movzbl %al,%edx
f011a3c5:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f011a3cb:	01 d0                	add    %edx,%eax
f011a3cd:	48                   	dec    %eax
f011a3ce:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
f011a3d4:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f011a3da:	ba 00 00 00 00       	mov    $0x0,%edx
f011a3df:	f7 b5 2c fe ff ff    	divl   -0x1d4(%ebp)
f011a3e5:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f011a3eb:	29 d0                	sub    %edx,%eax
f011a3ed:	01 c1                	add    %eax,%ecx
f011a3ef:	c7 85 24 fe ff ff 00 	movl   $0x1000,-0x1dc(%ebp)
f011a3f6:	10 00 00 
f011a3f9:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011a3fe:	0f b6 c0             	movzbl %al,%eax
f011a401:	c1 e0 04             	shl    $0x4,%eax
f011a404:	89 c2                	mov    %eax,%edx
f011a406:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f011a40c:	01 d0                	add    %edx,%eax
f011a40e:	48                   	dec    %eax
f011a40f:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
f011a415:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f011a41b:	ba 00 00 00 00       	mov    $0x0,%edx
f011a420:	f7 b5 24 fe ff ff    	divl   -0x1dc(%ebp)
f011a426:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f011a42c:	29 d0                	sub    %edx,%eax
f011a42e:	01 c8                	add    %ecx,%eax
f011a430:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011a436:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a43c:	39 c2                	cmp    %eax,%edx
f011a43e:	74 17                	je     f011a457 <test_kmalloc_nextfit+0x1427>
		panic("Next Fit not working correctly");
f011a440:	83 ec 04             	sub    $0x4,%esp
f011a443:	68 08 bc 13 f0       	push   $0xf013bc08
f011a448:	68 62 01 00 00       	push   $0x162
f011a44d:	68 fa b8 13 f0       	push   $0xf013b8fa
f011a452:	e8 ae 5d fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a457:	e8 6c 99 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a45c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a45f:	74 17                	je     f011a478 <test_kmalloc_nextfit+0x1448>
f011a461:	83 ec 04             	sub    $0x4,%esp
f011a464:	68 14 b9 13 f0       	push   $0xf013b914
f011a469:	68 63 01 00 00       	push   $0x163
f011a46e:	68 fa b8 13 f0       	push   $0xf013b8fa
f011a473:	e8 8d 5d fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a478:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a47b:	e8 17 2d ff ff       	call   f010d197 <sys_calculate_free_frames>
f011a480:	29 c3                	sub    %eax,%ebx
f011a482:	89 d8                	mov    %ebx,%eax
f011a484:	3d 80 03 00 00       	cmp    $0x380,%eax
f011a489:	74 17                	je     f011a4a2 <test_kmalloc_nextfit+0x1472>
f011a48b:	83 ec 04             	sub    $0x4,%esp
f011a48e:	68 b7 bb 13 f0       	push   $0xf013bbb7
f011a493:	68 64 01 00 00       	push   $0x164
f011a498:	68 fa b8 13 f0       	push   $0xf013b8fa
f011a49d:	e8 63 5d fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a4a2:	e8 21 99 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a4a7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a4aa:	e8 e8 2c ff ff       	call   f010d197 <sys_calculate_free_frames>
f011a4af:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f011a4b2:	8b 85 e8 fb ff ff    	mov    -0x418(%ebp),%eax
f011a4b8:	83 ec 0c             	sub    $0xc,%esp
f011a4bb:	50                   	push   %eax
f011a4bc:	e8 95 d9 fe ff       	call   f0107e56 <kfree>
f011a4c1:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a4c4:	e8 ff 98 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a4c9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a4cc:	74 17                	je     f011a4e5 <test_kmalloc_nextfit+0x14b5>
f011a4ce:	83 ec 04             	sub    $0x4,%esp
f011a4d1:	68 14 b9 13 f0       	push   $0xf013b914
f011a4d6:	68 69 01 00 00       	push   $0x169
f011a4db:	68 fa b8 13 f0       	push   $0xf013b8fa
f011a4e0:	e8 20 5d fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011a4e5:	e8 ad 2c ff ff       	call   f010d197 <sys_calculate_free_frames>
f011a4ea:	89 c2                	mov    %eax,%edx
f011a4ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a4ef:	29 c2                	sub    %eax,%edx
f011a4f1:	89 d0                	mov    %edx,%eax
f011a4f3:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a4f8:	74 17                	je     f011a511 <test_kmalloc_nextfit+0x14e1>
f011a4fa:	83 ec 04             	sub    $0x4,%esp
f011a4fd:	68 c8 bb 13 f0       	push   $0xf013bbc8
f011a502:	68 6a 01 00 00       	push   $0x16a
f011a507:	68 fa b8 13 f0       	push   $0xf013b8fa
f011a50c:	e8 f4 5c fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a511:	e8 b2 98 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a516:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a519:	e8 79 2c ff ff       	call   f010d197 <sys_calculate_free_frames>
f011a51e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f011a521:	83 ec 0c             	sub    $0xc,%esp
f011a524:	68 00 fc 3f 00       	push   $0x3ffc00
f011a529:	e8 5d d8 fe ff       	call   f0107d8b <kmalloc>
f011a52e:	83 c4 10             	add    $0x10,%esp
f011a531:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f011a537:	c7 85 1c fe ff ff 00 	movl   $0x1000,-0x1e4(%ebp)
f011a53e:	10 00 00 
f011a541:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f011a547:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a54c:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
f011a552:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f011a558:	ba 00 00 00 00       	mov    $0x0,%edx
f011a55d:	f7 b5 1c fe ff ff    	divl   -0x1e4(%ebp)
f011a563:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f011a569:	29 d0                	sub    %edx,%eax
f011a56b:	89 c1                	mov    %eax,%ecx
f011a56d:	c7 85 14 fe ff ff 00 	movl   $0x1000,-0x1ec(%ebp)
f011a574:	10 00 00 
f011a577:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011a57c:	0f b6 d0             	movzbl %al,%edx
f011a57f:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f011a585:	01 d0                	add    %edx,%eax
f011a587:	48                   	dec    %eax
f011a588:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
f011a58e:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f011a594:	ba 00 00 00 00       	mov    $0x0,%edx
f011a599:	f7 b5 14 fe ff ff    	divl   -0x1ec(%ebp)
f011a59f:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f011a5a5:	29 d0                	sub    %edx,%eax
f011a5a7:	01 c1                	add    %eax,%ecx
f011a5a9:	c7 85 0c fe ff ff 00 	movl   $0x1000,-0x1f4(%ebp)
f011a5b0:	10 00 00 
f011a5b3:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011a5b8:	0f b6 c0             	movzbl %al,%eax
f011a5bb:	c1 e0 04             	shl    $0x4,%eax
f011a5be:	89 c2                	mov    %eax,%edx
f011a5c0:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f011a5c6:	01 d0                	add    %edx,%eax
f011a5c8:	48                   	dec    %eax
f011a5c9:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
f011a5cf:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f011a5d5:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5da:	f7 b5 0c fe ff ff    	divl   -0x1f4(%ebp)
f011a5e0:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f011a5e6:	29 d0                	sub    %edx,%eax
f011a5e8:	01 c8                	add    %ecx,%eax
f011a5ea:	8d 90 00 40 00 f9    	lea    -0x6ffc000(%eax),%edx
f011a5f0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a5f6:	39 c2                	cmp    %eax,%edx
f011a5f8:	74 17                	je     f011a611 <test_kmalloc_nextfit+0x15e1>
		panic("Next Fit not working correctly");
f011a5fa:	83 ec 04             	sub    $0x4,%esp
f011a5fd:	68 08 bc 13 f0       	push   $0xf013bc08
f011a602:	68 70 01 00 00       	push   $0x170
f011a607:	68 fa b8 13 f0       	push   $0xf013b8fa
f011a60c:	e8 f4 5b fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a611:	e8 b2 97 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a616:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a619:	74 17                	je     f011a632 <test_kmalloc_nextfit+0x1602>
f011a61b:	83 ec 04             	sub    $0x4,%esp
f011a61e:	68 14 b9 13 f0       	push   $0xf013b914
f011a623:	68 71 01 00 00       	push   $0x171
f011a628:	68 fa b8 13 f0       	push   $0xf013b8fa
f011a62d:	e8 d3 5b fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011a632:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a635:	e8 5d 2b ff ff       	call   f010d197 <sys_calculate_free_frames>
f011a63a:	29 c3                	sub    %eax,%ebx
f011a63c:	89 d8                	mov    %ebx,%eax
f011a63e:	3d 00 04 00 00       	cmp    $0x400,%eax
f011a643:	74 17                	je     f011a65c <test_kmalloc_nextfit+0x162c>
f011a645:	83 ec 04             	sub    $0x4,%esp
f011a648:	68 b7 bb 13 f0       	push   $0xf013bbb7
f011a64d:	68 72 01 00 00       	push   $0x172
f011a652:	68 fa b8 13 f0       	push   $0xf013b8fa
f011a657:	e8 a9 5b fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) is succeeded...\n") ;
f011a65c:	83 ec 0c             	sub    $0xc,%esp
f011a65f:	68 64 bc 13 f0       	push   $0xf013bc64
f011a664:	e8 a5 66 fe ff       	call   f0100d0e <cprintf>
f011a669:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f011a66c:	e8 57 97 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a671:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a674:	e8 1e 2b ff ff       	call   f010d197 <sys_calculate_free_frames>
f011a679:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f011a67c:	83 ec 0c             	sub    $0xc,%esp
f011a67f:	68 00 00 60 00       	push   $0x600000
f011a684:	e8 02 d7 fe ff       	call   f0107d8b <kmalloc>
f011a689:	83 c4 10             	add    $0x10,%esp
f011a68c:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != 0x0)
f011a692:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a698:	85 c0                	test   %eax,%eax
f011a69a:	74 17                	je     f011a6b3 <test_kmalloc_nextfit+0x1683>
		panic("Next Fit not working correctly");
f011a69c:	83 ec 04             	sub    $0x4,%esp
f011a69f:	68 08 bc 13 f0       	push   $0xf013bc08
f011a6a4:	68 7c 01 00 00       	push   $0x17c
f011a6a9:	68 fa b8 13 f0       	push   $0xf013b8fa
f011a6ae:	e8 52 5b fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a6b3:	e8 10 97 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a6b8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a6bb:	74 17                	je     f011a6d4 <test_kmalloc_nextfit+0x16a4>
f011a6bd:	83 ec 04             	sub    $0x4,%esp
f011a6c0:	68 14 b9 13 f0       	push   $0xf013b914
f011a6c5:	68 7d 01 00 00       	push   $0x17d
f011a6ca:	68 fa b8 13 f0       	push   $0xf013b8fa
f011a6cf:	e8 31 5b fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f011a6d4:	e8 be 2a ff ff       	call   f010d197 <sys_calculate_free_frames>
f011a6d9:	89 c2                	mov    %eax,%edx
f011a6db:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a6de:	39 c2                	cmp    %eax,%edx
f011a6e0:	74 17                	je     f011a6f9 <test_kmalloc_nextfit+0x16c9>
f011a6e2:	83 ec 04             	sub    $0x4,%esp
f011a6e5:	68 b7 bb 13 f0       	push   $0xf013bbb7
f011a6ea:	68 7e 01 00 00       	push   $0x17e
f011a6ef:	68 fa b8 13 f0       	push   $0xf013b8fa
f011a6f4:	e8 0c 5b fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) is succeeded...\n") ;
f011a6f9:	83 ec 0c             	sub    $0xc,%esp
f011a6fc:	68 9c bc 13 f0       	push   $0xf013bc9c
f011a701:	e8 08 66 fe ff       	call   f0100d0e <cprintf>
f011a706:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f011a709:	83 ec 0c             	sub    $0xc,%esp
f011a70c:	68 d8 bc 13 f0       	push   $0xf013bcd8
f011a711:	e8 f8 65 fe ff       	call   f0100d0e <cprintf>
f011a716:	83 c4 10             	add    $0x10,%esp
	return 1;
f011a719:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011a71e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011a721:	5b                   	pop    %ebx
f011a722:	5f                   	pop    %edi
f011a723:	5d                   	pop    %ebp
f011a724:	c3                   	ret    

f011a725 <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f011a725:	55                   	push   %ebp
f011a726:	89 e5                	mov    %esp,%ebp
f011a728:	57                   	push   %edi
f011a729:	53                   	push   %ebx
f011a72a:	81 ec 90 01 00 00    	sub    $0x190,%esp
	cprintf("==============================================\n");
f011a730:	83 ec 0c             	sub    $0xc,%esp
f011a733:	68 3c b8 13 f0       	push   $0xf013b83c
f011a738:	e8 d1 65 fe ff       	call   f0100d0e <cprintf>
f011a73d:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011a740:	83 ec 0c             	sub    $0xc,%esp
f011a743:	68 6c b8 13 f0       	push   $0xf013b86c
f011a748:	e8 c1 65 fe ff       	call   f0100d0e <cprintf>
f011a74d:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011a750:	83 ec 0c             	sub    $0xc,%esp
f011a753:	68 3c b8 13 f0       	push   $0xf013b83c
f011a758:	e8 b1 65 fe ff       	call   f0100d0e <cprintf>
f011a75d:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011a760:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f011a766:	b9 14 00 00 00       	mov    $0x14,%ecx
f011a76b:	b8 00 00 00 00       	mov    $0x0,%eax
f011a770:	89 d7                	mov    %edx,%edi
f011a772:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a774:	e8 1e 2a ff ff       	call   f010d197 <sys_calculate_free_frames>
f011a779:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a77c:	e8 47 96 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a781:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f011a784:	83 ec 0c             	sub    $0xc,%esp
f011a787:	68 00 fc 2f 00       	push   $0x2ffc00
f011a78c:	e8 fa d5 fe ff       	call   f0107d8b <kmalloc>
f011a791:	83 c4 10             	add    $0x10,%esp
f011a794:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011a79a:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011a7a0:	89 c1                	mov    %eax,%ecx
f011a7a2:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011a7a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011a7ac:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a7b1:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011a7b4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a7b7:	ba 00 00 00 00       	mov    $0x0,%edx
f011a7bc:	f7 75 ec             	divl   -0x14(%ebp)
f011a7bf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a7c2:	29 d0                	sub    %edx,%eax
f011a7c4:	89 c3                	mov    %eax,%ebx
f011a7c6:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011a7cd:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011a7d2:	0f b6 d0             	movzbl %al,%edx
f011a7d5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011a7d8:	01 d0                	add    %edx,%eax
f011a7da:	48                   	dec    %eax
f011a7db:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011a7de:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a7e1:	ba 00 00 00 00       	mov    $0x0,%edx
f011a7e6:	f7 75 e4             	divl   -0x1c(%ebp)
f011a7e9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a7ec:	29 d0                	sub    %edx,%eax
f011a7ee:	01 c3                	add    %eax,%ebx
f011a7f0:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011a7f7:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011a7fc:	0f b6 c0             	movzbl %al,%eax
f011a7ff:	c1 e0 04             	shl    $0x4,%eax
f011a802:	89 c2                	mov    %eax,%edx
f011a804:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011a807:	01 d0                	add    %edx,%eax
f011a809:	48                   	dec    %eax
f011a80a:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011a80d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a810:	ba 00 00 00 00       	mov    $0x0,%edx
f011a815:	f7 75 dc             	divl   -0x24(%ebp)
f011a818:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a81b:	29 d0                	sub    %edx,%eax
f011a81d:	01 d8                	add    %ebx,%eax
f011a81f:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011a824:	39 c1                	cmp    %eax,%ecx
f011a826:	74 17                	je     f011a83f <test_kmalloc_bestfit1+0x11a>
f011a828:	83 ec 04             	sub    $0x4,%esp
f011a82b:	68 14 bd 13 f0       	push   $0xf013bd14
f011a830:	68 98 01 00 00       	push   $0x198
f011a835:	68 fa b8 13 f0       	push   $0xf013b8fa
f011a83a:	e8 c6 59 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a83f:	e8 84 95 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a844:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a847:	74 17                	je     f011a860 <test_kmalloc_bestfit1+0x13b>
f011a849:	83 ec 04             	sub    $0x4,%esp
f011a84c:	68 14 b9 13 f0       	push   $0xf013b914
f011a851:	68 99 01 00 00       	push   $0x199
f011a856:	68 fa b8 13 f0       	push   $0xf013b8fa
f011a85b:	e8 a5 59 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a860:	e8 32 29 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011a865:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a868:	29 c2                	sub    %eax,%edx
f011a86a:	89 d0                	mov    %edx,%eax
f011a86c:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a871:	74 17                	je     f011a88a <test_kmalloc_bestfit1+0x165>
f011a873:	83 ec 04             	sub    $0x4,%esp
f011a876:	68 44 bd 13 f0       	push   $0xf013bd44
f011a87b:	68 9a 01 00 00       	push   $0x19a
f011a880:	68 fa b8 13 f0       	push   $0xf013b8fa
f011a885:	e8 7b 59 fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a88a:	e8 08 29 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011a88f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a892:	e8 31 95 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a897:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f011a89a:	83 ec 0c             	sub    $0xc,%esp
f011a89d:	68 00 fc 2f 00       	push   $0x2ffc00
f011a8a2:	e8 e4 d4 fe ff       	call   f0107d8b <kmalloc>
f011a8a7:	83 c4 10             	add    $0x10,%esp
f011a8aa:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011a8b0:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011a8b6:	89 c1                	mov    %eax,%ecx
f011a8b8:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011a8bf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a8c2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a8c7:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011a8ca:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a8cd:	ba 00 00 00 00       	mov    $0x0,%edx
f011a8d2:	f7 75 d4             	divl   -0x2c(%ebp)
f011a8d5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a8d8:	29 d0                	sub    %edx,%eax
f011a8da:	89 c3                	mov    %eax,%ebx
f011a8dc:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011a8e3:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011a8e8:	0f b6 d0             	movzbl %al,%edx
f011a8eb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011a8ee:	01 d0                	add    %edx,%eax
f011a8f0:	48                   	dec    %eax
f011a8f1:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011a8f4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a8f7:	ba 00 00 00 00       	mov    $0x0,%edx
f011a8fc:	f7 75 cc             	divl   -0x34(%ebp)
f011a8ff:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a902:	29 d0                	sub    %edx,%eax
f011a904:	01 c3                	add    %eax,%ebx
f011a906:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011a90d:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011a912:	0f b6 c0             	movzbl %al,%eax
f011a915:	c1 e0 04             	shl    $0x4,%eax
f011a918:	89 c2                	mov    %eax,%edx
f011a91a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011a91d:	01 d0                	add    %edx,%eax
f011a91f:	48                   	dec    %eax
f011a920:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011a923:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a926:	ba 00 00 00 00       	mov    $0x0,%edx
f011a92b:	f7 75 c4             	divl   -0x3c(%ebp)
f011a92e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a931:	29 d0                	sub    %edx,%eax
f011a933:	01 d8                	add    %ebx,%eax
f011a935:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011a93a:	39 c1                	cmp    %eax,%ecx
f011a93c:	74 17                	je     f011a955 <test_kmalloc_bestfit1+0x230>
f011a93e:	83 ec 04             	sub    $0x4,%esp
f011a941:	68 14 bd 13 f0       	push   $0xf013bd14
f011a946:	68 a0 01 00 00       	push   $0x1a0
f011a94b:	68 fa b8 13 f0       	push   $0xf013b8fa
f011a950:	e8 b0 58 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a955:	e8 6e 94 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a95a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a95d:	74 17                	je     f011a976 <test_kmalloc_bestfit1+0x251>
f011a95f:	83 ec 04             	sub    $0x4,%esp
f011a962:	68 14 b9 13 f0       	push   $0xf013b914
f011a967:	68 a1 01 00 00       	push   $0x1a1
f011a96c:	68 fa b8 13 f0       	push   $0xf013b8fa
f011a971:	e8 8f 58 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a976:	e8 1c 28 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011a97b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a97e:	29 c2                	sub    %eax,%edx
f011a980:	89 d0                	mov    %edx,%eax
f011a982:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a987:	74 17                	je     f011a9a0 <test_kmalloc_bestfit1+0x27b>
f011a989:	83 ec 04             	sub    $0x4,%esp
f011a98c:	68 44 bd 13 f0       	push   $0xf013bd44
f011a991:	68 a2 01 00 00       	push   $0x1a2
f011a996:	68 fa b8 13 f0       	push   $0xf013b8fa
f011a99b:	e8 65 58 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a9a0:	e8 f2 27 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011a9a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a9a8:	e8 1b 94 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a9ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f011a9b0:	83 ec 0c             	sub    $0xc,%esp
f011a9b3:	68 00 fc 1f 00       	push   $0x1ffc00
f011a9b8:	e8 ce d3 fe ff       	call   f0107d8b <kmalloc>
f011a9bd:	83 c4 10             	add    $0x10,%esp
f011a9c0:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011a9c6:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011a9cc:	89 c1                	mov    %eax,%ecx
f011a9ce:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011a9d5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011a9d8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a9dd:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011a9e0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a9e3:	ba 00 00 00 00       	mov    $0x0,%edx
f011a9e8:	f7 75 bc             	divl   -0x44(%ebp)
f011a9eb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a9ee:	29 d0                	sub    %edx,%eax
f011a9f0:	89 c3                	mov    %eax,%ebx
f011a9f2:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011a9f9:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011a9fe:	0f b6 d0             	movzbl %al,%edx
f011aa01:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011aa04:	01 d0                	add    %edx,%eax
f011aa06:	48                   	dec    %eax
f011aa07:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011aa0a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011aa0d:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa12:	f7 75 b4             	divl   -0x4c(%ebp)
f011aa15:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011aa18:	29 d0                	sub    %edx,%eax
f011aa1a:	01 c3                	add    %eax,%ebx
f011aa1c:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011aa23:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011aa28:	0f b6 c0             	movzbl %al,%eax
f011aa2b:	c1 e0 04             	shl    $0x4,%eax
f011aa2e:	89 c2                	mov    %eax,%edx
f011aa30:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011aa33:	01 d0                	add    %edx,%eax
f011aa35:	48                   	dec    %eax
f011aa36:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011aa39:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011aa3c:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa41:	f7 75 ac             	divl   -0x54(%ebp)
f011aa44:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011aa47:	29 d0                	sub    %edx,%eax
f011aa49:	01 d8                	add    %ebx,%eax
f011aa4b:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011aa50:	39 c1                	cmp    %eax,%ecx
f011aa52:	74 17                	je     f011aa6b <test_kmalloc_bestfit1+0x346>
f011aa54:	83 ec 04             	sub    $0x4,%esp
f011aa57:	68 14 bd 13 f0       	push   $0xf013bd14
f011aa5c:	68 a8 01 00 00       	push   $0x1a8
f011aa61:	68 fa b8 13 f0       	push   $0xf013b8fa
f011aa66:	e8 9a 57 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aa6b:	e8 58 93 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011aa70:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aa73:	74 17                	je     f011aa8c <test_kmalloc_bestfit1+0x367>
f011aa75:	83 ec 04             	sub    $0x4,%esp
f011aa78:	68 14 b9 13 f0       	push   $0xf013b914
f011aa7d:	68 a9 01 00 00       	push   $0x1a9
f011aa82:	68 fa b8 13 f0       	push   $0xf013b8fa
f011aa87:	e8 79 57 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011aa8c:	e8 06 27 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011aa91:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011aa94:	29 c2                	sub    %eax,%edx
f011aa96:	89 d0                	mov    %edx,%eax
f011aa98:	3d 00 02 00 00       	cmp    $0x200,%eax
f011aa9d:	74 17                	je     f011aab6 <test_kmalloc_bestfit1+0x391>
f011aa9f:	83 ec 04             	sub    $0x4,%esp
f011aaa2:	68 44 bd 13 f0       	push   $0xf013bd44
f011aaa7:	68 aa 01 00 00       	push   $0x1aa
f011aaac:	68 fa b8 13 f0       	push   $0xf013b8fa
f011aab1:	e8 4f 57 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011aab6:	e8 dc 26 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011aabb:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aabe:	e8 05 93 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011aac3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f011aac6:	83 ec 0c             	sub    $0xc,%esp
f011aac9:	68 00 fc 1f 00       	push   $0x1ffc00
f011aace:	e8 b8 d2 fe ff       	call   f0107d8b <kmalloc>
f011aad3:	83 c4 10             	add    $0x10,%esp
f011aad6:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011aadc:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011aae2:	89 c1                	mov    %eax,%ecx
f011aae4:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011aaeb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011aaee:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011aaf3:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011aaf6:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011aaf9:	ba 00 00 00 00       	mov    $0x0,%edx
f011aafe:	f7 75 a4             	divl   -0x5c(%ebp)
f011ab01:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ab04:	29 d0                	sub    %edx,%eax
f011ab06:	89 c3                	mov    %eax,%ebx
f011ab08:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011ab0f:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011ab14:	0f b6 d0             	movzbl %al,%edx
f011ab17:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011ab1a:	01 d0                	add    %edx,%eax
f011ab1c:	48                   	dec    %eax
f011ab1d:	89 45 98             	mov    %eax,-0x68(%ebp)
f011ab20:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ab23:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab28:	f7 75 9c             	divl   -0x64(%ebp)
f011ab2b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ab2e:	29 d0                	sub    %edx,%eax
f011ab30:	01 c3                	add    %eax,%ebx
f011ab32:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011ab39:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011ab3e:	0f b6 c0             	movzbl %al,%eax
f011ab41:	c1 e0 04             	shl    $0x4,%eax
f011ab44:	89 c2                	mov    %eax,%edx
f011ab46:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011ab49:	01 d0                	add    %edx,%eax
f011ab4b:	48                   	dec    %eax
f011ab4c:	89 45 90             	mov    %eax,-0x70(%ebp)
f011ab4f:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ab52:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab57:	f7 75 94             	divl   -0x6c(%ebp)
f011ab5a:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ab5d:	29 d0                	sub    %edx,%eax
f011ab5f:	01 d8                	add    %ebx,%eax
f011ab61:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011ab66:	39 c1                	cmp    %eax,%ecx
f011ab68:	74 17                	je     f011ab81 <test_kmalloc_bestfit1+0x45c>
f011ab6a:	83 ec 04             	sub    $0x4,%esp
f011ab6d:	68 14 bd 13 f0       	push   $0xf013bd14
f011ab72:	68 b0 01 00 00       	push   $0x1b0
f011ab77:	68 fa b8 13 f0       	push   $0xf013b8fa
f011ab7c:	e8 84 56 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ab81:	e8 42 92 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ab86:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ab89:	74 17                	je     f011aba2 <test_kmalloc_bestfit1+0x47d>
f011ab8b:	83 ec 04             	sub    $0x4,%esp
f011ab8e:	68 14 b9 13 f0       	push   $0xf013b914
f011ab93:	68 b1 01 00 00       	push   $0x1b1
f011ab98:	68 fa b8 13 f0       	push   $0xf013b8fa
f011ab9d:	e8 63 56 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011aba2:	e8 f0 25 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011aba7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011abaa:	29 c2                	sub    %eax,%edx
f011abac:	89 d0                	mov    %edx,%eax
f011abae:	3d 00 02 00 00       	cmp    $0x200,%eax
f011abb3:	74 17                	je     f011abcc <test_kmalloc_bestfit1+0x4a7>
f011abb5:	83 ec 04             	sub    $0x4,%esp
f011abb8:	68 44 bd 13 f0       	push   $0xf013bd44
f011abbd:	68 b2 01 00 00       	push   $0x1b2
f011abc2:	68 fa b8 13 f0       	push   $0xf013b8fa
f011abc7:	e8 39 56 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011abcc:	e8 c6 25 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011abd1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011abd4:	e8 ef 91 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011abd9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f011abdc:	83 ec 0c             	sub    $0xc,%esp
f011abdf:	68 00 fc 0f 00       	push   $0xffc00
f011abe4:	e8 a2 d1 fe ff       	call   f0107d8b <kmalloc>
f011abe9:	83 c4 10             	add    $0x10,%esp
f011abec:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f011abf2:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011abf8:	89 c1                	mov    %eax,%ecx
f011abfa:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011ac01:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011ac04:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ac09:	89 45 88             	mov    %eax,-0x78(%ebp)
f011ac0c:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ac0f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac14:	f7 75 8c             	divl   -0x74(%ebp)
f011ac17:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ac1a:	29 d0                	sub    %edx,%eax
f011ac1c:	89 c3                	mov    %eax,%ebx
f011ac1e:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011ac25:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011ac2a:	0f b6 d0             	movzbl %al,%edx
f011ac2d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011ac30:	01 d0                	add    %edx,%eax
f011ac32:	48                   	dec    %eax
f011ac33:	89 45 80             	mov    %eax,-0x80(%ebp)
f011ac36:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ac39:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac3e:	f7 75 84             	divl   -0x7c(%ebp)
f011ac41:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ac44:	29 d0                	sub    %edx,%eax
f011ac46:	01 c3                	add    %eax,%ebx
f011ac48:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011ac4f:	10 00 00 
f011ac52:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011ac57:	0f b6 c0             	movzbl %al,%eax
f011ac5a:	c1 e0 04             	shl    $0x4,%eax
f011ac5d:	89 c2                	mov    %eax,%edx
f011ac5f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011ac65:	01 d0                	add    %edx,%eax
f011ac67:	48                   	dec    %eax
f011ac68:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011ac6e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ac74:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac79:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011ac7f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ac85:	29 d0                	sub    %edx,%eax
f011ac87:	01 d8                	add    %ebx,%eax
f011ac89:	2d 00 c0 5f 09       	sub    $0x95fc000,%eax
f011ac8e:	39 c1                	cmp    %eax,%ecx
f011ac90:	74 17                	je     f011aca9 <test_kmalloc_bestfit1+0x584>
f011ac92:	83 ec 04             	sub    $0x4,%esp
f011ac95:	68 14 bd 13 f0       	push   $0xf013bd14
f011ac9a:	68 b8 01 00 00       	push   $0x1b8
f011ac9f:	68 fa b8 13 f0       	push   $0xf013b8fa
f011aca4:	e8 5c 55 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aca9:	e8 1a 91 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011acae:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011acb1:	74 17                	je     f011acca <test_kmalloc_bestfit1+0x5a5>
f011acb3:	83 ec 04             	sub    $0x4,%esp
f011acb6:	68 14 b9 13 f0       	push   $0xf013b914
f011acbb:	68 b9 01 00 00       	push   $0x1b9
f011acc0:	68 fa b8 13 f0       	push   $0xf013b8fa
f011acc5:	e8 3b 55 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011acca:	e8 c8 24 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011accf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011acd2:	29 c2                	sub    %eax,%edx
f011acd4:	89 d0                	mov    %edx,%eax
f011acd6:	3d 00 01 00 00       	cmp    $0x100,%eax
f011acdb:	74 17                	je     f011acf4 <test_kmalloc_bestfit1+0x5cf>
f011acdd:	83 ec 04             	sub    $0x4,%esp
f011ace0:	68 44 bd 13 f0       	push   $0xf013bd44
f011ace5:	68 ba 01 00 00       	push   $0x1ba
f011acea:	68 fa b8 13 f0       	push   $0xf013b8fa
f011acef:	e8 11 55 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011acf4:	e8 9e 24 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011acf9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011acfc:	e8 c7 90 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ad01:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f011ad04:	83 ec 0c             	sub    $0xc,%esp
f011ad07:	68 00 fc 0f 00       	push   $0xffc00
f011ad0c:	e8 7a d0 fe ff       	call   f0107d8b <kmalloc>
f011ad11:	83 c4 10             	add    $0x10,%esp
f011ad14:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011ad1a:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011ad20:	89 c1                	mov    %eax,%ecx
f011ad22:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011ad29:	10 00 00 
f011ad2c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011ad32:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ad37:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011ad3d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ad43:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad48:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011ad4e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ad54:	29 d0                	sub    %edx,%eax
f011ad56:	89 c3                	mov    %eax,%ebx
f011ad58:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011ad5f:	10 00 00 
f011ad62:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011ad67:	0f b6 d0             	movzbl %al,%edx
f011ad6a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011ad70:	01 d0                	add    %edx,%eax
f011ad72:	48                   	dec    %eax
f011ad73:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011ad79:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011ad7f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad84:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011ad8a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011ad90:	29 d0                	sub    %edx,%eax
f011ad92:	01 c3                	add    %eax,%ebx
f011ad94:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011ad9b:	10 00 00 
f011ad9e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011ada3:	0f b6 c0             	movzbl %al,%eax
f011ada6:	c1 e0 04             	shl    $0x4,%eax
f011ada9:	89 c2                	mov    %eax,%edx
f011adab:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011adb1:	01 d0                	add    %edx,%eax
f011adb3:	48                   	dec    %eax
f011adb4:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011adba:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011adc0:	ba 00 00 00 00       	mov    $0x0,%edx
f011adc5:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011adcb:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011add1:	29 d0                	sub    %edx,%eax
f011add3:	01 d8                	add    %ebx,%eax
f011add5:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011adda:	39 c1                	cmp    %eax,%ecx
f011addc:	74 17                	je     f011adf5 <test_kmalloc_bestfit1+0x6d0>
f011adde:	83 ec 04             	sub    $0x4,%esp
f011ade1:	68 14 bd 13 f0       	push   $0xf013bd14
f011ade6:	68 c0 01 00 00       	push   $0x1c0
f011adeb:	68 fa b8 13 f0       	push   $0xf013b8fa
f011adf0:	e8 10 54 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011adf5:	e8 ce 8f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011adfa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011adfd:	74 17                	je     f011ae16 <test_kmalloc_bestfit1+0x6f1>
f011adff:	83 ec 04             	sub    $0x4,%esp
f011ae02:	68 14 b9 13 f0       	push   $0xf013b914
f011ae07:	68 c1 01 00 00       	push   $0x1c1
f011ae0c:	68 fa b8 13 f0       	push   $0xf013b8fa
f011ae11:	e8 ef 53 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ae16:	e8 7c 23 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011ae1b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ae1e:	29 c2                	sub    %eax,%edx
f011ae20:	89 d0                	mov    %edx,%eax
f011ae22:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ae27:	74 17                	je     f011ae40 <test_kmalloc_bestfit1+0x71b>
f011ae29:	83 ec 04             	sub    $0x4,%esp
f011ae2c:	68 44 bd 13 f0       	push   $0xf013bd44
f011ae31:	68 c2 01 00 00       	push   $0x1c2
f011ae36:	68 fa b8 13 f0       	push   $0xf013b8fa
f011ae3b:	e8 c5 53 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ae40:	e8 52 23 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011ae45:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ae48:	e8 7b 8f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ae4d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f011ae50:	83 ec 0c             	sub    $0xc,%esp
f011ae53:	68 00 fc 0f 00       	push   $0xffc00
f011ae58:	e8 2e cf fe ff       	call   f0107d8b <kmalloc>
f011ae5d:	83 c4 10             	add    $0x10,%esp
f011ae60:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f011ae66:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011ae6c:	89 c1                	mov    %eax,%ecx
f011ae6e:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011ae75:	10 00 00 
f011ae78:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011ae7e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ae83:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011ae89:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011ae8f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae94:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011ae9a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011aea0:	29 d0                	sub    %edx,%eax
f011aea2:	89 c3                	mov    %eax,%ebx
f011aea4:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011aeab:	10 00 00 
f011aeae:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011aeb3:	0f b6 d0             	movzbl %al,%edx
f011aeb6:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011aebc:	01 d0                	add    %edx,%eax
f011aebe:	48                   	dec    %eax
f011aebf:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011aec5:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011aecb:	ba 00 00 00 00       	mov    $0x0,%edx
f011aed0:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011aed6:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011aedc:	29 d0                	sub    %edx,%eax
f011aede:	01 c3                	add    %eax,%ebx
f011aee0:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011aee7:	10 00 00 
f011aeea:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011aeef:	0f b6 c0             	movzbl %al,%eax
f011aef2:	c1 e0 04             	shl    $0x4,%eax
f011aef5:	89 c2                	mov    %eax,%edx
f011aef7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011aefd:	01 d0                	add    %edx,%eax
f011aeff:	48                   	dec    %eax
f011af00:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011af06:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011af0c:	ba 00 00 00 00       	mov    $0x0,%edx
f011af11:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011af17:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011af1d:	29 d0                	sub    %edx,%eax
f011af1f:	01 d8                	add    %ebx,%eax
f011af21:	2d 00 c0 3f 09       	sub    $0x93fc000,%eax
f011af26:	39 c1                	cmp    %eax,%ecx
f011af28:	74 17                	je     f011af41 <test_kmalloc_bestfit1+0x81c>
f011af2a:	83 ec 04             	sub    $0x4,%esp
f011af2d:	68 14 bd 13 f0       	push   $0xf013bd14
f011af32:	68 c8 01 00 00       	push   $0x1c8
f011af37:	68 fa b8 13 f0       	push   $0xf013b8fa
f011af3c:	e8 c4 52 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011af41:	e8 82 8e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011af46:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011af49:	74 17                	je     f011af62 <test_kmalloc_bestfit1+0x83d>
f011af4b:	83 ec 04             	sub    $0x4,%esp
f011af4e:	68 14 b9 13 f0       	push   $0xf013b914
f011af53:	68 c9 01 00 00       	push   $0x1c9
f011af58:	68 fa b8 13 f0       	push   $0xf013b8fa
f011af5d:	e8 a3 52 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011af62:	e8 30 22 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011af67:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011af6a:	29 c2                	sub    %eax,%edx
f011af6c:	89 d0                	mov    %edx,%eax
f011af6e:	3d 00 01 00 00       	cmp    $0x100,%eax
f011af73:	74 17                	je     f011af8c <test_kmalloc_bestfit1+0x867>
f011af75:	83 ec 04             	sub    $0x4,%esp
f011af78:	68 44 bd 13 f0       	push   $0xf013bd44
f011af7d:	68 ca 01 00 00       	push   $0x1ca
f011af82:	68 fa b8 13 f0       	push   $0xf013b8fa
f011af87:	e8 79 52 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011af8c:	e8 06 22 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011af91:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011af94:	e8 2f 8e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011af99:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f011af9c:	83 ec 0c             	sub    $0xc,%esp
f011af9f:	68 00 fc 0f 00       	push   $0xffc00
f011afa4:	e8 e2 cd fe ff       	call   f0107d8b <kmalloc>
f011afa9:	83 c4 10             	add    $0x10,%esp
f011afac:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f011afb2:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011afb8:	89 c1                	mov    %eax,%ecx
f011afba:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011afc1:	10 00 00 
f011afc4:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011afca:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011afcf:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011afd5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011afdb:	ba 00 00 00 00       	mov    $0x0,%edx
f011afe0:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011afe6:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011afec:	29 d0                	sub    %edx,%eax
f011afee:	89 c3                	mov    %eax,%ebx
f011aff0:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011aff7:	10 00 00 
f011affa:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011afff:	0f b6 d0             	movzbl %al,%edx
f011b002:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011b008:	01 d0                	add    %edx,%eax
f011b00a:	48                   	dec    %eax
f011b00b:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011b011:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b017:	ba 00 00 00 00       	mov    $0x0,%edx
f011b01c:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011b022:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b028:	29 d0                	sub    %edx,%eax
f011b02a:	01 c3                	add    %eax,%ebx
f011b02c:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011b033:	10 00 00 
f011b036:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011b03b:	0f b6 c0             	movzbl %al,%eax
f011b03e:	c1 e0 04             	shl    $0x4,%eax
f011b041:	89 c2                	mov    %eax,%edx
f011b043:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011b049:	01 d0                	add    %edx,%eax
f011b04b:	48                   	dec    %eax
f011b04c:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011b052:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b058:	ba 00 00 00 00       	mov    $0x0,%edx
f011b05d:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011b063:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b069:	29 d0                	sub    %edx,%eax
f011b06b:	01 d8                	add    %ebx,%eax
f011b06d:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f011b072:	39 c1                	cmp    %eax,%ecx
f011b074:	74 17                	je     f011b08d <test_kmalloc_bestfit1+0x968>
f011b076:	83 ec 04             	sub    $0x4,%esp
f011b079:	68 14 bd 13 f0       	push   $0xf013bd14
f011b07e:	68 d0 01 00 00       	push   $0x1d0
f011b083:	68 fa b8 13 f0       	push   $0xf013b8fa
f011b088:	e8 78 51 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b08d:	e8 36 8d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b092:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b095:	74 17                	je     f011b0ae <test_kmalloc_bestfit1+0x989>
f011b097:	83 ec 04             	sub    $0x4,%esp
f011b09a:	68 14 b9 13 f0       	push   $0xf013b914
f011b09f:	68 d1 01 00 00       	push   $0x1d1
f011b0a4:	68 fa b8 13 f0       	push   $0xf013b8fa
f011b0a9:	e8 57 51 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b0ae:	e8 e4 20 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011b0b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b0b6:	29 c2                	sub    %eax,%edx
f011b0b8:	89 d0                	mov    %edx,%eax
f011b0ba:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b0bf:	74 17                	je     f011b0d8 <test_kmalloc_bestfit1+0x9b3>
f011b0c1:	83 ec 04             	sub    $0x4,%esp
f011b0c4:	68 44 bd 13 f0       	push   $0xf013bd44
f011b0c9:	68 d2 01 00 00       	push   $0x1d2
f011b0ce:	68 fa b8 13 f0       	push   $0xf013b8fa
f011b0d3:	e8 2d 51 fe ff       	call   f0100205 <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b0d8:	e8 ba 20 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011b0dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b0e0:	e8 e3 8c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b0e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011b0e8:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011b0ee:	83 ec 0c             	sub    $0xc,%esp
f011b0f1:	50                   	push   %eax
f011b0f2:	e8 5f cd fe ff       	call   f0107e56 <kfree>
f011b0f7:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b0fa:	e8 c9 8c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b0ff:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b102:	74 17                	je     f011b11b <test_kmalloc_bestfit1+0x9f6>
f011b104:	83 ec 04             	sub    $0x4,%esp
f011b107:	68 14 b9 13 f0       	push   $0xf013b914
f011b10c:	68 db 01 00 00       	push   $0x1db
f011b111:	68 fa b8 13 f0       	push   $0xf013b8fa
f011b116:	e8 ea 50 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011b11b:	e8 77 20 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011b120:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b123:	3d 00 03 00 00       	cmp    $0x300,%eax
f011b128:	74 17                	je     f011b141 <test_kmalloc_bestfit1+0xa1c>
f011b12a:	83 ec 04             	sub    $0x4,%esp
f011b12d:	68 57 bd 13 f0       	push   $0xf013bd57
f011b132:	68 dc 01 00 00       	push   $0x1dc
f011b137:	68 fa b8 13 f0       	push   $0xf013b8fa
f011b13c:	e8 c4 50 fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b141:	e8 51 20 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011b146:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b149:	e8 7a 8c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b14e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011b151:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011b157:	83 ec 0c             	sub    $0xc,%esp
f011b15a:	50                   	push   %eax
f011b15b:	e8 f6 cc fe ff       	call   f0107e56 <kfree>
f011b160:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b163:	e8 60 8c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b168:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b16b:	74 17                	je     f011b184 <test_kmalloc_bestfit1+0xa5f>
f011b16d:	83 ec 04             	sub    $0x4,%esp
f011b170:	68 14 b9 13 f0       	push   $0xf013b914
f011b175:	68 e2 01 00 00       	push   $0x1e2
f011b17a:	68 fa b8 13 f0       	push   $0xf013b8fa
f011b17f:	e8 81 50 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011b184:	e8 0e 20 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011b189:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b18c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b191:	74 17                	je     f011b1aa <test_kmalloc_bestfit1+0xa85>
f011b193:	83 ec 04             	sub    $0x4,%esp
f011b196:	68 57 bd 13 f0       	push   $0xf013bd57
f011b19b:	68 e3 01 00 00       	push   $0x1e3
f011b1a0:	68 fa b8 13 f0       	push   $0xf013b8fa
f011b1a5:	e8 5b 50 fe ff       	call   f0100205 <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b1aa:	e8 e8 1f ff ff       	call   f010d197 <sys_calculate_free_frames>
f011b1af:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b1b2:	e8 11 8c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b1b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f011b1ba:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011b1c0:	83 ec 0c             	sub    $0xc,%esp
f011b1c3:	50                   	push   %eax
f011b1c4:	e8 8d cc fe ff       	call   f0107e56 <kfree>
f011b1c9:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b1cc:	e8 f7 8b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b1d1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b1d4:	74 17                	je     f011b1ed <test_kmalloc_bestfit1+0xac8>
f011b1d6:	83 ec 04             	sub    $0x4,%esp
f011b1d9:	68 14 b9 13 f0       	push   $0xf013b914
f011b1de:	68 e9 01 00 00       	push   $0x1e9
f011b1e3:	68 fa b8 13 f0       	push   $0xf013b8fa
f011b1e8:	e8 18 50 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011b1ed:	e8 a5 1f ff ff       	call   f010d197 <sys_calculate_free_frames>
f011b1f2:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b1f5:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b1fa:	74 17                	je     f011b213 <test_kmalloc_bestfit1+0xaee>
f011b1fc:	83 ec 04             	sub    $0x4,%esp
f011b1ff:	68 57 bd 13 f0       	push   $0xf013bd57
f011b204:	68 ea 01 00 00       	push   $0x1ea
f011b209:	68 fa b8 13 f0       	push   $0xf013b8fa
f011b20e:	e8 f2 4f fe ff       	call   f0100205 <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011b213:	e8 7f 1f ff ff       	call   f010d197 <sys_calculate_free_frames>
f011b218:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b21b:	e8 a8 8b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b220:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f011b223:	83 ec 0c             	sub    $0xc,%esp
f011b226:	68 00 00 08 00       	push   $0x80000
f011b22b:	e8 5b cb fe ff       	call   f0107d8b <kmalloc>
f011b230:	83 c4 10             	add    $0x10,%esp
f011b233:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011b239:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011b23f:	89 c1                	mov    %eax,%ecx
f011b241:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011b248:	10 00 00 
f011b24b:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011b251:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b256:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011b25c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b262:	ba 00 00 00 00       	mov    $0x0,%edx
f011b267:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011b26d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b273:	29 d0                	sub    %edx,%eax
f011b275:	89 c3                	mov    %eax,%ebx
f011b277:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011b27e:	10 00 00 
f011b281:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011b286:	0f b6 d0             	movzbl %al,%edx
f011b289:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011b28f:	01 d0                	add    %edx,%eax
f011b291:	48                   	dec    %eax
f011b292:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011b298:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b29e:	ba 00 00 00 00       	mov    $0x0,%edx
f011b2a3:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011b2a9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b2af:	29 d0                	sub    %edx,%eax
f011b2b1:	01 c3                	add    %eax,%ebx
f011b2b3:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011b2ba:	10 00 00 
f011b2bd:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011b2c2:	0f b6 c0             	movzbl %al,%eax
f011b2c5:	c1 e0 04             	shl    $0x4,%eax
f011b2c8:	89 c2                	mov    %eax,%edx
f011b2ca:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011b2d0:	01 d0                	add    %edx,%eax
f011b2d2:	48                   	dec    %eax
f011b2d3:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011b2d9:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011b2df:	ba 00 00 00 00       	mov    $0x0,%edx
f011b2e4:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011b2ea:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011b2f0:	29 d0                	sub    %edx,%eax
f011b2f2:	01 d8                	add    %ebx,%eax
f011b2f4:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011b2f9:	39 c1                	cmp    %eax,%ecx
f011b2fb:	74 17                	je     f011b314 <test_kmalloc_bestfit1+0xbef>
f011b2fd:	83 ec 04             	sub    $0x4,%esp
f011b300:	68 14 bd 13 f0       	push   $0xf013bd14
f011b305:	68 f3 01 00 00       	push   $0x1f3
f011b30a:	68 fa b8 13 f0       	push   $0xf013b8fa
f011b30f:	e8 f1 4e fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b314:	e8 af 8a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b319:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b31c:	74 17                	je     f011b335 <test_kmalloc_bestfit1+0xc10>
f011b31e:	83 ec 04             	sub    $0x4,%esp
f011b321:	68 14 b9 13 f0       	push   $0xf013b914
f011b326:	68 f4 01 00 00       	push   $0x1f4
f011b32b:	68 fa b8 13 f0       	push   $0xf013b8fa
f011b330:	e8 d0 4e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011b335:	e8 5d 1e ff ff       	call   f010d197 <sys_calculate_free_frames>
f011b33a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b33d:	29 c2                	sub    %eax,%edx
f011b33f:	89 d0                	mov    %edx,%eax
f011b341:	3d 80 00 00 00       	cmp    $0x80,%eax
f011b346:	74 17                	je     f011b35f <test_kmalloc_bestfit1+0xc3a>
f011b348:	83 ec 04             	sub    $0x4,%esp
f011b34b:	68 44 bd 13 f0       	push   $0xf013bd44
f011b350:	68 f5 01 00 00       	push   $0x1f5
f011b355:	68 fa b8 13 f0       	push   $0xf013b8fa
f011b35a:	e8 a6 4e fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011b35f:	e8 33 1e ff ff       	call   f010d197 <sys_calculate_free_frames>
f011b364:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b367:	e8 5c 8a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b36c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011b36f:	83 ec 0c             	sub    $0xc,%esp
f011b372:	68 00 fc 0f 00       	push   $0xffc00
f011b377:	e8 0f ca fe ff       	call   f0107d8b <kmalloc>
f011b37c:	83 c4 10             	add    $0x10,%esp
f011b37f:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011b385:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011b38b:	89 c1                	mov    %eax,%ecx
f011b38d:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011b394:	10 00 00 
f011b397:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011b39d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b3a2:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011b3a8:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011b3ae:	ba 00 00 00 00       	mov    $0x0,%edx
f011b3b3:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011b3b9:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011b3bf:	29 d0                	sub    %edx,%eax
f011b3c1:	89 c3                	mov    %eax,%ebx
f011b3c3:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011b3ca:	10 00 00 
f011b3cd:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011b3d2:	0f b6 d0             	movzbl %al,%edx
f011b3d5:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011b3db:	01 d0                	add    %edx,%eax
f011b3dd:	48                   	dec    %eax
f011b3de:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011b3e4:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011b3ea:	ba 00 00 00 00       	mov    $0x0,%edx
f011b3ef:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011b3f5:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011b3fb:	29 d0                	sub    %edx,%eax
f011b3fd:	01 c3                	add    %eax,%ebx
f011b3ff:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011b406:	10 00 00 
f011b409:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011b40e:	0f b6 c0             	movzbl %al,%eax
f011b411:	c1 e0 04             	shl    $0x4,%eax
f011b414:	89 c2                	mov    %eax,%edx
f011b416:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011b41c:	01 d0                	add    %edx,%eax
f011b41e:	48                   	dec    %eax
f011b41f:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011b425:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b42b:	ba 00 00 00 00       	mov    $0x0,%edx
f011b430:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011b436:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b43c:	29 d0                	sub    %edx,%eax
f011b43e:	01 d8                	add    %ebx,%eax
f011b440:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011b445:	39 c1                	cmp    %eax,%ecx
f011b447:	74 17                	je     f011b460 <test_kmalloc_bestfit1+0xd3b>
f011b449:	83 ec 04             	sub    $0x4,%esp
f011b44c:	68 14 bd 13 f0       	push   $0xf013bd14
f011b451:	68 fb 01 00 00       	push   $0x1fb
f011b456:	68 fa b8 13 f0       	push   $0xf013b8fa
f011b45b:	e8 a5 4d fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b460:	e8 63 89 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b465:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b468:	74 17                	je     f011b481 <test_kmalloc_bestfit1+0xd5c>
f011b46a:	83 ec 04             	sub    $0x4,%esp
f011b46d:	68 14 b9 13 f0       	push   $0xf013b914
f011b472:	68 fc 01 00 00       	push   $0x1fc
f011b477:	68 fa b8 13 f0       	push   $0xf013b8fa
f011b47c:	e8 84 4d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b481:	e8 11 1d ff ff       	call   f010d197 <sys_calculate_free_frames>
f011b486:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b489:	29 c2                	sub    %eax,%edx
f011b48b:	89 d0                	mov    %edx,%eax
f011b48d:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b492:	74 17                	je     f011b4ab <test_kmalloc_bestfit1+0xd86>
f011b494:	83 ec 04             	sub    $0x4,%esp
f011b497:	68 44 bd 13 f0       	push   $0xf013bd44
f011b49c:	68 fd 01 00 00       	push   $0x1fd
f011b4a1:	68 fa b8 13 f0       	push   $0xf013b8fa
f011b4a6:	e8 5a 4d fe ff       	call   f0100205 <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011b4ab:	e8 e7 1c ff ff       	call   f010d197 <sys_calculate_free_frames>
f011b4b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b4b3:	e8 10 89 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b4b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011b4bb:	83 ec 0c             	sub    $0xc,%esp
f011b4be:	68 00 fc 03 00       	push   $0x3fc00
f011b4c3:	e8 c3 c8 fe ff       	call   f0107d8b <kmalloc>
f011b4c8:	83 c4 10             	add    $0x10,%esp
f011b4cb:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011b4d1:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011b4d7:	89 c1                	mov    %eax,%ecx
f011b4d9:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011b4e0:	10 00 00 
f011b4e3:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011b4e9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b4ee:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011b4f4:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b4fa:	ba 00 00 00 00       	mov    $0x0,%edx
f011b4ff:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011b505:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b50b:	29 d0                	sub    %edx,%eax
f011b50d:	89 c3                	mov    %eax,%ebx
f011b50f:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011b516:	10 00 00 
f011b519:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011b51e:	0f b6 d0             	movzbl %al,%edx
f011b521:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011b527:	01 d0                	add    %edx,%eax
f011b529:	48                   	dec    %eax
f011b52a:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011b530:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b536:	ba 00 00 00 00       	mov    $0x0,%edx
f011b53b:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011b541:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b547:	29 d0                	sub    %edx,%eax
f011b549:	01 c3                	add    %eax,%ebx
f011b54b:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011b552:	10 00 00 
f011b555:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011b55a:	0f b6 c0             	movzbl %al,%eax
f011b55d:	c1 e0 04             	shl    $0x4,%eax
f011b560:	89 c2                	mov    %eax,%edx
f011b562:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011b568:	01 d0                	add    %edx,%eax
f011b56a:	48                   	dec    %eax
f011b56b:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011b571:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011b577:	ba 00 00 00 00       	mov    $0x0,%edx
f011b57c:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011b582:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011b588:	29 d0                	sub    %edx,%eax
f011b58a:	01 d8                	add    %ebx,%eax
f011b58c:	2d 00 c0 47 09       	sub    $0x947c000,%eax
f011b591:	39 c1                	cmp    %eax,%ecx
f011b593:	74 17                	je     f011b5ac <test_kmalloc_bestfit1+0xe87>
f011b595:	83 ec 04             	sub    $0x4,%esp
f011b598:	68 14 bd 13 f0       	push   $0xf013bd14
f011b59d:	68 03 02 00 00       	push   $0x203
f011b5a2:	68 fa b8 13 f0       	push   $0xf013b8fa
f011b5a7:	e8 59 4c fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b5ac:	e8 17 88 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b5b1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b5b4:	74 17                	je     f011b5cd <test_kmalloc_bestfit1+0xea8>
f011b5b6:	83 ec 04             	sub    $0x4,%esp
f011b5b9:	68 14 b9 13 f0       	push   $0xf013b914
f011b5be:	68 04 02 00 00       	push   $0x204
f011b5c3:	68 fa b8 13 f0       	push   $0xf013b8fa
f011b5c8:	e8 38 4c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011b5cd:	e8 c5 1b ff ff       	call   f010d197 <sys_calculate_free_frames>
f011b5d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b5d5:	29 c2                	sub    %eax,%edx
f011b5d7:	89 d0                	mov    %edx,%eax
f011b5d9:	83 f8 40             	cmp    $0x40,%eax
f011b5dc:	74 17                	je     f011b5f5 <test_kmalloc_bestfit1+0xed0>
f011b5de:	83 ec 04             	sub    $0x4,%esp
f011b5e1:	68 44 bd 13 f0       	push   $0xf013bd44
f011b5e6:	68 05 02 00 00       	push   $0x205
f011b5eb:	68 fa b8 13 f0       	push   $0xf013b8fa
f011b5f0:	e8 10 4c fe ff       	call   f0100205 <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011b5f5:	e8 9d 1b ff ff       	call   f010d197 <sys_calculate_free_frames>
f011b5fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b5fd:	e8 c6 87 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b602:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f011b605:	83 ec 0c             	sub    $0xc,%esp
f011b608:	68 00 fc 3f 00       	push   $0x3ffc00
f011b60d:	e8 79 c7 fe ff       	call   f0107d8b <kmalloc>
f011b612:	83 c4 10             	add    $0x10,%esp
f011b615:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011b61b:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011b621:	89 c1                	mov    %eax,%ecx
f011b623:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011b62a:	10 00 00 
f011b62d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011b633:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b638:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011b63e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b644:	ba 00 00 00 00       	mov    $0x0,%edx
f011b649:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011b64f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b655:	29 d0                	sub    %edx,%eax
f011b657:	89 c3                	mov    %eax,%ebx
f011b659:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011b660:	10 00 00 
f011b663:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011b668:	0f b6 d0             	movzbl %al,%edx
f011b66b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011b671:	01 d0                	add    %edx,%eax
f011b673:	48                   	dec    %eax
f011b674:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011b67a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011b680:	ba 00 00 00 00       	mov    $0x0,%edx
f011b685:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011b68b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011b691:	29 d0                	sub    %edx,%eax
f011b693:	01 c3                	add    %eax,%ebx
f011b695:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011b69c:	10 00 00 
f011b69f:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011b6a4:	0f b6 c0             	movzbl %al,%eax
f011b6a7:	c1 e0 04             	shl    $0x4,%eax
f011b6aa:	89 c2                	mov    %eax,%edx
f011b6ac:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011b6b2:	01 d0                	add    %edx,%eax
f011b6b4:	48                   	dec    %eax
f011b6b5:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011b6bb:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011b6c1:	ba 00 00 00 00       	mov    $0x0,%edx
f011b6c6:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011b6cc:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011b6d2:	29 d0                	sub    %edx,%eax
f011b6d4:	01 d8                	add    %ebx,%eax
f011b6d6:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011b6db:	39 c1                	cmp    %eax,%ecx
f011b6dd:	74 17                	je     f011b6f6 <test_kmalloc_bestfit1+0xfd1>
f011b6df:	83 ec 04             	sub    $0x4,%esp
f011b6e2:	68 14 bd 13 f0       	push   $0xf013bd14
f011b6e7:	68 0b 02 00 00       	push   $0x20b
f011b6ec:	68 fa b8 13 f0       	push   $0xf013b8fa
f011b6f1:	e8 0f 4b fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b6f6:	e8 cd 86 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b6fb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b6fe:	74 17                	je     f011b717 <test_kmalloc_bestfit1+0xff2>
f011b700:	83 ec 04             	sub    $0x4,%esp
f011b703:	68 14 b9 13 f0       	push   $0xf013b914
f011b708:	68 0c 02 00 00       	push   $0x20c
f011b70d:	68 fa b8 13 f0       	push   $0xf013b8fa
f011b712:	e8 ee 4a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011b717:	e8 7b 1a ff ff       	call   f010d197 <sys_calculate_free_frames>
f011b71c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b71f:	29 c2                	sub    %eax,%edx
f011b721:	89 d0                	mov    %edx,%eax
f011b723:	3d 00 04 00 00       	cmp    $0x400,%eax
f011b728:	74 17                	je     f011b741 <test_kmalloc_bestfit1+0x101c>
f011b72a:	83 ec 04             	sub    $0x4,%esp
f011b72d:	68 44 bd 13 f0       	push   $0xf013bd44
f011b732:	68 0d 02 00 00       	push   $0x20d
f011b737:	68 fa b8 13 f0       	push   $0xf013b8fa
f011b73c:	e8 c4 4a fe ff       	call   f0100205 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f011b741:	e8 51 1a ff ff       	call   f010d197 <sys_calculate_free_frames>
f011b746:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b749:	e8 7a 86 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b74e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011b751:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011b757:	83 ec 0c             	sub    $0xc,%esp
f011b75a:	50                   	push   %eax
f011b75b:	e8 f6 c6 fe ff       	call   f0107e56 <kfree>
f011b760:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b763:	e8 60 86 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b768:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b76b:	74 17                	je     f011b784 <test_kmalloc_bestfit1+0x105f>
f011b76d:	83 ec 04             	sub    $0x4,%esp
f011b770:	68 14 b9 13 f0       	push   $0xf013b914
f011b775:	68 16 02 00 00       	push   $0x216
f011b77a:	68 fa b8 13 f0       	push   $0xf013b8fa
f011b77f:	e8 81 4a fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011b784:	e8 0e 1a ff ff       	call   f010d197 <sys_calculate_free_frames>
f011b789:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b78c:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b791:	74 17                	je     f011b7aa <test_kmalloc_bestfit1+0x1085>
f011b793:	83 ec 04             	sub    $0x4,%esp
f011b796:	68 57 bd 13 f0       	push   $0xf013bd57
f011b79b:	68 17 02 00 00       	push   $0x217
f011b7a0:	68 fa b8 13 f0       	push   $0xf013b8fa
f011b7a5:	e8 5b 4a fe ff       	call   f0100205 <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f011b7aa:	e8 e8 19 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011b7af:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b7b2:	e8 11 86 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b7b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f011b7ba:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011b7c0:	83 ec 0c             	sub    $0xc,%esp
f011b7c3:	50                   	push   %eax
f011b7c4:	e8 8d c6 fe ff       	call   f0107e56 <kfree>
f011b7c9:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b7cc:	e8 f7 85 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b7d1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b7d4:	74 17                	je     f011b7ed <test_kmalloc_bestfit1+0x10c8>
f011b7d6:	83 ec 04             	sub    $0x4,%esp
f011b7d9:	68 14 b9 13 f0       	push   $0xf013b914
f011b7de:	68 1d 02 00 00       	push   $0x21d
f011b7e3:	68 fa b8 13 f0       	push   $0xf013b8fa
f011b7e8:	e8 18 4a fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f011b7ed:	e8 a5 19 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011b7f2:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b7f5:	3d 80 00 00 00       	cmp    $0x80,%eax
f011b7fa:	74 17                	je     f011b813 <test_kmalloc_bestfit1+0x10ee>
f011b7fc:	83 ec 04             	sub    $0x4,%esp
f011b7ff:	68 57 bd 13 f0       	push   $0xf013bd57
f011b804:	68 1e 02 00 00       	push   $0x21e
f011b809:	68 fa b8 13 f0       	push   $0xf013b8fa
f011b80e:	e8 f2 49 fe ff       	call   f0100205 <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f011b813:	e8 7f 19 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011b818:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b81b:	e8 a8 85 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b820:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f011b823:	83 ec 0c             	sub    $0xc,%esp
f011b826:	68 00 fc 1f 00       	push   $0x1ffc00
f011b82b:	e8 5b c5 fe ff       	call   f0107d8b <kmalloc>
f011b830:	83 c4 10             	add    $0x10,%esp
f011b833:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f011b839:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011b83f:	89 c1                	mov    %eax,%ecx
f011b841:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011b848:	10 00 00 
f011b84b:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011b851:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b856:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011b85c:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b862:	ba 00 00 00 00       	mov    $0x0,%edx
f011b867:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011b86d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b873:	29 d0                	sub    %edx,%eax
f011b875:	89 c3                	mov    %eax,%ebx
f011b877:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011b87e:	10 00 00 
f011b881:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011b886:	0f b6 d0             	movzbl %al,%edx
f011b889:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011b88f:	01 d0                	add    %edx,%eax
f011b891:	48                   	dec    %eax
f011b892:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011b898:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b89e:	ba 00 00 00 00       	mov    $0x0,%edx
f011b8a3:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011b8a9:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b8af:	29 d0                	sub    %edx,%eax
f011b8b1:	01 c3                	add    %eax,%ebx
f011b8b3:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011b8ba:	10 00 00 
f011b8bd:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011b8c2:	0f b6 c0             	movzbl %al,%eax
f011b8c5:	c1 e0 04             	shl    $0x4,%eax
f011b8c8:	89 c2                	mov    %eax,%edx
f011b8ca:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011b8d0:	01 d0                	add    %edx,%eax
f011b8d2:	48                   	dec    %eax
f011b8d3:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011b8d9:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011b8df:	ba 00 00 00 00       	mov    $0x0,%edx
f011b8e4:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011b8ea:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011b8f0:	29 d0                	sub    %edx,%eax
f011b8f2:	01 d8                	add    %ebx,%eax
f011b8f4:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f011b8f9:	39 c1                	cmp    %eax,%ecx
f011b8fb:	74 17                	je     f011b914 <test_kmalloc_bestfit1+0x11ef>
f011b8fd:	83 ec 04             	sub    $0x4,%esp
f011b900:	68 14 bd 13 f0       	push   $0xf013bd14
f011b905:	68 27 02 00 00       	push   $0x227
f011b90a:	68 fa b8 13 f0       	push   $0xf013b8fa
f011b90f:	e8 f1 48 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b914:	e8 af 84 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b919:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b91c:	74 17                	je     f011b935 <test_kmalloc_bestfit1+0x1210>
f011b91e:	83 ec 04             	sub    $0x4,%esp
f011b921:	68 14 b9 13 f0       	push   $0xf013b914
f011b926:	68 28 02 00 00       	push   $0x228
f011b92b:	68 fa b8 13 f0       	push   $0xf013b8fa
f011b930:	e8 d0 48 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011b935:	e8 5d 18 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011b93a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b93d:	29 c2                	sub    %eax,%edx
f011b93f:	89 d0                	mov    %edx,%eax
f011b941:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b946:	74 17                	je     f011b95f <test_kmalloc_bestfit1+0x123a>
f011b948:	83 ec 04             	sub    $0x4,%esp
f011b94b:	68 44 bd 13 f0       	push   $0xf013bd44
f011b950:	68 29 02 00 00       	push   $0x229
f011b955:	68 fa b8 13 f0       	push   $0xf013b8fa
f011b95a:	e8 a6 48 fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f011b95f:	83 ec 0c             	sub    $0xc,%esp
f011b962:	68 64 bd 13 f0       	push   $0xf013bd64
f011b967:	e8 a2 53 fe ff       	call   f0100d0e <cprintf>
f011b96c:	83 c4 10             	add    $0x10,%esp

	return 1;
f011b96f:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011b974:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011b977:	5b                   	pop    %ebx
f011b978:	5f                   	pop    %edi
f011b979:	5d                   	pop    %ebp
f011b97a:	c3                   	ret    

f011b97b <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f011b97b:	55                   	push   %ebp
f011b97c:	89 e5                	mov    %esp,%ebp
f011b97e:	57                   	push   %edi
f011b97f:	53                   	push   %ebx
f011b980:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011b986:	83 ec 0c             	sub    $0xc,%esp
f011b989:	68 3c b8 13 f0       	push   $0xf013b83c
f011b98e:	e8 7b 53 fe ff       	call   f0100d0e <cprintf>
f011b993:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011b996:	83 ec 0c             	sub    $0xc,%esp
f011b999:	68 6c b8 13 f0       	push   $0xf013b86c
f011b99e:	e8 6b 53 fe ff       	call   f0100d0e <cprintf>
f011b9a3:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011b9a6:	83 ec 0c             	sub    $0xc,%esp
f011b9a9:	68 3c b8 13 f0       	push   $0xf013b83c
f011b9ae:	e8 5b 53 fe ff       	call   f0100d0e <cprintf>
f011b9b3:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011b9b6:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011b9bc:	b9 14 00 00 00       	mov    $0x14,%ecx
f011b9c1:	b8 00 00 00 00       	mov    $0x0,%eax
f011b9c6:	89 d7                	mov    %edx,%edi
f011b9c8:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011b9ca:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011b9d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011b9d4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b9d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011b9dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011b9df:	ba 00 00 00 00       	mov    $0x0,%edx
f011b9e4:	f7 75 f4             	divl   -0xc(%ebp)
f011b9e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011b9ea:	29 d0                	sub    %edx,%eax
f011b9ec:	89 c1                	mov    %eax,%ecx
f011b9ee:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011b9f5:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011b9fa:	0f b6 d0             	movzbl %al,%edx
f011b9fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011ba00:	01 d0                	add    %edx,%eax
f011ba02:	48                   	dec    %eax
f011ba03:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011ba06:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011ba09:	ba 00 00 00 00       	mov    $0x0,%edx
f011ba0e:	f7 75 ec             	divl   -0x14(%ebp)
f011ba11:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011ba14:	29 d0                	sub    %edx,%eax
f011ba16:	01 c1                	add    %eax,%ecx
f011ba18:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011ba1f:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011ba24:	0f b6 c0             	movzbl %al,%eax
f011ba27:	c1 e0 04             	shl    $0x4,%eax
f011ba2a:	89 c2                	mov    %eax,%edx
f011ba2c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011ba2f:	01 d0                	add    %edx,%eax
f011ba31:	48                   	dec    %eax
f011ba32:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011ba35:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ba38:	ba 00 00 00 00       	mov    $0x0,%edx
f011ba3d:	f7 75 e4             	divl   -0x1c(%ebp)
f011ba40:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ba43:	29 d0                	sub    %edx,%eax
f011ba45:	01 c8                	add    %ecx,%eax
f011ba47:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011ba4c:	29 c2                	sub    %eax,%edx
f011ba4e:	89 d0                	mov    %edx,%eax
f011ba50:	83 ec 0c             	sub    $0xc,%esp
f011ba53:	50                   	push   %eax
f011ba54:	e8 32 c3 fe ff       	call   f0107d8b <kmalloc>
f011ba59:	83 c4 10             	add    $0x10,%esp
f011ba5c:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f011ba62:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011ba68:	85 c0                	test   %eax,%eax
f011ba6a:	74 17                	je     f011ba83 <test_kmalloc_bestfit2+0x108>
f011ba6c:	83 ec 04             	sub    $0x4,%esp
f011ba6f:	68 ac bd 13 f0       	push   $0xf013bdac
f011ba74:	68 3f 02 00 00       	push   $0x23f
f011ba79:	68 fa b8 13 f0       	push   $0xf013b8fa
f011ba7e:	e8 82 47 fe ff       	call   f0100205 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ba83:	e8 0f 17 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011ba88:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ba8b:	e8 38 83 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ba90:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011ba93:	83 ec 0c             	sub    $0xc,%esp
f011ba96:	68 00 fc 1f 00       	push   $0x1ffc00
f011ba9b:	e8 eb c2 fe ff       	call   f0107d8b <kmalloc>
f011baa0:	83 c4 10             	add    $0x10,%esp
f011baa3:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011baa9:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011baaf:	89 c1                	mov    %eax,%ecx
f011bab1:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011bab8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011babb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bac0:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011bac3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011bac6:	ba 00 00 00 00       	mov    $0x0,%edx
f011bacb:	f7 75 d4             	divl   -0x2c(%ebp)
f011bace:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011bad1:	29 d0                	sub    %edx,%eax
f011bad3:	89 c3                	mov    %eax,%ebx
f011bad5:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011badc:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011bae1:	0f b6 d0             	movzbl %al,%edx
f011bae4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011bae7:	01 d0                	add    %edx,%eax
f011bae9:	48                   	dec    %eax
f011baea:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011baed:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011baf0:	ba 00 00 00 00       	mov    $0x0,%edx
f011baf5:	f7 75 cc             	divl   -0x34(%ebp)
f011baf8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011bafb:	29 d0                	sub    %edx,%eax
f011bafd:	01 c3                	add    %eax,%ebx
f011baff:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011bb06:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011bb0b:	0f b6 c0             	movzbl %al,%eax
f011bb0e:	c1 e0 04             	shl    $0x4,%eax
f011bb11:	89 c2                	mov    %eax,%edx
f011bb13:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011bb16:	01 d0                	add    %edx,%eax
f011bb18:	48                   	dec    %eax
f011bb19:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011bb1c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011bb1f:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb24:	f7 75 c4             	divl   -0x3c(%ebp)
f011bb27:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011bb2a:	29 d0                	sub    %edx,%eax
f011bb2c:	01 d8                	add    %ebx,%eax
f011bb2e:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011bb33:	39 c1                	cmp    %eax,%ecx
f011bb35:	74 17                	je     f011bb4e <test_kmalloc_bestfit2+0x1d3>
f011bb37:	83 ec 04             	sub    $0x4,%esp
f011bb3a:	68 14 bd 13 f0       	push   $0xf013bd14
f011bb3f:	68 49 02 00 00       	push   $0x249
f011bb44:	68 fa b8 13 f0       	push   $0xf013b8fa
f011bb49:	e8 b7 46 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bb4e:	e8 75 82 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bb53:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bb56:	74 17                	je     f011bb6f <test_kmalloc_bestfit2+0x1f4>
f011bb58:	83 ec 04             	sub    $0x4,%esp
f011bb5b:	68 14 b9 13 f0       	push   $0xf013b914
f011bb60:	68 4a 02 00 00       	push   $0x24a
f011bb65:	68 fa b8 13 f0       	push   $0xf013b8fa
f011bb6a:	e8 96 46 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011bb6f:	e8 23 16 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011bb74:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bb77:	29 c2                	sub    %eax,%edx
f011bb79:	89 d0                	mov    %edx,%eax
f011bb7b:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bb80:	74 17                	je     f011bb99 <test_kmalloc_bestfit2+0x21e>
f011bb82:	83 ec 04             	sub    $0x4,%esp
f011bb85:	68 44 bd 13 f0       	push   $0xf013bd44
f011bb8a:	68 4b 02 00 00       	push   $0x24b
f011bb8f:	68 fa b8 13 f0       	push   $0xf013b8fa
f011bb94:	e8 6c 46 fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011bb99:	e8 f9 15 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011bb9e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bba1:	e8 22 82 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bba6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011bba9:	83 ec 0c             	sub    $0xc,%esp
f011bbac:	68 00 fc 1f 00       	push   $0x1ffc00
f011bbb1:	e8 d5 c1 fe ff       	call   f0107d8b <kmalloc>
f011bbb6:	83 c4 10             	add    $0x10,%esp
f011bbb9:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011bbbf:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011bbc5:	89 c1                	mov    %eax,%ecx
f011bbc7:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011bbce:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011bbd1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bbd6:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011bbd9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011bbdc:	ba 00 00 00 00       	mov    $0x0,%edx
f011bbe1:	f7 75 bc             	divl   -0x44(%ebp)
f011bbe4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011bbe7:	29 d0                	sub    %edx,%eax
f011bbe9:	89 c3                	mov    %eax,%ebx
f011bbeb:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011bbf2:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011bbf7:	0f b6 d0             	movzbl %al,%edx
f011bbfa:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011bbfd:	01 d0                	add    %edx,%eax
f011bbff:	48                   	dec    %eax
f011bc00:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011bc03:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011bc06:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc0b:	f7 75 b4             	divl   -0x4c(%ebp)
f011bc0e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011bc11:	29 d0                	sub    %edx,%eax
f011bc13:	01 c3                	add    %eax,%ebx
f011bc15:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011bc1c:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011bc21:	0f b6 c0             	movzbl %al,%eax
f011bc24:	c1 e0 04             	shl    $0x4,%eax
f011bc27:	89 c2                	mov    %eax,%edx
f011bc29:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011bc2c:	01 d0                	add    %edx,%eax
f011bc2e:	48                   	dec    %eax
f011bc2f:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011bc32:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011bc35:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc3a:	f7 75 ac             	divl   -0x54(%ebp)
f011bc3d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011bc40:	29 d0                	sub    %edx,%eax
f011bc42:	01 d8                	add    %ebx,%eax
f011bc44:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011bc49:	39 c1                	cmp    %eax,%ecx
f011bc4b:	74 17                	je     f011bc64 <test_kmalloc_bestfit2+0x2e9>
f011bc4d:	83 ec 04             	sub    $0x4,%esp
f011bc50:	68 14 bd 13 f0       	push   $0xf013bd14
f011bc55:	68 51 02 00 00       	push   $0x251
f011bc5a:	68 fa b8 13 f0       	push   $0xf013b8fa
f011bc5f:	e8 a1 45 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bc64:	e8 5f 81 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bc69:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bc6c:	74 17                	je     f011bc85 <test_kmalloc_bestfit2+0x30a>
f011bc6e:	83 ec 04             	sub    $0x4,%esp
f011bc71:	68 14 b9 13 f0       	push   $0xf013b914
f011bc76:	68 52 02 00 00       	push   $0x252
f011bc7b:	68 fa b8 13 f0       	push   $0xf013b8fa
f011bc80:	e8 80 45 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011bc85:	e8 0d 15 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011bc8a:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bc8d:	29 c2                	sub    %eax,%edx
f011bc8f:	89 d0                	mov    %edx,%eax
f011bc91:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bc96:	74 17                	je     f011bcaf <test_kmalloc_bestfit2+0x334>
f011bc98:	83 ec 04             	sub    $0x4,%esp
f011bc9b:	68 44 bd 13 f0       	push   $0xf013bd44
f011bca0:	68 53 02 00 00       	push   $0x253
f011bca5:	68 fa b8 13 f0       	push   $0xf013b8fa
f011bcaa:	e8 56 45 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011bcaf:	e8 e3 14 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011bcb4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bcb7:	e8 0c 81 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bcbc:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011bcbf:	83 ec 0c             	sub    $0xc,%esp
f011bcc2:	68 00 08 00 00       	push   $0x800
f011bcc7:	e8 bf c0 fe ff       	call   f0107d8b <kmalloc>
f011bccc:	83 c4 10             	add    $0x10,%esp
f011bccf:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011bcd5:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011bcdb:	89 c1                	mov    %eax,%ecx
f011bcdd:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011bce4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011bce7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bcec:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011bcef:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011bcf2:	ba 00 00 00 00       	mov    $0x0,%edx
f011bcf7:	f7 75 a4             	divl   -0x5c(%ebp)
f011bcfa:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011bcfd:	29 d0                	sub    %edx,%eax
f011bcff:	89 c3                	mov    %eax,%ebx
f011bd01:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011bd08:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011bd0d:	0f b6 d0             	movzbl %al,%edx
f011bd10:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011bd13:	01 d0                	add    %edx,%eax
f011bd15:	48                   	dec    %eax
f011bd16:	89 45 98             	mov    %eax,-0x68(%ebp)
f011bd19:	8b 45 98             	mov    -0x68(%ebp),%eax
f011bd1c:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd21:	f7 75 9c             	divl   -0x64(%ebp)
f011bd24:	8b 45 98             	mov    -0x68(%ebp),%eax
f011bd27:	29 d0                	sub    %edx,%eax
f011bd29:	01 c3                	add    %eax,%ebx
f011bd2b:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011bd32:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011bd37:	0f b6 c0             	movzbl %al,%eax
f011bd3a:	c1 e0 04             	shl    $0x4,%eax
f011bd3d:	89 c2                	mov    %eax,%edx
f011bd3f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011bd42:	01 d0                	add    %edx,%eax
f011bd44:	48                   	dec    %eax
f011bd45:	89 45 90             	mov    %eax,-0x70(%ebp)
f011bd48:	8b 45 90             	mov    -0x70(%ebp),%eax
f011bd4b:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd50:	f7 75 94             	divl   -0x6c(%ebp)
f011bd53:	8b 45 90             	mov    -0x70(%ebp),%eax
f011bd56:	29 d0                	sub    %edx,%eax
f011bd58:	01 d8                	add    %ebx,%eax
f011bd5a:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011bd5f:	39 c1                	cmp    %eax,%ecx
f011bd61:	74 17                	je     f011bd7a <test_kmalloc_bestfit2+0x3ff>
f011bd63:	83 ec 04             	sub    $0x4,%esp
f011bd66:	68 14 bd 13 f0       	push   $0xf013bd14
f011bd6b:	68 59 02 00 00       	push   $0x259
f011bd70:	68 fa b8 13 f0       	push   $0xf013b8fa
f011bd75:	e8 8b 44 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bd7a:	e8 49 80 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bd7f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bd82:	74 17                	je     f011bd9b <test_kmalloc_bestfit2+0x420>
f011bd84:	83 ec 04             	sub    $0x4,%esp
f011bd87:	68 14 b9 13 f0       	push   $0xf013b914
f011bd8c:	68 5a 02 00 00       	push   $0x25a
f011bd91:	68 fa b8 13 f0       	push   $0xf013b8fa
f011bd96:	e8 6a 44 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011bd9b:	e8 f7 13 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011bda0:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bda3:	29 c2                	sub    %eax,%edx
f011bda5:	89 d0                	mov    %edx,%eax
f011bda7:	83 f8 01             	cmp    $0x1,%eax
f011bdaa:	74 17                	je     f011bdc3 <test_kmalloc_bestfit2+0x448>
f011bdac:	83 ec 04             	sub    $0x4,%esp
f011bdaf:	68 44 bd 13 f0       	push   $0xf013bd44
f011bdb4:	68 5b 02 00 00       	push   $0x25b
f011bdb9:	68 fa b8 13 f0       	push   $0xf013b8fa
f011bdbe:	e8 42 44 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011bdc3:	e8 cf 13 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011bdc8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bdcb:	e8 f8 7f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bdd0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011bdd3:	83 ec 0c             	sub    $0xc,%esp
f011bdd6:	68 00 08 00 00       	push   $0x800
f011bddb:	e8 ab bf fe ff       	call   f0107d8b <kmalloc>
f011bde0:	83 c4 10             	add    $0x10,%esp
f011bde3:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011bde9:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011bdef:	89 c1                	mov    %eax,%ecx
f011bdf1:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011bdf8:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011bdfb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011be00:	89 45 88             	mov    %eax,-0x78(%ebp)
f011be03:	8b 45 88             	mov    -0x78(%ebp),%eax
f011be06:	ba 00 00 00 00       	mov    $0x0,%edx
f011be0b:	f7 75 8c             	divl   -0x74(%ebp)
f011be0e:	8b 45 88             	mov    -0x78(%ebp),%eax
f011be11:	29 d0                	sub    %edx,%eax
f011be13:	89 c3                	mov    %eax,%ebx
f011be15:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011be1c:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011be21:	0f b6 d0             	movzbl %al,%edx
f011be24:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011be27:	01 d0                	add    %edx,%eax
f011be29:	48                   	dec    %eax
f011be2a:	89 45 80             	mov    %eax,-0x80(%ebp)
f011be2d:	8b 45 80             	mov    -0x80(%ebp),%eax
f011be30:	ba 00 00 00 00       	mov    $0x0,%edx
f011be35:	f7 75 84             	divl   -0x7c(%ebp)
f011be38:	8b 45 80             	mov    -0x80(%ebp),%eax
f011be3b:	29 d0                	sub    %edx,%eax
f011be3d:	01 c3                	add    %eax,%ebx
f011be3f:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011be46:	10 00 00 
f011be49:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011be4e:	0f b6 c0             	movzbl %al,%eax
f011be51:	c1 e0 04             	shl    $0x4,%eax
f011be54:	89 c2                	mov    %eax,%edx
f011be56:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011be5c:	01 d0                	add    %edx,%eax
f011be5e:	48                   	dec    %eax
f011be5f:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011be65:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011be6b:	ba 00 00 00 00       	mov    $0x0,%edx
f011be70:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011be76:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011be7c:	29 d0                	sub    %edx,%eax
f011be7e:	01 d8                	add    %ebx,%eax
f011be80:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011be85:	39 c1                	cmp    %eax,%ecx
f011be87:	74 17                	je     f011bea0 <test_kmalloc_bestfit2+0x525>
f011be89:	83 ec 04             	sub    $0x4,%esp
f011be8c:	68 14 bd 13 f0       	push   $0xf013bd14
f011be91:	68 61 02 00 00       	push   $0x261
f011be96:	68 fa b8 13 f0       	push   $0xf013b8fa
f011be9b:	e8 65 43 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bea0:	e8 23 7f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bea5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bea8:	74 17                	je     f011bec1 <test_kmalloc_bestfit2+0x546>
f011beaa:	83 ec 04             	sub    $0x4,%esp
f011bead:	68 14 b9 13 f0       	push   $0xf013b914
f011beb2:	68 62 02 00 00       	push   $0x262
f011beb7:	68 fa b8 13 f0       	push   $0xf013b8fa
f011bebc:	e8 44 43 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011bec1:	e8 d1 12 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011bec6:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bec9:	29 c2                	sub    %eax,%edx
f011becb:	89 d0                	mov    %edx,%eax
f011becd:	83 f8 01             	cmp    $0x1,%eax
f011bed0:	74 17                	je     f011bee9 <test_kmalloc_bestfit2+0x56e>
f011bed2:	83 ec 04             	sub    $0x4,%esp
f011bed5:	68 44 bd 13 f0       	push   $0xf013bd44
f011beda:	68 63 02 00 00       	push   $0x263
f011bedf:	68 fa b8 13 f0       	push   $0xf013b8fa
f011bee4:	e8 1c 43 fe ff       	call   f0100205 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bee9:	e8 a9 12 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011beee:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bef1:	e8 d2 7e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bef6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011bef9:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011beff:	83 ec 0c             	sub    $0xc,%esp
f011bf02:	50                   	push   %eax
f011bf03:	e8 4e bf fe ff       	call   f0107e56 <kfree>
f011bf08:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bf0b:	e8 b8 7e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bf10:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bf13:	74 17                	je     f011bf2c <test_kmalloc_bestfit2+0x5b1>
f011bf15:	83 ec 04             	sub    $0x4,%esp
f011bf18:	68 14 b9 13 f0       	push   $0xf013b914
f011bf1d:	68 69 02 00 00       	push   $0x269
f011bf22:	68 fa b8 13 f0       	push   $0xf013b8fa
f011bf27:	e8 d9 42 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f011bf2c:	e8 66 12 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011bf31:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011bf34:	83 f8 01             	cmp    $0x1,%eax
f011bf37:	74 17                	je     f011bf50 <test_kmalloc_bestfit2+0x5d5>
f011bf39:	83 ec 04             	sub    $0x4,%esp
f011bf3c:	68 44 bd 13 f0       	push   $0xf013bd44
f011bf41:	68 6a 02 00 00       	push   $0x26a
f011bf46:	68 fa b8 13 f0       	push   $0xf013b8fa
f011bf4b:	e8 b5 42 fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011bf50:	e8 42 12 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011bf55:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bf58:	e8 6b 7e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bf5d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011bf60:	83 ec 0c             	sub    $0xc,%esp
f011bf63:	68 00 1c 00 00       	push   $0x1c00
f011bf68:	e8 1e be fe ff       	call   f0107d8b <kmalloc>
f011bf6d:	83 c4 10             	add    $0x10,%esp
f011bf70:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011bf76:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011bf7c:	89 c1                	mov    %eax,%ecx
f011bf7e:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011bf85:	10 00 00 
f011bf88:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011bf8e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bf93:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011bf99:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011bf9f:	ba 00 00 00 00       	mov    $0x0,%edx
f011bfa4:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011bfaa:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011bfb0:	29 d0                	sub    %edx,%eax
f011bfb2:	89 c3                	mov    %eax,%ebx
f011bfb4:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011bfbb:	10 00 00 
f011bfbe:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011bfc3:	0f b6 d0             	movzbl %al,%edx
f011bfc6:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011bfcc:	01 d0                	add    %edx,%eax
f011bfce:	48                   	dec    %eax
f011bfcf:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011bfd5:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011bfdb:	ba 00 00 00 00       	mov    $0x0,%edx
f011bfe0:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011bfe6:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011bfec:	29 d0                	sub    %edx,%eax
f011bfee:	01 c3                	add    %eax,%ebx
f011bff0:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011bff7:	10 00 00 
f011bffa:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011bfff:	0f b6 c0             	movzbl %al,%eax
f011c002:	c1 e0 04             	shl    $0x4,%eax
f011c005:	89 c2                	mov    %eax,%edx
f011c007:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011c00d:	01 d0                	add    %edx,%eax
f011c00f:	48                   	dec    %eax
f011c010:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011c016:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011c01c:	ba 00 00 00 00       	mov    $0x0,%edx
f011c021:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011c027:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011c02d:	29 d0                	sub    %edx,%eax
f011c02f:	01 d8                	add    %ebx,%eax
f011c031:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011c036:	39 c1                	cmp    %eax,%ecx
f011c038:	74 17                	je     f011c051 <test_kmalloc_bestfit2+0x6d6>
f011c03a:	83 ec 04             	sub    $0x4,%esp
f011c03d:	68 14 bd 13 f0       	push   $0xf013bd14
f011c042:	68 70 02 00 00       	push   $0x270
f011c047:	68 fa b8 13 f0       	push   $0xf013b8fa
f011c04c:	e8 b4 41 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c051:	e8 72 7d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c056:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c059:	74 17                	je     f011c072 <test_kmalloc_bestfit2+0x6f7>
f011c05b:	83 ec 04             	sub    $0x4,%esp
f011c05e:	68 14 b9 13 f0       	push   $0xf013b914
f011c063:	68 71 02 00 00       	push   $0x271
f011c068:	68 fa b8 13 f0       	push   $0xf013b8fa
f011c06d:	e8 93 41 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f011c072:	e8 20 11 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011c077:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c07a:	29 c2                	sub    %eax,%edx
f011c07c:	89 d0                	mov    %edx,%eax
f011c07e:	83 f8 02             	cmp    $0x2,%eax
f011c081:	74 17                	je     f011c09a <test_kmalloc_bestfit2+0x71f>
f011c083:	83 ec 04             	sub    $0x4,%esp
f011c086:	68 44 bd 13 f0       	push   $0xf013bd44
f011c08b:	68 72 02 00 00       	push   $0x272
f011c090:	68 fa b8 13 f0       	push   $0xf013b8fa
f011c095:	e8 6b 41 fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c09a:	e8 f8 10 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011c09f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c0a2:	e8 21 7d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c0a7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011c0aa:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011c0b0:	83 ec 0c             	sub    $0xc,%esp
f011c0b3:	50                   	push   %eax
f011c0b4:	e8 9d bd fe ff       	call   f0107e56 <kfree>
f011c0b9:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c0bc:	e8 07 7d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c0c1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c0c4:	74 17                	je     f011c0dd <test_kmalloc_bestfit2+0x762>
f011c0c6:	83 ec 04             	sub    $0x4,%esp
f011c0c9:	68 14 b9 13 f0       	push   $0xf013b914
f011c0ce:	68 78 02 00 00       	push   $0x278
f011c0d3:	68 fa b8 13 f0       	push   $0xf013b8fa
f011c0d8:	e8 28 41 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f011c0dd:	e8 b5 10 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011c0e2:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c0e5:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c0ea:	74 17                	je     f011c103 <test_kmalloc_bestfit2+0x788>
f011c0ec:	83 ec 04             	sub    $0x4,%esp
f011c0ef:	68 c8 bb 13 f0       	push   $0xf013bbc8
f011c0f4:	68 79 02 00 00       	push   $0x279
f011c0f9:	68 fa b8 13 f0       	push   $0xf013b8fa
f011c0fe:	e8 02 41 fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c103:	e8 8f 10 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011c108:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c10b:	e8 b8 7c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c110:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011c113:	83 ec 0c             	sub    $0xc,%esp
f011c116:	68 00 fc 2f 00       	push   $0x2ffc00
f011c11b:	e8 6b bc fe ff       	call   f0107d8b <kmalloc>
f011c120:	83 c4 10             	add    $0x10,%esp
f011c123:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c129:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011c12f:	89 c1                	mov    %eax,%ecx
f011c131:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011c138:	10 00 00 
f011c13b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011c141:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c146:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011c14c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c152:	ba 00 00 00 00       	mov    $0x0,%edx
f011c157:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011c15d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c163:	29 d0                	sub    %edx,%eax
f011c165:	89 c3                	mov    %eax,%ebx
f011c167:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011c16e:	10 00 00 
f011c171:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011c176:	0f b6 d0             	movzbl %al,%edx
f011c179:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011c17f:	01 d0                	add    %edx,%eax
f011c181:	48                   	dec    %eax
f011c182:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011c188:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c18e:	ba 00 00 00 00       	mov    $0x0,%edx
f011c193:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011c199:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c19f:	29 d0                	sub    %edx,%eax
f011c1a1:	01 c3                	add    %eax,%ebx
f011c1a3:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011c1aa:	10 00 00 
f011c1ad:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011c1b2:	0f b6 c0             	movzbl %al,%eax
f011c1b5:	c1 e0 04             	shl    $0x4,%eax
f011c1b8:	89 c2                	mov    %eax,%edx
f011c1ba:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011c1c0:	01 d0                	add    %edx,%eax
f011c1c2:	48                   	dec    %eax
f011c1c3:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011c1c9:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c1cf:	ba 00 00 00 00       	mov    $0x0,%edx
f011c1d4:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011c1da:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c1e0:	29 d0                	sub    %edx,%eax
f011c1e2:	01 d8                	add    %ebx,%eax
f011c1e4:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011c1e9:	39 c1                	cmp    %eax,%ecx
f011c1eb:	74 17                	je     f011c204 <test_kmalloc_bestfit2+0x889>
f011c1ed:	83 ec 04             	sub    $0x4,%esp
f011c1f0:	68 14 bd 13 f0       	push   $0xf013bd14
f011c1f5:	68 7f 02 00 00       	push   $0x27f
f011c1fa:	68 fa b8 13 f0       	push   $0xf013b8fa
f011c1ff:	e8 01 40 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c204:	e8 bf 7b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c209:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c20c:	74 17                	je     f011c225 <test_kmalloc_bestfit2+0x8aa>
f011c20e:	83 ec 04             	sub    $0x4,%esp
f011c211:	68 14 b9 13 f0       	push   $0xf013b914
f011c216:	68 80 02 00 00       	push   $0x280
f011c21b:	68 fa b8 13 f0       	push   $0xf013b8fa
f011c220:	e8 e0 3f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f011c225:	e8 6d 0f ff ff       	call   f010d197 <sys_calculate_free_frames>
f011c22a:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c22d:	29 c2                	sub    %eax,%edx
f011c22f:	89 d0                	mov    %edx,%eax
f011c231:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c236:	74 17                	je     f011c24f <test_kmalloc_bestfit2+0x8d4>
f011c238:	83 ec 04             	sub    $0x4,%esp
f011c23b:	68 44 bd 13 f0       	push   $0xf013bd44
f011c240:	68 81 02 00 00       	push   $0x281
f011c245:	68 fa b8 13 f0       	push   $0xf013b8fa
f011c24a:	e8 b6 3f fe ff       	call   f0100205 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011c24f:	e8 43 0f ff ff       	call   f010d197 <sys_calculate_free_frames>
f011c254:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c257:	e8 6c 7b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c25c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011c25f:	83 ec 0c             	sub    $0xc,%esp
f011c262:	68 00 18 20 00       	push   $0x201800
f011c267:	e8 1f bb fe ff       	call   f0107d8b <kmalloc>
f011c26c:	83 c4 10             	add    $0x10,%esp
f011c26f:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c275:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011c27b:	89 c1                	mov    %eax,%ecx
f011c27d:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011c284:	10 00 00 
f011c287:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011c28d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c292:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011c298:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c29e:	ba 00 00 00 00       	mov    $0x0,%edx
f011c2a3:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011c2a9:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c2af:	29 d0                	sub    %edx,%eax
f011c2b1:	89 c3                	mov    %eax,%ebx
f011c2b3:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011c2ba:	10 00 00 
f011c2bd:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011c2c2:	0f b6 d0             	movzbl %al,%edx
f011c2c5:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011c2cb:	01 d0                	add    %edx,%eax
f011c2cd:	48                   	dec    %eax
f011c2ce:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011c2d4:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c2da:	ba 00 00 00 00       	mov    $0x0,%edx
f011c2df:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011c2e5:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c2eb:	29 d0                	sub    %edx,%eax
f011c2ed:	01 c3                	add    %eax,%ebx
f011c2ef:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011c2f6:	10 00 00 
f011c2f9:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011c2fe:	0f b6 c0             	movzbl %al,%eax
f011c301:	c1 e0 04             	shl    $0x4,%eax
f011c304:	89 c2                	mov    %eax,%edx
f011c306:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011c30c:	01 d0                	add    %edx,%eax
f011c30e:	48                   	dec    %eax
f011c30f:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011c315:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c31b:	ba 00 00 00 00       	mov    $0x0,%edx
f011c320:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011c326:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c32c:	29 d0                	sub    %edx,%eax
f011c32e:	01 d8                	add    %ebx,%eax
f011c330:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011c335:	39 c1                	cmp    %eax,%ecx
f011c337:	74 17                	je     f011c350 <test_kmalloc_bestfit2+0x9d5>
f011c339:	83 ec 04             	sub    $0x4,%esp
f011c33c:	68 14 bd 13 f0       	push   $0xf013bd14
f011c341:	68 87 02 00 00       	push   $0x287
f011c346:	68 fa b8 13 f0       	push   $0xf013b8fa
f011c34b:	e8 b5 3e fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c350:	e8 73 7a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c355:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c358:	74 17                	je     f011c371 <test_kmalloc_bestfit2+0x9f6>
f011c35a:	83 ec 04             	sub    $0x4,%esp
f011c35d:	68 14 b9 13 f0       	push   $0xf013b914
f011c362:	68 88 02 00 00       	push   $0x288
f011c367:	68 fa b8 13 f0       	push   $0xf013b8fa
f011c36c:	e8 94 3e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011c371:	e8 21 0e ff ff       	call   f010d197 <sys_calculate_free_frames>
f011c376:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c379:	29 c2                	sub    %eax,%edx
f011c37b:	89 d0                	mov    %edx,%eax
f011c37d:	3d 02 02 00 00       	cmp    $0x202,%eax
f011c382:	74 17                	je     f011c39b <test_kmalloc_bestfit2+0xa20>
f011c384:	83 ec 04             	sub    $0x4,%esp
f011c387:	68 44 bd 13 f0       	push   $0xf013bd44
f011c38c:	68 89 02 00 00       	push   $0x289
f011c391:	68 fa b8 13 f0       	push   $0xf013b8fa
f011c396:	e8 6a 3e fe ff       	call   f0100205 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011c39b:	e8 f7 0d ff ff       	call   f010d197 <sys_calculate_free_frames>
f011c3a0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c3a3:	e8 20 7a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c3a8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011c3ab:	83 ec 0c             	sub    $0xc,%esp
f011c3ae:	68 00 fc 4f 00       	push   $0x4ffc00
f011c3b3:	e8 d3 b9 fe ff       	call   f0107d8b <kmalloc>
f011c3b8:	83 c4 10             	add    $0x10,%esp
f011c3bb:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011c3c1:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011c3c7:	89 c1                	mov    %eax,%ecx
f011c3c9:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011c3d0:	10 00 00 
f011c3d3:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011c3d9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c3de:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011c3e4:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c3ea:	ba 00 00 00 00       	mov    $0x0,%edx
f011c3ef:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011c3f5:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c3fb:	29 d0                	sub    %edx,%eax
f011c3fd:	89 c3                	mov    %eax,%ebx
f011c3ff:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011c406:	10 00 00 
f011c409:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011c40e:	0f b6 d0             	movzbl %al,%edx
f011c411:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011c417:	01 d0                	add    %edx,%eax
f011c419:	48                   	dec    %eax
f011c41a:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011c420:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c426:	ba 00 00 00 00       	mov    $0x0,%edx
f011c42b:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011c431:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c437:	29 d0                	sub    %edx,%eax
f011c439:	01 c3                	add    %eax,%ebx
f011c43b:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011c442:	10 00 00 
f011c445:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011c44a:	0f b6 c0             	movzbl %al,%eax
f011c44d:	c1 e0 04             	shl    $0x4,%eax
f011c450:	89 c2                	mov    %eax,%edx
f011c452:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011c458:	01 d0                	add    %edx,%eax
f011c45a:	48                   	dec    %eax
f011c45b:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011c461:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c467:	ba 00 00 00 00       	mov    $0x0,%edx
f011c46c:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011c472:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c478:	29 d0                	sub    %edx,%eax
f011c47a:	01 d8                	add    %ebx,%eax
f011c47c:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011c481:	39 c1                	cmp    %eax,%ecx
f011c483:	74 17                	je     f011c49c <test_kmalloc_bestfit2+0xb21>
f011c485:	83 ec 04             	sub    $0x4,%esp
f011c488:	68 14 bd 13 f0       	push   $0xf013bd14
f011c48d:	68 8f 02 00 00       	push   $0x28f
f011c492:	68 fa b8 13 f0       	push   $0xf013b8fa
f011c497:	e8 69 3d fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c49c:	e8 27 79 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c4a1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c4a4:	74 17                	je     f011c4bd <test_kmalloc_bestfit2+0xb42>
f011c4a6:	83 ec 04             	sub    $0x4,%esp
f011c4a9:	68 14 b9 13 f0       	push   $0xf013b914
f011c4ae:	68 90 02 00 00       	push   $0x290
f011c4b3:	68 fa b8 13 f0       	push   $0xf013b8fa
f011c4b8:	e8 48 3d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011c4bd:	e8 d5 0c ff ff       	call   f010d197 <sys_calculate_free_frames>
f011c4c2:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c4c5:	29 c2                	sub    %eax,%edx
f011c4c7:	89 d0                	mov    %edx,%eax
f011c4c9:	3d 00 05 00 00       	cmp    $0x500,%eax
f011c4ce:	74 17                	je     f011c4e7 <test_kmalloc_bestfit2+0xb6c>
f011c4d0:	83 ec 04             	sub    $0x4,%esp
f011c4d3:	68 44 bd 13 f0       	push   $0xf013bd44
f011c4d8:	68 91 02 00 00       	push   $0x291
f011c4dd:	68 fa b8 13 f0       	push   $0xf013b8fa
f011c4e2:	e8 1e 3d fe ff       	call   f0100205 <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c4e7:	e8 ab 0c ff ff       	call   f010d197 <sys_calculate_free_frames>
f011c4ec:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c4ef:	e8 d4 78 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c4f4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f011c4f7:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011c4fd:	83 ec 0c             	sub    $0xc,%esp
f011c500:	50                   	push   %eax
f011c501:	e8 50 b9 fe ff       	call   f0107e56 <kfree>
f011c506:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c509:	e8 ba 78 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c50e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c511:	74 17                	je     f011c52a <test_kmalloc_bestfit2+0xbaf>
f011c513:	83 ec 04             	sub    $0x4,%esp
f011c516:	68 14 b9 13 f0       	push   $0xf013b914
f011c51b:	68 97 02 00 00       	push   $0x297
f011c520:	68 fa b8 13 f0       	push   $0xf013b8fa
f011c525:	e8 db 3c fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f011c52a:	e8 68 0c ff ff       	call   f010d197 <sys_calculate_free_frames>
f011c52f:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c532:	3d 02 02 00 00       	cmp    $0x202,%eax
f011c537:	74 17                	je     f011c550 <test_kmalloc_bestfit2+0xbd5>
f011c539:	83 ec 04             	sub    $0x4,%esp
f011c53c:	68 c8 bb 13 f0       	push   $0xf013bbc8
f011c541:	68 98 02 00 00       	push   $0x298
f011c546:	68 fa b8 13 f0       	push   $0xf013b8fa
f011c54b:	e8 b5 3c fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c550:	e8 42 0c ff ff       	call   f010d197 <sys_calculate_free_frames>
f011c555:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c558:	e8 6b 78 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c55d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011c560:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011c566:	83 ec 0c             	sub    $0xc,%esp
f011c569:	50                   	push   %eax
f011c56a:	e8 e7 b8 fe ff       	call   f0107e56 <kfree>
f011c56f:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c572:	e8 51 78 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c577:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c57a:	74 17                	je     f011c593 <test_kmalloc_bestfit2+0xc18>
f011c57c:	83 ec 04             	sub    $0x4,%esp
f011c57f:	68 14 b9 13 f0       	push   $0xf013b914
f011c584:	68 9e 02 00 00       	push   $0x29e
f011c589:	68 fa b8 13 f0       	push   $0xf013b8fa
f011c58e:	e8 72 3c fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c593:	e8 ff 0b ff ff       	call   f010d197 <sys_calculate_free_frames>
f011c598:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c59b:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c5a0:	74 17                	je     f011c5b9 <test_kmalloc_bestfit2+0xc3e>
f011c5a2:	83 ec 04             	sub    $0x4,%esp
f011c5a5:	68 f4 bd 13 f0       	push   $0xf013bdf4
f011c5aa:	68 9f 02 00 00       	push   $0x29f
f011c5af:	68 fa b8 13 f0       	push   $0xf013b8fa
f011c5b4:	e8 4c 3c fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c5b9:	e8 d9 0b ff ff       	call   f010d197 <sys_calculate_free_frames>
f011c5be:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c5c1:	e8 02 78 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c5c6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f011c5c9:	83 ec 0c             	sub    $0xc,%esp
f011c5cc:	68 00 fc 1f 00       	push   $0x1ffc00
f011c5d1:	e8 b5 b7 fe ff       	call   f0107d8b <kmalloc>
f011c5d6:	83 c4 10             	add    $0x10,%esp
f011c5d9:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c5df:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011c5e5:	89 c1                	mov    %eax,%ecx
f011c5e7:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011c5ee:	10 00 00 
f011c5f1:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011c5f7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c5fc:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011c602:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c608:	ba 00 00 00 00       	mov    $0x0,%edx
f011c60d:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011c613:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c619:	29 d0                	sub    %edx,%eax
f011c61b:	89 c3                	mov    %eax,%ebx
f011c61d:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011c624:	10 00 00 
f011c627:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011c62c:	0f b6 d0             	movzbl %al,%edx
f011c62f:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011c635:	01 d0                	add    %edx,%eax
f011c637:	48                   	dec    %eax
f011c638:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011c63e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011c644:	ba 00 00 00 00       	mov    $0x0,%edx
f011c649:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011c64f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011c655:	29 d0                	sub    %edx,%eax
f011c657:	01 c3                	add    %eax,%ebx
f011c659:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011c660:	10 00 00 
f011c663:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011c668:	0f b6 c0             	movzbl %al,%eax
f011c66b:	c1 e0 04             	shl    $0x4,%eax
f011c66e:	89 c2                	mov    %eax,%edx
f011c670:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011c676:	01 d0                	add    %edx,%eax
f011c678:	48                   	dec    %eax
f011c679:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011c67f:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011c685:	ba 00 00 00 00       	mov    $0x0,%edx
f011c68a:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011c690:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011c696:	29 d0                	sub    %edx,%eax
f011c698:	01 d8                	add    %ebx,%eax
f011c69a:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011c69f:	39 c1                	cmp    %eax,%ecx
f011c6a1:	74 17                	je     f011c6ba <test_kmalloc_bestfit2+0xd3f>
f011c6a3:	83 ec 04             	sub    $0x4,%esp
f011c6a6:	68 14 bd 13 f0       	push   $0xf013bd14
f011c6ab:	68 a5 02 00 00       	push   $0x2a5
f011c6b0:	68 fa b8 13 f0       	push   $0xf013b8fa
f011c6b5:	e8 4b 3b fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c6ba:	e8 09 77 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c6bf:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c6c2:	74 17                	je     f011c6db <test_kmalloc_bestfit2+0xd60>
f011c6c4:	83 ec 04             	sub    $0x4,%esp
f011c6c7:	68 14 b9 13 f0       	push   $0xf013b914
f011c6cc:	68 a6 02 00 00       	push   $0x2a6
f011c6d1:	68 fa b8 13 f0       	push   $0xf013b8fa
f011c6d6:	e8 2a 3b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f011c6db:	e8 b7 0a ff ff       	call   f010d197 <sys_calculate_free_frames>
f011c6e0:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c6e3:	29 c2                	sub    %eax,%edx
f011c6e5:	89 d0                	mov    %edx,%eax
f011c6e7:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c6ec:	74 17                	je     f011c705 <test_kmalloc_bestfit2+0xd8a>
f011c6ee:	83 ec 04             	sub    $0x4,%esp
f011c6f1:	68 32 be 13 f0       	push   $0xf013be32
f011c6f6:	68 a7 02 00 00       	push   $0x2a7
f011c6fb:	68 fa b8 13 f0       	push   $0xf013b8fa
f011c700:	e8 00 3b fe ff       	call   f0100205 <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f011c705:	e8 8d 0a ff ff       	call   f010d197 <sys_calculate_free_frames>
f011c70a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c70d:	e8 b6 76 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c712:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f011c715:	83 ec 0c             	sub    $0xc,%esp
f011c718:	68 00 18 00 00       	push   $0x1800
f011c71d:	e8 69 b6 fe ff       	call   f0107d8b <kmalloc>
f011c722:	83 c4 10             	add    $0x10,%esp
f011c725:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c72b:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011c731:	89 c1                	mov    %eax,%ecx
f011c733:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011c73a:	10 00 00 
f011c73d:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011c743:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c748:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011c74e:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011c754:	ba 00 00 00 00       	mov    $0x0,%edx
f011c759:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011c75f:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011c765:	29 d0                	sub    %edx,%eax
f011c767:	89 c3                	mov    %eax,%ebx
f011c769:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011c770:	10 00 00 
f011c773:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011c778:	0f b6 d0             	movzbl %al,%edx
f011c77b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011c781:	01 d0                	add    %edx,%eax
f011c783:	48                   	dec    %eax
f011c784:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011c78a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c790:	ba 00 00 00 00       	mov    $0x0,%edx
f011c795:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011c79b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c7a1:	29 d0                	sub    %edx,%eax
f011c7a3:	01 c3                	add    %eax,%ebx
f011c7a5:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011c7ac:	10 00 00 
f011c7af:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011c7b4:	0f b6 c0             	movzbl %al,%eax
f011c7b7:	c1 e0 04             	shl    $0x4,%eax
f011c7ba:	89 c2                	mov    %eax,%edx
f011c7bc:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011c7c2:	01 d0                	add    %edx,%eax
f011c7c4:	48                   	dec    %eax
f011c7c5:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011c7cb:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c7d1:	ba 00 00 00 00       	mov    $0x0,%edx
f011c7d6:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011c7dc:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c7e2:	29 d0                	sub    %edx,%eax
f011c7e4:	01 d8                	add    %ebx,%eax
f011c7e6:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f011c7eb:	39 c1                	cmp    %eax,%ecx
f011c7ed:	74 17                	je     f011c806 <test_kmalloc_bestfit2+0xe8b>
f011c7ef:	83 ec 04             	sub    $0x4,%esp
f011c7f2:	68 14 bd 13 f0       	push   $0xf013bd14
f011c7f7:	68 ad 02 00 00       	push   $0x2ad
f011c7fc:	68 fa b8 13 f0       	push   $0xf013b8fa
f011c801:	e8 ff 39 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c806:	e8 bd 75 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c80b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c80e:	74 17                	je     f011c827 <test_kmalloc_bestfit2+0xeac>
f011c810:	83 ec 04             	sub    $0x4,%esp
f011c813:	68 14 b9 13 f0       	push   $0xf013b914
f011c818:	68 ae 02 00 00       	push   $0x2ae
f011c81d:	68 fa b8 13 f0       	push   $0xf013b8fa
f011c822:	e8 de 39 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f011c827:	e8 6b 09 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011c82c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c82f:	29 c2                	sub    %eax,%edx
f011c831:	89 d0                	mov    %edx,%eax
f011c833:	83 f8 02             	cmp    $0x2,%eax
f011c836:	74 17                	je     f011c84f <test_kmalloc_bestfit2+0xed4>
f011c838:	83 ec 04             	sub    $0x4,%esp
f011c83b:	68 32 be 13 f0       	push   $0xf013be32
f011c840:	68 af 02 00 00       	push   $0x2af
f011c845:	68 fa b8 13 f0       	push   $0xf013b8fa
f011c84a:	e8 b6 39 fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c84f:	e8 43 09 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011c854:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c857:	e8 6c 75 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c85c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011c85f:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011c865:	83 ec 0c             	sub    $0xc,%esp
f011c868:	50                   	push   %eax
f011c869:	e8 e8 b5 fe ff       	call   f0107e56 <kfree>
f011c86e:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c871:	e8 52 75 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c876:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c879:	74 17                	je     f011c892 <test_kmalloc_bestfit2+0xf17>
f011c87b:	83 ec 04             	sub    $0x4,%esp
f011c87e:	68 14 b9 13 f0       	push   $0xf013b914
f011c883:	68 b5 02 00 00       	push   $0x2b5
f011c888:	68 fa b8 13 f0       	push   $0xf013b8fa
f011c88d:	e8 73 39 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c892:	e8 00 09 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011c897:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c89a:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c89f:	74 17                	je     f011c8b8 <test_kmalloc_bestfit2+0xf3d>
f011c8a1:	83 ec 04             	sub    $0x4,%esp
f011c8a4:	68 f4 bd 13 f0       	push   $0xf013bdf4
f011c8a9:	68 b6 02 00 00       	push   $0x2b6
f011c8ae:	68 fa b8 13 f0       	push   $0xf013b8fa
f011c8b3:	e8 4d 39 fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c8b8:	e8 da 08 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011c8bd:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c8c0:	e8 03 75 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c8c5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f011c8c8:	83 ec 0c             	sub    $0xc,%esp
f011c8cb:	68 00 fc 2f 00       	push   $0x2ffc00
f011c8d0:	e8 b6 b4 fe ff       	call   f0107d8b <kmalloc>
f011c8d5:	83 c4 10             	add    $0x10,%esp
f011c8d8:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c8de:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011c8e4:	89 c1                	mov    %eax,%ecx
f011c8e6:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011c8ed:	10 00 00 
f011c8f0:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011c8f6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c8fb:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011c901:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c907:	ba 00 00 00 00       	mov    $0x0,%edx
f011c90c:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011c912:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c918:	29 d0                	sub    %edx,%eax
f011c91a:	89 c3                	mov    %eax,%ebx
f011c91c:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011c923:	10 00 00 
f011c926:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011c92b:	0f b6 d0             	movzbl %al,%edx
f011c92e:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011c934:	01 d0                	add    %edx,%eax
f011c936:	48                   	dec    %eax
f011c937:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011c93d:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c943:	ba 00 00 00 00       	mov    $0x0,%edx
f011c948:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011c94e:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c954:	29 d0                	sub    %edx,%eax
f011c956:	01 c3                	add    %eax,%ebx
f011c958:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011c95f:	10 00 00 
f011c962:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011c967:	0f b6 c0             	movzbl %al,%eax
f011c96a:	c1 e0 04             	shl    $0x4,%eax
f011c96d:	89 c2                	mov    %eax,%edx
f011c96f:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011c975:	01 d0                	add    %edx,%eax
f011c977:	48                   	dec    %eax
f011c978:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011c97e:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c984:	ba 00 00 00 00       	mov    $0x0,%edx
f011c989:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011c98f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c995:	29 d0                	sub    %edx,%eax
f011c997:	01 d8                	add    %ebx,%eax
f011c999:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011c99e:	39 c1                	cmp    %eax,%ecx
f011c9a0:	74 17                	je     f011c9b9 <test_kmalloc_bestfit2+0x103e>
f011c9a2:	83 ec 04             	sub    $0x4,%esp
f011c9a5:	68 14 bd 13 f0       	push   $0xf013bd14
f011c9aa:	68 bc 02 00 00       	push   $0x2bc
f011c9af:	68 fa b8 13 f0       	push   $0xf013b8fa
f011c9b4:	e8 4c 38 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c9b9:	e8 0a 74 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c9be:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c9c1:	74 17                	je     f011c9da <test_kmalloc_bestfit2+0x105f>
f011c9c3:	83 ec 04             	sub    $0x4,%esp
f011c9c6:	68 14 b9 13 f0       	push   $0xf013b914
f011c9cb:	68 bd 02 00 00       	push   $0x2bd
f011c9d0:	68 fa b8 13 f0       	push   $0xf013b8fa
f011c9d5:	e8 2b 38 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c9da:	e8 b8 07 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011c9df:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c9e2:	29 c2                	sub    %eax,%edx
f011c9e4:	89 d0                	mov    %edx,%eax
f011c9e6:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c9eb:	74 17                	je     f011ca04 <test_kmalloc_bestfit2+0x1089>
f011c9ed:	83 ec 04             	sub    $0x4,%esp
f011c9f0:	68 f4 bd 13 f0       	push   $0xf013bdf4
f011c9f5:	68 be 02 00 00       	push   $0x2be
f011c9fa:	68 fa b8 13 f0       	push   $0xf013b8fa
f011c9ff:	e8 01 38 fe ff       	call   f0100205 <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f011ca04:	e8 8e 07 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011ca09:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ca0c:	e8 b7 73 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ca11:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f011ca14:	83 ec 0c             	sub    $0xc,%esp
f011ca17:	68 00 fc 3f 00       	push   $0x3ffc00
f011ca1c:	e8 6a b3 fe ff       	call   f0107d8b <kmalloc>
f011ca21:	83 c4 10             	add    $0x10,%esp
f011ca24:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011ca2a:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011ca30:	89 c1                	mov    %eax,%ecx
f011ca32:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011ca39:	10 00 00 
f011ca3c:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011ca42:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ca47:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011ca4d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011ca53:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca58:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011ca5e:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011ca64:	29 d0                	sub    %edx,%eax
f011ca66:	89 c3                	mov    %eax,%ebx
f011ca68:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011ca6f:	10 00 00 
f011ca72:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011ca77:	0f b6 d0             	movzbl %al,%edx
f011ca7a:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011ca80:	01 d0                	add    %edx,%eax
f011ca82:	48                   	dec    %eax
f011ca83:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011ca89:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011ca8f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca94:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011ca9a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011caa0:	29 d0                	sub    %edx,%eax
f011caa2:	01 c3                	add    %eax,%ebx
f011caa4:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011caab:	10 00 00 
f011caae:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011cab3:	0f b6 c0             	movzbl %al,%eax
f011cab6:	c1 e0 04             	shl    $0x4,%eax
f011cab9:	89 c2                	mov    %eax,%edx
f011cabb:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011cac1:	01 d0                	add    %edx,%eax
f011cac3:	48                   	dec    %eax
f011cac4:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011caca:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011cad0:	ba 00 00 00 00       	mov    $0x0,%edx
f011cad5:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011cadb:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011cae1:	29 d0                	sub    %edx,%eax
f011cae3:	01 d8                	add    %ebx,%eax
f011cae5:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011caea:	39 c1                	cmp    %eax,%ecx
f011caec:	74 17                	je     f011cb05 <test_kmalloc_bestfit2+0x118a>
f011caee:	83 ec 04             	sub    $0x4,%esp
f011caf1:	68 14 bd 13 f0       	push   $0xf013bd14
f011caf6:	68 c4 02 00 00       	push   $0x2c4
f011cafb:	68 fa b8 13 f0       	push   $0xf013b8fa
f011cb00:	e8 00 37 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cb05:	e8 be 72 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cb0a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011cb0d:	74 17                	je     f011cb26 <test_kmalloc_bestfit2+0x11ab>
f011cb0f:	83 ec 04             	sub    $0x4,%esp
f011cb12:	68 14 b9 13 f0       	push   $0xf013b914
f011cb17:	68 c5 02 00 00       	push   $0x2c5
f011cb1c:	68 fa b8 13 f0       	push   $0xf013b8fa
f011cb21:	e8 df 36 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011cb26:	e8 6c 06 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011cb2b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011cb2e:	29 c2                	sub    %eax,%edx
f011cb30:	89 d0                	mov    %edx,%eax
f011cb32:	3d 00 04 00 00       	cmp    $0x400,%eax
f011cb37:	74 17                	je     f011cb50 <test_kmalloc_bestfit2+0x11d5>
f011cb39:	83 ec 04             	sub    $0x4,%esp
f011cb3c:	68 f4 bd 13 f0       	push   $0xf013bdf4
f011cb41:	68 c6 02 00 00       	push   $0x2c6
f011cb46:	68 fa b8 13 f0       	push   $0xf013b8fa
f011cb4b:	e8 b5 36 fe ff       	call   f0100205 <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011cb50:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011cb57:	10 00 00 
f011cb5a:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011cb60:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cb65:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011cb6b:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011cb71:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb76:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011cb7c:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011cb82:	29 d0                	sub    %edx,%eax
f011cb84:	89 c1                	mov    %eax,%ecx
f011cb86:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011cb8d:	10 00 00 
f011cb90:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011cb95:	0f b6 d0             	movzbl %al,%edx
f011cb98:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011cb9e:	01 d0                	add    %edx,%eax
f011cba0:	48                   	dec    %eax
f011cba1:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011cba7:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011cbad:	ba 00 00 00 00       	mov    $0x0,%edx
f011cbb2:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011cbb8:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011cbbe:	29 d0                	sub    %edx,%eax
f011cbc0:	01 c1                	add    %eax,%ecx
f011cbc2:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011cbc9:	10 00 00 
f011cbcc:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011cbd1:	0f b6 c0             	movzbl %al,%eax
f011cbd4:	c1 e0 04             	shl    $0x4,%eax
f011cbd7:	89 c2                	mov    %eax,%edx
f011cbd9:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011cbdf:	01 d0                	add    %edx,%eax
f011cbe1:	48                   	dec    %eax
f011cbe2:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011cbe8:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011cbee:	ba 00 00 00 00       	mov    $0x0,%edx
f011cbf3:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011cbf9:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011cbff:	29 d0                	sub    %edx,%eax
f011cc01:	01 c8                	add    %ecx,%eax
f011cc03:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011cc08:	29 c2                	sub    %eax,%edx
f011cc0a:	89 d0                	mov    %edx,%eax
f011cc0c:	83 ec 0c             	sub    $0xc,%esp
f011cc0f:	50                   	push   %eax
f011cc10:	e8 76 b1 fe ff       	call   f0107d8b <kmalloc>
f011cc15:	83 c4 10             	add    $0x10,%esp
f011cc18:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011cc1e:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011cc24:	85 c0                	test   %eax,%eax
f011cc26:	74 17                	je     f011cc3f <test_kmalloc_bestfit2+0x12c4>
f011cc28:	83 ec 04             	sub    $0x4,%esp
f011cc2b:	68 44 be 13 f0       	push   $0xf013be44
f011cc30:	68 ce 02 00 00       	push   $0x2ce
f011cc35:	68 fa b8 13 f0       	push   $0xf013b8fa
f011cc3a:	e8 c6 35 fe ff       	call   f0100205 <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f011cc3f:	83 ec 0c             	sub    $0xc,%esp
f011cc42:	68 a8 be 13 f0       	push   $0xf013bea8
f011cc47:	e8 c2 40 fe ff       	call   f0100d0e <cprintf>
f011cc4c:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011cc4f:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011cc54:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011cc57:	5b                   	pop    %ebx
f011cc58:	5f                   	pop    %edi
f011cc59:	5d                   	pop    %ebp
f011cc5a:	c3                   	ret    

f011cc5b <test_kmalloc_firstfit1>:

int test_kmalloc_firstfit1()
{
f011cc5b:	55                   	push   %ebp
f011cc5c:	89 e5                	mov    %esp,%ebp
f011cc5e:	57                   	push   %edi
f011cc5f:	53                   	push   %ebx
f011cc60:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011cc66:	83 ec 0c             	sub    $0xc,%esp
f011cc69:	68 3c b8 13 f0       	push   $0xf013b83c
f011cc6e:	e8 9b 40 fe ff       	call   f0100d0e <cprintf>
f011cc73:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011cc76:	83 ec 0c             	sub    $0xc,%esp
f011cc79:	68 6c b8 13 f0       	push   $0xf013b86c
f011cc7e:	e8 8b 40 fe ff       	call   f0100d0e <cprintf>
f011cc83:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011cc86:	83 ec 0c             	sub    $0xc,%esp
f011cc89:	68 3c b8 13 f0       	push   $0xf013b83c
f011cc8e:	e8 7b 40 fe ff       	call   f0100d0e <cprintf>
f011cc93:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011cc96:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011cc9c:	b9 14 00 00 00       	mov    $0x14,%ecx
f011cca1:	b8 00 00 00 00       	mov    $0x0,%eax
f011cca6:	89 d7                	mov    %edx,%edi
f011cca8:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ccaa:	e8 e8 04 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011ccaf:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ccb2:	e8 11 71 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ccb7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f011ccba:	83 ec 0c             	sub    $0xc,%esp
f011ccbd:	68 00 fc 0f 00       	push   $0xffc00
f011ccc2:	e8 c4 b0 fe ff       	call   f0107d8b <kmalloc>
f011ccc7:	83 c4 10             	add    $0x10,%esp
f011ccca:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011ccd0:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011ccd6:	89 c1                	mov    %eax,%ecx
f011ccd8:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011ccdf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011cce2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cce7:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011ccea:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011cced:	ba 00 00 00 00       	mov    $0x0,%edx
f011ccf2:	f7 75 ec             	divl   -0x14(%ebp)
f011ccf5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011ccf8:	29 d0                	sub    %edx,%eax
f011ccfa:	89 c3                	mov    %eax,%ebx
f011ccfc:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011cd03:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011cd08:	0f b6 d0             	movzbl %al,%edx
f011cd0b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011cd0e:	01 d0                	add    %edx,%eax
f011cd10:	48                   	dec    %eax
f011cd11:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011cd14:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011cd17:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd1c:	f7 75 e4             	divl   -0x1c(%ebp)
f011cd1f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011cd22:	29 d0                	sub    %edx,%eax
f011cd24:	01 c3                	add    %eax,%ebx
f011cd26:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011cd2d:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011cd32:	0f b6 c0             	movzbl %al,%eax
f011cd35:	c1 e0 04             	shl    $0x4,%eax
f011cd38:	89 c2                	mov    %eax,%edx
f011cd3a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011cd3d:	01 d0                	add    %edx,%eax
f011cd3f:	48                   	dec    %eax
f011cd40:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011cd43:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011cd46:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd4b:	f7 75 dc             	divl   -0x24(%ebp)
f011cd4e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011cd51:	29 d0                	sub    %edx,%eax
f011cd53:	01 d8                	add    %ebx,%eax
f011cd55:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011cd5a:	39 c1                	cmp    %eax,%ecx
f011cd5c:	74 17                	je     f011cd75 <test_kmalloc_firstfit1+0x11a>
f011cd5e:	83 ec 04             	sub    $0x4,%esp
f011cd61:	68 14 bd 13 f0       	push   $0xf013bd14
f011cd66:	68 e6 02 00 00       	push   $0x2e6
f011cd6b:	68 fa b8 13 f0       	push   $0xf013b8fa
f011cd70:	e8 90 34 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cd75:	e8 4e 70 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cd7a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cd7d:	74 17                	je     f011cd96 <test_kmalloc_firstfit1+0x13b>
f011cd7f:	83 ec 04             	sub    $0x4,%esp
f011cd82:	68 14 b9 13 f0       	push   $0xf013b914
f011cd87:	68 e7 02 00 00       	push   $0x2e7
f011cd8c:	68 fa b8 13 f0       	push   $0xf013b8fa
f011cd91:	e8 6f 34 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011cd96:	e8 fc 03 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011cd9b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cd9e:	29 c2                	sub    %eax,%edx
f011cda0:	89 d0                	mov    %edx,%eax
f011cda2:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cda7:	74 17                	je     f011cdc0 <test_kmalloc_firstfit1+0x165>
f011cda9:	83 ec 04             	sub    $0x4,%esp
f011cdac:	68 44 bd 13 f0       	push   $0xf013bd44
f011cdb1:	68 e8 02 00 00       	push   $0x2e8
f011cdb6:	68 fa b8 13 f0       	push   $0xf013b8fa
f011cdbb:	e8 45 34 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011cdc0:	e8 d2 03 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011cdc5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cdc8:	e8 fb 6f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cdcd:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f011cdd0:	83 ec 0c             	sub    $0xc,%esp
f011cdd3:	68 00 fc 0f 00       	push   $0xffc00
f011cdd8:	e8 ae af fe ff       	call   f0107d8b <kmalloc>
f011cddd:	83 c4 10             	add    $0x10,%esp
f011cde0:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011cde6:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011cdec:	89 c1                	mov    %eax,%ecx
f011cdee:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011cdf5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011cdf8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cdfd:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011ce00:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ce03:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce08:	f7 75 d4             	divl   -0x2c(%ebp)
f011ce0b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ce0e:	29 d0                	sub    %edx,%eax
f011ce10:	89 c3                	mov    %eax,%ebx
f011ce12:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011ce19:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011ce1e:	0f b6 d0             	movzbl %al,%edx
f011ce21:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011ce24:	01 d0                	add    %edx,%eax
f011ce26:	48                   	dec    %eax
f011ce27:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011ce2a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011ce2d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce32:	f7 75 cc             	divl   -0x34(%ebp)
f011ce35:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011ce38:	29 d0                	sub    %edx,%eax
f011ce3a:	01 c3                	add    %eax,%ebx
f011ce3c:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011ce43:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011ce48:	0f b6 c0             	movzbl %al,%eax
f011ce4b:	c1 e0 04             	shl    $0x4,%eax
f011ce4e:	89 c2                	mov    %eax,%edx
f011ce50:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011ce53:	01 d0                	add    %edx,%eax
f011ce55:	48                   	dec    %eax
f011ce56:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011ce59:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011ce5c:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce61:	f7 75 c4             	divl   -0x3c(%ebp)
f011ce64:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011ce67:	29 d0                	sub    %edx,%eax
f011ce69:	01 d8                	add    %ebx,%eax
f011ce6b:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011ce70:	39 c1                	cmp    %eax,%ecx
f011ce72:	74 17                	je     f011ce8b <test_kmalloc_firstfit1+0x230>
f011ce74:	83 ec 04             	sub    $0x4,%esp
f011ce77:	68 14 bd 13 f0       	push   $0xf013bd14
f011ce7c:	68 ee 02 00 00       	push   $0x2ee
f011ce81:	68 fa b8 13 f0       	push   $0xf013b8fa
f011ce86:	e8 7a 33 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ce8b:	e8 38 6f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ce90:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ce93:	74 17                	je     f011ceac <test_kmalloc_firstfit1+0x251>
f011ce95:	83 ec 04             	sub    $0x4,%esp
f011ce98:	68 14 b9 13 f0       	push   $0xf013b914
f011ce9d:	68 ef 02 00 00       	push   $0x2ef
f011cea2:	68 fa b8 13 f0       	push   $0xf013b8fa
f011cea7:	e8 59 33 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ceac:	e8 e6 02 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011ceb1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ceb4:	29 c2                	sub    %eax,%edx
f011ceb6:	89 d0                	mov    %edx,%eax
f011ceb8:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cebd:	74 17                	je     f011ced6 <test_kmalloc_firstfit1+0x27b>
f011cebf:	83 ec 04             	sub    $0x4,%esp
f011cec2:	68 44 bd 13 f0       	push   $0xf013bd44
f011cec7:	68 f0 02 00 00       	push   $0x2f0
f011cecc:	68 fa b8 13 f0       	push   $0xf013b8fa
f011ced1:	e8 2f 33 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ced6:	e8 bc 02 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011cedb:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cede:	e8 e5 6e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cee3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f011cee6:	83 ec 0c             	sub    $0xc,%esp
f011cee9:	68 00 fc 0f 00       	push   $0xffc00
f011ceee:	e8 98 ae fe ff       	call   f0107d8b <kmalloc>
f011cef3:	83 c4 10             	add    $0x10,%esp
f011cef6:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011cefc:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011cf02:	89 c1                	mov    %eax,%ecx
f011cf04:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011cf0b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011cf0e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cf13:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011cf16:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011cf19:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf1e:	f7 75 bc             	divl   -0x44(%ebp)
f011cf21:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011cf24:	29 d0                	sub    %edx,%eax
f011cf26:	89 c3                	mov    %eax,%ebx
f011cf28:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011cf2f:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011cf34:	0f b6 d0             	movzbl %al,%edx
f011cf37:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011cf3a:	01 d0                	add    %edx,%eax
f011cf3c:	48                   	dec    %eax
f011cf3d:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011cf40:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011cf43:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf48:	f7 75 b4             	divl   -0x4c(%ebp)
f011cf4b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011cf4e:	29 d0                	sub    %edx,%eax
f011cf50:	01 c3                	add    %eax,%ebx
f011cf52:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011cf59:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011cf5e:	0f b6 c0             	movzbl %al,%eax
f011cf61:	c1 e0 04             	shl    $0x4,%eax
f011cf64:	89 c2                	mov    %eax,%edx
f011cf66:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011cf69:	01 d0                	add    %edx,%eax
f011cf6b:	48                   	dec    %eax
f011cf6c:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011cf6f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011cf72:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf77:	f7 75 ac             	divl   -0x54(%ebp)
f011cf7a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011cf7d:	29 d0                	sub    %edx,%eax
f011cf7f:	01 d8                	add    %ebx,%eax
f011cf81:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011cf86:	39 c1                	cmp    %eax,%ecx
f011cf88:	74 17                	je     f011cfa1 <test_kmalloc_firstfit1+0x346>
f011cf8a:	83 ec 04             	sub    $0x4,%esp
f011cf8d:	68 14 bd 13 f0       	push   $0xf013bd14
f011cf92:	68 f6 02 00 00       	push   $0x2f6
f011cf97:	68 fa b8 13 f0       	push   $0xf013b8fa
f011cf9c:	e8 64 32 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cfa1:	e8 22 6e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cfa6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cfa9:	74 17                	je     f011cfc2 <test_kmalloc_firstfit1+0x367>
f011cfab:	83 ec 04             	sub    $0x4,%esp
f011cfae:	68 14 b9 13 f0       	push   $0xf013b914
f011cfb3:	68 f7 02 00 00       	push   $0x2f7
f011cfb8:	68 fa b8 13 f0       	push   $0xf013b8fa
f011cfbd:	e8 43 32 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011cfc2:	e8 d0 01 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011cfc7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cfca:	29 c2                	sub    %eax,%edx
f011cfcc:	89 d0                	mov    %edx,%eax
f011cfce:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cfd3:	74 17                	je     f011cfec <test_kmalloc_firstfit1+0x391>
f011cfd5:	83 ec 04             	sub    $0x4,%esp
f011cfd8:	68 44 bd 13 f0       	push   $0xf013bd44
f011cfdd:	68 f8 02 00 00       	push   $0x2f8
f011cfe2:	68 fa b8 13 f0       	push   $0xf013b8fa
f011cfe7:	e8 19 32 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011cfec:	e8 a6 01 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011cff1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cff4:	e8 cf 6d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cff9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f011cffc:	83 ec 0c             	sub    $0xc,%esp
f011cfff:	68 00 fc 0f 00       	push   $0xffc00
f011d004:	e8 82 ad fe ff       	call   f0107d8b <kmalloc>
f011d009:	83 c4 10             	add    $0x10,%esp
f011d00c:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011d012:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011d018:	89 c1                	mov    %eax,%ecx
f011d01a:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011d021:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011d024:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d029:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011d02c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d02f:	ba 00 00 00 00       	mov    $0x0,%edx
f011d034:	f7 75 a4             	divl   -0x5c(%ebp)
f011d037:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d03a:	29 d0                	sub    %edx,%eax
f011d03c:	89 c3                	mov    %eax,%ebx
f011d03e:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011d045:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011d04a:	0f b6 d0             	movzbl %al,%edx
f011d04d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011d050:	01 d0                	add    %edx,%eax
f011d052:	48                   	dec    %eax
f011d053:	89 45 98             	mov    %eax,-0x68(%ebp)
f011d056:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d059:	ba 00 00 00 00       	mov    $0x0,%edx
f011d05e:	f7 75 9c             	divl   -0x64(%ebp)
f011d061:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d064:	29 d0                	sub    %edx,%eax
f011d066:	01 c3                	add    %eax,%ebx
f011d068:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011d06f:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011d074:	0f b6 c0             	movzbl %al,%eax
f011d077:	c1 e0 04             	shl    $0x4,%eax
f011d07a:	89 c2                	mov    %eax,%edx
f011d07c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011d07f:	01 d0                	add    %edx,%eax
f011d081:	48                   	dec    %eax
f011d082:	89 45 90             	mov    %eax,-0x70(%ebp)
f011d085:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d088:	ba 00 00 00 00       	mov    $0x0,%edx
f011d08d:	f7 75 94             	divl   -0x6c(%ebp)
f011d090:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d093:	29 d0                	sub    %edx,%eax
f011d095:	01 d8                	add    %ebx,%eax
f011d097:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011d09c:	39 c1                	cmp    %eax,%ecx
f011d09e:	74 17                	je     f011d0b7 <test_kmalloc_firstfit1+0x45c>
f011d0a0:	83 ec 04             	sub    $0x4,%esp
f011d0a3:	68 14 bd 13 f0       	push   $0xf013bd14
f011d0a8:	68 fe 02 00 00       	push   $0x2fe
f011d0ad:	68 fa b8 13 f0       	push   $0xf013b8fa
f011d0b2:	e8 4e 31 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d0b7:	e8 0c 6d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d0bc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d0bf:	74 17                	je     f011d0d8 <test_kmalloc_firstfit1+0x47d>
f011d0c1:	83 ec 04             	sub    $0x4,%esp
f011d0c4:	68 14 b9 13 f0       	push   $0xf013b914
f011d0c9:	68 ff 02 00 00       	push   $0x2ff
f011d0ce:	68 fa b8 13 f0       	push   $0xf013b8fa
f011d0d3:	e8 2d 31 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d0d8:	e8 ba 00 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011d0dd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d0e0:	29 c2                	sub    %eax,%edx
f011d0e2:	89 d0                	mov    %edx,%eax
f011d0e4:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d0e9:	74 17                	je     f011d102 <test_kmalloc_firstfit1+0x4a7>
f011d0eb:	83 ec 04             	sub    $0x4,%esp
f011d0ee:	68 44 bd 13 f0       	push   $0xf013bd44
f011d0f3:	68 00 03 00 00       	push   $0x300
f011d0f8:	68 fa b8 13 f0       	push   $0xf013b8fa
f011d0fd:	e8 03 31 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d102:	e8 90 00 ff ff       	call   f010d197 <sys_calculate_free_frames>
f011d107:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d10a:	e8 b9 6c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d10f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f011d112:	83 ec 0c             	sub    $0xc,%esp
f011d115:	68 00 fc 1f 00       	push   $0x1ffc00
f011d11a:	e8 6c ac fe ff       	call   f0107d8b <kmalloc>
f011d11f:	83 c4 10             	add    $0x10,%esp
f011d122:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011d128:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011d12e:	89 c1                	mov    %eax,%ecx
f011d130:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011d137:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011d13a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d13f:	89 45 88             	mov    %eax,-0x78(%ebp)
f011d142:	8b 45 88             	mov    -0x78(%ebp),%eax
f011d145:	ba 00 00 00 00       	mov    $0x0,%edx
f011d14a:	f7 75 8c             	divl   -0x74(%ebp)
f011d14d:	8b 45 88             	mov    -0x78(%ebp),%eax
f011d150:	29 d0                	sub    %edx,%eax
f011d152:	89 c3                	mov    %eax,%ebx
f011d154:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011d15b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011d160:	0f b6 d0             	movzbl %al,%edx
f011d163:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011d166:	01 d0                	add    %edx,%eax
f011d168:	48                   	dec    %eax
f011d169:	89 45 80             	mov    %eax,-0x80(%ebp)
f011d16c:	8b 45 80             	mov    -0x80(%ebp),%eax
f011d16f:	ba 00 00 00 00       	mov    $0x0,%edx
f011d174:	f7 75 84             	divl   -0x7c(%ebp)
f011d177:	8b 45 80             	mov    -0x80(%ebp),%eax
f011d17a:	29 d0                	sub    %edx,%eax
f011d17c:	01 c3                	add    %eax,%ebx
f011d17e:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011d185:	10 00 00 
f011d188:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011d18d:	0f b6 c0             	movzbl %al,%eax
f011d190:	c1 e0 04             	shl    $0x4,%eax
f011d193:	89 c2                	mov    %eax,%edx
f011d195:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011d19b:	01 d0                	add    %edx,%eax
f011d19d:	48                   	dec    %eax
f011d19e:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011d1a4:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d1aa:	ba 00 00 00 00       	mov    $0x0,%edx
f011d1af:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011d1b5:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d1bb:	29 d0                	sub    %edx,%eax
f011d1bd:	01 d8                	add    %ebx,%eax
f011d1bf:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011d1c4:	39 c1                	cmp    %eax,%ecx
f011d1c6:	74 17                	je     f011d1df <test_kmalloc_firstfit1+0x584>
f011d1c8:	83 ec 04             	sub    $0x4,%esp
f011d1cb:	68 14 bd 13 f0       	push   $0xf013bd14
f011d1d0:	68 06 03 00 00       	push   $0x306
f011d1d5:	68 fa b8 13 f0       	push   $0xf013b8fa
f011d1da:	e8 26 30 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d1df:	e8 e4 6b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d1e4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d1e7:	74 17                	je     f011d200 <test_kmalloc_firstfit1+0x5a5>
f011d1e9:	83 ec 04             	sub    $0x4,%esp
f011d1ec:	68 14 b9 13 f0       	push   $0xf013b914
f011d1f1:	68 07 03 00 00       	push   $0x307
f011d1f6:	68 fa b8 13 f0       	push   $0xf013b8fa
f011d1fb:	e8 05 30 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d200:	e8 92 ff fe ff       	call   f010d197 <sys_calculate_free_frames>
f011d205:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d208:	29 c2                	sub    %eax,%edx
f011d20a:	89 d0                	mov    %edx,%eax
f011d20c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d211:	74 17                	je     f011d22a <test_kmalloc_firstfit1+0x5cf>
f011d213:	83 ec 04             	sub    $0x4,%esp
f011d216:	68 44 bd 13 f0       	push   $0xf013bd44
f011d21b:	68 08 03 00 00       	push   $0x308
f011d220:	68 fa b8 13 f0       	push   $0xf013b8fa
f011d225:	e8 db 2f fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d22a:	e8 68 ff fe ff       	call   f010d197 <sys_calculate_free_frames>
f011d22f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d232:	e8 91 6b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d237:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f011d23a:	83 ec 0c             	sub    $0xc,%esp
f011d23d:	68 00 fc 1f 00       	push   $0x1ffc00
f011d242:	e8 44 ab fe ff       	call   f0107d8b <kmalloc>
f011d247:	83 c4 10             	add    $0x10,%esp
f011d24a:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011d250:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011d256:	89 c1                	mov    %eax,%ecx
f011d258:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011d25f:	10 00 00 
f011d262:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011d268:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d26d:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011d273:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011d279:	ba 00 00 00 00       	mov    $0x0,%edx
f011d27e:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011d284:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011d28a:	29 d0                	sub    %edx,%eax
f011d28c:	89 c3                	mov    %eax,%ebx
f011d28e:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011d295:	10 00 00 
f011d298:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011d29d:	0f b6 d0             	movzbl %al,%edx
f011d2a0:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011d2a6:	01 d0                	add    %edx,%eax
f011d2a8:	48                   	dec    %eax
f011d2a9:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011d2af:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011d2b5:	ba 00 00 00 00       	mov    $0x0,%edx
f011d2ba:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011d2c0:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011d2c6:	29 d0                	sub    %edx,%eax
f011d2c8:	01 c3                	add    %eax,%ebx
f011d2ca:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011d2d1:	10 00 00 
f011d2d4:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011d2d9:	0f b6 c0             	movzbl %al,%eax
f011d2dc:	c1 e0 04             	shl    $0x4,%eax
f011d2df:	89 c2                	mov    %eax,%edx
f011d2e1:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011d2e7:	01 d0                	add    %edx,%eax
f011d2e9:	48                   	dec    %eax
f011d2ea:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011d2f0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d2f6:	ba 00 00 00 00       	mov    $0x0,%edx
f011d2fb:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011d301:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d307:	29 d0                	sub    %edx,%eax
f011d309:	01 d8                	add    %ebx,%eax
f011d30b:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011d310:	39 c1                	cmp    %eax,%ecx
f011d312:	74 17                	je     f011d32b <test_kmalloc_firstfit1+0x6d0>
f011d314:	83 ec 04             	sub    $0x4,%esp
f011d317:	68 14 bd 13 f0       	push   $0xf013bd14
f011d31c:	68 0e 03 00 00       	push   $0x30e
f011d321:	68 fa b8 13 f0       	push   $0xf013b8fa
f011d326:	e8 da 2e fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d32b:	e8 98 6a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d330:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d333:	74 17                	je     f011d34c <test_kmalloc_firstfit1+0x6f1>
f011d335:	83 ec 04             	sub    $0x4,%esp
f011d338:	68 14 b9 13 f0       	push   $0xf013b914
f011d33d:	68 0f 03 00 00       	push   $0x30f
f011d342:	68 fa b8 13 f0       	push   $0xf013b8fa
f011d347:	e8 b9 2e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d34c:	e8 46 fe fe ff       	call   f010d197 <sys_calculate_free_frames>
f011d351:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d354:	29 c2                	sub    %eax,%edx
f011d356:	89 d0                	mov    %edx,%eax
f011d358:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d35d:	74 17                	je     f011d376 <test_kmalloc_firstfit1+0x71b>
f011d35f:	83 ec 04             	sub    $0x4,%esp
f011d362:	68 44 bd 13 f0       	push   $0xf013bd44
f011d367:	68 10 03 00 00       	push   $0x310
f011d36c:	68 fa b8 13 f0       	push   $0xf013b8fa
f011d371:	e8 8f 2e fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011d376:	e8 1c fe fe ff       	call   f010d197 <sys_calculate_free_frames>
f011d37b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d37e:	e8 45 6a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d383:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011d386:	83 ec 0c             	sub    $0xc,%esp
f011d389:	68 00 fc 2f 00       	push   $0x2ffc00
f011d38e:	e8 f8 a9 fe ff       	call   f0107d8b <kmalloc>
f011d393:	83 c4 10             	add    $0x10,%esp
f011d396:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011d39c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011d3a2:	89 c1                	mov    %eax,%ecx
f011d3a4:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011d3ab:	10 00 00 
f011d3ae:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011d3b4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d3b9:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011d3bf:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d3c5:	ba 00 00 00 00       	mov    $0x0,%edx
f011d3ca:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011d3d0:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d3d6:	29 d0                	sub    %edx,%eax
f011d3d8:	89 c3                	mov    %eax,%ebx
f011d3da:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011d3e1:	10 00 00 
f011d3e4:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011d3e9:	0f b6 d0             	movzbl %al,%edx
f011d3ec:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011d3f2:	01 d0                	add    %edx,%eax
f011d3f4:	48                   	dec    %eax
f011d3f5:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011d3fb:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d401:	ba 00 00 00 00       	mov    $0x0,%edx
f011d406:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011d40c:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d412:	29 d0                	sub    %edx,%eax
f011d414:	01 c3                	add    %eax,%ebx
f011d416:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011d41d:	10 00 00 
f011d420:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011d425:	0f b6 c0             	movzbl %al,%eax
f011d428:	c1 e0 04             	shl    $0x4,%eax
f011d42b:	89 c2                	mov    %eax,%edx
f011d42d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011d433:	01 d0                	add    %edx,%eax
f011d435:	48                   	dec    %eax
f011d436:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011d43c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d442:	ba 00 00 00 00       	mov    $0x0,%edx
f011d447:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011d44d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d453:	29 d0                	sub    %edx,%eax
f011d455:	01 d8                	add    %ebx,%eax
f011d457:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011d45c:	39 c1                	cmp    %eax,%ecx
f011d45e:	74 17                	je     f011d477 <test_kmalloc_firstfit1+0x81c>
f011d460:	83 ec 04             	sub    $0x4,%esp
f011d463:	68 14 bd 13 f0       	push   $0xf013bd14
f011d468:	68 16 03 00 00       	push   $0x316
f011d46d:	68 fa b8 13 f0       	push   $0xf013b8fa
f011d472:	e8 8e 2d fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d477:	e8 4c 69 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d47c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d47f:	74 17                	je     f011d498 <test_kmalloc_firstfit1+0x83d>
f011d481:	83 ec 04             	sub    $0x4,%esp
f011d484:	68 14 b9 13 f0       	push   $0xf013b914
f011d489:	68 17 03 00 00       	push   $0x317
f011d48e:	68 fa b8 13 f0       	push   $0xf013b8fa
f011d493:	e8 6d 2d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011d498:	e8 fa fc fe ff       	call   f010d197 <sys_calculate_free_frames>
f011d49d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d4a0:	29 c2                	sub    %eax,%edx
f011d4a2:	89 d0                	mov    %edx,%eax
f011d4a4:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d4a9:	74 17                	je     f011d4c2 <test_kmalloc_firstfit1+0x867>
f011d4ab:	83 ec 04             	sub    $0x4,%esp
f011d4ae:	68 44 bd 13 f0       	push   $0xf013bd44
f011d4b3:	68 18 03 00 00       	push   $0x318
f011d4b8:	68 fa b8 13 f0       	push   $0xf013b8fa
f011d4bd:	e8 43 2d fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011d4c2:	e8 d0 fc fe ff       	call   f010d197 <sys_calculate_free_frames>
f011d4c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d4ca:	e8 f9 68 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d4cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f011d4d2:	83 ec 0c             	sub    $0xc,%esp
f011d4d5:	68 00 fc 2f 00       	push   $0x2ffc00
f011d4da:	e8 ac a8 fe ff       	call   f0107d8b <kmalloc>
f011d4df:	83 c4 10             	add    $0x10,%esp
f011d4e2:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011d4e8:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011d4ee:	89 c1                	mov    %eax,%ecx
f011d4f0:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011d4f7:	10 00 00 
f011d4fa:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011d500:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d505:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011d50b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d511:	ba 00 00 00 00       	mov    $0x0,%edx
f011d516:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011d51c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d522:	29 d0                	sub    %edx,%eax
f011d524:	89 c3                	mov    %eax,%ebx
f011d526:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011d52d:	10 00 00 
f011d530:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011d535:	0f b6 d0             	movzbl %al,%edx
f011d538:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011d53e:	01 d0                	add    %edx,%eax
f011d540:	48                   	dec    %eax
f011d541:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011d547:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d54d:	ba 00 00 00 00       	mov    $0x0,%edx
f011d552:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011d558:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d55e:	29 d0                	sub    %edx,%eax
f011d560:	01 c3                	add    %eax,%ebx
f011d562:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011d569:	10 00 00 
f011d56c:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011d571:	0f b6 c0             	movzbl %al,%eax
f011d574:	c1 e0 04             	shl    $0x4,%eax
f011d577:	89 c2                	mov    %eax,%edx
f011d579:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011d57f:	01 d0                	add    %edx,%eax
f011d581:	48                   	dec    %eax
f011d582:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011d588:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d58e:	ba 00 00 00 00       	mov    $0x0,%edx
f011d593:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011d599:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d59f:	29 d0                	sub    %edx,%eax
f011d5a1:	01 d8                	add    %ebx,%eax
f011d5a3:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011d5a8:	39 c1                	cmp    %eax,%ecx
f011d5aa:	74 17                	je     f011d5c3 <test_kmalloc_firstfit1+0x968>
f011d5ac:	83 ec 04             	sub    $0x4,%esp
f011d5af:	68 14 bd 13 f0       	push   $0xf013bd14
f011d5b4:	68 1e 03 00 00       	push   $0x31e
f011d5b9:	68 fa b8 13 f0       	push   $0xf013b8fa
f011d5be:	e8 42 2c fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d5c3:	e8 00 68 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d5c8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d5cb:	74 17                	je     f011d5e4 <test_kmalloc_firstfit1+0x989>
f011d5cd:	83 ec 04             	sub    $0x4,%esp
f011d5d0:	68 14 b9 13 f0       	push   $0xf013b914
f011d5d5:	68 1f 03 00 00       	push   $0x31f
f011d5da:	68 fa b8 13 f0       	push   $0xf013b8fa
f011d5df:	e8 21 2c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011d5e4:	e8 ae fb fe ff       	call   f010d197 <sys_calculate_free_frames>
f011d5e9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d5ec:	29 c2                	sub    %eax,%edx
f011d5ee:	89 d0                	mov    %edx,%eax
f011d5f0:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d5f5:	74 17                	je     f011d60e <test_kmalloc_firstfit1+0x9b3>
f011d5f7:	83 ec 04             	sub    $0x4,%esp
f011d5fa:	68 44 bd 13 f0       	push   $0xf013bd44
f011d5ff:	68 20 03 00 00       	push   $0x320
f011d604:	68 fa b8 13 f0       	push   $0xf013b8fa
f011d609:	e8 f7 2b fe ff       	call   f0100205 <_panic>
	}

	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d60e:	e8 84 fb fe ff       	call   f010d197 <sys_calculate_free_frames>
f011d613:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d616:	e8 ad 67 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d61b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011d61e:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011d624:	83 ec 0c             	sub    $0xc,%esp
f011d627:	50                   	push   %eax
f011d628:	e8 29 a8 fe ff       	call   f0107e56 <kfree>
f011d62d:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d630:	e8 93 67 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d635:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d638:	74 17                	je     f011d651 <test_kmalloc_firstfit1+0x9f6>
f011d63a:	83 ec 04             	sub    $0x4,%esp
f011d63d:	68 14 b9 13 f0       	push   $0xf013b914
f011d642:	68 29 03 00 00       	push   $0x329
f011d647:	68 fa b8 13 f0       	push   $0xf013b8fa
f011d64c:	e8 b4 2b fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d651:	e8 41 fb fe ff       	call   f010d197 <sys_calculate_free_frames>
f011d656:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d659:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d65e:	74 17                	je     f011d677 <test_kmalloc_firstfit1+0xa1c>
f011d660:	83 ec 04             	sub    $0x4,%esp
f011d663:	68 57 bd 13 f0       	push   $0xf013bd57
f011d668:	68 2a 03 00 00       	push   $0x32a
f011d66d:	68 fa b8 13 f0       	push   $0xf013b8fa
f011d672:	e8 8e 2b fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d677:	e8 1b fb fe ff       	call   f010d197 <sys_calculate_free_frames>
f011d67c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d67f:	e8 44 67 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d684:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011d687:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011d68d:	83 ec 0c             	sub    $0xc,%esp
f011d690:	50                   	push   %eax
f011d691:	e8 c0 a7 fe ff       	call   f0107e56 <kfree>
f011d696:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d699:	e8 2a 67 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d69e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d6a1:	74 17                	je     f011d6ba <test_kmalloc_firstfit1+0xa5f>
f011d6a3:	83 ec 04             	sub    $0x4,%esp
f011d6a6:	68 14 b9 13 f0       	push   $0xf013b914
f011d6ab:	68 30 03 00 00       	push   $0x330
f011d6b0:	68 fa b8 13 f0       	push   $0xf013b8fa
f011d6b5:	e8 4b 2b fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011d6ba:	e8 d8 fa fe ff       	call   f010d197 <sys_calculate_free_frames>
f011d6bf:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d6c2:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d6c7:	74 17                	je     f011d6e0 <test_kmalloc_firstfit1+0xa85>
f011d6c9:	83 ec 04             	sub    $0x4,%esp
f011d6cc:	68 57 bd 13 f0       	push   $0xf013bd57
f011d6d1:	68 31 03 00 00       	push   $0x331
f011d6d6:	68 fa b8 13 f0       	push   $0xf013b8fa
f011d6db:	e8 25 2b fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d6e0:	e8 b2 fa fe ff       	call   f010d197 <sys_calculate_free_frames>
f011d6e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d6e8:	e8 db 66 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d6ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[6]);
f011d6f0:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011d6f6:	83 ec 0c             	sub    $0xc,%esp
f011d6f9:	50                   	push   %eax
f011d6fa:	e8 57 a7 fe ff       	call   f0107e56 <kfree>
f011d6ff:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d702:	e8 c1 66 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d707:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d70a:	74 17                	je     f011d723 <test_kmalloc_firstfit1+0xac8>
f011d70c:	83 ec 04             	sub    $0x4,%esp
f011d70f:	68 14 b9 13 f0       	push   $0xf013b914
f011d714:	68 37 03 00 00       	push   $0x337
f011d719:	68 fa b8 13 f0       	push   $0xf013b8fa
f011d71e:	e8 e2 2a fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011d723:	e8 6f fa fe ff       	call   f010d197 <sys_calculate_free_frames>
f011d728:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d72b:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d730:	74 17                	je     f011d749 <test_kmalloc_firstfit1+0xaee>
f011d732:	83 ec 04             	sub    $0x4,%esp
f011d735:	68 57 bd 13 f0       	push   $0xf013bd57
f011d73a:	68 38 03 00 00       	push   $0x338
f011d73f:	68 fa b8 13 f0       	push   $0xf013b8fa
f011d744:	e8 bc 2a fe ff       	call   f0100205 <_panic>
	}

	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011d749:	e8 49 fa fe ff       	call   f010d197 <sys_calculate_free_frames>
f011d74e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d751:	e8 72 66 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d756:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f011d759:	83 ec 0c             	sub    $0xc,%esp
f011d75c:	68 00 fc 07 00       	push   $0x7fc00
f011d761:	e8 25 a6 fe ff       	call   f0107d8b <kmalloc>
f011d766:	83 c4 10             	add    $0x10,%esp
f011d769:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011d76f:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011d775:	89 c1                	mov    %eax,%ecx
f011d777:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011d77e:	10 00 00 
f011d781:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011d787:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d78c:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011d792:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d798:	ba 00 00 00 00       	mov    $0x0,%edx
f011d79d:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011d7a3:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d7a9:	29 d0                	sub    %edx,%eax
f011d7ab:	89 c3                	mov    %eax,%ebx
f011d7ad:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011d7b4:	10 00 00 
f011d7b7:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011d7bc:	0f b6 d0             	movzbl %al,%edx
f011d7bf:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011d7c5:	01 d0                	add    %edx,%eax
f011d7c7:	48                   	dec    %eax
f011d7c8:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011d7ce:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d7d4:	ba 00 00 00 00       	mov    $0x0,%edx
f011d7d9:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011d7df:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d7e5:	29 d0                	sub    %edx,%eax
f011d7e7:	01 c3                	add    %eax,%ebx
f011d7e9:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011d7f0:	10 00 00 
f011d7f3:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011d7f8:	0f b6 c0             	movzbl %al,%eax
f011d7fb:	c1 e0 04             	shl    $0x4,%eax
f011d7fe:	89 c2                	mov    %eax,%edx
f011d800:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011d806:	01 d0                	add    %edx,%eax
f011d808:	48                   	dec    %eax
f011d809:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011d80f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d815:	ba 00 00 00 00       	mov    $0x0,%edx
f011d81a:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011d820:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d826:	29 d0                	sub    %edx,%eax
f011d828:	01 d8                	add    %ebx,%eax
f011d82a:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011d82f:	39 c1                	cmp    %eax,%ecx
f011d831:	74 17                	je     f011d84a <test_kmalloc_firstfit1+0xbef>
f011d833:	83 ec 04             	sub    $0x4,%esp
f011d836:	68 14 bd 13 f0       	push   $0xf013bd14
f011d83b:	68 41 03 00 00       	push   $0x341
f011d840:	68 fa b8 13 f0       	push   $0xf013b8fa
f011d845:	e8 bb 29 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d84a:	e8 79 65 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d84f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d852:	74 17                	je     f011d86b <test_kmalloc_firstfit1+0xc10>
f011d854:	83 ec 04             	sub    $0x4,%esp
f011d857:	68 14 b9 13 f0       	push   $0xf013b914
f011d85c:	68 42 03 00 00       	push   $0x342
f011d861:	68 fa b8 13 f0       	push   $0xf013b8fa
f011d866:	e8 9a 29 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011d86b:	e8 27 f9 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011d870:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d873:	29 c2                	sub    %eax,%edx
f011d875:	89 d0                	mov    %edx,%eax
f011d877:	3d 80 00 00 00       	cmp    $0x80,%eax
f011d87c:	74 17                	je     f011d895 <test_kmalloc_firstfit1+0xc3a>
f011d87e:	83 ec 04             	sub    $0x4,%esp
f011d881:	68 44 bd 13 f0       	push   $0xf013bd44
f011d886:	68 43 03 00 00       	push   $0x343
f011d88b:	68 fa b8 13 f0       	push   $0xf013b8fa
f011d890:	e8 70 29 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011d895:	e8 fd f8 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011d89a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d89d:	e8 26 65 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d8a2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011d8a5:	83 ec 0c             	sub    $0xc,%esp
f011d8a8:	68 00 fc 0f 00       	push   $0xffc00
f011d8ad:	e8 d9 a4 fe ff       	call   f0107d8b <kmalloc>
f011d8b2:	83 c4 10             	add    $0x10,%esp
f011d8b5:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011d8bb:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011d8c1:	89 c1                	mov    %eax,%ecx
f011d8c3:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011d8ca:	10 00 00 
f011d8cd:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011d8d3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d8d8:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011d8de:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d8e4:	ba 00 00 00 00       	mov    $0x0,%edx
f011d8e9:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011d8ef:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d8f5:	29 d0                	sub    %edx,%eax
f011d8f7:	89 c3                	mov    %eax,%ebx
f011d8f9:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011d900:	10 00 00 
f011d903:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011d908:	0f b6 d0             	movzbl %al,%edx
f011d90b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011d911:	01 d0                	add    %edx,%eax
f011d913:	48                   	dec    %eax
f011d914:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011d91a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011d920:	ba 00 00 00 00       	mov    $0x0,%edx
f011d925:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011d92b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011d931:	29 d0                	sub    %edx,%eax
f011d933:	01 c3                	add    %eax,%ebx
f011d935:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011d93c:	10 00 00 
f011d93f:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011d944:	0f b6 c0             	movzbl %al,%eax
f011d947:	c1 e0 04             	shl    $0x4,%eax
f011d94a:	89 c2                	mov    %eax,%edx
f011d94c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011d952:	01 d0                	add    %edx,%eax
f011d954:	48                   	dec    %eax
f011d955:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011d95b:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011d961:	ba 00 00 00 00       	mov    $0x0,%edx
f011d966:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011d96c:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011d972:	29 d0                	sub    %edx,%eax
f011d974:	01 d8                	add    %ebx,%eax
f011d976:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011d97b:	39 c1                	cmp    %eax,%ecx
f011d97d:	74 17                	je     f011d996 <test_kmalloc_firstfit1+0xd3b>
f011d97f:	83 ec 04             	sub    $0x4,%esp
f011d982:	68 14 bd 13 f0       	push   $0xf013bd14
f011d987:	68 49 03 00 00       	push   $0x349
f011d98c:	68 fa b8 13 f0       	push   $0xf013b8fa
f011d991:	e8 6f 28 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d996:	e8 2d 64 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d99b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d99e:	74 17                	je     f011d9b7 <test_kmalloc_firstfit1+0xd5c>
f011d9a0:	83 ec 04             	sub    $0x4,%esp
f011d9a3:	68 14 b9 13 f0       	push   $0xf013b914
f011d9a8:	68 4a 03 00 00       	push   $0x34a
f011d9ad:	68 fa b8 13 f0       	push   $0xf013b8fa
f011d9b2:	e8 4e 28 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d9b7:	e8 db f7 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011d9bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d9bf:	29 c2                	sub    %eax,%edx
f011d9c1:	89 d0                	mov    %edx,%eax
f011d9c3:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d9c8:	74 17                	je     f011d9e1 <test_kmalloc_firstfit1+0xd86>
f011d9ca:	83 ec 04             	sub    $0x4,%esp
f011d9cd:	68 44 bd 13 f0       	push   $0xf013bd44
f011d9d2:	68 4b 03 00 00       	push   $0x34b
f011d9d7:	68 fa b8 13 f0       	push   $0xf013b8fa
f011d9dc:	e8 24 28 fe ff       	call   f0100205 <_panic>


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011d9e1:	e8 b1 f7 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011d9e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d9e9:	e8 da 63 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d9ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011d9f1:	83 ec 0c             	sub    $0xc,%esp
f011d9f4:	68 00 fc 03 00       	push   $0x3fc00
f011d9f9:	e8 8d a3 fe ff       	call   f0107d8b <kmalloc>
f011d9fe:	83 c4 10             	add    $0x10,%esp
f011da01:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011da07:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011da0d:	89 c1                	mov    %eax,%ecx
f011da0f:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011da16:	10 00 00 
f011da19:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011da1f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011da24:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011da2a:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011da30:	ba 00 00 00 00       	mov    $0x0,%edx
f011da35:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011da3b:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011da41:	29 d0                	sub    %edx,%eax
f011da43:	89 c3                	mov    %eax,%ebx
f011da45:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011da4c:	10 00 00 
f011da4f:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011da54:	0f b6 d0             	movzbl %al,%edx
f011da57:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011da5d:	01 d0                	add    %edx,%eax
f011da5f:	48                   	dec    %eax
f011da60:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011da66:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011da6c:	ba 00 00 00 00       	mov    $0x0,%edx
f011da71:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011da77:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011da7d:	29 d0                	sub    %edx,%eax
f011da7f:	01 c3                	add    %eax,%ebx
f011da81:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011da88:	10 00 00 
f011da8b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011da90:	0f b6 c0             	movzbl %al,%eax
f011da93:	c1 e0 04             	shl    $0x4,%eax
f011da96:	89 c2                	mov    %eax,%edx
f011da98:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011da9e:	01 d0                	add    %edx,%eax
f011daa0:	48                   	dec    %eax
f011daa1:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011daa7:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011daad:	ba 00 00 00 00       	mov    $0x0,%edx
f011dab2:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011dab8:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011dabe:	29 d0                	sub    %edx,%eax
f011dac0:	01 d8                	add    %ebx,%eax
f011dac2:	2d 00 c0 e7 09       	sub    $0x9e7c000,%eax
f011dac7:	39 c1                	cmp    %eax,%ecx
f011dac9:	74 17                	je     f011dae2 <test_kmalloc_firstfit1+0xe87>
f011dacb:	83 ec 04             	sub    $0x4,%esp
f011dace:	68 14 bd 13 f0       	push   $0xf013bd14
f011dad3:	68 52 03 00 00       	push   $0x352
f011dad8:	68 fa b8 13 f0       	push   $0xf013b8fa
f011dadd:	e8 23 27 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dae2:	e8 e1 62 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dae7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011daea:	74 17                	je     f011db03 <test_kmalloc_firstfit1+0xea8>
f011daec:	83 ec 04             	sub    $0x4,%esp
f011daef:	68 14 b9 13 f0       	push   $0xf013b914
f011daf4:	68 53 03 00 00       	push   $0x353
f011daf9:	68 fa b8 13 f0       	push   $0xf013b8fa
f011dafe:	e8 02 27 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011db03:	e8 8f f6 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011db08:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011db0b:	29 c2                	sub    %eax,%edx
f011db0d:	89 d0                	mov    %edx,%eax
f011db0f:	83 f8 40             	cmp    $0x40,%eax
f011db12:	74 17                	je     f011db2b <test_kmalloc_firstfit1+0xed0>
f011db14:	83 ec 04             	sub    $0x4,%esp
f011db17:	68 44 bd 13 f0       	push   $0xf013bd44
f011db1c:	68 54 03 00 00       	push   $0x354
f011db21:	68 fa b8 13 f0       	push   $0xf013b8fa
f011db26:	e8 da 26 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011db2b:	e8 67 f6 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011db30:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011db33:	e8 90 62 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011db38:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f011db3b:	83 ec 0c             	sub    $0xc,%esp
f011db3e:	68 00 00 20 00       	push   $0x200000
f011db43:	e8 43 a2 fe ff       	call   f0107d8b <kmalloc>
f011db48:	83 c4 10             	add    $0x10,%esp
f011db4b:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011db51:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011db57:	89 c1                	mov    %eax,%ecx
f011db59:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011db60:	10 00 00 
f011db63:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011db69:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011db6e:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011db74:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011db7a:	ba 00 00 00 00       	mov    $0x0,%edx
f011db7f:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011db85:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011db8b:	29 d0                	sub    %edx,%eax
f011db8d:	89 c3                	mov    %eax,%ebx
f011db8f:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011db96:	10 00 00 
f011db99:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011db9e:	0f b6 d0             	movzbl %al,%edx
f011dba1:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011dba7:	01 d0                	add    %edx,%eax
f011dba9:	48                   	dec    %eax
f011dbaa:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011dbb0:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011dbb6:	ba 00 00 00 00       	mov    $0x0,%edx
f011dbbb:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011dbc1:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011dbc7:	29 d0                	sub    %edx,%eax
f011dbc9:	01 c3                	add    %eax,%ebx
f011dbcb:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011dbd2:	10 00 00 
f011dbd5:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011dbda:	0f b6 c0             	movzbl %al,%eax
f011dbdd:	c1 e0 04             	shl    $0x4,%eax
f011dbe0:	89 c2                	mov    %eax,%edx
f011dbe2:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011dbe8:	01 d0                	add    %edx,%eax
f011dbea:	48                   	dec    %eax
f011dbeb:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011dbf1:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011dbf7:	ba 00 00 00 00       	mov    $0x0,%edx
f011dbfc:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011dc02:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011dc08:	29 d0                	sub    %edx,%eax
f011dc0a:	01 d8                	add    %ebx,%eax
f011dc0c:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011dc11:	39 c1                	cmp    %eax,%ecx
f011dc13:	74 17                	je     f011dc2c <test_kmalloc_firstfit1+0xfd1>
f011dc15:	83 ec 04             	sub    $0x4,%esp
f011dc18:	68 14 bd 13 f0       	push   $0xf013bd14
f011dc1d:	68 5a 03 00 00       	push   $0x35a
f011dc22:	68 fa b8 13 f0       	push   $0xf013b8fa
f011dc27:	e8 d9 25 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011dc2c:	e8 66 f5 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011dc31:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011dc34:	29 c2                	sub    %eax,%edx
f011dc36:	89 d0                	mov    %edx,%eax
f011dc38:	3d 00 02 00 00       	cmp    $0x200,%eax
f011dc3d:	74 17                	je     f011dc56 <test_kmalloc_firstfit1+0xffb>
f011dc3f:	83 ec 04             	sub    $0x4,%esp
f011dc42:	68 44 bd 13 f0       	push   $0xf013bd44
f011dc47:	68 5b 03 00 00       	push   $0x35b
f011dc4c:	68 fa b8 13 f0       	push   $0xf013b8fa
f011dc51:	e8 af 25 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dc56:	e8 6d 61 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dc5b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011dc5e:	74 17                	je     f011dc77 <test_kmalloc_firstfit1+0x101c>
f011dc60:	83 ec 04             	sub    $0x4,%esp
f011dc63:	68 14 b9 13 f0       	push   $0xf013b914
f011dc68:	68 5c 03 00 00       	push   $0x35c
f011dc6d:	68 fa b8 13 f0       	push   $0xf013b8fa
f011dc72:	e8 8e 25 fe ff       	call   f0100205 <_panic>


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011dc77:	e8 1b f5 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011dc7c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dc7f:	e8 44 61 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dc84:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f011dc87:	83 ec 0c             	sub    $0xc,%esp
f011dc8a:	68 00 fc 3f 00       	push   $0x3ffc00
f011dc8f:	e8 f7 a0 fe ff       	call   f0107d8b <kmalloc>
f011dc94:	83 c4 10             	add    $0x10,%esp
f011dc97:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011dc9d:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011dca3:	89 c1                	mov    %eax,%ecx
f011dca5:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011dcac:	10 00 00 
f011dcaf:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011dcb5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dcba:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011dcc0:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011dcc6:	ba 00 00 00 00       	mov    $0x0,%edx
f011dccb:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011dcd1:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011dcd7:	29 d0                	sub    %edx,%eax
f011dcd9:	89 c3                	mov    %eax,%ebx
f011dcdb:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011dce2:	10 00 00 
f011dce5:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011dcea:	0f b6 d0             	movzbl %al,%edx
f011dced:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011dcf3:	01 d0                	add    %edx,%eax
f011dcf5:	48                   	dec    %eax
f011dcf6:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011dcfc:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011dd02:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd07:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011dd0d:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011dd13:	29 d0                	sub    %edx,%eax
f011dd15:	01 c3                	add    %eax,%ebx
f011dd17:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011dd1e:	10 00 00 
f011dd21:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011dd26:	0f b6 c0             	movzbl %al,%eax
f011dd29:	c1 e0 04             	shl    $0x4,%eax
f011dd2c:	89 c2                	mov    %eax,%edx
f011dd2e:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011dd34:	01 d0                	add    %edx,%eax
f011dd36:	48                   	dec    %eax
f011dd37:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011dd3d:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011dd43:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd48:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011dd4e:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011dd54:	29 d0                	sub    %edx,%eax
f011dd56:	01 d8                	add    %ebx,%eax
f011dd58:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011dd5d:	39 c1                	cmp    %eax,%ecx
f011dd5f:	74 17                	je     f011dd78 <test_kmalloc_firstfit1+0x111d>
f011dd61:	83 ec 04             	sub    $0x4,%esp
f011dd64:	68 14 bd 13 f0       	push   $0xf013bd14
f011dd69:	68 63 03 00 00       	push   $0x363
f011dd6e:	68 fa b8 13 f0       	push   $0xf013b8fa
f011dd73:	e8 8d 24 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dd78:	e8 4b 60 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dd7d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011dd80:	74 17                	je     f011dd99 <test_kmalloc_firstfit1+0x113e>
f011dd82:	83 ec 04             	sub    $0x4,%esp
f011dd85:	68 14 b9 13 f0       	push   $0xf013b914
f011dd8a:	68 64 03 00 00       	push   $0x364
f011dd8f:	68 fa b8 13 f0       	push   $0xf013b8fa
f011dd94:	e8 6c 24 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011dd99:	e8 f9 f3 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011dd9e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011dda1:	29 c2                	sub    %eax,%edx
f011dda3:	89 d0                	mov    %edx,%eax
f011dda5:	3d 00 04 00 00       	cmp    $0x400,%eax
f011ddaa:	74 17                	je     f011ddc3 <test_kmalloc_firstfit1+0x1168>
f011ddac:	83 ec 04             	sub    $0x4,%esp
f011ddaf:	68 44 bd 13 f0       	push   $0xf013bd44
f011ddb4:	68 65 03 00 00       	push   $0x365
f011ddb9:	68 fa b8 13 f0       	push   $0xf013b8fa
f011ddbe:	e8 42 24 fe ff       	call   f0100205 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = sys_calculate_free_frames() ;
f011ddc3:	e8 cf f3 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011ddc8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ddcb:	e8 f8 5f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ddd0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[2]);
f011ddd3:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011ddd9:	83 ec 0c             	sub    $0xc,%esp
f011dddc:	50                   	push   %eax
f011dddd:	e8 74 a0 fe ff       	call   f0107e56 <kfree>
f011dde2:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dde5:	e8 de 5f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ddea:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011dded:	74 17                	je     f011de06 <test_kmalloc_firstfit1+0x11ab>
f011ddef:	83 ec 04             	sub    $0x4,%esp
f011ddf2:	68 14 b9 13 f0       	push   $0xf013b914
f011ddf7:	68 6e 03 00 00       	push   $0x36e
f011ddfc:	68 fa b8 13 f0       	push   $0xf013b8fa
f011de01:	e8 ff 23 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011de06:	e8 8c f3 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011de0b:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011de0e:	3d 00 01 00 00       	cmp    $0x100,%eax
f011de13:	74 17                	je     f011de2c <test_kmalloc_firstfit1+0x11d1>
f011de15:	83 ec 04             	sub    $0x4,%esp
f011de18:	68 57 bd 13 f0       	push   $0xf013bd57
f011de1d:	68 6f 03 00 00       	push   $0x36f
f011de22:	68 fa b8 13 f0       	push   $0xf013b8fa
f011de27:	e8 d9 23 fe ff       	call   f0100205 <_panic>

		//Next 1 MB Hole appended also
		freeFrames = sys_calculate_free_frames() ;
f011de2c:	e8 66 f3 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011de31:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011de34:	e8 8f 5f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011de39:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011de3c:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011de42:	83 ec 0c             	sub    $0xc,%esp
f011de45:	50                   	push   %eax
f011de46:	e8 0b a0 fe ff       	call   f0107e56 <kfree>
f011de4b:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011de4e:	e8 75 5f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011de53:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011de56:	74 17                	je     f011de6f <test_kmalloc_firstfit1+0x1214>
f011de58:	83 ec 04             	sub    $0x4,%esp
f011de5b:	68 14 b9 13 f0       	push   $0xf013b914
f011de60:	68 75 03 00 00       	push   $0x375
f011de65:	68 fa b8 13 f0       	push   $0xf013b8fa
f011de6a:	e8 96 23 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011de6f:	e8 23 f3 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011de74:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011de77:	3d 00 01 00 00       	cmp    $0x100,%eax
f011de7c:	74 17                	je     f011de95 <test_kmalloc_firstfit1+0x123a>
f011de7e:	83 ec 04             	sub    $0x4,%esp
f011de81:	68 57 bd 13 f0       	push   $0xf013bd57
f011de86:	68 76 03 00 00       	push   $0x376
f011de8b:	68 fa b8 13 f0       	push   $0xf013b8fa
f011de90:	e8 70 23 fe ff       	call   f0100205 <_panic>

	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = sys_calculate_free_frames() ;
f011de95:	e8 fd f2 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011de9a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011de9d:	e8 26 5f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f011dea5:	83 ec 0c             	sub    $0xc,%esp
f011dea8:	68 00 00 10 00       	push   $0x100000
f011dead:	e8 d9 9e fe ff       	call   f0107d8b <kmalloc>
f011deb2:	83 c4 10             	add    $0x10,%esp
f011deb5:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) panic("Wrong start address for the allocated space... ");
f011debb:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011dec1:	89 c1                	mov    %eax,%ecx
f011dec3:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011deca:	10 00 00 
f011decd:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011ded3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ded8:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011dede:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011dee4:	ba 00 00 00 00       	mov    $0x0,%edx
f011dee9:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011deef:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011def5:	29 d0                	sub    %edx,%eax
f011def7:	89 c3                	mov    %eax,%ebx
f011def9:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011df00:	10 00 00 
f011df03:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011df08:	0f b6 d0             	movzbl %al,%edx
f011df0b:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011df11:	01 d0                	add    %edx,%eax
f011df13:	48                   	dec    %eax
f011df14:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011df1a:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011df20:	ba 00 00 00 00       	mov    $0x0,%edx
f011df25:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011df2b:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011df31:	29 d0                	sub    %edx,%eax
f011df33:	01 c3                	add    %eax,%ebx
f011df35:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011df3c:	10 00 00 
f011df3f:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011df44:	0f b6 c0             	movzbl %al,%eax
f011df47:	c1 e0 04             	shl    $0x4,%eax
f011df4a:	89 c2                	mov    %eax,%edx
f011df4c:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011df52:	01 d0                	add    %edx,%eax
f011df54:	48                   	dec    %eax
f011df55:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011df5b:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011df61:	ba 00 00 00 00       	mov    $0x0,%edx
f011df66:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011df6c:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011df72:	29 d0                	sub    %edx,%eax
f011df74:	01 d8                	add    %ebx,%eax
f011df76:	2d 00 c0 e3 09       	sub    $0x9e3c000,%eax
f011df7b:	39 c1                	cmp    %eax,%ecx
f011df7d:	74 17                	je     f011df96 <test_kmalloc_firstfit1+0x133b>
f011df7f:	83 ec 04             	sub    $0x4,%esp
f011df82:	68 14 bd 13 f0       	push   $0xf013bd14
f011df87:	68 80 03 00 00       	push   $0x380
f011df8c:	68 fa b8 13 f0       	push   $0xf013b8fa
f011df91:	e8 6f 22 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011df96:	e8 2d 5e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011df9b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011df9e:	74 17                	je     f011dfb7 <test_kmalloc_firstfit1+0x135c>
f011dfa0:	83 ec 04             	sub    $0x4,%esp
f011dfa3:	68 14 b9 13 f0       	push   $0xf013b914
f011dfa8:	68 81 03 00 00       	push   $0x381
f011dfad:	68 fa b8 13 f0       	push   $0xf013b8fa
f011dfb2:	e8 4e 22 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011dfb7:	e8 db f1 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011dfbc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011dfbf:	29 c2                	sub    %eax,%edx
f011dfc1:	89 d0                	mov    %edx,%eax
f011dfc3:	3d 00 01 00 00       	cmp    $0x100,%eax
f011dfc8:	74 17                	je     f011dfe1 <test_kmalloc_firstfit1+0x1386>
f011dfca:	83 ec 04             	sub    $0x4,%esp
f011dfcd:	68 44 bd 13 f0       	push   $0xf013bd44
f011dfd2:	68 82 03 00 00       	push   $0x382
f011dfd7:	68 fa b8 13 f0       	push   $0xf013b8fa
f011dfdc:	e8 24 22 fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test FIRST FIT allocation (1) completed successfully.\n");
f011dfe1:	83 ec 0c             	sub    $0xc,%esp
f011dfe4:	68 f0 be 13 f0       	push   $0xf013bef0
f011dfe9:	e8 20 2d fe ff       	call   f0100d0e <cprintf>
f011dfee:	83 c4 10             	add    $0x10,%esp

	return 1;
f011dff1:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011dff6:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011dff9:	5b                   	pop    %ebx
f011dffa:	5f                   	pop    %edi
f011dffb:	5d                   	pop    %ebp
f011dffc:	c3                   	ret    

f011dffd <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f011dffd:	55                   	push   %ebp
f011dffe:	89 e5                	mov    %esp,%ebp
f011e000:	57                   	push   %edi
f011e001:	53                   	push   %ebx
f011e002:	81 ec 60 01 00 00    	sub    $0x160,%esp
	cprintf("==============================================\n");
f011e008:	83 ec 0c             	sub    $0xc,%esp
f011e00b:	68 3c b8 13 f0       	push   $0xf013b83c
f011e010:	e8 f9 2c fe ff       	call   f0100d0e <cprintf>
f011e015:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011e018:	83 ec 0c             	sub    $0xc,%esp
f011e01b:	68 6c b8 13 f0       	push   $0xf013b86c
f011e020:	e8 e9 2c fe ff       	call   f0100d0e <cprintf>
f011e025:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011e028:	83 ec 0c             	sub    $0xc,%esp
f011e02b:	68 3c b8 13 f0       	push   $0xf013b83c
f011e030:	e8 d9 2c fe ff       	call   f0100d0e <cprintf>
f011e035:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011e038:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f011e03e:	b9 14 00 00 00       	mov    $0x14,%ecx
f011e043:	b8 00 00 00 00       	mov    $0x0,%eax
f011e048:	89 d7                	mov    %edx,%edi
f011e04a:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011e04c:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011e053:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e056:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e05b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011e05e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011e061:	ba 00 00 00 00       	mov    $0x0,%edx
f011e066:	f7 75 f4             	divl   -0xc(%ebp)
f011e069:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011e06c:	29 d0                	sub    %edx,%eax
f011e06e:	89 c1                	mov    %eax,%ecx
f011e070:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011e077:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011e07c:	0f b6 d0             	movzbl %al,%edx
f011e07f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011e082:	01 d0                	add    %edx,%eax
f011e084:	48                   	dec    %eax
f011e085:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011e088:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011e08b:	ba 00 00 00 00       	mov    $0x0,%edx
f011e090:	f7 75 ec             	divl   -0x14(%ebp)
f011e093:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011e096:	29 d0                	sub    %edx,%eax
f011e098:	01 c1                	add    %eax,%ecx
f011e09a:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011e0a1:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011e0a6:	0f b6 c0             	movzbl %al,%eax
f011e0a9:	c1 e0 04             	shl    $0x4,%eax
f011e0ac:	89 c2                	mov    %eax,%edx
f011e0ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011e0b1:	01 d0                	add    %edx,%eax
f011e0b3:	48                   	dec    %eax
f011e0b4:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011e0b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e0ba:	ba 00 00 00 00       	mov    $0x0,%edx
f011e0bf:	f7 75 e4             	divl   -0x1c(%ebp)
f011e0c2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e0c5:	29 d0                	sub    %edx,%eax
f011e0c7:	01 c8                	add    %ecx,%eax
f011e0c9:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011e0ce:	29 c2                	sub    %eax,%edx
f011e0d0:	89 d0                	mov    %edx,%eax
f011e0d2:	83 ec 0c             	sub    $0xc,%esp
f011e0d5:	50                   	push   %eax
f011e0d6:	e8 b0 9c fe ff       	call   f0107d8b <kmalloc>
f011e0db:	83 c4 10             	add    $0x10,%esp
f011e0de:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("kmalloc: Attempt to allocate more than heap size, should return NULL");
f011e0e4:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011e0ea:	85 c0                	test   %eax,%eax
f011e0ec:	74 17                	je     f011e105 <test_kmalloc_firstfit2+0x108>
f011e0ee:	83 ec 04             	sub    $0x4,%esp
f011e0f1:	68 3c bf 13 f0       	push   $0xf013bf3c
f011e0f6:	68 97 03 00 00       	push   $0x397
f011e0fb:	68 fa b8 13 f0       	push   $0xf013b8fa
f011e100:	e8 00 21 fe ff       	call   f0100205 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011e105:	e8 8d f0 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011e10a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e10d:	e8 b6 5c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e112:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011e115:	83 ec 0c             	sub    $0xc,%esp
f011e118:	68 00 fc 1f 00       	push   $0x1ffc00
f011e11d:	e8 69 9c fe ff       	call   f0107d8b <kmalloc>
f011e122:	83 c4 10             	add    $0x10,%esp
f011e125:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011e12b:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011e131:	89 c1                	mov    %eax,%ecx
f011e133:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011e13a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011e13d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e142:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011e145:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e148:	ba 00 00 00 00       	mov    $0x0,%edx
f011e14d:	f7 75 d4             	divl   -0x2c(%ebp)
f011e150:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e153:	29 d0                	sub    %edx,%eax
f011e155:	89 c3                	mov    %eax,%ebx
f011e157:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011e15e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011e163:	0f b6 d0             	movzbl %al,%edx
f011e166:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011e169:	01 d0                	add    %edx,%eax
f011e16b:	48                   	dec    %eax
f011e16c:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011e16f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e172:	ba 00 00 00 00       	mov    $0x0,%edx
f011e177:	f7 75 cc             	divl   -0x34(%ebp)
f011e17a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e17d:	29 d0                	sub    %edx,%eax
f011e17f:	01 c3                	add    %eax,%ebx
f011e181:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011e188:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011e18d:	0f b6 c0             	movzbl %al,%eax
f011e190:	c1 e0 04             	shl    $0x4,%eax
f011e193:	89 c2                	mov    %eax,%edx
f011e195:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011e198:	01 d0                	add    %edx,%eax
f011e19a:	48                   	dec    %eax
f011e19b:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011e19e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e1a1:	ba 00 00 00 00       	mov    $0x0,%edx
f011e1a6:	f7 75 c4             	divl   -0x3c(%ebp)
f011e1a9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e1ac:	29 d0                	sub    %edx,%eax
f011e1ae:	01 d8                	add    %ebx,%eax
f011e1b0:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e1b5:	39 c1                	cmp    %eax,%ecx
f011e1b7:	74 17                	je     f011e1d0 <test_kmalloc_firstfit2+0x1d3>
f011e1b9:	83 ec 04             	sub    $0x4,%esp
f011e1bc:	68 14 bd 13 f0       	push   $0xf013bd14
f011e1c1:	68 a1 03 00 00       	push   $0x3a1
f011e1c6:	68 fa b8 13 f0       	push   $0xf013b8fa
f011e1cb:	e8 35 20 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e1d0:	e8 f3 5b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e1d5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e1d8:	74 17                	je     f011e1f1 <test_kmalloc_firstfit2+0x1f4>
f011e1da:	83 ec 04             	sub    $0x4,%esp
f011e1dd:	68 14 b9 13 f0       	push   $0xf013b914
f011e1e2:	68 a2 03 00 00       	push   $0x3a2
f011e1e7:	68 fa b8 13 f0       	push   $0xf013b8fa
f011e1ec:	e8 14 20 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011e1f1:	e8 a1 ef fe ff       	call   f010d197 <sys_calculate_free_frames>
f011e1f6:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e1f9:	29 c2                	sub    %eax,%edx
f011e1fb:	89 d0                	mov    %edx,%eax
f011e1fd:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e202:	74 17                	je     f011e21b <test_kmalloc_firstfit2+0x21e>
f011e204:	83 ec 04             	sub    $0x4,%esp
f011e207:	68 44 bd 13 f0       	push   $0xf013bd44
f011e20c:	68 a3 03 00 00       	push   $0x3a3
f011e211:	68 fa b8 13 f0       	push   $0xf013b8fa
f011e216:	e8 ea 1f fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011e21b:	e8 77 ef fe ff       	call   f010d197 <sys_calculate_free_frames>
f011e220:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e223:	e8 a0 5b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e228:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011e22b:	83 ec 0c             	sub    $0xc,%esp
f011e22e:	68 00 fc 1f 00       	push   $0x1ffc00
f011e233:	e8 53 9b fe ff       	call   f0107d8b <kmalloc>
f011e238:	83 c4 10             	add    $0x10,%esp
f011e23b:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011e241:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011e247:	89 c1                	mov    %eax,%ecx
f011e249:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011e250:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011e253:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e258:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011e25b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e25e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e263:	f7 75 bc             	divl   -0x44(%ebp)
f011e266:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e269:	29 d0                	sub    %edx,%eax
f011e26b:	89 c3                	mov    %eax,%ebx
f011e26d:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011e274:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011e279:	0f b6 d0             	movzbl %al,%edx
f011e27c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011e27f:	01 d0                	add    %edx,%eax
f011e281:	48                   	dec    %eax
f011e282:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011e285:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e288:	ba 00 00 00 00       	mov    $0x0,%edx
f011e28d:	f7 75 b4             	divl   -0x4c(%ebp)
f011e290:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e293:	29 d0                	sub    %edx,%eax
f011e295:	01 c3                	add    %eax,%ebx
f011e297:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011e29e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011e2a3:	0f b6 c0             	movzbl %al,%eax
f011e2a6:	c1 e0 04             	shl    $0x4,%eax
f011e2a9:	89 c2                	mov    %eax,%edx
f011e2ab:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011e2ae:	01 d0                	add    %edx,%eax
f011e2b0:	48                   	dec    %eax
f011e2b1:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011e2b4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e2b7:	ba 00 00 00 00       	mov    $0x0,%edx
f011e2bc:	f7 75 ac             	divl   -0x54(%ebp)
f011e2bf:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e2c2:	29 d0                	sub    %edx,%eax
f011e2c4:	01 d8                	add    %ebx,%eax
f011e2c6:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011e2cb:	39 c1                	cmp    %eax,%ecx
f011e2cd:	74 17                	je     f011e2e6 <test_kmalloc_firstfit2+0x2e9>
f011e2cf:	83 ec 04             	sub    $0x4,%esp
f011e2d2:	68 14 bd 13 f0       	push   $0xf013bd14
f011e2d7:	68 a9 03 00 00       	push   $0x3a9
f011e2dc:	68 fa b8 13 f0       	push   $0xf013b8fa
f011e2e1:	e8 1f 1f fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e2e6:	e8 dd 5a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e2eb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e2ee:	74 17                	je     f011e307 <test_kmalloc_firstfit2+0x30a>
f011e2f0:	83 ec 04             	sub    $0x4,%esp
f011e2f3:	68 14 b9 13 f0       	push   $0xf013b914
f011e2f8:	68 aa 03 00 00       	push   $0x3aa
f011e2fd:	68 fa b8 13 f0       	push   $0xf013b8fa
f011e302:	e8 fe 1e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011e307:	e8 8b ee fe ff       	call   f010d197 <sys_calculate_free_frames>
f011e30c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e30f:	29 c2                	sub    %eax,%edx
f011e311:	89 d0                	mov    %edx,%eax
f011e313:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e318:	74 17                	je     f011e331 <test_kmalloc_firstfit2+0x334>
f011e31a:	83 ec 04             	sub    $0x4,%esp
f011e31d:	68 44 bd 13 f0       	push   $0xf013bd44
f011e322:	68 ab 03 00 00       	push   $0x3ab
f011e327:	68 fa b8 13 f0       	push   $0xf013b8fa
f011e32c:	e8 d4 1e fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011e331:	e8 61 ee fe ff       	call   f010d197 <sys_calculate_free_frames>
f011e336:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e339:	e8 8a 5a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e33e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011e341:	83 ec 0c             	sub    $0xc,%esp
f011e344:	68 00 08 00 00       	push   $0x800
f011e349:	e8 3d 9a fe ff       	call   f0107d8b <kmalloc>
f011e34e:	83 c4 10             	add    $0x10,%esp
f011e351:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] < (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011e357:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011e35d:	89 c1                	mov    %eax,%ecx
f011e35f:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011e366:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011e369:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e36e:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011e371:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e374:	ba 00 00 00 00       	mov    $0x0,%edx
f011e379:	f7 75 a4             	divl   -0x5c(%ebp)
f011e37c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e37f:	29 d0                	sub    %edx,%eax
f011e381:	89 c3                	mov    %eax,%ebx
f011e383:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011e38a:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011e38f:	0f b6 d0             	movzbl %al,%edx
f011e392:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011e395:	01 d0                	add    %edx,%eax
f011e397:	48                   	dec    %eax
f011e398:	89 45 98             	mov    %eax,-0x68(%ebp)
f011e39b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e39e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e3a3:	f7 75 9c             	divl   -0x64(%ebp)
f011e3a6:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e3a9:	29 d0                	sub    %edx,%eax
f011e3ab:	01 c3                	add    %eax,%ebx
f011e3ad:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011e3b4:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011e3b9:	0f b6 c0             	movzbl %al,%eax
f011e3bc:	c1 e0 04             	shl    $0x4,%eax
f011e3bf:	89 c2                	mov    %eax,%edx
f011e3c1:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011e3c4:	01 d0                	add    %edx,%eax
f011e3c6:	48                   	dec    %eax
f011e3c7:	89 45 90             	mov    %eax,-0x70(%ebp)
f011e3ca:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e3cd:	ba 00 00 00 00       	mov    $0x0,%edx
f011e3d2:	f7 75 94             	divl   -0x6c(%ebp)
f011e3d5:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e3d8:	29 d0                	sub    %edx,%eax
f011e3da:	01 d8                	add    %ebx,%eax
f011e3dc:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011e3e1:	39 c1                	cmp    %eax,%ecx
f011e3e3:	73 17                	jae    f011e3fc <test_kmalloc_firstfit2+0x3ff>
f011e3e5:	83 ec 04             	sub    $0x4,%esp
f011e3e8:	68 14 bd 13 f0       	push   $0xf013bd14
f011e3ed:	68 b1 03 00 00       	push   $0x3b1
f011e3f2:	68 fa b8 13 f0       	push   $0xf013b8fa
f011e3f7:	e8 09 1e fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e3fc:	e8 c7 59 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e401:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e404:	74 17                	je     f011e41d <test_kmalloc_firstfit2+0x420>
f011e406:	83 ec 04             	sub    $0x4,%esp
f011e409:	68 14 b9 13 f0       	push   $0xf013b914
f011e40e:	68 b2 03 00 00       	push   $0x3b2
f011e413:	68 fa b8 13 f0       	push   $0xf013b8fa
f011e418:	e8 e8 1d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011e41d:	e8 75 ed fe ff       	call   f010d197 <sys_calculate_free_frames>
f011e422:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e425:	29 c2                	sub    %eax,%edx
f011e427:	89 d0                	mov    %edx,%eax
f011e429:	83 f8 01             	cmp    $0x1,%eax
f011e42c:	74 17                	je     f011e445 <test_kmalloc_firstfit2+0x448>
f011e42e:	83 ec 04             	sub    $0x4,%esp
f011e431:	68 44 bd 13 f0       	push   $0xf013bd44
f011e436:	68 b3 03 00 00       	push   $0x3b3
f011e43b:	68 fa b8 13 f0       	push   $0xf013b8fa
f011e440:	e8 c0 1d fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011e445:	e8 4d ed fe ff       	call   f010d197 <sys_calculate_free_frames>
f011e44a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e44d:	e8 76 59 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e452:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011e455:	83 ec 0c             	sub    $0xc,%esp
f011e458:	68 00 08 00 00       	push   $0x800
f011e45d:	e8 29 99 fe ff       	call   f0107d8b <kmalloc>
f011e462:	83 c4 10             	add    $0x10,%esp
f011e465:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011e46b:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011e471:	89 c1                	mov    %eax,%ecx
f011e473:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011e47a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011e47d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e482:	89 45 88             	mov    %eax,-0x78(%ebp)
f011e485:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e488:	ba 00 00 00 00       	mov    $0x0,%edx
f011e48d:	f7 75 8c             	divl   -0x74(%ebp)
f011e490:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e493:	29 d0                	sub    %edx,%eax
f011e495:	89 c3                	mov    %eax,%ebx
f011e497:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011e49e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011e4a3:	0f b6 d0             	movzbl %al,%edx
f011e4a6:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011e4a9:	01 d0                	add    %edx,%eax
f011e4ab:	48                   	dec    %eax
f011e4ac:	89 45 80             	mov    %eax,-0x80(%ebp)
f011e4af:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e4b2:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4b7:	f7 75 84             	divl   -0x7c(%ebp)
f011e4ba:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e4bd:	29 d0                	sub    %edx,%eax
f011e4bf:	01 c3                	add    %eax,%ebx
f011e4c1:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011e4c8:	10 00 00 
f011e4cb:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011e4d0:	0f b6 c0             	movzbl %al,%eax
f011e4d3:	c1 e0 04             	shl    $0x4,%eax
f011e4d6:	89 c2                	mov    %eax,%edx
f011e4d8:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011e4de:	01 d0                	add    %edx,%eax
f011e4e0:	48                   	dec    %eax
f011e4e1:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011e4e7:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e4ed:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4f2:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011e4f8:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e4fe:	29 d0                	sub    %edx,%eax
f011e500:	01 d8                	add    %ebx,%eax
f011e502:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011e507:	39 c1                	cmp    %eax,%ecx
f011e509:	74 17                	je     f011e522 <test_kmalloc_firstfit2+0x525>
f011e50b:	83 ec 04             	sub    $0x4,%esp
f011e50e:	68 14 bd 13 f0       	push   $0xf013bd14
f011e513:	68 b9 03 00 00       	push   $0x3b9
f011e518:	68 fa b8 13 f0       	push   $0xf013b8fa
f011e51d:	e8 e3 1c fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e522:	e8 a1 58 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e527:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e52a:	74 17                	je     f011e543 <test_kmalloc_firstfit2+0x546>
f011e52c:	83 ec 04             	sub    $0x4,%esp
f011e52f:	68 14 b9 13 f0       	push   $0xf013b914
f011e534:	68 ba 03 00 00       	push   $0x3ba
f011e539:	68 fa b8 13 f0       	push   $0xf013b8fa
f011e53e:	e8 c2 1c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011e543:	e8 4f ec fe ff       	call   f010d197 <sys_calculate_free_frames>
f011e548:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e54b:	29 c2                	sub    %eax,%edx
f011e54d:	89 d0                	mov    %edx,%eax
f011e54f:	83 f8 01             	cmp    $0x1,%eax
f011e552:	74 17                	je     f011e56b <test_kmalloc_firstfit2+0x56e>
f011e554:	83 ec 04             	sub    $0x4,%esp
f011e557:	68 44 bd 13 f0       	push   $0xf013bd44
f011e55c:	68 bb 03 00 00       	push   $0x3bb
f011e561:	68 fa b8 13 f0       	push   $0xf013b8fa
f011e566:	e8 9a 1c fe ff       	call   f0100205 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011e56b:	e8 27 ec fe ff       	call   f010d197 <sys_calculate_free_frames>
f011e570:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e573:	e8 50 58 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e578:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011e57b:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011e581:	83 ec 0c             	sub    $0xc,%esp
f011e584:	50                   	push   %eax
f011e585:	e8 cc 98 fe ff       	call   f0107e56 <kfree>
f011e58a:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e58d:	e8 36 58 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e592:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e595:	74 17                	je     f011e5ae <test_kmalloc_firstfit2+0x5b1>
f011e597:	83 ec 04             	sub    $0x4,%esp
f011e59a:	68 14 b9 13 f0       	push   $0xf013b914
f011e59f:	68 c1 03 00 00       	push   $0x3c1
f011e5a4:	68 fa b8 13 f0       	push   $0xf013b8fa
f011e5a9:	e8 57 1c fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong free: ");
f011e5ae:	e8 e4 eb fe ff       	call   f010d197 <sys_calculate_free_frames>
f011e5b3:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e5b6:	83 f8 01             	cmp    $0x1,%eax
f011e5b9:	74 17                	je     f011e5d2 <test_kmalloc_firstfit2+0x5d5>
f011e5bb:	83 ec 04             	sub    $0x4,%esp
f011e5be:	68 57 bd 13 f0       	push   $0xf013bd57
f011e5c3:	68 c2 03 00 00       	push   $0x3c2
f011e5c8:	68 fa b8 13 f0       	push   $0xf013b8fa
f011e5cd:	e8 33 1c fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011e5d2:	e8 c0 eb fe ff       	call   f010d197 <sys_calculate_free_frames>
f011e5d7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e5da:	e8 e9 57 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e5df:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011e5e2:	83 ec 0c             	sub    $0xc,%esp
f011e5e5:	68 00 1c 00 00       	push   $0x1c00
f011e5ea:	e8 9c 97 fe ff       	call   f0107d8b <kmalloc>
f011e5ef:	83 c4 10             	add    $0x10,%esp
f011e5f2:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011e5f8:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011e5fe:	89 c1                	mov    %eax,%ecx
f011e600:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011e607:	10 00 00 
f011e60a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011e610:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e615:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011e61b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e621:	ba 00 00 00 00       	mov    $0x0,%edx
f011e626:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011e62c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e632:	29 d0                	sub    %edx,%eax
f011e634:	89 c3                	mov    %eax,%ebx
f011e636:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011e63d:	10 00 00 
f011e640:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011e645:	0f b6 d0             	movzbl %al,%edx
f011e648:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011e64e:	01 d0                	add    %edx,%eax
f011e650:	48                   	dec    %eax
f011e651:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011e657:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e65d:	ba 00 00 00 00       	mov    $0x0,%edx
f011e662:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011e668:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e66e:	29 d0                	sub    %edx,%eax
f011e670:	01 c3                	add    %eax,%ebx
f011e672:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011e679:	10 00 00 
f011e67c:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011e681:	0f b6 c0             	movzbl %al,%eax
f011e684:	c1 e0 04             	shl    $0x4,%eax
f011e687:	89 c2                	mov    %eax,%edx
f011e689:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011e68f:	01 d0                	add    %edx,%eax
f011e691:	48                   	dec    %eax
f011e692:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011e698:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e69e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e6a3:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011e6a9:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e6af:	29 d0                	sub    %edx,%eax
f011e6b1:	01 d8                	add    %ebx,%eax
f011e6b3:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011e6b8:	39 c1                	cmp    %eax,%ecx
f011e6ba:	74 17                	je     f011e6d3 <test_kmalloc_firstfit2+0x6d6>
f011e6bc:	83 ec 04             	sub    $0x4,%esp
f011e6bf:	68 14 bd 13 f0       	push   $0xf013bd14
f011e6c4:	68 c8 03 00 00       	push   $0x3c8
f011e6c9:	68 fa b8 13 f0       	push   $0xf013b8fa
f011e6ce:	e8 32 1b fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e6d3:	e8 f0 56 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e6d8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e6db:	74 17                	je     f011e6f4 <test_kmalloc_firstfit2+0x6f7>
f011e6dd:	83 ec 04             	sub    $0x4,%esp
f011e6e0:	68 14 b9 13 f0       	push   $0xf013b914
f011e6e5:	68 c9 03 00 00       	push   $0x3c9
f011e6ea:	68 fa b8 13 f0       	push   $0xf013b8fa
f011e6ef:	e8 11 1b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: ");
f011e6f4:	e8 9e ea fe ff       	call   f010d197 <sys_calculate_free_frames>
f011e6f9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e6fc:	29 c2                	sub    %eax,%edx
f011e6fe:	89 d0                	mov    %edx,%eax
f011e700:	83 f8 02             	cmp    $0x2,%eax
f011e703:	74 17                	je     f011e71c <test_kmalloc_firstfit2+0x71f>
f011e705:	83 ec 04             	sub    $0x4,%esp
f011e708:	68 44 bd 13 f0       	push   $0xf013bd44
f011e70d:	68 ca 03 00 00       	push   $0x3ca
f011e712:	68 fa b8 13 f0       	push   $0xf013b8fa
f011e717:	e8 e9 1a fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011e71c:	e8 76 ea fe ff       	call   f010d197 <sys_calculate_free_frames>
f011e721:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e724:	e8 9f 56 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e729:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011e72c:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011e732:	83 ec 0c             	sub    $0xc,%esp
f011e735:	50                   	push   %eax
f011e736:	e8 1b 97 fe ff       	call   f0107e56 <kfree>
f011e73b:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e73e:	e8 85 56 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e743:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e746:	74 17                	je     f011e75f <test_kmalloc_firstfit2+0x762>
f011e748:	83 ec 04             	sub    $0x4,%esp
f011e74b:	68 14 b9 13 f0       	push   $0xf013b914
f011e750:	68 d0 03 00 00       	push   $0x3d0
f011e755:	68 fa b8 13 f0       	push   $0xf013b8fa
f011e75a:	e8 a6 1a fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011e75f:	e8 33 ea fe ff       	call   f010d197 <sys_calculate_free_frames>
f011e764:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e767:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e76c:	74 17                	je     f011e785 <test_kmalloc_firstfit2+0x788>
f011e76e:	83 ec 04             	sub    $0x4,%esp
f011e771:	68 57 bd 13 f0       	push   $0xf013bd57
f011e776:	68 d1 03 00 00       	push   $0x3d1
f011e77b:	68 fa b8 13 f0       	push   $0xf013b8fa
f011e780:	e8 80 1a fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011e785:	e8 0d ea fe ff       	call   f010d197 <sys_calculate_free_frames>
f011e78a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e78d:	e8 36 56 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e792:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011e795:	83 ec 0c             	sub    $0xc,%esp
f011e798:	68 00 fc 2f 00       	push   $0x2ffc00
f011e79d:	e8 e9 95 fe ff       	call   f0107d8b <kmalloc>
f011e7a2:	83 c4 10             	add    $0x10,%esp
f011e7a5:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011e7ab:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011e7b1:	89 c1                	mov    %eax,%ecx
f011e7b3:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011e7ba:	10 00 00 
f011e7bd:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e7c3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e7c8:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011e7ce:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e7d4:	ba 00 00 00 00       	mov    $0x0,%edx
f011e7d9:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011e7df:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e7e5:	29 d0                	sub    %edx,%eax
f011e7e7:	89 c3                	mov    %eax,%ebx
f011e7e9:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011e7f0:	10 00 00 
f011e7f3:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011e7f8:	0f b6 d0             	movzbl %al,%edx
f011e7fb:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e801:	01 d0                	add    %edx,%eax
f011e803:	48                   	dec    %eax
f011e804:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011e80a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e810:	ba 00 00 00 00       	mov    $0x0,%edx
f011e815:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011e81b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e821:	29 d0                	sub    %edx,%eax
f011e823:	01 c3                	add    %eax,%ebx
f011e825:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011e82c:	10 00 00 
f011e82f:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011e834:	0f b6 c0             	movzbl %al,%eax
f011e837:	c1 e0 04             	shl    $0x4,%eax
f011e83a:	89 c2                	mov    %eax,%edx
f011e83c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e842:	01 d0                	add    %edx,%eax
f011e844:	48                   	dec    %eax
f011e845:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011e84b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e851:	ba 00 00 00 00       	mov    $0x0,%edx
f011e856:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011e85c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e862:	29 d0                	sub    %edx,%eax
f011e864:	01 d8                	add    %ebx,%eax
f011e866:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011e86b:	39 c1                	cmp    %eax,%ecx
f011e86d:	74 17                	je     f011e886 <test_kmalloc_firstfit2+0x889>
f011e86f:	83 ec 04             	sub    $0x4,%esp
f011e872:	68 14 bd 13 f0       	push   $0xf013bd14
f011e877:	68 d7 03 00 00       	push   $0x3d7
f011e87c:	68 fa b8 13 f0       	push   $0xf013b8fa
f011e881:	e8 7f 19 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e886:	e8 3d 55 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e88b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e88e:	74 17                	je     f011e8a7 <test_kmalloc_firstfit2+0x8aa>
f011e890:	83 ec 04             	sub    $0x4,%esp
f011e893:	68 14 b9 13 f0       	push   $0xf013b914
f011e898:	68 d8 03 00 00       	push   $0x3d8
f011e89d:	68 fa b8 13 f0       	push   $0xf013b8fa
f011e8a2:	e8 5e 19 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e8a7:	e8 eb e8 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011e8ac:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e8af:	29 c2                	sub    %eax,%edx
f011e8b1:	89 d0                	mov    %edx,%eax
f011e8b3:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e8b8:	74 17                	je     f011e8d1 <test_kmalloc_firstfit2+0x8d4>
f011e8ba:	83 ec 04             	sub    $0x4,%esp
f011e8bd:	68 44 bd 13 f0       	push   $0xf013bd44
f011e8c2:	68 d9 03 00 00       	push   $0x3d9
f011e8c7:	68 fa b8 13 f0       	push   $0xf013b8fa
f011e8cc:	e8 34 19 fe ff       	call   f0100205 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011e8d1:	e8 c1 e8 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011e8d6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e8d9:	e8 ea 54 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e8de:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011e8e1:	83 ec 0c             	sub    $0xc,%esp
f011e8e4:	68 00 18 20 00       	push   $0x201800
f011e8e9:	e8 9d 94 fe ff       	call   f0107d8b <kmalloc>
f011e8ee:	83 c4 10             	add    $0x10,%esp
f011e8f1:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011e8f7:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011e8fd:	89 c1                	mov    %eax,%ecx
f011e8ff:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011e906:	10 00 00 
f011e909:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011e90f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e914:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011e91a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e920:	ba 00 00 00 00       	mov    $0x0,%edx
f011e925:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011e92b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e931:	29 d0                	sub    %edx,%eax
f011e933:	89 c3                	mov    %eax,%ebx
f011e935:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011e93c:	10 00 00 
f011e93f:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011e944:	0f b6 d0             	movzbl %al,%edx
f011e947:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011e94d:	01 d0                	add    %edx,%eax
f011e94f:	48                   	dec    %eax
f011e950:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011e956:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011e95c:	ba 00 00 00 00       	mov    $0x0,%edx
f011e961:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011e967:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011e96d:	29 d0                	sub    %edx,%eax
f011e96f:	01 c3                	add    %eax,%ebx
f011e971:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011e978:	10 00 00 
f011e97b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011e980:	0f b6 c0             	movzbl %al,%eax
f011e983:	c1 e0 04             	shl    $0x4,%eax
f011e986:	89 c2                	mov    %eax,%edx
f011e988:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011e98e:	01 d0                	add    %edx,%eax
f011e990:	48                   	dec    %eax
f011e991:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011e997:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011e99d:	ba 00 00 00 00       	mov    $0x0,%edx
f011e9a2:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011e9a8:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011e9ae:	29 d0                	sub    %edx,%eax
f011e9b0:	01 d8                	add    %ebx,%eax
f011e9b2:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011e9b7:	39 c1                	cmp    %eax,%ecx
f011e9b9:	74 17                	je     f011e9d2 <test_kmalloc_firstfit2+0x9d5>
f011e9bb:	83 ec 04             	sub    $0x4,%esp
f011e9be:	68 14 bd 13 f0       	push   $0xf013bd14
f011e9c3:	68 df 03 00 00       	push   $0x3df
f011e9c8:	68 fa b8 13 f0       	push   $0xf013b8fa
f011e9cd:	e8 33 18 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e9d2:	e8 f1 53 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e9d7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e9da:	74 17                	je     f011e9f3 <test_kmalloc_firstfit2+0x9f6>
f011e9dc:	83 ec 04             	sub    $0x4,%esp
f011e9df:	68 14 b9 13 f0       	push   $0xf013b914
f011e9e4:	68 e0 03 00 00       	push   $0x3e0
f011e9e9:	68 fa b8 13 f0       	push   $0xf013b8fa
f011e9ee:	e8 12 18 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011e9f3:	e8 9f e7 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011e9f8:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e9fb:	29 c2                	sub    %eax,%edx
f011e9fd:	89 d0                	mov    %edx,%eax
f011e9ff:	3d 02 02 00 00       	cmp    $0x202,%eax
f011ea04:	74 17                	je     f011ea1d <test_kmalloc_firstfit2+0xa20>
f011ea06:	83 ec 04             	sub    $0x4,%esp
f011ea09:	68 44 bd 13 f0       	push   $0xf013bd44
f011ea0e:	68 e1 03 00 00       	push   $0x3e1
f011ea13:	68 fa b8 13 f0       	push   $0xf013b8fa
f011ea18:	e8 e8 17 fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011ea1d:	e8 75 e7 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011ea22:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ea25:	e8 9e 53 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ea2a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011ea2d:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011ea33:	83 ec 0c             	sub    $0xc,%esp
f011ea36:	50                   	push   %eax
f011ea37:	e8 1a 94 fe ff       	call   f0107e56 <kfree>
f011ea3c:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ea3f:	e8 84 53 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ea44:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ea47:	74 17                	je     f011ea60 <test_kmalloc_firstfit2+0xa63>
f011ea49:	83 ec 04             	sub    $0x4,%esp
f011ea4c:	68 14 b9 13 f0       	push   $0xf013b914
f011ea51:	68 e7 03 00 00       	push   $0x3e7
f011ea56:	68 fa b8 13 f0       	push   $0xf013b8fa
f011ea5b:	e8 a5 17 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011ea60:	e8 32 e7 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011ea65:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011ea68:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ea6d:	74 17                	je     f011ea86 <test_kmalloc_firstfit2+0xa89>
f011ea6f:	83 ec 04             	sub    $0x4,%esp
f011ea72:	68 57 bd 13 f0       	push   $0xf013bd57
f011ea77:	68 e8 03 00 00       	push   $0x3e8
f011ea7c:	68 fa b8 13 f0       	push   $0xf013b8fa
f011ea81:	e8 7f 17 fe ff       	call   f0100205 <_panic>

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB + 4 KB = 4 MB + 4 KB]
		freeFrames = sys_calculate_free_frames() ;
f011ea86:	e8 0c e7 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011ea8b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ea8e:	e8 35 53 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ea93:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011ea96:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011ea9c:	83 ec 0c             	sub    $0xc,%esp
f011ea9f:	50                   	push   %eax
f011eaa0:	e8 b1 93 fe ff       	call   f0107e56 <kfree>
f011eaa5:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011eaa8:	e8 ea e6 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011eaad:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011eab0:	3d 00 02 00 00       	cmp    $0x200,%eax
f011eab5:	74 17                	je     f011eace <test_kmalloc_firstfit2+0xad1>
f011eab7:	83 ec 04             	sub    $0x4,%esp
f011eaba:	68 57 bd 13 f0       	push   $0xf013bd57
f011eabf:	68 ee 03 00 00       	push   $0x3ee
f011eac4:	68 fa b8 13 f0       	push   $0xf013b8fa
f011eac9:	e8 37 17 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011eace:	e8 f5 52 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ead3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ead6:	74 17                	je     f011eaef <test_kmalloc_firstfit2+0xaf2>
f011ead8:	83 ec 04             	sub    $0x4,%esp
f011eadb:	68 14 b9 13 f0       	push   $0xf013b914
f011eae0:	68 ef 03 00 00       	push   $0x3ef
f011eae5:	68 fa b8 13 f0       	push   $0xf013b8fa
f011eaea:	e8 16 17 fe ff       	call   f0100205 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011eaef:	e8 a3 e6 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011eaf4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011eaf7:	e8 cc 52 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011eafc:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011eaff:	83 ec 0c             	sub    $0xc,%esp
f011eb02:	68 00 fc 4f 00       	push   $0x4ffc00
f011eb07:	e8 7f 92 fe ff       	call   f0107d8b <kmalloc>
f011eb0c:	83 c4 10             	add    $0x10,%esp
f011eb0f:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011eb15:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011eb1b:	89 c1                	mov    %eax,%ecx
f011eb1d:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011eb24:	10 00 00 
f011eb27:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011eb2d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011eb32:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011eb38:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011eb3e:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb43:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011eb49:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011eb4f:	29 d0                	sub    %edx,%eax
f011eb51:	89 c3                	mov    %eax,%ebx
f011eb53:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011eb5a:	10 00 00 
f011eb5d:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011eb62:	0f b6 d0             	movzbl %al,%edx
f011eb65:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011eb6b:	01 d0                	add    %edx,%eax
f011eb6d:	48                   	dec    %eax
f011eb6e:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011eb74:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011eb7a:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb7f:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011eb85:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011eb8b:	29 d0                	sub    %edx,%eax
f011eb8d:	01 c3                	add    %eax,%ebx
f011eb8f:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011eb96:	10 00 00 
f011eb99:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011eb9e:	0f b6 c0             	movzbl %al,%eax
f011eba1:	c1 e0 04             	shl    $0x4,%eax
f011eba4:	89 c2                	mov    %eax,%edx
f011eba6:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011ebac:	01 d0                	add    %edx,%eax
f011ebae:	48                   	dec    %eax
f011ebaf:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011ebb5:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011ebbb:	ba 00 00 00 00       	mov    $0x0,%edx
f011ebc0:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011ebc6:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011ebcc:	29 d0                	sub    %edx,%eax
f011ebce:	01 d8                	add    %ebx,%eax
f011ebd0:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011ebd5:	39 c1                	cmp    %eax,%ecx
f011ebd7:	74 17                	je     f011ebf0 <test_kmalloc_firstfit2+0xbf3>
f011ebd9:	83 ec 04             	sub    $0x4,%esp
f011ebdc:	68 14 bd 13 f0       	push   $0xf013bd14
f011ebe1:	68 f5 03 00 00       	push   $0x3f5
f011ebe6:	68 fa b8 13 f0       	push   $0xf013b8fa
f011ebeb:	e8 15 16 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ebf0:	e8 d3 51 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ebf5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ebf8:	74 17                	je     f011ec11 <test_kmalloc_firstfit2+0xc14>
f011ebfa:	83 ec 04             	sub    $0x4,%esp
f011ebfd:	68 14 b9 13 f0       	push   $0xf013b914
f011ec02:	68 f6 03 00 00       	push   $0x3f6
f011ec07:	68 fa b8 13 f0       	push   $0xf013b8fa
f011ec0c:	e8 f4 15 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   5*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011ec11:	e8 81 e5 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011ec16:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ec19:	29 c2                	sub    %eax,%edx
f011ec1b:	89 d0                	mov    %edx,%eax
f011ec1d:	3d 00 05 00 00       	cmp    $0x500,%eax
f011ec22:	74 17                	je     f011ec3b <test_kmalloc_firstfit2+0xc3e>
f011ec24:	83 ec 04             	sub    $0x4,%esp
f011ec27:	68 44 bd 13 f0       	push   $0xf013bd44
f011ec2c:	68 f7 03 00 00       	push   $0x3f7
f011ec31:	68 fa b8 13 f0       	push   $0xf013b8fa
f011ec36:	e8 ca 15 fe ff       	call   f0100205 <_panic>
//		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
//		if ((sys_calculate_free_frames() - freeFrames) != 514) panic("Wrong free: ");

		//[FIRST FIT Case]
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011ec3b:	e8 57 e5 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011ec40:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ec43:	e8 80 51 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ec48:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega-kilo);
f011ec4b:	83 ec 0c             	sub    $0xc,%esp
f011ec4e:	68 00 fc 2f 00       	push   $0x2ffc00
f011ec53:	e8 33 91 fe ff       	call   f0107d8b <kmalloc>
f011ec58:	83 c4 10             	add    $0x10,%esp
f011ec5b:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011ec61:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011ec67:	89 c1                	mov    %eax,%ecx
f011ec69:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011ec70:	10 00 00 
f011ec73:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011ec79:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ec7e:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011ec84:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011ec8a:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec8f:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011ec95:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011ec9b:	29 d0                	sub    %edx,%eax
f011ec9d:	89 c3                	mov    %eax,%ebx
f011ec9f:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011eca6:	10 00 00 
f011eca9:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011ecae:	0f b6 d0             	movzbl %al,%edx
f011ecb1:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011ecb7:	01 d0                	add    %edx,%eax
f011ecb9:	48                   	dec    %eax
f011ecba:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011ecc0:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011ecc6:	ba 00 00 00 00       	mov    $0x0,%edx
f011eccb:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011ecd1:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011ecd7:	29 d0                	sub    %edx,%eax
f011ecd9:	01 c3                	add    %eax,%ebx
f011ecdb:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011ece2:	10 00 00 
f011ece5:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011ecea:	0f b6 c0             	movzbl %al,%eax
f011eced:	c1 e0 04             	shl    $0x4,%eax
f011ecf0:	89 c2                	mov    %eax,%edx
f011ecf2:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011ecf8:	01 d0                	add    %edx,%eax
f011ecfa:	48                   	dec    %eax
f011ecfb:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011ed01:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011ed07:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed0c:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011ed12:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011ed18:	29 d0                	sub    %edx,%eax
f011ed1a:	01 d8                	add    %ebx,%eax
f011ed1c:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011ed21:	39 c1                	cmp    %eax,%ecx
f011ed23:	74 17                	je     f011ed3c <test_kmalloc_firstfit2+0xd3f>
f011ed25:	83 ec 04             	sub    $0x4,%esp
f011ed28:	68 14 bd 13 f0       	push   $0xf013bd14
f011ed2d:	68 05 04 00 00       	push   $0x405
f011ed32:	68 fa b8 13 f0       	push   $0xf013b8fa
f011ed37:	e8 c9 14 fe ff       	call   f0100205 <_panic>
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ed3c:	e8 87 50 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ed41:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ed44:	74 17                	je     f011ed5d <test_kmalloc_firstfit2+0xd60>
f011ed46:	83 ec 04             	sub    $0x4,%esp
f011ed49:	68 14 b9 13 f0       	push   $0xf013b914
f011ed4e:	68 06 04 00 00       	push   $0x406
f011ed53:	68 fa b8 13 f0       	push   $0xf013b8fa
f011ed58:	e8 a8 14 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011ed5d:	e8 35 e4 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011ed62:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ed65:	29 c2                	sub    %eax,%edx
f011ed67:	89 d0                	mov    %edx,%eax
f011ed69:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ed6e:	74 17                	je     f011ed87 <test_kmalloc_firstfit2+0xd8a>
f011ed70:	83 ec 04             	sub    $0x4,%esp
f011ed73:	68 44 bd 13 f0       	push   $0xf013bd44
f011ed78:	68 07 04 00 00       	push   $0x407
f011ed7d:	68 fa b8 13 f0       	push   $0xf013b8fa
f011ed82:	e8 7e 14 fe ff       	call   f0100205 <_panic>
	}
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[9] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011ed87:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011ed8e:	10 00 00 
f011ed91:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011ed97:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ed9c:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011eda2:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011eda8:	ba 00 00 00 00       	mov    $0x0,%edx
f011edad:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011edb3:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011edb9:	29 d0                	sub    %edx,%eax
f011edbb:	89 c1                	mov    %eax,%ecx
f011edbd:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011edc4:	10 00 00 
f011edc7:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011edcc:	0f b6 d0             	movzbl %al,%edx
f011edcf:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011edd5:	01 d0                	add    %edx,%eax
f011edd7:	48                   	dec    %eax
f011edd8:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011edde:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011ede4:	ba 00 00 00 00       	mov    $0x0,%edx
f011ede9:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011edef:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011edf5:	29 d0                	sub    %edx,%eax
f011edf7:	01 c1                	add    %eax,%ecx
f011edf9:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011ee00:	10 00 00 
f011ee03:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011ee08:	0f b6 c0             	movzbl %al,%eax
f011ee0b:	c1 e0 04             	shl    $0x4,%eax
f011ee0e:	89 c2                	mov    %eax,%edx
f011ee10:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011ee16:	01 d0                	add    %edx,%eax
f011ee18:	48                   	dec    %eax
f011ee19:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011ee1f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011ee25:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee2a:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011ee30:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011ee36:	29 d0                	sub    %edx,%eax
f011ee38:	01 c8                	add    %ecx,%eax
f011ee3a:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011ee3f:	29 c2                	sub    %eax,%edx
f011ee41:	89 d0                	mov    %edx,%eax
f011ee43:	83 ec 0c             	sub    $0xc,%esp
f011ee46:	50                   	push   %eax
f011ee47:	e8 3f 8f fe ff       	call   f0107d8b <kmalloc>
f011ee4c:	83 c4 10             	add    $0x10,%esp
f011ee4f:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if (ptr_allocations[9] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011ee55:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011ee5b:	85 c0                	test   %eax,%eax
f011ee5d:	74 17                	je     f011ee76 <test_kmalloc_firstfit2+0xe79>
f011ee5f:	83 ec 04             	sub    $0x4,%esp
f011ee62:	68 44 be 13 f0       	push   $0xf013be44
f011ee67:	68 0d 04 00 00       	push   $0x40d
f011ee6c:	68 fa b8 13 f0       	push   $0xf013b8fa
f011ee71:	e8 8f 13 fe ff       	call   f0100205 <_panic>

		cprintf("Congratulations!! test FIRST FIT allocation (2) completed successfully.\n");
f011ee76:	83 ec 0c             	sub    $0xc,%esp
f011ee79:	68 84 bf 13 f0       	push   $0xf013bf84
f011ee7e:	e8 8b 1e fe ff       	call   f0100d0e <cprintf>
f011ee83:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011ee86:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011ee8b:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011ee8e:	5b                   	pop    %ebx
f011ee8f:	5f                   	pop    %edi
f011ee90:	5d                   	pop    %ebp
f011ee91:	c3                   	ret    

f011ee92 <test_kmalloc_worstfit>:

int test_kmalloc_worstfit()
{
f011ee92:	55                   	push   %ebp
f011ee93:	89 e5                	mov    %esp,%ebp
f011ee95:	57                   	push   %edi
f011ee96:	53                   	push   %ebx
f011ee97:	81 ec 50 04 00 00    	sub    $0x450,%esp
	cprintf("==============================================\n");
f011ee9d:	83 ec 0c             	sub    $0xc,%esp
f011eea0:	68 3c b8 13 f0       	push   $0xf013b83c
f011eea5:	e8 64 1e fe ff       	call   f0100d0e <cprintf>
f011eeaa:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011eead:	83 ec 0c             	sub    $0xc,%esp
f011eeb0:	68 6c b8 13 f0       	push   $0xf013b86c
f011eeb5:	e8 54 1e fe ff       	call   f0100d0e <cprintf>
f011eeba:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011eebd:	83 ec 0c             	sub    $0xc,%esp
f011eec0:	68 3c b8 13 f0       	push   $0xf013b83c
f011eec5:	e8 44 1e fe ff       	call   f0100d0e <cprintf>
f011eeca:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011eecd:	8d 95 b4 fb ff ff    	lea    -0x44c(%ebp),%edx
f011eed3:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011eed8:	b8 00 00 00 00       	mov    $0x0,%eax
f011eedd:	89 d7                	mov    %edx,%edi
f011eedf:	f3 ab                	rep stos %eax,%es:(%edi)

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011eee1:	e8 b1 e2 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011eee6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011eee9:	e8 da 4e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011eeee:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int count = 0;
f011eef1:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int i;
	for(i = 0; i< 79 ;i++)
f011eef8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011eeff:	eb 1f                	jmp    f011ef20 <test_kmalloc_worstfit+0x8e>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011ef01:	83 ec 0c             	sub    $0xc,%esp
f011ef04:	68 00 00 20 00       	push   $0x200000
f011ef09:	e8 7d 8e fe ff       	call   f0107d8b <kmalloc>
f011ef0e:	83 c4 10             	add    $0x10,%esp
f011ef11:	89 c2                	mov    %eax,%edx
f011ef13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011ef16:	89 94 85 b4 fb ff ff 	mov    %edx,-0x44c(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int count = 0;
	int i;
	for(i = 0; i< 79 ;i++)
f011ef1d:	ff 45 f4             	incl   -0xc(%ebp)
f011ef20:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f011ef24:	7e db                	jle    f011ef01 <test_kmalloc_worstfit+0x6f>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
f011ef26:	83 ec 0c             	sub    $0xc,%esp
f011ef29:	68 00 b0 1f 00       	push   $0x1fb000
f011ef2e:	e8 58 8e fe ff       	call   f0107d8b <kmalloc>
f011ef33:	83 c4 10             	add    $0x10,%esp
f011ef36:	89 85 f0 fc ff ff    	mov    %eax,-0x310(%ebp)

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011ef3c:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011ef42:	89 c1                	mov    %eax,%ecx
f011ef44:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011ef4b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011ef4e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ef53:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011ef56:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ef59:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef5e:	f7 75 e4             	divl   -0x1c(%ebp)
f011ef61:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ef64:	29 d0                	sub    %edx,%eax
f011ef66:	89 c3                	mov    %eax,%ebx
f011ef68:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011ef6f:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011ef74:	0f b6 d0             	movzbl %al,%edx
f011ef77:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011ef7a:	01 d0                	add    %edx,%eax
f011ef7c:	48                   	dec    %eax
f011ef7d:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011ef80:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ef83:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef88:	f7 75 dc             	divl   -0x24(%ebp)
f011ef8b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ef8e:	29 d0                	sub    %edx,%eax
f011ef90:	01 c3                	add    %eax,%ebx
f011ef92:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011ef99:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011ef9e:	0f b6 c0             	movzbl %al,%eax
f011efa1:	c1 e0 04             	shl    $0x4,%eax
f011efa4:	89 c2                	mov    %eax,%edx
f011efa6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011efa9:	01 d0                	add    %edx,%eax
f011efab:	48                   	dec    %eax
f011efac:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011efaf:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011efb2:	ba 00 00 00 00       	mov    $0x0,%edx
f011efb7:	f7 75 d4             	divl   -0x2c(%ebp)
f011efba:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011efbd:	29 d0                	sub    %edx,%eax
f011efbf:	01 d8                	add    %ebx,%eax
f011efc1:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011efc6:	39 c1                	cmp    %eax,%ecx
f011efc8:	0f 85 c0 04 00 00    	jne    f011f48e <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011efce:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011efd4:	89 c1                	mov    %eax,%ecx
f011efd6:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011efdd:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011efe0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011efe5:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011efe8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011efeb:	ba 00 00 00 00       	mov    $0x0,%edx
f011eff0:	f7 75 cc             	divl   -0x34(%ebp)
f011eff3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011eff6:	29 d0                	sub    %edx,%eax
f011eff8:	89 c3                	mov    %eax,%ebx
f011effa:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011f001:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011f006:	0f b6 d0             	movzbl %al,%edx
f011f009:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011f00c:	01 d0                	add    %edx,%eax
f011f00e:	48                   	dec    %eax
f011f00f:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011f012:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011f015:	ba 00 00 00 00       	mov    $0x0,%edx
f011f01a:	f7 75 c4             	divl   -0x3c(%ebp)
f011f01d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011f020:	29 d0                	sub    %edx,%eax
f011f022:	01 c3                	add    %eax,%ebx
f011f024:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011f02b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011f030:	0f b6 c0             	movzbl %al,%eax
f011f033:	c1 e0 04             	shl    $0x4,%eax
f011f036:	89 c2                	mov    %eax,%edx
f011f038:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011f03b:	01 d0                	add    %edx,%eax
f011f03d:	48                   	dec    %eax
f011f03e:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011f041:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011f044:	ba 00 00 00 00       	mov    $0x0,%edx
f011f049:	f7 75 bc             	divl   -0x44(%ebp)
f011f04c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011f04f:	29 d0                	sub    %edx,%eax
f011f051:	01 d8                	add    %ebx,%eax
f011f053:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011f058:	39 c1                	cmp    %eax,%ecx
f011f05a:	0f 85 2e 04 00 00    	jne    f011f48e <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011f060:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
f011f066:	89 c1                	mov    %eax,%ecx
f011f068:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011f06f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011f072:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f077:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011f07a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011f07d:	ba 00 00 00 00       	mov    $0x0,%edx
f011f082:	f7 75 b4             	divl   -0x4c(%ebp)
f011f085:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011f088:	29 d0                	sub    %edx,%eax
f011f08a:	89 c3                	mov    %eax,%ebx
f011f08c:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011f093:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011f098:	0f b6 d0             	movzbl %al,%edx
f011f09b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011f09e:	01 d0                	add    %edx,%eax
f011f0a0:	48                   	dec    %eax
f011f0a1:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011f0a4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011f0a7:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0ac:	f7 75 ac             	divl   -0x54(%ebp)
f011f0af:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011f0b2:	29 d0                	sub    %edx,%eax
f011f0b4:	01 c3                	add    %eax,%ebx
f011f0b6:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011f0bd:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011f0c2:	0f b6 c0             	movzbl %al,%eax
f011f0c5:	c1 e0 04             	shl    $0x4,%eax
f011f0c8:	89 c2                	mov    %eax,%edx
f011f0ca:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011f0cd:	01 d0                	add    %edx,%eax
f011f0cf:	48                   	dec    %eax
f011f0d0:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011f0d3:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f0d6:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0db:	f7 75 a4             	divl   -0x5c(%ebp)
f011f0de:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f0e1:	29 d0                	sub    %edx,%eax
f011f0e3:	01 d8                	add    %ebx,%eax
f011f0e5:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011f0ea:	39 c1                	cmp    %eax,%ecx
f011f0ec:	0f 85 9c 03 00 00    	jne    f011f48e <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011f0f2:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011f0f8:	89 c1                	mov    %eax,%ecx
f011f0fa:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011f101:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011f104:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f109:	89 45 98             	mov    %eax,-0x68(%ebp)
f011f10c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011f10f:	ba 00 00 00 00       	mov    $0x0,%edx
f011f114:	f7 75 9c             	divl   -0x64(%ebp)
f011f117:	8b 45 98             	mov    -0x68(%ebp),%eax
f011f11a:	29 d0                	sub    %edx,%eax
f011f11c:	89 c3                	mov    %eax,%ebx
f011f11e:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011f125:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011f12a:	0f b6 d0             	movzbl %al,%edx
f011f12d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011f130:	01 d0                	add    %edx,%eax
f011f132:	48                   	dec    %eax
f011f133:	89 45 90             	mov    %eax,-0x70(%ebp)
f011f136:	8b 45 90             	mov    -0x70(%ebp),%eax
f011f139:	ba 00 00 00 00       	mov    $0x0,%edx
f011f13e:	f7 75 94             	divl   -0x6c(%ebp)
f011f141:	8b 45 90             	mov    -0x70(%ebp),%eax
f011f144:	29 d0                	sub    %edx,%eax
f011f146:	01 c3                	add    %eax,%ebx
f011f148:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011f14f:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011f154:	0f b6 c0             	movzbl %al,%eax
f011f157:	c1 e0 04             	shl    $0x4,%eax
f011f15a:	89 c2                	mov    %eax,%edx
f011f15c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011f15f:	01 d0                	add    %edx,%eax
f011f161:	48                   	dec    %eax
f011f162:	89 45 88             	mov    %eax,-0x78(%ebp)
f011f165:	8b 45 88             	mov    -0x78(%ebp),%eax
f011f168:	ba 00 00 00 00       	mov    $0x0,%edx
f011f16d:	f7 75 8c             	divl   -0x74(%ebp)
f011f170:	8b 45 88             	mov    -0x78(%ebp),%eax
f011f173:	29 d0                	sub    %edx,%eax
f011f175:	01 d8                	add    %ebx,%eax
f011f177:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011f17c:	39 c1                	cmp    %eax,%ecx
f011f17e:	0f 85 0a 03 00 00    	jne    f011f48e <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011f184:	8b 85 f0 fb ff ff    	mov    -0x410(%ebp),%eax
f011f18a:	89 c1                	mov    %eax,%ecx
f011f18c:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011f193:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011f196:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f19b:	89 45 80             	mov    %eax,-0x80(%ebp)
f011f19e:	8b 45 80             	mov    -0x80(%ebp),%eax
f011f1a1:	ba 00 00 00 00       	mov    $0x0,%edx
f011f1a6:	f7 75 84             	divl   -0x7c(%ebp)
f011f1a9:	8b 45 80             	mov    -0x80(%ebp),%eax
f011f1ac:	29 d0                	sub    %edx,%eax
f011f1ae:	89 c3                	mov    %eax,%ebx
f011f1b0:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011f1b7:	10 00 00 
f011f1ba:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011f1bf:	0f b6 d0             	movzbl %al,%edx
f011f1c2:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011f1c8:	01 d0                	add    %edx,%eax
f011f1ca:	48                   	dec    %eax
f011f1cb:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011f1d1:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011f1d7:	ba 00 00 00 00       	mov    $0x0,%edx
f011f1dc:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011f1e2:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011f1e8:	29 d0                	sub    %edx,%eax
f011f1ea:	01 c3                	add    %eax,%ebx
f011f1ec:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011f1f3:	10 00 00 
f011f1f6:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011f1fb:	0f b6 c0             	movzbl %al,%eax
f011f1fe:	c1 e0 04             	shl    $0x4,%eax
f011f201:	89 c2                	mov    %eax,%edx
f011f203:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011f209:	01 d0                	add    %edx,%eax
f011f20b:	48                   	dec    %eax
f011f20c:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011f212:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011f218:	ba 00 00 00 00       	mov    $0x0,%edx
f011f21d:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011f223:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011f229:	29 d0                	sub    %edx,%eax
f011f22b:	01 d8                	add    %ebx,%eax
f011f22d:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011f232:	39 c1                	cmp    %eax,%ecx
f011f234:	0f 85 54 02 00 00    	jne    f011f48e <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011f23a:	8b 85 04 fc ff ff    	mov    -0x3fc(%ebp),%eax
f011f240:	89 c1                	mov    %eax,%ecx
f011f242:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011f249:	10 00 00 
f011f24c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011f252:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f257:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011f25d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011f263:	ba 00 00 00 00       	mov    $0x0,%edx
f011f268:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011f26e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011f274:	29 d0                	sub    %edx,%eax
f011f276:	89 c3                	mov    %eax,%ebx
f011f278:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011f27f:	10 00 00 
f011f282:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011f287:	0f b6 d0             	movzbl %al,%edx
f011f28a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f290:	01 d0                	add    %edx,%eax
f011f292:	48                   	dec    %eax
f011f293:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011f299:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011f29f:	ba 00 00 00 00       	mov    $0x0,%edx
f011f2a4:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011f2aa:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011f2b0:	29 d0                	sub    %edx,%eax
f011f2b2:	01 c3                	add    %eax,%ebx
f011f2b4:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011f2bb:	10 00 00 
f011f2be:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011f2c3:	0f b6 c0             	movzbl %al,%eax
f011f2c6:	c1 e0 04             	shl    $0x4,%eax
f011f2c9:	89 c2                	mov    %eax,%edx
f011f2cb:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011f2d1:	01 d0                	add    %edx,%eax
f011f2d3:	48                   	dec    %eax
f011f2d4:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011f2da:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011f2e0:	ba 00 00 00 00       	mov    $0x0,%edx
f011f2e5:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011f2eb:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011f2f1:	29 d0                	sub    %edx,%eax
f011f2f3:	01 d8                	add    %ebx,%eax
f011f2f5:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011f2fa:	39 c1                	cmp    %eax,%ecx
f011f2fc:	0f 85 8c 01 00 00    	jne    f011f48e <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011f302:	8b 85 7c fc ff ff    	mov    -0x384(%ebp),%eax
f011f308:	89 c1                	mov    %eax,%ecx
f011f30a:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011f311:	10 00 00 
f011f314:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011f31a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f31f:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011f325:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011f32b:	ba 00 00 00 00       	mov    $0x0,%edx
f011f330:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011f336:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011f33c:	29 d0                	sub    %edx,%eax
f011f33e:	89 c3                	mov    %eax,%ebx
f011f340:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011f347:	10 00 00 
f011f34a:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011f34f:	0f b6 d0             	movzbl %al,%edx
f011f352:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011f358:	01 d0                	add    %edx,%eax
f011f35a:	48                   	dec    %eax
f011f35b:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011f361:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011f367:	ba 00 00 00 00       	mov    $0x0,%edx
f011f36c:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011f372:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011f378:	29 d0                	sub    %edx,%eax
f011f37a:	01 c3                	add    %eax,%ebx
f011f37c:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011f383:	10 00 00 
f011f386:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011f38b:	0f b6 c0             	movzbl %al,%eax
f011f38e:	c1 e0 04             	shl    $0x4,%eax
f011f391:	89 c2                	mov    %eax,%edx
f011f393:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011f399:	01 d0                	add    %edx,%eax
f011f39b:	48                   	dec    %eax
f011f39c:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011f3a2:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011f3a8:	ba 00 00 00 00       	mov    $0x0,%edx
f011f3ad:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011f3b3:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011f3b9:	29 d0                	sub    %edx,%eax
f011f3bb:	01 d8                	add    %ebx,%eax
f011f3bd:	2d 00 c0 bf 03       	sub    $0x3bfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011f3c2:	39 c1                	cmp    %eax,%ecx
f011f3c4:	0f 85 c4 00 00 00    	jne    f011f48e <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
f011f3ca:	8b 85 f0 fc ff ff    	mov    -0x310(%ebp),%eax
f011f3d0:	89 c1                	mov    %eax,%ecx
f011f3d2:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011f3d9:	10 00 00 
f011f3dc:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011f3e2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f3e7:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011f3ed:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011f3f3:	ba 00 00 00 00       	mov    $0x0,%edx
f011f3f8:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011f3fe:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011f404:	29 d0                	sub    %edx,%eax
f011f406:	89 c3                	mov    %eax,%ebx
f011f408:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011f40f:	10 00 00 
f011f412:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011f417:	0f b6 d0             	movzbl %al,%edx
f011f41a:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011f420:	01 d0                	add    %edx,%eax
f011f422:	48                   	dec    %eax
f011f423:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011f429:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011f42f:	ba 00 00 00 00       	mov    $0x0,%edx
f011f434:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011f43a:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011f440:	29 d0                	sub    %edx,%eax
f011f442:	01 c3                	add    %eax,%ebx
f011f444:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011f44b:	10 00 00 
f011f44e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011f453:	0f b6 c0             	movzbl %al,%eax
f011f456:	c1 e0 04             	shl    $0x4,%eax
f011f459:	89 c2                	mov    %eax,%edx
f011f45b:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011f461:	01 d0                	add    %edx,%eax
f011f463:	48                   	dec    %eax
f011f464:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011f46a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011f470:	ba 00 00 00 00       	mov    $0x0,%edx
f011f475:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011f47b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011f481:	29 d0                	sub    %edx,%eax
f011f483:	01 d8                	add    %ebx,%eax
f011f485:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011f48a:	39 c1                	cmp    %eax,%ecx
f011f48c:	74 17                	je     f011f4a5 <test_kmalloc_worstfit+0x613>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
		panic("Wrong allocation, Check worst fitting strategy is working correctly");
f011f48e:	83 ec 04             	sub    $0x4,%esp
f011f491:	68 d0 bf 13 f0       	push   $0xf013bfd0
f011f496:	68 31 04 00 00       	push   $0x431
f011f49b:	68 fa b8 13 f0       	push   $0xf013b8fa
f011f4a0:	e8 60 0d fe ff       	call   f0100205 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f4a5:	e8 1e 49 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f4aa:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f4ad:	74 17                	je     f011f4c6 <test_kmalloc_worstfit+0x634>
f011f4af:	83 ec 04             	sub    $0x4,%esp
f011f4b2:	68 14 b9 13 f0       	push   $0xf013b914
f011f4b7:	68 33 04 00 00       	push   $0x433
f011f4bc:	68 fa b8 13 f0       	push   $0xf013b8fa
f011f4c1:	e8 3f 0d fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE)/(PAGE_SIZE) ) panic("Wrong allocation");
f011f4c6:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f4c9:	e8 c9 dc fe ff       	call   f010d197 <sys_calculate_free_frames>
f011f4ce:	29 c3                	sub    %eax,%ebx
f011f4d0:	89 d8                	mov    %ebx,%eax
f011f4d2:	3d fb 9f 00 00       	cmp    $0x9ffb,%eax
f011f4d7:	74 17                	je     f011f4f0 <test_kmalloc_worstfit+0x65e>
f011f4d9:	83 ec 04             	sub    $0x4,%esp
f011f4dc:	68 b7 bb 13 f0       	push   $0xf013bbb7
f011f4e1:	68 34 04 00 00       	push   $0x434
f011f4e6:	68 fa b8 13 f0       	push   $0xf013b8fa
f011f4eb:	e8 15 0d fe ff       	call   f0100205 <_panic>

	//make memory holes
	freeFrames = sys_calculate_free_frames() ;
f011f4f0:	e8 a2 dc fe ff       	call   f010d197 <sys_calculate_free_frames>
f011f4f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames() ;
f011f4f8:	e8 cb 48 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f4fd:	89 45 ec             	mov    %eax,-0x14(%ebp)

	kfree(ptr_allocations[0]);		//Hole 1 = 2 M
f011f500:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011f506:	83 ec 0c             	sub    $0xc,%esp
f011f509:	50                   	push   %eax
f011f50a:	e8 47 89 fe ff       	call   f0107e56 <kfree>
f011f50f:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		//Hole 2 = 4 M
f011f512:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011f518:	83 ec 0c             	sub    $0xc,%esp
f011f51b:	50                   	push   %eax
f011f51c:	e8 35 89 fe ff       	call   f0107e56 <kfree>
f011f521:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011f524:	8b 85 c0 fb ff ff    	mov    -0x440(%ebp),%eax
f011f52a:	83 ec 0c             	sub    $0xc,%esp
f011f52d:	50                   	push   %eax
f011f52e:	e8 23 89 fe ff       	call   f0107e56 <kfree>
f011f533:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		//Hole 3 = 6 M
f011f536:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011f53c:	83 ec 0c             	sub    $0xc,%esp
f011f53f:	50                   	push   %eax
f011f540:	e8 11 89 fe ff       	call   f0107e56 <kfree>
f011f545:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011f548:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
f011f54e:	83 ec 0c             	sub    $0xc,%esp
f011f551:	50                   	push   %eax
f011f552:	e8 ff 88 fe ff       	call   f0107e56 <kfree>
f011f557:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011f55a:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
f011f560:	83 ec 0c             	sub    $0xc,%esp
f011f563:	50                   	push   %eax
f011f564:	e8 ed 88 fe ff       	call   f0107e56 <kfree>
f011f569:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[30]);		//Hole 4 = 10 M
f011f56c:	8b 85 2c fc ff ff    	mov    -0x3d4(%ebp),%eax
f011f572:	83 ec 0c             	sub    $0xc,%esp
f011f575:	50                   	push   %eax
f011f576:	e8 db 88 fe ff       	call   f0107e56 <kfree>
f011f57b:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[31]);
f011f57e:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f011f584:	83 ec 0c             	sub    $0xc,%esp
f011f587:	50                   	push   %eax
f011f588:	e8 c9 88 fe ff       	call   f0107e56 <kfree>
f011f58d:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[32]);
f011f590:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f011f596:	83 ec 0c             	sub    $0xc,%esp
f011f599:	50                   	push   %eax
f011f59a:	e8 b7 88 fe ff       	call   f0107e56 <kfree>
f011f59f:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[33]);
f011f5a2:	8b 85 38 fc ff ff    	mov    -0x3c8(%ebp),%eax
f011f5a8:	83 ec 0c             	sub    $0xc,%esp
f011f5ab:	50                   	push   %eax
f011f5ac:	e8 a5 88 fe ff       	call   f0107e56 <kfree>
f011f5b1:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[34]);
f011f5b4:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f011f5ba:	83 ec 0c             	sub    $0xc,%esp
f011f5bd:	50                   	push   %eax
f011f5be:	e8 93 88 fe ff       	call   f0107e56 <kfree>
f011f5c3:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[70]); 	//Hole 5 = 8 M
f011f5c6:	8b 85 cc fc ff ff    	mov    -0x334(%ebp),%eax
f011f5cc:	83 ec 0c             	sub    $0xc,%esp
f011f5cf:	50                   	push   %eax
f011f5d0:	e8 81 88 fe ff       	call   f0107e56 <kfree>
f011f5d5:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[71]);
f011f5d8:	8b 85 d0 fc ff ff    	mov    -0x330(%ebp),%eax
f011f5de:	83 ec 0c             	sub    $0xc,%esp
f011f5e1:	50                   	push   %eax
f011f5e2:	e8 6f 88 fe ff       	call   f0107e56 <kfree>
f011f5e7:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[72]);
f011f5ea:	8b 85 d4 fc ff ff    	mov    -0x32c(%ebp),%eax
f011f5f0:	83 ec 0c             	sub    $0xc,%esp
f011f5f3:	50                   	push   %eax
f011f5f4:	e8 5d 88 fe ff       	call   f0107e56 <kfree>
f011f5f9:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[73]);
f011f5fc:	8b 85 d8 fc ff ff    	mov    -0x328(%ebp),%eax
f011f602:	83 ec 0c             	sub    $0xc,%esp
f011f605:	50                   	push   %eax
f011f606:	e8 4b 88 fe ff       	call   f0107e56 <kfree>
f011f60b:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f60e:	e8 b5 47 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f613:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f616:	74 17                	je     f011f62f <test_kmalloc_worstfit+0x79d>
f011f618:	83 ec 04             	sub    $0x4,%esp
f011f61b:	68 14 b9 13 f0       	push   $0xf013b914
f011f620:	68 4a 04 00 00       	push   $0x44a
f011f625:	68 fa b8 13 f0       	push   $0xf013b8fa
f011f62a:	e8 d6 0b fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((15*2*Mega))/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011f62f:	e8 63 db fe ff       	call   f010d197 <sys_calculate_free_frames>
f011f634:	89 c2                	mov    %eax,%edx
f011f636:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011f639:	29 c2                	sub    %eax,%edx
f011f63b:	89 d0                	mov    %edx,%eax
f011f63d:	3d 00 1e 00 00       	cmp    $0x1e00,%eax
f011f642:	74 17                	je     f011f65b <test_kmalloc_worstfit+0x7c9>
f011f644:	83 ec 04             	sub    $0x4,%esp
f011f647:	68 c8 bb 13 f0       	push   $0xf013bbc8
f011f64c:	68 4b 04 00 00       	push   $0x44b
f011f651:	68 fa b8 13 f0       	push   $0xf013b8fa
f011f656:	e8 aa 0b fe ff       	call   f0100205 <_panic>

	// Test worst fit
	freeFrames = sys_calculate_free_frames() ;
f011f65b:	e8 37 db fe ff       	call   f010d197 <sys_calculate_free_frames>
f011f660:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f663:	e8 60 47 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f668:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* tempAddress = kmalloc(Mega);		//Use Hole 4 -> Hole 4 = 9 M
f011f66b:	83 ec 0c             	sub    $0xc,%esp
f011f66e:	68 00 00 10 00       	push   $0x100000
f011f673:	e8 13 87 fe ff       	call   f0107d8b <kmalloc>
f011f678:	83 c4 10             	add    $0x10,%esp
f011f67b:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03C00000)
f011f681:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011f688:	10 00 00 
f011f68b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011f691:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f696:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011f69c:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011f6a2:	ba 00 00 00 00       	mov    $0x0,%edx
f011f6a7:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011f6ad:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011f6b3:	29 d0                	sub    %edx,%eax
f011f6b5:	89 c1                	mov    %eax,%ecx
f011f6b7:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011f6be:	10 00 00 
f011f6c1:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011f6c6:	0f b6 d0             	movzbl %al,%edx
f011f6c9:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011f6cf:	01 d0                	add    %edx,%eax
f011f6d1:	48                   	dec    %eax
f011f6d2:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011f6d8:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f6de:	ba 00 00 00 00       	mov    $0x0,%edx
f011f6e3:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011f6e9:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f6ef:	29 d0                	sub    %edx,%eax
f011f6f1:	01 c1                	add    %eax,%ecx
f011f6f3:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011f6fa:	10 00 00 
f011f6fd:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011f702:	0f b6 c0             	movzbl %al,%eax
f011f705:	c1 e0 04             	shl    $0x4,%eax
f011f708:	89 c2                	mov    %eax,%edx
f011f70a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011f710:	01 d0                	add    %edx,%eax
f011f712:	48                   	dec    %eax
f011f713:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011f719:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f71f:	ba 00 00 00 00       	mov    $0x0,%edx
f011f724:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011f72a:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f730:	29 d0                	sub    %edx,%eax
f011f732:	01 c8                	add    %ecx,%eax
f011f734:	8d 90 00 40 c0 f9    	lea    -0x63fc000(%eax),%edx
f011f73a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f740:	39 c2                	cmp    %eax,%edx
f011f742:	74 17                	je     f011f75b <test_kmalloc_worstfit+0x8c9>
		panic("Worst Fit not working correctly");
f011f744:	83 ec 04             	sub    $0x4,%esp
f011f747:	68 14 c0 13 f0       	push   $0xf013c014
f011f74c:	68 52 04 00 00       	push   $0x452
f011f751:	68 fa b8 13 f0       	push   $0xf013b8fa
f011f756:	e8 aa 0a fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f75b:	e8 68 46 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f760:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f763:	74 17                	je     f011f77c <test_kmalloc_worstfit+0x8ea>
f011f765:	83 ec 04             	sub    $0x4,%esp
f011f768:	68 14 b9 13 f0       	push   $0xf013b914
f011f76d:	68 53 04 00 00       	push   $0x453
f011f772:	68 fa b8 13 f0       	push   $0xf013b8fa
f011f777:	e8 89 0a fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  1*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f77c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f77f:	e8 13 da fe ff       	call   f010d197 <sys_calculate_free_frames>
f011f784:	29 c3                	sub    %eax,%ebx
f011f786:	89 d8                	mov    %ebx,%eax
f011f788:	3d 00 01 00 00       	cmp    $0x100,%eax
f011f78d:	74 17                	je     f011f7a6 <test_kmalloc_worstfit+0x914>
f011f78f:	83 ec 04             	sub    $0x4,%esp
f011f792:	68 32 be 13 f0       	push   $0xf013be32
f011f797:	68 54 04 00 00       	push   $0x454
f011f79c:	68 fa b8 13 f0       	push   $0xf013b8fa
f011f7a1:	e8 5f 0a fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f7a6:	ff 45 e8             	incl   -0x18(%ebp)
f011f7a9:	83 ec 08             	sub    $0x8,%esp
f011f7ac:	ff 75 e8             	pushl  -0x18(%ebp)
f011f7af:	68 34 c0 13 f0       	push   $0xf013c034
f011f7b4:	e8 55 15 fe ff       	call   f0100d0e <cprintf>
f011f7b9:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f7bc:	e8 d6 d9 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011f7c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f7c4:	e8 ff 45 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f7c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4 * Mega);			//Use Hole 4 -> Hole 4 = 5 M
f011f7cc:	83 ec 0c             	sub    $0xc,%esp
f011f7cf:	68 00 00 40 00       	push   $0x400000
f011f7d4:	e8 b2 85 fe ff       	call   f0107d8b <kmalloc>
f011f7d9:	83 c4 10             	add    $0x10,%esp
f011f7dc:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03D00000)
f011f7e2:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011f7e9:	10 00 00 
f011f7ec:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011f7f2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f7f7:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011f7fd:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f803:	ba 00 00 00 00       	mov    $0x0,%edx
f011f808:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011f80e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f814:	29 d0                	sub    %edx,%eax
f011f816:	89 c1                	mov    %eax,%ecx
f011f818:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011f81f:	10 00 00 
f011f822:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011f827:	0f b6 d0             	movzbl %al,%edx
f011f82a:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011f830:	01 d0                	add    %edx,%eax
f011f832:	48                   	dec    %eax
f011f833:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011f839:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f83f:	ba 00 00 00 00       	mov    $0x0,%edx
f011f844:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011f84a:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f850:	29 d0                	sub    %edx,%eax
f011f852:	01 c1                	add    %eax,%ecx
f011f854:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f011f85b:	10 00 00 
f011f85e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011f863:	0f b6 c0             	movzbl %al,%eax
f011f866:	c1 e0 04             	shl    $0x4,%eax
f011f869:	89 c2                	mov    %eax,%edx
f011f86b:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011f871:	01 d0                	add    %edx,%eax
f011f873:	48                   	dec    %eax
f011f874:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011f87a:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f880:	ba 00 00 00 00       	mov    $0x0,%edx
f011f885:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011f88b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f891:	29 d0                	sub    %edx,%eax
f011f893:	01 c8                	add    %ecx,%eax
f011f895:	8d 90 00 40 d0 f9    	lea    -0x62fc000(%eax),%edx
f011f89b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f8a1:	39 c2                	cmp    %eax,%edx
f011f8a3:	74 17                	je     f011f8bc <test_kmalloc_worstfit+0xa2a>
		panic("Worst Fit not working correctly");
f011f8a5:	83 ec 04             	sub    $0x4,%esp
f011f8a8:	68 14 c0 13 f0       	push   $0xf013c014
f011f8ad:	68 5b 04 00 00       	push   $0x45b
f011f8b2:	68 fa b8 13 f0       	push   $0xf013b8fa
f011f8b7:	e8 49 09 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f8bc:	e8 07 45 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f8c1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f8c4:	74 17                	je     f011f8dd <test_kmalloc_worstfit+0xa4b>
f011f8c6:	83 ec 04             	sub    $0x4,%esp
f011f8c9:	68 14 b9 13 f0       	push   $0xf013b914
f011f8ce:	68 5c 04 00 00       	push   $0x45c
f011f8d3:	68 fa b8 13 f0       	push   $0xf013b8fa
f011f8d8:	e8 28 09 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f8dd:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f8e0:	e8 b2 d8 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011f8e5:	29 c3                	sub    %eax,%ebx
f011f8e7:	89 d8                	mov    %ebx,%eax
f011f8e9:	3d 00 04 00 00       	cmp    $0x400,%eax
f011f8ee:	74 17                	je     f011f907 <test_kmalloc_worstfit+0xa75>
f011f8f0:	83 ec 04             	sub    $0x4,%esp
f011f8f3:	68 32 be 13 f0       	push   $0xf013be32
f011f8f8:	68 5d 04 00 00       	push   $0x45d
f011f8fd:	68 fa b8 13 f0       	push   $0xf013b8fa
f011f902:	e8 fe 08 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f907:	ff 45 e8             	incl   -0x18(%ebp)
f011f90a:	83 ec 08             	sub    $0x8,%esp
f011f90d:	ff 75 e8             	pushl  -0x18(%ebp)
f011f910:	68 34 c0 13 f0       	push   $0xf013c034
f011f915:	e8 f4 13 fe ff       	call   f0100d0e <cprintf>
f011f91a:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f91d:	e8 75 d8 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011f922:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f925:	e8 9e 44 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f92a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(6*Mega); 			   //Use Hole 5 -> Hole 5 = 2 M
f011f92d:	83 ec 0c             	sub    $0xc,%esp
f011f930:	68 00 00 60 00       	push   $0x600000
f011f935:	e8 51 84 fe ff       	call   f0107d8b <kmalloc>
f011f93a:	83 c4 10             	add    $0x10,%esp
f011f93d:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x08C00000)
f011f943:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f011f94a:	10 00 00 
f011f94d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011f953:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f958:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011f95e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011f964:	ba 00 00 00 00       	mov    $0x0,%edx
f011f969:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011f96f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011f975:	29 d0                	sub    %edx,%eax
f011f977:	89 c1                	mov    %eax,%ecx
f011f979:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011f980:	10 00 00 
f011f983:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011f988:	0f b6 d0             	movzbl %al,%edx
f011f98b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011f991:	01 d0                	add    %edx,%eax
f011f993:	48                   	dec    %eax
f011f994:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011f99a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011f9a0:	ba 00 00 00 00       	mov    $0x0,%edx
f011f9a5:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011f9ab:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011f9b1:	29 d0                	sub    %edx,%eax
f011f9b3:	01 c1                	add    %eax,%ecx
f011f9b5:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f011f9bc:	10 00 00 
f011f9bf:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011f9c4:	0f b6 c0             	movzbl %al,%eax
f011f9c7:	c1 e0 04             	shl    $0x4,%eax
f011f9ca:	89 c2                	mov    %eax,%edx
f011f9cc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011f9d2:	01 d0                	add    %edx,%eax
f011f9d4:	48                   	dec    %eax
f011f9d5:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011f9db:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011f9e1:	ba 00 00 00 00       	mov    $0x0,%edx
f011f9e6:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011f9ec:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011f9f2:	29 d0                	sub    %edx,%eax
f011f9f4:	01 c8                	add    %ecx,%eax
f011f9f6:	8d 90 00 40 c0 fe    	lea    -0x13fc000(%eax),%edx
f011f9fc:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fa02:	39 c2                	cmp    %eax,%edx
f011fa04:	74 17                	je     f011fa1d <test_kmalloc_worstfit+0xb8b>
		panic("Worst Fit not working correctly");
f011fa06:	83 ec 04             	sub    $0x4,%esp
f011fa09:	68 14 c0 13 f0       	push   $0xf013c014
f011fa0e:	68 64 04 00 00       	push   $0x464
f011fa13:	68 fa b8 13 f0       	push   $0xf013b8fa
f011fa18:	e8 e8 07 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fa1d:	e8 a6 43 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fa22:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fa25:	74 17                	je     f011fa3e <test_kmalloc_worstfit+0xbac>
f011fa27:	83 ec 04             	sub    $0x4,%esp
f011fa2a:	68 14 b9 13 f0       	push   $0xf013b914
f011fa2f:	68 65 04 00 00       	push   $0x465
f011fa34:	68 fa b8 13 f0       	push   $0xf013b8fa
f011fa39:	e8 c7 07 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  6*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011fa3e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fa41:	e8 51 d7 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011fa46:	29 c3                	sub    %eax,%ebx
f011fa48:	89 d8                	mov    %ebx,%eax
f011fa4a:	3d 00 06 00 00       	cmp    $0x600,%eax
f011fa4f:	74 17                	je     f011fa68 <test_kmalloc_worstfit+0xbd6>
f011fa51:	83 ec 04             	sub    $0x4,%esp
f011fa54:	68 32 be 13 f0       	push   $0xf013be32
f011fa59:	68 66 04 00 00       	push   $0x466
f011fa5e:	68 fa b8 13 f0       	push   $0xf013b8fa
f011fa63:	e8 9d 07 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fa68:	ff 45 e8             	incl   -0x18(%ebp)
f011fa6b:	83 ec 08             	sub    $0x8,%esp
f011fa6e:	ff 75 e8             	pushl  -0x18(%ebp)
f011fa71:	68 34 c0 13 f0       	push   $0xf013c034
f011fa76:	e8 93 12 fe ff       	call   f0100d0e <cprintf>
f011fa7b:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fa7e:	e8 14 d7 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011fa83:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fa86:	e8 3d 43 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fa8b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(5*Mega); 			   //Use Hole 3 -> Hole 3 = 1 M
f011fa8e:	83 ec 0c             	sub    $0xc,%esp
f011fa91:	68 00 00 50 00       	push   $0x500000
f011fa96:	e8 f0 82 fe ff       	call   f0107d8b <kmalloc>
f011fa9b:	83 c4 10             	add    $0x10,%esp
f011fa9e:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f011faa4:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f011faab:	10 00 00 
f011faae:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011fab4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fab9:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f011fabf:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011fac5:	ba 00 00 00 00       	mov    $0x0,%edx
f011faca:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f011fad0:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011fad6:	29 d0                	sub    %edx,%eax
f011fad8:	89 c1                	mov    %eax,%ecx
f011fada:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f011fae1:	10 00 00 
f011fae4:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011fae9:	0f b6 d0             	movzbl %al,%edx
f011faec:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011faf2:	01 d0                	add    %edx,%eax
f011faf4:	48                   	dec    %eax
f011faf5:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f011fafb:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011fb01:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb06:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f011fb0c:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011fb12:	29 d0                	sub    %edx,%eax
f011fb14:	01 c1                	add    %eax,%ecx
f011fb16:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f011fb1d:	10 00 00 
f011fb20:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011fb25:	0f b6 c0             	movzbl %al,%eax
f011fb28:	c1 e0 04             	shl    $0x4,%eax
f011fb2b:	89 c2                	mov    %eax,%edx
f011fb2d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011fb33:	01 d0                	add    %edx,%eax
f011fb35:	48                   	dec    %eax
f011fb36:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f011fb3c:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011fb42:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb47:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f011fb4d:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011fb53:	29 d0                	sub    %edx,%eax
f011fb55:	01 c8                	add    %ecx,%eax
f011fb57:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f011fb5d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fb63:	39 c2                	cmp    %eax,%edx
f011fb65:	74 17                	je     f011fb7e <test_kmalloc_worstfit+0xcec>
		panic("Worst Fit not working correctly");
f011fb67:	83 ec 04             	sub    $0x4,%esp
f011fb6a:	68 14 c0 13 f0       	push   $0xf013c014
f011fb6f:	68 6d 04 00 00       	push   $0x46d
f011fb74:	68 fa b8 13 f0       	push   $0xf013b8fa
f011fb79:	e8 87 06 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fb7e:	e8 45 42 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fb83:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fb86:	74 17                	je     f011fb9f <test_kmalloc_worstfit+0xd0d>
f011fb88:	83 ec 04             	sub    $0x4,%esp
f011fb8b:	68 14 b9 13 f0       	push   $0xf013b914
f011fb90:	68 6e 04 00 00       	push   $0x46e
f011fb95:	68 fa b8 13 f0       	push   $0xf013b8fa
f011fb9a:	e8 66 06 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  5*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011fb9f:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fba2:	e8 f0 d5 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011fba7:	29 c3                	sub    %eax,%ebx
f011fba9:	89 d8                	mov    %ebx,%eax
f011fbab:	3d 00 05 00 00       	cmp    $0x500,%eax
f011fbb0:	74 17                	je     f011fbc9 <test_kmalloc_worstfit+0xd37>
f011fbb2:	83 ec 04             	sub    $0x4,%esp
f011fbb5:	68 32 be 13 f0       	push   $0xf013be32
f011fbba:	68 6f 04 00 00       	push   $0x46f
f011fbbf:	68 fa b8 13 f0       	push   $0xf013b8fa
f011fbc4:	e8 3c 06 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fbc9:	ff 45 e8             	incl   -0x18(%ebp)
f011fbcc:	83 ec 08             	sub    $0x8,%esp
f011fbcf:	ff 75 e8             	pushl  -0x18(%ebp)
f011fbd2:	68 34 c0 13 f0       	push   $0xf013c034
f011fbd7:	e8 32 11 fe ff       	call   f0100d0e <cprintf>
f011fbdc:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fbdf:	e8 b3 d5 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011fbe4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fbe7:	e8 dc 41 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fbec:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011fbef:	83 ec 0c             	sub    $0xc,%esp
f011fbf2:	68 00 00 40 00       	push   $0x400000
f011fbf7:	e8 8f 81 fe ff       	call   f0107d8b <kmalloc>
f011fbfc:	83 c4 10             	add    $0x10,%esp
f011fbff:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x04100000)
f011fc05:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f011fc0c:	10 00 00 
f011fc0f:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011fc15:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fc1a:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f011fc20:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011fc26:	ba 00 00 00 00       	mov    $0x0,%edx
f011fc2b:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f011fc31:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011fc37:	29 d0                	sub    %edx,%eax
f011fc39:	89 c1                	mov    %eax,%ecx
f011fc3b:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f011fc42:	10 00 00 
f011fc45:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011fc4a:	0f b6 d0             	movzbl %al,%edx
f011fc4d:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011fc53:	01 d0                	add    %edx,%eax
f011fc55:	48                   	dec    %eax
f011fc56:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f011fc5c:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011fc62:	ba 00 00 00 00       	mov    $0x0,%edx
f011fc67:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f011fc6d:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011fc73:	29 d0                	sub    %edx,%eax
f011fc75:	01 c1                	add    %eax,%ecx
f011fc77:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f011fc7e:	10 00 00 
f011fc81:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011fc86:	0f b6 c0             	movzbl %al,%eax
f011fc89:	c1 e0 04             	shl    $0x4,%eax
f011fc8c:	89 c2                	mov    %eax,%edx
f011fc8e:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011fc94:	01 d0                	add    %edx,%eax
f011fc96:	48                   	dec    %eax
f011fc97:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f011fc9d:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011fca3:	ba 00 00 00 00       	mov    $0x0,%edx
f011fca8:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f011fcae:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011fcb4:	29 d0                	sub    %edx,%eax
f011fcb6:	01 c8                	add    %ecx,%eax
f011fcb8:	8d 90 00 40 10 fa    	lea    -0x5efc000(%eax),%edx
f011fcbe:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fcc4:	39 c2                	cmp    %eax,%edx
f011fcc6:	74 17                	je     f011fcdf <test_kmalloc_worstfit+0xe4d>
		panic("Worst Fit not working correctly");
f011fcc8:	83 ec 04             	sub    $0x4,%esp
f011fccb:	68 14 c0 13 f0       	push   $0xf013c014
f011fcd0:	68 76 04 00 00       	push   $0x476
f011fcd5:	68 fa b8 13 f0       	push   $0xf013b8fa
f011fcda:	e8 26 05 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fcdf:	e8 e4 40 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fce4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fce7:	74 17                	je     f011fd00 <test_kmalloc_worstfit+0xe6e>
f011fce9:	83 ec 04             	sub    $0x4,%esp
f011fcec:	68 14 b9 13 f0       	push   $0xf013b914
f011fcf1:	68 77 04 00 00       	push   $0x477
f011fcf6:	68 fa b8 13 f0       	push   $0xf013b8fa
f011fcfb:	e8 05 05 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011fd00:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fd03:	e8 8f d4 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011fd08:	29 c3                	sub    %eax,%ebx
f011fd0a:	89 d8                	mov    %ebx,%eax
f011fd0c:	3d 00 04 00 00       	cmp    $0x400,%eax
f011fd11:	74 17                	je     f011fd2a <test_kmalloc_worstfit+0xe98>
f011fd13:	83 ec 04             	sub    $0x4,%esp
f011fd16:	68 32 be 13 f0       	push   $0xf013be32
f011fd1b:	68 78 04 00 00       	push   $0x478
f011fd20:	68 fa b8 13 f0       	push   $0xf013b8fa
f011fd25:	e8 db 04 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fd2a:	ff 45 e8             	incl   -0x18(%ebp)
f011fd2d:	83 ec 08             	sub    $0x8,%esp
f011fd30:	ff 75 e8             	pushl  -0x18(%ebp)
f011fd33:	68 34 c0 13 f0       	push   $0xf013c034
f011fd38:	e8 d1 0f fe ff       	call   f0100d0e <cprintf>
f011fd3d:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fd40:	e8 52 d4 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011fd45:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fd48:	e8 7b 40 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fd4d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2 * Mega); 			// Use Hole 2 -> Hole 2 = 2 M
f011fd50:	83 ec 0c             	sub    $0xc,%esp
f011fd53:	68 00 00 20 00       	push   $0x200000
f011fd58:	e8 2e 80 fe ff       	call   f0107d8b <kmalloc>
f011fd5d:	83 c4 10             	add    $0x10,%esp
f011fd60:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011fd66:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f011fd6d:	10 00 00 
f011fd70:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011fd76:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fd7b:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f011fd81:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011fd87:	ba 00 00 00 00       	mov    $0x0,%edx
f011fd8c:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f011fd92:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011fd98:	29 d0                	sub    %edx,%eax
f011fd9a:	89 c1                	mov    %eax,%ecx
f011fd9c:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f011fda3:	10 00 00 
f011fda6:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011fdab:	0f b6 d0             	movzbl %al,%edx
f011fdae:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011fdb4:	01 d0                	add    %edx,%eax
f011fdb6:	48                   	dec    %eax
f011fdb7:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f011fdbd:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011fdc3:	ba 00 00 00 00       	mov    $0x0,%edx
f011fdc8:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f011fdce:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011fdd4:	29 d0                	sub    %edx,%eax
f011fdd6:	01 c1                	add    %eax,%ecx
f011fdd8:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f011fddf:	10 00 00 
f011fde2:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011fde7:	0f b6 c0             	movzbl %al,%eax
f011fdea:	c1 e0 04             	shl    $0x4,%eax
f011fded:	89 c2                	mov    %eax,%edx
f011fdef:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011fdf5:	01 d0                	add    %edx,%eax
f011fdf7:	48                   	dec    %eax
f011fdf8:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f011fdfe:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011fe04:	ba 00 00 00 00       	mov    $0x0,%edx
f011fe09:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f011fe0f:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011fe15:	29 d0                	sub    %edx,%eax
f011fe17:	01 c8                	add    %ecx,%eax
f011fe19:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011fe1f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fe25:	39 c2                	cmp    %eax,%edx
f011fe27:	74 17                	je     f011fe40 <test_kmalloc_worstfit+0xfae>
		panic("Worst Fit not working correctly");
f011fe29:	83 ec 04             	sub    $0x4,%esp
f011fe2c:	68 14 c0 13 f0       	push   $0xf013c014
f011fe31:	68 7f 04 00 00       	push   $0x47f
f011fe36:	68 fa b8 13 f0       	push   $0xf013b8fa
f011fe3b:	e8 c5 03 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fe40:	e8 83 3f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fe45:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fe48:	74 17                	je     f011fe61 <test_kmalloc_worstfit+0xfcf>
f011fe4a:	83 ec 04             	sub    $0x4,%esp
f011fe4d:	68 14 b9 13 f0       	push   $0xf013b914
f011fe52:	68 80 04 00 00       	push   $0x480
f011fe57:	68 fa b8 13 f0       	push   $0xf013b8fa
f011fe5c:	e8 a4 03 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  2*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011fe61:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fe64:	e8 2e d3 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011fe69:	29 c3                	sub    %eax,%ebx
f011fe6b:	89 d8                	mov    %ebx,%eax
f011fe6d:	3d 00 02 00 00       	cmp    $0x200,%eax
f011fe72:	74 17                	je     f011fe8b <test_kmalloc_worstfit+0xff9>
f011fe74:	83 ec 04             	sub    $0x4,%esp
f011fe77:	68 32 be 13 f0       	push   $0xf013be32
f011fe7c:	68 81 04 00 00       	push   $0x481
f011fe81:	68 fa b8 13 f0       	push   $0xf013b8fa
f011fe86:	e8 7a 03 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fe8b:	ff 45 e8             	incl   -0x18(%ebp)
f011fe8e:	83 ec 08             	sub    $0x8,%esp
f011fe91:	ff 75 e8             	pushl  -0x18(%ebp)
f011fe94:	68 34 c0 13 f0       	push   $0xf013c034
f011fe99:	e8 70 0e fe ff       	call   f0100d0e <cprintf>
f011fe9e:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fea1:	e8 f1 d2 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011fea6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fea9:	e8 1a 3f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011feae:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(1*Mega + 512*kilo);    // Use Hole 1 -> Hole 1 = 0.5 M
f011feb1:	83 ec 0c             	sub    $0xc,%esp
f011feb4:	68 00 00 18 00       	push   $0x180000
f011feb9:	e8 cd 7e fe ff       	call   f0107d8b <kmalloc>
f011febe:	83 c4 10             	add    $0x10,%esp
f011fec1:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f011fec7:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f011fece:	10 00 00 
f011fed1:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011fed7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fedc:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f011fee2:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011fee8:	ba 00 00 00 00       	mov    $0x0,%edx
f011feed:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f011fef3:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011fef9:	29 d0                	sub    %edx,%eax
f011fefb:	89 c1                	mov    %eax,%ecx
f011fefd:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f011ff04:	10 00 00 
f011ff07:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011ff0c:	0f b6 d0             	movzbl %al,%edx
f011ff0f:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011ff15:	01 d0                	add    %edx,%eax
f011ff17:	48                   	dec    %eax
f011ff18:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f011ff1e:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011ff24:	ba 00 00 00 00       	mov    $0x0,%edx
f011ff29:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f011ff2f:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011ff35:	29 d0                	sub    %edx,%eax
f011ff37:	01 c1                	add    %eax,%ecx
f011ff39:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f011ff40:	10 00 00 
f011ff43:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011ff48:	0f b6 c0             	movzbl %al,%eax
f011ff4b:	c1 e0 04             	shl    $0x4,%eax
f011ff4e:	89 c2                	mov    %eax,%edx
f011ff50:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011ff56:	01 d0                	add    %edx,%eax
f011ff58:	48                   	dec    %eax
f011ff59:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f011ff5f:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011ff65:	ba 00 00 00 00       	mov    $0x0,%edx
f011ff6a:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f011ff70:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011ff76:	29 d0                	sub    %edx,%eax
f011ff78:	01 c8                	add    %ecx,%eax
f011ff7a:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f011ff80:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ff86:	39 c2                	cmp    %eax,%edx
f011ff88:	74 17                	je     f011ffa1 <test_kmalloc_worstfit+0x110f>
		panic("Worst Fit not working correctly");
f011ff8a:	83 ec 04             	sub    $0x4,%esp
f011ff8d:	68 14 c0 13 f0       	push   $0xf013c014
f011ff92:	68 88 04 00 00       	push   $0x488
f011ff97:	68 fa b8 13 f0       	push   $0xf013b8fa
f011ff9c:	e8 64 02 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ffa1:	e8 22 3e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ffa6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ffa9:	74 17                	je     f011ffc2 <test_kmalloc_worstfit+0x1130>
f011ffab:	83 ec 04             	sub    $0x4,%esp
f011ffae:	68 14 b9 13 f0       	push   $0xf013b914
f011ffb3:	68 89 04 00 00       	push   $0x489
f011ffb8:	68 fa b8 13 f0       	push   $0xf013b8fa
f011ffbd:	e8 43 02 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (1*Mega + 512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011ffc2:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ffc5:	e8 cd d1 fe ff       	call   f010d197 <sys_calculate_free_frames>
f011ffca:	29 c3                	sub    %eax,%ebx
f011ffcc:	89 d8                	mov    %ebx,%eax
f011ffce:	3d 80 01 00 00       	cmp    $0x180,%eax
f011ffd3:	74 17                	je     f011ffec <test_kmalloc_worstfit+0x115a>
f011ffd5:	83 ec 04             	sub    $0x4,%esp
f011ffd8:	68 32 be 13 f0       	push   $0xf013be32
f011ffdd:	68 8a 04 00 00       	push   $0x48a
f011ffe2:	68 fa b8 13 f0       	push   $0xf013b8fa
f011ffe7:	e8 19 02 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ffec:	ff 45 e8             	incl   -0x18(%ebp)
f011ffef:	83 ec 08             	sub    $0x8,%esp
f011fff2:	ff 75 e8             	pushl  -0x18(%ebp)
f011fff5:	68 34 c0 13 f0       	push   $0xf013c034
f011fffa:	e8 0f 0d fe ff       	call   f0100d0e <cprintf>
f011ffff:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f0120002:	e8 90 d1 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0120007:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f012000a:	e8 b9 3d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012000f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 2 -> Hole 2 = 1.5 M
f0120012:	83 ec 0c             	sub    $0xc,%esp
f0120015:	68 00 00 08 00       	push   $0x80000
f012001a:	e8 6c 7d fe ff       	call   f0107d8b <kmalloc>
f012001f:	83 c4 10             	add    $0x10,%esp
f0120022:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00600000)
f0120028:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f012002f:	10 00 00 
f0120032:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0120038:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012003d:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0120043:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0120049:	ba 00 00 00 00       	mov    $0x0,%edx
f012004e:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0120054:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012005a:	29 d0                	sub    %edx,%eax
f012005c:	89 c1                	mov    %eax,%ecx
f012005e:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f0120065:	10 00 00 
f0120068:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012006d:	0f b6 d0             	movzbl %al,%edx
f0120070:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0120076:	01 d0                	add    %edx,%eax
f0120078:	48                   	dec    %eax
f0120079:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f012007f:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0120085:	ba 00 00 00 00       	mov    $0x0,%edx
f012008a:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f0120090:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0120096:	29 d0                	sub    %edx,%eax
f0120098:	01 c1                	add    %eax,%ecx
f012009a:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f01200a1:	10 00 00 
f01200a4:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01200a9:	0f b6 c0             	movzbl %al,%eax
f01200ac:	c1 e0 04             	shl    $0x4,%eax
f01200af:	89 c2                	mov    %eax,%edx
f01200b1:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01200b7:	01 d0                	add    %edx,%eax
f01200b9:	48                   	dec    %eax
f01200ba:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f01200c0:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01200c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01200cb:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f01200d1:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01200d7:	29 d0                	sub    %edx,%eax
f01200d9:	01 c8                	add    %ecx,%eax
f01200db:	8d 90 00 40 60 f6    	lea    -0x99fc000(%eax),%edx
f01200e1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01200e7:	39 c2                	cmp    %eax,%edx
f01200e9:	74 17                	je     f0120102 <test_kmalloc_worstfit+0x1270>
		panic("Worst Fit not working correctly");
f01200eb:	83 ec 04             	sub    $0x4,%esp
f01200ee:	68 14 c0 13 f0       	push   $0xf013c014
f01200f3:	68 91 04 00 00       	push   $0x491
f01200f8:	68 fa b8 13 f0       	push   $0xf013b8fa
f01200fd:	e8 03 01 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120102:	e8 c1 3c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120107:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012010a:	74 17                	je     f0120123 <test_kmalloc_worstfit+0x1291>
f012010c:	83 ec 04             	sub    $0x4,%esp
f012010f:	68 14 b9 13 f0       	push   $0xf013b914
f0120114:	68 92 04 00 00       	push   $0x492
f0120119:	68 fa b8 13 f0       	push   $0xf013b8fa
f012011e:	e8 e2 00 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f0120123:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0120126:	e8 6c d0 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012012b:	29 c3                	sub    %eax,%ebx
f012012d:	89 d8                	mov    %ebx,%eax
f012012f:	3d 80 00 00 00       	cmp    $0x80,%eax
f0120134:	74 17                	je     f012014d <test_kmalloc_worstfit+0x12bb>
f0120136:	83 ec 04             	sub    $0x4,%esp
f0120139:	68 32 be 13 f0       	push   $0xf013be32
f012013e:	68 93 04 00 00       	push   $0x493
f0120143:	68 fa b8 13 f0       	push   $0xf013b8fa
f0120148:	e8 b8 00 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f012014d:	ff 45 e8             	incl   -0x18(%ebp)
f0120150:	83 ec 08             	sub    $0x8,%esp
f0120153:	ff 75 e8             	pushl  -0x18(%ebp)
f0120156:	68 34 c0 13 f0       	push   $0xf013c034
f012015b:	e8 ae 0b fe ff       	call   f0100d0e <cprintf>
f0120160:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f0120163:	e8 2f d0 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0120168:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f012016b:	e8 58 3c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120170:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use Hole 5 -> Hole 5 = 2 M - K
f0120173:	83 ec 0c             	sub    $0xc,%esp
f0120176:	68 00 04 00 00       	push   $0x400
f012017b:	e8 0b 7c fe ff       	call   f0107d8b <kmalloc>
f0120180:	83 c4 10             	add    $0x10,%esp
f0120183:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09200000)
f0120189:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f0120190:	10 00 00 
f0120193:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0120199:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012019e:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f01201a4:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01201aa:	ba 00 00 00 00       	mov    $0x0,%edx
f01201af:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f01201b5:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01201bb:	29 d0                	sub    %edx,%eax
f01201bd:	89 c1                	mov    %eax,%ecx
f01201bf:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f01201c6:	10 00 00 
f01201c9:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01201ce:	0f b6 d0             	movzbl %al,%edx
f01201d1:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01201d7:	01 d0                	add    %edx,%eax
f01201d9:	48                   	dec    %eax
f01201da:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f01201e0:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01201e6:	ba 00 00 00 00       	mov    $0x0,%edx
f01201eb:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f01201f1:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01201f7:	29 d0                	sub    %edx,%eax
f01201f9:	01 c1                	add    %eax,%ecx
f01201fb:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f0120202:	10 00 00 
f0120205:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012020a:	0f b6 c0             	movzbl %al,%eax
f012020d:	c1 e0 04             	shl    $0x4,%eax
f0120210:	89 c2                	mov    %eax,%edx
f0120212:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0120218:	01 d0                	add    %edx,%eax
f012021a:	48                   	dec    %eax
f012021b:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f0120221:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0120227:	ba 00 00 00 00       	mov    $0x0,%edx
f012022c:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f0120232:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0120238:	29 d0                	sub    %edx,%eax
f012023a:	01 c8                	add    %ecx,%eax
f012023c:	8d 90 00 40 20 ff    	lea    -0xdfc000(%eax),%edx
f0120242:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0120248:	39 c2                	cmp    %eax,%edx
f012024a:	74 17                	je     f0120263 <test_kmalloc_worstfit+0x13d1>
		panic("Worst Fit not working correctly");
f012024c:	83 ec 04             	sub    $0x4,%esp
f012024f:	68 14 c0 13 f0       	push   $0xf013c014
f0120254:	68 9a 04 00 00       	push   $0x49a
f0120259:	68 fa b8 13 f0       	push   $0xf013b8fa
f012025e:	e8 a2 ff fd ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120263:	e8 60 3b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120268:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012026b:	74 17                	je     f0120284 <test_kmalloc_worstfit+0x13f2>
f012026d:	83 ec 04             	sub    $0x4,%esp
f0120270:	68 14 b9 13 f0       	push   $0xf013b914
f0120275:	68 9b 04 00 00       	push   $0x49b
f012027a:	68 fa b8 13 f0       	push   $0xf013b8fa
f012027f:	e8 81 ff fd ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f0120284:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0120287:	e8 0b cf fe ff       	call   f010d197 <sys_calculate_free_frames>
f012028c:	29 c3                	sub    %eax,%ebx
f012028e:	89 d8                	mov    %ebx,%eax
f0120290:	83 f8 01             	cmp    $0x1,%eax
f0120293:	74 17                	je     f01202ac <test_kmalloc_worstfit+0x141a>
f0120295:	83 ec 04             	sub    $0x4,%esp
f0120298:	68 32 be 13 f0       	push   $0xf013be32
f012029d:	68 9c 04 00 00       	push   $0x49c
f01202a2:	68 fa b8 13 f0       	push   $0xf013b8fa
f01202a7:	e8 59 ff fd ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f01202ac:	ff 45 e8             	incl   -0x18(%ebp)
f01202af:	83 ec 08             	sub    $0x8,%esp
f01202b2:	ff 75 e8             	pushl  -0x18(%ebp)
f01202b5:	68 34 c0 13 f0       	push   $0xf013c034
f01202ba:	e8 4f 0a fe ff       	call   f0100d0e <cprintf>
f01202bf:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f01202c2:	e8 d0 ce fe ff       	call   f010d197 <sys_calculate_free_frames>
f01202c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f01202ca:	e8 f9 3a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01202cf:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2*Mega - 4*kilo); 		// Use Hole 5 -> Hole 5 = 0
f01202d2:	83 ec 0c             	sub    $0xc,%esp
f01202d5:	68 00 f0 1f 00       	push   $0x1ff000
f01202da:	e8 ac 7a fe ff       	call   f0107d8b <kmalloc>
f01202df:	83 c4 10             	add    $0x10,%esp
f01202e2:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09201000)
f01202e8:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f01202ef:	10 00 00 
f01202f2:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01202f8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01202fd:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f0120303:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0120309:	ba 00 00 00 00       	mov    $0x0,%edx
f012030e:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f0120314:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012031a:	29 d0                	sub    %edx,%eax
f012031c:	89 c1                	mov    %eax,%ecx
f012031e:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f0120325:	10 00 00 
f0120328:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012032d:	0f b6 d0             	movzbl %al,%edx
f0120330:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0120336:	01 d0                	add    %edx,%eax
f0120338:	48                   	dec    %eax
f0120339:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f012033f:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0120345:	ba 00 00 00 00       	mov    $0x0,%edx
f012034a:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0120350:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0120356:	29 d0                	sub    %edx,%eax
f0120358:	01 c1                	add    %eax,%ecx
f012035a:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f0120361:	10 00 00 
f0120364:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0120369:	0f b6 c0             	movzbl %al,%eax
f012036c:	c1 e0 04             	shl    $0x4,%eax
f012036f:	89 c2                	mov    %eax,%edx
f0120371:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0120377:	01 d0                	add    %edx,%eax
f0120379:	48                   	dec    %eax
f012037a:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f0120380:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0120386:	ba 00 00 00 00       	mov    $0x0,%edx
f012038b:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f0120391:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0120397:	29 d0                	sub    %edx,%eax
f0120399:	01 c8                	add    %ecx,%eax
f012039b:	8d 90 00 50 20 ff    	lea    -0xdfb000(%eax),%edx
f01203a1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01203a7:	39 c2                	cmp    %eax,%edx
f01203a9:	74 17                	je     f01203c2 <test_kmalloc_worstfit+0x1530>
		panic("Worst Fit not working correctly");
f01203ab:	83 ec 04             	sub    $0x4,%esp
f01203ae:	68 14 c0 13 f0       	push   $0xf013c014
f01203b3:	68 a3 04 00 00       	push   $0x4a3
f01203b8:	68 fa b8 13 f0       	push   $0xf013b8fa
f01203bd:	e8 43 fe fd ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01203c2:	e8 01 3a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01203c7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01203ca:	74 17                	je     f01203e3 <test_kmalloc_worstfit+0x1551>
f01203cc:	83 ec 04             	sub    $0x4,%esp
f01203cf:	68 14 b9 13 f0       	push   $0xf013b914
f01203d4:	68 a4 04 00 00       	push   $0x4a4
f01203d9:	68 fa b8 13 f0       	push   $0xf013b8fa
f01203de:	e8 22 fe fd ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (2*Mega - 4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f01203e3:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01203e6:	e8 ac cd fe ff       	call   f010d197 <sys_calculate_free_frames>
f01203eb:	29 c3                	sub    %eax,%ebx
f01203ed:	89 d8                	mov    %ebx,%eax
f01203ef:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f01203f4:	74 17                	je     f012040d <test_kmalloc_worstfit+0x157b>
f01203f6:	83 ec 04             	sub    $0x4,%esp
f01203f9:	68 32 be 13 f0       	push   $0xf013be32
f01203fe:	68 a5 04 00 00       	push   $0x4a5
f0120403:	68 fa b8 13 f0       	push   $0xf013b8fa
f0120408:	e8 f8 fd fd ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f012040d:	ff 45 e8             	incl   -0x18(%ebp)
f0120410:	83 ec 08             	sub    $0x8,%esp
f0120413:	ff 75 e8             	pushl  -0x18(%ebp)
f0120416:	68 34 c0 13 f0       	push   $0xf013c034
f012041b:	e8 ee 08 fe ff       	call   f0100d0e <cprintf>
f0120420:	83 c4 10             	add    $0x10,%esp

	// Check that worst fit returns null in case all holes are not free
	freeFrames = sys_calculate_free_frames() ;
f0120423:	e8 6f cd fe ff       	call   f010d197 <sys_calculate_free_frames>
f0120428:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f012042b:	e8 98 39 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120430:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 		//No Suitable hole
f0120433:	83 ec 0c             	sub    $0xc,%esp
f0120436:	68 00 00 40 00       	push   $0x400000
f012043b:	e8 4b 79 fe ff       	call   f0107d8b <kmalloc>
f0120440:	83 c4 10             	add    $0x10,%esp
f0120443:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != 0x0)
f0120449:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012044f:	85 c0                	test   %eax,%eax
f0120451:	74 17                	je     f012046a <test_kmalloc_worstfit+0x15d8>
		panic("Worst Fit not working correctly");
f0120453:	83 ec 04             	sub    $0x4,%esp
f0120456:	68 14 c0 13 f0       	push   $0xf013c014
f012045b:	68 ad 04 00 00       	push   $0x4ad
f0120460:	68 fa b8 13 f0       	push   $0xf013b8fa
f0120465:	e8 9b fd fd ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012046a:	e8 59 39 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012046f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0120472:	74 17                	je     f012048b <test_kmalloc_worstfit+0x15f9>
f0120474:	83 ec 04             	sub    $0x4,%esp
f0120477:	68 14 b9 13 f0       	push   $0xf013b914
f012047c:	68 ae 04 00 00       	push   $0x4ae
f0120481:	68 fa b8 13 f0       	push   $0xf013b8fa
f0120486:	e8 7a fd fd ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  0) panic("Wrong allocation:");
f012048b:	e8 07 cd fe ff       	call   f010d197 <sys_calculate_free_frames>
f0120490:	89 c2                	mov    %eax,%edx
f0120492:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0120495:	39 c2                	cmp    %eax,%edx
f0120497:	74 17                	je     f01204b0 <test_kmalloc_worstfit+0x161e>
f0120499:	83 ec 04             	sub    $0x4,%esp
f012049c:	68 32 be 13 f0       	push   $0xf013be32
f01204a1:	68 af 04 00 00       	push   $0x4af
f01204a6:	68 fa b8 13 f0       	push   $0xf013b8fa
f01204ab:	e8 55 fd fd ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f01204b0:	ff 45 e8             	incl   -0x18(%ebp)
f01204b3:	83 ec 08             	sub    $0x8,%esp
f01204b6:	ff 75 e8             	pushl  -0x18(%ebp)
f01204b9:	68 34 c0 13 f0       	push   $0xf013c034
f01204be:	e8 4b 08 fe ff       	call   f0100d0e <cprintf>
f01204c3:	83 c4 10             	add    $0x10,%esp

	cprintf("Congratulations!! test Worst Fit completed successfully.\n");
f01204c6:	83 ec 0c             	sub    $0xc,%esp
f01204c9:	68 48 c0 13 f0       	push   $0xf013c048
f01204ce:	e8 3b 08 fe ff       	call   f0100d0e <cprintf>
f01204d3:	83 c4 10             	add    $0x10,%esp


	return 1;
f01204d6:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01204db:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01204de:	5b                   	pop    %ebx
f01204df:	5f                   	pop    %edi
f01204e0:	5d                   	pop    %ebp
f01204e1:	c3                   	ret    

f01204e2 <test_kfree>:

int test_kfree()
{
f01204e2:	55                   	push   %ebp
f01204e3:	89 e5                	mov    %esp,%ebp
f01204e5:	57                   	push   %edi
f01204e6:	53                   	push   %ebx
f01204e7:	81 ec c0 02 00 00    	sub    $0x2c0,%esp
	cprintf("==============================================\n");
f01204ed:	83 ec 0c             	sub    $0xc,%esp
f01204f0:	68 3c b8 13 f0       	push   $0xf013b83c
f01204f5:	e8 14 08 fe ff       	call   f0100d0e <cprintf>
f01204fa:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01204fd:	83 ec 0c             	sub    $0xc,%esp
f0120500:	68 6c b8 13 f0       	push   $0xf013b86c
f0120505:	e8 04 08 fe ff       	call   f0100d0e <cprintf>
f012050a:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f012050d:	83 ec 0c             	sub    $0xc,%esp
f0120510:	68 3c b8 13 f0       	push   $0xf013b83c
f0120515:	e8 f4 07 fe ff       	call   f0100d0e <cprintf>
f012051a:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f012051d:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0120521:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0120525:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f012052b:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0120531:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0120538:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012053f:	e8 53 cc fe ff       	call   f010d197 <sys_calculate_free_frames>
f0120544:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0120547:	8d 95 e8 fd ff ff    	lea    -0x218(%ebp),%edx
f012054d:	b9 14 00 00 00       	mov    $0x14,%ecx
f0120552:	b8 00 00 00 00       	mov    $0x0,%eax
f0120557:	89 d7                	mov    %edx,%edi
f0120559:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f012055b:	8d 95 98 fd ff ff    	lea    -0x268(%ebp),%edx
f0120561:	b9 14 00 00 00       	mov    $0x14,%ecx
f0120566:	b8 00 00 00 00       	mov    $0x0,%eax
f012056b:	89 d7                	mov    %edx,%edi
f012056d:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f012056f:	8d 95 48 fd ff ff    	lea    -0x2b8(%ebp),%edx
f0120575:	b9 14 00 00 00       	mov    $0x14,%ecx
f012057a:	b8 00 00 00 00       	mov    $0x0,%eax
f012057f:	89 d7                	mov    %edx,%edi
f0120581:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0120583:	e8 0f cc fe ff       	call   f010d197 <sys_calculate_free_frames>
f0120588:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012058b:	e8 38 38 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120590:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0120593:	83 ec 0c             	sub    $0xc,%esp
f0120596:	68 00 fc 1f 00       	push   $0x1ffc00
f012059b:	e8 eb 77 fe ff       	call   f0107d8b <kmalloc>
f01205a0:	83 c4 10             	add    $0x10,%esp
f01205a3:	89 85 48 fd ff ff    	mov    %eax,-0x2b8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01205a9:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f01205af:	89 c1                	mov    %eax,%ecx
f01205b1:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f01205b8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01205bb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01205c0:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f01205c3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01205c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01205cb:	f7 75 c8             	divl   -0x38(%ebp)
f01205ce:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01205d1:	29 d0                	sub    %edx,%eax
f01205d3:	89 c3                	mov    %eax,%ebx
f01205d5:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01205dc:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01205e1:	0f b6 d0             	movzbl %al,%edx
f01205e4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01205e7:	01 d0                	add    %edx,%eax
f01205e9:	48                   	dec    %eax
f01205ea:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01205ed:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01205f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01205f5:	f7 75 c0             	divl   -0x40(%ebp)
f01205f8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01205fb:	29 d0                	sub    %edx,%eax
f01205fd:	01 c3                	add    %eax,%ebx
f01205ff:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0120606:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012060b:	0f b6 c0             	movzbl %al,%eax
f012060e:	c1 e0 04             	shl    $0x4,%eax
f0120611:	89 c2                	mov    %eax,%edx
f0120613:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0120616:	01 d0                	add    %edx,%eax
f0120618:	48                   	dec    %eax
f0120619:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f012061c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012061f:	ba 00 00 00 00       	mov    $0x0,%edx
f0120624:	f7 75 b8             	divl   -0x48(%ebp)
f0120627:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012062a:	29 d0                	sub    %edx,%eax
f012062c:	01 d8                	add    %ebx,%eax
f012062e:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0120633:	39 c1                	cmp    %eax,%ecx
f0120635:	74 17                	je     f012064e <test_kfree+0x16c>
f0120637:	83 ec 04             	sub    $0x4,%esp
f012063a:	68 e0 b9 13 f0       	push   $0xf013b9e0
f012063f:	68 d7 04 00 00       	push   $0x4d7
f0120644:	68 fa b8 13 f0       	push   $0xf013b8fa
f0120649:	e8 b7 fb fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012064e:	e8 75 37 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120653:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120656:	74 17                	je     f012066f <test_kfree+0x18d>
f0120658:	83 ec 04             	sub    $0x4,%esp
f012065b:	68 14 b9 13 f0       	push   $0xf013b914
f0120660:	68 d8 04 00 00       	push   $0x4d8
f0120665:	68 fa b8 13 f0       	push   $0xf013b8fa
f012066a:	e8 96 fb fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012066f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120672:	e8 20 cb fe ff       	call   f010d197 <sys_calculate_free_frames>
f0120677:	29 c3                	sub    %eax,%ebx
f0120679:	89 d8                	mov    %ebx,%eax
f012067b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0120680:	74 17                	je     f0120699 <test_kfree+0x1b7>
f0120682:	83 ec 04             	sub    $0x4,%esp
f0120685:	68 7c b9 13 f0       	push   $0xf013b97c
f012068a:	68 d9 04 00 00       	push   $0x4d9
f012068f:	68 fa b8 13 f0       	push   $0xf013b8fa
f0120694:	e8 6c fb fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0120699:	c7 85 e8 fd ff ff ff 	movl   $0x1ffbff,-0x218(%ebp)
f01206a0:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01206a3:	e8 ef ca fe ff       	call   f010d197 <sys_calculate_free_frames>
f01206a8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01206ab:	e8 18 37 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01206b0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01206b3:	83 ec 0c             	sub    $0xc,%esp
f01206b6:	68 00 fc 1f 00       	push   $0x1ffc00
f01206bb:	e8 cb 76 fe ff       	call   f0107d8b <kmalloc>
f01206c0:	83 c4 10             	add    $0x10,%esp
f01206c3:	89 85 4c fd ff ff    	mov    %eax,-0x2b4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01206c9:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f01206cf:	89 c1                	mov    %eax,%ecx
f01206d1:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01206d8:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01206db:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01206e0:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01206e3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01206e6:	ba 00 00 00 00       	mov    $0x0,%edx
f01206eb:	f7 75 b0             	divl   -0x50(%ebp)
f01206ee:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01206f1:	29 d0                	sub    %edx,%eax
f01206f3:	89 c3                	mov    %eax,%ebx
f01206f5:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01206fc:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0120701:	0f b6 d0             	movzbl %al,%edx
f0120704:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0120707:	01 d0                	add    %edx,%eax
f0120709:	48                   	dec    %eax
f012070a:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f012070d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0120710:	ba 00 00 00 00       	mov    $0x0,%edx
f0120715:	f7 75 a8             	divl   -0x58(%ebp)
f0120718:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012071b:	29 d0                	sub    %edx,%eax
f012071d:	01 c3                	add    %eax,%ebx
f012071f:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0120726:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012072b:	0f b6 c0             	movzbl %al,%eax
f012072e:	c1 e0 04             	shl    $0x4,%eax
f0120731:	89 c2                	mov    %eax,%edx
f0120733:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0120736:	01 d0                	add    %edx,%eax
f0120738:	48                   	dec    %eax
f0120739:	89 45 9c             	mov    %eax,-0x64(%ebp)
f012073c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012073f:	ba 00 00 00 00       	mov    $0x0,%edx
f0120744:	f7 75 a0             	divl   -0x60(%ebp)
f0120747:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012074a:	29 d0                	sub    %edx,%eax
f012074c:	01 d8                	add    %ebx,%eax
f012074e:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0120753:	39 c1                	cmp    %eax,%ecx
f0120755:	74 17                	je     f012076e <test_kfree+0x28c>
f0120757:	83 ec 04             	sub    $0x4,%esp
f012075a:	68 e0 b9 13 f0       	push   $0xf013b9e0
f012075f:	68 e0 04 00 00       	push   $0x4e0
f0120764:	68 fa b8 13 f0       	push   $0xf013b8fa
f0120769:	e8 97 fa fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012076e:	e8 55 36 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120773:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120776:	74 17                	je     f012078f <test_kfree+0x2ad>
f0120778:	83 ec 04             	sub    $0x4,%esp
f012077b:	68 14 b9 13 f0       	push   $0xf013b914
f0120780:	68 e1 04 00 00       	push   $0x4e1
f0120785:	68 fa b8 13 f0       	push   $0xf013b8fa
f012078a:	e8 76 fa fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012078f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120792:	e8 00 ca fe ff       	call   f010d197 <sys_calculate_free_frames>
f0120797:	29 c3                	sub    %eax,%ebx
f0120799:	89 d8                	mov    %ebx,%eax
f012079b:	3d 00 02 00 00       	cmp    $0x200,%eax
f01207a0:	74 17                	je     f01207b9 <test_kfree+0x2d7>
f01207a2:	83 ec 04             	sub    $0x4,%esp
f01207a5:	68 7c b9 13 f0       	push   $0xf013b97c
f01207aa:	68 e2 04 00 00       	push   $0x4e2
f01207af:	68 fa b8 13 f0       	push   $0xf013b8fa
f01207b4:	e8 4c fa fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01207b9:	c7 85 ec fd ff ff ff 	movl   $0x1ffbff,-0x214(%ebp)
f01207c0:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01207c3:	e8 cf c9 fe ff       	call   f010d197 <sys_calculate_free_frames>
f01207c8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01207cb:	e8 f8 35 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01207d0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01207d3:	83 ec 0c             	sub    $0xc,%esp
f01207d6:	68 00 08 00 00       	push   $0x800
f01207db:	e8 ab 75 fe ff       	call   f0107d8b <kmalloc>
f01207e0:	83 c4 10             	add    $0x10,%esp
f01207e3:	89 85 50 fd ff ff    	mov    %eax,-0x2b0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01207e9:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f01207ef:	89 c1                	mov    %eax,%ecx
f01207f1:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01207f8:	8b 45 98             	mov    -0x68(%ebp),%eax
f01207fb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120800:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0120803:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0120806:	ba 00 00 00 00       	mov    $0x0,%edx
f012080b:	f7 75 98             	divl   -0x68(%ebp)
f012080e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0120811:	29 d0                	sub    %edx,%eax
f0120813:	89 c3                	mov    %eax,%ebx
f0120815:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f012081c:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0120821:	0f b6 d0             	movzbl %al,%edx
f0120824:	8b 45 90             	mov    -0x70(%ebp),%eax
f0120827:	01 d0                	add    %edx,%eax
f0120829:	48                   	dec    %eax
f012082a:	89 45 8c             	mov    %eax,-0x74(%ebp)
f012082d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0120830:	ba 00 00 00 00       	mov    $0x0,%edx
f0120835:	f7 75 90             	divl   -0x70(%ebp)
f0120838:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012083b:	29 d0                	sub    %edx,%eax
f012083d:	01 c3                	add    %eax,%ebx
f012083f:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0120846:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012084b:	0f b6 c0             	movzbl %al,%eax
f012084e:	c1 e0 04             	shl    $0x4,%eax
f0120851:	89 c2                	mov    %eax,%edx
f0120853:	8b 45 88             	mov    -0x78(%ebp),%eax
f0120856:	01 d0                	add    %edx,%eax
f0120858:	48                   	dec    %eax
f0120859:	89 45 84             	mov    %eax,-0x7c(%ebp)
f012085c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012085f:	ba 00 00 00 00       	mov    $0x0,%edx
f0120864:	f7 75 88             	divl   -0x78(%ebp)
f0120867:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012086a:	29 d0                	sub    %edx,%eax
f012086c:	01 d8                	add    %ebx,%eax
f012086e:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0120873:	39 c1                	cmp    %eax,%ecx
f0120875:	74 17                	je     f012088e <test_kfree+0x3ac>
f0120877:	83 ec 04             	sub    $0x4,%esp
f012087a:	68 e0 b9 13 f0       	push   $0xf013b9e0
f012087f:	68 e9 04 00 00       	push   $0x4e9
f0120884:	68 fa b8 13 f0       	push   $0xf013b8fa
f0120889:	e8 77 f9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012088e:	e8 35 35 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120893:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120896:	74 17                	je     f01208af <test_kfree+0x3cd>
f0120898:	83 ec 04             	sub    $0x4,%esp
f012089b:	68 14 b9 13 f0       	push   $0xf013b914
f01208a0:	68 ea 04 00 00       	push   $0x4ea
f01208a5:	68 fa b8 13 f0       	push   $0xf013b8fa
f01208aa:	e8 56 f9 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01208af:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01208b2:	e8 e0 c8 fe ff       	call   f010d197 <sys_calculate_free_frames>
f01208b7:	29 c3                	sub    %eax,%ebx
f01208b9:	89 d8                	mov    %ebx,%eax
f01208bb:	83 f8 01             	cmp    $0x1,%eax
f01208be:	74 17                	je     f01208d7 <test_kfree+0x3f5>
f01208c0:	83 ec 04             	sub    $0x4,%esp
f01208c3:	68 7c b9 13 f0       	push   $0xf013b97c
f01208c8:	68 eb 04 00 00       	push   $0x4eb
f01208cd:	68 fa b8 13 f0       	push   $0xf013b8fa
f01208d2:	e8 2e f9 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01208d7:	c7 85 f0 fd ff ff ff 	movl   $0x7ff,-0x210(%ebp)
f01208de:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01208e1:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f01208e7:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01208ea:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01208f1:	eb 0e                	jmp    f0120901 <test_kfree+0x41f>
		{
			ptr[i] = 2 ;
f01208f3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01208f6:	8b 45 80             	mov    -0x80(%ebp),%eax
f01208f9:	01 d0                	add    %edx,%eax
f01208fb:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01208fe:	ff 45 f4             	incl   -0xc(%ebp)
f0120901:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0120907:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012090a:	7f e7                	jg     f01208f3 <test_kfree+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012090c:	e8 86 c8 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0120911:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120914:	e8 af 34 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120919:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012091c:	83 ec 0c             	sub    $0xc,%esp
f012091f:	68 00 08 00 00       	push   $0x800
f0120924:	e8 62 74 fe ff       	call   f0107d8b <kmalloc>
f0120929:	83 c4 10             	add    $0x10,%esp
f012092c:	89 85 54 fd ff ff    	mov    %eax,-0x2ac(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120932:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0120938:	89 c1                	mov    %eax,%ecx
f012093a:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0120941:	10 00 00 
f0120944:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012094a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012094f:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0120955:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012095b:	ba 00 00 00 00       	mov    $0x0,%edx
f0120960:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0120966:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012096c:	29 d0                	sub    %edx,%eax
f012096e:	89 c3                	mov    %eax,%ebx
f0120970:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0120977:	10 00 00 
f012097a:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012097f:	0f b6 d0             	movzbl %al,%edx
f0120982:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0120988:	01 d0                	add    %edx,%eax
f012098a:	48                   	dec    %eax
f012098b:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0120991:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0120997:	ba 00 00 00 00       	mov    $0x0,%edx
f012099c:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01209a2:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01209a8:	29 d0                	sub    %edx,%eax
f01209aa:	01 c3                	add    %eax,%ebx
f01209ac:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01209b3:	10 00 00 
f01209b6:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01209bb:	0f b6 c0             	movzbl %al,%eax
f01209be:	c1 e0 04             	shl    $0x4,%eax
f01209c1:	89 c2                	mov    %eax,%edx
f01209c3:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01209c9:	01 d0                	add    %edx,%eax
f01209cb:	48                   	dec    %eax
f01209cc:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01209d2:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01209d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01209dd:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f01209e3:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01209e9:	29 d0                	sub    %edx,%eax
f01209eb:	01 d8                	add    %ebx,%eax
f01209ed:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01209f2:	39 c1                	cmp    %eax,%ecx
f01209f4:	74 17                	je     f0120a0d <test_kfree+0x52b>
f01209f6:	83 ec 04             	sub    $0x4,%esp
f01209f9:	68 e0 b9 13 f0       	push   $0xf013b9e0
f01209fe:	68 f7 04 00 00       	push   $0x4f7
f0120a03:	68 fa b8 13 f0       	push   $0xf013b8fa
f0120a08:	e8 f8 f7 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120a0d:	e8 b6 33 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120a12:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120a15:	74 17                	je     f0120a2e <test_kfree+0x54c>
f0120a17:	83 ec 04             	sub    $0x4,%esp
f0120a1a:	68 14 b9 13 f0       	push   $0xf013b914
f0120a1f:	68 f8 04 00 00       	push   $0x4f8
f0120a24:	68 fa b8 13 f0       	push   $0xf013b8fa
f0120a29:	e8 d7 f7 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120a2e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120a31:	e8 61 c7 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0120a36:	29 c3                	sub    %eax,%ebx
f0120a38:	89 d8                	mov    %ebx,%eax
f0120a3a:	83 f8 01             	cmp    $0x1,%eax
f0120a3d:	74 17                	je     f0120a56 <test_kfree+0x574>
f0120a3f:	83 ec 04             	sub    $0x4,%esp
f0120a42:	68 7c b9 13 f0       	push   $0xf013b97c
f0120a47:	68 f9 04 00 00       	push   $0x4f9
f0120a4c:	68 fa b8 13 f0       	push   $0xf013b8fa
f0120a51:	e8 af f7 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0120a56:	c7 85 f4 fd ff ff ff 	movl   $0x7ff,-0x20c(%ebp)
f0120a5d:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0120a60:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0120a66:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0120a69:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120a70:	eb 0e                	jmp    f0120a80 <test_kfree+0x59e>
		{
			ptr[i] = 3 ;
f0120a72:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120a75:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120a78:	01 d0                	add    %edx,%eax
f0120a7a:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0120a7d:	ff 45 f4             	incl   -0xc(%ebp)
f0120a80:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120a86:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120a89:	7f e7                	jg     f0120a72 <test_kfree+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0120a8b:	e8 07 c7 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0120a90:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120a93:	e8 30 33 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120a98:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0120a9b:	83 ec 0c             	sub    $0xc,%esp
f0120a9e:	68 00 1c 00 00       	push   $0x1c00
f0120aa3:	e8 e3 72 fe ff       	call   f0107d8b <kmalloc>
f0120aa8:	83 c4 10             	add    $0x10,%esp
f0120aab:	89 85 58 fd ff ff    	mov    %eax,-0x2a8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120ab1:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0120ab7:	89 c1                	mov    %eax,%ecx
f0120ab9:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0120ac0:	10 00 00 
f0120ac3:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0120ac9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120ace:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0120ad4:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0120ada:	ba 00 00 00 00       	mov    $0x0,%edx
f0120adf:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0120ae5:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0120aeb:	29 d0                	sub    %edx,%eax
f0120aed:	89 c3                	mov    %eax,%ebx
f0120aef:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0120af6:	10 00 00 
f0120af9:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0120afe:	0f b6 d0             	movzbl %al,%edx
f0120b01:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0120b07:	01 d0                	add    %edx,%eax
f0120b09:	48                   	dec    %eax
f0120b0a:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0120b10:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0120b16:	ba 00 00 00 00       	mov    $0x0,%edx
f0120b1b:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0120b21:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0120b27:	29 d0                	sub    %edx,%eax
f0120b29:	01 c3                	add    %eax,%ebx
f0120b2b:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0120b32:	10 00 00 
f0120b35:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0120b3a:	0f b6 c0             	movzbl %al,%eax
f0120b3d:	c1 e0 04             	shl    $0x4,%eax
f0120b40:	89 c2                	mov    %eax,%edx
f0120b42:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0120b48:	01 d0                	add    %edx,%eax
f0120b4a:	48                   	dec    %eax
f0120b4b:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0120b51:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0120b57:	ba 00 00 00 00       	mov    $0x0,%edx
f0120b5c:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0120b62:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0120b68:	29 d0                	sub    %edx,%eax
f0120b6a:	01 d8                	add    %ebx,%eax
f0120b6c:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0120b71:	39 c1                	cmp    %eax,%ecx
f0120b73:	74 17                	je     f0120b8c <test_kfree+0x6aa>
f0120b75:	83 ec 04             	sub    $0x4,%esp
f0120b78:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0120b7d:	68 05 05 00 00       	push   $0x505
f0120b82:	68 fa b8 13 f0       	push   $0xf013b8fa
f0120b87:	e8 79 f6 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120b8c:	e8 37 32 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120b91:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120b94:	74 17                	je     f0120bad <test_kfree+0x6cb>
f0120b96:	83 ec 04             	sub    $0x4,%esp
f0120b99:	68 14 b9 13 f0       	push   $0xf013b914
f0120b9e:	68 06 05 00 00       	push   $0x506
f0120ba3:	68 fa b8 13 f0       	push   $0xf013b8fa
f0120ba8:	e8 58 f6 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120bad:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120bb0:	e8 e2 c5 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0120bb5:	29 c3                	sub    %eax,%ebx
f0120bb7:	89 d8                	mov    %ebx,%eax
f0120bb9:	83 f8 02             	cmp    $0x2,%eax
f0120bbc:	74 17                	je     f0120bd5 <test_kfree+0x6f3>
f0120bbe:	83 ec 04             	sub    $0x4,%esp
f0120bc1:	68 7c b9 13 f0       	push   $0xf013b97c
f0120bc6:	68 07 05 00 00       	push   $0x507
f0120bcb:	68 fa b8 13 f0       	push   $0xf013b8fa
f0120bd0:	e8 30 f6 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0120bd5:	c7 85 f8 fd ff ff ff 	movl   $0x1bff,-0x208(%ebp)
f0120bdc:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0120bdf:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0120be5:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0120be8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120bef:	eb 0e                	jmp    f0120bff <test_kfree+0x71d>
		{
			ptr[i] = 4 ;
f0120bf1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120bf4:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120bf7:	01 d0                	add    %edx,%eax
f0120bf9:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0120bfc:	ff 45 f4             	incl   -0xc(%ebp)
f0120bff:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0120c05:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120c08:	7f e7                	jg     f0120bf1 <test_kfree+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0120c0a:	e8 88 c5 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0120c0f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120c12:	e8 b1 31 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120c17:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0120c1a:	83 ec 0c             	sub    $0xc,%esp
f0120c1d:	68 00 fc 2f 00       	push   $0x2ffc00
f0120c22:	e8 64 71 fe ff       	call   f0107d8b <kmalloc>
f0120c27:	83 c4 10             	add    $0x10,%esp
f0120c2a:	89 85 5c fd ff ff    	mov    %eax,-0x2a4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120c30:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0120c36:	89 c1                	mov    %eax,%ecx
f0120c38:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0120c3f:	10 00 00 
f0120c42:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0120c48:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120c4d:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0120c53:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0120c59:	ba 00 00 00 00       	mov    $0x0,%edx
f0120c5e:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0120c64:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0120c6a:	29 d0                	sub    %edx,%eax
f0120c6c:	89 c3                	mov    %eax,%ebx
f0120c6e:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0120c75:	10 00 00 
f0120c78:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0120c7d:	0f b6 d0             	movzbl %al,%edx
f0120c80:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0120c86:	01 d0                	add    %edx,%eax
f0120c88:	48                   	dec    %eax
f0120c89:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0120c8f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0120c95:	ba 00 00 00 00       	mov    $0x0,%edx
f0120c9a:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0120ca0:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0120ca6:	29 d0                	sub    %edx,%eax
f0120ca8:	01 c3                	add    %eax,%ebx
f0120caa:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0120cb1:	10 00 00 
f0120cb4:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0120cb9:	0f b6 c0             	movzbl %al,%eax
f0120cbc:	c1 e0 04             	shl    $0x4,%eax
f0120cbf:	89 c2                	mov    %eax,%edx
f0120cc1:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0120cc7:	01 d0                	add    %edx,%eax
f0120cc9:	48                   	dec    %eax
f0120cca:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0120cd0:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0120cd6:	ba 00 00 00 00       	mov    $0x0,%edx
f0120cdb:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0120ce1:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0120ce7:	29 d0                	sub    %edx,%eax
f0120ce9:	01 d8                	add    %ebx,%eax
f0120ceb:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0120cf0:	39 c1                	cmp    %eax,%ecx
f0120cf2:	74 17                	je     f0120d0b <test_kfree+0x829>
f0120cf4:	83 ec 04             	sub    $0x4,%esp
f0120cf7:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0120cfc:	68 13 05 00 00       	push   $0x513
f0120d01:	68 fa b8 13 f0       	push   $0xf013b8fa
f0120d06:	e8 fa f4 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120d0b:	e8 b8 30 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120d10:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120d13:	74 17                	je     f0120d2c <test_kfree+0x84a>
f0120d15:	83 ec 04             	sub    $0x4,%esp
f0120d18:	68 14 b9 13 f0       	push   $0xf013b914
f0120d1d:	68 14 05 00 00       	push   $0x514
f0120d22:	68 fa b8 13 f0       	push   $0xf013b8fa
f0120d27:	e8 d9 f4 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120d2c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120d2f:	e8 63 c4 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0120d34:	29 c3                	sub    %eax,%ebx
f0120d36:	89 d8                	mov    %ebx,%eax
f0120d38:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120d3d:	74 17                	je     f0120d56 <test_kfree+0x874>
f0120d3f:	83 ec 04             	sub    $0x4,%esp
f0120d42:	68 7c b9 13 f0       	push   $0xf013b97c
f0120d47:	68 15 05 00 00       	push   $0x515
f0120d4c:	68 fa b8 13 f0       	push   $0xf013b8fa
f0120d51:	e8 af f4 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0120d56:	c7 85 fc fd ff ff ff 	movl   $0x2ffbff,-0x204(%ebp)
f0120d5d:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0120d60:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0120d66:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0120d69:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120d70:	eb 0e                	jmp    f0120d80 <test_kfree+0x89e>
		{
			ptr[i] = 5 ;
f0120d72:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120d75:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120d78:	01 d0                	add    %edx,%eax
f0120d7a:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0120d7d:	ff 45 f4             	incl   -0xc(%ebp)
f0120d80:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0120d86:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120d89:	7f e7                	jg     f0120d72 <test_kfree+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0120d8b:	e8 07 c4 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0120d90:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120d93:	e8 30 30 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120d98:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0120d9b:	83 ec 0c             	sub    $0xc,%esp
f0120d9e:	68 00 fc 5f 00       	push   $0x5ffc00
f0120da3:	e8 e3 6f fe ff       	call   f0107d8b <kmalloc>
f0120da8:	83 c4 10             	add    $0x10,%esp
f0120dab:	89 85 60 fd ff ff    	mov    %eax,-0x2a0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120db1:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f0120db7:	89 c1                	mov    %eax,%ecx
f0120db9:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0120dc0:	10 00 00 
f0120dc3:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0120dc9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120dce:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0120dd4:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0120dda:	ba 00 00 00 00       	mov    $0x0,%edx
f0120ddf:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0120de5:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0120deb:	29 d0                	sub    %edx,%eax
f0120ded:	89 c3                	mov    %eax,%ebx
f0120def:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0120df6:	10 00 00 
f0120df9:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0120dfe:	0f b6 d0             	movzbl %al,%edx
f0120e01:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0120e07:	01 d0                	add    %edx,%eax
f0120e09:	48                   	dec    %eax
f0120e0a:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0120e10:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0120e16:	ba 00 00 00 00       	mov    $0x0,%edx
f0120e1b:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0120e21:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0120e27:	29 d0                	sub    %edx,%eax
f0120e29:	01 c3                	add    %eax,%ebx
f0120e2b:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0120e32:	10 00 00 
f0120e35:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0120e3a:	0f b6 c0             	movzbl %al,%eax
f0120e3d:	c1 e0 04             	shl    $0x4,%eax
f0120e40:	89 c2                	mov    %eax,%edx
f0120e42:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0120e48:	01 d0                	add    %edx,%eax
f0120e4a:	48                   	dec    %eax
f0120e4b:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0120e51:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120e57:	ba 00 00 00 00       	mov    $0x0,%edx
f0120e5c:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0120e62:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120e68:	29 d0                	sub    %edx,%eax
f0120e6a:	01 d8                	add    %ebx,%eax
f0120e6c:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0120e71:	39 c1                	cmp    %eax,%ecx
f0120e73:	74 17                	je     f0120e8c <test_kfree+0x9aa>
f0120e75:	83 ec 04             	sub    $0x4,%esp
f0120e78:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0120e7d:	68 21 05 00 00       	push   $0x521
f0120e82:	68 fa b8 13 f0       	push   $0xf013b8fa
f0120e87:	e8 79 f3 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120e8c:	e8 37 2f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120e91:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120e94:	74 17                	je     f0120ead <test_kfree+0x9cb>
f0120e96:	83 ec 04             	sub    $0x4,%esp
f0120e99:	68 14 b9 13 f0       	push   $0xf013b914
f0120e9e:	68 22 05 00 00       	push   $0x522
f0120ea3:	68 fa b8 13 f0       	push   $0xf013b8fa
f0120ea8:	e8 58 f3 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120ead:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120eb0:	e8 e2 c2 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0120eb5:	29 c3                	sub    %eax,%ebx
f0120eb7:	89 d8                	mov    %ebx,%eax
f0120eb9:	3d 00 06 00 00       	cmp    $0x600,%eax
f0120ebe:	74 17                	je     f0120ed7 <test_kfree+0x9f5>
f0120ec0:	83 ec 04             	sub    $0x4,%esp
f0120ec3:	68 7c b9 13 f0       	push   $0xf013b97c
f0120ec8:	68 23 05 00 00       	push   $0x523
f0120ecd:	68 fa b8 13 f0       	push   $0xf013b8fa
f0120ed2:	e8 2e f3 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0120ed7:	c7 85 00 fe ff ff ff 	movl   $0x5ffbff,-0x200(%ebp)
f0120ede:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0120ee1:	e8 b1 c2 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0120ee6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120ee9:	e8 da 2e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120eee:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0120ef1:	83 ec 0c             	sub    $0xc,%esp
f0120ef4:	68 00 38 00 00       	push   $0x3800
f0120ef9:	e8 8d 6e fe ff       	call   f0107d8b <kmalloc>
f0120efe:	83 c4 10             	add    $0x10,%esp
f0120f01:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120f07:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0120f0d:	89 c1                	mov    %eax,%ecx
f0120f0f:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0120f16:	10 00 00 
f0120f19:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0120f1f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120f24:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0120f2a:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0120f30:	ba 00 00 00 00       	mov    $0x0,%edx
f0120f35:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0120f3b:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0120f41:	29 d0                	sub    %edx,%eax
f0120f43:	89 c3                	mov    %eax,%ebx
f0120f45:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0120f4c:	10 00 00 
f0120f4f:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0120f54:	0f b6 d0             	movzbl %al,%edx
f0120f57:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0120f5d:	01 d0                	add    %edx,%eax
f0120f5f:	48                   	dec    %eax
f0120f60:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0120f66:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0120f6c:	ba 00 00 00 00       	mov    $0x0,%edx
f0120f71:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0120f77:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0120f7d:	29 d0                	sub    %edx,%eax
f0120f7f:	01 c3                	add    %eax,%ebx
f0120f81:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0120f88:	10 00 00 
f0120f8b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0120f90:	0f b6 c0             	movzbl %al,%eax
f0120f93:	c1 e0 04             	shl    $0x4,%eax
f0120f96:	89 c2                	mov    %eax,%edx
f0120f98:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0120f9e:	01 d0                	add    %edx,%eax
f0120fa0:	48                   	dec    %eax
f0120fa1:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0120fa7:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0120fad:	ba 00 00 00 00       	mov    $0x0,%edx
f0120fb2:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0120fb8:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0120fbe:	29 d0                	sub    %edx,%eax
f0120fc0:	01 d8                	add    %ebx,%eax
f0120fc2:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0120fc7:	39 c1                	cmp    %eax,%ecx
f0120fc9:	74 17                	je     f0120fe2 <test_kfree+0xb00>
f0120fcb:	83 ec 04             	sub    $0x4,%esp
f0120fce:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0120fd3:	68 2a 05 00 00       	push   $0x52a
f0120fd8:	68 fa b8 13 f0       	push   $0xf013b8fa
f0120fdd:	e8 23 f2 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120fe2:	e8 e1 2d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120fe7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120fea:	74 17                	je     f0121003 <test_kfree+0xb21>
f0120fec:	83 ec 04             	sub    $0x4,%esp
f0120fef:	68 14 b9 13 f0       	push   $0xf013b914
f0120ff4:	68 2b 05 00 00       	push   $0x52b
f0120ff9:	68 fa b8 13 f0       	push   $0xf013b8fa
f0120ffe:	e8 02 f2 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121003:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121006:	e8 8c c1 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012100b:	29 c3                	sub    %eax,%ebx
f012100d:	89 d8                	mov    %ebx,%eax
f012100f:	83 f8 04             	cmp    $0x4,%eax
f0121012:	74 17                	je     f012102b <test_kfree+0xb49>
f0121014:	83 ec 04             	sub    $0x4,%esp
f0121017:	68 7c b9 13 f0       	push   $0xf013b97c
f012101c:	68 2c 05 00 00       	push   $0x52c
f0121021:	68 fa b8 13 f0       	push   $0xf013b8fa
f0121026:	e8 da f1 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f012102b:	c7 85 04 fe ff ff ff 	movl   $0x37ff,-0x1fc(%ebp)
f0121032:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0121035:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f012103b:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012103e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121045:	eb 0e                	jmp    f0121055 <test_kfree+0xb73>
		{
			ptr[i] = 7 ;
f0121047:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012104a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012104d:	01 d0                	add    %edx,%eax
f012104f:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0121052:	ff 45 f4             	incl   -0xc(%ebp)
f0121055:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012105b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012105e:	7f e7                	jg     f0121047 <test_kfree+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0121060:	e8 32 c1 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0121065:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012106b:	e8 58 2d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121070:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0121076:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f012107c:	83 ec 0c             	sub    $0xc,%esp
f012107f:	50                   	push   %eax
f0121080:	e8 d1 6d fe ff       	call   f0107e56 <kfree>
f0121085:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121088:	e8 3b 2d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012108d:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0121093:	74 17                	je     f01210ac <test_kfree+0xbca>
f0121095:	83 ec 04             	sub    $0x4,%esp
f0121098:	68 14 b9 13 f0       	push   $0xf013b914
f012109d:	68 3b 05 00 00       	push   $0x53b
f01210a2:	68 fa b8 13 f0       	push   $0xf013b8fa
f01210a7:	e8 59 f1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01210ac:	e8 e6 c0 fe ff       	call   f010d197 <sys_calculate_free_frames>
f01210b1:	89 c2                	mov    %eax,%edx
f01210b3:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01210b9:	29 c2                	sub    %eax,%edx
f01210bb:	89 d0                	mov    %edx,%eax
f01210bd:	3d 00 02 00 00       	cmp    $0x200,%eax
f01210c2:	74 17                	je     f01210db <test_kfree+0xbf9>
f01210c4:	83 ec 04             	sub    $0x4,%esp
f01210c7:	68 84 c0 13 f0       	push   $0xf013c084
f01210cc:	68 3c 05 00 00       	push   $0x53c
f01210d1:	68 fa b8 13 f0       	push   $0xf013b8fa
f01210d6:	e8 2a f1 fd ff       	call   f0100205 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01210db:	e8 b7 c0 fe ff       	call   f010d197 <sys_calculate_free_frames>
f01210e0:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01210e6:	e8 dd 2c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01210eb:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f01210f1:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f01210f7:	83 ec 0c             	sub    $0xc,%esp
f01210fa:	50                   	push   %eax
f01210fb:	e8 56 6d fe ff       	call   f0107e56 <kfree>
f0121100:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121103:	e8 c0 2c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121108:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f012110e:	74 17                	je     f0121127 <test_kfree+0xc45>
f0121110:	83 ec 04             	sub    $0x4,%esp
f0121113:	68 14 b9 13 f0       	push   $0xf013b914
f0121118:	68 42 05 00 00       	push   $0x542
f012111d:	68 fa b8 13 f0       	push   $0xf013b8fa
f0121122:	e8 de f0 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0121127:	e8 6b c0 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012112c:	89 c2                	mov    %eax,%edx
f012112e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0121134:	29 c2                	sub    %eax,%edx
f0121136:	89 d0                	mov    %edx,%eax
f0121138:	83 f8 01             	cmp    $0x1,%eax
f012113b:	74 17                	je     f0121154 <test_kfree+0xc72>
f012113d:	83 ec 04             	sub    $0x4,%esp
f0121140:	68 84 c0 13 f0       	push   $0xf013c084
f0121145:	68 43 05 00 00       	push   $0x543
f012114a:	68 fa b8 13 f0       	push   $0xf013b8fa
f012114f:	e8 b1 f0 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121154:	e8 3e c0 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0121159:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012115f:	e8 64 2c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121164:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f012116a:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f0121170:	83 ec 0c             	sub    $0xc,%esp
f0121173:	50                   	push   %eax
f0121174:	e8 dd 6c fe ff       	call   f0107e56 <kfree>
f0121179:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012117c:	e8 47 2c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121181:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0121187:	74 17                	je     f01211a0 <test_kfree+0xcbe>
f0121189:	83 ec 04             	sub    $0x4,%esp
f012118c:	68 14 b9 13 f0       	push   $0xf013b914
f0121191:	68 49 05 00 00       	push   $0x549
f0121196:	68 fa b8 13 f0       	push   $0xf013b8fa
f012119b:	e8 65 f0 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01211a0:	e8 f2 bf fe ff       	call   f010d197 <sys_calculate_free_frames>
f01211a5:	89 c2                	mov    %eax,%edx
f01211a7:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01211ad:	29 c2                	sub    %eax,%edx
f01211af:	89 d0                	mov    %edx,%eax
f01211b1:	3d 00 02 00 00       	cmp    $0x200,%eax
f01211b6:	74 17                	je     f01211cf <test_kfree+0xced>
f01211b8:	83 ec 04             	sub    $0x4,%esp
f01211bb:	68 84 c0 13 f0       	push   $0xf013c084
f01211c0:	68 4a 05 00 00       	push   $0x54a
f01211c5:	68 fa b8 13 f0       	push   $0xf013b8fa
f01211ca:	e8 36 f0 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01211cf:	e8 c3 bf fe ff       	call   f010d197 <sys_calculate_free_frames>
f01211d4:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01211da:	e8 e9 2b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01211df:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f01211e5:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f01211eb:	83 ec 0c             	sub    $0xc,%esp
f01211ee:	50                   	push   %eax
f01211ef:	e8 62 6c fe ff       	call   f0107e56 <kfree>
f01211f4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01211f7:	e8 cc 2b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01211fc:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0121202:	74 17                	je     f012121b <test_kfree+0xd39>
f0121204:	83 ec 04             	sub    $0x4,%esp
f0121207:	68 14 b9 13 f0       	push   $0xf013b914
f012120c:	68 50 05 00 00       	push   $0x550
f0121211:	68 fa b8 13 f0       	push   $0xf013b8fa
f0121216:	e8 ea ef fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012121b:	e8 77 bf fe ff       	call   f010d197 <sys_calculate_free_frames>
f0121220:	89 c2                	mov    %eax,%edx
f0121222:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0121228:	29 c2                	sub    %eax,%edx
f012122a:	89 d0                	mov    %edx,%eax
f012122c:	3d 00 06 00 00       	cmp    $0x600,%eax
f0121231:	74 17                	je     f012124a <test_kfree+0xd68>
f0121233:	83 ec 04             	sub    $0x4,%esp
f0121236:	68 84 c0 13 f0       	push   $0xf013c084
f012123b:	68 51 05 00 00       	push   $0x551
f0121240:	68 fa b8 13 f0       	push   $0xf013b8fa
f0121245:	e8 bb ef fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f012124a:	83 ec 0c             	sub    $0xc,%esp
f012124d:	68 bc c0 13 f0       	push   $0xf013c0bc
f0121252:	e8 b7 fa fd ff       	call   f0100d0e <cprintf>
f0121257:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f012125a:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0121260:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0121263:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012126a:	eb 1e                	jmp    f012128a <test_kfree+0xda8>
		{
			sums[3] += ptr[i] ;
f012126c:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f0121272:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0121275:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121278:	01 c8                	add    %ecx,%eax
f012127a:	8a 00                	mov    (%eax),%al
f012127c:	0f be c0             	movsbl %al,%eax
f012127f:	01 d0                	add    %edx,%eax
f0121281:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0121287:	ff 45 f4             	incl   -0xc(%ebp)
f012128a:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0121290:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121293:	7f d7                	jg     f012126c <test_kfree+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0121295:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012129b:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01212a1:	89 c1                	mov    %eax,%ecx
f01212a3:	01 c9                	add    %ecx,%ecx
f01212a5:	01 c8                	add    %ecx,%eax
f01212a7:	39 c2                	cmp    %eax,%edx
f01212a9:	74 17                	je     f01212c2 <test_kfree+0xde0>
f01212ab:	83 ec 04             	sub    $0x4,%esp
f01212ae:	68 e0 c0 13 f0       	push   $0xf013c0e0
f01212b3:	68 5e 05 00 00       	push   $0x55e
f01212b8:	68 fa b8 13 f0       	push   $0xf013b8fa
f01212bd:	e8 43 ef fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f01212c2:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f01212c8:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01212cb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01212d2:	eb 1e                	jmp    f01212f2 <test_kfree+0xe10>
		{
			sums[4] += ptr[i] ;
f01212d4:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f01212da:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01212dd:	8b 45 80             	mov    -0x80(%ebp),%eax
f01212e0:	01 c8                	add    %ecx,%eax
f01212e2:	8a 00                	mov    (%eax),%al
f01212e4:	0f be c0             	movsbl %al,%eax
f01212e7:	01 d0                	add    %edx,%eax
f01212e9:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01212ef:	ff 45 f4             	incl   -0xc(%ebp)
f01212f2:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f01212f8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01212fb:	7f d7                	jg     f01212d4 <test_kfree+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f01212fd:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f0121303:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f0121309:	c1 e2 02             	shl    $0x2,%edx
f012130c:	39 d0                	cmp    %edx,%eax
f012130e:	74 17                	je     f0121327 <test_kfree+0xe45>
f0121310:	83 ec 04             	sub    $0x4,%esp
f0121313:	68 e0 c0 13 f0       	push   $0xf013c0e0
f0121318:	68 66 05 00 00       	push   $0x566
f012131d:	68 fa b8 13 f0       	push   $0xf013b8fa
f0121322:	e8 de ee fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0121327:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f012132d:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0121330:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121337:	eb 1e                	jmp    f0121357 <test_kfree+0xe75>
		{
			sums[5] += ptr[i] ;
f0121339:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f012133f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0121342:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121345:	01 c8                	add    %ecx,%eax
f0121347:	8a 00                	mov    (%eax),%al
f0121349:	0f be c0             	movsbl %al,%eax
f012134c:	01 d0                	add    %edx,%eax
f012134e:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0121354:	ff 45 f4             	incl   -0xc(%ebp)
f0121357:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012135d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121360:	7f d7                	jg     f0121339 <test_kfree+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0121362:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f0121368:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012136e:	89 d0                	mov    %edx,%eax
f0121370:	c1 e0 02             	shl    $0x2,%eax
f0121373:	01 d0                	add    %edx,%eax
f0121375:	39 c1                	cmp    %eax,%ecx
f0121377:	74 17                	je     f0121390 <test_kfree+0xeae>
f0121379:	83 ec 04             	sub    $0x4,%esp
f012137c:	68 e0 c0 13 f0       	push   $0xf013c0e0
f0121381:	68 6e 05 00 00       	push   $0x56e
f0121386:	68 fa b8 13 f0       	push   $0xf013b8fa
f012138b:	e8 75 ee fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0121390:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0121396:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0121399:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01213a0:	eb 1e                	jmp    f01213c0 <test_kfree+0xede>
		{
			sums[7] += ptr[i] ;
f01213a2:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f01213a8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01213ab:	8b 45 80             	mov    -0x80(%ebp),%eax
f01213ae:	01 c8                	add    %ecx,%eax
f01213b0:	8a 00                	mov    (%eax),%al
f01213b2:	0f be c0             	movsbl %al,%eax
f01213b5:	01 d0                	add    %edx,%eax
f01213b7:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01213bd:	ff 45 f4             	incl   -0xc(%ebp)
f01213c0:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f01213c6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01213c9:	7f d7                	jg     f01213a2 <test_kfree+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f01213cb:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f01213d1:	8b 95 04 fe ff ff    	mov    -0x1fc(%ebp),%edx
f01213d7:	89 d0                	mov    %edx,%eax
f01213d9:	01 c0                	add    %eax,%eax
f01213db:	01 d0                	add    %edx,%eax
f01213dd:	01 c0                	add    %eax,%eax
f01213df:	01 d0                	add    %edx,%eax
f01213e1:	39 c1                	cmp    %eax,%ecx
f01213e3:	74 17                	je     f01213fc <test_kfree+0xf1a>
f01213e5:	83 ec 04             	sub    $0x4,%esp
f01213e8:	68 e0 c0 13 f0       	push   $0xf013c0e0
f01213ed:	68 76 05 00 00       	push   $0x576
f01213f2:	68 fa b8 13 f0       	push   $0xf013b8fa
f01213f7:	e8 09 ee fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b30%");
f01213fc:	83 ec 0c             	sub    $0xc,%esp
f01213ff:	68 13 c1 13 f0       	push   $0xf013c113
f0121404:	e8 05 f9 fd ff       	call   f0100d0e <cprintf>
f0121409:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f012140c:	e8 86 bd fe ff       	call   f010d197 <sys_calculate_free_frames>
f0121411:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121414:	e8 af 29 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121419:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f012141c:	83 ec 0c             	sub    $0xc,%esp
f012141f:	68 00 50 00 00       	push   $0x5000
f0121424:	e8 62 69 fe ff       	call   f0107d8b <kmalloc>
f0121429:	83 c4 10             	add    $0x10,%esp
f012142c:	89 85 68 fd ff ff    	mov    %eax,-0x298(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121432:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0121438:	89 c1                	mov    %eax,%ecx
f012143a:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0121441:	10 00 00 
f0121444:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012144a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012144f:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0121455:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012145b:	ba 00 00 00 00       	mov    $0x0,%edx
f0121460:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0121466:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012146c:	29 d0                	sub    %edx,%eax
f012146e:	89 c3                	mov    %eax,%ebx
f0121470:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0121477:	10 00 00 
f012147a:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012147f:	0f b6 d0             	movzbl %al,%edx
f0121482:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0121488:	01 d0                	add    %edx,%eax
f012148a:	48                   	dec    %eax
f012148b:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0121491:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0121497:	ba 00 00 00 00       	mov    $0x0,%edx
f012149c:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f01214a2:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01214a8:	29 d0                	sub    %edx,%eax
f01214aa:	01 c3                	add    %eax,%ebx
f01214ac:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f01214b3:	10 00 00 
f01214b6:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01214bb:	0f b6 c0             	movzbl %al,%eax
f01214be:	c1 e0 04             	shl    $0x4,%eax
f01214c1:	89 c2                	mov    %eax,%edx
f01214c3:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01214c9:	01 d0                	add    %edx,%eax
f01214cb:	48                   	dec    %eax
f01214cc:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f01214d2:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01214d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01214dd:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f01214e3:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01214e9:	29 d0                	sub    %edx,%eax
f01214eb:	01 d8                	add    %ebx,%eax
f01214ed:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01214f2:	39 c1                	cmp    %eax,%ecx
f01214f4:	74 17                	je     f012150d <test_kfree+0x102b>
f01214f6:	83 ec 04             	sub    $0x4,%esp
f01214f9:	68 e0 b9 13 f0       	push   $0xf013b9e0
f01214fe:	68 80 05 00 00       	push   $0x580
f0121503:	68 fa b8 13 f0       	push   $0xf013b8fa
f0121508:	e8 f8 ec fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012150d:	e8 b6 28 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121512:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121515:	74 17                	je     f012152e <test_kfree+0x104c>
f0121517:	83 ec 04             	sub    $0x4,%esp
f012151a:	68 14 b9 13 f0       	push   $0xf013b914
f012151f:	68 81 05 00 00       	push   $0x581
f0121524:	68 fa b8 13 f0       	push   $0xf013b8fa
f0121529:	e8 d7 ec fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f012152e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121531:	e8 61 bc fe ff       	call   f010d197 <sys_calculate_free_frames>
f0121536:	29 c3                	sub    %eax,%ebx
f0121538:	89 d8                	mov    %ebx,%eax
f012153a:	83 f8 05             	cmp    $0x5,%eax
f012153d:	74 17                	je     f0121556 <test_kfree+0x1074>
f012153f:	83 ec 04             	sub    $0x4,%esp
f0121542:	68 7c b9 13 f0       	push   $0xf013b97c
f0121547:	68 82 05 00 00       	push   $0x582
f012154c:	68 fa b8 13 f0       	push   $0xf013b8fa
f0121551:	e8 af ec fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0121556:	c7 85 08 fe ff ff ff 	movl   $0x4fff,-0x1f8(%ebp)
f012155d:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0121560:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0121566:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0121569:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121570:	eb 0e                	jmp    f0121580 <test_kfree+0x109e>
		{
			ptr[i] = 8 ;
f0121572:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121575:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121578:	01 d0                	add    %edx,%eax
f012157a:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f012157d:	ff 45 f4             	incl   -0xc(%ebp)
f0121580:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0121586:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121589:	7f e7                	jg     f0121572 <test_kfree+0x1090>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012158b:	e8 07 bc fe ff       	call   f010d197 <sys_calculate_free_frames>
f0121590:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121593:	e8 30 28 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121598:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f012159b:	83 ec 0c             	sub    $0xc,%esp
f012159e:	68 00 00 10 00       	push   $0x100000
f01215a3:	e8 e3 67 fe ff       	call   f0107d8b <kmalloc>
f01215a8:	83 c4 10             	add    $0x10,%esp
f01215ab:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01215b1:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f01215b7:	89 c1                	mov    %eax,%ecx
f01215b9:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f01215c0:	10 00 00 
f01215c3:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01215c9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01215ce:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f01215d4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01215da:	ba 00 00 00 00       	mov    $0x0,%edx
f01215df:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f01215e5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01215eb:	29 d0                	sub    %edx,%eax
f01215ed:	89 c3                	mov    %eax,%ebx
f01215ef:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f01215f6:	10 00 00 
f01215f9:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01215fe:	0f b6 d0             	movzbl %al,%edx
f0121601:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0121607:	01 d0                	add    %edx,%eax
f0121609:	48                   	dec    %eax
f012160a:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0121610:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0121616:	ba 00 00 00 00       	mov    $0x0,%edx
f012161b:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0121621:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0121627:	29 d0                	sub    %edx,%eax
f0121629:	01 c3                	add    %eax,%ebx
f012162b:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0121632:	10 00 00 
f0121635:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012163a:	0f b6 c0             	movzbl %al,%eax
f012163d:	c1 e0 04             	shl    $0x4,%eax
f0121640:	89 c2                	mov    %eax,%edx
f0121642:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0121648:	01 d0                	add    %edx,%eax
f012164a:	48                   	dec    %eax
f012164b:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0121651:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0121657:	ba 00 00 00 00       	mov    $0x0,%edx
f012165c:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0121662:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0121668:	29 d0                	sub    %edx,%eax
f012166a:	01 d8                	add    %ebx,%eax
f012166c:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0121671:	39 c1                	cmp    %eax,%ecx
f0121673:	74 17                	je     f012168c <test_kfree+0x11aa>
f0121675:	83 ec 04             	sub    $0x4,%esp
f0121678:	68 e0 b9 13 f0       	push   $0xf013b9e0
f012167d:	68 8e 05 00 00       	push   $0x58e
f0121682:	68 fa b8 13 f0       	push   $0xf013b8fa
f0121687:	e8 79 eb fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012168c:	e8 37 27 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121691:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121694:	74 17                	je     f01216ad <test_kfree+0x11cb>
f0121696:	83 ec 04             	sub    $0x4,%esp
f0121699:	68 14 b9 13 f0       	push   $0xf013b914
f012169e:	68 8f 05 00 00       	push   $0x58f
f01216a3:	68 fa b8 13 f0       	push   $0xf013b8fa
f01216a8:	e8 58 eb fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f01216ad:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01216b0:	e8 e2 ba fe ff       	call   f010d197 <sys_calculate_free_frames>
f01216b5:	29 c3                	sub    %eax,%ebx
f01216b7:	89 d8                	mov    %ebx,%eax
f01216b9:	3d 00 01 00 00       	cmp    $0x100,%eax
f01216be:	74 17                	je     f01216d7 <test_kfree+0x11f5>
f01216c0:	83 ec 04             	sub    $0x4,%esp
f01216c3:	68 7c b9 13 f0       	push   $0xf013b97c
f01216c8:	68 90 05 00 00       	push   $0x590
f01216cd:	68 fa b8 13 f0       	push   $0xf013b8fa
f01216d2:	e8 2e eb fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f01216d7:	c7 85 0c fe ff ff ff 	movl   $0xfffff,-0x1f4(%ebp)
f01216de:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f01216e1:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f01216e7:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f01216ea:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01216f1:	eb 0e                	jmp    f0121701 <test_kfree+0x121f>
		{
			ptr[i] = 9 ;
f01216f3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01216f6:	8b 45 80             	mov    -0x80(%ebp),%eax
f01216f9:	01 d0                	add    %edx,%eax
f01216fb:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f01216fe:	ff 45 f4             	incl   -0xc(%ebp)
f0121701:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0121707:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012170a:	7f e7                	jg     f01216f3 <test_kfree+0x1211>
		{
			ptr[i] = 9 ;
		}

		if (isKHeapPlacementStrategyNEXTFIT())
f012170c:	e8 ac 66 ff ff       	call   f0117dbd <isKHeapPlacementStrategyNEXTFIT>
f0121711:	84 c0                	test   %al,%al
f0121713:	0f 84 ac 06 00 00    	je     f0121dc5 <test_kfree+0x18e3>
		{
			//Allocate Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0121719:	e8 79 ba fe ff       	call   f010d197 <sys_calculate_free_frames>
f012171e:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121721:	e8 a2 26 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121726:	89 45 cc             	mov    %eax,-0x34(%ebp)
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f0121729:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0121730:	10 00 00 
f0121733:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0121739:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012173e:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0121744:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012174a:	ba 00 00 00 00       	mov    $0x0,%edx
f012174f:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0121755:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012175b:	29 d0                	sub    %edx,%eax
f012175d:	89 c1                	mov    %eax,%ecx
f012175f:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0121766:	10 00 00 
f0121769:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012176e:	0f b6 d0             	movzbl %al,%edx
f0121771:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0121777:	01 d0                	add    %edx,%eax
f0121779:	48                   	dec    %eax
f012177a:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0121780:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0121786:	ba 00 00 00 00       	mov    $0x0,%edx
f012178b:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0121791:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0121797:	29 d0                	sub    %edx,%eax
f0121799:	01 c1                	add    %eax,%ecx
f012179b:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f01217a2:	10 00 00 
f01217a5:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01217aa:	0f b6 c0             	movzbl %al,%eax
f01217ad:	c1 e0 04             	shl    $0x4,%eax
f01217b0:	89 c2                	mov    %eax,%edx
f01217b2:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01217b8:	01 d0                	add    %edx,%eax
f01217ba:	48                   	dec    %eax
f01217bb:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f01217c1:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01217c7:	ba 00 00 00 00       	mov    $0x0,%edx
f01217cc:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f01217d2:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01217d8:	29 d0                	sub    %edx,%eax
f01217da:	01 c8                	add    %ecx,%eax
f01217dc:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f01217e1:	29 c2                	sub    %eax,%edx
f01217e3:	89 d0                	mov    %edx,%eax
f01217e5:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			ptr_allocations[10] = kmalloc(reqAllocatedSpace);
f01217eb:	83 ec 0c             	sub    $0xc,%esp
f01217ee:	ff b5 b4 fe ff ff    	pushl  -0x14c(%ebp)
f01217f4:	e8 92 65 fe ff       	call   f0107d8b <kmalloc>
f01217f9:	83 c4 10             	add    $0x10,%esp
f01217fc:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
			if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121802:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0121808:	89 c1                	mov    %eax,%ecx
f012180a:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f0121811:	10 00 00 
f0121814:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012181a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012181f:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f0121825:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012182b:	ba 00 00 00 00       	mov    $0x0,%edx
f0121830:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f0121836:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012183c:	29 d0                	sub    %edx,%eax
f012183e:	89 c3                	mov    %eax,%ebx
f0121840:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0121847:	10 00 00 
f012184a:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012184f:	0f b6 d0             	movzbl %al,%edx
f0121852:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0121858:	01 d0                	add    %edx,%eax
f012185a:	48                   	dec    %eax
f012185b:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0121861:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0121867:	ba 00 00 00 00       	mov    $0x0,%edx
f012186c:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0121872:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0121878:	29 d0                	sub    %edx,%eax
f012187a:	01 c3                	add    %eax,%ebx
f012187c:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0121883:	10 00 00 
f0121886:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012188b:	0f b6 c0             	movzbl %al,%eax
f012188e:	c1 e0 04             	shl    $0x4,%eax
f0121891:	89 c2                	mov    %eax,%edx
f0121893:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0121899:	01 d0                	add    %edx,%eax
f012189b:	48                   	dec    %eax
f012189c:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f01218a2:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01218a8:	ba 00 00 00 00       	mov    $0x0,%edx
f01218ad:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f01218b3:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01218b9:	29 d0                	sub    %edx,%eax
f01218bb:	01 d8                	add    %ebx,%eax
f01218bd:	2d 00 f0 1e 09       	sub    $0x91ef000,%eax
f01218c2:	39 c1                	cmp    %eax,%ecx
f01218c4:	74 17                	je     f01218dd <test_kfree+0x13fb>
f01218c6:	83 ec 04             	sub    $0x4,%esp
f01218c9:	68 e0 b9 13 f0       	push   $0xf013b9e0
f01218ce:	68 9f 05 00 00       	push   $0x59f
f01218d3:	68 fa b8 13 f0       	push   $0xf013b8fa
f01218d8:	e8 28 e9 fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01218dd:	e8 e6 24 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01218e2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01218e5:	74 17                	je     f01218fe <test_kfree+0x141c>
f01218e7:	83 ec 04             	sub    $0x4,%esp
f01218ea:	68 14 b9 13 f0       	push   $0xf013b914
f01218ef:	68 a0 05 00 00       	push   $0x5a0
f01218f4:	68 fa b8 13 f0       	push   $0xf013b8fa
f01218f9:	e8 07 e9 fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f01218fe:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121901:	e8 91 b8 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0121906:	29 c3                	sub    %eax,%ebx
f0121908:	89 da                	mov    %ebx,%edx
f012190a:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0121910:	c1 e8 0c             	shr    $0xc,%eax
f0121913:	39 c2                	cmp    %eax,%edx
f0121915:	74 17                	je     f012192e <test_kfree+0x144c>
f0121917:	83 ec 04             	sub    $0x4,%esp
f012191a:	68 7c b9 13 f0       	push   $0xf013b97c
f012191f:	68 a1 05 00 00       	push   $0x5a1
f0121924:	68 fa b8 13 f0       	push   $0xf013b8fa
f0121929:	e8 d7 e8 fd ff       	call   f0100205 <_panic>
			lastIndices[10] = (reqAllocatedSpace)/sizeof(char) - 1;
f012192e:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0121934:	48                   	dec    %eax
f0121935:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
			ptr = (char*)ptr_allocations[10];
f012193b:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0121941:	89 45 80             	mov    %eax,-0x80(%ebp)
//				ptr[i] = 10;
//			}

			//Allocate in merged freed space FROM the beginning
			//3 MB
			freeFrames = sys_calculate_free_frames() ;
f0121944:	e8 4e b8 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0121949:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f012194c:	e8 77 24 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121951:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[11] = kmalloc(3*Mega);
f0121954:	83 ec 0c             	sub    $0xc,%esp
f0121957:	68 00 00 30 00       	push   $0x300000
f012195c:	e8 2a 64 fe ff       	call   f0107d8b <kmalloc>
f0121961:	83 c4 10             	add    $0x10,%esp
f0121964:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012196a:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0121970:	89 c1                	mov    %eax,%ecx
f0121972:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0121979:	10 00 00 
f012197c:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0121982:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121987:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f012198d:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0121993:	ba 00 00 00 00       	mov    $0x0,%edx
f0121998:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f012199e:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01219a4:	29 d0                	sub    %edx,%eax
f01219a6:	89 c3                	mov    %eax,%ebx
f01219a8:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f01219af:	10 00 00 
f01219b2:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01219b7:	0f b6 d0             	movzbl %al,%edx
f01219ba:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01219c0:	01 d0                	add    %edx,%eax
f01219c2:	48                   	dec    %eax
f01219c3:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f01219c9:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f01219cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01219d4:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f01219da:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f01219e0:	29 d0                	sub    %edx,%eax
f01219e2:	01 c3                	add    %eax,%ebx
f01219e4:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f01219eb:	10 00 00 
f01219ee:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01219f3:	0f b6 c0             	movzbl %al,%eax
f01219f6:	c1 e0 04             	shl    $0x4,%eax
f01219f9:	89 c2                	mov    %eax,%edx
f01219fb:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0121a01:	01 d0                	add    %edx,%eax
f0121a03:	48                   	dec    %eax
f0121a04:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f0121a0a:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0121a10:	ba 00 00 00 00       	mov    $0x0,%edx
f0121a15:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f0121a1b:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0121a21:	29 d0                	sub    %edx,%eax
f0121a23:	01 d8                	add    %ebx,%eax
f0121a25:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0121a2a:	39 c1                	cmp    %eax,%ecx
f0121a2c:	74 17                	je     f0121a45 <test_kfree+0x1563>
f0121a2e:	83 ec 04             	sub    $0x4,%esp
f0121a31:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0121a36:	68 ae 05 00 00       	push   $0x5ae
f0121a3b:	68 fa b8 13 f0       	push   $0xf013b8fa
f0121a40:	e8 c0 e7 fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121a45:	e8 7e 23 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121a4a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121a4d:	74 17                	je     f0121a66 <test_kfree+0x1584>
f0121a4f:	83 ec 04             	sub    $0x4,%esp
f0121a52:	68 14 b9 13 f0       	push   $0xf013b914
f0121a57:	68 af 05 00 00       	push   $0x5af
f0121a5c:	68 fa b8 13 f0       	push   $0xf013b8fa
f0121a61:	e8 9f e7 fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121a66:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121a69:	e8 29 b7 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0121a6e:	29 c3                	sub    %eax,%ebx
f0121a70:	89 d8                	mov    %ebx,%eax
f0121a72:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121a77:	74 17                	je     f0121a90 <test_kfree+0x15ae>
f0121a79:	83 ec 04             	sub    $0x4,%esp
f0121a7c:	68 7c b9 13 f0       	push   $0xf013b97c
f0121a81:	68 b0 05 00 00       	push   $0x5b0
f0121a86:	68 fa b8 13 f0       	push   $0xf013b8fa
f0121a8b:	e8 75 e7 fd ff       	call   f0100205 <_panic>
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
f0121a90:	c7 85 14 fe ff ff ff 	movl   $0x2fffff,-0x1ec(%ebp)
f0121a97:	ff 2f 00 
			ptr = (char*)ptr_allocations[11];
f0121a9a:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0121aa0:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[11]; ++i)
f0121aa3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121aaa:	eb 0e                	jmp    f0121aba <test_kfree+0x15d8>
			{
				ptr[i] = 8 ;
f0121aac:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121aaf:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121ab2:	01 d0                	add    %edx,%eax
f0121ab4:	c6 00 08             	movb   $0x8,(%eax)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[11];
			for (i = 0; i < lastIndices[11]; ++i)
f0121ab7:	ff 45 f4             	incl   -0xc(%ebp)
f0121aba:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0121ac0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121ac3:	7f e7                	jg     f0121aac <test_kfree+0x15ca>
			{
				ptr[i] = 8 ;
			}

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f0121ac5:	e8 cd b6 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0121aca:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121acd:	e8 f6 22 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121ad2:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[12] = kmalloc(2*kilo);
f0121ad5:	83 ec 0c             	sub    $0xc,%esp
f0121ad8:	68 00 08 00 00       	push   $0x800
f0121add:	e8 a9 62 fe ff       	call   f0107d8b <kmalloc>
f0121ae2:	83 c4 10             	add    $0x10,%esp
f0121ae5:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121aeb:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0121af1:	89 c1                	mov    %eax,%ecx
f0121af3:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f0121afa:	10 00 00 
f0121afd:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0121b03:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121b08:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f0121b0e:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0121b14:	ba 00 00 00 00       	mov    $0x0,%edx
f0121b19:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f0121b1f:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0121b25:	29 d0                	sub    %edx,%eax
f0121b27:	89 c3                	mov    %eax,%ebx
f0121b29:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0121b30:	10 00 00 
f0121b33:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0121b38:	0f b6 d0             	movzbl %al,%edx
f0121b3b:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0121b41:	01 d0                	add    %edx,%eax
f0121b43:	48                   	dec    %eax
f0121b44:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0121b4a:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0121b50:	ba 00 00 00 00       	mov    $0x0,%edx
f0121b55:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0121b5b:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0121b61:	29 d0                	sub    %edx,%eax
f0121b63:	01 c3                	add    %eax,%ebx
f0121b65:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f0121b6c:	10 00 00 
f0121b6f:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0121b74:	0f b6 c0             	movzbl %al,%eax
f0121b77:	c1 e0 04             	shl    $0x4,%eax
f0121b7a:	89 c2                	mov    %eax,%edx
f0121b7c:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0121b82:	01 d0                	add    %edx,%eax
f0121b84:	48                   	dec    %eax
f0121b85:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f0121b8b:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0121b91:	ba 00 00 00 00       	mov    $0x0,%edx
f0121b96:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f0121b9c:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0121ba2:	29 d0                	sub    %edx,%eax
f0121ba4:	01 d8                	add    %ebx,%eax
f0121ba6:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0121bab:	39 c1                	cmp    %eax,%ecx
f0121bad:	74 17                	je     f0121bc6 <test_kfree+0x16e4>
f0121baf:	83 ec 04             	sub    $0x4,%esp
f0121bb2:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0121bb7:	68 bc 05 00 00       	push   $0x5bc
f0121bbc:	68 fa b8 13 f0       	push   $0xf013b8fa
f0121bc1:	e8 3f e6 fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121bc6:	e8 fd 21 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121bcb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121bce:	74 17                	je     f0121be7 <test_kfree+0x1705>
f0121bd0:	83 ec 04             	sub    $0x4,%esp
f0121bd3:	68 14 b9 13 f0       	push   $0xf013b914
f0121bd8:	68 bd 05 00 00       	push   $0x5bd
f0121bdd:	68 fa b8 13 f0       	push   $0xf013b8fa
f0121be2:	e8 1e e6 fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121be7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121bea:	e8 a8 b5 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0121bef:	29 c3                	sub    %eax,%ebx
f0121bf1:	89 d8                	mov    %ebx,%eax
f0121bf3:	83 f8 01             	cmp    $0x1,%eax
f0121bf6:	74 17                	je     f0121c0f <test_kfree+0x172d>
f0121bf8:	83 ec 04             	sub    $0x4,%esp
f0121bfb:	68 7c b9 13 f0       	push   $0xf013b97c
f0121c00:	68 be 05 00 00       	push   $0x5be
f0121c05:	68 fa b8 13 f0       	push   $0xf013b8fa
f0121c0a:	e8 f6 e5 fd ff       	call   f0100205 <_panic>
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
f0121c0f:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f0121c16:	07 00 00 
			ptr = (char*)ptr_allocations[12];
f0121c19:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0121c1f:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[12]; ++i)
f0121c22:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121c29:	eb 0e                	jmp    f0121c39 <test_kfree+0x1757>
			{
				ptr[i] = 9 ;
f0121c2b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121c2e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121c31:	01 d0                	add    %edx,%eax
f0121c33:	c6 00 09             	movb   $0x9,(%eax)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[12];
			for (i = 0; i < lastIndices[12]; ++i)
f0121c36:	ff 45 f4             	incl   -0xc(%ebp)
f0121c39:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0121c3f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121c42:	7f e7                	jg     f0121c2b <test_kfree+0x1749>
			{
				ptr[i] = 9 ;
			}

			//1 MB
			freeFrames = sys_calculate_free_frames() ;
f0121c44:	e8 4e b5 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0121c49:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121c4c:	e8 77 21 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121c51:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[13] = kmalloc(1*Mega);
f0121c54:	83 ec 0c             	sub    $0xc,%esp
f0121c57:	68 00 00 10 00       	push   $0x100000
f0121c5c:	e8 2a 61 fe ff       	call   f0107d8b <kmalloc>
f0121c61:	83 c4 10             	add    $0x10,%esp
f0121c64:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121c6a:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0121c70:	89 c1                	mov    %eax,%ecx
f0121c72:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f0121c79:	10 00 00 
f0121c7c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0121c82:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121c87:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f0121c8d:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0121c93:	ba 00 00 00 00       	mov    $0x0,%edx
f0121c98:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f0121c9e:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0121ca4:	29 d0                	sub    %edx,%eax
f0121ca6:	89 c3                	mov    %eax,%ebx
f0121ca8:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f0121caf:	10 00 00 
f0121cb2:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0121cb7:	0f b6 d0             	movzbl %al,%edx
f0121cba:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0121cc0:	01 d0                	add    %edx,%eax
f0121cc2:	48                   	dec    %eax
f0121cc3:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f0121cc9:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0121ccf:	ba 00 00 00 00       	mov    $0x0,%edx
f0121cd4:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f0121cda:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0121ce0:	29 d0                	sub    %edx,%eax
f0121ce2:	01 c3                	add    %eax,%ebx
f0121ce4:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f0121ceb:	10 00 00 
f0121cee:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0121cf3:	0f b6 c0             	movzbl %al,%eax
f0121cf6:	c1 e0 04             	shl    $0x4,%eax
f0121cf9:	89 c2                	mov    %eax,%edx
f0121cfb:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0121d01:	01 d0                	add    %edx,%eax
f0121d03:	48                   	dec    %eax
f0121d04:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f0121d0a:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0121d10:	ba 00 00 00 00       	mov    $0x0,%edx
f0121d15:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f0121d1b:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0121d21:	29 d0                	sub    %edx,%eax
f0121d23:	01 d8                	add    %ebx,%eax
f0121d25:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0121d2a:	39 c1                	cmp    %eax,%ecx
f0121d2c:	74 17                	je     f0121d45 <test_kfree+0x1863>
f0121d2e:	83 ec 04             	sub    $0x4,%esp
f0121d31:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0121d36:	68 ca 05 00 00       	push   $0x5ca
f0121d3b:	68 fa b8 13 f0       	push   $0xf013b8fa
f0121d40:	e8 c0 e4 fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121d45:	e8 7e 20 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121d4a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121d4d:	74 17                	je     f0121d66 <test_kfree+0x1884>
f0121d4f:	83 ec 04             	sub    $0x4,%esp
f0121d52:	68 14 b9 13 f0       	push   $0xf013b914
f0121d57:	68 cb 05 00 00       	push   $0x5cb
f0121d5c:	68 fa b8 13 f0       	push   $0xf013b8fa
f0121d61:	e8 9f e4 fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121d66:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121d69:	e8 29 b4 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0121d6e:	29 c3                	sub    %eax,%ebx
f0121d70:	89 d8                	mov    %ebx,%eax
f0121d72:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121d77:	74 17                	je     f0121d90 <test_kfree+0x18ae>
f0121d79:	83 ec 04             	sub    $0x4,%esp
f0121d7c:	68 7c b9 13 f0       	push   $0xf013b97c
f0121d81:	68 cc 05 00 00       	push   $0x5cc
f0121d86:	68 fa b8 13 f0       	push   $0xf013b8fa
f0121d8b:	e8 75 e4 fd ff       	call   f0100205 <_panic>
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
f0121d90:	c7 85 1c fe ff ff ff 	movl   $0xfffff,-0x1e4(%ebp)
f0121d97:	ff 0f 00 
			ptr = (char*)ptr_allocations[13];
f0121d9a:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0121da0:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[13]; ++i)
f0121da3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121daa:	eb 0e                	jmp    f0121dba <test_kfree+0x18d8>
			{
				ptr[i] = 10 ;
f0121dac:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121daf:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121db2:	01 d0                	add    %edx,%eax
f0121db4:	c6 00 0a             	movb   $0xa,(%eax)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[13];
			for (i = 0; i < lastIndices[13]; ++i)
f0121db7:	ff 45 f4             	incl   -0xc(%ebp)
f0121dba:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0121dc0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121dc3:	7f e7                	jg     f0121dac <test_kfree+0x18ca>
			{
				ptr[i] = 10 ;
			}
		}
	}
	cprintf("\b\b\b45%");
f0121dc5:	83 ec 0c             	sub    $0xc,%esp
f0121dc8:	68 1a c1 13 f0       	push   $0xf013c11a
f0121dcd:	e8 3c ef fd ff       	call   f0100d0e <cprintf>
f0121dd2:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0121dd5:	e8 bd b3 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0121dda:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121ddd:	e8 e6 1f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121de2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0121de5:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0121deb:	83 ec 0c             	sub    $0xc,%esp
f0121dee:	50                   	push   %eax
f0121def:	e8 62 60 fe ff       	call   f0107e56 <kfree>
f0121df4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121df7:	e8 cc 1f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121dfc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121dff:	74 17                	je     f0121e18 <test_kfree+0x1936>
f0121e01:	83 ec 04             	sub    $0x4,%esp
f0121e04:	68 14 b9 13 f0       	push   $0xf013b914
f0121e09:	68 dd 05 00 00       	push   $0x5dd
f0121e0e:	68 fa b8 13 f0       	push   $0xf013b8fa
f0121e13:	e8 ed e3 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0121e18:	e8 7a b3 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0121e1d:	89 c2                	mov    %eax,%edx
f0121e1f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121e22:	29 c2                	sub    %eax,%edx
f0121e24:	89 d0                	mov    %edx,%eax
f0121e26:	83 f8 02             	cmp    $0x2,%eax
f0121e29:	74 17                	je     f0121e42 <test_kfree+0x1960>
f0121e2b:	83 ec 04             	sub    $0x4,%esp
f0121e2e:	68 84 c0 13 f0       	push   $0xf013c084
f0121e33:	68 de 05 00 00       	push   $0x5de
f0121e38:	68 fa b8 13 f0       	push   $0xf013b8fa
f0121e3d:	e8 c3 e3 fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0121e42:	e8 50 b3 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0121e47:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121e4a:	e8 79 1f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121e4f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0121e52:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0121e58:	83 ec 0c             	sub    $0xc,%esp
f0121e5b:	50                   	push   %eax
f0121e5c:	e8 f5 5f fe ff       	call   f0107e56 <kfree>
f0121e61:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121e64:	e8 5f 1f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121e69:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121e6c:	74 17                	je     f0121e85 <test_kfree+0x19a3>
f0121e6e:	83 ec 04             	sub    $0x4,%esp
f0121e71:	68 14 b9 13 f0       	push   $0xf013b914
f0121e76:	68 e4 05 00 00       	push   $0x5e4
f0121e7b:	68 fa b8 13 f0       	push   $0xf013b8fa
f0121e80:	e8 80 e3 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121e85:	e8 0d b3 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0121e8a:	89 c2                	mov    %eax,%edx
f0121e8c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121e8f:	29 c2                	sub    %eax,%edx
f0121e91:	89 d0                	mov    %edx,%eax
f0121e93:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121e98:	74 17                	je     f0121eb1 <test_kfree+0x19cf>
f0121e9a:	83 ec 04             	sub    $0x4,%esp
f0121e9d:	68 84 c0 13 f0       	push   $0xf013c084
f0121ea2:	68 e5 05 00 00       	push   $0x5e5
f0121ea7:	68 fa b8 13 f0       	push   $0xf013b8fa
f0121eac:	e8 54 e3 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121eb1:	e8 e1 b2 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0121eb6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121eb9:	e8 0a 1f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121ebe:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0121ec1:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0121ec7:	83 ec 0c             	sub    $0xc,%esp
f0121eca:	50                   	push   %eax
f0121ecb:	e8 86 5f fe ff       	call   f0107e56 <kfree>
f0121ed0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121ed3:	e8 f0 1e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121ed8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121edb:	74 17                	je     f0121ef4 <test_kfree+0x1a12>
f0121edd:	83 ec 04             	sub    $0x4,%esp
f0121ee0:	68 14 b9 13 f0       	push   $0xf013b914
f0121ee5:	68 eb 05 00 00       	push   $0x5eb
f0121eea:	68 fa b8 13 f0       	push   $0xf013b8fa
f0121eef:	e8 11 e3 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0121ef4:	e8 9e b2 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0121ef9:	89 c2                	mov    %eax,%edx
f0121efb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121efe:	29 c2                	sub    %eax,%edx
f0121f00:	89 d0                	mov    %edx,%eax
f0121f02:	83 f8 01             	cmp    $0x1,%eax
f0121f05:	74 17                	je     f0121f1e <test_kfree+0x1a3c>
f0121f07:	83 ec 04             	sub    $0x4,%esp
f0121f0a:	68 84 c0 13 f0       	push   $0xf013c084
f0121f0f:	68 ec 05 00 00       	push   $0x5ec
f0121f14:	68 fa b8 13 f0       	push   $0xf013b8fa
f0121f19:	e8 e7 e2 fd ff       	call   f0100205 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0121f1e:	e8 74 b2 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0121f23:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121f26:	e8 9d 1e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121f2b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0121f2e:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0121f34:	83 ec 0c             	sub    $0xc,%esp
f0121f37:	50                   	push   %eax
f0121f38:	e8 19 5f fe ff       	call   f0107e56 <kfree>
f0121f3d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121f40:	e8 83 1e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121f45:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121f48:	74 17                	je     f0121f61 <test_kfree+0x1a7f>
f0121f4a:	83 ec 04             	sub    $0x4,%esp
f0121f4d:	68 14 b9 13 f0       	push   $0xf013b914
f0121f52:	68 f2 05 00 00       	push   $0x5f2
f0121f57:	68 fa b8 13 f0       	push   $0xf013b8fa
f0121f5c:	e8 a4 e2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0121f61:	e8 31 b2 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0121f66:	89 c2                	mov    %eax,%edx
f0121f68:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121f6b:	29 c2                	sub    %eax,%edx
f0121f6d:	89 d0                	mov    %edx,%eax
f0121f6f:	83 f8 04             	cmp    $0x4,%eax
f0121f72:	74 17                	je     f0121f8b <test_kfree+0x1aa9>
f0121f74:	83 ec 04             	sub    $0x4,%esp
f0121f77:	68 84 c0 13 f0       	push   $0xf013c084
f0121f7c:	68 f3 05 00 00       	push   $0x5f3
f0121f81:	68 fa b8 13 f0       	push   $0xf013b8fa
f0121f86:	e8 7a e2 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0121f8b:	e8 07 b2 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0121f90:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121f93:	e8 30 1e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121f98:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0121f9b:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0121fa1:	83 ec 0c             	sub    $0xc,%esp
f0121fa4:	50                   	push   %eax
f0121fa5:	e8 ac 5e fe ff       	call   f0107e56 <kfree>
f0121faa:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121fad:	e8 16 1e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121fb2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121fb5:	74 17                	je     f0121fce <test_kfree+0x1aec>
f0121fb7:	83 ec 04             	sub    $0x4,%esp
f0121fba:	68 14 b9 13 f0       	push   $0xf013b914
f0121fbf:	68 f9 05 00 00       	push   $0x5f9
f0121fc4:	68 fa b8 13 f0       	push   $0xf013b8fa
f0121fc9:	e8 37 e2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f0121fce:	e8 c4 b1 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0121fd3:	89 c2                	mov    %eax,%edx
f0121fd5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121fd8:	29 c2                	sub    %eax,%edx
f0121fda:	89 d0                	mov    %edx,%eax
f0121fdc:	83 f8 05             	cmp    $0x5,%eax
f0121fdf:	74 17                	je     f0121ff8 <test_kfree+0x1b16>
f0121fe1:	83 ec 04             	sub    $0x4,%esp
f0121fe4:	68 84 c0 13 f0       	push   $0xf013c084
f0121fe9:	68 fa 05 00 00       	push   $0x5fa
f0121fee:	68 fa b8 13 f0       	push   $0xf013b8fa
f0121ff3:	e8 0d e2 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0121ff8:	e8 9a b1 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0121ffd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122000:	e8 c3 1d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122005:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0122008:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012200e:	83 ec 0c             	sub    $0xc,%esp
f0122011:	50                   	push   %eax
f0122012:	e8 3f 5e fe ff       	call   f0107e56 <kfree>
f0122017:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012201a:	e8 a9 1d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012201f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122022:	74 17                	je     f012203b <test_kfree+0x1b59>
f0122024:	83 ec 04             	sub    $0x4,%esp
f0122027:	68 14 b9 13 f0       	push   $0xf013b914
f012202c:	68 00 06 00 00       	push   $0x600
f0122031:	68 fa b8 13 f0       	push   $0xf013b8fa
f0122036:	e8 ca e1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f012203b:	e8 57 b1 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0122040:	89 c2                	mov    %eax,%edx
f0122042:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122045:	29 c2                	sub    %eax,%edx
f0122047:	89 d0                	mov    %edx,%eax
f0122049:	3d 00 01 00 00       	cmp    $0x100,%eax
f012204e:	74 17                	je     f0122067 <test_kfree+0x1b85>
f0122050:	83 ec 04             	sub    $0x4,%esp
f0122053:	68 84 c0 13 f0       	push   $0xf013c084
f0122058:	68 01 06 00 00       	push   $0x601
f012205d:	68 fa b8 13 f0       	push   $0xf013b8fa
f0122062:	e8 9e e1 fd ff       	call   f0100205 <_panic>

		if (isKHeapPlacementStrategyNEXTFIT())
f0122067:	e8 51 5d ff ff       	call   f0117dbd <isKHeapPlacementStrategyNEXTFIT>
f012206c:	84 c0                	test   %al,%al
f012206e:	0f 84 80 02 00 00    	je     f01222f4 <test_kfree+0x1e12>
		{
			//cprintf("FREE in NEXT FIT\n");
			//kfree Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0122074:	e8 1e b1 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0122079:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f012207c:	e8 47 1d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122081:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[10]);
f0122084:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f012208a:	83 ec 0c             	sub    $0xc,%esp
f012208d:	50                   	push   %eax
f012208e:	e8 c3 5d fe ff       	call   f0107e56 <kfree>
f0122093:	83 c4 10             	add    $0x10,%esp
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f0122096:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f012209d:	10 00 00 
f01220a0:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01220a6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01220ab:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f01220b1:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01220b7:	ba 00 00 00 00       	mov    $0x0,%edx
f01220bc:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f01220c2:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01220c8:	29 d0                	sub    %edx,%eax
f01220ca:	89 c1                	mov    %eax,%ecx
f01220cc:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f01220d3:	10 00 00 
f01220d6:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01220db:	0f b6 d0             	movzbl %al,%edx
f01220de:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01220e4:	01 d0                	add    %edx,%eax
f01220e6:	48                   	dec    %eax
f01220e7:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f01220ed:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01220f3:	ba 00 00 00 00       	mov    $0x0,%edx
f01220f8:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f01220fe:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0122104:	29 d0                	sub    %edx,%eax
f0122106:	01 c1                	add    %eax,%ecx
f0122108:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f012210f:	10 00 00 
f0122112:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0122117:	0f b6 c0             	movzbl %al,%eax
f012211a:	c1 e0 04             	shl    $0x4,%eax
f012211d:	89 c2                	mov    %eax,%edx
f012211f:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0122125:	01 d0                	add    %edx,%eax
f0122127:	48                   	dec    %eax
f0122128:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f012212e:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0122134:	ba 00 00 00 00       	mov    $0x0,%edx
f0122139:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f012213f:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0122145:	29 d0                	sub    %edx,%eax
f0122147:	01 c8                	add    %ecx,%eax
f0122149:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f012214e:	29 c2                	sub    %eax,%edx
f0122150:	89 d0                	mov    %edx,%eax
f0122152:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122158:	e8 6b 1c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012215d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122160:	74 17                	je     f0122179 <test_kfree+0x1c97>
f0122162:	83 ec 04             	sub    $0x4,%esp
f0122165:	68 14 b9 13 f0       	push   $0xf013b914
f012216a:	68 0b 06 00 00       	push   $0x60b
f012216f:	68 fa b8 13 f0       	push   $0xf013b8fa
f0122174:	e8 8c e0 fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong kfree: pages in memory are not freed correctly");
f0122179:	e8 19 b0 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012217e:	89 c2                	mov    %eax,%edx
f0122180:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122183:	29 c2                	sub    %eax,%edx
f0122185:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f012218b:	c1 e8 0c             	shr    $0xc,%eax
f012218e:	39 c2                	cmp    %eax,%edx
f0122190:	74 17                	je     f01221a9 <test_kfree+0x1cc7>
f0122192:	83 ec 04             	sub    $0x4,%esp
f0122195:	68 84 c0 13 f0       	push   $0xf013c084
f012219a:	68 0c 06 00 00       	push   $0x60c
f012219f:	68 fa b8 13 f0       	push   $0xf013b8fa
f01221a4:	e8 5c e0 fd ff       	call   f0100205 <_panic>

			//kfree 3 MB
			freeFrames = sys_calculate_free_frames() ;
f01221a9:	e8 e9 af fe ff       	call   f010d197 <sys_calculate_free_frames>
f01221ae:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01221b1:	e8 12 1c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01221b6:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[11]);
f01221b9:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f01221bf:	83 ec 0c             	sub    $0xc,%esp
f01221c2:	50                   	push   %eax
f01221c3:	e8 8e 5c fe ff       	call   f0107e56 <kfree>
f01221c8:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01221cb:	e8 f8 1b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01221d0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01221d3:	74 17                	je     f01221ec <test_kfree+0x1d0a>
f01221d5:	83 ec 04             	sub    $0x4,%esp
f01221d8:	68 14 b9 13 f0       	push   $0xf013b914
f01221dd:	68 12 06 00 00       	push   $0x612
f01221e2:	68 fa b8 13 f0       	push   $0xf013b8fa
f01221e7:	e8 19 e0 fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01221ec:	e8 a6 af fe ff       	call   f010d197 <sys_calculate_free_frames>
f01221f1:	89 c2                	mov    %eax,%edx
f01221f3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01221f6:	29 c2                	sub    %eax,%edx
f01221f8:	89 d0                	mov    %edx,%eax
f01221fa:	3d 00 03 00 00       	cmp    $0x300,%eax
f01221ff:	74 17                	je     f0122218 <test_kfree+0x1d36>
f0122201:	83 ec 04             	sub    $0x4,%esp
f0122204:	68 84 c0 13 f0       	push   $0xf013c084
f0122209:	68 13 06 00 00       	push   $0x613
f012220e:	68 fa b8 13 f0       	push   $0xf013b8fa
f0122213:	e8 ed df fd ff       	call   f0100205 <_panic>

			//kfree 2 KB
			freeFrames = sys_calculate_free_frames() ;
f0122218:	e8 7a af fe ff       	call   f010d197 <sys_calculate_free_frames>
f012221d:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0122220:	e8 a3 1b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122225:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[12]);
f0122228:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012222e:	83 ec 0c             	sub    $0xc,%esp
f0122231:	50                   	push   %eax
f0122232:	e8 1f 5c fe ff       	call   f0107e56 <kfree>
f0122237:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012223a:	e8 89 1b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012223f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122242:	74 17                	je     f012225b <test_kfree+0x1d79>
f0122244:	83 ec 04             	sub    $0x4,%esp
f0122247:	68 14 b9 13 f0       	push   $0xf013b914
f012224c:	68 19 06 00 00       	push   $0x619
f0122251:	68 fa b8 13 f0       	push   $0xf013b8fa
f0122256:	e8 aa df fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f012225b:	e8 37 af fe ff       	call   f010d197 <sys_calculate_free_frames>
f0122260:	89 c2                	mov    %eax,%edx
f0122262:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122265:	29 c2                	sub    %eax,%edx
f0122267:	89 d0                	mov    %edx,%eax
f0122269:	83 f8 01             	cmp    $0x1,%eax
f012226c:	74 17                	je     f0122285 <test_kfree+0x1da3>
f012226e:	83 ec 04             	sub    $0x4,%esp
f0122271:	68 84 c0 13 f0       	push   $0xf013c084
f0122276:	68 1a 06 00 00       	push   $0x61a
f012227b:	68 fa b8 13 f0       	push   $0xf013b8fa
f0122280:	e8 80 df fd ff       	call   f0100205 <_panic>

			//kfree 1 MB
			freeFrames = sys_calculate_free_frames() ;
f0122285:	e8 0d af fe ff       	call   f010d197 <sys_calculate_free_frames>
f012228a:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f012228d:	e8 36 1b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122292:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[13]);
f0122295:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012229b:	83 ec 0c             	sub    $0xc,%esp
f012229e:	50                   	push   %eax
f012229f:	e8 b2 5b fe ff       	call   f0107e56 <kfree>
f01222a4:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01222a7:	e8 1c 1b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01222ac:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01222af:	74 17                	je     f01222c8 <test_kfree+0x1de6>
f01222b1:	83 ec 04             	sub    $0x4,%esp
f01222b4:	68 14 b9 13 f0       	push   $0xf013b914
f01222b9:	68 20 06 00 00       	push   $0x620
f01222be:	68 fa b8 13 f0       	push   $0xf013b8fa
f01222c3:	e8 3d df fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01222c8:	e8 ca ae fe ff       	call   f010d197 <sys_calculate_free_frames>
f01222cd:	89 c2                	mov    %eax,%edx
f01222cf:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01222d2:	29 c2                	sub    %eax,%edx
f01222d4:	89 d0                	mov    %edx,%eax
f01222d6:	3d 00 01 00 00       	cmp    $0x100,%eax
f01222db:	74 17                	je     f01222f4 <test_kfree+0x1e12>
f01222dd:	83 ec 04             	sub    $0x4,%esp
f01222e0:	68 84 c0 13 f0       	push   $0xf013c084
f01222e5:	68 21 06 00 00       	push   $0x621
f01222ea:	68 fa b8 13 f0       	push   $0xf013b8fa
f01222ef:	e8 11 df fd ff       	call   f0100205 <_panic>

		}
		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f01222f4:	e8 9e ae fe ff       	call   f010d197 <sys_calculate_free_frames>
f01222f9:	89 c2                	mov    %eax,%edx
f01222fb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01222fe:	39 c2                	cmp    %eax,%edx
f0122300:	74 17                	je     f0122319 <test_kfree+0x1e37>
f0122302:	83 ec 04             	sub    $0x4,%esp
f0122305:	68 24 c1 13 f0       	push   $0xf013c124
f012230a:	68 24 06 00 00       	push   $0x624
f012230f:	68 fa b8 13 f0       	push   $0xf013b8fa
f0122314:	e8 ec de fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b60%");
f0122319:	83 ec 0c             	sub    $0xc,%esp
f012231c:	68 58 c1 13 f0       	push   $0xf013c158
f0122321:	e8 e8 e9 fd ff       	call   f0100d0e <cprintf>
f0122326:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0122329:	83 ec 0c             	sub    $0xc,%esp
f012232c:	6a 03                	push   $0x3
f012232e:	e8 04 b3 fe ff       	call   f010d637 <sys_bypassPageFault>
f0122333:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0122336:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012233d:	e9 82 00 00 00       	jmp    f01223c4 <test_kfree+0x1ee2>
		{
			ptr = (char *) ptr_allocations[i];
f0122342:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122345:	8b 84 85 48 fd ff ff 	mov    -0x2b8(%ebp,%eax,4),%eax
f012234c:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f012234f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122352:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0122355:	e8 cb b2 fe ff       	call   f010d625 <sys_rcr2>
f012235a:	89 c2                	mov    %eax,%edx
f012235c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012235f:	39 c2                	cmp    %eax,%edx
f0122361:	74 17                	je     f012237a <test_kfree+0x1e98>
f0122363:	83 ec 04             	sub    $0x4,%esp
f0122366:	68 60 c1 13 f0       	push   $0xf013c160
f012236b:	68 33 06 00 00       	push   $0x633
f0122370:	68 fa b8 13 f0       	push   $0xf013b8fa
f0122375:	e8 8b de fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f012237a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012237d:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f0122384:	89 c2                	mov    %eax,%edx
f0122386:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122389:	01 d0                	add    %edx,%eax
f012238b:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f012238e:	e8 92 b2 fe ff       	call   f010d625 <sys_rcr2>
f0122393:	89 c2                	mov    %eax,%edx
f0122395:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122398:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f012239f:	89 c1                	mov    %eax,%ecx
f01223a1:	8b 45 80             	mov    -0x80(%ebp),%eax
f01223a4:	01 c8                	add    %ecx,%eax
f01223a6:	39 c2                	cmp    %eax,%edx
f01223a8:	74 17                	je     f01223c1 <test_kfree+0x1edf>
f01223aa:	83 ec 04             	sub    $0x4,%esp
f01223ad:	68 60 c1 13 f0       	push   $0xf013c160
f01223b2:	68 35 06 00 00       	push   $0x635
f01223b7:	68 fa b8 13 f0       	push   $0xf013b8fa
f01223bc:	e8 44 de fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f01223c1:	ff 45 f4             	incl   -0xc(%ebp)
f01223c4:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f01223c8:	0f 8e 74 ff ff ff    	jle    f0122342 <test_kfree+0x1e60>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01223ce:	83 ec 0c             	sub    $0xc,%esp
f01223d1:	6a 00                	push   $0x0
f01223d3:	e8 5f b2 fe ff       	call   f010d637 <sys_bypassPageFault>
f01223d8:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f01223db:	83 ec 0c             	sub    $0xc,%esp
f01223de:	68 a5 c1 13 f0       	push   $0xf013c1a5
f01223e3:	e8 26 e9 fd ff       	call   f0100d0e <cprintf>
f01223e8:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01223eb:	e8 a7 ad fe ff       	call   f010d197 <sys_calculate_free_frames>
f01223f0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01223f3:	e8 d0 19 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01223f8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f01223fb:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f0122401:	83 ec 0c             	sub    $0xc,%esp
f0122404:	50                   	push   %eax
f0122405:	e8 4c 5a fe ff       	call   f0107e56 <kfree>
f012240a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012240d:	e8 b6 19 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122412:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122415:	74 17                	je     f012242e <test_kfree+0x1f4c>
f0122417:	83 ec 04             	sub    $0x4,%esp
f012241a:	68 14 b9 13 f0       	push   $0xf013b914
f012241f:	68 43 06 00 00       	push   $0x643
f0122424:	68 fa b8 13 f0       	push   $0xf013b8fa
f0122429:	e8 d7 dd fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012242e:	e8 64 ad fe ff       	call   f010d197 <sys_calculate_free_frames>
f0122433:	89 c2                	mov    %eax,%edx
f0122435:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122438:	39 c2                	cmp    %eax,%edx
f012243a:	74 17                	je     f0122453 <test_kfree+0x1f71>
f012243c:	83 ec 04             	sub    $0x4,%esp
f012243f:	68 ac c1 13 f0       	push   $0xf013c1ac
f0122444:	68 44 06 00 00       	push   $0x644
f0122449:	68 fa b8 13 f0       	push   $0xf013b8fa
f012244e:	e8 b2 dd fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122453:	e8 3f ad fe ff       	call   f010d197 <sys_calculate_free_frames>
f0122458:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012245b:	e8 68 19 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122460:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0122463:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f0122469:	83 ec 0c             	sub    $0xc,%esp
f012246c:	50                   	push   %eax
f012246d:	e8 e4 59 fe ff       	call   f0107e56 <kfree>
f0122472:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122475:	e8 4e 19 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012247a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012247d:	74 17                	je     f0122496 <test_kfree+0x1fb4>
f012247f:	83 ec 04             	sub    $0x4,%esp
f0122482:	68 14 b9 13 f0       	push   $0xf013b914
f0122487:	68 4a 06 00 00       	push   $0x64a
f012248c:	68 fa b8 13 f0       	push   $0xf013b8fa
f0122491:	e8 6f dd fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122496:	e8 fc ac fe ff       	call   f010d197 <sys_calculate_free_frames>
f012249b:	89 c2                	mov    %eax,%edx
f012249d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01224a0:	39 c2                	cmp    %eax,%edx
f01224a2:	74 17                	je     f01224bb <test_kfree+0x1fd9>
f01224a4:	83 ec 04             	sub    $0x4,%esp
f01224a7:	68 ac c1 13 f0       	push   $0xf013c1ac
f01224ac:	68 4b 06 00 00       	push   $0x64b
f01224b1:	68 fa b8 13 f0       	push   $0xf013b8fa
f01224b6:	e8 4a dd fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01224bb:	e8 d7 ac fe ff       	call   f010d197 <sys_calculate_free_frames>
f01224c0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01224c3:	e8 00 19 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01224c8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01224cb:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f01224d1:	83 ec 0c             	sub    $0xc,%esp
f01224d4:	50                   	push   %eax
f01224d5:	e8 7c 59 fe ff       	call   f0107e56 <kfree>
f01224da:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01224dd:	e8 e6 18 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01224e2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01224e5:	74 17                	je     f01224fe <test_kfree+0x201c>
f01224e7:	83 ec 04             	sub    $0x4,%esp
f01224ea:	68 14 b9 13 f0       	push   $0xf013b914
f01224ef:	68 51 06 00 00       	push   $0x651
f01224f4:	68 fa b8 13 f0       	push   $0xf013b8fa
f01224f9:	e8 07 dd fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01224fe:	e8 94 ac fe ff       	call   f010d197 <sys_calculate_free_frames>
f0122503:	89 c2                	mov    %eax,%edx
f0122505:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122508:	39 c2                	cmp    %eax,%edx
f012250a:	74 17                	je     f0122523 <test_kfree+0x2041>
f012250c:	83 ec 04             	sub    $0x4,%esp
f012250f:	68 ac c1 13 f0       	push   $0xf013c1ac
f0122514:	68 52 06 00 00       	push   $0x652
f0122519:	68 fa b8 13 f0       	push   $0xf013b8fa
f012251e:	e8 e2 dc fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0122523:	e8 6f ac fe ff       	call   f010d197 <sys_calculate_free_frames>
f0122528:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012252b:	e8 98 18 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122530:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0122533:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0122539:	83 ec 0c             	sub    $0xc,%esp
f012253c:	50                   	push   %eax
f012253d:	e8 14 59 fe ff       	call   f0107e56 <kfree>
f0122542:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122545:	e8 7e 18 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012254a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012254d:	74 17                	je     f0122566 <test_kfree+0x2084>
f012254f:	83 ec 04             	sub    $0x4,%esp
f0122552:	68 14 b9 13 f0       	push   $0xf013b914
f0122557:	68 58 06 00 00       	push   $0x658
f012255c:	68 fa b8 13 f0       	push   $0xf013b8fa
f0122561:	e8 9f dc fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122566:	e8 2c ac fe ff       	call   f010d197 <sys_calculate_free_frames>
f012256b:	89 c2                	mov    %eax,%edx
f012256d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122570:	39 c2                	cmp    %eax,%edx
f0122572:	74 17                	je     f012258b <test_kfree+0x20a9>
f0122574:	83 ec 04             	sub    $0x4,%esp
f0122577:	68 ac c1 13 f0       	push   $0xf013c1ac
f012257c:	68 59 06 00 00       	push   $0x659
f0122581:	68 fa b8 13 f0       	push   $0xf013b8fa
f0122586:	e8 7a dc fd ff       	call   f0100205 <_panic>

	}
	cprintf("\b\b\b85%");
f012258b:	83 ec 0c             	sub    $0xc,%esp
f012258e:	68 f3 c1 13 f0       	push   $0xf013c1f3
f0122593:	e8 76 e7 fd ff       	call   f0100d0e <cprintf>
f0122598:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f012259b:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f01225a2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01225a9:	eb 48                	jmp    f01225f3 <test_kfree+0x2111>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f01225ab:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01225ae:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f01225b3:	83 ec 04             	sub    $0x4,%esp
f01225b6:	8d 8d 44 fd ff ff    	lea    -0x2bc(%ebp),%ecx
f01225bc:	51                   	push   %ecx
f01225bd:	52                   	push   %edx
f01225be:	50                   	push   %eax
f01225bf:	e8 ed 44 fe ff       	call   f0106ab1 <get_page_table>
f01225c4:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01225c7:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f01225cd:	85 c0                	test   %eax,%eax
f01225cf:	75 17                	jne    f01225e8 <test_kfree+0x2106>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f01225d1:	83 ec 04             	sub    $0x4,%esp
f01225d4:	68 fc c1 13 f0       	push   $0xf013c1fc
f01225d9:	68 67 06 00 00       	push   $0x667
f01225de:	68 fa b8 13 f0       	push   $0xf013b8fa
f01225e3:	e8 1d dc fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01225e8:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f01225ef:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f01225f3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01225f7:	78 b2                	js     f01225ab <test_kfree+0x20c9>
f01225f9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01225fd:	7f 09                	jg     f0122608 <test_kfree+0x2126>
f01225ff:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0122606:	76 a3                	jbe    f01225ab <test_kfree+0x20c9>
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0122608:	83 ec 0c             	sub    $0xc,%esp
f012260b:	68 de ba 13 f0       	push   $0xf013bade
f0122610:	e8 f9 e6 fd ff       	call   f0100d0e <cprintf>
f0122615:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0122618:	83 ec 0c             	sub    $0xc,%esp
f012261b:	68 64 c2 13 f0       	push   $0xf013c264
f0122620:	e8 e9 e6 fd ff       	call   f0100d0e <cprintf>
f0122625:	83 c4 10             	add    $0x10,%esp

	return 1;
f0122628:	b8 01 00 00 00       	mov    $0x1,%eax

}
f012262d:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0122630:	5b                   	pop    %ebx
f0122631:	5f                   	pop    %edi
f0122632:	5d                   	pop    %ebp
f0122633:	c3                   	ret    

f0122634 <test_kfree_bestfirstfit>:

int test_kfree_bestfirstfit()
{
f0122634:	55                   	push   %ebp
f0122635:	89 e5                	mov    %esp,%ebp
f0122637:	57                   	push   %edi
f0122638:	53                   	push   %ebx
f0122639:	81 ec 40 02 00 00    	sub    $0x240,%esp
	cprintf("==============================================\n");
f012263f:	83 ec 0c             	sub    $0xc,%esp
f0122642:	68 3c b8 13 f0       	push   $0xf013b83c
f0122647:	e8 c2 e6 fd ff       	call   f0100d0e <cprintf>
f012264c:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f012264f:	83 ec 0c             	sub    $0xc,%esp
f0122652:	68 6c b8 13 f0       	push   $0xf013b86c
f0122657:	e8 b2 e6 fd ff       	call   f0100d0e <cprintf>
f012265c:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f012265f:	83 ec 0c             	sub    $0xc,%esp
f0122662:	68 3c b8 13 f0       	push   $0xf013b83c
f0122667:	e8 a2 e6 fd ff       	call   f0100d0e <cprintf>
f012266c:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f012266f:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0122673:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0122677:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f012267d:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0122683:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f012268a:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0122691:	e8 01 ab fe ff       	call   f010d197 <sys_calculate_free_frames>
f0122696:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0122699:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f012269f:	b9 14 00 00 00       	mov    $0x14,%ecx
f01226a4:	b8 00 00 00 00       	mov    $0x0,%eax
f01226a9:	89 d7                	mov    %edx,%edi
f01226ab:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01226ad:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f01226b3:	b9 14 00 00 00       	mov    $0x14,%ecx
f01226b8:	b8 00 00 00 00       	mov    $0x0,%eax
f01226bd:	89 d7                	mov    %edx,%edi
f01226bf:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01226c1:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f01226c7:	b9 14 00 00 00       	mov    $0x14,%ecx
f01226cc:	b8 00 00 00 00       	mov    $0x0,%eax
f01226d1:	89 d7                	mov    %edx,%edi
f01226d3:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01226d5:	e8 bd aa fe ff       	call   f010d197 <sys_calculate_free_frames>
f01226da:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01226dd:	e8 e6 16 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01226e2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01226e5:	83 ec 0c             	sub    $0xc,%esp
f01226e8:	68 00 fc 1f 00       	push   $0x1ffc00
f01226ed:	e8 99 56 fe ff       	call   f0107d8b <kmalloc>
f01226f2:	83 c4 10             	add    $0x10,%esp
f01226f5:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01226fb:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0122701:	89 c1                	mov    %eax,%ecx
f0122703:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f012270a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012270d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122712:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0122715:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0122718:	ba 00 00 00 00       	mov    $0x0,%edx
f012271d:	f7 75 c8             	divl   -0x38(%ebp)
f0122720:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0122723:	29 d0                	sub    %edx,%eax
f0122725:	89 c3                	mov    %eax,%ebx
f0122727:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f012272e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0122733:	0f b6 d0             	movzbl %al,%edx
f0122736:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0122739:	01 d0                	add    %edx,%eax
f012273b:	48                   	dec    %eax
f012273c:	89 45 bc             	mov    %eax,-0x44(%ebp)
f012273f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0122742:	ba 00 00 00 00       	mov    $0x0,%edx
f0122747:	f7 75 c0             	divl   -0x40(%ebp)
f012274a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012274d:	29 d0                	sub    %edx,%eax
f012274f:	01 c3                	add    %eax,%ebx
f0122751:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0122758:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012275d:	0f b6 c0             	movzbl %al,%eax
f0122760:	c1 e0 04             	shl    $0x4,%eax
f0122763:	89 c2                	mov    %eax,%edx
f0122765:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0122768:	01 d0                	add    %edx,%eax
f012276a:	48                   	dec    %eax
f012276b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f012276e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0122771:	ba 00 00 00 00       	mov    $0x0,%edx
f0122776:	f7 75 b8             	divl   -0x48(%ebp)
f0122779:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012277c:	29 d0                	sub    %edx,%eax
f012277e:	01 d8                	add    %ebx,%eax
f0122780:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0122785:	39 c1                	cmp    %eax,%ecx
f0122787:	74 17                	je     f01227a0 <test_kfree_bestfirstfit+0x16c>
f0122789:	83 ec 04             	sub    $0x4,%esp
f012278c:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0122791:	68 95 06 00 00       	push   $0x695
f0122796:	68 fa b8 13 f0       	push   $0xf013b8fa
f012279b:	e8 65 da fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01227a0:	e8 23 16 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01227a5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01227a8:	74 17                	je     f01227c1 <test_kfree_bestfirstfit+0x18d>
f01227aa:	83 ec 04             	sub    $0x4,%esp
f01227ad:	68 14 b9 13 f0       	push   $0xf013b914
f01227b2:	68 96 06 00 00       	push   $0x696
f01227b7:	68 fa b8 13 f0       	push   $0xf013b8fa
f01227bc:	e8 44 da fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01227c1:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01227c4:	e8 ce a9 fe ff       	call   f010d197 <sys_calculate_free_frames>
f01227c9:	29 c3                	sub    %eax,%ebx
f01227cb:	89 d8                	mov    %ebx,%eax
f01227cd:	3d 00 02 00 00       	cmp    $0x200,%eax
f01227d2:	74 17                	je     f01227eb <test_kfree_bestfirstfit+0x1b7>
f01227d4:	83 ec 04             	sub    $0x4,%esp
f01227d7:	68 7c b9 13 f0       	push   $0xf013b97c
f01227dc:	68 97 06 00 00       	push   $0x697
f01227e1:	68 fa b8 13 f0       	push   $0xf013b8fa
f01227e6:	e8 1a da fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f01227eb:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f01227f2:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01227f5:	e8 9d a9 fe ff       	call   f010d197 <sys_calculate_free_frames>
f01227fa:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01227fd:	e8 c6 15 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122802:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0122805:	83 ec 0c             	sub    $0xc,%esp
f0122808:	68 00 fc 1f 00       	push   $0x1ffc00
f012280d:	e8 79 55 fe ff       	call   f0107d8b <kmalloc>
f0122812:	83 c4 10             	add    $0x10,%esp
f0122815:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012281b:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0122821:	89 c1                	mov    %eax,%ecx
f0122823:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f012282a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012282d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122832:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0122835:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0122838:	ba 00 00 00 00       	mov    $0x0,%edx
f012283d:	f7 75 b0             	divl   -0x50(%ebp)
f0122840:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0122843:	29 d0                	sub    %edx,%eax
f0122845:	89 c3                	mov    %eax,%ebx
f0122847:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f012284e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0122853:	0f b6 d0             	movzbl %al,%edx
f0122856:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0122859:	01 d0                	add    %edx,%eax
f012285b:	48                   	dec    %eax
f012285c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f012285f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0122862:	ba 00 00 00 00       	mov    $0x0,%edx
f0122867:	f7 75 a8             	divl   -0x58(%ebp)
f012286a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012286d:	29 d0                	sub    %edx,%eax
f012286f:	01 c3                	add    %eax,%ebx
f0122871:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0122878:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012287d:	0f b6 c0             	movzbl %al,%eax
f0122880:	c1 e0 04             	shl    $0x4,%eax
f0122883:	89 c2                	mov    %eax,%edx
f0122885:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0122888:	01 d0                	add    %edx,%eax
f012288a:	48                   	dec    %eax
f012288b:	89 45 9c             	mov    %eax,-0x64(%ebp)
f012288e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0122891:	ba 00 00 00 00       	mov    $0x0,%edx
f0122896:	f7 75 a0             	divl   -0x60(%ebp)
f0122899:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012289c:	29 d0                	sub    %edx,%eax
f012289e:	01 d8                	add    %ebx,%eax
f01228a0:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01228a5:	39 c1                	cmp    %eax,%ecx
f01228a7:	74 17                	je     f01228c0 <test_kfree_bestfirstfit+0x28c>
f01228a9:	83 ec 04             	sub    $0x4,%esp
f01228ac:	68 e0 b9 13 f0       	push   $0xf013b9e0
f01228b1:	68 9e 06 00 00       	push   $0x69e
f01228b6:	68 fa b8 13 f0       	push   $0xf013b8fa
f01228bb:	e8 45 d9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01228c0:	e8 03 15 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01228c5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01228c8:	74 17                	je     f01228e1 <test_kfree_bestfirstfit+0x2ad>
f01228ca:	83 ec 04             	sub    $0x4,%esp
f01228cd:	68 14 b9 13 f0       	push   $0xf013b914
f01228d2:	68 9f 06 00 00       	push   $0x69f
f01228d7:	68 fa b8 13 f0       	push   $0xf013b8fa
f01228dc:	e8 24 d9 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01228e1:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01228e4:	e8 ae a8 fe ff       	call   f010d197 <sys_calculate_free_frames>
f01228e9:	29 c3                	sub    %eax,%ebx
f01228eb:	89 d8                	mov    %ebx,%eax
f01228ed:	3d 00 02 00 00       	cmp    $0x200,%eax
f01228f2:	74 17                	je     f012290b <test_kfree_bestfirstfit+0x2d7>
f01228f4:	83 ec 04             	sub    $0x4,%esp
f01228f7:	68 7c b9 13 f0       	push   $0xf013b97c
f01228fc:	68 a0 06 00 00       	push   $0x6a0
f0122901:	68 fa b8 13 f0       	push   $0xf013b8fa
f0122906:	e8 fa d8 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f012290b:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f0122912:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122915:	e8 7d a8 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012291a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012291d:	e8 a6 14 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122922:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0122925:	83 ec 0c             	sub    $0xc,%esp
f0122928:	68 00 08 00 00       	push   $0x800
f012292d:	e8 59 54 fe ff       	call   f0107d8b <kmalloc>
f0122932:	83 c4 10             	add    $0x10,%esp
f0122935:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012293b:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0122941:	89 c1                	mov    %eax,%ecx
f0122943:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f012294a:	8b 45 98             	mov    -0x68(%ebp),%eax
f012294d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122952:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0122955:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122958:	ba 00 00 00 00       	mov    $0x0,%edx
f012295d:	f7 75 98             	divl   -0x68(%ebp)
f0122960:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122963:	29 d0                	sub    %edx,%eax
f0122965:	89 c3                	mov    %eax,%ebx
f0122967:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f012296e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0122973:	0f b6 d0             	movzbl %al,%edx
f0122976:	8b 45 90             	mov    -0x70(%ebp),%eax
f0122979:	01 d0                	add    %edx,%eax
f012297b:	48                   	dec    %eax
f012297c:	89 45 8c             	mov    %eax,-0x74(%ebp)
f012297f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0122982:	ba 00 00 00 00       	mov    $0x0,%edx
f0122987:	f7 75 90             	divl   -0x70(%ebp)
f012298a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012298d:	29 d0                	sub    %edx,%eax
f012298f:	01 c3                	add    %eax,%ebx
f0122991:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0122998:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012299d:	0f b6 c0             	movzbl %al,%eax
f01229a0:	c1 e0 04             	shl    $0x4,%eax
f01229a3:	89 c2                	mov    %eax,%edx
f01229a5:	8b 45 88             	mov    -0x78(%ebp),%eax
f01229a8:	01 d0                	add    %edx,%eax
f01229aa:	48                   	dec    %eax
f01229ab:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01229ae:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01229b1:	ba 00 00 00 00       	mov    $0x0,%edx
f01229b6:	f7 75 88             	divl   -0x78(%ebp)
f01229b9:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01229bc:	29 d0                	sub    %edx,%eax
f01229be:	01 d8                	add    %ebx,%eax
f01229c0:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01229c5:	39 c1                	cmp    %eax,%ecx
f01229c7:	74 17                	je     f01229e0 <test_kfree_bestfirstfit+0x3ac>
f01229c9:	83 ec 04             	sub    $0x4,%esp
f01229cc:	68 e0 b9 13 f0       	push   $0xf013b9e0
f01229d1:	68 a7 06 00 00       	push   $0x6a7
f01229d6:	68 fa b8 13 f0       	push   $0xf013b8fa
f01229db:	e8 25 d8 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01229e0:	e8 e3 13 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01229e5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01229e8:	74 17                	je     f0122a01 <test_kfree_bestfirstfit+0x3cd>
f01229ea:	83 ec 04             	sub    $0x4,%esp
f01229ed:	68 14 b9 13 f0       	push   $0xf013b914
f01229f2:	68 a8 06 00 00       	push   $0x6a8
f01229f7:	68 fa b8 13 f0       	push   $0xf013b8fa
f01229fc:	e8 04 d8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122a01:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122a04:	e8 8e a7 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0122a09:	29 c3                	sub    %eax,%ebx
f0122a0b:	89 d8                	mov    %ebx,%eax
f0122a0d:	83 f8 01             	cmp    $0x1,%eax
f0122a10:	74 17                	je     f0122a29 <test_kfree_bestfirstfit+0x3f5>
f0122a12:	83 ec 04             	sub    $0x4,%esp
f0122a15:	68 7c b9 13 f0       	push   $0xf013b97c
f0122a1a:	68 a9 06 00 00       	push   $0x6a9
f0122a1f:	68 fa b8 13 f0       	push   $0xf013b8fa
f0122a24:	e8 dc d7 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0122a29:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f0122a30:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0122a33:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0122a39:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0122a3c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122a43:	eb 0e                	jmp    f0122a53 <test_kfree_bestfirstfit+0x41f>
		{
			ptr[i] = 2 ;
f0122a45:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122a48:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122a4b:	01 d0                	add    %edx,%eax
f0122a4d:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0122a50:	ff 45 f4             	incl   -0xc(%ebp)
f0122a53:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0122a59:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122a5c:	7f e7                	jg     f0122a45 <test_kfree_bestfirstfit+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122a5e:	e8 34 a7 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0122a63:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122a66:	e8 5d 13 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122a6b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0122a6e:	83 ec 0c             	sub    $0xc,%esp
f0122a71:	68 00 08 00 00       	push   $0x800
f0122a76:	e8 10 53 fe ff       	call   f0107d8b <kmalloc>
f0122a7b:	83 c4 10             	add    $0x10,%esp
f0122a7e:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122a84:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0122a8a:	89 c1                	mov    %eax,%ecx
f0122a8c:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0122a93:	10 00 00 
f0122a96:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0122a9c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122aa1:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0122aa7:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0122aad:	ba 00 00 00 00       	mov    $0x0,%edx
f0122ab2:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0122ab8:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0122abe:	29 d0                	sub    %edx,%eax
f0122ac0:	89 c3                	mov    %eax,%ebx
f0122ac2:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0122ac9:	10 00 00 
f0122acc:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0122ad1:	0f b6 d0             	movzbl %al,%edx
f0122ad4:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0122ada:	01 d0                	add    %edx,%eax
f0122adc:	48                   	dec    %eax
f0122add:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0122ae3:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0122ae9:	ba 00 00 00 00       	mov    $0x0,%edx
f0122aee:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0122af4:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0122afa:	29 d0                	sub    %edx,%eax
f0122afc:	01 c3                	add    %eax,%ebx
f0122afe:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0122b05:	10 00 00 
f0122b08:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0122b0d:	0f b6 c0             	movzbl %al,%eax
f0122b10:	c1 e0 04             	shl    $0x4,%eax
f0122b13:	89 c2                	mov    %eax,%edx
f0122b15:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0122b1b:	01 d0                	add    %edx,%eax
f0122b1d:	48                   	dec    %eax
f0122b1e:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0122b24:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0122b2a:	ba 00 00 00 00       	mov    $0x0,%edx
f0122b2f:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0122b35:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0122b3b:	29 d0                	sub    %edx,%eax
f0122b3d:	01 d8                	add    %ebx,%eax
f0122b3f:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0122b44:	39 c1                	cmp    %eax,%ecx
f0122b46:	74 17                	je     f0122b5f <test_kfree_bestfirstfit+0x52b>
f0122b48:	83 ec 04             	sub    $0x4,%esp
f0122b4b:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0122b50:	68 b5 06 00 00       	push   $0x6b5
f0122b55:	68 fa b8 13 f0       	push   $0xf013b8fa
f0122b5a:	e8 a6 d6 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122b5f:	e8 64 12 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122b64:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122b67:	74 17                	je     f0122b80 <test_kfree_bestfirstfit+0x54c>
f0122b69:	83 ec 04             	sub    $0x4,%esp
f0122b6c:	68 14 b9 13 f0       	push   $0xf013b914
f0122b71:	68 b6 06 00 00       	push   $0x6b6
f0122b76:	68 fa b8 13 f0       	push   $0xf013b8fa
f0122b7b:	e8 85 d6 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122b80:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122b83:	e8 0f a6 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0122b88:	29 c3                	sub    %eax,%ebx
f0122b8a:	89 d8                	mov    %ebx,%eax
f0122b8c:	83 f8 01             	cmp    $0x1,%eax
f0122b8f:	74 17                	je     f0122ba8 <test_kfree_bestfirstfit+0x574>
f0122b91:	83 ec 04             	sub    $0x4,%esp
f0122b94:	68 7c b9 13 f0       	push   $0xf013b97c
f0122b99:	68 b7 06 00 00       	push   $0x6b7
f0122b9e:	68 fa b8 13 f0       	push   $0xf013b8fa
f0122ba3:	e8 5d d6 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0122ba8:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f0122baf:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0122bb2:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0122bb8:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0122bbb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122bc2:	eb 0e                	jmp    f0122bd2 <test_kfree_bestfirstfit+0x59e>
		{
			ptr[i] = 3 ;
f0122bc4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122bc7:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122bca:	01 d0                	add    %edx,%eax
f0122bcc:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0122bcf:	ff 45 f4             	incl   -0xc(%ebp)
f0122bd2:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0122bd8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122bdb:	7f e7                	jg     f0122bc4 <test_kfree_bestfirstfit+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0122bdd:	e8 b5 a5 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0122be2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122be5:	e8 de 11 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122bea:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0122bed:	83 ec 0c             	sub    $0xc,%esp
f0122bf0:	68 00 1c 00 00       	push   $0x1c00
f0122bf5:	e8 91 51 fe ff       	call   f0107d8b <kmalloc>
f0122bfa:	83 c4 10             	add    $0x10,%esp
f0122bfd:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122c03:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0122c09:	89 c1                	mov    %eax,%ecx
f0122c0b:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0122c12:	10 00 00 
f0122c15:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0122c1b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122c20:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0122c26:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0122c2c:	ba 00 00 00 00       	mov    $0x0,%edx
f0122c31:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0122c37:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0122c3d:	29 d0                	sub    %edx,%eax
f0122c3f:	89 c3                	mov    %eax,%ebx
f0122c41:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0122c48:	10 00 00 
f0122c4b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0122c50:	0f b6 d0             	movzbl %al,%edx
f0122c53:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0122c59:	01 d0                	add    %edx,%eax
f0122c5b:	48                   	dec    %eax
f0122c5c:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0122c62:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0122c68:	ba 00 00 00 00       	mov    $0x0,%edx
f0122c6d:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0122c73:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0122c79:	29 d0                	sub    %edx,%eax
f0122c7b:	01 c3                	add    %eax,%ebx
f0122c7d:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0122c84:	10 00 00 
f0122c87:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0122c8c:	0f b6 c0             	movzbl %al,%eax
f0122c8f:	c1 e0 04             	shl    $0x4,%eax
f0122c92:	89 c2                	mov    %eax,%edx
f0122c94:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0122c9a:	01 d0                	add    %edx,%eax
f0122c9c:	48                   	dec    %eax
f0122c9d:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0122ca3:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0122ca9:	ba 00 00 00 00       	mov    $0x0,%edx
f0122cae:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0122cb4:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0122cba:	29 d0                	sub    %edx,%eax
f0122cbc:	01 d8                	add    %ebx,%eax
f0122cbe:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0122cc3:	39 c1                	cmp    %eax,%ecx
f0122cc5:	74 17                	je     f0122cde <test_kfree_bestfirstfit+0x6aa>
f0122cc7:	83 ec 04             	sub    $0x4,%esp
f0122cca:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0122ccf:	68 c3 06 00 00       	push   $0x6c3
f0122cd4:	68 fa b8 13 f0       	push   $0xf013b8fa
f0122cd9:	e8 27 d5 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122cde:	e8 e5 10 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122ce3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122ce6:	74 17                	je     f0122cff <test_kfree_bestfirstfit+0x6cb>
f0122ce8:	83 ec 04             	sub    $0x4,%esp
f0122ceb:	68 14 b9 13 f0       	push   $0xf013b914
f0122cf0:	68 c4 06 00 00       	push   $0x6c4
f0122cf5:	68 fa b8 13 f0       	push   $0xf013b8fa
f0122cfa:	e8 06 d5 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122cff:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122d02:	e8 90 a4 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0122d07:	29 c3                	sub    %eax,%ebx
f0122d09:	89 d8                	mov    %ebx,%eax
f0122d0b:	83 f8 02             	cmp    $0x2,%eax
f0122d0e:	74 17                	je     f0122d27 <test_kfree_bestfirstfit+0x6f3>
f0122d10:	83 ec 04             	sub    $0x4,%esp
f0122d13:	68 7c b9 13 f0       	push   $0xf013b97c
f0122d18:	68 c5 06 00 00       	push   $0x6c5
f0122d1d:	68 fa b8 13 f0       	push   $0xf013b8fa
f0122d22:	e8 de d4 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0122d27:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f0122d2e:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0122d31:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0122d37:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0122d3a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122d41:	eb 0e                	jmp    f0122d51 <test_kfree_bestfirstfit+0x71d>
		{
			ptr[i] = 4 ;
f0122d43:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122d46:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122d49:	01 d0                	add    %edx,%eax
f0122d4b:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0122d4e:	ff 45 f4             	incl   -0xc(%ebp)
f0122d51:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0122d57:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122d5a:	7f e7                	jg     f0122d43 <test_kfree_bestfirstfit+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122d5c:	e8 36 a4 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0122d61:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122d64:	e8 5f 10 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122d69:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0122d6c:	83 ec 0c             	sub    $0xc,%esp
f0122d6f:	68 00 fc 2f 00       	push   $0x2ffc00
f0122d74:	e8 12 50 fe ff       	call   f0107d8b <kmalloc>
f0122d79:	83 c4 10             	add    $0x10,%esp
f0122d7c:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122d82:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122d88:	89 c1                	mov    %eax,%ecx
f0122d8a:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0122d91:	10 00 00 
f0122d94:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0122d9a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122d9f:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0122da5:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0122dab:	ba 00 00 00 00       	mov    $0x0,%edx
f0122db0:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0122db6:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0122dbc:	29 d0                	sub    %edx,%eax
f0122dbe:	89 c3                	mov    %eax,%ebx
f0122dc0:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0122dc7:	10 00 00 
f0122dca:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0122dcf:	0f b6 d0             	movzbl %al,%edx
f0122dd2:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0122dd8:	01 d0                	add    %edx,%eax
f0122dda:	48                   	dec    %eax
f0122ddb:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0122de1:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0122de7:	ba 00 00 00 00       	mov    $0x0,%edx
f0122dec:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0122df2:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0122df8:	29 d0                	sub    %edx,%eax
f0122dfa:	01 c3                	add    %eax,%ebx
f0122dfc:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0122e03:	10 00 00 
f0122e06:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0122e0b:	0f b6 c0             	movzbl %al,%eax
f0122e0e:	c1 e0 04             	shl    $0x4,%eax
f0122e11:	89 c2                	mov    %eax,%edx
f0122e13:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0122e19:	01 d0                	add    %edx,%eax
f0122e1b:	48                   	dec    %eax
f0122e1c:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0122e22:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0122e28:	ba 00 00 00 00       	mov    $0x0,%edx
f0122e2d:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0122e33:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0122e39:	29 d0                	sub    %edx,%eax
f0122e3b:	01 d8                	add    %ebx,%eax
f0122e3d:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0122e42:	39 c1                	cmp    %eax,%ecx
f0122e44:	74 17                	je     f0122e5d <test_kfree_bestfirstfit+0x829>
f0122e46:	83 ec 04             	sub    $0x4,%esp
f0122e49:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0122e4e:	68 d1 06 00 00       	push   $0x6d1
f0122e53:	68 fa b8 13 f0       	push   $0xf013b8fa
f0122e58:	e8 a8 d3 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122e5d:	e8 66 0f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122e62:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122e65:	74 17                	je     f0122e7e <test_kfree_bestfirstfit+0x84a>
f0122e67:	83 ec 04             	sub    $0x4,%esp
f0122e6a:	68 14 b9 13 f0       	push   $0xf013b914
f0122e6f:	68 d2 06 00 00       	push   $0x6d2
f0122e74:	68 fa b8 13 f0       	push   $0xf013b8fa
f0122e79:	e8 87 d3 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122e7e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122e81:	e8 11 a3 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0122e86:	29 c3                	sub    %eax,%ebx
f0122e88:	89 d8                	mov    %ebx,%eax
f0122e8a:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122e8f:	74 17                	je     f0122ea8 <test_kfree_bestfirstfit+0x874>
f0122e91:	83 ec 04             	sub    $0x4,%esp
f0122e94:	68 7c b9 13 f0       	push   $0xf013b97c
f0122e99:	68 d3 06 00 00       	push   $0x6d3
f0122e9e:	68 fa b8 13 f0       	push   $0xf013b8fa
f0122ea3:	e8 5d d3 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0122ea8:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f0122eaf:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0122eb2:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122eb8:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0122ebb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122ec2:	eb 0e                	jmp    f0122ed2 <test_kfree_bestfirstfit+0x89e>
		{
			ptr[i] = 5 ;
f0122ec4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122ec7:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122eca:	01 d0                	add    %edx,%eax
f0122ecc:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0122ecf:	ff 45 f4             	incl   -0xc(%ebp)
f0122ed2:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0122ed8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122edb:	7f e7                	jg     f0122ec4 <test_kfree_bestfirstfit+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0122edd:	e8 b5 a2 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0122ee2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122ee5:	e8 de 0e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122eea:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0122eed:	83 ec 0c             	sub    $0xc,%esp
f0122ef0:	68 00 fc 5f 00       	push   $0x5ffc00
f0122ef5:	e8 91 4e fe ff       	call   f0107d8b <kmalloc>
f0122efa:	83 c4 10             	add    $0x10,%esp
f0122efd:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122f03:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0122f09:	89 c1                	mov    %eax,%ecx
f0122f0b:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0122f12:	10 00 00 
f0122f15:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0122f1b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122f20:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0122f26:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0122f2c:	ba 00 00 00 00       	mov    $0x0,%edx
f0122f31:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0122f37:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0122f3d:	29 d0                	sub    %edx,%eax
f0122f3f:	89 c3                	mov    %eax,%ebx
f0122f41:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0122f48:	10 00 00 
f0122f4b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0122f50:	0f b6 d0             	movzbl %al,%edx
f0122f53:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0122f59:	01 d0                	add    %edx,%eax
f0122f5b:	48                   	dec    %eax
f0122f5c:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0122f62:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0122f68:	ba 00 00 00 00       	mov    $0x0,%edx
f0122f6d:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0122f73:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0122f79:	29 d0                	sub    %edx,%eax
f0122f7b:	01 c3                	add    %eax,%ebx
f0122f7d:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0122f84:	10 00 00 
f0122f87:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0122f8c:	0f b6 c0             	movzbl %al,%eax
f0122f8f:	c1 e0 04             	shl    $0x4,%eax
f0122f92:	89 c2                	mov    %eax,%edx
f0122f94:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0122f9a:	01 d0                	add    %edx,%eax
f0122f9c:	48                   	dec    %eax
f0122f9d:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0122fa3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0122fa9:	ba 00 00 00 00       	mov    $0x0,%edx
f0122fae:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0122fb4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0122fba:	29 d0                	sub    %edx,%eax
f0122fbc:	01 d8                	add    %ebx,%eax
f0122fbe:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0122fc3:	39 c1                	cmp    %eax,%ecx
f0122fc5:	74 17                	je     f0122fde <test_kfree_bestfirstfit+0x9aa>
f0122fc7:	83 ec 04             	sub    $0x4,%esp
f0122fca:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0122fcf:	68 df 06 00 00       	push   $0x6df
f0122fd4:	68 fa b8 13 f0       	push   $0xf013b8fa
f0122fd9:	e8 27 d2 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122fde:	e8 e5 0d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122fe3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122fe6:	74 17                	je     f0122fff <test_kfree_bestfirstfit+0x9cb>
f0122fe8:	83 ec 04             	sub    $0x4,%esp
f0122feb:	68 14 b9 13 f0       	push   $0xf013b914
f0122ff0:	68 e0 06 00 00       	push   $0x6e0
f0122ff5:	68 fa b8 13 f0       	push   $0xf013b8fa
f0122ffa:	e8 06 d2 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122fff:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0123002:	e8 90 a1 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0123007:	29 c3                	sub    %eax,%ebx
f0123009:	89 d8                	mov    %ebx,%eax
f012300b:	3d 00 06 00 00       	cmp    $0x600,%eax
f0123010:	74 17                	je     f0123029 <test_kfree_bestfirstfit+0x9f5>
f0123012:	83 ec 04             	sub    $0x4,%esp
f0123015:	68 7c b9 13 f0       	push   $0xf013b97c
f012301a:	68 e1 06 00 00       	push   $0x6e1
f012301f:	68 fa b8 13 f0       	push   $0xf013b8fa
f0123024:	e8 dc d1 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0123029:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f0123030:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0123033:	e8 5f a1 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0123038:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012303b:	e8 88 0d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123040:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0123043:	83 ec 0c             	sub    $0xc,%esp
f0123046:	68 00 38 00 00       	push   $0x3800
f012304b:	e8 3b 4d fe ff       	call   f0107d8b <kmalloc>
f0123050:	83 c4 10             	add    $0x10,%esp
f0123053:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123059:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012305f:	89 c1                	mov    %eax,%ecx
f0123061:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0123068:	10 00 00 
f012306b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0123071:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123076:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012307c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0123082:	ba 00 00 00 00       	mov    $0x0,%edx
f0123087:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012308d:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0123093:	29 d0                	sub    %edx,%eax
f0123095:	89 c3                	mov    %eax,%ebx
f0123097:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012309e:	10 00 00 
f01230a1:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01230a6:	0f b6 d0             	movzbl %al,%edx
f01230a9:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01230af:	01 d0                	add    %edx,%eax
f01230b1:	48                   	dec    %eax
f01230b2:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f01230b8:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01230be:	ba 00 00 00 00       	mov    $0x0,%edx
f01230c3:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f01230c9:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01230cf:	29 d0                	sub    %edx,%eax
f01230d1:	01 c3                	add    %eax,%ebx
f01230d3:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f01230da:	10 00 00 
f01230dd:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01230e2:	0f b6 c0             	movzbl %al,%eax
f01230e5:	c1 e0 04             	shl    $0x4,%eax
f01230e8:	89 c2                	mov    %eax,%edx
f01230ea:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01230f0:	01 d0                	add    %edx,%eax
f01230f2:	48                   	dec    %eax
f01230f3:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f01230f9:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01230ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0123104:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012310a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0123110:	29 d0                	sub    %edx,%eax
f0123112:	01 d8                	add    %ebx,%eax
f0123114:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0123119:	39 c1                	cmp    %eax,%ecx
f012311b:	74 17                	je     f0123134 <test_kfree_bestfirstfit+0xb00>
f012311d:	83 ec 04             	sub    $0x4,%esp
f0123120:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0123125:	68 e8 06 00 00       	push   $0x6e8
f012312a:	68 fa b8 13 f0       	push   $0xf013b8fa
f012312f:	e8 d1 d0 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123134:	e8 8f 0c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123139:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012313c:	74 17                	je     f0123155 <test_kfree_bestfirstfit+0xb21>
f012313e:	83 ec 04             	sub    $0x4,%esp
f0123141:	68 14 b9 13 f0       	push   $0xf013b914
f0123146:	68 e9 06 00 00       	push   $0x6e9
f012314b:	68 fa b8 13 f0       	push   $0xf013b8fa
f0123150:	e8 b0 d0 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123155:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0123158:	e8 3a a0 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012315d:	29 c3                	sub    %eax,%ebx
f012315f:	89 d8                	mov    %ebx,%eax
f0123161:	83 f8 04             	cmp    $0x4,%eax
f0123164:	74 17                	je     f012317d <test_kfree_bestfirstfit+0xb49>
f0123166:	83 ec 04             	sub    $0x4,%esp
f0123169:	68 7c b9 13 f0       	push   $0xf013b97c
f012316e:	68 ea 06 00 00       	push   $0x6ea
f0123173:	68 fa b8 13 f0       	push   $0xf013b8fa
f0123178:	e8 88 d0 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f012317d:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f0123184:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0123187:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012318d:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0123190:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123197:	eb 0e                	jmp    f01231a7 <test_kfree_bestfirstfit+0xb73>
		{
			ptr[i] = 7 ;
f0123199:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012319c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012319f:	01 d0                	add    %edx,%eax
f01231a1:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01231a4:	ff 45 f4             	incl   -0xc(%ebp)
f01231a7:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01231ad:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01231b0:	7f e7                	jg     f0123199 <test_kfree_bestfirstfit+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01231b2:	e8 e0 9f fe ff       	call   f010d197 <sys_calculate_free_frames>
f01231b7:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01231bd:	e8 06 0c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01231c2:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f01231c8:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f01231ce:	83 ec 0c             	sub    $0xc,%esp
f01231d1:	50                   	push   %eax
f01231d2:	e8 7f 4c fe ff       	call   f0107e56 <kfree>
f01231d7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01231da:	e8 e9 0b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01231df:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01231e5:	74 17                	je     f01231fe <test_kfree_bestfirstfit+0xbca>
f01231e7:	83 ec 04             	sub    $0x4,%esp
f01231ea:	68 14 b9 13 f0       	push   $0xf013b914
f01231ef:	68 f9 06 00 00       	push   $0x6f9
f01231f4:	68 fa b8 13 f0       	push   $0xf013b8fa
f01231f9:	e8 07 d0 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01231fe:	e8 94 9f fe ff       	call   f010d197 <sys_calculate_free_frames>
f0123203:	89 c2                	mov    %eax,%edx
f0123205:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012320b:	29 c2                	sub    %eax,%edx
f012320d:	89 d0                	mov    %edx,%eax
f012320f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123214:	74 17                	je     f012322d <test_kfree_bestfirstfit+0xbf9>
f0123216:	83 ec 04             	sub    $0x4,%esp
f0123219:	68 84 c0 13 f0       	push   $0xf013c084
f012321e:	68 fa 06 00 00       	push   $0x6fa
f0123223:	68 fa b8 13 f0       	push   $0xf013b8fa
f0123228:	e8 d8 cf fd ff       	call   f0100205 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012322d:	e8 65 9f fe ff       	call   f010d197 <sys_calculate_free_frames>
f0123232:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123238:	e8 8b 0b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012323d:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f0123243:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0123249:	83 ec 0c             	sub    $0xc,%esp
f012324c:	50                   	push   %eax
f012324d:	e8 04 4c fe ff       	call   f0107e56 <kfree>
f0123252:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123255:	e8 6e 0b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012325a:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0123260:	74 17                	je     f0123279 <test_kfree_bestfirstfit+0xc45>
f0123262:	83 ec 04             	sub    $0x4,%esp
f0123265:	68 14 b9 13 f0       	push   $0xf013b914
f012326a:	68 00 07 00 00       	push   $0x700
f012326f:	68 fa b8 13 f0       	push   $0xf013b8fa
f0123274:	e8 8c cf fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0123279:	e8 19 9f fe ff       	call   f010d197 <sys_calculate_free_frames>
f012327e:	89 c2                	mov    %eax,%edx
f0123280:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0123286:	29 c2                	sub    %eax,%edx
f0123288:	89 d0                	mov    %edx,%eax
f012328a:	83 f8 01             	cmp    $0x1,%eax
f012328d:	74 17                	je     f01232a6 <test_kfree_bestfirstfit+0xc72>
f012328f:	83 ec 04             	sub    $0x4,%esp
f0123292:	68 84 c0 13 f0       	push   $0xf013c084
f0123297:	68 01 07 00 00       	push   $0x701
f012329c:	68 fa b8 13 f0       	push   $0xf013b8fa
f01232a1:	e8 5f cf fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01232a6:	e8 ec 9e fe ff       	call   f010d197 <sys_calculate_free_frames>
f01232ab:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01232b1:	e8 12 0b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01232b6:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f01232bc:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f01232c2:	83 ec 0c             	sub    $0xc,%esp
f01232c5:	50                   	push   %eax
f01232c6:	e8 8b 4b fe ff       	call   f0107e56 <kfree>
f01232cb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01232ce:	e8 f5 0a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01232d3:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01232d9:	74 17                	je     f01232f2 <test_kfree_bestfirstfit+0xcbe>
f01232db:	83 ec 04             	sub    $0x4,%esp
f01232de:	68 14 b9 13 f0       	push   $0xf013b914
f01232e3:	68 07 07 00 00       	push   $0x707
f01232e8:	68 fa b8 13 f0       	push   $0xf013b8fa
f01232ed:	e8 13 cf fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01232f2:	e8 a0 9e fe ff       	call   f010d197 <sys_calculate_free_frames>
f01232f7:	89 c2                	mov    %eax,%edx
f01232f9:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01232ff:	29 c2                	sub    %eax,%edx
f0123301:	89 d0                	mov    %edx,%eax
f0123303:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123308:	74 17                	je     f0123321 <test_kfree_bestfirstfit+0xced>
f012330a:	83 ec 04             	sub    $0x4,%esp
f012330d:	68 84 c0 13 f0       	push   $0xf013c084
f0123312:	68 08 07 00 00       	push   $0x708
f0123317:	68 fa b8 13 f0       	push   $0xf013b8fa
f012331c:	e8 e4 ce fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0123321:	e8 71 9e fe ff       	call   f010d197 <sys_calculate_free_frames>
f0123326:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012332c:	e8 97 0a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123331:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0123337:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f012333d:	83 ec 0c             	sub    $0xc,%esp
f0123340:	50                   	push   %eax
f0123341:	e8 10 4b fe ff       	call   f0107e56 <kfree>
f0123346:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123349:	e8 7a 0a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012334e:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0123354:	74 17                	je     f012336d <test_kfree_bestfirstfit+0xd39>
f0123356:	83 ec 04             	sub    $0x4,%esp
f0123359:	68 14 b9 13 f0       	push   $0xf013b914
f012335e:	68 0e 07 00 00       	push   $0x70e
f0123363:	68 fa b8 13 f0       	push   $0xf013b8fa
f0123368:	e8 98 ce fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012336d:	e8 25 9e fe ff       	call   f010d197 <sys_calculate_free_frames>
f0123372:	89 c2                	mov    %eax,%edx
f0123374:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012337a:	29 c2                	sub    %eax,%edx
f012337c:	89 d0                	mov    %edx,%eax
f012337e:	3d 00 06 00 00       	cmp    $0x600,%eax
f0123383:	74 17                	je     f012339c <test_kfree_bestfirstfit+0xd68>
f0123385:	83 ec 04             	sub    $0x4,%esp
f0123388:	68 84 c0 13 f0       	push   $0xf013c084
f012338d:	68 0f 07 00 00       	push   $0x70f
f0123392:	68 fa b8 13 f0       	push   $0xf013b8fa
f0123397:	e8 69 ce fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f012339c:	83 ec 0c             	sub    $0xc,%esp
f012339f:	68 bc c0 13 f0       	push   $0xf013c0bc
f01233a4:	e8 65 d9 fd ff       	call   f0100d0e <cprintf>
f01233a9:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f01233ac:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01233b2:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01233b5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01233bc:	eb 1e                	jmp    f01233dc <test_kfree_bestfirstfit+0xda8>
		{
			sums[3] += ptr[i] ;
f01233be:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f01233c4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01233c7:	8b 45 80             	mov    -0x80(%ebp),%eax
f01233ca:	01 c8                	add    %ecx,%eax
f01233cc:	8a 00                	mov    (%eax),%al
f01233ce:	0f be c0             	movsbl %al,%eax
f01233d1:	01 d0                	add    %edx,%eax
f01233d3:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01233d9:	ff 45 f4             	incl   -0xc(%ebp)
f01233dc:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01233e2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01233e5:	7f d7                	jg     f01233be <test_kfree_bestfirstfit+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f01233e7:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f01233ed:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01233f3:	89 c1                	mov    %eax,%ecx
f01233f5:	01 c9                	add    %ecx,%ecx
f01233f7:	01 c8                	add    %ecx,%eax
f01233f9:	39 c2                	cmp    %eax,%edx
f01233fb:	74 17                	je     f0123414 <test_kfree_bestfirstfit+0xde0>
f01233fd:	83 ec 04             	sub    $0x4,%esp
f0123400:	68 e0 c0 13 f0       	push   $0xf013c0e0
f0123405:	68 1c 07 00 00       	push   $0x71c
f012340a:	68 fa b8 13 f0       	push   $0xf013b8fa
f012340f:	e8 f1 cd fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0123414:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f012341a:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012341d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123424:	eb 1e                	jmp    f0123444 <test_kfree_bestfirstfit+0xe10>
		{
			sums[4] += ptr[i] ;
f0123426:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f012342c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012342f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123432:	01 c8                	add    %ecx,%eax
f0123434:	8a 00                	mov    (%eax),%al
f0123436:	0f be c0             	movsbl %al,%eax
f0123439:	01 d0                	add    %edx,%eax
f012343b:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0123441:	ff 45 f4             	incl   -0xc(%ebp)
f0123444:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012344a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012344d:	7f d7                	jg     f0123426 <test_kfree_bestfirstfit+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f012344f:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0123455:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f012345b:	c1 e2 02             	shl    $0x2,%edx
f012345e:	39 d0                	cmp    %edx,%eax
f0123460:	74 17                	je     f0123479 <test_kfree_bestfirstfit+0xe45>
f0123462:	83 ec 04             	sub    $0x4,%esp
f0123465:	68 e0 c0 13 f0       	push   $0xf013c0e0
f012346a:	68 24 07 00 00       	push   $0x724
f012346f:	68 fa b8 13 f0       	push   $0xf013b8fa
f0123474:	e8 8c cd fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0123479:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f012347f:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0123482:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123489:	eb 1e                	jmp    f01234a9 <test_kfree_bestfirstfit+0xe75>
		{
			sums[5] += ptr[i] ;
f012348b:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f0123491:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0123494:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123497:	01 c8                	add    %ecx,%eax
f0123499:	8a 00                	mov    (%eax),%al
f012349b:	0f be c0             	movsbl %al,%eax
f012349e:	01 d0                	add    %edx,%eax
f01234a0:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01234a6:	ff 45 f4             	incl   -0xc(%ebp)
f01234a9:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01234af:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01234b2:	7f d7                	jg     f012348b <test_kfree_bestfirstfit+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f01234b4:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f01234ba:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f01234c0:	89 d0                	mov    %edx,%eax
f01234c2:	c1 e0 02             	shl    $0x2,%eax
f01234c5:	01 d0                	add    %edx,%eax
f01234c7:	39 c1                	cmp    %eax,%ecx
f01234c9:	74 17                	je     f01234e2 <test_kfree_bestfirstfit+0xeae>
f01234cb:	83 ec 04             	sub    $0x4,%esp
f01234ce:	68 e0 c0 13 f0       	push   $0xf013c0e0
f01234d3:	68 2c 07 00 00       	push   $0x72c
f01234d8:	68 fa b8 13 f0       	push   $0xf013b8fa
f01234dd:	e8 23 cd fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f01234e2:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01234e8:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01234eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01234f2:	eb 1e                	jmp    f0123512 <test_kfree_bestfirstfit+0xede>
		{
			sums[7] += ptr[i] ;
f01234f4:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f01234fa:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01234fd:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123500:	01 c8                	add    %ecx,%eax
f0123502:	8a 00                	mov    (%eax),%al
f0123504:	0f be c0             	movsbl %al,%eax
f0123507:	01 d0                	add    %edx,%eax
f0123509:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012350f:	ff 45 f4             	incl   -0xc(%ebp)
f0123512:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0123518:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012351b:	7f d7                	jg     f01234f4 <test_kfree_bestfirstfit+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f012351d:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f0123523:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0123529:	89 d0                	mov    %edx,%eax
f012352b:	01 c0                	add    %eax,%eax
f012352d:	01 d0                	add    %edx,%eax
f012352f:	01 c0                	add    %eax,%eax
f0123531:	01 d0                	add    %edx,%eax
f0123533:	39 c1                	cmp    %eax,%ecx
f0123535:	74 17                	je     f012354e <test_kfree_bestfirstfit+0xf1a>
f0123537:	83 ec 04             	sub    $0x4,%esp
f012353a:	68 e0 c0 13 f0       	push   $0xf013c0e0
f012353f:	68 34 07 00 00       	push   $0x734
f0123544:	68 fa b8 13 f0       	push   $0xf013b8fa
f0123549:	e8 b7 cc fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b30%");
f012354e:	83 ec 0c             	sub    $0xc,%esp
f0123551:	68 13 c1 13 f0       	push   $0xf013c113
f0123556:	e8 b3 d7 fd ff       	call   f0100d0e <cprintf>
f012355b:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//Allocate in merged freed space
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012355e:	e8 34 9c fe ff       	call   f010d197 <sys_calculate_free_frames>
f0123563:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123566:	e8 5d 08 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012356b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega);
f012356e:	83 ec 0c             	sub    $0xc,%esp
f0123571:	68 00 00 30 00       	push   $0x300000
f0123576:	e8 10 48 fe ff       	call   f0107d8b <kmalloc>
f012357b:	83 c4 10             	add    $0x10,%esp
f012357e:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123584:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f012358a:	89 c1                	mov    %eax,%ecx
f012358c:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0123593:	10 00 00 
f0123596:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012359c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01235a1:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f01235a7:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01235ad:	ba 00 00 00 00       	mov    $0x0,%edx
f01235b2:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f01235b8:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01235be:	29 d0                	sub    %edx,%eax
f01235c0:	89 c3                	mov    %eax,%ebx
f01235c2:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f01235c9:	10 00 00 
f01235cc:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01235d1:	0f b6 d0             	movzbl %al,%edx
f01235d4:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01235da:	01 d0                	add    %edx,%eax
f01235dc:	48                   	dec    %eax
f01235dd:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f01235e3:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01235e9:	ba 00 00 00 00       	mov    $0x0,%edx
f01235ee:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f01235f4:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01235fa:	29 d0                	sub    %edx,%eax
f01235fc:	01 c3                	add    %eax,%ebx
f01235fe:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0123605:	10 00 00 
f0123608:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012360d:	0f b6 c0             	movzbl %al,%eax
f0123610:	c1 e0 04             	shl    $0x4,%eax
f0123613:	89 c2                	mov    %eax,%edx
f0123615:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012361b:	01 d0                	add    %edx,%eax
f012361d:	48                   	dec    %eax
f012361e:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0123624:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012362a:	ba 00 00 00 00       	mov    $0x0,%edx
f012362f:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0123635:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012363b:	29 d0                	sub    %edx,%eax
f012363d:	01 d8                	add    %ebx,%eax
f012363f:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0123644:	39 c1                	cmp    %eax,%ecx
f0123646:	74 17                	je     f012365f <test_kfree_bestfirstfit+0x102b>
f0123648:	83 ec 04             	sub    $0x4,%esp
f012364b:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0123650:	68 3f 07 00 00       	push   $0x73f
f0123655:	68 fa b8 13 f0       	push   $0xf013b8fa
f012365a:	e8 a6 cb fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012365f:	e8 64 07 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123664:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123667:	74 17                	je     f0123680 <test_kfree_bestfirstfit+0x104c>
f0123669:	83 ec 04             	sub    $0x4,%esp
f012366c:	68 14 b9 13 f0       	push   $0xf013b914
f0123671:	68 40 07 00 00       	push   $0x740
f0123676:	68 fa b8 13 f0       	push   $0xf013b8fa
f012367b:	e8 85 cb fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123680:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0123683:	e8 0f 9b fe ff       	call   f010d197 <sys_calculate_free_frames>
f0123688:	29 c3                	sub    %eax,%ebx
f012368a:	89 d8                	mov    %ebx,%eax
f012368c:	3d 00 03 00 00       	cmp    $0x300,%eax
f0123691:	74 17                	je     f01236aa <test_kfree_bestfirstfit+0x1076>
f0123693:	83 ec 04             	sub    $0x4,%esp
f0123696:	68 7c b9 13 f0       	push   $0xf013b97c
f012369b:	68 41 07 00 00       	push   $0x741
f01236a0:	68 fa b8 13 f0       	push   $0xf013b8fa
f01236a5:	e8 5b cb fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
f01236aa:	c7 85 88 fe ff ff ff 	movl   $0x2fffff,-0x178(%ebp)
f01236b1:	ff 2f 00 
		ptr = (char*)ptr_allocations[8];
f01236b4:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01236ba:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f01236bd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01236c4:	eb 0e                	jmp    f01236d4 <test_kfree_bestfirstfit+0x10a0>
		{
			ptr[i] = 8 ;
f01236c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01236c9:	8b 45 80             	mov    -0x80(%ebp),%eax
f01236cc:	01 d0                	add    %edx,%eax
f01236ce:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f01236d1:	ff 45 f4             	incl   -0xc(%ebp)
f01236d4:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01236da:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01236dd:	7f e7                	jg     f01236c6 <test_kfree_bestfirstfit+0x1092>
		{
			ptr[i] = 8 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01236df:	e8 b3 9a fe ff       	call   f010d197 <sys_calculate_free_frames>
f01236e4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01236e7:	e8 dc 06 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01236ec:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(2*kilo);
f01236ef:	83 ec 0c             	sub    $0xc,%esp
f01236f2:	68 00 08 00 00       	push   $0x800
f01236f7:	e8 8f 46 fe ff       	call   f0107d8b <kmalloc>
f01236fc:	83 c4 10             	add    $0x10,%esp
f01236ff:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123705:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f012370b:	89 c1                	mov    %eax,%ecx
f012370d:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0123714:	10 00 00 
f0123717:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012371d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123722:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0123728:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012372e:	ba 00 00 00 00       	mov    $0x0,%edx
f0123733:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0123739:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012373f:	29 d0                	sub    %edx,%eax
f0123741:	89 c3                	mov    %eax,%ebx
f0123743:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f012374a:	10 00 00 
f012374d:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0123752:	0f b6 d0             	movzbl %al,%edx
f0123755:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012375b:	01 d0                	add    %edx,%eax
f012375d:	48                   	dec    %eax
f012375e:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0123764:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012376a:	ba 00 00 00 00       	mov    $0x0,%edx
f012376f:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0123775:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012377b:	29 d0                	sub    %edx,%eax
f012377d:	01 c3                	add    %eax,%ebx
f012377f:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0123786:	10 00 00 
f0123789:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012378e:	0f b6 c0             	movzbl %al,%eax
f0123791:	c1 e0 04             	shl    $0x4,%eax
f0123794:	89 c2                	mov    %eax,%edx
f0123796:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012379c:	01 d0                	add    %edx,%eax
f012379e:	48                   	dec    %eax
f012379f:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f01237a5:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01237ab:	ba 00 00 00 00       	mov    $0x0,%edx
f01237b0:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f01237b6:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01237bc:	29 d0                	sub    %edx,%eax
f01237be:	01 d8                	add    %ebx,%eax
f01237c0:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f01237c5:	39 c1                	cmp    %eax,%ecx
f01237c7:	74 17                	je     f01237e0 <test_kfree_bestfirstfit+0x11ac>
f01237c9:	83 ec 04             	sub    $0x4,%esp
f01237cc:	68 e0 b9 13 f0       	push   $0xf013b9e0
f01237d1:	68 4d 07 00 00       	push   $0x74d
f01237d6:	68 fa b8 13 f0       	push   $0xf013b8fa
f01237db:	e8 25 ca fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01237e0:	e8 e3 05 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01237e5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01237e8:	74 17                	je     f0123801 <test_kfree_bestfirstfit+0x11cd>
f01237ea:	83 ec 04             	sub    $0x4,%esp
f01237ed:	68 14 b9 13 f0       	push   $0xf013b914
f01237f2:	68 4e 07 00 00       	push   $0x74e
f01237f7:	68 fa b8 13 f0       	push   $0xf013b8fa
f01237fc:	e8 04 ca fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123801:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0123804:	e8 8e 99 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0123809:	29 c3                	sub    %eax,%ebx
f012380b:	89 d8                	mov    %ebx,%eax
f012380d:	83 f8 01             	cmp    $0x1,%eax
f0123810:	74 17                	je     f0123829 <test_kfree_bestfirstfit+0x11f5>
f0123812:	83 ec 04             	sub    $0x4,%esp
f0123815:	68 7c b9 13 f0       	push   $0xf013b97c
f012381a:	68 4f 07 00 00       	push   $0x74f
f012381f:	68 fa b8 13 f0       	push   $0xf013b8fa
f0123824:	e8 dc c9 fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
f0123829:	c7 85 8c fe ff ff ff 	movl   $0x7ff,-0x174(%ebp)
f0123830:	07 00 00 
		ptr = (char*)ptr_allocations[9];
f0123833:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0123839:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f012383c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123843:	eb 0e                	jmp    f0123853 <test_kfree_bestfirstfit+0x121f>
		{
			ptr[i] = 9 ;
f0123845:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0123848:	8b 45 80             	mov    -0x80(%ebp),%eax
f012384b:	01 d0                	add    %edx,%eax
f012384d:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0123850:	ff 45 f4             	incl   -0xc(%ebp)
f0123853:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0123859:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012385c:	7f e7                	jg     f0123845 <test_kfree_bestfirstfit+0x1211>
		{
			ptr[i] = 9 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012385e:	e8 34 99 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0123863:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123866:	e8 5d 05 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012386b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(1*Mega);
f012386e:	83 ec 0c             	sub    $0xc,%esp
f0123871:	68 00 00 10 00       	push   $0x100000
f0123876:	e8 10 45 fe ff       	call   f0107d8b <kmalloc>
f012387b:	83 c4 10             	add    $0x10,%esp
f012387e:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123884:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012388a:	89 c1                	mov    %eax,%ecx
f012388c:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0123893:	10 00 00 
f0123896:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012389c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01238a1:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f01238a7:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01238ad:	ba 00 00 00 00       	mov    $0x0,%edx
f01238b2:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f01238b8:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01238be:	29 d0                	sub    %edx,%eax
f01238c0:	89 c3                	mov    %eax,%ebx
f01238c2:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f01238c9:	10 00 00 
f01238cc:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01238d1:	0f b6 d0             	movzbl %al,%edx
f01238d4:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01238da:	01 d0                	add    %edx,%eax
f01238dc:	48                   	dec    %eax
f01238dd:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f01238e3:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01238e9:	ba 00 00 00 00       	mov    $0x0,%edx
f01238ee:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f01238f4:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01238fa:	29 d0                	sub    %edx,%eax
f01238fc:	01 c3                	add    %eax,%ebx
f01238fe:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0123905:	10 00 00 
f0123908:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012390d:	0f b6 c0             	movzbl %al,%eax
f0123910:	c1 e0 04             	shl    $0x4,%eax
f0123913:	89 c2                	mov    %eax,%edx
f0123915:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012391b:	01 d0                	add    %edx,%eax
f012391d:	48                   	dec    %eax
f012391e:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0123924:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012392a:	ba 00 00 00 00       	mov    $0x0,%edx
f012392f:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0123935:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012393b:	29 d0                	sub    %edx,%eax
f012393d:	01 d8                	add    %ebx,%eax
f012393f:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0123944:	39 c1                	cmp    %eax,%ecx
f0123946:	74 17                	je     f012395f <test_kfree_bestfirstfit+0x132b>
f0123948:	83 ec 04             	sub    $0x4,%esp
f012394b:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0123950:	68 5b 07 00 00       	push   $0x75b
f0123955:	68 fa b8 13 f0       	push   $0xf013b8fa
f012395a:	e8 a6 c8 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012395f:	e8 64 04 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123964:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123967:	74 17                	je     f0123980 <test_kfree_bestfirstfit+0x134c>
f0123969:	83 ec 04             	sub    $0x4,%esp
f012396c:	68 14 b9 13 f0       	push   $0xf013b914
f0123971:	68 5c 07 00 00       	push   $0x75c
f0123976:	68 fa b8 13 f0       	push   $0xf013b8fa
f012397b:	e8 85 c8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123980:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0123983:	e8 0f 98 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0123988:	29 c3                	sub    %eax,%ebx
f012398a:	89 d8                	mov    %ebx,%eax
f012398c:	3d 00 01 00 00       	cmp    $0x100,%eax
f0123991:	74 17                	je     f01239aa <test_kfree_bestfirstfit+0x1376>
f0123993:	83 ec 04             	sub    $0x4,%esp
f0123996:	68 7c b9 13 f0       	push   $0xf013b97c
f012399b:	68 5d 07 00 00       	push   $0x75d
f01239a0:	68 fa b8 13 f0       	push   $0xf013b8fa
f01239a5:	e8 5b c8 fd ff       	call   f0100205 <_panic>
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
f01239aa:	c7 85 90 fe ff ff ff 	movl   $0xfffff,-0x170(%ebp)
f01239b1:	ff 0f 00 
		ptr = (char*)ptr_allocations[10];
f01239b4:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01239ba:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f01239bd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01239c4:	eb 0e                	jmp    f01239d4 <test_kfree_bestfirstfit+0x13a0>
		{
			ptr[i] = 10 ;
f01239c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01239c9:	8b 45 80             	mov    -0x80(%ebp),%eax
f01239cc:	01 d0                	add    %edx,%eax
f01239ce:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f01239d1:	ff 45 f4             	incl   -0xc(%ebp)
f01239d4:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01239da:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01239dd:	7f e7                	jg     f01239c6 <test_kfree_bestfirstfit+0x1392>
		{
			ptr[i] = 10 ;
		}
	}
	cprintf("\b\b\b45%");
f01239df:	83 ec 0c             	sub    $0xc,%esp
f01239e2:	68 1a c1 13 f0       	push   $0xf013c11a
f01239e7:	e8 22 d3 fd ff       	call   f0100d0e <cprintf>
f01239ec:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f01239ef:	e8 a3 97 fe ff       	call   f010d197 <sys_calculate_free_frames>
f01239f4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01239f7:	e8 cc 03 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01239fc:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f01239ff:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0123a05:	83 ec 0c             	sub    $0xc,%esp
f0123a08:	50                   	push   %eax
f0123a09:	e8 48 44 fe ff       	call   f0107e56 <kfree>
f0123a0e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123a11:	e8 b2 03 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123a16:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123a19:	74 17                	je     f0123a32 <test_kfree_bestfirstfit+0x13fe>
f0123a1b:	83 ec 04             	sub    $0x4,%esp
f0123a1e:	68 14 b9 13 f0       	push   $0xf013b914
f0123a23:	68 6d 07 00 00       	push   $0x76d
f0123a28:	68 fa b8 13 f0       	push   $0xf013b8fa
f0123a2d:	e8 d3 c7 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0123a32:	e8 60 97 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0123a37:	89 c2                	mov    %eax,%edx
f0123a39:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123a3c:	29 c2                	sub    %eax,%edx
f0123a3e:	89 d0                	mov    %edx,%eax
f0123a40:	83 f8 02             	cmp    $0x2,%eax
f0123a43:	74 17                	je     f0123a5c <test_kfree_bestfirstfit+0x1428>
f0123a45:	83 ec 04             	sub    $0x4,%esp
f0123a48:	68 84 c0 13 f0       	push   $0xf013c084
f0123a4d:	68 6e 07 00 00       	push   $0x76e
f0123a52:	68 fa b8 13 f0       	push   $0xf013b8fa
f0123a57:	e8 a9 c7 fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123a5c:	e8 36 97 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0123a61:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123a64:	e8 5f 03 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123a69:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0123a6c:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0123a72:	83 ec 0c             	sub    $0xc,%esp
f0123a75:	50                   	push   %eax
f0123a76:	e8 db 43 fe ff       	call   f0107e56 <kfree>
f0123a7b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123a7e:	e8 45 03 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123a83:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123a86:	74 17                	je     f0123a9f <test_kfree_bestfirstfit+0x146b>
f0123a88:	83 ec 04             	sub    $0x4,%esp
f0123a8b:	68 14 b9 13 f0       	push   $0xf013b914
f0123a90:	68 74 07 00 00       	push   $0x774
f0123a95:	68 fa b8 13 f0       	push   $0xf013b8fa
f0123a9a:	e8 66 c7 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123a9f:	e8 f3 96 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0123aa4:	89 c2                	mov    %eax,%edx
f0123aa6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123aa9:	29 c2                	sub    %eax,%edx
f0123aab:	89 d0                	mov    %edx,%eax
f0123aad:	3d 00 03 00 00       	cmp    $0x300,%eax
f0123ab2:	74 17                	je     f0123acb <test_kfree_bestfirstfit+0x1497>
f0123ab4:	83 ec 04             	sub    $0x4,%esp
f0123ab7:	68 84 c0 13 f0       	push   $0xf013c084
f0123abc:	68 75 07 00 00       	push   $0x775
f0123ac1:	68 fa b8 13 f0       	push   $0xf013b8fa
f0123ac6:	e8 3a c7 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123acb:	e8 c7 96 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0123ad0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123ad3:	e8 f0 02 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123ad8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0123adb:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0123ae1:	83 ec 0c             	sub    $0xc,%esp
f0123ae4:	50                   	push   %eax
f0123ae5:	e8 6c 43 fe ff       	call   f0107e56 <kfree>
f0123aea:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123aed:	e8 d6 02 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123af2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123af5:	74 17                	je     f0123b0e <test_kfree_bestfirstfit+0x14da>
f0123af7:	83 ec 04             	sub    $0x4,%esp
f0123afa:	68 14 b9 13 f0       	push   $0xf013b914
f0123aff:	68 7b 07 00 00       	push   $0x77b
f0123b04:	68 fa b8 13 f0       	push   $0xf013b8fa
f0123b09:	e8 f7 c6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0123b0e:	e8 84 96 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0123b13:	89 c2                	mov    %eax,%edx
f0123b15:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123b18:	29 c2                	sub    %eax,%edx
f0123b1a:	89 d0                	mov    %edx,%eax
f0123b1c:	83 f8 01             	cmp    $0x1,%eax
f0123b1f:	74 17                	je     f0123b38 <test_kfree_bestfirstfit+0x1504>
f0123b21:	83 ec 04             	sub    $0x4,%esp
f0123b24:	68 84 c0 13 f0       	push   $0xf013c084
f0123b29:	68 7c 07 00 00       	push   $0x77c
f0123b2e:	68 fa b8 13 f0       	push   $0xf013b8fa
f0123b33:	e8 cd c6 fd ff       	call   f0100205 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0123b38:	e8 5a 96 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0123b3d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123b40:	e8 83 02 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123b45:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0123b48:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0123b4e:	83 ec 0c             	sub    $0xc,%esp
f0123b51:	50                   	push   %eax
f0123b52:	e8 ff 42 fe ff       	call   f0107e56 <kfree>
f0123b57:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123b5a:	e8 69 02 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123b5f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123b62:	74 17                	je     f0123b7b <test_kfree_bestfirstfit+0x1547>
f0123b64:	83 ec 04             	sub    $0x4,%esp
f0123b67:	68 14 b9 13 f0       	push   $0xf013b914
f0123b6c:	68 82 07 00 00       	push   $0x782
f0123b71:	68 fa b8 13 f0       	push   $0xf013b8fa
f0123b76:	e8 8a c6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0123b7b:	e8 17 96 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0123b80:	89 c2                	mov    %eax,%edx
f0123b82:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123b85:	29 c2                	sub    %eax,%edx
f0123b87:	89 d0                	mov    %edx,%eax
f0123b89:	83 f8 04             	cmp    $0x4,%eax
f0123b8c:	74 17                	je     f0123ba5 <test_kfree_bestfirstfit+0x1571>
f0123b8e:	83 ec 04             	sub    $0x4,%esp
f0123b91:	68 84 c0 13 f0       	push   $0xf013c084
f0123b96:	68 83 07 00 00       	push   $0x783
f0123b9b:	68 fa b8 13 f0       	push   $0xf013b8fa
f0123ba0:	e8 60 c6 fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123ba5:	e8 ed 95 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0123baa:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123bad:	e8 16 02 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123bb2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0123bb5:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0123bbb:	83 ec 0c             	sub    $0xc,%esp
f0123bbe:	50                   	push   %eax
f0123bbf:	e8 92 42 fe ff       	call   f0107e56 <kfree>
f0123bc4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123bc7:	e8 fc 01 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123bcc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123bcf:	74 17                	je     f0123be8 <test_kfree_bestfirstfit+0x15b4>
f0123bd1:	83 ec 04             	sub    $0x4,%esp
f0123bd4:	68 14 b9 13 f0       	push   $0xf013b914
f0123bd9:	68 89 07 00 00       	push   $0x789
f0123bde:	68 fa b8 13 f0       	push   $0xf013b8fa
f0123be3:	e8 1d c6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123be8:	e8 aa 95 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0123bed:	89 c2                	mov    %eax,%edx
f0123bef:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123bf2:	29 c2                	sub    %eax,%edx
f0123bf4:	89 d0                	mov    %edx,%eax
f0123bf6:	3d 00 03 00 00       	cmp    $0x300,%eax
f0123bfb:	74 17                	je     f0123c14 <test_kfree_bestfirstfit+0x15e0>
f0123bfd:	83 ec 04             	sub    $0x4,%esp
f0123c00:	68 84 c0 13 f0       	push   $0xf013c084
f0123c05:	68 8a 07 00 00       	push   $0x78a
f0123c0a:	68 fa b8 13 f0       	push   $0xf013b8fa
f0123c0f:	e8 f1 c5 fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123c14:	e8 7e 95 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0123c19:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123c1c:	e8 a7 01 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123c21:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0123c24:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0123c2a:	83 ec 0c             	sub    $0xc,%esp
f0123c2d:	50                   	push   %eax
f0123c2e:	e8 23 42 fe ff       	call   f0107e56 <kfree>
f0123c33:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123c36:	e8 8d 01 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123c3b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123c3e:	74 17                	je     f0123c57 <test_kfree_bestfirstfit+0x1623>
f0123c40:	83 ec 04             	sub    $0x4,%esp
f0123c43:	68 14 b9 13 f0       	push   $0xf013b914
f0123c48:	68 90 07 00 00       	push   $0x790
f0123c4d:	68 fa b8 13 f0       	push   $0xf013b8fa
f0123c52:	e8 ae c5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0123c57:	e8 3b 95 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0123c5c:	89 c2                	mov    %eax,%edx
f0123c5e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123c61:	29 c2                	sub    %eax,%edx
f0123c63:	89 d0                	mov    %edx,%eax
f0123c65:	83 f8 01             	cmp    $0x1,%eax
f0123c68:	74 17                	je     f0123c81 <test_kfree_bestfirstfit+0x164d>
f0123c6a:	83 ec 04             	sub    $0x4,%esp
f0123c6d:	68 84 c0 13 f0       	push   $0xf013c084
f0123c72:	68 91 07 00 00       	push   $0x791
f0123c77:	68 fa b8 13 f0       	push   $0xf013b8fa
f0123c7c:	e8 84 c5 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0123c81:	e8 11 95 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0123c86:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123c89:	e8 3a 01 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123c8e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[10]);
f0123c91:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0123c97:	83 ec 0c             	sub    $0xc,%esp
f0123c9a:	50                   	push   %eax
f0123c9b:	e8 b6 41 fe ff       	call   f0107e56 <kfree>
f0123ca0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123ca3:	e8 20 01 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123ca8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123cab:	74 17                	je     f0123cc4 <test_kfree_bestfirstfit+0x1690>
f0123cad:	83 ec 04             	sub    $0x4,%esp
f0123cb0:	68 14 b9 13 f0       	push   $0xf013b914
f0123cb5:	68 97 07 00 00       	push   $0x797
f0123cba:	68 fa b8 13 f0       	push   $0xf013b8fa
f0123cbf:	e8 41 c5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123cc4:	e8 ce 94 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0123cc9:	89 c2                	mov    %eax,%edx
f0123ccb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123cce:	29 c2                	sub    %eax,%edx
f0123cd0:	89 d0                	mov    %edx,%eax
f0123cd2:	3d 00 01 00 00       	cmp    $0x100,%eax
f0123cd7:	74 17                	je     f0123cf0 <test_kfree_bestfirstfit+0x16bc>
f0123cd9:	83 ec 04             	sub    $0x4,%esp
f0123cdc:	68 84 c0 13 f0       	push   $0xf013c084
f0123ce1:	68 98 07 00 00       	push   $0x798
f0123ce6:	68 fa b8 13 f0       	push   $0xf013b8fa
f0123ceb:	e8 15 c5 fd ff       	call   f0100205 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0123cf0:	e8 a2 94 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0123cf5:	89 c2                	mov    %eax,%edx
f0123cf7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0123cfa:	39 c2                	cmp    %eax,%edx
f0123cfc:	74 17                	je     f0123d15 <test_kfree_bestfirstfit+0x16e1>
f0123cfe:	83 ec 04             	sub    $0x4,%esp
f0123d01:	68 24 c1 13 f0       	push   $0xf013c124
f0123d06:	68 9a 07 00 00       	push   $0x79a
f0123d0b:	68 fa b8 13 f0       	push   $0xf013b8fa
f0123d10:	e8 f0 c4 fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b60%");
f0123d15:	83 ec 0c             	sub    $0xc,%esp
f0123d18:	68 58 c1 13 f0       	push   $0xf013c158
f0123d1d:	e8 ec cf fd ff       	call   f0100d0e <cprintf>
f0123d22:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0123d25:	83 ec 0c             	sub    $0xc,%esp
f0123d28:	6a 03                	push   $0x3
f0123d2a:	e8 08 99 fe ff       	call   f010d637 <sys_bypassPageFault>
f0123d2f:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0123d32:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123d39:	e9 82 00 00 00       	jmp    f0123dc0 <test_kfree_bestfirstfit+0x178c>
		{
			ptr = (char *) ptr_allocations[i];
f0123d3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123d41:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f0123d48:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0123d4b:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123d4e:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0123d51:	e8 cf 98 fe ff       	call   f010d625 <sys_rcr2>
f0123d56:	89 c2                	mov    %eax,%edx
f0123d58:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123d5b:	39 c2                	cmp    %eax,%edx
f0123d5d:	74 17                	je     f0123d76 <test_kfree_bestfirstfit+0x1742>
f0123d5f:	83 ec 04             	sub    $0x4,%esp
f0123d62:	68 60 c1 13 f0       	push   $0xf013c160
f0123d67:	68 a9 07 00 00       	push   $0x7a9
f0123d6c:	68 fa b8 13 f0       	push   $0xf013b8fa
f0123d71:	e8 8f c4 fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f0123d76:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123d79:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0123d80:	89 c2                	mov    %eax,%edx
f0123d82:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123d85:	01 d0                	add    %edx,%eax
f0123d87:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0123d8a:	e8 96 98 fe ff       	call   f010d625 <sys_rcr2>
f0123d8f:	89 c2                	mov    %eax,%edx
f0123d91:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123d94:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0123d9b:	89 c1                	mov    %eax,%ecx
f0123d9d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123da0:	01 c8                	add    %ecx,%eax
f0123da2:	39 c2                	cmp    %eax,%edx
f0123da4:	74 17                	je     f0123dbd <test_kfree_bestfirstfit+0x1789>
f0123da6:	83 ec 04             	sub    $0x4,%esp
f0123da9:	68 60 c1 13 f0       	push   $0xf013c160
f0123dae:	68 ab 07 00 00       	push   $0x7ab
f0123db3:	68 fa b8 13 f0       	push   $0xf013b8fa
f0123db8:	e8 48 c4 fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0123dbd:	ff 45 f4             	incl   -0xc(%ebp)
f0123dc0:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0123dc4:	0f 8e 74 ff ff ff    	jle    f0123d3e <test_kfree_bestfirstfit+0x170a>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0123dca:	83 ec 0c             	sub    $0xc,%esp
f0123dcd:	6a 00                	push   $0x0
f0123dcf:	e8 63 98 fe ff       	call   f010d637 <sys_bypassPageFault>
f0123dd4:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0123dd7:	83 ec 0c             	sub    $0xc,%esp
f0123dda:	68 a5 c1 13 f0       	push   $0xf013c1a5
f0123ddf:	e8 2a cf fd ff       	call   f0100d0e <cprintf>
f0123de4:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123de7:	e8 ab 93 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0123dec:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123def:	e8 d4 ff fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123df4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0123df7:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0123dfd:	83 ec 0c             	sub    $0xc,%esp
f0123e00:	50                   	push   %eax
f0123e01:	e8 50 40 fe ff       	call   f0107e56 <kfree>
f0123e06:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123e09:	e8 ba ff fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123e0e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123e11:	74 17                	je     f0123e2a <test_kfree_bestfirstfit+0x17f6>
f0123e13:	83 ec 04             	sub    $0x4,%esp
f0123e16:	68 14 b9 13 f0       	push   $0xf013b914
f0123e1b:	68 b9 07 00 00       	push   $0x7b9
f0123e20:	68 fa b8 13 f0       	push   $0xf013b8fa
f0123e25:	e8 db c3 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123e2a:	e8 68 93 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0123e2f:	89 c2                	mov    %eax,%edx
f0123e31:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123e34:	39 c2                	cmp    %eax,%edx
f0123e36:	74 17                	je     f0123e4f <test_kfree_bestfirstfit+0x181b>
f0123e38:	83 ec 04             	sub    $0x4,%esp
f0123e3b:	68 ac c1 13 f0       	push   $0xf013c1ac
f0123e40:	68 ba 07 00 00       	push   $0x7ba
f0123e45:	68 fa b8 13 f0       	push   $0xf013b8fa
f0123e4a:	e8 b6 c3 fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123e4f:	e8 43 93 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0123e54:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123e57:	e8 6c ff fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123e5c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0123e5f:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0123e65:	83 ec 0c             	sub    $0xc,%esp
f0123e68:	50                   	push   %eax
f0123e69:	e8 e8 3f fe ff       	call   f0107e56 <kfree>
f0123e6e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123e71:	e8 52 ff fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123e76:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123e79:	74 17                	je     f0123e92 <test_kfree_bestfirstfit+0x185e>
f0123e7b:	83 ec 04             	sub    $0x4,%esp
f0123e7e:	68 14 b9 13 f0       	push   $0xf013b914
f0123e83:	68 c0 07 00 00       	push   $0x7c0
f0123e88:	68 fa b8 13 f0       	push   $0xf013b8fa
f0123e8d:	e8 73 c3 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123e92:	e8 00 93 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0123e97:	89 c2                	mov    %eax,%edx
f0123e99:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123e9c:	39 c2                	cmp    %eax,%edx
f0123e9e:	74 17                	je     f0123eb7 <test_kfree_bestfirstfit+0x1883>
f0123ea0:	83 ec 04             	sub    $0x4,%esp
f0123ea3:	68 ac c1 13 f0       	push   $0xf013c1ac
f0123ea8:	68 c1 07 00 00       	push   $0x7c1
f0123ead:	68 fa b8 13 f0       	push   $0xf013b8fa
f0123eb2:	e8 4e c3 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0123eb7:	e8 db 92 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0123ebc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123ebf:	e8 04 ff fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123ec4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0123ec7:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0123ecd:	83 ec 0c             	sub    $0xc,%esp
f0123ed0:	50                   	push   %eax
f0123ed1:	e8 80 3f fe ff       	call   f0107e56 <kfree>
f0123ed6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123ed9:	e8 ea fe fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123ede:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123ee1:	74 17                	je     f0123efa <test_kfree_bestfirstfit+0x18c6>
f0123ee3:	83 ec 04             	sub    $0x4,%esp
f0123ee6:	68 14 b9 13 f0       	push   $0xf013b914
f0123eeb:	68 c7 07 00 00       	push   $0x7c7
f0123ef0:	68 fa b8 13 f0       	push   $0xf013b8fa
f0123ef5:	e8 0b c3 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123efa:	e8 98 92 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0123eff:	89 c2                	mov    %eax,%edx
f0123f01:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123f04:	39 c2                	cmp    %eax,%edx
f0123f06:	74 17                	je     f0123f1f <test_kfree_bestfirstfit+0x18eb>
f0123f08:	83 ec 04             	sub    $0x4,%esp
f0123f0b:	68 ac c1 13 f0       	push   $0xf013c1ac
f0123f10:	68 c8 07 00 00       	push   $0x7c8
f0123f15:	68 fa b8 13 f0       	push   $0xf013b8fa
f0123f1a:	e8 e6 c2 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0123f1f:	e8 73 92 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0123f24:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123f27:	e8 9c fe fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123f2c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0123f2f:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0123f35:	83 ec 0c             	sub    $0xc,%esp
f0123f38:	50                   	push   %eax
f0123f39:	e8 18 3f fe ff       	call   f0107e56 <kfree>
f0123f3e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123f41:	e8 82 fe fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123f46:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123f49:	74 17                	je     f0123f62 <test_kfree_bestfirstfit+0x192e>
f0123f4b:	83 ec 04             	sub    $0x4,%esp
f0123f4e:	68 14 b9 13 f0       	push   $0xf013b914
f0123f53:	68 ce 07 00 00       	push   $0x7ce
f0123f58:	68 fa b8 13 f0       	push   $0xf013b8fa
f0123f5d:	e8 a3 c2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123f62:	e8 30 92 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0123f67:	89 c2                	mov    %eax,%edx
f0123f69:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123f6c:	39 c2                	cmp    %eax,%edx
f0123f6e:	74 17                	je     f0123f87 <test_kfree_bestfirstfit+0x1953>
f0123f70:	83 ec 04             	sub    $0x4,%esp
f0123f73:	68 ac c1 13 f0       	push   $0xf013c1ac
f0123f78:	68 cf 07 00 00       	push   $0x7cf
f0123f7d:	68 fa b8 13 f0       	push   $0xf013b8fa
f0123f82:	e8 7e c2 fd ff       	call   f0100205 <_panic>

	}
	cprintf("\b\b\b85%");
f0123f87:	83 ec 0c             	sub    $0xc,%esp
f0123f8a:	68 f3 c1 13 f0       	push   $0xf013c1f3
f0123f8f:	e8 7a cd fd ff       	call   f0100d0e <cprintf>
f0123f94:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0123f97:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0123f9e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0123fa5:	eb 48                	jmp    f0123fef <test_kfree_bestfirstfit+0x19bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0123fa7:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0123faa:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0123faf:	83 ec 04             	sub    $0x4,%esp
f0123fb2:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f0123fb8:	51                   	push   %ecx
f0123fb9:	52                   	push   %edx
f0123fba:	50                   	push   %eax
f0123fbb:	e8 f1 2a fe ff       	call   f0106ab1 <get_page_table>
f0123fc0:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123fc3:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0123fc9:	85 c0                	test   %eax,%eax
f0123fcb:	75 17                	jne    f0123fe4 <test_kfree_bestfirstfit+0x19b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0123fcd:	83 ec 04             	sub    $0x4,%esp
f0123fd0:	68 fc c1 13 f0       	push   $0xf013c1fc
f0123fd5:	68 dd 07 00 00       	push   $0x7dd
f0123fda:	68 fa b8 13 f0       	push   $0xf013b8fa
f0123fdf:	e8 21 c2 fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0123fe4:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0123feb:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0123fef:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123ff3:	78 b2                	js     f0123fa7 <test_kfree_bestfirstfit+0x1973>
f0123ff5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123ff9:	7f 09                	jg     f0124004 <test_kfree_bestfirstfit+0x19d0>
f0123ffb:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0124002:	76 a3                	jbe    f0123fa7 <test_kfree_bestfirstfit+0x1973>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f0124004:	83 ec 0c             	sub    $0xc,%esp
f0124007:	68 de ba 13 f0       	push   $0xf013bade
f012400c:	e8 fd cc fd ff       	call   f0100d0e <cprintf>
f0124011:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0124014:	83 ec 0c             	sub    $0xc,%esp
f0124017:	68 64 c2 13 f0       	push   $0xf013c264
f012401c:	e8 ed cc fd ff       	call   f0100d0e <cprintf>
f0124021:	83 c4 10             	add    $0x10,%esp

	return 1;
f0124024:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0124029:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012402c:	5b                   	pop    %ebx
f012402d:	5f                   	pop    %edi
f012402e:	5d                   	pop    %ebp
f012402f:	c3                   	ret    

f0124030 <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f0124030:	55                   	push   %ebp
f0124031:	89 e5                	mov    %esp,%ebp
f0124033:	57                   	push   %edi
f0124034:	56                   	push   %esi
f0124035:	53                   	push   %ebx
f0124036:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
	cprintf("==============================================\n");
f012403c:	83 ec 0c             	sub    $0xc,%esp
f012403f:	68 3c b8 13 f0       	push   $0xf013b83c
f0124044:	e8 c5 cc fd ff       	call   f0100d0e <cprintf>
f0124049:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f012404c:	83 ec 0c             	sub    $0xc,%esp
f012404f:	68 6c b8 13 f0       	push   $0xf013b86c
f0124054:	e8 b5 cc fd ff       	call   f0100d0e <cprintf>
f0124059:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f012405c:	83 ec 0c             	sub    $0xc,%esp
f012405f:	68 3c b8 13 f0       	push   $0xf013b83c
f0124064:	e8 a5 cc fd ff       	call   f0100d0e <cprintf>
f0124069:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f012406c:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f0124070:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f0124074:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f012407a:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f0124080:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f0124087:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012408e:	e8 04 91 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0124093:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0124096:	8d 95 c4 fd ff ff    	lea    -0x23c(%ebp),%edx
f012409c:	b9 14 00 00 00       	mov    $0x14,%ecx
f01240a1:	b8 00 00 00 00       	mov    $0x0,%eax
f01240a6:	89 d7                	mov    %edx,%edi
f01240a8:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01240aa:	8d 95 74 fd ff ff    	lea    -0x28c(%ebp),%edx
f01240b0:	b9 14 00 00 00       	mov    $0x14,%ecx
f01240b5:	b8 00 00 00 00       	mov    $0x0,%eax
f01240ba:	89 d7                	mov    %edx,%edi
f01240bc:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01240be:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f01240c4:	b9 14 00 00 00       	mov    $0x14,%ecx
f01240c9:	b8 00 00 00 00       	mov    $0x0,%eax
f01240ce:	89 d7                	mov    %edx,%edi
f01240d0:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01240d2:	e8 c0 90 fe ff       	call   f010d197 <sys_calculate_free_frames>
f01240d7:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01240da:	e8 e9 fc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01240df:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01240e2:	83 ec 0c             	sub    $0xc,%esp
f01240e5:	68 00 fc 1f 00       	push   $0x1ffc00
f01240ea:	e8 9c 3c fe ff       	call   f0107d8b <kmalloc>
f01240ef:	83 c4 10             	add    $0x10,%esp
f01240f2:	89 85 24 fd ff ff    	mov    %eax,-0x2dc(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01240f8:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f01240fe:	89 c1                	mov    %eax,%ecx
f0124100:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0124107:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012410a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012410f:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0124112:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0124115:	ba 00 00 00 00       	mov    $0x0,%edx
f012411a:	f7 75 a0             	divl   -0x60(%ebp)
f012411d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0124120:	29 d0                	sub    %edx,%eax
f0124122:	89 c3                	mov    %eax,%ebx
f0124124:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f012412b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0124130:	0f b6 d0             	movzbl %al,%edx
f0124133:	8b 45 98             	mov    -0x68(%ebp),%eax
f0124136:	01 d0                	add    %edx,%eax
f0124138:	48                   	dec    %eax
f0124139:	89 45 94             	mov    %eax,-0x6c(%ebp)
f012413c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012413f:	ba 00 00 00 00       	mov    $0x0,%edx
f0124144:	f7 75 98             	divl   -0x68(%ebp)
f0124147:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012414a:	29 d0                	sub    %edx,%eax
f012414c:	01 c3                	add    %eax,%ebx
f012414e:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0124155:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012415a:	0f b6 c0             	movzbl %al,%eax
f012415d:	c1 e0 04             	shl    $0x4,%eax
f0124160:	89 c2                	mov    %eax,%edx
f0124162:	8b 45 90             	mov    -0x70(%ebp),%eax
f0124165:	01 d0                	add    %edx,%eax
f0124167:	48                   	dec    %eax
f0124168:	89 45 8c             	mov    %eax,-0x74(%ebp)
f012416b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012416e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124173:	f7 75 90             	divl   -0x70(%ebp)
f0124176:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0124179:	29 d0                	sub    %edx,%eax
f012417b:	01 d8                	add    %ebx,%eax
f012417d:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0124182:	39 c1                	cmp    %eax,%ecx
f0124184:	74 17                	je     f012419d <test_kheap_phys_addr+0x16d>
f0124186:	83 ec 04             	sub    $0x4,%esp
f0124189:	68 e0 b9 13 f0       	push   $0xf013b9e0
f012418e:	68 0a 08 00 00       	push   $0x80a
f0124193:	68 fa b8 13 f0       	push   $0xf013b8fa
f0124198:	e8 68 c0 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012419d:	e8 26 fc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01241a2:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01241a5:	74 17                	je     f01241be <test_kheap_phys_addr+0x18e>
f01241a7:	83 ec 04             	sub    $0x4,%esp
f01241aa:	68 14 b9 13 f0       	push   $0xf013b914
f01241af:	68 0b 08 00 00       	push   $0x80b
f01241b4:	68 fa b8 13 f0       	push   $0xf013b8fa
f01241b9:	e8 47 c0 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01241be:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01241c1:	e8 d1 8f fe ff       	call   f010d197 <sys_calculate_free_frames>
f01241c6:	29 c3                	sub    %eax,%ebx
f01241c8:	89 d8                	mov    %ebx,%eax
f01241ca:	3d 00 02 00 00       	cmp    $0x200,%eax
f01241cf:	74 17                	je     f01241e8 <test_kheap_phys_addr+0x1b8>
f01241d1:	83 ec 04             	sub    $0x4,%esp
f01241d4:	68 7c b9 13 f0       	push   $0xf013b97c
f01241d9:	68 0c 08 00 00       	push   $0x80c
f01241de:	68 fa b8 13 f0       	push   $0xf013b8fa
f01241e3:	e8 1d c0 fd ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01241e8:	e8 aa 8f fe ff       	call   f010d197 <sys_calculate_free_frames>
f01241ed:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01241f0:	e8 d3 fb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01241f5:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01241f8:	83 ec 0c             	sub    $0xc,%esp
f01241fb:	68 00 fc 1f 00       	push   $0x1ffc00
f0124200:	e8 86 3b fe ff       	call   f0107d8b <kmalloc>
f0124205:	83 c4 10             	add    $0x10,%esp
f0124208:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012420e:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0124214:	89 c1                	mov    %eax,%ecx
f0124216:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f012421d:	8b 45 88             	mov    -0x78(%ebp),%eax
f0124220:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124225:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0124228:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012422b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124230:	f7 75 88             	divl   -0x78(%ebp)
f0124233:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0124236:	29 d0                	sub    %edx,%eax
f0124238:	89 c3                	mov    %eax,%ebx
f012423a:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0124241:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0124246:	0f b6 d0             	movzbl %al,%edx
f0124249:	8b 45 80             	mov    -0x80(%ebp),%eax
f012424c:	01 d0                	add    %edx,%eax
f012424e:	48                   	dec    %eax
f012424f:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0124255:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012425b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124260:	f7 75 80             	divl   -0x80(%ebp)
f0124263:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0124269:	29 d0                	sub    %edx,%eax
f012426b:	01 c3                	add    %eax,%ebx
f012426d:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0124274:	10 00 00 
f0124277:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012427c:	0f b6 c0             	movzbl %al,%eax
f012427f:	c1 e0 04             	shl    $0x4,%eax
f0124282:	89 c2                	mov    %eax,%edx
f0124284:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012428a:	01 d0                	add    %edx,%eax
f012428c:	48                   	dec    %eax
f012428d:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0124293:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0124299:	ba 00 00 00 00       	mov    $0x0,%edx
f012429e:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01242a4:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01242aa:	29 d0                	sub    %edx,%eax
f01242ac:	01 d8                	add    %ebx,%eax
f01242ae:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01242b3:	39 c1                	cmp    %eax,%ecx
f01242b5:	74 17                	je     f01242ce <test_kheap_phys_addr+0x29e>
f01242b7:	83 ec 04             	sub    $0x4,%esp
f01242ba:	68 e0 b9 13 f0       	push   $0xf013b9e0
f01242bf:	68 12 08 00 00       	push   $0x812
f01242c4:	68 fa b8 13 f0       	push   $0xf013b8fa
f01242c9:	e8 37 bf fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01242ce:	e8 f5 fa fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01242d3:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01242d6:	74 17                	je     f01242ef <test_kheap_phys_addr+0x2bf>
f01242d8:	83 ec 04             	sub    $0x4,%esp
f01242db:	68 14 b9 13 f0       	push   $0xf013b914
f01242e0:	68 13 08 00 00       	push   $0x813
f01242e5:	68 fa b8 13 f0       	push   $0xf013b8fa
f01242ea:	e8 16 bf fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01242ef:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01242f2:	e8 a0 8e fe ff       	call   f010d197 <sys_calculate_free_frames>
f01242f7:	29 c3                	sub    %eax,%ebx
f01242f9:	89 d8                	mov    %ebx,%eax
f01242fb:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124300:	74 17                	je     f0124319 <test_kheap_phys_addr+0x2e9>
f0124302:	83 ec 04             	sub    $0x4,%esp
f0124305:	68 7c b9 13 f0       	push   $0xf013b97c
f012430a:	68 14 08 00 00       	push   $0x814
f012430f:	68 fa b8 13 f0       	push   $0xf013b8fa
f0124314:	e8 ec be fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0124319:	e8 79 8e fe ff       	call   f010d197 <sys_calculate_free_frames>
f012431e:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124321:	e8 a2 fa fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124326:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0124329:	83 ec 0c             	sub    $0xc,%esp
f012432c:	68 00 08 00 00       	push   $0x800
f0124331:	e8 55 3a fe ff       	call   f0107d8b <kmalloc>
f0124336:	83 c4 10             	add    $0x10,%esp
f0124339:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012433f:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f0124345:	89 c1                	mov    %eax,%ecx
f0124347:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f012434e:	10 00 00 
f0124351:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0124357:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012435c:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0124362:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0124368:	ba 00 00 00 00       	mov    $0x0,%edx
f012436d:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0124373:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0124379:	29 d0                	sub    %edx,%eax
f012437b:	89 c3                	mov    %eax,%ebx
f012437d:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0124384:	10 00 00 
f0124387:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012438c:	0f b6 d0             	movzbl %al,%edx
f012438f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0124395:	01 d0                	add    %edx,%eax
f0124397:	48                   	dec    %eax
f0124398:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f012439e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01243a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01243a9:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01243af:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01243b5:	29 d0                	sub    %edx,%eax
f01243b7:	01 c3                	add    %eax,%ebx
f01243b9:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01243c0:	10 00 00 
f01243c3:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01243c8:	0f b6 c0             	movzbl %al,%eax
f01243cb:	c1 e0 04             	shl    $0x4,%eax
f01243ce:	89 c2                	mov    %eax,%edx
f01243d0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01243d6:	01 d0                	add    %edx,%eax
f01243d8:	48                   	dec    %eax
f01243d9:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01243df:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01243e5:	ba 00 00 00 00       	mov    $0x0,%edx
f01243ea:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01243f0:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01243f6:	29 d0                	sub    %edx,%eax
f01243f8:	01 d8                	add    %ebx,%eax
f01243fa:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01243ff:	39 c1                	cmp    %eax,%ecx
f0124401:	74 17                	je     f012441a <test_kheap_phys_addr+0x3ea>
f0124403:	83 ec 04             	sub    $0x4,%esp
f0124406:	68 e0 b9 13 f0       	push   $0xf013b9e0
f012440b:	68 1a 08 00 00       	push   $0x81a
f0124410:	68 fa b8 13 f0       	push   $0xf013b8fa
f0124415:	e8 eb bd fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012441a:	e8 a9 f9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012441f:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124422:	74 17                	je     f012443b <test_kheap_phys_addr+0x40b>
f0124424:	83 ec 04             	sub    $0x4,%esp
f0124427:	68 14 b9 13 f0       	push   $0xf013b914
f012442c:	68 1b 08 00 00       	push   $0x81b
f0124431:	68 fa b8 13 f0       	push   $0xf013b8fa
f0124436:	e8 ca bd fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012443b:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012443e:	e8 54 8d fe ff       	call   f010d197 <sys_calculate_free_frames>
f0124443:	29 c3                	sub    %eax,%ebx
f0124445:	89 d8                	mov    %ebx,%eax
f0124447:	83 f8 01             	cmp    $0x1,%eax
f012444a:	74 17                	je     f0124463 <test_kheap_phys_addr+0x433>
f012444c:	83 ec 04             	sub    $0x4,%esp
f012444f:	68 7c b9 13 f0       	push   $0xf013b97c
f0124454:	68 1c 08 00 00       	push   $0x81c
f0124459:	68 fa b8 13 f0       	push   $0xf013b8fa
f012445e:	e8 a2 bd fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0124463:	e8 2f 8d fe ff       	call   f010d197 <sys_calculate_free_frames>
f0124468:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012446b:	e8 58 f9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124470:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0124473:	83 ec 0c             	sub    $0xc,%esp
f0124476:	68 00 08 00 00       	push   $0x800
f012447b:	e8 0b 39 fe ff       	call   f0107d8b <kmalloc>
f0124480:	83 c4 10             	add    $0x10,%esp
f0124483:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124489:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f012448f:	89 c1                	mov    %eax,%ecx
f0124491:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0124498:	10 00 00 
f012449b:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01244a1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01244a6:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01244ac:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01244b2:	ba 00 00 00 00       	mov    $0x0,%edx
f01244b7:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01244bd:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01244c3:	29 d0                	sub    %edx,%eax
f01244c5:	89 c3                	mov    %eax,%ebx
f01244c7:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01244ce:	10 00 00 
f01244d1:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01244d6:	0f b6 d0             	movzbl %al,%edx
f01244d9:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01244df:	01 d0                	add    %edx,%eax
f01244e1:	48                   	dec    %eax
f01244e2:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01244e8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01244ee:	ba 00 00 00 00       	mov    $0x0,%edx
f01244f3:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01244f9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01244ff:	29 d0                	sub    %edx,%eax
f0124501:	01 c3                	add    %eax,%ebx
f0124503:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f012450a:	10 00 00 
f012450d:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0124512:	0f b6 c0             	movzbl %al,%eax
f0124515:	c1 e0 04             	shl    $0x4,%eax
f0124518:	89 c2                	mov    %eax,%edx
f012451a:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0124520:	01 d0                	add    %edx,%eax
f0124522:	48                   	dec    %eax
f0124523:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0124529:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012452f:	ba 00 00 00 00       	mov    $0x0,%edx
f0124534:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f012453a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0124540:	29 d0                	sub    %edx,%eax
f0124542:	01 d8                	add    %ebx,%eax
f0124544:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0124549:	39 c1                	cmp    %eax,%ecx
f012454b:	74 17                	je     f0124564 <test_kheap_phys_addr+0x534>
f012454d:	83 ec 04             	sub    $0x4,%esp
f0124550:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0124555:	68 22 08 00 00       	push   $0x822
f012455a:	68 fa b8 13 f0       	push   $0xf013b8fa
f012455f:	e8 a1 bc fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124564:	e8 5f f8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124569:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012456c:	74 17                	je     f0124585 <test_kheap_phys_addr+0x555>
f012456e:	83 ec 04             	sub    $0x4,%esp
f0124571:	68 14 b9 13 f0       	push   $0xf013b914
f0124576:	68 23 08 00 00       	push   $0x823
f012457b:	68 fa b8 13 f0       	push   $0xf013b8fa
f0124580:	e8 80 bc fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124585:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0124588:	e8 0a 8c fe ff       	call   f010d197 <sys_calculate_free_frames>
f012458d:	29 c3                	sub    %eax,%ebx
f012458f:	89 d8                	mov    %ebx,%eax
f0124591:	83 f8 01             	cmp    $0x1,%eax
f0124594:	74 17                	je     f01245ad <test_kheap_phys_addr+0x57d>
f0124596:	83 ec 04             	sub    $0x4,%esp
f0124599:	68 7c b9 13 f0       	push   $0xf013b97c
f012459e:	68 24 08 00 00       	push   $0x824
f01245a3:	68 fa b8 13 f0       	push   $0xf013b8fa
f01245a8:	e8 58 bc fd ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01245ad:	e8 e5 8b fe ff       	call   f010d197 <sys_calculate_free_frames>
f01245b2:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01245b5:	e8 0e f8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01245ba:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01245bd:	83 ec 0c             	sub    $0xc,%esp
f01245c0:	68 00 1c 00 00       	push   $0x1c00
f01245c5:	e8 c1 37 fe ff       	call   f0107d8b <kmalloc>
f01245ca:	83 c4 10             	add    $0x10,%esp
f01245cd:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01245d3:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f01245d9:	89 c1                	mov    %eax,%ecx
f01245db:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01245e2:	10 00 00 
f01245e5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01245eb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01245f0:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01245f6:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01245fc:	ba 00 00 00 00       	mov    $0x0,%edx
f0124601:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0124607:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012460d:	29 d0                	sub    %edx,%eax
f012460f:	89 c3                	mov    %eax,%ebx
f0124611:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0124618:	10 00 00 
f012461b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0124620:	0f b6 d0             	movzbl %al,%edx
f0124623:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0124629:	01 d0                	add    %edx,%eax
f012462b:	48                   	dec    %eax
f012462c:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0124632:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0124638:	ba 00 00 00 00       	mov    $0x0,%edx
f012463d:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0124643:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0124649:	29 d0                	sub    %edx,%eax
f012464b:	01 c3                	add    %eax,%ebx
f012464d:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0124654:	10 00 00 
f0124657:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012465c:	0f b6 c0             	movzbl %al,%eax
f012465f:	c1 e0 04             	shl    $0x4,%eax
f0124662:	89 c2                	mov    %eax,%edx
f0124664:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012466a:	01 d0                	add    %edx,%eax
f012466c:	48                   	dec    %eax
f012466d:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0124673:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0124679:	ba 00 00 00 00       	mov    $0x0,%edx
f012467e:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0124684:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012468a:	29 d0                	sub    %edx,%eax
f012468c:	01 d8                	add    %ebx,%eax
f012468e:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0124693:	39 c1                	cmp    %eax,%ecx
f0124695:	74 17                	je     f01246ae <test_kheap_phys_addr+0x67e>
f0124697:	83 ec 04             	sub    $0x4,%esp
f012469a:	68 e0 b9 13 f0       	push   $0xf013b9e0
f012469f:	68 2a 08 00 00       	push   $0x82a
f01246a4:	68 fa b8 13 f0       	push   $0xf013b8fa
f01246a9:	e8 57 bb fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01246ae:	e8 15 f7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01246b3:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01246b6:	74 17                	je     f01246cf <test_kheap_phys_addr+0x69f>
f01246b8:	83 ec 04             	sub    $0x4,%esp
f01246bb:	68 14 b9 13 f0       	push   $0xf013b914
f01246c0:	68 2b 08 00 00       	push   $0x82b
f01246c5:	68 fa b8 13 f0       	push   $0xf013b8fa
f01246ca:	e8 36 bb fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01246cf:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01246d2:	e8 c0 8a fe ff       	call   f010d197 <sys_calculate_free_frames>
f01246d7:	29 c3                	sub    %eax,%ebx
f01246d9:	89 d8                	mov    %ebx,%eax
f01246db:	83 f8 02             	cmp    $0x2,%eax
f01246de:	74 17                	je     f01246f7 <test_kheap_phys_addr+0x6c7>
f01246e0:	83 ec 04             	sub    $0x4,%esp
f01246e3:	68 7c b9 13 f0       	push   $0xf013b97c
f01246e8:	68 2c 08 00 00       	push   $0x82c
f01246ed:	68 fa b8 13 f0       	push   $0xf013b8fa
f01246f2:	e8 0e bb fd ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01246f7:	e8 9b 8a fe ff       	call   f010d197 <sys_calculate_free_frames>
f01246fc:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01246ff:	e8 c4 f6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124704:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0124707:	83 ec 0c             	sub    $0xc,%esp
f012470a:	68 00 fc 2f 00       	push   $0x2ffc00
f012470f:	e8 77 36 fe ff       	call   f0107d8b <kmalloc>
f0124714:	83 c4 10             	add    $0x10,%esp
f0124717:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012471d:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f0124723:	89 c1                	mov    %eax,%ecx
f0124725:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f012472c:	10 00 00 
f012472f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0124735:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012473a:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0124740:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0124746:	ba 00 00 00 00       	mov    $0x0,%edx
f012474b:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0124751:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0124757:	29 d0                	sub    %edx,%eax
f0124759:	89 c3                	mov    %eax,%ebx
f012475b:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0124762:	10 00 00 
f0124765:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012476a:	0f b6 d0             	movzbl %al,%edx
f012476d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124773:	01 d0                	add    %edx,%eax
f0124775:	48                   	dec    %eax
f0124776:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f012477c:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0124782:	ba 00 00 00 00       	mov    $0x0,%edx
f0124787:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f012478d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0124793:	29 d0                	sub    %edx,%eax
f0124795:	01 c3                	add    %eax,%ebx
f0124797:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f012479e:	10 00 00 
f01247a1:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01247a6:	0f b6 c0             	movzbl %al,%eax
f01247a9:	c1 e0 04             	shl    $0x4,%eax
f01247ac:	89 c2                	mov    %eax,%edx
f01247ae:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01247b4:	01 d0                	add    %edx,%eax
f01247b6:	48                   	dec    %eax
f01247b7:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01247bd:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01247c3:	ba 00 00 00 00       	mov    $0x0,%edx
f01247c8:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f01247ce:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01247d4:	29 d0                	sub    %edx,%eax
f01247d6:	01 d8                	add    %ebx,%eax
f01247d8:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01247dd:	39 c1                	cmp    %eax,%ecx
f01247df:	74 17                	je     f01247f8 <test_kheap_phys_addr+0x7c8>
f01247e1:	83 ec 04             	sub    $0x4,%esp
f01247e4:	68 e0 b9 13 f0       	push   $0xf013b9e0
f01247e9:	68 32 08 00 00       	push   $0x832
f01247ee:	68 fa b8 13 f0       	push   $0xf013b8fa
f01247f3:	e8 0d ba fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01247f8:	e8 cb f5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01247fd:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124800:	74 17                	je     f0124819 <test_kheap_phys_addr+0x7e9>
f0124802:	83 ec 04             	sub    $0x4,%esp
f0124805:	68 14 b9 13 f0       	push   $0xf013b914
f012480a:	68 33 08 00 00       	push   $0x833
f012480f:	68 fa b8 13 f0       	push   $0xf013b8fa
f0124814:	e8 ec b9 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124819:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012481c:	e8 76 89 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0124821:	29 c3                	sub    %eax,%ebx
f0124823:	89 d8                	mov    %ebx,%eax
f0124825:	3d 00 03 00 00       	cmp    $0x300,%eax
f012482a:	74 17                	je     f0124843 <test_kheap_phys_addr+0x813>
f012482c:	83 ec 04             	sub    $0x4,%esp
f012482f:	68 7c b9 13 f0       	push   $0xf013b97c
f0124834:	68 34 08 00 00       	push   $0x834
f0124839:	68 fa b8 13 f0       	push   $0xf013b8fa
f012483e:	e8 c2 b9 fd ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0124843:	e8 4f 89 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0124848:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012484b:	e8 78 f5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124850:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0124853:	83 ec 0c             	sub    $0xc,%esp
f0124856:	68 00 fc 5f 00       	push   $0x5ffc00
f012485b:	e8 2b 35 fe ff       	call   f0107d8b <kmalloc>
f0124860:	83 c4 10             	add    $0x10,%esp
f0124863:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124869:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f012486f:	89 c1                	mov    %eax,%ecx
f0124871:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0124878:	10 00 00 
f012487b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0124881:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124886:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f012488c:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0124892:	ba 00 00 00 00       	mov    $0x0,%edx
f0124897:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f012489d:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01248a3:	29 d0                	sub    %edx,%eax
f01248a5:	89 c3                	mov    %eax,%ebx
f01248a7:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f01248ae:	10 00 00 
f01248b1:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01248b6:	0f b6 d0             	movzbl %al,%edx
f01248b9:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01248bf:	01 d0                	add    %edx,%eax
f01248c1:	48                   	dec    %eax
f01248c2:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f01248c8:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01248ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01248d3:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f01248d9:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01248df:	29 d0                	sub    %edx,%eax
f01248e1:	01 c3                	add    %eax,%ebx
f01248e3:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f01248ea:	10 00 00 
f01248ed:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01248f2:	0f b6 c0             	movzbl %al,%eax
f01248f5:	c1 e0 04             	shl    $0x4,%eax
f01248f8:	89 c2                	mov    %eax,%edx
f01248fa:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0124900:	01 d0                	add    %edx,%eax
f0124902:	48                   	dec    %eax
f0124903:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0124909:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012490f:	ba 00 00 00 00       	mov    $0x0,%edx
f0124914:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f012491a:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0124920:	29 d0                	sub    %edx,%eax
f0124922:	01 d8                	add    %ebx,%eax
f0124924:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0124929:	39 c1                	cmp    %eax,%ecx
f012492b:	74 17                	je     f0124944 <test_kheap_phys_addr+0x914>
f012492d:	83 ec 04             	sub    $0x4,%esp
f0124930:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0124935:	68 3a 08 00 00       	push   $0x83a
f012493a:	68 fa b8 13 f0       	push   $0xf013b8fa
f012493f:	e8 c1 b8 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124944:	e8 7f f4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124949:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012494c:	74 17                	je     f0124965 <test_kheap_phys_addr+0x935>
f012494e:	83 ec 04             	sub    $0x4,%esp
f0124951:	68 14 b9 13 f0       	push   $0xf013b914
f0124956:	68 3b 08 00 00       	push   $0x83b
f012495b:	68 fa b8 13 f0       	push   $0xf013b8fa
f0124960:	e8 a0 b8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124965:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0124968:	e8 2a 88 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012496d:	29 c3                	sub    %eax,%ebx
f012496f:	89 d8                	mov    %ebx,%eax
f0124971:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124976:	74 17                	je     f012498f <test_kheap_phys_addr+0x95f>
f0124978:	83 ec 04             	sub    $0x4,%esp
f012497b:	68 7c b9 13 f0       	push   $0xf013b97c
f0124980:	68 3c 08 00 00       	push   $0x83c
f0124985:	68 fa b8 13 f0       	push   $0xf013b8fa
f012498a:	e8 76 b8 fd ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012498f:	e8 03 88 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0124994:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124997:	e8 2c f4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012499c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012499f:	83 ec 0c             	sub    $0xc,%esp
f01249a2:	68 00 38 00 00       	push   $0x3800
f01249a7:	e8 df 33 fe ff       	call   f0107d8b <kmalloc>
f01249ac:	83 c4 10             	add    $0x10,%esp
f01249af:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01249b5:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f01249bb:	89 c1                	mov    %eax,%ecx
f01249bd:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f01249c4:	10 00 00 
f01249c7:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01249cd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01249d2:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f01249d8:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01249de:	ba 00 00 00 00       	mov    $0x0,%edx
f01249e3:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f01249e9:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01249ef:	29 d0                	sub    %edx,%eax
f01249f1:	89 c3                	mov    %eax,%ebx
f01249f3:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f01249fa:	10 00 00 
f01249fd:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0124a02:	0f b6 d0             	movzbl %al,%edx
f0124a05:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0124a0b:	01 d0                	add    %edx,%eax
f0124a0d:	48                   	dec    %eax
f0124a0e:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0124a14:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0124a1a:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a1f:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0124a25:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0124a2b:	29 d0                	sub    %edx,%eax
f0124a2d:	01 c3                	add    %eax,%ebx
f0124a2f:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0124a36:	10 00 00 
f0124a39:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0124a3e:	0f b6 c0             	movzbl %al,%eax
f0124a41:	c1 e0 04             	shl    $0x4,%eax
f0124a44:	89 c2                	mov    %eax,%edx
f0124a46:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0124a4c:	01 d0                	add    %edx,%eax
f0124a4e:	48                   	dec    %eax
f0124a4f:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0124a55:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124a5b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a60:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0124a66:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124a6c:	29 d0                	sub    %edx,%eax
f0124a6e:	01 d8                	add    %ebx,%eax
f0124a70:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0124a75:	39 c1                	cmp    %eax,%ecx
f0124a77:	74 17                	je     f0124a90 <test_kheap_phys_addr+0xa60>
f0124a79:	83 ec 04             	sub    $0x4,%esp
f0124a7c:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0124a81:	68 42 08 00 00       	push   $0x842
f0124a86:	68 fa b8 13 f0       	push   $0xf013b8fa
f0124a8b:	e8 75 b7 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124a90:	e8 33 f3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124a95:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124a98:	74 17                	je     f0124ab1 <test_kheap_phys_addr+0xa81>
f0124a9a:	83 ec 04             	sub    $0x4,%esp
f0124a9d:	68 14 b9 13 f0       	push   $0xf013b914
f0124aa2:	68 43 08 00 00       	push   $0x843
f0124aa7:	68 fa b8 13 f0       	push   $0xf013b8fa
f0124aac:	e8 54 b7 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124ab1:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0124ab4:	e8 de 86 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0124ab9:	29 c3                	sub    %eax,%ebx
f0124abb:	89 d8                	mov    %ebx,%eax
f0124abd:	83 f8 04             	cmp    $0x4,%eax
f0124ac0:	74 17                	je     f0124ad9 <test_kheap_phys_addr+0xaa9>
f0124ac2:	83 ec 04             	sub    $0x4,%esp
f0124ac5:	68 7c b9 13 f0       	push   $0xf013b97c
f0124aca:	68 44 08 00 00       	push   $0x844
f0124acf:	68 fa b8 13 f0       	push   $0xf013b8fa
f0124ad4:	e8 2c b7 fd ff       	call   f0100205 <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f0124ad9:	89 e0                	mov    %esp,%eax
f0124adb:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0124add:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0124ae4:	10 00 00 
f0124ae7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0124aed:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124af2:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0124af8:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0124afe:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b03:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0124b09:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0124b0f:	29 d0                	sub    %edx,%eax
f0124b11:	89 c1                	mov    %eax,%ecx
f0124b13:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f0124b1a:	10 00 00 
f0124b1d:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0124b22:	0f b6 d0             	movzbl %al,%edx
f0124b25:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0124b2b:	01 d0                	add    %edx,%eax
f0124b2d:	48                   	dec    %eax
f0124b2e:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f0124b34:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0124b3a:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b3f:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f0124b45:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0124b4b:	29 d0                	sub    %edx,%eax
f0124b4d:	01 c1                	add    %eax,%ecx
f0124b4f:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f0124b56:	10 00 00 
f0124b59:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0124b5e:	0f b6 c0             	movzbl %al,%eax
f0124b61:	c1 e0 04             	shl    $0x4,%eax
f0124b64:	89 c2                	mov    %eax,%edx
f0124b66:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0124b6c:	01 d0                	add    %edx,%eax
f0124b6e:	48                   	dec    %eax
f0124b6f:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f0124b75:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0124b7b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b80:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f0124b86:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0124b8c:	29 d0                	sub    %edx,%eax
f0124b8e:	01 c8                	add    %ecx,%eax
f0124b90:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0124b95:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0124b9b:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0124ba2:	10 00 00 
f0124ba5:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124bab:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124bb0:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0124bb6:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0124bbc:	ba 00 00 00 00       	mov    $0x0,%edx
f0124bc1:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0124bc7:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0124bcd:	29 d0                	sub    %edx,%eax
f0124bcf:	89 c1                	mov    %eax,%ecx
f0124bd1:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0124bd8:	10 00 00 
f0124bdb:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0124be0:	0f b6 d0             	movzbl %al,%edx
f0124be3:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0124be9:	01 d0                	add    %edx,%eax
f0124beb:	48                   	dec    %eax
f0124bec:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0124bf2:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0124bf8:	ba 00 00 00 00       	mov    $0x0,%edx
f0124bfd:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0124c03:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0124c09:	29 d0                	sub    %edx,%eax
f0124c0b:	01 c1                	add    %eax,%ecx
f0124c0d:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0124c14:	10 00 00 
f0124c17:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0124c1c:	0f b6 c0             	movzbl %al,%eax
f0124c1f:	c1 e0 04             	shl    $0x4,%eax
f0124c22:	89 c2                	mov    %eax,%edx
f0124c24:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0124c2a:	01 d0                	add    %edx,%eax
f0124c2c:	48                   	dec    %eax
f0124c2d:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0124c33:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0124c39:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c3e:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0124c44:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0124c4a:	29 d0                	sub    %edx,%eax
f0124c4c:	01 c8                	add    %ecx,%eax
f0124c4e:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124c53:	c1 e8 0c             	shr    $0xc,%eax
f0124c56:	89 c2                	mov    %eax,%edx
f0124c58:	4a                   	dec    %edx
f0124c59:	89 95 ac fe ff ff    	mov    %edx,-0x154(%ebp)
f0124c5f:	c1 e0 02             	shl    $0x2,%eax
f0124c62:	8d 50 03             	lea    0x3(%eax),%edx
f0124c65:	b8 10 00 00 00       	mov    $0x10,%eax
f0124c6a:	48                   	dec    %eax
f0124c6b:	01 d0                	add    %edx,%eax
f0124c6d:	bf 10 00 00 00       	mov    $0x10,%edi
f0124c72:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c77:	f7 f7                	div    %edi
f0124c79:	6b c0 10             	imul   $0x10,%eax,%eax
f0124c7c:	29 c4                	sub    %eax,%esp
f0124c7e:	89 e0                	mov    %esp,%eax
f0124c80:	83 c0 03             	add    $0x3,%eax
f0124c83:	c1 e8 02             	shr    $0x2,%eax
f0124c86:	c1 e0 02             	shl    $0x2,%eax
f0124c89:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f0124c8f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124c96:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f0124c9d:	10 00 00 
f0124ca0:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0124ca6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124cab:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f0124cb1:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0124cb7:	ba 00 00 00 00       	mov    $0x0,%edx
f0124cbc:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f0124cc2:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0124cc8:	29 d0                	sub    %edx,%eax
f0124cca:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124ccf:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0124cd2:	eb 29                	jmp    f0124cfd <test_kheap_phys_addr+0xccd>
		{
			allPAs[i++] = kheap_physical_address(va);
f0124cd4:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0124cd7:	8d 43 01             	lea    0x1(%ebx),%eax
f0124cda:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0124cdd:	83 ec 0c             	sub    $0xc,%esp
f0124ce0:	ff 75 e0             	pushl  -0x20(%ebp)
f0124ce3:	e8 c1 32 fe ff       	call   f0107fa9 <kheap_physical_address>
f0124ce8:	83 c4 10             	add    $0x10,%esp
f0124ceb:	89 c2                	mov    %eax,%edx
f0124ced:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0124cf3:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124cf6:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f0124cfd:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124d00:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f0124d06:	72 cc                	jb     f0124cd4 <test_kheap_phys_addr+0xca4>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0124d08:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124d0b:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		i = 0;
f0124d11:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124d18:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0124d1f:	10 00 00 
f0124d22:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0124d28:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124d2d:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0124d33:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0124d39:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d3e:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0124d44:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0124d4a:	29 d0                	sub    %edx,%eax
f0124d4c:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124d51:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0124d54:	e9 ab 00 00 00       	jmp    f0124e04 <test_kheap_phys_addr+0xdd4>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0124d59:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0124d5e:	83 ec 04             	sub    $0x4,%esp
f0124d61:	8d 95 20 fd ff ff    	lea    -0x2e0(%ebp),%edx
f0124d67:	52                   	push   %edx
f0124d68:	ff 75 e0             	pushl  -0x20(%ebp)
f0124d6b:	50                   	push   %eax
f0124d6c:	e8 40 1d fe ff       	call   f0106ab1 <get_page_table>
f0124d71:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0124d74:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0124d7a:	85 c0                	test   %eax,%eax
f0124d7c:	75 17                	jne    f0124d95 <test_kheap_phys_addr+0xd65>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0124d7e:	83 ec 04             	sub    $0x4,%esp
f0124d81:	68 9c c2 13 f0       	push   $0xf013c29c
f0124d86:	68 59 08 00 00       	push   $0x859
f0124d8b:	68 fa b8 13 f0       	push   $0xf013b8fa
f0124d90:	e8 70 b4 fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124d95:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124d98:	c1 e8 0c             	shr    $0xc,%eax
f0124d9b:	25 ff 03 00 00       	and    $0x3ff,%eax
f0124da0:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0124da3:	eb 4b                	jmp    f0124df0 <test_kheap_phys_addr+0xdc0>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0124da5:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0124dab:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0124dae:	c1 e2 02             	shl    $0x2,%edx
f0124db1:	01 d0                	add    %edx,%eax
f0124db3:	8b 00                	mov    (%eax),%eax
f0124db5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0124dba:	89 c1                	mov    %eax,%ecx
f0124dbc:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0124dc2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0124dc5:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124dc8:	39 c1                	cmp    %eax,%ecx
f0124dca:	74 17                	je     f0124de3 <test_kheap_phys_addr+0xdb3>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0124dcc:	83 ec 04             	sub    $0x4,%esp
f0124dcf:	68 f5 c2 13 f0       	push   $0xf013c2f5
f0124dd4:	68 60 08 00 00       	push   $0x860
f0124dd9:	68 fa b8 13 f0       	push   $0xf013b8fa
f0124dde:	e8 22 b4 fd ff       	call   f0100205 <_panic>
				}
				va+=PAGE_SIZE;
f0124de3:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124dea:	ff 45 dc             	incl   -0x24(%ebp)
f0124ded:	ff 45 e4             	incl   -0x1c(%ebp)
f0124df0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124df3:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f0124df9:	7d 09                	jge    f0124e04 <test_kheap_phys_addr+0xdd4>
f0124dfb:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0124e02:	7e a1                	jle    f0124da5 <test_kheap_phys_addr+0xd75>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124e04:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124e07:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f0124e0d:	0f 82 46 ff ff ff    	jb     f0124d59 <test_kheap_phys_addr+0xd29>
f0124e13:	89 f4                	mov    %esi,%esp
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f0124e15:	83 ec 0c             	sub    $0xc,%esp
f0124e18:	68 14 c3 13 f0       	push   $0xf013c314
f0124e1d:	e8 ec be fd ff       	call   f0100d0e <cprintf>
f0124e22:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0124e25:	e8 6d 83 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0124e2a:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0124e30:	e8 93 ef fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124e35:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[0]);
f0124e3b:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0124e41:	83 ec 0c             	sub    $0xc,%esp
f0124e44:	50                   	push   %eax
f0124e45:	e8 0c 30 fe ff       	call   f0107e56 <kfree>
f0124e4a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124e4d:	e8 76 ef fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124e52:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0124e58:	74 17                	je     f0124e71 <test_kheap_phys_addr+0xe41>
f0124e5a:	83 ec 04             	sub    $0x4,%esp
f0124e5d:	68 14 b9 13 f0       	push   $0xf013b914
f0124e62:	68 6e 08 00 00       	push   $0x86e
f0124e67:	68 fa b8 13 f0       	push   $0xf013b8fa
f0124e6c:	e8 94 b3 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0124e71:	e8 21 83 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0124e76:	89 c2                	mov    %eax,%edx
f0124e78:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0124e7e:	29 c2                	sub    %eax,%edx
f0124e80:	89 d0                	mov    %edx,%eax
f0124e82:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124e87:	74 17                	je     f0124ea0 <test_kheap_phys_addr+0xe70>
f0124e89:	83 ec 04             	sub    $0x4,%esp
f0124e8c:	68 84 c0 13 f0       	push   $0xf013c084
f0124e91:	68 6f 08 00 00       	push   $0x86f
f0124e96:	68 fa b8 13 f0       	push   $0xf013b8fa
f0124e9b:	e8 65 b3 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124ea0:	e8 f2 82 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0124ea5:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124eab:	e8 18 ef fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124eb0:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[1]);
f0124eb6:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0124ebc:	83 ec 0c             	sub    $0xc,%esp
f0124ebf:	50                   	push   %eax
f0124ec0:	e8 91 2f fe ff       	call   f0107e56 <kfree>
f0124ec5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124ec8:	e8 fb ee fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124ecd:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0124ed3:	74 17                	je     f0124eec <test_kheap_phys_addr+0xebc>
f0124ed5:	83 ec 04             	sub    $0x4,%esp
f0124ed8:	68 14 b9 13 f0       	push   $0xf013b914
f0124edd:	68 75 08 00 00       	push   $0x875
f0124ee2:	68 fa b8 13 f0       	push   $0xf013b8fa
f0124ee7:	e8 19 b3 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0124eec:	e8 a6 82 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0124ef1:	89 c2                	mov    %eax,%edx
f0124ef3:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0124ef9:	29 c2                	sub    %eax,%edx
f0124efb:	89 d0                	mov    %edx,%eax
f0124efd:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124f02:	74 17                	je     f0124f1b <test_kheap_phys_addr+0xeeb>
f0124f04:	83 ec 04             	sub    $0x4,%esp
f0124f07:	68 84 c0 13 f0       	push   $0xf013c084
f0124f0c:	68 76 08 00 00       	push   $0x876
f0124f11:	68 fa b8 13 f0       	push   $0xf013b8fa
f0124f16:	e8 ea b2 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0124f1b:	e8 77 82 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0124f20:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124f26:	e8 9d ee fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124f2b:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[6]);
f0124f31:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0124f37:	83 ec 0c             	sub    $0xc,%esp
f0124f3a:	50                   	push   %eax
f0124f3b:	e8 16 2f fe ff       	call   f0107e56 <kfree>
f0124f40:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124f43:	e8 80 ee fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124f48:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0124f4e:	74 17                	je     f0124f67 <test_kheap_phys_addr+0xf37>
f0124f50:	83 ec 04             	sub    $0x4,%esp
f0124f53:	68 14 b9 13 f0       	push   $0xf013b914
f0124f58:	68 7c 08 00 00       	push   $0x87c
f0124f5d:	68 fa b8 13 f0       	push   $0xf013b8fa
f0124f62:	e8 9e b2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0124f67:	e8 2b 82 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0124f6c:	89 c2                	mov    %eax,%edx
f0124f6e:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0124f74:	29 c2                	sub    %eax,%edx
f0124f76:	89 d0                	mov    %edx,%eax
f0124f78:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124f7d:	74 17                	je     f0124f96 <test_kheap_phys_addr+0xf66>
f0124f7f:	83 ec 04             	sub    $0x4,%esp
f0124f82:	68 84 c0 13 f0       	push   $0xf013c084
f0124f87:	68 7d 08 00 00       	push   $0x87d
f0124f8c:	68 fa b8 13 f0       	push   $0xf013b8fa
f0124f91:	e8 6f b2 fd ff       	call   f0100205 <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f0124f96:	89 e0                	mov    %esp,%eax
f0124f98:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0124f9a:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f0124fa1:	10 00 00 
f0124fa4:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0124faa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124faf:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f0124fb5:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0124fbb:	ba 00 00 00 00       	mov    $0x0,%edx
f0124fc0:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f0124fc6:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0124fcc:	29 d0                	sub    %edx,%eax
f0124fce:	89 c1                	mov    %eax,%ecx
f0124fd0:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f0124fd7:	10 00 00 
f0124fda:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0124fdf:	0f b6 d0             	movzbl %al,%edx
f0124fe2:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0124fe8:	01 d0                	add    %edx,%eax
f0124fea:	48                   	dec    %eax
f0124feb:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f0124ff1:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0124ff7:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ffc:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f0125002:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0125008:	29 d0                	sub    %edx,%eax
f012500a:	01 c1                	add    %eax,%ecx
f012500c:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0125013:	10 00 00 
f0125016:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012501b:	0f b6 c0             	movzbl %al,%eax
f012501e:	c1 e0 04             	shl    $0x4,%eax
f0125021:	89 c2                	mov    %eax,%edx
f0125023:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0125029:	01 d0                	add    %edx,%eax
f012502b:	48                   	dec    %eax
f012502c:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0125032:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0125038:	ba 00 00 00 00       	mov    $0x0,%edx
f012503d:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0125043:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0125049:	29 d0                	sub    %edx,%eax
f012504b:	01 c8                	add    %ecx,%eax
f012504d:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0125052:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0125058:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f012505f:	10 00 00 
f0125062:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0125068:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012506d:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f0125073:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0125079:	ba 00 00 00 00       	mov    $0x0,%edx
f012507e:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f0125084:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012508a:	29 d0                	sub    %edx,%eax
f012508c:	89 c1                	mov    %eax,%ecx
f012508e:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f0125095:	10 00 00 
f0125098:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012509d:	0f b6 d0             	movzbl %al,%edx
f01250a0:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01250a6:	01 d0                	add    %edx,%eax
f01250a8:	48                   	dec    %eax
f01250a9:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f01250af:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01250b5:	ba 00 00 00 00       	mov    $0x0,%edx
f01250ba:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f01250c0:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01250c6:	29 d0                	sub    %edx,%eax
f01250c8:	01 c1                	add    %eax,%ecx
f01250ca:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f01250d1:	10 00 00 
f01250d4:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01250d9:	0f b6 c0             	movzbl %al,%eax
f01250dc:	c1 e0 04             	shl    $0x4,%eax
f01250df:	89 c2                	mov    %eax,%edx
f01250e1:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01250e7:	01 d0                	add    %edx,%eax
f01250e9:	48                   	dec    %eax
f01250ea:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f01250f0:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01250f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01250fb:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0125101:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0125107:	29 d0                	sub    %edx,%eax
f0125109:	01 c8                	add    %ecx,%eax
f012510b:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0125110:	c1 e8 0c             	shr    $0xc,%eax
f0125113:	89 c2                	mov    %eax,%edx
f0125115:	4a                   	dec    %edx
f0125116:	89 95 54 fe ff ff    	mov    %edx,-0x1ac(%ebp)
f012511c:	c1 e0 02             	shl    $0x2,%eax
f012511f:	8d 50 03             	lea    0x3(%eax),%edx
f0125122:	b8 10 00 00 00       	mov    $0x10,%eax
f0125127:	48                   	dec    %eax
f0125128:	01 d0                	add    %edx,%eax
f012512a:	bf 10 00 00 00       	mov    $0x10,%edi
f012512f:	ba 00 00 00 00       	mov    $0x0,%edx
f0125134:	f7 f7                	div    %edi
f0125136:	6b c0 10             	imul   $0x10,%eax,%eax
f0125139:	29 c4                	sub    %eax,%esp
f012513b:	89 e0                	mov    %esp,%eax
f012513d:	83 c0 03             	add    $0x3,%eax
f0125140:	c1 e8 02             	shr    $0x2,%eax
f0125143:	c1 e0 02             	shl    $0x2,%eax
f0125146:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		i = 0;
f012514c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0125153:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f012515a:	10 00 00 
f012515d:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0125163:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125168:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f012516e:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0125174:	ba 00 00 00 00       	mov    $0x0,%edx
f0125179:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f012517f:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0125185:	29 d0                	sub    %edx,%eax
f0125187:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012518c:	89 45 d8             	mov    %eax,-0x28(%ebp)
f012518f:	eb 29                	jmp    f01251ba <test_kheap_phys_addr+0x118a>
		{
			allPAs[i++] = kheap_physical_address(va);
f0125191:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0125194:	8d 43 01             	lea    0x1(%ebx),%eax
f0125197:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012519a:	83 ec 0c             	sub    $0xc,%esp
f012519d:	ff 75 d8             	pushl  -0x28(%ebp)
f01251a0:	e8 04 2e fe ff       	call   f0107fa9 <kheap_physical_address>
f01251a5:	83 c4 10             	add    $0x10,%esp
f01251a8:	89 c2                	mov    %eax,%edx
f01251aa:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01251b0:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f01251b3:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f01251ba:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01251bd:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f01251c3:	72 cc                	jb     f0125191 <test_kheap_phys_addr+0x1161>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f01251c5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01251c8:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		i = 0;
f01251ce:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01251d5:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f01251dc:	10 00 00 
f01251df:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01251e5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01251ea:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f01251f0:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01251f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01251fb:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0125201:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125207:	29 d0                	sub    %edx,%eax
f0125209:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012520e:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125211:	e9 ab 00 00 00       	jmp    f01252c1 <test_kheap_phys_addr+0x1291>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0125216:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f012521b:	83 ec 04             	sub    $0x4,%esp
f012521e:	8d 95 1c fd ff ff    	lea    -0x2e4(%ebp),%edx
f0125224:	52                   	push   %edx
f0125225:	ff 75 d8             	pushl  -0x28(%ebp)
f0125228:	50                   	push   %eax
f0125229:	e8 83 18 fe ff       	call   f0106ab1 <get_page_table>
f012522e:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0125231:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f0125237:	85 c0                	test   %eax,%eax
f0125239:	75 17                	jne    f0125252 <test_kheap_phys_addr+0x1222>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f012523b:	83 ec 04             	sub    $0x4,%esp
f012523e:	68 9c c2 13 f0       	push   $0xf013c29c
f0125243:	68 93 08 00 00       	push   $0x893
f0125248:	68 fa b8 13 f0       	push   $0xf013b8fa
f012524d:	e8 b3 af fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0125252:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125255:	c1 e8 0c             	shr    $0xc,%eax
f0125258:	25 ff 03 00 00       	and    $0x3ff,%eax
f012525d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0125260:	eb 4b                	jmp    f01252ad <test_kheap_phys_addr+0x127d>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0125262:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f0125268:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f012526b:	c1 e2 02             	shl    $0x2,%edx
f012526e:	01 d0                	add    %edx,%eax
f0125270:	8b 00                	mov    (%eax),%eax
f0125272:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0125277:	89 c1                	mov    %eax,%ecx
f0125279:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012527f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0125282:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125285:	39 c1                	cmp    %eax,%ecx
f0125287:	74 17                	je     f01252a0 <test_kheap_phys_addr+0x1270>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0125289:	83 ec 04             	sub    $0x4,%esp
f012528c:	68 f5 c2 13 f0       	push   $0xf013c2f5
f0125291:	68 9a 08 00 00       	push   $0x89a
f0125296:	68 fa b8 13 f0       	push   $0xf013b8fa
f012529b:	e8 65 af fd ff       	call   f0100205 <_panic>
				}
				va += PAGE_SIZE;
f01252a0:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f01252a7:	ff 45 d4             	incl   -0x2c(%ebp)
f01252aa:	ff 45 e4             	incl   -0x1c(%ebp)
f01252ad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01252b0:	3b 85 44 fe ff ff    	cmp    -0x1bc(%ebp),%eax
f01252b6:	7d 09                	jge    f01252c1 <test_kheap_phys_addr+0x1291>
f01252b8:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f01252bf:	7e a1                	jle    f0125262 <test_kheap_phys_addr+0x1232>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01252c1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01252c4:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f01252ca:	0f 82 46 ff ff ff    	jb     f0125216 <test_kheap_phys_addr+0x11e6>
f01252d0:	89 f4                	mov    %esi,%esp
				va += PAGE_SIZE;
			}
		}
	}

	cprintf("\b\b\b80%");
f01252d2:	83 ec 0c             	sub    $0xc,%esp
f01252d5:	68 85 ba 13 f0       	push   $0xf013ba85
f01252da:	e8 2f ba fd ff       	call   f0100d0e <cprintf>
f01252df:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f01252e2:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f01252e9:	10 00 00 
f01252ec:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01252f2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01252f7:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f01252fd:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0125303:	ba 00 00 00 00       	mov    $0x0,%edx
f0125308:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f012530e:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0125314:	29 d0                	sub    %edx,%eax
f0125316:	89 c1                	mov    %eax,%ecx
f0125318:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f012531f:	10 00 00 
f0125322:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0125327:	0f b6 d0             	movzbl %al,%edx
f012532a:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0125330:	01 d0                	add    %edx,%eax
f0125332:	48                   	dec    %eax
f0125333:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f0125339:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012533f:	ba 00 00 00 00       	mov    $0x0,%edx
f0125344:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f012534a:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125350:	29 d0                	sub    %edx,%eax
f0125352:	01 c1                	add    %eax,%ecx
f0125354:	c7 85 28 fe ff ff 00 	movl   $0x1000,-0x1d8(%ebp)
f012535b:	10 00 00 
f012535e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0125363:	0f b6 c0             	movzbl %al,%eax
f0125366:	c1 e0 04             	shl    $0x4,%eax
f0125369:	89 c2                	mov    %eax,%edx
f012536b:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0125371:	01 d0                	add    %edx,%eax
f0125373:	48                   	dec    %eax
f0125374:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
f012537a:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0125380:	ba 00 00 00 00       	mov    $0x0,%edx
f0125385:	f7 b5 28 fe ff ff    	divl   -0x1d8(%ebp)
f012538b:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0125391:	29 d0                	sub    %edx,%eax
f0125393:	01 c8                	add    %ecx,%eax
f0125395:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
f012539a:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		i = 0;
f01253a0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f01253a7:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01253ad:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01253b0:	eb 0a                	jmp    f01253bc <test_kheap_phys_addr+0x138c>
		{
			i++;
f01253b2:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f01253b5:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f01253bc:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f01253c3:	76 ed                	jbe    f01253b2 <test_kheap_phys_addr+0x1382>
		{
			i++;
		}
		int ii = i ;
f01253c5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01253c8:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
		i = 0;
f01253ce:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f01253d5:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01253db:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01253de:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f01253e5:	e9 cc 00 00 00       	jmp    f01254b6 <test_kheap_phys_addr+0x1486>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f01253ea:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01253ed:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f01253f2:	83 ec 04             	sub    $0x4,%esp
f01253f5:	8d 8d 18 fd ff ff    	lea    -0x2e8(%ebp),%ecx
f01253fb:	51                   	push   %ecx
f01253fc:	52                   	push   %edx
f01253fd:	50                   	push   %eax
f01253fe:	e8 ae 16 fe ff       	call   f0106ab1 <get_page_table>
f0125403:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0125406:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f012540c:	85 c0                	test   %eax,%eax
f012540e:	75 17                	jne    f0125427 <test_kheap_phys_addr+0x13f7>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0125410:	83 ec 04             	sub    $0x4,%esp
f0125413:	68 9c c2 13 f0       	push   $0xf013c29c
f0125418:	68 b6 08 00 00       	push   $0x8b6
f012541d:	68 fa b8 13 f0       	push   $0xf013b8fa
f0125422:	e8 de ad fd ff       	call   f0100205 <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0125427:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f012542e:	eb 67                	jmp    f0125497 <test_kheap_phys_addr+0x1467>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f0125430:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125433:	c1 e0 0c             	shl    $0xc,%eax
f0125436:	89 c2                	mov    %eax,%edx
f0125438:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012543e:	01 d0                	add    %edx,%eax
f0125440:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f0125446:	83 ec 0c             	sub    $0xc,%esp
f0125449:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f012544f:	e8 55 2b fe ff       	call   f0107fa9 <kheap_physical_address>
f0125454:	83 c4 10             	add    $0x10,%esp
f0125457:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f012545d:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f0125463:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0125466:	c1 e2 02             	shl    $0x2,%edx
f0125469:	01 d0                	add    %edx,%eax
f012546b:	8b 00                	mov    (%eax),%eax
f012546d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0125472:	3b 85 14 fe ff ff    	cmp    -0x1ec(%ebp),%eax
f0125478:	74 17                	je     f0125491 <test_kheap_phys_addr+0x1461>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f012547a:	83 ec 04             	sub    $0x4,%esp
f012547d:	68 f5 c2 13 f0       	push   $0xf013c2f5
f0125482:	68 c0 08 00 00       	push   $0x8c0
f0125487:	68 fa b8 13 f0       	push   $0xf013b8fa
f012548c:	e8 74 ad fd ff       	call   f0100205 <_panic>
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0125491:	ff 45 cc             	incl   -0x34(%ebp)
f0125494:	ff 45 e4             	incl   -0x1c(%ebp)
f0125497:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012549a:	3b 85 1c fe ff ff    	cmp    -0x1e4(%ebp),%eax
f01254a0:	7d 09                	jge    f01254ab <test_kheap_phys_addr+0x147b>
f01254a2:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f01254a9:	7e 85                	jle    f0125430 <test_kheap_phys_addr+0x1400>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f01254ab:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f01254b2:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f01254b6:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f01254ba:	0f 88 2a ff ff ff    	js     f01253ea <test_kheap_phys_addr+0x13ba>
f01254c0:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f01254c4:	7f 0d                	jg     f01254d3 <test_kheap_phys_addr+0x14a3>
f01254c6:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f01254cd:	0f 86 17 ff ff ff    	jbe    f01253ea <test_kheap_phys_addr+0x13ba>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f01254d3:	83 ec 0c             	sub    $0xc,%esp
f01254d6:	68 de ba 13 f0       	push   $0xf013bade
f01254db:	e8 2e b8 fd ff       	call   f0100d0e <cprintf>
f01254e0:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f01254e3:	83 ec 0c             	sub    $0xc,%esp
f01254e6:	68 48 c3 13 f0       	push   $0xf013c348
f01254eb:	e8 1e b8 fd ff       	call   f0100d0e <cprintf>
f01254f0:	83 c4 10             	add    $0x10,%esp

	return 1;
f01254f3:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01254f8:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01254fb:	5b                   	pop    %ebx
f01254fc:	5e                   	pop    %esi
f01254fd:	5f                   	pop    %edi
f01254fe:	5d                   	pop    %ebp
f01254ff:	c3                   	ret    

f0125500 <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f0125500:	55                   	push   %ebp
f0125501:	89 e5                	mov    %esp,%ebp
f0125503:	57                   	push   %edi
f0125504:	56                   	push   %esi
f0125505:	53                   	push   %ebx
f0125506:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
f012550c:	89 e0                	mov    %esp,%eax
f012550e:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f0125510:	83 ec 0c             	sub    $0xc,%esp
f0125513:	68 3c b8 13 f0       	push   $0xf013b83c
f0125518:	e8 f1 b7 fd ff       	call   f0100d0e <cprintf>
f012551d:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0125520:	83 ec 0c             	sub    $0xc,%esp
f0125523:	68 6c b8 13 f0       	push   $0xf013b86c
f0125528:	e8 e1 b7 fd ff       	call   f0100d0e <cprintf>
f012552d:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0125530:	83 ec 0c             	sub    $0xc,%esp
f0125533:	68 3c b8 13 f0       	push   $0xf013b83c
f0125538:	e8 d1 b7 fd ff       	call   f0100d0e <cprintf>
f012553d:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0125540:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f0125544:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f0125548:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f012554e:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f0125554:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f012555b:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0125562:	e8 30 7c fe ff       	call   f010d197 <sys_calculate_free_frames>
f0125567:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012556a:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0125570:	b9 14 00 00 00       	mov    $0x14,%ecx
f0125575:	b8 00 00 00 00       	mov    $0x0,%eax
f012557a:	89 d7                	mov    %edx,%edi
f012557c:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f012557e:	8d 95 78 fd ff ff    	lea    -0x288(%ebp),%edx
f0125584:	b9 14 00 00 00       	mov    $0x14,%ecx
f0125589:	b8 00 00 00 00       	mov    $0x0,%eax
f012558e:	89 d7                	mov    %edx,%edi
f0125590:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0125592:	8d 95 28 fd ff ff    	lea    -0x2d8(%ebp),%edx
f0125598:	b9 14 00 00 00       	mov    $0x14,%ecx
f012559d:	b8 00 00 00 00       	mov    $0x0,%eax
f01255a2:	89 d7                	mov    %edx,%edi
f01255a4:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01255a6:	e8 ec 7b fe ff       	call   f010d197 <sys_calculate_free_frames>
f01255ab:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01255ae:	e8 15 e8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01255b3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01255b6:	83 ec 0c             	sub    $0xc,%esp
f01255b9:	68 00 fc 1f 00       	push   $0x1ffc00
f01255be:	e8 c8 27 fe ff       	call   f0107d8b <kmalloc>
f01255c3:	83 c4 10             	add    $0x10,%esp
f01255c6:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01255cc:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f01255d2:	89 c1                	mov    %eax,%ecx
f01255d4:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01255db:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01255de:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01255e3:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01255e6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01255e9:	ba 00 00 00 00       	mov    $0x0,%edx
f01255ee:	f7 75 b4             	divl   -0x4c(%ebp)
f01255f1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01255f4:	29 d0                	sub    %edx,%eax
f01255f6:	89 c3                	mov    %eax,%ebx
f01255f8:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01255ff:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0125604:	0f b6 d0             	movzbl %al,%edx
f0125607:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012560a:	01 d0                	add    %edx,%eax
f012560c:	48                   	dec    %eax
f012560d:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0125610:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0125613:	ba 00 00 00 00       	mov    $0x0,%edx
f0125618:	f7 75 ac             	divl   -0x54(%ebp)
f012561b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012561e:	29 d0                	sub    %edx,%eax
f0125620:	01 c3                	add    %eax,%ebx
f0125622:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0125629:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012562e:	0f b6 c0             	movzbl %al,%eax
f0125631:	c1 e0 04             	shl    $0x4,%eax
f0125634:	89 c2                	mov    %eax,%edx
f0125636:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0125639:	01 d0                	add    %edx,%eax
f012563b:	48                   	dec    %eax
f012563c:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012563f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0125642:	ba 00 00 00 00       	mov    $0x0,%edx
f0125647:	f7 75 a4             	divl   -0x5c(%ebp)
f012564a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012564d:	29 d0                	sub    %edx,%eax
f012564f:	01 d8                	add    %ebx,%eax
f0125651:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0125656:	39 c1                	cmp    %eax,%ecx
f0125658:	74 17                	je     f0125671 <test_kheap_virt_addr+0x171>
f012565a:	83 ec 04             	sub    $0x4,%esp
f012565d:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0125662:	68 ed 08 00 00       	push   $0x8ed
f0125667:	68 fa b8 13 f0       	push   $0xf013b8fa
f012566c:	e8 94 ab fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125671:	e8 52 e7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125676:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125679:	74 17                	je     f0125692 <test_kheap_virt_addr+0x192>
f012567b:	83 ec 04             	sub    $0x4,%esp
f012567e:	68 14 b9 13 f0       	push   $0xf013b914
f0125683:	68 ee 08 00 00       	push   $0x8ee
f0125688:	68 fa b8 13 f0       	push   $0xf013b8fa
f012568d:	e8 73 ab fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125692:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125695:	e8 fd 7a fe ff       	call   f010d197 <sys_calculate_free_frames>
f012569a:	29 c3                	sub    %eax,%ebx
f012569c:	89 d8                	mov    %ebx,%eax
f012569e:	3d 00 02 00 00       	cmp    $0x200,%eax
f01256a3:	74 17                	je     f01256bc <test_kheap_virt_addr+0x1bc>
f01256a5:	83 ec 04             	sub    $0x4,%esp
f01256a8:	68 7c b9 13 f0       	push   $0xf013b97c
f01256ad:	68 ef 08 00 00       	push   $0x8ef
f01256b2:	68 fa b8 13 f0       	push   $0xf013b8fa
f01256b7:	e8 49 ab fd ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01256bc:	e8 d6 7a fe ff       	call   f010d197 <sys_calculate_free_frames>
f01256c1:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01256c4:	e8 ff e6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01256c9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01256cc:	83 ec 0c             	sub    $0xc,%esp
f01256cf:	68 00 fc 1f 00       	push   $0x1ffc00
f01256d4:	e8 b2 26 fe ff       	call   f0107d8b <kmalloc>
f01256d9:	83 c4 10             	add    $0x10,%esp
f01256dc:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01256e2:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f01256e8:	89 c1                	mov    %eax,%ecx
f01256ea:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f01256f1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01256f4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01256f9:	89 45 98             	mov    %eax,-0x68(%ebp)
f01256fc:	8b 45 98             	mov    -0x68(%ebp),%eax
f01256ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0125704:	f7 75 9c             	divl   -0x64(%ebp)
f0125707:	8b 45 98             	mov    -0x68(%ebp),%eax
f012570a:	29 d0                	sub    %edx,%eax
f012570c:	89 c3                	mov    %eax,%ebx
f012570e:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0125715:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012571a:	0f b6 d0             	movzbl %al,%edx
f012571d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0125720:	01 d0                	add    %edx,%eax
f0125722:	48                   	dec    %eax
f0125723:	89 45 90             	mov    %eax,-0x70(%ebp)
f0125726:	8b 45 90             	mov    -0x70(%ebp),%eax
f0125729:	ba 00 00 00 00       	mov    $0x0,%edx
f012572e:	f7 75 94             	divl   -0x6c(%ebp)
f0125731:	8b 45 90             	mov    -0x70(%ebp),%eax
f0125734:	29 d0                	sub    %edx,%eax
f0125736:	01 c3                	add    %eax,%ebx
f0125738:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012573f:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0125744:	0f b6 c0             	movzbl %al,%eax
f0125747:	c1 e0 04             	shl    $0x4,%eax
f012574a:	89 c2                	mov    %eax,%edx
f012574c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012574f:	01 d0                	add    %edx,%eax
f0125751:	48                   	dec    %eax
f0125752:	89 45 88             	mov    %eax,-0x78(%ebp)
f0125755:	8b 45 88             	mov    -0x78(%ebp),%eax
f0125758:	ba 00 00 00 00       	mov    $0x0,%edx
f012575d:	f7 75 8c             	divl   -0x74(%ebp)
f0125760:	8b 45 88             	mov    -0x78(%ebp),%eax
f0125763:	29 d0                	sub    %edx,%eax
f0125765:	01 d8                	add    %ebx,%eax
f0125767:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012576c:	39 c1                	cmp    %eax,%ecx
f012576e:	74 17                	je     f0125787 <test_kheap_virt_addr+0x287>
f0125770:	83 ec 04             	sub    $0x4,%esp
f0125773:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0125778:	68 f5 08 00 00       	push   $0x8f5
f012577d:	68 fa b8 13 f0       	push   $0xf013b8fa
f0125782:	e8 7e aa fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125787:	e8 3c e6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012578c:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012578f:	74 17                	je     f01257a8 <test_kheap_virt_addr+0x2a8>
f0125791:	83 ec 04             	sub    $0x4,%esp
f0125794:	68 14 b9 13 f0       	push   $0xf013b914
f0125799:	68 f6 08 00 00       	push   $0x8f6
f012579e:	68 fa b8 13 f0       	push   $0xf013b8fa
f01257a3:	e8 5d aa fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01257a8:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01257ab:	e8 e7 79 fe ff       	call   f010d197 <sys_calculate_free_frames>
f01257b0:	29 c3                	sub    %eax,%ebx
f01257b2:	89 d8                	mov    %ebx,%eax
f01257b4:	3d 00 02 00 00       	cmp    $0x200,%eax
f01257b9:	74 17                	je     f01257d2 <test_kheap_virt_addr+0x2d2>
f01257bb:	83 ec 04             	sub    $0x4,%esp
f01257be:	68 7c b9 13 f0       	push   $0xf013b97c
f01257c3:	68 f7 08 00 00       	push   $0x8f7
f01257c8:	68 fa b8 13 f0       	push   $0xf013b8fa
f01257cd:	e8 33 aa fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01257d2:	e8 c0 79 fe ff       	call   f010d197 <sys_calculate_free_frames>
f01257d7:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01257da:	e8 e9 e5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01257df:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01257e2:	83 ec 0c             	sub    $0xc,%esp
f01257e5:	68 00 08 00 00       	push   $0x800
f01257ea:	e8 9c 25 fe ff       	call   f0107d8b <kmalloc>
f01257ef:	83 c4 10             	add    $0x10,%esp
f01257f2:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01257f8:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f01257fe:	89 c1                	mov    %eax,%ecx
f0125800:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0125807:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012580a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012580f:	89 45 80             	mov    %eax,-0x80(%ebp)
f0125812:	8b 45 80             	mov    -0x80(%ebp),%eax
f0125815:	ba 00 00 00 00       	mov    $0x0,%edx
f012581a:	f7 75 84             	divl   -0x7c(%ebp)
f012581d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0125820:	29 d0                	sub    %edx,%eax
f0125822:	89 c3                	mov    %eax,%ebx
f0125824:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012582b:	10 00 00 
f012582e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0125833:	0f b6 d0             	movzbl %al,%edx
f0125836:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012583c:	01 d0                	add    %edx,%eax
f012583e:	48                   	dec    %eax
f012583f:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0125845:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012584b:	ba 00 00 00 00       	mov    $0x0,%edx
f0125850:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0125856:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012585c:	29 d0                	sub    %edx,%eax
f012585e:	01 c3                	add    %eax,%ebx
f0125860:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0125867:	10 00 00 
f012586a:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012586f:	0f b6 c0             	movzbl %al,%eax
f0125872:	c1 e0 04             	shl    $0x4,%eax
f0125875:	89 c2                	mov    %eax,%edx
f0125877:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012587d:	01 d0                	add    %edx,%eax
f012587f:	48                   	dec    %eax
f0125880:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0125886:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012588c:	ba 00 00 00 00       	mov    $0x0,%edx
f0125891:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0125897:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012589d:	29 d0                	sub    %edx,%eax
f012589f:	01 d8                	add    %ebx,%eax
f01258a1:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01258a6:	39 c1                	cmp    %eax,%ecx
f01258a8:	74 17                	je     f01258c1 <test_kheap_virt_addr+0x3c1>
f01258aa:	83 ec 04             	sub    $0x4,%esp
f01258ad:	68 e0 b9 13 f0       	push   $0xf013b9e0
f01258b2:	68 fd 08 00 00       	push   $0x8fd
f01258b7:	68 fa b8 13 f0       	push   $0xf013b8fa
f01258bc:	e8 44 a9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01258c1:	e8 02 e5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01258c6:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01258c9:	74 17                	je     f01258e2 <test_kheap_virt_addr+0x3e2>
f01258cb:	83 ec 04             	sub    $0x4,%esp
f01258ce:	68 14 b9 13 f0       	push   $0xf013b914
f01258d3:	68 fe 08 00 00       	push   $0x8fe
f01258d8:	68 fa b8 13 f0       	push   $0xf013b8fa
f01258dd:	e8 23 a9 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01258e2:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01258e5:	e8 ad 78 fe ff       	call   f010d197 <sys_calculate_free_frames>
f01258ea:	29 c3                	sub    %eax,%ebx
f01258ec:	89 d8                	mov    %ebx,%eax
f01258ee:	83 f8 01             	cmp    $0x1,%eax
f01258f1:	74 17                	je     f012590a <test_kheap_virt_addr+0x40a>
f01258f3:	83 ec 04             	sub    $0x4,%esp
f01258f6:	68 7c b9 13 f0       	push   $0xf013b97c
f01258fb:	68 ff 08 00 00       	push   $0x8ff
f0125900:	68 fa b8 13 f0       	push   $0xf013b8fa
f0125905:	e8 fb a8 fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012590a:	e8 88 78 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012590f:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125912:	e8 b1 e4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125917:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012591a:	83 ec 0c             	sub    $0xc,%esp
f012591d:	68 00 08 00 00       	push   $0x800
f0125922:	e8 64 24 fe ff       	call   f0107d8b <kmalloc>
f0125927:	83 c4 10             	add    $0x10,%esp
f012592a:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125930:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f0125936:	89 c1                	mov    %eax,%ecx
f0125938:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012593f:	10 00 00 
f0125942:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0125948:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012594d:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0125953:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0125959:	ba 00 00 00 00       	mov    $0x0,%edx
f012595e:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0125964:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012596a:	29 d0                	sub    %edx,%eax
f012596c:	89 c3                	mov    %eax,%ebx
f012596e:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0125975:	10 00 00 
f0125978:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012597d:	0f b6 d0             	movzbl %al,%edx
f0125980:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0125986:	01 d0                	add    %edx,%eax
f0125988:	48                   	dec    %eax
f0125989:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012598f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0125995:	ba 00 00 00 00       	mov    $0x0,%edx
f012599a:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01259a0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01259a6:	29 d0                	sub    %edx,%eax
f01259a8:	01 c3                	add    %eax,%ebx
f01259aa:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01259b1:	10 00 00 
f01259b4:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01259b9:	0f b6 c0             	movzbl %al,%eax
f01259bc:	c1 e0 04             	shl    $0x4,%eax
f01259bf:	89 c2                	mov    %eax,%edx
f01259c1:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01259c7:	01 d0                	add    %edx,%eax
f01259c9:	48                   	dec    %eax
f01259ca:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f01259d0:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01259d6:	ba 00 00 00 00       	mov    $0x0,%edx
f01259db:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f01259e1:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01259e7:	29 d0                	sub    %edx,%eax
f01259e9:	01 d8                	add    %ebx,%eax
f01259eb:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01259f0:	39 c1                	cmp    %eax,%ecx
f01259f2:	74 17                	je     f0125a0b <test_kheap_virt_addr+0x50b>
f01259f4:	83 ec 04             	sub    $0x4,%esp
f01259f7:	68 e0 b9 13 f0       	push   $0xf013b9e0
f01259fc:	68 05 09 00 00       	push   $0x905
f0125a01:	68 fa b8 13 f0       	push   $0xf013b8fa
f0125a06:	e8 fa a7 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125a0b:	e8 b8 e3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125a10:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125a13:	74 17                	je     f0125a2c <test_kheap_virt_addr+0x52c>
f0125a15:	83 ec 04             	sub    $0x4,%esp
f0125a18:	68 14 b9 13 f0       	push   $0xf013b914
f0125a1d:	68 06 09 00 00       	push   $0x906
f0125a22:	68 fa b8 13 f0       	push   $0xf013b8fa
f0125a27:	e8 d9 a7 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125a2c:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125a2f:	e8 63 77 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0125a34:	29 c3                	sub    %eax,%ebx
f0125a36:	89 d8                	mov    %ebx,%eax
f0125a38:	83 f8 01             	cmp    $0x1,%eax
f0125a3b:	74 17                	je     f0125a54 <test_kheap_virt_addr+0x554>
f0125a3d:	83 ec 04             	sub    $0x4,%esp
f0125a40:	68 7c b9 13 f0       	push   $0xf013b97c
f0125a45:	68 07 09 00 00       	push   $0x907
f0125a4a:	68 fa b8 13 f0       	push   $0xf013b8fa
f0125a4f:	e8 b1 a7 fd ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0125a54:	e8 3e 77 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0125a59:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125a5c:	e8 67 e3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125a61:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0125a64:	83 ec 0c             	sub    $0xc,%esp
f0125a67:	68 00 1c 00 00       	push   $0x1c00
f0125a6c:	e8 1a 23 fe ff       	call   f0107d8b <kmalloc>
f0125a71:	83 c4 10             	add    $0x10,%esp
f0125a74:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125a7a:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f0125a80:	89 c1                	mov    %eax,%ecx
f0125a82:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0125a89:	10 00 00 
f0125a8c:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0125a92:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125a97:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0125a9d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0125aa3:	ba 00 00 00 00       	mov    $0x0,%edx
f0125aa8:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0125aae:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0125ab4:	29 d0                	sub    %edx,%eax
f0125ab6:	89 c3                	mov    %eax,%ebx
f0125ab8:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0125abf:	10 00 00 
f0125ac2:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0125ac7:	0f b6 d0             	movzbl %al,%edx
f0125aca:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0125ad0:	01 d0                	add    %edx,%eax
f0125ad2:	48                   	dec    %eax
f0125ad3:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0125ad9:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0125adf:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ae4:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0125aea:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0125af0:	29 d0                	sub    %edx,%eax
f0125af2:	01 c3                	add    %eax,%ebx
f0125af4:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0125afb:	10 00 00 
f0125afe:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0125b03:	0f b6 c0             	movzbl %al,%eax
f0125b06:	c1 e0 04             	shl    $0x4,%eax
f0125b09:	89 c2                	mov    %eax,%edx
f0125b0b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0125b11:	01 d0                	add    %edx,%eax
f0125b13:	48                   	dec    %eax
f0125b14:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0125b1a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0125b20:	ba 00 00 00 00       	mov    $0x0,%edx
f0125b25:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0125b2b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0125b31:	29 d0                	sub    %edx,%eax
f0125b33:	01 d8                	add    %ebx,%eax
f0125b35:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0125b3a:	39 c1                	cmp    %eax,%ecx
f0125b3c:	74 17                	je     f0125b55 <test_kheap_virt_addr+0x655>
f0125b3e:	83 ec 04             	sub    $0x4,%esp
f0125b41:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0125b46:	68 0d 09 00 00       	push   $0x90d
f0125b4b:	68 fa b8 13 f0       	push   $0xf013b8fa
f0125b50:	e8 b0 a6 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125b55:	e8 6e e2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125b5a:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125b5d:	74 17                	je     f0125b76 <test_kheap_virt_addr+0x676>
f0125b5f:	83 ec 04             	sub    $0x4,%esp
f0125b62:	68 14 b9 13 f0       	push   $0xf013b914
f0125b67:	68 0e 09 00 00       	push   $0x90e
f0125b6c:	68 fa b8 13 f0       	push   $0xf013b8fa
f0125b71:	e8 8f a6 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125b76:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125b79:	e8 19 76 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0125b7e:	29 c3                	sub    %eax,%ebx
f0125b80:	89 d8                	mov    %ebx,%eax
f0125b82:	83 f8 02             	cmp    $0x2,%eax
f0125b85:	74 17                	je     f0125b9e <test_kheap_virt_addr+0x69e>
f0125b87:	83 ec 04             	sub    $0x4,%esp
f0125b8a:	68 7c b9 13 f0       	push   $0xf013b97c
f0125b8f:	68 0f 09 00 00       	push   $0x90f
f0125b94:	68 fa b8 13 f0       	push   $0xf013b8fa
f0125b99:	e8 67 a6 fd ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0125b9e:	e8 f4 75 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0125ba3:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125ba6:	e8 1d e2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125bab:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0125bae:	83 ec 0c             	sub    $0xc,%esp
f0125bb1:	68 00 fc 2f 00       	push   $0x2ffc00
f0125bb6:	e8 d0 21 fe ff       	call   f0107d8b <kmalloc>
f0125bbb:	83 c4 10             	add    $0x10,%esp
f0125bbe:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125bc4:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0125bca:	89 c1                	mov    %eax,%ecx
f0125bcc:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0125bd3:	10 00 00 
f0125bd6:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0125bdc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125be1:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0125be7:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0125bed:	ba 00 00 00 00       	mov    $0x0,%edx
f0125bf2:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0125bf8:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0125bfe:	29 d0                	sub    %edx,%eax
f0125c00:	89 c3                	mov    %eax,%ebx
f0125c02:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0125c09:	10 00 00 
f0125c0c:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0125c11:	0f b6 d0             	movzbl %al,%edx
f0125c14:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0125c1a:	01 d0                	add    %edx,%eax
f0125c1c:	48                   	dec    %eax
f0125c1d:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0125c23:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0125c29:	ba 00 00 00 00       	mov    $0x0,%edx
f0125c2e:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0125c34:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0125c3a:	29 d0                	sub    %edx,%eax
f0125c3c:	01 c3                	add    %eax,%ebx
f0125c3e:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0125c45:	10 00 00 
f0125c48:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0125c4d:	0f b6 c0             	movzbl %al,%eax
f0125c50:	c1 e0 04             	shl    $0x4,%eax
f0125c53:	89 c2                	mov    %eax,%edx
f0125c55:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0125c5b:	01 d0                	add    %edx,%eax
f0125c5d:	48                   	dec    %eax
f0125c5e:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0125c64:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125c6a:	ba 00 00 00 00       	mov    $0x0,%edx
f0125c6f:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0125c75:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125c7b:	29 d0                	sub    %edx,%eax
f0125c7d:	01 d8                	add    %ebx,%eax
f0125c7f:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0125c84:	39 c1                	cmp    %eax,%ecx
f0125c86:	74 17                	je     f0125c9f <test_kheap_virt_addr+0x79f>
f0125c88:	83 ec 04             	sub    $0x4,%esp
f0125c8b:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0125c90:	68 15 09 00 00       	push   $0x915
f0125c95:	68 fa b8 13 f0       	push   $0xf013b8fa
f0125c9a:	e8 66 a5 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125c9f:	e8 24 e1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125ca4:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125ca7:	74 17                	je     f0125cc0 <test_kheap_virt_addr+0x7c0>
f0125ca9:	83 ec 04             	sub    $0x4,%esp
f0125cac:	68 14 b9 13 f0       	push   $0xf013b914
f0125cb1:	68 16 09 00 00       	push   $0x916
f0125cb6:	68 fa b8 13 f0       	push   $0xf013b8fa
f0125cbb:	e8 45 a5 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125cc0:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125cc3:	e8 cf 74 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0125cc8:	29 c3                	sub    %eax,%ebx
f0125cca:	89 d8                	mov    %ebx,%eax
f0125ccc:	3d 00 03 00 00       	cmp    $0x300,%eax
f0125cd1:	74 17                	je     f0125cea <test_kheap_virt_addr+0x7ea>
f0125cd3:	83 ec 04             	sub    $0x4,%esp
f0125cd6:	68 7c b9 13 f0       	push   $0xf013b97c
f0125cdb:	68 17 09 00 00       	push   $0x917
f0125ce0:	68 fa b8 13 f0       	push   $0xf013b8fa
f0125ce5:	e8 1b a5 fd ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0125cea:	e8 a8 74 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0125cef:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125cf2:	e8 d1 e0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125cf7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0125cfa:	83 ec 0c             	sub    $0xc,%esp
f0125cfd:	68 00 fc 5f 00       	push   $0x5ffc00
f0125d02:	e8 84 20 fe ff       	call   f0107d8b <kmalloc>
f0125d07:	83 c4 10             	add    $0x10,%esp
f0125d0a:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125d10:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0125d16:	89 c1                	mov    %eax,%ecx
f0125d18:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0125d1f:	10 00 00 
f0125d22:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0125d28:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125d2d:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0125d33:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125d39:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d3e:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0125d44:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125d4a:	29 d0                	sub    %edx,%eax
f0125d4c:	89 c3                	mov    %eax,%ebx
f0125d4e:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0125d55:	10 00 00 
f0125d58:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0125d5d:	0f b6 d0             	movzbl %al,%edx
f0125d60:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0125d66:	01 d0                	add    %edx,%eax
f0125d68:	48                   	dec    %eax
f0125d69:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0125d6f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125d75:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d7a:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0125d80:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125d86:	29 d0                	sub    %edx,%eax
f0125d88:	01 c3                	add    %eax,%ebx
f0125d8a:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0125d91:	10 00 00 
f0125d94:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0125d99:	0f b6 c0             	movzbl %al,%eax
f0125d9c:	c1 e0 04             	shl    $0x4,%eax
f0125d9f:	89 c2                	mov    %eax,%edx
f0125da1:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0125da7:	01 d0                	add    %edx,%eax
f0125da9:	48                   	dec    %eax
f0125daa:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0125db0:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0125db6:	ba 00 00 00 00       	mov    $0x0,%edx
f0125dbb:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0125dc1:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0125dc7:	29 d0                	sub    %edx,%eax
f0125dc9:	01 d8                	add    %ebx,%eax
f0125dcb:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0125dd0:	39 c1                	cmp    %eax,%ecx
f0125dd2:	74 17                	je     f0125deb <test_kheap_virt_addr+0x8eb>
f0125dd4:	83 ec 04             	sub    $0x4,%esp
f0125dd7:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0125ddc:	68 1d 09 00 00       	push   $0x91d
f0125de1:	68 fa b8 13 f0       	push   $0xf013b8fa
f0125de6:	e8 1a a4 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125deb:	e8 d8 df fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125df0:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125df3:	74 17                	je     f0125e0c <test_kheap_virt_addr+0x90c>
f0125df5:	83 ec 04             	sub    $0x4,%esp
f0125df8:	68 14 b9 13 f0       	push   $0xf013b914
f0125dfd:	68 1e 09 00 00       	push   $0x91e
f0125e02:	68 fa b8 13 f0       	push   $0xf013b8fa
f0125e07:	e8 f9 a3 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125e0c:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125e0f:	e8 83 73 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0125e14:	29 c3                	sub    %eax,%ebx
f0125e16:	89 d8                	mov    %ebx,%eax
f0125e18:	3d 00 06 00 00       	cmp    $0x600,%eax
f0125e1d:	74 17                	je     f0125e36 <test_kheap_virt_addr+0x936>
f0125e1f:	83 ec 04             	sub    $0x4,%esp
f0125e22:	68 7c b9 13 f0       	push   $0xf013b97c
f0125e27:	68 1f 09 00 00       	push   $0x91f
f0125e2c:	68 fa b8 13 f0       	push   $0xf013b8fa
f0125e31:	e8 cf a3 fd ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0125e36:	e8 5c 73 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0125e3b:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125e3e:	e8 85 df fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125e43:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0125e46:	83 ec 0c             	sub    $0xc,%esp
f0125e49:	68 00 38 00 00       	push   $0x3800
f0125e4e:	e8 38 1f fe ff       	call   f0107d8b <kmalloc>
f0125e53:	83 c4 10             	add    $0x10,%esp
f0125e56:	89 85 44 fd ff ff    	mov    %eax,-0x2bc(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125e5c:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f0125e62:	89 c1                	mov    %eax,%ecx
f0125e64:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0125e6b:	10 00 00 
f0125e6e:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0125e74:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125e79:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0125e7f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0125e85:	ba 00 00 00 00       	mov    $0x0,%edx
f0125e8a:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0125e90:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0125e96:	29 d0                	sub    %edx,%eax
f0125e98:	89 c3                	mov    %eax,%ebx
f0125e9a:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f0125ea1:	10 00 00 
f0125ea4:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0125ea9:	0f b6 d0             	movzbl %al,%edx
f0125eac:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0125eb2:	01 d0                	add    %edx,%eax
f0125eb4:	48                   	dec    %eax
f0125eb5:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f0125ebb:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0125ec1:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ec6:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f0125ecc:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0125ed2:	29 d0                	sub    %edx,%eax
f0125ed4:	01 c3                	add    %eax,%ebx
f0125ed6:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0125edd:	10 00 00 
f0125ee0:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0125ee5:	0f b6 c0             	movzbl %al,%eax
f0125ee8:	c1 e0 04             	shl    $0x4,%eax
f0125eeb:	89 c2                	mov    %eax,%edx
f0125eed:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0125ef3:	01 d0                	add    %edx,%eax
f0125ef5:	48                   	dec    %eax
f0125ef6:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0125efc:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0125f02:	ba 00 00 00 00       	mov    $0x0,%edx
f0125f07:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0125f0d:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0125f13:	29 d0                	sub    %edx,%eax
f0125f15:	01 d8                	add    %ebx,%eax
f0125f17:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0125f1c:	39 c1                	cmp    %eax,%ecx
f0125f1e:	74 17                	je     f0125f37 <test_kheap_virt_addr+0xa37>
f0125f20:	83 ec 04             	sub    $0x4,%esp
f0125f23:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0125f28:	68 25 09 00 00       	push   $0x925
f0125f2d:	68 fa b8 13 f0       	push   $0xf013b8fa
f0125f32:	e8 ce a2 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125f37:	e8 8c de fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125f3c:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125f3f:	74 17                	je     f0125f58 <test_kheap_virt_addr+0xa58>
f0125f41:	83 ec 04             	sub    $0x4,%esp
f0125f44:	68 14 b9 13 f0       	push   $0xf013b914
f0125f49:	68 26 09 00 00       	push   $0x926
f0125f4e:	68 fa b8 13 f0       	push   $0xf013b8fa
f0125f53:	e8 ad a2 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125f58:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125f5b:	e8 37 72 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0125f60:	29 c3                	sub    %eax,%ebx
f0125f62:	89 d8                	mov    %ebx,%eax
f0125f64:	83 f8 04             	cmp    $0x4,%eax
f0125f67:	74 17                	je     f0125f80 <test_kheap_virt_addr+0xa80>
f0125f69:	83 ec 04             	sub    $0x4,%esp
f0125f6c:	68 7c b9 13 f0       	push   $0xf013b97c
f0125f71:	68 27 09 00 00       	push   $0x927
f0125f76:	68 fa b8 13 f0       	push   $0xf013b8fa
f0125f7b:	e8 85 a2 fd ff       	call   f0100205 <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ (INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE] ;
f0125f80:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0125f87:	10 00 00 
f0125f8a:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0125f90:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125f95:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0125f9b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0125fa1:	ba 00 00 00 00       	mov    $0x0,%edx
f0125fa6:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0125fac:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0125fb2:	29 d0                	sub    %edx,%eax
f0125fb4:	89 c1                	mov    %eax,%ecx
f0125fb6:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0125fbd:	10 00 00 
f0125fc0:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0125fc5:	0f b6 d0             	movzbl %al,%edx
f0125fc8:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0125fce:	01 d0                	add    %edx,%eax
f0125fd0:	48                   	dec    %eax
f0125fd1:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0125fd7:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0125fdd:	ba 00 00 00 00       	mov    $0x0,%edx
f0125fe2:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0125fe8:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0125fee:	29 d0                	sub    %edx,%eax
f0125ff0:	01 c1                	add    %eax,%ecx
f0125ff2:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0125ff9:	10 00 00 
f0125ffc:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0126001:	0f b6 c0             	movzbl %al,%eax
f0126004:	c1 e0 04             	shl    $0x4,%eax
f0126007:	89 c2                	mov    %eax,%edx
f0126009:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012600f:	01 d0                	add    %edx,%eax
f0126011:	48                   	dec    %eax
f0126012:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0126018:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012601e:	ba 00 00 00 00       	mov    $0x0,%edx
f0126023:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0126029:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012602f:	29 d0                	sub    %edx,%eax
f0126031:	01 c1                	add    %eax,%ecx
f0126033:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f012603a:	10 00 00 
f012603d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0126043:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126048:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f012604e:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0126054:	ba 00 00 00 00       	mov    $0x0,%edx
f0126059:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f012605f:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0126065:	29 d0                	sub    %edx,%eax
f0126067:	29 c1                	sub    %eax,%ecx
f0126069:	89 c8                	mov    %ecx,%eax
f012606b:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0126070:	c1 e8 0c             	shr    $0xc,%eax
f0126073:	89 c2                	mov    %eax,%edx
f0126075:	4a                   	dec    %edx
f0126076:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
f012607c:	c1 e0 02             	shl    $0x2,%eax
f012607f:	8d 50 03             	lea    0x3(%eax),%edx
f0126082:	b8 10 00 00 00       	mov    $0x10,%eax
f0126087:	48                   	dec    %eax
f0126088:	01 d0                	add    %edx,%eax
f012608a:	bf 10 00 00 00       	mov    $0x10,%edi
f012608f:	ba 00 00 00 00       	mov    $0x0,%edx
f0126094:	f7 f7                	div    %edi
f0126096:	6b c0 10             	imul   $0x10,%eax,%eax
f0126099:	29 c4                	sub    %eax,%esp
f012609b:	89 e0                	mov    %esp,%eax
f012609d:	83 c0 03             	add    $0x3,%eax
f01260a0:	c1 e8 02             	shr    $0x2,%eax
f01260a3:	c1 e0 02             	shl    $0x2,%eax
f01260a6:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+(INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE ;
f01260ac:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01260b3:	10 00 00 
f01260b6:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01260bc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01260c1:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f01260c7:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01260cd:	ba 00 00 00 00       	mov    $0x0,%edx
f01260d2:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f01260d8:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01260de:	29 d0                	sub    %edx,%eax
f01260e0:	89 c1                	mov    %eax,%ecx
f01260e2:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f01260e9:	10 00 00 
f01260ec:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01260f1:	0f b6 d0             	movzbl %al,%edx
f01260f4:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01260fa:	01 d0                	add    %edx,%eax
f01260fc:	48                   	dec    %eax
f01260fd:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0126103:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0126109:	ba 00 00 00 00       	mov    $0x0,%edx
f012610e:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0126114:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012611a:	29 d0                	sub    %edx,%eax
f012611c:	01 c1                	add    %eax,%ecx
f012611e:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0126125:	10 00 00 
f0126128:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012612d:	0f b6 c0             	movzbl %al,%eax
f0126130:	c1 e0 04             	shl    $0x4,%eax
f0126133:	89 c2                	mov    %eax,%edx
f0126135:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012613b:	01 d0                	add    %edx,%eax
f012613d:	48                   	dec    %eax
f012613e:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0126144:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012614a:	ba 00 00 00 00       	mov    $0x0,%edx
f012614f:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0126155:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012615b:	29 d0                	sub    %edx,%eax
f012615d:	01 c1                	add    %eax,%ecx
f012615f:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0126166:	10 00 00 
f0126169:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012616f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126174:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012617a:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0126180:	ba 00 00 00 00       	mov    $0x0,%edx
f0126185:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012618b:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0126191:	29 d0                	sub    %edx,%eax
f0126193:	29 c1                	sub    %eax,%ecx
f0126195:	89 c8                	mov    %ecx,%eax
f0126197:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f012619c:	c1 e8 0c             	shr    $0xc,%eax
f012619f:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f01261a5:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f01261ac:	10 00 00 
f01261af:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01261b5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01261ba:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f01261c0:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01261c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01261cb:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f01261d1:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01261d7:	29 d0                	sub    %edx,%eax
f01261d9:	89 c1                	mov    %eax,%ecx
f01261db:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f01261e2:	10 00 00 
f01261e5:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01261ea:	0f b6 d0             	movzbl %al,%edx
f01261ed:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01261f3:	01 d0                	add    %edx,%eax
f01261f5:	48                   	dec    %eax
f01261f6:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f01261fc:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0126202:	ba 00 00 00 00       	mov    $0x0,%edx
f0126207:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f012620d:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0126213:	29 d0                	sub    %edx,%eax
f0126215:	01 c1                	add    %eax,%ecx
f0126217:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f012621e:	10 00 00 
f0126221:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0126226:	0f b6 c0             	movzbl %al,%eax
f0126229:	c1 e0 04             	shl    $0x4,%eax
f012622c:	89 c2                	mov    %eax,%edx
f012622e:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0126234:	01 d0                	add    %edx,%eax
f0126236:	48                   	dec    %eax
f0126237:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f012623d:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0126243:	ba 00 00 00 00       	mov    $0x0,%edx
f0126248:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f012624e:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0126254:	29 d0                	sub    %edx,%eax
f0126256:	01 c8                	add    %ecx,%eax
f0126258:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012625d:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int i = 0;
f0126263:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f012626a:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f0126271:	10 00 00 
f0126274:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012627a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012627f:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f0126285:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012628b:	ba 00 00 00 00       	mov    $0x0,%edx
f0126290:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f0126296:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012629c:	29 d0                	sub    %edx,%eax
f012629e:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01262a3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01262a6:	e9 21 01 00 00       	jmp    f01263cc <test_kheap_virt_addr+0xecc>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f01262ab:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f01262b0:	83 ec 04             	sub    $0x4,%esp
f01262b3:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f01262b9:	52                   	push   %edx
f01262ba:	ff 75 e4             	pushl  -0x1c(%ebp)
f01262bd:	50                   	push   %eax
f01262be:	e8 ee 07 fe ff       	call   f0106ab1 <get_page_table>
f01262c3:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01262c6:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f01262cc:	85 c0                	test   %eax,%eax
f01262ce:	75 17                	jne    f01262e7 <test_kheap_virt_addr+0xde7>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f01262d0:	83 ec 04             	sub    $0x4,%esp
f01262d3:	68 9c c2 13 f0       	push   $0xf013c29c
f01262d8:	68 38 09 00 00       	push   $0x938
f01262dd:	68 fa b8 13 f0       	push   $0xf013b8fa
f01262e2:	e8 1e 9f fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f01262e7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01262ea:	c1 e8 0c             	shr    $0xc,%eax
f01262ed:	25 ff 03 00 00       	and    $0x3ff,%eax
f01262f2:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01262f5:	e9 ba 00 00 00       	jmp    f01263b4 <test_kheap_virt_addr+0xeb4>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f01262fa:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0126300:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0126303:	c1 e2 02             	shl    $0x2,%edx
f0126306:	01 d0                	add    %edx,%eax
f0126308:	8b 00                	mov    (%eax),%eax
f012630a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f012630f:	89 c1                	mov    %eax,%ecx
f0126311:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126317:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012631a:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f012631d:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126323:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0126326:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0126329:	83 ec 0c             	sub    $0xc,%esp
f012632c:	50                   	push   %eax
f012632d:	e8 4b 1c fe ff       	call   f0107f7d <kheap_virtual_address>
f0126332:	83 c4 10             	add    $0x10,%esp
f0126335:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
				//cprintf("va to check = %x\n", va);
				if (retrievedVA != (va))
f012633b:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0126341:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0126344:	74 61                	je     f01263a7 <test_kheap_virt_addr+0xea7>
				{
					cprintf("\nretrievedVA = %x, Actual VA = %x, table entry = %x, khep_pa = %x\n",retrievedVA, va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
f0126346:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012634c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012634f:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0126352:	8b 95 24 fd ff ff    	mov    -0x2dc(%ebp),%edx
f0126358:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012635b:	c1 e1 02             	shl    $0x2,%ecx
f012635e:	01 ca                	add    %ecx,%edx
f0126360:	8b 12                	mov    (%edx),%edx
f0126362:	89 d1                	mov    %edx,%ecx
f0126364:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f012636a:	8b 55 dc             	mov    -0x24(%ebp),%edx
f012636d:	c1 e2 0c             	shl    $0xc,%edx
f0126370:	89 d3                	mov    %edx,%ebx
f0126372:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0126375:	01 da                	add    %ebx,%edx
f0126377:	83 ec 0c             	sub    $0xc,%esp
f012637a:	50                   	push   %eax
f012637b:	51                   	push   %ecx
f012637c:	52                   	push   %edx
f012637d:	ff b5 84 fe ff ff    	pushl  -0x17c(%ebp)
f0126383:	68 90 c3 13 f0       	push   $0xf013c390
f0126388:	e8 81 a9 fd ff       	call   f0100d0e <cprintf>
f012638d:	83 c4 20             	add    $0x20,%esp
					panic("Wrong kheap_virtual_address");
f0126390:	83 ec 04             	sub    $0x4,%esp
f0126393:	68 d3 c3 13 f0       	push   $0xf013c3d3
f0126398:	68 42 09 00 00       	push   $0x942
f012639d:	68 fa b8 13 f0       	push   $0xf013b8fa
f01263a2:	e8 5e 9e fd ff       	call   f0100205 <_panic>
				}
				va+=PAGE_SIZE;
f01263a7:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f01263ae:	ff 45 dc             	incl   -0x24(%ebp)
f01263b1:	ff 45 e0             	incl   -0x20(%ebp)
f01263b4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01263b7:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f01263bd:	7d 0d                	jge    f01263cc <test_kheap_virt_addr+0xecc>
f01263bf:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f01263c6:	0f 8e 2e ff ff ff    	jle    f01262fa <test_kheap_virt_addr+0xdfa>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01263cc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01263cf:	3b 85 90 fe ff ff    	cmp    -0x170(%ebp),%eax
f01263d5:	0f 82 d0 fe ff ff    	jb     f01262ab <test_kheap_virt_addr+0xdab>
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f01263db:	83 ec 0c             	sub    $0xc,%esp
f01263de:	68 f0 c3 13 f0       	push   $0xf013c3f0
f01263e3:	e8 26 a9 fd ff       	call   f0100d0e <cprintf>
f01263e8:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01263eb:	e8 a7 6d fe ff       	call   f010d197 <sys_calculate_free_frames>
f01263f0:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01263f6:	e8 cd d9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01263fb:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[0]);
f0126401:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0126407:	83 ec 0c             	sub    $0xc,%esp
f012640a:	50                   	push   %eax
f012640b:	e8 46 1a fe ff       	call   f0107e56 <kfree>
f0126410:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126413:	e8 b0 d9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126418:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f012641e:	74 17                	je     f0126437 <test_kheap_virt_addr+0xf37>
f0126420:	83 ec 04             	sub    $0x4,%esp
f0126423:	68 14 b9 13 f0       	push   $0xf013b914
f0126428:	68 50 09 00 00       	push   $0x950
f012642d:	68 fa b8 13 f0       	push   $0xf013b8fa
f0126432:	e8 ce 9d fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0126437:	e8 5b 6d fe ff       	call   f010d197 <sys_calculate_free_frames>
f012643c:	89 c2                	mov    %eax,%edx
f012643e:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0126444:	29 c2                	sub    %eax,%edx
f0126446:	89 d0                	mov    %edx,%eax
f0126448:	3d 00 02 00 00       	cmp    $0x200,%eax
f012644d:	74 17                	je     f0126466 <test_kheap_virt_addr+0xf66>
f012644f:	83 ec 04             	sub    $0x4,%esp
f0126452:	68 84 c0 13 f0       	push   $0xf013c084
f0126457:	68 51 09 00 00       	push   $0x951
f012645c:	68 fa b8 13 f0       	push   $0xf013b8fa
f0126461:	e8 9f 9d fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126466:	e8 2c 6d fe ff       	call   f010d197 <sys_calculate_free_frames>
f012646b:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126471:	e8 52 d9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126476:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[1]);
f012647c:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f0126482:	83 ec 0c             	sub    $0xc,%esp
f0126485:	50                   	push   %eax
f0126486:	e8 cb 19 fe ff       	call   f0107e56 <kfree>
f012648b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012648e:	e8 35 d9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126493:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0126499:	74 17                	je     f01264b2 <test_kheap_virt_addr+0xfb2>
f012649b:	83 ec 04             	sub    $0x4,%esp
f012649e:	68 14 b9 13 f0       	push   $0xf013b914
f01264a3:	68 57 09 00 00       	push   $0x957
f01264a8:	68 fa b8 13 f0       	push   $0xf013b8fa
f01264ad:	e8 53 9d fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01264b2:	e8 e0 6c fe ff       	call   f010d197 <sys_calculate_free_frames>
f01264b7:	89 c2                	mov    %eax,%edx
f01264b9:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01264bf:	29 c2                	sub    %eax,%edx
f01264c1:	89 d0                	mov    %edx,%eax
f01264c3:	3d 00 02 00 00       	cmp    $0x200,%eax
f01264c8:	74 17                	je     f01264e1 <test_kheap_virt_addr+0xfe1>
f01264ca:	83 ec 04             	sub    $0x4,%esp
f01264cd:	68 84 c0 13 f0       	push   $0xf013c084
f01264d2:	68 58 09 00 00       	push   $0x958
f01264d7:	68 fa b8 13 f0       	push   $0xf013b8fa
f01264dc:	e8 24 9d fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01264e1:	e8 b1 6c fe ff       	call   f010d197 <sys_calculate_free_frames>
f01264e6:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01264ec:	e8 d7 d8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01264f1:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[6]);
f01264f7:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f01264fd:	83 ec 0c             	sub    $0xc,%esp
f0126500:	50                   	push   %eax
f0126501:	e8 50 19 fe ff       	call   f0107e56 <kfree>
f0126506:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126509:	e8 ba d8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012650e:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0126514:	74 17                	je     f012652d <test_kheap_virt_addr+0x102d>
f0126516:	83 ec 04             	sub    $0x4,%esp
f0126519:	68 14 b9 13 f0       	push   $0xf013b914
f012651e:	68 5e 09 00 00       	push   $0x95e
f0126523:	68 fa b8 13 f0       	push   $0xf013b8fa
f0126528:	e8 d8 9c fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012652d:	e8 65 6c fe ff       	call   f010d197 <sys_calculate_free_frames>
f0126532:	89 c2                	mov    %eax,%edx
f0126534:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012653a:	29 c2                	sub    %eax,%edx
f012653c:	89 d0                	mov    %edx,%eax
f012653e:	3d 00 06 00 00       	cmp    $0x600,%eax
f0126543:	74 17                	je     f012655c <test_kheap_virt_addr+0x105c>
f0126545:	83 ec 04             	sub    $0x4,%esp
f0126548:	68 84 c0 13 f0       	push   $0xf013c084
f012654d:	68 5f 09 00 00       	push   $0x95f
f0126552:	68 fa b8 13 f0       	push   $0xf013b8fa
f0126557:	e8 a9 9c fd ff       	call   f0100205 <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f012655c:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0126563:	10 00 00 
f0126566:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012656c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126571:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0126577:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012657d:	ba 00 00 00 00       	mov    $0x0,%edx
f0126582:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0126588:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012658e:	29 d0                	sub    %edx,%eax
f0126590:	89 c1                	mov    %eax,%ecx
f0126592:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f0126599:	10 00 00 
f012659c:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01265a1:	0f b6 d0             	movzbl %al,%edx
f01265a4:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01265aa:	01 d0                	add    %edx,%eax
f01265ac:	48                   	dec    %eax
f01265ad:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f01265b3:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01265b9:	ba 00 00 00 00       	mov    $0x0,%edx
f01265be:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f01265c4:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01265ca:	29 d0                	sub    %edx,%eax
f01265cc:	01 c1                	add    %eax,%ecx
f01265ce:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f01265d5:	10 00 00 
f01265d8:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01265dd:	0f b6 c0             	movzbl %al,%eax
f01265e0:	c1 e0 04             	shl    $0x4,%eax
f01265e3:	89 c2                	mov    %eax,%edx
f01265e5:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01265eb:	01 d0                	add    %edx,%eax
f01265ed:	48                   	dec    %eax
f01265ee:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f01265f4:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01265fa:	ba 00 00 00 00       	mov    $0x0,%edx
f01265ff:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f0126605:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012660b:	29 d0                	sub    %edx,%eax
f012660d:	01 c8                	add    %ecx,%eax
f012660f:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0126614:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		int i = 0;
f012661a:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
f0126621:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0126628:	10 00 00 
f012662b:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0126631:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126636:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f012663c:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0126642:	ba 00 00 00 00       	mov    $0x0,%edx
f0126647:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f012664d:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0126653:	29 d0                	sub    %edx,%eax
f0126655:	89 c1                	mov    %eax,%ecx
f0126657:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f012665e:	10 00 00 
f0126661:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0126666:	0f b6 d0             	movzbl %al,%edx
f0126669:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012666f:	01 d0                	add    %edx,%eax
f0126671:	48                   	dec    %eax
f0126672:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f0126678:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012667e:	ba 00 00 00 00       	mov    $0x0,%edx
f0126683:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f0126689:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012668f:	29 d0                	sub    %edx,%eax
f0126691:	01 c1                	add    %eax,%ecx
f0126693:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f012669a:	10 00 00 
f012669d:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01266a2:	0f b6 c0             	movzbl %al,%eax
f01266a5:	c1 e0 04             	shl    $0x4,%eax
f01266a8:	89 c2                	mov    %eax,%edx
f01266aa:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01266b0:	01 d0                	add    %edx,%eax
f01266b2:	48                   	dec    %eax
f01266b3:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f01266b9:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01266bf:	ba 00 00 00 00       	mov    $0x0,%edx
f01266c4:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f01266ca:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01266d0:	29 d0                	sub    %edx,%eax
f01266d2:	01 c1                	add    %eax,%ecx
f01266d4:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f01266db:	10 00 00 
f01266de:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01266e4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01266e9:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f01266ef:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01266f5:	ba 00 00 00 00       	mov    $0x0,%edx
f01266fa:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f0126700:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0126706:	29 d0                	sub    %edx,%eax
f0126708:	29 c1                	sub    %eax,%ecx
f012670a:	89 c8                	mov    %ecx,%eax
f012670c:	05 00 40 00 00       	add    $0x4000,%eax
f0126711:	c1 e8 0c             	shr    $0xc,%eax
f0126714:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f012671a:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126720:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0126723:	eb 41                	jmp    f0126766 <test_kheap_virt_addr+0x1266>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0126725:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012672b:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012672e:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0126731:	83 ec 0c             	sub    $0xc,%esp
f0126734:	50                   	push   %eax
f0126735:	e8 43 18 fe ff       	call   f0107f7d <kheap_virtual_address>
f012673a:	83 c4 10             	add    $0x10,%esp
f012673d:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if (retrievedVA != 0)
f0126743:	83 bd 38 fe ff ff 00 	cmpl   $0x0,-0x1c8(%ebp)
f012674a:	74 17                	je     f0126763 <test_kheap_virt_addr+0x1263>
			{
				panic("Wrong kheap_virtual_address");
f012674c:	83 ec 04             	sub    $0x4,%esp
f012674f:	68 d3 c3 13 f0       	push   $0xf013c3d3
f0126754:	68 70 09 00 00       	push   $0x970
f0126759:	68 fa b8 13 f0       	push   $0xf013b8fa
f012675e:	e8 a2 9a fd ff       	call   f0100205 <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0126763:	ff 45 d8             	incl   -0x28(%ebp)
f0126766:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012676c:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f0126772:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0126775:	39 c2                	cmp    %eax,%edx
f0126777:	77 ac                	ja     f0126725 <test_kheap_virt_addr+0x1225>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0126779:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012677f:	05 00 04 00 00       	add    $0x400,%eax
f0126784:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0126787:	e9 83 00 00 00       	jmp    f012680f <test_kheap_virt_addr+0x130f>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f012678c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126792:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0126795:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0126798:	83 ec 0c             	sub    $0xc,%esp
f012679b:	50                   	push   %eax
f012679c:	e8 dc 17 fe ff       	call   f0107f7d <kheap_virtual_address>
f01267a1:	83 c4 10             	add    $0x10,%esp
f01267a4:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f01267aa:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f01267b1:	10 00 00 
f01267b4:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01267ba:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01267bf:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f01267c5:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01267cb:	ba 00 00 00 00       	mov    $0x0,%edx
f01267d0:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f01267d6:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01267dc:	29 d0                	sub    %edx,%eax
f01267de:	89 c2                	mov    %eax,%edx
f01267e0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01267e3:	c1 e0 0c             	shl    $0xc,%eax
f01267e6:	01 d0                	add    %edx,%eax
f01267e8:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01267ed:	3b 85 34 fe ff ff    	cmp    -0x1cc(%ebp),%eax
f01267f3:	74 17                	je     f012680c <test_kheap_virt_addr+0x130c>
			{
				panic("Wrong kheap_virtual_address");
f01267f5:	83 ec 04             	sub    $0x4,%esp
f01267f8:	68 d3 c3 13 f0       	push   $0xf013c3d3
f01267fd:	68 7a 09 00 00       	push   $0x97a
f0126802:	68 fa b8 13 f0       	push   $0xf013b8fa
f0126807:	e8 f9 99 fd ff       	call   f0100205 <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f012680c:	ff 45 d8             	incl   -0x28(%ebp)
f012680f:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126815:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f012681b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012681e:	39 c2                	cmp    %eax,%edx
f0126820:	0f 87 66 ff ff ff    	ja     f012678c <test_kheap_virt_addr+0x128c>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0126826:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012682c:	05 04 07 00 00       	add    $0x704,%eax
f0126831:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0126834:	eb 41                	jmp    f0126877 <test_kheap_virt_addr+0x1377>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0126836:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012683c:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012683f:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0126842:	83 ec 0c             	sub    $0xc,%esp
f0126845:	50                   	push   %eax
f0126846:	e8 32 17 fe ff       	call   f0107f7d <kheap_virtual_address>
f012684b:	83 c4 10             	add    $0x10,%esp
f012684e:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
			if (retrievedVA != 0)
f0126854:	83 bd 28 fe ff ff 00 	cmpl   $0x0,-0x1d8(%ebp)
f012685b:	74 17                	je     f0126874 <test_kheap_virt_addr+0x1374>
			{
				panic("Wrong kheap_virtual_address");
f012685d:	83 ec 04             	sub    $0x4,%esp
f0126860:	68 d3 c3 13 f0       	push   $0xf013c3d3
f0126865:	68 83 09 00 00       	push   $0x983
f012686a:	68 fa b8 13 f0       	push   $0xf013b8fa
f012686f:	e8 91 99 fd ff       	call   f0100205 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0126874:	ff 45 d8             	incl   -0x28(%ebp)
f0126877:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012687d:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f0126883:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0126886:	39 c2                	cmp    %eax,%edx
f0126888:	77 ac                	ja     f0126836 <test_kheap_virt_addr+0x1336>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f012688a:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126890:	05 04 0d 00 00       	add    $0xd04,%eax
f0126895:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0126898:	e9 83 00 00 00       	jmp    f0126920 <test_kheap_virt_addr+0x1420>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f012689d:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01268a3:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01268a6:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01268a9:	83 ec 0c             	sub    $0xc,%esp
f01268ac:	50                   	push   %eax
f01268ad:	e8 cb 16 fe ff       	call   f0107f7d <kheap_virtual_address>
f01268b2:	83 c4 10             	add    $0x10,%esp
f01268b5:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f01268bb:	c7 85 20 fe ff ff 00 	movl   $0x1000,-0x1e0(%ebp)
f01268c2:	10 00 00 
f01268c5:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01268cb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01268d0:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
f01268d6:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01268dc:	ba 00 00 00 00       	mov    $0x0,%edx
f01268e1:	f7 b5 20 fe ff ff    	divl   -0x1e0(%ebp)
f01268e7:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01268ed:	29 d0                	sub    %edx,%eax
f01268ef:	89 c2                	mov    %eax,%edx
f01268f1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01268f4:	c1 e0 0c             	shl    $0xc,%eax
f01268f7:	01 d0                	add    %edx,%eax
f01268f9:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01268fe:	3b 85 24 fe ff ff    	cmp    -0x1dc(%ebp),%eax
f0126904:	74 17                	je     f012691d <test_kheap_virt_addr+0x141d>
			{
				panic("Wrong kheap_virtual_address");
f0126906:	83 ec 04             	sub    $0x4,%esp
f0126909:	68 d3 c3 13 f0       	push   $0xf013c3d3
f012690e:	68 8c 09 00 00       	push   $0x98c
f0126913:	68 fa b8 13 f0       	push   $0xf013b8fa
f0126918:	e8 e8 98 fd ff       	call   f0100205 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f012691d:	ff 45 d8             	incl   -0x28(%ebp)
f0126920:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126926:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f012692c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012692f:	39 c2                	cmp    %eax,%edx
f0126931:	0f 87 66 ff ff ff    	ja     f012689d <test_kheap_virt_addr+0x139d>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f0126937:	83 ec 0c             	sub    $0xc,%esp
f012693a:	68 85 ba 13 f0       	push   $0xf013ba85
f012693f:	e8 ca a3 fd ff       	call   f0100d0e <cprintf>
f0126944:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0126947:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f012694e:	eb 54                	jmp    f01269a4 <test_kheap_virt_addr+0x14a4>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f0126950:	83 ec 0c             	sub    $0xc,%esp
f0126953:	ff 75 d4             	pushl  -0x2c(%ebp)
f0126956:	e8 22 16 fe ff       	call   f0107f7d <kheap_virtual_address>
f012695b:	83 c4 10             	add    $0x10,%esp
f012695e:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
			if (retrievedVA != 0)
f0126964:	83 bd 18 fe ff ff 00 	cmpl   $0x0,-0x1e8(%ebp)
f012696b:	74 30                	je     f012699d <test_kheap_virt_addr+0x149d>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f012696d:	83 ec 04             	sub    $0x4,%esp
f0126970:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f0126976:	ff 75 d4             	pushl  -0x2c(%ebp)
f0126979:	68 21 c4 13 f0       	push   $0xf013c421
f012697e:	e8 8b a3 fd ff       	call   f0100d0e <cprintf>
f0126983:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f0126986:	83 ec 04             	sub    $0x4,%esp
f0126989:	68 d3 c3 13 f0       	push   $0xf013c3d3
f012698e:	68 9c 09 00 00       	push   $0x99c
f0126993:	68 fa b8 13 f0       	push   $0xf013b8fa
f0126998:	e8 68 98 fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f012699d:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f01269a4:	b8 bc ae 89 00       	mov    $0x89aebc,%eax
f01269a9:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f01269ac:	72 a2                	jb     f0126950 <test_kheap_virt_addr+0x1450>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f01269ae:	83 ec 0c             	sub    $0xc,%esp
f01269b1:	68 de ba 13 f0       	push   $0xf013bade
f01269b6:	e8 53 a3 fd ff       	call   f0100d0e <cprintf>
f01269bb:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f01269be:	83 ec 0c             	sub    $0xc,%esp
f01269c1:	68 40 c4 13 f0       	push   $0xf013c440
f01269c6:	e8 43 a3 fd ff       	call   f0100d0e <cprintf>
f01269cb:	83 c4 10             	add    $0x10,%esp

	return 1;
f01269ce:	b8 01 00 00 00       	mov    $0x1,%eax
f01269d3:	89 f4                	mov    %esi,%esp

}
f01269d5:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01269d8:	5b                   	pop    %ebx
f01269d9:	5e                   	pop    %esi
f01269da:	5f                   	pop    %edi
f01269db:	5d                   	pop    %ebp
f01269dc:	c3                   	ret    

f01269dd <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f01269dd:	55                   	push   %ebp
f01269de:	89 e5                	mov    %esp,%ebp
f01269e0:	57                   	push   %edi
f01269e1:	56                   	push   %esi
f01269e2:	53                   	push   %ebx
f01269e3:	81 ec ac 00 00 00    	sub    $0xac,%esp
	if (firstCall)
f01269e9:	a0 23 3d 19 f0       	mov    0xf0193d23,%al
f01269ee:	84 c0                	test   %al,%al
f01269f0:	74 56                	je     f0126a48 <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f01269f2:	c6 05 23 3d 19 f0 00 	movb   $0x0,0xf0193d23
		initFreeFrames = sys_calculate_free_frames() ;
f01269f9:	e8 99 67 fe ff       	call   f010d197 <sys_calculate_free_frames>
f01269fe:	a3 b8 ae 89 f0       	mov    %eax,0xf089aeb8
		initFreeDiskFrames = pf_calculate_free_frames() ;
f0126a03:	e8 c0 d3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126a08:	a3 b4 ae 89 f0       	mov    %eax,0xf089aeb4
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f0126a0d:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0126a13:	bb 9d c5 13 f0       	mov    $0xf013c59d,%ebx
f0126a18:	ba 11 00 00 00       	mov    $0x11,%edx
f0126a1d:	89 c7                	mov    %eax,%edi
f0126a1f:	89 de                	mov    %ebx,%esi
f0126a21:	89 d1                	mov    %edx,%ecx
f0126a23:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0126a25:	8d 95 65 ff ff ff    	lea    -0x9b(%ebp),%edx
f0126a2b:	b9 53 00 00 00       	mov    $0x53,%ecx
f0126a30:	b0 00                	mov    $0x0,%al
f0126a32:	89 d7                	mov    %edx,%edi
f0126a34:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f0126a36:	83 ec 0c             	sub    $0xc,%esp
f0126a39:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0126a3f:	50                   	push   %eax
f0126a40:	e8 2b a3 fd ff       	call   f0100d70 <execute_command>
f0126a45:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f0126a48:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f0126a4f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0126a56:	a1 f4 ac 89 f0       	mov    0xf089acf4,%eax
f0126a5b:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0126a5e:	eb 2d                	jmp    f0126a8d <test_three_creation_functions+0xb0>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f0126a60:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0126a63:	05 5c 05 00 00       	add    $0x55c,%eax
f0126a68:	83 ec 08             	sub    $0x8,%esp
f0126a6b:	68 87 c4 13 f0       	push   $0xf013c487
f0126a70:	50                   	push   %eax
f0126a71:	e8 79 af 00 00       	call   f01319ef <strcmp>
f0126a76:	83 c4 10             	add    $0x10,%esp
f0126a79:	85 c0                	test   %eax,%eax
f0126a7b:	75 08                	jne    f0126a85 <test_three_creation_functions+0xa8>
			{
				e = ptr_env ;
f0126a7d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0126a80:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f0126a83:	eb 2f                	jmp    f0126ab4 <test_three_creation_functions+0xd7>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0126a85:	a1 fc ac 89 f0       	mov    0xf089acfc,%eax
f0126a8a:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0126a8d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0126a91:	74 08                	je     f0126a9b <test_three_creation_functions+0xbe>
f0126a93:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0126a96:	8b 40 44             	mov    0x44(%eax),%eax
f0126a99:	eb 05                	jmp    f0126aa0 <test_three_creation_functions+0xc3>
f0126a9b:	b8 00 00 00 00       	mov    $0x0,%eax
f0126aa0:	a3 fc ac 89 f0       	mov    %eax,0xf089acfc
f0126aa5:	a1 fc ac 89 f0       	mov    0xf089acfc,%eax
f0126aaa:	85 c0                	test   %eax,%eax
f0126aac:	75 b2                	jne    f0126a60 <test_three_creation_functions+0x83>
f0126aae:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0126ab2:	75 ac                	jne    f0126a60 <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f0126ab4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0126ab7:	8b 80 34 05 00 00    	mov    0x534(%eax),%eax
f0126abd:	85 c0                	test   %eax,%eax
f0126abf:	74 17                	je     f0126ad8 <test_three_creation_functions+0xfb>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f0126ac1:	83 ec 04             	sub    $0x4,%esp
f0126ac4:	68 90 c4 13 f0       	push   $0xf013c490
f0126ac9:	68 c6 09 00 00       	push   $0x9c6
f0126ace:	68 fa b8 13 f0       	push   $0xf013b8fa
f0126ad3:	e8 2d 97 fd ff       	call   f0100205 <_panic>

		int pagesInWS = env_page_ws_get_size(e);
f0126ad8:	83 ec 0c             	sub    $0xc,%esp
f0126adb:	ff 75 e4             	pushl  -0x1c(%ebp)
f0126ade:	e8 39 18 fe ff       	call   f010831c <env_page_ws_get_size>
f0126ae3:	83 c4 10             	add    $0x10,%esp
f0126ae6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int curFreeFrames = sys_calculate_free_frames() ;
f0126ae9:	e8 a9 66 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0126aee:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f0126af1:	e8 d2 d2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126af6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126af9:	a1 b4 ae 89 f0       	mov    0xf089aeb4,%eax
f0126afe:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f0126b01:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0126b04:	74 17                	je     f0126b1d <test_three_creation_functions+0x140>
f0126b06:	83 ec 04             	sub    $0x4,%esp
f0126b09:	68 14 b9 13 f0       	push   $0xf013b914
f0126b0e:	68 cc 09 00 00       	push   $0x9cc
f0126b13:	68 fa b8 13 f0       	push   $0xf013b8fa
f0126b18:	e8 e8 96 fd ff       	call   f0100205 <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126b1d:	a1 b8 ae 89 f0       	mov    0xf089aeb8,%eax
f0126b22:	2b 45 d8             	sub    -0x28(%ebp),%eax
f0126b25:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0126b28:	83 c2 15             	add    $0x15,%edx
f0126b2b:	39 d0                	cmp    %edx,%eax
f0126b2d:	74 17                	je     f0126b46 <test_three_creation_functions+0x169>
f0126b2f:	83 ec 04             	sub    $0x4,%esp
f0126b32:	68 7c b9 13 f0       	push   $0xf013b97c
f0126b37:	68 ce 09 00 00       	push   $0x9ce
f0126b3c:	68 fa b8 13 f0       	push   $0xf013b8fa
f0126b41:	e8 bf 96 fd ff       	call   f0100205 <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f0126b46:	83 ec 0c             	sub    $0xc,%esp
f0126b49:	68 00 10 00 00       	push   $0x1000
f0126b4e:	e8 38 12 fe ff       	call   f0107d8b <kmalloc>
f0126b53:	83 c4 10             	add    $0x10,%esp
f0126b56:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f0126b59:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0126b60:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0126b63:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126b68:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0126b6b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126b6e:	ba 00 00 00 00       	mov    $0x0,%edx
f0126b73:	f7 75 cc             	divl   -0x34(%ebp)
f0126b76:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126b79:	29 d0                	sub    %edx,%eax
f0126b7b:	89 c1                	mov    %eax,%ecx
f0126b7d:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0126b84:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0126b89:	0f b6 d0             	movzbl %al,%edx
f0126b8c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0126b8f:	01 d0                	add    %edx,%eax
f0126b91:	48                   	dec    %eax
f0126b92:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0126b95:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126b98:	ba 00 00 00 00       	mov    $0x0,%edx
f0126b9d:	f7 75 c4             	divl   -0x3c(%ebp)
f0126ba0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126ba3:	29 d0                	sub    %edx,%eax
f0126ba5:	01 c1                	add    %eax,%ecx
f0126ba7:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0126bae:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0126bb3:	0f b6 c0             	movzbl %al,%eax
f0126bb6:	c1 e0 04             	shl    $0x4,%eax
f0126bb9:	89 c2                	mov    %eax,%edx
f0126bbb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0126bbe:	01 d0                	add    %edx,%eax
f0126bc0:	48                   	dec    %eax
f0126bc1:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0126bc4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126bc7:	ba 00 00 00 00       	mov    $0x0,%edx
f0126bcc:	f7 75 bc             	divl   -0x44(%ebp)
f0126bcf:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126bd2:	29 d0                	sub    %edx,%eax
f0126bd4:	01 c8                	add    %ecx,%eax
f0126bd6:	8d 90 00 90 01 f6    	lea    -0x9fe7000(%eax),%edx
f0126bdc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126bdf:	39 c2                	cmp    %eax,%edx
f0126be1:	74 17                	je     f0126bfa <test_three_creation_functions+0x21d>
f0126be3:	83 ec 04             	sub    $0x4,%esp
f0126be6:	68 e0 c4 13 f0       	push   $0xf013c4e0
f0126beb:	68 d2 09 00 00       	push   $0x9d2
f0126bf0:	68 fa b8 13 f0       	push   $0xf013b8fa
f0126bf5:	e8 0b 96 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f0126bfa:	83 ec 0c             	sub    $0xc,%esp
f0126bfd:	68 50 c5 13 f0       	push   $0xf013c550
f0126c02:	e8 07 a1 fd ff       	call   f0100d0e <cprintf>
f0126c07:	83 c4 10             	add    $0x10,%esp

	return 1;
f0126c0a:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0126c0f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0126c12:	5b                   	pop    %ebx
f0126c13:	5e                   	pop    %esi
f0126c14:	5f                   	pop    %edi
f0126c15:	5d                   	pop    %ebp
f0126c16:	c3                   	ret    

f0126c17 <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f0126c17:	55                   	push   %ebp
f0126c18:	89 e5                	mov    %esp,%ebp
f0126c1a:	57                   	push   %edi
f0126c1b:	53                   	push   %ebx
f0126c1c:	81 ec 40 02 00 00    	sub    $0x240,%esp
	char minByte = 1<<7;
f0126c22:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0126c26:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0126c2a:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0126c30:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0126c36:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0126c3d:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0126c44:	e8 4e 65 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0126c49:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0126c4c:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0126c52:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126c57:	b8 00 00 00 00       	mov    $0x0,%eax
f0126c5c:	89 d7                	mov    %edx,%edi
f0126c5e:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0126c60:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f0126c66:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126c6b:	b8 00 00 00 00       	mov    $0x0,%eax
f0126c70:	89 d7                	mov    %edx,%edi
f0126c72:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0126c74:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0126c7a:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126c7f:	b8 00 00 00 00       	mov    $0x0,%eax
f0126c84:	89 d7                	mov    %edx,%edi
f0126c86:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126c88:	e8 0a 65 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0126c8d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126c90:	e8 33 d1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126c95:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0126c98:	83 ec 0c             	sub    $0xc,%esp
f0126c9b:	68 00 fc 1f 00       	push   $0x1ffc00
f0126ca0:	e8 e6 10 fe ff       	call   f0107d8b <kmalloc>
f0126ca5:	83 c4 10             	add    $0x10,%esp
f0126ca8:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126cae:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0126cb4:	89 c1                	mov    %eax,%ecx
f0126cb6:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0126cbd:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126cc0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126cc5:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0126cc8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0126ccb:	ba 00 00 00 00       	mov    $0x0,%edx
f0126cd0:	f7 75 c8             	divl   -0x38(%ebp)
f0126cd3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0126cd6:	29 d0                	sub    %edx,%eax
f0126cd8:	89 c3                	mov    %eax,%ebx
f0126cda:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0126ce1:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0126ce6:	0f b6 d0             	movzbl %al,%edx
f0126ce9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126cec:	01 d0                	add    %edx,%eax
f0126cee:	48                   	dec    %eax
f0126cef:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0126cf2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0126cf5:	ba 00 00 00 00       	mov    $0x0,%edx
f0126cfa:	f7 75 c0             	divl   -0x40(%ebp)
f0126cfd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0126d00:	29 d0                	sub    %edx,%eax
f0126d02:	01 c3                	add    %eax,%ebx
f0126d04:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0126d0b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0126d10:	0f b6 c0             	movzbl %al,%eax
f0126d13:	c1 e0 04             	shl    $0x4,%eax
f0126d16:	89 c2                	mov    %eax,%edx
f0126d18:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126d1b:	01 d0                	add    %edx,%eax
f0126d1d:	48                   	dec    %eax
f0126d1e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0126d21:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0126d24:	ba 00 00 00 00       	mov    $0x0,%edx
f0126d29:	f7 75 b8             	divl   -0x48(%ebp)
f0126d2c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0126d2f:	29 d0                	sub    %edx,%eax
f0126d31:	01 d8                	add    %ebx,%eax
f0126d33:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0126d38:	39 c1                	cmp    %eax,%ecx
f0126d3a:	74 17                	je     f0126d53 <test_kfreeall+0x13c>
f0126d3c:	83 ec 04             	sub    $0x4,%esp
f0126d3f:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0126d44:	68 f9 09 00 00       	push   $0x9f9
f0126d49:	68 fa b8 13 f0       	push   $0xf013b8fa
f0126d4e:	e8 b2 94 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126d53:	e8 70 d0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126d58:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126d5b:	74 17                	je     f0126d74 <test_kfreeall+0x15d>
f0126d5d:	83 ec 04             	sub    $0x4,%esp
f0126d60:	68 14 b9 13 f0       	push   $0xf013b914
f0126d65:	68 fa 09 00 00       	push   $0x9fa
f0126d6a:	68 fa b8 13 f0       	push   $0xf013b8fa
f0126d6f:	e8 91 94 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126d74:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126d77:	e8 1b 64 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0126d7c:	29 c3                	sub    %eax,%ebx
f0126d7e:	89 d8                	mov    %ebx,%eax
f0126d80:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126d85:	74 17                	je     f0126d9e <test_kfreeall+0x187>
f0126d87:	83 ec 04             	sub    $0x4,%esp
f0126d8a:	68 7c b9 13 f0       	push   $0xf013b97c
f0126d8f:	68 fb 09 00 00       	push   $0x9fb
f0126d94:	68 fa b8 13 f0       	push   $0xf013b8fa
f0126d99:	e8 67 94 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0126d9e:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f0126da5:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126da8:	e8 ea 63 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0126dad:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126db0:	e8 13 d0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126db5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0126db8:	83 ec 0c             	sub    $0xc,%esp
f0126dbb:	68 00 fc 1f 00       	push   $0x1ffc00
f0126dc0:	e8 c6 0f fe ff       	call   f0107d8b <kmalloc>
f0126dc5:	83 c4 10             	add    $0x10,%esp
f0126dc8:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126dce:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0126dd4:	89 c1                	mov    %eax,%ecx
f0126dd6:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0126ddd:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0126de0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126de5:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0126de8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0126deb:	ba 00 00 00 00       	mov    $0x0,%edx
f0126df0:	f7 75 b0             	divl   -0x50(%ebp)
f0126df3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0126df6:	29 d0                	sub    %edx,%eax
f0126df8:	89 c3                	mov    %eax,%ebx
f0126dfa:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0126e01:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0126e06:	0f b6 d0             	movzbl %al,%edx
f0126e09:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0126e0c:	01 d0                	add    %edx,%eax
f0126e0e:	48                   	dec    %eax
f0126e0f:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0126e12:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126e15:	ba 00 00 00 00       	mov    $0x0,%edx
f0126e1a:	f7 75 a8             	divl   -0x58(%ebp)
f0126e1d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126e20:	29 d0                	sub    %edx,%eax
f0126e22:	01 c3                	add    %eax,%ebx
f0126e24:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0126e2b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0126e30:	0f b6 c0             	movzbl %al,%eax
f0126e33:	c1 e0 04             	shl    $0x4,%eax
f0126e36:	89 c2                	mov    %eax,%edx
f0126e38:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0126e3b:	01 d0                	add    %edx,%eax
f0126e3d:	48                   	dec    %eax
f0126e3e:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0126e41:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126e44:	ba 00 00 00 00       	mov    $0x0,%edx
f0126e49:	f7 75 a0             	divl   -0x60(%ebp)
f0126e4c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126e4f:	29 d0                	sub    %edx,%eax
f0126e51:	01 d8                	add    %ebx,%eax
f0126e53:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0126e58:	39 c1                	cmp    %eax,%ecx
f0126e5a:	74 17                	je     f0126e73 <test_kfreeall+0x25c>
f0126e5c:	83 ec 04             	sub    $0x4,%esp
f0126e5f:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0126e64:	68 02 0a 00 00       	push   $0xa02
f0126e69:	68 fa b8 13 f0       	push   $0xf013b8fa
f0126e6e:	e8 92 93 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126e73:	e8 50 cf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126e78:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126e7b:	74 17                	je     f0126e94 <test_kfreeall+0x27d>
f0126e7d:	83 ec 04             	sub    $0x4,%esp
f0126e80:	68 14 b9 13 f0       	push   $0xf013b914
f0126e85:	68 03 0a 00 00       	push   $0xa03
f0126e8a:	68 fa b8 13 f0       	push   $0xf013b8fa
f0126e8f:	e8 71 93 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126e94:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126e97:	e8 fb 62 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0126e9c:	29 c3                	sub    %eax,%ebx
f0126e9e:	89 d8                	mov    %ebx,%eax
f0126ea0:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126ea5:	74 17                	je     f0126ebe <test_kfreeall+0x2a7>
f0126ea7:	83 ec 04             	sub    $0x4,%esp
f0126eaa:	68 7c b9 13 f0       	push   $0xf013b97c
f0126eaf:	68 04 0a 00 00       	push   $0xa04
f0126eb4:	68 fa b8 13 f0       	push   $0xf013b8fa
f0126eb9:	e8 47 93 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0126ebe:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f0126ec5:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126ec8:	e8 ca 62 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0126ecd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126ed0:	e8 f3 ce fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126ed5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0126ed8:	83 ec 0c             	sub    $0xc,%esp
f0126edb:	68 00 08 00 00       	push   $0x800
f0126ee0:	e8 a6 0e fe ff       	call   f0107d8b <kmalloc>
f0126ee5:	83 c4 10             	add    $0x10,%esp
f0126ee8:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126eee:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0126ef4:	89 c1                	mov    %eax,%ecx
f0126ef6:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0126efd:	8b 45 98             	mov    -0x68(%ebp),%eax
f0126f00:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126f05:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0126f08:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0126f0b:	ba 00 00 00 00       	mov    $0x0,%edx
f0126f10:	f7 75 98             	divl   -0x68(%ebp)
f0126f13:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0126f16:	29 d0                	sub    %edx,%eax
f0126f18:	89 c3                	mov    %eax,%ebx
f0126f1a:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0126f21:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0126f26:	0f b6 d0             	movzbl %al,%edx
f0126f29:	8b 45 90             	mov    -0x70(%ebp),%eax
f0126f2c:	01 d0                	add    %edx,%eax
f0126f2e:	48                   	dec    %eax
f0126f2f:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0126f32:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0126f35:	ba 00 00 00 00       	mov    $0x0,%edx
f0126f3a:	f7 75 90             	divl   -0x70(%ebp)
f0126f3d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0126f40:	29 d0                	sub    %edx,%eax
f0126f42:	01 c3                	add    %eax,%ebx
f0126f44:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0126f4b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0126f50:	0f b6 c0             	movzbl %al,%eax
f0126f53:	c1 e0 04             	shl    $0x4,%eax
f0126f56:	89 c2                	mov    %eax,%edx
f0126f58:	8b 45 88             	mov    -0x78(%ebp),%eax
f0126f5b:	01 d0                	add    %edx,%eax
f0126f5d:	48                   	dec    %eax
f0126f5e:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0126f61:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0126f64:	ba 00 00 00 00       	mov    $0x0,%edx
f0126f69:	f7 75 88             	divl   -0x78(%ebp)
f0126f6c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0126f6f:	29 d0                	sub    %edx,%eax
f0126f71:	01 d8                	add    %ebx,%eax
f0126f73:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0126f78:	39 c1                	cmp    %eax,%ecx
f0126f7a:	74 17                	je     f0126f93 <test_kfreeall+0x37c>
f0126f7c:	83 ec 04             	sub    $0x4,%esp
f0126f7f:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0126f84:	68 0b 0a 00 00       	push   $0xa0b
f0126f89:	68 fa b8 13 f0       	push   $0xf013b8fa
f0126f8e:	e8 72 92 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126f93:	e8 30 ce fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126f98:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126f9b:	74 17                	je     f0126fb4 <test_kfreeall+0x39d>
f0126f9d:	83 ec 04             	sub    $0x4,%esp
f0126fa0:	68 14 b9 13 f0       	push   $0xf013b914
f0126fa5:	68 0c 0a 00 00       	push   $0xa0c
f0126faa:	68 fa b8 13 f0       	push   $0xf013b8fa
f0126faf:	e8 51 92 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126fb4:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126fb7:	e8 db 61 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0126fbc:	29 c3                	sub    %eax,%ebx
f0126fbe:	89 d8                	mov    %ebx,%eax
f0126fc0:	83 f8 01             	cmp    $0x1,%eax
f0126fc3:	74 17                	je     f0126fdc <test_kfreeall+0x3c5>
f0126fc5:	83 ec 04             	sub    $0x4,%esp
f0126fc8:	68 7c b9 13 f0       	push   $0xf013b97c
f0126fcd:	68 0d 0a 00 00       	push   $0xa0d
f0126fd2:	68 fa b8 13 f0       	push   $0xf013b8fa
f0126fd7:	e8 29 92 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0126fdc:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f0126fe3:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0126fe6:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0126fec:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0126fef:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126ff6:	eb 0e                	jmp    f0127006 <test_kfreeall+0x3ef>
		{
			ptr[i] = 2 ;
f0126ff8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126ffb:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126ffe:	01 d0                	add    %edx,%eax
f0127000:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0127003:	ff 45 f4             	incl   -0xc(%ebp)
f0127006:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012700c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012700f:	7f e7                	jg     f0126ff8 <test_kfreeall+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127011:	e8 81 61 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0127016:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127019:	e8 aa cd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012701e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0127021:	83 ec 0c             	sub    $0xc,%esp
f0127024:	68 00 08 00 00       	push   $0x800
f0127029:	e8 5d 0d fe ff       	call   f0107d8b <kmalloc>
f012702e:	83 c4 10             	add    $0x10,%esp
f0127031:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127037:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f012703d:	89 c1                	mov    %eax,%ecx
f012703f:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0127046:	10 00 00 
f0127049:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012704f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127054:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012705a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0127060:	ba 00 00 00 00       	mov    $0x0,%edx
f0127065:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012706b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0127071:	29 d0                	sub    %edx,%eax
f0127073:	89 c3                	mov    %eax,%ebx
f0127075:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012707c:	10 00 00 
f012707f:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0127084:	0f b6 d0             	movzbl %al,%edx
f0127087:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012708d:	01 d0                	add    %edx,%eax
f012708f:	48                   	dec    %eax
f0127090:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0127096:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012709c:	ba 00 00 00 00       	mov    $0x0,%edx
f01270a1:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01270a7:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01270ad:	29 d0                	sub    %edx,%eax
f01270af:	01 c3                	add    %eax,%ebx
f01270b1:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01270b8:	10 00 00 
f01270bb:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01270c0:	0f b6 c0             	movzbl %al,%eax
f01270c3:	c1 e0 04             	shl    $0x4,%eax
f01270c6:	89 c2                	mov    %eax,%edx
f01270c8:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01270ce:	01 d0                	add    %edx,%eax
f01270d0:	48                   	dec    %eax
f01270d1:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01270d7:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01270dd:	ba 00 00 00 00       	mov    $0x0,%edx
f01270e2:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f01270e8:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01270ee:	29 d0                	sub    %edx,%eax
f01270f0:	01 d8                	add    %ebx,%eax
f01270f2:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01270f7:	39 c1                	cmp    %eax,%ecx
f01270f9:	74 17                	je     f0127112 <test_kfreeall+0x4fb>
f01270fb:	83 ec 04             	sub    $0x4,%esp
f01270fe:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0127103:	68 19 0a 00 00       	push   $0xa19
f0127108:	68 fa b8 13 f0       	push   $0xf013b8fa
f012710d:	e8 f3 90 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127112:	e8 b1 cc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127117:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012711a:	74 17                	je     f0127133 <test_kfreeall+0x51c>
f012711c:	83 ec 04             	sub    $0x4,%esp
f012711f:	68 14 b9 13 f0       	push   $0xf013b914
f0127124:	68 1a 0a 00 00       	push   $0xa1a
f0127129:	68 fa b8 13 f0       	push   $0xf013b8fa
f012712e:	e8 d2 90 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127133:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127136:	e8 5c 60 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012713b:	29 c3                	sub    %eax,%ebx
f012713d:	89 d8                	mov    %ebx,%eax
f012713f:	83 f8 01             	cmp    $0x1,%eax
f0127142:	74 17                	je     f012715b <test_kfreeall+0x544>
f0127144:	83 ec 04             	sub    $0x4,%esp
f0127147:	68 7c b9 13 f0       	push   $0xf013b97c
f012714c:	68 1b 0a 00 00       	push   $0xa1b
f0127151:	68 fa b8 13 f0       	push   $0xf013b8fa
f0127156:	e8 aa 90 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012715b:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f0127162:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0127165:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f012716b:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012716e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127175:	eb 0e                	jmp    f0127185 <test_kfreeall+0x56e>
		{
			ptr[i] = 3 ;
f0127177:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012717a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012717d:	01 d0                	add    %edx,%eax
f012717f:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0127182:	ff 45 f4             	incl   -0xc(%ebp)
f0127185:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012718b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012718e:	7f e7                	jg     f0127177 <test_kfreeall+0x560>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0127190:	e8 02 60 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0127195:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127198:	e8 2b cc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012719d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01271a0:	83 ec 0c             	sub    $0xc,%esp
f01271a3:	68 00 1c 00 00       	push   $0x1c00
f01271a8:	e8 de 0b fe ff       	call   f0107d8b <kmalloc>
f01271ad:	83 c4 10             	add    $0x10,%esp
f01271b0:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01271b6:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01271bc:	89 c1                	mov    %eax,%ecx
f01271be:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01271c5:	10 00 00 
f01271c8:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01271ce:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01271d3:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01271d9:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01271df:	ba 00 00 00 00       	mov    $0x0,%edx
f01271e4:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01271ea:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01271f0:	29 d0                	sub    %edx,%eax
f01271f2:	89 c3                	mov    %eax,%ebx
f01271f4:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01271fb:	10 00 00 
f01271fe:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0127203:	0f b6 d0             	movzbl %al,%edx
f0127206:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012720c:	01 d0                	add    %edx,%eax
f012720e:	48                   	dec    %eax
f012720f:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0127215:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012721b:	ba 00 00 00 00       	mov    $0x0,%edx
f0127220:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0127226:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012722c:	29 d0                	sub    %edx,%eax
f012722e:	01 c3                	add    %eax,%ebx
f0127230:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0127237:	10 00 00 
f012723a:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012723f:	0f b6 c0             	movzbl %al,%eax
f0127242:	c1 e0 04             	shl    $0x4,%eax
f0127245:	89 c2                	mov    %eax,%edx
f0127247:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012724d:	01 d0                	add    %edx,%eax
f012724f:	48                   	dec    %eax
f0127250:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0127256:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012725c:	ba 00 00 00 00       	mov    $0x0,%edx
f0127261:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0127267:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012726d:	29 d0                	sub    %edx,%eax
f012726f:	01 d8                	add    %ebx,%eax
f0127271:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0127276:	39 c1                	cmp    %eax,%ecx
f0127278:	74 17                	je     f0127291 <test_kfreeall+0x67a>
f012727a:	83 ec 04             	sub    $0x4,%esp
f012727d:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0127282:	68 27 0a 00 00       	push   $0xa27
f0127287:	68 fa b8 13 f0       	push   $0xf013b8fa
f012728c:	e8 74 8f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127291:	e8 32 cb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127296:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127299:	74 17                	je     f01272b2 <test_kfreeall+0x69b>
f012729b:	83 ec 04             	sub    $0x4,%esp
f012729e:	68 14 b9 13 f0       	push   $0xf013b914
f01272a3:	68 28 0a 00 00       	push   $0xa28
f01272a8:	68 fa b8 13 f0       	push   $0xf013b8fa
f01272ad:	e8 53 8f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01272b2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01272b5:	e8 dd 5e fe ff       	call   f010d197 <sys_calculate_free_frames>
f01272ba:	29 c3                	sub    %eax,%ebx
f01272bc:	89 d8                	mov    %ebx,%eax
f01272be:	83 f8 02             	cmp    $0x2,%eax
f01272c1:	74 17                	je     f01272da <test_kfreeall+0x6c3>
f01272c3:	83 ec 04             	sub    $0x4,%esp
f01272c6:	68 7c b9 13 f0       	push   $0xf013b97c
f01272cb:	68 29 0a 00 00       	push   $0xa29
f01272d0:	68 fa b8 13 f0       	push   $0xf013b8fa
f01272d5:	e8 2b 8f fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01272da:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f01272e1:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01272e4:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01272ea:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01272ed:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01272f4:	eb 0e                	jmp    f0127304 <test_kfreeall+0x6ed>
		{
			ptr[i] = 4 ;
f01272f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01272f9:	8b 45 80             	mov    -0x80(%ebp),%eax
f01272fc:	01 d0                	add    %edx,%eax
f01272fe:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0127301:	ff 45 f4             	incl   -0xc(%ebp)
f0127304:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012730a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012730d:	7f e7                	jg     f01272f6 <test_kfreeall+0x6df>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012730f:	e8 83 5e fe ff       	call   f010d197 <sys_calculate_free_frames>
f0127314:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127317:	e8 ac ca fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012731c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012731f:	83 ec 0c             	sub    $0xc,%esp
f0127322:	68 00 fc 2f 00       	push   $0x2ffc00
f0127327:	e8 5f 0a fe ff       	call   f0107d8b <kmalloc>
f012732c:	83 c4 10             	add    $0x10,%esp
f012732f:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127335:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f012733b:	89 c1                	mov    %eax,%ecx
f012733d:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0127344:	10 00 00 
f0127347:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012734d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127352:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0127358:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012735e:	ba 00 00 00 00       	mov    $0x0,%edx
f0127363:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0127369:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012736f:	29 d0                	sub    %edx,%eax
f0127371:	89 c3                	mov    %eax,%ebx
f0127373:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012737a:	10 00 00 
f012737d:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0127382:	0f b6 d0             	movzbl %al,%edx
f0127385:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012738b:	01 d0                	add    %edx,%eax
f012738d:	48                   	dec    %eax
f012738e:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0127394:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012739a:	ba 00 00 00 00       	mov    $0x0,%edx
f012739f:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f01273a5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01273ab:	29 d0                	sub    %edx,%eax
f01273ad:	01 c3                	add    %eax,%ebx
f01273af:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f01273b6:	10 00 00 
f01273b9:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01273be:	0f b6 c0             	movzbl %al,%eax
f01273c1:	c1 e0 04             	shl    $0x4,%eax
f01273c4:	89 c2                	mov    %eax,%edx
f01273c6:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01273cc:	01 d0                	add    %edx,%eax
f01273ce:	48                   	dec    %eax
f01273cf:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01273d5:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01273db:	ba 00 00 00 00       	mov    $0x0,%edx
f01273e0:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01273e6:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01273ec:	29 d0                	sub    %edx,%eax
f01273ee:	01 d8                	add    %ebx,%eax
f01273f0:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01273f5:	39 c1                	cmp    %eax,%ecx
f01273f7:	74 17                	je     f0127410 <test_kfreeall+0x7f9>
f01273f9:	83 ec 04             	sub    $0x4,%esp
f01273fc:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0127401:	68 35 0a 00 00       	push   $0xa35
f0127406:	68 fa b8 13 f0       	push   $0xf013b8fa
f012740b:	e8 f5 8d fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127410:	e8 b3 c9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127415:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127418:	74 17                	je     f0127431 <test_kfreeall+0x81a>
f012741a:	83 ec 04             	sub    $0x4,%esp
f012741d:	68 14 b9 13 f0       	push   $0xf013b914
f0127422:	68 36 0a 00 00       	push   $0xa36
f0127427:	68 fa b8 13 f0       	push   $0xf013b8fa
f012742c:	e8 d4 8d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127431:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127434:	e8 5e 5d fe ff       	call   f010d197 <sys_calculate_free_frames>
f0127439:	29 c3                	sub    %eax,%ebx
f012743b:	89 d8                	mov    %ebx,%eax
f012743d:	3d 00 03 00 00       	cmp    $0x300,%eax
f0127442:	74 17                	je     f012745b <test_kfreeall+0x844>
f0127444:	83 ec 04             	sub    $0x4,%esp
f0127447:	68 7c b9 13 f0       	push   $0xf013b97c
f012744c:	68 37 0a 00 00       	push   $0xa37
f0127451:	68 fa b8 13 f0       	push   $0xf013b8fa
f0127456:	e8 aa 8d fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012745b:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f0127462:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0127465:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f012746b:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012746e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127475:	eb 0e                	jmp    f0127485 <test_kfreeall+0x86e>
		{
			ptr[i] = 5 ;
f0127477:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012747a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012747d:	01 d0                	add    %edx,%eax
f012747f:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0127482:	ff 45 f4             	incl   -0xc(%ebp)
f0127485:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012748b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012748e:	7f e7                	jg     f0127477 <test_kfreeall+0x860>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0127490:	e8 02 5d fe ff       	call   f010d197 <sys_calculate_free_frames>
f0127495:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127498:	e8 2b c9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012749d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01274a0:	83 ec 0c             	sub    $0xc,%esp
f01274a3:	68 00 fc 5f 00       	push   $0x5ffc00
f01274a8:	e8 de 08 fe ff       	call   f0107d8b <kmalloc>
f01274ad:	83 c4 10             	add    $0x10,%esp
f01274b0:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01274b6:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f01274bc:	89 c1                	mov    %eax,%ecx
f01274be:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01274c5:	10 00 00 
f01274c8:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01274ce:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01274d3:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01274d9:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01274df:	ba 00 00 00 00       	mov    $0x0,%edx
f01274e4:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01274ea:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01274f0:	29 d0                	sub    %edx,%eax
f01274f2:	89 c3                	mov    %eax,%ebx
f01274f4:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01274fb:	10 00 00 
f01274fe:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0127503:	0f b6 d0             	movzbl %al,%edx
f0127506:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012750c:	01 d0                	add    %edx,%eax
f012750e:	48                   	dec    %eax
f012750f:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0127515:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012751b:	ba 00 00 00 00       	mov    $0x0,%edx
f0127520:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0127526:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012752c:	29 d0                	sub    %edx,%eax
f012752e:	01 c3                	add    %eax,%ebx
f0127530:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0127537:	10 00 00 
f012753a:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012753f:	0f b6 c0             	movzbl %al,%eax
f0127542:	c1 e0 04             	shl    $0x4,%eax
f0127545:	89 c2                	mov    %eax,%edx
f0127547:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012754d:	01 d0                	add    %edx,%eax
f012754f:	48                   	dec    %eax
f0127550:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0127556:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012755c:	ba 00 00 00 00       	mov    $0x0,%edx
f0127561:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0127567:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012756d:	29 d0                	sub    %edx,%eax
f012756f:	01 d8                	add    %ebx,%eax
f0127571:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0127576:	39 c1                	cmp    %eax,%ecx
f0127578:	74 17                	je     f0127591 <test_kfreeall+0x97a>
f012757a:	83 ec 04             	sub    $0x4,%esp
f012757d:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0127582:	68 43 0a 00 00       	push   $0xa43
f0127587:	68 fa b8 13 f0       	push   $0xf013b8fa
f012758c:	e8 74 8c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127591:	e8 32 c8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127596:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127599:	74 17                	je     f01275b2 <test_kfreeall+0x99b>
f012759b:	83 ec 04             	sub    $0x4,%esp
f012759e:	68 14 b9 13 f0       	push   $0xf013b914
f01275a3:	68 44 0a 00 00       	push   $0xa44
f01275a8:	68 fa b8 13 f0       	push   $0xf013b8fa
f01275ad:	e8 53 8c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01275b2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01275b5:	e8 dd 5b fe ff       	call   f010d197 <sys_calculate_free_frames>
f01275ba:	29 c3                	sub    %eax,%ebx
f01275bc:	89 d8                	mov    %ebx,%eax
f01275be:	3d 00 06 00 00       	cmp    $0x600,%eax
f01275c3:	74 17                	je     f01275dc <test_kfreeall+0x9c5>
f01275c5:	83 ec 04             	sub    $0x4,%esp
f01275c8:	68 7c b9 13 f0       	push   $0xf013b97c
f01275cd:	68 45 0a 00 00       	push   $0xa45
f01275d2:	68 fa b8 13 f0       	push   $0xf013b8fa
f01275d7:	e8 29 8c fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f01275dc:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f01275e3:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01275e6:	e8 ac 5b fe ff       	call   f010d197 <sys_calculate_free_frames>
f01275eb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01275ee:	e8 d5 c7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01275f3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01275f6:	83 ec 0c             	sub    $0xc,%esp
f01275f9:	68 00 38 00 00       	push   $0x3800
f01275fe:	e8 88 07 fe ff       	call   f0107d8b <kmalloc>
f0127603:	83 c4 10             	add    $0x10,%esp
f0127606:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012760c:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0127612:	89 c1                	mov    %eax,%ecx
f0127614:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012761b:	10 00 00 
f012761e:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0127624:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127629:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012762f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0127635:	ba 00 00 00 00       	mov    $0x0,%edx
f012763a:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0127640:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0127646:	29 d0                	sub    %edx,%eax
f0127648:	89 c3                	mov    %eax,%ebx
f012764a:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0127651:	10 00 00 
f0127654:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0127659:	0f b6 d0             	movzbl %al,%edx
f012765c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0127662:	01 d0                	add    %edx,%eax
f0127664:	48                   	dec    %eax
f0127665:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012766b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0127671:	ba 00 00 00 00       	mov    $0x0,%edx
f0127676:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012767c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0127682:	29 d0                	sub    %edx,%eax
f0127684:	01 c3                	add    %eax,%ebx
f0127686:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012768d:	10 00 00 
f0127690:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0127695:	0f b6 c0             	movzbl %al,%eax
f0127698:	c1 e0 04             	shl    $0x4,%eax
f012769b:	89 c2                	mov    %eax,%edx
f012769d:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01276a3:	01 d0                	add    %edx,%eax
f01276a5:	48                   	dec    %eax
f01276a6:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f01276ac:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01276b2:	ba 00 00 00 00       	mov    $0x0,%edx
f01276b7:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f01276bd:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01276c3:	29 d0                	sub    %edx,%eax
f01276c5:	01 d8                	add    %ebx,%eax
f01276c7:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01276cc:	39 c1                	cmp    %eax,%ecx
f01276ce:	74 17                	je     f01276e7 <test_kfreeall+0xad0>
f01276d0:	83 ec 04             	sub    $0x4,%esp
f01276d3:	68 e0 b9 13 f0       	push   $0xf013b9e0
f01276d8:	68 4c 0a 00 00       	push   $0xa4c
f01276dd:	68 fa b8 13 f0       	push   $0xf013b8fa
f01276e2:	e8 1e 8b fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01276e7:	e8 dc c6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01276ec:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01276ef:	74 17                	je     f0127708 <test_kfreeall+0xaf1>
f01276f1:	83 ec 04             	sub    $0x4,%esp
f01276f4:	68 14 b9 13 f0       	push   $0xf013b914
f01276f9:	68 4d 0a 00 00       	push   $0xa4d
f01276fe:	68 fa b8 13 f0       	push   $0xf013b8fa
f0127703:	e8 fd 8a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127708:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012770b:	e8 87 5a fe ff       	call   f010d197 <sys_calculate_free_frames>
f0127710:	29 c3                	sub    %eax,%ebx
f0127712:	89 d8                	mov    %ebx,%eax
f0127714:	83 f8 04             	cmp    $0x4,%eax
f0127717:	74 17                	je     f0127730 <test_kfreeall+0xb19>
f0127719:	83 ec 04             	sub    $0x4,%esp
f012771c:	68 7c b9 13 f0       	push   $0xf013b97c
f0127721:	68 4e 0a 00 00       	push   $0xa4e
f0127726:	68 fa b8 13 f0       	push   $0xf013b8fa
f012772b:	e8 d5 8a fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0127730:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f0127737:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f012773a:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0127740:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0127743:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012774a:	eb 0e                	jmp    f012775a <test_kfreeall+0xb43>
		{
			ptr[i] = 7 ;
f012774c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012774f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127752:	01 d0                	add    %edx,%eax
f0127754:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0127757:	ff 45 f4             	incl   -0xc(%ebp)
f012775a:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0127760:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127763:	7f e7                	jg     f012774c <test_kfreeall+0xb35>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0127765:	e8 2d 5a fe ff       	call   f010d197 <sys_calculate_free_frames>
f012776a:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0127770:	e8 53 c6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127775:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f012777b:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0127781:	83 ec 0c             	sub    $0xc,%esp
f0127784:	50                   	push   %eax
f0127785:	e8 cc 06 fe ff       	call   f0107e56 <kfree>
f012778a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012778d:	e8 36 c6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127792:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0127798:	74 17                	je     f01277b1 <test_kfreeall+0xb9a>
f012779a:	83 ec 04             	sub    $0x4,%esp
f012779d:	68 14 b9 13 f0       	push   $0xf013b914
f01277a2:	68 5d 0a 00 00       	push   $0xa5d
f01277a7:	68 fa b8 13 f0       	push   $0xf013b8fa
f01277ac:	e8 54 8a fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01277b1:	e8 e1 59 fe ff       	call   f010d197 <sys_calculate_free_frames>
f01277b6:	89 c2                	mov    %eax,%edx
f01277b8:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01277be:	29 c2                	sub    %eax,%edx
f01277c0:	89 d0                	mov    %edx,%eax
f01277c2:	3d 00 02 00 00       	cmp    $0x200,%eax
f01277c7:	74 17                	je     f01277e0 <test_kfreeall+0xbc9>
f01277c9:	83 ec 04             	sub    $0x4,%esp
f01277cc:	68 84 c0 13 f0       	push   $0xf013c084
f01277d1:	68 5e 0a 00 00       	push   $0xa5e
f01277d6:	68 fa b8 13 f0       	push   $0xf013b8fa
f01277db:	e8 25 8a fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01277e0:	e8 b2 59 fe ff       	call   f010d197 <sys_calculate_free_frames>
f01277e5:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01277eb:	e8 d8 c5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01277f0:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f01277f6:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f01277fc:	83 ec 0c             	sub    $0xc,%esp
f01277ff:	50                   	push   %eax
f0127800:	e8 51 06 fe ff       	call   f0107e56 <kfree>
f0127805:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127808:	e8 bb c5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012780d:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0127813:	74 17                	je     f012782c <test_kfreeall+0xc15>
f0127815:	83 ec 04             	sub    $0x4,%esp
f0127818:	68 14 b9 13 f0       	push   $0xf013b914
f012781d:	68 64 0a 00 00       	push   $0xa64
f0127822:	68 fa b8 13 f0       	push   $0xf013b8fa
f0127827:	e8 d9 89 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012782c:	e8 66 59 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0127831:	89 c2                	mov    %eax,%edx
f0127833:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0127839:	29 c2                	sub    %eax,%edx
f012783b:	89 d0                	mov    %edx,%eax
f012783d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127842:	74 17                	je     f012785b <test_kfreeall+0xc44>
f0127844:	83 ec 04             	sub    $0x4,%esp
f0127847:	68 84 c0 13 f0       	push   $0xf013c084
f012784c:	68 65 0a 00 00       	push   $0xa65
f0127851:	68 fa b8 13 f0       	push   $0xf013b8fa
f0127856:	e8 aa 89 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012785b:	e8 37 59 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0127860:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127866:	e8 5d c5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012786b:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0127871:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0127877:	83 ec 0c             	sub    $0xc,%esp
f012787a:	50                   	push   %eax
f012787b:	e8 d6 05 fe ff       	call   f0107e56 <kfree>
f0127880:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127883:	e8 40 c5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127888:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f012788e:	74 17                	je     f01278a7 <test_kfreeall+0xc90>
f0127890:	83 ec 04             	sub    $0x4,%esp
f0127893:	68 14 b9 13 f0       	push   $0xf013b914
f0127898:	68 6b 0a 00 00       	push   $0xa6b
f012789d:	68 fa b8 13 f0       	push   $0xf013b8fa
f01278a2:	e8 5e 89 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01278a7:	e8 eb 58 fe ff       	call   f010d197 <sys_calculate_free_frames>
f01278ac:	89 c2                	mov    %eax,%edx
f01278ae:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01278b4:	29 c2                	sub    %eax,%edx
f01278b6:	89 d0                	mov    %edx,%eax
f01278b8:	3d 00 06 00 00       	cmp    $0x600,%eax
f01278bd:	74 17                	je     f01278d6 <test_kfreeall+0xcbf>
f01278bf:	83 ec 04             	sub    $0x4,%esp
f01278c2:	68 84 c0 13 f0       	push   $0xf013c084
f01278c7:	68 6c 0a 00 00       	push   $0xa6c
f01278cc:	68 fa b8 13 f0       	push   $0xf013b8fa
f01278d1:	e8 2f 89 fd ff       	call   f0100205 <_panic>


	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f01278d6:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01278dc:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01278df:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01278e6:	eb 1e                	jmp    f0127906 <test_kfreeall+0xcef>
		{
			sums[2] += ptr[i] ;
f01278e8:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f01278ee:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01278f1:	8b 45 80             	mov    -0x80(%ebp),%eax
f01278f4:	01 c8                	add    %ecx,%eax
f01278f6:	8a 00                	mov    (%eax),%al
f01278f8:	0f be c0             	movsbl %al,%eax
f01278fb:	01 d0                	add    %edx,%eax
f01278fd:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0127903:	ff 45 f4             	incl   -0xc(%ebp)
f0127906:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012790c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012790f:	7f d7                	jg     f01278e8 <test_kfreeall+0xcd1>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0127911:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f0127917:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012791d:	01 c0                	add    %eax,%eax
f012791f:	39 c2                	cmp    %eax,%edx
f0127921:	74 17                	je     f012793a <test_kfreeall+0xd23>
f0127923:	83 ec 04             	sub    $0x4,%esp
f0127926:	68 e0 c0 13 f0       	push   $0xf013c0e0
f012792b:	68 78 0a 00 00       	push   $0xa78
f0127930:	68 fa b8 13 f0       	push   $0xf013b8fa
f0127935:	e8 cb 88 fd ff       	call   f0100205 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f012793a:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0127940:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0127943:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012794a:	eb 1e                	jmp    f012796a <test_kfreeall+0xd53>
		{
			sums[3] += ptr[i] ;
f012794c:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0127952:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127955:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127958:	01 c8                	add    %ecx,%eax
f012795a:	8a 00                	mov    (%eax),%al
f012795c:	0f be c0             	movsbl %al,%eax
f012795f:	01 d0                	add    %edx,%eax
f0127961:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0127967:	ff 45 f4             	incl   -0xc(%ebp)
f012796a:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0127970:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127973:	7f d7                	jg     f012794c <test_kfreeall+0xd35>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0127975:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f012797b:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0127981:	89 c1                	mov    %eax,%ecx
f0127983:	01 c9                	add    %ecx,%ecx
f0127985:	01 c8                	add    %ecx,%eax
f0127987:	39 c2                	cmp    %eax,%edx
f0127989:	74 17                	je     f01279a2 <test_kfreeall+0xd8b>
f012798b:	83 ec 04             	sub    $0x4,%esp
f012798e:	68 e0 c0 13 f0       	push   $0xf013c0e0
f0127993:	68 80 0a 00 00       	push   $0xa80
f0127998:	68 fa b8 13 f0       	push   $0xf013b8fa
f012799d:	e8 63 88 fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f01279a2:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01279a8:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01279ab:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01279b2:	eb 1e                	jmp    f01279d2 <test_kfreeall+0xdbb>
		{
			sums[4] += ptr[i] ;
f01279b4:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f01279ba:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01279bd:	8b 45 80             	mov    -0x80(%ebp),%eax
f01279c0:	01 c8                	add    %ecx,%eax
f01279c2:	8a 00                	mov    (%eax),%al
f01279c4:	0f be c0             	movsbl %al,%eax
f01279c7:	01 d0                	add    %edx,%eax
f01279c9:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01279cf:	ff 45 f4             	incl   -0xc(%ebp)
f01279d2:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01279d8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01279db:	7f d7                	jg     f01279b4 <test_kfreeall+0xd9d>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f01279dd:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01279e3:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f01279e9:	c1 e2 02             	shl    $0x2,%edx
f01279ec:	39 d0                	cmp    %edx,%eax
f01279ee:	74 17                	je     f0127a07 <test_kfreeall+0xdf0>
f01279f0:	83 ec 04             	sub    $0x4,%esp
f01279f3:	68 e0 c0 13 f0       	push   $0xf013c0e0
f01279f8:	68 88 0a 00 00       	push   $0xa88
f01279fd:	68 fa b8 13 f0       	push   $0xf013b8fa
f0127a02:	e8 fe 87 fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0127a07:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0127a0d:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0127a10:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127a17:	eb 1e                	jmp    f0127a37 <test_kfreeall+0xe20>
		{
			sums[5] += ptr[i] ;
f0127a19:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f0127a1f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127a22:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127a25:	01 c8                	add    %ecx,%eax
f0127a27:	8a 00                	mov    (%eax),%al
f0127a29:	0f be c0             	movsbl %al,%eax
f0127a2c:	01 d0                	add    %edx,%eax
f0127a2e:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0127a34:	ff 45 f4             	incl   -0xc(%ebp)
f0127a37:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0127a3d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127a40:	7f d7                	jg     f0127a19 <test_kfreeall+0xe02>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0127a42:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f0127a48:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0127a4e:	89 d0                	mov    %edx,%eax
f0127a50:	c1 e0 02             	shl    $0x2,%eax
f0127a53:	01 d0                	add    %edx,%eax
f0127a55:	39 c1                	cmp    %eax,%ecx
f0127a57:	74 17                	je     f0127a70 <test_kfreeall+0xe59>
f0127a59:	83 ec 04             	sub    $0x4,%esp
f0127a5c:	68 e0 c0 13 f0       	push   $0xf013c0e0
f0127a61:	68 90 0a 00 00       	push   $0xa90
f0127a66:	68 fa b8 13 f0       	push   $0xf013b8fa
f0127a6b:	e8 95 87 fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0127a70:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0127a76:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0127a79:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127a80:	eb 1e                	jmp    f0127aa0 <test_kfreeall+0xe89>
		{
			sums[7] += ptr[i] ;
f0127a82:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f0127a88:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127a8b:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127a8e:	01 c8                	add    %ecx,%eax
f0127a90:	8a 00                	mov    (%eax),%al
f0127a92:	0f be c0             	movsbl %al,%eax
f0127a95:	01 d0                	add    %edx,%eax
f0127a97:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0127a9d:	ff 45 f4             	incl   -0xc(%ebp)
f0127aa0:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0127aa6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127aa9:	7f d7                	jg     f0127a82 <test_kfreeall+0xe6b>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0127aab:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f0127ab1:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0127ab7:	89 d0                	mov    %edx,%eax
f0127ab9:	01 c0                	add    %eax,%eax
f0127abb:	01 d0                	add    %edx,%eax
f0127abd:	01 c0                	add    %eax,%eax
f0127abf:	01 d0                	add    %edx,%eax
f0127ac1:	39 c1                	cmp    %eax,%ecx
f0127ac3:	74 17                	je     f0127adc <test_kfreeall+0xec5>
f0127ac5:	83 ec 04             	sub    $0x4,%esp
f0127ac8:	68 e0 c0 13 f0       	push   $0xf013c0e0
f0127acd:	68 98 0a 00 00       	push   $0xa98
f0127ad2:	68 fa b8 13 f0       	push   $0xf013b8fa
f0127ad7:	e8 29 87 fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0127adc:	e8 b6 56 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0127ae1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127ae4:	e8 df c2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127ae9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0127aec:	83 ec 0c             	sub    $0xc,%esp
f0127aef:	68 00 50 00 00       	push   $0x5000
f0127af4:	e8 92 02 fe ff       	call   f0107d8b <kmalloc>
f0127af9:	83 c4 10             	add    $0x10,%esp
f0127afc:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127b02:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0127b08:	89 c1                	mov    %eax,%ecx
f0127b0a:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0127b11:	10 00 00 
f0127b14:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0127b1a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127b1f:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0127b25:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0127b2b:	ba 00 00 00 00       	mov    $0x0,%edx
f0127b30:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0127b36:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0127b3c:	29 d0                	sub    %edx,%eax
f0127b3e:	89 c3                	mov    %eax,%ebx
f0127b40:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0127b47:	10 00 00 
f0127b4a:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0127b4f:	0f b6 d0             	movzbl %al,%edx
f0127b52:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0127b58:	01 d0                	add    %edx,%eax
f0127b5a:	48                   	dec    %eax
f0127b5b:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0127b61:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0127b67:	ba 00 00 00 00       	mov    $0x0,%edx
f0127b6c:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0127b72:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0127b78:	29 d0                	sub    %edx,%eax
f0127b7a:	01 c3                	add    %eax,%ebx
f0127b7c:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0127b83:	10 00 00 
f0127b86:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0127b8b:	0f b6 c0             	movzbl %al,%eax
f0127b8e:	c1 e0 04             	shl    $0x4,%eax
f0127b91:	89 c2                	mov    %eax,%edx
f0127b93:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0127b99:	01 d0                	add    %edx,%eax
f0127b9b:	48                   	dec    %eax
f0127b9c:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0127ba2:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0127ba8:	ba 00 00 00 00       	mov    $0x0,%edx
f0127bad:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0127bb3:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0127bb9:	29 d0                	sub    %edx,%eax
f0127bbb:	01 d8                	add    %ebx,%eax
f0127bbd:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0127bc2:	39 c1                	cmp    %eax,%ecx
f0127bc4:	74 17                	je     f0127bdd <test_kfreeall+0xfc6>
f0127bc6:	83 ec 04             	sub    $0x4,%esp
f0127bc9:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0127bce:	68 a1 0a 00 00       	push   $0xaa1
f0127bd3:	68 fa b8 13 f0       	push   $0xf013b8fa
f0127bd8:	e8 28 86 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127bdd:	e8 e6 c1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127be2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127be5:	74 17                	je     f0127bfe <test_kfreeall+0xfe7>
f0127be7:	83 ec 04             	sub    $0x4,%esp
f0127bea:	68 14 b9 13 f0       	push   $0xf013b914
f0127bef:	68 a2 0a 00 00       	push   $0xaa2
f0127bf4:	68 fa b8 13 f0       	push   $0xf013b8fa
f0127bf9:	e8 07 86 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127bfe:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127c01:	e8 91 55 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0127c06:	29 c3                	sub    %eax,%ebx
f0127c08:	89 d8                	mov    %ebx,%eax
f0127c0a:	83 f8 05             	cmp    $0x5,%eax
f0127c0d:	74 17                	je     f0127c26 <test_kfreeall+0x100f>
f0127c0f:	83 ec 04             	sub    $0x4,%esp
f0127c12:	68 7c b9 13 f0       	push   $0xf013b97c
f0127c17:	68 a3 0a 00 00       	push   $0xaa3
f0127c1c:	68 fa b8 13 f0       	push   $0xf013b8fa
f0127c21:	e8 df 85 fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0127c26:	c7 85 88 fe ff ff ff 	movl   $0x4fff,-0x178(%ebp)
f0127c2d:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0127c30:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0127c36:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0127c39:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127c40:	eb 0e                	jmp    f0127c50 <test_kfreeall+0x1039>
		{
			ptr[i] = 8 ;
f0127c42:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127c45:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127c48:	01 d0                	add    %edx,%eax
f0127c4a:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0127c4d:	ff 45 f4             	incl   -0xc(%ebp)
f0127c50:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0127c56:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127c59:	7f e7                	jg     f0127c42 <test_kfreeall+0x102b>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0127c5b:	e8 37 55 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0127c60:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127c63:	e8 60 c1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127c68:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0127c6b:	83 ec 0c             	sub    $0xc,%esp
f0127c6e:	68 00 00 10 00       	push   $0x100000
f0127c73:	e8 13 01 fe ff       	call   f0107d8b <kmalloc>
f0127c78:	83 c4 10             	add    $0x10,%esp
f0127c7b:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127c81:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127c87:	89 c1                	mov    %eax,%ecx
f0127c89:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0127c90:	10 00 00 
f0127c93:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0127c99:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127c9e:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0127ca4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0127caa:	ba 00 00 00 00       	mov    $0x0,%edx
f0127caf:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0127cb5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0127cbb:	29 d0                	sub    %edx,%eax
f0127cbd:	89 c3                	mov    %eax,%ebx
f0127cbf:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0127cc6:	10 00 00 
f0127cc9:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0127cce:	0f b6 d0             	movzbl %al,%edx
f0127cd1:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0127cd7:	01 d0                	add    %edx,%eax
f0127cd9:	48                   	dec    %eax
f0127cda:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0127ce0:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0127ce6:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ceb:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0127cf1:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0127cf7:	29 d0                	sub    %edx,%eax
f0127cf9:	01 c3                	add    %eax,%ebx
f0127cfb:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0127d02:	10 00 00 
f0127d05:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0127d0a:	0f b6 c0             	movzbl %al,%eax
f0127d0d:	c1 e0 04             	shl    $0x4,%eax
f0127d10:	89 c2                	mov    %eax,%edx
f0127d12:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0127d18:	01 d0                	add    %edx,%eax
f0127d1a:	48                   	dec    %eax
f0127d1b:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0127d21:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0127d27:	ba 00 00 00 00       	mov    $0x0,%edx
f0127d2c:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0127d32:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0127d38:	29 d0                	sub    %edx,%eax
f0127d3a:	01 d8                	add    %ebx,%eax
f0127d3c:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0127d41:	39 c1                	cmp    %eax,%ecx
f0127d43:	74 17                	je     f0127d5c <test_kfreeall+0x1145>
f0127d45:	83 ec 04             	sub    $0x4,%esp
f0127d48:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0127d4d:	68 af 0a 00 00       	push   $0xaaf
f0127d52:	68 fa b8 13 f0       	push   $0xf013b8fa
f0127d57:	e8 a9 84 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127d5c:	e8 67 c0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127d61:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127d64:	74 17                	je     f0127d7d <test_kfreeall+0x1166>
f0127d66:	83 ec 04             	sub    $0x4,%esp
f0127d69:	68 14 b9 13 f0       	push   $0xf013b914
f0127d6e:	68 b0 0a 00 00       	push   $0xab0
f0127d73:	68 fa b8 13 f0       	push   $0xf013b8fa
f0127d78:	e8 88 84 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127d7d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127d80:	e8 12 54 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0127d85:	29 c3                	sub    %eax,%ebx
f0127d87:	89 d8                	mov    %ebx,%eax
f0127d89:	3d 00 01 00 00       	cmp    $0x100,%eax
f0127d8e:	74 17                	je     f0127da7 <test_kfreeall+0x1190>
f0127d90:	83 ec 04             	sub    $0x4,%esp
f0127d93:	68 7c b9 13 f0       	push   $0xf013b97c
f0127d98:	68 b1 0a 00 00       	push   $0xab1
f0127d9d:	68 fa b8 13 f0       	push   $0xf013b8fa
f0127da2:	e8 5e 84 fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0127da7:	c7 85 8c fe ff ff ff 	movl   $0xfffff,-0x174(%ebp)
f0127dae:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0127db1:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127db7:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0127dba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127dc1:	eb 0e                	jmp    f0127dd1 <test_kfreeall+0x11ba>
		{
			ptr[i] = 9 ;
f0127dc3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127dc6:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127dc9:	01 d0                	add    %edx,%eax
f0127dcb:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0127dce:	ff 45 f4             	incl   -0xc(%ebp)
f0127dd1:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0127dd7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127dda:	7f e7                	jg     f0127dc3 <test_kfreeall+0x11ac>
		}
	}

	//kfree entire kernel heap
	{
		freeFrames = sys_calculate_free_frames() ;
f0127ddc:	e8 b6 53 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0127de1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127de4:	e8 df bf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127de9:	89 45 cc             	mov    %eax,-0x34(%ebp)

		kfreeall();
f0127dec:	e8 03 02 fe ff       	call   f0107ff4 <kfreeall>

		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127df1:	e8 d2 bf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127df6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127df9:	74 17                	je     f0127e12 <test_kfreeall+0x11fb>
f0127dfb:	83 ec 04             	sub    $0x4,%esp
f0127dfe:	68 14 b9 13 f0       	push   $0xf013b914
f0127e03:	68 c1 0a 00 00       	push   $0xac1
f0127e08:	68 fa b8 13 f0       	push   $0xf013b8fa
f0127e0d:	e8 f3 83 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE+ 2 + 3*Mega/4096 + 1 + 1 + 4 + 5 + 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0127e12:	e8 80 53 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0127e17:	89 c2                	mov    %eax,%edx
f0127e19:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127e1c:	89 d1                	mov    %edx,%ecx
f0127e1e:	29 c1                	sub    %eax,%ecx
f0127e20:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0127e27:	10 00 00 
f0127e2a:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0127e30:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127e35:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0127e3b:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0127e41:	ba 00 00 00 00       	mov    $0x0,%edx
f0127e46:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0127e4c:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0127e52:	29 d0                	sub    %edx,%eax
f0127e54:	89 c3                	mov    %eax,%ebx
f0127e56:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0127e5d:	10 00 00 
f0127e60:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0127e65:	0f b6 d0             	movzbl %al,%edx
f0127e68:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0127e6e:	01 d0                	add    %edx,%eax
f0127e70:	48                   	dec    %eax
f0127e71:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0127e77:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0127e7d:	ba 00 00 00 00       	mov    $0x0,%edx
f0127e82:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0127e88:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0127e8e:	29 d0                	sub    %edx,%eax
f0127e90:	01 c3                	add    %eax,%ebx
f0127e92:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0127e99:	10 00 00 
f0127e9c:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0127ea1:	0f b6 c0             	movzbl %al,%eax
f0127ea4:	c1 e0 04             	shl    $0x4,%eax
f0127ea7:	89 c2                	mov    %eax,%edx
f0127ea9:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0127eaf:	01 d0                	add    %edx,%eax
f0127eb1:	48                   	dec    %eax
f0127eb2:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0127eb8:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0127ebe:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ec3:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0127ec9:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0127ecf:	29 d0                	sub    %edx,%eax
f0127ed1:	01 d8                	add    %ebx,%eax
f0127ed3:	05 00 40 00 00       	add    $0x4000,%eax
f0127ed8:	c1 e8 0c             	shr    $0xc,%eax
f0127edb:	05 0d 04 00 00       	add    $0x40d,%eax
f0127ee0:	39 c1                	cmp    %eax,%ecx
f0127ee2:	74 17                	je     f0127efb <test_kfreeall+0x12e4>
f0127ee4:	83 ec 04             	sub    $0x4,%esp
f0127ee7:	68 84 c0 13 f0       	push   $0xf013c084
f0127eec:	68 c2 0a 00 00       	push   $0xac2
f0127ef1:	68 fa b8 13 f0       	push   $0xf013b8fa
f0127ef6:	e8 0a 83 fd ff       	call   f0100205 <_panic>

	//Check memory access after kfreeall
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0127efb:	83 ec 0c             	sub    $0xc,%esp
f0127efe:	6a 03                	push   $0x3
f0127f00:	e8 32 57 fe ff       	call   f010d637 <sys_bypassPageFault>
f0127f05:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0127f08:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127f0f:	e9 82 00 00 00       	jmp    f0127f96 <test_kfreeall+0x137f>
		{
			ptr = (char *) ptr_allocations[i];
f0127f14:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127f17:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f0127f1e:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0127f21:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127f24:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0127f27:	e8 f9 56 fe ff       	call   f010d625 <sys_rcr2>
f0127f2c:	89 c2                	mov    %eax,%edx
f0127f2e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127f31:	39 c2                	cmp    %eax,%edx
f0127f33:	74 17                	je     f0127f4c <test_kfreeall+0x1335>
f0127f35:	83 ec 04             	sub    $0x4,%esp
f0127f38:	68 60 c1 13 f0       	push   $0xf013c160
f0127f3d:	68 d0 0a 00 00       	push   $0xad0
f0127f42:	68 fa b8 13 f0       	push   $0xf013b8fa
f0127f47:	e8 b9 82 fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f0127f4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127f4f:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0127f56:	89 c2                	mov    %eax,%edx
f0127f58:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127f5b:	01 d0                	add    %edx,%eax
f0127f5d:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0127f60:	e8 c0 56 fe ff       	call   f010d625 <sys_rcr2>
f0127f65:	89 c2                	mov    %eax,%edx
f0127f67:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127f6a:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0127f71:	89 c1                	mov    %eax,%ecx
f0127f73:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127f76:	01 c8                	add    %ecx,%eax
f0127f78:	39 c2                	cmp    %eax,%edx
f0127f7a:	74 17                	je     f0127f93 <test_kfreeall+0x137c>
f0127f7c:	83 ec 04             	sub    $0x4,%esp
f0127f7f:	68 60 c1 13 f0       	push   $0xf013c160
f0127f84:	68 d2 0a 00 00       	push   $0xad2
f0127f89:	68 fa b8 13 f0       	push   $0xf013b8fa
f0127f8e:	e8 72 82 fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0127f93:	ff 45 f4             	incl   -0xc(%ebp)
f0127f96:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0127f9a:	0f 8e 74 ff ff ff    	jle    f0127f14 <test_kfreeall+0x12fd>
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}
		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0127fa0:	83 ec 0c             	sub    $0xc,%esp
f0127fa3:	6a 00                	push   $0x0
f0127fa5:	e8 8d 56 fe ff       	call   f010d637 <sys_bypassPageFault>
f0127faa:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfreeall
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0127fad:	e8 e5 51 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0127fb2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127fb5:	e8 0e be fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127fba:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(4*Mega);
f0127fbd:	83 ec 0c             	sub    $0xc,%esp
f0127fc0:	68 00 00 40 00       	push   $0x400000
f0127fc5:	e8 c1 fd fd ff       	call   f0107d8b <kmalloc>
f0127fca:	83 c4 10             	add    $0x10,%esp
f0127fcd:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (KERNEL_HEAP_START)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0127fd3:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0127fd9:	3d 00 00 00 f6       	cmp    $0xf6000000,%eax
f0127fde:	74 17                	je     f0127ff7 <test_kfreeall+0x13e0>
f0127fe0:	83 ec 04             	sub    $0x4,%esp
f0127fe3:	68 04 c6 13 f0       	push   $0xf013c604
f0127fe8:	68 de 0a 00 00       	push   $0xade
f0127fed:	68 fa b8 13 f0       	push   $0xf013b8fa
f0127ff2:	e8 0e 82 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127ff7:	e8 cc bd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127ffc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127fff:	74 17                	je     f0128018 <test_kfreeall+0x1401>
f0128001:	83 ec 04             	sub    $0x4,%esp
f0128004:	68 14 b9 13 f0       	push   $0xf013b914
f0128009:	68 df 0a 00 00       	push   $0xadf
f012800e:	68 fa b8 13 f0       	push   $0xf013b8fa
f0128013:	e8 ed 81 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128018:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012801b:	e8 77 51 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0128020:	29 c3                	sub    %eax,%ebx
f0128022:	89 d8                	mov    %ebx,%eax
f0128024:	3d 00 04 00 00       	cmp    $0x400,%eax
f0128029:	74 17                	je     f0128042 <test_kfreeall+0x142b>
f012802b:	83 ec 04             	sub    $0x4,%esp
f012802e:	68 7c b9 13 f0       	push   $0xf013b97c
f0128033:	68 e0 0a 00 00       	push   $0xae0
f0128038:	68 fa b8 13 f0       	push   $0xf013b8fa
f012803d:	e8 c3 81 fd ff       	call   f0100205 <_panic>

		//12 KB
		freeFrames = sys_calculate_free_frames() ;
f0128042:	e8 50 51 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0128047:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012804a:	e8 79 bd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012804f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[11] = kmalloc(12*kilo);
f0128052:	83 ec 0c             	sub    $0xc,%esp
f0128055:	68 00 30 00 00       	push   $0x3000
f012805a:	e8 2c fd fd ff       	call   f0107d8b <kmalloc>
f012805f:	83 c4 10             	add    $0x10,%esp
f0128062:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		if ((uint32) ptr_allocations[11] != (KERNEL_HEAP_START + 4*Mega)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0128068:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012806e:	3d 00 00 40 f6       	cmp    $0xf6400000,%eax
f0128073:	74 17                	je     f012808c <test_kfreeall+0x1475>
f0128075:	83 ec 04             	sub    $0x4,%esp
f0128078:	68 04 c6 13 f0       	push   $0xf013c604
f012807d:	68 e6 0a 00 00       	push   $0xae6
f0128082:	68 fa b8 13 f0       	push   $0xf013b8fa
f0128087:	e8 79 81 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012808c:	e8 37 bd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128091:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0128094:	74 17                	je     f01280ad <test_kfreeall+0x1496>
f0128096:	83 ec 04             	sub    $0x4,%esp
f0128099:	68 14 b9 13 f0       	push   $0xf013b914
f012809e:	68 e7 0a 00 00       	push   $0xae7
f01280a3:	68 fa b8 13 f0       	push   $0xf013b8fa
f01280a8:	e8 58 81 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 3) panic("Wrong allocation: pages are not loaded successfully into memory");
f01280ad:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01280b0:	e8 e2 50 fe ff       	call   f010d197 <sys_calculate_free_frames>
f01280b5:	29 c3                	sub    %eax,%ebx
f01280b7:	89 d8                	mov    %ebx,%eax
f01280b9:	83 f8 03             	cmp    $0x3,%eax
f01280bc:	74 17                	je     f01280d5 <test_kfreeall+0x14be>
f01280be:	83 ec 04             	sub    $0x4,%esp
f01280c1:	68 7c b9 13 f0       	push   $0xf013b97c
f01280c6:	68 e8 0a 00 00       	push   $0xae8
f01280cb:	68 fa b8 13 f0       	push   $0xf013b8fa
f01280d0:	e8 30 81 fd ff       	call   f0100205 <_panic>
	}

	//kfree one of the newly allocated space
	{
		//kfree 12 KB
		freeFrames = sys_calculate_free_frames() ;
f01280d5:	e8 bd 50 fe ff       	call   f010d197 <sys_calculate_free_frames>
f01280da:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01280dd:	e8 e6 bc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01280e2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[11]);
f01280e5:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01280eb:	83 ec 0c             	sub    $0xc,%esp
f01280ee:	50                   	push   %eax
f01280ef:	e8 62 fd fd ff       	call   f0107e56 <kfree>
f01280f4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01280f7:	e8 cc bc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01280fc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01280ff:	74 17                	je     f0128118 <test_kfreeall+0x1501>
f0128101:	83 ec 04             	sub    $0x4,%esp
f0128104:	68 14 b9 13 f0       	push   $0xf013b914
f0128109:	68 f2 0a 00 00       	push   $0xaf2
f012810e:	68 fa b8 13 f0       	push   $0xf013b8fa
f0128113:	e8 ed 80 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0128118:	e8 7a 50 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012811d:	89 c2                	mov    %eax,%edx
f012811f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0128122:	29 c2                	sub    %eax,%edx
f0128124:	89 d0                	mov    %edx,%eax
f0128126:	83 f8 03             	cmp    $0x3,%eax
f0128129:	74 17                	je     f0128142 <test_kfreeall+0x152b>
f012812b:	83 ec 04             	sub    $0x4,%esp
f012812e:	68 ac c1 13 f0       	push   $0xf013c1ac
f0128133:	68 f3 0a 00 00       	push   $0xaf3
f0128138:	68 fa b8 13 f0       	push   $0xf013b8fa
f012813d:	e8 c3 80 fd ff       	call   f0100205 <_panic>
	}

	//kfree non-exist item
	{
		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0128142:	e8 50 50 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0128147:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012814a:	e8 79 bc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012814f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0128152:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0128158:	83 ec 0c             	sub    $0xc,%esp
f012815b:	50                   	push   %eax
f012815c:	e8 f5 fc fd ff       	call   f0107e56 <kfree>
f0128161:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128164:	e8 5f bc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128169:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012816c:	74 17                	je     f0128185 <test_kfreeall+0x156e>
f012816e:	83 ec 04             	sub    $0x4,%esp
f0128171:	68 14 b9 13 f0       	push   $0xf013b914
f0128176:	68 fc 0a 00 00       	push   $0xafc
f012817b:	68 fa b8 13 f0       	push   $0xf013b8fa
f0128180:	e8 80 80 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0128185:	e8 0d 50 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012818a:	89 c2                	mov    %eax,%edx
f012818c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012818f:	39 c2                	cmp    %eax,%edx
f0128191:	74 17                	je     f01281aa <test_kfreeall+0x1593>
f0128193:	83 ec 04             	sub    $0x4,%esp
f0128196:	68 ac c1 13 f0       	push   $0xf013c1ac
f012819b:	68 fd 0a 00 00       	push   $0xafd
f01281a0:	68 fa b8 13 f0       	push   $0xf013b8fa
f01281a5:	e8 5b 80 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01281aa:	e8 e8 4f fe ff       	call   f010d197 <sys_calculate_free_frames>
f01281af:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01281b2:	e8 11 bc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01281b7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01281ba:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01281c0:	83 ec 0c             	sub    $0xc,%esp
f01281c3:	50                   	push   %eax
f01281c4:	e8 8d fc fd ff       	call   f0107e56 <kfree>
f01281c9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01281cc:	e8 f7 bb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01281d1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01281d4:	74 17                	je     f01281ed <test_kfreeall+0x15d6>
f01281d6:	83 ec 04             	sub    $0x4,%esp
f01281d9:	68 14 b9 13 f0       	push   $0xf013b914
f01281de:	68 03 0b 00 00       	push   $0xb03
f01281e3:	68 fa b8 13 f0       	push   $0xf013b8fa
f01281e8:	e8 18 80 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01281ed:	e8 a5 4f fe ff       	call   f010d197 <sys_calculate_free_frames>
f01281f2:	89 c2                	mov    %eax,%edx
f01281f4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01281f7:	39 c2                	cmp    %eax,%edx
f01281f9:	74 17                	je     f0128212 <test_kfreeall+0x15fb>
f01281fb:	83 ec 04             	sub    $0x4,%esp
f01281fe:	68 ac c1 13 f0       	push   $0xf013c1ac
f0128203:	68 04 0b 00 00       	push   $0xb04
f0128208:	68 fa b8 13 f0       	push   $0xf013b8fa
f012820d:	e8 f3 7f fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0128212:	e8 80 4f fe ff       	call   f010d197 <sys_calculate_free_frames>
f0128217:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012821a:	e8 a9 bb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012821f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0128222:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0128228:	83 ec 0c             	sub    $0xc,%esp
f012822b:	50                   	push   %eax
f012822c:	e8 25 fc fd ff       	call   f0107e56 <kfree>
f0128231:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128234:	e8 8f bb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128239:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012823c:	74 17                	je     f0128255 <test_kfreeall+0x163e>
f012823e:	83 ec 04             	sub    $0x4,%esp
f0128241:	68 14 b9 13 f0       	push   $0xf013b914
f0128246:	68 0a 0b 00 00       	push   $0xb0a
f012824b:	68 fa b8 13 f0       	push   $0xf013b8fa
f0128250:	e8 b0 7f fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0128255:	e8 3d 4f fe ff       	call   f010d197 <sys_calculate_free_frames>
f012825a:	89 c2                	mov    %eax,%edx
f012825c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012825f:	39 c2                	cmp    %eax,%edx
f0128261:	74 17                	je     f012827a <test_kfreeall+0x1663>
f0128263:	83 ec 04             	sub    $0x4,%esp
f0128266:	68 ac c1 13 f0       	push   $0xf013c1ac
f012826b:	68 0b 0b 00 00       	push   $0xb0b
f0128270:	68 fa b8 13 f0       	push   $0xf013b8fa
f0128275:	e8 8b 7f fd ff       	call   f0100205 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f012827a:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0128281:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0128288:	eb 48                	jmp    f01282d2 <test_kfreeall+0x16bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f012828a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012828d:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0128292:	83 ec 04             	sub    $0x4,%esp
f0128295:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f012829b:	51                   	push   %ecx
f012829c:	52                   	push   %edx
f012829d:	50                   	push   %eax
f012829e:	e8 0e e8 fd ff       	call   f0106ab1 <get_page_table>
f01282a3:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01282a6:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f01282ac:	85 c0                	test   %eax,%eax
f01282ae:	75 17                	jne    f01282c7 <test_kfreeall+0x16b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f01282b0:	83 ec 04             	sub    $0x4,%esp
f01282b3:	68 fc c1 13 f0       	push   $0xf013c1fc
f01282b8:	68 18 0b 00 00       	push   $0xb18
f01282bd:	68 fa b8 13 f0       	push   $0xf013b8fa
f01282c2:	e8 3e 7f fd ff       	call   f0100205 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01282c7:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f01282ce:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f01282d2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01282d6:	78 b2                	js     f012828a <test_kfreeall+0x1673>
f01282d8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01282dc:	7f 09                	jg     f01282e7 <test_kfreeall+0x16d0>
f01282de:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f01282e5:	76 a3                	jbe    f012828a <test_kfreeall+0x1673>
			}
		}
	}


	cprintf("\nCongratulations!! your modification is run successfully.\n");
f01282e7:	83 ec 0c             	sub    $0xc,%esp
f01282ea:	68 58 c6 13 f0       	push   $0xf013c658
f01282ef:	e8 1a 8a fd ff       	call   f0100d0e <cprintf>
f01282f4:	83 c4 10             	add    $0x10,%esp

	return 1;
f01282f7:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01282fc:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01282ff:	5b                   	pop    %ebx
f0128300:	5f                   	pop    %edi
f0128301:	5d                   	pop    %ebp
f0128302:	c3                   	ret    

f0128303 <test_kexpand>:


extern void kexpand(uint32 newSize) ;

int test_kexpand()
{
f0128303:	55                   	push   %ebp
f0128304:	89 e5                	mov    %esp,%ebp
f0128306:	57                   	push   %edi
f0128307:	53                   	push   %ebx
f0128308:	81 ec 90 01 00 00    	sub    $0x190,%esp
	char minByte = 1<<7;
f012830e:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0128312:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0128316:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f012831c:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0128322:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0128329:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0128330:	e8 62 4e fe ff       	call   f010d197 <sys_calculate_free_frames>
f0128335:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0128338:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f012833e:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128343:	b8 00 00 00 00       	mov    $0x0,%eax
f0128348:	89 d7                	mov    %edx,%edi
f012834a:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f012834c:	8d 95 6c fe ff ff    	lea    -0x194(%ebp),%edx
f0128352:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128357:	b8 00 00 00 00       	mov    $0x0,%eax
f012835c:	89 d7                	mov    %edx,%edi
f012835e:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128360:	e8 32 4e fe ff       	call   f010d197 <sys_calculate_free_frames>
f0128365:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128368:	e8 5b ba fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012836d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0128370:	83 ec 0c             	sub    $0xc,%esp
f0128373:	68 00 fc 1f 00       	push   $0x1ffc00
f0128378:	e8 0e fa fd ff       	call   f0107d8b <kmalloc>
f012837d:	83 c4 10             	add    $0x10,%esp
f0128380:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128386:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012838c:	89 c1                	mov    %eax,%ecx
f012838e:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0128395:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0128398:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012839d:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01283a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01283a3:	ba 00 00 00 00       	mov    $0x0,%edx
f01283a8:	f7 75 d4             	divl   -0x2c(%ebp)
f01283ab:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01283ae:	29 d0                	sub    %edx,%eax
f01283b0:	89 c3                	mov    %eax,%ebx
f01283b2:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01283b9:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01283be:	0f b6 d0             	movzbl %al,%edx
f01283c1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01283c4:	01 d0                	add    %edx,%eax
f01283c6:	48                   	dec    %eax
f01283c7:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01283ca:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01283cd:	ba 00 00 00 00       	mov    $0x0,%edx
f01283d2:	f7 75 cc             	divl   -0x34(%ebp)
f01283d5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01283d8:	29 d0                	sub    %edx,%eax
f01283da:	01 c3                	add    %eax,%ebx
f01283dc:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01283e3:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01283e8:	0f b6 c0             	movzbl %al,%eax
f01283eb:	c1 e0 04             	shl    $0x4,%eax
f01283ee:	89 c2                	mov    %eax,%edx
f01283f0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01283f3:	01 d0                	add    %edx,%eax
f01283f5:	48                   	dec    %eax
f01283f6:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01283f9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01283fc:	ba 00 00 00 00       	mov    $0x0,%edx
f0128401:	f7 75 c4             	divl   -0x3c(%ebp)
f0128404:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0128407:	29 d0                	sub    %edx,%eax
f0128409:	01 d8                	add    %ebx,%eax
f012840b:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0128410:	39 c1                	cmp    %eax,%ecx
f0128412:	74 17                	je     f012842b <test_kexpand+0x128>
f0128414:	83 ec 04             	sub    $0x4,%esp
f0128417:	68 e0 b9 13 f0       	push   $0xf013b9e0
f012841c:	68 43 0b 00 00       	push   $0xb43
f0128421:	68 fa b8 13 f0       	push   $0xf013b8fa
f0128426:	e8 da 7d fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012842b:	e8 98 b9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128430:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128433:	74 17                	je     f012844c <test_kexpand+0x149>
f0128435:	83 ec 04             	sub    $0x4,%esp
f0128438:	68 14 b9 13 f0       	push   $0xf013b914
f012843d:	68 44 0b 00 00       	push   $0xb44
f0128442:	68 fa b8 13 f0       	push   $0xf013b8fa
f0128447:	e8 b9 7d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012844c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012844f:	e8 43 4d fe ff       	call   f010d197 <sys_calculate_free_frames>
f0128454:	29 c3                	sub    %eax,%ebx
f0128456:	89 d8                	mov    %ebx,%eax
f0128458:	3d 00 02 00 00       	cmp    $0x200,%eax
f012845d:	74 17                	je     f0128476 <test_kexpand+0x173>
f012845f:	83 ec 04             	sub    $0x4,%esp
f0128462:	68 7c b9 13 f0       	push   $0xf013b97c
f0128467:	68 45 0b 00 00       	push   $0xb45
f012846c:	68 fa b8 13 f0       	push   $0xf013b8fa
f0128471:	e8 8f 7d fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0128476:	c7 85 bc fe ff ff ff 	movl   $0x1ffbff,-0x144(%ebp)
f012847d:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128480:	e8 12 4d fe ff       	call   f010d197 <sys_calculate_free_frames>
f0128485:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128488:	e8 3b b9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012848d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0128490:	83 ec 0c             	sub    $0xc,%esp
f0128493:	68 00 fc 1f 00       	push   $0x1ffc00
f0128498:	e8 ee f8 fd ff       	call   f0107d8b <kmalloc>
f012849d:	83 c4 10             	add    $0x10,%esp
f01284a0:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01284a6:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01284ac:	89 c1                	mov    %eax,%ecx
f01284ae:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f01284b5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01284b8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01284bd:	89 45 b8             	mov    %eax,-0x48(%ebp)
f01284c0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01284c3:	ba 00 00 00 00       	mov    $0x0,%edx
f01284c8:	f7 75 bc             	divl   -0x44(%ebp)
f01284cb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01284ce:	29 d0                	sub    %edx,%eax
f01284d0:	89 c3                	mov    %eax,%ebx
f01284d2:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01284d9:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01284de:	0f b6 d0             	movzbl %al,%edx
f01284e1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01284e4:	01 d0                	add    %edx,%eax
f01284e6:	48                   	dec    %eax
f01284e7:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01284ea:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01284ed:	ba 00 00 00 00       	mov    $0x0,%edx
f01284f2:	f7 75 b4             	divl   -0x4c(%ebp)
f01284f5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01284f8:	29 d0                	sub    %edx,%eax
f01284fa:	01 c3                	add    %eax,%ebx
f01284fc:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0128503:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0128508:	0f b6 c0             	movzbl %al,%eax
f012850b:	c1 e0 04             	shl    $0x4,%eax
f012850e:	89 c2                	mov    %eax,%edx
f0128510:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0128513:	01 d0                	add    %edx,%eax
f0128515:	48                   	dec    %eax
f0128516:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0128519:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012851c:	ba 00 00 00 00       	mov    $0x0,%edx
f0128521:	f7 75 ac             	divl   -0x54(%ebp)
f0128524:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128527:	29 d0                	sub    %edx,%eax
f0128529:	01 d8                	add    %ebx,%eax
f012852b:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0128530:	39 c1                	cmp    %eax,%ecx
f0128532:	74 17                	je     f012854b <test_kexpand+0x248>
f0128534:	83 ec 04             	sub    $0x4,%esp
f0128537:	68 e0 b9 13 f0       	push   $0xf013b9e0
f012853c:	68 4c 0b 00 00       	push   $0xb4c
f0128541:	68 fa b8 13 f0       	push   $0xf013b8fa
f0128546:	e8 ba 7c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012854b:	e8 78 b8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128550:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128553:	74 17                	je     f012856c <test_kexpand+0x269>
f0128555:	83 ec 04             	sub    $0x4,%esp
f0128558:	68 14 b9 13 f0       	push   $0xf013b914
f012855d:	68 4d 0b 00 00       	push   $0xb4d
f0128562:	68 fa b8 13 f0       	push   $0xf013b8fa
f0128567:	e8 99 7c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012856c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012856f:	e8 23 4c fe ff       	call   f010d197 <sys_calculate_free_frames>
f0128574:	29 c3                	sub    %eax,%ebx
f0128576:	89 d8                	mov    %ebx,%eax
f0128578:	3d 00 02 00 00       	cmp    $0x200,%eax
f012857d:	74 17                	je     f0128596 <test_kexpand+0x293>
f012857f:	83 ec 04             	sub    $0x4,%esp
f0128582:	68 7c b9 13 f0       	push   $0xf013b97c
f0128587:	68 4e 0b 00 00       	push   $0xb4e
f012858c:	68 fa b8 13 f0       	push   $0xf013b8fa
f0128591:	e8 6f 7c fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0128596:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f012859d:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01285a0:	e8 f2 4b fe ff       	call   f010d197 <sys_calculate_free_frames>
f01285a5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01285a8:	e8 1b b8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01285ad:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01285b0:	83 ec 0c             	sub    $0xc,%esp
f01285b3:	68 00 08 00 00       	push   $0x800
f01285b8:	e8 ce f7 fd ff       	call   f0107d8b <kmalloc>
f01285bd:	83 c4 10             	add    $0x10,%esp
f01285c0:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01285c6:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01285cc:	89 c1                	mov    %eax,%ecx
f01285ce:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01285d5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01285d8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01285dd:	89 45 a0             	mov    %eax,-0x60(%ebp)
f01285e0:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01285e3:	ba 00 00 00 00       	mov    $0x0,%edx
f01285e8:	f7 75 a4             	divl   -0x5c(%ebp)
f01285eb:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01285ee:	29 d0                	sub    %edx,%eax
f01285f0:	89 c3                	mov    %eax,%ebx
f01285f2:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f01285f9:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01285fe:	0f b6 d0             	movzbl %al,%edx
f0128601:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128604:	01 d0                	add    %edx,%eax
f0128606:	48                   	dec    %eax
f0128607:	89 45 98             	mov    %eax,-0x68(%ebp)
f012860a:	8b 45 98             	mov    -0x68(%ebp),%eax
f012860d:	ba 00 00 00 00       	mov    $0x0,%edx
f0128612:	f7 75 9c             	divl   -0x64(%ebp)
f0128615:	8b 45 98             	mov    -0x68(%ebp),%eax
f0128618:	29 d0                	sub    %edx,%eax
f012861a:	01 c3                	add    %eax,%ebx
f012861c:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0128623:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0128628:	0f b6 c0             	movzbl %al,%eax
f012862b:	c1 e0 04             	shl    $0x4,%eax
f012862e:	89 c2                	mov    %eax,%edx
f0128630:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0128633:	01 d0                	add    %edx,%eax
f0128635:	48                   	dec    %eax
f0128636:	89 45 90             	mov    %eax,-0x70(%ebp)
f0128639:	8b 45 90             	mov    -0x70(%ebp),%eax
f012863c:	ba 00 00 00 00       	mov    $0x0,%edx
f0128641:	f7 75 94             	divl   -0x6c(%ebp)
f0128644:	8b 45 90             	mov    -0x70(%ebp),%eax
f0128647:	29 d0                	sub    %edx,%eax
f0128649:	01 d8                	add    %ebx,%eax
f012864b:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0128650:	39 c1                	cmp    %eax,%ecx
f0128652:	74 17                	je     f012866b <test_kexpand+0x368>
f0128654:	83 ec 04             	sub    $0x4,%esp
f0128657:	68 e0 b9 13 f0       	push   $0xf013b9e0
f012865c:	68 55 0b 00 00       	push   $0xb55
f0128661:	68 fa b8 13 f0       	push   $0xf013b8fa
f0128666:	e8 9a 7b fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012866b:	e8 58 b7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128670:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128673:	74 17                	je     f012868c <test_kexpand+0x389>
f0128675:	83 ec 04             	sub    $0x4,%esp
f0128678:	68 14 b9 13 f0       	push   $0xf013b914
f012867d:	68 56 0b 00 00       	push   $0xb56
f0128682:	68 fa b8 13 f0       	push   $0xf013b8fa
f0128687:	e8 79 7b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012868c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012868f:	e8 03 4b fe ff       	call   f010d197 <sys_calculate_free_frames>
f0128694:	29 c3                	sub    %eax,%ebx
f0128696:	89 d8                	mov    %ebx,%eax
f0128698:	83 f8 01             	cmp    $0x1,%eax
f012869b:	74 17                	je     f01286b4 <test_kexpand+0x3b1>
f012869d:	83 ec 04             	sub    $0x4,%esp
f01286a0:	68 7c b9 13 f0       	push   $0xf013b97c
f01286a5:	68 57 0b 00 00       	push   $0xb57
f01286aa:	68 fa b8 13 f0       	push   $0xf013b8fa
f01286af:	e8 51 7b fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01286b4:	c7 85 c4 fe ff ff ff 	movl   $0x7ff,-0x13c(%ebp)
f01286bb:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01286be:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01286c4:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01286c7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01286ce:	eb 0e                	jmp    f01286de <test_kexpand+0x3db>
		{
			ptr[i] = 2 ;
f01286d0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01286d3:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01286d6:	01 d0                	add    %edx,%eax
f01286d8:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01286db:	ff 45 f4             	incl   -0xc(%ebp)
f01286de:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01286e4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01286e7:	7f e7                	jg     f01286d0 <test_kexpand+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01286e9:	e8 a9 4a fe ff       	call   f010d197 <sys_calculate_free_frames>
f01286ee:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01286f1:	e8 d2 b6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01286f6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01286f9:	83 ec 0c             	sub    $0xc,%esp
f01286fc:	68 00 08 00 00       	push   $0x800
f0128701:	e8 85 f6 fd ff       	call   f0107d8b <kmalloc>
f0128706:	83 c4 10             	add    $0x10,%esp
f0128709:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012870f:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0128715:	89 c1                	mov    %eax,%ecx
f0128717:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f012871e:	8b 45 88             	mov    -0x78(%ebp),%eax
f0128721:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128726:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0128729:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012872c:	ba 00 00 00 00       	mov    $0x0,%edx
f0128731:	f7 75 88             	divl   -0x78(%ebp)
f0128734:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0128737:	29 d0                	sub    %edx,%eax
f0128739:	89 c3                	mov    %eax,%ebx
f012873b:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0128742:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0128747:	0f b6 d0             	movzbl %al,%edx
f012874a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012874d:	01 d0                	add    %edx,%eax
f012874f:	48                   	dec    %eax
f0128750:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0128756:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012875c:	ba 00 00 00 00       	mov    $0x0,%edx
f0128761:	f7 75 80             	divl   -0x80(%ebp)
f0128764:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012876a:	29 d0                	sub    %edx,%eax
f012876c:	01 c3                	add    %eax,%ebx
f012876e:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0128775:	10 00 00 
f0128778:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012877d:	0f b6 c0             	movzbl %al,%eax
f0128780:	c1 e0 04             	shl    $0x4,%eax
f0128783:	89 c2                	mov    %eax,%edx
f0128785:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012878b:	01 d0                	add    %edx,%eax
f012878d:	48                   	dec    %eax
f012878e:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0128794:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012879a:	ba 00 00 00 00       	mov    $0x0,%edx
f012879f:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01287a5:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01287ab:	29 d0                	sub    %edx,%eax
f01287ad:	01 d8                	add    %ebx,%eax
f01287af:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01287b4:	39 c1                	cmp    %eax,%ecx
f01287b6:	74 17                	je     f01287cf <test_kexpand+0x4cc>
f01287b8:	83 ec 04             	sub    $0x4,%esp
f01287bb:	68 e0 b9 13 f0       	push   $0xf013b9e0
f01287c0:	68 63 0b 00 00       	push   $0xb63
f01287c5:	68 fa b8 13 f0       	push   $0xf013b8fa
f01287ca:	e8 36 7a fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01287cf:	e8 f4 b5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01287d4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01287d7:	74 17                	je     f01287f0 <test_kexpand+0x4ed>
f01287d9:	83 ec 04             	sub    $0x4,%esp
f01287dc:	68 14 b9 13 f0       	push   $0xf013b914
f01287e1:	68 64 0b 00 00       	push   $0xb64
f01287e6:	68 fa b8 13 f0       	push   $0xf013b8fa
f01287eb:	e8 15 7a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01287f0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01287f3:	e8 9f 49 fe ff       	call   f010d197 <sys_calculate_free_frames>
f01287f8:	29 c3                	sub    %eax,%ebx
f01287fa:	89 d8                	mov    %ebx,%eax
f01287fc:	83 f8 01             	cmp    $0x1,%eax
f01287ff:	74 17                	je     f0128818 <test_kexpand+0x515>
f0128801:	83 ec 04             	sub    $0x4,%esp
f0128804:	68 7c b9 13 f0       	push   $0xf013b97c
f0128809:	68 65 0b 00 00       	push   $0xb65
f012880e:	68 fa b8 13 f0       	push   $0xf013b8fa
f0128813:	e8 ed 79 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0128818:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f012881f:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0128822:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0128828:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012882b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128832:	eb 0e                	jmp    f0128842 <test_kexpand+0x53f>
		{
			ptr[i] = 3 ;
f0128834:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128837:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012883a:	01 d0                	add    %edx,%eax
f012883c:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012883f:	ff 45 f4             	incl   -0xc(%ebp)
f0128842:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0128848:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012884b:	7f e7                	jg     f0128834 <test_kexpand+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012884d:	e8 45 49 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0128852:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128855:	e8 6e b5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012885a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012885d:	83 ec 0c             	sub    $0xc,%esp
f0128860:	68 00 1c 00 00       	push   $0x1c00
f0128865:	e8 21 f5 fd ff       	call   f0107d8b <kmalloc>
f012886a:	83 c4 10             	add    $0x10,%esp
f012886d:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128873:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0128879:	89 c1                	mov    %eax,%ecx
f012887b:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0128882:	10 00 00 
f0128885:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012888b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128890:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0128896:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012889c:	ba 00 00 00 00       	mov    $0x0,%edx
f01288a1:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01288a7:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01288ad:	29 d0                	sub    %edx,%eax
f01288af:	89 c3                	mov    %eax,%ebx
f01288b1:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01288b8:	10 00 00 
f01288bb:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01288c0:	0f b6 d0             	movzbl %al,%edx
f01288c3:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01288c9:	01 d0                	add    %edx,%eax
f01288cb:	48                   	dec    %eax
f01288cc:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01288d2:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01288d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01288dd:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01288e3:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01288e9:	29 d0                	sub    %edx,%eax
f01288eb:	01 c3                	add    %eax,%ebx
f01288ed:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01288f4:	10 00 00 
f01288f7:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01288fc:	0f b6 c0             	movzbl %al,%eax
f01288ff:	c1 e0 04             	shl    $0x4,%eax
f0128902:	89 c2                	mov    %eax,%edx
f0128904:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012890a:	01 d0                	add    %edx,%eax
f012890c:	48                   	dec    %eax
f012890d:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0128913:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128919:	ba 00 00 00 00       	mov    $0x0,%edx
f012891e:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0128924:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012892a:	29 d0                	sub    %edx,%eax
f012892c:	01 d8                	add    %ebx,%eax
f012892e:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0128933:	39 c1                	cmp    %eax,%ecx
f0128935:	74 17                	je     f012894e <test_kexpand+0x64b>
f0128937:	83 ec 04             	sub    $0x4,%esp
f012893a:	68 e0 b9 13 f0       	push   $0xf013b9e0
f012893f:	68 71 0b 00 00       	push   $0xb71
f0128944:	68 fa b8 13 f0       	push   $0xf013b8fa
f0128949:	e8 b7 78 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012894e:	e8 75 b4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128953:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128956:	74 17                	je     f012896f <test_kexpand+0x66c>
f0128958:	83 ec 04             	sub    $0x4,%esp
f012895b:	68 14 b9 13 f0       	push   $0xf013b914
f0128960:	68 72 0b 00 00       	push   $0xb72
f0128965:	68 fa b8 13 f0       	push   $0xf013b8fa
f012896a:	e8 96 78 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012896f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128972:	e8 20 48 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0128977:	29 c3                	sub    %eax,%ebx
f0128979:	89 d8                	mov    %ebx,%eax
f012897b:	83 f8 02             	cmp    $0x2,%eax
f012897e:	74 17                	je     f0128997 <test_kexpand+0x694>
f0128980:	83 ec 04             	sub    $0x4,%esp
f0128983:	68 7c b9 13 f0       	push   $0xf013b97c
f0128988:	68 73 0b 00 00       	push   $0xb73
f012898d:	68 fa b8 13 f0       	push   $0xf013b8fa
f0128992:	e8 6e 78 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0128997:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f012899e:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01289a1:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01289a7:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01289aa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01289b1:	eb 0e                	jmp    f01289c1 <test_kexpand+0x6be>
		{
			ptr[i] = 4 ;
f01289b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01289b6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01289b9:	01 d0                	add    %edx,%eax
f01289bb:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01289be:	ff 45 f4             	incl   -0xc(%ebp)
f01289c1:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01289c7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01289ca:	7f e7                	jg     f01289b3 <test_kexpand+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01289cc:	e8 c6 47 fe ff       	call   f010d197 <sys_calculate_free_frames>
f01289d1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01289d4:	e8 ef b3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01289d9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01289dc:	83 ec 0c             	sub    $0xc,%esp
f01289df:	68 00 fc 2f 00       	push   $0x2ffc00
f01289e4:	e8 a2 f3 fd ff       	call   f0107d8b <kmalloc>
f01289e9:	83 c4 10             	add    $0x10,%esp
f01289ec:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01289f2:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01289f8:	89 c1                	mov    %eax,%ecx
f01289fa:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0128a01:	10 00 00 
f0128a04:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0128a0a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128a0f:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0128a15:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128a1b:	ba 00 00 00 00       	mov    $0x0,%edx
f0128a20:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0128a26:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128a2c:	29 d0                	sub    %edx,%eax
f0128a2e:	89 c3                	mov    %eax,%ebx
f0128a30:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0128a37:	10 00 00 
f0128a3a:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0128a3f:	0f b6 d0             	movzbl %al,%edx
f0128a42:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0128a48:	01 d0                	add    %edx,%eax
f0128a4a:	48                   	dec    %eax
f0128a4b:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0128a51:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128a57:	ba 00 00 00 00       	mov    $0x0,%edx
f0128a5c:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0128a62:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128a68:	29 d0                	sub    %edx,%eax
f0128a6a:	01 c3                	add    %eax,%ebx
f0128a6c:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0128a73:	10 00 00 
f0128a76:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0128a7b:	0f b6 c0             	movzbl %al,%eax
f0128a7e:	c1 e0 04             	shl    $0x4,%eax
f0128a81:	89 c2                	mov    %eax,%edx
f0128a83:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0128a89:	01 d0                	add    %edx,%eax
f0128a8b:	48                   	dec    %eax
f0128a8c:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0128a92:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0128a98:	ba 00 00 00 00       	mov    $0x0,%edx
f0128a9d:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0128aa3:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0128aa9:	29 d0                	sub    %edx,%eax
f0128aab:	01 d8                	add    %ebx,%eax
f0128aad:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0128ab2:	39 c1                	cmp    %eax,%ecx
f0128ab4:	74 17                	je     f0128acd <test_kexpand+0x7ca>
f0128ab6:	83 ec 04             	sub    $0x4,%esp
f0128ab9:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0128abe:	68 7f 0b 00 00       	push   $0xb7f
f0128ac3:	68 fa b8 13 f0       	push   $0xf013b8fa
f0128ac8:	e8 38 77 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128acd:	e8 f6 b2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128ad2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128ad5:	74 17                	je     f0128aee <test_kexpand+0x7eb>
f0128ad7:	83 ec 04             	sub    $0x4,%esp
f0128ada:	68 14 b9 13 f0       	push   $0xf013b914
f0128adf:	68 80 0b 00 00       	push   $0xb80
f0128ae4:	68 fa b8 13 f0       	push   $0xf013b8fa
f0128ae9:	e8 17 77 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128aee:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128af1:	e8 a1 46 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0128af6:	29 c3                	sub    %eax,%ebx
f0128af8:	89 d8                	mov    %ebx,%eax
f0128afa:	3d 00 03 00 00       	cmp    $0x300,%eax
f0128aff:	74 17                	je     f0128b18 <test_kexpand+0x815>
f0128b01:	83 ec 04             	sub    $0x4,%esp
f0128b04:	68 7c b9 13 f0       	push   $0xf013b97c
f0128b09:	68 81 0b 00 00       	push   $0xb81
f0128b0e:	68 fa b8 13 f0       	push   $0xf013b8fa
f0128b13:	e8 ed 76 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0128b18:	c7 85 d0 fe ff ff ff 	movl   $0x2ffbff,-0x130(%ebp)
f0128b1f:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0128b22:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0128b28:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0128b2b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128b32:	eb 0e                	jmp    f0128b42 <test_kexpand+0x83f>
		{
			ptr[i] = 5 ;
f0128b34:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128b37:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128b3a:	01 d0                	add    %edx,%eax
f0128b3c:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0128b3f:	ff 45 f4             	incl   -0xc(%ebp)
f0128b42:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0128b48:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128b4b:	7f e7                	jg     f0128b34 <test_kexpand+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0128b4d:	e8 45 46 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0128b52:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128b55:	e8 6e b2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128b5a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0128b5d:	83 ec 0c             	sub    $0xc,%esp
f0128b60:	68 00 00 60 00       	push   $0x600000
f0128b65:	e8 21 f2 fd ff       	call   f0107d8b <kmalloc>
f0128b6a:	83 c4 10             	add    $0x10,%esp
f0128b6d:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128b73:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0128b79:	89 c1                	mov    %eax,%ecx
f0128b7b:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0128b82:	10 00 00 
f0128b85:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0128b8b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128b90:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0128b96:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128b9c:	ba 00 00 00 00       	mov    $0x0,%edx
f0128ba1:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0128ba7:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128bad:	29 d0                	sub    %edx,%eax
f0128baf:	89 c3                	mov    %eax,%ebx
f0128bb1:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0128bb8:	10 00 00 
f0128bbb:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0128bc0:	0f b6 d0             	movzbl %al,%edx
f0128bc3:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0128bc9:	01 d0                	add    %edx,%eax
f0128bcb:	48                   	dec    %eax
f0128bcc:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0128bd2:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128bd8:	ba 00 00 00 00       	mov    $0x0,%edx
f0128bdd:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0128be3:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128be9:	29 d0                	sub    %edx,%eax
f0128beb:	01 c3                	add    %eax,%ebx
f0128bed:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0128bf4:	10 00 00 
f0128bf7:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0128bfc:	0f b6 c0             	movzbl %al,%eax
f0128bff:	c1 e0 04             	shl    $0x4,%eax
f0128c02:	89 c2                	mov    %eax,%edx
f0128c04:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0128c0a:	01 d0                	add    %edx,%eax
f0128c0c:	48                   	dec    %eax
f0128c0d:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0128c13:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128c19:	ba 00 00 00 00       	mov    $0x0,%edx
f0128c1e:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0128c24:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128c2a:	29 d0                	sub    %edx,%eax
f0128c2c:	01 d8                	add    %ebx,%eax
f0128c2e:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0128c33:	39 c1                	cmp    %eax,%ecx
f0128c35:	74 17                	je     f0128c4e <test_kexpand+0x94b>
f0128c37:	83 ec 04             	sub    $0x4,%esp
f0128c3a:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0128c3f:	68 8d 0b 00 00       	push   $0xb8d
f0128c44:	68 fa b8 13 f0       	push   $0xf013b8fa
f0128c49:	e8 b7 75 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128c4e:	e8 75 b1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128c53:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128c56:	74 17                	je     f0128c6f <test_kexpand+0x96c>
f0128c58:	83 ec 04             	sub    $0x4,%esp
f0128c5b:	68 14 b9 13 f0       	push   $0xf013b914
f0128c60:	68 8e 0b 00 00       	push   $0xb8e
f0128c65:	68 fa b8 13 f0       	push   $0xf013b8fa
f0128c6a:	e8 96 75 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128c6f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128c72:	e8 20 45 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0128c77:	29 c3                	sub    %eax,%ebx
f0128c79:	89 d8                	mov    %ebx,%eax
f0128c7b:	3d 00 06 00 00       	cmp    $0x600,%eax
f0128c80:	74 17                	je     f0128c99 <test_kexpand+0x996>
f0128c82:	83 ec 04             	sub    $0x4,%esp
f0128c85:	68 7c b9 13 f0       	push   $0xf013b97c
f0128c8a:	68 8f 0b 00 00       	push   $0xb8f
f0128c8f:	68 fa b8 13 f0       	push   $0xf013b8fa
f0128c94:	e8 6c 75 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0128c99:	c7 85 d4 fe ff ff ff 	movl   $0x17ffff,-0x12c(%ebp)
f0128ca0:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0128ca3:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0128ca9:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0128caf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128cb6:	eb 1a                	jmp    f0128cd2 <test_kexpand+0x9cf>
		{
			arr[i] = i ;
f0128cb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128cbb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128cc2:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128cc8:	01 c2                	add    %eax,%edx
f0128cca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128ccd:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0128ccf:	ff 45 f4             	incl   -0xc(%ebp)
f0128cd2:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0128cd8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128cdb:	7d db                	jge    f0128cb8 <test_kexpand+0x9b5>
			arr[i] = i ;
		}
	}

	//Expand last allocated variable to 7 MB instead of 6 MB
	int newLastIndex = (7*Mega)/sizeof(uint32) - 1;
f0128cdd:	c7 85 24 ff ff ff ff 	movl   $0x1bffff,-0xdc(%ebp)
f0128ce4:	ff 1b 00 
	{
		freeFrames = sys_calculate_free_frames() ;
f0128ce7:	e8 ab 44 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0128cec:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128cef:	e8 d4 b0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128cf4:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(7*Mega) ;
f0128cf7:	83 ec 0c             	sub    $0xc,%esp
f0128cfa:	68 00 00 70 00       	push   $0x700000
f0128cff:	e8 2a f3 fd ff       	call   f010802e <kexpand>
f0128d04:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128d07:	e8 bc b0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128d0c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128d0f:	74 19                	je     f0128d2a <test_kexpand+0xa27>
f0128d11:	68 94 c6 13 f0       	push   $0xf013c694
f0128d16:	68 c5 c6 13 f0       	push   $0xf013c6c5
f0128d1b:	68 a0 0b 00 00       	push   $0xba0
f0128d20:	68 fa b8 13 f0       	push   $0xf013b8fa
f0128d25:	e8 db 74 fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 256) ;
f0128d2a:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128d2d:	e8 65 44 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0128d32:	29 c3                	sub    %eax,%ebx
f0128d34:	89 d8                	mov    %ebx,%eax
f0128d36:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128d3b:	74 19                	je     f0128d56 <test_kexpand+0xa53>
f0128d3d:	68 dc c6 13 f0       	push   $0xf013c6dc
f0128d42:	68 c5 c6 13 f0       	push   $0xf013c6c5
f0128d47:	68 a1 0b 00 00       	push   $0xba1
f0128d4c:	68 fa b8 13 f0       	push   $0xf013b8fa
f0128d51:	e8 af 74 fd ff       	call   f0100205 <_panic>

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0128d56:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0128d5c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0128d5f:	eb 1a                	jmp    f0128d7b <test_kexpand+0xa78>
		{
			arr[i] = i ;
f0128d61:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128d64:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128d6b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128d71:	01 c2                	add    %eax,%edx
f0128d73:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128d76:	89 02                	mov    %eax,(%edx)
		kexpand(7*Mega) ;

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
		assert(freeFrames - sys_calculate_free_frames() == 256) ;

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0128d78:	ff 45 f4             	incl   -0xc(%ebp)
f0128d7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128d7e:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0128d84:	7c db                	jl     f0128d61 <test_kexpand+0xa5e>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0128d86:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128d8d:	eb 37                	jmp    f0128dc6 <test_kexpand+0xac3>
		{
			assert(arr[i] ==i);
f0128d8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128d92:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128d99:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128d9f:	01 d0                	add    %edx,%eax
f0128da1:	8b 10                	mov    (%eax),%edx
f0128da3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128da6:	39 c2                	cmp    %eax,%edx
f0128da8:	74 19                	je     f0128dc3 <test_kexpand+0xac0>
f0128daa:	68 0c c7 13 f0       	push   $0xf013c70c
f0128daf:	68 c5 c6 13 f0       	push   $0xf013c6c5
f0128db4:	68 ad 0b 00 00       	push   $0xbad
f0128db9:	68 fa b8 13 f0       	push   $0xf013b8fa
f0128dbe:	e8 42 74 fd ff       	call   f0100205 <_panic>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0128dc3:	ff 45 f4             	incl   -0xc(%ebp)
f0128dc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128dc9:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0128dcf:	7c be                	jl     f0128d8f <test_kexpand+0xa8c>
		}
	}

	//Expand it again to 10 MB instead of 7 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128dd1:	e8 c1 43 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0128dd6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128dd9:	e8 ea af fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128dde:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(10*Mega) ;
f0128de1:	83 ec 0c             	sub    $0xc,%esp
f0128de4:	68 00 00 a0 00       	push   $0xa00000
f0128de9:	e8 40 f2 fd ff       	call   f010802e <kexpand>
f0128dee:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128df1:	e8 d2 af fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128df6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128df9:	74 19                	je     f0128e14 <test_kexpand+0xb11>
f0128dfb:	68 94 c6 13 f0       	push   $0xf013c694
f0128e00:	68 c5 c6 13 f0       	push   $0xf013c6c5
f0128e05:	68 b8 0b 00 00       	push   $0xbb8
f0128e0a:	68 fa b8 13 f0       	push   $0xf013b8fa
f0128e0f:	e8 f1 73 fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 768) ;
f0128e14:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128e17:	e8 7b 43 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0128e1c:	29 c3                	sub    %eax,%ebx
f0128e1e:	89 d8                	mov    %ebx,%eax
f0128e20:	3d 00 03 00 00       	cmp    $0x300,%eax
f0128e25:	74 19                	je     f0128e40 <test_kexpand+0xb3d>
f0128e27:	68 18 c7 13 f0       	push   $0xf013c718
f0128e2c:	68 c5 c6 13 f0       	push   $0xf013c6c5
f0128e31:	68 b9 0b 00 00       	push   $0xbb9
f0128e36:	68 fa b8 13 f0       	push   $0xf013b8fa
f0128e3b:	e8 c5 73 fd ff       	call   f0100205 <_panic>


	//Allocate after expanding last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0128e40:	e8 52 43 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0128e45:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128e48:	e8 7b af fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128e4d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0128e50:	83 ec 0c             	sub    $0xc,%esp
f0128e53:	68 00 00 40 00       	push   $0x400000
f0128e58:	e8 2e ef fd ff       	call   f0107d8b <kmalloc>
f0128e5d:	83 c4 10             	add    $0x10,%esp
f0128e60:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)

		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 10*Mega)) panic("Wrong start address after kexpand()... ");
f0128e66:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0128e6c:	89 c1                	mov    %eax,%ecx
f0128e6e:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0128e75:	10 00 00 
f0128e78:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0128e7e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128e83:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0128e89:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128e8f:	ba 00 00 00 00       	mov    $0x0,%edx
f0128e94:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0128e9a:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128ea0:	29 d0                	sub    %edx,%eax
f0128ea2:	89 c3                	mov    %eax,%ebx
f0128ea4:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0128eab:	10 00 00 
f0128eae:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0128eb3:	0f b6 d0             	movzbl %al,%edx
f0128eb6:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0128ebc:	01 d0                	add    %edx,%eax
f0128ebe:	48                   	dec    %eax
f0128ebf:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0128ec5:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128ecb:	ba 00 00 00 00       	mov    $0x0,%edx
f0128ed0:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0128ed6:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128edc:	29 d0                	sub    %edx,%eax
f0128ede:	01 c3                	add    %eax,%ebx
f0128ee0:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0128ee7:	10 00 00 
f0128eea:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0128eef:	0f b6 c0             	movzbl %al,%eax
f0128ef2:	c1 e0 04             	shl    $0x4,%eax
f0128ef5:	89 c2                	mov    %eax,%edx
f0128ef7:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0128efd:	01 d0                	add    %edx,%eax
f0128eff:	48                   	dec    %eax
f0128f00:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0128f06:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128f0c:	ba 00 00 00 00       	mov    $0x0,%edx
f0128f11:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0128f17:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128f1d:	29 d0                	sub    %edx,%eax
f0128f1f:	01 d8                	add    %ebx,%eax
f0128f21:	2d 00 80 ef 08       	sub    $0x8ef8000,%eax
f0128f26:	39 c1                	cmp    %eax,%ecx
f0128f28:	74 17                	je     f0128f41 <test_kexpand+0xc3e>
f0128f2a:	83 ec 04             	sub    $0x4,%esp
f0128f2d:	68 48 c7 13 f0       	push   $0xf013c748
f0128f32:	68 c4 0b 00 00       	push   $0xbc4
f0128f37:	68 fa b8 13 f0       	push   $0xf013b8fa
f0128f3c:	e8 c4 72 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128f41:	e8 82 ae fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128f46:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128f49:	74 17                	je     f0128f62 <test_kexpand+0xc5f>
f0128f4b:	83 ec 04             	sub    $0x4,%esp
f0128f4e:	68 14 b9 13 f0       	push   $0xf013b914
f0128f53:	68 c5 0b 00 00       	push   $0xbc5
f0128f58:	68 fa b8 13 f0       	push   $0xf013b8fa
f0128f5d:	e8 a3 72 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128f62:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128f65:	e8 2d 42 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0128f6a:	29 c3                	sub    %eax,%ebx
f0128f6c:	89 d8                	mov    %ebx,%eax
f0128f6e:	3d 00 04 00 00       	cmp    $0x400,%eax
f0128f73:	74 17                	je     f0128f8c <test_kexpand+0xc89>
f0128f75:	83 ec 04             	sub    $0x4,%esp
f0128f78:	68 7c b9 13 f0       	push   $0xf013b97c
f0128f7d:	68 c6 0b 00 00       	push   $0xbc6
f0128f82:	68 fa b8 13 f0       	push   $0xf013b8fa
f0128f87:	e8 79 72 fd ff       	call   f0100205 <_panic>
	}

	//kfree the expanded variable
	{
		//kfree 10 MB (expanded)
		freeFrames = sys_calculate_free_frames() ;
f0128f8c:	e8 06 42 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0128f91:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128f94:	e8 2f ae fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128f99:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0128f9c:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0128fa2:	83 ec 0c             	sub    $0xc,%esp
f0128fa5:	50                   	push   %eax
f0128fa6:	e8 ab ee fd ff       	call   f0107e56 <kfree>
f0128fab:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128fae:	e8 15 ae fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128fb3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128fb6:	74 17                	je     f0128fcf <test_kexpand+0xccc>
f0128fb8:	83 ec 04             	sub    $0x4,%esp
f0128fbb:	68 14 b9 13 f0       	push   $0xf013b914
f0128fc0:	68 cf 0b 00 00       	push   $0xbcf
f0128fc5:	68 fa b8 13 f0       	push   $0xf013b8fa
f0128fca:	e8 36 72 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 10*Mega/PAGE_SIZE) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0128fcf:	e8 c3 41 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0128fd4:	89 c2                	mov    %eax,%edx
f0128fd6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0128fd9:	29 c2                	sub    %eax,%edx
f0128fdb:	89 d0                	mov    %edx,%eax
f0128fdd:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f0128fe2:	74 17                	je     f0128ffb <test_kexpand+0xcf8>
f0128fe4:	83 ec 04             	sub    $0x4,%esp
f0128fe7:	68 ac c1 13 f0       	push   $0xf013c1ac
f0128fec:	68 d0 0b 00 00       	push   $0xbd0
f0128ff1:	68 fa b8 13 f0       	push   $0xf013b8fa
f0128ff6:	e8 0a 72 fd ff       	call   f0100205 <_panic>
	}

	//Expand last allocated variable to 4 MB + 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128ffb:	e8 97 41 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0129000:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129003:	e8 c0 ad fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129008:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(4*Mega + 20*kilo) ;
f012900b:	83 ec 0c             	sub    $0xc,%esp
f012900e:	68 00 50 40 00       	push   $0x405000
f0129013:	e8 16 f0 fd ff       	call   f010802e <kexpand>
f0129018:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f012901b:	e8 a8 ad fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129020:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129023:	74 19                	je     f012903e <test_kexpand+0xd3b>
f0129025:	68 94 c6 13 f0       	push   $0xf013c694
f012902a:	68 c5 c6 13 f0       	push   $0xf013c6c5
f012902f:	68 da 0b 00 00       	push   $0xbda
f0129034:	68 fa b8 13 f0       	push   $0xf013b8fa
f0129039:	e8 c7 71 fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames()  == 5) ;
f012903e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129041:	e8 51 41 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0129046:	29 c3                	sub    %eax,%ebx
f0129048:	89 d8                	mov    %ebx,%eax
f012904a:	83 f8 05             	cmp    $0x5,%eax
f012904d:	74 19                	je     f0129068 <test_kexpand+0xd65>
f012904f:	68 70 c7 13 f0       	push   $0xf013c770
f0129054:	68 c5 c6 13 f0       	push   $0xf013c6c5
f0129059:	68 db 0b 00 00       	push   $0xbdb
f012905e:	68 fa b8 13 f0       	push   $0xf013b8fa
f0129063:	e8 9d 71 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0129068:	83 ec 0c             	sub    $0xc,%esp
f012906b:	68 58 c6 13 f0       	push   $0xf013c658
f0129070:	e8 99 7c fd ff       	call   f0100d0e <cprintf>
f0129075:	83 c4 10             	add    $0x10,%esp

	return 1;
f0129078:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012907d:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0129080:	5b                   	pop    %ebx
f0129081:	5f                   	pop    %edi
f0129082:	5d                   	pop    %ebp
f0129083:	c3                   	ret    

f0129084 <test_kshrink>:

extern void kshrink(uint32 newSize) ;

int test_kshrink()
{
f0129084:	55                   	push   %ebp
f0129085:	89 e5                	mov    %esp,%ebp
f0129087:	57                   	push   %edi
f0129088:	53                   	push   %ebx
f0129089:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	char minByte = 1<<7;
f012908f:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0129093:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0129097:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f012909d:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f01290a3:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f01290aa:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01290b1:	e8 e1 40 fe ff       	call   f010d197 <sys_calculate_free_frames>
f01290b6:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01290b9:	8d 95 a4 fe ff ff    	lea    -0x15c(%ebp),%edx
f01290bf:	b9 14 00 00 00       	mov    $0x14,%ecx
f01290c4:	b8 00 00 00 00       	mov    $0x0,%eax
f01290c9:	89 d7                	mov    %edx,%edi
f01290cb:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f01290cd:	8d 95 54 fe ff ff    	lea    -0x1ac(%ebp),%edx
f01290d3:	b9 14 00 00 00       	mov    $0x14,%ecx
f01290d8:	b8 00 00 00 00       	mov    $0x0,%eax
f01290dd:	89 d7                	mov    %edx,%edi
f01290df:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01290e1:	e8 b1 40 fe ff       	call   f010d197 <sys_calculate_free_frames>
f01290e6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01290e9:	e8 da ac fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01290ee:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01290f1:	83 ec 0c             	sub    $0xc,%esp
f01290f4:	68 00 fc 1f 00       	push   $0x1ffc00
f01290f9:	e8 8d ec fd ff       	call   f0107d8b <kmalloc>
f01290fe:	83 c4 10             	add    $0x10,%esp
f0129101:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129107:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012910d:	89 c1                	mov    %eax,%ecx
f012910f:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0129116:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129119:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012911e:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0129121:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0129124:	ba 00 00 00 00       	mov    $0x0,%edx
f0129129:	f7 75 d4             	divl   -0x2c(%ebp)
f012912c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012912f:	29 d0                	sub    %edx,%eax
f0129131:	89 c3                	mov    %eax,%ebx
f0129133:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f012913a:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012913f:	0f b6 d0             	movzbl %al,%edx
f0129142:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0129145:	01 d0                	add    %edx,%eax
f0129147:	48                   	dec    %eax
f0129148:	89 45 c8             	mov    %eax,-0x38(%ebp)
f012914b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012914e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129153:	f7 75 cc             	divl   -0x34(%ebp)
f0129156:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0129159:	29 d0                	sub    %edx,%eax
f012915b:	01 c3                	add    %eax,%ebx
f012915d:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0129164:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0129169:	0f b6 c0             	movzbl %al,%eax
f012916c:	c1 e0 04             	shl    $0x4,%eax
f012916f:	89 c2                	mov    %eax,%edx
f0129171:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0129174:	01 d0                	add    %edx,%eax
f0129176:	48                   	dec    %eax
f0129177:	89 45 c0             	mov    %eax,-0x40(%ebp)
f012917a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012917d:	ba 00 00 00 00       	mov    $0x0,%edx
f0129182:	f7 75 c4             	divl   -0x3c(%ebp)
f0129185:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0129188:	29 d0                	sub    %edx,%eax
f012918a:	01 d8                	add    %ebx,%eax
f012918c:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0129191:	39 c1                	cmp    %eax,%ecx
f0129193:	74 17                	je     f01291ac <test_kshrink+0x128>
f0129195:	83 ec 04             	sub    $0x4,%esp
f0129198:	68 e0 b9 13 f0       	push   $0xf013b9e0
f012919d:	68 01 0c 00 00       	push   $0xc01
f01291a2:	68 fa b8 13 f0       	push   $0xf013b8fa
f01291a7:	e8 59 70 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01291ac:	e8 17 ac fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01291b1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01291b4:	74 17                	je     f01291cd <test_kshrink+0x149>
f01291b6:	83 ec 04             	sub    $0x4,%esp
f01291b9:	68 14 b9 13 f0       	push   $0xf013b914
f01291be:	68 02 0c 00 00       	push   $0xc02
f01291c3:	68 fa b8 13 f0       	push   $0xf013b8fa
f01291c8:	e8 38 70 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01291cd:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01291d0:	e8 c2 3f fe ff       	call   f010d197 <sys_calculate_free_frames>
f01291d5:	29 c3                	sub    %eax,%ebx
f01291d7:	89 d8                	mov    %ebx,%eax
f01291d9:	3d 00 02 00 00       	cmp    $0x200,%eax
f01291de:	74 17                	je     f01291f7 <test_kshrink+0x173>
f01291e0:	83 ec 04             	sub    $0x4,%esp
f01291e3:	68 7c b9 13 f0       	push   $0xf013b97c
f01291e8:	68 03 0c 00 00       	push   $0xc03
f01291ed:	68 fa b8 13 f0       	push   $0xf013b8fa
f01291f2:	e8 0e 70 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f01291f7:	c7 85 a4 fe ff ff ff 	movl   $0x1ffbff,-0x15c(%ebp)
f01291fe:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129201:	e8 91 3f fe ff       	call   f010d197 <sys_calculate_free_frames>
f0129206:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129209:	e8 ba ab fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012920e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0129211:	83 ec 0c             	sub    $0xc,%esp
f0129214:	68 00 fc 1f 00       	push   $0x1ffc00
f0129219:	e8 6d eb fd ff       	call   f0107d8b <kmalloc>
f012921e:	83 c4 10             	add    $0x10,%esp
f0129221:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129227:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012922d:	89 c1                	mov    %eax,%ecx
f012922f:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0129236:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0129239:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012923e:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0129241:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0129244:	ba 00 00 00 00       	mov    $0x0,%edx
f0129249:	f7 75 bc             	divl   -0x44(%ebp)
f012924c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012924f:	29 d0                	sub    %edx,%eax
f0129251:	89 c3                	mov    %eax,%ebx
f0129253:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012925a:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012925f:	0f b6 d0             	movzbl %al,%edx
f0129262:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0129265:	01 d0                	add    %edx,%eax
f0129267:	48                   	dec    %eax
f0129268:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012926b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012926e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129273:	f7 75 b4             	divl   -0x4c(%ebp)
f0129276:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0129279:	29 d0                	sub    %edx,%eax
f012927b:	01 c3                	add    %eax,%ebx
f012927d:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0129284:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0129289:	0f b6 c0             	movzbl %al,%eax
f012928c:	c1 e0 04             	shl    $0x4,%eax
f012928f:	89 c2                	mov    %eax,%edx
f0129291:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0129294:	01 d0                	add    %edx,%eax
f0129296:	48                   	dec    %eax
f0129297:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012929a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012929d:	ba 00 00 00 00       	mov    $0x0,%edx
f01292a2:	f7 75 ac             	divl   -0x54(%ebp)
f01292a5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01292a8:	29 d0                	sub    %edx,%eax
f01292aa:	01 d8                	add    %ebx,%eax
f01292ac:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01292b1:	39 c1                	cmp    %eax,%ecx
f01292b3:	74 17                	je     f01292cc <test_kshrink+0x248>
f01292b5:	83 ec 04             	sub    $0x4,%esp
f01292b8:	68 e0 b9 13 f0       	push   $0xf013b9e0
f01292bd:	68 0a 0c 00 00       	push   $0xc0a
f01292c2:	68 fa b8 13 f0       	push   $0xf013b8fa
f01292c7:	e8 39 6f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01292cc:	e8 f7 aa fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01292d1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01292d4:	74 17                	je     f01292ed <test_kshrink+0x269>
f01292d6:	83 ec 04             	sub    $0x4,%esp
f01292d9:	68 14 b9 13 f0       	push   $0xf013b914
f01292de:	68 0b 0c 00 00       	push   $0xc0b
f01292e3:	68 fa b8 13 f0       	push   $0xf013b8fa
f01292e8:	e8 18 6f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01292ed:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01292f0:	e8 a2 3e fe ff       	call   f010d197 <sys_calculate_free_frames>
f01292f5:	29 c3                	sub    %eax,%ebx
f01292f7:	89 d8                	mov    %ebx,%eax
f01292f9:	3d 00 02 00 00       	cmp    $0x200,%eax
f01292fe:	74 17                	je     f0129317 <test_kshrink+0x293>
f0129300:	83 ec 04             	sub    $0x4,%esp
f0129303:	68 7c b9 13 f0       	push   $0xf013b97c
f0129308:	68 0c 0c 00 00       	push   $0xc0c
f012930d:	68 fa b8 13 f0       	push   $0xf013b8fa
f0129312:	e8 ee 6e fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0129317:	c7 85 a8 fe ff ff ff 	movl   $0x1ffbff,-0x158(%ebp)
f012931e:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129321:	e8 71 3e fe ff       	call   f010d197 <sys_calculate_free_frames>
f0129326:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129329:	e8 9a aa fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012932e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0129331:	83 ec 0c             	sub    $0xc,%esp
f0129334:	68 00 08 00 00       	push   $0x800
f0129339:	e8 4d ea fd ff       	call   f0107d8b <kmalloc>
f012933e:	83 c4 10             	add    $0x10,%esp
f0129341:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129347:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012934d:	89 c1                	mov    %eax,%ecx
f012934f:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0129356:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0129359:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012935e:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0129361:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0129364:	ba 00 00 00 00       	mov    $0x0,%edx
f0129369:	f7 75 a4             	divl   -0x5c(%ebp)
f012936c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012936f:	29 d0                	sub    %edx,%eax
f0129371:	89 c3                	mov    %eax,%ebx
f0129373:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012937a:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012937f:	0f b6 d0             	movzbl %al,%edx
f0129382:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129385:	01 d0                	add    %edx,%eax
f0129387:	48                   	dec    %eax
f0129388:	89 45 98             	mov    %eax,-0x68(%ebp)
f012938b:	8b 45 98             	mov    -0x68(%ebp),%eax
f012938e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129393:	f7 75 9c             	divl   -0x64(%ebp)
f0129396:	8b 45 98             	mov    -0x68(%ebp),%eax
f0129399:	29 d0                	sub    %edx,%eax
f012939b:	01 c3                	add    %eax,%ebx
f012939d:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01293a4:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01293a9:	0f b6 c0             	movzbl %al,%eax
f01293ac:	c1 e0 04             	shl    $0x4,%eax
f01293af:	89 c2                	mov    %eax,%edx
f01293b1:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01293b4:	01 d0                	add    %edx,%eax
f01293b6:	48                   	dec    %eax
f01293b7:	89 45 90             	mov    %eax,-0x70(%ebp)
f01293ba:	8b 45 90             	mov    -0x70(%ebp),%eax
f01293bd:	ba 00 00 00 00       	mov    $0x0,%edx
f01293c2:	f7 75 94             	divl   -0x6c(%ebp)
f01293c5:	8b 45 90             	mov    -0x70(%ebp),%eax
f01293c8:	29 d0                	sub    %edx,%eax
f01293ca:	01 d8                	add    %ebx,%eax
f01293cc:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01293d1:	39 c1                	cmp    %eax,%ecx
f01293d3:	74 17                	je     f01293ec <test_kshrink+0x368>
f01293d5:	83 ec 04             	sub    $0x4,%esp
f01293d8:	68 e0 b9 13 f0       	push   $0xf013b9e0
f01293dd:	68 13 0c 00 00       	push   $0xc13
f01293e2:	68 fa b8 13 f0       	push   $0xf013b8fa
f01293e7:	e8 19 6e fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01293ec:	e8 d7 a9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01293f1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01293f4:	74 17                	je     f012940d <test_kshrink+0x389>
f01293f6:	83 ec 04             	sub    $0x4,%esp
f01293f9:	68 14 b9 13 f0       	push   $0xf013b914
f01293fe:	68 14 0c 00 00       	push   $0xc14
f0129403:	68 fa b8 13 f0       	push   $0xf013b8fa
f0129408:	e8 f8 6d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012940d:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129410:	e8 82 3d fe ff       	call   f010d197 <sys_calculate_free_frames>
f0129415:	29 c3                	sub    %eax,%ebx
f0129417:	89 d8                	mov    %ebx,%eax
f0129419:	83 f8 01             	cmp    $0x1,%eax
f012941c:	74 17                	je     f0129435 <test_kshrink+0x3b1>
f012941e:	83 ec 04             	sub    $0x4,%esp
f0129421:	68 7c b9 13 f0       	push   $0xf013b97c
f0129426:	68 15 0c 00 00       	push   $0xc15
f012942b:	68 fa b8 13 f0       	push   $0xf013b8fa
f0129430:	e8 d0 6d fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0129435:	c7 85 ac fe ff ff ff 	movl   $0x7ff,-0x154(%ebp)
f012943c:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f012943f:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0129445:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0129448:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012944f:	eb 0e                	jmp    f012945f <test_kshrink+0x3db>
		{
			ptr[i] = 2 ;
f0129451:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129454:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129457:	01 d0                	add    %edx,%eax
f0129459:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012945c:	ff 45 f4             	incl   -0xc(%ebp)
f012945f:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0129465:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129468:	7f e7                	jg     f0129451 <test_kshrink+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012946a:	e8 28 3d fe ff       	call   f010d197 <sys_calculate_free_frames>
f012946f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129472:	e8 51 a9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129477:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012947a:	83 ec 0c             	sub    $0xc,%esp
f012947d:	68 00 08 00 00       	push   $0x800
f0129482:	e8 04 e9 fd ff       	call   f0107d8b <kmalloc>
f0129487:	83 c4 10             	add    $0x10,%esp
f012948a:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129490:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0129496:	89 c1                	mov    %eax,%ecx
f0129498:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f012949f:	8b 45 88             	mov    -0x78(%ebp),%eax
f01294a2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01294a7:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01294aa:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01294ad:	ba 00 00 00 00       	mov    $0x0,%edx
f01294b2:	f7 75 88             	divl   -0x78(%ebp)
f01294b5:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01294b8:	29 d0                	sub    %edx,%eax
f01294ba:	89 c3                	mov    %eax,%ebx
f01294bc:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01294c3:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01294c8:	0f b6 d0             	movzbl %al,%edx
f01294cb:	8b 45 80             	mov    -0x80(%ebp),%eax
f01294ce:	01 d0                	add    %edx,%eax
f01294d0:	48                   	dec    %eax
f01294d1:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01294d7:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01294dd:	ba 00 00 00 00       	mov    $0x0,%edx
f01294e2:	f7 75 80             	divl   -0x80(%ebp)
f01294e5:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01294eb:	29 d0                	sub    %edx,%eax
f01294ed:	01 c3                	add    %eax,%ebx
f01294ef:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01294f6:	10 00 00 
f01294f9:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01294fe:	0f b6 c0             	movzbl %al,%eax
f0129501:	c1 e0 04             	shl    $0x4,%eax
f0129504:	89 c2                	mov    %eax,%edx
f0129506:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012950c:	01 d0                	add    %edx,%eax
f012950e:	48                   	dec    %eax
f012950f:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0129515:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012951b:	ba 00 00 00 00       	mov    $0x0,%edx
f0129520:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0129526:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012952c:	29 d0                	sub    %edx,%eax
f012952e:	01 d8                	add    %ebx,%eax
f0129530:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0129535:	39 c1                	cmp    %eax,%ecx
f0129537:	74 17                	je     f0129550 <test_kshrink+0x4cc>
f0129539:	83 ec 04             	sub    $0x4,%esp
f012953c:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0129541:	68 21 0c 00 00       	push   $0xc21
f0129546:	68 fa b8 13 f0       	push   $0xf013b8fa
f012954b:	e8 b5 6c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129550:	e8 73 a8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129555:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129558:	74 17                	je     f0129571 <test_kshrink+0x4ed>
f012955a:	83 ec 04             	sub    $0x4,%esp
f012955d:	68 14 b9 13 f0       	push   $0xf013b914
f0129562:	68 22 0c 00 00       	push   $0xc22
f0129567:	68 fa b8 13 f0       	push   $0xf013b8fa
f012956c:	e8 94 6c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129571:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129574:	e8 1e 3c fe ff       	call   f010d197 <sys_calculate_free_frames>
f0129579:	29 c3                	sub    %eax,%ebx
f012957b:	89 d8                	mov    %ebx,%eax
f012957d:	83 f8 01             	cmp    $0x1,%eax
f0129580:	74 17                	je     f0129599 <test_kshrink+0x515>
f0129582:	83 ec 04             	sub    $0x4,%esp
f0129585:	68 7c b9 13 f0       	push   $0xf013b97c
f012958a:	68 23 0c 00 00       	push   $0xc23
f012958f:	68 fa b8 13 f0       	push   $0xf013b8fa
f0129594:	e8 6c 6c fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0129599:	c7 85 b0 fe ff ff ff 	movl   $0x7ff,-0x150(%ebp)
f01295a0:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01295a3:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01295a9:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01295ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01295b3:	eb 0e                	jmp    f01295c3 <test_kshrink+0x53f>
		{
			ptr[i] = 3 ;
f01295b5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01295b8:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01295bb:	01 d0                	add    %edx,%eax
f01295bd:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01295c0:	ff 45 f4             	incl   -0xc(%ebp)
f01295c3:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01295c9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01295cc:	7f e7                	jg     f01295b5 <test_kshrink+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01295ce:	e8 c4 3b fe ff       	call   f010d197 <sys_calculate_free_frames>
f01295d3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01295d6:	e8 ed a7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01295db:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01295de:	83 ec 0c             	sub    $0xc,%esp
f01295e1:	68 00 1c 00 00       	push   $0x1c00
f01295e6:	e8 a0 e7 fd ff       	call   f0107d8b <kmalloc>
f01295eb:	83 c4 10             	add    $0x10,%esp
f01295ee:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01295f4:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01295fa:	89 c1                	mov    %eax,%ecx
f01295fc:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0129603:	10 00 00 
f0129606:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012960c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129611:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0129617:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012961d:	ba 00 00 00 00       	mov    $0x0,%edx
f0129622:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0129628:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012962e:	29 d0                	sub    %edx,%eax
f0129630:	89 c3                	mov    %eax,%ebx
f0129632:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0129639:	10 00 00 
f012963c:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0129641:	0f b6 d0             	movzbl %al,%edx
f0129644:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012964a:	01 d0                	add    %edx,%eax
f012964c:	48                   	dec    %eax
f012964d:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0129653:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0129659:	ba 00 00 00 00       	mov    $0x0,%edx
f012965e:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0129664:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012966a:	29 d0                	sub    %edx,%eax
f012966c:	01 c3                	add    %eax,%ebx
f012966e:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0129675:	10 00 00 
f0129678:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012967d:	0f b6 c0             	movzbl %al,%eax
f0129680:	c1 e0 04             	shl    $0x4,%eax
f0129683:	89 c2                	mov    %eax,%edx
f0129685:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012968b:	01 d0                	add    %edx,%eax
f012968d:	48                   	dec    %eax
f012968e:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0129694:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012969a:	ba 00 00 00 00       	mov    $0x0,%edx
f012969f:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01296a5:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01296ab:	29 d0                	sub    %edx,%eax
f01296ad:	01 d8                	add    %ebx,%eax
f01296af:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01296b4:	39 c1                	cmp    %eax,%ecx
f01296b6:	74 17                	je     f01296cf <test_kshrink+0x64b>
f01296b8:	83 ec 04             	sub    $0x4,%esp
f01296bb:	68 e0 b9 13 f0       	push   $0xf013b9e0
f01296c0:	68 2f 0c 00 00       	push   $0xc2f
f01296c5:	68 fa b8 13 f0       	push   $0xf013b8fa
f01296ca:	e8 36 6b fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01296cf:	e8 f4 a6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01296d4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01296d7:	74 17                	je     f01296f0 <test_kshrink+0x66c>
f01296d9:	83 ec 04             	sub    $0x4,%esp
f01296dc:	68 14 b9 13 f0       	push   $0xf013b914
f01296e1:	68 30 0c 00 00       	push   $0xc30
f01296e6:	68 fa b8 13 f0       	push   $0xf013b8fa
f01296eb:	e8 15 6b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01296f0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01296f3:	e8 9f 3a fe ff       	call   f010d197 <sys_calculate_free_frames>
f01296f8:	29 c3                	sub    %eax,%ebx
f01296fa:	89 d8                	mov    %ebx,%eax
f01296fc:	83 f8 02             	cmp    $0x2,%eax
f01296ff:	74 17                	je     f0129718 <test_kshrink+0x694>
f0129701:	83 ec 04             	sub    $0x4,%esp
f0129704:	68 7c b9 13 f0       	push   $0xf013b97c
f0129709:	68 31 0c 00 00       	push   $0xc31
f012970e:	68 fa b8 13 f0       	push   $0xf013b8fa
f0129713:	e8 ed 6a fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0129718:	c7 85 b4 fe ff ff ff 	movl   $0x1bff,-0x14c(%ebp)
f012971f:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0129722:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0129728:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012972b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129732:	eb 0e                	jmp    f0129742 <test_kshrink+0x6be>
		{
			ptr[i] = 4 ;
f0129734:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129737:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012973a:	01 d0                	add    %edx,%eax
f012973c:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012973f:	ff 45 f4             	incl   -0xc(%ebp)
f0129742:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0129748:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012974b:	7f e7                	jg     f0129734 <test_kshrink+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012974d:	e8 45 3a fe ff       	call   f010d197 <sys_calculate_free_frames>
f0129752:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129755:	e8 6e a6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012975a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012975d:	83 ec 0c             	sub    $0xc,%esp
f0129760:	68 00 fc 2f 00       	push   $0x2ffc00
f0129765:	e8 21 e6 fd ff       	call   f0107d8b <kmalloc>
f012976a:	83 c4 10             	add    $0x10,%esp
f012976d:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129773:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0129779:	89 c1                	mov    %eax,%ecx
f012977b:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0129782:	10 00 00 
f0129785:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012978b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129790:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0129796:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012979c:	ba 00 00 00 00       	mov    $0x0,%edx
f01297a1:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01297a7:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01297ad:	29 d0                	sub    %edx,%eax
f01297af:	89 c3                	mov    %eax,%ebx
f01297b1:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01297b8:	10 00 00 
f01297bb:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01297c0:	0f b6 d0             	movzbl %al,%edx
f01297c3:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01297c9:	01 d0                	add    %edx,%eax
f01297cb:	48                   	dec    %eax
f01297cc:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01297d2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01297d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01297dd:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01297e3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01297e9:	29 d0                	sub    %edx,%eax
f01297eb:	01 c3                	add    %eax,%ebx
f01297ed:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01297f4:	10 00 00 
f01297f7:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01297fc:	0f b6 c0             	movzbl %al,%eax
f01297ff:	c1 e0 04             	shl    $0x4,%eax
f0129802:	89 c2                	mov    %eax,%edx
f0129804:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012980a:	01 d0                	add    %edx,%eax
f012980c:	48                   	dec    %eax
f012980d:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0129813:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0129819:	ba 00 00 00 00       	mov    $0x0,%edx
f012981e:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0129824:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012982a:	29 d0                	sub    %edx,%eax
f012982c:	01 d8                	add    %ebx,%eax
f012982e:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0129833:	39 c1                	cmp    %eax,%ecx
f0129835:	74 17                	je     f012984e <test_kshrink+0x7ca>
f0129837:	83 ec 04             	sub    $0x4,%esp
f012983a:	68 e0 b9 13 f0       	push   $0xf013b9e0
f012983f:	68 3d 0c 00 00       	push   $0xc3d
f0129844:	68 fa b8 13 f0       	push   $0xf013b8fa
f0129849:	e8 b7 69 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012984e:	e8 75 a5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129853:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129856:	74 17                	je     f012986f <test_kshrink+0x7eb>
f0129858:	83 ec 04             	sub    $0x4,%esp
f012985b:	68 14 b9 13 f0       	push   $0xf013b914
f0129860:	68 3e 0c 00 00       	push   $0xc3e
f0129865:	68 fa b8 13 f0       	push   $0xf013b8fa
f012986a:	e8 96 69 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012986f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129872:	e8 20 39 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0129877:	29 c3                	sub    %eax,%ebx
f0129879:	89 d8                	mov    %ebx,%eax
f012987b:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129880:	74 17                	je     f0129899 <test_kshrink+0x815>
f0129882:	83 ec 04             	sub    $0x4,%esp
f0129885:	68 7c b9 13 f0       	push   $0xf013b97c
f012988a:	68 3f 0c 00 00       	push   $0xc3f
f012988f:	68 fa b8 13 f0       	push   $0xf013b8fa
f0129894:	e8 6c 69 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0129899:	c7 85 b8 fe ff ff ff 	movl   $0x2ffbff,-0x148(%ebp)
f01298a0:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f01298a3:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01298a9:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01298ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01298b3:	eb 0e                	jmp    f01298c3 <test_kshrink+0x83f>
		{
			ptr[i] = 5 ;
f01298b5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01298b8:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01298bb:	01 d0                	add    %edx,%eax
f01298bd:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01298c0:	ff 45 f4             	incl   -0xc(%ebp)
f01298c3:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01298c9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01298cc:	7f e7                	jg     f01298b5 <test_kshrink+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01298ce:	e8 c4 38 fe ff       	call   f010d197 <sys_calculate_free_frames>
f01298d3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01298d6:	e8 ed a4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01298db:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f01298de:	83 ec 0c             	sub    $0xc,%esp
f01298e1:	68 00 00 60 00       	push   $0x600000
f01298e6:	e8 a0 e4 fd ff       	call   f0107d8b <kmalloc>
f01298eb:	83 c4 10             	add    $0x10,%esp
f01298ee:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01298f4:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01298fa:	89 c1                	mov    %eax,%ecx
f01298fc:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0129903:	10 00 00 
f0129906:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012990c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129911:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0129917:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012991d:	ba 00 00 00 00       	mov    $0x0,%edx
f0129922:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0129928:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012992e:	29 d0                	sub    %edx,%eax
f0129930:	89 c3                	mov    %eax,%ebx
f0129932:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0129939:	10 00 00 
f012993c:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0129941:	0f b6 d0             	movzbl %al,%edx
f0129944:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012994a:	01 d0                	add    %edx,%eax
f012994c:	48                   	dec    %eax
f012994d:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0129953:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0129959:	ba 00 00 00 00       	mov    $0x0,%edx
f012995e:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0129964:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012996a:	29 d0                	sub    %edx,%eax
f012996c:	01 c3                	add    %eax,%ebx
f012996e:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0129975:	10 00 00 
f0129978:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012997d:	0f b6 c0             	movzbl %al,%eax
f0129980:	c1 e0 04             	shl    $0x4,%eax
f0129983:	89 c2                	mov    %eax,%edx
f0129985:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012998b:	01 d0                	add    %edx,%eax
f012998d:	48                   	dec    %eax
f012998e:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0129994:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012999a:	ba 00 00 00 00       	mov    $0x0,%edx
f012999f:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01299a5:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01299ab:	29 d0                	sub    %edx,%eax
f01299ad:	01 d8                	add    %ebx,%eax
f01299af:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01299b4:	39 c1                	cmp    %eax,%ecx
f01299b6:	74 17                	je     f01299cf <test_kshrink+0x94b>
f01299b8:	83 ec 04             	sub    $0x4,%esp
f01299bb:	68 e0 b9 13 f0       	push   $0xf013b9e0
f01299c0:	68 4b 0c 00 00       	push   $0xc4b
f01299c5:	68 fa b8 13 f0       	push   $0xf013b8fa
f01299ca:	e8 36 68 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01299cf:	e8 f4 a3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01299d4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01299d7:	74 17                	je     f01299f0 <test_kshrink+0x96c>
f01299d9:	83 ec 04             	sub    $0x4,%esp
f01299dc:	68 14 b9 13 f0       	push   $0xf013b914
f01299e1:	68 4c 0c 00 00       	push   $0xc4c
f01299e6:	68 fa b8 13 f0       	push   $0xf013b8fa
f01299eb:	e8 15 68 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01299f0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01299f3:	e8 9f 37 fe ff       	call   f010d197 <sys_calculate_free_frames>
f01299f8:	29 c3                	sub    %eax,%ebx
f01299fa:	89 d8                	mov    %ebx,%eax
f01299fc:	3d 00 06 00 00       	cmp    $0x600,%eax
f0129a01:	74 17                	je     f0129a1a <test_kshrink+0x996>
f0129a03:	83 ec 04             	sub    $0x4,%esp
f0129a06:	68 7c b9 13 f0       	push   $0xf013b97c
f0129a0b:	68 4d 0c 00 00       	push   $0xc4d
f0129a10:	68 fa b8 13 f0       	push   $0xf013b8fa
f0129a15:	e8 eb 67 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0129a1a:	c7 85 bc fe ff ff ff 	movl   $0x17ffff,-0x144(%ebp)
f0129a21:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0129a24:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0129a2a:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0129a30:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129a37:	eb 1a                	jmp    f0129a53 <test_kshrink+0x9cf>
		{
			arr[i] = i ;
f0129a39:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129a3c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0129a43:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0129a49:	01 c2                	add    %eax,%edx
f0129a4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129a4e:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0129a50:	ff 45 f4             	incl   -0xc(%ebp)
f0129a53:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0129a59:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129a5c:	7d db                	jge    f0129a39 <test_kshrink+0x9b5>
		}
	}

	//Shrink last allocated variable to 5 MB instead of 6 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0129a5e:	e8 34 37 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0129a63:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129a66:	e8 5d a3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129a6b:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(5*Mega) ;
f0129a6e:	83 ec 0c             	sub    $0xc,%esp
f0129a71:	68 00 00 50 00       	push   $0x500000
f0129a76:	e8 96 e5 fd ff       	call   f0108011 <kshrink>
f0129a7b:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0129a7e:	e8 45 a3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129a83:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129a86:	74 19                	je     f0129aa1 <test_kshrink+0xa1d>
f0129a88:	68 94 c6 13 f0       	push   $0xf013c694
f0129a8d:	68 c5 c6 13 f0       	push   $0xf013c6c5
f0129a92:	68 5d 0c 00 00       	push   $0xc5d
f0129a97:	68 fa b8 13 f0       	push   $0xf013b8fa
f0129a9c:	e8 64 67 fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 256) ;
f0129aa1:	e8 f1 36 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0129aa6:	89 c2                	mov    %eax,%edx
f0129aa8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129aab:	29 c2                	sub    %eax,%edx
f0129aad:	89 d0                	mov    %edx,%eax
f0129aaf:	3d 00 01 00 00       	cmp    $0x100,%eax
f0129ab4:	74 19                	je     f0129acf <test_kshrink+0xa4b>
f0129ab6:	68 a0 c7 13 f0       	push   $0xf013c7a0
f0129abb:	68 c5 c6 13 f0       	push   $0xf013c6c5
f0129ac0:	68 5e 0c 00 00       	push   $0xc5e
f0129ac5:	68 fa b8 13 f0       	push   $0xf013b8fa
f0129aca:	e8 36 67 fd ff       	call   f0100205 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
f0129acf:	c7 85 24 ff ff ff ff 	movl   $0x13ffff,-0xdc(%ebp)
f0129ad6:	ff 13 00 
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0129ad9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129ae0:	eb 37                	jmp    f0129b19 <test_kshrink+0xa95>
		{
			assert(arr[i] == i);
f0129ae2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129ae5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0129aec:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0129af2:	01 d0                	add    %edx,%eax
f0129af4:	8b 10                	mov    (%eax),%edx
f0129af6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129af9:	39 c2                	cmp    %eax,%edx
f0129afb:	74 19                	je     f0129b16 <test_kshrink+0xa92>
f0129afd:	68 d0 c7 13 f0       	push   $0xf013c7d0
f0129b02:	68 c5 c6 13 f0       	push   $0xf013c6c5
f0129b07:	68 66 0c 00 00       	push   $0xc66
f0129b0c:	68 fa b8 13 f0       	push   $0xf013b8fa
f0129b11:	e8 ef 66 fd ff       	call   f0100205 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0129b16:	ff 45 f4             	incl   -0xc(%ebp)
f0129b19:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129b1c:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0129b22:	7e be                	jle    f0129ae2 <test_kshrink+0xa5e>
			assert(arr[i] == i);
		}

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0129b24:	83 ec 0c             	sub    $0xc,%esp
f0129b27:	6a 03                	push   $0x3
f0129b29:	e8 09 3b fe ff       	call   f010d637 <sys_bypassPageFault>
f0129b2e:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[6];
f0129b31:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0129b37:	89 45 8c             	mov    %eax,-0x74(%ebp)
		ptr[5*Mega] = 10;
f0129b3a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129b3d:	05 00 00 50 00       	add    $0x500000,%eax
f0129b42:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega])) ;
f0129b45:	e8 db 3a fe ff       	call   f010d625 <sys_rcr2>
f0129b4a:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0129b4d:	81 c2 00 00 50 00    	add    $0x500000,%edx
f0129b53:	39 d0                	cmp    %edx,%eax
f0129b55:	74 19                	je     f0129b70 <test_kshrink+0xaec>
f0129b57:	68 dc c7 13 f0       	push   $0xf013c7dc
f0129b5c:	68 c5 c6 13 f0       	push   $0xf013c6c5
f0129b61:	68 6f 0c 00 00       	push   $0xc6f
f0129b66:	68 fa b8 13 f0       	push   $0xf013b8fa
f0129b6b:	e8 95 66 fd ff       	call   f0100205 <_panic>

		ptr[5*Mega+4*kilo] = 10;
f0129b70:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129b73:	05 00 10 50 00       	add    $0x501000,%eax
f0129b78:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega+4*kilo])) ;
f0129b7b:	e8 a5 3a fe ff       	call   f010d625 <sys_rcr2>
f0129b80:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0129b83:	81 c2 00 10 50 00    	add    $0x501000,%edx
f0129b89:	39 d0                	cmp    %edx,%eax
f0129b8b:	74 19                	je     f0129ba6 <test_kshrink+0xb22>
f0129b8d:	68 04 c8 13 f0       	push   $0xf013c804
f0129b92:	68 c5 c6 13 f0       	push   $0xf013c6c5
f0129b97:	68 72 0c 00 00       	push   $0xc72
f0129b9c:	68 fa b8 13 f0       	push   $0xf013b8fa
f0129ba1:	e8 5f 66 fd ff       	call   f0100205 <_panic>

		ptr[6*Mega - kilo] = 10;
f0129ba6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129ba9:	05 00 fc 5f 00       	add    $0x5ffc00,%eax
f0129bae:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[6*Mega - kilo])) ;
f0129bb1:	e8 6f 3a fe ff       	call   f010d625 <sys_rcr2>
f0129bb6:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0129bb9:	81 c2 00 fc 5f 00    	add    $0x5ffc00,%edx
f0129bbf:	39 d0                	cmp    %edx,%eax
f0129bc1:	74 19                	je     f0129bdc <test_kshrink+0xb58>
f0129bc3:	68 30 c8 13 f0       	push   $0xf013c830
f0129bc8:	68 c5 c6 13 f0       	push   $0xf013c6c5
f0129bcd:	68 75 0c 00 00       	push   $0xc75
f0129bd2:	68 fa b8 13 f0       	push   $0xf013b8fa
f0129bd7:	e8 29 66 fd ff       	call   f0100205 <_panic>

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0129bdc:	83 ec 0c             	sub    $0xc,%esp
f0129bdf:	6a 00                	push   $0x0
f0129be1:	e8 51 3a fe ff       	call   f010d637 <sys_bypassPageFault>
f0129be6:	83 c4 10             	add    $0x10,%esp
	}

	//Shrink it again to 2 MB instead of 5 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0129be9:	e8 a9 35 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0129bee:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129bf1:	e8 d2 a1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129bf6:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(2*Mega) ;
f0129bf9:	83 ec 0c             	sub    $0xc,%esp
f0129bfc:	68 00 00 20 00       	push   $0x200000
f0129c01:	e8 0b e4 fd ff       	call   f0108011 <kshrink>
f0129c06:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0129c09:	e8 ba a1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129c0e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129c11:	74 19                	je     f0129c2c <test_kshrink+0xba8>
f0129c13:	68 94 c6 13 f0       	push   $0xf013c694
f0129c18:	68 c5 c6 13 f0       	push   $0xf013c6c5
f0129c1d:	68 82 0c 00 00       	push   $0xc82
f0129c22:	68 fa b8 13 f0       	push   $0xf013b8fa
f0129c27:	e8 d9 65 fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 768) ;
f0129c2c:	e8 66 35 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0129c31:	89 c2                	mov    %eax,%edx
f0129c33:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129c36:	29 c2                	sub    %eax,%edx
f0129c38:	89 d0                	mov    %edx,%eax
f0129c3a:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129c3f:	74 19                	je     f0129c5a <test_kshrink+0xbd6>
f0129c41:	68 5c c8 13 f0       	push   $0xf013c85c
f0129c46:	68 c5 c6 13 f0       	push   $0xf013c6c5
f0129c4b:	68 83 0c 00 00       	push   $0xc83
f0129c50:	68 fa b8 13 f0       	push   $0xf013b8fa
f0129c55:	e8 ab 65 fd ff       	call   f0100205 <_panic>


	//Allocate after shrinking last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0129c5a:	e8 38 35 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0129c5f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129c62:	e8 61 a1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129c67:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0129c6a:	83 ec 0c             	sub    $0xc,%esp
f0129c6d:	68 00 00 40 00       	push   $0x400000
f0129c72:	e8 14 e1 fd ff       	call   f0107d8b <kmalloc>
f0129c77:	83 c4 10             	add    $0x10,%esp
f0129c7a:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		cprintf("ACTUAL = %x, DESIRED = %x\n", (uint32) ptr_allocations[7] ,(ACTUAL_START + 7*Mega + 16*kilo + 2*Mega));
f0129c80:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0129c87:	10 00 00 
f0129c8a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0129c90:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129c95:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0129c9b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129ca1:	ba 00 00 00 00       	mov    $0x0,%edx
f0129ca6:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0129cac:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129cb2:	29 d0                	sub    %edx,%eax
f0129cb4:	89 c1                	mov    %eax,%ecx
f0129cb6:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0129cbd:	10 00 00 
f0129cc0:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0129cc5:	0f b6 d0             	movzbl %al,%edx
f0129cc8:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0129cce:	01 d0                	add    %edx,%eax
f0129cd0:	48                   	dec    %eax
f0129cd1:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0129cd7:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129cdd:	ba 00 00 00 00       	mov    $0x0,%edx
f0129ce2:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0129ce8:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129cee:	29 d0                	sub    %edx,%eax
f0129cf0:	01 c1                	add    %eax,%ecx
f0129cf2:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0129cf9:	10 00 00 
f0129cfc:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0129d01:	0f b6 c0             	movzbl %al,%eax
f0129d04:	c1 e0 04             	shl    $0x4,%eax
f0129d07:	89 c2                	mov    %eax,%edx
f0129d09:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0129d0f:	01 d0                	add    %edx,%eax
f0129d11:	48                   	dec    %eax
f0129d12:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0129d18:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0129d1e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129d23:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0129d29:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0129d2f:	29 d0                	sub    %edx,%eax
f0129d31:	01 c8                	add    %ecx,%eax
f0129d33:	8d 90 00 80 90 f6    	lea    -0x96f8000(%eax),%edx
f0129d39:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0129d3f:	83 ec 04             	sub    $0x4,%esp
f0129d42:	52                   	push   %edx
f0129d43:	50                   	push   %eax
f0129d44:	68 8c c8 13 f0       	push   $0xf013c88c
f0129d49:	e8 c0 6f fd ff       	call   f0100d0e <cprintf>
f0129d4e:	83 c4 10             	add    $0x10,%esp
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 2*Mega)) panic("Wrong start address after kshrink()... check the updating of your data structures");
f0129d51:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0129d57:	89 c1                	mov    %eax,%ecx
f0129d59:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0129d60:	10 00 00 
f0129d63:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0129d69:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129d6e:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0129d74:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0129d7a:	ba 00 00 00 00       	mov    $0x0,%edx
f0129d7f:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0129d85:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0129d8b:	29 d0                	sub    %edx,%eax
f0129d8d:	89 c3                	mov    %eax,%ebx
f0129d8f:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0129d96:	10 00 00 
f0129d99:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0129d9e:	0f b6 d0             	movzbl %al,%edx
f0129da1:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0129da7:	01 d0                	add    %edx,%eax
f0129da9:	48                   	dec    %eax
f0129daa:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0129db0:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0129db6:	ba 00 00 00 00       	mov    $0x0,%edx
f0129dbb:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0129dc1:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0129dc7:	29 d0                	sub    %edx,%eax
f0129dc9:	01 c3                	add    %eax,%ebx
f0129dcb:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0129dd2:	10 00 00 
f0129dd5:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0129dda:	0f b6 c0             	movzbl %al,%eax
f0129ddd:	c1 e0 04             	shl    $0x4,%eax
f0129de0:	89 c2                	mov    %eax,%edx
f0129de2:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0129de8:	01 d0                	add    %edx,%eax
f0129dea:	48                   	dec    %eax
f0129deb:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0129df1:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129df7:	ba 00 00 00 00       	mov    $0x0,%edx
f0129dfc:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0129e02:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129e08:	29 d0                	sub    %edx,%eax
f0129e0a:	01 d8                	add    %ebx,%eax
f0129e0c:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f0129e11:	39 c1                	cmp    %eax,%ecx
f0129e13:	74 17                	je     f0129e2c <test_kshrink+0xda8>
f0129e15:	83 ec 04             	sub    $0x4,%esp
f0129e18:	68 a8 c8 13 f0       	push   $0xf013c8a8
f0129e1d:	68 8e 0c 00 00       	push   $0xc8e
f0129e22:	68 fa b8 13 f0       	push   $0xf013b8fa
f0129e27:	e8 d9 63 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129e2c:	e8 97 9f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129e31:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129e34:	74 17                	je     f0129e4d <test_kshrink+0xdc9>
f0129e36:	83 ec 04             	sub    $0x4,%esp
f0129e39:	68 14 b9 13 f0       	push   $0xf013b914
f0129e3e:	68 8f 0c 00 00       	push   $0xc8f
f0129e43:	68 fa b8 13 f0       	push   $0xf013b8fa
f0129e48:	e8 b8 63 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129e4d:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129e50:	e8 42 33 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0129e55:	29 c3                	sub    %eax,%ebx
f0129e57:	89 d8                	mov    %ebx,%eax
f0129e59:	3d 00 04 00 00       	cmp    $0x400,%eax
f0129e5e:	74 17                	je     f0129e77 <test_kshrink+0xdf3>
f0129e60:	83 ec 04             	sub    $0x4,%esp
f0129e63:	68 7c b9 13 f0       	push   $0xf013b97c
f0129e68:	68 90 0c 00 00       	push   $0xc90
f0129e6d:	68 fa b8 13 f0       	push   $0xf013b8fa
f0129e72:	e8 8e 63 fd ff       	call   f0100205 <_panic>


	//kfree the shrunk variable
	{
		//kfree 2 MB (shrunk)
		freeFrames = sys_calculate_free_frames() ;
f0129e77:	e8 1b 33 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0129e7c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129e7f:	e8 44 9f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129e84:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0129e87:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0129e8d:	83 ec 0c             	sub    $0xc,%esp
f0129e90:	50                   	push   %eax
f0129e91:	e8 c0 df fd ff       	call   f0107e56 <kfree>
f0129e96:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129e99:	e8 2a 9f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129e9e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129ea1:	74 17                	je     f0129eba <test_kshrink+0xe36>
f0129ea3:	83 ec 04             	sub    $0x4,%esp
f0129ea6:	68 14 b9 13 f0       	push   $0xf013b914
f0129eab:	68 9a 0c 00 00       	push   $0xc9a
f0129eb0:	68 fa b8 13 f0       	push   $0xf013b8fa
f0129eb5:	e8 4b 63 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0129eba:	e8 d8 32 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0129ebf:	89 c2                	mov    %eax,%edx
f0129ec1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129ec4:	29 c2                	sub    %eax,%edx
f0129ec6:	89 d0                	mov    %edx,%eax
f0129ec8:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129ecd:	74 17                	je     f0129ee6 <test_kshrink+0xe62>
f0129ecf:	83 ec 04             	sub    $0x4,%esp
f0129ed2:	68 ac c1 13 f0       	push   $0xf013c1ac
f0129ed7:	68 9b 0c 00 00       	push   $0xc9b
f0129edc:	68 fa b8 13 f0       	push   $0xf013b8fa
f0129ee1:	e8 1f 63 fd ff       	call   f0100205 <_panic>
	}

	//Shrink last allocated variable to 4 MB - 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0129ee6:	e8 ac 32 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0129eeb:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129eee:	e8 d5 9e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129ef3:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(4*Mega - 20*kilo) ;
f0129ef6:	83 ec 0c             	sub    $0xc,%esp
f0129ef9:	68 00 b0 3f 00       	push   $0x3fb000
f0129efe:	e8 0e e1 fd ff       	call   f0108011 <kshrink>
f0129f03:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0129f06:	e8 bd 9e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129f0b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129f0e:	74 19                	je     f0129f29 <test_kshrink+0xea5>
f0129f10:	68 94 c6 13 f0       	push   $0xf013c694
f0129f15:	68 c5 c6 13 f0       	push   $0xf013c6c5
f0129f1a:	68 a5 0c 00 00       	push   $0xca5
f0129f1f:	68 fa b8 13 f0       	push   $0xf013b8fa
f0129f24:	e8 dc 62 fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 5) ;
f0129f29:	e8 69 32 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0129f2e:	89 c2                	mov    %eax,%edx
f0129f30:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129f33:	29 c2                	sub    %eax,%edx
f0129f35:	89 d0                	mov    %edx,%eax
f0129f37:	83 f8 05             	cmp    $0x5,%eax
f0129f3a:	74 19                	je     f0129f55 <test_kshrink+0xed1>
f0129f3c:	68 fc c8 13 f0       	push   $0xf013c8fc
f0129f41:	68 c5 c6 13 f0       	push   $0xf013c6c5
f0129f46:	68 a6 0c 00 00       	push   $0xca6
f0129f4b:	68 fa b8 13 f0       	push   $0xf013b8fa
f0129f50:	e8 b0 62 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0129f55:	83 ec 0c             	sub    $0xc,%esp
f0129f58:	68 58 c6 13 f0       	push   $0xf013c658
f0129f5d:	e8 ac 6d fd ff       	call   f0100d0e <cprintf>
f0129f62:	83 c4 10             	add    $0x10,%esp

	return 1;
f0129f65:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0129f6a:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0129f6d:	5b                   	pop    %ebx
f0129f6e:	5f                   	pop    %edi
f0129f6f:	5d                   	pop    %ebp
f0129f70:	c3                   	ret    

f0129f71 <test_kfreelast>:


int test_kfreelast()
{
f0129f71:	55                   	push   %ebp
f0129f72:	89 e5                	mov    %esp,%ebp
f0129f74:	57                   	push   %edi
f0129f75:	53                   	push   %ebx
f0129f76:	81 ec 90 02 00 00    	sub    $0x290,%esp
	char minByte = 1<<7;
f0129f7c:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f0129f80:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f0129f84:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f0129f8a:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f0129f90:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f0129f97:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0129f9e:	e8 f4 31 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0129fa3:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//malloc some spaces
	int i, ce, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0129fa6:	8d 95 0c fe ff ff    	lea    -0x1f4(%ebp),%edx
f0129fac:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129fb1:	b8 00 00 00 00       	mov    $0x0,%eax
f0129fb6:	89 d7                	mov    %edx,%edi
f0129fb8:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0129fba:	8d 95 bc fd ff ff    	lea    -0x244(%ebp),%edx
f0129fc0:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129fc5:	b8 00 00 00 00       	mov    $0x0,%eax
f0129fca:	89 d7                	mov    %edx,%edi
f0129fcc:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0129fce:	8d 95 6c fd ff ff    	lea    -0x294(%ebp),%edx
f0129fd4:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129fd9:	b8 00 00 00 00       	mov    $0x0,%eax
f0129fde:	89 d7                	mov    %edx,%edi
f0129fe0:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129fe2:	e8 b0 31 fe ff       	call   f010d197 <sys_calculate_free_frames>
f0129fe7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129fea:	e8 d9 9d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129fef:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0129ff2:	83 ec 0c             	sub    $0xc,%esp
f0129ff5:	68 00 fc 1f 00       	push   $0x1ffc00
f0129ffa:	e8 8c dd fd ff       	call   f0107d8b <kmalloc>
f0129fff:	83 c4 10             	add    $0x10,%esp
f012a002:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a008:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012a00e:	89 c1                	mov    %eax,%ecx
f012a010:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f012a017:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012a01a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a01f:	89 45 c8             	mov    %eax,-0x38(%ebp)
f012a022:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012a025:	ba 00 00 00 00       	mov    $0x0,%edx
f012a02a:	f7 75 cc             	divl   -0x34(%ebp)
f012a02d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012a030:	29 d0                	sub    %edx,%eax
f012a032:	89 c3                	mov    %eax,%ebx
f012a034:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f012a03b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012a040:	0f b6 d0             	movzbl %al,%edx
f012a043:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012a046:	01 d0                	add    %edx,%eax
f012a048:	48                   	dec    %eax
f012a049:	89 45 c0             	mov    %eax,-0x40(%ebp)
f012a04c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012a04f:	ba 00 00 00 00       	mov    $0x0,%edx
f012a054:	f7 75 c4             	divl   -0x3c(%ebp)
f012a057:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012a05a:	29 d0                	sub    %edx,%eax
f012a05c:	01 c3                	add    %eax,%ebx
f012a05e:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f012a065:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012a06a:	0f b6 c0             	movzbl %al,%eax
f012a06d:	c1 e0 04             	shl    $0x4,%eax
f012a070:	89 c2                	mov    %eax,%edx
f012a072:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012a075:	01 d0                	add    %edx,%eax
f012a077:	48                   	dec    %eax
f012a078:	89 45 b8             	mov    %eax,-0x48(%ebp)
f012a07b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012a07e:	ba 00 00 00 00       	mov    $0x0,%edx
f012a083:	f7 75 bc             	divl   -0x44(%ebp)
f012a086:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012a089:	29 d0                	sub    %edx,%eax
f012a08b:	01 d8                	add    %ebx,%eax
f012a08d:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012a092:	39 c1                	cmp    %eax,%ecx
f012a094:	74 17                	je     f012a0ad <test_kfreelast+0x13c>
f012a096:	83 ec 04             	sub    $0x4,%esp
f012a099:	68 e0 b9 13 f0       	push   $0xf013b9e0
f012a09e:	68 ca 0c 00 00       	push   $0xcca
f012a0a3:	68 fa b8 13 f0       	push   $0xf013b8fa
f012a0a8:	e8 58 61 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a0ad:	e8 16 9d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a0b2:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a0b5:	74 17                	je     f012a0ce <test_kfreelast+0x15d>
f012a0b7:	83 ec 04             	sub    $0x4,%esp
f012a0ba:	68 14 b9 13 f0       	push   $0xf013b914
f012a0bf:	68 cb 0c 00 00       	push   $0xccb
f012a0c4:	68 fa b8 13 f0       	push   $0xf013b8fa
f012a0c9:	e8 37 61 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a0ce:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a0d1:	e8 c1 30 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012a0d6:	29 c3                	sub    %eax,%ebx
f012a0d8:	89 d8                	mov    %ebx,%eax
f012a0da:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a0df:	74 17                	je     f012a0f8 <test_kfreelast+0x187>
f012a0e1:	83 ec 04             	sub    $0x4,%esp
f012a0e4:	68 7c b9 13 f0       	push   $0xf013b97c
f012a0e9:	68 cc 0c 00 00       	push   $0xccc
f012a0ee:	68 fa b8 13 f0       	push   $0xf013b8fa
f012a0f3:	e8 0d 61 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f012a0f8:	c7 85 0c fe ff ff ff 	movl   $0x1ffbff,-0x1f4(%ebp)
f012a0ff:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012a102:	e8 90 30 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012a107:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a10a:	e8 b9 9c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a10f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012a112:	83 ec 0c             	sub    $0xc,%esp
f012a115:	68 00 fc 1f 00       	push   $0x1ffc00
f012a11a:	e8 6c dc fd ff       	call   f0107d8b <kmalloc>
f012a11f:	83 c4 10             	add    $0x10,%esp
f012a122:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a128:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f012a12e:	89 c1                	mov    %eax,%ecx
f012a130:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012a137:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012a13a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a13f:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012a142:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012a145:	ba 00 00 00 00       	mov    $0x0,%edx
f012a14a:	f7 75 b4             	divl   -0x4c(%ebp)
f012a14d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012a150:	29 d0                	sub    %edx,%eax
f012a152:	89 c3                	mov    %eax,%ebx
f012a154:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012a15b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012a160:	0f b6 d0             	movzbl %al,%edx
f012a163:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012a166:	01 d0                	add    %edx,%eax
f012a168:	48                   	dec    %eax
f012a169:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012a16c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012a16f:	ba 00 00 00 00       	mov    $0x0,%edx
f012a174:	f7 75 ac             	divl   -0x54(%ebp)
f012a177:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012a17a:	29 d0                	sub    %edx,%eax
f012a17c:	01 c3                	add    %eax,%ebx
f012a17e:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012a185:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012a18a:	0f b6 c0             	movzbl %al,%eax
f012a18d:	c1 e0 04             	shl    $0x4,%eax
f012a190:	89 c2                	mov    %eax,%edx
f012a192:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012a195:	01 d0                	add    %edx,%eax
f012a197:	48                   	dec    %eax
f012a198:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012a19b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012a19e:	ba 00 00 00 00       	mov    $0x0,%edx
f012a1a3:	f7 75 a4             	divl   -0x5c(%ebp)
f012a1a6:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012a1a9:	29 d0                	sub    %edx,%eax
f012a1ab:	01 d8                	add    %ebx,%eax
f012a1ad:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012a1b2:	39 c1                	cmp    %eax,%ecx
f012a1b4:	74 17                	je     f012a1cd <test_kfreelast+0x25c>
f012a1b6:	83 ec 04             	sub    $0x4,%esp
f012a1b9:	68 e0 b9 13 f0       	push   $0xf013b9e0
f012a1be:	68 d3 0c 00 00       	push   $0xcd3
f012a1c3:	68 fa b8 13 f0       	push   $0xf013b8fa
f012a1c8:	e8 38 60 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a1cd:	e8 f6 9b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a1d2:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a1d5:	74 17                	je     f012a1ee <test_kfreelast+0x27d>
f012a1d7:	83 ec 04             	sub    $0x4,%esp
f012a1da:	68 14 b9 13 f0       	push   $0xf013b914
f012a1df:	68 d4 0c 00 00       	push   $0xcd4
f012a1e4:	68 fa b8 13 f0       	push   $0xf013b8fa
f012a1e9:	e8 17 60 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a1ee:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a1f1:	e8 a1 2f fe ff       	call   f010d197 <sys_calculate_free_frames>
f012a1f6:	29 c3                	sub    %eax,%ebx
f012a1f8:	89 d8                	mov    %ebx,%eax
f012a1fa:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a1ff:	74 17                	je     f012a218 <test_kfreelast+0x2a7>
f012a201:	83 ec 04             	sub    $0x4,%esp
f012a204:	68 7c b9 13 f0       	push   $0xf013b97c
f012a209:	68 d5 0c 00 00       	push   $0xcd5
f012a20e:	68 fa b8 13 f0       	push   $0xf013b8fa
f012a213:	e8 ed 5f fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f012a218:	c7 85 10 fe ff ff ff 	movl   $0x1ffbff,-0x1f0(%ebp)
f012a21f:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012a222:	e8 70 2f fe ff       	call   f010d197 <sys_calculate_free_frames>
f012a227:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a22a:	e8 99 9b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a22f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012a232:	83 ec 0c             	sub    $0xc,%esp
f012a235:	68 00 08 00 00       	push   $0x800
f012a23a:	e8 4c db fd ff       	call   f0107d8b <kmalloc>
f012a23f:	83 c4 10             	add    $0x10,%esp
f012a242:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a248:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012a24e:	89 c1                	mov    %eax,%ecx
f012a250:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012a257:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012a25a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a25f:	89 45 98             	mov    %eax,-0x68(%ebp)
f012a262:	8b 45 98             	mov    -0x68(%ebp),%eax
f012a265:	ba 00 00 00 00       	mov    $0x0,%edx
f012a26a:	f7 75 9c             	divl   -0x64(%ebp)
f012a26d:	8b 45 98             	mov    -0x68(%ebp),%eax
f012a270:	29 d0                	sub    %edx,%eax
f012a272:	89 c3                	mov    %eax,%ebx
f012a274:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012a27b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012a280:	0f b6 d0             	movzbl %al,%edx
f012a283:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012a286:	01 d0                	add    %edx,%eax
f012a288:	48                   	dec    %eax
f012a289:	89 45 90             	mov    %eax,-0x70(%ebp)
f012a28c:	8b 45 90             	mov    -0x70(%ebp),%eax
f012a28f:	ba 00 00 00 00       	mov    $0x0,%edx
f012a294:	f7 75 94             	divl   -0x6c(%ebp)
f012a297:	8b 45 90             	mov    -0x70(%ebp),%eax
f012a29a:	29 d0                	sub    %edx,%eax
f012a29c:	01 c3                	add    %eax,%ebx
f012a29e:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012a2a5:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012a2aa:	0f b6 c0             	movzbl %al,%eax
f012a2ad:	c1 e0 04             	shl    $0x4,%eax
f012a2b0:	89 c2                	mov    %eax,%edx
f012a2b2:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012a2b5:	01 d0                	add    %edx,%eax
f012a2b7:	48                   	dec    %eax
f012a2b8:	89 45 88             	mov    %eax,-0x78(%ebp)
f012a2bb:	8b 45 88             	mov    -0x78(%ebp),%eax
f012a2be:	ba 00 00 00 00       	mov    $0x0,%edx
f012a2c3:	f7 75 8c             	divl   -0x74(%ebp)
f012a2c6:	8b 45 88             	mov    -0x78(%ebp),%eax
f012a2c9:	29 d0                	sub    %edx,%eax
f012a2cb:	01 d8                	add    %ebx,%eax
f012a2cd:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012a2d2:	39 c1                	cmp    %eax,%ecx
f012a2d4:	74 17                	je     f012a2ed <test_kfreelast+0x37c>
f012a2d6:	83 ec 04             	sub    $0x4,%esp
f012a2d9:	68 e0 b9 13 f0       	push   $0xf013b9e0
f012a2de:	68 dc 0c 00 00       	push   $0xcdc
f012a2e3:	68 fa b8 13 f0       	push   $0xf013b8fa
f012a2e8:	e8 18 5f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a2ed:	e8 d6 9a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a2f2:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a2f5:	74 17                	je     f012a30e <test_kfreelast+0x39d>
f012a2f7:	83 ec 04             	sub    $0x4,%esp
f012a2fa:	68 14 b9 13 f0       	push   $0xf013b914
f012a2ff:	68 dd 0c 00 00       	push   $0xcdd
f012a304:	68 fa b8 13 f0       	push   $0xf013b8fa
f012a309:	e8 f7 5e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a30e:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a311:	e8 81 2e fe ff       	call   f010d197 <sys_calculate_free_frames>
f012a316:	29 c3                	sub    %eax,%ebx
f012a318:	89 d8                	mov    %ebx,%eax
f012a31a:	83 f8 01             	cmp    $0x1,%eax
f012a31d:	74 17                	je     f012a336 <test_kfreelast+0x3c5>
f012a31f:	83 ec 04             	sub    $0x4,%esp
f012a322:	68 7c b9 13 f0       	push   $0xf013b97c
f012a327:	68 de 0c 00 00       	push   $0xcde
f012a32c:	68 fa b8 13 f0       	push   $0xf013b8fa
f012a331:	e8 cf 5e fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f012a336:	c7 85 14 fe ff ff ff 	movl   $0x7ff,-0x1ec(%ebp)
f012a33d:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f012a340:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012a346:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012a349:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a350:	eb 0e                	jmp    f012a360 <test_kfreelast+0x3ef>
		{
			ptr[i] = 2 ;
f012a352:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a355:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a358:	01 d0                	add    %edx,%eax
f012a35a:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012a35d:	ff 45 f4             	incl   -0xc(%ebp)
f012a360:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012a366:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a369:	7f e7                	jg     f012a352 <test_kfreelast+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012a36b:	e8 27 2e fe ff       	call   f010d197 <sys_calculate_free_frames>
f012a370:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a373:	e8 50 9a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a378:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012a37b:	83 ec 0c             	sub    $0xc,%esp
f012a37e:	68 00 08 00 00       	push   $0x800
f012a383:	e8 03 da fd ff       	call   f0107d8b <kmalloc>
f012a388:	83 c4 10             	add    $0x10,%esp
f012a38b:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a391:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012a397:	89 c1                	mov    %eax,%ecx
f012a399:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f012a3a0:	8b 45 80             	mov    -0x80(%ebp),%eax
f012a3a3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a3a8:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f012a3ae:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012a3b4:	ba 00 00 00 00       	mov    $0x0,%edx
f012a3b9:	f7 75 80             	divl   -0x80(%ebp)
f012a3bc:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012a3c2:	29 d0                	sub    %edx,%eax
f012a3c4:	89 c3                	mov    %eax,%ebx
f012a3c6:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f012a3cd:	10 00 00 
f012a3d0:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012a3d5:	0f b6 d0             	movzbl %al,%edx
f012a3d8:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012a3de:	01 d0                	add    %edx,%eax
f012a3e0:	48                   	dec    %eax
f012a3e1:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f012a3e7:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012a3ed:	ba 00 00 00 00       	mov    $0x0,%edx
f012a3f2:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f012a3f8:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012a3fe:	29 d0                	sub    %edx,%eax
f012a400:	01 c3                	add    %eax,%ebx
f012a402:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f012a409:	10 00 00 
f012a40c:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012a411:	0f b6 c0             	movzbl %al,%eax
f012a414:	c1 e0 04             	shl    $0x4,%eax
f012a417:	89 c2                	mov    %eax,%edx
f012a419:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012a41f:	01 d0                	add    %edx,%eax
f012a421:	48                   	dec    %eax
f012a422:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f012a428:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012a42e:	ba 00 00 00 00       	mov    $0x0,%edx
f012a433:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f012a439:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012a43f:	29 d0                	sub    %edx,%eax
f012a441:	01 d8                	add    %ebx,%eax
f012a443:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012a448:	39 c1                	cmp    %eax,%ecx
f012a44a:	74 17                	je     f012a463 <test_kfreelast+0x4f2>
f012a44c:	83 ec 04             	sub    $0x4,%esp
f012a44f:	68 e0 b9 13 f0       	push   $0xf013b9e0
f012a454:	68 ea 0c 00 00       	push   $0xcea
f012a459:	68 fa b8 13 f0       	push   $0xf013b8fa
f012a45e:	e8 a2 5d fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a463:	e8 60 99 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a468:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a46b:	74 17                	je     f012a484 <test_kfreelast+0x513>
f012a46d:	83 ec 04             	sub    $0x4,%esp
f012a470:	68 14 b9 13 f0       	push   $0xf013b914
f012a475:	68 eb 0c 00 00       	push   $0xceb
f012a47a:	68 fa b8 13 f0       	push   $0xf013b8fa
f012a47f:	e8 81 5d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a484:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a487:	e8 0b 2d fe ff       	call   f010d197 <sys_calculate_free_frames>
f012a48c:	29 c3                	sub    %eax,%ebx
f012a48e:	89 d8                	mov    %ebx,%eax
f012a490:	83 f8 01             	cmp    $0x1,%eax
f012a493:	74 17                	je     f012a4ac <test_kfreelast+0x53b>
f012a495:	83 ec 04             	sub    $0x4,%esp
f012a498:	68 7c b9 13 f0       	push   $0xf013b97c
f012a49d:	68 ec 0c 00 00       	push   $0xcec
f012a4a2:	68 fa b8 13 f0       	push   $0xf013b8fa
f012a4a7:	e8 59 5d fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012a4ac:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f012a4b3:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012a4b6:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012a4bc:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012a4bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a4c6:	eb 0e                	jmp    f012a4d6 <test_kfreelast+0x565>
		{
			ptr[i] = 3 ;
f012a4c8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a4cb:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a4ce:	01 d0                	add    %edx,%eax
f012a4d0:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012a4d3:	ff 45 f4             	incl   -0xc(%ebp)
f012a4d6:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012a4dc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a4df:	7f e7                	jg     f012a4c8 <test_kfreelast+0x557>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012a4e1:	e8 b1 2c fe ff       	call   f010d197 <sys_calculate_free_frames>
f012a4e6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a4e9:	e8 da 98 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a4ee:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012a4f1:	83 ec 0c             	sub    $0xc,%esp
f012a4f4:	68 00 1c 00 00       	push   $0x1c00
f012a4f9:	e8 8d d8 fd ff       	call   f0107d8b <kmalloc>
f012a4fe:	83 c4 10             	add    $0x10,%esp
f012a501:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a507:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012a50d:	89 c1                	mov    %eax,%ecx
f012a50f:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f012a516:	10 00 00 
f012a519:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012a51f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a524:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f012a52a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012a530:	ba 00 00 00 00       	mov    $0x0,%edx
f012a535:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f012a53b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012a541:	29 d0                	sub    %edx,%eax
f012a543:	89 c3                	mov    %eax,%ebx
f012a545:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f012a54c:	10 00 00 
f012a54f:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012a554:	0f b6 d0             	movzbl %al,%edx
f012a557:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012a55d:	01 d0                	add    %edx,%eax
f012a55f:	48                   	dec    %eax
f012a560:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f012a566:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012a56c:	ba 00 00 00 00       	mov    $0x0,%edx
f012a571:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f012a577:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012a57d:	29 d0                	sub    %edx,%eax
f012a57f:	01 c3                	add    %eax,%ebx
f012a581:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f012a588:	10 00 00 
f012a58b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012a590:	0f b6 c0             	movzbl %al,%eax
f012a593:	c1 e0 04             	shl    $0x4,%eax
f012a596:	89 c2                	mov    %eax,%edx
f012a598:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012a59e:	01 d0                	add    %edx,%eax
f012a5a0:	48                   	dec    %eax
f012a5a1:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f012a5a7:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012a5ad:	ba 00 00 00 00       	mov    $0x0,%edx
f012a5b2:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f012a5b8:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012a5be:	29 d0                	sub    %edx,%eax
f012a5c0:	01 d8                	add    %ebx,%eax
f012a5c2:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012a5c7:	39 c1                	cmp    %eax,%ecx
f012a5c9:	74 17                	je     f012a5e2 <test_kfreelast+0x671>
f012a5cb:	83 ec 04             	sub    $0x4,%esp
f012a5ce:	68 e0 b9 13 f0       	push   $0xf013b9e0
f012a5d3:	68 f8 0c 00 00       	push   $0xcf8
f012a5d8:	68 fa b8 13 f0       	push   $0xf013b8fa
f012a5dd:	e8 23 5c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a5e2:	e8 e1 97 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a5e7:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a5ea:	74 17                	je     f012a603 <test_kfreelast+0x692>
f012a5ec:	83 ec 04             	sub    $0x4,%esp
f012a5ef:	68 14 b9 13 f0       	push   $0xf013b914
f012a5f4:	68 f9 0c 00 00       	push   $0xcf9
f012a5f9:	68 fa b8 13 f0       	push   $0xf013b8fa
f012a5fe:	e8 02 5c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a603:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a606:	e8 8c 2b fe ff       	call   f010d197 <sys_calculate_free_frames>
f012a60b:	29 c3                	sub    %eax,%ebx
f012a60d:	89 d8                	mov    %ebx,%eax
f012a60f:	83 f8 02             	cmp    $0x2,%eax
f012a612:	74 17                	je     f012a62b <test_kfreelast+0x6ba>
f012a614:	83 ec 04             	sub    $0x4,%esp
f012a617:	68 7c b9 13 f0       	push   $0xf013b97c
f012a61c:	68 fa 0c 00 00       	push   $0xcfa
f012a621:	68 fa b8 13 f0       	push   $0xf013b8fa
f012a626:	e8 da 5b fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f012a62b:	c7 85 1c fe ff ff ff 	movl   $0x1bff,-0x1e4(%ebp)
f012a632:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f012a635:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012a63b:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012a63e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a645:	eb 0e                	jmp    f012a655 <test_kfreelast+0x6e4>
		{
			ptr[i] = 4 ;
f012a647:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a64a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a64d:	01 d0                	add    %edx,%eax
f012a64f:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012a652:	ff 45 f4             	incl   -0xc(%ebp)
f012a655:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012a65b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a65e:	7f e7                	jg     f012a647 <test_kfreelast+0x6d6>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012a660:	e8 32 2b fe ff       	call   f010d197 <sys_calculate_free_frames>
f012a665:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a668:	e8 5b 97 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a66d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012a670:	83 ec 0c             	sub    $0xc,%esp
f012a673:	68 00 fc 2f 00       	push   $0x2ffc00
f012a678:	e8 0e d7 fd ff       	call   f0107d8b <kmalloc>
f012a67d:	83 c4 10             	add    $0x10,%esp
f012a680:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a686:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012a68c:	89 c1                	mov    %eax,%ecx
f012a68e:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f012a695:	10 00 00 
f012a698:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012a69e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a6a3:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f012a6a9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012a6af:	ba 00 00 00 00       	mov    $0x0,%edx
f012a6b4:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f012a6ba:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012a6c0:	29 d0                	sub    %edx,%eax
f012a6c2:	89 c3                	mov    %eax,%ebx
f012a6c4:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f012a6cb:	10 00 00 
f012a6ce:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012a6d3:	0f b6 d0             	movzbl %al,%edx
f012a6d6:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012a6dc:	01 d0                	add    %edx,%eax
f012a6de:	48                   	dec    %eax
f012a6df:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f012a6e5:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012a6eb:	ba 00 00 00 00       	mov    $0x0,%edx
f012a6f0:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f012a6f6:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012a6fc:	29 d0                	sub    %edx,%eax
f012a6fe:	01 c3                	add    %eax,%ebx
f012a700:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f012a707:	10 00 00 
f012a70a:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012a70f:	0f b6 c0             	movzbl %al,%eax
f012a712:	c1 e0 04             	shl    $0x4,%eax
f012a715:	89 c2                	mov    %eax,%edx
f012a717:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012a71d:	01 d0                	add    %edx,%eax
f012a71f:	48                   	dec    %eax
f012a720:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f012a726:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012a72c:	ba 00 00 00 00       	mov    $0x0,%edx
f012a731:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f012a737:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012a73d:	29 d0                	sub    %edx,%eax
f012a73f:	01 d8                	add    %ebx,%eax
f012a741:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012a746:	39 c1                	cmp    %eax,%ecx
f012a748:	74 17                	je     f012a761 <test_kfreelast+0x7f0>
f012a74a:	83 ec 04             	sub    $0x4,%esp
f012a74d:	68 e0 b9 13 f0       	push   $0xf013b9e0
f012a752:	68 06 0d 00 00       	push   $0xd06
f012a757:	68 fa b8 13 f0       	push   $0xf013b8fa
f012a75c:	e8 a4 5a fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a761:	e8 62 96 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a766:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a769:	74 17                	je     f012a782 <test_kfreelast+0x811>
f012a76b:	83 ec 04             	sub    $0x4,%esp
f012a76e:	68 14 b9 13 f0       	push   $0xf013b914
f012a773:	68 07 0d 00 00       	push   $0xd07
f012a778:	68 fa b8 13 f0       	push   $0xf013b8fa
f012a77d:	e8 83 5a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a782:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a785:	e8 0d 2a fe ff       	call   f010d197 <sys_calculate_free_frames>
f012a78a:	29 c3                	sub    %eax,%ebx
f012a78c:	89 d8                	mov    %ebx,%eax
f012a78e:	3d 00 03 00 00       	cmp    $0x300,%eax
f012a793:	74 17                	je     f012a7ac <test_kfreelast+0x83b>
f012a795:	83 ec 04             	sub    $0x4,%esp
f012a798:	68 7c b9 13 f0       	push   $0xf013b97c
f012a79d:	68 08 0d 00 00       	push   $0xd08
f012a7a2:	68 fa b8 13 f0       	push   $0xf013b8fa
f012a7a7:	e8 59 5a fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012a7ac:	c7 85 20 fe ff ff ff 	movl   $0x2ffbff,-0x1e0(%ebp)
f012a7b3:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f012a7b6:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012a7bc:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012a7bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a7c6:	eb 0e                	jmp    f012a7d6 <test_kfreelast+0x865>
		{
			ptr[i] = 5 ;
f012a7c8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a7cb:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a7ce:	01 d0                	add    %edx,%eax
f012a7d0:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012a7d3:	ff 45 f4             	incl   -0xc(%ebp)
f012a7d6:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012a7dc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a7df:	7f e7                	jg     f012a7c8 <test_kfreelast+0x857>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012a7e1:	e8 b1 29 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012a7e6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a7e9:	e8 da 95 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a7ee:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f012a7f1:	83 ec 0c             	sub    $0xc,%esp
f012a7f4:	68 00 fc 5f 00       	push   $0x5ffc00
f012a7f9:	e8 8d d5 fd ff       	call   f0107d8b <kmalloc>
f012a7fe:	83 c4 10             	add    $0x10,%esp
f012a801:	89 85 84 fd ff ff    	mov    %eax,-0x27c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a807:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f012a80d:	89 c1                	mov    %eax,%ecx
f012a80f:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f012a816:	10 00 00 
f012a819:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012a81f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a824:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f012a82a:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012a830:	ba 00 00 00 00       	mov    $0x0,%edx
f012a835:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f012a83b:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012a841:	29 d0                	sub    %edx,%eax
f012a843:	89 c3                	mov    %eax,%ebx
f012a845:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f012a84c:	10 00 00 
f012a84f:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012a854:	0f b6 d0             	movzbl %al,%edx
f012a857:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a85d:	01 d0                	add    %edx,%eax
f012a85f:	48                   	dec    %eax
f012a860:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f012a866:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a86c:	ba 00 00 00 00       	mov    $0x0,%edx
f012a871:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f012a877:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a87d:	29 d0                	sub    %edx,%eax
f012a87f:	01 c3                	add    %eax,%ebx
f012a881:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f012a888:	10 00 00 
f012a88b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012a890:	0f b6 c0             	movzbl %al,%eax
f012a893:	c1 e0 04             	shl    $0x4,%eax
f012a896:	89 c2                	mov    %eax,%edx
f012a898:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a89e:	01 d0                	add    %edx,%eax
f012a8a0:	48                   	dec    %eax
f012a8a1:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f012a8a7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a8ad:	ba 00 00 00 00       	mov    $0x0,%edx
f012a8b2:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f012a8b8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a8be:	29 d0                	sub    %edx,%eax
f012a8c0:	01 d8                	add    %ebx,%eax
f012a8c2:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012a8c7:	39 c1                	cmp    %eax,%ecx
f012a8c9:	74 17                	je     f012a8e2 <test_kfreelast+0x971>
f012a8cb:	83 ec 04             	sub    $0x4,%esp
f012a8ce:	68 e0 b9 13 f0       	push   $0xf013b9e0
f012a8d3:	68 14 0d 00 00       	push   $0xd14
f012a8d8:	68 fa b8 13 f0       	push   $0xf013b8fa
f012a8dd:	e8 23 59 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a8e2:	e8 e1 94 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a8e7:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a8ea:	74 17                	je     f012a903 <test_kfreelast+0x992>
f012a8ec:	83 ec 04             	sub    $0x4,%esp
f012a8ef:	68 14 b9 13 f0       	push   $0xf013b914
f012a8f4:	68 15 0d 00 00       	push   $0xd15
f012a8f9:	68 fa b8 13 f0       	push   $0xf013b8fa
f012a8fe:	e8 02 59 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a903:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a906:	e8 8c 28 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012a90b:	29 c3                	sub    %eax,%ebx
f012a90d:	89 d8                	mov    %ebx,%eax
f012a90f:	3d 00 06 00 00       	cmp    $0x600,%eax
f012a914:	74 17                	je     f012a92d <test_kfreelast+0x9bc>
f012a916:	83 ec 04             	sub    $0x4,%esp
f012a919:	68 7c b9 13 f0       	push   $0xf013b97c
f012a91e:	68 16 0d 00 00       	push   $0xd16
f012a923:	68 fa b8 13 f0       	push   $0xf013b8fa
f012a928:	e8 d8 58 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f012a92d:	c7 85 24 fe ff ff ff 	movl   $0x5ffbff,-0x1dc(%ebp)
f012a934:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012a937:	e8 5b 28 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012a93c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a93f:	e8 84 94 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a944:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012a947:	83 ec 0c             	sub    $0xc,%esp
f012a94a:	68 00 38 00 00       	push   $0x3800
f012a94f:	e8 37 d4 fd ff       	call   f0107d8b <kmalloc>
f012a954:	83 c4 10             	add    $0x10,%esp
f012a957:	89 85 88 fd ff ff    	mov    %eax,-0x278(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a95d:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012a963:	89 c1                	mov    %eax,%ecx
f012a965:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f012a96c:	10 00 00 
f012a96f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a975:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a97a:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f012a980:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012a986:	ba 00 00 00 00       	mov    $0x0,%edx
f012a98b:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f012a991:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012a997:	29 d0                	sub    %edx,%eax
f012a999:	89 c3                	mov    %eax,%ebx
f012a99b:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f012a9a2:	10 00 00 
f012a9a5:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012a9aa:	0f b6 d0             	movzbl %al,%edx
f012a9ad:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012a9b3:	01 d0                	add    %edx,%eax
f012a9b5:	48                   	dec    %eax
f012a9b6:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f012a9bc:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012a9c2:	ba 00 00 00 00       	mov    $0x0,%edx
f012a9c7:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f012a9cd:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012a9d3:	29 d0                	sub    %edx,%eax
f012a9d5:	01 c3                	add    %eax,%ebx
f012a9d7:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f012a9de:	10 00 00 
f012a9e1:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012a9e6:	0f b6 c0             	movzbl %al,%eax
f012a9e9:	c1 e0 04             	shl    $0x4,%eax
f012a9ec:	89 c2                	mov    %eax,%edx
f012a9ee:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012a9f4:	01 d0                	add    %edx,%eax
f012a9f6:	48                   	dec    %eax
f012a9f7:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f012a9fd:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012aa03:	ba 00 00 00 00       	mov    $0x0,%edx
f012aa08:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f012aa0e:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012aa14:	29 d0                	sub    %edx,%eax
f012aa16:	01 d8                	add    %ebx,%eax
f012aa18:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012aa1d:	39 c1                	cmp    %eax,%ecx
f012aa1f:	74 17                	je     f012aa38 <test_kfreelast+0xac7>
f012aa21:	83 ec 04             	sub    $0x4,%esp
f012aa24:	68 e0 b9 13 f0       	push   $0xf013b9e0
f012aa29:	68 1d 0d 00 00       	push   $0xd1d
f012aa2e:	68 fa b8 13 f0       	push   $0xf013b8fa
f012aa33:	e8 cd 57 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012aa38:	e8 8b 93 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012aa3d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012aa40:	74 17                	je     f012aa59 <test_kfreelast+0xae8>
f012aa42:	83 ec 04             	sub    $0x4,%esp
f012aa45:	68 14 b9 13 f0       	push   $0xf013b914
f012aa4a:	68 1e 0d 00 00       	push   $0xd1e
f012aa4f:	68 fa b8 13 f0       	push   $0xf013b8fa
f012aa54:	e8 ac 57 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012aa59:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012aa5c:	e8 36 27 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012aa61:	29 c3                	sub    %eax,%ebx
f012aa63:	89 d8                	mov    %ebx,%eax
f012aa65:	83 f8 04             	cmp    $0x4,%eax
f012aa68:	74 17                	je     f012aa81 <test_kfreelast+0xb10>
f012aa6a:	83 ec 04             	sub    $0x4,%esp
f012aa6d:	68 7c b9 13 f0       	push   $0xf013b97c
f012aa72:	68 1f 0d 00 00       	push   $0xd1f
f012aa77:	68 fa b8 13 f0       	push   $0xf013b8fa
f012aa7c:	e8 84 57 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f012aa81:	c7 85 28 fe ff ff ff 	movl   $0x37ff,-0x1d8(%ebp)
f012aa88:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f012aa8b:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012aa91:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012aa94:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012aa9b:	eb 0e                	jmp    f012aaab <test_kfreelast+0xb3a>
		{
			ptr[i] = 7 ;
f012aa9d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012aaa0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012aaa3:	01 d0                	add    %edx,%eax
f012aaa5:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012aaa8:	ff 45 f4             	incl   -0xc(%ebp)
f012aaab:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012aab1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012aab4:	7f e7                	jg     f012aa9d <test_kfreelast+0xb2c>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f012aab6:	e8 dc 26 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012aabb:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012aac1:	e8 02 93 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012aac6:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[0]);
f012aacc:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012aad2:	83 ec 0c             	sub    $0xc,%esp
f012aad5:	50                   	push   %eax
f012aad6:	e8 7b d3 fd ff       	call   f0107e56 <kfree>
f012aadb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012aade:	e8 e5 92 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012aae3:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012aae9:	74 17                	je     f012ab02 <test_kfreelast+0xb91>
f012aaeb:	83 ec 04             	sub    $0x4,%esp
f012aaee:	68 14 b9 13 f0       	push   $0xf013b914
f012aaf3:	68 2e 0d 00 00       	push   $0xd2e
f012aaf8:	68 fa b8 13 f0       	push   $0xf013b8fa
f012aafd:	e8 03 57 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012ab02:	e8 90 26 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012ab07:	89 c2                	mov    %eax,%edx
f012ab09:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012ab0f:	29 c2                	sub    %eax,%edx
f012ab11:	89 d0                	mov    %edx,%eax
f012ab13:	3d 00 02 00 00       	cmp    $0x200,%eax
f012ab18:	74 17                	je     f012ab31 <test_kfreelast+0xbc0>
f012ab1a:	83 ec 04             	sub    $0x4,%esp
f012ab1d:	68 84 c0 13 f0       	push   $0xf013c084
f012ab22:	68 2f 0d 00 00       	push   $0xd2f
f012ab27:	68 fa b8 13 f0       	push   $0xf013b8fa
f012ab2c:	e8 d4 56 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012ab31:	e8 61 26 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012ab36:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ab3c:	e8 87 92 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ab41:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[1]);
f012ab47:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f012ab4d:	83 ec 0c             	sub    $0xc,%esp
f012ab50:	50                   	push   %eax
f012ab51:	e8 00 d3 fd ff       	call   f0107e56 <kfree>
f012ab56:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012ab59:	e8 6a 92 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ab5e:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012ab64:	74 17                	je     f012ab7d <test_kfreelast+0xc0c>
f012ab66:	83 ec 04             	sub    $0x4,%esp
f012ab69:	68 14 b9 13 f0       	push   $0xf013b914
f012ab6e:	68 35 0d 00 00       	push   $0xd35
f012ab73:	68 fa b8 13 f0       	push   $0xf013b8fa
f012ab78:	e8 88 56 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012ab7d:	e8 15 26 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012ab82:	89 c2                	mov    %eax,%edx
f012ab84:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012ab8a:	29 c2                	sub    %eax,%edx
f012ab8c:	89 d0                	mov    %edx,%eax
f012ab8e:	3d 00 02 00 00       	cmp    $0x200,%eax
f012ab93:	74 17                	je     f012abac <test_kfreelast+0xc3b>
f012ab95:	83 ec 04             	sub    $0x4,%esp
f012ab98:	68 84 c0 13 f0       	push   $0xf013c084
f012ab9d:	68 36 0d 00 00       	push   $0xd36
f012aba2:	68 fa b8 13 f0       	push   $0xf013b8fa
f012aba7:	e8 59 56 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012abac:	e8 e6 25 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012abb1:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012abb7:	e8 0c 92 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012abbc:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[6]);
f012abc2:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f012abc8:	83 ec 0c             	sub    $0xc,%esp
f012abcb:	50                   	push   %eax
f012abcc:	e8 85 d2 fd ff       	call   f0107e56 <kfree>
f012abd1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012abd4:	e8 ef 91 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012abd9:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012abdf:	74 17                	je     f012abf8 <test_kfreelast+0xc87>
f012abe1:	83 ec 04             	sub    $0x4,%esp
f012abe4:	68 14 b9 13 f0       	push   $0xf013b914
f012abe9:	68 3c 0d 00 00       	push   $0xd3c
f012abee:	68 fa b8 13 f0       	push   $0xf013b8fa
f012abf3:	e8 0d 56 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012abf8:	e8 9a 25 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012abfd:	89 c2                	mov    %eax,%edx
f012abff:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012ac05:	29 c2                	sub    %eax,%edx
f012ac07:	89 d0                	mov    %edx,%eax
f012ac09:	3d 00 06 00 00       	cmp    $0x600,%eax
f012ac0e:	74 17                	je     f012ac27 <test_kfreelast+0xcb6>
f012ac10:	83 ec 04             	sub    $0x4,%esp
f012ac13:	68 84 c0 13 f0       	push   $0xf013c084
f012ac18:	68 3d 0d 00 00       	push   $0xd3d
f012ac1d:	68 fa b8 13 f0       	push   $0xf013b8fa
f012ac22:	e8 de 55 fd ff       	call   f0100205 <_panic>
	}

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f012ac27:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012ac2d:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012ac30:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ac37:	eb 1e                	jmp    f012ac57 <test_kfreelast+0xce6>
		{
			sums[2] += ptr[i] ;
f012ac39:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012ac3f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012ac42:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ac45:	01 c8                	add    %ecx,%eax
f012ac47:	8a 00                	mov    (%eax),%al
f012ac49:	0f be c0             	movsbl %al,%eax
f012ac4c:	01 d0                	add    %edx,%eax
f012ac4e:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012ac54:	ff 45 f4             	incl   -0xc(%ebp)
f012ac57:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012ac5d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ac60:	7f d7                	jg     f012ac39 <test_kfreelast+0xcc8>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f012ac62:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012ac68:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012ac6e:	01 c0                	add    %eax,%eax
f012ac70:	39 c2                	cmp    %eax,%edx
f012ac72:	74 17                	je     f012ac8b <test_kfreelast+0xd1a>
f012ac74:	83 ec 04             	sub    $0x4,%esp
f012ac77:	68 e0 c0 13 f0       	push   $0xf013c0e0
f012ac7c:	68 48 0d 00 00       	push   $0xd48
f012ac81:	68 fa b8 13 f0       	push   $0xf013b8fa
f012ac86:	e8 7a 55 fd ff       	call   f0100205 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f012ac8b:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012ac91:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012ac94:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ac9b:	eb 1e                	jmp    f012acbb <test_kfreelast+0xd4a>
		{
			sums[3] += ptr[i] ;
f012ac9d:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012aca3:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012aca6:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012aca9:	01 c8                	add    %ecx,%eax
f012acab:	8a 00                	mov    (%eax),%al
f012acad:	0f be c0             	movsbl %al,%eax
f012acb0:	01 d0                	add    %edx,%eax
f012acb2:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012acb8:	ff 45 f4             	incl   -0xc(%ebp)
f012acbb:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012acc1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012acc4:	7f d7                	jg     f012ac9d <test_kfreelast+0xd2c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f012acc6:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012accc:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012acd2:	89 c1                	mov    %eax,%ecx
f012acd4:	01 c9                	add    %ecx,%ecx
f012acd6:	01 c8                	add    %ecx,%eax
f012acd8:	39 c2                	cmp    %eax,%edx
f012acda:	74 17                	je     f012acf3 <test_kfreelast+0xd82>
f012acdc:	83 ec 04             	sub    $0x4,%esp
f012acdf:	68 e0 c0 13 f0       	push   $0xf013c0e0
f012ace4:	68 50 0d 00 00       	push   $0xd50
f012ace9:	68 fa b8 13 f0       	push   $0xf013b8fa
f012acee:	e8 12 55 fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f012acf3:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012acf9:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012acfc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ad03:	eb 1e                	jmp    f012ad23 <test_kfreelast+0xdb2>
		{
			sums[4] += ptr[i] ;
f012ad05:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012ad0b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012ad0e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ad11:	01 c8                	add    %ecx,%eax
f012ad13:	8a 00                	mov    (%eax),%al
f012ad15:	0f be c0             	movsbl %al,%eax
f012ad18:	01 d0                	add    %edx,%eax
f012ad1a:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012ad20:	ff 45 f4             	incl   -0xc(%ebp)
f012ad23:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012ad29:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ad2c:	7f d7                	jg     f012ad05 <test_kfreelast+0xd94>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f012ad2e:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f012ad34:	8b 95 1c fe ff ff    	mov    -0x1e4(%ebp),%edx
f012ad3a:	c1 e2 02             	shl    $0x2,%edx
f012ad3d:	39 d0                	cmp    %edx,%eax
f012ad3f:	74 17                	je     f012ad58 <test_kfreelast+0xde7>
f012ad41:	83 ec 04             	sub    $0x4,%esp
f012ad44:	68 e0 c0 13 f0       	push   $0xf013c0e0
f012ad49:	68 58 0d 00 00       	push   $0xd58
f012ad4e:	68 fa b8 13 f0       	push   $0xf013b8fa
f012ad53:	e8 ad 54 fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f012ad58:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012ad5e:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012ad61:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ad68:	eb 1e                	jmp    f012ad88 <test_kfreelast+0xe17>
		{
			sums[5] += ptr[i] ;
f012ad6a:	8b 95 d0 fd ff ff    	mov    -0x230(%ebp),%edx
f012ad70:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012ad73:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ad76:	01 c8                	add    %ecx,%eax
f012ad78:	8a 00                	mov    (%eax),%al
f012ad7a:	0f be c0             	movsbl %al,%eax
f012ad7d:	01 d0                	add    %edx,%eax
f012ad7f:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012ad85:	ff 45 f4             	incl   -0xc(%ebp)
f012ad88:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012ad8e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ad91:	7f d7                	jg     f012ad6a <test_kfreelast+0xdf9>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f012ad93:	8b 8d d0 fd ff ff    	mov    -0x230(%ebp),%ecx
f012ad99:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f012ad9f:	89 d0                	mov    %edx,%eax
f012ada1:	c1 e0 02             	shl    $0x2,%eax
f012ada4:	01 d0                	add    %edx,%eax
f012ada6:	39 c1                	cmp    %eax,%ecx
f012ada8:	74 17                	je     f012adc1 <test_kfreelast+0xe50>
f012adaa:	83 ec 04             	sub    $0x4,%esp
f012adad:	68 e0 c0 13 f0       	push   $0xf013c0e0
f012adb2:	68 60 0d 00 00       	push   $0xd60
f012adb7:	68 fa b8 13 f0       	push   $0xf013b8fa
f012adbc:	e8 44 54 fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f012adc1:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012adc7:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012adca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012add1:	eb 1e                	jmp    f012adf1 <test_kfreelast+0xe80>
		{
			sums[7] += ptr[i] ;
f012add3:	8b 95 d8 fd ff ff    	mov    -0x228(%ebp),%edx
f012add9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012addc:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012addf:	01 c8                	add    %ecx,%eax
f012ade1:	8a 00                	mov    (%eax),%al
f012ade3:	0f be c0             	movsbl %al,%eax
f012ade6:	01 d0                	add    %edx,%eax
f012ade8:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012adee:	ff 45 f4             	incl   -0xc(%ebp)
f012adf1:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012adf7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012adfa:	7f d7                	jg     f012add3 <test_kfreelast+0xe62>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f012adfc:	8b 8d d8 fd ff ff    	mov    -0x228(%ebp),%ecx
f012ae02:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f012ae08:	89 d0                	mov    %edx,%eax
f012ae0a:	01 c0                	add    %eax,%eax
f012ae0c:	01 d0                	add    %edx,%eax
f012ae0e:	01 c0                	add    %eax,%eax
f012ae10:	01 d0                	add    %edx,%eax
f012ae12:	39 c1                	cmp    %eax,%ecx
f012ae14:	74 17                	je     f012ae2d <test_kfreelast+0xebc>
f012ae16:	83 ec 04             	sub    $0x4,%esp
f012ae19:	68 e0 c0 13 f0       	push   $0xf013c0e0
f012ae1e:	68 68 0d 00 00       	push   $0xd68
f012ae23:	68 fa b8 13 f0       	push   $0xf013b8fa
f012ae28:	e8 d8 53 fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f012ae2d:	e8 65 23 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012ae32:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ae35:	e8 8e 8f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ae3a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f012ae3d:	83 ec 0c             	sub    $0xc,%esp
f012ae40:	68 00 50 00 00       	push   $0x5000
f012ae45:	e8 41 cf fd ff       	call   f0107d8b <kmalloc>
f012ae4a:	83 c4 10             	add    $0x10,%esp
f012ae4d:	89 85 8c fd ff ff    	mov    %eax,-0x274(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012ae53:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012ae59:	89 c1                	mov    %eax,%ecx
f012ae5b:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f012ae62:	10 00 00 
f012ae65:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012ae6b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ae70:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f012ae76:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012ae7c:	ba 00 00 00 00       	mov    $0x0,%edx
f012ae81:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f012ae87:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012ae8d:	29 d0                	sub    %edx,%eax
f012ae8f:	89 c3                	mov    %eax,%ebx
f012ae91:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f012ae98:	10 00 00 
f012ae9b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012aea0:	0f b6 d0             	movzbl %al,%edx
f012aea3:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012aea9:	01 d0                	add    %edx,%eax
f012aeab:	48                   	dec    %eax
f012aeac:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f012aeb2:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012aeb8:	ba 00 00 00 00       	mov    $0x0,%edx
f012aebd:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f012aec3:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012aec9:	29 d0                	sub    %edx,%eax
f012aecb:	01 c3                	add    %eax,%ebx
f012aecd:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f012aed4:	10 00 00 
f012aed7:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012aedc:	0f b6 c0             	movzbl %al,%eax
f012aedf:	c1 e0 04             	shl    $0x4,%eax
f012aee2:	89 c2                	mov    %eax,%edx
f012aee4:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012aeea:	01 d0                	add    %edx,%eax
f012aeec:	48                   	dec    %eax
f012aeed:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f012aef3:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012aef9:	ba 00 00 00 00       	mov    $0x0,%edx
f012aefe:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f012af04:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012af0a:	29 d0                	sub    %edx,%eax
f012af0c:	01 d8                	add    %ebx,%eax
f012af0e:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012af13:	39 c1                	cmp    %eax,%ecx
f012af15:	74 17                	je     f012af2e <test_kfreelast+0xfbd>
f012af17:	83 ec 04             	sub    $0x4,%esp
f012af1a:	68 e0 b9 13 f0       	push   $0xf013b9e0
f012af1f:	68 71 0d 00 00       	push   $0xd71
f012af24:	68 fa b8 13 f0       	push   $0xf013b8fa
f012af29:	e8 d7 52 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012af2e:	e8 95 8e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012af33:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012af36:	74 17                	je     f012af4f <test_kfreelast+0xfde>
f012af38:	83 ec 04             	sub    $0x4,%esp
f012af3b:	68 14 b9 13 f0       	push   $0xf013b914
f012af40:	68 72 0d 00 00       	push   $0xd72
f012af45:	68 fa b8 13 f0       	push   $0xf013b8fa
f012af4a:	e8 b6 52 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f012af4f:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012af52:	e8 40 22 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012af57:	29 c3                	sub    %eax,%ebx
f012af59:	89 d8                	mov    %ebx,%eax
f012af5b:	83 f8 05             	cmp    $0x5,%eax
f012af5e:	74 17                	je     f012af77 <test_kfreelast+0x1006>
f012af60:	83 ec 04             	sub    $0x4,%esp
f012af63:	68 7c b9 13 f0       	push   $0xf013b97c
f012af68:	68 73 0d 00 00       	push   $0xd73
f012af6d:	68 fa b8 13 f0       	push   $0xf013b8fa
f012af72:	e8 8e 52 fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f012af77:	c7 85 2c fe ff ff ff 	movl   $0x4fff,-0x1d4(%ebp)
f012af7e:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f012af81:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012af87:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f012af8a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012af91:	eb 0e                	jmp    f012afa1 <test_kfreelast+0x1030>
		{
			ptr[i] = 8 ;
f012af93:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012af96:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012af99:	01 d0                	add    %edx,%eax
f012af9b:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f012af9e:	ff 45 f4             	incl   -0xc(%ebp)
f012afa1:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012afa7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012afaa:	7f e7                	jg     f012af93 <test_kfreelast+0x1022>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012afac:	e8 e6 21 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012afb1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012afb4:	e8 0f 8e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012afb9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f012afbc:	83 ec 0c             	sub    $0xc,%esp
f012afbf:	68 00 00 10 00       	push   $0x100000
f012afc4:	e8 c2 cd fd ff       	call   f0107d8b <kmalloc>
f012afc9:	83 c4 10             	add    $0x10,%esp
f012afcc:	89 85 90 fd ff ff    	mov    %eax,-0x270(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012afd2:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012afd8:	89 c1                	mov    %eax,%ecx
f012afda:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f012afe1:	10 00 00 
f012afe4:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012afea:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012afef:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f012aff5:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012affb:	ba 00 00 00 00       	mov    $0x0,%edx
f012b000:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f012b006:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012b00c:	29 d0                	sub    %edx,%eax
f012b00e:	89 c3                	mov    %eax,%ebx
f012b010:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f012b017:	10 00 00 
f012b01a:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012b01f:	0f b6 d0             	movzbl %al,%edx
f012b022:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012b028:	01 d0                	add    %edx,%eax
f012b02a:	48                   	dec    %eax
f012b02b:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f012b031:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012b037:	ba 00 00 00 00       	mov    $0x0,%edx
f012b03c:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f012b042:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012b048:	29 d0                	sub    %edx,%eax
f012b04a:	01 c3                	add    %eax,%ebx
f012b04c:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f012b053:	10 00 00 
f012b056:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012b05b:	0f b6 c0             	movzbl %al,%eax
f012b05e:	c1 e0 04             	shl    $0x4,%eax
f012b061:	89 c2                	mov    %eax,%edx
f012b063:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012b069:	01 d0                	add    %edx,%eax
f012b06b:	48                   	dec    %eax
f012b06c:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f012b072:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012b078:	ba 00 00 00 00       	mov    $0x0,%edx
f012b07d:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f012b083:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012b089:	29 d0                	sub    %edx,%eax
f012b08b:	01 d8                	add    %ebx,%eax
f012b08d:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012b092:	39 c1                	cmp    %eax,%ecx
f012b094:	74 17                	je     f012b0ad <test_kfreelast+0x113c>
f012b096:	83 ec 04             	sub    $0x4,%esp
f012b099:	68 e0 b9 13 f0       	push   $0xf013b9e0
f012b09e:	68 7f 0d 00 00       	push   $0xd7f
f012b0a3:	68 fa b8 13 f0       	push   $0xf013b8fa
f012b0a8:	e8 58 51 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012b0ad:	e8 16 8d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b0b2:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b0b5:	74 17                	je     f012b0ce <test_kfreelast+0x115d>
f012b0b7:	83 ec 04             	sub    $0x4,%esp
f012b0ba:	68 14 b9 13 f0       	push   $0xf013b914
f012b0bf:	68 80 0d 00 00       	push   $0xd80
f012b0c4:	68 fa b8 13 f0       	push   $0xf013b8fa
f012b0c9:	e8 37 51 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012b0ce:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b0d1:	e8 c1 20 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012b0d6:	29 c3                	sub    %eax,%ebx
f012b0d8:	89 d8                	mov    %ebx,%eax
f012b0da:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b0df:	74 17                	je     f012b0f8 <test_kfreelast+0x1187>
f012b0e1:	83 ec 04             	sub    $0x4,%esp
f012b0e4:	68 7c b9 13 f0       	push   $0xf013b97c
f012b0e9:	68 81 0d 00 00       	push   $0xd81
f012b0ee:	68 fa b8 13 f0       	push   $0xf013b8fa
f012b0f3:	e8 0d 51 fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f012b0f8:	c7 85 30 fe ff ff ff 	movl   $0xfffff,-0x1d0(%ebp)
f012b0ff:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f012b102:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012b108:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f012b10b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b112:	eb 0e                	jmp    f012b122 <test_kfreelast+0x11b1>
		{
			ptr[i] = 9 ;
f012b114:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b117:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b11a:	01 d0                	add    %edx,%eax
f012b11c:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f012b11f:	ff 45 f4             	incl   -0xc(%ebp)
f012b122:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012b128:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b12b:	7f e7                	jg     f012b114 <test_kfreelast+0x11a3>
		{
			ptr[i] = 9 ;
		}
	}

	ce = 0;
f012b12d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kfree last allocated space
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012b134:	e8 5e 20 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012b139:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b13c:	e8 87 8c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b141:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012b144:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012b14a:	83 ec 0c             	sub    $0xc,%esp
f012b14d:	50                   	push   %eax
f012b14e:	e8 03 cd fd ff       	call   f0107e56 <kfree>
f012b153:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012b156:	e8 6d 8c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b15b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b15e:	74 17                	je     f012b177 <test_kfreelast+0x1206>
f012b160:	83 ec 04             	sub    $0x4,%esp
f012b163:	68 14 b9 13 f0       	push   $0xf013b914
f012b168:	68 91 0d 00 00       	push   $0xd91
f012b16d:	68 fa b8 13 f0       	push   $0xf013b8fa
f012b172:	e8 8e 50 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f012b177:	e8 1b 20 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012b17c:	89 c2                	mov    %eax,%edx
f012b17e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b181:	29 c2                	sub    %eax,%edx
f012b183:	89 d0                	mov    %edx,%eax
f012b185:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b18a:	74 17                	je     f012b1a3 <test_kfreelast+0x1232>
f012b18c:	83 ec 04             	sub    $0x4,%esp
f012b18f:	68 84 c0 13 f0       	push   $0xf013c084
f012b194:	68 92 0d 00 00       	push   $0xd92
f012b199:	68 fa b8 13 f0       	push   $0xf013b8fa
f012b19e:	e8 62 50 fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree last [25%]
	{
		//30 KB
		freeFrames = sys_calculate_free_frames() ;
f012b1a3:	e8 ef 1f fe ff       	call   f010d197 <sys_calculate_free_frames>
f012b1a8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b1ab:	e8 18 8c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b1b0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[10] = kmalloc(30*kilo);
f012b1b3:	83 ec 0c             	sub    $0xc,%esp
f012b1b6:	68 00 78 00 00       	push   $0x7800
f012b1bb:	e8 cb cb fd ff       	call   f0107d8b <kmalloc>
f012b1c0:	83 c4 10             	add    $0x10,%esp
f012b1c3:	89 85 94 fd ff ff    	mov    %eax,-0x26c(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012b1c9:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012b1cf:	89 c1                	mov    %eax,%ecx
f012b1d1:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f012b1d8:	10 00 00 
f012b1db:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012b1e1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b1e6:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f012b1ec:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012b1f2:	ba 00 00 00 00       	mov    $0x0,%edx
f012b1f7:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f012b1fd:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012b203:	29 d0                	sub    %edx,%eax
f012b205:	89 c3                	mov    %eax,%ebx
f012b207:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f012b20e:	10 00 00 
f012b211:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012b216:	0f b6 d0             	movzbl %al,%edx
f012b219:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012b21f:	01 d0                	add    %edx,%eax
f012b221:	48                   	dec    %eax
f012b222:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f012b228:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012b22e:	ba 00 00 00 00       	mov    $0x0,%edx
f012b233:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f012b239:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012b23f:	29 d0                	sub    %edx,%eax
f012b241:	01 c3                	add    %eax,%ebx
f012b243:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f012b24a:	10 00 00 
f012b24d:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012b252:	0f b6 c0             	movzbl %al,%eax
f012b255:	c1 e0 04             	shl    $0x4,%eax
f012b258:	89 c2                	mov    %eax,%edx
f012b25a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b260:	01 d0                	add    %edx,%eax
f012b262:	48                   	dec    %eax
f012b263:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f012b269:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012b26f:	ba 00 00 00 00       	mov    $0x0,%edx
f012b274:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f012b27a:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012b280:	29 d0                	sub    %edx,%eax
f012b282:	01 d8                	add    %ebx,%eax
f012b284:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012b289:	39 c1                	cmp    %eax,%ecx
f012b28b:	74 17                	je     f012b2a4 <test_kfreelast+0x1333>
f012b28d:	83 ec 04             	sub    $0x4,%esp
f012b290:	68 e0 b9 13 f0       	push   $0xf013b9e0
f012b295:	68 9b 0d 00 00       	push   $0xd9b
f012b29a:	68 fa b8 13 f0       	push   $0xf013b8fa
f012b29f:	e8 61 4f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012b2a4:	e8 1f 8b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b2a9:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b2ac:	74 17                	je     f012b2c5 <test_kfreelast+0x1354>
f012b2ae:	83 ec 04             	sub    $0x4,%esp
f012b2b1:	68 14 b9 13 f0       	push   $0xf013b914
f012b2b6:	68 9c 0d 00 00       	push   $0xd9c
f012b2bb:	68 fa b8 13 f0       	push   $0xf013b8fa
f012b2c0:	e8 40 4f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
f012b2c5:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b2c8:	e8 ca 1e fe ff       	call   f010d197 <sys_calculate_free_frames>
f012b2cd:	29 c3                	sub    %eax,%ebx
f012b2cf:	89 d8                	mov    %ebx,%eax
f012b2d1:	83 f8 08             	cmp    $0x8,%eax
f012b2d4:	74 17                	je     f012b2ed <test_kfreelast+0x137c>
f012b2d6:	83 ec 04             	sub    $0x4,%esp
f012b2d9:	68 7c b9 13 f0       	push   $0xf013b97c
f012b2de:	68 9d 0d 00 00       	push   $0xd9d
f012b2e3:	68 fa b8 13 f0       	push   $0xf013b8fa
f012b2e8:	e8 18 4f fd ff       	call   f0100205 <_panic>
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
f012b2ed:	c7 85 34 fe ff ff ff 	movl   $0x77ff,-0x1cc(%ebp)
f012b2f4:	77 00 00 
		ptr = (char*)ptr_allocations[10];
f012b2f7:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012b2fd:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f012b300:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b307:	eb 0e                	jmp    f012b317 <test_kfreelast+0x13a6>
		{
			ptr[i] = 10 ;
f012b309:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b30c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b30f:	01 d0                	add    %edx,%eax
f012b311:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f012b314:	ff 45 f4             	incl   -0xc(%ebp)
f012b317:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012b31d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b320:	7f e7                	jg     f012b309 <test_kfreelast+0x1398>
		{
			ptr[i] = 10 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012b322:	e8 70 1e fe ff       	call   f010d197 <sys_calculate_free_frames>
f012b327:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b32a:	e8 99 8a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b32f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[11] = kmalloc(1*Mega);
f012b332:	83 ec 0c             	sub    $0xc,%esp
f012b335:	68 00 00 10 00       	push   $0x100000
f012b33a:	e8 4c ca fd ff       	call   f0107d8b <kmalloc>
f012b33f:	83 c4 10             	add    $0x10,%esp
f012b342:	89 85 98 fd ff ff    	mov    %eax,-0x268(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012b348:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012b34e:	89 c1                	mov    %eax,%ecx
f012b350:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f012b357:	10 00 00 
f012b35a:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b360:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b365:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f012b36b:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b371:	ba 00 00 00 00       	mov    $0x0,%edx
f012b376:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f012b37c:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b382:	29 d0                	sub    %edx,%eax
f012b384:	89 c3                	mov    %eax,%ebx
f012b386:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f012b38d:	10 00 00 
f012b390:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012b395:	0f b6 d0             	movzbl %al,%edx
f012b398:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012b39e:	01 d0                	add    %edx,%eax
f012b3a0:	48                   	dec    %eax
f012b3a1:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f012b3a7:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b3ad:	ba 00 00 00 00       	mov    $0x0,%edx
f012b3b2:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f012b3b8:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b3be:	29 d0                	sub    %edx,%eax
f012b3c0:	01 c3                	add    %eax,%ebx
f012b3c2:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f012b3c9:	10 00 00 
f012b3cc:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012b3d1:	0f b6 c0             	movzbl %al,%eax
f012b3d4:	c1 e0 04             	shl    $0x4,%eax
f012b3d7:	89 c2                	mov    %eax,%edx
f012b3d9:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012b3df:	01 d0                	add    %edx,%eax
f012b3e1:	48                   	dec    %eax
f012b3e2:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f012b3e8:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012b3ee:	ba 00 00 00 00       	mov    $0x0,%edx
f012b3f3:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f012b3f9:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012b3ff:	29 d0                	sub    %edx,%eax
f012b401:	01 d8                	add    %ebx,%eax
f012b403:	2d 00 70 2e 09       	sub    $0x92e7000,%eax
f012b408:	39 c1                	cmp    %eax,%ecx
f012b40a:	74 17                	je     f012b423 <test_kfreelast+0x14b2>
f012b40c:	83 ec 04             	sub    $0x4,%esp
f012b40f:	68 e0 b9 13 f0       	push   $0xf013b9e0
f012b414:	68 a9 0d 00 00       	push   $0xda9
f012b419:	68 fa b8 13 f0       	push   $0xf013b8fa
f012b41e:	e8 e2 4d fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012b423:	e8 a0 89 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b428:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b42b:	74 17                	je     f012b444 <test_kfreelast+0x14d3>
f012b42d:	83 ec 04             	sub    $0x4,%esp
f012b430:	68 14 b9 13 f0       	push   $0xf013b914
f012b435:	68 aa 0d 00 00       	push   $0xdaa
f012b43a:	68 fa b8 13 f0       	push   $0xf013b8fa
f012b43f:	e8 c1 4d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012b444:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b447:	e8 4b 1d fe ff       	call   f010d197 <sys_calculate_free_frames>
f012b44c:	29 c3                	sub    %eax,%ebx
f012b44e:	89 d8                	mov    %ebx,%eax
f012b450:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b455:	74 17                	je     f012b46e <test_kfreelast+0x14fd>
f012b457:	83 ec 04             	sub    $0x4,%esp
f012b45a:	68 7c b9 13 f0       	push   $0xf013b97c
f012b45f:	68 ab 0d 00 00       	push   $0xdab
f012b464:	68 fa b8 13 f0       	push   $0xf013b8fa
f012b469:	e8 97 4d fd ff       	call   f0100205 <_panic>
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
f012b46e:	c7 85 38 fe ff ff ff 	movl   $0xfffff,-0x1c8(%ebp)
f012b475:	ff 0f 00 
		ptr = (char*)ptr_allocations[11];
f012b478:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012b47e:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f012b481:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b488:	eb 0e                	jmp    f012b498 <test_kfreelast+0x1527>
		{
			ptr[i] = 11 ;
f012b48a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b48d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b490:	01 d0                	add    %edx,%eax
f012b492:	c6 00 0b             	movb   $0xb,(%eax)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f012b495:	ff 45 f4             	incl   -0xc(%ebp)
f012b498:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f012b49e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b4a1:	7f e7                	jg     f012b48a <test_kfreelast+0x1519>
		{
			ptr[i] = 11 ;
		}
	}
	ce += 25;
f012b4a3:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
	cprintf("\nkfreelast: current evaluation = %d%\n", ce);
f012b4a7:	83 ec 08             	sub    $0x8,%esp
f012b4aa:	ff 75 f0             	pushl  -0x10(%ebp)
f012b4ad:	68 2c c9 13 f0       	push   $0xf013c92c
f012b4b2:	e8 57 58 fd ff       	call   f0100d0e <cprintf>
f012b4b7:	83 c4 10             	add    $0x10,%esp

	int f = 0;
f012b4ba:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	//kfree last allocated two spaces
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012b4c1:	e8 d1 1c fe ff       	call   f010d197 <sys_calculate_free_frames>
f012b4c6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b4c9:	e8 fa 88 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b4ce:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[11]);
f012b4d1:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012b4d7:	83 ec 0c             	sub    $0xc,%esp
f012b4da:	50                   	push   %eax
f012b4db:	e8 76 c9 fd ff       	call   f0107e56 <kfree>
f012b4e0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b4e3:	e8 e0 88 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b4e8:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b4eb:	74 1d                	je     f012b50a <test_kfreelast+0x1599>
f012b4ed:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b4f1:	75 17                	jne    f012b50a <test_kfreelast+0x1599>
f012b4f3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b4fa:	83 ec 0c             	sub    $0xc,%esp
f012b4fd:	68 54 c9 13 f0       	push   $0xf013c954
f012b502:	e8 07 58 fd ff       	call   f0100d0e <cprintf>
f012b507:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 256) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b50a:	e8 88 1c fe ff       	call   f010d197 <sys_calculate_free_frames>
f012b50f:	89 c2                	mov    %eax,%edx
f012b511:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b514:	29 c2                	sub    %eax,%edx
f012b516:	89 d0                	mov    %edx,%eax
f012b518:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b51d:	74 1d                	je     f012b53c <test_kfreelast+0x15cb>
f012b51f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b523:	75 17                	jne    f012b53c <test_kfreelast+0x15cb>
f012b525:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b52c:	83 ec 0c             	sub    $0xc,%esp
f012b52f:	68 c0 c9 13 f0       	push   $0xf013c9c0
f012b534:	e8 d5 57 fd ff       	call   f0100d0e <cprintf>
f012b539:	83 c4 10             	add    $0x10,%esp

		//kfree 30 KB
		freeFrames = sys_calculate_free_frames() ;
f012b53c:	e8 56 1c fe ff       	call   f010d197 <sys_calculate_free_frames>
f012b541:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b544:	e8 7f 88 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b549:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[10]);
f012b54c:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012b552:	83 ec 0c             	sub    $0xc,%esp
f012b555:	50                   	push   %eax
f012b556:	e8 fb c8 fd ff       	call   f0107e56 <kfree>
f012b55b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b55e:	e8 65 88 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b563:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b566:	74 1d                	je     f012b585 <test_kfreelast+0x1614>
f012b568:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b56c:	75 17                	jne    f012b585 <test_kfreelast+0x1614>
f012b56e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b575:	83 ec 0c             	sub    $0xc,%esp
f012b578:	68 54 c9 13 f0       	push   $0xf013c954
f012b57d:	e8 8c 57 fd ff       	call   f0100d0e <cprintf>
f012b582:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 8) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b585:	e8 0d 1c fe ff       	call   f010d197 <sys_calculate_free_frames>
f012b58a:	89 c2                	mov    %eax,%edx
f012b58c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b58f:	29 c2                	sub    %eax,%edx
f012b591:	89 d0                	mov    %edx,%eax
f012b593:	83 f8 08             	cmp    $0x8,%eax
f012b596:	74 1d                	je     f012b5b5 <test_kfreelast+0x1644>
f012b598:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b59c:	75 17                	jne    f012b5b5 <test_kfreelast+0x1644>
f012b59e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b5a5:	83 ec 0c             	sub    $0xc,%esp
f012b5a8:	68 c0 c9 13 f0       	push   $0xf013c9c0
f012b5ad:	e8 5c 57 fd ff       	call   f0100d0e <cprintf>
f012b5b2:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfree last allocated two spaces (in order) [10%]
	{
		//10 KB
		freeFrames = sys_calculate_free_frames() ;
f012b5b5:	e8 dd 1b fe ff       	call   f010d197 <sys_calculate_free_frames>
f012b5ba:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b5bd:	e8 06 88 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b5c2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[12] = kmalloc(10*kilo);
f012b5c5:	83 ec 0c             	sub    $0xc,%esp
f012b5c8:	68 00 28 00 00       	push   $0x2800
f012b5cd:	e8 b9 c7 fd ff       	call   f0107d8b <kmalloc>
f012b5d2:	83 c4 10             	add    $0x10,%esp
f012b5d5:	89 85 9c fd ff ff    	mov    %eax,-0x264(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012b5db:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b5e1:	89 c1                	mov    %eax,%ecx
f012b5e3:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f012b5ea:	10 00 00 
f012b5ed:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012b5f3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b5f8:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f012b5fe:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012b604:	ba 00 00 00 00       	mov    $0x0,%edx
f012b609:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f012b60f:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012b615:	29 d0                	sub    %edx,%eax
f012b617:	89 c3                	mov    %eax,%ebx
f012b619:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f012b620:	10 00 00 
f012b623:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012b628:	0f b6 d0             	movzbl %al,%edx
f012b62b:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012b631:	01 d0                	add    %edx,%eax
f012b633:	48                   	dec    %eax
f012b634:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f012b63a:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012b640:	ba 00 00 00 00       	mov    $0x0,%edx
f012b645:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f012b64b:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012b651:	29 d0                	sub    %edx,%eax
f012b653:	01 c3                	add    %eax,%ebx
f012b655:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f012b65c:	10 00 00 
f012b65f:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012b664:	0f b6 c0             	movzbl %al,%eax
f012b667:	c1 e0 04             	shl    $0x4,%eax
f012b66a:	89 c2                	mov    %eax,%edx
f012b66c:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012b672:	01 d0                	add    %edx,%eax
f012b674:	48                   	dec    %eax
f012b675:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f012b67b:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012b681:	ba 00 00 00 00       	mov    $0x0,%edx
f012b686:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f012b68c:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012b692:	29 d0                	sub    %edx,%eax
f012b694:	01 d8                	add    %ebx,%eax
f012b696:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012b69b:	39 c1                	cmp    %eax,%ecx
f012b69d:	74 1d                	je     f012b6bc <test_kfreelast+0x174b>
f012b69f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b6a3:	75 17                	jne    f012b6bc <test_kfreelast+0x174b>
f012b6a5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b6ac:	83 ec 0c             	sub    $0xc,%esp
f012b6af:	68 f8 c9 13 f0       	push   $0xf013c9f8
f012b6b4:	e8 55 56 fd ff       	call   f0100d0e <cprintf>
f012b6b9:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b6bc:	e8 07 87 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b6c1:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b6c4:	74 1d                	je     f012b6e3 <test_kfreelast+0x1772>
f012b6c6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b6ca:	75 17                	jne    f012b6e3 <test_kfreelast+0x1772>
f012b6cc:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b6d3:	83 ec 0c             	sub    $0xc,%esp
f012b6d6:	68 54 c9 13 f0       	push   $0xf013c954
f012b6db:	e8 2e 56 fd ff       	call   f0100d0e <cprintf>
f012b6e0:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012b6e3:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b6e6:	e8 ac 1a fe ff       	call   f010d197 <sys_calculate_free_frames>
f012b6eb:	29 c3                	sub    %eax,%ebx
f012b6ed:	89 d8                	mov    %ebx,%eax
f012b6ef:	83 f8 03             	cmp    $0x3,%eax
f012b6f2:	74 1d                	je     f012b711 <test_kfreelast+0x17a0>
f012b6f4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b6f8:	75 17                	jne    f012b711 <test_kfreelast+0x17a0>
f012b6fa:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b701:	83 ec 0c             	sub    $0xc,%esp
f012b704:	68 60 ca 13 f0       	push   $0xf013ca60
f012b709:	e8 00 56 fd ff       	call   f0100d0e <cprintf>
f012b70e:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
f012b711:	c7 85 3c fe ff ff ff 	movl   $0x27ff,-0x1c4(%ebp)
f012b718:	27 00 00 
		ptr = (char*)ptr_allocations[12];
f012b71b:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b721:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012b724:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b72b:	eb 0e                	jmp    f012b73b <test_kfreelast+0x17ca>
		{
			ptr[i] = 12 ;
f012b72d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b730:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b733:	01 d0                	add    %edx,%eax
f012b735:	c6 00 0c             	movb   $0xc,(%eax)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012b738:	ff 45 f4             	incl   -0xc(%ebp)
f012b73b:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012b741:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b744:	7f e7                	jg     f012b72d <test_kfreelast+0x17bc>
		{
			ptr[i] = 12 ;
		}
	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b746:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b74a:	75 17                	jne    f012b763 <test_kfreelast+0x17f2>
f012b74c:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012b750:	83 ec 08             	sub    $0x8,%esp
f012b753:	ff 75 f0             	pushl  -0x10(%ebp)
f012b756:	68 2c c9 13 f0       	push   $0xf013c92c
f012b75b:	e8 ae 55 fd ff       	call   f0100d0e <cprintf>
f012b760:	83 c4 10             	add    $0x10,%esp
f012b763:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
f012b76a:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b770:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012b773:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b77a:	eb 1e                	jmp    f012b79a <test_kfreelast+0x1829>
		{
			sums[12] += ptr[i] ;
f012b77c:	8b 95 ec fd ff ff    	mov    -0x214(%ebp),%edx
f012b782:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b785:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b788:	01 c8                	add    %ecx,%eax
f012b78a:	8a 00                	mov    (%eax),%al
f012b78c:	0f be c0             	movsbl %al,%eax
f012b78f:	01 d0                	add    %edx,%eax
f012b791:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012b797:	ff 45 f4             	incl   -0xc(%ebp)
f012b79a:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012b7a0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b7a3:	7f d7                	jg     f012b77c <test_kfreelast+0x180b>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012b7a5:	8b 8d ec fd ff ff    	mov    -0x214(%ebp),%ecx
f012b7ab:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f012b7b1:	89 d0                	mov    %edx,%eax
f012b7b3:	01 c0                	add    %eax,%eax
f012b7b5:	01 d0                	add    %edx,%eax
f012b7b7:	c1 e0 02             	shl    $0x2,%eax
f012b7ba:	39 c1                	cmp    %eax,%ecx
f012b7bc:	74 1d                	je     f012b7db <test_kfreelast+0x186a>
f012b7be:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b7c2:	75 17                	jne    f012b7db <test_kfreelast+0x186a>
f012b7c4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b7cb:	83 ec 0c             	sub    $0xc,%esp
f012b7ce:	68 a4 ca 13 f0       	push   $0xf013caa4
f012b7d3:	e8 36 55 fd ff       	call   f0100d0e <cprintf>
f012b7d8:	83 c4 10             	add    $0x10,%esp


		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012b7db:	83 ec 0c             	sub    $0xc,%esp
f012b7de:	6a 03                	push   $0x3
f012b7e0:	e8 52 1e fe ff       	call   f010d637 <sys_bypassPageFault>
f012b7e5:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[12] + 12*kilo;
f012b7e8:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b7ee:	05 00 30 00 00       	add    $0x3000,%eax
f012b7f3:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 30*kilo; ++i)
f012b7f6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b7fd:	eb 3c                	jmp    f012b83b <test_kfreelast+0x18ca>
		{
			ptr[i] = 10;
f012b7ff:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b802:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b805:	01 d0                	add    %edx,%eax
f012b807:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012b80a:	e8 16 1e fe ff       	call   f010d625 <sys_rcr2>
f012b80f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b812:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012b815:	01 ca                	add    %ecx,%edx
f012b817:	39 d0                	cmp    %edx,%eax
f012b819:	74 1d                	je     f012b838 <test_kfreelast+0x18c7>
f012b81b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b81f:	75 17                	jne    f012b838 <test_kfreelast+0x18c7>
f012b821:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b828:	83 ec 0c             	sub    $0xc,%esp
f012b82b:	68 d8 ca 13 f0       	push   $0xf013cad8
f012b830:	e8 d9 54 fd ff       	call   f0100d0e <cprintf>
f012b835:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[12] + 12*kilo;

		for (i = 0; i < 30*kilo; ++i)
f012b838:	ff 45 f4             	incl   -0xc(%ebp)
f012b83b:	81 7d f4 ff 77 00 00 	cmpl   $0x77ff,-0xc(%ebp)
f012b842:	7e bb                	jle    f012b7ff <test_kfreelast+0x188e>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012b844:	83 ec 0c             	sub    $0xc,%esp
f012b847:	6a 00                	push   $0x0
f012b849:	e8 e9 1d fe ff       	call   f010d637 <sys_bypassPageFault>
f012b84e:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b851:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b855:	75 17                	jne    f012b86e <test_kfreelast+0x18fd>
f012b857:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012b85b:	83 ec 08             	sub    $0x8,%esp
f012b85e:	ff 75 f0             	pushl  -0x10(%ebp)
f012b861:	68 2c c9 13 f0       	push   $0xf013c92c
f012b866:	e8 a3 54 fd ff       	call   f0100d0e <cprintf>
f012b86b:	83 c4 10             	add    $0x10,%esp
f012b86e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree last allocated three spaces [but with different order]
	{
		//kfree 10 KB
		freeFrames = sys_calculate_free_frames() ;
f012b875:	e8 1d 19 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012b87a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b87d:	e8 46 85 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b882:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[12]);
f012b885:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b88b:	83 ec 0c             	sub    $0xc,%esp
f012b88e:	50                   	push   %eax
f012b88f:	e8 c2 c5 fd ff       	call   f0107e56 <kfree>
f012b894:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b897:	e8 2c 85 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b89c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b89f:	74 1d                	je     f012b8be <test_kfreelast+0x194d>
f012b8a1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b8a5:	75 17                	jne    f012b8be <test_kfreelast+0x194d>
f012b8a7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b8ae:	83 ec 0c             	sub    $0xc,%esp
f012b8b1:	68 54 c9 13 f0       	push   $0xf013c954
f012b8b6:	e8 53 54 fd ff       	call   f0100d0e <cprintf>
f012b8bb:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b8be:	e8 d4 18 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012b8c3:	89 c2                	mov    %eax,%edx
f012b8c5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b8c8:	29 c2                	sub    %eax,%edx
f012b8ca:	89 d0                	mov    %edx,%eax
f012b8cc:	83 f8 03             	cmp    $0x3,%eax
f012b8cf:	74 1d                	je     f012b8ee <test_kfreelast+0x197d>
f012b8d1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b8d5:	75 17                	jne    f012b8ee <test_kfreelast+0x197d>
f012b8d7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b8de:	83 ec 0c             	sub    $0xc,%esp
f012b8e1:	68 c0 c9 13 f0       	push   $0xf013c9c0
f012b8e6:	e8 23 54 fd ff       	call   f0100d0e <cprintf>
f012b8eb:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012b8ee:	e8 a4 18 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012b8f3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b8f6:	e8 cd 84 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b8fb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[7]);
f012b8fe:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012b904:	83 ec 0c             	sub    $0xc,%esp
f012b907:	50                   	push   %eax
f012b908:	e8 49 c5 fd ff       	call   f0107e56 <kfree>
f012b90d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b910:	e8 b3 84 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b915:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b918:	74 1d                	je     f012b937 <test_kfreelast+0x19c6>
f012b91a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b91e:	75 17                	jne    f012b937 <test_kfreelast+0x19c6>
f012b920:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b927:	83 ec 0c             	sub    $0xc,%esp
f012b92a:	68 54 c9 13 f0       	push   $0xf013c954
f012b92f:	e8 da 53 fd ff       	call   f0100d0e <cprintf>
f012b934:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 4) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b937:	e8 5b 18 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012b93c:	89 c2                	mov    %eax,%edx
f012b93e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b941:	29 c2                	sub    %eax,%edx
f012b943:	89 d0                	mov    %edx,%eax
f012b945:	83 f8 04             	cmp    $0x4,%eax
f012b948:	74 1d                	je     f012b967 <test_kfreelast+0x19f6>
f012b94a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b94e:	75 17                	jne    f012b967 <test_kfreelast+0x19f6>
f012b950:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b957:	83 ec 0c             	sub    $0xc,%esp
f012b95a:	68 c0 c9 13 f0       	push   $0xf013c9c0
f012b95f:	e8 aa 53 fd ff       	call   f0100d0e <cprintf>
f012b964:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012b967:	e8 2b 18 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012b96c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b96f:	e8 54 84 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b974:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012b977:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012b97d:	83 ec 0c             	sub    $0xc,%esp
f012b980:	50                   	push   %eax
f012b981:	e8 d0 c4 fd ff       	call   f0107e56 <kfree>
f012b986:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b989:	e8 3a 84 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b98e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b991:	74 1d                	je     f012b9b0 <test_kfreelast+0x1a3f>
f012b993:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b997:	75 17                	jne    f012b9b0 <test_kfreelast+0x1a3f>
f012b999:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b9a0:	83 ec 0c             	sub    $0xc,%esp
f012b9a3:	68 54 c9 13 f0       	push   $0xf013c954
f012b9a8:	e8 61 53 fd ff       	call   f0100d0e <cprintf>
f012b9ad:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 5) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b9b0:	e8 e2 17 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012b9b5:	89 c2                	mov    %eax,%edx
f012b9b7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b9ba:	29 c2                	sub    %eax,%edx
f012b9bc:	89 d0                	mov    %edx,%eax
f012b9be:	83 f8 05             	cmp    $0x5,%eax
f012b9c1:	74 1d                	je     f012b9e0 <test_kfreelast+0x1a6f>
f012b9c3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b9c7:	75 17                	jne    f012b9e0 <test_kfreelast+0x1a6f>
f012b9c9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b9d0:	83 ec 0c             	sub    $0xc,%esp
f012b9d3:	68 c0 c9 13 f0       	push   $0xf013c9c0
f012b9d8:	e8 31 53 fd ff       	call   f0100d0e <cprintf>
f012b9dd:	83 c4 10             	add    $0x10,%esp


	//Allocate after kfree last allocated 3 spaces with different order [25%]
	{
		//50 KB
		freeFrames = sys_calculate_free_frames() ;
f012b9e0:	e8 b2 17 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012b9e5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b9e8:	e8 db 83 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b9ed:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[13] = kmalloc(50*kilo);
f012b9f0:	83 ec 0c             	sub    $0xc,%esp
f012b9f3:	68 00 c8 00 00       	push   $0xc800
f012b9f8:	e8 8e c3 fd ff       	call   f0107d8b <kmalloc>
f012b9fd:	83 c4 10             	add    $0x10,%esp
f012ba00:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012ba06:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012ba0c:	89 c1                	mov    %eax,%ecx
f012ba0e:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f012ba15:	10 00 00 
f012ba18:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012ba1e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ba23:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f012ba29:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012ba2f:	ba 00 00 00 00       	mov    $0x0,%edx
f012ba34:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f012ba3a:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012ba40:	29 d0                	sub    %edx,%eax
f012ba42:	89 c3                	mov    %eax,%ebx
f012ba44:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f012ba4b:	10 00 00 
f012ba4e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012ba53:	0f b6 d0             	movzbl %al,%edx
f012ba56:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012ba5c:	01 d0                	add    %edx,%eax
f012ba5e:	48                   	dec    %eax
f012ba5f:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f012ba65:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012ba6b:	ba 00 00 00 00       	mov    $0x0,%edx
f012ba70:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f012ba76:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012ba7c:	29 d0                	sub    %edx,%eax
f012ba7e:	01 c3                	add    %eax,%ebx
f012ba80:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f012ba87:	10 00 00 
f012ba8a:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012ba8f:	0f b6 c0             	movzbl %al,%eax
f012ba92:	c1 e0 04             	shl    $0x4,%eax
f012ba95:	89 c2                	mov    %eax,%edx
f012ba97:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012ba9d:	01 d0                	add    %edx,%eax
f012ba9f:	48                   	dec    %eax
f012baa0:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f012baa6:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012baac:	ba 00 00 00 00       	mov    $0x0,%edx
f012bab1:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f012bab7:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012babd:	29 d0                	sub    %edx,%eax
f012babf:	01 d8                	add    %ebx,%eax
f012bac1:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012bac6:	39 c1                	cmp    %eax,%ecx
f012bac8:	74 1d                	je     f012bae7 <test_kfreelast+0x1b76>
f012baca:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bace:	75 17                	jne    f012bae7 <test_kfreelast+0x1b76>
f012bad0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bad7:	83 ec 0c             	sub    $0xc,%esp
f012bada:	68 f8 c9 13 f0       	push   $0xf013c9f8
f012badf:	e8 2a 52 fd ff       	call   f0100d0e <cprintf>
f012bae4:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bae7:	e8 dc 82 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012baec:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012baef:	74 1d                	je     f012bb0e <test_kfreelast+0x1b9d>
f012baf1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012baf5:	75 17                	jne    f012bb0e <test_kfreelast+0x1b9d>
f012baf7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bafe:	83 ec 0c             	sub    $0xc,%esp
f012bb01:	68 54 c9 13 f0       	push   $0xf013c954
f012bb06:	e8 03 52 fd ff       	call   f0100d0e <cprintf>
f012bb0b:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012bb0e:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012bb11:	e8 81 16 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012bb16:	29 c3                	sub    %eax,%ebx
f012bb18:	89 d8                	mov    %ebx,%eax
f012bb1a:	83 f8 0d             	cmp    $0xd,%eax
f012bb1d:	74 1d                	je     f012bb3c <test_kfreelast+0x1bcb>
f012bb1f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bb23:	75 17                	jne    f012bb3c <test_kfreelast+0x1bcb>
f012bb25:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bb2c:	83 ec 0c             	sub    $0xc,%esp
f012bb2f:	68 60 ca 13 f0       	push   $0xf013ca60
f012bb34:	e8 d5 51 fd ff       	call   f0100d0e <cprintf>
f012bb39:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
f012bb3c:	c7 85 40 fe ff ff ff 	movl   $0xc7ff,-0x1c0(%ebp)
f012bb43:	c7 00 00 
		ptr = (char*)ptr_allocations[13];
f012bb46:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012bb4c:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f012bb4f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012bb56:	eb 0e                	jmp    f012bb66 <test_kfreelast+0x1bf5>
		{
			ptr[i] = 13 ;
f012bb58:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012bb5b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bb5e:	01 d0                	add    %edx,%eax
f012bb60:	c6 00 0d             	movb   $0xd,(%eax)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f012bb63:	ff 45 f4             	incl   -0xc(%ebp)
f012bb66:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012bb6c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012bb6f:	7f e7                	jg     f012bb58 <test_kfreelast+0x1be7>
		{
			ptr[i] = 13 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012bb71:	e8 21 16 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012bb76:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bb79:	e8 4a 82 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bb7e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[14] = kmalloc(3*Mega-kilo);
f012bb81:	83 ec 0c             	sub    $0xc,%esp
f012bb84:	68 00 fc 2f 00       	push   $0x2ffc00
f012bb89:	e8 fd c1 fd ff       	call   f0107d8b <kmalloc>
f012bb8e:	83 c4 10             	add    $0x10,%esp
f012bb91:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012bb97:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012bb9d:	89 c1                	mov    %eax,%ecx
f012bb9f:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f012bba6:	10 00 00 
f012bba9:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012bbaf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bbb4:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f012bbba:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012bbc0:	ba 00 00 00 00       	mov    $0x0,%edx
f012bbc5:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f012bbcb:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012bbd1:	29 d0                	sub    %edx,%eax
f012bbd3:	89 c3                	mov    %eax,%ebx
f012bbd5:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f012bbdc:	10 00 00 
f012bbdf:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012bbe4:	0f b6 d0             	movzbl %al,%edx
f012bbe7:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012bbed:	01 d0                	add    %edx,%eax
f012bbef:	48                   	dec    %eax
f012bbf0:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f012bbf6:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012bbfc:	ba 00 00 00 00       	mov    $0x0,%edx
f012bc01:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f012bc07:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012bc0d:	29 d0                	sub    %edx,%eax
f012bc0f:	01 c3                	add    %eax,%ebx
f012bc11:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f012bc18:	10 00 00 
f012bc1b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012bc20:	0f b6 c0             	movzbl %al,%eax
f012bc23:	c1 e0 04             	shl    $0x4,%eax
f012bc26:	89 c2                	mov    %eax,%edx
f012bc28:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012bc2e:	01 d0                	add    %edx,%eax
f012bc30:	48                   	dec    %eax
f012bc31:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f012bc37:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012bc3d:	ba 00 00 00 00       	mov    $0x0,%edx
f012bc42:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f012bc48:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012bc4e:	29 d0                	sub    %edx,%eax
f012bc50:	01 d8                	add    %ebx,%eax
f012bc52:	2d 00 b0 8e 09       	sub    $0x98eb000,%eax
f012bc57:	39 c1                	cmp    %eax,%ecx
f012bc59:	74 1d                	je     f012bc78 <test_kfreelast+0x1d07>
f012bc5b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bc5f:	75 17                	jne    f012bc78 <test_kfreelast+0x1d07>
f012bc61:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bc68:	83 ec 0c             	sub    $0xc,%esp
f012bc6b:	68 f8 c9 13 f0       	push   $0xf013c9f8
f012bc70:	e8 99 50 fd ff       	call   f0100d0e <cprintf>
f012bc75:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bc78:	e8 4b 81 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bc7d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bc80:	74 1d                	je     f012bc9f <test_kfreelast+0x1d2e>
f012bc82:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bc86:	75 17                	jne    f012bc9f <test_kfreelast+0x1d2e>
f012bc88:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bc8f:	83 ec 0c             	sub    $0xc,%esp
f012bc92:	68 54 c9 13 f0       	push   $0xf013c954
f012bc97:	e8 72 50 fd ff       	call   f0100d0e <cprintf>
f012bc9c:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012bc9f:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012bca2:	e8 f0 14 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012bca7:	29 c3                	sub    %eax,%ebx
f012bca9:	89 d8                	mov    %ebx,%eax
f012bcab:	3d 00 03 00 00       	cmp    $0x300,%eax
f012bcb0:	74 1d                	je     f012bccf <test_kfreelast+0x1d5e>
f012bcb2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bcb6:	75 17                	jne    f012bccf <test_kfreelast+0x1d5e>
f012bcb8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bcbf:	83 ec 0c             	sub    $0xc,%esp
f012bcc2:	68 60 ca 13 f0       	push   $0xf013ca60
f012bcc7:	e8 42 50 fd ff       	call   f0100d0e <cprintf>
f012bccc:	83 c4 10             	add    $0x10,%esp
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
f012bccf:	c7 85 44 fe ff ff ff 	movl   $0x2ffbff,-0x1bc(%ebp)
f012bcd6:	fb 2f 00 
		ptr = (char*)ptr_allocations[14];
f012bcd9:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012bcdf:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012bce2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012bce9:	eb 0e                	jmp    f012bcf9 <test_kfreelast+0x1d88>
		{
			ptr[i] = 14 ;
f012bceb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012bcee:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bcf1:	01 d0                	add    %edx,%eax
f012bcf3:	c6 00 0e             	movb   $0xe,(%eax)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012bcf6:	ff 45 f4             	incl   -0xc(%ebp)
f012bcf9:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012bcff:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012bd02:	7f e7                	jg     f012bceb <test_kfreelast+0x1d7a>
		{
			ptr[i] = 14 ;
		}
	}

	if (!f) {ce += 25;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012bd04:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bd08:	75 17                	jne    f012bd21 <test_kfreelast+0x1db0>
f012bd0a:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
f012bd0e:	83 ec 08             	sub    $0x8,%esp
f012bd11:	ff 75 f0             	pushl  -0x10(%ebp)
f012bd14:	68 2c c9 13 f0       	push   $0xf013c92c
f012bd19:	e8 f0 4f fd ff       	call   f0100d0e <cprintf>
f012bd1e:	83 c4 10             	add    $0x10,%esp
f012bd21:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree one of the newly allocated space that override a previously allocated one
	{
		//kfree 50 KB
		freeFrames = sys_calculate_free_frames() ;
f012bd28:	e8 6a 14 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012bd2d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bd30:	e8 93 80 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bd35:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[13]);
f012bd38:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012bd3e:	83 ec 0c             	sub    $0xc,%esp
f012bd41:	50                   	push   %eax
f012bd42:	e8 0f c1 fd ff       	call   f0107e56 <kfree>
f012bd47:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bd4a:	e8 79 80 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bd4f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bd52:	74 1d                	je     f012bd71 <test_kfreelast+0x1e00>
f012bd54:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bd58:	75 17                	jne    f012bd71 <test_kfreelast+0x1e00>
f012bd5a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bd61:	83 ec 0c             	sub    $0xc,%esp
f012bd64:	68 54 c9 13 f0       	push   $0xf013c954
f012bd69:	e8 a0 4f fd ff       	call   f0100d0e <cprintf>
f012bd6e:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 13) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012bd71:	e8 21 14 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012bd76:	89 c2                	mov    %eax,%edx
f012bd78:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bd7b:	29 c2                	sub    %eax,%edx
f012bd7d:	89 d0                	mov    %edx,%eax
f012bd7f:	83 f8 0d             	cmp    $0xd,%eax
f012bd82:	74 1d                	je     f012bda1 <test_kfreelast+0x1e30>
f012bd84:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bd88:	75 17                	jne    f012bda1 <test_kfreelast+0x1e30>
f012bd8a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bd91:	83 ec 0c             	sub    $0xc,%esp
f012bd94:	68 c0 c9 13 f0       	push   $0xf013c9c0
f012bd99:	e8 70 4f fd ff       	call   f0100d0e <cprintf>
f012bd9e:	83 c4 10             	add    $0x10,%esp
	{
		//50 KB

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012bda1:	83 ec 0c             	sub    $0xc,%esp
f012bda4:	6a 03                	push   $0x3
f012bda6:	e8 8c 18 fe ff       	call   f010d637 <sys_bypassPageFault>
f012bdab:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[13];
f012bdae:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012bdb4:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 50*kilo; ++i)
f012bdb7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012bdbe:	eb 3c                	jmp    f012bdfc <test_kfreelast+0x1e8b>
		{
			ptr[i] = 10;
f012bdc0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012bdc3:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bdc6:	01 d0                	add    %edx,%eax
f012bdc8:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012bdcb:	e8 55 18 fe ff       	call   f010d625 <sys_rcr2>
f012bdd0:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012bdd3:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012bdd6:	01 ca                	add    %ecx,%edx
f012bdd8:	39 d0                	cmp    %edx,%eax
f012bdda:	74 1d                	je     f012bdf9 <test_kfreelast+0x1e88>
f012bddc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bde0:	75 17                	jne    f012bdf9 <test_kfreelast+0x1e88>
f012bde2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bde9:	83 ec 0c             	sub    $0xc,%esp
f012bdec:	68 d8 ca 13 f0       	push   $0xf013cad8
f012bdf1:	e8 18 4f fd ff       	call   f0100d0e <cprintf>
f012bdf6:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[13];

		for (i = 0; i < 50*kilo; ++i)
f012bdf9:	ff 45 f4             	incl   -0xc(%ebp)
f012bdfc:	81 7d f4 ff c7 00 00 	cmpl   $0xc7ff,-0xc(%ebp)
f012be03:	7e bb                	jle    f012bdc0 <test_kfreelast+0x1e4f>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012be05:	83 ec 0c             	sub    $0xc,%esp
f012be08:	6a 00                	push   $0x0
f012be0a:	e8 28 18 fe ff       	call   f010d637 <sys_bypassPageFault>
f012be0f:	83 c4 10             	add    $0x10,%esp


		//3 MB
		ptr = (char*)ptr_allocations[14];
f012be12:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012be18:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012be1b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012be22:	eb 1e                	jmp    f012be42 <test_kfreelast+0x1ed1>
		{
			sums[14] += ptr[i] ;
f012be24:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012be2a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012be2d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012be30:	01 c8                	add    %ecx,%eax
f012be32:	8a 00                	mov    (%eax),%al
f012be34:	0f be c0             	movsbl %al,%eax
f012be37:	01 d0                	add    %edx,%eax
f012be39:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		sys_bypassPageFault(0);


		//3 MB
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012be3f:	ff 45 f4             	incl   -0xc(%ebp)
f012be42:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012be48:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012be4b:	7f d7                	jg     f012be24 <test_kfreelast+0x1eb3>
		{
			sums[14] += ptr[i] ;
		}
		if (sums[14] != 14*lastIndices[14])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012be4d:	8b 8d f4 fd ff ff    	mov    -0x20c(%ebp),%ecx
f012be53:	8b 95 44 fe ff ff    	mov    -0x1bc(%ebp),%edx
f012be59:	89 d0                	mov    %edx,%eax
f012be5b:	01 c0                	add    %eax,%eax
f012be5d:	01 d0                	add    %edx,%eax
f012be5f:	01 c0                	add    %eax,%eax
f012be61:	01 d0                	add    %edx,%eax
f012be63:	01 c0                	add    %eax,%eax
f012be65:	39 c1                	cmp    %eax,%ecx
f012be67:	74 1d                	je     f012be86 <test_kfreelast+0x1f15>
f012be69:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012be6d:	75 17                	jne    f012be86 <test_kfreelast+0x1f15>
f012be6f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012be76:	83 ec 0c             	sub    $0xc,%esp
f012be79:	68 a4 ca 13 f0       	push   $0xf013caa4
f012be7e:	e8 8b 4e fd ff       	call   f0100d0e <cprintf>
f012be83:	83 c4 10             	add    $0x10,%esp
	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012be86:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012be8a:	75 17                	jne    f012bea3 <test_kfreelast+0x1f32>
f012be8c:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012be90:	83 ec 08             	sub    $0x8,%esp
f012be93:	ff 75 f0             	pushl  -0x10(%ebp)
f012be96:	68 2c c9 13 f0       	push   $0xf013c92c
f012be9b:	e8 6e 4e fd ff       	call   f0100d0e <cprintf>
f012bea0:	83 c4 10             	add    $0x10,%esp
f012bea3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree all remaining allocations
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f012beaa:	e8 e8 12 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012beaf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012beb2:	e8 11 7f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012beb7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[4]);
f012beba:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012bec0:	83 ec 0c             	sub    $0xc,%esp
f012bec3:	50                   	push   %eax
f012bec4:	e8 8d bf fd ff       	call   f0107e56 <kfree>
f012bec9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012becc:	e8 f7 7e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bed1:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bed4:	74 1d                	je     f012bef3 <test_kfreelast+0x1f82>
f012bed6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012beda:	75 17                	jne    f012bef3 <test_kfreelast+0x1f82>
f012bedc:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bee3:	83 ec 0c             	sub    $0xc,%esp
f012bee6:	68 54 c9 13 f0       	push   $0xf013c954
f012beeb:	e8 1e 4e fd ff       	call   f0100d0e <cprintf>
f012bef0:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 2) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012bef3:	e8 9f 12 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012bef8:	89 c2                	mov    %eax,%edx
f012befa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012befd:	29 c2                	sub    %eax,%edx
f012beff:	89 d0                	mov    %edx,%eax
f012bf01:	83 f8 02             	cmp    $0x2,%eax
f012bf04:	74 1d                	je     f012bf23 <test_kfreelast+0x1fb2>
f012bf06:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bf0a:	75 17                	jne    f012bf23 <test_kfreelast+0x1fb2>
f012bf0c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bf13:	83 ec 0c             	sub    $0xc,%esp
f012bf16:	68 c0 c9 13 f0       	push   $0xf013c9c0
f012bf1b:	e8 ee 4d fd ff       	call   f0100d0e <cprintf>
f012bf20:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012bf23:	e8 6f 12 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012bf28:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bf2b:	e8 98 7e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bf30:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[14]);
f012bf33:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012bf39:	83 ec 0c             	sub    $0xc,%esp
f012bf3c:	50                   	push   %eax
f012bf3d:	e8 14 bf fd ff       	call   f0107e56 <kfree>
f012bf42:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bf45:	e8 7e 7e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bf4a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bf4d:	74 1d                	je     f012bf6c <test_kfreelast+0x1ffb>
f012bf4f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bf53:	75 17                	jne    f012bf6c <test_kfreelast+0x1ffb>
f012bf55:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bf5c:	83 ec 0c             	sub    $0xc,%esp
f012bf5f:	68 54 c9 13 f0       	push   $0xf013c954
f012bf64:	e8 a5 4d fd ff       	call   f0100d0e <cprintf>
f012bf69:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012bf6c:	e8 26 12 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012bf71:	89 c2                	mov    %eax,%edx
f012bf73:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bf76:	29 c2                	sub    %eax,%edx
f012bf78:	89 d0                	mov    %edx,%eax
f012bf7a:	3d 00 03 00 00       	cmp    $0x300,%eax
f012bf7f:	74 1d                	je     f012bf9e <test_kfreelast+0x202d>
f012bf81:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bf85:	75 17                	jne    f012bf9e <test_kfreelast+0x202d>
f012bf87:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bf8e:	83 ec 0c             	sub    $0xc,%esp
f012bf91:	68 c0 c9 13 f0       	push   $0xf013c9c0
f012bf96:	e8 73 4d fd ff       	call   f0100d0e <cprintf>
f012bf9b:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012bf9e:	e8 f4 11 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012bfa3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bfa6:	e8 1d 7e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bfab:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[5]);
f012bfae:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012bfb4:	83 ec 0c             	sub    $0xc,%esp
f012bfb7:	50                   	push   %eax
f012bfb8:	e8 99 be fd ff       	call   f0107e56 <kfree>
f012bfbd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bfc0:	e8 03 7e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bfc5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bfc8:	74 1d                	je     f012bfe7 <test_kfreelast+0x2076>
f012bfca:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bfce:	75 17                	jne    f012bfe7 <test_kfreelast+0x2076>
f012bfd0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bfd7:	83 ec 0c             	sub    $0xc,%esp
f012bfda:	68 54 c9 13 f0       	push   $0xf013c954
f012bfdf:	e8 2a 4d fd ff       	call   f0100d0e <cprintf>
f012bfe4:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012bfe7:	e8 ab 11 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012bfec:	89 c2                	mov    %eax,%edx
f012bfee:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bff1:	29 c2                	sub    %eax,%edx
f012bff3:	89 d0                	mov    %edx,%eax
f012bff5:	3d 00 03 00 00       	cmp    $0x300,%eax
f012bffa:	74 1d                	je     f012c019 <test_kfreelast+0x20a8>
f012bffc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c000:	75 17                	jne    f012c019 <test_kfreelast+0x20a8>
f012c002:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c009:	83 ec 0c             	sub    $0xc,%esp
f012c00c:	68 c0 c9 13 f0       	push   $0xf013c9c0
f012c011:	e8 f8 4c fd ff       	call   f0100d0e <cprintf>
f012c016:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012c019:	e8 79 11 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012c01e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c021:	e8 a2 7d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012c026:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012c029:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012c02f:	83 ec 0c             	sub    $0xc,%esp
f012c032:	50                   	push   %eax
f012c033:	e8 1e be fd ff       	call   f0107e56 <kfree>
f012c038:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c03b:	e8 88 7d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012c040:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c043:	74 1d                	je     f012c062 <test_kfreelast+0x20f1>
f012c045:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c049:	75 17                	jne    f012c062 <test_kfreelast+0x20f1>
f012c04b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c052:	83 ec 0c             	sub    $0xc,%esp
f012c055:	68 54 c9 13 f0       	push   $0xf013c954
f012c05a:	e8 af 4c fd ff       	call   f0100d0e <cprintf>
f012c05f:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012c062:	e8 30 11 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012c067:	89 c2                	mov    %eax,%edx
f012c069:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c06c:	29 c2                	sub    %eax,%edx
f012c06e:	89 d0                	mov    %edx,%eax
f012c070:	83 f8 01             	cmp    $0x1,%eax
f012c073:	74 1d                	je     f012c092 <test_kfreelast+0x2121>
f012c075:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c079:	75 17                	jne    f012c092 <test_kfreelast+0x2121>
f012c07b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c082:	83 ec 0c             	sub    $0xc,%esp
f012c085:	68 c0 c9 13 f0       	push   $0xf013c9c0
f012c08a:	e8 7f 4c fd ff       	call   f0100d0e <cprintf>
f012c08f:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012c092:	e8 00 11 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012c097:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c09a:	e8 29 7d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012c09f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[3]);
f012c0a2:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012c0a8:	83 ec 0c             	sub    $0xc,%esp
f012c0ab:	50                   	push   %eax
f012c0ac:	e8 a5 bd fd ff       	call   f0107e56 <kfree>
f012c0b1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c0b4:	e8 0f 7d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012c0b9:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c0bc:	74 1d                	je     f012c0db <test_kfreelast+0x216a>
f012c0be:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c0c2:	75 17                	jne    f012c0db <test_kfreelast+0x216a>
f012c0c4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c0cb:	83 ec 0c             	sub    $0xc,%esp
f012c0ce:	68 54 c9 13 f0       	push   $0xf013c954
f012c0d3:	e8 36 4c fd ff       	call   f0100d0e <cprintf>
f012c0d8:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012c0db:	e8 b7 10 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012c0e0:	89 c2                	mov    %eax,%edx
f012c0e2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c0e5:	29 c2                	sub    %eax,%edx
f012c0e7:	89 d0                	mov    %edx,%eax
f012c0e9:	83 f8 01             	cmp    $0x1,%eax
f012c0ec:	74 1d                	je     f012c10b <test_kfreelast+0x219a>
f012c0ee:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c0f2:	75 17                	jne    f012c10b <test_kfreelast+0x219a>
f012c0f4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c0fb:	83 ec 0c             	sub    $0xc,%esp
f012c0fe:	68 c0 c9 13 f0       	push   $0xf013c9c0
f012c103:	e8 06 4c fd ff       	call   f0100d0e <cprintf>
f012c108:	83 c4 10             	add    $0x10,%esp

		if(start_freeFrames != (sys_calculate_free_frames())) if (!f) {f=1; cprintf("\nWrong kfree: not all pages removed correctly at end");}
f012c10b:	e8 87 10 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012c110:	89 c2                	mov    %eax,%edx
f012c112:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012c115:	39 c2                	cmp    %eax,%edx
f012c117:	74 1d                	je     f012c136 <test_kfreelast+0x21c5>
f012c119:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c11d:	75 17                	jne    f012c136 <test_kfreelast+0x21c5>
f012c11f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c126:	83 ec 0c             	sub    $0xc,%esp
f012c129:	68 20 cb 13 f0       	push   $0xf013cb20
f012c12e:	e8 db 4b fd ff       	call   f0100d0e <cprintf>
f012c133:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012c136:	83 ec 0c             	sub    $0xc,%esp
f012c139:	6a 03                	push   $0x3
f012c13b:	e8 f7 14 fe ff       	call   f010d637 <sys_bypassPageFault>
f012c140:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 15; ++i)
f012c143:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012c14a:	e9 8e 00 00 00       	jmp    f012c1dd <test_kfreelast+0x226c>
		{
			ptr = (char *) ptr_allocations[i];
f012c14f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012c152:	8b 84 85 6c fd ff ff 	mov    -0x294(%ebp,%eax,4),%eax
f012c159:	89 45 84             	mov    %eax,-0x7c(%ebp)
			ptr[0] = 10;
f012c15c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012c15f:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012c162:	e8 be 14 fe ff       	call   f010d625 <sys_rcr2>
f012c167:	89 c2                	mov    %eax,%edx
f012c169:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012c16c:	39 c2                	cmp    %eax,%edx
f012c16e:	74 1d                	je     f012c18d <test_kfreelast+0x221c>
f012c170:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c174:	75 17                	jne    f012c18d <test_kfreelast+0x221c>
f012c176:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c17d:	83 ec 0c             	sub    $0xc,%esp
f012c180:	68 d8 ca 13 f0       	push   $0xf013cad8
f012c185:	e8 84 4b fd ff       	call   f0100d0e <cprintf>
f012c18a:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f012c18d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012c190:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012c197:	89 c2                	mov    %eax,%edx
f012c199:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012c19c:	01 d0                	add    %edx,%eax
f012c19e:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012c1a1:	e8 7f 14 fe ff       	call   f010d625 <sys_rcr2>
f012c1a6:	89 c2                	mov    %eax,%edx
f012c1a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012c1ab:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012c1b2:	89 c1                	mov    %eax,%ecx
f012c1b4:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012c1b7:	01 c8                	add    %ecx,%eax
f012c1b9:	39 c2                	cmp    %eax,%edx
f012c1bb:	74 1d                	je     f012c1da <test_kfreelast+0x2269>
f012c1bd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c1c1:	75 17                	jne    f012c1da <test_kfreelast+0x2269>
f012c1c3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c1ca:	83 ec 0c             	sub    $0xc,%esp
f012c1cd:	68 d8 ca 13 f0       	push   $0xf013cad8
f012c1d2:	e8 37 4b fd ff       	call   f0100d0e <cprintf>
f012c1d7:	83 c4 10             	add    $0x10,%esp
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 15; ++i)
f012c1da:	ff 45 f4             	incl   -0xc(%ebp)
f012c1dd:	83 7d f4 0e          	cmpl   $0xe,-0xc(%ebp)
f012c1e1:	0f 8e 68 ff ff ff    	jle    f012c14f <test_kfreelast+0x21de>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012c1e7:	83 ec 0c             	sub    $0xc,%esp
f012c1ea:	6a 00                	push   $0x0
f012c1ec:	e8 46 14 fe ff       	call   f010d637 <sys_bypassPageFault>
f012c1f1:	83 c4 10             	add    $0x10,%esp
	}

	//kfree non-exist item
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012c1f4:	e8 9e 0f fe ff       	call   f010d197 <sys_calculate_free_frames>
f012c1f9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c1fc:	e8 c7 7b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012c201:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[0]);
f012c204:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012c20a:	83 ec 0c             	sub    $0xc,%esp
f012c20d:	50                   	push   %eax
f012c20e:	e8 43 bc fd ff       	call   f0107e56 <kfree>
f012c213:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c216:	e8 ad 7b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012c21b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c21e:	74 1d                	je     f012c23d <test_kfreelast+0x22cc>
f012c220:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c224:	75 17                	jne    f012c23d <test_kfreelast+0x22cc>
f012c226:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c22d:	83 ec 0c             	sub    $0xc,%esp
f012c230:	68 54 c9 13 f0       	push   $0xf013c954
f012c235:	e8 d4 4a fd ff       	call   f0100d0e <cprintf>
f012c23a:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012c23d:	e8 55 0f fe ff       	call   f010d197 <sys_calculate_free_frames>
f012c242:	89 c2                	mov    %eax,%edx
f012c244:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c247:	39 c2                	cmp    %eax,%edx
f012c249:	74 1d                	je     f012c268 <test_kfreelast+0x22f7>
f012c24b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c24f:	75 17                	jne    f012c268 <test_kfreelast+0x22f7>
f012c251:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c258:	83 ec 0c             	sub    $0xc,%esp
f012c25b:	68 58 cb 13 f0       	push   $0xf013cb58
f012c260:	e8 a9 4a fd ff       	call   f0100d0e <cprintf>
f012c265:	83 c4 10             	add    $0x10,%esp

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012c268:	e8 2a 0f fe ff       	call   f010d197 <sys_calculate_free_frames>
f012c26d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c270:	e8 53 7b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012c275:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012c278:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012c27e:	83 ec 0c             	sub    $0xc,%esp
f012c281:	50                   	push   %eax
f012c282:	e8 cf bb fd ff       	call   f0107e56 <kfree>
f012c287:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c28a:	e8 39 7b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012c28f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c292:	74 1d                	je     f012c2b1 <test_kfreelast+0x2340>
f012c294:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c298:	75 17                	jne    f012c2b1 <test_kfreelast+0x2340>
f012c29a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c2a1:	83 ec 0c             	sub    $0xc,%esp
f012c2a4:	68 54 c9 13 f0       	push   $0xf013c954
f012c2a9:	e8 60 4a fd ff       	call   f0100d0e <cprintf>
f012c2ae:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012c2b1:	e8 e1 0e fe ff       	call   f010d197 <sys_calculate_free_frames>
f012c2b6:	89 c2                	mov    %eax,%edx
f012c2b8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c2bb:	39 c2                	cmp    %eax,%edx
f012c2bd:	74 1d                	je     f012c2dc <test_kfreelast+0x236b>
f012c2bf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c2c3:	75 17                	jne    f012c2dc <test_kfreelast+0x236b>
f012c2c5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c2cc:	83 ec 0c             	sub    $0xc,%esp
f012c2cf:	68 58 cb 13 f0       	push   $0xf013cb58
f012c2d4:	e8 35 4a fd ff       	call   f0100d0e <cprintf>
f012c2d9:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012c2dc:	e8 b6 0e fe ff       	call   f010d197 <sys_calculate_free_frames>
f012c2e1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c2e4:	e8 df 7a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012c2e9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012c2ec:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012c2f2:	83 ec 0c             	sub    $0xc,%esp
f012c2f5:	50                   	push   %eax
f012c2f6:	e8 5b bb fd ff       	call   f0107e56 <kfree>
f012c2fb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c2fe:	e8 c5 7a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012c303:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c306:	74 1d                	je     f012c325 <test_kfreelast+0x23b4>
f012c308:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c30c:	75 17                	jne    f012c325 <test_kfreelast+0x23b4>
f012c30e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c315:	83 ec 0c             	sub    $0xc,%esp
f012c318:	68 54 c9 13 f0       	push   $0xf013c954
f012c31d:	e8 ec 49 fd ff       	call   f0100d0e <cprintf>
f012c322:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012c325:	e8 6d 0e fe ff       	call   f010d197 <sys_calculate_free_frames>
f012c32a:	89 c2                	mov    %eax,%edx
f012c32c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c32f:	39 c2                	cmp    %eax,%edx
f012c331:	74 1d                	je     f012c350 <test_kfreelast+0x23df>
f012c333:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c337:	75 17                	jne    f012c350 <test_kfreelast+0x23df>
f012c339:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c340:	83 ec 0c             	sub    $0xc,%esp
f012c343:	68 58 cb 13 f0       	push   $0xf013cb58
f012c348:	e8 c1 49 fd ff       	call   f0100d0e <cprintf>
f012c34d:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012c350:	e8 42 0e fe ff       	call   f010d197 <sys_calculate_free_frames>
f012c355:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c358:	e8 6b 7a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012c35d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012c360:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012c366:	83 ec 0c             	sub    $0xc,%esp
f012c369:	50                   	push   %eax
f012c36a:	e8 e7 ba fd ff       	call   f0107e56 <kfree>
f012c36f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c372:	e8 51 7a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012c377:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c37a:	74 1d                	je     f012c399 <test_kfreelast+0x2428>
f012c37c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c380:	75 17                	jne    f012c399 <test_kfreelast+0x2428>
f012c382:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c389:	83 ec 0c             	sub    $0xc,%esp
f012c38c:	68 54 c9 13 f0       	push   $0xf013c954
f012c391:	e8 78 49 fd ff       	call   f0100d0e <cprintf>
f012c396:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012c399:	e8 f9 0d fe ff       	call   f010d197 <sys_calculate_free_frames>
f012c39e:	89 c2                	mov    %eax,%edx
f012c3a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c3a3:	39 c2                	cmp    %eax,%edx
f012c3a5:	74 1d                	je     f012c3c4 <test_kfreelast+0x2453>
f012c3a7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c3ab:	75 17                	jne    f012c3c4 <test_kfreelast+0x2453>
f012c3ad:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c3b4:	83 ec 0c             	sub    $0xc,%esp
f012c3b7:	68 58 cb 13 f0       	push   $0xf013cb58
f012c3bc:	e8 4d 49 fd ff       	call   f0100d0e <cprintf>
f012c3c1:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012c3c4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c3c8:	75 17                	jne    f012c3e1 <test_kfreelast+0x2470>
f012c3ca:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012c3ce:	83 ec 08             	sub    $0x8,%esp
f012c3d1:	ff 75 f0             	pushl  -0x10(%ebp)
f012c3d4:	68 2c c9 13 f0       	push   $0xf013c92c
f012c3d9:	e8 30 49 fd ff       	call   f0100d0e <cprintf>
f012c3de:	83 c4 10             	add    $0x10,%esp
f012c3e1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//cprintf("\nCongratulations!! your modification is run successfully.\n");

	return 1;
f012c3e8:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012c3ed:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012c3f0:	5b                   	pop    %ebx
f012c3f1:	5f                   	pop    %edi
f012c3f2:	5d                   	pop    %ebp
f012c3f3:	c3                   	ret    

f012c3f4 <test_krealloc>:

int test_krealloc() {
f012c3f4:	55                   	push   %ebp
f012c3f5:	89 e5                	mov    %esp,%ebp
f012c3f7:	57                   	push   %edi
f012c3f8:	53                   	push   %ebx
f012c3f9:	81 ec 50 02 00 00    	sub    $0x250,%esp
	cprintf("==============================================\n");
f012c3ff:	83 ec 0c             	sub    $0xc,%esp
f012c402:	68 3c b8 13 f0       	push   $0xf013b83c
f012c407:	e8 02 49 fd ff       	call   f0100d0e <cprintf>
f012c40c:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012c40f:	83 ec 0c             	sub    $0xc,%esp
f012c412:	68 6c b8 13 f0       	push   $0xf013b86c
f012c417:	e8 f2 48 fd ff       	call   f0100d0e <cprintf>
f012c41c:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012c41f:	83 ec 0c             	sub    $0xc,%esp
f012c422:	68 3c b8 13 f0       	push   $0xf013b83c
f012c427:	e8 e2 48 fd ff       	call   f0100d0e <cprintf>
f012c42c:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012c42f:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012c433:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012c437:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012c43d:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012c443:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012c44a:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012c451:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f012c457:	b9 14 00 00 00       	mov    $0x14,%ecx
f012c45c:	b8 00 00 00 00       	mov    $0x0,%eax
f012c461:	89 d7                	mov    %edx,%edi
f012c463:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012c465:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012c46c:	8d 95 08 fe ff ff    	lea    -0x1f8(%ebp),%edx
f012c472:	b9 14 00 00 00       	mov    $0x14,%ecx
f012c477:	b8 00 00 00 00       	mov    $0x0,%eax
f012c47c:	89 d7                	mov    %edx,%edi
f012c47e:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012c480:	8d 95 b8 fd ff ff    	lea    -0x248(%ebp),%edx
f012c486:	b9 14 00 00 00       	mov    $0x14,%ecx
f012c48b:	b8 00 00 00 00       	mov    $0x0,%eax
f012c490:	89 d7                	mov    %edx,%edi
f012c492:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c494:	e8 fe 0c fe ff       	call   f010d197 <sys_calculate_free_frames>
f012c499:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012c49c:	83 ec 08             	sub    $0x8,%esp
f012c49f:	68 00 fc 0f 00       	push   $0xffc00
f012c4a4:	6a 00                	push   $0x0
f012c4a6:	e8 a0 bb fd ff       	call   f010804b <krealloc>
f012c4ab:	83 c4 10             	add    $0x10,%esp
f012c4ae:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012c4b4:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c4ba:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c4bf:	77 17                	ja     f012c4d8 <test_krealloc+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c4c1:	83 ec 04             	sub    $0x4,%esp
f012c4c4:	68 a0 cb 13 f0       	push   $0xf013cba0
f012c4c9:	68 e2 0e 00 00       	push   $0xee2
f012c4ce:	68 fa b8 13 f0       	push   $0xf013b8fa
f012c4d3:	e8 2d 3d fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012c4d8:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c4de:	89 c1                	mov    %eax,%ecx
f012c4e0:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012c4e7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012c4ea:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c4ef:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012c4f2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012c4f5:	ba 00 00 00 00       	mov    $0x0,%edx
f012c4fa:	f7 75 b4             	divl   -0x4c(%ebp)
f012c4fd:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012c500:	29 d0                	sub    %edx,%eax
f012c502:	89 c3                	mov    %eax,%ebx
f012c504:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012c50b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012c510:	0f b6 d0             	movzbl %al,%edx
f012c513:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012c516:	01 d0                	add    %edx,%eax
f012c518:	48                   	dec    %eax
f012c519:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012c51c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012c51f:	ba 00 00 00 00       	mov    $0x0,%edx
f012c524:	f7 75 ac             	divl   -0x54(%ebp)
f012c527:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012c52a:	29 d0                	sub    %edx,%eax
f012c52c:	01 c3                	add    %eax,%ebx
f012c52e:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012c535:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012c53a:	0f b6 c0             	movzbl %al,%eax
f012c53d:	c1 e0 04             	shl    $0x4,%eax
f012c540:	89 c2                	mov    %eax,%edx
f012c542:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012c545:	01 d0                	add    %edx,%eax
f012c547:	48                   	dec    %eax
f012c548:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012c54b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012c54e:	ba 00 00 00 00       	mov    $0x0,%edx
f012c553:	f7 75 a4             	divl   -0x5c(%ebp)
f012c556:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012c559:	29 d0                	sub    %edx,%eax
f012c55b:	01 d8                	add    %ebx,%eax
f012c55d:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012c562:	39 c1                	cmp    %eax,%ecx
f012c564:	74 17                	je     f012c57d <test_krealloc+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012c566:	83 ec 04             	sub    $0x4,%esp
f012c569:	68 dc cb 13 f0       	push   $0xf013cbdc
f012c56e:	68 e4 0e 00 00       	push   $0xee4
f012c573:	68 fa b8 13 f0       	push   $0xf013b8fa
f012c578:	e8 88 3c fd ff       	call   f0100205 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c57d:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c580:	e8 12 0c fe ff       	call   f010d197 <sys_calculate_free_frames>
f012c585:	29 c3                	sub    %eax,%ebx
f012c587:	89 d8                	mov    %ebx,%eax
f012c589:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c58e:	74 17                	je     f012c5a7 <test_krealloc+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012c590:	83 ec 04             	sub    $0x4,%esp
f012c593:	68 0e cc 13 f0       	push   $0xf013cc0e
f012c598:	68 e7 0e 00 00       	push   $0xee7
f012c59d:	68 fa b8 13 f0       	push   $0xf013b8fa
f012c5a2:	e8 5e 3c fd ff       	call   f0100205 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012c5a7:	c7 85 08 fe ff ff ff 	movl   $0xffbff,-0x1f8(%ebp)
f012c5ae:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c5b1:	e8 e1 0b fe ff       	call   f010d197 <sys_calculate_free_frames>
f012c5b6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012c5b9:	83 ec 08             	sub    $0x8,%esp
f012c5bc:	68 00 fc 0f 00       	push   $0xffc00
f012c5c1:	6a 00                	push   $0x0
f012c5c3:	e8 83 ba fd ff       	call   f010804b <krealloc>
f012c5c8:	83 c4 10             	add    $0x10,%esp
f012c5cb:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012c5d1:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c5d7:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012c5dc:	77 17                	ja     f012c5f5 <test_krealloc+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c5de:	83 ec 04             	sub    $0x4,%esp
f012c5e1:	68 a0 cb 13 f0       	push   $0xf013cba0
f012c5e6:	68 ef 0e 00 00       	push   $0xeef
f012c5eb:	68 fa b8 13 f0       	push   $0xf013b8fa
f012c5f0:	e8 10 3c fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012c5f5:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c5fb:	89 c1                	mov    %eax,%ecx
f012c5fd:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012c604:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012c607:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c60c:	89 45 98             	mov    %eax,-0x68(%ebp)
f012c60f:	8b 45 98             	mov    -0x68(%ebp),%eax
f012c612:	ba 00 00 00 00       	mov    $0x0,%edx
f012c617:	f7 75 9c             	divl   -0x64(%ebp)
f012c61a:	8b 45 98             	mov    -0x68(%ebp),%eax
f012c61d:	29 d0                	sub    %edx,%eax
f012c61f:	89 c3                	mov    %eax,%ebx
f012c621:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012c628:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012c62d:	0f b6 d0             	movzbl %al,%edx
f012c630:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012c633:	01 d0                	add    %edx,%eax
f012c635:	48                   	dec    %eax
f012c636:	89 45 90             	mov    %eax,-0x70(%ebp)
f012c639:	8b 45 90             	mov    -0x70(%ebp),%eax
f012c63c:	ba 00 00 00 00       	mov    $0x0,%edx
f012c641:	f7 75 94             	divl   -0x6c(%ebp)
f012c644:	8b 45 90             	mov    -0x70(%ebp),%eax
f012c647:	29 d0                	sub    %edx,%eax
f012c649:	01 c3                	add    %eax,%ebx
f012c64b:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012c652:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012c657:	0f b6 c0             	movzbl %al,%eax
f012c65a:	c1 e0 04             	shl    $0x4,%eax
f012c65d:	89 c2                	mov    %eax,%edx
f012c65f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012c662:	01 d0                	add    %edx,%eax
f012c664:	48                   	dec    %eax
f012c665:	89 45 88             	mov    %eax,-0x78(%ebp)
f012c668:	8b 45 88             	mov    -0x78(%ebp),%eax
f012c66b:	ba 00 00 00 00       	mov    $0x0,%edx
f012c670:	f7 75 8c             	divl   -0x74(%ebp)
f012c673:	8b 45 88             	mov    -0x78(%ebp),%eax
f012c676:	29 d0                	sub    %edx,%eax
f012c678:	01 d8                	add    %ebx,%eax
f012c67a:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012c67f:	39 c1                	cmp    %eax,%ecx
f012c681:	74 17                	je     f012c69a <test_krealloc+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012c683:	83 ec 04             	sub    $0x4,%esp
f012c686:	68 dc cb 13 f0       	push   $0xf013cbdc
f012c68b:	68 f1 0e 00 00       	push   $0xef1
f012c690:	68 fa b8 13 f0       	push   $0xf013b8fa
f012c695:	e8 6b 3b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c69a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c69d:	e8 f5 0a fe ff       	call   f010d197 <sys_calculate_free_frames>
f012c6a2:	29 c3                	sub    %eax,%ebx
f012c6a4:	89 d8                	mov    %ebx,%eax
f012c6a6:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c6ab:	74 17                	je     f012c6c4 <test_krealloc+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012c6ad:	83 ec 04             	sub    $0x4,%esp
f012c6b0:	68 0e cc 13 f0       	push   $0xf013cc0e
f012c6b5:	68 f3 0e 00 00       	push   $0xef3
f012c6ba:	68 fa b8 13 f0       	push   $0xf013b8fa
f012c6bf:	e8 41 3b fd ff       	call   f0100205 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012c6c4:	c7 85 0c fe ff ff ff 	movl   $0xffbff,-0x1f4(%ebp)
f012c6cb:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c6ce:	e8 c4 0a fe ff       	call   f010d197 <sys_calculate_free_frames>
f012c6d3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012c6d6:	83 ec 08             	sub    $0x8,%esp
f012c6d9:	68 00 fc 0f 00       	push   $0xffc00
f012c6de:	6a 00                	push   $0x0
f012c6e0:	e8 66 b9 fd ff       	call   f010804b <krealloc>
f012c6e5:	83 c4 10             	add    $0x10,%esp
f012c6e8:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012c6ee:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c6f4:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012c6f9:	77 17                	ja     f012c712 <test_krealloc+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c6fb:	83 ec 04             	sub    $0x4,%esp
f012c6fe:	68 a0 cb 13 f0       	push   $0xf013cba0
f012c703:	68 fb 0e 00 00       	push   $0xefb
f012c708:	68 fa b8 13 f0       	push   $0xf013b8fa
f012c70d:	e8 f3 3a fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012c712:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c718:	89 c1                	mov    %eax,%ecx
f012c71a:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012c721:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012c724:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c729:	89 45 80             	mov    %eax,-0x80(%ebp)
f012c72c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012c72f:	ba 00 00 00 00       	mov    $0x0,%edx
f012c734:	f7 75 84             	divl   -0x7c(%ebp)
f012c737:	8b 45 80             	mov    -0x80(%ebp),%eax
f012c73a:	29 d0                	sub    %edx,%eax
f012c73c:	89 c3                	mov    %eax,%ebx
f012c73e:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012c745:	10 00 00 
f012c748:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012c74d:	0f b6 d0             	movzbl %al,%edx
f012c750:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012c756:	01 d0                	add    %edx,%eax
f012c758:	48                   	dec    %eax
f012c759:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012c75f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012c765:	ba 00 00 00 00       	mov    $0x0,%edx
f012c76a:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012c770:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012c776:	29 d0                	sub    %edx,%eax
f012c778:	01 c3                	add    %eax,%ebx
f012c77a:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012c781:	10 00 00 
f012c784:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012c789:	0f b6 c0             	movzbl %al,%eax
f012c78c:	c1 e0 04             	shl    $0x4,%eax
f012c78f:	89 c2                	mov    %eax,%edx
f012c791:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012c797:	01 d0                	add    %edx,%eax
f012c799:	48                   	dec    %eax
f012c79a:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012c7a0:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012c7a6:	ba 00 00 00 00       	mov    $0x0,%edx
f012c7ab:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012c7b1:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012c7b7:	29 d0                	sub    %edx,%eax
f012c7b9:	01 d8                	add    %ebx,%eax
f012c7bb:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012c7c0:	39 c1                	cmp    %eax,%ecx
f012c7c2:	74 17                	je     f012c7db <test_krealloc+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012c7c4:	83 ec 04             	sub    $0x4,%esp
f012c7c7:	68 dc cb 13 f0       	push   $0xf013cbdc
f012c7cc:	68 fd 0e 00 00       	push   $0xefd
f012c7d1:	68 fa b8 13 f0       	push   $0xf013b8fa
f012c7d6:	e8 2a 3a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c7db:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c7de:	e8 b4 09 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012c7e3:	29 c3                	sub    %eax,%ebx
f012c7e5:	89 d8                	mov    %ebx,%eax
f012c7e7:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c7ec:	74 17                	je     f012c805 <test_krealloc+0x411>
			panic("krealloc: Wrong allocation: ");
f012c7ee:	83 ec 04             	sub    $0x4,%esp
f012c7f1:	68 0e cc 13 f0       	push   $0xf013cc0e
f012c7f6:	68 ff 0e 00 00       	push   $0xeff
f012c7fb:	68 fa b8 13 f0       	push   $0xf013b8fa
f012c800:	e8 00 3a fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012c805:	c7 85 10 fe ff ff ff 	movl   $0x3feff,-0x1f0(%ebp)
f012c80c:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c80f:	e8 83 09 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012c814:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012c817:	83 ec 08             	sub    $0x8,%esp
f012c81a:	68 00 fc 0f 00       	push   $0xffc00
f012c81f:	6a 00                	push   $0x0
f012c821:	e8 25 b8 fd ff       	call   f010804b <krealloc>
f012c826:	83 c4 10             	add    $0x10,%esp
f012c829:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012c82f:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c835:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012c83a:	77 17                	ja     f012c853 <test_krealloc+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c83c:	83 ec 04             	sub    $0x4,%esp
f012c83f:	68 a0 cb 13 f0       	push   $0xf013cba0
f012c844:	68 06 0f 00 00       	push   $0xf06
f012c849:	68 fa b8 13 f0       	push   $0xf013b8fa
f012c84e:	e8 b2 39 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012c853:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c859:	89 c1                	mov    %eax,%ecx
f012c85b:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012c862:	10 00 00 
f012c865:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012c86b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c870:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012c876:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012c87c:	ba 00 00 00 00       	mov    $0x0,%edx
f012c881:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012c887:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012c88d:	29 d0                	sub    %edx,%eax
f012c88f:	89 c3                	mov    %eax,%ebx
f012c891:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012c898:	10 00 00 
f012c89b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012c8a0:	0f b6 d0             	movzbl %al,%edx
f012c8a3:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012c8a9:	01 d0                	add    %edx,%eax
f012c8ab:	48                   	dec    %eax
f012c8ac:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012c8b2:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012c8b8:	ba 00 00 00 00       	mov    $0x0,%edx
f012c8bd:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012c8c3:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012c8c9:	29 d0                	sub    %edx,%eax
f012c8cb:	01 c3                	add    %eax,%ebx
f012c8cd:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012c8d4:	10 00 00 
f012c8d7:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012c8dc:	0f b6 c0             	movzbl %al,%eax
f012c8df:	c1 e0 04             	shl    $0x4,%eax
f012c8e2:	89 c2                	mov    %eax,%edx
f012c8e4:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012c8ea:	01 d0                	add    %edx,%eax
f012c8ec:	48                   	dec    %eax
f012c8ed:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012c8f3:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012c8f9:	ba 00 00 00 00       	mov    $0x0,%edx
f012c8fe:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012c904:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012c90a:	29 d0                	sub    %edx,%eax
f012c90c:	01 d8                	add    %ebx,%eax
f012c90e:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012c913:	39 c1                	cmp    %eax,%ecx
f012c915:	74 17                	je     f012c92e <test_krealloc+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012c917:	83 ec 04             	sub    $0x4,%esp
f012c91a:	68 dc cb 13 f0       	push   $0xf013cbdc
f012c91f:	68 08 0f 00 00       	push   $0xf08
f012c924:	68 fa b8 13 f0       	push   $0xf013b8fa
f012c929:	e8 d7 38 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c92e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c931:	e8 61 08 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012c936:	29 c3                	sub    %eax,%ebx
f012c938:	89 d8                	mov    %ebx,%eax
f012c93a:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c93f:	74 17                	je     f012c958 <test_krealloc+0x564>
			panic("krealloc: Wrong allocation: ");
f012c941:	83 ec 04             	sub    $0x4,%esp
f012c944:	68 0e cc 13 f0       	push   $0xf013cc0e
f012c949:	68 0a 0f 00 00       	push   $0xf0a
f012c94e:	68 fa b8 13 f0       	push   $0xf013b8fa
f012c953:	e8 ad 38 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012c958:	c7 85 14 fe ff ff ff 	movl   $0x3feff,-0x1ec(%ebp)
f012c95f:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012c962:	e8 30 08 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012c967:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012c96a:	83 ec 08             	sub    $0x8,%esp
f012c96d:	68 00 fc 1f 00       	push   $0x1ffc00
f012c972:	6a 00                	push   $0x0
f012c974:	e8 d2 b6 fd ff       	call   f010804b <krealloc>
f012c979:	83 c4 10             	add    $0x10,%esp
f012c97c:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012c982:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c988:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012c98d:	77 17                	ja     f012c9a6 <test_krealloc+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c98f:	83 ec 04             	sub    $0x4,%esp
f012c992:	68 a0 cb 13 f0       	push   $0xf013cba0
f012c997:	68 11 0f 00 00       	push   $0xf11
f012c99c:	68 fa b8 13 f0       	push   $0xf013b8fa
f012c9a1:	e8 5f 38 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012c9a6:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c9ac:	89 c1                	mov    %eax,%ecx
f012c9ae:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012c9b5:	10 00 00 
f012c9b8:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012c9be:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c9c3:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012c9c9:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012c9cf:	ba 00 00 00 00       	mov    $0x0,%edx
f012c9d4:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012c9da:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012c9e0:	29 d0                	sub    %edx,%eax
f012c9e2:	89 c3                	mov    %eax,%ebx
f012c9e4:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012c9eb:	10 00 00 
f012c9ee:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012c9f3:	0f b6 d0             	movzbl %al,%edx
f012c9f6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012c9fc:	01 d0                	add    %edx,%eax
f012c9fe:	48                   	dec    %eax
f012c9ff:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012ca05:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012ca0b:	ba 00 00 00 00       	mov    $0x0,%edx
f012ca10:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012ca16:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012ca1c:	29 d0                	sub    %edx,%eax
f012ca1e:	01 c3                	add    %eax,%ebx
f012ca20:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012ca27:	10 00 00 
f012ca2a:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012ca2f:	0f b6 c0             	movzbl %al,%eax
f012ca32:	c1 e0 04             	shl    $0x4,%eax
f012ca35:	89 c2                	mov    %eax,%edx
f012ca37:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012ca3d:	01 d0                	add    %edx,%eax
f012ca3f:	48                   	dec    %eax
f012ca40:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012ca46:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012ca4c:	ba 00 00 00 00       	mov    $0x0,%edx
f012ca51:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012ca57:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012ca5d:	29 d0                	sub    %edx,%eax
f012ca5f:	01 d8                	add    %ebx,%eax
f012ca61:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012ca66:	39 c1                	cmp    %eax,%ecx
f012ca68:	74 17                	je     f012ca81 <test_krealloc+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012ca6a:	83 ec 04             	sub    $0x4,%esp
f012ca6d:	68 dc cb 13 f0       	push   $0xf013cbdc
f012ca72:	68 13 0f 00 00       	push   $0xf13
f012ca77:	68 fa b8 13 f0       	push   $0xf013b8fa
f012ca7c:	e8 84 37 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012ca81:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ca84:	e8 0e 07 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012ca89:	29 c3                	sub    %eax,%ebx
f012ca8b:	89 d8                	mov    %ebx,%eax
f012ca8d:	3d 00 02 00 00       	cmp    $0x200,%eax
f012ca92:	74 17                	je     f012caab <test_krealloc+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012ca94:	83 ec 04             	sub    $0x4,%esp
f012ca97:	68 0e cc 13 f0       	push   $0xf013cc0e
f012ca9c:	68 15 0f 00 00       	push   $0xf15
f012caa1:	68 fa b8 13 f0       	push   $0xf013b8fa
f012caa6:	e8 5a 37 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012caab:	c7 85 18 fe ff ff ff 	movl   $0xffdff,-0x1e8(%ebp)
f012cab2:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012cab5:	e8 dd 06 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012caba:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012cabd:	83 ec 08             	sub    $0x8,%esp
f012cac0:	68 00 fc 1f 00       	push   $0x1ffc00
f012cac5:	6a 00                	push   $0x0
f012cac7:	e8 7f b5 fd ff       	call   f010804b <krealloc>
f012cacc:	83 c4 10             	add    $0x10,%esp
f012cacf:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012cad5:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012cadb:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012cae0:	77 17                	ja     f012caf9 <test_krealloc+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cae2:	83 ec 04             	sub    $0x4,%esp
f012cae5:	68 a0 cb 13 f0       	push   $0xf013cba0
f012caea:	68 1c 0f 00 00       	push   $0xf1c
f012caef:	68 fa b8 13 f0       	push   $0xf013b8fa
f012caf4:	e8 0c 37 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012caf9:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012caff:	89 c1                	mov    %eax,%ecx
f012cb01:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012cb08:	10 00 00 
f012cb0b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012cb11:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012cb16:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012cb1c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012cb22:	ba 00 00 00 00       	mov    $0x0,%edx
f012cb27:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012cb2d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012cb33:	29 d0                	sub    %edx,%eax
f012cb35:	89 c3                	mov    %eax,%ebx
f012cb37:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012cb3e:	10 00 00 
f012cb41:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012cb46:	0f b6 d0             	movzbl %al,%edx
f012cb49:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012cb4f:	01 d0                	add    %edx,%eax
f012cb51:	48                   	dec    %eax
f012cb52:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012cb58:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012cb5e:	ba 00 00 00 00       	mov    $0x0,%edx
f012cb63:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012cb69:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012cb6f:	29 d0                	sub    %edx,%eax
f012cb71:	01 c3                	add    %eax,%ebx
f012cb73:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012cb7a:	10 00 00 
f012cb7d:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012cb82:	0f b6 c0             	movzbl %al,%eax
f012cb85:	c1 e0 04             	shl    $0x4,%eax
f012cb88:	89 c2                	mov    %eax,%edx
f012cb8a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012cb90:	01 d0                	add    %edx,%eax
f012cb92:	48                   	dec    %eax
f012cb93:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012cb99:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012cb9f:	ba 00 00 00 00       	mov    $0x0,%edx
f012cba4:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012cbaa:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012cbb0:	29 d0                	sub    %edx,%eax
f012cbb2:	01 d8                	add    %ebx,%eax
f012cbb4:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012cbb9:	39 c1                	cmp    %eax,%ecx
f012cbbb:	74 17                	je     f012cbd4 <test_krealloc+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012cbbd:	83 ec 04             	sub    $0x4,%esp
f012cbc0:	68 dc cb 13 f0       	push   $0xf013cbdc
f012cbc5:	68 1e 0f 00 00       	push   $0xf1e
f012cbca:	68 fa b8 13 f0       	push   $0xf013b8fa
f012cbcf:	e8 31 36 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012cbd4:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cbd7:	e8 bb 05 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012cbdc:	29 c3                	sub    %eax,%ebx
f012cbde:	89 d8                	mov    %ebx,%eax
f012cbe0:	3d 00 02 00 00       	cmp    $0x200,%eax
f012cbe5:	74 17                	je     f012cbfe <test_krealloc+0x80a>
			panic("krealloc: Wrong allocation: ");
f012cbe7:	83 ec 04             	sub    $0x4,%esp
f012cbea:	68 0e cc 13 f0       	push   $0xf013cc0e
f012cbef:	68 20 0f 00 00       	push   $0xf20
f012cbf4:	68 fa b8 13 f0       	push   $0xf013b8fa
f012cbf9:	e8 07 36 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012cbfe:	c7 85 1c fe ff ff ff 	movl   $0xffdff,-0x1e4(%ebp)
f012cc05:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012cc08:	e8 8a 05 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012cc0d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012cc10:	83 ec 08             	sub    $0x8,%esp
f012cc13:	68 00 fc 2f 00       	push   $0x2ffc00
f012cc18:	6a 00                	push   $0x0
f012cc1a:	e8 2c b4 fd ff       	call   f010804b <krealloc>
f012cc1f:	83 c4 10             	add    $0x10,%esp
f012cc22:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012cc28:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cc2e:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012cc33:	77 17                	ja     f012cc4c <test_krealloc+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cc35:	83 ec 04             	sub    $0x4,%esp
f012cc38:	68 a0 cb 13 f0       	push   $0xf013cba0
f012cc3d:	68 27 0f 00 00       	push   $0xf27
f012cc42:	68 fa b8 13 f0       	push   $0xf013b8fa
f012cc47:	e8 b9 35 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012cc4c:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cc52:	89 c1                	mov    %eax,%ecx
f012cc54:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012cc5b:	10 00 00 
f012cc5e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012cc64:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012cc69:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012cc6f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cc75:	ba 00 00 00 00       	mov    $0x0,%edx
f012cc7a:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012cc80:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cc86:	29 d0                	sub    %edx,%eax
f012cc88:	89 c3                	mov    %eax,%ebx
f012cc8a:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012cc91:	10 00 00 
f012cc94:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012cc99:	0f b6 d0             	movzbl %al,%edx
f012cc9c:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012cca2:	01 d0                	add    %edx,%eax
f012cca4:	48                   	dec    %eax
f012cca5:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012ccab:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012ccb1:	ba 00 00 00 00       	mov    $0x0,%edx
f012ccb6:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012ccbc:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012ccc2:	29 d0                	sub    %edx,%eax
f012ccc4:	01 c3                	add    %eax,%ebx
f012ccc6:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012cccd:	10 00 00 
f012ccd0:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012ccd5:	0f b6 c0             	movzbl %al,%eax
f012ccd8:	c1 e0 04             	shl    $0x4,%eax
f012ccdb:	89 c2                	mov    %eax,%edx
f012ccdd:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012cce3:	01 d0                	add    %edx,%eax
f012cce5:	48                   	dec    %eax
f012cce6:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012ccec:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012ccf2:	ba 00 00 00 00       	mov    $0x0,%edx
f012ccf7:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012ccfd:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012cd03:	29 d0                	sub    %edx,%eax
f012cd05:	01 d8                	add    %ebx,%eax
f012cd07:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012cd0c:	39 c1                	cmp    %eax,%ecx
f012cd0e:	74 17                	je     f012cd27 <test_krealloc+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012cd10:	83 ec 04             	sub    $0x4,%esp
f012cd13:	68 dc cb 13 f0       	push   $0xf013cbdc
f012cd18:	68 29 0f 00 00       	push   $0xf29
f012cd1d:	68 fa b8 13 f0       	push   $0xf013b8fa
f012cd22:	e8 de 34 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012cd27:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cd2a:	e8 68 04 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012cd2f:	29 c3                	sub    %eax,%ebx
f012cd31:	89 d8                	mov    %ebx,%eax
f012cd33:	3d 00 03 00 00       	cmp    $0x300,%eax
f012cd38:	74 17                	je     f012cd51 <test_krealloc+0x95d>
			panic("Wrong allocation: ");
f012cd3a:	83 ec 04             	sub    $0x4,%esp
f012cd3d:	68 44 bd 13 f0       	push   $0xf013bd44
f012cd42:	68 2b 0f 00 00       	push   $0xf2b
f012cd47:	68 fa b8 13 f0       	push   $0xf013b8fa
f012cd4c:	e8 b4 34 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012cd51:	c7 85 20 fe ff ff 7f 	movl   $0x5ff7f,-0x1e0(%ebp)
f012cd58:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012cd5b:	e8 37 04 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012cd60:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012cd63:	83 ec 08             	sub    $0x8,%esp
f012cd66:	68 00 fc 2f 00       	push   $0x2ffc00
f012cd6b:	6a 00                	push   $0x0
f012cd6d:	e8 d9 b2 fd ff       	call   f010804b <krealloc>
f012cd72:	83 c4 10             	add    $0x10,%esp
f012cd75:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012cd7b:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012cd81:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012cd86:	77 17                	ja     f012cd9f <test_krealloc+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cd88:	83 ec 04             	sub    $0x4,%esp
f012cd8b:	68 a0 cb 13 f0       	push   $0xf013cba0
f012cd90:	68 32 0f 00 00       	push   $0xf32
f012cd95:	68 fa b8 13 f0       	push   $0xf013b8fa
f012cd9a:	e8 66 34 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012cd9f:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012cda5:	89 c1                	mov    %eax,%ecx
f012cda7:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012cdae:	10 00 00 
f012cdb1:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012cdb7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012cdbc:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012cdc2:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012cdc8:	ba 00 00 00 00       	mov    $0x0,%edx
f012cdcd:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012cdd3:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012cdd9:	29 d0                	sub    %edx,%eax
f012cddb:	89 c3                	mov    %eax,%ebx
f012cddd:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012cde4:	10 00 00 
f012cde7:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012cdec:	0f b6 d0             	movzbl %al,%edx
f012cdef:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012cdf5:	01 d0                	add    %edx,%eax
f012cdf7:	48                   	dec    %eax
f012cdf8:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012cdfe:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012ce04:	ba 00 00 00 00       	mov    $0x0,%edx
f012ce09:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012ce0f:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012ce15:	29 d0                	sub    %edx,%eax
f012ce17:	01 c3                	add    %eax,%ebx
f012ce19:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012ce20:	10 00 00 
f012ce23:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012ce28:	0f b6 c0             	movzbl %al,%eax
f012ce2b:	c1 e0 04             	shl    $0x4,%eax
f012ce2e:	89 c2                	mov    %eax,%edx
f012ce30:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012ce36:	01 d0                	add    %edx,%eax
f012ce38:	48                   	dec    %eax
f012ce39:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012ce3f:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012ce45:	ba 00 00 00 00       	mov    $0x0,%edx
f012ce4a:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012ce50:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012ce56:	29 d0                	sub    %edx,%eax
f012ce58:	01 d8                	add    %ebx,%eax
f012ce5a:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012ce5f:	39 c1                	cmp    %eax,%ecx
f012ce61:	74 17                	je     f012ce7a <test_krealloc+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012ce63:	83 ec 04             	sub    $0x4,%esp
f012ce66:	68 dc cb 13 f0       	push   $0xf013cbdc
f012ce6b:	68 34 0f 00 00       	push   $0xf34
f012ce70:	68 fa b8 13 f0       	push   $0xf013b8fa
f012ce75:	e8 8b 33 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012ce7a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ce7d:	e8 15 03 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012ce82:	29 c3                	sub    %eax,%ebx
f012ce84:	89 d8                	mov    %ebx,%eax
f012ce86:	3d 00 03 00 00       	cmp    $0x300,%eax
f012ce8b:	74 17                	je     f012cea4 <test_krealloc+0xab0>
			panic("krealloc: Wrong allocation: ");
f012ce8d:	83 ec 04             	sub    $0x4,%esp
f012ce90:	68 0e cc 13 f0       	push   $0xf013cc0e
f012ce95:	68 36 0f 00 00       	push   $0xf36
f012ce9a:	68 fa b8 13 f0       	push   $0xf013b8fa
f012ce9f:	e8 61 33 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012cea4:	c7 85 24 fe ff ff 7f 	movl   $0x5ff7f,-0x1dc(%ebp)
f012ceab:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012ceae:	e8 e4 02 fe ff       	call   f010d197 <sys_calculate_free_frames>
f012ceb3:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012ceb6:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012cebd:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012cec0:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012cec6:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012cecc:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012ced2:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012ced5:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012ced7:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012cedd:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012cee3:	01 c2                	add    %eax,%edx
f012cee5:	8a 45 ce             	mov    -0x32(%ebp),%al
f012cee8:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012ceea:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cef0:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012cef6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012cefd:	eb 11                	jmp    f012cf10 <test_krealloc+0xb1c>
			ptr[i] = 2;
f012ceff:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012cf02:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012cf08:	01 d0                	add    %edx,%eax
f012cf0a:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012cf0d:	ff 45 f4             	incl   -0xc(%ebp)
f012cf10:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012cf16:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012cf19:	7d e4                	jge    f012ceff <test_krealloc+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012cf1b:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cf21:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012cf27:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012cf2d:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012cf33:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012cf39:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012cf40:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012cf46:	01 d0                	add    %edx,%eax
f012cf48:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012cf4e:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012cf54:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012cf5a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012cf61:	eb 1b                	jmp    f012cf7e <test_krealloc+0xb8a>
			intArr[i] = 4;
f012cf63:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012cf66:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012cf6d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012cf73:	01 d0                	add    %edx,%eax
f012cf75:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012cf7b:	ff 45 f0             	incl   -0x10(%ebp)
f012cf7e:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012cf84:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012cf87:	7d da                	jge    f012cf63 <test_krealloc+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012cf89:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cf8f:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012cf95:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012cf9c:	eb 17                	jmp    f012cfb5 <test_krealloc+0xbc1>
			shortArr[i] = 5;
f012cf9e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012cfa1:	01 c0                	add    %eax,%eax
f012cfa3:	89 c2                	mov    %eax,%edx
f012cfa5:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cfab:	01 d0                	add    %edx,%eax
f012cfad:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012cfb2:	ff 45 ec             	incl   -0x14(%ebp)
f012cfb5:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012cfbb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012cfbe:	7d de                	jge    f012cf9e <test_krealloc+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012cfc0:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012cfc6:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012cfcc:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cfd2:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012cfd7:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012cfdd:	01 c0                	add    %eax,%eax
f012cfdf:	89 c2                	mov    %eax,%edx
f012cfe1:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cfe7:	01 d0                	add    %edx,%eax
f012cfe9:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012cfee:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cff4:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012cffa:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012d001:	eb 49                	jmp    f012d04c <test_krealloc+0xc58>
			structArr[i].a = 7;
f012d003:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012d006:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d00d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d013:	01 d0                	add    %edx,%eax
f012d015:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012d018:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012d01b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d022:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d028:	01 d0                	add    %edx,%eax
f012d02a:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012d030:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012d033:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d03a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d040:	01 d0                	add    %edx,%eax
f012d042:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012d049:	ff 45 e8             	incl   -0x18(%ebp)
f012d04c:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d052:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012d055:	7d ac                	jge    f012d003 <test_krealloc+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012d057:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012d05d:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012d063:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d069:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012d06c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d072:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012d078:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d07e:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012d085:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d08b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d092:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d098:	01 d0                	add    %edx,%eax
f012d09a:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012d09d:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d0a3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d0aa:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d0b0:	01 d0                	add    %edx,%eax
f012d0b2:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012d0b8:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d0be:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d0c5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d0cb:	01 d0                	add    %edx,%eax
f012d0cd:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012d0d4:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012d0da:	8a 00                	mov    (%eax),%al
f012d0dc:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012d0df:	75 17                	jne    f012d0f8 <test_krealloc+0xd04>
f012d0e1:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012d0e7:	89 c2                	mov    %eax,%edx
f012d0e9:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012d0ef:	01 d0                	add    %edx,%eax
f012d0f1:	8a 00                	mov    (%eax),%al
f012d0f3:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012d0f6:	74 17                	je     f012d10f <test_krealloc+0xd1b>
			panic(
f012d0f8:	83 ec 04             	sub    $0x4,%esp
f012d0fb:	68 2c cc 13 f0       	push   $0xf013cc2c
f012d100:	68 79 0f 00 00       	push   $0xf79
f012d105:	68 fa b8 13 f0       	push   $0xf013b8fa
f012d10a:	e8 f6 30 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012d10f:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d115:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012d11b:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d121:	8a 00                	mov    (%eax),%al
f012d123:	3c 02                	cmp    $0x2,%al
f012d125:	75 16                	jne    f012d13d <test_krealloc+0xd49>
f012d127:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012d12d:	89 c2                	mov    %eax,%edx
f012d12f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d135:	01 d0                	add    %edx,%eax
f012d137:	8a 00                	mov    (%eax),%al
f012d139:	3c 02                	cmp    $0x2,%al
f012d13b:	74 20                	je     f012d15d <test_krealloc+0xd69>
			panic(
f012d13d:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d143:	8a 00                	mov    (%eax),%al
f012d145:	0f be c0             	movsbl %al,%eax
f012d148:	50                   	push   %eax
f012d149:	68 6c cc 13 f0       	push   $0xf013cc6c
f012d14e:	68 7f 0f 00 00       	push   $0xf7f
f012d153:	68 fa b8 13 f0       	push   $0xf013b8fa
f012d158:	e8 a8 30 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012d15d:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d163:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012d169:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d16f:	8b 00                	mov    (%eax),%eax
f012d171:	83 f8 03             	cmp    $0x3,%eax
f012d174:	75 1c                	jne    f012d192 <test_krealloc+0xd9e>
f012d176:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012d17c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012d183:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d189:	01 d0                	add    %edx,%eax
f012d18b:	8b 00                	mov    (%eax),%eax
f012d18d:	83 f8 03             	cmp    $0x3,%eax
f012d190:	74 17                	je     f012d1a9 <test_krealloc+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012d192:	83 ec 04             	sub    $0x4,%esp
f012d195:	68 b8 cc 13 f0       	push   $0xf013ccb8
f012d19a:	68 83 0f 00 00       	push   $0xf83
f012d19f:	68 fa b8 13 f0       	push   $0xf013b8fa
f012d1a4:	e8 5c 30 fd ff       	call   f0100205 <_panic>

		intArr = (int*) ptr_allocations[3];
f012d1a9:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d1af:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012d1b5:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d1bb:	8b 00                	mov    (%eax),%eax
f012d1bd:	83 f8 04             	cmp    $0x4,%eax
f012d1c0:	75 1c                	jne    f012d1de <test_krealloc+0xdea>
f012d1c2:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012d1c8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012d1cf:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d1d5:	01 d0                	add    %edx,%eax
f012d1d7:	8b 00                	mov    (%eax),%eax
f012d1d9:	83 f8 04             	cmp    $0x4,%eax
f012d1dc:	74 17                	je     f012d1f5 <test_krealloc+0xe01>
			panic(
f012d1de:	83 ec 04             	sub    $0x4,%esp
f012d1e1:	68 2c cc 13 f0       	push   $0xf013cc2c
f012d1e6:	68 88 0f 00 00       	push   $0xf88
f012d1eb:	68 fa b8 13 f0       	push   $0xf013b8fa
f012d1f0:	e8 10 30 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012d1f5:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d1fb:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012d201:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d207:	66 8b 00             	mov    (%eax),%ax
f012d20a:	66 83 f8 05          	cmp    $0x5,%ax
f012d20e:	75 1b                	jne    f012d22b <test_krealloc+0xe37>
f012d210:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d216:	01 c0                	add    %eax,%eax
f012d218:	89 c2                	mov    %eax,%edx
f012d21a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d220:	01 d0                	add    %edx,%eax
f012d222:	66 8b 00             	mov    (%eax),%ax
f012d225:	66 83 f8 05          	cmp    $0x5,%ax
f012d229:	74 17                	je     f012d242 <test_krealloc+0xe4e>
			panic(
f012d22b:	83 ec 04             	sub    $0x4,%esp
f012d22e:	68 2c cc 13 f0       	push   $0xf013cc2c
f012d233:	68 8d 0f 00 00       	push   $0xf8d
f012d238:	68 fa b8 13 f0       	push   $0xf013b8fa
f012d23d:	e8 c3 2f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012d242:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012d248:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012d24e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d254:	66 8b 00             	mov    (%eax),%ax
f012d257:	66 83 f8 06          	cmp    $0x6,%ax
f012d25b:	75 1b                	jne    f012d278 <test_krealloc+0xe84>
f012d25d:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012d263:	01 c0                	add    %eax,%eax
f012d265:	89 c2                	mov    %eax,%edx
f012d267:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d26d:	01 d0                	add    %edx,%eax
f012d26f:	66 8b 00             	mov    (%eax),%ax
f012d272:	66 83 f8 06          	cmp    $0x6,%ax
f012d276:	74 17                	je     f012d28f <test_krealloc+0xe9b>
			panic(
f012d278:	83 ec 04             	sub    $0x4,%esp
f012d27b:	68 2c cc 13 f0       	push   $0xf013cc2c
f012d280:	68 92 0f 00 00       	push   $0xf92
f012d285:	68 fa b8 13 f0       	push   $0xf013b8fa
f012d28a:	e8 76 2f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012d28f:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d295:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012d29b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d2a1:	8a 00                	mov    (%eax),%al
f012d2a3:	3c 07                	cmp    $0x7,%al
f012d2a5:	75 1b                	jne    f012d2c2 <test_krealloc+0xece>
f012d2a7:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d2ad:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d2b4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d2ba:	01 d0                	add    %edx,%eax
f012d2bc:	8a 00                	mov    (%eax),%al
f012d2be:	3c 07                	cmp    $0x7,%al
f012d2c0:	74 17                	je     f012d2d9 <test_krealloc+0xee5>
			panic(
f012d2c2:	83 ec 04             	sub    $0x4,%esp
f012d2c5:	68 2c cc 13 f0       	push   $0xf013cc2c
f012d2ca:	68 97 0f 00 00       	push   $0xf97
f012d2cf:	68 fa b8 13 f0       	push   $0xf013b8fa
f012d2d4:	e8 2c 2f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012d2d9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d2df:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d2e3:	66 83 f8 07          	cmp    $0x7,%ax
f012d2e7:	75 1f                	jne    f012d308 <test_krealloc+0xf14>
f012d2e9:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d2ef:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d2f6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d2fc:	01 d0                	add    %edx,%eax
f012d2fe:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d302:	66 83 f8 07          	cmp    $0x7,%ax
f012d306:	74 17                	je     f012d31f <test_krealloc+0xf2b>
			panic(
f012d308:	83 ec 04             	sub    $0x4,%esp
f012d30b:	68 2c cc 13 f0       	push   $0xf013cc2c
f012d310:	68 9a 0f 00 00       	push   $0xf9a
f012d315:	68 fa b8 13 f0       	push   $0xf013b8fa
f012d31a:	e8 e6 2e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012d31f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d325:	8b 40 04             	mov    0x4(%eax),%eax
f012d328:	83 f8 07             	cmp    $0x7,%eax
f012d32b:	75 1d                	jne    f012d34a <test_krealloc+0xf56>
f012d32d:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d333:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d33a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d340:	01 d0                	add    %edx,%eax
f012d342:	8b 40 04             	mov    0x4(%eax),%eax
f012d345:	83 f8 07             	cmp    $0x7,%eax
f012d348:	74 17                	je     f012d361 <test_krealloc+0xf6d>
			panic(
f012d34a:	83 ec 04             	sub    $0x4,%esp
f012d34d:	68 2c cc 13 f0       	push   $0xf013cc2c
f012d352:	68 9d 0f 00 00       	push   $0xf9d
f012d357:	68 fa b8 13 f0       	push   $0xf013b8fa
f012d35c:	e8 a4 2e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012d361:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012d367:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012d36d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d373:	8a 00                	mov    (%eax),%al
f012d375:	3c 08                	cmp    $0x8,%al
f012d377:	75 1b                	jne    f012d394 <test_krealloc+0xfa0>
f012d379:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d37f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d386:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d38c:	01 d0                	add    %edx,%eax
f012d38e:	8a 00                	mov    (%eax),%al
f012d390:	3c 08                	cmp    $0x8,%al
f012d392:	74 17                	je     f012d3ab <test_krealloc+0xfb7>
			panic(
f012d394:	83 ec 04             	sub    $0x4,%esp
f012d397:	68 2c cc 13 f0       	push   $0xf013cc2c
f012d39c:	68 a2 0f 00 00       	push   $0xfa2
f012d3a1:	68 fa b8 13 f0       	push   $0xf013b8fa
f012d3a6:	e8 5a 2e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012d3ab:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d3b1:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d3b5:	66 83 f8 08          	cmp    $0x8,%ax
f012d3b9:	75 1f                	jne    f012d3da <test_krealloc+0xfe6>
f012d3bb:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d3c1:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d3c8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d3ce:	01 d0                	add    %edx,%eax
f012d3d0:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d3d4:	66 83 f8 08          	cmp    $0x8,%ax
f012d3d8:	74 17                	je     f012d3f1 <test_krealloc+0xffd>
			panic(
f012d3da:	83 ec 04             	sub    $0x4,%esp
f012d3dd:	68 2c cc 13 f0       	push   $0xf013cc2c
f012d3e2:	68 a5 0f 00 00       	push   $0xfa5
f012d3e7:	68 fa b8 13 f0       	push   $0xf013b8fa
f012d3ec:	e8 14 2e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012d3f1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d3f7:	8b 40 04             	mov    0x4(%eax),%eax
f012d3fa:	83 f8 08             	cmp    $0x8,%eax
f012d3fd:	75 1d                	jne    f012d41c <test_krealloc+0x1028>
f012d3ff:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d405:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d40c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d412:	01 d0                	add    %edx,%eax
f012d414:	8b 40 04             	mov    0x4(%eax),%eax
f012d417:	83 f8 08             	cmp    $0x8,%eax
f012d41a:	74 17                	je     f012d433 <test_krealloc+0x103f>
			panic(
f012d41c:	83 ec 04             	sub    $0x4,%esp
f012d41f:	68 2c cc 13 f0       	push   $0xf013cc2c
f012d424:	68 a8 0f 00 00       	push   $0xfa8
f012d429:	68 fa b8 13 f0       	push   $0xf013b8fa
f012d42e:	e8 d2 2d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012d433:	e8 5f fd fd ff       	call   f010d197 <sys_calculate_free_frames>
f012d438:	89 c2                	mov    %eax,%edx
f012d43a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d43d:	39 c2                	cmp    %eax,%edx
f012d43f:	74 17                	je     f012d458 <test_krealloc+0x1064>
			panic(
f012d441:	83 ec 04             	sub    $0x4,%esp
f012d444:	68 ec cc 13 f0       	push   $0xf013ccec
f012d449:	68 ac 0f 00 00       	push   $0xfac
f012d44e:	68 fa b8 13 f0       	push   $0xf013b8fa
f012d453:	e8 ad 2d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012d458:	83 ec 0c             	sub    $0xc,%esp
f012d45b:	68 38 cd 13 f0       	push   $0xf013cd38
f012d460:	e8 a9 38 fd ff       	call   f0100d0e <cprintf>
f012d465:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012d468:	e8 2a fd fd ff       	call   f010d197 <sys_calculate_free_frames>
f012d46d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d470:	e8 53 69 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d475:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012d47b:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d481:	83 ec 08             	sub    $0x8,%esp
f012d484:	6a 00                	push   $0x0
f012d486:	50                   	push   %eax
f012d487:	e8 bf ab fd ff       	call   f010804b <krealloc>
f012d48c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d48f:	e8 34 69 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d494:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d49a:	74 17                	je     f012d4b3 <test_krealloc+0x10bf>
			panic(
f012d49c:	83 ec 04             	sub    $0x4,%esp
f012d49f:	68 5c cd 13 f0       	push   $0xf013cd5c
f012d4a4:	68 b9 0f 00 00       	push   $0xfb9
f012d4a9:	68 fa b8 13 f0       	push   $0xf013b8fa
f012d4ae:	e8 52 2d fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012d4b3:	e8 df fc fd ff       	call   f010d197 <sys_calculate_free_frames>
f012d4b8:	89 c2                	mov    %eax,%edx
f012d4ba:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d4bd:	29 c2                	sub    %eax,%edx
f012d4bf:	89 d0                	mov    %edx,%eax
f012d4c1:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d4c6:	74 17                	je     f012d4df <test_krealloc+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012d4c8:	83 ec 04             	sub    $0x4,%esp
f012d4cb:	68 d0 cd 13 f0       	push   $0xf013cdd0
f012d4d0:	68 bb 0f 00 00       	push   $0xfbb
f012d4d5:	68 fa b8 13 f0       	push   $0xf013b8fa
f012d4da:	e8 26 2d fd ff       	call   f0100205 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012d4df:	e8 b3 fc fd ff       	call   f010d197 <sys_calculate_free_frames>
f012d4e4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d4e7:	e8 dc 68 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d4ec:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012d4f2:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d4f8:	83 ec 08             	sub    $0x8,%esp
f012d4fb:	6a 00                	push   $0x0
f012d4fd:	50                   	push   %eax
f012d4fe:	e8 48 ab fd ff       	call   f010804b <krealloc>
f012d503:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d506:	e8 bd 68 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d50b:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d511:	74 17                	je     f012d52a <test_krealloc+0x1136>
			panic(
f012d513:	83 ec 04             	sub    $0x4,%esp
f012d516:	68 5c cd 13 f0       	push   $0xf013cd5c
f012d51b:	68 c4 0f 00 00       	push   $0xfc4
f012d520:	68 fa b8 13 f0       	push   $0xf013b8fa
f012d525:	e8 db 2c fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012d52a:	e8 68 fc fd ff       	call   f010d197 <sys_calculate_free_frames>
f012d52f:	89 c2                	mov    %eax,%edx
f012d531:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d534:	29 c2                	sub    %eax,%edx
f012d536:	89 d0                	mov    %edx,%eax
f012d538:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d53d:	74 17                	je     f012d556 <test_krealloc+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012d53f:	83 ec 04             	sub    $0x4,%esp
f012d542:	68 d0 cd 13 f0       	push   $0xf013cdd0
f012d547:	68 c6 0f 00 00       	push   $0xfc6
f012d54c:	68 fa b8 13 f0       	push   $0xf013b8fa
f012d551:	e8 af 2c fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012d556:	e8 3c fc fd ff       	call   f010d197 <sys_calculate_free_frames>
f012d55b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d55e:	e8 65 68 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d563:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012d569:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012d56f:	83 ec 08             	sub    $0x8,%esp
f012d572:	6a 00                	push   $0x0
f012d574:	50                   	push   %eax
f012d575:	e8 d1 aa fd ff       	call   f010804b <krealloc>
f012d57a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d57d:	e8 46 68 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d582:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d588:	74 17                	je     f012d5a1 <test_krealloc+0x11ad>
			panic(
f012d58a:	83 ec 04             	sub    $0x4,%esp
f012d58d:	68 14 b9 13 f0       	push   $0xf013b914
f012d592:	68 ce 0f 00 00       	push   $0xfce
f012d597:	68 fa b8 13 f0       	push   $0xf013b8fa
f012d59c:	e8 64 2c fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012d5a1:	e8 f1 fb fd ff       	call   f010d197 <sys_calculate_free_frames>
f012d5a6:	89 c2                	mov    %eax,%edx
f012d5a8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d5ab:	29 c2                	sub    %eax,%edx
f012d5ad:	89 d0                	mov    %edx,%eax
f012d5af:	3d 00 02 00 00       	cmp    $0x200,%eax
f012d5b4:	74 17                	je     f012d5cd <test_krealloc+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012d5b6:	83 ec 04             	sub    $0x4,%esp
f012d5b9:	68 d0 cd 13 f0       	push   $0xf013cdd0
f012d5be:	68 d0 0f 00 00       	push   $0xfd0
f012d5c3:	68 fa b8 13 f0       	push   $0xf013b8fa
f012d5c8:	e8 38 2c fd ff       	call   f0100205 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012d5cd:	e8 c5 fb fd ff       	call   f010d197 <sys_calculate_free_frames>
f012d5d2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d5d5:	e8 ee 67 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d5da:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012d5e0:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012d5e6:	83 ec 08             	sub    $0x8,%esp
f012d5e9:	6a 00                	push   $0x0
f012d5eb:	50                   	push   %eax
f012d5ec:	e8 5a aa fd ff       	call   f010804b <krealloc>
f012d5f1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d5f4:	e8 cf 67 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d5f9:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d5ff:	74 17                	je     f012d618 <test_krealloc+0x1224>
			panic(
f012d601:	83 ec 04             	sub    $0x4,%esp
f012d604:	68 5c cd 13 f0       	push   $0xf013cd5c
f012d609:	68 d8 0f 00 00       	push   $0xfd8
f012d60e:	68 fa b8 13 f0       	push   $0xf013b8fa
f012d613:	e8 ed 2b fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012d618:	e8 7a fb fd ff       	call   f010d197 <sys_calculate_free_frames>
f012d61d:	89 c2                	mov    %eax,%edx
f012d61f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d622:	29 c2                	sub    %eax,%edx
f012d624:	89 d0                	mov    %edx,%eax
f012d626:	3d 00 03 00 00       	cmp    $0x300,%eax
f012d62b:	74 17                	je     f012d644 <test_krealloc+0x1250>
			panic(
f012d62d:	83 ec 04             	sub    $0x4,%esp
f012d630:	68 04 ce 13 f0       	push   $0xf013ce04
f012d635:	68 db 0f 00 00       	push   $0xfdb
f012d63a:	68 fa b8 13 f0       	push   $0xf013b8fa
f012d63f:	e8 c1 2b fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d644:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012d64b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012d652:	eb 48                	jmp    f012d69c <test_krealloc+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012d654:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012d657:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f012d65c:	83 ec 04             	sub    $0x4,%esp
f012d65f:	8d 8d b4 fd ff ff    	lea    -0x24c(%ebp),%ecx
f012d665:	51                   	push   %ecx
f012d666:	52                   	push   %edx
f012d667:	50                   	push   %eax
f012d668:	e8 44 94 fd ff       	call   f0106ab1 <get_page_table>
f012d66d:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012d670:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f012d676:	85 c0                	test   %eax,%eax
f012d678:	75 17                	jne    f012d691 <test_krealloc+0x129d>
					panic(
f012d67a:	83 ec 04             	sub    $0x4,%esp
f012d67d:	68 fc c1 13 f0       	push   $0xf013c1fc
f012d682:	68 e7 0f 00 00       	push   $0xfe7
f012d687:	68 fa b8 13 f0       	push   $0xf013b8fa
f012d68c:	e8 74 2b fd ff       	call   f0100205 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d691:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012d698:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012d69c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012d6a0:	78 b2                	js     f012d654 <test_krealloc+0x1260>
f012d6a2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012d6a6:	7f 09                	jg     f012d6b1 <test_krealloc+0x12bd>
f012d6a8:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012d6af:	76 a3                	jbe    f012d654 <test_krealloc+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012d6b1:	83 ec 0c             	sub    $0xc,%esp
f012d6b4:	68 43 ce 13 f0       	push   $0xf013ce43
f012d6b9:	e8 50 36 fd ff       	call   f0100d0e <cprintf>
f012d6be:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012d6c1:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d6c7:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d6cd:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d6d4:	eb 21                	jmp    f012d6f7 <test_krealloc+0x1303>
			sums[0] += ptr[i];
f012d6d6:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d6dc:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012d6df:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d6e5:	01 c8                	add    %ecx,%eax
f012d6e7:	8a 00                	mov    (%eax),%al
f012d6e9:	0f be c0             	movsbl %al,%eax
f012d6ec:	01 d0                	add    %edx,%eax
f012d6ee:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d6f4:	ff 45 dc             	incl   -0x24(%ebp)
f012d6f7:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012d6fd:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d700:	7d d4                	jge    f012d6d6 <test_krealloc+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012d702:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012d708:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012d70e:	42                   	inc    %edx
f012d70f:	01 d2                	add    %edx,%edx
f012d711:	39 d0                	cmp    %edx,%eax
f012d713:	74 17                	je     f012d72c <test_krealloc+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012d715:	83 ec 04             	sub    $0x4,%esp
f012d718:	68 4c ce 13 f0       	push   $0xf013ce4c
f012d71d:	68 f9 0f 00 00       	push   $0xff9
f012d722:	68 fa b8 13 f0       	push   $0xf013b8fa
f012d727:	e8 d9 2a fd ff       	call   f0100205 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012d72c:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d732:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012d738:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d73f:	eb 25                	jmp    f012d766 <test_krealloc+0x1372>
			sums[1] += intArr[i];
f012d741:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012d747:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d74a:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012d751:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d757:	01 c8                	add    %ecx,%eax
f012d759:	8b 00                	mov    (%eax),%eax
f012d75b:	01 d0                	add    %edx,%eax
f012d75d:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012d763:	ff 45 dc             	incl   -0x24(%ebp)
f012d766:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012d76c:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d76f:	7d d0                	jge    f012d741 <test_krealloc+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012d771:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f012d777:	8b 95 14 fe ff ff    	mov    -0x1ec(%ebp),%edx
f012d77d:	42                   	inc    %edx
f012d77e:	c1 e2 02             	shl    $0x2,%edx
f012d781:	39 d0                	cmp    %edx,%eax
f012d783:	74 17                	je     f012d79c <test_krealloc+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012d785:	83 ec 04             	sub    $0x4,%esp
f012d788:	68 4c ce 13 f0       	push   $0xf013ce4c
f012d78d:	68 03 10 00 00       	push   $0x1003
f012d792:	68 fa b8 13 f0       	push   $0xf013b8fa
f012d797:	e8 69 2a fd ff       	call   f0100205 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012d79c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d7a2:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012d7a8:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d7af:	eb 24                	jmp    f012d7d5 <test_krealloc+0x13e1>
			sums[2] += shortArr[i];
f012d7b1:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012d7b7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d7ba:	01 c0                	add    %eax,%eax
f012d7bc:	89 c1                	mov    %eax,%ecx
f012d7be:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d7c4:	01 c8                	add    %ecx,%eax
f012d7c6:	66 8b 00             	mov    (%eax),%ax
f012d7c9:	98                   	cwtl   
f012d7ca:	01 d0                	add    %edx,%eax
f012d7cc:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012d7d2:	ff 45 dc             	incl   -0x24(%ebp)
f012d7d5:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d7db:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d7de:	7d d1                	jge    f012d7b1 <test_krealloc+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012d7e0:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012d7e6:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d7ec:	8d 48 01             	lea    0x1(%eax),%ecx
f012d7ef:	89 c8                	mov    %ecx,%eax
f012d7f1:	c1 e0 02             	shl    $0x2,%eax
f012d7f4:	01 c8                	add    %ecx,%eax
f012d7f6:	39 c2                	cmp    %eax,%edx
f012d7f8:	74 17                	je     f012d811 <test_krealloc+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012d7fa:	83 ec 04             	sub    $0x4,%esp
f012d7fd:	68 4c ce 13 f0       	push   $0xf013ce4c
f012d802:	68 0d 10 00 00       	push   $0x100d
f012d807:	68 fa b8 13 f0       	push   $0xf013b8fa
f012d80c:	e8 f4 29 fd ff       	call   f0100205 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012d811:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d817:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012d81d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d824:	eb 70                	jmp    f012d896 <test_krealloc+0x14a2>
			sums[3] += structArr[i].a;
f012d826:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012d82c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d82f:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d836:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d83c:	01 c8                	add    %ecx,%eax
f012d83e:	8a 00                	mov    (%eax),%al
f012d840:	0f be c0             	movsbl %al,%eax
f012d843:	01 d0                	add    %edx,%eax
f012d845:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
			sums[4] += structArr[i].b;
f012d84b:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012d851:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d854:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d85b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d861:	01 c8                	add    %ecx,%eax
f012d863:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d867:	98                   	cwtl   
f012d868:	01 d0                	add    %edx,%eax
f012d86a:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
			sums[5] += structArr[i].c;
f012d870:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012d876:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d879:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d880:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d886:	01 c8                	add    %ecx,%eax
f012d888:	8b 40 04             	mov    0x4(%eax),%eax
f012d88b:	01 d0                	add    %edx,%eax
f012d88d:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012d893:	ff 45 dc             	incl   -0x24(%ebp)
f012d896:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d89c:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d89f:	7d 85                	jge    f012d826 <test_krealloc+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012d8a1:	8b 8d c4 fd ff ff    	mov    -0x23c(%ebp),%ecx
f012d8a7:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d8ad:	8d 50 01             	lea    0x1(%eax),%edx
f012d8b0:	89 d0                	mov    %edx,%eax
f012d8b2:	01 c0                	add    %eax,%eax
f012d8b4:	01 d0                	add    %edx,%eax
f012d8b6:	01 c0                	add    %eax,%eax
f012d8b8:	01 d0                	add    %edx,%eax
f012d8ba:	39 c1                	cmp    %eax,%ecx
f012d8bc:	75 3a                	jne    f012d8f8 <test_krealloc+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012d8be:	8b 8d c8 fd ff ff    	mov    -0x238(%ebp),%ecx
f012d8c4:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d8ca:	8d 50 01             	lea    0x1(%eax),%edx
f012d8cd:	89 d0                	mov    %edx,%eax
f012d8cf:	01 c0                	add    %eax,%eax
f012d8d1:	01 d0                	add    %edx,%eax
f012d8d3:	01 c0                	add    %eax,%eax
f012d8d5:	01 d0                	add    %edx,%eax
f012d8d7:	39 c1                	cmp    %eax,%ecx
f012d8d9:	75 1d                	jne    f012d8f8 <test_krealloc+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012d8db:	8b 8d cc fd ff ff    	mov    -0x234(%ebp),%ecx
f012d8e1:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d8e7:	8d 50 01             	lea    0x1(%eax),%edx
f012d8ea:	89 d0                	mov    %edx,%eax
f012d8ec:	01 c0                	add    %eax,%eax
f012d8ee:	01 d0                	add    %edx,%eax
f012d8f0:	01 c0                	add    %eax,%eax
f012d8f2:	01 d0                	add    %edx,%eax
f012d8f4:	39 c1                	cmp    %eax,%ecx
f012d8f6:	74 17                	je     f012d90f <test_krealloc+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012d8f8:	83 ec 04             	sub    $0x4,%esp
f012d8fb:	68 4c ce 13 f0       	push   $0xf013ce4c
f012d900:	68 1b 10 00 00       	push   $0x101b
f012d905:	68 fa b8 13 f0       	push   $0xf013b8fa
f012d90a:	e8 f6 28 fd ff       	call   f0100205 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012d90f:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012d916:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012d919:	e8 79 f8 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012d91e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012d921:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d927:	83 ec 08             	sub    $0x8,%esp
f012d92a:	68 00 3c 00 00       	push   $0x3c00
f012d92f:	50                   	push   %eax
f012d930:	e8 16 a7 fd ff       	call   f010804b <krealloc>
f012d935:	83 c4 10             	add    $0x10,%esp
f012d938:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d93e:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012d944:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d949:	77 17                	ja     f012d962 <test_krealloc+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d94b:	83 ec 04             	sub    $0x4,%esp
f012d94e:	68 a0 cb 13 f0       	push   $0xf013cba0
f012d953:	68 27 10 00 00       	push   $0x1027
f012d958:	68 fa b8 13 f0       	push   $0xf013b8fa
f012d95d:	e8 a3 28 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012d962:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d968:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012d96e:	74 17                	je     f012d987 <test_krealloc+0x1593>
			panic(
f012d970:	83 ec 04             	sub    $0x4,%esp
f012d973:	68 84 ce 13 f0       	push   $0xf013ce84
f012d978:	68 2a 10 00 00       	push   $0x102a
f012d97d:	68 fa b8 13 f0       	push   $0xf013b8fa
f012d982:	e8 7e 28 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d987:	e8 0b f8 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012d98c:	89 c2                	mov    %eax,%edx
f012d98e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d991:	39 c2                	cmp    %eax,%edx
f012d993:	74 17                	je     f012d9ac <test_krealloc+0x15b8>
			panic(
f012d995:	83 ec 04             	sub    $0x4,%esp
f012d998:	68 f0 ce 13 f0       	push   $0xf013cef0
f012d99d:	68 2d 10 00 00       	push   $0x102d
f012d9a2:	68 fa b8 13 f0       	push   $0xf013b8fa
f012d9a7:	e8 59 28 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012d9ac:	e8 e6 f7 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012d9b1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012d9b4:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d9ba:	83 ec 08             	sub    $0x8,%esp
f012d9bd:	68 00 fc 0f 00       	push   $0xffc00
f012d9c2:	50                   	push   %eax
f012d9c3:	e8 83 a6 fd ff       	call   f010804b <krealloc>
f012d9c8:	83 c4 10             	add    $0x10,%esp
f012d9cb:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d9d1:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012d9d7:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d9dc:	77 17                	ja     f012d9f5 <test_krealloc+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d9de:	83 ec 04             	sub    $0x4,%esp
f012d9e1:	68 a0 cb 13 f0       	push   $0xf013cba0
f012d9e6:	68 33 10 00 00       	push   $0x1033
f012d9eb:	68 fa b8 13 f0       	push   $0xf013b8fa
f012d9f0:	e8 10 28 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012d9f5:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d9fb:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012da01:	74 17                	je     f012da1a <test_krealloc+0x1626>
			panic(
f012da03:	83 ec 04             	sub    $0x4,%esp
f012da06:	68 84 ce 13 f0       	push   $0xf013ce84
f012da0b:	68 36 10 00 00       	push   $0x1036
f012da10:	68 fa b8 13 f0       	push   $0xf013b8fa
f012da15:	e8 eb 27 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012da1a:	e8 78 f7 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012da1f:	89 c2                	mov    %eax,%edx
f012da21:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012da24:	39 c2                	cmp    %eax,%edx
f012da26:	74 17                	je     f012da3f <test_krealloc+0x164b>
			panic(
f012da28:	83 ec 04             	sub    $0x4,%esp
f012da2b:	68 f0 ce 13 f0       	push   $0xf013cef0
f012da30:	68 39 10 00 00       	push   $0x1039
f012da35:	68 fa b8 13 f0       	push   $0xf013b8fa
f012da3a:	e8 c6 27 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012da3f:	e8 53 f7 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012da44:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012da47:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012da4d:	83 ec 08             	sub    $0x8,%esp
f012da50:	68 00 fc 0f 00       	push   $0xffc00
f012da55:	50                   	push   %eax
f012da56:	e8 f0 a5 fd ff       	call   f010804b <krealloc>
f012da5b:	83 c4 10             	add    $0x10,%esp
f012da5e:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012da64:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012da6a:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012da6f:	77 17                	ja     f012da88 <test_krealloc+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012da71:	83 ec 04             	sub    $0x4,%esp
f012da74:	68 a0 cb 13 f0       	push   $0xf013cba0
f012da79:	68 3f 10 00 00       	push   $0x103f
f012da7e:	68 fa b8 13 f0       	push   $0xf013b8fa
f012da83:	e8 7d 27 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012da88:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012da8e:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012da94:	74 17                	je     f012daad <test_krealloc+0x16b9>
			panic(
f012da96:	83 ec 04             	sub    $0x4,%esp
f012da99:	68 84 ce 13 f0       	push   $0xf013ce84
f012da9e:	68 42 10 00 00       	push   $0x1042
f012daa3:	68 fa b8 13 f0       	push   $0xf013b8fa
f012daa8:	e8 58 27 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012daad:	e8 e5 f6 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012dab2:	89 c2                	mov    %eax,%edx
f012dab4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012dab7:	39 c2                	cmp    %eax,%edx
f012dab9:	74 17                	je     f012dad2 <test_krealloc+0x16de>
			panic(
f012dabb:	83 ec 04             	sub    $0x4,%esp
f012dabe:	68 f0 ce 13 f0       	push   $0xf013cef0
f012dac3:	68 45 10 00 00       	push   $0x1045
f012dac8:	68 fa b8 13 f0       	push   $0xf013b8fa
f012dacd:	e8 33 27 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012dad2:	e8 c0 f6 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012dad7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012dada:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012dae0:	83 ec 08             	sub    $0x8,%esp
f012dae3:	68 00 fc 0f 00       	push   $0xffc00
f012dae8:	50                   	push   %eax
f012dae9:	e8 5d a5 fd ff       	call   f010804b <krealloc>
f012daee:	83 c4 10             	add    $0x10,%esp
f012daf1:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012daf7:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012dafd:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012db02:	77 17                	ja     f012db1b <test_krealloc+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012db04:	83 ec 04             	sub    $0x4,%esp
f012db07:	68 a0 cb 13 f0       	push   $0xf013cba0
f012db0c:	68 4d 10 00 00       	push   $0x104d
f012db11:	68 fa b8 13 f0       	push   $0xf013b8fa
f012db16:	e8 ea 26 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[3])
f012db1b:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012db21:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012db27:	74 17                	je     f012db40 <test_krealloc+0x174c>
			panic(
f012db29:	83 ec 04             	sub    $0x4,%esp
f012db2c:	68 34 cf 13 f0       	push   $0xf013cf34
f012db31:	68 50 10 00 00       	push   $0x1050
f012db36:	68 fa b8 13 f0       	push   $0xf013b8fa
f012db3b:	e8 c5 26 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012db40:	e8 52 f6 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012db45:	89 c2                	mov    %eax,%edx
f012db47:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012db4a:	39 c2                	cmp    %eax,%edx
f012db4c:	74 17                	je     f012db65 <test_krealloc+0x1771>
			panic(
f012db4e:	83 ec 04             	sub    $0x4,%esp
f012db51:	68 f0 ce 13 f0       	push   $0xf013cef0
f012db56:	68 53 10 00 00       	push   $0x1053
f012db5b:	68 fa b8 13 f0       	push   $0xf013b8fa
f012db60:	e8 a0 26 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012db65:	83 ec 0c             	sub    $0xc,%esp
f012db68:	68 13 c1 13 f0       	push   $0xf013c113
f012db6d:	e8 9c 31 fd ff       	call   f0100d0e <cprintf>
f012db72:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012db75:	e8 1d f6 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012db7a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1],
f012db7d:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012db83:	83 ec 08             	sub    $0x8,%esp
f012db86:	68 00 18 10 00       	push   $0x101800
f012db8b:	50                   	push   %eax
f012db8c:	e8 ba a4 fd ff       	call   f010804b <krealloc>
f012db91:	83 c4 10             	add    $0x10,%esp
f012db94:	89 45 bc             	mov    %eax,-0x44(%ebp)
				(1 * Mega - kilo) + (7 * kilo));
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012db97:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012db9a:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012db9f:	77 17                	ja     f012dbb8 <test_krealloc+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dba1:	83 ec 04             	sub    $0x4,%esp
f012dba4:	68 a0 cb 13 f0       	push   $0xf013cba0
f012dba9:	68 5c 10 00 00       	push   $0x105c
f012dbae:	68 fa b8 13 f0       	push   $0xf013b8fa
f012dbb3:	e8 4d 26 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012dbb8:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012dbbe:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012dbc1:	74 17                	je     f012dbda <test_krealloc+0x17e6>
			panic(
f012dbc3:	83 ec 04             	sub    $0x4,%esp
f012dbc6:	68 94 cf 13 f0       	push   $0xf013cf94
f012dbcb:	68 5f 10 00 00       	push   $0x105f
f012dbd0:	68 fa b8 13 f0       	push   $0xf013b8fa
f012dbd5:	e8 2b 26 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012dbda:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dbdd:	e8 b5 f5 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012dbe2:	29 c3                	sub    %eax,%ebx
f012dbe4:	89 d8                	mov    %ebx,%eax
f012dbe6:	83 f8 02             	cmp    $0x2,%eax
f012dbe9:	74 17                	je     f012dc02 <test_krealloc+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012dbeb:	83 ec 04             	sub    $0x4,%esp
f012dbee:	68 10 d0 13 f0       	push   $0xf013d010
f012dbf3:	68 61 10 00 00       	push   $0x1061
f012dbf8:	68 fa b8 13 f0       	push   $0xf013b8fa
f012dbfd:	e8 03 26 fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012dc02:	e8 90 f5 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012dc07:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012dc0a:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012dc10:	83 ec 08             	sub    $0x8,%esp
f012dc13:	68 00 fc 3f 00       	push   $0x3ffc00
f012dc18:	50                   	push   %eax
f012dc19:	e8 2d a4 fd ff       	call   f010804b <krealloc>
f012dc1e:	83 c4 10             	add    $0x10,%esp
f012dc21:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012dc24:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dc27:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012dc2c:	77 17                	ja     f012dc45 <test_krealloc+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dc2e:	83 ec 04             	sub    $0x4,%esp
f012dc31:	68 a0 cb 13 f0       	push   $0xf013cba0
f012dc36:	68 67 10 00 00       	push   $0x1067
f012dc3b:	68 fa b8 13 f0       	push   $0xf013b8fa
f012dc40:	e8 c0 25 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012dc45:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012dc4b:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012dc4e:	74 17                	je     f012dc67 <test_krealloc+0x1873>
			panic(
f012dc50:	83 ec 04             	sub    $0x4,%esp
f012dc53:	68 94 cf 13 f0       	push   $0xf013cf94
f012dc58:	68 6a 10 00 00       	push   $0x106a
f012dc5d:	68 fa b8 13 f0       	push   $0xf013b8fa
f012dc62:	e8 9e 25 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012dc67:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dc6a:	e8 28 f5 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012dc6f:	29 c3                	sub    %eax,%ebx
f012dc71:	89 d8                	mov    %ebx,%eax
f012dc73:	3d 00 02 00 00       	cmp    $0x200,%eax
f012dc78:	74 17                	je     f012dc91 <test_krealloc+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012dc7a:	83 ec 04             	sub    $0x4,%esp
f012dc7d:	68 10 d0 13 f0       	push   $0xf013d010
f012dc82:	68 6d 10 00 00       	push   $0x106d
f012dc87:	68 fa b8 13 f0       	push   $0xf013b8fa
f012dc8c:	e8 74 25 fd ff       	call   f0100205 <_panic>


	}
	cprintf("\b\b\b60%");
f012dc91:	83 ec 0c             	sub    $0xc,%esp
f012dc94:	68 58 c1 13 f0       	push   $0xf013c158
f012dc99:	e8 70 30 fd ff       	call   f0100d0e <cprintf>
f012dc9e:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012dca1:	e8 f1 f4 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012dca6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012dca9:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012dcaf:	83 ec 08             	sub    $0x8,%esp
f012dcb2:	68 00 fc 9f 00       	push   $0x9ffc00
f012dcb7:	50                   	push   %eax
f012dcb8:	e8 8e a3 fd ff       	call   f010804b <krealloc>
f012dcbd:	83 c4 10             	add    $0x10,%esp
f012dcc0:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012dcc3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dcc6:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012dccb:	77 17                	ja     f012dce4 <test_krealloc+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dccd:	83 ec 04             	sub    $0x4,%esp
f012dcd0:	68 a0 cb 13 f0       	push   $0xf013cba0
f012dcd5:	68 78 10 00 00       	push   $0x1078
f012dcda:	68 fa b8 13 f0       	push   $0xf013b8fa
f012dcdf:	e8 21 25 fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (14 * Mega))
f012dce4:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012dceb:	10 00 00 
f012dcee:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012dcf4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012dcf9:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012dcff:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012dd05:	ba 00 00 00 00       	mov    $0x0,%edx
f012dd0a:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012dd10:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012dd16:	29 d0                	sub    %edx,%eax
f012dd18:	89 c1                	mov    %eax,%ecx
f012dd1a:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012dd21:	10 00 00 
f012dd24:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012dd29:	0f b6 d0             	movzbl %al,%edx
f012dd2c:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012dd32:	01 d0                	add    %edx,%eax
f012dd34:	48                   	dec    %eax
f012dd35:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012dd3b:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012dd41:	ba 00 00 00 00       	mov    $0x0,%edx
f012dd46:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012dd4c:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012dd52:	29 d0                	sub    %edx,%eax
f012dd54:	01 c1                	add    %eax,%ecx
f012dd56:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012dd5d:	10 00 00 
f012dd60:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012dd65:	0f b6 c0             	movzbl %al,%eax
f012dd68:	c1 e0 04             	shl    $0x4,%eax
f012dd6b:	89 c2                	mov    %eax,%edx
f012dd6d:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012dd73:	01 d0                	add    %edx,%eax
f012dd75:	48                   	dec    %eax
f012dd76:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012dd7c:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012dd82:	ba 00 00 00 00       	mov    $0x0,%edx
f012dd87:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012dd8d:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012dd93:	29 d0                	sub    %edx,%eax
f012dd95:	01 c8                	add    %ecx,%eax
f012dd97:	8d 90 00 40 e0 f6    	lea    -0x91fc000(%eax),%edx
f012dd9d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dda0:	39 c2                	cmp    %eax,%edx
f012dda2:	74 18                	je     f012ddbc <test_krealloc+0x19c8>
			panic(
f012dda4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dda7:	50                   	push   %eax
f012dda8:	68 44 d0 13 f0       	push   $0xf013d044
f012ddad:	68 7c 10 00 00       	push   $0x107c
f012ddb2:	68 fa b8 13 f0       	push   $0xf013b8fa
f012ddb7:	e8 49 24 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012ddbc:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012ddc2:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012ddc5:	75 17                	jne    f012ddde <test_krealloc+0x19ea>
			panic(
f012ddc7:	83 ec 04             	sub    $0x4,%esp
f012ddca:	68 88 d0 13 f0       	push   $0xf013d088
f012ddcf:	68 7f 10 00 00       	push   $0x107f
f012ddd4:	68 fa b8 13 f0       	push   $0xf013b8fa
f012ddd9:	e8 27 24 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012ddde:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dde1:	e8 b1 f3 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012dde6:	29 c3                	sub    %eax,%ebx
f012dde8:	89 d8                	mov    %ebx,%eax
f012ddea:	3d 00 06 00 00       	cmp    $0x600,%eax
f012ddef:	74 17                	je     f012de08 <test_krealloc+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012ddf1:	83 ec 04             	sub    $0x4,%esp
f012ddf4:	68 10 d0 13 f0       	push   $0xf013d010
f012ddf9:	68 82 10 00 00       	push   $0x1082
f012ddfe:	68 fa b8 13 f0       	push   $0xf013b8fa
f012de03:	e8 fd 23 fd ff       	call   f0100205 <_panic>

		ptr_allocations[4] = newAddress;
f012de08:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012de0b:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 6 MB
		freeFrames = sys_calculate_free_frames();
f012de11:	e8 81 f3 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012de16:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (6 * Mega - kilo));
f012de19:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012de1f:	83 ec 08             	sub    $0x8,%esp
f012de22:	68 00 fc 5f 00       	push   $0x5ffc00
f012de27:	50                   	push   %eax
f012de28:	e8 1e a2 fd ff       	call   f010804b <krealloc>
f012de2d:	83 c4 10             	add    $0x10,%esp
f012de30:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012de33:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012de36:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012de3b:	77 17                	ja     f012de54 <test_krealloc+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012de3d:	83 ec 04             	sub    $0x4,%esp
f012de40:	68 a0 cb 13 f0       	push   $0xf013cba0
f012de45:	68 8b 10 00 00       	push   $0x108b
f012de4a:	68 fa b8 13 f0       	push   $0xf013b8fa
f012de4f:	e8 b1 23 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[6])
f012de54:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012de5a:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012de5d:	74 17                	je     f012de76 <test_krealloc+0x1a82>
			panic(
f012de5f:	83 ec 04             	sub    $0x4,%esp
f012de62:	68 94 cf 13 f0       	push   $0xf013cf94
f012de67:	68 8e 10 00 00       	push   $0x108e
f012de6c:	68 fa b8 13 f0       	push   $0xf013b8fa
f012de71:	e8 8f 23 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 768)
f012de76:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012de79:	e8 19 f3 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012de7e:	29 c3                	sub    %eax,%ebx
f012de80:	89 d8                	mov    %ebx,%eax
f012de82:	3d 00 03 00 00       	cmp    $0x300,%eax
f012de87:	74 17                	je     f012dea0 <test_krealloc+0x1aac>
			panic("krealloc: pages in memory are not loaded correctly");
f012de89:	83 ec 04             	sub    $0x4,%esp
f012de8c:	68 10 d0 13 f0       	push   $0xf013d010
f012de91:	68 91 10 00 00       	push   $0x1091
f012de96:	68 fa b8 13 f0       	push   $0xf013b8fa
f012de9b:	e8 65 23 fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 3 MB (already reallocated to 6 MB) to 20 MB. It should return new VA

		freeFrames = sys_calculate_free_frames();
f012dea0:	e8 f2 f2 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012dea5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012dea8:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012deae:	83 ec 08             	sub    $0x8,%esp
f012deb1:	68 00 fc 3f 01       	push   $0x13ffc00
f012deb6:	50                   	push   %eax
f012deb7:	e8 8f a1 fd ff       	call   f010804b <krealloc>
f012debc:	83 c4 10             	add    $0x10,%esp
f012debf:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012dec2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dec5:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012deca:	77 17                	ja     f012dee3 <test_krealloc+0x1aef>
			panic("krealloc: Wrong start address for the allocated space... ");
f012decc:	83 ec 04             	sub    $0x4,%esp
f012decf:	68 a0 cb 13 f0       	push   $0xf013cba0
f012ded4:	68 98 10 00 00       	push   $0x1098
f012ded9:	68 fa b8 13 f0       	push   $0xf013b8fa
f012dede:	e8 22 23 fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f012dee3:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012dee9:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012deec:	75 17                	jne    f012df05 <test_krealloc+0x1b11>
			panic(
f012deee:	83 ec 04             	sub    $0x4,%esp
f012def1:	68 88 d0 13 f0       	push   $0xf013d088
f012def6:	68 9b 10 00 00       	push   $0x109b
f012defb:	68 fa b8 13 f0       	push   $0xf013b8fa
f012df00:	e8 00 23 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		if ((uint32) newAddress != ACTUAL_START + (24 * Mega))
f012df05:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012df0c:	10 00 00 
f012df0f:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012df15:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012df1a:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012df20:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012df26:	ba 00 00 00 00       	mov    $0x0,%edx
f012df2b:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012df31:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012df37:	29 d0                	sub    %edx,%eax
f012df39:	89 c1                	mov    %eax,%ecx
f012df3b:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012df42:	10 00 00 
f012df45:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012df4a:	0f b6 d0             	movzbl %al,%edx
f012df4d:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012df53:	01 d0                	add    %edx,%eax
f012df55:	48                   	dec    %eax
f012df56:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012df5c:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012df62:	ba 00 00 00 00       	mov    $0x0,%edx
f012df67:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012df6d:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012df73:	29 d0                	sub    %edx,%eax
f012df75:	01 c1                	add    %eax,%ecx
f012df77:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012df7e:	10 00 00 
f012df81:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012df86:	0f b6 c0             	movzbl %al,%eax
f012df89:	c1 e0 04             	shl    $0x4,%eax
f012df8c:	89 c2                	mov    %eax,%edx
f012df8e:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012df94:	01 d0                	add    %edx,%eax
f012df96:	48                   	dec    %eax
f012df97:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012df9d:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012dfa3:	ba 00 00 00 00       	mov    $0x0,%edx
f012dfa8:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012dfae:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012dfb4:	29 d0                	sub    %edx,%eax
f012dfb6:	01 c8                	add    %ecx,%eax
f012dfb8:	8d 90 00 40 80 f7    	lea    -0x87fc000(%eax),%edx
f012dfbe:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dfc1:	39 c2                	cmp    %eax,%edx
f012dfc3:	74 17                	je     f012dfdc <test_krealloc+0x1be8>
			panic("krealloc: Wrong start address for reallocated space");
f012dfc5:	83 ec 04             	sub    $0x4,%esp
f012dfc8:	68 0c d1 13 f0       	push   $0xf013d10c
f012dfcd:	68 9d 10 00 00       	push   $0x109d
f012dfd2:	68 fa b8 13 f0       	push   $0xf013b8fa
f012dfd7:	e8 29 22 fd ff       	call   f0100205 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 3584)
f012dfdc:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dfdf:	e8 b3 f1 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012dfe4:	29 c3                	sub    %eax,%ebx
f012dfe6:	89 d8                	mov    %ebx,%eax
f012dfe8:	3d 00 0e 00 00       	cmp    $0xe00,%eax
f012dfed:	74 17                	je     f012e006 <test_krealloc+0x1c12>
			panic("krealloc: pages in memory are not loaded correctly");
f012dfef:	83 ec 04             	sub    $0x4,%esp
f012dff2:	68 10 d0 13 f0       	push   $0xf013d010
f012dff7:	68 a0 10 00 00       	push   $0x10a0
f012dffc:	68 fa b8 13 f0       	push   $0xf013b8fa
f012e001:	e8 ff 21 fd ff       	call   f0100205 <_panic>

		ptr_allocations[6] = newAddress;
f012e006:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012e009:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012e00f:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e015:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012e01b:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012e022:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012e025:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012e02c:	eb 21                	jmp    f012e04f <test_krealloc+0x1c5b>
			sums[0] += ptr[i];
f012e02e:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012e034:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012e037:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e03d:	01 c8                	add    %ecx,%eax
f012e03f:	8a 00                	mov    (%eax),%al
f012e041:	0f be c0             	movsbl %al,%eax
f012e044:	01 d0                	add    %edx,%eax
f012e046:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012e04c:	ff 45 d8             	incl   -0x28(%ebp)
f012e04f:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e055:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012e058:	7d d4                	jge    f012e02e <test_krealloc+0x1c3a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012e05a:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012e060:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012e066:	42                   	inc    %edx
f012e067:	01 d2                	add    %edx,%edx
f012e069:	39 d0                	cmp    %edx,%eax
f012e06b:	74 17                	je     f012e084 <test_krealloc+0x1c90>
			panic("krealloc: invalid read after re-allocations");
f012e06d:	83 ec 04             	sub    $0x4,%esp
f012e070:	68 40 d1 13 f0       	push   $0xf013d140
f012e075:	68 ae 10 00 00       	push   $0x10ae
f012e07a:	68 fa b8 13 f0       	push   $0xf013b8fa
f012e07f:	e8 81 21 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012e084:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012e08a:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012e090:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012e097:	00 00 00 
		sums[1] = 0;
f012e09a:	c7 85 bc fd ff ff 00 	movl   $0x0,-0x244(%ebp)
f012e0a1:	00 00 00 
		sums[2] = 0;
f012e0a4:	c7 85 c0 fd ff ff 00 	movl   $0x0,-0x240(%ebp)
f012e0ab:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012e0ae:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012e0b5:	eb 70                	jmp    f012e127 <test_krealloc+0x1d33>
			sums[0] += structArr[i].a;
f012e0b7:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012e0bd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012e0c0:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012e0c7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e0cd:	01 c8                	add    %ecx,%eax
f012e0cf:	8a 00                	mov    (%eax),%al
f012e0d1:	0f be c0             	movsbl %al,%eax
f012e0d4:	01 d0                	add    %edx,%eax
f012e0d6:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
			sums[1] += structArr[i].b;
f012e0dc:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012e0e2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012e0e5:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012e0ec:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e0f2:	01 c8                	add    %ecx,%eax
f012e0f4:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e0f8:	98                   	cwtl   
f012e0f9:	01 d0                	add    %edx,%eax
f012e0fb:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
			sums[2] += structArr[i].c;
f012e101:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012e107:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012e10a:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012e111:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e117:	01 c8                	add    %ecx,%eax
f012e119:	8b 40 04             	mov    0x4(%eax),%eax
f012e11c:	01 d0                	add    %edx,%eax
f012e11e:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012e124:	ff 45 d8             	incl   -0x28(%ebp)
f012e127:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012e12d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012e130:	7d 85                	jge    f012e0b7 <test_krealloc+0x1cc3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012e132:	8b 8d b8 fd ff ff    	mov    -0x248(%ebp),%ecx
f012e138:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012e13e:	8d 50 01             	lea    0x1(%eax),%edx
f012e141:	89 d0                	mov    %edx,%eax
f012e143:	01 c0                	add    %eax,%eax
f012e145:	01 d0                	add    %edx,%eax
f012e147:	01 c0                	add    %eax,%eax
f012e149:	01 d0                	add    %edx,%eax
f012e14b:	39 c1                	cmp    %eax,%ecx
f012e14d:	75 3a                	jne    f012e189 <test_krealloc+0x1d95>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012e14f:	8b 8d bc fd ff ff    	mov    -0x244(%ebp),%ecx
f012e155:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012e15b:	8d 50 01             	lea    0x1(%eax),%edx
f012e15e:	89 d0                	mov    %edx,%eax
f012e160:	01 c0                	add    %eax,%eax
f012e162:	01 d0                	add    %edx,%eax
f012e164:	01 c0                	add    %eax,%eax
f012e166:	01 d0                	add    %edx,%eax
f012e168:	39 c1                	cmp    %eax,%ecx
f012e16a:	75 1d                	jne    f012e189 <test_krealloc+0x1d95>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012e16c:	8b 8d c0 fd ff ff    	mov    -0x240(%ebp),%ecx
f012e172:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012e178:	8d 50 01             	lea    0x1(%eax),%edx
f012e17b:	89 d0                	mov    %edx,%eax
f012e17d:	01 c0                	add    %eax,%eax
f012e17f:	01 d0                	add    %edx,%eax
f012e181:	01 c0                	add    %eax,%eax
f012e183:	01 d0                	add    %edx,%eax
f012e185:	39 c1                	cmp    %eax,%ecx
f012e187:	74 17                	je     f012e1a0 <test_krealloc+0x1dac>
			panic("krealloc: invalid read after re-allocations");
f012e189:	83 ec 04             	sub    $0x4,%esp
f012e18c:	68 40 d1 13 f0       	push   $0xf013d140
f012e191:	68 c0 10 00 00       	push   $0x10c0
f012e196:	68 fa b8 13 f0       	push   $0xf013b8fa
f012e19b:	e8 65 20 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012e1a0:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012e1a6:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012e1ac:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012e1b3:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012e1b6:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012e1bd:	eb 24                	jmp    f012e1e3 <test_krealloc+0x1def>
			sums[0] += shortArr[i];
f012e1bf:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012e1c5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012e1c8:	01 c0                	add    %eax,%eax
f012e1ca:	89 c1                	mov    %eax,%ecx
f012e1cc:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e1d2:	01 c8                	add    %ecx,%eax
f012e1d4:	66 8b 00             	mov    (%eax),%ax
f012e1d7:	98                   	cwtl   
f012e1d8:	01 d0                	add    %edx,%eax
f012e1da:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012e1e0:	ff 45 d8             	incl   -0x28(%ebp)
f012e1e3:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012e1e9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012e1ec:	7d d1                	jge    f012e1bf <test_krealloc+0x1dcb>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012e1ee:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012e1f4:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012e1fa:	8d 48 01             	lea    0x1(%eax),%ecx
f012e1fd:	89 c8                	mov    %ecx,%eax
f012e1ff:	c1 e0 02             	shl    $0x2,%eax
f012e202:	01 c8                	add    %ecx,%eax
f012e204:	39 c2                	cmp    %eax,%edx
f012e206:	74 17                	je     f012e21f <test_krealloc+0x1e2b>
			panic("krealloc: invalid read after re-allocations");
f012e208:	83 ec 04             	sub    $0x4,%esp
f012e20b:	68 40 d1 13 f0       	push   $0xf013d140
f012e210:	68 ca 10 00 00       	push   $0x10ca
f012e215:	68 fa b8 13 f0       	push   $0xf013b8fa
f012e21a:	e8 e6 1f fd ff       	call   f0100205 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012e21f:	e8 73 ef fd ff       	call   f010d197 <sys_calculate_free_frames>
f012e224:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e227:	e8 9c 5b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012e22c:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012e232:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012e238:	83 ec 08             	sub    $0x8,%esp
f012e23b:	6a 00                	push   $0x0
f012e23d:	50                   	push   %eax
f012e23e:	e8 08 9e fd ff       	call   f010804b <krealloc>
f012e243:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e246:	e8 7d 5b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012e24b:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e251:	74 17                	je     f012e26a <test_krealloc+0x1e76>
			panic(
f012e253:	83 ec 04             	sub    $0x4,%esp
f012e256:	68 14 b9 13 f0       	push   $0xf013b914
f012e25b:	68 d2 10 00 00       	push   $0x10d2
f012e260:	68 fa b8 13 f0       	push   $0xf013b8fa
f012e265:	e8 9b 1f fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012e26a:	e8 28 ef fd ff       	call   f010d197 <sys_calculate_free_frames>
f012e26f:	89 c2                	mov    %eax,%edx
f012e271:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e274:	29 c2                	sub    %eax,%edx
f012e276:	89 d0                	mov    %edx,%eax
f012e278:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012e27d:	74 17                	je     f012e296 <test_krealloc+0x1ea2>
			panic("krealloc: pages in memory are not freed correctly");
f012e27f:	83 ec 04             	sub    $0x4,%esp
f012e282:	68 d0 cd 13 f0       	push   $0xf013cdd0
f012e287:	68 d4 10 00 00       	push   $0x10d4
f012e28c:	68 fa b8 13 f0       	push   $0xf013b8fa
f012e291:	e8 6f 1f fd ff       	call   f0100205 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012e296:	e8 fc ee fd ff       	call   f010d197 <sys_calculate_free_frames>
f012e29b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e29e:	e8 25 5b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012e2a3:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012e2a9:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012e2af:	83 ec 0c             	sub    $0xc,%esp
f012e2b2:	50                   	push   %eax
f012e2b3:	e8 9e 9b fd ff       	call   f0107e56 <kfree>
f012e2b8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e2bb:	e8 08 5b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012e2c0:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e2c6:	74 17                	je     f012e2df <test_krealloc+0x1eeb>
			panic(
f012e2c8:	83 ec 04             	sub    $0x4,%esp
f012e2cb:	68 14 b9 13 f0       	push   $0xf013b914
f012e2d0:	68 dc 10 00 00       	push   $0x10dc
f012e2d5:	68 fa b8 13 f0       	push   $0xf013b8fa
f012e2da:	e8 26 1f fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012e2df:	e8 b3 ee fd ff       	call   f010d197 <sys_calculate_free_frames>
f012e2e4:	89 c2                	mov    %eax,%edx
f012e2e6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e2e9:	29 c2                	sub    %eax,%edx
f012e2eb:	89 d0                	mov    %edx,%eax
f012e2ed:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012e2f2:	74 17                	je     f012e30b <test_krealloc+0x1f17>
			panic("krealloc: pages in memory are not freed correctly");
f012e2f4:	83 ec 04             	sub    $0x4,%esp
f012e2f7:	68 d0 cd 13 f0       	push   $0xf013cdd0
f012e2fc:	68 de 10 00 00       	push   $0x10de
f012e301:	68 fa b8 13 f0       	push   $0xf013b8fa
f012e306:	e8 fa 1e fd ff       	call   f0100205 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012e30b:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012e312:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012e319:	eb 48                	jmp    f012e363 <test_krealloc+0x1f6f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012e31b:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012e31e:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f012e323:	83 ec 04             	sub    $0x4,%esp
f012e326:	8d 8d b0 fd ff ff    	lea    -0x250(%ebp),%ecx
f012e32c:	51                   	push   %ecx
f012e32d:	52                   	push   %edx
f012e32e:	50                   	push   %eax
f012e32f:	e8 7d 87 fd ff       	call   f0106ab1 <get_page_table>
f012e334:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012e337:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f012e33d:	85 c0                	test   %eax,%eax
f012e33f:	75 17                	jne    f012e358 <test_krealloc+0x1f64>
					panic(
f012e341:	83 ec 04             	sub    $0x4,%esp
f012e344:	68 fc c1 13 f0       	push   $0xf013c1fc
f012e349:	68 eb 10 00 00       	push   $0x10eb
f012e34e:	68 fa b8 13 f0       	push   $0xf013b8fa
f012e353:	e8 ad 1e fd ff       	call   f0100205 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012e358:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012e35f:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012e363:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012e367:	78 b2                	js     f012e31b <test_krealloc+0x1f27>
f012e369:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012e36d:	7f 09                	jg     f012e378 <test_krealloc+0x1f84>
f012e36f:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012e376:	76 a3                	jbe    f012e31b <test_krealloc+0x1f27>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012e378:	83 ec 0c             	sub    $0xc,%esp
f012e37b:	68 de ba 13 f0       	push   $0xf013bade
f012e380:	e8 89 29 fd ff       	call   f0100d0e <cprintf>
f012e385:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc completed successfully.\n");
f012e388:	83 ec 0c             	sub    $0xc,%esp
f012e38b:	68 6c d1 13 f0       	push   $0xf013d16c
f012e390:	e8 79 29 fd ff       	call   f0100d0e <cprintf>
f012e395:	83 c4 10             	add    $0x10,%esp
	return 0;
f012e398:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012e39d:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012e3a0:	5b                   	pop    %ebx
f012e3a1:	5f                   	pop    %edi
f012e3a2:	5d                   	pop    %ebp
f012e3a3:	c3                   	ret    

f012e3a4 <test_krealloc_BF>:


int test_krealloc_BF() {
f012e3a4:	55                   	push   %ebp
f012e3a5:	89 e5                	mov    %esp,%ebp
f012e3a7:	57                   	push   %edi
f012e3a8:	53                   	push   %ebx
f012e3a9:	81 ec 60 02 00 00    	sub    $0x260,%esp
	cprintf("==============================================\n");
f012e3af:	83 ec 0c             	sub    $0xc,%esp
f012e3b2:	68 3c b8 13 f0       	push   $0xf013b83c
f012e3b7:	e8 52 29 fd ff       	call   f0100d0e <cprintf>
f012e3bc:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012e3bf:	83 ec 0c             	sub    $0xc,%esp
f012e3c2:	68 6c b8 13 f0       	push   $0xf013b86c
f012e3c7:	e8 42 29 fd ff       	call   f0100d0e <cprintf>
f012e3cc:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012e3cf:	83 ec 0c             	sub    $0xc,%esp
f012e3d2:	68 3c b8 13 f0       	push   $0xf013b83c
f012e3d7:	e8 32 29 fd ff       	call   f0100d0e <cprintf>
f012e3dc:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012e3df:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012e3e3:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012e3e7:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012e3ed:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012e3f3:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012e3fa:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012e401:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f012e407:	b9 14 00 00 00       	mov    $0x14,%ecx
f012e40c:	b8 00 00 00 00       	mov    $0x0,%eax
f012e411:	89 d7                	mov    %edx,%edi
f012e413:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012e415:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012e41c:	8d 95 f0 fd ff ff    	lea    -0x210(%ebp),%edx
f012e422:	b9 14 00 00 00       	mov    $0x14,%ecx
f012e427:	b8 00 00 00 00       	mov    $0x0,%eax
f012e42c:	89 d7                	mov    %edx,%edi
f012e42e:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012e430:	8d 95 a0 fd ff ff    	lea    -0x260(%ebp),%edx
f012e436:	b9 14 00 00 00       	mov    $0x14,%ecx
f012e43b:	b8 00 00 00 00       	mov    $0x0,%eax
f012e440:	89 d7                	mov    %edx,%edi
f012e442:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e444:	e8 4e ed fd ff       	call   f010d197 <sys_calculate_free_frames>
f012e449:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012e44c:	83 ec 08             	sub    $0x8,%esp
f012e44f:	68 00 fc 0f 00       	push   $0xffc00
f012e454:	6a 00                	push   $0x0
f012e456:	e8 f0 9b fd ff       	call   f010804b <krealloc>
f012e45b:	83 c4 10             	add    $0x10,%esp
f012e45e:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012e464:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012e46a:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e46f:	77 17                	ja     f012e488 <test_krealloc_BF+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e471:	83 ec 04             	sub    $0x4,%esp
f012e474:	68 a0 cb 13 f0       	push   $0xf013cba0
f012e479:	68 1a 11 00 00       	push   $0x111a
f012e47e:	68 fa b8 13 f0       	push   $0xf013b8fa
f012e483:	e8 7d 1d fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012e488:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012e48e:	89 c1                	mov    %eax,%ecx
f012e490:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012e497:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012e49a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e49f:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012e4a2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012e4a5:	ba 00 00 00 00       	mov    $0x0,%edx
f012e4aa:	f7 75 b4             	divl   -0x4c(%ebp)
f012e4ad:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012e4b0:	29 d0                	sub    %edx,%eax
f012e4b2:	89 c3                	mov    %eax,%ebx
f012e4b4:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012e4bb:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012e4c0:	0f b6 d0             	movzbl %al,%edx
f012e4c3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012e4c6:	01 d0                	add    %edx,%eax
f012e4c8:	48                   	dec    %eax
f012e4c9:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012e4cc:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012e4cf:	ba 00 00 00 00       	mov    $0x0,%edx
f012e4d4:	f7 75 ac             	divl   -0x54(%ebp)
f012e4d7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012e4da:	29 d0                	sub    %edx,%eax
f012e4dc:	01 c3                	add    %eax,%ebx
f012e4de:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012e4e5:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012e4ea:	0f b6 c0             	movzbl %al,%eax
f012e4ed:	c1 e0 04             	shl    $0x4,%eax
f012e4f0:	89 c2                	mov    %eax,%edx
f012e4f2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012e4f5:	01 d0                	add    %edx,%eax
f012e4f7:	48                   	dec    %eax
f012e4f8:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012e4fb:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012e4fe:	ba 00 00 00 00       	mov    $0x0,%edx
f012e503:	f7 75 a4             	divl   -0x5c(%ebp)
f012e506:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012e509:	29 d0                	sub    %edx,%eax
f012e50b:	01 d8                	add    %ebx,%eax
f012e50d:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012e512:	39 c1                	cmp    %eax,%ecx
f012e514:	74 17                	je     f012e52d <test_krealloc_BF+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012e516:	83 ec 04             	sub    $0x4,%esp
f012e519:	68 dc cb 13 f0       	push   $0xf013cbdc
f012e51e:	68 1c 11 00 00       	push   $0x111c
f012e523:	68 fa b8 13 f0       	push   $0xf013b8fa
f012e528:	e8 d8 1c fd ff       	call   f0100205 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e52d:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e530:	e8 62 ec fd ff       	call   f010d197 <sys_calculate_free_frames>
f012e535:	29 c3                	sub    %eax,%ebx
f012e537:	89 d8                	mov    %ebx,%eax
f012e539:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e53e:	74 17                	je     f012e557 <test_krealloc_BF+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012e540:	83 ec 04             	sub    $0x4,%esp
f012e543:	68 0e cc 13 f0       	push   $0xf013cc0e
f012e548:	68 1f 11 00 00       	push   $0x111f
f012e54d:	68 fa b8 13 f0       	push   $0xf013b8fa
f012e552:	e8 ae 1c fd ff       	call   f0100205 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012e557:	c7 85 f0 fd ff ff ff 	movl   $0xffbff,-0x210(%ebp)
f012e55e:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e561:	e8 31 ec fd ff       	call   f010d197 <sys_calculate_free_frames>
f012e566:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012e569:	83 ec 08             	sub    $0x8,%esp
f012e56c:	68 00 fc 0f 00       	push   $0xffc00
f012e571:	6a 00                	push   $0x0
f012e573:	e8 d3 9a fd ff       	call   f010804b <krealloc>
f012e578:	83 c4 10             	add    $0x10,%esp
f012e57b:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012e581:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e587:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012e58c:	77 17                	ja     f012e5a5 <test_krealloc_BF+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e58e:	83 ec 04             	sub    $0x4,%esp
f012e591:	68 a0 cb 13 f0       	push   $0xf013cba0
f012e596:	68 27 11 00 00       	push   $0x1127
f012e59b:	68 fa b8 13 f0       	push   $0xf013b8fa
f012e5a0:	e8 60 1c fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012e5a5:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e5ab:	89 c1                	mov    %eax,%ecx
f012e5ad:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012e5b4:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012e5b7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e5bc:	89 45 98             	mov    %eax,-0x68(%ebp)
f012e5bf:	8b 45 98             	mov    -0x68(%ebp),%eax
f012e5c2:	ba 00 00 00 00       	mov    $0x0,%edx
f012e5c7:	f7 75 9c             	divl   -0x64(%ebp)
f012e5ca:	8b 45 98             	mov    -0x68(%ebp),%eax
f012e5cd:	29 d0                	sub    %edx,%eax
f012e5cf:	89 c3                	mov    %eax,%ebx
f012e5d1:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012e5d8:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012e5dd:	0f b6 d0             	movzbl %al,%edx
f012e5e0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012e5e3:	01 d0                	add    %edx,%eax
f012e5e5:	48                   	dec    %eax
f012e5e6:	89 45 90             	mov    %eax,-0x70(%ebp)
f012e5e9:	8b 45 90             	mov    -0x70(%ebp),%eax
f012e5ec:	ba 00 00 00 00       	mov    $0x0,%edx
f012e5f1:	f7 75 94             	divl   -0x6c(%ebp)
f012e5f4:	8b 45 90             	mov    -0x70(%ebp),%eax
f012e5f7:	29 d0                	sub    %edx,%eax
f012e5f9:	01 c3                	add    %eax,%ebx
f012e5fb:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012e602:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012e607:	0f b6 c0             	movzbl %al,%eax
f012e60a:	c1 e0 04             	shl    $0x4,%eax
f012e60d:	89 c2                	mov    %eax,%edx
f012e60f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012e612:	01 d0                	add    %edx,%eax
f012e614:	48                   	dec    %eax
f012e615:	89 45 88             	mov    %eax,-0x78(%ebp)
f012e618:	8b 45 88             	mov    -0x78(%ebp),%eax
f012e61b:	ba 00 00 00 00       	mov    $0x0,%edx
f012e620:	f7 75 8c             	divl   -0x74(%ebp)
f012e623:	8b 45 88             	mov    -0x78(%ebp),%eax
f012e626:	29 d0                	sub    %edx,%eax
f012e628:	01 d8                	add    %ebx,%eax
f012e62a:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012e62f:	39 c1                	cmp    %eax,%ecx
f012e631:	74 17                	je     f012e64a <test_krealloc_BF+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012e633:	83 ec 04             	sub    $0x4,%esp
f012e636:	68 dc cb 13 f0       	push   $0xf013cbdc
f012e63b:	68 29 11 00 00       	push   $0x1129
f012e640:	68 fa b8 13 f0       	push   $0xf013b8fa
f012e645:	e8 bb 1b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e64a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e64d:	e8 45 eb fd ff       	call   f010d197 <sys_calculate_free_frames>
f012e652:	29 c3                	sub    %eax,%ebx
f012e654:	89 d8                	mov    %ebx,%eax
f012e656:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e65b:	74 17                	je     f012e674 <test_krealloc_BF+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012e65d:	83 ec 04             	sub    $0x4,%esp
f012e660:	68 0e cc 13 f0       	push   $0xf013cc0e
f012e665:	68 2b 11 00 00       	push   $0x112b
f012e66a:	68 fa b8 13 f0       	push   $0xf013b8fa
f012e66f:	e8 91 1b fd ff       	call   f0100205 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012e674:	c7 85 f4 fd ff ff ff 	movl   $0xffbff,-0x20c(%ebp)
f012e67b:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e67e:	e8 14 eb fd ff       	call   f010d197 <sys_calculate_free_frames>
f012e683:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012e686:	83 ec 08             	sub    $0x8,%esp
f012e689:	68 00 fc 0f 00       	push   $0xffc00
f012e68e:	6a 00                	push   $0x0
f012e690:	e8 b6 99 fd ff       	call   f010804b <krealloc>
f012e695:	83 c4 10             	add    $0x10,%esp
f012e698:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012e69e:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e6a4:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012e6a9:	77 17                	ja     f012e6c2 <test_krealloc_BF+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e6ab:	83 ec 04             	sub    $0x4,%esp
f012e6ae:	68 a0 cb 13 f0       	push   $0xf013cba0
f012e6b3:	68 33 11 00 00       	push   $0x1133
f012e6b8:	68 fa b8 13 f0       	push   $0xf013b8fa
f012e6bd:	e8 43 1b fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012e6c2:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e6c8:	89 c1                	mov    %eax,%ecx
f012e6ca:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012e6d1:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012e6d4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e6d9:	89 45 80             	mov    %eax,-0x80(%ebp)
f012e6dc:	8b 45 80             	mov    -0x80(%ebp),%eax
f012e6df:	ba 00 00 00 00       	mov    $0x0,%edx
f012e6e4:	f7 75 84             	divl   -0x7c(%ebp)
f012e6e7:	8b 45 80             	mov    -0x80(%ebp),%eax
f012e6ea:	29 d0                	sub    %edx,%eax
f012e6ec:	89 c3                	mov    %eax,%ebx
f012e6ee:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012e6f5:	10 00 00 
f012e6f8:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012e6fd:	0f b6 d0             	movzbl %al,%edx
f012e700:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012e706:	01 d0                	add    %edx,%eax
f012e708:	48                   	dec    %eax
f012e709:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012e70f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012e715:	ba 00 00 00 00       	mov    $0x0,%edx
f012e71a:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012e720:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012e726:	29 d0                	sub    %edx,%eax
f012e728:	01 c3                	add    %eax,%ebx
f012e72a:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012e731:	10 00 00 
f012e734:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012e739:	0f b6 c0             	movzbl %al,%eax
f012e73c:	c1 e0 04             	shl    $0x4,%eax
f012e73f:	89 c2                	mov    %eax,%edx
f012e741:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012e747:	01 d0                	add    %edx,%eax
f012e749:	48                   	dec    %eax
f012e74a:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012e750:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012e756:	ba 00 00 00 00       	mov    $0x0,%edx
f012e75b:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012e761:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012e767:	29 d0                	sub    %edx,%eax
f012e769:	01 d8                	add    %ebx,%eax
f012e76b:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012e770:	39 c1                	cmp    %eax,%ecx
f012e772:	74 17                	je     f012e78b <test_krealloc_BF+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012e774:	83 ec 04             	sub    $0x4,%esp
f012e777:	68 dc cb 13 f0       	push   $0xf013cbdc
f012e77c:	68 35 11 00 00       	push   $0x1135
f012e781:	68 fa b8 13 f0       	push   $0xf013b8fa
f012e786:	e8 7a 1a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e78b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e78e:	e8 04 ea fd ff       	call   f010d197 <sys_calculate_free_frames>
f012e793:	29 c3                	sub    %eax,%ebx
f012e795:	89 d8                	mov    %ebx,%eax
f012e797:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e79c:	74 17                	je     f012e7b5 <test_krealloc_BF+0x411>
			panic("krealloc: Wrong allocation: ");
f012e79e:	83 ec 04             	sub    $0x4,%esp
f012e7a1:	68 0e cc 13 f0       	push   $0xf013cc0e
f012e7a6:	68 37 11 00 00       	push   $0x1137
f012e7ab:	68 fa b8 13 f0       	push   $0xf013b8fa
f012e7b0:	e8 50 1a fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012e7b5:	c7 85 f8 fd ff ff ff 	movl   $0x3feff,-0x208(%ebp)
f012e7bc:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e7bf:	e8 d3 e9 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012e7c4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012e7c7:	83 ec 08             	sub    $0x8,%esp
f012e7ca:	68 00 fc 0f 00       	push   $0xffc00
f012e7cf:	6a 00                	push   $0x0
f012e7d1:	e8 75 98 fd ff       	call   f010804b <krealloc>
f012e7d6:	83 c4 10             	add    $0x10,%esp
f012e7d9:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012e7df:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e7e5:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012e7ea:	77 17                	ja     f012e803 <test_krealloc_BF+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e7ec:	83 ec 04             	sub    $0x4,%esp
f012e7ef:	68 a0 cb 13 f0       	push   $0xf013cba0
f012e7f4:	68 3e 11 00 00       	push   $0x113e
f012e7f9:	68 fa b8 13 f0       	push   $0xf013b8fa
f012e7fe:	e8 02 1a fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012e803:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e809:	89 c1                	mov    %eax,%ecx
f012e80b:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012e812:	10 00 00 
f012e815:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012e81b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e820:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012e826:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012e82c:	ba 00 00 00 00       	mov    $0x0,%edx
f012e831:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012e837:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012e83d:	29 d0                	sub    %edx,%eax
f012e83f:	89 c3                	mov    %eax,%ebx
f012e841:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012e848:	10 00 00 
f012e84b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012e850:	0f b6 d0             	movzbl %al,%edx
f012e853:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012e859:	01 d0                	add    %edx,%eax
f012e85b:	48                   	dec    %eax
f012e85c:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012e862:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012e868:	ba 00 00 00 00       	mov    $0x0,%edx
f012e86d:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012e873:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012e879:	29 d0                	sub    %edx,%eax
f012e87b:	01 c3                	add    %eax,%ebx
f012e87d:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012e884:	10 00 00 
f012e887:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012e88c:	0f b6 c0             	movzbl %al,%eax
f012e88f:	c1 e0 04             	shl    $0x4,%eax
f012e892:	89 c2                	mov    %eax,%edx
f012e894:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012e89a:	01 d0                	add    %edx,%eax
f012e89c:	48                   	dec    %eax
f012e89d:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012e8a3:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012e8a9:	ba 00 00 00 00       	mov    $0x0,%edx
f012e8ae:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012e8b4:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012e8ba:	29 d0                	sub    %edx,%eax
f012e8bc:	01 d8                	add    %ebx,%eax
f012e8be:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012e8c3:	39 c1                	cmp    %eax,%ecx
f012e8c5:	74 17                	je     f012e8de <test_krealloc_BF+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012e8c7:	83 ec 04             	sub    $0x4,%esp
f012e8ca:	68 dc cb 13 f0       	push   $0xf013cbdc
f012e8cf:	68 40 11 00 00       	push   $0x1140
f012e8d4:	68 fa b8 13 f0       	push   $0xf013b8fa
f012e8d9:	e8 27 19 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e8de:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e8e1:	e8 b1 e8 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012e8e6:	29 c3                	sub    %eax,%ebx
f012e8e8:	89 d8                	mov    %ebx,%eax
f012e8ea:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e8ef:	74 17                	je     f012e908 <test_krealloc_BF+0x564>
			panic("krealloc: Wrong allocation: ");
f012e8f1:	83 ec 04             	sub    $0x4,%esp
f012e8f4:	68 0e cc 13 f0       	push   $0xf013cc0e
f012e8f9:	68 42 11 00 00       	push   $0x1142
f012e8fe:	68 fa b8 13 f0       	push   $0xf013b8fa
f012e903:	e8 fd 18 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012e908:	c7 85 fc fd ff ff ff 	movl   $0x3feff,-0x204(%ebp)
f012e90f:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012e912:	e8 80 e8 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012e917:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012e91a:	83 ec 08             	sub    $0x8,%esp
f012e91d:	68 00 fc 1f 00       	push   $0x1ffc00
f012e922:	6a 00                	push   $0x0
f012e924:	e8 22 97 fd ff       	call   f010804b <krealloc>
f012e929:	83 c4 10             	add    $0x10,%esp
f012e92c:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012e932:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e938:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012e93d:	77 17                	ja     f012e956 <test_krealloc_BF+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e93f:	83 ec 04             	sub    $0x4,%esp
f012e942:	68 a0 cb 13 f0       	push   $0xf013cba0
f012e947:	68 49 11 00 00       	push   $0x1149
f012e94c:	68 fa b8 13 f0       	push   $0xf013b8fa
f012e951:	e8 af 18 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012e956:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e95c:	89 c1                	mov    %eax,%ecx
f012e95e:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012e965:	10 00 00 
f012e968:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012e96e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e973:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012e979:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012e97f:	ba 00 00 00 00       	mov    $0x0,%edx
f012e984:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012e98a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012e990:	29 d0                	sub    %edx,%eax
f012e992:	89 c3                	mov    %eax,%ebx
f012e994:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012e99b:	10 00 00 
f012e99e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012e9a3:	0f b6 d0             	movzbl %al,%edx
f012e9a6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012e9ac:	01 d0                	add    %edx,%eax
f012e9ae:	48                   	dec    %eax
f012e9af:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012e9b5:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012e9bb:	ba 00 00 00 00       	mov    $0x0,%edx
f012e9c0:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012e9c6:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012e9cc:	29 d0                	sub    %edx,%eax
f012e9ce:	01 c3                	add    %eax,%ebx
f012e9d0:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012e9d7:	10 00 00 
f012e9da:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012e9df:	0f b6 c0             	movzbl %al,%eax
f012e9e2:	c1 e0 04             	shl    $0x4,%eax
f012e9e5:	89 c2                	mov    %eax,%edx
f012e9e7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012e9ed:	01 d0                	add    %edx,%eax
f012e9ef:	48                   	dec    %eax
f012e9f0:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012e9f6:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012e9fc:	ba 00 00 00 00       	mov    $0x0,%edx
f012ea01:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012ea07:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012ea0d:	29 d0                	sub    %edx,%eax
f012ea0f:	01 d8                	add    %ebx,%eax
f012ea11:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012ea16:	39 c1                	cmp    %eax,%ecx
f012ea18:	74 17                	je     f012ea31 <test_krealloc_BF+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012ea1a:	83 ec 04             	sub    $0x4,%esp
f012ea1d:	68 dc cb 13 f0       	push   $0xf013cbdc
f012ea22:	68 4b 11 00 00       	push   $0x114b
f012ea27:	68 fa b8 13 f0       	push   $0xf013b8fa
f012ea2c:	e8 d4 17 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012ea31:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ea34:	e8 5e e7 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012ea39:	29 c3                	sub    %eax,%ebx
f012ea3b:	89 d8                	mov    %ebx,%eax
f012ea3d:	3d 00 02 00 00       	cmp    $0x200,%eax
f012ea42:	74 17                	je     f012ea5b <test_krealloc_BF+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012ea44:	83 ec 04             	sub    $0x4,%esp
f012ea47:	68 0e cc 13 f0       	push   $0xf013cc0e
f012ea4c:	68 4d 11 00 00       	push   $0x114d
f012ea51:	68 fa b8 13 f0       	push   $0xf013b8fa
f012ea56:	e8 aa 17 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012ea5b:	c7 85 00 fe ff ff ff 	movl   $0xffdff,-0x200(%ebp)
f012ea62:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012ea65:	e8 2d e7 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012ea6a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012ea6d:	83 ec 08             	sub    $0x8,%esp
f012ea70:	68 00 fc 1f 00       	push   $0x1ffc00
f012ea75:	6a 00                	push   $0x0
f012ea77:	e8 cf 95 fd ff       	call   f010804b <krealloc>
f012ea7c:	83 c4 10             	add    $0x10,%esp
f012ea7f:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012ea85:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012ea8b:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012ea90:	77 17                	ja     f012eaa9 <test_krealloc_BF+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ea92:	83 ec 04             	sub    $0x4,%esp
f012ea95:	68 a0 cb 13 f0       	push   $0xf013cba0
f012ea9a:	68 54 11 00 00       	push   $0x1154
f012ea9f:	68 fa b8 13 f0       	push   $0xf013b8fa
f012eaa4:	e8 5c 17 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012eaa9:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012eaaf:	89 c1                	mov    %eax,%ecx
f012eab1:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012eab8:	10 00 00 
f012eabb:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012eac1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012eac6:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012eacc:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012ead2:	ba 00 00 00 00       	mov    $0x0,%edx
f012ead7:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012eadd:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012eae3:	29 d0                	sub    %edx,%eax
f012eae5:	89 c3                	mov    %eax,%ebx
f012eae7:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012eaee:	10 00 00 
f012eaf1:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012eaf6:	0f b6 d0             	movzbl %al,%edx
f012eaf9:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012eaff:	01 d0                	add    %edx,%eax
f012eb01:	48                   	dec    %eax
f012eb02:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012eb08:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012eb0e:	ba 00 00 00 00       	mov    $0x0,%edx
f012eb13:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012eb19:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012eb1f:	29 d0                	sub    %edx,%eax
f012eb21:	01 c3                	add    %eax,%ebx
f012eb23:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012eb2a:	10 00 00 
f012eb2d:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012eb32:	0f b6 c0             	movzbl %al,%eax
f012eb35:	c1 e0 04             	shl    $0x4,%eax
f012eb38:	89 c2                	mov    %eax,%edx
f012eb3a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012eb40:	01 d0                	add    %edx,%eax
f012eb42:	48                   	dec    %eax
f012eb43:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012eb49:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012eb4f:	ba 00 00 00 00       	mov    $0x0,%edx
f012eb54:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012eb5a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012eb60:	29 d0                	sub    %edx,%eax
f012eb62:	01 d8                	add    %ebx,%eax
f012eb64:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012eb69:	39 c1                	cmp    %eax,%ecx
f012eb6b:	74 17                	je     f012eb84 <test_krealloc_BF+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012eb6d:	83 ec 04             	sub    $0x4,%esp
f012eb70:	68 dc cb 13 f0       	push   $0xf013cbdc
f012eb75:	68 56 11 00 00       	push   $0x1156
f012eb7a:	68 fa b8 13 f0       	push   $0xf013b8fa
f012eb7f:	e8 81 16 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012eb84:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012eb87:	e8 0b e6 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012eb8c:	29 c3                	sub    %eax,%ebx
f012eb8e:	89 d8                	mov    %ebx,%eax
f012eb90:	3d 00 02 00 00       	cmp    $0x200,%eax
f012eb95:	74 17                	je     f012ebae <test_krealloc_BF+0x80a>
			panic("krealloc: Wrong allocation: ");
f012eb97:	83 ec 04             	sub    $0x4,%esp
f012eb9a:	68 0e cc 13 f0       	push   $0xf013cc0e
f012eb9f:	68 58 11 00 00       	push   $0x1158
f012eba4:	68 fa b8 13 f0       	push   $0xf013b8fa
f012eba9:	e8 57 16 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012ebae:	c7 85 04 fe ff ff ff 	movl   $0xffdff,-0x1fc(%ebp)
f012ebb5:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012ebb8:	e8 da e5 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012ebbd:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012ebc0:	83 ec 08             	sub    $0x8,%esp
f012ebc3:	68 00 fc 2f 00       	push   $0x2ffc00
f012ebc8:	6a 00                	push   $0x0
f012ebca:	e8 7c 94 fd ff       	call   f010804b <krealloc>
f012ebcf:	83 c4 10             	add    $0x10,%esp
f012ebd2:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012ebd8:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ebde:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012ebe3:	77 17                	ja     f012ebfc <test_krealloc_BF+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ebe5:	83 ec 04             	sub    $0x4,%esp
f012ebe8:	68 a0 cb 13 f0       	push   $0xf013cba0
f012ebed:	68 5f 11 00 00       	push   $0x115f
f012ebf2:	68 fa b8 13 f0       	push   $0xf013b8fa
f012ebf7:	e8 09 16 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012ebfc:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ec02:	89 c1                	mov    %eax,%ecx
f012ec04:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012ec0b:	10 00 00 
f012ec0e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012ec14:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ec19:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012ec1f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ec25:	ba 00 00 00 00       	mov    $0x0,%edx
f012ec2a:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012ec30:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ec36:	29 d0                	sub    %edx,%eax
f012ec38:	89 c3                	mov    %eax,%ebx
f012ec3a:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012ec41:	10 00 00 
f012ec44:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012ec49:	0f b6 d0             	movzbl %al,%edx
f012ec4c:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012ec52:	01 d0                	add    %edx,%eax
f012ec54:	48                   	dec    %eax
f012ec55:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012ec5b:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012ec61:	ba 00 00 00 00       	mov    $0x0,%edx
f012ec66:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012ec6c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012ec72:	29 d0                	sub    %edx,%eax
f012ec74:	01 c3                	add    %eax,%ebx
f012ec76:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012ec7d:	10 00 00 
f012ec80:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012ec85:	0f b6 c0             	movzbl %al,%eax
f012ec88:	c1 e0 04             	shl    $0x4,%eax
f012ec8b:	89 c2                	mov    %eax,%edx
f012ec8d:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012ec93:	01 d0                	add    %edx,%eax
f012ec95:	48                   	dec    %eax
f012ec96:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012ec9c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012eca2:	ba 00 00 00 00       	mov    $0x0,%edx
f012eca7:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012ecad:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012ecb3:	29 d0                	sub    %edx,%eax
f012ecb5:	01 d8                	add    %ebx,%eax
f012ecb7:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012ecbc:	39 c1                	cmp    %eax,%ecx
f012ecbe:	74 17                	je     f012ecd7 <test_krealloc_BF+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012ecc0:	83 ec 04             	sub    $0x4,%esp
f012ecc3:	68 dc cb 13 f0       	push   $0xf013cbdc
f012ecc8:	68 61 11 00 00       	push   $0x1161
f012eccd:	68 fa b8 13 f0       	push   $0xf013b8fa
f012ecd2:	e8 2e 15 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012ecd7:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ecda:	e8 b8 e4 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012ecdf:	29 c3                	sub    %eax,%ebx
f012ece1:	89 d8                	mov    %ebx,%eax
f012ece3:	3d 00 03 00 00       	cmp    $0x300,%eax
f012ece8:	74 17                	je     f012ed01 <test_krealloc_BF+0x95d>
			panic("Wrong allocation: ");
f012ecea:	83 ec 04             	sub    $0x4,%esp
f012eced:	68 44 bd 13 f0       	push   $0xf013bd44
f012ecf2:	68 63 11 00 00       	push   $0x1163
f012ecf7:	68 fa b8 13 f0       	push   $0xf013b8fa
f012ecfc:	e8 04 15 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012ed01:	c7 85 08 fe ff ff 7f 	movl   $0x5ff7f,-0x1f8(%ebp)
f012ed08:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012ed0b:	e8 87 e4 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012ed10:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012ed13:	83 ec 08             	sub    $0x8,%esp
f012ed16:	68 00 fc 2f 00       	push   $0x2ffc00
f012ed1b:	6a 00                	push   $0x0
f012ed1d:	e8 29 93 fd ff       	call   f010804b <krealloc>
f012ed22:	83 c4 10             	add    $0x10,%esp
f012ed25:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012ed2b:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ed31:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012ed36:	77 17                	ja     f012ed4f <test_krealloc_BF+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ed38:	83 ec 04             	sub    $0x4,%esp
f012ed3b:	68 a0 cb 13 f0       	push   $0xf013cba0
f012ed40:	68 6a 11 00 00       	push   $0x116a
f012ed45:	68 fa b8 13 f0       	push   $0xf013b8fa
f012ed4a:	e8 b6 14 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012ed4f:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ed55:	89 c1                	mov    %eax,%ecx
f012ed57:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012ed5e:	10 00 00 
f012ed61:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012ed67:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ed6c:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012ed72:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012ed78:	ba 00 00 00 00       	mov    $0x0,%edx
f012ed7d:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012ed83:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012ed89:	29 d0                	sub    %edx,%eax
f012ed8b:	89 c3                	mov    %eax,%ebx
f012ed8d:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012ed94:	10 00 00 
f012ed97:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012ed9c:	0f b6 d0             	movzbl %al,%edx
f012ed9f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012eda5:	01 d0                	add    %edx,%eax
f012eda7:	48                   	dec    %eax
f012eda8:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012edae:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012edb4:	ba 00 00 00 00       	mov    $0x0,%edx
f012edb9:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012edbf:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012edc5:	29 d0                	sub    %edx,%eax
f012edc7:	01 c3                	add    %eax,%ebx
f012edc9:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012edd0:	10 00 00 
f012edd3:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012edd8:	0f b6 c0             	movzbl %al,%eax
f012eddb:	c1 e0 04             	shl    $0x4,%eax
f012edde:	89 c2                	mov    %eax,%edx
f012ede0:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012ede6:	01 d0                	add    %edx,%eax
f012ede8:	48                   	dec    %eax
f012ede9:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012edef:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012edf5:	ba 00 00 00 00       	mov    $0x0,%edx
f012edfa:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012ee00:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012ee06:	29 d0                	sub    %edx,%eax
f012ee08:	01 d8                	add    %ebx,%eax
f012ee0a:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012ee0f:	39 c1                	cmp    %eax,%ecx
f012ee11:	74 17                	je     f012ee2a <test_krealloc_BF+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012ee13:	83 ec 04             	sub    $0x4,%esp
f012ee16:	68 dc cb 13 f0       	push   $0xf013cbdc
f012ee1b:	68 6c 11 00 00       	push   $0x116c
f012ee20:	68 fa b8 13 f0       	push   $0xf013b8fa
f012ee25:	e8 db 13 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012ee2a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ee2d:	e8 65 e3 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012ee32:	29 c3                	sub    %eax,%ebx
f012ee34:	89 d8                	mov    %ebx,%eax
f012ee36:	3d 00 03 00 00       	cmp    $0x300,%eax
f012ee3b:	74 17                	je     f012ee54 <test_krealloc_BF+0xab0>
			panic("krealloc: Wrong allocation: ");
f012ee3d:	83 ec 04             	sub    $0x4,%esp
f012ee40:	68 0e cc 13 f0       	push   $0xf013cc0e
f012ee45:	68 6e 11 00 00       	push   $0x116e
f012ee4a:	68 fa b8 13 f0       	push   $0xf013b8fa
f012ee4f:	e8 b1 13 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012ee54:	c7 85 0c fe ff ff 7f 	movl   $0x5ff7f,-0x1f4(%ebp)
f012ee5b:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012ee5e:	e8 34 e3 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012ee63:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012ee66:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012ee6d:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012ee70:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012ee76:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012ee7c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012ee82:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012ee85:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012ee87:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012ee8d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012ee93:	01 c2                	add    %eax,%edx
f012ee95:	8a 45 ce             	mov    -0x32(%ebp),%al
f012ee98:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012ee9a:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012eea0:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012eea6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012eead:	eb 11                	jmp    f012eec0 <test_krealloc_BF+0xb1c>
			ptr[i] = 2;
f012eeaf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012eeb2:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012eeb8:	01 d0                	add    %edx,%eax
f012eeba:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012eebd:	ff 45 f4             	incl   -0xc(%ebp)
f012eec0:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012eec6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012eec9:	7d e4                	jge    f012eeaf <test_krealloc_BF+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012eecb:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012eed1:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012eed7:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012eedd:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012eee3:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012eee9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012eef0:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012eef6:	01 d0                	add    %edx,%eax
f012eef8:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012eefe:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012ef04:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012ef0a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012ef11:	eb 1b                	jmp    f012ef2e <test_krealloc_BF+0xb8a>
			intArr[i] = 4;
f012ef13:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ef16:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ef1d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ef23:	01 d0                	add    %edx,%eax
f012ef25:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012ef2b:	ff 45 f0             	incl   -0x10(%ebp)
f012ef2e:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012ef34:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012ef37:	7d da                	jge    f012ef13 <test_krealloc_BF+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012ef39:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ef3f:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012ef45:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012ef4c:	eb 17                	jmp    f012ef65 <test_krealloc_BF+0xbc1>
			shortArr[i] = 5;
f012ef4e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012ef51:	01 c0                	add    %eax,%eax
f012ef53:	89 c2                	mov    %eax,%edx
f012ef55:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ef5b:	01 d0                	add    %edx,%eax
f012ef5d:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012ef62:	ff 45 ec             	incl   -0x14(%ebp)
f012ef65:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012ef6b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012ef6e:	7d de                	jge    f012ef4e <test_krealloc_BF+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012ef70:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012ef76:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012ef7c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ef82:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012ef87:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012ef8d:	01 c0                	add    %eax,%eax
f012ef8f:	89 c2                	mov    %eax,%edx
f012ef91:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ef97:	01 d0                	add    %edx,%eax
f012ef99:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012ef9e:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012efa4:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012efaa:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012efb1:	eb 49                	jmp    f012effc <test_krealloc_BF+0xc58>
			structArr[i].a = 7;
f012efb3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012efb6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012efbd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012efc3:	01 d0                	add    %edx,%eax
f012efc5:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012efc8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012efcb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012efd2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012efd8:	01 d0                	add    %edx,%eax
f012efda:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012efe0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012efe3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012efea:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012eff0:	01 d0                	add    %edx,%eax
f012eff2:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012eff9:	ff 45 e8             	incl   -0x18(%ebp)
f012effc:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f002:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012f005:	7d ac                	jge    f012efb3 <test_krealloc_BF+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012f007:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012f00d:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012f013:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f019:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012f01c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f022:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012f028:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f02e:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012f035:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f03b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f042:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f048:	01 d0                	add    %edx,%eax
f012f04a:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012f04d:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f053:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f05a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f060:	01 d0                	add    %edx,%eax
f012f062:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012f068:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f06e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f075:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f07b:	01 d0                	add    %edx,%eax
f012f07d:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012f084:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012f08a:	8a 00                	mov    (%eax),%al
f012f08c:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012f08f:	75 17                	jne    f012f0a8 <test_krealloc_BF+0xd04>
f012f091:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012f097:	89 c2                	mov    %eax,%edx
f012f099:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012f09f:	01 d0                	add    %edx,%eax
f012f0a1:	8a 00                	mov    (%eax),%al
f012f0a3:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012f0a6:	74 17                	je     f012f0bf <test_krealloc_BF+0xd1b>
			panic(
f012f0a8:	83 ec 04             	sub    $0x4,%esp
f012f0ab:	68 2c cc 13 f0       	push   $0xf013cc2c
f012f0b0:	68 b1 11 00 00       	push   $0x11b1
f012f0b5:	68 fa b8 13 f0       	push   $0xf013b8fa
f012f0ba:	e8 46 11 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012f0bf:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f0c5:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012f0cb:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012f0d1:	8a 00                	mov    (%eax),%al
f012f0d3:	3c 02                	cmp    $0x2,%al
f012f0d5:	75 16                	jne    f012f0ed <test_krealloc_BF+0xd49>
f012f0d7:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012f0dd:	89 c2                	mov    %eax,%edx
f012f0df:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012f0e5:	01 d0                	add    %edx,%eax
f012f0e7:	8a 00                	mov    (%eax),%al
f012f0e9:	3c 02                	cmp    $0x2,%al
f012f0eb:	74 20                	je     f012f10d <test_krealloc_BF+0xd69>
			panic(
f012f0ed:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012f0f3:	8a 00                	mov    (%eax),%al
f012f0f5:	0f be c0             	movsbl %al,%eax
f012f0f8:	50                   	push   %eax
f012f0f9:	68 6c cc 13 f0       	push   $0xf013cc6c
f012f0fe:	68 b7 11 00 00       	push   $0x11b7
f012f103:	68 fa b8 13 f0       	push   $0xf013b8fa
f012f108:	e8 f8 10 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012f10d:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012f113:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012f119:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f11f:	8b 00                	mov    (%eax),%eax
f012f121:	83 f8 03             	cmp    $0x3,%eax
f012f124:	75 1c                	jne    f012f142 <test_krealloc_BF+0xd9e>
f012f126:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012f12c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f133:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f139:	01 d0                	add    %edx,%eax
f012f13b:	8b 00                	mov    (%eax),%eax
f012f13d:	83 f8 03             	cmp    $0x3,%eax
f012f140:	74 17                	je     f012f159 <test_krealloc_BF+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012f142:	83 ec 04             	sub    $0x4,%esp
f012f145:	68 b8 cc 13 f0       	push   $0xf013ccb8
f012f14a:	68 bb 11 00 00       	push   $0x11bb
f012f14f:	68 fa b8 13 f0       	push   $0xf013b8fa
f012f154:	e8 ac 10 fd ff       	call   f0100205 <_panic>

		intArr = (int*) ptr_allocations[3];
f012f159:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012f15f:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012f165:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f16b:	8b 00                	mov    (%eax),%eax
f012f16d:	83 f8 04             	cmp    $0x4,%eax
f012f170:	75 1c                	jne    f012f18e <test_krealloc_BF+0xdea>
f012f172:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012f178:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f17f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f185:	01 d0                	add    %edx,%eax
f012f187:	8b 00                	mov    (%eax),%eax
f012f189:	83 f8 04             	cmp    $0x4,%eax
f012f18c:	74 17                	je     f012f1a5 <test_krealloc_BF+0xe01>
			panic(
f012f18e:	83 ec 04             	sub    $0x4,%esp
f012f191:	68 2c cc 13 f0       	push   $0xf013cc2c
f012f196:	68 c0 11 00 00       	push   $0x11c0
f012f19b:	68 fa b8 13 f0       	push   $0xf013b8fa
f012f1a0:	e8 60 10 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012f1a5:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f1ab:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012f1b1:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f1b7:	66 8b 00             	mov    (%eax),%ax
f012f1ba:	66 83 f8 05          	cmp    $0x5,%ax
f012f1be:	75 1b                	jne    f012f1db <test_krealloc_BF+0xe37>
f012f1c0:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f1c6:	01 c0                	add    %eax,%eax
f012f1c8:	89 c2                	mov    %eax,%edx
f012f1ca:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f1d0:	01 d0                	add    %edx,%eax
f012f1d2:	66 8b 00             	mov    (%eax),%ax
f012f1d5:	66 83 f8 05          	cmp    $0x5,%ax
f012f1d9:	74 17                	je     f012f1f2 <test_krealloc_BF+0xe4e>
			panic(
f012f1db:	83 ec 04             	sub    $0x4,%esp
f012f1de:	68 2c cc 13 f0       	push   $0xf013cc2c
f012f1e3:	68 c5 11 00 00       	push   $0x11c5
f012f1e8:	68 fa b8 13 f0       	push   $0xf013b8fa
f012f1ed:	e8 13 10 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012f1f2:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012f1f8:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012f1fe:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f204:	66 8b 00             	mov    (%eax),%ax
f012f207:	66 83 f8 06          	cmp    $0x6,%ax
f012f20b:	75 1b                	jne    f012f228 <test_krealloc_BF+0xe84>
f012f20d:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012f213:	01 c0                	add    %eax,%eax
f012f215:	89 c2                	mov    %eax,%edx
f012f217:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f21d:	01 d0                	add    %edx,%eax
f012f21f:	66 8b 00             	mov    (%eax),%ax
f012f222:	66 83 f8 06          	cmp    $0x6,%ax
f012f226:	74 17                	je     f012f23f <test_krealloc_BF+0xe9b>
			panic(
f012f228:	83 ec 04             	sub    $0x4,%esp
f012f22b:	68 2c cc 13 f0       	push   $0xf013cc2c
f012f230:	68 ca 11 00 00       	push   $0x11ca
f012f235:	68 fa b8 13 f0       	push   $0xf013b8fa
f012f23a:	e8 c6 0f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012f23f:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f245:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012f24b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f251:	8a 00                	mov    (%eax),%al
f012f253:	3c 07                	cmp    $0x7,%al
f012f255:	75 1b                	jne    f012f272 <test_krealloc_BF+0xece>
f012f257:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f25d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f264:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f26a:	01 d0                	add    %edx,%eax
f012f26c:	8a 00                	mov    (%eax),%al
f012f26e:	3c 07                	cmp    $0x7,%al
f012f270:	74 17                	je     f012f289 <test_krealloc_BF+0xee5>
			panic(
f012f272:	83 ec 04             	sub    $0x4,%esp
f012f275:	68 2c cc 13 f0       	push   $0xf013cc2c
f012f27a:	68 cf 11 00 00       	push   $0x11cf
f012f27f:	68 fa b8 13 f0       	push   $0xf013b8fa
f012f284:	e8 7c 0f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012f289:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f28f:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f293:	66 83 f8 07          	cmp    $0x7,%ax
f012f297:	75 1f                	jne    f012f2b8 <test_krealloc_BF+0xf14>
f012f299:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f29f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f2a6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f2ac:	01 d0                	add    %edx,%eax
f012f2ae:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f2b2:	66 83 f8 07          	cmp    $0x7,%ax
f012f2b6:	74 17                	je     f012f2cf <test_krealloc_BF+0xf2b>
			panic(
f012f2b8:	83 ec 04             	sub    $0x4,%esp
f012f2bb:	68 2c cc 13 f0       	push   $0xf013cc2c
f012f2c0:	68 d2 11 00 00       	push   $0x11d2
f012f2c5:	68 fa b8 13 f0       	push   $0xf013b8fa
f012f2ca:	e8 36 0f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012f2cf:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f2d5:	8b 40 04             	mov    0x4(%eax),%eax
f012f2d8:	83 f8 07             	cmp    $0x7,%eax
f012f2db:	75 1d                	jne    f012f2fa <test_krealloc_BF+0xf56>
f012f2dd:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f2e3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f2ea:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f2f0:	01 d0                	add    %edx,%eax
f012f2f2:	8b 40 04             	mov    0x4(%eax),%eax
f012f2f5:	83 f8 07             	cmp    $0x7,%eax
f012f2f8:	74 17                	je     f012f311 <test_krealloc_BF+0xf6d>
			panic(
f012f2fa:	83 ec 04             	sub    $0x4,%esp
f012f2fd:	68 2c cc 13 f0       	push   $0xf013cc2c
f012f302:	68 d5 11 00 00       	push   $0x11d5
f012f307:	68 fa b8 13 f0       	push   $0xf013b8fa
f012f30c:	e8 f4 0e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012f311:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012f317:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012f31d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f323:	8a 00                	mov    (%eax),%al
f012f325:	3c 08                	cmp    $0x8,%al
f012f327:	75 1b                	jne    f012f344 <test_krealloc_BF+0xfa0>
f012f329:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f32f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f336:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f33c:	01 d0                	add    %edx,%eax
f012f33e:	8a 00                	mov    (%eax),%al
f012f340:	3c 08                	cmp    $0x8,%al
f012f342:	74 17                	je     f012f35b <test_krealloc_BF+0xfb7>
			panic(
f012f344:	83 ec 04             	sub    $0x4,%esp
f012f347:	68 2c cc 13 f0       	push   $0xf013cc2c
f012f34c:	68 da 11 00 00       	push   $0x11da
f012f351:	68 fa b8 13 f0       	push   $0xf013b8fa
f012f356:	e8 aa 0e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012f35b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f361:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f365:	66 83 f8 08          	cmp    $0x8,%ax
f012f369:	75 1f                	jne    f012f38a <test_krealloc_BF+0xfe6>
f012f36b:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f371:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f378:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f37e:	01 d0                	add    %edx,%eax
f012f380:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f384:	66 83 f8 08          	cmp    $0x8,%ax
f012f388:	74 17                	je     f012f3a1 <test_krealloc_BF+0xffd>
			panic(
f012f38a:	83 ec 04             	sub    $0x4,%esp
f012f38d:	68 2c cc 13 f0       	push   $0xf013cc2c
f012f392:	68 dd 11 00 00       	push   $0x11dd
f012f397:	68 fa b8 13 f0       	push   $0xf013b8fa
f012f39c:	e8 64 0e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012f3a1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f3a7:	8b 40 04             	mov    0x4(%eax),%eax
f012f3aa:	83 f8 08             	cmp    $0x8,%eax
f012f3ad:	75 1d                	jne    f012f3cc <test_krealloc_BF+0x1028>
f012f3af:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f3b5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f3bc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f3c2:	01 d0                	add    %edx,%eax
f012f3c4:	8b 40 04             	mov    0x4(%eax),%eax
f012f3c7:	83 f8 08             	cmp    $0x8,%eax
f012f3ca:	74 17                	je     f012f3e3 <test_krealloc_BF+0x103f>
			panic(
f012f3cc:	83 ec 04             	sub    $0x4,%esp
f012f3cf:	68 2c cc 13 f0       	push   $0xf013cc2c
f012f3d4:	68 e0 11 00 00       	push   $0x11e0
f012f3d9:	68 fa b8 13 f0       	push   $0xf013b8fa
f012f3de:	e8 22 0e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012f3e3:	e8 af dd fd ff       	call   f010d197 <sys_calculate_free_frames>
f012f3e8:	89 c2                	mov    %eax,%edx
f012f3ea:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f3ed:	39 c2                	cmp    %eax,%edx
f012f3ef:	74 17                	je     f012f408 <test_krealloc_BF+0x1064>
			panic(
f012f3f1:	83 ec 04             	sub    $0x4,%esp
f012f3f4:	68 ec cc 13 f0       	push   $0xf013ccec
f012f3f9:	68 e4 11 00 00       	push   $0x11e4
f012f3fe:	68 fa b8 13 f0       	push   $0xf013b8fa
f012f403:	e8 fd 0d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012f408:	83 ec 0c             	sub    $0xc,%esp
f012f40b:	68 38 cd 13 f0       	push   $0xf013cd38
f012f410:	e8 f9 18 fd ff       	call   f0100d0e <cprintf>
f012f415:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012f418:	e8 7a dd fd ff       	call   f010d197 <sys_calculate_free_frames>
f012f41d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f420:	e8 a3 49 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f425:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012f42b:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012f431:	83 ec 08             	sub    $0x8,%esp
f012f434:	6a 00                	push   $0x0
f012f436:	50                   	push   %eax
f012f437:	e8 0f 8c fd ff       	call   f010804b <krealloc>
f012f43c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f43f:	e8 84 49 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f444:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f44a:	74 17                	je     f012f463 <test_krealloc_BF+0x10bf>
			panic(
f012f44c:	83 ec 04             	sub    $0x4,%esp
f012f44f:	68 5c cd 13 f0       	push   $0xf013cd5c
f012f454:	68 f1 11 00 00       	push   $0x11f1
f012f459:	68 fa b8 13 f0       	push   $0xf013b8fa
f012f45e:	e8 a2 0d fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012f463:	e8 2f dd fd ff       	call   f010d197 <sys_calculate_free_frames>
f012f468:	89 c2                	mov    %eax,%edx
f012f46a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f46d:	29 c2                	sub    %eax,%edx
f012f46f:	89 d0                	mov    %edx,%eax
f012f471:	3d 00 01 00 00       	cmp    $0x100,%eax
f012f476:	74 17                	je     f012f48f <test_krealloc_BF+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012f478:	83 ec 04             	sub    $0x4,%esp
f012f47b:	68 d0 cd 13 f0       	push   $0xf013cdd0
f012f480:	68 f3 11 00 00       	push   $0x11f3
f012f485:	68 fa b8 13 f0       	push   $0xf013b8fa
f012f48a:	e8 76 0d fd ff       	call   f0100205 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012f48f:	e8 03 dd fd ff       	call   f010d197 <sys_calculate_free_frames>
f012f494:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f497:	e8 2c 49 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f49c:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012f4a2:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012f4a8:	83 ec 08             	sub    $0x8,%esp
f012f4ab:	6a 00                	push   $0x0
f012f4ad:	50                   	push   %eax
f012f4ae:	e8 98 8b fd ff       	call   f010804b <krealloc>
f012f4b3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f4b6:	e8 0d 49 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f4bb:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f4c1:	74 17                	je     f012f4da <test_krealloc_BF+0x1136>
			panic(
f012f4c3:	83 ec 04             	sub    $0x4,%esp
f012f4c6:	68 5c cd 13 f0       	push   $0xf013cd5c
f012f4cb:	68 fc 11 00 00       	push   $0x11fc
f012f4d0:	68 fa b8 13 f0       	push   $0xf013b8fa
f012f4d5:	e8 2b 0d fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012f4da:	e8 b8 dc fd ff       	call   f010d197 <sys_calculate_free_frames>
f012f4df:	89 c2                	mov    %eax,%edx
f012f4e1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f4e4:	29 c2                	sub    %eax,%edx
f012f4e6:	89 d0                	mov    %edx,%eax
f012f4e8:	3d 00 01 00 00       	cmp    $0x100,%eax
f012f4ed:	74 17                	je     f012f506 <test_krealloc_BF+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012f4ef:	83 ec 04             	sub    $0x4,%esp
f012f4f2:	68 d0 cd 13 f0       	push   $0xf013cdd0
f012f4f7:	68 fe 11 00 00       	push   $0x11fe
f012f4fc:	68 fa b8 13 f0       	push   $0xf013b8fa
f012f501:	e8 ff 0c fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012f506:	e8 8c dc fd ff       	call   f010d197 <sys_calculate_free_frames>
f012f50b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f50e:	e8 b5 48 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f513:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012f519:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012f51f:	83 ec 08             	sub    $0x8,%esp
f012f522:	6a 00                	push   $0x0
f012f524:	50                   	push   %eax
f012f525:	e8 21 8b fd ff       	call   f010804b <krealloc>
f012f52a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f52d:	e8 96 48 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f532:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f538:	74 17                	je     f012f551 <test_krealloc_BF+0x11ad>
			panic(
f012f53a:	83 ec 04             	sub    $0x4,%esp
f012f53d:	68 14 b9 13 f0       	push   $0xf013b914
f012f542:	68 06 12 00 00       	push   $0x1206
f012f547:	68 fa b8 13 f0       	push   $0xf013b8fa
f012f54c:	e8 b4 0c fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012f551:	e8 41 dc fd ff       	call   f010d197 <sys_calculate_free_frames>
f012f556:	89 c2                	mov    %eax,%edx
f012f558:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f55b:	29 c2                	sub    %eax,%edx
f012f55d:	89 d0                	mov    %edx,%eax
f012f55f:	3d 00 02 00 00       	cmp    $0x200,%eax
f012f564:	74 17                	je     f012f57d <test_krealloc_BF+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012f566:	83 ec 04             	sub    $0x4,%esp
f012f569:	68 d0 cd 13 f0       	push   $0xf013cdd0
f012f56e:	68 08 12 00 00       	push   $0x1208
f012f573:	68 fa b8 13 f0       	push   $0xf013b8fa
f012f578:	e8 88 0c fd ff       	call   f0100205 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012f57d:	e8 15 dc fd ff       	call   f010d197 <sys_calculate_free_frames>
f012f582:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f585:	e8 3e 48 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f58a:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012f590:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012f596:	83 ec 08             	sub    $0x8,%esp
f012f599:	6a 00                	push   $0x0
f012f59b:	50                   	push   %eax
f012f59c:	e8 aa 8a fd ff       	call   f010804b <krealloc>
f012f5a1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f5a4:	e8 1f 48 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f5a9:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f5af:	74 17                	je     f012f5c8 <test_krealloc_BF+0x1224>
			panic(
f012f5b1:	83 ec 04             	sub    $0x4,%esp
f012f5b4:	68 5c cd 13 f0       	push   $0xf013cd5c
f012f5b9:	68 10 12 00 00       	push   $0x1210
f012f5be:	68 fa b8 13 f0       	push   $0xf013b8fa
f012f5c3:	e8 3d 0c fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012f5c8:	e8 ca db fd ff       	call   f010d197 <sys_calculate_free_frames>
f012f5cd:	89 c2                	mov    %eax,%edx
f012f5cf:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f5d2:	29 c2                	sub    %eax,%edx
f012f5d4:	89 d0                	mov    %edx,%eax
f012f5d6:	3d 00 03 00 00       	cmp    $0x300,%eax
f012f5db:	74 17                	je     f012f5f4 <test_krealloc_BF+0x1250>
			panic(
f012f5dd:	83 ec 04             	sub    $0x4,%esp
f012f5e0:	68 04 ce 13 f0       	push   $0xf013ce04
f012f5e5:	68 13 12 00 00       	push   $0x1213
f012f5ea:	68 fa b8 13 f0       	push   $0xf013b8fa
f012f5ef:	e8 11 0c fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012f5f4:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012f5fb:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012f602:	eb 48                	jmp    f012f64c <test_krealloc_BF+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012f604:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012f607:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f012f60c:	83 ec 04             	sub    $0x4,%esp
f012f60f:	8d 8d 9c fd ff ff    	lea    -0x264(%ebp),%ecx
f012f615:	51                   	push   %ecx
f012f616:	52                   	push   %edx
f012f617:	50                   	push   %eax
f012f618:	e8 94 74 fd ff       	call   f0106ab1 <get_page_table>
f012f61d:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012f620:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012f626:	85 c0                	test   %eax,%eax
f012f628:	75 17                	jne    f012f641 <test_krealloc_BF+0x129d>
					panic(
f012f62a:	83 ec 04             	sub    $0x4,%esp
f012f62d:	68 fc c1 13 f0       	push   $0xf013c1fc
f012f632:	68 1f 12 00 00       	push   $0x121f
f012f637:	68 fa b8 13 f0       	push   $0xf013b8fa
f012f63c:	e8 c4 0b fd ff       	call   f0100205 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012f641:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012f648:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012f64c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012f650:	78 b2                	js     f012f604 <test_krealloc_BF+0x1260>
f012f652:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012f656:	7f 09                	jg     f012f661 <test_krealloc_BF+0x12bd>
f012f658:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012f65f:	76 a3                	jbe    f012f604 <test_krealloc_BF+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012f661:	83 ec 0c             	sub    $0xc,%esp
f012f664:	68 43 ce 13 f0       	push   $0xf013ce43
f012f669:	e8 a0 16 fd ff       	call   f0100d0e <cprintf>
f012f66e:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012f671:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f677:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f67d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f684:	eb 21                	jmp    f012f6a7 <test_krealloc_BF+0x1303>
			sums[0] += ptr[i];
f012f686:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f68c:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012f68f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012f695:	01 c8                	add    %ecx,%eax
f012f697:	8a 00                	mov    (%eax),%al
f012f699:	0f be c0             	movsbl %al,%eax
f012f69c:	01 d0                	add    %edx,%eax
f012f69e:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f6a4:	ff 45 dc             	incl   -0x24(%ebp)
f012f6a7:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012f6ad:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f6b0:	7d d4                	jge    f012f686 <test_krealloc_BF+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012f6b2:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012f6b8:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012f6be:	42                   	inc    %edx
f012f6bf:	01 d2                	add    %edx,%edx
f012f6c1:	39 d0                	cmp    %edx,%eax
f012f6c3:	74 17                	je     f012f6dc <test_krealloc_BF+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012f6c5:	83 ec 04             	sub    $0x4,%esp
f012f6c8:	68 4c ce 13 f0       	push   $0xf013ce4c
f012f6cd:	68 31 12 00 00       	push   $0x1231
f012f6d2:	68 fa b8 13 f0       	push   $0xf013b8fa
f012f6d7:	e8 29 0b fd ff       	call   f0100205 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012f6dc:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012f6e2:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012f6e8:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f6ef:	eb 25                	jmp    f012f716 <test_krealloc_BF+0x1372>
			sums[1] += intArr[i];
f012f6f1:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012f6f7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f6fa:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012f701:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f707:	01 c8                	add    %ecx,%eax
f012f709:	8b 00                	mov    (%eax),%eax
f012f70b:	01 d0                	add    %edx,%eax
f012f70d:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012f713:	ff 45 dc             	incl   -0x24(%ebp)
f012f716:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012f71c:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f71f:	7d d0                	jge    f012f6f1 <test_krealloc_BF+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012f721:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012f727:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012f72d:	42                   	inc    %edx
f012f72e:	c1 e2 02             	shl    $0x2,%edx
f012f731:	39 d0                	cmp    %edx,%eax
f012f733:	74 17                	je     f012f74c <test_krealloc_BF+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012f735:	83 ec 04             	sub    $0x4,%esp
f012f738:	68 4c ce 13 f0       	push   $0xf013ce4c
f012f73d:	68 3b 12 00 00       	push   $0x123b
f012f742:	68 fa b8 13 f0       	push   $0xf013b8fa
f012f747:	e8 b9 0a fd ff       	call   f0100205 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012f74c:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f752:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012f758:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f75f:	eb 24                	jmp    f012f785 <test_krealloc_BF+0x13e1>
			sums[2] += shortArr[i];
f012f761:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012f767:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f76a:	01 c0                	add    %eax,%eax
f012f76c:	89 c1                	mov    %eax,%ecx
f012f76e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f774:	01 c8                	add    %ecx,%eax
f012f776:	66 8b 00             	mov    (%eax),%ax
f012f779:	98                   	cwtl   
f012f77a:	01 d0                	add    %edx,%eax
f012f77c:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012f782:	ff 45 dc             	incl   -0x24(%ebp)
f012f785:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f78b:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f78e:	7d d1                	jge    f012f761 <test_krealloc_BF+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012f790:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012f796:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f79c:	8d 48 01             	lea    0x1(%eax),%ecx
f012f79f:	89 c8                	mov    %ecx,%eax
f012f7a1:	c1 e0 02             	shl    $0x2,%eax
f012f7a4:	01 c8                	add    %ecx,%eax
f012f7a6:	39 c2                	cmp    %eax,%edx
f012f7a8:	74 17                	je     f012f7c1 <test_krealloc_BF+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012f7aa:	83 ec 04             	sub    $0x4,%esp
f012f7ad:	68 4c ce 13 f0       	push   $0xf013ce4c
f012f7b2:	68 45 12 00 00       	push   $0x1245
f012f7b7:	68 fa b8 13 f0       	push   $0xf013b8fa
f012f7bc:	e8 44 0a fd ff       	call   f0100205 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012f7c1:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f7c7:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012f7cd:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f7d4:	eb 70                	jmp    f012f846 <test_krealloc_BF+0x14a2>
			sums[3] += structArr[i].a;
f012f7d6:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f012f7dc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f7df:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f7e6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f7ec:	01 c8                	add    %ecx,%eax
f012f7ee:	8a 00                	mov    (%eax),%al
f012f7f0:	0f be c0             	movsbl %al,%eax
f012f7f3:	01 d0                	add    %edx,%eax
f012f7f5:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
			sums[4] += structArr[i].b;
f012f7fb:	8b 95 b0 fd ff ff    	mov    -0x250(%ebp),%edx
f012f801:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f804:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f80b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f811:	01 c8                	add    %ecx,%eax
f012f813:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f817:	98                   	cwtl   
f012f818:	01 d0                	add    %edx,%eax
f012f81a:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
			sums[5] += structArr[i].c;
f012f820:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f012f826:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f829:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f830:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f836:	01 c8                	add    %ecx,%eax
f012f838:	8b 40 04             	mov    0x4(%eax),%eax
f012f83b:	01 d0                	add    %edx,%eax
f012f83d:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012f843:	ff 45 dc             	incl   -0x24(%ebp)
f012f846:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f84c:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f84f:	7d 85                	jge    f012f7d6 <test_krealloc_BF+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012f851:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f012f857:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f85d:	8d 50 01             	lea    0x1(%eax),%edx
f012f860:	89 d0                	mov    %edx,%eax
f012f862:	01 c0                	add    %eax,%eax
f012f864:	01 d0                	add    %edx,%eax
f012f866:	01 c0                	add    %eax,%eax
f012f868:	01 d0                	add    %edx,%eax
f012f86a:	39 c1                	cmp    %eax,%ecx
f012f86c:	75 3a                	jne    f012f8a8 <test_krealloc_BF+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012f86e:	8b 8d b0 fd ff ff    	mov    -0x250(%ebp),%ecx
f012f874:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f87a:	8d 50 01             	lea    0x1(%eax),%edx
f012f87d:	89 d0                	mov    %edx,%eax
f012f87f:	01 c0                	add    %eax,%eax
f012f881:	01 d0                	add    %edx,%eax
f012f883:	01 c0                	add    %eax,%eax
f012f885:	01 d0                	add    %edx,%eax
f012f887:	39 c1                	cmp    %eax,%ecx
f012f889:	75 1d                	jne    f012f8a8 <test_krealloc_BF+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012f88b:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f012f891:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f897:	8d 50 01             	lea    0x1(%eax),%edx
f012f89a:	89 d0                	mov    %edx,%eax
f012f89c:	01 c0                	add    %eax,%eax
f012f89e:	01 d0                	add    %edx,%eax
f012f8a0:	01 c0                	add    %eax,%eax
f012f8a2:	01 d0                	add    %edx,%eax
f012f8a4:	39 c1                	cmp    %eax,%ecx
f012f8a6:	74 17                	je     f012f8bf <test_krealloc_BF+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012f8a8:	83 ec 04             	sub    $0x4,%esp
f012f8ab:	68 4c ce 13 f0       	push   $0xf013ce4c
f012f8b0:	68 53 12 00 00       	push   $0x1253
f012f8b5:	68 fa b8 13 f0       	push   $0xf013b8fa
f012f8ba:	e8 46 09 fd ff       	call   f0100205 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012f8bf:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012f8c6:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012f8c9:	e8 c9 d8 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012f8ce:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012f8d1:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f8d7:	83 ec 08             	sub    $0x8,%esp
f012f8da:	68 00 3c 00 00       	push   $0x3c00
f012f8df:	50                   	push   %eax
f012f8e0:	e8 66 87 fd ff       	call   f010804b <krealloc>
f012f8e5:	83 c4 10             	add    $0x10,%esp
f012f8e8:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f8ee:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012f8f4:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f8f9:	77 17                	ja     f012f912 <test_krealloc_BF+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f8fb:	83 ec 04             	sub    $0x4,%esp
f012f8fe:	68 a0 cb 13 f0       	push   $0xf013cba0
f012f903:	68 5f 12 00 00       	push   $0x125f
f012f908:	68 fa b8 13 f0       	push   $0xf013b8fa
f012f90d:	e8 f3 08 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012f912:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f918:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012f91e:	74 17                	je     f012f937 <test_krealloc_BF+0x1593>
			panic(
f012f920:	83 ec 04             	sub    $0x4,%esp
f012f923:	68 84 ce 13 f0       	push   $0xf013ce84
f012f928:	68 62 12 00 00       	push   $0x1262
f012f92d:	68 fa b8 13 f0       	push   $0xf013b8fa
f012f932:	e8 ce 08 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012f937:	e8 5b d8 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012f93c:	89 c2                	mov    %eax,%edx
f012f93e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f941:	39 c2                	cmp    %eax,%edx
f012f943:	74 17                	je     f012f95c <test_krealloc_BF+0x15b8>
			panic(
f012f945:	83 ec 04             	sub    $0x4,%esp
f012f948:	68 f0 ce 13 f0       	push   $0xf013cef0
f012f94d:	68 65 12 00 00       	push   $0x1265
f012f952:	68 fa b8 13 f0       	push   $0xf013b8fa
f012f957:	e8 a9 08 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012f95c:	e8 36 d8 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012f961:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012f964:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f96a:	83 ec 08             	sub    $0x8,%esp
f012f96d:	68 00 fc 0f 00       	push   $0xffc00
f012f972:	50                   	push   %eax
f012f973:	e8 d3 86 fd ff       	call   f010804b <krealloc>
f012f978:	83 c4 10             	add    $0x10,%esp
f012f97b:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f981:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012f987:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f98c:	77 17                	ja     f012f9a5 <test_krealloc_BF+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f98e:	83 ec 04             	sub    $0x4,%esp
f012f991:	68 a0 cb 13 f0       	push   $0xf013cba0
f012f996:	68 6b 12 00 00       	push   $0x126b
f012f99b:	68 fa b8 13 f0       	push   $0xf013b8fa
f012f9a0:	e8 60 08 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012f9a5:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f9ab:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012f9b1:	74 17                	je     f012f9ca <test_krealloc_BF+0x1626>
			panic(
f012f9b3:	83 ec 04             	sub    $0x4,%esp
f012f9b6:	68 84 ce 13 f0       	push   $0xf013ce84
f012f9bb:	68 6e 12 00 00       	push   $0x126e
f012f9c0:	68 fa b8 13 f0       	push   $0xf013b8fa
f012f9c5:	e8 3b 08 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012f9ca:	e8 c8 d7 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012f9cf:	89 c2                	mov    %eax,%edx
f012f9d1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f9d4:	39 c2                	cmp    %eax,%edx
f012f9d6:	74 17                	je     f012f9ef <test_krealloc_BF+0x164b>
			panic(
f012f9d8:	83 ec 04             	sub    $0x4,%esp
f012f9db:	68 f0 ce 13 f0       	push   $0xf013cef0
f012f9e0:	68 71 12 00 00       	push   $0x1271
f012f9e5:	68 fa b8 13 f0       	push   $0xf013b8fa
f012f9ea:	e8 16 08 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012f9ef:	e8 a3 d7 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012f9f4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012f9f7:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f9fd:	83 ec 08             	sub    $0x8,%esp
f012fa00:	68 00 fc 0f 00       	push   $0xffc00
f012fa05:	50                   	push   %eax
f012fa06:	e8 40 86 fd ff       	call   f010804b <krealloc>
f012fa0b:	83 c4 10             	add    $0x10,%esp
f012fa0e:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fa14:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012fa1a:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fa1f:	77 17                	ja     f012fa38 <test_krealloc_BF+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fa21:	83 ec 04             	sub    $0x4,%esp
f012fa24:	68 a0 cb 13 f0       	push   $0xf013cba0
f012fa29:	68 77 12 00 00       	push   $0x1277
f012fa2e:	68 fa b8 13 f0       	push   $0xf013b8fa
f012fa33:	e8 cd 07 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012fa38:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012fa3e:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012fa44:	74 17                	je     f012fa5d <test_krealloc_BF+0x16b9>
			panic(
f012fa46:	83 ec 04             	sub    $0x4,%esp
f012fa49:	68 84 ce 13 f0       	push   $0xf013ce84
f012fa4e:	68 7a 12 00 00       	push   $0x127a
f012fa53:	68 fa b8 13 f0       	push   $0xf013b8fa
f012fa58:	e8 a8 07 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012fa5d:	e8 35 d7 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012fa62:	89 c2                	mov    %eax,%edx
f012fa64:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012fa67:	39 c2                	cmp    %eax,%edx
f012fa69:	74 17                	je     f012fa82 <test_krealloc_BF+0x16de>
			panic(
f012fa6b:	83 ec 04             	sub    $0x4,%esp
f012fa6e:	68 f0 ce 13 f0       	push   $0xf013cef0
f012fa73:	68 7d 12 00 00       	push   $0x127d
f012fa78:	68 fa b8 13 f0       	push   $0xf013b8fa
f012fa7d:	e8 83 07 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012fa82:	e8 10 d7 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012fa87:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012fa8a:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012fa90:	83 ec 08             	sub    $0x8,%esp
f012fa93:	68 00 fc 0f 00       	push   $0xffc00
f012fa98:	50                   	push   %eax
f012fa99:	e8 ad 85 fd ff       	call   f010804b <krealloc>
f012fa9e:	83 c4 10             	add    $0x10,%esp
f012faa1:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012faa7:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012faad:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fab2:	77 17                	ja     f012facb <test_krealloc_BF+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fab4:	83 ec 04             	sub    $0x4,%esp
f012fab7:	68 a0 cb 13 f0       	push   $0xf013cba0
f012fabc:	68 85 12 00 00       	push   $0x1285
f012fac1:	68 fa b8 13 f0       	push   $0xf013b8fa
f012fac6:	e8 3a 07 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[3])
f012facb:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012fad1:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012fad7:	74 17                	je     f012faf0 <test_krealloc_BF+0x174c>
			panic(
f012fad9:	83 ec 04             	sub    $0x4,%esp
f012fadc:	68 34 cf 13 f0       	push   $0xf013cf34
f012fae1:	68 88 12 00 00       	push   $0x1288
f012fae6:	68 fa b8 13 f0       	push   $0xf013b8fa
f012faeb:	e8 15 07 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012faf0:	e8 a2 d6 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012faf5:	89 c2                	mov    %eax,%edx
f012faf7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012fafa:	39 c2                	cmp    %eax,%edx
f012fafc:	74 17                	je     f012fb15 <test_krealloc_BF+0x1771>
			panic(
f012fafe:	83 ec 04             	sub    $0x4,%esp
f012fb01:	68 f0 ce 13 f0       	push   $0xf013cef0
f012fb06:	68 8b 12 00 00       	push   $0x128b
f012fb0b:	68 fa b8 13 f0       	push   $0xf013b8fa
f012fb10:	e8 f0 06 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012fb15:	83 ec 0c             	sub    $0xc,%esp
f012fb18:	68 13 c1 13 f0       	push   $0xf013c113
f012fb1d:	e8 ec 11 fd ff       	call   f0100d0e <cprintf>
f012fb22:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012fb25:	e8 6d d6 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012fb2a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], (1 * Mega - kilo) + (7 * kilo));
f012fb2d:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012fb33:	83 ec 08             	sub    $0x8,%esp
f012fb36:	68 00 18 10 00       	push   $0x101800
f012fb3b:	50                   	push   %eax
f012fb3c:	e8 0a 85 fd ff       	call   f010804b <krealloc>
f012fb41:	83 c4 10             	add    $0x10,%esp
f012fb44:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fb47:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fb4a:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fb4f:	77 17                	ja     f012fb68 <test_krealloc_BF+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fb51:	83 ec 04             	sub    $0x4,%esp
f012fb54:	68 a0 cb 13 f0       	push   $0xf013cba0
f012fb59:	68 93 12 00 00       	push   $0x1293
f012fb5e:	68 fa b8 13 f0       	push   $0xf013b8fa
f012fb63:	e8 9d 06 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012fb68:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012fb6e:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012fb71:	74 17                	je     f012fb8a <test_krealloc_BF+0x17e6>
			panic(
f012fb73:	83 ec 04             	sub    $0x4,%esp
f012fb76:	68 94 cf 13 f0       	push   $0xf013cf94
f012fb7b:	68 96 12 00 00       	push   $0x1296
f012fb80:	68 fa b8 13 f0       	push   $0xf013b8fa
f012fb85:	e8 7b 06 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012fb8a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012fb8d:	e8 05 d6 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012fb92:	29 c3                	sub    %eax,%ebx
f012fb94:	89 d8                	mov    %ebx,%eax
f012fb96:	83 f8 02             	cmp    $0x2,%eax
f012fb99:	74 17                	je     f012fbb2 <test_krealloc_BF+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012fb9b:	83 ec 04             	sub    $0x4,%esp
f012fb9e:	68 10 d0 13 f0       	push   $0xf013d010
f012fba3:	68 98 12 00 00       	push   $0x1298
f012fba8:	68 fa b8 13 f0       	push   $0xf013b8fa
f012fbad:	e8 53 06 fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012fbb2:	e8 e0 d5 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012fbb7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012fbba:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fbc0:	83 ec 08             	sub    $0x8,%esp
f012fbc3:	68 00 fc 3f 00       	push   $0x3ffc00
f012fbc8:	50                   	push   %eax
f012fbc9:	e8 7d 84 fd ff       	call   f010804b <krealloc>
f012fbce:	83 c4 10             	add    $0x10,%esp
f012fbd1:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fbd4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fbd7:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fbdc:	77 17                	ja     f012fbf5 <test_krealloc_BF+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fbde:	83 ec 04             	sub    $0x4,%esp
f012fbe1:	68 a0 cb 13 f0       	push   $0xf013cba0
f012fbe6:	68 9e 12 00 00       	push   $0x129e
f012fbeb:	68 fa b8 13 f0       	push   $0xf013b8fa
f012fbf0:	e8 10 06 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012fbf5:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fbfb:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012fbfe:	74 17                	je     f012fc17 <test_krealloc_BF+0x1873>
			panic(
f012fc00:	83 ec 04             	sub    $0x4,%esp
f012fc03:	68 94 cf 13 f0       	push   $0xf013cf94
f012fc08:	68 a1 12 00 00       	push   $0x12a1
f012fc0d:	68 fa b8 13 f0       	push   $0xf013b8fa
f012fc12:	e8 ee 05 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012fc17:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012fc1a:	e8 78 d5 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012fc1f:	29 c3                	sub    %eax,%ebx
f012fc21:	89 d8                	mov    %ebx,%eax
f012fc23:	3d 00 02 00 00       	cmp    $0x200,%eax
f012fc28:	74 17                	je     f012fc41 <test_krealloc_BF+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012fc2a:	83 ec 04             	sub    $0x4,%esp
f012fc2d:	68 10 d0 13 f0       	push   $0xf013d010
f012fc32:	68 a4 12 00 00       	push   $0x12a4
f012fc37:	68 fa b8 13 f0       	push   $0xf013b8fa
f012fc3c:	e8 c4 05 fd ff       	call   f0100205 <_panic>


	}
	cprintf("\b\b\b60%");
f012fc41:	83 ec 0c             	sub    $0xc,%esp
f012fc44:	68 58 c1 13 f0       	push   $0xf013c158
f012fc49:	e8 c0 10 fd ff       	call   f0100d0e <cprintf>
f012fc4e:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012fc51:	e8 41 d5 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012fc56:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012fc59:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fc5f:	83 ec 08             	sub    $0x8,%esp
f012fc62:	68 00 fc 9f 00       	push   $0x9ffc00
f012fc67:	50                   	push   %eax
f012fc68:	e8 de 83 fd ff       	call   f010804b <krealloc>
f012fc6d:	83 c4 10             	add    $0x10,%esp
f012fc70:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fc73:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fc76:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fc7b:	77 17                	ja     f012fc94 <test_krealloc_BF+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fc7d:	83 ec 04             	sub    $0x4,%esp
f012fc80:	68 a0 cb 13 f0       	push   $0xf013cba0
f012fc85:	68 af 12 00 00       	push   $0x12af
f012fc8a:	68 fa b8 13 f0       	push   $0xf013b8fa
f012fc8f:	e8 71 05 fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (11 * Mega))
f012fc94:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012fc9b:	10 00 00 
f012fc9e:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012fca4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012fca9:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012fcaf:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012fcb5:	ba 00 00 00 00       	mov    $0x0,%edx
f012fcba:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012fcc0:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012fcc6:	29 d0                	sub    %edx,%eax
f012fcc8:	89 c1                	mov    %eax,%ecx
f012fcca:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012fcd1:	10 00 00 
f012fcd4:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012fcd9:	0f b6 d0             	movzbl %al,%edx
f012fcdc:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012fce2:	01 d0                	add    %edx,%eax
f012fce4:	48                   	dec    %eax
f012fce5:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012fceb:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012fcf1:	ba 00 00 00 00       	mov    $0x0,%edx
f012fcf6:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012fcfc:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012fd02:	29 d0                	sub    %edx,%eax
f012fd04:	01 c1                	add    %eax,%ecx
f012fd06:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012fd0d:	10 00 00 
f012fd10:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012fd15:	0f b6 c0             	movzbl %al,%eax
f012fd18:	c1 e0 04             	shl    $0x4,%eax
f012fd1b:	89 c2                	mov    %eax,%edx
f012fd1d:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012fd23:	01 d0                	add    %edx,%eax
f012fd25:	48                   	dec    %eax
f012fd26:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012fd2c:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012fd32:	ba 00 00 00 00       	mov    $0x0,%edx
f012fd37:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012fd3d:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012fd43:	29 d0                	sub    %edx,%eax
f012fd45:	01 c8                	add    %ecx,%eax
f012fd47:	8d 90 00 40 b0 f6    	lea    -0x94fc000(%eax),%edx
f012fd4d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fd50:	39 c2                	cmp    %eax,%edx
f012fd52:	74 18                	je     f012fd6c <test_krealloc_BF+0x19c8>
			panic(
f012fd54:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fd57:	50                   	push   %eax
f012fd58:	68 44 d0 13 f0       	push   $0xf013d044
f012fd5d:	68 b3 12 00 00       	push   $0x12b3
f012fd62:	68 fa b8 13 f0       	push   $0xf013b8fa
f012fd67:	e8 99 04 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012fd6c:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fd72:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012fd75:	75 17                	jne    f012fd8e <test_krealloc_BF+0x19ea>
			panic(
f012fd77:	83 ec 04             	sub    $0x4,%esp
f012fd7a:	68 88 d0 13 f0       	push   $0xf013d088
f012fd7f:	68 b6 12 00 00       	push   $0x12b6
f012fd84:	68 fa b8 13 f0       	push   $0xf013b8fa
f012fd89:	e8 77 04 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012fd8e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012fd91:	e8 01 d4 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012fd96:	29 c3                	sub    %eax,%ebx
f012fd98:	89 d8                	mov    %ebx,%eax
f012fd9a:	3d 00 06 00 00       	cmp    $0x600,%eax
f012fd9f:	74 17                	je     f012fdb8 <test_krealloc_BF+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012fda1:	83 ec 04             	sub    $0x4,%esp
f012fda4:	68 10 d0 13 f0       	push   $0xf013d010
f012fda9:	68 b9 12 00 00       	push   $0x12b9
f012fdae:	68 fa b8 13 f0       	push   $0xf013b8fa
f012fdb3:	e8 4d 04 fd ff       	call   f0100205 <_panic>

		ptr_allocations[4] = newAddress;
f012fdb8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fdbb:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 4 MB
		freeFrames = sys_calculate_free_frames();
f012fdc1:	e8 d1 d3 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012fdc6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (4 * Mega - kilo));
f012fdc9:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012fdcf:	83 ec 08             	sub    $0x8,%esp
f012fdd2:	68 00 fc 3f 00       	push   $0x3ffc00
f012fdd7:	50                   	push   %eax
f012fdd8:	e8 6e 82 fd ff       	call   f010804b <krealloc>
f012fddd:	83 c4 10             	add    $0x10,%esp
f012fde0:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fde3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fde6:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fdeb:	77 17                	ja     f012fe04 <test_krealloc_BF+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fded:	83 ec 04             	sub    $0x4,%esp
f012fdf0:	68 a0 cb 13 f0       	push   $0xf013cba0
f012fdf5:	68 c2 12 00 00       	push   $0x12c2
f012fdfa:	68 fa b8 13 f0       	push   $0xf013b8fa
f012fdff:	e8 01 04 fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f012fe04:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012fe0a:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012fe0d:	75 17                	jne    f012fe26 <test_krealloc_BF+0x1a82>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012fe0f:	83 ec 04             	sub    $0x4,%esp
f012fe12:	68 88 d0 13 f0       	push   $0xf013d088
f012fe17:	68 c4 12 00 00       	push   $0x12c4
f012fe1c:	68 fa b8 13 f0       	push   $0xf013b8fa
f012fe21:	e8 df 03 fd ff       	call   f0100205 <_panic>
		if ((uint32)newAddress != ACTUAL_START + 4 * Mega) panic("krealloc: Wrong start address for allocated space");
f012fe26:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012fe2d:	10 00 00 
f012fe30:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012fe36:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012fe3b:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012fe41:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012fe47:	ba 00 00 00 00       	mov    $0x0,%edx
f012fe4c:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012fe52:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012fe58:	29 d0                	sub    %edx,%eax
f012fe5a:	89 c1                	mov    %eax,%ecx
f012fe5c:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012fe63:	10 00 00 
f012fe66:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012fe6b:	0f b6 d0             	movzbl %al,%edx
f012fe6e:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012fe74:	01 d0                	add    %edx,%eax
f012fe76:	48                   	dec    %eax
f012fe77:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012fe7d:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012fe83:	ba 00 00 00 00       	mov    $0x0,%edx
f012fe88:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012fe8e:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012fe94:	29 d0                	sub    %edx,%eax
f012fe96:	01 c1                	add    %eax,%ecx
f012fe98:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012fe9f:	10 00 00 
f012fea2:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012fea7:	0f b6 c0             	movzbl %al,%eax
f012feaa:	c1 e0 04             	shl    $0x4,%eax
f012fead:	89 c2                	mov    %eax,%edx
f012feaf:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012feb5:	01 d0                	add    %edx,%eax
f012feb7:	48                   	dec    %eax
f012feb8:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012febe:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012fec4:	ba 00 00 00 00       	mov    $0x0,%edx
f012fec9:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012fecf:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012fed5:	29 d0                	sub    %edx,%eax
f012fed7:	01 c8                	add    %ecx,%eax
f012fed9:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f012fedf:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fee2:	39 c2                	cmp    %eax,%edx
f012fee4:	74 17                	je     f012fefd <test_krealloc_BF+0x1b59>
f012fee6:	83 ec 04             	sub    $0x4,%esp
f012fee9:	68 dc cb 13 f0       	push   $0xf013cbdc
f012feee:	68 c5 12 00 00       	push   $0x12c5
f012fef3:	68 fa b8 13 f0       	push   $0xf013b8fa
f012fef8:	e8 08 03 fd ff       	call   f0100205 <_panic>

		//1 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 256)
f012fefd:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ff00:	e8 92 d2 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012ff05:	29 c3                	sub    %eax,%ebx
f012ff07:	89 d8                	mov    %ebx,%eax
f012ff09:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ff0e:	74 17                	je     f012ff27 <test_krealloc_BF+0x1b83>
			panic("krealloc: pages in memory are not loaded correctly");
f012ff10:	83 ec 04             	sub    $0x4,%esp
f012ff13:	68 10 d0 13 f0       	push   $0xf013d010
f012ff18:	68 c9 12 00 00       	push   $0x12c9
f012ff1d:	68 fa b8 13 f0       	push   $0xf013b8fa
f012ff22:	e8 de 02 fd ff       	call   f0100205 <_panic>
		ptr_allocations[6] = newAddress;
f012ff27:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ff2a:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		//Reallocate 1st 3 MB (already reallocated to 4 MB) to 20 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012ff30:	e8 62 d2 fd ff       	call   f010d197 <sys_calculate_free_frames>
f012ff35:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012ff38:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ff3e:	83 ec 08             	sub    $0x8,%esp
f012ff41:	68 00 fc 3f 01       	push   $0x13ffc00
f012ff46:	50                   	push   %eax
f012ff47:	e8 ff 80 fd ff       	call   f010804b <krealloc>
f012ff4c:	83 c4 10             	add    $0x10,%esp
f012ff4f:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ff52:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ff55:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ff5a:	77 17                	ja     f012ff73 <test_krealloc_BF+0x1bcf>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ff5c:	83 ec 04             	sub    $0x4,%esp
f012ff5f:	68 a0 cb 13 f0       	push   $0xf013cba0
f012ff64:	68 cf 12 00 00       	push   $0x12cf
f012ff69:	68 fa b8 13 f0       	push   $0xf013b8fa
f012ff6e:	e8 92 02 fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f012ff73:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ff79:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012ff7c:	75 17                	jne    f012ff95 <test_krealloc_BF+0x1bf1>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012ff7e:	83 ec 04             	sub    $0x4,%esp
f012ff81:	68 88 d0 13 f0       	push   $0xf013d088
f012ff86:	68 d1 12 00 00       	push   $0x12d1
f012ff8b:	68 fa b8 13 f0       	push   $0xf013b8fa
f012ff90:	e8 70 02 fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (21 * Mega))
f012ff95:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f012ff9c:	10 00 00 
f012ff9f:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012ffa5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ffaa:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f012ffb0:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012ffb6:	ba 00 00 00 00       	mov    $0x0,%edx
f012ffbb:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f012ffc1:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012ffc7:	29 d0                	sub    %edx,%eax
f012ffc9:	89 c1                	mov    %eax,%ecx
f012ffcb:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f012ffd2:	10 00 00 
f012ffd5:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012ffda:	0f b6 d0             	movzbl %al,%edx
f012ffdd:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012ffe3:	01 d0                	add    %edx,%eax
f012ffe5:	48                   	dec    %eax
f012ffe6:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f012ffec:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012fff2:	ba 00 00 00 00       	mov    $0x0,%edx
f012fff7:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f012fffd:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0130003:	29 d0                	sub    %edx,%eax
f0130005:	01 c1                	add    %eax,%ecx
f0130007:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f013000e:	10 00 00 
f0130011:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0130016:	0f b6 c0             	movzbl %al,%eax
f0130019:	c1 e0 04             	shl    $0x4,%eax
f013001c:	89 c2                	mov    %eax,%edx
f013001e:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0130024:	01 d0                	add    %edx,%eax
f0130026:	48                   	dec    %eax
f0130027:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f013002d:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0130033:	ba 00 00 00 00       	mov    $0x0,%edx
f0130038:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f013003e:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0130044:	29 d0                	sub    %edx,%eax
f0130046:	01 c8                	add    %ecx,%eax
f0130048:	8d 90 00 40 50 f7    	lea    -0x8afc000(%eax),%edx
f013004e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0130051:	39 c2                	cmp    %eax,%edx
f0130053:	74 17                	je     f013006c <test_krealloc_BF+0x1cc8>
			panic("krealloc: Wrong start address for reallocated space\n");
f0130055:	83 ec 04             	sub    $0x4,%esp
f0130058:	68 a8 d1 13 f0       	push   $0xf013d1a8
f013005d:	68 d3 12 00 00       	push   $0x12d3
f0130062:	68 fa b8 13 f0       	push   $0xf013b8fa
f0130067:	e8 99 01 fd ff       	call   f0100205 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != (16 * Mega) / PAGE_SIZE)
f013006c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f013006f:	e8 23 d1 fd ff       	call   f010d197 <sys_calculate_free_frames>
f0130074:	29 c3                	sub    %eax,%ebx
f0130076:	89 d8                	mov    %ebx,%eax
f0130078:	3d 00 10 00 00       	cmp    $0x1000,%eax
f013007d:	74 17                	je     f0130096 <test_krealloc_BF+0x1cf2>
			panic("krealloc: pages in memory are not loaded correctly");
f013007f:	83 ec 04             	sub    $0x4,%esp
f0130082:	68 10 d0 13 f0       	push   $0xf013d010
f0130087:	68 d6 12 00 00       	push   $0x12d6
f013008c:	68 fa b8 13 f0       	push   $0xf013b8fa
f0130091:	e8 6f 01 fd ff       	call   f0100205 <_panic>

		ptr_allocations[6] = newAddress;
f0130096:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0130099:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f013009f:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01300a5:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f01300ab:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f01300b2:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f01300b5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01300bc:	eb 21                	jmp    f01300df <test_krealloc_BF+0x1d3b>
			sums[0] += ptr[i];
f01300be:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f01300c4:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f01300c7:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01300cd:	01 c8                	add    %ecx,%eax
f01300cf:	8a 00                	mov    (%eax),%al
f01300d1:	0f be c0             	movsbl %al,%eax
f01300d4:	01 d0                	add    %edx,%eax
f01300d6:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f01300dc:	ff 45 d8             	incl   -0x28(%ebp)
f01300df:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01300e5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01300e8:	7d d4                	jge    f01300be <test_krealloc_BF+0x1d1a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f01300ea:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f01300f0:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f01300f6:	42                   	inc    %edx
f01300f7:	01 d2                	add    %edx,%edx
f01300f9:	39 d0                	cmp    %edx,%eax
f01300fb:	74 17                	je     f0130114 <test_krealloc_BF+0x1d70>
			panic("krealloc: invalid read after re-allocations");
f01300fd:	83 ec 04             	sub    $0x4,%esp
f0130100:	68 40 d1 13 f0       	push   $0xf013d140
f0130105:	68 e4 12 00 00       	push   $0x12e4
f013010a:	68 fa b8 13 f0       	push   $0xf013b8fa
f013010f:	e8 f1 00 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f0130114:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f013011a:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f0130120:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f0130127:	00 00 00 
		sums[1] = 0;
f013012a:	c7 85 a4 fd ff ff 00 	movl   $0x0,-0x25c(%ebp)
f0130131:	00 00 00 
		sums[2] = 0;
f0130134:	c7 85 a8 fd ff ff 00 	movl   $0x0,-0x258(%ebp)
f013013b:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f013013e:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0130145:	eb 70                	jmp    f01301b7 <test_krealloc_BF+0x1e13>
			sums[0] += structArr[i].a;
f0130147:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f013014d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0130150:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0130157:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f013015d:	01 c8                	add    %ecx,%eax
f013015f:	8a 00                	mov    (%eax),%al
f0130161:	0f be c0             	movsbl %al,%eax
f0130164:	01 d0                	add    %edx,%eax
f0130166:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
			sums[1] += structArr[i].b;
f013016c:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f0130172:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0130175:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f013017c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0130182:	01 c8                	add    %ecx,%eax
f0130184:	66 8b 40 02          	mov    0x2(%eax),%ax
f0130188:	98                   	cwtl   
f0130189:	01 d0                	add    %edx,%eax
f013018b:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
			sums[2] += structArr[i].c;
f0130191:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f0130197:	8b 45 d8             	mov    -0x28(%ebp),%eax
f013019a:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f01301a1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01301a7:	01 c8                	add    %ecx,%eax
f01301a9:	8b 40 04             	mov    0x4(%eax),%eax
f01301ac:	01 d0                	add    %edx,%eax
f01301ae:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f01301b4:	ff 45 d8             	incl   -0x28(%ebp)
f01301b7:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f01301bd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01301c0:	7d 85                	jge    f0130147 <test_krealloc_BF+0x1da3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f01301c2:	8b 8d a0 fd ff ff    	mov    -0x260(%ebp),%ecx
f01301c8:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f01301ce:	8d 50 01             	lea    0x1(%eax),%edx
f01301d1:	89 d0                	mov    %edx,%eax
f01301d3:	01 c0                	add    %eax,%eax
f01301d5:	01 d0                	add    %edx,%eax
f01301d7:	01 c0                	add    %eax,%eax
f01301d9:	01 d0                	add    %edx,%eax
f01301db:	39 c1                	cmp    %eax,%ecx
f01301dd:	75 3a                	jne    f0130219 <test_krealloc_BF+0x1e75>
				|| sums[1] != (lastIndices[6] + 1) * 7
f01301df:	8b 8d a4 fd ff ff    	mov    -0x25c(%ebp),%ecx
f01301e5:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f01301eb:	8d 50 01             	lea    0x1(%eax),%edx
f01301ee:	89 d0                	mov    %edx,%eax
f01301f0:	01 c0                	add    %eax,%eax
f01301f2:	01 d0                	add    %edx,%eax
f01301f4:	01 c0                	add    %eax,%eax
f01301f6:	01 d0                	add    %edx,%eax
f01301f8:	39 c1                	cmp    %eax,%ecx
f01301fa:	75 1d                	jne    f0130219 <test_krealloc_BF+0x1e75>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f01301fc:	8b 8d a8 fd ff ff    	mov    -0x258(%ebp),%ecx
f0130202:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0130208:	8d 50 01             	lea    0x1(%eax),%edx
f013020b:	89 d0                	mov    %edx,%eax
f013020d:	01 c0                	add    %eax,%eax
f013020f:	01 d0                	add    %edx,%eax
f0130211:	01 c0                	add    %eax,%eax
f0130213:	01 d0                	add    %edx,%eax
f0130215:	39 c1                	cmp    %eax,%ecx
f0130217:	74 17                	je     f0130230 <test_krealloc_BF+0x1e8c>
			panic("krealloc: invalid read after re-allocations");
f0130219:	83 ec 04             	sub    $0x4,%esp
f013021c:	68 40 d1 13 f0       	push   $0xf013d140
f0130221:	68 f6 12 00 00       	push   $0x12f6
f0130226:	68 fa b8 13 f0       	push   $0xf013b8fa
f013022b:	e8 d5 ff fc ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f0130230:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0130236:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f013023c:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f0130243:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f0130246:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f013024d:	eb 24                	jmp    f0130273 <test_krealloc_BF+0x1ecf>
			sums[0] += shortArr[i];
f013024f:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f0130255:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0130258:	01 c0                	add    %eax,%eax
f013025a:	89 c1                	mov    %eax,%ecx
f013025c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0130262:	01 c8                	add    %ecx,%eax
f0130264:	66 8b 00             	mov    (%eax),%ax
f0130267:	98                   	cwtl   
f0130268:	01 d0                	add    %edx,%eax
f013026a:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f0130270:	ff 45 d8             	incl   -0x28(%ebp)
f0130273:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f0130279:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f013027c:	7d d1                	jge    f013024f <test_krealloc_BF+0x1eab>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f013027e:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f0130284:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f013028a:	8d 48 01             	lea    0x1(%eax),%ecx
f013028d:	89 c8                	mov    %ecx,%eax
f013028f:	c1 e0 02             	shl    $0x2,%eax
f0130292:	01 c8                	add    %ecx,%eax
f0130294:	39 c2                	cmp    %eax,%edx
f0130296:	74 17                	je     f01302af <test_krealloc_BF+0x1f0b>
			panic("krealloc: invalid read after re-allocations");
f0130298:	83 ec 04             	sub    $0x4,%esp
f013029b:	68 40 d1 13 f0       	push   $0xf013d140
f01302a0:	68 00 13 00 00       	push   $0x1300
f01302a5:	68 fa b8 13 f0       	push   $0xf013b8fa
f01302aa:	e8 56 ff fc ff       	call   f0100205 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f01302af:	e8 e3 ce fd ff       	call   f010d197 <sys_calculate_free_frames>
f01302b4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f01302b7:	e8 0c 3b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01302bc:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f01302c2:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01302c8:	83 ec 08             	sub    $0x8,%esp
f01302cb:	6a 00                	push   $0x0
f01302cd:	50                   	push   %eax
f01302ce:	e8 78 7d fd ff       	call   f010804b <krealloc>
f01302d3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f01302d6:	e8 ed 3a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01302db:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f01302e1:	74 17                	je     f01302fa <test_krealloc_BF+0x1f56>
			panic(
f01302e3:	83 ec 04             	sub    $0x4,%esp
f01302e6:	68 14 b9 13 f0       	push   $0xf013b914
f01302eb:	68 08 13 00 00       	push   $0x1308
f01302f0:	68 fa b8 13 f0       	push   $0xf013b8fa
f01302f5:	e8 0b ff fc ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f01302fa:	e8 98 ce fd ff       	call   f010d197 <sys_calculate_free_frames>
f01302ff:	89 c2                	mov    %eax,%edx
f0130301:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0130304:	29 c2                	sub    %eax,%edx
f0130306:	89 d0                	mov    %edx,%eax
f0130308:	3d 00 14 00 00       	cmp    $0x1400,%eax
f013030d:	74 17                	je     f0130326 <test_krealloc_BF+0x1f82>
			panic("krealloc: pages in memory are not freed correctly");
f013030f:	83 ec 04             	sub    $0x4,%esp
f0130312:	68 d0 cd 13 f0       	push   $0xf013cdd0
f0130317:	68 0a 13 00 00       	push   $0x130a
f013031c:	68 fa b8 13 f0       	push   $0xf013b8fa
f0130321:	e8 df fe fc ff       	call   f0100205 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f0130326:	e8 6c ce fd ff       	call   f010d197 <sys_calculate_free_frames>
f013032b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f013032e:	e8 95 3a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0130333:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f0130339:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f013033f:	83 ec 0c             	sub    $0xc,%esp
f0130342:	50                   	push   %eax
f0130343:	e8 0e 7b fd ff       	call   f0107e56 <kfree>
f0130348:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f013034b:	e8 78 3a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0130350:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f0130356:	74 17                	je     f013036f <test_krealloc_BF+0x1fcb>
			panic(
f0130358:	83 ec 04             	sub    $0x4,%esp
f013035b:	68 14 b9 13 f0       	push   $0xf013b914
f0130360:	68 12 13 00 00       	push   $0x1312
f0130365:	68 fa b8 13 f0       	push   $0xf013b8fa
f013036a:	e8 96 fe fc ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f013036f:	e8 23 ce fd ff       	call   f010d197 <sys_calculate_free_frames>
f0130374:	89 c2                	mov    %eax,%edx
f0130376:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0130379:	29 c2                	sub    %eax,%edx
f013037b:	89 d0                	mov    %edx,%eax
f013037d:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f0130382:	74 17                	je     f013039b <test_krealloc_BF+0x1ff7>
			panic("krealloc: pages in memory are not freed correctly");
f0130384:	83 ec 04             	sub    $0x4,%esp
f0130387:	68 d0 cd 13 f0       	push   $0xf013cdd0
f013038c:	68 14 13 00 00       	push   $0x1314
f0130391:	68 fa b8 13 f0       	push   $0xf013b8fa
f0130396:	e8 6a fe fc ff       	call   f0100205 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f013039b:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f01303a2:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f01303a9:	eb 48                	jmp    f01303f3 <test_krealloc_BF+0x204f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f01303ab:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01303ae:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f01303b3:	83 ec 04             	sub    $0x4,%esp
f01303b6:	8d 8d 98 fd ff ff    	lea    -0x268(%ebp),%ecx
f01303bc:	51                   	push   %ecx
f01303bd:	52                   	push   %edx
f01303be:	50                   	push   %eax
f01303bf:	e8 ed 66 fd ff       	call   f0106ab1 <get_page_table>
f01303c4:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f01303c7:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f01303cd:	85 c0                	test   %eax,%eax
f01303cf:	75 17                	jne    f01303e8 <test_krealloc_BF+0x2044>
					panic(
f01303d1:	83 ec 04             	sub    $0x4,%esp
f01303d4:	68 fc c1 13 f0       	push   $0xf013c1fc
f01303d9:	68 21 13 00 00       	push   $0x1321
f01303de:	68 fa b8 13 f0       	push   $0xf013b8fa
f01303e3:	e8 1d fe fc ff       	call   f0100205 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f01303e8:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f01303ef:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f01303f3:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01303f7:	78 b2                	js     f01303ab <test_krealloc_BF+0x2007>
f01303f9:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01303fd:	7f 09                	jg     f0130408 <test_krealloc_BF+0x2064>
f01303ff:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f0130406:	76 a3                	jbe    f01303ab <test_krealloc_BF+0x2007>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f0130408:	83 ec 0c             	sub    $0xc,%esp
f013040b:	68 de ba 13 f0       	push   $0xf013bade
f0130410:	e8 f9 08 fd ff       	call   f0100d0e <cprintf>
f0130415:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc BF completed successfully.\n");
f0130418:	83 ec 0c             	sub    $0xc,%esp
f013041b:	68 e0 d1 13 f0       	push   $0xf013d1e0
f0130420:	e8 e9 08 fd ff       	call   f0100d0e <cprintf>
f0130425:	83 c4 10             	add    $0x10,%esp
	return 0;
f0130428:	b8 00 00 00 00       	mov    $0x0,%eax
}
f013042d:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0130430:	5b                   	pop    %ebx
f0130431:	5f                   	pop    %edi
f0130432:	5d                   	pop    %ebp
f0130433:	c3                   	ret    

f0130434 <test_initialize_dyn_block_system>:

//2022
int test_initialize_dyn_block_system(int freeFrames_before, int freeDiskFrames_before, int freeFrames_after, int freeDiskFrames_after)
{
f0130434:	55                   	push   %ebp
f0130435:	89 e5                	mov    %esp,%ebp
f0130437:	83 ec 28             	sub    $0x28,%esp
		panic("USE_KHEAP = 0 & it shall be 1. Go to 'inc/memlayout.h' and set USE_KHEAP by 1. Then, repeat the test again.");
	if(STATIC_MEMBLOCK_ALLOC != 0)
		panic("STATIC_MEMBLOCK_ALLOC = 1 & it shall be 0. Go to 'inc/dynamic_allocator.h' and set STATIC_MEMBLOCK_ALLOC by 0. Then, repeat the test again.");

	//Check MAX_MEM_BLOCK_CNT
	if(MAX_MEM_BLOCK_CNT != ((0xFFFFF000-0xF6000000)/4096))
f013043a:	a1 04 ad 89 f0       	mov    0xf089ad04,%eax
f013043f:	3d ff 9f 00 00       	cmp    $0x9fff,%eax
f0130444:	74 17                	je     f013045d <test_initialize_dyn_block_system+0x29>
	{
		panic("Wrong initialize: MAX_MEM_BLOCK_CNT is not set with the correct size of the array");
f0130446:	83 ec 04             	sub    $0x4,%esp
f0130449:	68 20 d2 13 f0       	push   $0xf013d220
f013044e:	68 39 13 00 00       	push   $0x1339
f0130453:	68 fa b8 13 f0       	push   $0xf013b8fa
f0130458:	e8 a8 fd fc ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != MAX_MEM_BLOCK_CNT-1)
f013045d:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f0130462:	8b 15 04 ad 89 f0    	mov    0xf089ad04,%edx
f0130468:	4a                   	dec    %edx
f0130469:	39 d0                	cmp    %edx,%eax
f013046b:	74 17                	je     f0130484 <test_initialize_dyn_block_system+0x50>
	{
		panic("Wrong initialize: Wrong size for the AvailableMemBlocksList");
f013046d:	83 ec 04             	sub    $0x4,%esp
f0130470:	68 74 d2 13 f0       	push   $0xf013d274
f0130475:	68 3f 13 00 00       	push   $0x133f
f013047a:	68 fa b8 13 f0       	push   $0xf013b8fa
f013047f:	e8 81 fd fc ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0130484:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f0130489:	85 c0                	test   %eax,%eax
f013048b:	74 17                	je     f01304a4 <test_initialize_dyn_block_system+0x70>
	{
		panic("Wrong initialize: Wrong size for the AllocMemBlocksList");
f013048d:	83 ec 04             	sub    $0x4,%esp
f0130490:	68 b0 d2 13 f0       	push   $0xf013d2b0
f0130495:	68 45 13 00 00       	push   $0x1345
f013049a:	68 fa b8 13 f0       	push   $0xf013b8fa
f013049f:	e8 61 fd fc ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in FreeMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 1)
f01304a4:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f01304a9:	83 f8 01             	cmp    $0x1,%eax
f01304ac:	74 17                	je     f01304c5 <test_initialize_dyn_block_system+0x91>
	{
		panic("Wrong initialize: Wrong size for the FreeMemBlocksList");
f01304ae:	83 ec 04             	sub    $0x4,%esp
f01304b1:	68 e8 d2 13 f0       	push   $0xf013d2e8
f01304b6:	68 4b 13 00 00       	push   $0x134b
f01304bb:	68 fa b8 13 f0       	push   $0xf013b8fa
f01304c0:	e8 40 fd fc ff       	call   f0100205 <_panic>
	}

	//Check content of FreeMemBlocksList
	struct MemBlock* block = LIST_FIRST(&FreeMemBlocksList);
f01304c5:	a1 64 ad 89 f0       	mov    0xf089ad64,%eax
f01304ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(block == NULL || block->size != (KERNEL_HEAP_MAX-0xF6000000-DYNAMIC_ALLOCATOR_DS) || block->sva != 0xF6000000+DYNAMIC_ALLOCATOR_DS)
f01304cd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01304d1:	74 66                	je     f0130539 <test_initialize_dyn_block_system+0x105>
f01304d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01304d6:	8b 48 0c             	mov    0xc(%eax),%ecx
f01304d9:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f01304e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01304e3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01304e8:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01304eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01304ee:	ba 00 00 00 00       	mov    $0x0,%edx
f01304f3:	f7 75 ec             	divl   -0x14(%ebp)
f01304f6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01304f9:	29 d0                	sub    %edx,%eax
f01304fb:	ba 00 f0 ff 09       	mov    $0x9fff000,%edx
f0130500:	29 c2                	sub    %eax,%edx
f0130502:	89 d0                	mov    %edx,%eax
f0130504:	39 c1                	cmp    %eax,%ecx
f0130506:	75 31                	jne    f0130539 <test_initialize_dyn_block_system+0x105>
f0130508:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013050b:	8b 48 08             	mov    0x8(%eax),%ecx
f013050e:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0130515:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0130518:	05 ef ff 09 00       	add    $0x9ffef,%eax
f013051d:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0130520:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0130523:	ba 00 00 00 00       	mov    $0x0,%edx
f0130528:	f7 75 e4             	divl   -0x1c(%ebp)
f013052b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f013052e:	29 d0                	sub    %edx,%eax
f0130530:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0130535:	39 c1                	cmp    %eax,%ecx
f0130537:	74 17                	je     f0130550 <test_initialize_dyn_block_system+0x11c>
	{
		panic("Wrong initialize: Wrong content for the FreeMemBlocksList.");
f0130539:	83 ec 04             	sub    $0x4,%esp
f013053c:	68 20 d3 13 f0       	push   $0xf013d320
f0130541:	68 52 13 00 00       	push   $0x1352
f0130546:	68 fa b8 13 f0       	push   $0xf013b8fa
f013054b:	e8 b5 fc fc ff       	call   f0100205 <_panic>
	}

	//Check number of disk and memory frames
	if ((freeDiskFrames_after - freeDiskFrames_before) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0130550:	8b 45 14             	mov    0x14(%ebp),%eax
f0130553:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0130556:	74 17                	je     f013056f <test_initialize_dyn_block_system+0x13b>
f0130558:	83 ec 04             	sub    $0x4,%esp
f013055b:	68 14 b9 13 f0       	push   $0xf013b914
f0130560:	68 56 13 00 00       	push   $0x1356
f0130565:	68 fa b8 13 f0       	push   $0xf013b8fa
f013056a:	e8 96 fc fc ff       	call   f0100205 <_panic>
	if ((freeFrames_before - freeFrames_after) != 160) panic("Wrong allocation: pages are not loaded successfully into memory %d", (freeFrames_before - freeFrames_after));
f013056f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130572:	2b 45 10             	sub    0x10(%ebp),%eax
f0130575:	3d a0 00 00 00       	cmp    $0xa0,%eax
f013057a:	74 1b                	je     f0130597 <test_initialize_dyn_block_system+0x163>
f013057c:	8b 45 08             	mov    0x8(%ebp),%eax
f013057f:	2b 45 10             	sub    0x10(%ebp),%eax
f0130582:	50                   	push   %eax
f0130583:	68 5c d3 13 f0       	push   $0xf013d35c
f0130588:	68 57 13 00 00       	push   $0x1357
f013058d:	68 fa b8 13 f0       	push   $0xf013b8fa
f0130592:	e8 6e fc fc ff       	call   f0100205 <_panic>

	//Checking permissions on the allocated spaces
	{
		uint32 a = 0xF6000000;
f0130597:	c7 45 f4 00 00 00 f6 	movl   $0xf6000000,-0xc(%ebp)
		while(1)
		{
			if (CB(ptr_page_directory, a, 0)!=1 || CB(ptr_page_directory, a, 1)!=1 || CB(ptr_page_directory, a, 2)!=0)
f013059e:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f01305a3:	83 ec 04             	sub    $0x4,%esp
f01305a6:	6a 00                	push   $0x0
f01305a8:	ff 75 f4             	pushl  -0xc(%ebp)
f01305ab:	50                   	push   %eax
f01305ac:	e8 e9 5f fe ff       	call   f011659a <CB>
f01305b1:	83 c4 10             	add    $0x10,%esp
f01305b4:	83 f8 01             	cmp    $0x1,%eax
f01305b7:	75 35                	jne    f01305ee <test_initialize_dyn_block_system+0x1ba>
f01305b9:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f01305be:	83 ec 04             	sub    $0x4,%esp
f01305c1:	6a 01                	push   $0x1
f01305c3:	ff 75 f4             	pushl  -0xc(%ebp)
f01305c6:	50                   	push   %eax
f01305c7:	e8 ce 5f fe ff       	call   f011659a <CB>
f01305cc:	83 c4 10             	add    $0x10,%esp
f01305cf:	83 f8 01             	cmp    $0x1,%eax
f01305d2:	75 1a                	jne    f01305ee <test_initialize_dyn_block_system+0x1ba>
f01305d4:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f01305d9:	83 ec 04             	sub    $0x4,%esp
f01305dc:	6a 02                	push   $0x2
f01305de:	ff 75 f4             	pushl  -0xc(%ebp)
f01305e1:	50                   	push   %eax
f01305e2:	e8 b3 5f fe ff       	call   f011659a <CB>
f01305e7:	83 c4 10             	add    $0x10,%esp
f01305ea:	85 c0                	test   %eax,%eax
f01305ec:	74 17                	je     f0130605 <test_initialize_dyn_block_system+0x1d1>
				panic("Wrong initialize: Wrong permissions - pages mapped with wrong permissions. Check them again.");
f01305ee:	83 ec 04             	sub    $0x4,%esp
f01305f1:	68 a0 d3 13 f0       	push   $0xf013d3a0
f01305f6:	68 5f 13 00 00       	push   $0x135f
f01305fb:	68 fa b8 13 f0       	push   $0xf013b8fa
f0130600:	e8 00 fc fc ff       	call   f0100205 <_panic>

			a+=4096;
f0130605:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
			if(a == (0xF6000000+DYNAMIC_ALLOCATOR_DS))
f013060c:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0130613:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0130616:	05 ef ff 09 00       	add    $0x9ffef,%eax
f013061b:	89 45 d8             	mov    %eax,-0x28(%ebp)
f013061e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0130621:	ba 00 00 00 00       	mov    $0x0,%edx
f0130626:	f7 75 dc             	divl   -0x24(%ebp)
f0130629:	8b 45 d8             	mov    -0x28(%ebp),%eax
f013062c:	29 d0                	sub    %edx,%eax
f013062e:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0130633:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130636:	74 05                	je     f013063d <test_initialize_dyn_block_system+0x209>
				break;
		}
f0130638:	e9 61 ff ff ff       	jmp    f013059e <test_initialize_dyn_block_system+0x16a>
			if (CB(ptr_page_directory, a, 0)!=1 || CB(ptr_page_directory, a, 1)!=1 || CB(ptr_page_directory, a, 2)!=0)
				panic("Wrong initialize: Wrong permissions - pages mapped with wrong permissions. Check them again.");

			a+=4096;
			if(a == (0xF6000000+DYNAMIC_ALLOCATOR_DS))
				break;
f013063d:	90                   	nop
		}
	}

	//===============================================//
	cprintf("\nCongratulations!! test initialize_dyn_block_system of KHEAP completed successfully.\n");
f013063e:	83 ec 0c             	sub    $0xc,%esp
f0130641:	68 00 d4 13 f0       	push   $0xf013d400
f0130646:	e8 c3 06 fd ff       	call   f0100d0e <cprintf>
f013064b:	83 c4 10             	add    $0x10,%esp
	return 0;
f013064e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0130653:	c9                   	leave  
f0130654:	c3                   	ret    

f0130655 <nearest_pow2_ceil>:
#include <kern/cpu/sched.h>
#include <kern/disk/pagefile_manager.h>
#include <kern/mem/memory_manager.h>
#include "../cons/console.h"

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f0130655:	55                   	push   %ebp
f0130656:	89 e5                	mov    %esp,%ebp
f0130658:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f013065b:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f013065f:	77 07                	ja     f0130668 <nearest_pow2_ceil+0x13>
f0130661:	b8 01 00 00 00       	mov    $0x1,%eax
f0130666:	eb 20                	jmp    f0130688 <nearest_pow2_ceil+0x33>
    int power = 2;
f0130668:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f013066f:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f0130672:	eb 08                	jmp    f013067c <nearest_pow2_ceil+0x27>
    	power <<= 1;
f0130674:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130677:	01 c0                	add    %eax,%eax
f0130679:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    int power = 2;
    x--;
    while (x >>= 1) {
f013067c:	d1 6d 08             	shrl   0x8(%ebp)
f013067f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130683:	75 ef                	jne    f0130674 <nearest_pow2_ceil+0x1f>
    	power <<= 1;
    }
    return power;
f0130685:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0130688:	c9                   	leave  
f0130689:	c3                   	ret    

f013068a <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f013068a:	55                   	push   %ebp
f013068b:	89 e5                	mov    %esp,%ebp
f013068d:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f0130690:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0130694:	77 07                	ja     f013069d <log2_ceil+0x13>
f0130696:	b8 01 00 00 00       	mov    $0x1,%eax
f013069b:	eb 1b                	jmp    f01306b8 <log2_ceil+0x2e>
    //int power = 2;
    int bits_cnt = 2 ;
f013069d:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f01306a4:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f01306a7:	eb 03                	jmp    f01306ac <log2_ceil+0x22>
    	//power <<= 1;
    	bits_cnt++ ;
f01306a9:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    //int power = 2;
    int bits_cnt = 2 ;
    x--;
    while (x >>= 1) {
f01306ac:	d1 6d 08             	shrl   0x8(%ebp)
f01306af:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01306b3:	75 f4                	jne    f01306a9 <log2_ceil+0x1f>
    	//power <<= 1;
    	bits_cnt++ ;
    }
    return bits_cnt;
f01306b5:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01306b8:	c9                   	leave  
f01306b9:	c3                   	ret    

f01306ba <detect_loop_in_FrameInfo_list>:
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f01306ba:	55                   	push   %ebp
f01306bb:	89 e5                	mov    %esp,%ebp
f01306bd:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f01306c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01306c3:	8b 00                	mov    (%eax),%eax
f01306c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f01306c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01306cb:	8b 00                	mov    (%eax),%eax
f01306cd:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f01306d0:	eb 52                	jmp    f0130724 <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f01306d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01306d5:	8b 00                	mov    (%eax),%eax
f01306d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f01306da:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01306dd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01306e0:	75 12                	jne    f01306f4 <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f01306e2:	83 ec 0c             	sub    $0xc,%esp
f01306e5:	68 58 d4 13 f0       	push   $0xf013d458
f01306ea:	e8 1f 06 fd ff       	call   f0100d0e <cprintf>
f01306ef:	83 c4 10             	add    $0x10,%esp
			break;
f01306f2:	eb 3f                	jmp    f0130733 <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f01306f4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01306f8:	74 38                	je     f0130732 <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f01306fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01306fd:	8b 00                	mov    (%eax),%eax
f01306ff:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f0130702:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130705:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130708:	75 12                	jne    f013071c <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f013070a:	83 ec 0c             	sub    $0xc,%esp
f013070d:	68 74 d4 13 f0       	push   $0xf013d474
f0130712:	e8 f7 05 fd ff       	call   f0100d0e <cprintf>
f0130717:	83 c4 10             	add    $0x10,%esp
			break;
f013071a:	eb 17                	jmp    f0130733 <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f013071c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013071f:	8b 00                	mov    (%eax),%eax
f0130721:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f0130724:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130728:	74 09                	je     f0130733 <detect_loop_in_FrameInfo_list+0x79>
f013072a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013072e:	75 a2                	jne    f01306d2 <detect_loop_in_FrameInfo_list+0x18>
f0130730:	eb 01                	jmp    f0130733 <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f0130732:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f0130733:	83 ec 0c             	sub    $0xc,%esp
f0130736:	68 8b d4 13 f0       	push   $0xf013d48b
f013073b:	e8 ce 05 fd ff       	call   f0100d0e <cprintf>
f0130740:	83 c4 10             	add    $0x10,%esp
}
f0130743:	90                   	nop
f0130744:	c9                   	leave  
f0130745:	c3                   	ret    

f0130746 <scarce_memory>:

void scarce_memory()
{
f0130746:	55                   	push   %ebp
f0130747:	89 e5                	mov    %esp,%ebp
f0130749:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f013074c:	a1 f0 ac 89 f0       	mov    0xf089acf0,%eax
f0130751:	ba 64 00 00 00       	mov    $0x64,%edx
f0130756:	29 c2                	sub    %eax,%edx
f0130758:	a1 10 ad 89 f0       	mov    0xf089ad10,%eax
f013075d:	0f af c2             	imul   %edx,%eax
f0130760:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0130765:	f7 e2                	mul    %edx
f0130767:	89 d0                	mov    %edx,%eax
f0130769:	c1 e8 05             	shr    $0x5,%eax
f013076c:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f013076f:	a1 f0 ac 89 f0       	mov    0xf089acf0,%eax
f0130774:	ba 64 00 00 00       	mov    $0x64,%edx
f0130779:	29 c2                	sub    %eax,%edx
f013077b:	a1 10 ad 89 f0       	mov    0xf089ad10,%eax
f0130780:	89 d1                	mov    %edx,%ecx
f0130782:	0f af c8             	imul   %eax,%ecx
f0130785:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f013078a:	f7 e1                	mul    %ecx
f013078c:	c1 ea 05             	shr    $0x5,%edx
f013078f:	89 d0                	mov    %edx,%eax
f0130791:	c1 e0 02             	shl    $0x2,%eax
f0130794:	01 d0                	add    %edx,%eax
f0130796:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f013079d:	01 d0                	add    %edx,%eax
f013079f:	c1 e0 02             	shl    $0x2,%eax
f01307a2:	29 c1                	sub    %eax,%ecx
f01307a4:	89 ca                	mov    %ecx,%edx
f01307a6:	85 d2                	test   %edx,%edx
f01307a8:	74 03                	je     f01307ad <scarce_memory+0x67>
		total_size_tobe_allocated++;
f01307aa:	ff 45 f4             	incl   -0xc(%ebp)

	uint32 size_of_already_allocated = number_of_frames - LIST_SIZE(&free_frame_list) ;
f01307ad:	8b 15 10 ad 89 f0    	mov    0xf089ad10,%edx
f01307b3:	a1 24 ad 89 f0       	mov    0xf089ad24,%eax
f01307b8:	29 c2                	sub    %eax,%edx
f01307ba:	89 d0                	mov    %edx,%eax
f01307bc:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f01307bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01307c2:	2b 45 ec             	sub    -0x14(%ebp),%eax
f01307c5:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
f01307c8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f01307cf:	eb 12                	jmp    f01307e3 <scarce_memory+0x9d>
	{
		allocate_frame(&ptr_tmp_FI) ;
f01307d1:	83 ec 0c             	sub    $0xc,%esp
f01307d4:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f01307d7:	50                   	push   %eax
f01307d8:	e8 15 61 fd ff       	call   f01068f2 <allocate_frame>
f01307dd:	83 c4 10             	add    $0x10,%esp
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f01307e0:	ff 45 f0             	incl   -0x10(%ebp)
f01307e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01307e6:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01307e9:	76 e6                	jbe    f01307d1 <scarce_memory+0x8b>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f01307eb:	90                   	nop
f01307ec:	c9                   	leave  
f01307ed:	c3                   	ret    

f01307ee <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f01307ee:	55                   	push   %ebp
f01307ef:	89 e5                	mov    %esp,%ebp
f01307f1:	83 ec 38             	sub    $0x38,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f01307f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f01307fb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f0130802:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f0130809:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f013080d:	0f 85 d0 01 00 00    	jne    f01309e3 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f5>
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f0130813:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f013081a:	e9 de 00 00 00       	jmp    f01308fd <calc_no_pages_tobe_removed_from_ready_exit_queues+0x10f>
		{
			struct Env * ptr_ready_env = NULL;
f013081f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f0130826:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f013082b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f013082e:	c1 e2 04             	shl    $0x4,%edx
f0130831:	01 d0                	add    %edx,%eax
f0130833:	8b 00                	mov    (%eax),%eax
f0130835:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0130838:	e9 85 00 00 00       	jmp    f01308c2 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xd4>
			{
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f013083d:	83 ec 0c             	sub    $0xc,%esp
f0130840:	ff 75 e4             	pushl  -0x1c(%ebp)
f0130843:	e8 d4 7a fd ff       	call   f010831c <env_page_ws_get_size>
f0130848:	83 c4 10             	add    $0x10,%esp
f013084b:	89 45 d0             	mov    %eax,-0x30(%ebp)
				int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f013084e:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f0130853:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130859:	8b 45 d0             	mov    -0x30(%ebp),%eax
f013085c:	0f af c2             	imul   %edx,%eax
f013085f:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0130864:	f7 e2                	mul    %edx
f0130866:	89 d0                	mov    %edx,%eax
f0130868:	c1 e8 05             	shr    $0x5,%eax
f013086b:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f013086e:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f0130873:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130879:	8b 45 d0             	mov    -0x30(%ebp),%eax
f013087c:	89 d1                	mov    %edx,%ecx
f013087e:	0f af c8             	imul   %eax,%ecx
f0130881:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130886:	f7 e1                	mul    %ecx
f0130888:	c1 ea 05             	shr    $0x5,%edx
f013088b:	89 d0                	mov    %edx,%eax
f013088d:	c1 e0 02             	shl    $0x2,%eax
f0130890:	01 d0                	add    %edx,%eax
f0130892:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130899:	01 d0                	add    %edx,%eax
f013089b:	c1 e0 02             	shl    $0x2,%eax
f013089e:	29 c1                	sub    %eax,%ecx
f01308a0:	89 ca                	mov    %ecx,%edx
f01308a2:	85 d2                	test   %edx,%edx
f01308a4:	74 03                	je     f01308a9 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xbb>
					num_of_pages_to_be_removed++;
f01308a6:	ff 45 e0             	incl   -0x20(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f01308a9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01308ac:	01 45 f4             	add    %eax,-0xc(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
		{
			struct Env * ptr_ready_env = NULL;
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f01308af:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f01308b4:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01308b7:	c1 e2 04             	shl    $0x4,%edx
f01308ba:	01 d0                	add    %edx,%eax
f01308bc:	8b 40 08             	mov    0x8(%eax),%eax
f01308bf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01308c2:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f01308c7:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01308ca:	c1 e2 04             	shl    $0x4,%edx
f01308cd:	01 d0                	add    %edx,%eax
f01308cf:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01308d3:	74 08                	je     f01308dd <calc_no_pages_tobe_removed_from_ready_exit_queues+0xef>
f01308d5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01308d8:	8b 52 44             	mov    0x44(%edx),%edx
f01308db:	eb 05                	jmp    f01308e2 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xf4>
f01308dd:	ba 00 00 00 00       	mov    $0x0,%edx
f01308e2:	89 50 08             	mov    %edx,0x8(%eax)
f01308e5:	8b 40 08             	mov    0x8(%eax),%eax
f01308e8:	85 c0                	test   %eax,%eax
f01308ea:	0f 85 4d ff ff ff    	jne    f013083d <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
f01308f0:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01308f4:	0f 85 43 ff ff ff    	jne    f013083d <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
	uint32 no_of_pages_tobe_removed_from_ready = 0;
	uint32 no_of_pages_tobe_removed_from_exit = 0;
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f01308fa:	ff 45 e8             	incl   -0x18(%ebp)
f01308fd:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0130902:	0f b6 c0             	movzbl %al,%eax
f0130905:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0130908:	0f 8f 11 ff ff ff    	jg     f013081f <calc_no_pages_tobe_removed_from_ready_exit_queues+0x31>
					num_of_pages_to_be_removed++;
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
f013090e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f0130915:	a1 f4 ac 89 f0       	mov    0xf089acf4,%eax
f013091a:	89 45 dc             	mov    %eax,-0x24(%ebp)
f013091d:	eb 19                	jmp    f0130938 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x14a>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
f013091f:	83 ec 0c             	sub    $0xc,%esp
f0130922:	ff 75 dc             	pushl  -0x24(%ebp)
f0130925:	e8 f2 79 fd ff       	call   f010831c <env_page_ws_get_size>
f013092a:	83 c4 10             	add    $0x10,%esp
f013092d:	01 45 f0             	add    %eax,-0x10(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f0130930:	a1 fc ac 89 f0       	mov    0xf089acfc,%eax
f0130935:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0130938:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f013093c:	74 08                	je     f0130946 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x158>
f013093e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0130941:	8b 40 44             	mov    0x44(%eax),%eax
f0130944:	eb 05                	jmp    f013094b <calc_no_pages_tobe_removed_from_ready_exit_queues+0x15d>
f0130946:	b8 00 00 00 00       	mov    $0x0,%eax
f013094b:	a3 fc ac 89 f0       	mov    %eax,0xf089acfc
f0130950:	a1 fc ac 89 f0       	mov    0xf089acfc,%eax
f0130955:	85 c0                	test   %eax,%eax
f0130957:	75 c6                	jne    f013091f <calc_no_pages_tobe_removed_from_ready_exit_queues+0x131>
f0130959:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f013095d:	75 c0                	jne    f013091f <calc_no_pages_tobe_removed_from_ready_exit_queues+0x131>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
		}

		if(curenv != NULL)
f013095f:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f0130964:	85 c0                	test   %eax,%eax
f0130966:	0f 84 ec 00 00 00    	je     f0130a58 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26a>
		{
			int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f013096c:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f0130971:	83 ec 0c             	sub    $0xc,%esp
f0130974:	50                   	push   %eax
f0130975:	e8 a2 79 fd ff       	call   f010831c <env_page_ws_get_size>
f013097a:	83 c4 10             	add    $0x10,%esp
f013097d:	89 45 cc             	mov    %eax,-0x34(%ebp)
			int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f0130980:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f0130985:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f013098b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f013098e:	0f af c2             	imul   %edx,%eax
f0130991:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0130996:	f7 e2                	mul    %edx
f0130998:	89 d0                	mov    %edx,%eax
f013099a:	c1 e8 05             	shr    $0x5,%eax
f013099d:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f01309a0:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f01309a5:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f01309ab:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01309ae:	89 d1                	mov    %edx,%ecx
f01309b0:	0f af c8             	imul   %eax,%ecx
f01309b3:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f01309b8:	f7 e1                	mul    %ecx
f01309ba:	c1 ea 05             	shr    $0x5,%edx
f01309bd:	89 d0                	mov    %edx,%eax
f01309bf:	c1 e0 02             	shl    $0x2,%eax
f01309c2:	01 d0                	add    %edx,%eax
f01309c4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01309cb:	01 d0                	add    %edx,%eax
f01309cd:	c1 e0 02             	shl    $0x2,%eax
f01309d0:	29 c1                	sub    %eax,%ecx
f01309d2:	89 ca                	mov    %ecx,%edx
f01309d4:	85 d2                	test   %edx,%edx
f01309d6:	74 03                	je     f01309db <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1ed>
				num_of_pages_to_be_removed++;
f01309d8:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f01309db:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01309de:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01309e1:	eb 75                	jmp    f0130a58 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26a>
		}
	}
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
		int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f01309e3:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f01309e8:	83 ec 0c             	sub    $0xc,%esp
f01309eb:	50                   	push   %eax
f01309ec:	e8 2b 79 fd ff       	call   f010831c <env_page_ws_get_size>
f01309f1:	83 c4 10             	add    $0x10,%esp
f01309f4:	89 45 c8             	mov    %eax,-0x38(%ebp)
		int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f01309f7:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f01309fc:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130a02:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0130a05:	0f af c2             	imul   %edx,%eax
f0130a08:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0130a0d:	f7 e2                	mul    %edx
f0130a0f:	89 d0                	mov    %edx,%eax
f0130a11:	c1 e8 05             	shr    $0x5,%eax
f0130a14:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f0130a17:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f0130a1c:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130a22:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0130a25:	89 d1                	mov    %edx,%ecx
f0130a27:	0f af c8             	imul   %eax,%ecx
f0130a2a:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130a2f:	f7 e1                	mul    %ecx
f0130a31:	c1 ea 05             	shr    $0x5,%edx
f0130a34:	89 d0                	mov    %edx,%eax
f0130a36:	c1 e0 02             	shl    $0x2,%eax
f0130a39:	01 d0                	add    %edx,%eax
f0130a3b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130a42:	01 d0                	add    %edx,%eax
f0130a44:	c1 e0 02             	shl    $0x2,%eax
f0130a47:	29 c1                	sub    %eax,%ecx
f0130a49:	89 ca                	mov    %ecx,%edx
f0130a4b:	85 d2                	test   %edx,%edx
f0130a4d:	74 03                	je     f0130a52 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x264>
			num_of_pages_to_be_removed++;
f0130a4f:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f0130a52:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0130a55:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f0130a58:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0130a5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130a5e:	01 c2                	add    %eax,%edx
f0130a60:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130a63:	01 d0                	add    %edx,%eax
}
f0130a65:	c9                   	leave  
f0130a66:	c3                   	ret    

f0130a67 <schenv>:


void schenv()
{
f0130a67:	55                   	push   %ebp
f0130a68:	89 e5                	mov    %esp,%ebp
f0130a6a:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f0130a6d:	c6 05 a8 ad 89 f0 00 	movb   $0x0,0xf089ada8
	__ne = NULL;
f0130a74:	c7 05 38 ad 89 f0 00 	movl   $0x0,0xf089ad38
f0130a7b:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f0130a7e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130a85:	eb 3f                	jmp    f0130ac6 <schenv+0x5f>
	{
		if (queue_size(&(env_ready_queues[i])))
f0130a87:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0130a8c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130a8f:	c1 e2 04             	shl    $0x4,%edx
f0130a92:	01 d0                	add    %edx,%eax
f0130a94:	83 ec 0c             	sub    $0xc,%esp
f0130a97:	50                   	push   %eax
f0130a98:	e8 e8 39 fd ff       	call   f0104485 <queue_size>
f0130a9d:	83 c4 10             	add    $0x10,%esp
f0130aa0:	85 c0                	test   %eax,%eax
f0130aa2:	74 1f                	je     f0130ac3 <schenv+0x5c>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f0130aa4:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0130aa9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130aac:	c1 e2 04             	shl    $0x4,%edx
f0130aaf:	01 d0                	add    %edx,%eax
f0130ab1:	8b 40 04             	mov    0x4(%eax),%eax
f0130ab4:	a3 38 ad 89 f0       	mov    %eax,0xf089ad38
			__nl = i;
f0130ab9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130abc:	a2 a8 ad 89 f0       	mov    %al,0xf089ada8
			break;
f0130ac1:	eb 10                	jmp    f0130ad3 <schenv+0x6c>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f0130ac3:	ff 45 f4             	incl   -0xc(%ebp)
f0130ac6:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0130acb:	0f b6 c0             	movzbl %al,%eax
f0130ace:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130ad1:	7f b4                	jg     f0130a87 <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f0130ad3:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f0130ad8:	85 c0                	test   %eax,%eax
f0130ada:	0f 84 86 00 00 00    	je     f0130b66 <schenv+0xff>
	{
		if (__ne != NULL)
f0130ae0:	a1 38 ad 89 f0       	mov    0xf089ad38,%eax
f0130ae5:	85 c0                	test   %eax,%eax
f0130ae7:	74 4b                	je     f0130b34 <schenv+0xcd>
		{
			if ((__pl + 1) < __nl)
f0130ae9:	a0 e0 ac 89 f0       	mov    0xf089ace0,%al
f0130aee:	0f b6 c0             	movzbl %al,%eax
f0130af1:	8d 50 01             	lea    0x1(%eax),%edx
f0130af4:	a0 a8 ad 89 f0       	mov    0xf089ada8,%al
f0130af9:	0f b6 c0             	movzbl %al,%eax
f0130afc:	39 c2                	cmp    %eax,%edx
f0130afe:	7d 66                	jge    f0130b66 <schenv+0xff>
			{
				__ne = curenv;
f0130b00:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f0130b05:	a3 38 ad 89 f0       	mov    %eax,0xf089ad38
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f0130b0a:	a0 e0 ac 89 f0       	mov    0xf089ace0,%al
f0130b0f:	0f b6 c0             	movzbl %al,%eax
f0130b12:	8a 15 80 ad 89 f0    	mov    0xf089ad80,%dl
f0130b18:	0f b6 d2             	movzbl %dl,%edx
f0130b1b:	4a                   	dec    %edx
f0130b1c:	39 d0                	cmp    %edx,%eax
f0130b1e:	7d 08                	jge    f0130b28 <schenv+0xc1>
f0130b20:	a0 e0 ac 89 f0       	mov    0xf089ace0,%al
f0130b25:	40                   	inc    %eax
f0130b26:	eb 05                	jmp    f0130b2d <schenv+0xc6>
f0130b28:	a0 e0 ac 89 f0       	mov    0xf089ace0,%al
f0130b2d:	a2 a8 ad 89 f0       	mov    %al,0xf089ada8
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f0130b32:	eb 32                	jmp    f0130b66 <schenv+0xff>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f0130b34:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f0130b39:	a3 38 ad 89 f0       	mov    %eax,0xf089ad38
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f0130b3e:	a0 e0 ac 89 f0       	mov    0xf089ace0,%al
f0130b43:	0f b6 c0             	movzbl %al,%eax
f0130b46:	8a 15 80 ad 89 f0    	mov    0xf089ad80,%dl
f0130b4c:	0f b6 d2             	movzbl %dl,%edx
f0130b4f:	4a                   	dec    %edx
f0130b50:	39 d0                	cmp    %edx,%eax
f0130b52:	7d 08                	jge    f0130b5c <schenv+0xf5>
f0130b54:	a0 e0 ac 89 f0       	mov    0xf089ace0,%al
f0130b59:	40                   	inc    %eax
f0130b5a:	eb 05                	jmp    f0130b61 <schenv+0xfa>
f0130b5c:	a0 e0 ac 89 f0       	mov    0xf089ace0,%al
f0130b61:	a2 a8 ad 89 f0       	mov    %al,0xf089ada8
		}
	}
}
f0130b66:	90                   	nop
f0130b67:	c9                   	leave  
f0130b68:	c3                   	ret    

f0130b69 <chksch>:

void chksch(uint8 onoff)
{
f0130b69:	55                   	push   %ebp
f0130b6a:	89 e5                	mov    %esp,%ebp
f0130b6c:	83 ec 04             	sub    $0x4,%esp
f0130b6f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b72:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f0130b75:	c7 05 94 ad 89 f0 00 	movl   $0x0,0xf089ad94
f0130b7c:	00 00 00 
	__ne = NULL;
f0130b7f:	c7 05 38 ad 89 f0 00 	movl   $0x0,0xf089ad38
f0130b86:	00 00 00 
	__pl = 0 ;
f0130b89:	c6 05 e0 ac 89 f0 00 	movb   $0x0,0xf089ace0
	__nl = 0 ;
f0130b90:	c6 05 a8 ad 89 f0 00 	movb   $0x0,0xf089ada8
	__chkstatus = onoff;
f0130b97:	8a 45 fc             	mov    -0x4(%ebp),%al
f0130b9a:	a2 34 ad 89 f0       	mov    %al,0xf089ad34
}
f0130b9f:	90                   	nop
f0130ba0:	c9                   	leave  
f0130ba1:	c3                   	ret    

f0130ba2 <chk1>:
void chk1()
{
f0130ba2:	55                   	push   %ebp
f0130ba3:	89 e5                	mov    %esp,%ebp
f0130ba5:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f0130ba8:	a0 34 ad 89 f0       	mov    0xf089ad34,%al
f0130bad:	84 c0                	test   %al,%al
f0130baf:	74 2b                	je     f0130bdc <chk1+0x3a>
		return ;
	__pe = curenv;
f0130bb1:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f0130bb6:	a3 94 ad 89 f0       	mov    %eax,0xf089ad94
	__pl = __nl ;
f0130bbb:	a0 a8 ad 89 f0       	mov    0xf089ada8,%al
f0130bc0:	a2 e0 ac 89 f0       	mov    %al,0xf089ace0
	if (__pe == NULL)
f0130bc5:	a1 94 ad 89 f0       	mov    0xf089ad94,%eax
f0130bca:	85 c0                	test   %eax,%eax
f0130bcc:	75 07                	jne    f0130bd5 <chk1+0x33>
	{
		__pl = 0;
f0130bce:	c6 05 e0 ac 89 f0 00 	movb   $0x0,0xf089ace0
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f0130bd5:	e8 8d fe ff ff       	call   f0130a67 <schenv>
f0130bda:	eb 01                	jmp    f0130bdd <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f0130bdc:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f0130bdd:	c9                   	leave  
f0130bde:	c3                   	ret    

f0130bdf <chk2>:
void chk2(struct Env* __se)
{
f0130bdf:	55                   	push   %ebp
f0130be0:	89 e5                	mov    %esp,%ebp
f0130be2:	53                   	push   %ebx
f0130be3:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f0130be6:	a0 34 ad 89 f0       	mov    0xf089ad34,%al
f0130beb:	84 c0                	test   %al,%al
f0130bed:	0f 84 43 02 00 00    	je     f0130e36 <chk2+0x257>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f0130bf3:	a1 38 ad 89 f0       	mov    0xf089ad38,%eax
f0130bf8:	39 45 08             	cmp    %eax,0x8(%ebp)
f0130bfb:	74 19                	je     f0130c16 <chk2+0x37>
f0130bfd:	68 a5 d4 13 f0       	push   $0xf013d4a5
f0130c02:	68 b2 d4 13 f0       	push   $0xf013d4b2
f0130c07:	68 c0 00 00 00       	push   $0xc0
f0130c0c:	68 c7 d4 13 f0       	push   $0xf013d4c7
f0130c11:	e8 a5 f6 fc ff       	call   f01002bb <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f0130c16:	a1 38 ad 89 f0       	mov    0xf089ad38,%eax
f0130c1b:	85 c0                	test   %eax,%eax
f0130c1d:	0f 84 25 01 00 00    	je     f0130d48 <chk2+0x169>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f0130c23:	8b 15 2c ad 89 f0    	mov    0xf089ad2c,%edx
f0130c29:	a0 a8 ad 89 f0       	mov    0xf089ada8,%al
f0130c2e:	0f b6 c0             	movzbl %al,%eax
f0130c31:	01 d0                	add    %edx,%eax
f0130c33:	8a 00                	mov    (%eax),%al
f0130c35:	0f b6 d8             	movzbl %al,%ebx
f0130c38:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0130c3d:	99                   	cltd   
f0130c3e:	f7 fb                	idiv   %ebx
f0130c40:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0130c46:	8b 15 2c ad 89 f0    	mov    0xf089ad2c,%edx
f0130c4c:	a0 a8 ad 89 f0       	mov    0xf089ada8,%al
f0130c51:	0f b6 c0             	movzbl %al,%eax
f0130c54:	01 d0                	add    %edx,%eax
f0130c56:	8a 00                	mov    (%eax),%al
f0130c58:	0f b6 d8             	movzbl %al,%ebx
f0130c5b:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0130c60:	99                   	cltd   
f0130c61:	f7 fb                	idiv   %ebx
f0130c63:	89 c3                	mov    %eax,%ebx
f0130c65:	89 c8                	mov    %ecx,%eax
f0130c67:	99                   	cltd   
f0130c68:	f7 fb                	idiv   %ebx
f0130c6a:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		upper = upper % 2 == 1? upper+1 : upper ;
f0130c6e:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0130c72:	83 e0 01             	and    $0x1,%eax
f0130c75:	66 85 c0             	test   %ax,%ax
f0130c78:	74 07                	je     f0130c81 <chk2+0xa2>
f0130c7a:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0130c7e:	40                   	inc    %eax
f0130c7f:	eb 04                	jmp    f0130c85 <chk2+0xa6>
f0130c81:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0130c85:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f0130c89:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f0130c8d:	89 d0                	mov    %edx,%eax
f0130c8f:	c1 e0 02             	shl    $0x2,%eax
f0130c92:	01 d0                	add    %edx,%eax
f0130c94:	01 c0                	add    %eax,%eax
f0130c96:	01 d0                	add    %edx,%eax
f0130c98:	c1 e0 02             	shl    $0x2,%eax
f0130c9b:	01 d0                	add    %edx,%eax
f0130c9d:	01 c0                	add    %eax,%eax
f0130c9f:	89 c1                	mov    %eax,%ecx
f0130ca1:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130ca6:	f7 e9                	imul   %ecx
f0130ca8:	c1 fa 05             	sar    $0x5,%edx
f0130cab:	89 c8                	mov    %ecx,%eax
f0130cad:	c1 f8 1f             	sar    $0x1f,%eax
f0130cb0:	29 c2                	sub    %eax,%edx
f0130cb2:	89 d0                	mov    %edx,%eax
f0130cb4:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0();
f0130cb8:	e8 99 36 fd ff       	call   f0104356 <kclock_read_cnt0>
f0130cbd:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f0130cc1:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f0130cc5:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f0130cc9:	76 0a                	jbe    f0130cd5 <chk2+0xf6>
f0130ccb:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f0130ccf:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0130cd3:	76 19                	jbe    f0130cee <chk2+0x10f>
f0130cd5:	68 e0 d4 13 f0       	push   $0xf013d4e0
f0130cda:	68 b2 d4 13 f0       	push   $0xf013d4b2
f0130cdf:	68 ca 00 00 00       	push   $0xca
f0130ce4:	68 c7 d4 13 f0       	push   $0xf013d4c7
f0130ce9:	e8 cd f5 fc ff       	call   f01002bb <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f0130cee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130cf5:	eb 44                	jmp    f0130d3b <chk2+0x15c>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f0130cf7:	a1 38 ad 89 f0       	mov    0xf089ad38,%eax
f0130cfc:	8b 40 4c             	mov    0x4c(%eax),%eax
f0130cff:	89 c2                	mov    %eax,%edx
f0130d01:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0130d06:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0130d09:	c1 e1 04             	shl    $0x4,%ecx
f0130d0c:	01 c8                	add    %ecx,%eax
f0130d0e:	83 ec 08             	sub    $0x8,%esp
f0130d11:	52                   	push   %edx
f0130d12:	50                   	push   %eax
f0130d13:	e8 87 39 fd ff       	call   f010469f <find_env_in_queue>
f0130d18:	83 c4 10             	add    $0x10,%esp
f0130d1b:	85 c0                	test   %eax,%eax
f0130d1d:	74 19                	je     f0130d38 <chk2+0x159>
f0130d1f:	68 04 d5 13 f0       	push   $0xf013d504
f0130d24:	68 b2 d4 13 f0       	push   $0xf013d4b2
f0130d29:	68 ce 00 00 00       	push   $0xce
f0130d2e:	68 c7 d4 13 f0       	push   $0xf013d4c7
f0130d33:	e8 83 f5 fc ff       	call   f01002bb <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f0130d38:	ff 45 f4             	incl   -0xc(%ebp)
f0130d3b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0130d40:	0f b6 c0             	movzbl %al,%eax
f0130d43:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130d46:	7f af                	jg     f0130cf7 <chk2+0x118>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f0130d48:	a1 94 ad 89 f0       	mov    0xf089ad94,%eax
f0130d4d:	85 c0                	test   %eax,%eax
f0130d4f:	0f 84 e2 00 00 00    	je     f0130e37 <chk2+0x258>
f0130d55:	8b 15 94 ad 89 f0    	mov    0xf089ad94,%edx
f0130d5b:	a1 38 ad 89 f0       	mov    0xf089ad38,%eax
f0130d60:	39 c2                	cmp    %eax,%edx
f0130d62:	0f 84 cf 00 00 00    	je     f0130e37 <chk2+0x258>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f0130d68:	a0 e0 ac 89 f0       	mov    0xf089ace0,%al
f0130d6d:	0f b6 c0             	movzbl %al,%eax
f0130d70:	8a 15 80 ad 89 f0    	mov    0xf089ad80,%dl
f0130d76:	0f b6 d2             	movzbl %dl,%edx
f0130d79:	4a                   	dec    %edx
f0130d7a:	39 d0                	cmp    %edx,%eax
f0130d7c:	74 08                	je     f0130d86 <chk2+0x1a7>
f0130d7e:	a0 e0 ac 89 f0       	mov    0xf089ace0,%al
f0130d83:	40                   	inc    %eax
f0130d84:	eb 05                	jmp    f0130d8b <chk2+0x1ac>
f0130d86:	a0 e0 ac 89 f0       	mov    0xf089ace0,%al
f0130d8b:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f0130d8e:	a1 94 ad 89 f0       	mov    0xf089ad94,%eax
f0130d93:	8b 40 4c             	mov    0x4c(%eax),%eax
f0130d96:	89 c2                	mov    %eax,%edx
f0130d98:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0130d9d:	0f b6 4d e9          	movzbl -0x17(%ebp),%ecx
f0130da1:	c1 e1 04             	shl    $0x4,%ecx
f0130da4:	01 c8                	add    %ecx,%eax
f0130da6:	83 ec 08             	sub    $0x8,%esp
f0130da9:	52                   	push   %edx
f0130daa:	50                   	push   %eax
f0130dab:	e8 ef 38 fd ff       	call   f010469f <find_env_in_queue>
f0130db0:	83 c4 10             	add    $0x10,%esp
f0130db3:	85 c0                	test   %eax,%eax
f0130db5:	75 19                	jne    f0130dd0 <chk2+0x1f1>
f0130db7:	68 44 d5 13 f0       	push   $0xf013d544
f0130dbc:	68 b2 d4 13 f0       	push   $0xf013d4b2
f0130dc1:	68 d4 00 00 00       	push   $0xd4
f0130dc6:	68 c7 d4 13 f0       	push   $0xf013d4c7
f0130dcb:	e8 eb f4 fc ff       	call   f01002bb <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f0130dd0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0130dd7:	eb 4e                	jmp    f0130e27 <chk2+0x248>
		{
			if (i == __tl) continue;
f0130dd9:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f0130ddd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130de0:	74 41                	je     f0130e23 <chk2+0x244>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f0130de2:	a1 94 ad 89 f0       	mov    0xf089ad94,%eax
f0130de7:	8b 40 4c             	mov    0x4c(%eax),%eax
f0130dea:	89 c2                	mov    %eax,%edx
f0130dec:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0130df1:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0130df4:	c1 e1 04             	shl    $0x4,%ecx
f0130df7:	01 c8                	add    %ecx,%eax
f0130df9:	83 ec 08             	sub    $0x8,%esp
f0130dfc:	52                   	push   %edx
f0130dfd:	50                   	push   %eax
f0130dfe:	e8 9c 38 fd ff       	call   f010469f <find_env_in_queue>
f0130e03:	83 c4 10             	add    $0x10,%esp
f0130e06:	85 c0                	test   %eax,%eax
f0130e08:	74 1a                	je     f0130e24 <chk2+0x245>
f0130e0a:	68 88 d5 13 f0       	push   $0xf013d588
f0130e0f:	68 b2 d4 13 f0       	push   $0xf013d4b2
f0130e14:	68 d8 00 00 00       	push   $0xd8
f0130e19:	68 c7 d4 13 f0       	push   $0xf013d4c7
f0130e1e:	e8 98 f4 fc ff       	call   f01002bb <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f0130e23:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f0130e24:	ff 45 f0             	incl   -0x10(%ebp)
f0130e27:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0130e2c:	0f b6 c0             	movzbl %al,%eax
f0130e2f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130e32:	7f a5                	jg     f0130dd9 <chk2+0x1fa>
f0130e34:	eb 01                	jmp    f0130e37 <chk2+0x258>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f0130e36:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f0130e37:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0130e3a:	c9                   	leave  
f0130e3b:	c3                   	ret    

f0130e3c <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f0130e3c:	55                   	push   %ebp
f0130e3d:	89 e5                	mov    %esp,%ebp
f0130e3f:	83 ec 18             	sub    $0x18,%esp

	//2016
	// check phys mem
	#if USE_KHEAP
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f0130e42:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130e49:	eb 40                	jmp    f0130e8b <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f0130e4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130e4e:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f0130e54:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0130e59:	83 ec 08             	sub    $0x8,%esp
f0130e5c:	52                   	push   %edx
f0130e5d:	50                   	push   %eax
f0130e5e:	e8 9b 01 00 00       	call   f0130ffe <check_va2pa>
f0130e63:	83 c4 10             	add    $0x10,%esp
f0130e66:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130e69:	74 19                	je     f0130e84 <check_boot_pgdir+0x48>
f0130e6b:	68 c8 d5 13 f0       	push   $0xf013d5c8
f0130e70:	68 b2 d4 13 f0       	push   $0xf013d4b2
f0130e75:	68 fa 00 00 00       	push   $0xfa
f0130e7a:	68 c7 d4 13 f0       	push   $0xf013d4c7
f0130e7f:	e8 81 f3 fc ff       	call   f0100205 <_panic>

	//2016
	// check phys mem
	#if USE_KHEAP
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f0130e84:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0130e8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130e8e:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f0130e94:	a1 78 ad 89 f0       	mov    0xf089ad78,%eax
f0130e99:	39 c2                	cmp    %eax,%edx
f0130e9b:	72 ae                	jb     f0130e4b <check_boot_pgdir+0xf>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0130e9d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130ea4:	eb 74                	jmp    f0130f1a <check_boot_pgdir+0xde>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f0130ea6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130ea9:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f0130eaf:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0130eb4:	83 ec 08             	sub    $0x8,%esp
f0130eb7:	52                   	push   %edx
f0130eb8:	50                   	push   %eax
f0130eb9:	e8 40 01 00 00       	call   f0130ffe <check_va2pa>
f0130ebe:	83 c4 10             	add    $0x10,%esp
f0130ec1:	c7 45 f0 00 b0 18 f0 	movl   $0xf018b000,-0x10(%ebp)
f0130ec8:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f0130ecf:	77 17                	ja     f0130ee8 <check_boot_pgdir+0xac>
f0130ed1:	ff 75 f0             	pushl  -0x10(%ebp)
f0130ed4:	68 00 d6 13 f0       	push   $0xf013d600
f0130ed9:	68 04 01 00 00       	push   $0x104
f0130ede:	68 c7 d4 13 f0       	push   $0xf013d4c7
f0130ee3:	e8 1d f3 fc ff       	call   f0100205 <_panic>
f0130ee8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0130eeb:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f0130ef1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130ef4:	01 ca                	add    %ecx,%edx
f0130ef6:	39 d0                	cmp    %edx,%eax
f0130ef8:	74 19                	je     f0130f13 <check_boot_pgdir+0xd7>
f0130efa:	68 34 d6 13 f0       	push   $0xf013d634
f0130eff:	68 b2 d4 13 f0       	push   $0xf013d4b2
f0130f04:	68 04 01 00 00       	push   $0x104
f0130f09:	68 c7 d4 13 f0       	push   $0xf013d4c7
f0130f0e:	e8 f2 f2 fc ff       	call   f0100205 <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0130f13:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0130f1a:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f0130f21:	76 83                	jbe    f0130ea6 <check_boot_pgdir+0x6a>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0130f23:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130f2a:	e9 af 00 00 00       	jmp    f0130fde <check_boot_pgdir+0x1a2>
		switch (i) {
f0130f2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130f32:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0130f37:	74 11                	je     f0130f4a <check_boot_pgdir+0x10e>
f0130f39:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0130f3e:	72 36                	jb     f0130f76 <check_boot_pgdir+0x13a>
f0130f40:	2d bd 03 00 00       	sub    $0x3bd,%eax
f0130f45:	83 f8 02             	cmp    $0x2,%eax
f0130f48:	77 2c                	ja     f0130f76 <check_boot_pgdir+0x13a>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f0130f4a:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0130f4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130f52:	c1 e2 02             	shl    $0x2,%edx
f0130f55:	01 d0                	add    %edx,%eax
f0130f57:	8b 00                	mov    (%eax),%eax
f0130f59:	85 c0                	test   %eax,%eax
f0130f5b:	75 7a                	jne    f0130fd7 <check_boot_pgdir+0x19b>
f0130f5d:	68 b6 d6 13 f0       	push   $0xf013d6b6
f0130f62:	68 b2 d4 13 f0       	push   $0xf013d4b2
f0130f67:	68 0f 01 00 00       	push   $0x10f
f0130f6c:	68 c7 d4 13 f0       	push   $0xf013d4c7
f0130f71:	e8 8f f2 fc ff       	call   f0100205 <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f0130f76:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f0130f7d:	76 2c                	jbe    f0130fab <check_boot_pgdir+0x16f>
				assert(ptr_page_directory[i]);
f0130f7f:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0130f84:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130f87:	c1 e2 02             	shl    $0x2,%edx
f0130f8a:	01 d0                	add    %edx,%eax
f0130f8c:	8b 00                	mov    (%eax),%eax
f0130f8e:	85 c0                	test   %eax,%eax
f0130f90:	75 48                	jne    f0130fda <check_boot_pgdir+0x19e>
f0130f92:	68 b6 d6 13 f0       	push   $0xf013d6b6
f0130f97:	68 b2 d4 13 f0       	push   $0xf013d4b2
f0130f9c:	68 13 01 00 00       	push   $0x113
f0130fa1:	68 c7 d4 13 f0       	push   $0xf013d4c7
f0130fa6:	e8 5a f2 fc ff       	call   f0100205 <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f0130fab:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0130fb0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130fb3:	c1 e2 02             	shl    $0x2,%edx
f0130fb6:	01 d0                	add    %edx,%eax
f0130fb8:	8b 00                	mov    (%eax),%eax
f0130fba:	85 c0                	test   %eax,%eax
f0130fbc:	74 1c                	je     f0130fda <check_boot_pgdir+0x19e>
f0130fbe:	68 cc d6 13 f0       	push   $0xf013d6cc
f0130fc3:	68 b2 d4 13 f0       	push   $0xf013d4b2
f0130fc8:	68 15 01 00 00       	push   $0x115
f0130fcd:	68 c7 d4 13 f0       	push   $0xf013d4c7
f0130fd2:	e8 2e f2 fc ff       	call   f0100205 <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f0130fd7:	90                   	nop
f0130fd8:	eb 01                	jmp    f0130fdb <check_boot_pgdir+0x19f>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f0130fda:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0130fdb:	ff 45 f4             	incl   -0xc(%ebp)
f0130fde:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0130fe5:	0f 86 44 ff ff ff    	jbe    f0130f2f <check_boot_pgdir+0xf3>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f0130feb:	83 ec 0c             	sub    $0xc,%esp
f0130fee:	68 e8 d6 13 f0       	push   $0xf013d6e8
f0130ff3:	e8 16 fd fc ff       	call   f0100d0e <cprintf>
f0130ff8:	83 c4 10             	add    $0x10,%esp
}
f0130ffb:	90                   	nop
f0130ffc:	c9                   	leave  
f0130ffd:	c3                   	ret    

f0130ffe <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f0130ffe:	55                   	push   %ebp
f0130fff:	89 e5                	mov    %esp,%ebp
f0131001:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f0131004:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131007:	c1 e8 16             	shr    $0x16,%eax
f013100a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0131011:	8b 45 08             	mov    0x8(%ebp),%eax
f0131014:	01 d0                	add    %edx,%eax
f0131016:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f0131019:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013101c:	8b 00                	mov    (%eax),%eax
f013101e:	83 e0 01             	and    $0x1,%eax
f0131021:	85 c0                	test   %eax,%eax
f0131023:	75 0a                	jne    f013102f <check_va2pa+0x31>
		return ~0;
f0131025:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f013102a:	e9 87 00 00 00       	jmp    f01310b6 <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f013102f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131032:	8b 00                	mov    (%eax),%eax
f0131034:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0131039:	89 45 f0             	mov    %eax,-0x10(%ebp)
f013103c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013103f:	c1 e8 0c             	shr    $0xc,%eax
f0131042:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0131045:	a1 10 ad 89 f0       	mov    0xf089ad10,%eax
f013104a:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f013104d:	72 17                	jb     f0131066 <check_va2pa+0x68>
f013104f:	ff 75 f0             	pushl  -0x10(%ebp)
f0131052:	68 08 d7 13 f0       	push   $0xf013d708
f0131057:	68 2b 01 00 00       	push   $0x12b
f013105c:	68 c7 d4 13 f0       	push   $0xf013d4c7
f0131061:	e8 9f f1 fc ff       	call   f0100205 <_panic>
f0131066:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131069:	2d 00 00 00 10       	sub    $0x10000000,%eax
f013106e:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f0131071:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131074:	c1 e8 0c             	shr    $0xc,%eax
f0131077:	25 ff 03 00 00       	and    $0x3ff,%eax
f013107c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0131083:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131086:	01 d0                	add    %edx,%eax
f0131088:	8b 00                	mov    (%eax),%eax
f013108a:	83 e0 01             	and    $0x1,%eax
f013108d:	85 c0                	test   %eax,%eax
f013108f:	75 07                	jne    f0131098 <check_va2pa+0x9a>
		return ~0;
f0131091:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0131096:	eb 1e                	jmp    f01310b6 <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f0131098:	8b 45 0c             	mov    0xc(%ebp),%eax
f013109b:	c1 e8 0c             	shr    $0xc,%eax
f013109e:	25 ff 03 00 00       	and    $0x3ff,%eax
f01310a3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01310aa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01310ad:	01 d0                	add    %edx,%eax
f01310af:	8b 00                	mov    (%eax),%eax
f01310b1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f01310b6:	c9                   	leave  
f01310b7:	c3                   	ret    

f01310b8 <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f01310b8:	55                   	push   %ebp
f01310b9:	89 e5                	mov    %esp,%ebp
f01310bb:	53                   	push   %ebx
f01310bc:	83 ec 14             	sub    $0x14,%esp
f01310bf:	8b 45 10             	mov    0x10(%ebp),%eax
f01310c2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01310c5:	8b 45 14             	mov    0x14(%ebp),%eax
f01310c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f01310cb:	8b 45 18             	mov    0x18(%ebp),%eax
f01310ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01310d3:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f01310d6:	77 55                	ja     f013112d <printnum+0x75>
f01310d8:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f01310db:	72 05                	jb     f01310e2 <printnum+0x2a>
f01310dd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01310e0:	77 4b                	ja     f013112d <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f01310e2:	8b 45 1c             	mov    0x1c(%ebp),%eax
f01310e5:	8d 58 ff             	lea    -0x1(%eax),%ebx
f01310e8:	8b 45 18             	mov    0x18(%ebp),%eax
f01310eb:	ba 00 00 00 00       	mov    $0x0,%edx
f01310f0:	52                   	push   %edx
f01310f1:	50                   	push   %eax
f01310f2:	ff 75 f4             	pushl  -0xc(%ebp)
f01310f5:	ff 75 f0             	pushl  -0x10(%ebp)
f01310f8:	e8 0b 28 00 00       	call   f0133908 <__udivdi3>
f01310fd:	83 c4 10             	add    $0x10,%esp
f0131100:	83 ec 04             	sub    $0x4,%esp
f0131103:	ff 75 20             	pushl  0x20(%ebp)
f0131106:	53                   	push   %ebx
f0131107:	ff 75 18             	pushl  0x18(%ebp)
f013110a:	52                   	push   %edx
f013110b:	50                   	push   %eax
f013110c:	ff 75 0c             	pushl  0xc(%ebp)
f013110f:	ff 75 08             	pushl  0x8(%ebp)
f0131112:	e8 a1 ff ff ff       	call   f01310b8 <printnum>
f0131117:	83 c4 20             	add    $0x20,%esp
f013111a:	eb 1a                	jmp    f0131136 <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f013111c:	83 ec 08             	sub    $0x8,%esp
f013111f:	ff 75 0c             	pushl  0xc(%ebp)
f0131122:	ff 75 20             	pushl  0x20(%ebp)
f0131125:	8b 45 08             	mov    0x8(%ebp),%eax
f0131128:	ff d0                	call   *%eax
f013112a:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f013112d:	ff 4d 1c             	decl   0x1c(%ebp)
f0131130:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f0131134:	7f e6                	jg     f013111c <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f0131136:	8b 4d 18             	mov    0x18(%ebp),%ecx
f0131139:	bb 00 00 00 00       	mov    $0x0,%ebx
f013113e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131141:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131144:	53                   	push   %ebx
f0131145:	51                   	push   %ecx
f0131146:	52                   	push   %edx
f0131147:	50                   	push   %eax
f0131148:	e8 cb 28 00 00       	call   f0133a18 <__umoddi3>
f013114d:	83 c4 10             	add    $0x10,%esp
f0131150:	05 54 d9 13 f0       	add    $0xf013d954,%eax
f0131155:	8a 00                	mov    (%eax),%al
f0131157:	0f be c0             	movsbl %al,%eax
f013115a:	83 ec 08             	sub    $0x8,%esp
f013115d:	ff 75 0c             	pushl  0xc(%ebp)
f0131160:	50                   	push   %eax
f0131161:	8b 45 08             	mov    0x8(%ebp),%eax
f0131164:	ff d0                	call   *%eax
f0131166:	83 c4 10             	add    $0x10,%esp
}
f0131169:	90                   	nop
f013116a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f013116d:	c9                   	leave  
f013116e:	c3                   	ret    

f013116f <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f013116f:	55                   	push   %ebp
f0131170:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0131172:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0131176:	7e 1c                	jle    f0131194 <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f0131178:	8b 45 08             	mov    0x8(%ebp),%eax
f013117b:	8b 00                	mov    (%eax),%eax
f013117d:	8d 50 08             	lea    0x8(%eax),%edx
f0131180:	8b 45 08             	mov    0x8(%ebp),%eax
f0131183:	89 10                	mov    %edx,(%eax)
f0131185:	8b 45 08             	mov    0x8(%ebp),%eax
f0131188:	8b 00                	mov    (%eax),%eax
f013118a:	83 e8 08             	sub    $0x8,%eax
f013118d:	8b 50 04             	mov    0x4(%eax),%edx
f0131190:	8b 00                	mov    (%eax),%eax
f0131192:	eb 40                	jmp    f01311d4 <getuint+0x65>
	else if (lflag)
f0131194:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0131198:	74 1e                	je     f01311b8 <getuint+0x49>
		return va_arg(*ap, unsigned long);
f013119a:	8b 45 08             	mov    0x8(%ebp),%eax
f013119d:	8b 00                	mov    (%eax),%eax
f013119f:	8d 50 04             	lea    0x4(%eax),%edx
f01311a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01311a5:	89 10                	mov    %edx,(%eax)
f01311a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01311aa:	8b 00                	mov    (%eax),%eax
f01311ac:	83 e8 04             	sub    $0x4,%eax
f01311af:	8b 00                	mov    (%eax),%eax
f01311b1:	ba 00 00 00 00       	mov    $0x0,%edx
f01311b6:	eb 1c                	jmp    f01311d4 <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f01311b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01311bb:	8b 00                	mov    (%eax),%eax
f01311bd:	8d 50 04             	lea    0x4(%eax),%edx
f01311c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01311c3:	89 10                	mov    %edx,(%eax)
f01311c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01311c8:	8b 00                	mov    (%eax),%eax
f01311ca:	83 e8 04             	sub    $0x4,%eax
f01311cd:	8b 00                	mov    (%eax),%eax
f01311cf:	ba 00 00 00 00       	mov    $0x0,%edx
}
f01311d4:	5d                   	pop    %ebp
f01311d5:	c3                   	ret    

f01311d6 <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f01311d6:	55                   	push   %ebp
f01311d7:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f01311d9:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f01311dd:	7e 1c                	jle    f01311fb <getint+0x25>
		return va_arg(*ap, long long);
f01311df:	8b 45 08             	mov    0x8(%ebp),%eax
f01311e2:	8b 00                	mov    (%eax),%eax
f01311e4:	8d 50 08             	lea    0x8(%eax),%edx
f01311e7:	8b 45 08             	mov    0x8(%ebp),%eax
f01311ea:	89 10                	mov    %edx,(%eax)
f01311ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01311ef:	8b 00                	mov    (%eax),%eax
f01311f1:	83 e8 08             	sub    $0x8,%eax
f01311f4:	8b 50 04             	mov    0x4(%eax),%edx
f01311f7:	8b 00                	mov    (%eax),%eax
f01311f9:	eb 38                	jmp    f0131233 <getint+0x5d>
	else if (lflag)
f01311fb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01311ff:	74 1a                	je     f013121b <getint+0x45>
		return va_arg(*ap, long);
f0131201:	8b 45 08             	mov    0x8(%ebp),%eax
f0131204:	8b 00                	mov    (%eax),%eax
f0131206:	8d 50 04             	lea    0x4(%eax),%edx
f0131209:	8b 45 08             	mov    0x8(%ebp),%eax
f013120c:	89 10                	mov    %edx,(%eax)
f013120e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131211:	8b 00                	mov    (%eax),%eax
f0131213:	83 e8 04             	sub    $0x4,%eax
f0131216:	8b 00                	mov    (%eax),%eax
f0131218:	99                   	cltd   
f0131219:	eb 18                	jmp    f0131233 <getint+0x5d>
	else
		return va_arg(*ap, int);
f013121b:	8b 45 08             	mov    0x8(%ebp),%eax
f013121e:	8b 00                	mov    (%eax),%eax
f0131220:	8d 50 04             	lea    0x4(%eax),%edx
f0131223:	8b 45 08             	mov    0x8(%ebp),%eax
f0131226:	89 10                	mov    %edx,(%eax)
f0131228:	8b 45 08             	mov    0x8(%ebp),%eax
f013122b:	8b 00                	mov    (%eax),%eax
f013122d:	83 e8 04             	sub    $0x4,%eax
f0131230:	8b 00                	mov    (%eax),%eax
f0131232:	99                   	cltd   
}
f0131233:	5d                   	pop    %ebp
f0131234:	c3                   	ret    

f0131235 <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f0131235:	55                   	push   %ebp
f0131236:	89 e5                	mov    %esp,%ebp
f0131238:	56                   	push   %esi
f0131239:	53                   	push   %ebx
f013123a:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f013123d:	eb 17                	jmp    f0131256 <vprintfmt+0x21>
			if (ch == '\0')
f013123f:	85 db                	test   %ebx,%ebx
f0131241:	0f 84 af 03 00 00    	je     f01315f6 <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f0131247:	83 ec 08             	sub    $0x8,%esp
f013124a:	ff 75 0c             	pushl  0xc(%ebp)
f013124d:	53                   	push   %ebx
f013124e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131251:	ff d0                	call   *%eax
f0131253:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0131256:	8b 45 10             	mov    0x10(%ebp),%eax
f0131259:	8d 50 01             	lea    0x1(%eax),%edx
f013125c:	89 55 10             	mov    %edx,0x10(%ebp)
f013125f:	8a 00                	mov    (%eax),%al
f0131261:	0f b6 d8             	movzbl %al,%ebx
f0131264:	83 fb 25             	cmp    $0x25,%ebx
f0131267:	75 d6                	jne    f013123f <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f0131269:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f013126d:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f0131274:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f013127b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f0131282:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f0131289:	8b 45 10             	mov    0x10(%ebp),%eax
f013128c:	8d 50 01             	lea    0x1(%eax),%edx
f013128f:	89 55 10             	mov    %edx,0x10(%ebp)
f0131292:	8a 00                	mov    (%eax),%al
f0131294:	0f b6 d8             	movzbl %al,%ebx
f0131297:	8d 43 dd             	lea    -0x23(%ebx),%eax
f013129a:	83 f8 55             	cmp    $0x55,%eax
f013129d:	0f 87 2b 03 00 00    	ja     f01315ce <vprintfmt+0x399>
f01312a3:	8b 04 85 78 d9 13 f0 	mov    -0xfec2688(,%eax,4),%eax
f01312aa:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f01312ac:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f01312b0:	eb d7                	jmp    f0131289 <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f01312b2:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f01312b6:	eb d1                	jmp    f0131289 <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f01312b8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f01312bf:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01312c2:	89 d0                	mov    %edx,%eax
f01312c4:	c1 e0 02             	shl    $0x2,%eax
f01312c7:	01 d0                	add    %edx,%eax
f01312c9:	01 c0                	add    %eax,%eax
f01312cb:	01 d8                	add    %ebx,%eax
f01312cd:	83 e8 30             	sub    $0x30,%eax
f01312d0:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f01312d3:	8b 45 10             	mov    0x10(%ebp),%eax
f01312d6:	8a 00                	mov    (%eax),%al
f01312d8:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f01312db:	83 fb 2f             	cmp    $0x2f,%ebx
f01312de:	7e 3e                	jle    f013131e <vprintfmt+0xe9>
f01312e0:	83 fb 39             	cmp    $0x39,%ebx
f01312e3:	7f 39                	jg     f013131e <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f01312e5:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f01312e8:	eb d5                	jmp    f01312bf <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f01312ea:	8b 45 14             	mov    0x14(%ebp),%eax
f01312ed:	83 c0 04             	add    $0x4,%eax
f01312f0:	89 45 14             	mov    %eax,0x14(%ebp)
f01312f3:	8b 45 14             	mov    0x14(%ebp),%eax
f01312f6:	83 e8 04             	sub    $0x4,%eax
f01312f9:	8b 00                	mov    (%eax),%eax
f01312fb:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f01312fe:	eb 1f                	jmp    f013131f <vprintfmt+0xea>

		case '.':
			if (width < 0)
f0131300:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0131304:	79 83                	jns    f0131289 <vprintfmt+0x54>
				width = 0;
f0131306:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f013130d:	e9 77 ff ff ff       	jmp    f0131289 <vprintfmt+0x54>

		case '#':
			altflag = 1;
f0131312:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f0131319:	e9 6b ff ff ff       	jmp    f0131289 <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f013131e:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f013131f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0131323:	0f 89 60 ff ff ff    	jns    f0131289 <vprintfmt+0x54>
				width = precision, precision = -1;
f0131329:	8b 45 e0             	mov    -0x20(%ebp),%eax
f013132c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f013132f:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f0131336:	e9 4e ff ff ff       	jmp    f0131289 <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f013133b:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f013133e:	e9 46 ff ff ff       	jmp    f0131289 <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f0131343:	8b 45 14             	mov    0x14(%ebp),%eax
f0131346:	83 c0 04             	add    $0x4,%eax
f0131349:	89 45 14             	mov    %eax,0x14(%ebp)
f013134c:	8b 45 14             	mov    0x14(%ebp),%eax
f013134f:	83 e8 04             	sub    $0x4,%eax
f0131352:	8b 00                	mov    (%eax),%eax
f0131354:	83 ec 08             	sub    $0x8,%esp
f0131357:	ff 75 0c             	pushl  0xc(%ebp)
f013135a:	50                   	push   %eax
f013135b:	8b 45 08             	mov    0x8(%ebp),%eax
f013135e:	ff d0                	call   *%eax
f0131360:	83 c4 10             	add    $0x10,%esp
			break;
f0131363:	e9 89 02 00 00       	jmp    f01315f1 <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f0131368:	8b 45 14             	mov    0x14(%ebp),%eax
f013136b:	83 c0 04             	add    $0x4,%eax
f013136e:	89 45 14             	mov    %eax,0x14(%ebp)
f0131371:	8b 45 14             	mov    0x14(%ebp),%eax
f0131374:	83 e8 04             	sub    $0x4,%eax
f0131377:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f0131379:	85 db                	test   %ebx,%ebx
f013137b:	79 02                	jns    f013137f <vprintfmt+0x14a>
				err = -err;
f013137d:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f013137f:	83 fb 64             	cmp    $0x64,%ebx
f0131382:	7f 0b                	jg     f013138f <vprintfmt+0x15a>
f0131384:	8b 34 9d c0 d7 13 f0 	mov    -0xfec2840(,%ebx,4),%esi
f013138b:	85 f6                	test   %esi,%esi
f013138d:	75 19                	jne    f01313a8 <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f013138f:	53                   	push   %ebx
f0131390:	68 65 d9 13 f0       	push   $0xf013d965
f0131395:	ff 75 0c             	pushl  0xc(%ebp)
f0131398:	ff 75 08             	pushl  0x8(%ebp)
f013139b:	e8 5e 02 00 00       	call   f01315fe <printfmt>
f01313a0:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f01313a3:	e9 49 02 00 00       	jmp    f01315f1 <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f01313a8:	56                   	push   %esi
f01313a9:	68 6e d9 13 f0       	push   $0xf013d96e
f01313ae:	ff 75 0c             	pushl  0xc(%ebp)
f01313b1:	ff 75 08             	pushl  0x8(%ebp)
f01313b4:	e8 45 02 00 00       	call   f01315fe <printfmt>
f01313b9:	83 c4 10             	add    $0x10,%esp
			break;
f01313bc:	e9 30 02 00 00       	jmp    f01315f1 <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f01313c1:	8b 45 14             	mov    0x14(%ebp),%eax
f01313c4:	83 c0 04             	add    $0x4,%eax
f01313c7:	89 45 14             	mov    %eax,0x14(%ebp)
f01313ca:	8b 45 14             	mov    0x14(%ebp),%eax
f01313cd:	83 e8 04             	sub    $0x4,%eax
f01313d0:	8b 30                	mov    (%eax),%esi
f01313d2:	85 f6                	test   %esi,%esi
f01313d4:	75 05                	jne    f01313db <vprintfmt+0x1a6>
				p = "(null)";
f01313d6:	be 71 d9 13 f0       	mov    $0xf013d971,%esi
			if (width > 0 && padc != '-')
f01313db:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01313df:	7e 6d                	jle    f013144e <vprintfmt+0x219>
f01313e1:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f01313e5:	74 67                	je     f013144e <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f01313e7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01313ea:	83 ec 08             	sub    $0x8,%esp
f01313ed:	50                   	push   %eax
f01313ee:	56                   	push   %esi
f01313ef:	e8 12 05 00 00       	call   f0131906 <strnlen>
f01313f4:	83 c4 10             	add    $0x10,%esp
f01313f7:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f01313fa:	eb 16                	jmp    f0131412 <vprintfmt+0x1dd>
					putch(padc, putdat);
f01313fc:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f0131400:	83 ec 08             	sub    $0x8,%esp
f0131403:	ff 75 0c             	pushl  0xc(%ebp)
f0131406:	50                   	push   %eax
f0131407:	8b 45 08             	mov    0x8(%ebp),%eax
f013140a:	ff d0                	call   *%eax
f013140c:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f013140f:	ff 4d e4             	decl   -0x1c(%ebp)
f0131412:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0131416:	7f e4                	jg     f01313fc <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f0131418:	eb 34                	jmp    f013144e <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f013141a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f013141e:	74 1c                	je     f013143c <vprintfmt+0x207>
f0131420:	83 fb 1f             	cmp    $0x1f,%ebx
f0131423:	7e 05                	jle    f013142a <vprintfmt+0x1f5>
f0131425:	83 fb 7e             	cmp    $0x7e,%ebx
f0131428:	7e 12                	jle    f013143c <vprintfmt+0x207>
					putch('?', putdat);
f013142a:	83 ec 08             	sub    $0x8,%esp
f013142d:	ff 75 0c             	pushl  0xc(%ebp)
f0131430:	6a 3f                	push   $0x3f
f0131432:	8b 45 08             	mov    0x8(%ebp),%eax
f0131435:	ff d0                	call   *%eax
f0131437:	83 c4 10             	add    $0x10,%esp
f013143a:	eb 0f                	jmp    f013144b <vprintfmt+0x216>
				else
					putch(ch, putdat);
f013143c:	83 ec 08             	sub    $0x8,%esp
f013143f:	ff 75 0c             	pushl  0xc(%ebp)
f0131442:	53                   	push   %ebx
f0131443:	8b 45 08             	mov    0x8(%ebp),%eax
f0131446:	ff d0                	call   *%eax
f0131448:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f013144b:	ff 4d e4             	decl   -0x1c(%ebp)
f013144e:	89 f0                	mov    %esi,%eax
f0131450:	8d 70 01             	lea    0x1(%eax),%esi
f0131453:	8a 00                	mov    (%eax),%al
f0131455:	0f be d8             	movsbl %al,%ebx
f0131458:	85 db                	test   %ebx,%ebx
f013145a:	74 24                	je     f0131480 <vprintfmt+0x24b>
f013145c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0131460:	78 b8                	js     f013141a <vprintfmt+0x1e5>
f0131462:	ff 4d e0             	decl   -0x20(%ebp)
f0131465:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0131469:	79 af                	jns    f013141a <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f013146b:	eb 13                	jmp    f0131480 <vprintfmt+0x24b>
				putch(' ', putdat);
f013146d:	83 ec 08             	sub    $0x8,%esp
f0131470:	ff 75 0c             	pushl  0xc(%ebp)
f0131473:	6a 20                	push   $0x20
f0131475:	8b 45 08             	mov    0x8(%ebp),%eax
f0131478:	ff d0                	call   *%eax
f013147a:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f013147d:	ff 4d e4             	decl   -0x1c(%ebp)
f0131480:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0131484:	7f e7                	jg     f013146d <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f0131486:	e9 66 01 00 00       	jmp    f01315f1 <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f013148b:	83 ec 08             	sub    $0x8,%esp
f013148e:	ff 75 e8             	pushl  -0x18(%ebp)
f0131491:	8d 45 14             	lea    0x14(%ebp),%eax
f0131494:	50                   	push   %eax
f0131495:	e8 3c fd ff ff       	call   f01311d6 <getint>
f013149a:	83 c4 10             	add    $0x10,%esp
f013149d:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01314a0:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f01314a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01314a6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01314a9:	85 d2                	test   %edx,%edx
f01314ab:	79 23                	jns    f01314d0 <vprintfmt+0x29b>
				putch('-', putdat);
f01314ad:	83 ec 08             	sub    $0x8,%esp
f01314b0:	ff 75 0c             	pushl  0xc(%ebp)
f01314b3:	6a 2d                	push   $0x2d
f01314b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01314b8:	ff d0                	call   *%eax
f01314ba:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f01314bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01314c0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01314c3:	f7 d8                	neg    %eax
f01314c5:	83 d2 00             	adc    $0x0,%edx
f01314c8:	f7 da                	neg    %edx
f01314ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01314cd:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f01314d0:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f01314d7:	e9 bc 00 00 00       	jmp    f0131598 <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f01314dc:	83 ec 08             	sub    $0x8,%esp
f01314df:	ff 75 e8             	pushl  -0x18(%ebp)
f01314e2:	8d 45 14             	lea    0x14(%ebp),%eax
f01314e5:	50                   	push   %eax
f01314e6:	e8 84 fc ff ff       	call   f013116f <getuint>
f01314eb:	83 c4 10             	add    $0x10,%esp
f01314ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01314f1:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f01314f4:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f01314fb:	e9 98 00 00 00       	jmp    f0131598 <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f0131500:	83 ec 08             	sub    $0x8,%esp
f0131503:	ff 75 0c             	pushl  0xc(%ebp)
f0131506:	6a 58                	push   $0x58
f0131508:	8b 45 08             	mov    0x8(%ebp),%eax
f013150b:	ff d0                	call   *%eax
f013150d:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f0131510:	83 ec 08             	sub    $0x8,%esp
f0131513:	ff 75 0c             	pushl  0xc(%ebp)
f0131516:	6a 58                	push   $0x58
f0131518:	8b 45 08             	mov    0x8(%ebp),%eax
f013151b:	ff d0                	call   *%eax
f013151d:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f0131520:	83 ec 08             	sub    $0x8,%esp
f0131523:	ff 75 0c             	pushl  0xc(%ebp)
f0131526:	6a 58                	push   $0x58
f0131528:	8b 45 08             	mov    0x8(%ebp),%eax
f013152b:	ff d0                	call   *%eax
f013152d:	83 c4 10             	add    $0x10,%esp
			break;
f0131530:	e9 bc 00 00 00       	jmp    f01315f1 <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f0131535:	83 ec 08             	sub    $0x8,%esp
f0131538:	ff 75 0c             	pushl  0xc(%ebp)
f013153b:	6a 30                	push   $0x30
f013153d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131540:	ff d0                	call   *%eax
f0131542:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f0131545:	83 ec 08             	sub    $0x8,%esp
f0131548:	ff 75 0c             	pushl  0xc(%ebp)
f013154b:	6a 78                	push   $0x78
f013154d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131550:	ff d0                	call   *%eax
f0131552:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f0131555:	8b 45 14             	mov    0x14(%ebp),%eax
f0131558:	83 c0 04             	add    $0x4,%eax
f013155b:	89 45 14             	mov    %eax,0x14(%ebp)
f013155e:	8b 45 14             	mov    0x14(%ebp),%eax
f0131561:	83 e8 04             	sub    $0x4,%eax
f0131564:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f0131566:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0131569:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f0131570:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f0131577:	eb 1f                	jmp    f0131598 <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f0131579:	83 ec 08             	sub    $0x8,%esp
f013157c:	ff 75 e8             	pushl  -0x18(%ebp)
f013157f:	8d 45 14             	lea    0x14(%ebp),%eax
f0131582:	50                   	push   %eax
f0131583:	e8 e7 fb ff ff       	call   f013116f <getuint>
f0131588:	83 c4 10             	add    $0x10,%esp
f013158b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f013158e:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f0131591:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f0131598:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f013159c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013159f:	83 ec 04             	sub    $0x4,%esp
f01315a2:	52                   	push   %edx
f01315a3:	ff 75 e4             	pushl  -0x1c(%ebp)
f01315a6:	50                   	push   %eax
f01315a7:	ff 75 f4             	pushl  -0xc(%ebp)
f01315aa:	ff 75 f0             	pushl  -0x10(%ebp)
f01315ad:	ff 75 0c             	pushl  0xc(%ebp)
f01315b0:	ff 75 08             	pushl  0x8(%ebp)
f01315b3:	e8 00 fb ff ff       	call   f01310b8 <printnum>
f01315b8:	83 c4 20             	add    $0x20,%esp
			break;
f01315bb:	eb 34                	jmp    f01315f1 <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f01315bd:	83 ec 08             	sub    $0x8,%esp
f01315c0:	ff 75 0c             	pushl  0xc(%ebp)
f01315c3:	53                   	push   %ebx
f01315c4:	8b 45 08             	mov    0x8(%ebp),%eax
f01315c7:	ff d0                	call   *%eax
f01315c9:	83 c4 10             	add    $0x10,%esp
			break;
f01315cc:	eb 23                	jmp    f01315f1 <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f01315ce:	83 ec 08             	sub    $0x8,%esp
f01315d1:	ff 75 0c             	pushl  0xc(%ebp)
f01315d4:	6a 25                	push   $0x25
f01315d6:	8b 45 08             	mov    0x8(%ebp),%eax
f01315d9:	ff d0                	call   *%eax
f01315db:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f01315de:	ff 4d 10             	decl   0x10(%ebp)
f01315e1:	eb 03                	jmp    f01315e6 <vprintfmt+0x3b1>
f01315e3:	ff 4d 10             	decl   0x10(%ebp)
f01315e6:	8b 45 10             	mov    0x10(%ebp),%eax
f01315e9:	48                   	dec    %eax
f01315ea:	8a 00                	mov    (%eax),%al
f01315ec:	3c 25                	cmp    $0x25,%al
f01315ee:	75 f3                	jne    f01315e3 <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f01315f0:	90                   	nop
		}
	}
f01315f1:	e9 47 fc ff ff       	jmp    f013123d <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f01315f6:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f01315f7:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01315fa:	5b                   	pop    %ebx
f01315fb:	5e                   	pop    %esi
f01315fc:	5d                   	pop    %ebp
f01315fd:	c3                   	ret    

f01315fe <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f01315fe:	55                   	push   %ebp
f01315ff:	89 e5                	mov    %esp,%ebp
f0131601:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0131604:	8d 45 10             	lea    0x10(%ebp),%eax
f0131607:	83 c0 04             	add    $0x4,%eax
f013160a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f013160d:	8b 45 10             	mov    0x10(%ebp),%eax
f0131610:	ff 75 f4             	pushl  -0xc(%ebp)
f0131613:	50                   	push   %eax
f0131614:	ff 75 0c             	pushl  0xc(%ebp)
f0131617:	ff 75 08             	pushl  0x8(%ebp)
f013161a:	e8 16 fc ff ff       	call   f0131235 <vprintfmt>
f013161f:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f0131622:	90                   	nop
f0131623:	c9                   	leave  
f0131624:	c3                   	ret    

f0131625 <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f0131625:	55                   	push   %ebp
f0131626:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f0131628:	8b 45 0c             	mov    0xc(%ebp),%eax
f013162b:	8b 40 08             	mov    0x8(%eax),%eax
f013162e:	8d 50 01             	lea    0x1(%eax),%edx
f0131631:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131634:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f0131637:	8b 45 0c             	mov    0xc(%ebp),%eax
f013163a:	8b 10                	mov    (%eax),%edx
f013163c:	8b 45 0c             	mov    0xc(%ebp),%eax
f013163f:	8b 40 04             	mov    0x4(%eax),%eax
f0131642:	39 c2                	cmp    %eax,%edx
f0131644:	73 12                	jae    f0131658 <sprintputch+0x33>
		*b->buf++ = ch;
f0131646:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131649:	8b 00                	mov    (%eax),%eax
f013164b:	8d 48 01             	lea    0x1(%eax),%ecx
f013164e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0131651:	89 0a                	mov    %ecx,(%edx)
f0131653:	8b 55 08             	mov    0x8(%ebp),%edx
f0131656:	88 10                	mov    %dl,(%eax)
}
f0131658:	90                   	nop
f0131659:	5d                   	pop    %ebp
f013165a:	c3                   	ret    

f013165b <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f013165b:	55                   	push   %ebp
f013165c:	89 e5                	mov    %esp,%ebp
f013165e:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f0131661:	8b 45 08             	mov    0x8(%ebp),%eax
f0131664:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0131667:	8b 45 0c             	mov    0xc(%ebp),%eax
f013166a:	8d 50 ff             	lea    -0x1(%eax),%edx
f013166d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131670:	01 d0                	add    %edx,%eax
f0131672:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0131675:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f013167c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131680:	74 06                	je     f0131688 <vsnprintf+0x2d>
f0131682:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0131686:	7f 07                	jg     f013168f <vsnprintf+0x34>
		return -E_INVAL;
f0131688:	b8 03 00 00 00       	mov    $0x3,%eax
f013168d:	eb 20                	jmp    f01316af <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f013168f:	ff 75 14             	pushl  0x14(%ebp)
f0131692:	ff 75 10             	pushl  0x10(%ebp)
f0131695:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0131698:	50                   	push   %eax
f0131699:	68 25 16 13 f0       	push   $0xf0131625
f013169e:	e8 92 fb ff ff       	call   f0131235 <vprintfmt>
f01316a3:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f01316a6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01316a9:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f01316ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01316af:	c9                   	leave  
f01316b0:	c3                   	ret    

f01316b1 <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f01316b1:	55                   	push   %ebp
f01316b2:	89 e5                	mov    %esp,%ebp
f01316b4:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f01316b7:	8d 45 10             	lea    0x10(%ebp),%eax
f01316ba:	83 c0 04             	add    $0x4,%eax
f01316bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f01316c0:	8b 45 10             	mov    0x10(%ebp),%eax
f01316c3:	ff 75 f4             	pushl  -0xc(%ebp)
f01316c6:	50                   	push   %eax
f01316c7:	ff 75 0c             	pushl  0xc(%ebp)
f01316ca:	ff 75 08             	pushl  0x8(%ebp)
f01316cd:	e8 89 ff ff ff       	call   f013165b <vsnprintf>
f01316d2:	83 c4 10             	add    $0x10,%esp
f01316d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f01316d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01316db:	c9                   	leave  
f01316dc:	c3                   	ret    

f01316dd <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f01316dd:	55                   	push   %ebp
f01316de:	89 e5                	mov    %esp,%ebp
f01316e0:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f01316e3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01316e7:	74 13                	je     f01316fc <readline+0x1f>
		cprintf("%s", prompt);
f01316e9:	83 ec 08             	sub    $0x8,%esp
f01316ec:	ff 75 08             	pushl  0x8(%ebp)
f01316ef:	68 d0 da 13 f0       	push   $0xf013dad0
f01316f4:	e8 15 f6 fc ff       	call   f0100d0e <cprintf>
f01316f9:	83 c4 10             	add    $0x10,%esp

	i = 0;
f01316fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f0131703:	83 ec 0c             	sub    $0xc,%esp
f0131706:	6a 00                	push   $0x0
f0131708:	e8 ae f5 fc ff       	call   f0100cbb <iscons>
f013170d:	83 c4 10             	add    $0x10,%esp
f0131710:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f0131713:	e8 8a f5 fc ff       	call   f0100ca2 <getchar>
f0131718:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f013171b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f013171f:	79 22                	jns    f0131743 <readline+0x66>
			if (c != -E_EOF)
f0131721:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f0131725:	0f 84 ad 00 00 00    	je     f01317d8 <readline+0xfb>
				cprintf("read error: %e\n", c);
f013172b:	83 ec 08             	sub    $0x8,%esp
f013172e:	ff 75 ec             	pushl  -0x14(%ebp)
f0131731:	68 d3 da 13 f0       	push   $0xf013dad3
f0131736:	e8 d3 f5 fc ff       	call   f0100d0e <cprintf>
f013173b:	83 c4 10             	add    $0x10,%esp
			return;
f013173e:	e9 95 00 00 00       	jmp    f01317d8 <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f0131743:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f0131747:	7e 34                	jle    f013177d <readline+0xa0>
f0131749:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f0131750:	7f 2b                	jg     f013177d <readline+0xa0>
			if (echoing)
f0131752:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131756:	74 0e                	je     f0131766 <readline+0x89>
				cputchar(c);
f0131758:	83 ec 0c             	sub    $0xc,%esp
f013175b:	ff 75 ec             	pushl  -0x14(%ebp)
f013175e:	e8 28 f5 fc ff       	call   f0100c8b <cputchar>
f0131763:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0131766:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131769:	8d 50 01             	lea    0x1(%eax),%edx
f013176c:	89 55 f4             	mov    %edx,-0xc(%ebp)
f013176f:	89 c2                	mov    %eax,%edx
f0131771:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131774:	01 d0                	add    %edx,%eax
f0131776:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131779:	88 10                	mov    %dl,(%eax)
f013177b:	eb 56                	jmp    f01317d3 <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f013177d:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f0131781:	75 1f                	jne    f01317a2 <readline+0xc5>
f0131783:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131787:	7e 19                	jle    f01317a2 <readline+0xc5>
			if (echoing)
f0131789:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013178d:	74 0e                	je     f013179d <readline+0xc0>
				cputchar(c);
f013178f:	83 ec 0c             	sub    $0xc,%esp
f0131792:	ff 75 ec             	pushl  -0x14(%ebp)
f0131795:	e8 f1 f4 fc ff       	call   f0100c8b <cputchar>
f013179a:	83 c4 10             	add    $0x10,%esp

			i--;
f013179d:	ff 4d f4             	decl   -0xc(%ebp)
f01317a0:	eb 31                	jmp    f01317d3 <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f01317a2:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f01317a6:	74 0a                	je     f01317b2 <readline+0xd5>
f01317a8:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f01317ac:	0f 85 61 ff ff ff    	jne    f0131713 <readline+0x36>
			if (echoing)
f01317b2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01317b6:	74 0e                	je     f01317c6 <readline+0xe9>
				cputchar(c);
f01317b8:	83 ec 0c             	sub    $0xc,%esp
f01317bb:	ff 75 ec             	pushl  -0x14(%ebp)
f01317be:	e8 c8 f4 fc ff       	call   f0100c8b <cputchar>
f01317c3:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f01317c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01317c9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01317cc:	01 d0                	add    %edx,%eax
f01317ce:	c6 00 00             	movb   $0x0,(%eax)
			return;
f01317d1:	eb 06                	jmp    f01317d9 <readline+0xfc>
		}
	}
f01317d3:	e9 3b ff ff ff       	jmp    f0131713 <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f01317d8:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f01317d9:	c9                   	leave  
f01317da:	c3                   	ret    

f01317db <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f01317db:	55                   	push   %ebp
f01317dc:	89 e5                	mov    %esp,%ebp
f01317de:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f01317e1:	e8 32 bb fd ff       	call   f010d318 <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f01317e6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01317ea:	74 13                	je     f01317ff <atomic_readline+0x24>
		cprintf("%s", prompt);
f01317ec:	83 ec 08             	sub    $0x8,%esp
f01317ef:	ff 75 08             	pushl  0x8(%ebp)
f01317f2:	68 d0 da 13 f0       	push   $0xf013dad0
f01317f7:	e8 12 f5 fc ff       	call   f0100d0e <cprintf>
f01317fc:	83 c4 10             	add    $0x10,%esp

	i = 0;
f01317ff:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f0131806:	83 ec 0c             	sub    $0xc,%esp
f0131809:	6a 00                	push   $0x0
f013180b:	e8 ab f4 fc ff       	call   f0100cbb <iscons>
f0131810:	83 c4 10             	add    $0x10,%esp
f0131813:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f0131816:	e8 87 f4 fc ff       	call   f0100ca2 <getchar>
f013181b:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f013181e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0131822:	79 23                	jns    f0131847 <atomic_readline+0x6c>
			if (c != -E_EOF)
f0131824:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f0131828:	74 13                	je     f013183d <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f013182a:	83 ec 08             	sub    $0x8,%esp
f013182d:	ff 75 ec             	pushl  -0x14(%ebp)
f0131830:	68 d3 da 13 f0       	push   $0xf013dad3
f0131835:	e8 d4 f4 fc ff       	call   f0100d0e <cprintf>
f013183a:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f013183d:	e8 f0 ba fd ff       	call   f010d332 <sys_enable_interrupt>
			return;
f0131842:	e9 9a 00 00 00       	jmp    f01318e1 <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f0131847:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f013184b:	7e 34                	jle    f0131881 <atomic_readline+0xa6>
f013184d:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f0131854:	7f 2b                	jg     f0131881 <atomic_readline+0xa6>
			if (echoing)
f0131856:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013185a:	74 0e                	je     f013186a <atomic_readline+0x8f>
				cputchar(c);
f013185c:	83 ec 0c             	sub    $0xc,%esp
f013185f:	ff 75 ec             	pushl  -0x14(%ebp)
f0131862:	e8 24 f4 fc ff       	call   f0100c8b <cputchar>
f0131867:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f013186a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013186d:	8d 50 01             	lea    0x1(%eax),%edx
f0131870:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0131873:	89 c2                	mov    %eax,%edx
f0131875:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131878:	01 d0                	add    %edx,%eax
f013187a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f013187d:	88 10                	mov    %dl,(%eax)
f013187f:	eb 5b                	jmp    f01318dc <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f0131881:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f0131885:	75 1f                	jne    f01318a6 <atomic_readline+0xcb>
f0131887:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013188b:	7e 19                	jle    f01318a6 <atomic_readline+0xcb>
			if (echoing)
f013188d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131891:	74 0e                	je     f01318a1 <atomic_readline+0xc6>
				cputchar(c);
f0131893:	83 ec 0c             	sub    $0xc,%esp
f0131896:	ff 75 ec             	pushl  -0x14(%ebp)
f0131899:	e8 ed f3 fc ff       	call   f0100c8b <cputchar>
f013189e:	83 c4 10             	add    $0x10,%esp
			i--;
f01318a1:	ff 4d f4             	decl   -0xc(%ebp)
f01318a4:	eb 36                	jmp    f01318dc <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f01318a6:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f01318aa:	74 0a                	je     f01318b6 <atomic_readline+0xdb>
f01318ac:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f01318b0:	0f 85 60 ff ff ff    	jne    f0131816 <atomic_readline+0x3b>
			if (echoing)
f01318b6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01318ba:	74 0e                	je     f01318ca <atomic_readline+0xef>
				cputchar(c);
f01318bc:	83 ec 0c             	sub    $0xc,%esp
f01318bf:	ff 75 ec             	pushl  -0x14(%ebp)
f01318c2:	e8 c4 f3 fc ff       	call   f0100c8b <cputchar>
f01318c7:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f01318ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01318cd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01318d0:	01 d0                	add    %edx,%eax
f01318d2:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f01318d5:	e8 58 ba fd ff       	call   f010d332 <sys_enable_interrupt>
			return;
f01318da:	eb 05                	jmp    f01318e1 <atomic_readline+0x106>
		}
	}
f01318dc:	e9 35 ff ff ff       	jmp    f0131816 <atomic_readline+0x3b>
}
f01318e1:	c9                   	leave  
f01318e2:	c3                   	ret    

f01318e3 <strlen>:

#include <inc/string.h>

int
strlen(const char *s)
{
f01318e3:	55                   	push   %ebp
f01318e4:	89 e5                	mov    %esp,%ebp
f01318e6:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f01318e9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01318f0:	eb 06                	jmp    f01318f8 <strlen+0x15>
		n++;
f01318f2:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f01318f5:	ff 45 08             	incl   0x8(%ebp)
f01318f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01318fb:	8a 00                	mov    (%eax),%al
f01318fd:	84 c0                	test   %al,%al
f01318ff:	75 f1                	jne    f01318f2 <strlen+0xf>
		n++;
	return n;
f0131901:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0131904:	c9                   	leave  
f0131905:	c3                   	ret    

f0131906 <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f0131906:	55                   	push   %ebp
f0131907:	89 e5                	mov    %esp,%ebp
f0131909:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f013190c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0131913:	eb 09                	jmp    f013191e <strnlen+0x18>
		n++;
f0131915:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f0131918:	ff 45 08             	incl   0x8(%ebp)
f013191b:	ff 4d 0c             	decl   0xc(%ebp)
f013191e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0131922:	74 09                	je     f013192d <strnlen+0x27>
f0131924:	8b 45 08             	mov    0x8(%ebp),%eax
f0131927:	8a 00                	mov    (%eax),%al
f0131929:	84 c0                	test   %al,%al
f013192b:	75 e8                	jne    f0131915 <strnlen+0xf>
		n++;
	return n;
f013192d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0131930:	c9                   	leave  
f0131931:	c3                   	ret    

f0131932 <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f0131932:	55                   	push   %ebp
f0131933:	89 e5                	mov    %esp,%ebp
f0131935:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f0131938:	8b 45 08             	mov    0x8(%ebp),%eax
f013193b:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f013193e:	90                   	nop
f013193f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131942:	8d 50 01             	lea    0x1(%eax),%edx
f0131945:	89 55 08             	mov    %edx,0x8(%ebp)
f0131948:	8b 55 0c             	mov    0xc(%ebp),%edx
f013194b:	8d 4a 01             	lea    0x1(%edx),%ecx
f013194e:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0131951:	8a 12                	mov    (%edx),%dl
f0131953:	88 10                	mov    %dl,(%eax)
f0131955:	8a 00                	mov    (%eax),%al
f0131957:	84 c0                	test   %al,%al
f0131959:	75 e4                	jne    f013193f <strcpy+0xd>
		/* do nothing */;
	return ret;
f013195b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f013195e:	c9                   	leave  
f013195f:	c3                   	ret    

f0131960 <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f0131960:	55                   	push   %ebp
f0131961:	89 e5                	mov    %esp,%ebp
f0131963:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f0131966:	8b 45 08             	mov    0x8(%ebp),%eax
f0131969:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f013196c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0131973:	eb 1f                	jmp    f0131994 <strncpy+0x34>
		*dst++ = *src;
f0131975:	8b 45 08             	mov    0x8(%ebp),%eax
f0131978:	8d 50 01             	lea    0x1(%eax),%edx
f013197b:	89 55 08             	mov    %edx,0x8(%ebp)
f013197e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0131981:	8a 12                	mov    (%edx),%dl
f0131983:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f0131985:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131988:	8a 00                	mov    (%eax),%al
f013198a:	84 c0                	test   %al,%al
f013198c:	74 03                	je     f0131991 <strncpy+0x31>
			src++;
f013198e:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f0131991:	ff 45 fc             	incl   -0x4(%ebp)
f0131994:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131997:	3b 45 10             	cmp    0x10(%ebp),%eax
f013199a:	72 d9                	jb     f0131975 <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f013199c:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f013199f:	c9                   	leave  
f01319a0:	c3                   	ret    

f01319a1 <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f01319a1:	55                   	push   %ebp
f01319a2:	89 e5                	mov    %esp,%ebp
f01319a4:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f01319a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01319aa:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f01319ad:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01319b1:	74 30                	je     f01319e3 <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f01319b3:	eb 16                	jmp    f01319cb <strlcpy+0x2a>
			*dst++ = *src++;
f01319b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01319b8:	8d 50 01             	lea    0x1(%eax),%edx
f01319bb:	89 55 08             	mov    %edx,0x8(%ebp)
f01319be:	8b 55 0c             	mov    0xc(%ebp),%edx
f01319c1:	8d 4a 01             	lea    0x1(%edx),%ecx
f01319c4:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f01319c7:	8a 12                	mov    (%edx),%dl
f01319c9:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f01319cb:	ff 4d 10             	decl   0x10(%ebp)
f01319ce:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01319d2:	74 09                	je     f01319dd <strlcpy+0x3c>
f01319d4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01319d7:	8a 00                	mov    (%eax),%al
f01319d9:	84 c0                	test   %al,%al
f01319db:	75 d8                	jne    f01319b5 <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f01319dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01319e0:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f01319e3:	8b 55 08             	mov    0x8(%ebp),%edx
f01319e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01319e9:	29 c2                	sub    %eax,%edx
f01319eb:	89 d0                	mov    %edx,%eax
}
f01319ed:	c9                   	leave  
f01319ee:	c3                   	ret    

f01319ef <strcmp>:

int
strcmp(const char *p, const char *q)
{
f01319ef:	55                   	push   %ebp
f01319f0:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f01319f2:	eb 06                	jmp    f01319fa <strcmp+0xb>
		p++, q++;
f01319f4:	ff 45 08             	incl   0x8(%ebp)
f01319f7:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f01319fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01319fd:	8a 00                	mov    (%eax),%al
f01319ff:	84 c0                	test   %al,%al
f0131a01:	74 0e                	je     f0131a11 <strcmp+0x22>
f0131a03:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a06:	8a 10                	mov    (%eax),%dl
f0131a08:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131a0b:	8a 00                	mov    (%eax),%al
f0131a0d:	38 c2                	cmp    %al,%dl
f0131a0f:	74 e3                	je     f01319f4 <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f0131a11:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a14:	8a 00                	mov    (%eax),%al
f0131a16:	0f b6 d0             	movzbl %al,%edx
f0131a19:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131a1c:	8a 00                	mov    (%eax),%al
f0131a1e:	0f b6 c0             	movzbl %al,%eax
f0131a21:	29 c2                	sub    %eax,%edx
f0131a23:	89 d0                	mov    %edx,%eax
}
f0131a25:	5d                   	pop    %ebp
f0131a26:	c3                   	ret    

f0131a27 <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f0131a27:	55                   	push   %ebp
f0131a28:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f0131a2a:	eb 09                	jmp    f0131a35 <strncmp+0xe>
		n--, p++, q++;
f0131a2c:	ff 4d 10             	decl   0x10(%ebp)
f0131a2f:	ff 45 08             	incl   0x8(%ebp)
f0131a32:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f0131a35:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131a39:	74 17                	je     f0131a52 <strncmp+0x2b>
f0131a3b:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a3e:	8a 00                	mov    (%eax),%al
f0131a40:	84 c0                	test   %al,%al
f0131a42:	74 0e                	je     f0131a52 <strncmp+0x2b>
f0131a44:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a47:	8a 10                	mov    (%eax),%dl
f0131a49:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131a4c:	8a 00                	mov    (%eax),%al
f0131a4e:	38 c2                	cmp    %al,%dl
f0131a50:	74 da                	je     f0131a2c <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f0131a52:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131a56:	75 07                	jne    f0131a5f <strncmp+0x38>
		return 0;
f0131a58:	b8 00 00 00 00       	mov    $0x0,%eax
f0131a5d:	eb 14                	jmp    f0131a73 <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f0131a5f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a62:	8a 00                	mov    (%eax),%al
f0131a64:	0f b6 d0             	movzbl %al,%edx
f0131a67:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131a6a:	8a 00                	mov    (%eax),%al
f0131a6c:	0f b6 c0             	movzbl %al,%eax
f0131a6f:	29 c2                	sub    %eax,%edx
f0131a71:	89 d0                	mov    %edx,%eax
}
f0131a73:	5d                   	pop    %ebp
f0131a74:	c3                   	ret    

f0131a75 <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f0131a75:	55                   	push   %ebp
f0131a76:	89 e5                	mov    %esp,%ebp
f0131a78:	83 ec 04             	sub    $0x4,%esp
f0131a7b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131a7e:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f0131a81:	eb 12                	jmp    f0131a95 <strchr+0x20>
		if (*s == c)
f0131a83:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a86:	8a 00                	mov    (%eax),%al
f0131a88:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0131a8b:	75 05                	jne    f0131a92 <strchr+0x1d>
			return (char *) s;
f0131a8d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a90:	eb 11                	jmp    f0131aa3 <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f0131a92:	ff 45 08             	incl   0x8(%ebp)
f0131a95:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a98:	8a 00                	mov    (%eax),%al
f0131a9a:	84 c0                	test   %al,%al
f0131a9c:	75 e5                	jne    f0131a83 <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f0131a9e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131aa3:	c9                   	leave  
f0131aa4:	c3                   	ret    

f0131aa5 <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f0131aa5:	55                   	push   %ebp
f0131aa6:	89 e5                	mov    %esp,%ebp
f0131aa8:	83 ec 04             	sub    $0x4,%esp
f0131aab:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131aae:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f0131ab1:	eb 0d                	jmp    f0131ac0 <strfind+0x1b>
		if (*s == c)
f0131ab3:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ab6:	8a 00                	mov    (%eax),%al
f0131ab8:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0131abb:	74 0e                	je     f0131acb <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f0131abd:	ff 45 08             	incl   0x8(%ebp)
f0131ac0:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ac3:	8a 00                	mov    (%eax),%al
f0131ac5:	84 c0                	test   %al,%al
f0131ac7:	75 ea                	jne    f0131ab3 <strfind+0xe>
f0131ac9:	eb 01                	jmp    f0131acc <strfind+0x27>
		if (*s == c)
			break;
f0131acb:	90                   	nop
	return (char *) s;
f0131acc:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131acf:	c9                   	leave  
f0131ad0:	c3                   	ret    

f0131ad1 <memset>:


void *
memset(void *v, int c, uint32 n)
{
f0131ad1:	55                   	push   %ebp
f0131ad2:	89 e5                	mov    %esp,%ebp
f0131ad4:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f0131ad7:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ada:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f0131add:	8b 45 10             	mov    0x10(%ebp),%eax
f0131ae0:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f0131ae3:	eb 0e                	jmp    f0131af3 <memset+0x22>
		*p++ = c;
f0131ae5:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131ae8:	8d 50 01             	lea    0x1(%eax),%edx
f0131aeb:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0131aee:	8b 55 0c             	mov    0xc(%ebp),%edx
f0131af1:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f0131af3:	ff 4d f8             	decl   -0x8(%ebp)
f0131af6:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0131afa:	79 e9                	jns    f0131ae5 <memset+0x14>
		*p++ = c;

	return v;
f0131afc:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131aff:	c9                   	leave  
f0131b00:	c3                   	ret    

f0131b01 <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f0131b01:	55                   	push   %ebp
f0131b02:	89 e5                	mov    %esp,%ebp
f0131b04:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f0131b07:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131b0a:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0131b0d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b10:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f0131b13:	eb 16                	jmp    f0131b2b <memcpy+0x2a>
		*d++ = *s++;
f0131b15:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131b18:	8d 50 01             	lea    0x1(%eax),%edx
f0131b1b:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0131b1e:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131b21:	8d 4a 01             	lea    0x1(%edx),%ecx
f0131b24:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f0131b27:	8a 12                	mov    (%edx),%dl
f0131b29:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f0131b2b:	8b 45 10             	mov    0x10(%ebp),%eax
f0131b2e:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131b31:	89 55 10             	mov    %edx,0x10(%ebp)
f0131b34:	85 c0                	test   %eax,%eax
f0131b36:	75 dd                	jne    f0131b15 <memcpy+0x14>
		*d++ = *s++;

	return dst;
f0131b38:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131b3b:	c9                   	leave  
f0131b3c:	c3                   	ret    

f0131b3d <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f0131b3d:	55                   	push   %ebp
f0131b3e:	89 e5                	mov    %esp,%ebp
f0131b40:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f0131b43:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131b46:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0131b49:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b4c:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f0131b4f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131b52:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0131b55:	73 50                	jae    f0131ba7 <memmove+0x6a>
f0131b57:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131b5a:	8b 45 10             	mov    0x10(%ebp),%eax
f0131b5d:	01 d0                	add    %edx,%eax
f0131b5f:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0131b62:	76 43                	jbe    f0131ba7 <memmove+0x6a>
		s += n;
f0131b64:	8b 45 10             	mov    0x10(%ebp),%eax
f0131b67:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f0131b6a:	8b 45 10             	mov    0x10(%ebp),%eax
f0131b6d:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f0131b70:	eb 10                	jmp    f0131b82 <memmove+0x45>
			*--d = *--s;
f0131b72:	ff 4d f8             	decl   -0x8(%ebp)
f0131b75:	ff 4d fc             	decl   -0x4(%ebp)
f0131b78:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131b7b:	8a 10                	mov    (%eax),%dl
f0131b7d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131b80:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f0131b82:	8b 45 10             	mov    0x10(%ebp),%eax
f0131b85:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131b88:	89 55 10             	mov    %edx,0x10(%ebp)
f0131b8b:	85 c0                	test   %eax,%eax
f0131b8d:	75 e3                	jne    f0131b72 <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f0131b8f:	eb 23                	jmp    f0131bb4 <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f0131b91:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131b94:	8d 50 01             	lea    0x1(%eax),%edx
f0131b97:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0131b9a:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131b9d:	8d 4a 01             	lea    0x1(%edx),%ecx
f0131ba0:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f0131ba3:	8a 12                	mov    (%edx),%dl
f0131ba5:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f0131ba7:	8b 45 10             	mov    0x10(%ebp),%eax
f0131baa:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131bad:	89 55 10             	mov    %edx,0x10(%ebp)
f0131bb0:	85 c0                	test   %eax,%eax
f0131bb2:	75 dd                	jne    f0131b91 <memmove+0x54>
			*d++ = *s++;

	return dst;
f0131bb4:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131bb7:	c9                   	leave  
f0131bb8:	c3                   	ret    

f0131bb9 <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f0131bb9:	55                   	push   %ebp
f0131bba:	89 e5                	mov    %esp,%ebp
f0131bbc:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f0131bbf:	8b 45 08             	mov    0x8(%ebp),%eax
f0131bc2:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f0131bc5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131bc8:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f0131bcb:	eb 2a                	jmp    f0131bf7 <memcmp+0x3e>
		if (*s1 != *s2)
f0131bcd:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131bd0:	8a 10                	mov    (%eax),%dl
f0131bd2:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131bd5:	8a 00                	mov    (%eax),%al
f0131bd7:	38 c2                	cmp    %al,%dl
f0131bd9:	74 16                	je     f0131bf1 <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f0131bdb:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131bde:	8a 00                	mov    (%eax),%al
f0131be0:	0f b6 d0             	movzbl %al,%edx
f0131be3:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131be6:	8a 00                	mov    (%eax),%al
f0131be8:	0f b6 c0             	movzbl %al,%eax
f0131beb:	29 c2                	sub    %eax,%edx
f0131bed:	89 d0                	mov    %edx,%eax
f0131bef:	eb 18                	jmp    f0131c09 <memcmp+0x50>
		s1++, s2++;
f0131bf1:	ff 45 fc             	incl   -0x4(%ebp)
f0131bf4:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f0131bf7:	8b 45 10             	mov    0x10(%ebp),%eax
f0131bfa:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131bfd:	89 55 10             	mov    %edx,0x10(%ebp)
f0131c00:	85 c0                	test   %eax,%eax
f0131c02:	75 c9                	jne    f0131bcd <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f0131c04:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131c09:	c9                   	leave  
f0131c0a:	c3                   	ret    

f0131c0b <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f0131c0b:	55                   	push   %ebp
f0131c0c:	89 e5                	mov    %esp,%ebp
f0131c0e:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f0131c11:	8b 55 08             	mov    0x8(%ebp),%edx
f0131c14:	8b 45 10             	mov    0x10(%ebp),%eax
f0131c17:	01 d0                	add    %edx,%eax
f0131c19:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f0131c1c:	eb 15                	jmp    f0131c33 <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f0131c1e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c21:	8a 00                	mov    (%eax),%al
f0131c23:	0f b6 d0             	movzbl %al,%edx
f0131c26:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131c29:	0f b6 c0             	movzbl %al,%eax
f0131c2c:	39 c2                	cmp    %eax,%edx
f0131c2e:	74 0d                	je     f0131c3d <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f0131c30:	ff 45 08             	incl   0x8(%ebp)
f0131c33:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c36:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f0131c39:	72 e3                	jb     f0131c1e <memfind+0x13>
f0131c3b:	eb 01                	jmp    f0131c3e <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f0131c3d:	90                   	nop
	return (void *) s;
f0131c3e:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131c41:	c9                   	leave  
f0131c42:	c3                   	ret    

f0131c43 <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f0131c43:	55                   	push   %ebp
f0131c44:	89 e5                	mov    %esp,%ebp
f0131c46:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f0131c49:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f0131c50:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0131c57:	eb 03                	jmp    f0131c5c <strtol+0x19>
		s++;
f0131c59:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0131c5c:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c5f:	8a 00                	mov    (%eax),%al
f0131c61:	3c 20                	cmp    $0x20,%al
f0131c63:	74 f4                	je     f0131c59 <strtol+0x16>
f0131c65:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c68:	8a 00                	mov    (%eax),%al
f0131c6a:	3c 09                	cmp    $0x9,%al
f0131c6c:	74 eb                	je     f0131c59 <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f0131c6e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c71:	8a 00                	mov    (%eax),%al
f0131c73:	3c 2b                	cmp    $0x2b,%al
f0131c75:	75 05                	jne    f0131c7c <strtol+0x39>
		s++;
f0131c77:	ff 45 08             	incl   0x8(%ebp)
f0131c7a:	eb 13                	jmp    f0131c8f <strtol+0x4c>
	else if (*s == '-')
f0131c7c:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c7f:	8a 00                	mov    (%eax),%al
f0131c81:	3c 2d                	cmp    $0x2d,%al
f0131c83:	75 0a                	jne    f0131c8f <strtol+0x4c>
		s++, neg = 1;
f0131c85:	ff 45 08             	incl   0x8(%ebp)
f0131c88:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f0131c8f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131c93:	74 06                	je     f0131c9b <strtol+0x58>
f0131c95:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f0131c99:	75 20                	jne    f0131cbb <strtol+0x78>
f0131c9b:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c9e:	8a 00                	mov    (%eax),%al
f0131ca0:	3c 30                	cmp    $0x30,%al
f0131ca2:	75 17                	jne    f0131cbb <strtol+0x78>
f0131ca4:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ca7:	40                   	inc    %eax
f0131ca8:	8a 00                	mov    (%eax),%al
f0131caa:	3c 78                	cmp    $0x78,%al
f0131cac:	75 0d                	jne    f0131cbb <strtol+0x78>
		s += 2, base = 16;
f0131cae:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f0131cb2:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f0131cb9:	eb 28                	jmp    f0131ce3 <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f0131cbb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131cbf:	75 15                	jne    f0131cd6 <strtol+0x93>
f0131cc1:	8b 45 08             	mov    0x8(%ebp),%eax
f0131cc4:	8a 00                	mov    (%eax),%al
f0131cc6:	3c 30                	cmp    $0x30,%al
f0131cc8:	75 0c                	jne    f0131cd6 <strtol+0x93>
		s++, base = 8;
f0131cca:	ff 45 08             	incl   0x8(%ebp)
f0131ccd:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f0131cd4:	eb 0d                	jmp    f0131ce3 <strtol+0xa0>
	else if (base == 0)
f0131cd6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131cda:	75 07                	jne    f0131ce3 <strtol+0xa0>
		base = 10;
f0131cdc:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f0131ce3:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ce6:	8a 00                	mov    (%eax),%al
f0131ce8:	3c 2f                	cmp    $0x2f,%al
f0131cea:	7e 19                	jle    f0131d05 <strtol+0xc2>
f0131cec:	8b 45 08             	mov    0x8(%ebp),%eax
f0131cef:	8a 00                	mov    (%eax),%al
f0131cf1:	3c 39                	cmp    $0x39,%al
f0131cf3:	7f 10                	jg     f0131d05 <strtol+0xc2>
			dig = *s - '0';
f0131cf5:	8b 45 08             	mov    0x8(%ebp),%eax
f0131cf8:	8a 00                	mov    (%eax),%al
f0131cfa:	0f be c0             	movsbl %al,%eax
f0131cfd:	83 e8 30             	sub    $0x30,%eax
f0131d00:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131d03:	eb 42                	jmp    f0131d47 <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f0131d05:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d08:	8a 00                	mov    (%eax),%al
f0131d0a:	3c 60                	cmp    $0x60,%al
f0131d0c:	7e 19                	jle    f0131d27 <strtol+0xe4>
f0131d0e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d11:	8a 00                	mov    (%eax),%al
f0131d13:	3c 7a                	cmp    $0x7a,%al
f0131d15:	7f 10                	jg     f0131d27 <strtol+0xe4>
			dig = *s - 'a' + 10;
f0131d17:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d1a:	8a 00                	mov    (%eax),%al
f0131d1c:	0f be c0             	movsbl %al,%eax
f0131d1f:	83 e8 57             	sub    $0x57,%eax
f0131d22:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131d25:	eb 20                	jmp    f0131d47 <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f0131d27:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d2a:	8a 00                	mov    (%eax),%al
f0131d2c:	3c 40                	cmp    $0x40,%al
f0131d2e:	7e 39                	jle    f0131d69 <strtol+0x126>
f0131d30:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d33:	8a 00                	mov    (%eax),%al
f0131d35:	3c 5a                	cmp    $0x5a,%al
f0131d37:	7f 30                	jg     f0131d69 <strtol+0x126>
			dig = *s - 'A' + 10;
f0131d39:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d3c:	8a 00                	mov    (%eax),%al
f0131d3e:	0f be c0             	movsbl %al,%eax
f0131d41:	83 e8 37             	sub    $0x37,%eax
f0131d44:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f0131d47:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d4a:	3b 45 10             	cmp    0x10(%ebp),%eax
f0131d4d:	7d 19                	jge    f0131d68 <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f0131d4f:	ff 45 08             	incl   0x8(%ebp)
f0131d52:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131d55:	0f af 45 10          	imul   0x10(%ebp),%eax
f0131d59:	89 c2                	mov    %eax,%edx
f0131d5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d5e:	01 d0                	add    %edx,%eax
f0131d60:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f0131d63:	e9 7b ff ff ff       	jmp    f0131ce3 <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f0131d68:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f0131d69:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0131d6d:	74 08                	je     f0131d77 <strtol+0x134>
		*endptr = (char *) s;
f0131d6f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131d72:	8b 55 08             	mov    0x8(%ebp),%edx
f0131d75:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f0131d77:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131d7b:	74 07                	je     f0131d84 <strtol+0x141>
f0131d7d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131d80:	f7 d8                	neg    %eax
f0131d82:	eb 03                	jmp    f0131d87 <strtol+0x144>
f0131d84:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0131d87:	c9                   	leave  
f0131d88:	c3                   	ret    

f0131d89 <ltostr>:

void
ltostr(long value, char *str)
{
f0131d89:	55                   	push   %ebp
f0131d8a:	89 e5                	mov    %esp,%ebp
f0131d8c:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f0131d8f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f0131d96:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f0131d9d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131da1:	79 13                	jns    f0131db6 <ltostr+0x2d>
	{
		neg = 1;
f0131da3:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f0131daa:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131dad:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f0131db0:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f0131db3:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f0131db6:	8b 45 08             	mov    0x8(%ebp),%eax
f0131db9:	b9 0a 00 00 00       	mov    $0xa,%ecx
f0131dbe:	99                   	cltd   
f0131dbf:	f7 f9                	idiv   %ecx
f0131dc1:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f0131dc4:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131dc7:	8d 50 01             	lea    0x1(%eax),%edx
f0131dca:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0131dcd:	89 c2                	mov    %eax,%edx
f0131dcf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131dd2:	01 d0                	add    %edx,%eax
f0131dd4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131dd7:	83 c2 30             	add    $0x30,%edx
f0131dda:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f0131ddc:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0131ddf:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0131de4:	f7 e9                	imul   %ecx
f0131de6:	c1 fa 02             	sar    $0x2,%edx
f0131de9:	89 c8                	mov    %ecx,%eax
f0131deb:	c1 f8 1f             	sar    $0x1f,%eax
f0131dee:	29 c2                	sub    %eax,%edx
f0131df0:	89 d0                	mov    %edx,%eax
f0131df2:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f0131df5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0131df8:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0131dfd:	f7 e9                	imul   %ecx
f0131dff:	c1 fa 02             	sar    $0x2,%edx
f0131e02:	89 c8                	mov    %ecx,%eax
f0131e04:	c1 f8 1f             	sar    $0x1f,%eax
f0131e07:	29 c2                	sub    %eax,%edx
f0131e09:	89 d0                	mov    %edx,%eax
f0131e0b:	c1 e0 02             	shl    $0x2,%eax
f0131e0e:	01 d0                	add    %edx,%eax
f0131e10:	01 c0                	add    %eax,%eax
f0131e12:	29 c1                	sub    %eax,%ecx
f0131e14:	89 ca                	mov    %ecx,%edx
f0131e16:	85 d2                	test   %edx,%edx
f0131e18:	75 9c                	jne    f0131db6 <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f0131e1a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f0131e21:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131e24:	48                   	dec    %eax
f0131e25:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f0131e28:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131e2c:	74 3d                	je     f0131e6b <ltostr+0xe2>
		start = 1 ;
f0131e2e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f0131e35:	eb 34                	jmp    f0131e6b <ltostr+0xe2>
	{
		char tmp = str[start] ;
f0131e37:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131e3a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131e3d:	01 d0                	add    %edx,%eax
f0131e3f:	8a 00                	mov    (%eax),%al
f0131e41:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f0131e44:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131e47:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131e4a:	01 c2                	add    %eax,%edx
f0131e4c:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0131e4f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131e52:	01 c8                	add    %ecx,%eax
f0131e54:	8a 00                	mov    (%eax),%al
f0131e56:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f0131e58:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131e5b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131e5e:	01 c2                	add    %eax,%edx
f0131e60:	8a 45 eb             	mov    -0x15(%ebp),%al
f0131e63:	88 02                	mov    %al,(%edx)
		start++ ;
f0131e65:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f0131e68:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f0131e6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e6e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0131e71:	7c c4                	jl     f0131e37 <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f0131e73:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0131e76:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131e79:	01 d0                	add    %edx,%eax
f0131e7b:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f0131e7e:	90                   	nop
f0131e7f:	c9                   	leave  
f0131e80:	c3                   	ret    

f0131e81 <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f0131e81:	55                   	push   %ebp
f0131e82:	89 e5                	mov    %esp,%ebp
f0131e84:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f0131e87:	ff 75 08             	pushl  0x8(%ebp)
f0131e8a:	e8 54 fa ff ff       	call   f01318e3 <strlen>
f0131e8f:	83 c4 04             	add    $0x4,%esp
f0131e92:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f0131e95:	ff 75 0c             	pushl  0xc(%ebp)
f0131e98:	e8 46 fa ff ff       	call   f01318e3 <strlen>
f0131e9d:	83 c4 04             	add    $0x4,%esp
f0131ea0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f0131ea3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f0131eaa:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0131eb1:	eb 17                	jmp    f0131eca <strcconcat+0x49>
		final[s] = str1[s] ;
f0131eb3:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131eb6:	8b 45 10             	mov    0x10(%ebp),%eax
f0131eb9:	01 c2                	add    %eax,%edx
f0131ebb:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0131ebe:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ec1:	01 c8                	add    %ecx,%eax
f0131ec3:	8a 00                	mov    (%eax),%al
f0131ec5:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f0131ec7:	ff 45 fc             	incl   -0x4(%ebp)
f0131eca:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131ecd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0131ed0:	7c e1                	jl     f0131eb3 <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f0131ed2:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f0131ed9:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f0131ee0:	eb 1f                	jmp    f0131f01 <strcconcat+0x80>
		final[s++] = str2[i] ;
f0131ee2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131ee5:	8d 50 01             	lea    0x1(%eax),%edx
f0131ee8:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0131eeb:	89 c2                	mov    %eax,%edx
f0131eed:	8b 45 10             	mov    0x10(%ebp),%eax
f0131ef0:	01 c2                	add    %eax,%edx
f0131ef2:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f0131ef5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131ef8:	01 c8                	add    %ecx,%eax
f0131efa:	8a 00                	mov    (%eax),%al
f0131efc:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f0131efe:	ff 45 f8             	incl   -0x8(%ebp)
f0131f01:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131f04:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0131f07:	7c d9                	jl     f0131ee2 <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f0131f09:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131f0c:	8b 45 10             	mov    0x10(%ebp),%eax
f0131f0f:	01 d0                	add    %edx,%eax
f0131f11:	c6 00 00             	movb   $0x0,(%eax)
}
f0131f14:	90                   	nop
f0131f15:	c9                   	leave  
f0131f16:	c3                   	ret    

f0131f17 <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f0131f17:	55                   	push   %ebp
f0131f18:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f0131f1a:	8b 45 14             	mov    0x14(%ebp),%eax
f0131f1d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f0131f23:	8b 45 14             	mov    0x14(%ebp),%eax
f0131f26:	8b 00                	mov    (%eax),%eax
f0131f28:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0131f2f:	8b 45 10             	mov    0x10(%ebp),%eax
f0131f32:	01 d0                	add    %edx,%eax
f0131f34:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0131f3a:	eb 0c                	jmp    f0131f48 <strsplit+0x31>
			*string++ = 0;
f0131f3c:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f3f:	8d 50 01             	lea    0x1(%eax),%edx
f0131f42:	89 55 08             	mov    %edx,0x8(%ebp)
f0131f45:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0131f48:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f4b:	8a 00                	mov    (%eax),%al
f0131f4d:	84 c0                	test   %al,%al
f0131f4f:	74 18                	je     f0131f69 <strsplit+0x52>
f0131f51:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f54:	8a 00                	mov    (%eax),%al
f0131f56:	0f be c0             	movsbl %al,%eax
f0131f59:	50                   	push   %eax
f0131f5a:	ff 75 0c             	pushl  0xc(%ebp)
f0131f5d:	e8 13 fb ff ff       	call   f0131a75 <strchr>
f0131f62:	83 c4 08             	add    $0x8,%esp
f0131f65:	85 c0                	test   %eax,%eax
f0131f67:	75 d3                	jne    f0131f3c <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f0131f69:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f6c:	8a 00                	mov    (%eax),%al
f0131f6e:	84 c0                	test   %al,%al
f0131f70:	74 5a                	je     f0131fcc <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f0131f72:	8b 45 14             	mov    0x14(%ebp),%eax
f0131f75:	8b 00                	mov    (%eax),%eax
f0131f77:	83 f8 0f             	cmp    $0xf,%eax
f0131f7a:	75 07                	jne    f0131f83 <strsplit+0x6c>
		{
			return 0;
f0131f7c:	b8 00 00 00 00       	mov    $0x0,%eax
f0131f81:	eb 66                	jmp    f0131fe9 <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f0131f83:	8b 45 14             	mov    0x14(%ebp),%eax
f0131f86:	8b 00                	mov    (%eax),%eax
f0131f88:	8d 48 01             	lea    0x1(%eax),%ecx
f0131f8b:	8b 55 14             	mov    0x14(%ebp),%edx
f0131f8e:	89 0a                	mov    %ecx,(%edx)
f0131f90:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0131f97:	8b 45 10             	mov    0x10(%ebp),%eax
f0131f9a:	01 c2                	add    %eax,%edx
f0131f9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f9f:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f0131fa1:	eb 03                	jmp    f0131fa6 <strsplit+0x8f>
			string++;
f0131fa3:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f0131fa6:	8b 45 08             	mov    0x8(%ebp),%eax
f0131fa9:	8a 00                	mov    (%eax),%al
f0131fab:	84 c0                	test   %al,%al
f0131fad:	74 8b                	je     f0131f3a <strsplit+0x23>
f0131faf:	8b 45 08             	mov    0x8(%ebp),%eax
f0131fb2:	8a 00                	mov    (%eax),%al
f0131fb4:	0f be c0             	movsbl %al,%eax
f0131fb7:	50                   	push   %eax
f0131fb8:	ff 75 0c             	pushl  0xc(%ebp)
f0131fbb:	e8 b5 fa ff ff       	call   f0131a75 <strchr>
f0131fc0:	83 c4 08             	add    $0x8,%esp
f0131fc3:	85 c0                	test   %eax,%eax
f0131fc5:	74 dc                	je     f0131fa3 <strsplit+0x8c>
			string++;
	}
f0131fc7:	e9 6e ff ff ff       	jmp    f0131f3a <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f0131fcc:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f0131fcd:	8b 45 14             	mov    0x14(%ebp),%eax
f0131fd0:	8b 00                	mov    (%eax),%eax
f0131fd2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0131fd9:	8b 45 10             	mov    0x10(%ebp),%eax
f0131fdc:	01 d0                	add    %edx,%eax
f0131fde:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f0131fe4:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0131fe9:	c9                   	leave  
f0131fea:	c3                   	ret    

f0131feb <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f0131feb:	55                   	push   %ebp
f0131fec:	89 e5                	mov    %esp,%ebp
f0131fee:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f0131ff1:	90                   	nop
f0131ff2:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0131ff9:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131ffc:	89 c2                	mov    %eax,%edx
f0131ffe:	ec                   	in     (%dx),%al
f0131fff:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0132002:	8a 45 f7             	mov    -0x9(%ebp),%al
f0132005:	0f b6 c0             	movzbl %al,%eax
f0132008:	89 45 fc             	mov    %eax,-0x4(%ebp)
f013200b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013200e:	25 c0 00 00 00       	and    $0xc0,%eax
f0132013:	83 f8 40             	cmp    $0x40,%eax
f0132016:	75 da                	jne    f0131ff2 <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f0132018:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013201c:	74 11                	je     f013202f <ide_wait_ready+0x44>
f013201e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0132021:	83 e0 21             	and    $0x21,%eax
f0132024:	85 c0                	test   %eax,%eax
f0132026:	74 07                	je     f013202f <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f0132028:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f013202d:	eb 05                	jmp    f0132034 <ide_wait_ready+0x49>
	}
	return 0;
f013202f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0132034:	c9                   	leave  
f0132035:	c3                   	ret    

f0132036 <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f0132036:	55                   	push   %ebp
f0132037:	89 e5                	mov    %esp,%ebp
f0132039:	57                   	push   %edi
f013203a:	53                   	push   %ebx
f013203b:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f013203e:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0132045:	76 16                	jbe    f013205d <ide_read+0x27>
f0132047:	68 e3 da 13 f0       	push   $0xf013dae3
f013204c:	68 f0 da 13 f0       	push   $0xf013daf0
f0132051:	6a 25                	push   $0x25
f0132053:	68 05 db 13 f0       	push   $0xf013db05
f0132058:	e8 a8 e1 fc ff       	call   f0100205 <_panic>

	ide_wait_ready(0);
f013205d:	83 ec 0c             	sub    $0xc,%esp
f0132060:	6a 00                	push   $0x0
f0132062:	e8 84 ff ff ff       	call   f0131feb <ide_wait_ready>
f0132067:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f013206a:	8b 45 10             	mov    0x10(%ebp),%eax
f013206d:	0f b6 c0             	movzbl %al,%eax
f0132070:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0132077:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f013207a:	8a 45 d2             	mov    -0x2e(%ebp),%al
f013207d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132080:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0132081:	8b 45 08             	mov    0x8(%ebp),%eax
f0132084:	0f b6 c0             	movzbl %al,%eax
f0132087:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f013208e:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0132091:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0132094:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132097:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f0132098:	8b 45 08             	mov    0x8(%ebp),%eax
f013209b:	c1 e8 08             	shr    $0x8,%eax
f013209e:	0f b6 c0             	movzbl %al,%eax
f01320a1:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f01320a8:	88 45 d4             	mov    %al,-0x2c(%ebp)
f01320ab:	8a 45 d4             	mov    -0x2c(%ebp),%al
f01320ae:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01320b1:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f01320b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01320b5:	c1 e8 10             	shr    $0x10,%eax
f01320b8:	0f b6 c0             	movzbl %al,%eax
f01320bb:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f01320c2:	88 45 d5             	mov    %al,-0x2b(%ebp)
f01320c5:	8a 45 d5             	mov    -0x2b(%ebp),%al
f01320c8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01320cb:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f01320cc:	a1 ac ac 89 f0       	mov    0xf089acac,%eax
f01320d1:	83 e0 01             	and    $0x1,%eax
f01320d4:	c1 e0 04             	shl    $0x4,%eax
f01320d7:	88 c2                	mov    %al,%dl
f01320d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01320dc:	c1 e8 18             	shr    $0x18,%eax
f01320df:	83 e0 0f             	and    $0xf,%eax
f01320e2:	09 d0                	or     %edx,%eax
f01320e4:	83 c8 e0             	or     $0xffffffe0,%eax
f01320e7:	0f b6 c0             	movzbl %al,%eax
f01320ea:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f01320f1:	88 45 d6             	mov    %al,-0x2a(%ebp)
f01320f4:	8a 45 d6             	mov    -0x2a(%ebp),%al
f01320f7:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01320fa:	ee                   	out    %al,(%dx)
f01320fb:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0132102:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f0132106:	8a 45 d7             	mov    -0x29(%ebp),%al
f0132109:	8b 55 d8             	mov    -0x28(%ebp),%edx
f013210c:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f013210d:	eb 55                	jmp    f0132164 <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f013210f:	83 ec 0c             	sub    $0xc,%esp
f0132112:	6a 01                	push   $0x1
f0132114:	e8 d2 fe ff ff       	call   f0131feb <ide_wait_ready>
f0132119:	83 c4 10             	add    $0x10,%esp
f013211c:	89 45 dc             	mov    %eax,-0x24(%ebp)
f013211f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0132123:	79 05                	jns    f013212a <ide_read+0xf4>
			return r;
f0132125:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0132128:	eb 45                	jmp    f013216f <ide_read+0x139>
f013212a:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0132131:	8b 45 0c             	mov    0xc(%ebp),%eax
f0132134:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0132137:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f013213e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132141:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0132144:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0132147:	89 cb                	mov    %ecx,%ebx
f0132149:	89 df                	mov    %ebx,%edi
f013214b:	89 c1                	mov    %eax,%ecx
f013214d:	fc                   	cld    
f013214e:	f2 6d                	repnz insl (%dx),%es:(%edi)
f0132150:	89 c8                	mov    %ecx,%eax
f0132152:	89 fb                	mov    %edi,%ebx
f0132154:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0132157:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f013215a:	ff 4d 10             	decl   0x10(%ebp)
f013215d:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0132164:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0132168:	75 a5                	jne    f013210f <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f013216a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f013216f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0132172:	5b                   	pop    %ebx
f0132173:	5f                   	pop    %edi
f0132174:	5d                   	pop    %ebp
f0132175:	c3                   	ret    

f0132176 <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f0132176:	55                   	push   %ebp
f0132177:	89 e5                	mov    %esp,%ebp
f0132179:	56                   	push   %esi
f013217a:	53                   	push   %ebx
f013217b:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f013217e:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0132185:	76 16                	jbe    f013219d <ide_write+0x27>
f0132187:	68 e3 da 13 f0       	push   $0xf013dae3
f013218c:	68 f0 da 13 f0       	push   $0xf013daf0
f0132191:	6a 3e                	push   $0x3e
f0132193:	68 05 db 13 f0       	push   $0xf013db05
f0132198:	e8 68 e0 fc ff       	call   f0100205 <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f013219d:	83 ec 0c             	sub    $0xc,%esp
f01321a0:	6a 00                	push   $0x0
f01321a2:	e8 44 fe ff ff       	call   f0131feb <ide_wait_ready>
f01321a7:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f01321aa:	8b 45 10             	mov    0x10(%ebp),%eax
f01321ad:	0f b6 c0             	movzbl %al,%eax
f01321b0:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f01321b7:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01321ba:	8a 45 d2             	mov    -0x2e(%ebp),%al
f01321bd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01321c0:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f01321c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01321c4:	0f b6 c0             	movzbl %al,%eax
f01321c7:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f01321ce:	88 45 d3             	mov    %al,-0x2d(%ebp)
f01321d1:	8a 45 d3             	mov    -0x2d(%ebp),%al
f01321d4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01321d7:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f01321d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01321db:	c1 e8 08             	shr    $0x8,%eax
f01321de:	0f b6 c0             	movzbl %al,%eax
f01321e1:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f01321e8:	88 45 d4             	mov    %al,-0x2c(%ebp)
f01321eb:	8a 45 d4             	mov    -0x2c(%ebp),%al
f01321ee:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01321f1:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f01321f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01321f5:	c1 e8 10             	shr    $0x10,%eax
f01321f8:	0f b6 c0             	movzbl %al,%eax
f01321fb:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0132202:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0132205:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0132208:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f013220b:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f013220c:	a1 ac ac 89 f0       	mov    0xf089acac,%eax
f0132211:	83 e0 01             	and    $0x1,%eax
f0132214:	c1 e0 04             	shl    $0x4,%eax
f0132217:	88 c2                	mov    %al,%dl
f0132219:	8b 45 08             	mov    0x8(%ebp),%eax
f013221c:	c1 e8 18             	shr    $0x18,%eax
f013221f:	83 e0 0f             	and    $0xf,%eax
f0132222:	09 d0                	or     %edx,%eax
f0132224:	83 c8 e0             	or     $0xffffffe0,%eax
f0132227:	0f b6 c0             	movzbl %al,%eax
f013222a:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0132231:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0132234:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0132237:	8b 55 e0             	mov    -0x20(%ebp),%edx
f013223a:	ee                   	out    %al,(%dx)
f013223b:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0132242:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f0132246:	8a 45 d7             	mov    -0x29(%ebp),%al
f0132249:	8b 55 d8             	mov    -0x28(%ebp),%edx
f013224c:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f013224d:	eb 55                	jmp    f01322a4 <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f013224f:	83 ec 0c             	sub    $0xc,%esp
f0132252:	6a 01                	push   $0x1
f0132254:	e8 92 fd ff ff       	call   f0131feb <ide_wait_ready>
f0132259:	83 c4 10             	add    $0x10,%esp
f013225c:	89 45 dc             	mov    %eax,-0x24(%ebp)
f013225f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0132263:	79 05                	jns    f013226a <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f0132265:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0132268:	eb 45                	jmp    f01322af <ide_write+0x139>
f013226a:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0132271:	8b 45 0c             	mov    0xc(%ebp),%eax
f0132274:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0132277:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f013227e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132281:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0132284:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0132287:	89 cb                	mov    %ecx,%ebx
f0132289:	89 de                	mov    %ebx,%esi
f013228b:	89 c1                	mov    %eax,%ecx
f013228d:	fc                   	cld    
f013228e:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f0132290:	89 c8                	mov    %ecx,%eax
f0132292:	89 f3                	mov    %esi,%ebx
f0132294:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0132297:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f013229a:	ff 4d 10             	decl   0x10(%ebp)
f013229d:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f01322a4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01322a8:	75 a5                	jne    f013224f <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f01322aa:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01322af:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01322b2:	5b                   	pop    %ebx
f01322b3:	5e                   	pop    %esi
f01322b4:	5d                   	pop    %ebp
f01322b5:	c3                   	ret    

f01322b6 <print_mem_block_lists>:
//===========================
// PRINT MEM BLOCK LISTS:
//===========================

void print_mem_block_lists()
{
f01322b6:	55                   	push   %ebp
f01322b7:	89 e5                	mov    %esp,%ebp
f01322b9:	83 ec 18             	sub    $0x18,%esp
	cprintf("\n=========================================\n");
f01322bc:	83 ec 0c             	sub    $0xc,%esp
f01322bf:	68 10 db 13 f0       	push   $0xf013db10
f01322c4:	e8 45 ea fc ff       	call   f0100d0e <cprintf>
f01322c9:	83 c4 10             	add    $0x10,%esp
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
f01322cc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nFreeMemBlocksList:\n");
f01322d3:	83 ec 0c             	sub    $0xc,%esp
f01322d6:	68 3c db 13 f0       	push   $0xf013db3c
f01322db:	e8 2e ea fc ff       	call   f0100d0e <cprintf>
f01322e0:	83 c4 10             	add    $0x10,%esp
	uint8 sorted = 1 ;
f01322e3:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &FreeMemBlocksList)
f01322e7:	a1 64 ad 89 f0       	mov    0xf089ad64,%eax
f01322ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01322ef:	eb 56                	jmp    f0132347 <print_mem_block_lists+0x91>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f01322f1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01322f5:	74 1c                	je     f0132313 <print_mem_block_lists+0x5d>
f01322f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01322fa:	8b 50 08             	mov    0x8(%eax),%edx
f01322fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132300:	8b 48 08             	mov    0x8(%eax),%ecx
f0132303:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132306:	8b 40 0c             	mov    0xc(%eax),%eax
f0132309:	01 c8                	add    %ecx,%eax
f013230b:	39 c2                	cmp    %eax,%edx
f013230d:	73 04                	jae    f0132313 <print_mem_block_lists+0x5d>
			sorted = 0 ;
f013230f:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f0132313:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132316:	8b 50 08             	mov    0x8(%eax),%edx
f0132319:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013231c:	8b 40 0c             	mov    0xc(%eax),%eax
f013231f:	01 c2                	add    %eax,%edx
f0132321:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132324:	8b 40 08             	mov    0x8(%eax),%eax
f0132327:	83 ec 04             	sub    $0x4,%esp
f013232a:	52                   	push   %edx
f013232b:	50                   	push   %eax
f013232c:	68 51 db 13 f0       	push   $0xf013db51
f0132331:	e8 d8 e9 fc ff       	call   f0100d0e <cprintf>
f0132336:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f0132339:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013233c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	cprintf("\n=========================================\n");
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
	cprintf("\nFreeMemBlocksList:\n");
	uint8 sorted = 1 ;
	LIST_FOREACH(blk, &FreeMemBlocksList)
f013233f:	a1 6c ad 89 f0       	mov    0xf089ad6c,%eax
f0132344:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132347:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013234b:	74 07                	je     f0132354 <print_mem_block_lists+0x9e>
f013234d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132350:	8b 00                	mov    (%eax),%eax
f0132352:	eb 05                	jmp    f0132359 <print_mem_block_lists+0xa3>
f0132354:	b8 00 00 00 00       	mov    $0x0,%eax
f0132359:	a3 6c ad 89 f0       	mov    %eax,0xf089ad6c
f013235e:	a1 6c ad 89 f0       	mov    0xf089ad6c,%eax
f0132363:	85 c0                	test   %eax,%eax
f0132365:	75 8a                	jne    f01322f1 <print_mem_block_lists+0x3b>
f0132367:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013236b:	75 84                	jne    f01322f1 <print_mem_block_lists+0x3b>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;
f013236d:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f0132371:	75 10                	jne    f0132383 <print_mem_block_lists+0xcd>
f0132373:	83 ec 0c             	sub    $0xc,%esp
f0132376:	68 60 db 13 f0       	push   $0xf013db60
f013237b:	e8 8e e9 fc ff       	call   f0100d0e <cprintf>
f0132380:	83 c4 10             	add    $0x10,%esp

	lastBlk = NULL ;
f0132383:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nAllocMemBlocksList:\n");
f013238a:	83 ec 0c             	sub    $0xc,%esp
f013238d:	68 84 db 13 f0       	push   $0xf013db84
f0132392:	e8 77 e9 fc ff       	call   f0100d0e <cprintf>
f0132397:	83 c4 10             	add    $0x10,%esp
	sorted = 1 ;
f013239a:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &AllocMemBlocksList)
f013239e:	a1 c8 ac 89 f0       	mov    0xf089acc8,%eax
f01323a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01323a6:	eb 56                	jmp    f01323fe <print_mem_block_lists+0x148>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f01323a8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01323ac:	74 1c                	je     f01323ca <print_mem_block_lists+0x114>
f01323ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323b1:	8b 50 08             	mov    0x8(%eax),%edx
f01323b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01323b7:	8b 48 08             	mov    0x8(%eax),%ecx
f01323ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01323bd:	8b 40 0c             	mov    0xc(%eax),%eax
f01323c0:	01 c8                	add    %ecx,%eax
f01323c2:	39 c2                	cmp    %eax,%edx
f01323c4:	73 04                	jae    f01323ca <print_mem_block_lists+0x114>
			sorted = 0 ;
f01323c6:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f01323ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323cd:	8b 50 08             	mov    0x8(%eax),%edx
f01323d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323d3:	8b 40 0c             	mov    0xc(%eax),%eax
f01323d6:	01 c2                	add    %eax,%edx
f01323d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323db:	8b 40 08             	mov    0x8(%eax),%eax
f01323de:	83 ec 04             	sub    $0x4,%esp
f01323e1:	52                   	push   %edx
f01323e2:	50                   	push   %eax
f01323e3:	68 51 db 13 f0       	push   $0xf013db51
f01323e8:	e8 21 e9 fc ff       	call   f0100d0e <cprintf>
f01323ed:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f01323f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;

	lastBlk = NULL ;
	cprintf("\nAllocMemBlocksList:\n");
	sorted = 1 ;
	LIST_FOREACH(blk, &AllocMemBlocksList)
f01323f6:	a1 d0 ac 89 f0       	mov    0xf089acd0,%eax
f01323fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01323fe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132402:	74 07                	je     f013240b <print_mem_block_lists+0x155>
f0132404:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132407:	8b 00                	mov    (%eax),%eax
f0132409:	eb 05                	jmp    f0132410 <print_mem_block_lists+0x15a>
f013240b:	b8 00 00 00 00       	mov    $0x0,%eax
f0132410:	a3 d0 ac 89 f0       	mov    %eax,0xf089acd0
f0132415:	a1 d0 ac 89 f0       	mov    0xf089acd0,%eax
f013241a:	85 c0                	test   %eax,%eax
f013241c:	75 8a                	jne    f01323a8 <print_mem_block_lists+0xf2>
f013241e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132422:	75 84                	jne    f01323a8 <print_mem_block_lists+0xf2>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nAllocMemBlocksList is NOT SORTED!!\n") ;
f0132424:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f0132428:	75 10                	jne    f013243a <print_mem_block_lists+0x184>
f013242a:	83 ec 0c             	sub    $0xc,%esp
f013242d:	68 9c db 13 f0       	push   $0xf013db9c
f0132432:	e8 d7 e8 fc ff       	call   f0100d0e <cprintf>
f0132437:	83 c4 10             	add    $0x10,%esp
	cprintf("\n=========================================\n");
f013243a:	83 ec 0c             	sub    $0xc,%esp
f013243d:	68 10 db 13 f0       	push   $0xf013db10
f0132442:	e8 c7 e8 fc ff       	call   f0100d0e <cprintf>
f0132447:	83 c4 10             	add    $0x10,%esp

}
f013244a:	90                   	nop
f013244b:	c9                   	leave  
f013244c:	c3                   	ret    

f013244d <initialize_MemBlocksList>:

//===============================
// [1] INITIALIZE AVAILABLE LIST:
//===============================
void initialize_MemBlocksList(uint32 numOfBlocks)
{
f013244d:	55                   	push   %ebp
f013244e:	89 e5                	mov    %esp,%ebp
f0132450:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");
	LIST_INIT(&AvailableMemBlocksList);
f0132453:	c7 05 98 ad 89 f0 00 	movl   $0x0,0xf089ad98
f013245a:	00 00 00 
f013245d:	c7 05 9c ad 89 f0 00 	movl   $0x0,0xf089ad9c
f0132464:	00 00 00 
f0132467:	c7 05 a4 ad 89 f0 00 	movl   $0x0,0xf089ada4
f013246e:	00 00 00 

	for(int y=0;y<numOfBlocks;y++)
f0132471:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0132478:	e9 9e 00 00 00       	jmp    f013251b <initialize_MemBlocksList+0xce>
	{
		LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[y]));
f013247d:	a1 d8 ac 89 f0       	mov    0xf089acd8,%eax
f0132482:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132485:	c1 e2 04             	shl    $0x4,%edx
f0132488:	01 d0                	add    %edx,%eax
f013248a:	85 c0                	test   %eax,%eax
f013248c:	75 14                	jne    f01324a2 <initialize_MemBlocksList+0x55>
f013248e:	83 ec 04             	sub    $0x4,%esp
f0132491:	68 c4 db 13 f0       	push   $0xf013dbc4
f0132496:	6a 46                	push   $0x46
f0132498:	68 e7 db 13 f0       	push   $0xf013dbe7
f013249d:	e8 63 dd fc ff       	call   f0100205 <_panic>
f01324a2:	a1 d8 ac 89 f0       	mov    0xf089acd8,%eax
f01324a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01324aa:	c1 e2 04             	shl    $0x4,%edx
f01324ad:	01 d0                	add    %edx,%eax
f01324af:	8b 15 98 ad 89 f0    	mov    0xf089ad98,%edx
f01324b5:	89 10                	mov    %edx,(%eax)
f01324b7:	8b 00                	mov    (%eax),%eax
f01324b9:	85 c0                	test   %eax,%eax
f01324bb:	74 18                	je     f01324d5 <initialize_MemBlocksList+0x88>
f01324bd:	a1 98 ad 89 f0       	mov    0xf089ad98,%eax
f01324c2:	8b 15 d8 ac 89 f0    	mov    0xf089acd8,%edx
f01324c8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01324cb:	c1 e1 04             	shl    $0x4,%ecx
f01324ce:	01 ca                	add    %ecx,%edx
f01324d0:	89 50 04             	mov    %edx,0x4(%eax)
f01324d3:	eb 12                	jmp    f01324e7 <initialize_MemBlocksList+0x9a>
f01324d5:	a1 d8 ac 89 f0       	mov    0xf089acd8,%eax
f01324da:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01324dd:	c1 e2 04             	shl    $0x4,%edx
f01324e0:	01 d0                	add    %edx,%eax
f01324e2:	a3 9c ad 89 f0       	mov    %eax,0xf089ad9c
f01324e7:	a1 d8 ac 89 f0       	mov    0xf089acd8,%eax
f01324ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01324ef:	c1 e2 04             	shl    $0x4,%edx
f01324f2:	01 d0                	add    %edx,%eax
f01324f4:	a3 98 ad 89 f0       	mov    %eax,0xf089ad98
f01324f9:	a1 d8 ac 89 f0       	mov    0xf089acd8,%eax
f01324fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132501:	c1 e2 04             	shl    $0x4,%edx
f0132504:	01 d0                	add    %edx,%eax
f0132506:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013250d:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f0132512:	40                   	inc    %eax
f0132513:	a3 a4 ad 89 f0       	mov    %eax,0xf089ada4
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");
	LIST_INIT(&AvailableMemBlocksList);

	for(int y=0;y<numOfBlocks;y++)
f0132518:	ff 45 f4             	incl   -0xc(%ebp)
f013251b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013251e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132521:	0f 82 56 ff ff ff    	jb     f013247d <initialize_MemBlocksList+0x30>
	{
		LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[y]));
	}
}
f0132527:	90                   	nop
f0132528:	c9                   	leave  
f0132529:	c3                   	ret    

f013252a <find_block>:

//===============================
// [2] FIND BLOCK:
//===============================
struct MemBlock *find_block(struct MemBlock_List *blockList, uint32 va)
{
f013252a:	55                   	push   %ebp
f013252b:	89 e5                	mov    %esp,%ebp
f013252d:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");
	struct MemBlock *point;

	LIST_FOREACH(point,blockList)
f0132530:	8b 45 08             	mov    0x8(%ebp),%eax
f0132533:	8b 00                	mov    (%eax),%eax
f0132535:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0132538:	eb 19                	jmp    f0132553 <find_block+0x29>
	{
		if(va==point->sva)
f013253a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013253d:	8b 40 08             	mov    0x8(%eax),%eax
f0132540:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0132543:	75 05                	jne    f013254a <find_block+0x20>
		   return point;
f0132545:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0132548:	eb 36                	jmp    f0132580 <find_block+0x56>
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");
	struct MemBlock *point;

	LIST_FOREACH(point,blockList)
f013254a:	8b 45 08             	mov    0x8(%ebp),%eax
f013254d:	8b 40 08             	mov    0x8(%eax),%eax
f0132550:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0132553:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0132557:	74 07                	je     f0132560 <find_block+0x36>
f0132559:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013255c:	8b 00                	mov    (%eax),%eax
f013255e:	eb 05                	jmp    f0132565 <find_block+0x3b>
f0132560:	b8 00 00 00 00       	mov    $0x0,%eax
f0132565:	8b 55 08             	mov    0x8(%ebp),%edx
f0132568:	89 42 08             	mov    %eax,0x8(%edx)
f013256b:	8b 45 08             	mov    0x8(%ebp),%eax
f013256e:	8b 40 08             	mov    0x8(%eax),%eax
f0132571:	85 c0                	test   %eax,%eax
f0132573:	75 c5                	jne    f013253a <find_block+0x10>
f0132575:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0132579:	75 bf                	jne    f013253a <find_block+0x10>
	{
		if(va==point->sva)
		   return point;
	}
	return NULL;
f013257b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0132580:	c9                   	leave  
f0132581:	c3                   	ret    

f0132582 <insert_sorted_allocList>:

//=========================================
// [3] INSERT BLOCK IN ALLOC LIST [SORTED]:
//=========================================
void insert_sorted_allocList(struct MemBlock *blockToInsert)
{
f0132582:	55                   	push   %ebp
f0132583:	89 e5                	mov    %esp,%ebp
f0132585:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_allocList
	// Write your code here, remove the panic and write your code
	//panic("insert_sorted_allocList() is not implemented yet...!!");
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
f0132588:	a1 c8 ac 89 f0       	mov    0xf089acc8,%eax
f013258d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;
f0132590:	a1 cc ac 89 f0       	mov    0xf089accc,%eax
f0132595:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
f0132598:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013259b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f013259e:	74 24                	je     f01325c4 <insert_sorted_allocList+0x42>
f01325a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01325a3:	8b 50 08             	mov    0x8(%eax),%edx
f01325a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01325a9:	8b 40 08             	mov    0x8(%eax),%eax
f01325ac:	39 c2                	cmp    %eax,%edx
f01325ae:	76 14                	jbe    f01325c4 <insert_sorted_allocList+0x42>
f01325b0:	8b 45 08             	mov    0x8(%ebp),%eax
f01325b3:	8b 50 08             	mov    0x8(%eax),%edx
f01325b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01325b9:	8b 40 08             	mov    0x8(%eax),%eax
f01325bc:	39 c2                	cmp    %eax,%edx
f01325be:	0f 82 60 01 00 00    	jb     f0132724 <insert_sorted_allocList+0x1a2>
	{
		if(head == NULL )
f01325c4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01325c8:	75 65                	jne    f013262f <insert_sorted_allocList+0xad>
		{
			LIST_INSERT_HEAD(&AllocMemBlocksList, blockToInsert);
f01325ca:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01325ce:	75 14                	jne    f01325e4 <insert_sorted_allocList+0x62>
f01325d0:	83 ec 04             	sub    $0x4,%esp
f01325d3:	68 c4 db 13 f0       	push   $0xf013dbc4
f01325d8:	6a 6b                	push   $0x6b
f01325da:	68 e7 db 13 f0       	push   $0xf013dbe7
f01325df:	e8 21 dc fc ff       	call   f0100205 <_panic>
f01325e4:	8b 15 c8 ac 89 f0    	mov    0xf089acc8,%edx
f01325ea:	8b 45 08             	mov    0x8(%ebp),%eax
f01325ed:	89 10                	mov    %edx,(%eax)
f01325ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01325f2:	8b 00                	mov    (%eax),%eax
f01325f4:	85 c0                	test   %eax,%eax
f01325f6:	74 0d                	je     f0132605 <insert_sorted_allocList+0x83>
f01325f8:	a1 c8 ac 89 f0       	mov    0xf089acc8,%eax
f01325fd:	8b 55 08             	mov    0x8(%ebp),%edx
f0132600:	89 50 04             	mov    %edx,0x4(%eax)
f0132603:	eb 08                	jmp    f013260d <insert_sorted_allocList+0x8b>
f0132605:	8b 45 08             	mov    0x8(%ebp),%eax
f0132608:	a3 cc ac 89 f0       	mov    %eax,0xf089accc
f013260d:	8b 45 08             	mov    0x8(%ebp),%eax
f0132610:	a3 c8 ac 89 f0       	mov    %eax,0xf089acc8
f0132615:	8b 45 08             	mov    0x8(%ebp),%eax
f0132618:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013261f:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f0132624:	40                   	inc    %eax
f0132625:	a3 d4 ac 89 f0       	mov    %eax,0xf089acd4
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f013262a:	e9 dc 01 00 00       	jmp    f013280b <insert_sorted_allocList+0x289>
		{
			LIST_INSERT_HEAD(&AllocMemBlocksList, blockToInsert);
		}
		else if (blockToInsert->sva <= head->sva)
f013262f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132632:	8b 50 08             	mov    0x8(%eax),%edx
f0132635:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132638:	8b 40 08             	mov    0x8(%eax),%eax
f013263b:	39 c2                	cmp    %eax,%edx
f013263d:	77 6c                	ja     f01326ab <insert_sorted_allocList+0x129>
		{
			LIST_INSERT_BEFORE(&AllocMemBlocksList,head, blockToInsert);
f013263f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132643:	74 06                	je     f013264b <insert_sorted_allocList+0xc9>
f0132645:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132649:	75 14                	jne    f013265f <insert_sorted_allocList+0xdd>
f013264b:	83 ec 04             	sub    $0x4,%esp
f013264e:	68 00 dc 13 f0       	push   $0xf013dc00
f0132653:	6a 6f                	push   $0x6f
f0132655:	68 e7 db 13 f0       	push   $0xf013dbe7
f013265a:	e8 a6 db fc ff       	call   f0100205 <_panic>
f013265f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132662:	8b 50 04             	mov    0x4(%eax),%edx
f0132665:	8b 45 08             	mov    0x8(%ebp),%eax
f0132668:	89 50 04             	mov    %edx,0x4(%eax)
f013266b:	8b 45 08             	mov    0x8(%ebp),%eax
f013266e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132671:	89 10                	mov    %edx,(%eax)
f0132673:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132676:	8b 40 04             	mov    0x4(%eax),%eax
f0132679:	85 c0                	test   %eax,%eax
f013267b:	74 0d                	je     f013268a <insert_sorted_allocList+0x108>
f013267d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132680:	8b 40 04             	mov    0x4(%eax),%eax
f0132683:	8b 55 08             	mov    0x8(%ebp),%edx
f0132686:	89 10                	mov    %edx,(%eax)
f0132688:	eb 08                	jmp    f0132692 <insert_sorted_allocList+0x110>
f013268a:	8b 45 08             	mov    0x8(%ebp),%eax
f013268d:	a3 c8 ac 89 f0       	mov    %eax,0xf089acc8
f0132692:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132695:	8b 55 08             	mov    0x8(%ebp),%edx
f0132698:	89 50 04             	mov    %edx,0x4(%eax)
f013269b:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f01326a0:	40                   	inc    %eax
f01326a1:	a3 d4 ac 89 f0       	mov    %eax,0xf089acd4
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f01326a6:	e9 60 01 00 00       	jmp    f013280b <insert_sorted_allocList+0x289>
		}
		else if (blockToInsert->sva <= head->sva)
		{
			LIST_INSERT_BEFORE(&AllocMemBlocksList,head, blockToInsert);
		}
		else if (blockToInsert->sva >= tail->sva )
f01326ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01326ae:	8b 50 08             	mov    0x8(%eax),%edx
f01326b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01326b4:	8b 40 08             	mov    0x8(%eax),%eax
f01326b7:	39 c2                	cmp    %eax,%edx
f01326b9:	0f 82 4c 01 00 00    	jb     f013280b <insert_sorted_allocList+0x289>
		{
			LIST_INSERT_TAIL(&AllocMemBlocksList, blockToInsert);
f01326bf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01326c3:	75 14                	jne    f01326d9 <insert_sorted_allocList+0x157>
f01326c5:	83 ec 04             	sub    $0x4,%esp
f01326c8:	68 38 dc 13 f0       	push   $0xf013dc38
f01326cd:	6a 73                	push   $0x73
f01326cf:	68 e7 db 13 f0       	push   $0xf013dbe7
f01326d4:	e8 2c db fc ff       	call   f0100205 <_panic>
f01326d9:	8b 15 cc ac 89 f0    	mov    0xf089accc,%edx
f01326df:	8b 45 08             	mov    0x8(%ebp),%eax
f01326e2:	89 50 04             	mov    %edx,0x4(%eax)
f01326e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01326e8:	8b 40 04             	mov    0x4(%eax),%eax
f01326eb:	85 c0                	test   %eax,%eax
f01326ed:	74 0c                	je     f01326fb <insert_sorted_allocList+0x179>
f01326ef:	a1 cc ac 89 f0       	mov    0xf089accc,%eax
f01326f4:	8b 55 08             	mov    0x8(%ebp),%edx
f01326f7:	89 10                	mov    %edx,(%eax)
f01326f9:	eb 08                	jmp    f0132703 <insert_sorted_allocList+0x181>
f01326fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01326fe:	a3 c8 ac 89 f0       	mov    %eax,0xf089acc8
f0132703:	8b 45 08             	mov    0x8(%ebp),%eax
f0132706:	a3 cc ac 89 f0       	mov    %eax,0xf089accc
f013270b:	8b 45 08             	mov    0x8(%ebp),%eax
f013270e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132714:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f0132719:	40                   	inc    %eax
f013271a:	a3 d4 ac 89 f0       	mov    %eax,0xf089acd4
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f013271f:	e9 e7 00 00 00       	jmp    f013280b <insert_sorted_allocList+0x289>
			LIST_INSERT_TAIL(&AllocMemBlocksList, blockToInsert);
		}
	}
	else
	{
		struct MemBlock *current_block = head;
f0132724:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132727:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct MemBlock *next_block = NULL;
f013272a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		LIST_FOREACH (current_block, &AllocMemBlocksList)
f0132731:	a1 c8 ac 89 f0       	mov    0xf089acc8,%eax
f0132736:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132739:	e9 9d 00 00 00       	jmp    f01327db <insert_sorted_allocList+0x259>
		{
			next_block = LIST_NEXT(current_block);
f013273e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132741:	8b 00                	mov    (%eax),%eax
f0132743:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (blockToInsert->sva > current_block->sva && blockToInsert->sva < next_block->sva)
f0132746:	8b 45 08             	mov    0x8(%ebp),%eax
f0132749:	8b 50 08             	mov    0x8(%eax),%edx
f013274c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013274f:	8b 40 08             	mov    0x8(%eax),%eax
f0132752:	39 c2                	cmp    %eax,%edx
f0132754:	76 7d                	jbe    f01327d3 <insert_sorted_allocList+0x251>
f0132756:	8b 45 08             	mov    0x8(%ebp),%eax
f0132759:	8b 50 08             	mov    0x8(%eax),%edx
f013275c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013275f:	8b 40 08             	mov    0x8(%eax),%eax
f0132762:	39 c2                	cmp    %eax,%edx
f0132764:	73 6d                	jae    f01327d3 <insert_sorted_allocList+0x251>
			{
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
f0132766:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013276a:	74 06                	je     f0132772 <insert_sorted_allocList+0x1f0>
f013276c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132770:	75 14                	jne    f0132786 <insert_sorted_allocList+0x204>
f0132772:	83 ec 04             	sub    $0x4,%esp
f0132775:	68 5c dc 13 f0       	push   $0xf013dc5c
f013277a:	6a 7f                	push   $0x7f
f013277c:	68 e7 db 13 f0       	push   $0xf013dbe7
f0132781:	e8 7f da fc ff       	call   f0100205 <_panic>
f0132786:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132789:	8b 10                	mov    (%eax),%edx
f013278b:	8b 45 08             	mov    0x8(%ebp),%eax
f013278e:	89 10                	mov    %edx,(%eax)
f0132790:	8b 45 08             	mov    0x8(%ebp),%eax
f0132793:	8b 00                	mov    (%eax),%eax
f0132795:	85 c0                	test   %eax,%eax
f0132797:	74 0b                	je     f01327a4 <insert_sorted_allocList+0x222>
f0132799:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013279c:	8b 00                	mov    (%eax),%eax
f013279e:	8b 55 08             	mov    0x8(%ebp),%edx
f01327a1:	89 50 04             	mov    %edx,0x4(%eax)
f01327a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01327a7:	8b 55 08             	mov    0x8(%ebp),%edx
f01327aa:	89 10                	mov    %edx,(%eax)
f01327ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01327af:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01327b2:	89 50 04             	mov    %edx,0x4(%eax)
f01327b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01327b8:	8b 00                	mov    (%eax),%eax
f01327ba:	85 c0                	test   %eax,%eax
f01327bc:	75 08                	jne    f01327c6 <insert_sorted_allocList+0x244>
f01327be:	8b 45 08             	mov    0x8(%ebp),%eax
f01327c1:	a3 cc ac 89 f0       	mov    %eax,0xf089accc
f01327c6:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f01327cb:	40                   	inc    %eax
f01327cc:	a3 d4 ac 89 f0       	mov    %eax,0xf089acd4
				break;
f01327d1:	eb 39                	jmp    f013280c <insert_sorted_allocList+0x28a>
	}
	else
	{
		struct MemBlock *current_block = head;
		struct MemBlock *next_block = NULL;
		LIST_FOREACH (current_block, &AllocMemBlocksList)
f01327d3:	a1 d0 ac 89 f0       	mov    0xf089acd0,%eax
f01327d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01327db:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01327df:	74 07                	je     f01327e8 <insert_sorted_allocList+0x266>
f01327e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01327e4:	8b 00                	mov    (%eax),%eax
f01327e6:	eb 05                	jmp    f01327ed <insert_sorted_allocList+0x26b>
f01327e8:	b8 00 00 00 00       	mov    $0x0,%eax
f01327ed:	a3 d0 ac 89 f0       	mov    %eax,0xf089acd0
f01327f2:	a1 d0 ac 89 f0       	mov    0xf089acd0,%eax
f01327f7:	85 c0                	test   %eax,%eax
f01327f9:	0f 85 3f ff ff ff    	jne    f013273e <insert_sorted_allocList+0x1bc>
f01327ff:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132803:	0f 85 35 ff ff ff    	jne    f013273e <insert_sorted_allocList+0x1bc>
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
				break;
			}
		}
	}
}
f0132809:	eb 01                	jmp    f013280c <insert_sorted_allocList+0x28a>
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f013280b:	90                   	nop
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
				break;
			}
		}
	}
}
f013280c:	90                   	nop
f013280d:	c9                   	leave  
f013280e:	c3                   	ret    

f013280f <alloc_block_FF>:

//=========================================
// [4] ALLOCATE BLOCK BY FIRST FIT:
//=========================================
struct MemBlock *alloc_block_FF(uint32 size)
{
f013280f:	55                   	push   %ebp
f0132810:	89 e5                	mov    %esp,%ebp
f0132812:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	struct MemBlock *point;
	LIST_FOREACH(point,&FreeMemBlocksList)
f0132815:	a1 64 ad 89 f0       	mov    0xf089ad64,%eax
f013281a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013281d:	e9 85 01 00 00       	jmp    f01329a7 <alloc_block_FF+0x198>
	{
		if(size <= point->size)
f0132822:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132825:	8b 40 0c             	mov    0xc(%eax),%eax
f0132828:	3b 45 08             	cmp    0x8(%ebp),%eax
f013282b:	0f 82 6e 01 00 00    	jb     f013299f <alloc_block_FF+0x190>
		{
		   if(size == point->size){
f0132831:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132834:	8b 40 0c             	mov    0xc(%eax),%eax
f0132837:	3b 45 08             	cmp    0x8(%ebp),%eax
f013283a:	0f 85 8a 00 00 00    	jne    f01328ca <alloc_block_FF+0xbb>
			   LIST_REMOVE(&FreeMemBlocksList,point);
f0132840:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132844:	75 17                	jne    f013285d <alloc_block_FF+0x4e>
f0132846:	83 ec 04             	sub    $0x4,%esp
f0132849:	68 90 dc 13 f0       	push   $0xf013dc90
f013284e:	68 93 00 00 00       	push   $0x93
f0132853:	68 e7 db 13 f0       	push   $0xf013dbe7
f0132858:	e8 a8 d9 fc ff       	call   f0100205 <_panic>
f013285d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132860:	8b 00                	mov    (%eax),%eax
f0132862:	85 c0                	test   %eax,%eax
f0132864:	74 10                	je     f0132876 <alloc_block_FF+0x67>
f0132866:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132869:	8b 00                	mov    (%eax),%eax
f013286b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013286e:	8b 52 04             	mov    0x4(%edx),%edx
f0132871:	89 50 04             	mov    %edx,0x4(%eax)
f0132874:	eb 0b                	jmp    f0132881 <alloc_block_FF+0x72>
f0132876:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132879:	8b 40 04             	mov    0x4(%eax),%eax
f013287c:	a3 68 ad 89 f0       	mov    %eax,0xf089ad68
f0132881:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132884:	8b 40 04             	mov    0x4(%eax),%eax
f0132887:	85 c0                	test   %eax,%eax
f0132889:	74 0f                	je     f013289a <alloc_block_FF+0x8b>
f013288b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013288e:	8b 40 04             	mov    0x4(%eax),%eax
f0132891:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132894:	8b 12                	mov    (%edx),%edx
f0132896:	89 10                	mov    %edx,(%eax)
f0132898:	eb 0a                	jmp    f01328a4 <alloc_block_FF+0x95>
f013289a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013289d:	8b 00                	mov    (%eax),%eax
f013289f:	a3 64 ad 89 f0       	mov    %eax,0xf089ad64
f01328a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328a7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01328ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328b0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01328b7:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f01328bc:	48                   	dec    %eax
f01328bd:	a3 70 ad 89 f0       	mov    %eax,0xf089ad70
			   return  point;
f01328c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328c5:	e9 10 01 00 00       	jmp    f01329da <alloc_block_FF+0x1cb>
			   break;
		   }
		   else if (size < point->size){
f01328ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328cd:	8b 40 0c             	mov    0xc(%eax),%eax
f01328d0:	3b 45 08             	cmp    0x8(%ebp),%eax
f01328d3:	0f 86 c6 00 00 00    	jbe    f013299f <alloc_block_FF+0x190>
			   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f01328d9:	a1 98 ad 89 f0       	mov    0xf089ad98,%eax
f01328de:	89 45 f0             	mov    %eax,-0x10(%ebp)
			   ReturnedBlock->sva = point->sva;
f01328e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328e4:	8b 50 08             	mov    0x8(%eax),%edx
f01328e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01328ea:	89 50 08             	mov    %edx,0x8(%eax)
			   ReturnedBlock->size = size;
f01328ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01328f0:	8b 55 08             	mov    0x8(%ebp),%edx
f01328f3:	89 50 0c             	mov    %edx,0xc(%eax)
			   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f01328f6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01328fa:	75 17                	jne    f0132913 <alloc_block_FF+0x104>
f01328fc:	83 ec 04             	sub    $0x4,%esp
f01328ff:	68 90 dc 13 f0       	push   $0xf013dc90
f0132904:	68 9b 00 00 00       	push   $0x9b
f0132909:	68 e7 db 13 f0       	push   $0xf013dbe7
f013290e:	e8 f2 d8 fc ff       	call   f0100205 <_panic>
f0132913:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132916:	8b 00                	mov    (%eax),%eax
f0132918:	85 c0                	test   %eax,%eax
f013291a:	74 10                	je     f013292c <alloc_block_FF+0x11d>
f013291c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013291f:	8b 00                	mov    (%eax),%eax
f0132921:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132924:	8b 52 04             	mov    0x4(%edx),%edx
f0132927:	89 50 04             	mov    %edx,0x4(%eax)
f013292a:	eb 0b                	jmp    f0132937 <alloc_block_FF+0x128>
f013292c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013292f:	8b 40 04             	mov    0x4(%eax),%eax
f0132932:	a3 9c ad 89 f0       	mov    %eax,0xf089ad9c
f0132937:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013293a:	8b 40 04             	mov    0x4(%eax),%eax
f013293d:	85 c0                	test   %eax,%eax
f013293f:	74 0f                	je     f0132950 <alloc_block_FF+0x141>
f0132941:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132944:	8b 40 04             	mov    0x4(%eax),%eax
f0132947:	8b 55 f0             	mov    -0x10(%ebp),%edx
f013294a:	8b 12                	mov    (%edx),%edx
f013294c:	89 10                	mov    %edx,(%eax)
f013294e:	eb 0a                	jmp    f013295a <alloc_block_FF+0x14b>
f0132950:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132953:	8b 00                	mov    (%eax),%eax
f0132955:	a3 98 ad 89 f0       	mov    %eax,0xf089ad98
f013295a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013295d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132963:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132966:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013296d:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f0132972:	48                   	dec    %eax
f0132973:	a3 a4 ad 89 f0       	mov    %eax,0xf089ada4
			   point->sva += size;
f0132978:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013297b:	8b 50 08             	mov    0x8(%eax),%edx
f013297e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132981:	01 c2                	add    %eax,%edx
f0132983:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132986:	89 50 08             	mov    %edx,0x8(%eax)
			   point->size -= size;
f0132989:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013298c:	8b 40 0c             	mov    0xc(%eax),%eax
f013298f:	2b 45 08             	sub    0x8(%ebp),%eax
f0132992:	89 c2                	mov    %eax,%edx
f0132994:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132997:	89 50 0c             	mov    %edx,0xc(%eax)
			   return ReturnedBlock;
f013299a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013299d:	eb 3b                	jmp    f01329da <alloc_block_FF+0x1cb>
struct MemBlock *alloc_block_FF(uint32 size)
{
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	struct MemBlock *point;
	LIST_FOREACH(point,&FreeMemBlocksList)
f013299f:	a1 6c ad 89 f0       	mov    0xf089ad6c,%eax
f01329a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01329a7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01329ab:	74 07                	je     f01329b4 <alloc_block_FF+0x1a5>
f01329ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329b0:	8b 00                	mov    (%eax),%eax
f01329b2:	eb 05                	jmp    f01329b9 <alloc_block_FF+0x1aa>
f01329b4:	b8 00 00 00 00       	mov    $0x0,%eax
f01329b9:	a3 6c ad 89 f0       	mov    %eax,0xf089ad6c
f01329be:	a1 6c ad 89 f0       	mov    0xf089ad6c,%eax
f01329c3:	85 c0                	test   %eax,%eax
f01329c5:	0f 85 57 fe ff ff    	jne    f0132822 <alloc_block_FF+0x13>
f01329cb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01329cf:	0f 85 4d fe ff ff    	jne    f0132822 <alloc_block_FF+0x13>
			   return ReturnedBlock;
			   break;
		   }
		}
	}
	return NULL;
f01329d5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01329da:	c9                   	leave  
f01329db:	c3                   	ret    

f01329dc <alloc_block_BF>:

//=========================================
// [5] ALLOCATE BLOCK BY BEST FIT:
//=========================================
struct MemBlock *alloc_block_BF(uint32 size)
{
f01329dc:	55                   	push   %ebp
f01329dd:	89 e5                	mov    %esp,%ebp
f01329df:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_BF
	// Write your code here, remove the panic and write your code
	struct MemBlock *currentMemBlock;
	uint32 minSize;
	uint32 svaOfMinSize;
	bool isFound = 1==0;
f01329e2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	LIST_FOREACH(currentMemBlock,&FreeMemBlocksList)
f01329e9:	a1 64 ad 89 f0       	mov    0xf089ad64,%eax
f01329ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01329f1:	e9 df 00 00 00       	jmp    f0132ad5 <alloc_block_BF+0xf9>
	{
		if(size <= currentMemBlock->size)
f01329f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329f9:	8b 40 0c             	mov    0xc(%eax),%eax
f01329fc:	3b 45 08             	cmp    0x8(%ebp),%eax
f01329ff:	0f 82 c8 00 00 00    	jb     f0132acd <alloc_block_BF+0xf1>
		{
		   if(size == currentMemBlock->size)
f0132a05:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a08:	8b 40 0c             	mov    0xc(%eax),%eax
f0132a0b:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132a0e:	0f 85 8a 00 00 00    	jne    f0132a9e <alloc_block_BF+0xc2>
		   {
			   LIST_REMOVE(&FreeMemBlocksList,currentMemBlock);
f0132a14:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132a18:	75 17                	jne    f0132a31 <alloc_block_BF+0x55>
f0132a1a:	83 ec 04             	sub    $0x4,%esp
f0132a1d:	68 90 dc 13 f0       	push   $0xf013dc90
f0132a22:	68 b7 00 00 00       	push   $0xb7
f0132a27:	68 e7 db 13 f0       	push   $0xf013dbe7
f0132a2c:	e8 d4 d7 fc ff       	call   f0100205 <_panic>
f0132a31:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a34:	8b 00                	mov    (%eax),%eax
f0132a36:	85 c0                	test   %eax,%eax
f0132a38:	74 10                	je     f0132a4a <alloc_block_BF+0x6e>
f0132a3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a3d:	8b 00                	mov    (%eax),%eax
f0132a3f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132a42:	8b 52 04             	mov    0x4(%edx),%edx
f0132a45:	89 50 04             	mov    %edx,0x4(%eax)
f0132a48:	eb 0b                	jmp    f0132a55 <alloc_block_BF+0x79>
f0132a4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a4d:	8b 40 04             	mov    0x4(%eax),%eax
f0132a50:	a3 68 ad 89 f0       	mov    %eax,0xf089ad68
f0132a55:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a58:	8b 40 04             	mov    0x4(%eax),%eax
f0132a5b:	85 c0                	test   %eax,%eax
f0132a5d:	74 0f                	je     f0132a6e <alloc_block_BF+0x92>
f0132a5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a62:	8b 40 04             	mov    0x4(%eax),%eax
f0132a65:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132a68:	8b 12                	mov    (%edx),%edx
f0132a6a:	89 10                	mov    %edx,(%eax)
f0132a6c:	eb 0a                	jmp    f0132a78 <alloc_block_BF+0x9c>
f0132a6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a71:	8b 00                	mov    (%eax),%eax
f0132a73:	a3 64 ad 89 f0       	mov    %eax,0xf089ad64
f0132a78:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a7b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132a81:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a84:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132a8b:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f0132a90:	48                   	dec    %eax
f0132a91:	a3 70 ad 89 f0       	mov    %eax,0xf089ad70
			   return currentMemBlock;
f0132a96:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a99:	e9 4d 01 00 00       	jmp    f0132beb <alloc_block_BF+0x20f>
		   }
		   else if (size < currentMemBlock->size && currentMemBlock->size < minSize)
f0132a9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132aa1:	8b 40 0c             	mov    0xc(%eax),%eax
f0132aa4:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132aa7:	76 24                	jbe    f0132acd <alloc_block_BF+0xf1>
f0132aa9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132aac:	8b 40 0c             	mov    0xc(%eax),%eax
f0132aaf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0132ab2:	73 19                	jae    f0132acd <alloc_block_BF+0xf1>
		   {
			   isFound = 1==1;
f0132ab4:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
			   minSize = currentMemBlock->size;
f0132abb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132abe:	8b 40 0c             	mov    0xc(%eax),%eax
f0132ac1:	89 45 f0             	mov    %eax,-0x10(%ebp)
			   svaOfMinSize = currentMemBlock->sva;
f0132ac4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132ac7:	8b 40 08             	mov    0x8(%eax),%eax
f0132aca:	89 45 ec             	mov    %eax,-0x14(%ebp)
	// Write your code here, remove the panic and write your code
	struct MemBlock *currentMemBlock;
	uint32 minSize;
	uint32 svaOfMinSize;
	bool isFound = 1==0;
	LIST_FOREACH(currentMemBlock,&FreeMemBlocksList)
f0132acd:	a1 6c ad 89 f0       	mov    0xf089ad6c,%eax
f0132ad2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132ad5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132ad9:	74 07                	je     f0132ae2 <alloc_block_BF+0x106>
f0132adb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132ade:	8b 00                	mov    (%eax),%eax
f0132ae0:	eb 05                	jmp    f0132ae7 <alloc_block_BF+0x10b>
f0132ae2:	b8 00 00 00 00       	mov    $0x0,%eax
f0132ae7:	a3 6c ad 89 f0       	mov    %eax,0xf089ad6c
f0132aec:	a1 6c ad 89 f0       	mov    0xf089ad6c,%eax
f0132af1:	85 c0                	test   %eax,%eax
f0132af3:	0f 85 fd fe ff ff    	jne    f01329f6 <alloc_block_BF+0x1a>
f0132af9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132afd:	0f 85 f3 fe ff ff    	jne    f01329f6 <alloc_block_BF+0x1a>
			   minSize = currentMemBlock->size;
			   svaOfMinSize = currentMemBlock->sva;
		   }
		}
	}
	if(isFound)
f0132b03:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132b07:	0f 84 d9 00 00 00    	je     f0132be6 <alloc_block_BF+0x20a>
	{
		struct MemBlock * foundBlock = LIST_FIRST(&AvailableMemBlocksList);
f0132b0d:	a1 98 ad 89 f0       	mov    0xf089ad98,%eax
f0132b12:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		foundBlock->sva = svaOfMinSize;
f0132b15:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132b18:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132b1b:	89 50 08             	mov    %edx,0x8(%eax)
		foundBlock->size = size;
f0132b1e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132b21:	8b 55 08             	mov    0x8(%ebp),%edx
f0132b24:	89 50 0c             	mov    %edx,0xc(%eax)
		LIST_REMOVE(&AvailableMemBlocksList,foundBlock);
f0132b27:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0132b2b:	75 17                	jne    f0132b44 <alloc_block_BF+0x168>
f0132b2d:	83 ec 04             	sub    $0x4,%esp
f0132b30:	68 90 dc 13 f0       	push   $0xf013dc90
f0132b35:	68 c7 00 00 00       	push   $0xc7
f0132b3a:	68 e7 db 13 f0       	push   $0xf013dbe7
f0132b3f:	e8 c1 d6 fc ff       	call   f0100205 <_panic>
f0132b44:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132b47:	8b 00                	mov    (%eax),%eax
f0132b49:	85 c0                	test   %eax,%eax
f0132b4b:	74 10                	je     f0132b5d <alloc_block_BF+0x181>
f0132b4d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132b50:	8b 00                	mov    (%eax),%eax
f0132b52:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0132b55:	8b 52 04             	mov    0x4(%edx),%edx
f0132b58:	89 50 04             	mov    %edx,0x4(%eax)
f0132b5b:	eb 0b                	jmp    f0132b68 <alloc_block_BF+0x18c>
f0132b5d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132b60:	8b 40 04             	mov    0x4(%eax),%eax
f0132b63:	a3 9c ad 89 f0       	mov    %eax,0xf089ad9c
f0132b68:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132b6b:	8b 40 04             	mov    0x4(%eax),%eax
f0132b6e:	85 c0                	test   %eax,%eax
f0132b70:	74 0f                	je     f0132b81 <alloc_block_BF+0x1a5>
f0132b72:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132b75:	8b 40 04             	mov    0x4(%eax),%eax
f0132b78:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0132b7b:	8b 12                	mov    (%edx),%edx
f0132b7d:	89 10                	mov    %edx,(%eax)
f0132b7f:	eb 0a                	jmp    f0132b8b <alloc_block_BF+0x1af>
f0132b81:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132b84:	8b 00                	mov    (%eax),%eax
f0132b86:	a3 98 ad 89 f0       	mov    %eax,0xf089ad98
f0132b8b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132b8e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132b94:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132b97:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132b9e:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f0132ba3:	48                   	dec    %eax
f0132ba4:	a3 a4 ad 89 f0       	mov    %eax,0xf089ada4
		struct MemBlock *cMemBlock = find_block(&FreeMemBlocksList, svaOfMinSize);
f0132ba9:	83 ec 08             	sub    $0x8,%esp
f0132bac:	ff 75 ec             	pushl  -0x14(%ebp)
f0132baf:	68 64 ad 89 f0       	push   $0xf089ad64
f0132bb4:	e8 71 f9 ff ff       	call   f013252a <find_block>
f0132bb9:	83 c4 10             	add    $0x10,%esp
f0132bbc:	89 45 e0             	mov    %eax,-0x20(%ebp)
		cMemBlock->sva += size;
f0132bbf:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132bc2:	8b 50 08             	mov    0x8(%eax),%edx
f0132bc5:	8b 45 08             	mov    0x8(%ebp),%eax
f0132bc8:	01 c2                	add    %eax,%edx
f0132bca:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132bcd:	89 50 08             	mov    %edx,0x8(%eax)
		cMemBlock->size -= size;
f0132bd0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132bd3:	8b 40 0c             	mov    0xc(%eax),%eax
f0132bd6:	2b 45 08             	sub    0x8(%ebp),%eax
f0132bd9:	89 c2                	mov    %eax,%edx
f0132bdb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132bde:	89 50 0c             	mov    %edx,0xc(%eax)
		return foundBlock;
f0132be1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132be4:	eb 05                	jmp    f0132beb <alloc_block_BF+0x20f>
	}
	return NULL;
f0132be6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0132beb:	c9                   	leave  
f0132bec:	c3                   	ret    

f0132bed <alloc_block_NF>:
uint32 svaOfNF = 0;
//=========================================
// [7] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
struct MemBlock *alloc_block_NF(uint32 size)
{
f0132bed:	55                   	push   %ebp
f0132bee:	89 e5                	mov    %esp,%ebp
f0132bf0:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your codestruct MemBlock *point;
	struct MemBlock *point;
	if(svaOfNF == 0)
f0132bf3:	a1 b0 ac 89 f0       	mov    0xf089acb0,%eax
f0132bf8:	85 c0                	test   %eax,%eax
f0132bfa:	0f 85 de 01 00 00    	jne    f0132dde <alloc_block_NF+0x1f1>
	{
		LIST_FOREACH(point,&FreeMemBlocksList)
f0132c00:	a1 64 ad 89 f0       	mov    0xf089ad64,%eax
f0132c05:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132c08:	e9 9e 01 00 00       	jmp    f0132dab <alloc_block_NF+0x1be>
		{
			if(size <= point->size)
f0132c0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c10:	8b 40 0c             	mov    0xc(%eax),%eax
f0132c13:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132c16:	0f 82 87 01 00 00    	jb     f0132da3 <alloc_block_NF+0x1b6>
			{
			   if(size == point->size){
f0132c1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c1f:	8b 40 0c             	mov    0xc(%eax),%eax
f0132c22:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132c25:	0f 85 95 00 00 00    	jne    f0132cc0 <alloc_block_NF+0xd3>
				   LIST_REMOVE(&FreeMemBlocksList,point);
f0132c2b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132c2f:	75 17                	jne    f0132c48 <alloc_block_NF+0x5b>
f0132c31:	83 ec 04             	sub    $0x4,%esp
f0132c34:	68 90 dc 13 f0       	push   $0xf013dc90
f0132c39:	68 e0 00 00 00       	push   $0xe0
f0132c3e:	68 e7 db 13 f0       	push   $0xf013dbe7
f0132c43:	e8 bd d5 fc ff       	call   f0100205 <_panic>
f0132c48:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c4b:	8b 00                	mov    (%eax),%eax
f0132c4d:	85 c0                	test   %eax,%eax
f0132c4f:	74 10                	je     f0132c61 <alloc_block_NF+0x74>
f0132c51:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c54:	8b 00                	mov    (%eax),%eax
f0132c56:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132c59:	8b 52 04             	mov    0x4(%edx),%edx
f0132c5c:	89 50 04             	mov    %edx,0x4(%eax)
f0132c5f:	eb 0b                	jmp    f0132c6c <alloc_block_NF+0x7f>
f0132c61:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c64:	8b 40 04             	mov    0x4(%eax),%eax
f0132c67:	a3 68 ad 89 f0       	mov    %eax,0xf089ad68
f0132c6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c6f:	8b 40 04             	mov    0x4(%eax),%eax
f0132c72:	85 c0                	test   %eax,%eax
f0132c74:	74 0f                	je     f0132c85 <alloc_block_NF+0x98>
f0132c76:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c79:	8b 40 04             	mov    0x4(%eax),%eax
f0132c7c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132c7f:	8b 12                	mov    (%edx),%edx
f0132c81:	89 10                	mov    %edx,(%eax)
f0132c83:	eb 0a                	jmp    f0132c8f <alloc_block_NF+0xa2>
f0132c85:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c88:	8b 00                	mov    (%eax),%eax
f0132c8a:	a3 64 ad 89 f0       	mov    %eax,0xf089ad64
f0132c8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c92:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132c98:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c9b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132ca2:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f0132ca7:	48                   	dec    %eax
f0132ca8:	a3 70 ad 89 f0       	mov    %eax,0xf089ad70
				   svaOfNF = point->sva;
f0132cad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132cb0:	8b 40 08             	mov    0x8(%eax),%eax
f0132cb3:	a3 b0 ac 89 f0       	mov    %eax,0xf089acb0
				   return  point;
f0132cb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132cbb:	e9 f8 04 00 00       	jmp    f01331b8 <alloc_block_NF+0x5cb>
				   break;
			   }
			   else if (size < point->size){
f0132cc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132cc3:	8b 40 0c             	mov    0xc(%eax),%eax
f0132cc6:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132cc9:	0f 86 d4 00 00 00    	jbe    f0132da3 <alloc_block_NF+0x1b6>
				   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0132ccf:	a1 98 ad 89 f0       	mov    0xf089ad98,%eax
f0132cd4:	89 45 f0             	mov    %eax,-0x10(%ebp)
				   ReturnedBlock->sva = point->sva;
f0132cd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132cda:	8b 50 08             	mov    0x8(%eax),%edx
f0132cdd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132ce0:	89 50 08             	mov    %edx,0x8(%eax)
				   ReturnedBlock->size = size;
f0132ce3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132ce6:	8b 55 08             	mov    0x8(%ebp),%edx
f0132ce9:	89 50 0c             	mov    %edx,0xc(%eax)
				   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0132cec:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132cf0:	75 17                	jne    f0132d09 <alloc_block_NF+0x11c>
f0132cf2:	83 ec 04             	sub    $0x4,%esp
f0132cf5:	68 90 dc 13 f0       	push   $0xf013dc90
f0132cfa:	68 e9 00 00 00       	push   $0xe9
f0132cff:	68 e7 db 13 f0       	push   $0xf013dbe7
f0132d04:	e8 fc d4 fc ff       	call   f0100205 <_panic>
f0132d09:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132d0c:	8b 00                	mov    (%eax),%eax
f0132d0e:	85 c0                	test   %eax,%eax
f0132d10:	74 10                	je     f0132d22 <alloc_block_NF+0x135>
f0132d12:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132d15:	8b 00                	mov    (%eax),%eax
f0132d17:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132d1a:	8b 52 04             	mov    0x4(%edx),%edx
f0132d1d:	89 50 04             	mov    %edx,0x4(%eax)
f0132d20:	eb 0b                	jmp    f0132d2d <alloc_block_NF+0x140>
f0132d22:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132d25:	8b 40 04             	mov    0x4(%eax),%eax
f0132d28:	a3 9c ad 89 f0       	mov    %eax,0xf089ad9c
f0132d2d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132d30:	8b 40 04             	mov    0x4(%eax),%eax
f0132d33:	85 c0                	test   %eax,%eax
f0132d35:	74 0f                	je     f0132d46 <alloc_block_NF+0x159>
f0132d37:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132d3a:	8b 40 04             	mov    0x4(%eax),%eax
f0132d3d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132d40:	8b 12                	mov    (%edx),%edx
f0132d42:	89 10                	mov    %edx,(%eax)
f0132d44:	eb 0a                	jmp    f0132d50 <alloc_block_NF+0x163>
f0132d46:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132d49:	8b 00                	mov    (%eax),%eax
f0132d4b:	a3 98 ad 89 f0       	mov    %eax,0xf089ad98
f0132d50:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132d53:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132d59:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132d5c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132d63:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f0132d68:	48                   	dec    %eax
f0132d69:	a3 a4 ad 89 f0       	mov    %eax,0xf089ada4
				   svaOfNF = ReturnedBlock->sva;
f0132d6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132d71:	8b 40 08             	mov    0x8(%eax),%eax
f0132d74:	a3 b0 ac 89 f0       	mov    %eax,0xf089acb0
				   point->sva += size;
f0132d79:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d7c:	8b 50 08             	mov    0x8(%eax),%edx
f0132d7f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132d82:	01 c2                	add    %eax,%edx
f0132d84:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d87:	89 50 08             	mov    %edx,0x8(%eax)
				   point->size -= size;
f0132d8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d8d:	8b 40 0c             	mov    0xc(%eax),%eax
f0132d90:	2b 45 08             	sub    0x8(%ebp),%eax
f0132d93:	89 c2                	mov    %eax,%edx
f0132d95:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d98:	89 50 0c             	mov    %edx,0xc(%eax)
				   return ReturnedBlock;
f0132d9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132d9e:	e9 15 04 00 00       	jmp    f01331b8 <alloc_block_NF+0x5cb>
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your codestruct MemBlock *point;
	struct MemBlock *point;
	if(svaOfNF == 0)
	{
		LIST_FOREACH(point,&FreeMemBlocksList)
f0132da3:	a1 6c ad 89 f0       	mov    0xf089ad6c,%eax
f0132da8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132dab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132daf:	74 07                	je     f0132db8 <alloc_block_NF+0x1cb>
f0132db1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132db4:	8b 00                	mov    (%eax),%eax
f0132db6:	eb 05                	jmp    f0132dbd <alloc_block_NF+0x1d0>
f0132db8:	b8 00 00 00 00       	mov    $0x0,%eax
f0132dbd:	a3 6c ad 89 f0       	mov    %eax,0xf089ad6c
f0132dc2:	a1 6c ad 89 f0       	mov    0xf089ad6c,%eax
f0132dc7:	85 c0                	test   %eax,%eax
f0132dc9:	0f 85 3e fe ff ff    	jne    f0132c0d <alloc_block_NF+0x20>
f0132dcf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132dd3:	0f 85 34 fe ff ff    	jne    f0132c0d <alloc_block_NF+0x20>
f0132dd9:	e9 d5 03 00 00       	jmp    f01331b3 <alloc_block_NF+0x5c6>
			}
		}
	}
	else
	{
		LIST_FOREACH(point, &FreeMemBlocksList)
f0132dde:	a1 64 ad 89 f0       	mov    0xf089ad64,%eax
f0132de3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132de6:	e9 b1 01 00 00       	jmp    f0132f9c <alloc_block_NF+0x3af>
		{
			if(point->sva >= svaOfNF)
f0132deb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132dee:	8b 50 08             	mov    0x8(%eax),%edx
f0132df1:	a1 b0 ac 89 f0       	mov    0xf089acb0,%eax
f0132df6:	39 c2                	cmp    %eax,%edx
f0132df8:	0f 82 96 01 00 00    	jb     f0132f94 <alloc_block_NF+0x3a7>
			{
				if(size <= point->size)
f0132dfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e01:	8b 40 0c             	mov    0xc(%eax),%eax
f0132e04:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132e07:	0f 82 87 01 00 00    	jb     f0132f94 <alloc_block_NF+0x3a7>
				{
				   if(size == point->size){
f0132e0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e10:	8b 40 0c             	mov    0xc(%eax),%eax
f0132e13:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132e16:	0f 85 95 00 00 00    	jne    f0132eb1 <alloc_block_NF+0x2c4>
					   LIST_REMOVE(&FreeMemBlocksList,point);
f0132e1c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132e20:	75 17                	jne    f0132e39 <alloc_block_NF+0x24c>
f0132e22:	83 ec 04             	sub    $0x4,%esp
f0132e25:	68 90 dc 13 f0       	push   $0xf013dc90
f0132e2a:	68 fc 00 00 00       	push   $0xfc
f0132e2f:	68 e7 db 13 f0       	push   $0xf013dbe7
f0132e34:	e8 cc d3 fc ff       	call   f0100205 <_panic>
f0132e39:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e3c:	8b 00                	mov    (%eax),%eax
f0132e3e:	85 c0                	test   %eax,%eax
f0132e40:	74 10                	je     f0132e52 <alloc_block_NF+0x265>
f0132e42:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e45:	8b 00                	mov    (%eax),%eax
f0132e47:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132e4a:	8b 52 04             	mov    0x4(%edx),%edx
f0132e4d:	89 50 04             	mov    %edx,0x4(%eax)
f0132e50:	eb 0b                	jmp    f0132e5d <alloc_block_NF+0x270>
f0132e52:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e55:	8b 40 04             	mov    0x4(%eax),%eax
f0132e58:	a3 68 ad 89 f0       	mov    %eax,0xf089ad68
f0132e5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e60:	8b 40 04             	mov    0x4(%eax),%eax
f0132e63:	85 c0                	test   %eax,%eax
f0132e65:	74 0f                	je     f0132e76 <alloc_block_NF+0x289>
f0132e67:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e6a:	8b 40 04             	mov    0x4(%eax),%eax
f0132e6d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132e70:	8b 12                	mov    (%edx),%edx
f0132e72:	89 10                	mov    %edx,(%eax)
f0132e74:	eb 0a                	jmp    f0132e80 <alloc_block_NF+0x293>
f0132e76:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e79:	8b 00                	mov    (%eax),%eax
f0132e7b:	a3 64 ad 89 f0       	mov    %eax,0xf089ad64
f0132e80:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e83:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132e89:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e8c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132e93:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f0132e98:	48                   	dec    %eax
f0132e99:	a3 70 ad 89 f0       	mov    %eax,0xf089ad70
					   svaOfNF = point->sva;
f0132e9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132ea1:	8b 40 08             	mov    0x8(%eax),%eax
f0132ea4:	a3 b0 ac 89 f0       	mov    %eax,0xf089acb0
					   return  point;
f0132ea9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132eac:	e9 07 03 00 00       	jmp    f01331b8 <alloc_block_NF+0x5cb>
				   }
				   else if (size < point->size){
f0132eb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132eb4:	8b 40 0c             	mov    0xc(%eax),%eax
f0132eb7:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132eba:	0f 86 d4 00 00 00    	jbe    f0132f94 <alloc_block_NF+0x3a7>
					   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0132ec0:	a1 98 ad 89 f0       	mov    0xf089ad98,%eax
f0132ec5:	89 45 e8             	mov    %eax,-0x18(%ebp)
					   ReturnedBlock->sva = point->sva;
f0132ec8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132ecb:	8b 50 08             	mov    0x8(%eax),%edx
f0132ece:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132ed1:	89 50 08             	mov    %edx,0x8(%eax)
					   ReturnedBlock->size = size;
f0132ed4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132ed7:	8b 55 08             	mov    0x8(%ebp),%edx
f0132eda:	89 50 0c             	mov    %edx,0xc(%eax)
					   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0132edd:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132ee1:	75 17                	jne    f0132efa <alloc_block_NF+0x30d>
f0132ee3:	83 ec 04             	sub    $0x4,%esp
f0132ee6:	68 90 dc 13 f0       	push   $0xf013dc90
f0132eeb:	68 04 01 00 00       	push   $0x104
f0132ef0:	68 e7 db 13 f0       	push   $0xf013dbe7
f0132ef5:	e8 0b d3 fc ff       	call   f0100205 <_panic>
f0132efa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132efd:	8b 00                	mov    (%eax),%eax
f0132eff:	85 c0                	test   %eax,%eax
f0132f01:	74 10                	je     f0132f13 <alloc_block_NF+0x326>
f0132f03:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132f06:	8b 00                	mov    (%eax),%eax
f0132f08:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132f0b:	8b 52 04             	mov    0x4(%edx),%edx
f0132f0e:	89 50 04             	mov    %edx,0x4(%eax)
f0132f11:	eb 0b                	jmp    f0132f1e <alloc_block_NF+0x331>
f0132f13:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132f16:	8b 40 04             	mov    0x4(%eax),%eax
f0132f19:	a3 9c ad 89 f0       	mov    %eax,0xf089ad9c
f0132f1e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132f21:	8b 40 04             	mov    0x4(%eax),%eax
f0132f24:	85 c0                	test   %eax,%eax
f0132f26:	74 0f                	je     f0132f37 <alloc_block_NF+0x34a>
f0132f28:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132f2b:	8b 40 04             	mov    0x4(%eax),%eax
f0132f2e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132f31:	8b 12                	mov    (%edx),%edx
f0132f33:	89 10                	mov    %edx,(%eax)
f0132f35:	eb 0a                	jmp    f0132f41 <alloc_block_NF+0x354>
f0132f37:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132f3a:	8b 00                	mov    (%eax),%eax
f0132f3c:	a3 98 ad 89 f0       	mov    %eax,0xf089ad98
f0132f41:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132f44:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132f4a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132f4d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132f54:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f0132f59:	48                   	dec    %eax
f0132f5a:	a3 a4 ad 89 f0       	mov    %eax,0xf089ada4
					   svaOfNF = ReturnedBlock->sva;
f0132f5f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132f62:	8b 40 08             	mov    0x8(%eax),%eax
f0132f65:	a3 b0 ac 89 f0       	mov    %eax,0xf089acb0
					   point->sva += size;
f0132f6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132f6d:	8b 50 08             	mov    0x8(%eax),%edx
f0132f70:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f73:	01 c2                	add    %eax,%edx
f0132f75:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132f78:	89 50 08             	mov    %edx,0x8(%eax)
					   point->size -= size;
f0132f7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132f7e:	8b 40 0c             	mov    0xc(%eax),%eax
f0132f81:	2b 45 08             	sub    0x8(%ebp),%eax
f0132f84:	89 c2                	mov    %eax,%edx
f0132f86:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132f89:	89 50 0c             	mov    %edx,0xc(%eax)
					   return ReturnedBlock;
f0132f8c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132f8f:	e9 24 02 00 00       	jmp    f01331b8 <alloc_block_NF+0x5cb>
			}
		}
	}
	else
	{
		LIST_FOREACH(point, &FreeMemBlocksList)
f0132f94:	a1 6c ad 89 f0       	mov    0xf089ad6c,%eax
f0132f99:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132f9c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132fa0:	74 07                	je     f0132fa9 <alloc_block_NF+0x3bc>
f0132fa2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132fa5:	8b 00                	mov    (%eax),%eax
f0132fa7:	eb 05                	jmp    f0132fae <alloc_block_NF+0x3c1>
f0132fa9:	b8 00 00 00 00       	mov    $0x0,%eax
f0132fae:	a3 6c ad 89 f0       	mov    %eax,0xf089ad6c
f0132fb3:	a1 6c ad 89 f0       	mov    0xf089ad6c,%eax
f0132fb8:	85 c0                	test   %eax,%eax
f0132fba:	0f 85 2b fe ff ff    	jne    f0132deb <alloc_block_NF+0x1fe>
f0132fc0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132fc4:	0f 85 21 fe ff ff    	jne    f0132deb <alloc_block_NF+0x1fe>
					   return ReturnedBlock;
				   }
				}
			}
		}
		LIST_FOREACH(point, &FreeMemBlocksList)
f0132fca:	a1 64 ad 89 f0       	mov    0xf089ad64,%eax
f0132fcf:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132fd2:	e9 ae 01 00 00       	jmp    f0133185 <alloc_block_NF+0x598>
		{
			if(point->sva < svaOfNF)
f0132fd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132fda:	8b 50 08             	mov    0x8(%eax),%edx
f0132fdd:	a1 b0 ac 89 f0       	mov    0xf089acb0,%eax
f0132fe2:	39 c2                	cmp    %eax,%edx
f0132fe4:	0f 83 93 01 00 00    	jae    f013317d <alloc_block_NF+0x590>
			{
				if(size <= point->size)
f0132fea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132fed:	8b 40 0c             	mov    0xc(%eax),%eax
f0132ff0:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132ff3:	0f 82 84 01 00 00    	jb     f013317d <alloc_block_NF+0x590>
				{
				   if(size == point->size){
f0132ff9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132ffc:	8b 40 0c             	mov    0xc(%eax),%eax
f0132fff:	3b 45 08             	cmp    0x8(%ebp),%eax
f0133002:	0f 85 95 00 00 00    	jne    f013309d <alloc_block_NF+0x4b0>
					   LIST_REMOVE(&FreeMemBlocksList,point);
f0133008:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013300c:	75 17                	jne    f0133025 <alloc_block_NF+0x438>
f013300e:	83 ec 04             	sub    $0x4,%esp
f0133011:	68 90 dc 13 f0       	push   $0xf013dc90
f0133016:	68 14 01 00 00       	push   $0x114
f013301b:	68 e7 db 13 f0       	push   $0xf013dbe7
f0133020:	e8 e0 d1 fc ff       	call   f0100205 <_panic>
f0133025:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133028:	8b 00                	mov    (%eax),%eax
f013302a:	85 c0                	test   %eax,%eax
f013302c:	74 10                	je     f013303e <alloc_block_NF+0x451>
f013302e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133031:	8b 00                	mov    (%eax),%eax
f0133033:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0133036:	8b 52 04             	mov    0x4(%edx),%edx
f0133039:	89 50 04             	mov    %edx,0x4(%eax)
f013303c:	eb 0b                	jmp    f0133049 <alloc_block_NF+0x45c>
f013303e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133041:	8b 40 04             	mov    0x4(%eax),%eax
f0133044:	a3 68 ad 89 f0       	mov    %eax,0xf089ad68
f0133049:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013304c:	8b 40 04             	mov    0x4(%eax),%eax
f013304f:	85 c0                	test   %eax,%eax
f0133051:	74 0f                	je     f0133062 <alloc_block_NF+0x475>
f0133053:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133056:	8b 40 04             	mov    0x4(%eax),%eax
f0133059:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013305c:	8b 12                	mov    (%edx),%edx
f013305e:	89 10                	mov    %edx,(%eax)
f0133060:	eb 0a                	jmp    f013306c <alloc_block_NF+0x47f>
f0133062:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133065:	8b 00                	mov    (%eax),%eax
f0133067:	a3 64 ad 89 f0       	mov    %eax,0xf089ad64
f013306c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013306f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0133075:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133078:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013307f:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f0133084:	48                   	dec    %eax
f0133085:	a3 70 ad 89 f0       	mov    %eax,0xf089ad70
					   svaOfNF = point->sva;
f013308a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013308d:	8b 40 08             	mov    0x8(%eax),%eax
f0133090:	a3 b0 ac 89 f0       	mov    %eax,0xf089acb0
					   return  point;
f0133095:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133098:	e9 1b 01 00 00       	jmp    f01331b8 <alloc_block_NF+0x5cb>
				   }
				   else if (size < point->size){
f013309d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01330a0:	8b 40 0c             	mov    0xc(%eax),%eax
f01330a3:	3b 45 08             	cmp    0x8(%ebp),%eax
f01330a6:	0f 86 d1 00 00 00    	jbe    f013317d <alloc_block_NF+0x590>
					   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f01330ac:	a1 98 ad 89 f0       	mov    0xf089ad98,%eax
f01330b1:	89 45 ec             	mov    %eax,-0x14(%ebp)
					   ReturnedBlock->sva = point->sva;
f01330b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01330b7:	8b 50 08             	mov    0x8(%eax),%edx
f01330ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01330bd:	89 50 08             	mov    %edx,0x8(%eax)
					   ReturnedBlock->size = size;
f01330c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01330c3:	8b 55 08             	mov    0x8(%ebp),%edx
f01330c6:	89 50 0c             	mov    %edx,0xc(%eax)
					   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f01330c9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01330cd:	75 17                	jne    f01330e6 <alloc_block_NF+0x4f9>
f01330cf:	83 ec 04             	sub    $0x4,%esp
f01330d2:	68 90 dc 13 f0       	push   $0xf013dc90
f01330d7:	68 1c 01 00 00       	push   $0x11c
f01330dc:	68 e7 db 13 f0       	push   $0xf013dbe7
f01330e1:	e8 1f d1 fc ff       	call   f0100205 <_panic>
f01330e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01330e9:	8b 00                	mov    (%eax),%eax
f01330eb:	85 c0                	test   %eax,%eax
f01330ed:	74 10                	je     f01330ff <alloc_block_NF+0x512>
f01330ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01330f2:	8b 00                	mov    (%eax),%eax
f01330f4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01330f7:	8b 52 04             	mov    0x4(%edx),%edx
f01330fa:	89 50 04             	mov    %edx,0x4(%eax)
f01330fd:	eb 0b                	jmp    f013310a <alloc_block_NF+0x51d>
f01330ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0133102:	8b 40 04             	mov    0x4(%eax),%eax
f0133105:	a3 9c ad 89 f0       	mov    %eax,0xf089ad9c
f013310a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013310d:	8b 40 04             	mov    0x4(%eax),%eax
f0133110:	85 c0                	test   %eax,%eax
f0133112:	74 0f                	je     f0133123 <alloc_block_NF+0x536>
f0133114:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0133117:	8b 40 04             	mov    0x4(%eax),%eax
f013311a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f013311d:	8b 12                	mov    (%edx),%edx
f013311f:	89 10                	mov    %edx,(%eax)
f0133121:	eb 0a                	jmp    f013312d <alloc_block_NF+0x540>
f0133123:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0133126:	8b 00                	mov    (%eax),%eax
f0133128:	a3 98 ad 89 f0       	mov    %eax,0xf089ad98
f013312d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0133130:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0133136:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0133139:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0133140:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f0133145:	48                   	dec    %eax
f0133146:	a3 a4 ad 89 f0       	mov    %eax,0xf089ada4
					   svaOfNF = ReturnedBlock->sva;
f013314b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013314e:	8b 40 08             	mov    0x8(%eax),%eax
f0133151:	a3 b0 ac 89 f0       	mov    %eax,0xf089acb0
					   point->sva += size;
f0133156:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133159:	8b 50 08             	mov    0x8(%eax),%edx
f013315c:	8b 45 08             	mov    0x8(%ebp),%eax
f013315f:	01 c2                	add    %eax,%edx
f0133161:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133164:	89 50 08             	mov    %edx,0x8(%eax)
					   point->size -= size;
f0133167:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013316a:	8b 40 0c             	mov    0xc(%eax),%eax
f013316d:	2b 45 08             	sub    0x8(%ebp),%eax
f0133170:	89 c2                	mov    %eax,%edx
f0133172:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133175:	89 50 0c             	mov    %edx,0xc(%eax)
					   return ReturnedBlock;
f0133178:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013317b:	eb 3b                	jmp    f01331b8 <alloc_block_NF+0x5cb>
					   return ReturnedBlock;
				   }
				}
			}
		}
		LIST_FOREACH(point, &FreeMemBlocksList)
f013317d:	a1 6c ad 89 f0       	mov    0xf089ad6c,%eax
f0133182:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0133185:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0133189:	74 07                	je     f0133192 <alloc_block_NF+0x5a5>
f013318b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013318e:	8b 00                	mov    (%eax),%eax
f0133190:	eb 05                	jmp    f0133197 <alloc_block_NF+0x5aa>
f0133192:	b8 00 00 00 00       	mov    $0x0,%eax
f0133197:	a3 6c ad 89 f0       	mov    %eax,0xf089ad6c
f013319c:	a1 6c ad 89 f0       	mov    0xf089ad6c,%eax
f01331a1:	85 c0                	test   %eax,%eax
f01331a3:	0f 85 2e fe ff ff    	jne    f0132fd7 <alloc_block_NF+0x3ea>
f01331a9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01331ad:	0f 85 24 fe ff ff    	jne    f0132fd7 <alloc_block_NF+0x3ea>
				   }
				}
			}
		}
	}
	return NULL;
f01331b3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01331b8:	c9                   	leave  
f01331b9:	c3                   	ret    

f01331ba <insert_sorted_with_merge_freeList>:

//===================================================
// [8] INSERT BLOCK (SORTED WITH MERGE) IN FREE LIST:
//===================================================
void insert_sorted_with_merge_freeList(struct MemBlock *blockToInsert)
{
f01331ba:	55                   	push   %ebp
f01331bb:	89 e5                	mov    %esp,%ebp
f01331bd:	83 ec 18             	sub    $0x18,%esp
	//cprintf("BEFORE INSERT with MERGE: insert [%x, %x)\n=====================\n", blockToInsert->sva, blockToInsert->sva + blockToInsert->size);
	//print_mem_block_lists() ;

	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_with_merge_freeList
	// Write your code here, remove the panic and write your code
	struct MemBlock *head = LIST_FIRST(&FreeMemBlocksList) ;
f01331c0:	a1 64 ad 89 f0       	mov    0xf089ad64,%eax
f01331c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;
f01331c8:	a1 68 ad 89 f0       	mov    0xf089ad68,%eax
f01331cd:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
f01331d0:	a1 64 ad 89 f0       	mov    0xf089ad64,%eax
f01331d5:	85 c0                	test   %eax,%eax
f01331d7:	74 14                	je     f01331ed <insert_sorted_with_merge_freeList+0x33>
f01331d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01331dc:	8b 50 08             	mov    0x8(%eax),%edx
f01331df:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01331e2:	8b 40 08             	mov    0x8(%eax),%eax
f01331e5:	39 c2                	cmp    %eax,%edx
f01331e7:	0f 87 9b 01 00 00    	ja     f0133388 <insert_sorted_with_merge_freeList+0x1ce>
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
f01331ed:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01331f1:	75 17                	jne    f013320a <insert_sorted_with_merge_freeList+0x50>
f01331f3:	83 ec 04             	sub    $0x4,%esp
f01331f6:	68 c4 db 13 f0       	push   $0xf013dbc4
f01331fb:	68 38 01 00 00       	push   $0x138
f0133200:	68 e7 db 13 f0       	push   $0xf013dbe7
f0133205:	e8 fb cf fc ff       	call   f0100205 <_panic>
f013320a:	8b 15 64 ad 89 f0    	mov    0xf089ad64,%edx
f0133210:	8b 45 08             	mov    0x8(%ebp),%eax
f0133213:	89 10                	mov    %edx,(%eax)
f0133215:	8b 45 08             	mov    0x8(%ebp),%eax
f0133218:	8b 00                	mov    (%eax),%eax
f013321a:	85 c0                	test   %eax,%eax
f013321c:	74 0d                	je     f013322b <insert_sorted_with_merge_freeList+0x71>
f013321e:	a1 64 ad 89 f0       	mov    0xf089ad64,%eax
f0133223:	8b 55 08             	mov    0x8(%ebp),%edx
f0133226:	89 50 04             	mov    %edx,0x4(%eax)
f0133229:	eb 08                	jmp    f0133233 <insert_sorted_with_merge_freeList+0x79>
f013322b:	8b 45 08             	mov    0x8(%ebp),%eax
f013322e:	a3 68 ad 89 f0       	mov    %eax,0xf089ad68
f0133233:	8b 45 08             	mov    0x8(%ebp),%eax
f0133236:	a3 64 ad 89 f0       	mov    %eax,0xf089ad64
f013323b:	8b 45 08             	mov    0x8(%ebp),%eax
f013323e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0133245:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f013324a:	40                   	inc    %eax
f013324b:	a3 70 ad 89 f0       	mov    %eax,0xf089ad70
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f0133250:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0133254:	0f 84 a8 06 00 00    	je     f0133902 <insert_sorted_with_merge_freeList+0x748>
f013325a:	8b 45 08             	mov    0x8(%ebp),%eax
f013325d:	8b 50 08             	mov    0x8(%eax),%edx
f0133260:	8b 45 08             	mov    0x8(%ebp),%eax
f0133263:	8b 40 0c             	mov    0xc(%eax),%eax
f0133266:	01 c2                	add    %eax,%edx
f0133268:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013326b:	8b 40 08             	mov    0x8(%eax),%eax
f013326e:	39 c2                	cmp    %eax,%edx
f0133270:	0f 85 8c 06 00 00    	jne    f0133902 <insert_sorted_with_merge_freeList+0x748>
		{
			blockToInsert->size += head->size;
f0133276:	8b 45 08             	mov    0x8(%ebp),%eax
f0133279:	8b 50 0c             	mov    0xc(%eax),%edx
f013327c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013327f:	8b 40 0c             	mov    0xc(%eax),%eax
f0133282:	01 c2                	add    %eax,%edx
f0133284:	8b 45 08             	mov    0x8(%ebp),%eax
f0133287:	89 50 0c             	mov    %edx,0xc(%eax)
			LIST_REMOVE(&FreeMemBlocksList, head);
f013328a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013328e:	75 17                	jne    f01332a7 <insert_sorted_with_merge_freeList+0xed>
f0133290:	83 ec 04             	sub    $0x4,%esp
f0133293:	68 90 dc 13 f0       	push   $0xf013dc90
f0133298:	68 3c 01 00 00       	push   $0x13c
f013329d:	68 e7 db 13 f0       	push   $0xf013dbe7
f01332a2:	e8 5e cf fc ff       	call   f0100205 <_panic>
f01332a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01332aa:	8b 00                	mov    (%eax),%eax
f01332ac:	85 c0                	test   %eax,%eax
f01332ae:	74 10                	je     f01332c0 <insert_sorted_with_merge_freeList+0x106>
f01332b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01332b3:	8b 00                	mov    (%eax),%eax
f01332b5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01332b8:	8b 52 04             	mov    0x4(%edx),%edx
f01332bb:	89 50 04             	mov    %edx,0x4(%eax)
f01332be:	eb 0b                	jmp    f01332cb <insert_sorted_with_merge_freeList+0x111>
f01332c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01332c3:	8b 40 04             	mov    0x4(%eax),%eax
f01332c6:	a3 68 ad 89 f0       	mov    %eax,0xf089ad68
f01332cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01332ce:	8b 40 04             	mov    0x4(%eax),%eax
f01332d1:	85 c0                	test   %eax,%eax
f01332d3:	74 0f                	je     f01332e4 <insert_sorted_with_merge_freeList+0x12a>
f01332d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01332d8:	8b 40 04             	mov    0x4(%eax),%eax
f01332db:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01332de:	8b 12                	mov    (%edx),%edx
f01332e0:	89 10                	mov    %edx,(%eax)
f01332e2:	eb 0a                	jmp    f01332ee <insert_sorted_with_merge_freeList+0x134>
f01332e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01332e7:	8b 00                	mov    (%eax),%eax
f01332e9:	a3 64 ad 89 f0       	mov    %eax,0xf089ad64
f01332ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01332f1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01332f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01332fa:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0133301:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f0133306:	48                   	dec    %eax
f0133307:	a3 70 ad 89 f0       	mov    %eax,0xf089ad70
			head->size = 0;
f013330c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013330f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
			head->sva = 0;
f0133316:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0133319:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&AvailableMemBlocksList, head);
f0133320:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0133324:	75 17                	jne    f013333d <insert_sorted_with_merge_freeList+0x183>
f0133326:	83 ec 04             	sub    $0x4,%esp
f0133329:	68 c4 db 13 f0       	push   $0xf013dbc4
f013332e:	68 3f 01 00 00       	push   $0x13f
f0133333:	68 e7 db 13 f0       	push   $0xf013dbe7
f0133338:	e8 c8 ce fc ff       	call   f0100205 <_panic>
f013333d:	8b 15 98 ad 89 f0    	mov    0xf089ad98,%edx
f0133343:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0133346:	89 10                	mov    %edx,(%eax)
f0133348:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013334b:	8b 00                	mov    (%eax),%eax
f013334d:	85 c0                	test   %eax,%eax
f013334f:	74 0d                	je     f013335e <insert_sorted_with_merge_freeList+0x1a4>
f0133351:	a1 98 ad 89 f0       	mov    0xf089ad98,%eax
f0133356:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0133359:	89 50 04             	mov    %edx,0x4(%eax)
f013335c:	eb 08                	jmp    f0133366 <insert_sorted_with_merge_freeList+0x1ac>
f013335e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0133361:	a3 9c ad 89 f0       	mov    %eax,0xf089ad9c
f0133366:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0133369:	a3 98 ad 89 f0       	mov    %eax,0xf089ad98
f013336e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0133371:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0133378:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f013337d:	40                   	inc    %eax
f013337e:	a3 a4 ad 89 f0       	mov    %eax,0xf089ada4
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f0133383:	e9 7a 05 00 00       	jmp    f0133902 <insert_sorted_with_merge_freeList+0x748>
			head->size = 0;
			head->sva = 0;
			LIST_INSERT_HEAD(&AvailableMemBlocksList, head);
		}
	}
	else if (blockToInsert->sva >= tail->sva)
f0133388:	8b 45 08             	mov    0x8(%ebp),%eax
f013338b:	8b 50 08             	mov    0x8(%eax),%edx
f013338e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0133391:	8b 40 08             	mov    0x8(%eax),%eax
f0133394:	39 c2                	cmp    %eax,%edx
f0133396:	0f 82 14 01 00 00    	jb     f01334b0 <insert_sorted_with_merge_freeList+0x2f6>
	{
		if(tail->sva + tail->size == blockToInsert->sva)
f013339c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013339f:	8b 50 08             	mov    0x8(%eax),%edx
f01333a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01333a5:	8b 40 0c             	mov    0xc(%eax),%eax
f01333a8:	01 c2                	add    %eax,%edx
f01333aa:	8b 45 08             	mov    0x8(%ebp),%eax
f01333ad:	8b 40 08             	mov    0x8(%eax),%eax
f01333b0:	39 c2                	cmp    %eax,%edx
f01333b2:	0f 85 90 00 00 00    	jne    f0133448 <insert_sorted_with_merge_freeList+0x28e>
		{
			tail->size += blockToInsert->size;
f01333b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01333bb:	8b 50 0c             	mov    0xc(%eax),%edx
f01333be:	8b 45 08             	mov    0x8(%ebp),%eax
f01333c1:	8b 40 0c             	mov    0xc(%eax),%eax
f01333c4:	01 c2                	add    %eax,%edx
f01333c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01333c9:	89 50 0c             	mov    %edx,0xc(%eax)
			blockToInsert->size = 0;
f01333cc:	8b 45 08             	mov    0x8(%ebp),%eax
f01333cf:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
			blockToInsert->sva = 0;
f01333d6:	8b 45 08             	mov    0x8(%ebp),%eax
f01333d9:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f01333e0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01333e4:	75 17                	jne    f01333fd <insert_sorted_with_merge_freeList+0x243>
f01333e6:	83 ec 04             	sub    $0x4,%esp
f01333e9:	68 c4 db 13 f0       	push   $0xf013dbc4
f01333ee:	68 49 01 00 00       	push   $0x149
f01333f3:	68 e7 db 13 f0       	push   $0xf013dbe7
f01333f8:	e8 08 ce fc ff       	call   f0100205 <_panic>
f01333fd:	8b 15 98 ad 89 f0    	mov    0xf089ad98,%edx
f0133403:	8b 45 08             	mov    0x8(%ebp),%eax
f0133406:	89 10                	mov    %edx,(%eax)
f0133408:	8b 45 08             	mov    0x8(%ebp),%eax
f013340b:	8b 00                	mov    (%eax),%eax
f013340d:	85 c0                	test   %eax,%eax
f013340f:	74 0d                	je     f013341e <insert_sorted_with_merge_freeList+0x264>
f0133411:	a1 98 ad 89 f0       	mov    0xf089ad98,%eax
f0133416:	8b 55 08             	mov    0x8(%ebp),%edx
f0133419:	89 50 04             	mov    %edx,0x4(%eax)
f013341c:	eb 08                	jmp    f0133426 <insert_sorted_with_merge_freeList+0x26c>
f013341e:	8b 45 08             	mov    0x8(%ebp),%eax
f0133421:	a3 9c ad 89 f0       	mov    %eax,0xf089ad9c
f0133426:	8b 45 08             	mov    0x8(%ebp),%eax
f0133429:	a3 98 ad 89 f0       	mov    %eax,0xf089ad98
f013342e:	8b 45 08             	mov    0x8(%ebp),%eax
f0133431:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0133438:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f013343d:	40                   	inc    %eax
f013343e:	a3 a4 ad 89 f0       	mov    %eax,0xf089ada4
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0133443:	e9 bb 04 00 00       	jmp    f0133903 <insert_sorted_with_merge_freeList+0x749>
			blockToInsert->size = 0;
			blockToInsert->sva = 0;
			LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
		}
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, blockToInsert);
f0133448:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013344c:	75 17                	jne    f0133465 <insert_sorted_with_merge_freeList+0x2ab>
f013344e:	83 ec 04             	sub    $0x4,%esp
f0133451:	68 38 dc 13 f0       	push   $0xf013dc38
f0133456:	68 4c 01 00 00       	push   $0x14c
f013345b:	68 e7 db 13 f0       	push   $0xf013dbe7
f0133460:	e8 a0 cd fc ff       	call   f0100205 <_panic>
f0133465:	8b 15 68 ad 89 f0    	mov    0xf089ad68,%edx
f013346b:	8b 45 08             	mov    0x8(%ebp),%eax
f013346e:	89 50 04             	mov    %edx,0x4(%eax)
f0133471:	8b 45 08             	mov    0x8(%ebp),%eax
f0133474:	8b 40 04             	mov    0x4(%eax),%eax
f0133477:	85 c0                	test   %eax,%eax
f0133479:	74 0c                	je     f0133487 <insert_sorted_with_merge_freeList+0x2cd>
f013347b:	a1 68 ad 89 f0       	mov    0xf089ad68,%eax
f0133480:	8b 55 08             	mov    0x8(%ebp),%edx
f0133483:	89 10                	mov    %edx,(%eax)
f0133485:	eb 08                	jmp    f013348f <insert_sorted_with_merge_freeList+0x2d5>
f0133487:	8b 45 08             	mov    0x8(%ebp),%eax
f013348a:	a3 64 ad 89 f0       	mov    %eax,0xf089ad64
f013348f:	8b 45 08             	mov    0x8(%ebp),%eax
f0133492:	a3 68 ad 89 f0       	mov    %eax,0xf089ad68
f0133497:	8b 45 08             	mov    0x8(%ebp),%eax
f013349a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01334a0:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f01334a5:	40                   	inc    %eax
f01334a6:	a3 70 ad 89 f0       	mov    %eax,0xf089ad70
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f01334ab:	e9 53 04 00 00       	jmp    f0133903 <insert_sorted_with_merge_freeList+0x749>
	}
	else
	{
		struct MemBlock *currentBlock;
		struct MemBlock *nextBlock;
		LIST_FOREACH(currentBlock, &FreeMemBlocksList)
f01334b0:	a1 64 ad 89 f0       	mov    0xf089ad64,%eax
f01334b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01334b8:	e9 15 04 00 00       	jmp    f01338d2 <insert_sorted_with_merge_freeList+0x718>
		{
			nextBlock = LIST_NEXT(currentBlock);
f01334bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01334c0:	8b 00                	mov    (%eax),%eax
f01334c2:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if(blockToInsert->sva > currentBlock->sva && blockToInsert->sva < nextBlock->sva)
f01334c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01334c8:	8b 50 08             	mov    0x8(%eax),%edx
f01334cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01334ce:	8b 40 08             	mov    0x8(%eax),%eax
f01334d1:	39 c2                	cmp    %eax,%edx
f01334d3:	0f 86 f1 03 00 00    	jbe    f01338ca <insert_sorted_with_merge_freeList+0x710>
f01334d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01334dc:	8b 50 08             	mov    0x8(%eax),%edx
f01334df:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01334e2:	8b 40 08             	mov    0x8(%eax),%eax
f01334e5:	39 c2                	cmp    %eax,%edx
f01334e7:	0f 83 dd 03 00 00    	jae    f01338ca <insert_sorted_with_merge_freeList+0x710>
			{
				if(currentBlock->sva + currentBlock->size == blockToInsert->sva)
f01334ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01334f0:	8b 50 08             	mov    0x8(%eax),%edx
f01334f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01334f6:	8b 40 0c             	mov    0xc(%eax),%eax
f01334f9:	01 c2                	add    %eax,%edx
f01334fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01334fe:	8b 40 08             	mov    0x8(%eax),%eax
f0133501:	39 c2                	cmp    %eax,%edx
f0133503:	0f 85 b9 01 00 00    	jne    f01336c2 <insert_sorted_with_merge_freeList+0x508>
				{
					if(blockToInsert->sva + blockToInsert->size == nextBlock->sva)
f0133509:	8b 45 08             	mov    0x8(%ebp),%eax
f013350c:	8b 50 08             	mov    0x8(%eax),%edx
f013350f:	8b 45 08             	mov    0x8(%ebp),%eax
f0133512:	8b 40 0c             	mov    0xc(%eax),%eax
f0133515:	01 c2                	add    %eax,%edx
f0133517:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013351a:	8b 40 08             	mov    0x8(%eax),%eax
f013351d:	39 c2                	cmp    %eax,%edx
f013351f:	0f 85 0d 01 00 00    	jne    f0133632 <insert_sorted_with_merge_freeList+0x478>
					{
						currentBlock->size += nextBlock->size;
f0133525:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133528:	8b 50 0c             	mov    0xc(%eax),%edx
f013352b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013352e:	8b 40 0c             	mov    0xc(%eax),%eax
f0133531:	01 c2                	add    %eax,%edx
f0133533:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133536:	89 50 0c             	mov    %edx,0xc(%eax)
						LIST_REMOVE(&FreeMemBlocksList, nextBlock);
f0133539:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f013353d:	75 17                	jne    f0133556 <insert_sorted_with_merge_freeList+0x39c>
f013353f:	83 ec 04             	sub    $0x4,%esp
f0133542:	68 90 dc 13 f0       	push   $0xf013dc90
f0133547:	68 5c 01 00 00       	push   $0x15c
f013354c:	68 e7 db 13 f0       	push   $0xf013dbe7
f0133551:	e8 af cc fc ff       	call   f0100205 <_panic>
f0133556:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133559:	8b 00                	mov    (%eax),%eax
f013355b:	85 c0                	test   %eax,%eax
f013355d:	74 10                	je     f013356f <insert_sorted_with_merge_freeList+0x3b5>
f013355f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133562:	8b 00                	mov    (%eax),%eax
f0133564:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0133567:	8b 52 04             	mov    0x4(%edx),%edx
f013356a:	89 50 04             	mov    %edx,0x4(%eax)
f013356d:	eb 0b                	jmp    f013357a <insert_sorted_with_merge_freeList+0x3c0>
f013356f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133572:	8b 40 04             	mov    0x4(%eax),%eax
f0133575:	a3 68 ad 89 f0       	mov    %eax,0xf089ad68
f013357a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013357d:	8b 40 04             	mov    0x4(%eax),%eax
f0133580:	85 c0                	test   %eax,%eax
f0133582:	74 0f                	je     f0133593 <insert_sorted_with_merge_freeList+0x3d9>
f0133584:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133587:	8b 40 04             	mov    0x4(%eax),%eax
f013358a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f013358d:	8b 12                	mov    (%edx),%edx
f013358f:	89 10                	mov    %edx,(%eax)
f0133591:	eb 0a                	jmp    f013359d <insert_sorted_with_merge_freeList+0x3e3>
f0133593:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133596:	8b 00                	mov    (%eax),%eax
f0133598:	a3 64 ad 89 f0       	mov    %eax,0xf089ad64
f013359d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01335a0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01335a6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01335a9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01335b0:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f01335b5:	48                   	dec    %eax
f01335b6:	a3 70 ad 89 f0       	mov    %eax,0xf089ad70
						nextBlock->sva = 0;
f01335bb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01335be:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
						nextBlock->size = 0;
f01335c5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01335c8:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
						LIST_INSERT_HEAD(&AvailableMemBlocksList, nextBlock);
f01335cf:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01335d3:	75 17                	jne    f01335ec <insert_sorted_with_merge_freeList+0x432>
f01335d5:	83 ec 04             	sub    $0x4,%esp
f01335d8:	68 c4 db 13 f0       	push   $0xf013dbc4
f01335dd:	68 5f 01 00 00       	push   $0x15f
f01335e2:	68 e7 db 13 f0       	push   $0xf013dbe7
f01335e7:	e8 19 cc fc ff       	call   f0100205 <_panic>
f01335ec:	8b 15 98 ad 89 f0    	mov    0xf089ad98,%edx
f01335f2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01335f5:	89 10                	mov    %edx,(%eax)
f01335f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01335fa:	8b 00                	mov    (%eax),%eax
f01335fc:	85 c0                	test   %eax,%eax
f01335fe:	74 0d                	je     f013360d <insert_sorted_with_merge_freeList+0x453>
f0133600:	a1 98 ad 89 f0       	mov    0xf089ad98,%eax
f0133605:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0133608:	89 50 04             	mov    %edx,0x4(%eax)
f013360b:	eb 08                	jmp    f0133615 <insert_sorted_with_merge_freeList+0x45b>
f013360d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133610:	a3 9c ad 89 f0       	mov    %eax,0xf089ad9c
f0133615:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133618:	a3 98 ad 89 f0       	mov    %eax,0xf089ad98
f013361d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133620:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0133627:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f013362c:	40                   	inc    %eax
f013362d:	a3 a4 ad 89 f0       	mov    %eax,0xf089ada4
					}
					currentBlock->size += blockToInsert->size;
f0133632:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133635:	8b 50 0c             	mov    0xc(%eax),%edx
f0133638:	8b 45 08             	mov    0x8(%ebp),%eax
f013363b:	8b 40 0c             	mov    0xc(%eax),%eax
f013363e:	01 c2                	add    %eax,%edx
f0133640:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133643:	89 50 0c             	mov    %edx,0xc(%eax)
					blockToInsert->sva = 0;
f0133646:	8b 45 08             	mov    0x8(%ebp),%eax
f0133649:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					blockToInsert->size = 0;
f0133650:	8b 45 08             	mov    0x8(%ebp),%eax
f0133653:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f013365a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013365e:	75 17                	jne    f0133677 <insert_sorted_with_merge_freeList+0x4bd>
f0133660:	83 ec 04             	sub    $0x4,%esp
f0133663:	68 c4 db 13 f0       	push   $0xf013dbc4
f0133668:	68 64 01 00 00       	push   $0x164
f013366d:	68 e7 db 13 f0       	push   $0xf013dbe7
f0133672:	e8 8e cb fc ff       	call   f0100205 <_panic>
f0133677:	8b 15 98 ad 89 f0    	mov    0xf089ad98,%edx
f013367d:	8b 45 08             	mov    0x8(%ebp),%eax
f0133680:	89 10                	mov    %edx,(%eax)
f0133682:	8b 45 08             	mov    0x8(%ebp),%eax
f0133685:	8b 00                	mov    (%eax),%eax
f0133687:	85 c0                	test   %eax,%eax
f0133689:	74 0d                	je     f0133698 <insert_sorted_with_merge_freeList+0x4de>
f013368b:	a1 98 ad 89 f0       	mov    0xf089ad98,%eax
f0133690:	8b 55 08             	mov    0x8(%ebp),%edx
f0133693:	89 50 04             	mov    %edx,0x4(%eax)
f0133696:	eb 08                	jmp    f01336a0 <insert_sorted_with_merge_freeList+0x4e6>
f0133698:	8b 45 08             	mov    0x8(%ebp),%eax
f013369b:	a3 9c ad 89 f0       	mov    %eax,0xf089ad9c
f01336a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01336a3:	a3 98 ad 89 f0       	mov    %eax,0xf089ad98
f01336a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01336ab:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01336b2:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f01336b7:	40                   	inc    %eax
f01336b8:	a3 a4 ad 89 f0       	mov    %eax,0xf089ada4
					break;
f01336bd:	e9 41 02 00 00       	jmp    f0133903 <insert_sorted_with_merge_freeList+0x749>
				}
				else if(blockToInsert->sva + blockToInsert->size == nextBlock->sva)
f01336c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01336c5:	8b 50 08             	mov    0x8(%eax),%edx
f01336c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01336cb:	8b 40 0c             	mov    0xc(%eax),%eax
f01336ce:	01 c2                	add    %eax,%edx
f01336d0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01336d3:	8b 40 08             	mov    0x8(%eax),%eax
f01336d6:	39 c2                	cmp    %eax,%edx
f01336d8:	0f 85 7c 01 00 00    	jne    f013385a <insert_sorted_with_merge_freeList+0x6a0>
				{
					LIST_INSERT_BEFORE(&FreeMemBlocksList, nextBlock, blockToInsert);
f01336de:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01336e2:	74 06                	je     f01336ea <insert_sorted_with_merge_freeList+0x530>
f01336e4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01336e8:	75 17                	jne    f0133701 <insert_sorted_with_merge_freeList+0x547>
f01336ea:	83 ec 04             	sub    $0x4,%esp
f01336ed:	68 00 dc 13 f0       	push   $0xf013dc00
f01336f2:	68 69 01 00 00       	push   $0x169
f01336f7:	68 e7 db 13 f0       	push   $0xf013dbe7
f01336fc:	e8 04 cb fc ff       	call   f0100205 <_panic>
f0133701:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133704:	8b 50 04             	mov    0x4(%eax),%edx
f0133707:	8b 45 08             	mov    0x8(%ebp),%eax
f013370a:	89 50 04             	mov    %edx,0x4(%eax)
f013370d:	8b 45 08             	mov    0x8(%ebp),%eax
f0133710:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0133713:	89 10                	mov    %edx,(%eax)
f0133715:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133718:	8b 40 04             	mov    0x4(%eax),%eax
f013371b:	85 c0                	test   %eax,%eax
f013371d:	74 0d                	je     f013372c <insert_sorted_with_merge_freeList+0x572>
f013371f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133722:	8b 40 04             	mov    0x4(%eax),%eax
f0133725:	8b 55 08             	mov    0x8(%ebp),%edx
f0133728:	89 10                	mov    %edx,(%eax)
f013372a:	eb 08                	jmp    f0133734 <insert_sorted_with_merge_freeList+0x57a>
f013372c:	8b 45 08             	mov    0x8(%ebp),%eax
f013372f:	a3 64 ad 89 f0       	mov    %eax,0xf089ad64
f0133734:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133737:	8b 55 08             	mov    0x8(%ebp),%edx
f013373a:	89 50 04             	mov    %edx,0x4(%eax)
f013373d:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f0133742:	40                   	inc    %eax
f0133743:	a3 70 ad 89 f0       	mov    %eax,0xf089ad70
					blockToInsert->size += nextBlock->size;
f0133748:	8b 45 08             	mov    0x8(%ebp),%eax
f013374b:	8b 50 0c             	mov    0xc(%eax),%edx
f013374e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133751:	8b 40 0c             	mov    0xc(%eax),%eax
f0133754:	01 c2                	add    %eax,%edx
f0133756:	8b 45 08             	mov    0x8(%ebp),%eax
f0133759:	89 50 0c             	mov    %edx,0xc(%eax)
					LIST_REMOVE(&FreeMemBlocksList, nextBlock);
f013375c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0133760:	75 17                	jne    f0133779 <insert_sorted_with_merge_freeList+0x5bf>
f0133762:	83 ec 04             	sub    $0x4,%esp
f0133765:	68 90 dc 13 f0       	push   $0xf013dc90
f013376a:	68 6b 01 00 00       	push   $0x16b
f013376f:	68 e7 db 13 f0       	push   $0xf013dbe7
f0133774:	e8 8c ca fc ff       	call   f0100205 <_panic>
f0133779:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013377c:	8b 00                	mov    (%eax),%eax
f013377e:	85 c0                	test   %eax,%eax
f0133780:	74 10                	je     f0133792 <insert_sorted_with_merge_freeList+0x5d8>
f0133782:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133785:	8b 00                	mov    (%eax),%eax
f0133787:	8b 55 e8             	mov    -0x18(%ebp),%edx
f013378a:	8b 52 04             	mov    0x4(%edx),%edx
f013378d:	89 50 04             	mov    %edx,0x4(%eax)
f0133790:	eb 0b                	jmp    f013379d <insert_sorted_with_merge_freeList+0x5e3>
f0133792:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133795:	8b 40 04             	mov    0x4(%eax),%eax
f0133798:	a3 68 ad 89 f0       	mov    %eax,0xf089ad68
f013379d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01337a0:	8b 40 04             	mov    0x4(%eax),%eax
f01337a3:	85 c0                	test   %eax,%eax
f01337a5:	74 0f                	je     f01337b6 <insert_sorted_with_merge_freeList+0x5fc>
f01337a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01337aa:	8b 40 04             	mov    0x4(%eax),%eax
f01337ad:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01337b0:	8b 12                	mov    (%edx),%edx
f01337b2:	89 10                	mov    %edx,(%eax)
f01337b4:	eb 0a                	jmp    f01337c0 <insert_sorted_with_merge_freeList+0x606>
f01337b6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01337b9:	8b 00                	mov    (%eax),%eax
f01337bb:	a3 64 ad 89 f0       	mov    %eax,0xf089ad64
f01337c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01337c3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01337c9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01337cc:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01337d3:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f01337d8:	48                   	dec    %eax
f01337d9:	a3 70 ad 89 f0       	mov    %eax,0xf089ad70
					nextBlock->sva = 0;
f01337de:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01337e1:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					nextBlock->size = 0;
f01337e8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01337eb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					LIST_INSERT_HEAD(&AvailableMemBlocksList, nextBlock);
f01337f2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01337f6:	75 17                	jne    f013380f <insert_sorted_with_merge_freeList+0x655>
f01337f8:	83 ec 04             	sub    $0x4,%esp
f01337fb:	68 c4 db 13 f0       	push   $0xf013dbc4
f0133800:	68 6e 01 00 00       	push   $0x16e
f0133805:	68 e7 db 13 f0       	push   $0xf013dbe7
f013380a:	e8 f6 c9 fc ff       	call   f0100205 <_panic>
f013380f:	8b 15 98 ad 89 f0    	mov    0xf089ad98,%edx
f0133815:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133818:	89 10                	mov    %edx,(%eax)
f013381a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013381d:	8b 00                	mov    (%eax),%eax
f013381f:	85 c0                	test   %eax,%eax
f0133821:	74 0d                	je     f0133830 <insert_sorted_with_merge_freeList+0x676>
f0133823:	a1 98 ad 89 f0       	mov    0xf089ad98,%eax
f0133828:	8b 55 e8             	mov    -0x18(%ebp),%edx
f013382b:	89 50 04             	mov    %edx,0x4(%eax)
f013382e:	eb 08                	jmp    f0133838 <insert_sorted_with_merge_freeList+0x67e>
f0133830:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133833:	a3 9c ad 89 f0       	mov    %eax,0xf089ad9c
f0133838:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013383b:	a3 98 ad 89 f0       	mov    %eax,0xf089ad98
f0133840:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133843:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013384a:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f013384f:	40                   	inc    %eax
f0133850:	a3 a4 ad 89 f0       	mov    %eax,0xf089ada4
					break;
f0133855:	e9 a9 00 00 00       	jmp    f0133903 <insert_sorted_with_merge_freeList+0x749>
				}
				else
				{
					LIST_INSERT_AFTER(&FreeMemBlocksList, currentBlock, blockToInsert);
f013385a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013385e:	74 06                	je     f0133866 <insert_sorted_with_merge_freeList+0x6ac>
f0133860:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0133864:	75 17                	jne    f013387d <insert_sorted_with_merge_freeList+0x6c3>
f0133866:	83 ec 04             	sub    $0x4,%esp
f0133869:	68 5c dc 13 f0       	push   $0xf013dc5c
f013386e:	68 73 01 00 00       	push   $0x173
f0133873:	68 e7 db 13 f0       	push   $0xf013dbe7
f0133878:	e8 88 c9 fc ff       	call   f0100205 <_panic>
f013387d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133880:	8b 10                	mov    (%eax),%edx
f0133882:	8b 45 08             	mov    0x8(%ebp),%eax
f0133885:	89 10                	mov    %edx,(%eax)
f0133887:	8b 45 08             	mov    0x8(%ebp),%eax
f013388a:	8b 00                	mov    (%eax),%eax
f013388c:	85 c0                	test   %eax,%eax
f013388e:	74 0b                	je     f013389b <insert_sorted_with_merge_freeList+0x6e1>
f0133890:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133893:	8b 00                	mov    (%eax),%eax
f0133895:	8b 55 08             	mov    0x8(%ebp),%edx
f0133898:	89 50 04             	mov    %edx,0x4(%eax)
f013389b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013389e:	8b 55 08             	mov    0x8(%ebp),%edx
f01338a1:	89 10                	mov    %edx,(%eax)
f01338a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01338a6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01338a9:	89 50 04             	mov    %edx,0x4(%eax)
f01338ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01338af:	8b 00                	mov    (%eax),%eax
f01338b1:	85 c0                	test   %eax,%eax
f01338b3:	75 08                	jne    f01338bd <insert_sorted_with_merge_freeList+0x703>
f01338b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01338b8:	a3 68 ad 89 f0       	mov    %eax,0xf089ad68
f01338bd:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f01338c2:	40                   	inc    %eax
f01338c3:	a3 70 ad 89 f0       	mov    %eax,0xf089ad70
					break;
f01338c8:	eb 39                	jmp    f0133903 <insert_sorted_with_merge_freeList+0x749>
	}
	else
	{
		struct MemBlock *currentBlock;
		struct MemBlock *nextBlock;
		LIST_FOREACH(currentBlock, &FreeMemBlocksList)
f01338ca:	a1 6c ad 89 f0       	mov    0xf089ad6c,%eax
f01338cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01338d2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01338d6:	74 07                	je     f01338df <insert_sorted_with_merge_freeList+0x725>
f01338d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01338db:	8b 00                	mov    (%eax),%eax
f01338dd:	eb 05                	jmp    f01338e4 <insert_sorted_with_merge_freeList+0x72a>
f01338df:	b8 00 00 00 00       	mov    $0x0,%eax
f01338e4:	a3 6c ad 89 f0       	mov    %eax,0xf089ad6c
f01338e9:	a1 6c ad 89 f0       	mov    0xf089ad6c,%eax
f01338ee:	85 c0                	test   %eax,%eax
f01338f0:	0f 85 c7 fb ff ff    	jne    f01334bd <insert_sorted_with_merge_freeList+0x303>
f01338f6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01338fa:	0f 85 bd fb ff ff    	jne    f01334bd <insert_sorted_with_merge_freeList+0x303>
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0133900:	eb 01                	jmp    f0133903 <insert_sorted_with_merge_freeList+0x749>
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f0133902:	90                   	nop
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0133903:	90                   	nop
f0133904:	c9                   	leave  
f0133905:	c3                   	ret    
f0133906:	66 90                	xchg   %ax,%ax

f0133908 <__udivdi3>:
f0133908:	55                   	push   %ebp
f0133909:	57                   	push   %edi
f013390a:	56                   	push   %esi
f013390b:	53                   	push   %ebx
f013390c:	83 ec 1c             	sub    $0x1c,%esp
f013390f:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f0133913:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f0133917:	8b 7c 24 38          	mov    0x38(%esp),%edi
f013391b:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f013391f:	89 ca                	mov    %ecx,%edx
f0133921:	89 f8                	mov    %edi,%eax
f0133923:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f0133927:	85 f6                	test   %esi,%esi
f0133929:	75 2d                	jne    f0133958 <__udivdi3+0x50>
f013392b:	39 cf                	cmp    %ecx,%edi
f013392d:	77 65                	ja     f0133994 <__udivdi3+0x8c>
f013392f:	89 fd                	mov    %edi,%ebp
f0133931:	85 ff                	test   %edi,%edi
f0133933:	75 0b                	jne    f0133940 <__udivdi3+0x38>
f0133935:	b8 01 00 00 00       	mov    $0x1,%eax
f013393a:	31 d2                	xor    %edx,%edx
f013393c:	f7 f7                	div    %edi
f013393e:	89 c5                	mov    %eax,%ebp
f0133940:	31 d2                	xor    %edx,%edx
f0133942:	89 c8                	mov    %ecx,%eax
f0133944:	f7 f5                	div    %ebp
f0133946:	89 c1                	mov    %eax,%ecx
f0133948:	89 d8                	mov    %ebx,%eax
f013394a:	f7 f5                	div    %ebp
f013394c:	89 cf                	mov    %ecx,%edi
f013394e:	89 fa                	mov    %edi,%edx
f0133950:	83 c4 1c             	add    $0x1c,%esp
f0133953:	5b                   	pop    %ebx
f0133954:	5e                   	pop    %esi
f0133955:	5f                   	pop    %edi
f0133956:	5d                   	pop    %ebp
f0133957:	c3                   	ret    
f0133958:	39 ce                	cmp    %ecx,%esi
f013395a:	77 28                	ja     f0133984 <__udivdi3+0x7c>
f013395c:	0f bd fe             	bsr    %esi,%edi
f013395f:	83 f7 1f             	xor    $0x1f,%edi
f0133962:	75 40                	jne    f01339a4 <__udivdi3+0x9c>
f0133964:	39 ce                	cmp    %ecx,%esi
f0133966:	72 0a                	jb     f0133972 <__udivdi3+0x6a>
f0133968:	3b 44 24 08          	cmp    0x8(%esp),%eax
f013396c:	0f 87 9e 00 00 00    	ja     f0133a10 <__udivdi3+0x108>
f0133972:	b8 01 00 00 00       	mov    $0x1,%eax
f0133977:	89 fa                	mov    %edi,%edx
f0133979:	83 c4 1c             	add    $0x1c,%esp
f013397c:	5b                   	pop    %ebx
f013397d:	5e                   	pop    %esi
f013397e:	5f                   	pop    %edi
f013397f:	5d                   	pop    %ebp
f0133980:	c3                   	ret    
f0133981:	8d 76 00             	lea    0x0(%esi),%esi
f0133984:	31 ff                	xor    %edi,%edi
f0133986:	31 c0                	xor    %eax,%eax
f0133988:	89 fa                	mov    %edi,%edx
f013398a:	83 c4 1c             	add    $0x1c,%esp
f013398d:	5b                   	pop    %ebx
f013398e:	5e                   	pop    %esi
f013398f:	5f                   	pop    %edi
f0133990:	5d                   	pop    %ebp
f0133991:	c3                   	ret    
f0133992:	66 90                	xchg   %ax,%ax
f0133994:	89 d8                	mov    %ebx,%eax
f0133996:	f7 f7                	div    %edi
f0133998:	31 ff                	xor    %edi,%edi
f013399a:	89 fa                	mov    %edi,%edx
f013399c:	83 c4 1c             	add    $0x1c,%esp
f013399f:	5b                   	pop    %ebx
f01339a0:	5e                   	pop    %esi
f01339a1:	5f                   	pop    %edi
f01339a2:	5d                   	pop    %ebp
f01339a3:	c3                   	ret    
f01339a4:	bd 20 00 00 00       	mov    $0x20,%ebp
f01339a9:	89 eb                	mov    %ebp,%ebx
f01339ab:	29 fb                	sub    %edi,%ebx
f01339ad:	89 f9                	mov    %edi,%ecx
f01339af:	d3 e6                	shl    %cl,%esi
f01339b1:	89 c5                	mov    %eax,%ebp
f01339b3:	88 d9                	mov    %bl,%cl
f01339b5:	d3 ed                	shr    %cl,%ebp
f01339b7:	89 e9                	mov    %ebp,%ecx
f01339b9:	09 f1                	or     %esi,%ecx
f01339bb:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f01339bf:	89 f9                	mov    %edi,%ecx
f01339c1:	d3 e0                	shl    %cl,%eax
f01339c3:	89 c5                	mov    %eax,%ebp
f01339c5:	89 d6                	mov    %edx,%esi
f01339c7:	88 d9                	mov    %bl,%cl
f01339c9:	d3 ee                	shr    %cl,%esi
f01339cb:	89 f9                	mov    %edi,%ecx
f01339cd:	d3 e2                	shl    %cl,%edx
f01339cf:	8b 44 24 08          	mov    0x8(%esp),%eax
f01339d3:	88 d9                	mov    %bl,%cl
f01339d5:	d3 e8                	shr    %cl,%eax
f01339d7:	09 c2                	or     %eax,%edx
f01339d9:	89 d0                	mov    %edx,%eax
f01339db:	89 f2                	mov    %esi,%edx
f01339dd:	f7 74 24 0c          	divl   0xc(%esp)
f01339e1:	89 d6                	mov    %edx,%esi
f01339e3:	89 c3                	mov    %eax,%ebx
f01339e5:	f7 e5                	mul    %ebp
f01339e7:	39 d6                	cmp    %edx,%esi
f01339e9:	72 19                	jb     f0133a04 <__udivdi3+0xfc>
f01339eb:	74 0b                	je     f01339f8 <__udivdi3+0xf0>
f01339ed:	89 d8                	mov    %ebx,%eax
f01339ef:	31 ff                	xor    %edi,%edi
f01339f1:	e9 58 ff ff ff       	jmp    f013394e <__udivdi3+0x46>
f01339f6:	66 90                	xchg   %ax,%ax
f01339f8:	8b 54 24 08          	mov    0x8(%esp),%edx
f01339fc:	89 f9                	mov    %edi,%ecx
f01339fe:	d3 e2                	shl    %cl,%edx
f0133a00:	39 c2                	cmp    %eax,%edx
f0133a02:	73 e9                	jae    f01339ed <__udivdi3+0xe5>
f0133a04:	8d 43 ff             	lea    -0x1(%ebx),%eax
f0133a07:	31 ff                	xor    %edi,%edi
f0133a09:	e9 40 ff ff ff       	jmp    f013394e <__udivdi3+0x46>
f0133a0e:	66 90                	xchg   %ax,%ax
f0133a10:	31 c0                	xor    %eax,%eax
f0133a12:	e9 37 ff ff ff       	jmp    f013394e <__udivdi3+0x46>
f0133a17:	90                   	nop

f0133a18 <__umoddi3>:
f0133a18:	55                   	push   %ebp
f0133a19:	57                   	push   %edi
f0133a1a:	56                   	push   %esi
f0133a1b:	53                   	push   %ebx
f0133a1c:	83 ec 1c             	sub    $0x1c,%esp
f0133a1f:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f0133a23:	8b 74 24 34          	mov    0x34(%esp),%esi
f0133a27:	8b 7c 24 38          	mov    0x38(%esp),%edi
f0133a2b:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f0133a2f:	89 44 24 0c          	mov    %eax,0xc(%esp)
f0133a33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f0133a37:	89 f3                	mov    %esi,%ebx
f0133a39:	89 fa                	mov    %edi,%edx
f0133a3b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f0133a3f:	89 34 24             	mov    %esi,(%esp)
f0133a42:	85 c0                	test   %eax,%eax
f0133a44:	75 1a                	jne    f0133a60 <__umoddi3+0x48>
f0133a46:	39 f7                	cmp    %esi,%edi
f0133a48:	0f 86 a2 00 00 00    	jbe    f0133af0 <__umoddi3+0xd8>
f0133a4e:	89 c8                	mov    %ecx,%eax
f0133a50:	89 f2                	mov    %esi,%edx
f0133a52:	f7 f7                	div    %edi
f0133a54:	89 d0                	mov    %edx,%eax
f0133a56:	31 d2                	xor    %edx,%edx
f0133a58:	83 c4 1c             	add    $0x1c,%esp
f0133a5b:	5b                   	pop    %ebx
f0133a5c:	5e                   	pop    %esi
f0133a5d:	5f                   	pop    %edi
f0133a5e:	5d                   	pop    %ebp
f0133a5f:	c3                   	ret    
f0133a60:	39 f0                	cmp    %esi,%eax
f0133a62:	0f 87 ac 00 00 00    	ja     f0133b14 <__umoddi3+0xfc>
f0133a68:	0f bd e8             	bsr    %eax,%ebp
f0133a6b:	83 f5 1f             	xor    $0x1f,%ebp
f0133a6e:	0f 84 ac 00 00 00    	je     f0133b20 <__umoddi3+0x108>
f0133a74:	bf 20 00 00 00       	mov    $0x20,%edi
f0133a79:	29 ef                	sub    %ebp,%edi
f0133a7b:	89 fe                	mov    %edi,%esi
f0133a7d:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f0133a81:	89 e9                	mov    %ebp,%ecx
f0133a83:	d3 e0                	shl    %cl,%eax
f0133a85:	89 d7                	mov    %edx,%edi
f0133a87:	89 f1                	mov    %esi,%ecx
f0133a89:	d3 ef                	shr    %cl,%edi
f0133a8b:	09 c7                	or     %eax,%edi
f0133a8d:	89 e9                	mov    %ebp,%ecx
f0133a8f:	d3 e2                	shl    %cl,%edx
f0133a91:	89 14 24             	mov    %edx,(%esp)
f0133a94:	89 d8                	mov    %ebx,%eax
f0133a96:	d3 e0                	shl    %cl,%eax
f0133a98:	89 c2                	mov    %eax,%edx
f0133a9a:	8b 44 24 08          	mov    0x8(%esp),%eax
f0133a9e:	d3 e0                	shl    %cl,%eax
f0133aa0:	89 44 24 04          	mov    %eax,0x4(%esp)
f0133aa4:	8b 44 24 08          	mov    0x8(%esp),%eax
f0133aa8:	89 f1                	mov    %esi,%ecx
f0133aaa:	d3 e8                	shr    %cl,%eax
f0133aac:	09 d0                	or     %edx,%eax
f0133aae:	d3 eb                	shr    %cl,%ebx
f0133ab0:	89 da                	mov    %ebx,%edx
f0133ab2:	f7 f7                	div    %edi
f0133ab4:	89 d3                	mov    %edx,%ebx
f0133ab6:	f7 24 24             	mull   (%esp)
f0133ab9:	89 c6                	mov    %eax,%esi
f0133abb:	89 d1                	mov    %edx,%ecx
f0133abd:	39 d3                	cmp    %edx,%ebx
f0133abf:	0f 82 87 00 00 00    	jb     f0133b4c <__umoddi3+0x134>
f0133ac5:	0f 84 91 00 00 00    	je     f0133b5c <__umoddi3+0x144>
f0133acb:	8b 54 24 04          	mov    0x4(%esp),%edx
f0133acf:	29 f2                	sub    %esi,%edx
f0133ad1:	19 cb                	sbb    %ecx,%ebx
f0133ad3:	89 d8                	mov    %ebx,%eax
f0133ad5:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f0133ad9:	d3 e0                	shl    %cl,%eax
f0133adb:	89 e9                	mov    %ebp,%ecx
f0133add:	d3 ea                	shr    %cl,%edx
f0133adf:	09 d0                	or     %edx,%eax
f0133ae1:	89 e9                	mov    %ebp,%ecx
f0133ae3:	d3 eb                	shr    %cl,%ebx
f0133ae5:	89 da                	mov    %ebx,%edx
f0133ae7:	83 c4 1c             	add    $0x1c,%esp
f0133aea:	5b                   	pop    %ebx
f0133aeb:	5e                   	pop    %esi
f0133aec:	5f                   	pop    %edi
f0133aed:	5d                   	pop    %ebp
f0133aee:	c3                   	ret    
f0133aef:	90                   	nop
f0133af0:	89 fd                	mov    %edi,%ebp
f0133af2:	85 ff                	test   %edi,%edi
f0133af4:	75 0b                	jne    f0133b01 <__umoddi3+0xe9>
f0133af6:	b8 01 00 00 00       	mov    $0x1,%eax
f0133afb:	31 d2                	xor    %edx,%edx
f0133afd:	f7 f7                	div    %edi
f0133aff:	89 c5                	mov    %eax,%ebp
f0133b01:	89 f0                	mov    %esi,%eax
f0133b03:	31 d2                	xor    %edx,%edx
f0133b05:	f7 f5                	div    %ebp
f0133b07:	89 c8                	mov    %ecx,%eax
f0133b09:	f7 f5                	div    %ebp
f0133b0b:	89 d0                	mov    %edx,%eax
f0133b0d:	e9 44 ff ff ff       	jmp    f0133a56 <__umoddi3+0x3e>
f0133b12:	66 90                	xchg   %ax,%ax
f0133b14:	89 c8                	mov    %ecx,%eax
f0133b16:	89 f2                	mov    %esi,%edx
f0133b18:	83 c4 1c             	add    $0x1c,%esp
f0133b1b:	5b                   	pop    %ebx
f0133b1c:	5e                   	pop    %esi
f0133b1d:	5f                   	pop    %edi
f0133b1e:	5d                   	pop    %ebp
f0133b1f:	c3                   	ret    
f0133b20:	3b 04 24             	cmp    (%esp),%eax
f0133b23:	72 06                	jb     f0133b2b <__umoddi3+0x113>
f0133b25:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f0133b29:	77 0f                	ja     f0133b3a <__umoddi3+0x122>
f0133b2b:	89 f2                	mov    %esi,%edx
f0133b2d:	29 f9                	sub    %edi,%ecx
f0133b2f:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f0133b33:	89 14 24             	mov    %edx,(%esp)
f0133b36:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f0133b3a:	8b 44 24 04          	mov    0x4(%esp),%eax
f0133b3e:	8b 14 24             	mov    (%esp),%edx
f0133b41:	83 c4 1c             	add    $0x1c,%esp
f0133b44:	5b                   	pop    %ebx
f0133b45:	5e                   	pop    %esi
f0133b46:	5f                   	pop    %edi
f0133b47:	5d                   	pop    %ebp
f0133b48:	c3                   	ret    
f0133b49:	8d 76 00             	lea    0x0(%esi),%esi
f0133b4c:	2b 04 24             	sub    (%esp),%eax
f0133b4f:	19 fa                	sbb    %edi,%edx
f0133b51:	89 d1                	mov    %edx,%ecx
f0133b53:	89 c6                	mov    %eax,%esi
f0133b55:	e9 71 ff ff ff       	jmp    f0133acb <__umoddi3+0xb3>
f0133b5a:	66 90                	xchg   %ax,%ax
f0133b5c:	39 44 24 04          	cmp    %eax,0x4(%esp)
f0133b60:	72 ea                	jb     f0133b4c <__umoddi3+0x134>
f0133b62:	89 d9                	mov    %ebx,%ecx
f0133b64:	e9 62 ff ff ff       	jmp    f0133acb <__umoddi3+0xb3>
